import{S as kft,i as Rft,s as Sft,e as a,k as l,w as f,t as o,L as Pft,c as n,d as t,m as i,a as s,x as m,h as r,b as c,J as e,g as b,y as g,q as h,o as p,B as _}from"../../../chunks/vendor-9e2b328e.js";import{T as TCr}from"../../../chunks/Tip-76f97a76.js";import{D as E}from"../../../chunks/Docstring-50fd6873.js";import{C as w}from"../../../chunks/CodeBlock-b9ff96e9.js";import{I as z}from"../../../chunks/IconCopyLink-fd0e58fd.js";import"../../../chunks/CopyButton-4b97cbf7.js";function $ft(ui){let J,Ae,le,me,oo,ce,ue,No,bi,mf,ra,vi,Ti,AC,gf,Ee,so,Fi,Bn,LC,xn,kn,BC,Ci,Rn,xC,Mi,hf,ka;return{c(){J=a("p"),Ae=o("If your "),le=a("code"),me=o("NewModelConfig"),oo=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),No=o(`, make sure its
`),bi=a("code"),mf=o("model_type"),ra=o(" attribute is set to the same key you use when registering the config (here "),vi=a("code"),Ti=o('"new-model"'),AC=o(")."),gf=l(),Ee=a("p"),so=o("Likewise, if your "),Fi=a("code"),Bn=o("NewModel"),LC=o(" is a subclass of "),xn=a("a"),kn=o("PreTrainedModel"),BC=o(`, make sure its
`),Ci=a("code"),Rn=o("config_class"),xC=o(` attribute is set to the same class you use when registering the model (here
`),Mi=a("code"),hf=o("NewModelConfig"),ka=o(")."),this.h()},l(lo){J=n(lo,"P",{});var ge=s(J);Ae=r(ge,"If your "),le=n(ge,"CODE",{});var t0=s(le);me=r(t0,"NewModelConfig"),t0.forEach(t),oo=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Ei=s(ce);ue=r(Ei,"PretrainedConfig"),Ei.forEach(t),No=r(ge,`, make sure its
`),bi=n(ge,"CODE",{});var a0=s(bi);mf=r(a0,"model_type"),a0.forEach(t),ra=r(ge," attribute is set to the same key you use when registering the config (here "),vi=n(ge,"CODE",{});var n0=s(vi);Ti=r(n0,'"new-model"'),n0.forEach(t),AC=r(ge,")."),ge.forEach(t),gf=i(lo),Ee=n(lo,"P",{});var Do=s(Ee);so=r(Do,"Likewise, if your "),Fi=n(Do,"CODE",{});var Ra=s(Fi);Bn=r(Ra,"NewModel"),Ra.forEach(t),LC=r(Do," is a subclass of "),xn=n(Do,"A",{href:!0});var s0=s(xn);kn=r(s0,"PreTrainedModel"),s0.forEach(t),BC=r(Do,`, make sure its
`),Ci=n(Do,"CODE",{});var pf=s(Ci);Rn=r(pf,"config_class"),pf.forEach(t),xC=r(Do,` attribute is set to the same class you use when registering the model (here
`),Mi=n(Do,"CODE",{});var l0=s(Mi);hf=r(l0,"NewModelConfig"),l0.forEach(t),ka=r(Do,")."),Do.forEach(t),this.h()},h(){c(xn,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel")},m(lo,ge){b(lo,J,ge),e(J,Ae),e(J,le),e(le,me),e(J,oo),e(J,ce),e(ce,ue),e(J,No),e(J,bi),e(bi,mf),e(J,ra),e(J,vi),e(vi,Ti),e(J,AC),b(lo,gf,ge),b(lo,Ee,ge),e(Ee,so),e(Ee,Fi),e(Fi,Bn),e(Ee,LC),e(Ee,xn),e(xn,kn),e(Ee,BC),e(Ee,Ci),e(Ci,Rn),e(Ee,xC),e(Ee,Mi),e(Mi,hf),e(Ee,ka)},d(lo){lo&&t(J),lo&&t(gf),lo&&t(Ee)}}}function Ift(ui){let J,Ae,le,me,oo;return{c(){J=a("p"),Ae=o("Passing "),le=a("code"),me=o("use_auth_token=True"),oo=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),le=n(ue,"CODE",{});var No=s(le);me=r(No,"use_auth_token=True"),No.forEach(t),oo=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,le),e(le,me),e(J,oo)},d(ce){ce&&t(J)}}}function jft(ui){let J,Ae,le,me,oo;return{c(){J=a("p"),Ae=o("Passing "),le=a("code"),me=o("use_auth_token=True"),oo=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),le=n(ue,"CODE",{});var No=s(le);me=r(No,"use_auth_token=True"),No.forEach(t),oo=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,le),e(le,me),e(J,oo)},d(ce){ce&&t(J)}}}function Nft(ui){let J,Ae,le,me,oo,ce,ue,No,bi,mf,ra,vi,Ti,AC,gf,Ee,so,Fi,Bn,LC,xn,kn,BC,Ci,Rn,xC,Mi,hf,ka,lo,ge,t0,Ei,a0,n0,Do,Ra,s0,pf,l0,vBe,pAe,yi,_f,jz,kC,TBe,Nz,FBe,_Ae,Sn,CBe,Dz,MBe,EBe,qz,yBe,wBe,uAe,RC,bAe,i0,ABe,vAe,uf,TAe,wi,bf,Gz,SC,LBe,Oz,BBe,FAe,qo,PC,xBe,$C,kBe,d0,RBe,SBe,PBe,IC,$Be,Xz,IBe,jBe,NBe,io,jC,DBe,zz,qBe,GBe,Ai,OBe,Vz,XBe,zBe,Wz,VBe,WBe,QBe,v,vf,Qz,HBe,UBe,c0,JBe,YBe,KBe,Tf,Hz,ZBe,exe,f0,oxe,rxe,txe,Ff,Uz,axe,nxe,m0,sxe,lxe,ixe,Cf,Jz,dxe,cxe,g0,fxe,mxe,gxe,Mf,Yz,hxe,pxe,h0,_xe,uxe,bxe,Ef,Kz,vxe,Txe,p0,Fxe,Cxe,Mxe,yf,Zz,Exe,yxe,_0,wxe,Axe,Lxe,wf,eV,Bxe,xxe,u0,kxe,Rxe,Sxe,Af,oV,Pxe,$xe,b0,Ixe,jxe,Nxe,Lf,rV,Dxe,qxe,v0,Gxe,Oxe,Xxe,Bf,tV,zxe,Vxe,T0,Wxe,Qxe,Hxe,xf,aV,Uxe,Jxe,F0,Yxe,Kxe,Zxe,kf,nV,eke,oke,C0,rke,tke,ake,Rf,sV,nke,ske,M0,lke,ike,dke,Sf,lV,cke,fke,E0,mke,gke,hke,Pf,iV,pke,_ke,y0,uke,bke,vke,$f,dV,Tke,Fke,w0,Cke,Mke,Eke,If,cV,yke,wke,A0,Ake,Lke,Bke,jf,fV,xke,kke,L0,Rke,Ske,Pke,Nf,mV,$ke,Ike,B0,jke,Nke,Dke,Df,gV,qke,Gke,x0,Oke,Xke,zke,qf,hV,Vke,Wke,k0,Qke,Hke,Uke,Gf,pV,Jke,Yke,R0,Kke,Zke,eRe,Of,_V,oRe,rRe,S0,tRe,aRe,nRe,Xf,uV,sRe,lRe,P0,iRe,dRe,cRe,zf,bV,fRe,mRe,$0,gRe,hRe,pRe,Vf,vV,_Re,uRe,I0,bRe,vRe,TRe,Wf,TV,FRe,CRe,j0,MRe,ERe,yRe,Qf,FV,wRe,ARe,N0,LRe,BRe,xRe,Hf,CV,kRe,RRe,D0,SRe,PRe,$Re,Uf,MV,IRe,jRe,q0,NRe,DRe,qRe,Jf,EV,GRe,ORe,G0,XRe,zRe,VRe,Yf,yV,WRe,QRe,O0,HRe,URe,JRe,Kf,wV,YRe,KRe,X0,ZRe,eSe,oSe,Zf,AV,rSe,tSe,z0,aSe,nSe,sSe,em,LV,lSe,iSe,V0,dSe,cSe,fSe,om,BV,mSe,gSe,W0,hSe,pSe,_Se,rm,xV,uSe,bSe,Q0,vSe,TSe,FSe,tm,kV,CSe,MSe,H0,ESe,ySe,wSe,am,RV,ASe,LSe,U0,BSe,xSe,kSe,nm,SV,RSe,SSe,J0,PSe,$Se,ISe,sm,PV,jSe,NSe,Y0,DSe,qSe,GSe,lm,$V,OSe,XSe,K0,zSe,VSe,WSe,im,IV,QSe,HSe,Z0,USe,JSe,YSe,dm,jV,KSe,ZSe,eL,ePe,oPe,rPe,cm,NV,tPe,aPe,oL,nPe,sPe,lPe,fm,DV,iPe,dPe,rL,cPe,fPe,mPe,mm,qV,gPe,hPe,tL,pPe,_Pe,uPe,gm,GV,bPe,vPe,aL,TPe,FPe,CPe,hm,OV,MPe,EPe,nL,yPe,wPe,APe,pm,XV,LPe,BPe,sL,xPe,kPe,RPe,_m,zV,SPe,PPe,lL,$Pe,IPe,jPe,um,VV,NPe,DPe,iL,qPe,GPe,OPe,bm,WV,XPe,zPe,dL,VPe,WPe,QPe,vm,QV,HPe,UPe,cL,JPe,YPe,KPe,Tm,HV,ZPe,e$e,fL,o$e,r$e,t$e,Fm,UV,a$e,n$e,mL,s$e,l$e,i$e,Cm,JV,d$e,c$e,gL,f$e,m$e,g$e,Mm,YV,h$e,p$e,hL,_$e,u$e,b$e,Em,KV,v$e,T$e,pL,F$e,C$e,M$e,ym,ZV,E$e,y$e,_L,w$e,A$e,L$e,wm,eW,B$e,x$e,uL,k$e,R$e,S$e,Am,oW,P$e,$$e,bL,I$e,j$e,N$e,Lm,rW,D$e,q$e,vL,G$e,O$e,X$e,Bm,tW,z$e,V$e,TL,W$e,Q$e,H$e,xm,aW,U$e,J$e,FL,Y$e,K$e,Z$e,km,nW,eIe,oIe,CL,rIe,tIe,aIe,Rm,sW,nIe,sIe,ML,lIe,iIe,dIe,Sm,lW,cIe,fIe,EL,mIe,gIe,hIe,Pm,iW,pIe,_Ie,yL,uIe,bIe,vIe,$m,dW,TIe,FIe,wL,CIe,MIe,EIe,Im,cW,yIe,wIe,AL,AIe,LIe,BIe,jm,fW,xIe,kIe,LL,RIe,SIe,PIe,Nm,mW,$Ie,IIe,BL,jIe,NIe,DIe,Dm,gW,qIe,GIe,xL,OIe,XIe,zIe,qm,hW,VIe,WIe,kL,QIe,HIe,UIe,Gm,pW,JIe,YIe,RL,KIe,ZIe,eje,Om,_W,oje,rje,SL,tje,aje,nje,Xm,uW,sje,lje,PL,ije,dje,cje,zm,bW,fje,mje,$L,gje,hje,pje,Vm,vW,_je,uje,IL,bje,vje,Tje,Wm,TW,Fje,Cje,jL,Mje,Eje,yje,Qm,FW,wje,Aje,NL,Lje,Bje,xje,Hm,CW,kje,Rje,DL,Sje,Pje,$je,Um,MW,Ije,jje,qL,Nje,Dje,qje,Jm,EW,Gje,Oje,GL,Xje,zje,Vje,Ym,yW,Wje,Qje,OL,Hje,Uje,Jje,Km,wW,Yje,Kje,XL,Zje,eNe,oNe,Zm,AW,rNe,tNe,zL,aNe,nNe,sNe,LW,lNe,iNe,NC,dNe,eg,DC,cNe,BW,fNe,CAe,Li,og,xW,qC,mNe,kW,gNe,MAe,Go,GC,hNe,OC,pNe,VL,_Ne,uNe,bNe,XC,vNe,RW,TNe,FNe,CNe,co,zC,MNe,SW,ENe,yNe,Sa,wNe,PW,ANe,LNe,$W,BNe,xNe,IW,kNe,RNe,SNe,M,Pn,jW,PNe,$Ne,WL,INe,jNe,QL,NNe,DNe,qNe,$n,NW,GNe,ONe,HL,XNe,zNe,UL,VNe,WNe,QNe,In,DW,HNe,UNe,JL,JNe,YNe,YL,KNe,ZNe,eDe,rg,qW,oDe,rDe,KL,tDe,aDe,nDe,jn,GW,sDe,lDe,ZL,iDe,dDe,e9,cDe,fDe,mDe,tg,OW,gDe,hDe,o9,pDe,_De,uDe,ag,XW,bDe,vDe,r9,TDe,FDe,CDe,ng,zW,MDe,EDe,t9,yDe,wDe,ADe,Nn,VW,LDe,BDe,a9,xDe,kDe,n9,RDe,SDe,PDe,Dn,WW,$De,IDe,s9,jDe,NDe,l9,DDe,qDe,GDe,qn,QW,ODe,XDe,i9,zDe,VDe,d9,WDe,QDe,HDe,sg,HW,UDe,JDe,c9,YDe,KDe,ZDe,lg,UW,eqe,oqe,f9,rqe,tqe,aqe,Gn,JW,nqe,sqe,m9,lqe,iqe,g9,dqe,cqe,fqe,ig,YW,mqe,gqe,h9,hqe,pqe,_qe,On,KW,uqe,bqe,p9,vqe,Tqe,_9,Fqe,Cqe,Mqe,Xn,ZW,Eqe,yqe,u9,wqe,Aqe,b9,Lqe,Bqe,xqe,zn,eQ,kqe,Rqe,v9,Sqe,Pqe,oQ,$qe,Iqe,jqe,dg,rQ,Nqe,Dqe,T9,qqe,Gqe,Oqe,Vn,tQ,Xqe,zqe,F9,Vqe,Wqe,C9,Qqe,Hqe,Uqe,cg,aQ,Jqe,Yqe,M9,Kqe,Zqe,eGe,Wn,nQ,oGe,rGe,E9,tGe,aGe,y9,nGe,sGe,lGe,Qn,sQ,iGe,dGe,w9,cGe,fGe,A9,mGe,gGe,hGe,Hn,lQ,pGe,_Ge,L9,uGe,bGe,B9,vGe,TGe,FGe,fg,iQ,CGe,MGe,x9,EGe,yGe,wGe,Un,dQ,AGe,LGe,k9,BGe,xGe,R9,kGe,RGe,SGe,mg,cQ,PGe,$Ge,S9,IGe,jGe,NGe,Jn,fQ,DGe,qGe,P9,GGe,OGe,$9,XGe,zGe,VGe,Yn,mQ,WGe,QGe,I9,HGe,UGe,j9,JGe,YGe,KGe,Kn,gQ,ZGe,eOe,N9,oOe,rOe,D9,tOe,aOe,nOe,Zn,hQ,sOe,lOe,q9,iOe,dOe,G9,cOe,fOe,mOe,gg,pQ,gOe,hOe,O9,pOe,_Oe,uOe,es,_Q,bOe,vOe,X9,TOe,FOe,z9,COe,MOe,EOe,os,uQ,yOe,wOe,V9,AOe,LOe,W9,BOe,xOe,kOe,rs,bQ,ROe,SOe,Q9,POe,$Oe,H9,IOe,jOe,NOe,ts,vQ,DOe,qOe,U9,GOe,OOe,J9,XOe,zOe,VOe,as,TQ,WOe,QOe,Y9,HOe,UOe,K9,JOe,YOe,KOe,ns,FQ,ZOe,eXe,Z9,oXe,rXe,eB,tXe,aXe,nXe,hg,CQ,sXe,lXe,oB,iXe,dXe,cXe,ss,MQ,fXe,mXe,rB,gXe,hXe,tB,pXe,_Xe,uXe,pg,EQ,bXe,vXe,aB,TXe,FXe,CXe,_g,yQ,MXe,EXe,nB,yXe,wXe,AXe,ls,wQ,LXe,BXe,sB,xXe,kXe,lB,RXe,SXe,PXe,is,AQ,$Xe,IXe,iB,jXe,NXe,dB,DXe,qXe,GXe,ug,LQ,OXe,XXe,cB,zXe,VXe,WXe,ds,BQ,QXe,HXe,fB,UXe,JXe,mB,YXe,KXe,ZXe,cs,xQ,eze,oze,gB,rze,tze,hB,aze,nze,sze,fs,kQ,lze,ize,pB,dze,cze,_B,fze,mze,gze,ms,RQ,hze,pze,uB,_ze,uze,bB,bze,vze,Tze,gs,SQ,Fze,Cze,vB,Mze,Eze,TB,yze,wze,Aze,bg,PQ,Lze,Bze,FB,xze,kze,Rze,vg,$Q,Sze,Pze,CB,$ze,Ize,jze,Tg,IQ,Nze,Dze,MB,qze,Gze,Oze,hs,jQ,Xze,zze,EB,Vze,Wze,yB,Qze,Hze,Uze,Fg,NQ,Jze,Yze,wB,Kze,Zze,eVe,ps,DQ,oVe,rVe,AB,tVe,aVe,LB,nVe,sVe,lVe,_s,qQ,iVe,dVe,BB,cVe,fVe,xB,mVe,gVe,hVe,us,GQ,pVe,_Ve,kB,uVe,bVe,RB,vVe,TVe,FVe,bs,OQ,CVe,MVe,SB,EVe,yVe,PB,wVe,AVe,LVe,vs,XQ,BVe,xVe,$B,kVe,RVe,IB,SVe,PVe,$Ve,Cg,zQ,IVe,jVe,jB,NVe,DVe,qVe,Mg,VQ,GVe,OVe,NB,XVe,zVe,VVe,Ts,WQ,WVe,QVe,DB,HVe,UVe,qB,JVe,YVe,KVe,Fs,QQ,ZVe,eWe,GB,oWe,rWe,OB,tWe,aWe,nWe,Cs,HQ,sWe,lWe,XB,iWe,dWe,zB,cWe,fWe,mWe,Eg,UQ,gWe,hWe,VB,pWe,_We,uWe,yg,JQ,bWe,vWe,WB,TWe,FWe,CWe,wg,YQ,MWe,EWe,QB,yWe,wWe,AWe,Ag,KQ,LWe,BWe,HB,xWe,kWe,RWe,Ms,ZQ,SWe,PWe,UB,$We,IWe,JB,jWe,NWe,DWe,Lg,eH,qWe,GWe,YB,OWe,XWe,zWe,Bg,oH,VWe,WWe,KB,QWe,HWe,UWe,Es,rH,JWe,YWe,ZB,KWe,ZWe,ex,eQe,oQe,rQe,ys,tH,tQe,aQe,ox,nQe,sQe,rx,lQe,iQe,dQe,aH,cQe,fQe,VC,mQe,xg,WC,gQe,nH,hQe,EAe,Bi,kg,sH,QC,pQe,lH,_Qe,yAe,Oo,HC,uQe,UC,bQe,tx,vQe,TQe,FQe,JC,CQe,iH,MQe,EQe,yQe,Le,YC,wQe,dH,AQe,LQe,Pa,BQe,cH,xQe,kQe,fH,RQe,SQe,mH,PQe,$Qe,IQe,se,Rg,gH,jQe,NQe,ax,DQe,qQe,GQe,Sg,hH,OQe,XQe,nx,zQe,VQe,WQe,Pg,pH,QQe,HQe,sx,UQe,JQe,YQe,$g,_H,KQe,ZQe,lx,eHe,oHe,rHe,Ig,uH,tHe,aHe,ix,nHe,sHe,lHe,jg,bH,iHe,dHe,dx,cHe,fHe,mHe,Ng,vH,gHe,hHe,cx,pHe,_He,uHe,Dg,TH,bHe,vHe,fx,THe,FHe,CHe,qg,FH,MHe,EHe,mx,yHe,wHe,AHe,Gg,CH,LHe,BHe,gx,xHe,kHe,RHe,Og,MH,SHe,PHe,hx,$He,IHe,jHe,Xg,EH,NHe,DHe,px,qHe,GHe,OHe,zg,yH,XHe,zHe,_x,VHe,WHe,QHe,Vg,wH,HHe,UHe,ux,JHe,YHe,KHe,Wg,ZHe,AH,eUe,oUe,KC,rUe,Qg,ZC,tUe,LH,aUe,wAe,xi,Hg,BH,e4,nUe,xH,sUe,AAe,ea,o4,lUe,r4,iUe,bx,dUe,cUe,fUe,t4,mUe,kH,gUe,hUe,pUe,Be,a4,_Ue,RH,uUe,bUe,ki,vUe,SH,TUe,FUe,PH,CUe,MUe,EUe,ye,Ug,$H,yUe,wUe,vx,AUe,LUe,BUe,Jg,IH,xUe,kUe,Tx,RUe,SUe,PUe,Yg,jH,$Ue,IUe,Fx,jUe,NUe,DUe,Kg,NH,qUe,GUe,Cx,OUe,XUe,zUe,Zg,DH,VUe,WUe,Mx,QUe,HUe,UUe,eh,qH,JUe,YUe,Ex,KUe,ZUe,eJe,oh,GH,oJe,rJe,yx,tJe,aJe,nJe,rh,OH,sJe,lJe,wx,iJe,dJe,cJe,th,fJe,XH,mJe,gJe,n4,LAe,Ri,ah,zH,s4,hJe,VH,pJe,BAe,Xo,l4,_Je,Si,uJe,WH,bJe,vJe,QH,TJe,FJe,CJe,i4,MJe,HH,EJe,yJe,wJe,$r,d4,AJe,UH,LJe,BJe,Pi,xJe,JH,kJe,RJe,YH,SJe,PJe,$Je,KH,IJe,jJe,c4,NJe,xe,f4,DJe,ZH,qJe,GJe,$a,OJe,eU,XJe,zJe,oU,VJe,WJe,rU,QJe,HJe,UJe,F,nh,tU,JJe,YJe,Ax,KJe,ZJe,eYe,sh,aU,oYe,rYe,Lx,tYe,aYe,nYe,lh,nU,sYe,lYe,Bx,iYe,dYe,cYe,ih,sU,fYe,mYe,xx,gYe,hYe,pYe,dh,lU,_Ye,uYe,kx,bYe,vYe,TYe,ch,iU,FYe,CYe,Rx,MYe,EYe,yYe,fh,dU,wYe,AYe,Sx,LYe,BYe,xYe,mh,cU,kYe,RYe,Px,SYe,PYe,$Ye,gh,fU,IYe,jYe,$x,NYe,DYe,qYe,hh,mU,GYe,OYe,Ix,XYe,zYe,VYe,ph,gU,WYe,QYe,jx,HYe,UYe,JYe,_h,hU,YYe,KYe,Nx,ZYe,eKe,oKe,uh,pU,rKe,tKe,Dx,aKe,nKe,sKe,bh,_U,lKe,iKe,qx,dKe,cKe,fKe,vh,uU,mKe,gKe,Gx,hKe,pKe,_Ke,Th,bU,uKe,bKe,Ox,vKe,TKe,FKe,Fh,vU,CKe,MKe,Xx,EKe,yKe,wKe,Ch,TU,AKe,LKe,zx,BKe,xKe,kKe,Mh,FU,RKe,SKe,Vx,PKe,$Ke,IKe,Eh,CU,jKe,NKe,Wx,DKe,qKe,GKe,yh,MU,OKe,XKe,Qx,zKe,VKe,WKe,wh,EU,QKe,HKe,Hx,UKe,JKe,YKe,Ah,yU,KKe,ZKe,Ux,eZe,oZe,rZe,Lh,wU,tZe,aZe,Jx,nZe,sZe,lZe,Bh,AU,iZe,dZe,Yx,cZe,fZe,mZe,ws,LU,gZe,hZe,Kx,pZe,_Ze,Zx,uZe,bZe,vZe,xh,BU,TZe,FZe,ek,CZe,MZe,EZe,kh,xU,yZe,wZe,ok,AZe,LZe,BZe,Rh,kU,xZe,kZe,rk,RZe,SZe,PZe,Sh,RU,$Ze,IZe,tk,jZe,NZe,DZe,Ph,SU,qZe,GZe,ak,OZe,XZe,zZe,$h,PU,VZe,WZe,nk,QZe,HZe,UZe,Ih,$U,JZe,YZe,sk,KZe,ZZe,eeo,jh,IU,oeo,reo,lk,teo,aeo,neo,Nh,jU,seo,leo,ik,ieo,deo,ceo,Dh,NU,feo,meo,dk,geo,heo,peo,qh,DU,_eo,ueo,ck,beo,veo,Teo,Gh,qU,Feo,Ceo,fk,Meo,Eeo,yeo,Oh,GU,weo,Aeo,mk,Leo,Beo,xeo,Xh,OU,keo,Reo,gk,Seo,Peo,$eo,zh,XU,Ieo,jeo,hk,Neo,Deo,qeo,Vh,zU,Geo,Oeo,pk,Xeo,zeo,Veo,Wh,VU,Weo,Qeo,_k,Heo,Ueo,Jeo,Qh,WU,Yeo,Keo,uk,Zeo,eoo,ooo,Hh,QU,roo,too,bk,aoo,noo,soo,Uh,HU,loo,ioo,vk,doo,coo,foo,Jh,UU,moo,goo,Tk,hoo,poo,_oo,Yh,JU,uoo,boo,Fk,voo,Too,Foo,Kh,YU,Coo,Moo,Ck,Eoo,yoo,woo,Zh,KU,Aoo,Loo,Mk,Boo,xoo,koo,ep,ZU,Roo,Soo,Ek,Poo,$oo,Ioo,op,eJ,joo,Noo,yk,Doo,qoo,Goo,rp,oJ,Ooo,Xoo,wk,zoo,Voo,Woo,tp,rJ,Qoo,Hoo,Ak,Uoo,Joo,Yoo,ap,tJ,Koo,Zoo,Lk,ero,oro,rro,np,aJ,tro,aro,Bk,nro,sro,lro,sp,nJ,iro,dro,xk,cro,fro,mro,lp,sJ,gro,hro,kk,pro,_ro,uro,ip,lJ,bro,vro,Rk,Tro,Fro,Cro,dp,iJ,Mro,Ero,Sk,yro,wro,Aro,cp,dJ,Lro,Bro,Pk,xro,kro,Rro,fp,cJ,Sro,Pro,$k,$ro,Iro,jro,mp,fJ,Nro,Dro,Ik,qro,Gro,Oro,gp,mJ,Xro,zro,jk,Vro,Wro,Qro,hp,gJ,Hro,Uro,Nk,Jro,Yro,Kro,pp,hJ,Zro,eto,Dk,oto,rto,tto,_p,pJ,ato,nto,qk,sto,lto,ito,up,_J,dto,cto,Gk,fto,mto,gto,bp,uJ,hto,pto,Ok,_to,uto,bto,vp,bJ,vto,Tto,Xk,Fto,Cto,Mto,Tp,vJ,Eto,yto,zk,wto,Ato,Lto,Fp,TJ,Bto,xto,Vk,kto,Rto,Sto,Cp,FJ,Pto,$to,Wk,Ito,jto,Nto,Mp,CJ,Dto,qto,Qk,Gto,Oto,Xto,Ep,MJ,zto,Vto,Hk,Wto,Qto,Hto,yp,EJ,Uto,Jto,Uk,Yto,Kto,Zto,wp,yJ,eao,oao,Jk,rao,tao,aao,Ap,wJ,nao,sao,Yk,lao,iao,dao,Lp,AJ,cao,fao,Kk,mao,gao,hao,Bp,LJ,pao,_ao,Zk,uao,bao,vao,xp,BJ,Tao,Fao,eR,Cao,Mao,Eao,kp,xJ,yao,wao,oR,Aao,Lao,Bao,Rp,xao,kJ,kao,Rao,RJ,Sao,Pao,SJ,$ao,Iao,m4,xAe,$i,Sp,PJ,g4,jao,$J,Nao,kAe,zo,h4,Dao,Ii,qao,IJ,Gao,Oao,jJ,Xao,zao,Vao,p4,Wao,NJ,Qao,Hao,Uao,Ir,_4,Jao,DJ,Yao,Kao,ji,Zao,qJ,eno,ono,GJ,rno,tno,ano,OJ,nno,sno,u4,lno,ke,b4,ino,XJ,dno,cno,Ia,fno,zJ,mno,gno,VJ,hno,pno,WJ,_no,uno,bno,k,Pp,QJ,vno,Tno,rR,Fno,Cno,Mno,$p,HJ,Eno,yno,tR,wno,Ano,Lno,Ip,UJ,Bno,xno,aR,kno,Rno,Sno,jp,JJ,Pno,$no,nR,Ino,jno,Nno,Np,YJ,Dno,qno,sR,Gno,Ono,Xno,Dp,KJ,zno,Vno,lR,Wno,Qno,Hno,qp,ZJ,Uno,Jno,iR,Yno,Kno,Zno,Gp,eY,eso,oso,dR,rso,tso,aso,Op,oY,nso,sso,cR,lso,iso,dso,Xp,rY,cso,fso,fR,mso,gso,hso,zp,tY,pso,_so,mR,uso,bso,vso,Vp,aY,Tso,Fso,gR,Cso,Mso,Eso,Wp,nY,yso,wso,hR,Aso,Lso,Bso,Qp,sY,xso,kso,pR,Rso,Sso,Pso,Hp,lY,$so,Iso,_R,jso,Nso,Dso,Up,iY,qso,Gso,uR,Oso,Xso,zso,Jp,dY,Vso,Wso,bR,Qso,Hso,Uso,Yp,cY,Jso,Yso,vR,Kso,Zso,elo,Kp,fY,olo,rlo,TR,tlo,alo,nlo,Zp,mY,slo,llo,FR,ilo,dlo,clo,e_,gY,flo,mlo,CR,glo,hlo,plo,o_,hY,_lo,ulo,MR,blo,vlo,Tlo,r_,pY,Flo,Clo,ER,Mlo,Elo,ylo,t_,_Y,wlo,Alo,yR,Llo,Blo,xlo,a_,uY,klo,Rlo,wR,Slo,Plo,$lo,n_,bY,Ilo,jlo,AR,Nlo,Dlo,qlo,s_,vY,Glo,Olo,LR,Xlo,zlo,Vlo,l_,TY,Wlo,Qlo,BR,Hlo,Ulo,Jlo,i_,FY,Ylo,Klo,xR,Zlo,eio,oio,d_,CY,rio,tio,kR,aio,nio,sio,c_,MY,lio,iio,RR,dio,cio,fio,f_,EY,mio,gio,SR,hio,pio,_io,m_,yY,uio,bio,PR,vio,Tio,Fio,g_,wY,Cio,Mio,$R,Eio,yio,wio,h_,AY,Aio,Lio,IR,Bio,xio,kio,p_,LY,Rio,Sio,jR,Pio,$io,Iio,__,BY,jio,Nio,NR,Dio,qio,Gio,u_,xY,Oio,Xio,DR,zio,Vio,Wio,b_,Qio,kY,Hio,Uio,RY,Jio,Yio,SY,Kio,Zio,v4,RAe,Ni,v_,PY,T4,edo,$Y,odo,SAe,Vo,F4,rdo,Di,tdo,IY,ado,ndo,jY,sdo,ldo,ido,C4,ddo,NY,cdo,fdo,mdo,jr,M4,gdo,DY,hdo,pdo,qi,_do,qY,udo,bdo,GY,vdo,Tdo,Fdo,OY,Cdo,Mdo,E4,Edo,Re,y4,ydo,XY,wdo,Ado,ja,Ldo,zY,Bdo,xdo,VY,kdo,Rdo,WY,Sdo,Pdo,$do,I,T_,QY,Ido,jdo,qR,Ndo,Ddo,qdo,F_,HY,Gdo,Odo,GR,Xdo,zdo,Vdo,C_,UY,Wdo,Qdo,OR,Hdo,Udo,Jdo,M_,JY,Ydo,Kdo,XR,Zdo,eco,oco,E_,YY,rco,tco,zR,aco,nco,sco,y_,KY,lco,ico,VR,dco,cco,fco,w_,ZY,mco,gco,WR,hco,pco,_co,A_,eK,uco,bco,QR,vco,Tco,Fco,L_,oK,Cco,Mco,HR,Eco,yco,wco,B_,rK,Aco,Lco,UR,Bco,xco,kco,x_,tK,Rco,Sco,JR,Pco,$co,Ico,k_,aK,jco,Nco,YR,Dco,qco,Gco,R_,nK,Oco,Xco,KR,zco,Vco,Wco,S_,sK,Qco,Hco,ZR,Uco,Jco,Yco,P_,lK,Kco,Zco,eS,efo,ofo,rfo,$_,iK,tfo,afo,oS,nfo,sfo,lfo,I_,dK,ifo,dfo,rS,cfo,ffo,mfo,j_,cK,gfo,hfo,tS,pfo,_fo,ufo,N_,fK,bfo,vfo,aS,Tfo,Ffo,Cfo,D_,mK,Mfo,Efo,nS,yfo,wfo,Afo,q_,gK,Lfo,Bfo,sS,xfo,kfo,Rfo,G_,hK,Sfo,Pfo,lS,$fo,Ifo,jfo,O_,pK,Nfo,Dfo,iS,qfo,Gfo,Ofo,X_,_K,Xfo,zfo,dS,Vfo,Wfo,Qfo,z_,uK,Hfo,Ufo,cS,Jfo,Yfo,Kfo,V_,bK,Zfo,emo,fS,omo,rmo,tmo,W_,vK,amo,nmo,mS,smo,lmo,imo,Q_,TK,dmo,cmo,gS,fmo,mmo,gmo,H_,FK,hmo,pmo,hS,_mo,umo,bmo,U_,CK,vmo,Tmo,pS,Fmo,Cmo,Mmo,J_,MK,Emo,ymo,_S,wmo,Amo,Lmo,Y_,EK,Bmo,xmo,uS,kmo,Rmo,Smo,K_,yK,Pmo,$mo,bS,Imo,jmo,Nmo,Z_,Dmo,wK,qmo,Gmo,AK,Omo,Xmo,LK,zmo,Vmo,w4,PAe,Gi,eu,BK,A4,Wmo,xK,Qmo,$Ae,Wo,L4,Hmo,Oi,Umo,kK,Jmo,Ymo,RK,Kmo,Zmo,ego,B4,ogo,SK,rgo,tgo,ago,Nr,x4,ngo,PK,sgo,lgo,Xi,igo,$K,dgo,cgo,IK,fgo,mgo,ggo,jK,hgo,pgo,k4,_go,Se,R4,ugo,NK,bgo,vgo,Na,Tgo,DK,Fgo,Cgo,qK,Mgo,Ego,GK,ygo,wgo,Ago,$,ou,OK,Lgo,Bgo,vS,xgo,kgo,Rgo,ru,XK,Sgo,Pgo,TS,$go,Igo,jgo,tu,zK,Ngo,Dgo,FS,qgo,Ggo,Ogo,au,VK,Xgo,zgo,CS,Vgo,Wgo,Qgo,nu,WK,Hgo,Ugo,MS,Jgo,Ygo,Kgo,su,QK,Zgo,eho,ES,oho,rho,tho,lu,HK,aho,nho,yS,sho,lho,iho,iu,UK,dho,cho,wS,fho,mho,gho,du,JK,hho,pho,AS,_ho,uho,bho,cu,YK,vho,Tho,LS,Fho,Cho,Mho,fu,KK,Eho,yho,BS,who,Aho,Lho,mu,ZK,Bho,xho,xS,kho,Rho,Sho,gu,eZ,Pho,$ho,kS,Iho,jho,Nho,hu,oZ,Dho,qho,RS,Gho,Oho,Xho,pu,rZ,zho,Vho,SS,Who,Qho,Hho,_u,tZ,Uho,Jho,PS,Yho,Kho,Zho,uu,aZ,epo,opo,$S,rpo,tpo,apo,bu,nZ,npo,spo,IS,lpo,ipo,dpo,vu,sZ,cpo,fpo,jS,mpo,gpo,hpo,Tu,lZ,ppo,_po,NS,upo,bpo,vpo,Fu,iZ,Tpo,Fpo,DS,Cpo,Mpo,Epo,Cu,dZ,ypo,wpo,qS,Apo,Lpo,Bpo,Mu,cZ,xpo,kpo,GS,Rpo,Spo,Ppo,Eu,fZ,$po,Ipo,OS,jpo,Npo,Dpo,yu,mZ,qpo,Gpo,XS,Opo,Xpo,zpo,wu,gZ,Vpo,Wpo,zS,Qpo,Hpo,Upo,Au,hZ,Jpo,Ypo,VS,Kpo,Zpo,e_o,Lu,pZ,o_o,r_o,WS,t_o,a_o,n_o,Bu,_Z,s_o,l_o,QS,i_o,d_o,c_o,xu,uZ,f_o,m_o,bZ,g_o,h_o,p_o,ku,vZ,__o,u_o,HS,b_o,v_o,T_o,Ru,TZ,F_o,C_o,US,M_o,E_o,y_o,Su,FZ,w_o,A_o,JS,L_o,B_o,x_o,Pu,CZ,k_o,R_o,YS,S_o,P_o,$_o,$u,I_o,MZ,j_o,N_o,EZ,D_o,q_o,yZ,G_o,O_o,S4,IAe,zi,Iu,wZ,P4,X_o,AZ,z_o,jAe,Qo,$4,V_o,Vi,W_o,LZ,Q_o,H_o,BZ,U_o,J_o,Y_o,I4,K_o,xZ,Z_o,euo,ouo,Dr,j4,ruo,kZ,tuo,auo,Wi,nuo,RZ,suo,luo,SZ,iuo,duo,cuo,PZ,fuo,muo,N4,guo,Pe,D4,huo,$Z,puo,_uo,Da,uuo,IZ,buo,vuo,jZ,Tuo,Fuo,NZ,Cuo,Muo,Euo,ne,ju,DZ,yuo,wuo,KS,Auo,Luo,Buo,Nu,qZ,xuo,kuo,ZS,Ruo,Suo,Puo,Du,GZ,$uo,Iuo,eP,juo,Nuo,Duo,qu,OZ,quo,Guo,oP,Ouo,Xuo,zuo,Gu,XZ,Vuo,Wuo,rP,Quo,Huo,Uuo,Ou,zZ,Juo,Yuo,tP,Kuo,Zuo,e1o,Xu,VZ,o1o,r1o,aP,t1o,a1o,n1o,zu,WZ,s1o,l1o,nP,i1o,d1o,c1o,Vu,QZ,f1o,m1o,sP,g1o,h1o,p1o,Wu,HZ,_1o,u1o,lP,b1o,v1o,T1o,Qu,UZ,F1o,C1o,iP,M1o,E1o,y1o,Hu,JZ,w1o,A1o,dP,L1o,B1o,x1o,Uu,YZ,k1o,R1o,cP,S1o,P1o,$1o,Ju,KZ,I1o,j1o,fP,N1o,D1o,q1o,Yu,ZZ,G1o,O1o,mP,X1o,z1o,V1o,Ku,W1o,eee,Q1o,H1o,oee,U1o,J1o,ree,Y1o,K1o,q4,NAe,Qi,Zu,tee,G4,Z1o,aee,ebo,DAe,Ho,O4,obo,Hi,rbo,nee,tbo,abo,see,nbo,sbo,lbo,X4,ibo,lee,dbo,cbo,fbo,qr,z4,mbo,iee,gbo,hbo,Ui,pbo,dee,_bo,ubo,cee,bbo,vbo,Tbo,fee,Fbo,Cbo,V4,Mbo,$e,W4,Ebo,mee,ybo,wbo,qa,Abo,gee,Lbo,Bbo,hee,xbo,kbo,pee,Rbo,Sbo,Pbo,A,e1,_ee,$bo,Ibo,gP,jbo,Nbo,Dbo,o1,uee,qbo,Gbo,hP,Obo,Xbo,zbo,r1,bee,Vbo,Wbo,pP,Qbo,Hbo,Ubo,t1,vee,Jbo,Ybo,_P,Kbo,Zbo,e5o,a1,Tee,o5o,r5o,uP,t5o,a5o,n5o,n1,Fee,s5o,l5o,bP,i5o,d5o,c5o,s1,Cee,f5o,m5o,vP,g5o,h5o,p5o,l1,Mee,_5o,u5o,TP,b5o,v5o,T5o,i1,Eee,F5o,C5o,FP,M5o,E5o,y5o,d1,yee,w5o,A5o,CP,L5o,B5o,x5o,c1,wee,k5o,R5o,MP,S5o,P5o,$5o,f1,Aee,I5o,j5o,EP,N5o,D5o,q5o,m1,Lee,G5o,O5o,yP,X5o,z5o,V5o,g1,Bee,W5o,Q5o,wP,H5o,U5o,J5o,h1,xee,Y5o,K5o,AP,Z5o,e2o,o2o,p1,kee,r2o,t2o,LP,a2o,n2o,s2o,_1,Ree,l2o,i2o,BP,d2o,c2o,f2o,u1,See,m2o,g2o,xP,h2o,p2o,_2o,b1,Pee,u2o,b2o,kP,v2o,T2o,F2o,v1,$ee,C2o,M2o,RP,E2o,y2o,w2o,T1,Iee,A2o,L2o,SP,B2o,x2o,k2o,F1,jee,R2o,S2o,PP,P2o,$2o,I2o,C1,Nee,j2o,N2o,$P,D2o,q2o,G2o,M1,Dee,O2o,X2o,IP,z2o,V2o,W2o,E1,qee,Q2o,H2o,jP,U2o,J2o,Y2o,y1,Gee,K2o,Z2o,NP,evo,ovo,rvo,w1,Oee,tvo,avo,DP,nvo,svo,lvo,A1,Xee,ivo,dvo,qP,cvo,fvo,mvo,L1,zee,gvo,hvo,GP,pvo,_vo,uvo,B1,Vee,bvo,vvo,OP,Tvo,Fvo,Cvo,x1,Wee,Mvo,Evo,XP,yvo,wvo,Avo,k1,Qee,Lvo,Bvo,zP,xvo,kvo,Rvo,R1,Hee,Svo,Pvo,VP,$vo,Ivo,jvo,S1,Uee,Nvo,Dvo,WP,qvo,Gvo,Ovo,P1,Jee,Xvo,zvo,QP,Vvo,Wvo,Qvo,$1,Yee,Hvo,Uvo,HP,Jvo,Yvo,Kvo,I1,Kee,Zvo,e6o,UP,o6o,r6o,t6o,j1,Zee,a6o,n6o,JP,s6o,l6o,i6o,N1,eoe,d6o,c6o,YP,f6o,m6o,g6o,D1,ooe,h6o,p6o,KP,_6o,u6o,b6o,q1,roe,v6o,T6o,ZP,F6o,C6o,M6o,G1,toe,E6o,y6o,e$,w6o,A6o,L6o,O1,aoe,B6o,x6o,o$,k6o,R6o,S6o,X1,noe,P6o,$6o,r$,I6o,j6o,N6o,z1,D6o,soe,q6o,G6o,loe,O6o,X6o,ioe,z6o,V6o,Q4,qAe,Ji,V1,doe,H4,W6o,coe,Q6o,GAe,Uo,U4,H6o,Yi,U6o,foe,J6o,Y6o,moe,K6o,Z6o,eTo,J4,oTo,goe,rTo,tTo,aTo,Gr,Y4,nTo,hoe,sTo,lTo,Ki,iTo,poe,dTo,cTo,_oe,fTo,mTo,gTo,uoe,hTo,pTo,K4,_To,Ie,Z4,uTo,boe,bTo,vTo,Ga,TTo,voe,FTo,CTo,Toe,MTo,ETo,Foe,yTo,wTo,ATo,G,W1,Coe,LTo,BTo,t$,xTo,kTo,RTo,Q1,Moe,STo,PTo,a$,$To,ITo,jTo,H1,Eoe,NTo,DTo,n$,qTo,GTo,OTo,U1,yoe,XTo,zTo,s$,VTo,WTo,QTo,J1,woe,HTo,UTo,l$,JTo,YTo,KTo,Y1,Aoe,ZTo,e7o,i$,o7o,r7o,t7o,K1,Loe,a7o,n7o,d$,s7o,l7o,i7o,Z1,Boe,d7o,c7o,c$,f7o,m7o,g7o,eb,xoe,h7o,p7o,f$,_7o,u7o,b7o,ob,koe,v7o,T7o,m$,F7o,C7o,M7o,rb,Roe,E7o,y7o,g$,w7o,A7o,L7o,tb,Soe,B7o,x7o,h$,k7o,R7o,S7o,ab,Poe,P7o,$7o,p$,I7o,j7o,N7o,nb,$oe,D7o,q7o,_$,G7o,O7o,X7o,sb,Ioe,z7o,V7o,u$,W7o,Q7o,H7o,lb,joe,U7o,J7o,b$,Y7o,K7o,Z7o,ib,Noe,e8o,o8o,v$,r8o,t8o,a8o,db,Doe,n8o,s8o,T$,l8o,i8o,d8o,cb,qoe,c8o,f8o,F$,m8o,g8o,h8o,fb,Goe,p8o,_8o,C$,u8o,b8o,v8o,mb,Ooe,T8o,F8o,M$,C8o,M8o,E8o,gb,Xoe,y8o,w8o,E$,A8o,L8o,B8o,hb,zoe,x8o,k8o,y$,R8o,S8o,P8o,pb,Voe,$8o,I8o,w$,j8o,N8o,D8o,_b,Woe,q8o,G8o,A$,O8o,X8o,z8o,ub,Qoe,V8o,W8o,L$,Q8o,H8o,U8o,bb,Hoe,J8o,Y8o,B$,K8o,Z8o,eFo,vb,oFo,Uoe,rFo,tFo,Joe,aFo,nFo,Yoe,sFo,lFo,eM,OAe,Zi,Tb,Koe,oM,iFo,Zoe,dFo,XAe,Jo,rM,cFo,ed,fFo,ere,mFo,gFo,ore,hFo,pFo,_Fo,tM,uFo,rre,bFo,vFo,TFo,Or,aM,FFo,tre,CFo,MFo,od,EFo,are,yFo,wFo,nre,AFo,LFo,BFo,sre,xFo,kFo,nM,RFo,je,sM,SFo,lre,PFo,$Fo,Oa,IFo,ire,jFo,NFo,dre,DFo,qFo,cre,GFo,OFo,XFo,oa,Fb,fre,zFo,VFo,x$,WFo,QFo,HFo,Cb,mre,UFo,JFo,k$,YFo,KFo,ZFo,Mb,gre,eCo,oCo,R$,rCo,tCo,aCo,Eb,hre,nCo,sCo,S$,lCo,iCo,dCo,yb,pre,cCo,fCo,P$,mCo,gCo,hCo,wb,pCo,_re,_Co,uCo,ure,bCo,vCo,bre,TCo,FCo,lM,zAe,rd,Ab,vre,iM,CCo,Tre,MCo,VAe,Yo,dM,ECo,td,yCo,Fre,wCo,ACo,Cre,LCo,BCo,xCo,cM,kCo,Mre,RCo,SCo,PCo,Xr,fM,$Co,Ere,ICo,jCo,ad,NCo,yre,DCo,qCo,wre,GCo,OCo,XCo,Are,zCo,VCo,mM,WCo,Ne,gM,QCo,Lre,HCo,UCo,Xa,JCo,Bre,YCo,KCo,xre,ZCo,e4o,kre,o4o,r4o,t4o,N,Lb,Rre,a4o,n4o,$$,s4o,l4o,i4o,Bb,Sre,d4o,c4o,I$,f4o,m4o,g4o,xb,Pre,h4o,p4o,j$,_4o,u4o,b4o,kb,$re,v4o,T4o,N$,F4o,C4o,M4o,Rb,Ire,E4o,y4o,D$,w4o,A4o,L4o,Sb,jre,B4o,x4o,q$,k4o,R4o,S4o,Pb,Nre,P4o,$4o,G$,I4o,j4o,N4o,$b,Dre,D4o,q4o,O$,G4o,O4o,X4o,Ib,qre,z4o,V4o,X$,W4o,Q4o,H4o,jb,Gre,U4o,J4o,z$,Y4o,K4o,Z4o,Nb,Ore,eMo,oMo,V$,rMo,tMo,aMo,Db,Xre,nMo,sMo,W$,lMo,iMo,dMo,qb,zre,cMo,fMo,Q$,mMo,gMo,hMo,Gb,Vre,pMo,_Mo,H$,uMo,bMo,vMo,Ob,Wre,TMo,FMo,U$,CMo,MMo,EMo,Xb,Qre,yMo,wMo,J$,AMo,LMo,BMo,zb,Hre,xMo,kMo,Y$,RMo,SMo,PMo,Vb,Ure,$Mo,IMo,K$,jMo,NMo,DMo,Wb,Jre,qMo,GMo,Z$,OMo,XMo,zMo,Qb,Yre,VMo,WMo,eI,QMo,HMo,UMo,Hb,Kre,JMo,YMo,oI,KMo,ZMo,eEo,Ub,Zre,oEo,rEo,rI,tEo,aEo,nEo,Jb,ete,sEo,lEo,tI,iEo,dEo,cEo,Yb,ote,fEo,mEo,aI,gEo,hEo,pEo,Kb,rte,_Eo,uEo,nI,bEo,vEo,TEo,Zb,tte,FEo,CEo,sI,MEo,EEo,yEo,e5,ate,wEo,AEo,lI,LEo,BEo,xEo,o5,nte,kEo,REo,iI,SEo,PEo,$Eo,r5,ste,IEo,jEo,dI,NEo,DEo,qEo,t5,lte,GEo,OEo,cI,XEo,zEo,VEo,a5,ite,WEo,QEo,fI,HEo,UEo,JEo,n5,dte,YEo,KEo,mI,ZEo,e3o,o3o,s5,r3o,cte,t3o,a3o,fte,n3o,s3o,mte,l3o,i3o,hM,WAe,nd,l5,gte,pM,d3o,hte,c3o,QAe,Ko,_M,f3o,sd,m3o,pte,g3o,h3o,_te,p3o,_3o,u3o,uM,b3o,ute,v3o,T3o,F3o,zr,bM,C3o,bte,M3o,E3o,ld,y3o,vte,w3o,A3o,Tte,L3o,B3o,x3o,Fte,k3o,R3o,vM,S3o,De,TM,P3o,Cte,$3o,I3o,za,j3o,Mte,N3o,D3o,Ete,q3o,G3o,yte,O3o,X3o,z3o,R,i5,wte,V3o,W3o,gI,Q3o,H3o,U3o,d5,Ate,J3o,Y3o,hI,K3o,Z3o,eyo,c5,Lte,oyo,ryo,pI,tyo,ayo,nyo,f5,Bte,syo,lyo,_I,iyo,dyo,cyo,m5,xte,fyo,myo,uI,gyo,hyo,pyo,g5,kte,_yo,uyo,bI,byo,vyo,Tyo,h5,Rte,Fyo,Cyo,vI,Myo,Eyo,yyo,p5,Ste,wyo,Ayo,TI,Lyo,Byo,xyo,_5,Pte,kyo,Ryo,FI,Syo,Pyo,$yo,u5,$te,Iyo,jyo,CI,Nyo,Dyo,qyo,b5,Ite,Gyo,Oyo,MI,Xyo,zyo,Vyo,v5,jte,Wyo,Qyo,EI,Hyo,Uyo,Jyo,T5,Nte,Yyo,Kyo,yI,Zyo,ewo,owo,F5,Dte,rwo,two,wI,awo,nwo,swo,C5,qte,lwo,iwo,AI,dwo,cwo,fwo,M5,Gte,mwo,gwo,LI,hwo,pwo,_wo,E5,Ote,uwo,bwo,BI,vwo,Two,Fwo,y5,Xte,Cwo,Mwo,xI,Ewo,ywo,wwo,w5,zte,Awo,Lwo,kI,Bwo,xwo,kwo,A5,Vte,Rwo,Swo,RI,Pwo,$wo,Iwo,L5,Wte,jwo,Nwo,SI,Dwo,qwo,Gwo,B5,Qte,Owo,Xwo,PI,zwo,Vwo,Wwo,x5,Hte,Qwo,Hwo,$I,Uwo,Jwo,Ywo,k5,Ute,Kwo,Zwo,II,eAo,oAo,rAo,R5,Jte,tAo,aAo,jI,nAo,sAo,lAo,S5,Yte,iAo,dAo,NI,cAo,fAo,mAo,P5,Kte,gAo,hAo,DI,pAo,_Ao,uAo,$5,Zte,bAo,vAo,qI,TAo,FAo,CAo,I5,eae,MAo,EAo,GI,yAo,wAo,AAo,j5,oae,LAo,BAo,OI,xAo,kAo,RAo,N5,rae,SAo,PAo,XI,$Ao,IAo,jAo,D5,tae,NAo,DAo,zI,qAo,GAo,OAo,q5,aae,XAo,zAo,VI,VAo,WAo,QAo,G5,nae,HAo,UAo,WI,JAo,YAo,KAo,O5,sae,ZAo,e0o,QI,o0o,r0o,t0o,X5,lae,a0o,n0o,HI,s0o,l0o,i0o,z5,iae,d0o,c0o,UI,f0o,m0o,g0o,V5,dae,h0o,p0o,JI,_0o,u0o,b0o,W5,v0o,cae,T0o,F0o,fae,C0o,M0o,mae,E0o,y0o,FM,HAe,id,Q5,gae,CM,w0o,hae,A0o,UAe,Zo,MM,L0o,dd,B0o,pae,x0o,k0o,_ae,R0o,S0o,P0o,EM,$0o,uae,I0o,j0o,N0o,Vr,yM,D0o,bae,q0o,G0o,cd,O0o,vae,X0o,z0o,Tae,V0o,W0o,Q0o,Fae,H0o,U0o,wM,J0o,qe,AM,Y0o,Cae,K0o,Z0o,Va,eLo,Mae,oLo,rLo,Eae,tLo,aLo,yae,nLo,sLo,lLo,wae,H5,Aae,iLo,dLo,YI,cLo,fLo,mLo,U5,gLo,Lae,hLo,pLo,Bae,_Lo,uLo,xae,bLo,vLo,LM,JAe,fd,J5,kae,BM,TLo,Rae,FLo,YAe,er,xM,CLo,md,MLo,Sae,ELo,yLo,Pae,wLo,ALo,LLo,kM,BLo,$ae,xLo,kLo,RLo,Wr,RM,SLo,Iae,PLo,$Lo,gd,ILo,jae,jLo,NLo,Nae,DLo,qLo,GLo,Dae,OLo,XLo,SM,zLo,Ge,PM,VLo,qae,WLo,QLo,Wa,HLo,Gae,ULo,JLo,Oae,YLo,KLo,Xae,ZLo,e9o,o9o,we,Y5,zae,r9o,t9o,KI,a9o,n9o,s9o,K5,Vae,l9o,i9o,ZI,d9o,c9o,f9o,As,Wae,m9o,g9o,ej,h9o,p9o,oj,_9o,u9o,b9o,Z5,Qae,v9o,T9o,rj,F9o,C9o,M9o,ta,Hae,E9o,y9o,tj,w9o,A9o,aj,L9o,B9o,nj,x9o,k9o,R9o,e2,Uae,S9o,P9o,sj,$9o,I9o,j9o,o2,Jae,N9o,D9o,lj,q9o,G9o,O9o,r2,Yae,X9o,z9o,ij,V9o,W9o,Q9o,t2,H9o,Kae,U9o,J9o,Zae,Y9o,K9o,ene,Z9o,eBo,$M,KAe,hd,a2,one,IM,oBo,rne,rBo,ZAe,or,jM,tBo,pd,aBo,tne,nBo,sBo,ane,lBo,iBo,dBo,NM,cBo,nne,fBo,mBo,gBo,Qr,DM,hBo,sne,pBo,_Bo,_d,uBo,lne,bBo,vBo,ine,TBo,FBo,CBo,dne,MBo,EBo,qM,yBo,Oe,GM,wBo,cne,ABo,LBo,Qa,BBo,fne,xBo,kBo,mne,RBo,SBo,gne,PBo,$Bo,IBo,hne,n2,pne,jBo,NBo,dj,DBo,qBo,GBo,s2,OBo,_ne,XBo,zBo,une,VBo,WBo,bne,QBo,HBo,OM,e0e,ud,l2,vne,XM,UBo,Tne,JBo,o0e,rr,zM,YBo,bd,KBo,Fne,ZBo,exo,Cne,oxo,rxo,txo,VM,axo,Mne,nxo,sxo,lxo,Hr,WM,ixo,Ene,dxo,cxo,vd,fxo,yne,mxo,gxo,wne,hxo,pxo,_xo,Ane,uxo,bxo,QM,vxo,Xe,HM,Txo,Lne,Fxo,Cxo,Ha,Mxo,Bne,Exo,yxo,xne,wxo,Axo,kne,Lxo,Bxo,xxo,ro,i2,Rne,kxo,Rxo,cj,Sxo,Pxo,$xo,d2,Sne,Ixo,jxo,fj,Nxo,Dxo,qxo,c2,Pne,Gxo,Oxo,mj,Xxo,zxo,Vxo,f2,$ne,Wxo,Qxo,gj,Hxo,Uxo,Jxo,m2,Ine,Yxo,Kxo,hj,Zxo,eko,oko,g2,jne,rko,tko,pj,ako,nko,sko,h2,Nne,lko,iko,_j,dko,cko,fko,p2,mko,Dne,gko,hko,qne,pko,_ko,Gne,uko,bko,UM,r0e,Td,_2,One,JM,vko,Xne,Tko,t0e,tr,YM,Fko,Fd,Cko,zne,Mko,Eko,Vne,yko,wko,Ako,KM,Lko,Wne,Bko,xko,kko,Ur,ZM,Rko,Qne,Sko,Pko,Cd,$ko,Hne,Iko,jko,Une,Nko,Dko,qko,Jne,Gko,Oko,eE,Xko,ze,oE,zko,Yne,Vko,Wko,Ua,Qko,Kne,Hko,Uko,Zne,Jko,Yko,ese,Kko,Zko,eRo,Md,u2,ose,oRo,rRo,uj,tRo,aRo,nRo,b2,rse,sRo,lRo,bj,iRo,dRo,cRo,v2,tse,fRo,mRo,vj,gRo,hRo,pRo,T2,_Ro,ase,uRo,bRo,nse,vRo,TRo,sse,FRo,CRo,rE,a0e,Ed,F2,lse,tE,MRo,ise,ERo,n0e,ar,aE,yRo,yd,wRo,dse,ARo,LRo,cse,BRo,xRo,kRo,nE,RRo,fse,SRo,PRo,$Ro,Jr,sE,IRo,mse,jRo,NRo,wd,DRo,gse,qRo,GRo,hse,ORo,XRo,zRo,pse,VRo,WRo,lE,QRo,Ve,iE,HRo,_se,URo,JRo,Ja,YRo,use,KRo,ZRo,bse,eSo,oSo,vse,rSo,tSo,aSo,to,C2,Tse,nSo,sSo,Tj,lSo,iSo,dSo,M2,Fse,cSo,fSo,Fj,mSo,gSo,hSo,E2,Cse,pSo,_So,Cj,uSo,bSo,vSo,y2,Mse,TSo,FSo,Mj,CSo,MSo,ESo,w2,Ese,ySo,wSo,Ej,ASo,LSo,BSo,A2,yse,xSo,kSo,yj,RSo,SSo,PSo,L2,wse,$So,ISo,wj,jSo,NSo,DSo,B2,qSo,Ase,GSo,OSo,Lse,XSo,zSo,Bse,VSo,WSo,dE,s0e,Ad,x2,xse,cE,QSo,kse,HSo,l0e,nr,fE,USo,Ld,JSo,Rse,YSo,KSo,Sse,ZSo,ePo,oPo,mE,rPo,Pse,tPo,aPo,nPo,Yr,gE,sPo,$se,lPo,iPo,Bd,dPo,Ise,cPo,fPo,jse,mPo,gPo,hPo,Nse,pPo,_Po,hE,uPo,We,pE,bPo,Dse,vPo,TPo,Ya,FPo,qse,CPo,MPo,Gse,EPo,yPo,Ose,wPo,APo,LPo,_E,k2,Xse,BPo,xPo,Aj,kPo,RPo,SPo,R2,zse,PPo,$Po,Lj,IPo,jPo,NPo,S2,DPo,Vse,qPo,GPo,Wse,OPo,XPo,Qse,zPo,VPo,uE,i0e,xd,P2,Hse,bE,WPo,Use,QPo,d0e,sr,vE,HPo,kd,UPo,Jse,JPo,YPo,Yse,KPo,ZPo,e$o,TE,o$o,Kse,r$o,t$o,a$o,Kr,FE,n$o,Zse,s$o,l$o,Rd,i$o,ele,d$o,c$o,ole,f$o,m$o,g$o,rle,h$o,p$o,CE,_$o,Qe,ME,u$o,tle,b$o,v$o,Ka,T$o,ale,F$o,C$o,nle,M$o,E$o,sle,y$o,w$o,A$o,Sd,$2,lle,L$o,B$o,Bj,x$o,k$o,R$o,I2,ile,S$o,P$o,xj,$$o,I$o,j$o,j2,dle,N$o,D$o,kj,q$o,G$o,O$o,N2,X$o,cle,z$o,V$o,fle,W$o,Q$o,mle,H$o,U$o,EE,c0e,Pd,D2,gle,yE,J$o,hle,Y$o,f0e,lr,wE,K$o,$d,Z$o,ple,eIo,oIo,_le,rIo,tIo,aIo,AE,nIo,ule,sIo,lIo,iIo,Zr,LE,dIo,ble,cIo,fIo,Id,mIo,vle,gIo,hIo,Tle,pIo,_Io,uIo,Fle,bIo,vIo,BE,TIo,He,xE,FIo,Cle,CIo,MIo,Za,EIo,Mle,yIo,wIo,Ele,AIo,LIo,yle,BIo,xIo,kIo,wle,q2,Ale,RIo,SIo,Rj,PIo,$Io,IIo,G2,jIo,Lle,NIo,DIo,Ble,qIo,GIo,xle,OIo,XIo,kE,m0e,jd,O2,kle,RE,zIo,Rle,VIo,g0e,ir,SE,WIo,Nd,QIo,Sle,HIo,UIo,Ple,JIo,YIo,KIo,PE,ZIo,$le,ejo,ojo,rjo,et,$E,tjo,Ile,ajo,njo,Dd,sjo,jle,ljo,ijo,Nle,djo,cjo,fjo,Dle,mjo,gjo,IE,hjo,Ue,jE,pjo,qle,_jo,ujo,en,bjo,Gle,vjo,Tjo,Ole,Fjo,Cjo,Xle,Mjo,Ejo,yjo,zle,X2,Vle,wjo,Ajo,Sj,Ljo,Bjo,xjo,z2,kjo,Wle,Rjo,Sjo,Qle,Pjo,$jo,Hle,Ijo,jjo,NE,h0e,qd,V2,Ule,DE,Njo,Jle,Djo,p0e,dr,qE,qjo,Gd,Gjo,Yle,Ojo,Xjo,Kle,zjo,Vjo,Wjo,GE,Qjo,Zle,Hjo,Ujo,Jjo,ot,OE,Yjo,eie,Kjo,Zjo,Od,eNo,oie,oNo,rNo,rie,tNo,aNo,nNo,tie,sNo,lNo,XE,iNo,Je,zE,dNo,aie,cNo,fNo,on,mNo,nie,gNo,hNo,sie,pNo,_No,lie,uNo,bNo,vNo,VE,W2,iie,TNo,FNo,Pj,CNo,MNo,ENo,Q2,die,yNo,wNo,$j,ANo,LNo,BNo,H2,xNo,cie,kNo,RNo,fie,SNo,PNo,mie,$No,INo,WE,_0e,Xd,U2,gie,QE,jNo,hie,NNo,u0e,cr,HE,DNo,zd,qNo,pie,GNo,ONo,_ie,XNo,zNo,VNo,UE,WNo,uie,QNo,HNo,UNo,rt,JE,JNo,bie,YNo,KNo,Vd,ZNo,vie,eDo,oDo,Tie,rDo,tDo,aDo,Fie,nDo,sDo,YE,lDo,fo,KE,iDo,Cie,dDo,cDo,rn,fDo,Mie,mDo,gDo,Eie,hDo,pDo,yie,_Do,uDo,bDo,B,J2,wie,vDo,TDo,Ij,FDo,CDo,MDo,Y2,Aie,EDo,yDo,jj,wDo,ADo,LDo,K2,Lie,BDo,xDo,Nj,kDo,RDo,SDo,Z2,Bie,PDo,$Do,Dj,IDo,jDo,NDo,ev,xie,DDo,qDo,qj,GDo,ODo,XDo,ov,kie,zDo,VDo,Gj,WDo,QDo,HDo,rv,Rie,UDo,JDo,Oj,YDo,KDo,ZDo,tv,Sie,eqo,oqo,Xj,rqo,tqo,aqo,av,Pie,nqo,sqo,zj,lqo,iqo,dqo,nv,$ie,cqo,fqo,Vj,mqo,gqo,hqo,sv,Iie,pqo,_qo,Wj,uqo,bqo,vqo,lv,jie,Tqo,Fqo,Qj,Cqo,Mqo,Eqo,iv,Nie,yqo,wqo,Hj,Aqo,Lqo,Bqo,dv,Die,xqo,kqo,Uj,Rqo,Sqo,Pqo,cv,qie,$qo,Iqo,Jj,jqo,Nqo,Dqo,Ls,Gie,qqo,Gqo,Yj,Oqo,Xqo,Kj,zqo,Vqo,Wqo,fv,Oie,Qqo,Hqo,Zj,Uqo,Jqo,Yqo,mv,Xie,Kqo,Zqo,eN,eGo,oGo,rGo,gv,zie,tGo,aGo,oN,nGo,sGo,lGo,hv,Vie,iGo,dGo,rN,cGo,fGo,mGo,pv,Wie,gGo,hGo,tN,pGo,_Go,uGo,_v,Qie,bGo,vGo,aN,TGo,FGo,CGo,uv,Hie,MGo,EGo,nN,yGo,wGo,AGo,bv,Uie,LGo,BGo,sN,xGo,kGo,RGo,vv,Jie,SGo,PGo,lN,$Go,IGo,jGo,Tv,Yie,NGo,DGo,iN,qGo,GGo,OGo,Fv,Kie,XGo,zGo,dN,VGo,WGo,QGo,Cv,Zie,HGo,UGo,cN,JGo,YGo,KGo,Mv,ede,ZGo,eOo,fN,oOo,rOo,tOo,Ev,ode,aOo,nOo,mN,sOo,lOo,iOo,yv,rde,dOo,cOo,gN,fOo,mOo,gOo,wv,tde,hOo,pOo,hN,_Oo,uOo,bOo,Av,ade,vOo,TOo,pN,FOo,COo,MOo,Lv,nde,EOo,yOo,_N,wOo,AOo,LOo,Bv,sde,BOo,xOo,uN,kOo,ROo,SOo,xv,lde,POo,$Oo,bN,IOo,jOo,NOo,kv,ide,DOo,qOo,vN,GOo,OOo,XOo,Rv,dde,zOo,VOo,TN,WOo,QOo,HOo,Sv,cde,UOo,JOo,FN,YOo,KOo,ZOo,Pv,fde,eXo,oXo,CN,rXo,tXo,aXo,$v,mde,nXo,sXo,MN,lXo,iXo,dXo,gde,cXo,fXo,ZE,b0e,Wd,Iv,hde,e3,mXo,pde,gXo,v0e,fr,o3,hXo,Qd,pXo,_de,_Xo,uXo,ude,bXo,vXo,TXo,r3,FXo,bde,CXo,MXo,EXo,tt,t3,yXo,vde,wXo,AXo,Hd,LXo,Tde,BXo,xXo,Fde,kXo,RXo,SXo,Cde,PXo,$Xo,a3,IXo,mo,n3,jXo,Mde,NXo,DXo,tn,qXo,Ede,GXo,OXo,yde,XXo,zXo,wde,VXo,WXo,QXo,H,jv,Ade,HXo,UXo,EN,JXo,YXo,KXo,Nv,Lde,ZXo,ezo,yN,ozo,rzo,tzo,Dv,Bde,azo,nzo,wN,szo,lzo,izo,qv,xde,dzo,czo,AN,fzo,mzo,gzo,Gv,kde,hzo,pzo,LN,_zo,uzo,bzo,Ov,Rde,vzo,Tzo,BN,Fzo,Czo,Mzo,Xv,Sde,Ezo,yzo,xN,wzo,Azo,Lzo,zv,Pde,Bzo,xzo,kN,kzo,Rzo,Szo,Vv,$de,Pzo,$zo,RN,Izo,jzo,Nzo,Wv,Ide,Dzo,qzo,SN,Gzo,Ozo,Xzo,Qv,jde,zzo,Vzo,PN,Wzo,Qzo,Hzo,Hv,Nde,Uzo,Jzo,$N,Yzo,Kzo,Zzo,Uv,Dde,eVo,oVo,IN,rVo,tVo,aVo,Jv,qde,nVo,sVo,jN,lVo,iVo,dVo,Yv,Gde,cVo,fVo,NN,mVo,gVo,hVo,Kv,Ode,pVo,_Vo,DN,uVo,bVo,vVo,Zv,Xde,TVo,FVo,qN,CVo,MVo,EVo,e6,zde,yVo,wVo,GN,AVo,LVo,BVo,o6,Vde,xVo,kVo,ON,RVo,SVo,PVo,r6,Wde,$Vo,IVo,XN,jVo,NVo,DVo,t6,Qde,qVo,GVo,zN,OVo,XVo,zVo,a6,Hde,VVo,WVo,VN,QVo,HVo,UVo,Ude,JVo,YVo,s3,T0e,Ud,n6,Jde,l3,KVo,Yde,ZVo,F0e,mr,i3,eWo,Jd,oWo,Kde,rWo,tWo,Zde,aWo,nWo,sWo,d3,lWo,ece,iWo,dWo,cWo,at,c3,fWo,oce,mWo,gWo,Yd,hWo,rce,pWo,_Wo,tce,uWo,bWo,vWo,ace,TWo,FWo,f3,CWo,go,m3,MWo,nce,EWo,yWo,an,wWo,sce,AWo,LWo,lce,BWo,xWo,ice,kWo,RWo,SWo,he,s6,dce,PWo,$Wo,WN,IWo,jWo,NWo,l6,cce,DWo,qWo,QN,GWo,OWo,XWo,i6,fce,zWo,VWo,HN,WWo,QWo,HWo,d6,mce,UWo,JWo,UN,YWo,KWo,ZWo,c6,gce,eQo,oQo,JN,rQo,tQo,aQo,f6,hce,nQo,sQo,YN,lQo,iQo,dQo,m6,pce,cQo,fQo,KN,mQo,gQo,hQo,g6,_ce,pQo,_Qo,ZN,uQo,bQo,vQo,h6,uce,TQo,FQo,eD,CQo,MQo,EQo,p6,bce,yQo,wQo,oD,AQo,LQo,BQo,vce,xQo,kQo,g3,C0e,Kd,_6,Tce,h3,RQo,Fce,SQo,M0e,gr,p3,PQo,Zd,$Qo,Cce,IQo,jQo,Mce,NQo,DQo,qQo,_3,GQo,Ece,OQo,XQo,zQo,nt,u3,VQo,yce,WQo,QQo,ec,HQo,wce,UQo,JQo,Ace,YQo,KQo,ZQo,Lce,eHo,oHo,b3,rHo,ho,v3,tHo,Bce,aHo,nHo,nn,sHo,xce,lHo,iHo,kce,dHo,cHo,Rce,fHo,mHo,gHo,Sce,u6,Pce,hHo,pHo,rD,_Ho,uHo,bHo,$ce,vHo,THo,T3,E0e,oc,b6,Ice,F3,FHo,jce,CHo,y0e,hr,C3,MHo,rc,EHo,Nce,yHo,wHo,Dce,AHo,LHo,BHo,M3,xHo,qce,kHo,RHo,SHo,st,E3,PHo,Gce,$Ho,IHo,tc,jHo,Oce,NHo,DHo,Xce,qHo,GHo,OHo,zce,XHo,zHo,y3,VHo,po,w3,WHo,Vce,QHo,HHo,sn,UHo,Wce,JHo,YHo,Qce,KHo,ZHo,Hce,eUo,oUo,rUo,Y,v6,Uce,tUo,aUo,tD,nUo,sUo,lUo,T6,Jce,iUo,dUo,aD,cUo,fUo,mUo,F6,Yce,gUo,hUo,nD,pUo,_Uo,uUo,C6,Kce,bUo,vUo,sD,TUo,FUo,CUo,M6,Zce,MUo,EUo,lD,yUo,wUo,AUo,E6,efe,LUo,BUo,iD,xUo,kUo,RUo,y6,ofe,SUo,PUo,dD,$Uo,IUo,jUo,w6,rfe,NUo,DUo,cD,qUo,GUo,OUo,A6,tfe,XUo,zUo,fD,VUo,WUo,QUo,L6,afe,HUo,UUo,mD,JUo,YUo,KUo,B6,nfe,ZUo,eJo,gD,oJo,rJo,tJo,x6,sfe,aJo,nJo,hD,sJo,lJo,iJo,k6,lfe,dJo,cJo,pD,fJo,mJo,gJo,R6,ife,hJo,pJo,_D,_Jo,uJo,bJo,S6,dfe,vJo,TJo,uD,FJo,CJo,MJo,P6,cfe,EJo,yJo,bD,wJo,AJo,LJo,$6,ffe,BJo,xJo,vD,kJo,RJo,SJo,I6,mfe,PJo,$Jo,TD,IJo,jJo,NJo,j6,gfe,DJo,qJo,FD,GJo,OJo,XJo,N6,hfe,zJo,VJo,CD,WJo,QJo,HJo,pfe,UJo,JJo,A3,w0e,ac,D6,_fe,L3,YJo,ufe,KJo,A0e,pr,B3,ZJo,nc,eYo,bfe,oYo,rYo,vfe,tYo,aYo,nYo,x3,sYo,Tfe,lYo,iYo,dYo,lt,k3,cYo,Ffe,fYo,mYo,sc,gYo,Cfe,hYo,pYo,Mfe,_Yo,uYo,bYo,Efe,vYo,TYo,R3,FYo,_o,S3,CYo,yfe,MYo,EYo,ln,yYo,wfe,wYo,AYo,Afe,LYo,BYo,Lfe,xYo,kYo,RYo,pe,q6,Bfe,SYo,PYo,MD,$Yo,IYo,jYo,G6,xfe,NYo,DYo,ED,qYo,GYo,OYo,O6,kfe,XYo,zYo,yD,VYo,WYo,QYo,X6,Rfe,HYo,UYo,wD,JYo,YYo,KYo,z6,Sfe,ZYo,eKo,AD,oKo,rKo,tKo,V6,Pfe,aKo,nKo,LD,sKo,lKo,iKo,W6,$fe,dKo,cKo,BD,fKo,mKo,gKo,Q6,Ife,hKo,pKo,xD,_Ko,uKo,bKo,H6,jfe,vKo,TKo,kD,FKo,CKo,MKo,U6,Nfe,EKo,yKo,RD,wKo,AKo,LKo,Dfe,BKo,xKo,P3,L0e,lc,J6,qfe,$3,kKo,Gfe,RKo,B0e,_r,I3,SKo,ic,PKo,Ofe,$Ko,IKo,Xfe,jKo,NKo,DKo,j3,qKo,zfe,GKo,OKo,XKo,it,N3,zKo,Vfe,VKo,WKo,dc,QKo,Wfe,HKo,UKo,Qfe,JKo,YKo,KKo,Hfe,ZKo,eZo,D3,oZo,uo,q3,rZo,Ufe,tZo,aZo,dn,nZo,Jfe,sZo,lZo,Yfe,iZo,dZo,Kfe,cZo,fZo,mZo,X,Y6,Zfe,gZo,hZo,SD,pZo,_Zo,uZo,K6,eme,bZo,vZo,PD,TZo,FZo,CZo,Z6,ome,MZo,EZo,$D,yZo,wZo,AZo,eT,rme,LZo,BZo,ID,xZo,kZo,RZo,oT,tme,SZo,PZo,jD,$Zo,IZo,jZo,rT,ame,NZo,DZo,ND,qZo,GZo,OZo,tT,nme,XZo,zZo,DD,VZo,WZo,QZo,aT,sme,HZo,UZo,qD,JZo,YZo,KZo,nT,lme,ZZo,eer,GD,oer,rer,ter,sT,ime,aer,ner,OD,ser,ler,ier,lT,dme,der,cer,XD,fer,mer,ger,iT,cme,her,per,zD,_er,uer,ber,dT,fme,ver,Ter,VD,Fer,Cer,Mer,cT,mme,Eer,yer,WD,wer,Aer,Ler,fT,gme,Ber,xer,QD,ker,Rer,Ser,mT,hme,Per,$er,HD,Ier,jer,Ner,gT,pme,Der,qer,UD,Ger,Oer,Xer,hT,_me,zer,Ver,JD,Wer,Qer,Her,pT,ume,Uer,Jer,YD,Yer,Ker,Zer,_T,bme,eor,oor,KD,ror,tor,aor,uT,vme,nor,sor,ZD,lor,ior,dor,bT,Tme,cor,mor,eq,gor,hor,por,vT,Fme,_or,uor,oq,bor,vor,Tor,TT,Cme,For,Cor,rq,Mor,Eor,yor,FT,Mme,wor,Aor,tq,Lor,Bor,xor,Eme,kor,Ror,G3,x0e,cc,CT,yme,O3,Sor,wme,Por,k0e,ur,X3,$or,fc,Ior,Ame,jor,Nor,Lme,Dor,qor,Gor,z3,Oor,Bme,Xor,zor,Vor,dt,V3,Wor,xme,Qor,Hor,mc,Uor,kme,Jor,Yor,Rme,Kor,Zor,err,Sme,orr,rrr,W3,trr,bo,Q3,arr,Pme,nrr,srr,cn,lrr,$me,irr,drr,Ime,crr,frr,jme,mrr,grr,hrr,te,MT,Nme,prr,_rr,aq,urr,brr,vrr,ET,Dme,Trr,Frr,nq,Crr,Mrr,Err,yT,qme,yrr,wrr,sq,Arr,Lrr,Brr,wT,Gme,xrr,krr,lq,Rrr,Srr,Prr,AT,Ome,$rr,Irr,iq,jrr,Nrr,Drr,LT,Xme,qrr,Grr,dq,Orr,Xrr,zrr,BT,zme,Vrr,Wrr,cq,Qrr,Hrr,Urr,xT,Vme,Jrr,Yrr,fq,Krr,Zrr,etr,kT,Wme,otr,rtr,mq,ttr,atr,ntr,RT,Qme,str,ltr,gq,itr,dtr,ctr,ST,Hme,ftr,mtr,hq,gtr,htr,ptr,PT,Ume,_tr,utr,pq,btr,vtr,Ttr,$T,Jme,Ftr,Ctr,_q,Mtr,Etr,ytr,IT,Yme,wtr,Atr,uq,Ltr,Btr,xtr,jT,Kme,ktr,Rtr,bq,Str,Ptr,$tr,NT,Zme,Itr,jtr,vq,Ntr,Dtr,qtr,DT,ege,Gtr,Otr,Tq,Xtr,ztr,Vtr,oge,Wtr,Qtr,H3,R0e,gc,qT,rge,U3,Htr,tge,Utr,S0e,br,J3,Jtr,hc,Ytr,age,Ktr,Ztr,nge,ear,oar,rar,Y3,tar,sge,aar,nar,sar,ct,K3,lar,lge,iar,dar,pc,car,ige,far,mar,dge,gar,har,par,cge,_ar,uar,Z3,bar,vo,ey,Tar,fge,Far,Car,fn,Mar,mge,Ear,yar,gge,war,Aar,hge,Lar,Bar,xar,pge,GT,_ge,kar,Rar,Fq,Sar,Par,$ar,uge,Iar,jar,oy,P0e,_c,OT,bge,ry,Nar,vge,Dar,$0e,vr,ty,qar,uc,Gar,Tge,Oar,Xar,Fge,zar,Var,War,ay,Qar,Cge,Har,Uar,Jar,ft,ny,Yar,Mge,Kar,Zar,bc,enr,Ege,onr,rnr,yge,tnr,anr,nnr,wge,snr,lnr,sy,inr,To,ly,dnr,Age,cnr,fnr,mn,mnr,Lge,gnr,hnr,Bge,pnr,_nr,xge,unr,bnr,vnr,K,XT,kge,Tnr,Fnr,Cq,Cnr,Mnr,Enr,zT,Rge,ynr,wnr,Mq,Anr,Lnr,Bnr,VT,Sge,xnr,knr,Eq,Rnr,Snr,Pnr,WT,Pge,$nr,Inr,yq,jnr,Nnr,Dnr,QT,$ge,qnr,Gnr,wq,Onr,Xnr,znr,HT,Ige,Vnr,Wnr,Aq,Qnr,Hnr,Unr,UT,jge,Jnr,Ynr,Lq,Knr,Znr,esr,JT,Nge,osr,rsr,Bq,tsr,asr,nsr,YT,Dge,ssr,lsr,xq,isr,dsr,csr,KT,qge,fsr,msr,kq,gsr,hsr,psr,ZT,Gge,_sr,usr,Rq,bsr,vsr,Tsr,e7,Oge,Fsr,Csr,Sq,Msr,Esr,ysr,o7,Xge,wsr,Asr,Pq,Lsr,Bsr,xsr,r7,zge,ksr,Rsr,$q,Ssr,Psr,$sr,t7,Vge,Isr,jsr,Iq,Nsr,Dsr,qsr,a7,Wge,Gsr,Osr,jq,Xsr,zsr,Vsr,n7,Qge,Wsr,Qsr,Nq,Hsr,Usr,Jsr,s7,Hge,Ysr,Ksr,Dq,Zsr,elr,olr,l7,Uge,rlr,tlr,qq,alr,nlr,slr,i7,Jge,llr,ilr,Gq,dlr,clr,flr,Yge,mlr,glr,iy,I0e,vc,d7,Kge,dy,hlr,Zge,plr,j0e,Tr,cy,_lr,Tc,ulr,ehe,blr,vlr,ohe,Tlr,Flr,Clr,fy,Mlr,rhe,Elr,ylr,wlr,mt,my,Alr,the,Llr,Blr,Fc,xlr,ahe,klr,Rlr,nhe,Slr,Plr,$lr,she,Ilr,jlr,gy,Nlr,Fo,hy,Dlr,lhe,qlr,Glr,gn,Olr,ihe,Xlr,zlr,dhe,Vlr,Wlr,che,Qlr,Hlr,Ulr,Z,c7,fhe,Jlr,Ylr,Oq,Klr,Zlr,eir,f7,mhe,oir,rir,Xq,tir,air,nir,m7,ghe,sir,lir,zq,iir,dir,cir,g7,hhe,fir,mir,Vq,gir,hir,pir,h7,phe,_ir,uir,Wq,bir,vir,Tir,p7,_he,Fir,Cir,Qq,Mir,Eir,yir,_7,uhe,wir,Air,Hq,Lir,Bir,xir,u7,bhe,kir,Rir,Uq,Sir,Pir,$ir,b7,vhe,Iir,jir,Jq,Nir,Dir,qir,v7,The,Gir,Oir,Yq,Xir,zir,Vir,T7,Fhe,Wir,Qir,Kq,Hir,Uir,Jir,F7,Che,Yir,Kir,Zq,Zir,edr,odr,C7,Mhe,rdr,tdr,eG,adr,ndr,sdr,M7,Ehe,ldr,idr,oG,ddr,cdr,fdr,E7,yhe,mdr,gdr,rG,hdr,pdr,_dr,y7,whe,udr,bdr,tG,vdr,Tdr,Fdr,w7,Ahe,Cdr,Mdr,aG,Edr,ydr,wdr,A7,Lhe,Adr,Ldr,nG,Bdr,xdr,kdr,L7,Bhe,Rdr,Sdr,sG,Pdr,$dr,Idr,xhe,jdr,Ndr,py,N0e,Cc,B7,khe,_y,Ddr,Rhe,qdr,D0e,Fr,uy,Gdr,Mc,Odr,She,Xdr,zdr,Phe,Vdr,Wdr,Qdr,by,Hdr,$he,Udr,Jdr,Ydr,gt,vy,Kdr,Ihe,Zdr,ecr,Ec,ocr,jhe,rcr,tcr,Nhe,acr,ncr,scr,Dhe,lcr,icr,Ty,dcr,Co,Fy,ccr,qhe,fcr,mcr,hn,gcr,Ghe,hcr,pcr,Ohe,_cr,ucr,Xhe,bcr,vcr,Tcr,zhe,x7,Vhe,Fcr,Ccr,lG,Mcr,Ecr,ycr,Whe,wcr,Acr,Cy,q0e,yc,k7,Qhe,My,Lcr,Hhe,Bcr,G0e,Cr,Ey,xcr,wc,kcr,Uhe,Rcr,Scr,Jhe,Pcr,$cr,Icr,yy,jcr,Yhe,Ncr,Dcr,qcr,ht,wy,Gcr,Khe,Ocr,Xcr,Ac,zcr,Zhe,Vcr,Wcr,epe,Qcr,Hcr,Ucr,ope,Jcr,Ycr,Ay,Kcr,Mo,Ly,Zcr,rpe,efr,ofr,pn,rfr,tpe,tfr,afr,ape,nfr,sfr,npe,lfr,ifr,dfr,spe,R7,lpe,cfr,ffr,iG,mfr,gfr,hfr,ipe,pfr,_fr,By,O0e,Lc,S7,dpe,xy,ufr,cpe,bfr,X0e,Mr,ky,vfr,Bc,Tfr,fpe,Ffr,Cfr,mpe,Mfr,Efr,yfr,Ry,wfr,gpe,Afr,Lfr,Bfr,pt,Sy,xfr,hpe,kfr,Rfr,xc,Sfr,ppe,Pfr,$fr,_pe,Ifr,jfr,Nfr,upe,Dfr,qfr,Py,Gfr,Eo,$y,Ofr,bpe,Xfr,zfr,_n,Vfr,vpe,Wfr,Qfr,Tpe,Hfr,Ufr,Fpe,Jfr,Yfr,Kfr,V,P7,Cpe,Zfr,emr,dG,omr,rmr,tmr,$7,Mpe,amr,nmr,cG,smr,lmr,imr,I7,Epe,dmr,cmr,fG,fmr,mmr,gmr,j7,ype,hmr,pmr,mG,_mr,umr,bmr,N7,wpe,vmr,Tmr,gG,Fmr,Cmr,Mmr,D7,Ape,Emr,ymr,hG,wmr,Amr,Lmr,q7,Lpe,Bmr,xmr,pG,kmr,Rmr,Smr,G7,Bpe,Pmr,$mr,_G,Imr,jmr,Nmr,O7,xpe,Dmr,qmr,uG,Gmr,Omr,Xmr,X7,kpe,zmr,Vmr,bG,Wmr,Qmr,Hmr,z7,Rpe,Umr,Jmr,vG,Ymr,Kmr,Zmr,V7,Spe,egr,ogr,TG,rgr,tgr,agr,W7,Ppe,ngr,sgr,FG,lgr,igr,dgr,Q7,$pe,cgr,fgr,CG,mgr,ggr,hgr,H7,Ipe,pgr,_gr,MG,ugr,bgr,vgr,U7,jpe,Tgr,Fgr,EG,Cgr,Mgr,Egr,J7,Npe,ygr,wgr,yG,Agr,Lgr,Bgr,Y7,Dpe,xgr,kgr,wG,Rgr,Sgr,Pgr,K7,qpe,$gr,Igr,AG,jgr,Ngr,Dgr,Z7,Gpe,qgr,Ggr,LG,Ogr,Xgr,zgr,e8,Ope,Vgr,Wgr,BG,Qgr,Hgr,Ugr,o8,Xpe,Jgr,Ygr,xG,Kgr,Zgr,ehr,r8,zpe,ohr,rhr,kG,thr,ahr,nhr,t8,Vpe,shr,lhr,RG,ihr,dhr,chr,Wpe,fhr,mhr,Iy,z0e,kc,a8,Qpe,jy,ghr,Hpe,hhr,V0e,Er,Ny,phr,Rc,_hr,Upe,uhr,bhr,Jpe,vhr,Thr,Fhr,Dy,Chr,Ype,Mhr,Ehr,yhr,_t,qy,whr,Kpe,Ahr,Lhr,Sc,Bhr,Zpe,xhr,khr,e_e,Rhr,Shr,Phr,o_e,$hr,Ihr,Gy,jhr,yo,Oy,Nhr,r_e,Dhr,qhr,un,Ghr,t_e,Ohr,Xhr,a_e,zhr,Vhr,n_e,Whr,Qhr,Hhr,bn,n8,s_e,Uhr,Jhr,SG,Yhr,Khr,Zhr,s8,l_e,epr,opr,PG,rpr,tpr,apr,l8,i_e,npr,spr,$G,lpr,ipr,dpr,i8,d_e,cpr,fpr,IG,mpr,gpr,hpr,c_e,ppr,_pr,Xy,W0e,Pc,d8,f_e,zy,upr,m_e,bpr,Q0e,yr,Vy,vpr,$c,Tpr,g_e,Fpr,Cpr,h_e,Mpr,Epr,ypr,Wy,wpr,p_e,Apr,Lpr,Bpr,ut,Qy,xpr,__e,kpr,Rpr,Ic,Spr,u_e,Ppr,$pr,b_e,Ipr,jpr,Npr,v_e,Dpr,qpr,Hy,Gpr,wo,Uy,Opr,T_e,Xpr,zpr,vn,Vpr,F_e,Wpr,Qpr,C_e,Hpr,Upr,M_e,Jpr,Ypr,Kpr,fe,c8,E_e,Zpr,e_r,jG,o_r,r_r,t_r,f8,y_e,a_r,n_r,NG,s_r,l_r,i_r,m8,w_e,d_r,c_r,DG,f_r,m_r,g_r,g8,A_e,h_r,p_r,qG,__r,u_r,b_r,h8,L_e,v_r,T_r,GG,F_r,C_r,M_r,p8,B_e,E_r,y_r,OG,w_r,A_r,L_r,_8,x_e,B_r,x_r,XG,k_r,R_r,S_r,u8,k_e,P_r,$_r,zG,I_r,j_r,N_r,b8,R_e,D_r,q_r,VG,G_r,O_r,X_r,v8,S_e,z_r,V_r,WG,W_r,Q_r,H_r,T8,P_e,U_r,J_r,QG,Y_r,K_r,Z_r,$_e,eur,our,Jy,H0e,jc,F8,I_e,Yy,rur,j_e,tur,U0e,wr,Ky,aur,Nc,nur,N_e,sur,lur,D_e,iur,dur,cur,Zy,fur,q_e,mur,gur,hur,bt,ew,pur,G_e,_ur,uur,Dc,bur,O_e,vur,Tur,X_e,Fur,Cur,Mur,z_e,Eur,yur,ow,wur,Ao,rw,Aur,V_e,Lur,Bur,Tn,xur,W_e,kur,Rur,Q_e,Sur,Pur,H_e,$ur,Iur,jur,be,C8,U_e,Nur,Dur,HG,qur,Gur,Our,M8,J_e,Xur,zur,UG,Vur,Wur,Qur,E8,Y_e,Hur,Uur,JG,Jur,Yur,Kur,y8,K_e,Zur,e1r,YG,o1r,r1r,t1r,w8,Z_e,a1r,n1r,KG,s1r,l1r,i1r,A8,eue,d1r,c1r,ZG,f1r,m1r,g1r,L8,oue,h1r,p1r,eO,_1r,u1r,b1r,B8,rue,v1r,T1r,oO,F1r,C1r,M1r,x8,tue,E1r,y1r,rO,w1r,A1r,L1r,aue,B1r,x1r,tw,J0e,qc,k8,nue,aw,k1r,sue,R1r,Y0e,Ar,nw,S1r,Gc,P1r,lue,$1r,I1r,iue,j1r,N1r,D1r,sw,q1r,due,G1r,O1r,X1r,vt,lw,z1r,cue,V1r,W1r,Oc,Q1r,fue,H1r,U1r,mue,J1r,Y1r,K1r,gue,Z1r,ebr,iw,obr,Lo,dw,rbr,hue,tbr,abr,Fn,nbr,pue,sbr,lbr,_ue,ibr,dbr,uue,cbr,fbr,mbr,ve,R8,bue,gbr,hbr,tO,pbr,_br,ubr,S8,vue,bbr,vbr,aO,Tbr,Fbr,Cbr,P8,Tue,Mbr,Ebr,nO,ybr,wbr,Abr,$8,Fue,Lbr,Bbr,sO,xbr,kbr,Rbr,I8,Cue,Sbr,Pbr,lO,$br,Ibr,jbr,j8,Mue,Nbr,Dbr,iO,qbr,Gbr,Obr,N8,Eue,Xbr,zbr,dO,Vbr,Wbr,Qbr,D8,yue,Hbr,Ubr,cO,Jbr,Ybr,Kbr,q8,wue,Zbr,e5r,fO,o5r,r5r,t5r,Aue,a5r,n5r,cw,K0e,Xc,G8,Lue,fw,s5r,Bue,l5r,Z0e,Lr,mw,i5r,zc,d5r,xue,c5r,f5r,kue,m5r,g5r,h5r,gw,p5r,Rue,_5r,u5r,b5r,Tt,hw,v5r,Sue,T5r,F5r,Vc,C5r,Pue,M5r,E5r,$ue,y5r,w5r,A5r,Iue,L5r,B5r,pw,x5r,Bo,_w,k5r,jue,R5r,S5r,Cn,P5r,Nue,$5r,I5r,Due,j5r,N5r,que,D5r,q5r,G5r,Te,O8,Gue,O5r,X5r,mO,z5r,V5r,W5r,X8,Oue,Q5r,H5r,gO,U5r,J5r,Y5r,z8,Xue,K5r,Z5r,hO,e2r,o2r,r2r,V8,zue,t2r,a2r,pO,n2r,s2r,l2r,W8,Vue,i2r,d2r,_O,c2r,f2r,m2r,Q8,Wue,g2r,h2r,uO,p2r,_2r,u2r,H8,Que,b2r,v2r,bO,T2r,F2r,C2r,U8,Hue,M2r,E2r,vO,y2r,w2r,A2r,J8,Uue,L2r,B2r,TO,x2r,k2r,R2r,Jue,S2r,P2r,uw,eLe,Wc,Y8,Yue,bw,$2r,Kue,I2r,oLe,Br,vw,j2r,Qc,N2r,Zue,D2r,q2r,e1e,G2r,O2r,X2r,Tw,z2r,o1e,V2r,W2r,Q2r,Ft,Fw,H2r,r1e,U2r,J2r,Hc,Y2r,t1e,K2r,Z2r,a1e,evr,ovr,rvr,n1e,tvr,avr,Cw,nvr,xo,Mw,svr,s1e,lvr,ivr,Mn,dvr,l1e,cvr,fvr,i1e,mvr,gvr,d1e,hvr,pvr,_vr,Fe,K8,c1e,uvr,bvr,FO,vvr,Tvr,Fvr,Z8,f1e,Cvr,Mvr,CO,Evr,yvr,wvr,eF,m1e,Avr,Lvr,MO,Bvr,xvr,kvr,oF,g1e,Rvr,Svr,EO,Pvr,$vr,Ivr,rF,h1e,jvr,Nvr,yO,Dvr,qvr,Gvr,tF,p1e,Ovr,Xvr,wO,zvr,Vvr,Wvr,aF,_1e,Qvr,Hvr,AO,Uvr,Jvr,Yvr,nF,u1e,Kvr,Zvr,LO,e6r,o6r,r6r,sF,b1e,t6r,a6r,BO,n6r,s6r,l6r,v1e,i6r,d6r,Ew,rLe,Uc,lF,T1e,yw,c6r,F1e,f6r,tLe,xr,ww,m6r,Jc,g6r,C1e,h6r,p6r,M1e,_6r,u6r,b6r,Aw,v6r,E1e,T6r,F6r,C6r,Ct,Lw,M6r,y1e,E6r,y6r,Yc,w6r,w1e,A6r,L6r,A1e,B6r,x6r,k6r,L1e,R6r,S6r,Bw,P6r,ko,xw,$6r,B1e,I6r,j6r,En,N6r,x1e,D6r,q6r,k1e,G6r,O6r,R1e,X6r,z6r,V6r,ao,iF,S1e,W6r,Q6r,xO,H6r,U6r,J6r,dF,P1e,Y6r,K6r,kO,Z6r,eTr,oTr,cF,$1e,rTr,tTr,RO,aTr,nTr,sTr,fF,I1e,lTr,iTr,SO,dTr,cTr,fTr,mF,j1e,mTr,gTr,PO,hTr,pTr,_Tr,gF,N1e,uTr,bTr,$O,vTr,TTr,FTr,hF,D1e,CTr,MTr,IO,ETr,yTr,wTr,q1e,ATr,LTr,kw,aLe,Kc,pF,G1e,Rw,BTr,O1e,xTr,nLe,kr,Sw,kTr,Zc,RTr,X1e,STr,PTr,z1e,$Tr,ITr,jTr,Pw,NTr,V1e,DTr,qTr,GTr,Mt,$w,OTr,W1e,XTr,zTr,ef,VTr,Q1e,WTr,QTr,H1e,HTr,UTr,JTr,U1e,YTr,KTr,Iw,ZTr,Ro,jw,e7r,J1e,o7r,r7r,yn,t7r,Y1e,a7r,n7r,K1e,s7r,l7r,Z1e,i7r,d7r,c7r,no,_F,ebe,f7r,m7r,jO,g7r,h7r,p7r,uF,obe,_7r,u7r,NO,b7r,v7r,T7r,bF,rbe,F7r,C7r,DO,M7r,E7r,y7r,vF,tbe,w7r,A7r,qO,L7r,B7r,x7r,TF,abe,k7r,R7r,GO,S7r,P7r,$7r,FF,nbe,I7r,j7r,OO,N7r,D7r,q7r,CF,sbe,G7r,O7r,XO,X7r,z7r,V7r,lbe,W7r,Q7r,Nw,sLe,of,MF,ibe,Dw,H7r,dbe,U7r,lLe,Rr,qw,J7r,rf,Y7r,cbe,K7r,Z7r,fbe,e8r,o8r,r8r,Gw,t8r,mbe,a8r,n8r,s8r,Et,Ow,l8r,gbe,i8r,d8r,tf,c8r,hbe,f8r,m8r,pbe,g8r,h8r,p8r,_be,_8r,u8r,Xw,b8r,So,zw,v8r,ube,T8r,F8r,wn,C8r,bbe,M8r,E8r,vbe,y8r,w8r,Tbe,A8r,L8r,B8r,Fbe,EF,Cbe,x8r,k8r,zO,R8r,S8r,P8r,Mbe,$8r,I8r,Vw,iLe,af,yF,Ebe,Ww,j8r,ybe,N8r,dLe,Sr,Qw,D8r,nf,q8r,wbe,G8r,O8r,Abe,X8r,z8r,V8r,Hw,W8r,Lbe,Q8r,H8r,U8r,yt,Uw,J8r,Bbe,Y8r,K8r,sf,Z8r,xbe,eFr,oFr,kbe,rFr,tFr,aFr,Rbe,nFr,sFr,Jw,lFr,Po,Yw,iFr,Sbe,dFr,cFr,An,fFr,Pbe,mFr,gFr,$be,hFr,pFr,Ibe,_Fr,uFr,bFr,Kw,wF,jbe,vFr,TFr,VO,FFr,CFr,MFr,AF,Nbe,EFr,yFr,WO,wFr,AFr,LFr,Dbe,BFr,xFr,Zw,cLe,lf,LF,qbe,eA,kFr,Gbe,RFr,fLe,Pr,oA,SFr,df,PFr,Obe,$Fr,IFr,Xbe,jFr,NFr,DFr,rA,qFr,zbe,GFr,OFr,XFr,wt,tA,zFr,Vbe,VFr,WFr,cf,QFr,Wbe,HFr,UFr,Qbe,JFr,YFr,KFr,Hbe,ZFr,eCr,aA,oCr,$o,nA,rCr,Ube,tCr,aCr,Ln,nCr,Jbe,sCr,lCr,Ybe,iCr,dCr,Kbe,cCr,fCr,mCr,Zbe,BF,e5e,gCr,hCr,QO,pCr,_Cr,uCr,o5e,bCr,vCr,sA,mLe;return ce=new z({}),ka=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),kC=new z({}),RC=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),uf=new TCr({props:{warning:"&lcub;true}",$$slots:{default:[$ft]},$$scope:{ctx:ui}}}),SC=new z({}),PC=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/configuration_auto.py#L509"}}),jC=new E({props:{name:"from\\_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/configuration_auto.py#L532",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),NC=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),DC=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/configuration_auto.py#L654",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),qC=new z({}),GC=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/tokenization_auto.py#L350"}}),zC=new E({props:{name:"from\\_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/tokenization_auto.py#L364",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15678/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),VC=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),WC=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/tokenization_auto.py#L560",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),QC=new z({}),HC=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/feature_extraction_auto.py#L168"}}),YC=new E({props:{name:"from\\_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/feature_extraction_auto.py#L182",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15678/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Wg=new TCr({props:{$$slots:{default:[Ift]},$$scope:{ctx:ui}}}),KC=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),ZC=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/feature_extraction_auto.py#L309",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),e4=new z({}),o4=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/processing_auto.py#L68"}}),a4=new E({props:{name:"from\\_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/processing_auto.py#L82",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),th=new TCr({props:{$$slots:{default:[jft]},$$scope:{ctx:ui}}}),n4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),s4=new z({}),l4=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L653"}}),d4=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),c4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),f4=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g4=new z({}),h4=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L660"}}),_4=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),u4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),b4=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T4=new z({}),F4=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L675"}}),M4=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),E4=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),y4=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w4=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A4=new z({}),L4=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L682"}}),x4=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),k4=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),R4=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S4=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P4=new z({}),$4=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L689"}}),j4=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),N4=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),D4=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q4=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G4=new z({}),O4=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L698"}}),z4=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),V4=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),W4=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q4=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H4=new z({}),U4=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L732"}}),Y4=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),K4=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Z4=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oM=new z({}),rM=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L739"}}),aM=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),nM=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),sM=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lM=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iM=new z({}),dM=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L725"}}),fM=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),mM=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),gM=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hM=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pM=new z({}),_M=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L707"}}),bM=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),vM=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),TM=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FM=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CM=new z({}),MM=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L714"}}),yM=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),wM=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),AM=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LM=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BM=new z({}),xM=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L748"}}),RM=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),SM=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),PM=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$M=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IM=new z({}),jM=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L778"}}),DM=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),qM=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),GM=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OM=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XM=new z({}),zM=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L785"}}),WM=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),QM=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),HM=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UM=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JM=new z({}),YM=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L808"}}),ZM=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),eE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),oE=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tE=new z({}),aE=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L792"}}),sE=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),lE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),iE=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cE=new z({}),fE=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L799"}}),gE=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),hE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),pE=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bE=new z({}),vE=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L817"}}),FE=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),CE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),ME=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yE=new z({}),wE=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L771"}}),LE=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),BE=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),xE=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RE=new z({}),SE=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L755"}}),$E=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),jE=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NE=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DE=new z({}),qE=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L762"}}),OE=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),zE=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QE=new z({}),HE=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L371"}}),JE=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),YE=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),KE=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZE=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e3=new z({}),o3=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L378"}}),t3=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),a3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),n3=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l3=new z({}),i3=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L393"}}),c3=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),f3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),m3=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h3=new z({}),p3=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L400"}}),u3=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),b3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),v3=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F3=new z({}),C3=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L414"}}),E3=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),y3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),w3=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L3=new z({}),B3=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),k3=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),R3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),S3=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$3=new z({}),I3=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),N3=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),D3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),q3=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O3=new z({}),X3=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),V3=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),W3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Q3=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U3=new z({}),J3=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),K3=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Z3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),ey=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new z({}),ty=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),ny=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),sy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),ly=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new z({}),cy=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L439"}}),my=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),hy=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),py=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new z({}),uy=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L407"}}),vy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Fy=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new z({}),Ey=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),wy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),Ay=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Ly=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),By=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new z({}),ky=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L220"}}),Sy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),Py=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),$y=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jy=new z({}),Ny=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L234"}}),qy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),Gy=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Oy=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new z({}),Vy=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L227"}}),Qy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Uy=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new z({}),Ky=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),ew=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),rw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aw=new z({}),nw=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),lw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),dw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fw=new z({}),mw=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),hw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),_w=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new z({}),vw=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),Fw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),Mw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new z({}),ww=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),Lw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),xw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new z({}),Sw=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),$w=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),jw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new z({}),qw=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Ow=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),zw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ww=new z({}),Qw=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),Uw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),Yw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new z({}),oA=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),tA=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),nA=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Ae=l(),le=a("h1"),me=a("a"),oo=a("span"),f(ce.$$.fragment),ue=l(),No=a("span"),bi=o("Auto Classes"),mf=l(),ra=a("p"),vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ti=a("code"),AC=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ee=l(),so=a("p"),Fi=o("Instantiating one of "),Bn=a("a"),LC=o("AutoConfig"),xn=o(", "),kn=a("a"),BC=o("AutoModel"),Ci=o(`, and
`),Rn=a("a"),xC=o("AutoTokenizer"),Mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),f(ka.$$.fragment),lo=l(),ge=a("p"),t0=o("will create a model that is an instance of "),Ei=a("a"),a0=o("BertModel"),n0=o("."),Do=l(),Ra=a("p"),s0=o("There is one class of "),pf=a("code"),l0=o("AutoModel"),vBe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pAe=l(),yi=a("h2"),_f=a("a"),jz=a("span"),f(kC.$$.fragment),TBe=l(),Nz=a("span"),FBe=o("Extending the Auto Classes"),_Ae=l(),Sn=a("p"),CBe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dz=a("code"),MBe=o("NewModel"),EBe=o(", make sure you have a "),qz=a("code"),yBe=o("NewModelConfig"),wBe=o(` then you can add those to the auto
classes like this:`),uAe=l(),f(RC.$$.fragment),bAe=l(),i0=a("p"),ABe=o("You will then be able to use the auto classes like you would usually do!"),vAe=l(),f(uf.$$.fragment),TAe=l(),wi=a("h2"),bf=a("a"),Gz=a("span"),f(SC.$$.fragment),LBe=l(),Oz=a("span"),BBe=o("AutoConfig"),FAe=l(),qo=a("div"),f(PC.$$.fragment),xBe=l(),$C=a("p"),kBe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),d0=a("a"),RBe=o("from_pretrained()"),SBe=o(" class method."),PBe=l(),IC=a("p"),$Be=o("This class cannot be instantiated directly using "),Xz=a("code"),IBe=o("__init__()"),jBe=o(" (throws an error)."),NBe=l(),io=a("div"),f(jC.$$.fragment),DBe=l(),zz=a("p"),qBe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),GBe=l(),Ai=a("p"),OBe=o("The configuration class to instantiate is selected based on the "),Vz=a("code"),XBe=o("model_type"),zBe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wz=a("code"),VBe=o("pretrained_model_name_or_path"),WBe=o(":"),QBe=l(),v=a("ul"),vf=a("li"),Qz=a("strong"),HBe=o("albert"),UBe=o(" \u2014 "),c0=a("a"),JBe=o("AlbertConfig"),YBe=o(" (ALBERT model)"),KBe=l(),Tf=a("li"),Hz=a("strong"),ZBe=o("bart"),exe=o(" \u2014 "),f0=a("a"),oxe=o("BartConfig"),rxe=o(" (BART model)"),txe=l(),Ff=a("li"),Uz=a("strong"),axe=o("beit"),nxe=o(" \u2014 "),m0=a("a"),sxe=o("BeitConfig"),lxe=o(" (BEiT model)"),ixe=l(),Cf=a("li"),Jz=a("strong"),dxe=o("bert"),cxe=o(" \u2014 "),g0=a("a"),fxe=o("BertConfig"),mxe=o(" (BERT model)"),gxe=l(),Mf=a("li"),Yz=a("strong"),hxe=o("bert-generation"),pxe=o(" \u2014 "),h0=a("a"),_xe=o("BertGenerationConfig"),uxe=o(" (Bert Generation model)"),bxe=l(),Ef=a("li"),Kz=a("strong"),vxe=o("big_bird"),Txe=o(" \u2014 "),p0=a("a"),Fxe=o("BigBirdConfig"),Cxe=o(" (BigBird model)"),Mxe=l(),yf=a("li"),Zz=a("strong"),Exe=o("bigbird_pegasus"),yxe=o(" \u2014 "),_0=a("a"),wxe=o("BigBirdPegasusConfig"),Axe=o(" (BigBirdPegasus model)"),Lxe=l(),wf=a("li"),eV=a("strong"),Bxe=o("blenderbot"),xxe=o(" \u2014 "),u0=a("a"),kxe=o("BlenderbotConfig"),Rxe=o(" (Blenderbot model)"),Sxe=l(),Af=a("li"),oV=a("strong"),Pxe=o("blenderbot-small"),$xe=o(" \u2014 "),b0=a("a"),Ixe=o("BlenderbotSmallConfig"),jxe=o(" (BlenderbotSmall model)"),Nxe=l(),Lf=a("li"),rV=a("strong"),Dxe=o("camembert"),qxe=o(" \u2014 "),v0=a("a"),Gxe=o("CamembertConfig"),Oxe=o(" (CamemBERT model)"),Xxe=l(),Bf=a("li"),tV=a("strong"),zxe=o("canine"),Vxe=o(" \u2014 "),T0=a("a"),Wxe=o("CanineConfig"),Qxe=o(" (Canine model)"),Hxe=l(),xf=a("li"),aV=a("strong"),Uxe=o("clip"),Jxe=o(" \u2014 "),F0=a("a"),Yxe=o("CLIPConfig"),Kxe=o(" (CLIP model)"),Zxe=l(),kf=a("li"),nV=a("strong"),eke=o("convbert"),oke=o(" \u2014 "),C0=a("a"),rke=o("ConvBertConfig"),tke=o(" (ConvBERT model)"),ake=l(),Rf=a("li"),sV=a("strong"),nke=o("convnext"),ske=o(" \u2014 "),M0=a("a"),lke=o("ConvNextConfig"),ike=o(" (ConvNext model)"),dke=l(),Sf=a("li"),lV=a("strong"),cke=o("ctrl"),fke=o(" \u2014 "),E0=a("a"),mke=o("CTRLConfig"),gke=o(" (CTRL model)"),hke=l(),Pf=a("li"),iV=a("strong"),pke=o("deberta"),_ke=o(" \u2014 "),y0=a("a"),uke=o("DebertaConfig"),bke=o(" (DeBERTa model)"),vke=l(),$f=a("li"),dV=a("strong"),Tke=o("deberta-v2"),Fke=o(" \u2014 "),w0=a("a"),Cke=o("DebertaV2Config"),Mke=o(" (DeBERTa-v2 model)"),Eke=l(),If=a("li"),cV=a("strong"),yke=o("deit"),wke=o(" \u2014 "),A0=a("a"),Ake=o("DeiTConfig"),Lke=o(" (DeiT model)"),Bke=l(),jf=a("li"),fV=a("strong"),xke=o("detr"),kke=o(" \u2014 "),L0=a("a"),Rke=o("DetrConfig"),Ske=o(" (DETR model)"),Pke=l(),Nf=a("li"),mV=a("strong"),$ke=o("distilbert"),Ike=o(" \u2014 "),B0=a("a"),jke=o("DistilBertConfig"),Nke=o(" (DistilBERT model)"),Dke=l(),Df=a("li"),gV=a("strong"),qke=o("dpr"),Gke=o(" \u2014 "),x0=a("a"),Oke=o("DPRConfig"),Xke=o(" (DPR model)"),zke=l(),qf=a("li"),hV=a("strong"),Vke=o("electra"),Wke=o(" \u2014 "),k0=a("a"),Qke=o("ElectraConfig"),Hke=o(" (ELECTRA model)"),Uke=l(),Gf=a("li"),pV=a("strong"),Jke=o("encoder-decoder"),Yke=o(" \u2014 "),R0=a("a"),Kke=o("EncoderDecoderConfig"),Zke=o(" (Encoder decoder model)"),eRe=l(),Of=a("li"),_V=a("strong"),oRe=o("flaubert"),rRe=o(" \u2014 "),S0=a("a"),tRe=o("FlaubertConfig"),aRe=o(" (FlauBERT model)"),nRe=l(),Xf=a("li"),uV=a("strong"),sRe=o("fnet"),lRe=o(" \u2014 "),P0=a("a"),iRe=o("FNetConfig"),dRe=o(" (FNet model)"),cRe=l(),zf=a("li"),bV=a("strong"),fRe=o("fsmt"),mRe=o(" \u2014 "),$0=a("a"),gRe=o("FSMTConfig"),hRe=o(" (FairSeq Machine-Translation model)"),pRe=l(),Vf=a("li"),vV=a("strong"),_Re=o("funnel"),uRe=o(" \u2014 "),I0=a("a"),bRe=o("FunnelConfig"),vRe=o(" (Funnel Transformer model)"),TRe=l(),Wf=a("li"),TV=a("strong"),FRe=o("gpt2"),CRe=o(" \u2014 "),j0=a("a"),MRe=o("GPT2Config"),ERe=o(" (OpenAI GPT-2 model)"),yRe=l(),Qf=a("li"),FV=a("strong"),wRe=o("gpt_neo"),ARe=o(" \u2014 "),N0=a("a"),LRe=o("GPTNeoConfig"),BRe=o(" (GPT Neo model)"),xRe=l(),Hf=a("li"),CV=a("strong"),kRe=o("gptj"),RRe=o(" \u2014 "),D0=a("a"),SRe=o("GPTJConfig"),PRe=o(" (GPT-J model)"),$Re=l(),Uf=a("li"),MV=a("strong"),IRe=o("hubert"),jRe=o(" \u2014 "),q0=a("a"),NRe=o("HubertConfig"),DRe=o(" (Hubert model)"),qRe=l(),Jf=a("li"),EV=a("strong"),GRe=o("ibert"),ORe=o(" \u2014 "),G0=a("a"),XRe=o("IBertConfig"),zRe=o(" (I-BERT model)"),VRe=l(),Yf=a("li"),yV=a("strong"),WRe=o("imagegpt"),QRe=o(" \u2014 "),O0=a("a"),HRe=o("ImageGPTConfig"),URe=o(" (ImageGPT model)"),JRe=l(),Kf=a("li"),wV=a("strong"),YRe=o("layoutlm"),KRe=o(" \u2014 "),X0=a("a"),ZRe=o("LayoutLMConfig"),eSe=o(" (LayoutLM model)"),oSe=l(),Zf=a("li"),AV=a("strong"),rSe=o("layoutlmv2"),tSe=o(" \u2014 "),z0=a("a"),aSe=o("LayoutLMv2Config"),nSe=o(" (LayoutLMv2 model)"),sSe=l(),em=a("li"),LV=a("strong"),lSe=o("led"),iSe=o(" \u2014 "),V0=a("a"),dSe=o("LEDConfig"),cSe=o(" (LED model)"),fSe=l(),om=a("li"),BV=a("strong"),mSe=o("longformer"),gSe=o(" \u2014 "),W0=a("a"),hSe=o("LongformerConfig"),pSe=o(" (Longformer model)"),_Se=l(),rm=a("li"),xV=a("strong"),uSe=o("luke"),bSe=o(" \u2014 "),Q0=a("a"),vSe=o("LukeConfig"),TSe=o(" (LUKE model)"),FSe=l(),tm=a("li"),kV=a("strong"),CSe=o("lxmert"),MSe=o(" \u2014 "),H0=a("a"),ESe=o("LxmertConfig"),ySe=o(" (LXMERT model)"),wSe=l(),am=a("li"),RV=a("strong"),ASe=o("m2m_100"),LSe=o(" \u2014 "),U0=a("a"),BSe=o("M2M100Config"),xSe=o(" (M2M100 model)"),kSe=l(),nm=a("li"),SV=a("strong"),RSe=o("marian"),SSe=o(" \u2014 "),J0=a("a"),PSe=o("MarianConfig"),$Se=o(" (Marian model)"),ISe=l(),sm=a("li"),PV=a("strong"),jSe=o("mbart"),NSe=o(" \u2014 "),Y0=a("a"),DSe=o("MBartConfig"),qSe=o(" (mBART model)"),GSe=l(),lm=a("li"),$V=a("strong"),OSe=o("megatron-bert"),XSe=o(" \u2014 "),K0=a("a"),zSe=o("MegatronBertConfig"),VSe=o(" (MegatronBert model)"),WSe=l(),im=a("li"),IV=a("strong"),QSe=o("mobilebert"),HSe=o(" \u2014 "),Z0=a("a"),USe=o("MobileBertConfig"),JSe=o(" (MobileBERT model)"),YSe=l(),dm=a("li"),jV=a("strong"),KSe=o("mpnet"),ZSe=o(" \u2014 "),eL=a("a"),ePe=o("MPNetConfig"),oPe=o(" (MPNet model)"),rPe=l(),cm=a("li"),NV=a("strong"),tPe=o("mt5"),aPe=o(" \u2014 "),oL=a("a"),nPe=o("MT5Config"),sPe=o(" (mT5 model)"),lPe=l(),fm=a("li"),DV=a("strong"),iPe=o("nystromformer"),dPe=o(" \u2014 "),rL=a("a"),cPe=o("NystromformerConfig"),fPe=o(" (Nystromformer model)"),mPe=l(),mm=a("li"),qV=a("strong"),gPe=o("openai-gpt"),hPe=o(" \u2014 "),tL=a("a"),pPe=o("OpenAIGPTConfig"),_Pe=o(" (OpenAI GPT model)"),uPe=l(),gm=a("li"),GV=a("strong"),bPe=o("pegasus"),vPe=o(" \u2014 "),aL=a("a"),TPe=o("PegasusConfig"),FPe=o(" (Pegasus model)"),CPe=l(),hm=a("li"),OV=a("strong"),MPe=o("perceiver"),EPe=o(" \u2014 "),nL=a("a"),yPe=o("PerceiverConfig"),wPe=o(" (Perceiver model)"),APe=l(),pm=a("li"),XV=a("strong"),LPe=o("prophetnet"),BPe=o(" \u2014 "),sL=a("a"),xPe=o("ProphetNetConfig"),kPe=o(" (ProphetNet model)"),RPe=l(),_m=a("li"),zV=a("strong"),SPe=o("qdqbert"),PPe=o(" \u2014 "),lL=a("a"),$Pe=o("QDQBertConfig"),IPe=o(" (QDQBert model)"),jPe=l(),um=a("li"),VV=a("strong"),NPe=o("rag"),DPe=o(" \u2014 "),iL=a("a"),qPe=o("RagConfig"),GPe=o(" (RAG model)"),OPe=l(),bm=a("li"),WV=a("strong"),XPe=o("realm"),zPe=o(" \u2014 "),dL=a("a"),VPe=o("RealmConfig"),WPe=o(" (Realm model)"),QPe=l(),vm=a("li"),QV=a("strong"),HPe=o("reformer"),UPe=o(" \u2014 "),cL=a("a"),JPe=o("ReformerConfig"),YPe=o(" (Reformer model)"),KPe=l(),Tm=a("li"),HV=a("strong"),ZPe=o("rembert"),e$e=o(" \u2014 "),fL=a("a"),o$e=o("RemBertConfig"),r$e=o(" (RemBERT model)"),t$e=l(),Fm=a("li"),UV=a("strong"),a$e=o("retribert"),n$e=o(" \u2014 "),mL=a("a"),s$e=o("RetriBertConfig"),l$e=o(" (RetriBERT model)"),i$e=l(),Cm=a("li"),JV=a("strong"),d$e=o("roberta"),c$e=o(" \u2014 "),gL=a("a"),f$e=o("RobertaConfig"),m$e=o(" (RoBERTa model)"),g$e=l(),Mm=a("li"),YV=a("strong"),h$e=o("roformer"),p$e=o(" \u2014 "),hL=a("a"),_$e=o("RoFormerConfig"),u$e=o(" (RoFormer model)"),b$e=l(),Em=a("li"),KV=a("strong"),v$e=o("segformer"),T$e=o(" \u2014 "),pL=a("a"),F$e=o("SegformerConfig"),C$e=o(" (SegFormer model)"),M$e=l(),ym=a("li"),ZV=a("strong"),E$e=o("sew"),y$e=o(" \u2014 "),_L=a("a"),w$e=o("SEWConfig"),A$e=o(" (SEW model)"),L$e=l(),wm=a("li"),eW=a("strong"),B$e=o("sew-d"),x$e=o(" \u2014 "),uL=a("a"),k$e=o("SEWDConfig"),R$e=o(" (SEW-D model)"),S$e=l(),Am=a("li"),oW=a("strong"),P$e=o("speech-encoder-decoder"),$$e=o(" \u2014 "),bL=a("a"),I$e=o("SpeechEncoderDecoderConfig"),j$e=o(" (Speech Encoder decoder model)"),N$e=l(),Lm=a("li"),rW=a("strong"),D$e=o("speech_to_text"),q$e=o(" \u2014 "),vL=a("a"),G$e=o("Speech2TextConfig"),O$e=o(" (Speech2Text model)"),X$e=l(),Bm=a("li"),tW=a("strong"),z$e=o("speech_to_text_2"),V$e=o(" \u2014 "),TL=a("a"),W$e=o("Speech2Text2Config"),Q$e=o(" (Speech2Text2 model)"),H$e=l(),xm=a("li"),aW=a("strong"),U$e=o("splinter"),J$e=o(" \u2014 "),FL=a("a"),Y$e=o("SplinterConfig"),K$e=o(" (Splinter model)"),Z$e=l(),km=a("li"),nW=a("strong"),eIe=o("squeezebert"),oIe=o(" \u2014 "),CL=a("a"),rIe=o("SqueezeBertConfig"),tIe=o(" (SqueezeBERT model)"),aIe=l(),Rm=a("li"),sW=a("strong"),nIe=o("swin"),sIe=o(" \u2014 "),ML=a("a"),lIe=o("SwinConfig"),iIe=o(" (Swin model)"),dIe=l(),Sm=a("li"),lW=a("strong"),cIe=o("t5"),fIe=o(" \u2014 "),EL=a("a"),mIe=o("T5Config"),gIe=o(" (T5 model)"),hIe=l(),Pm=a("li"),iW=a("strong"),pIe=o("tapas"),_Ie=o(" \u2014 "),yL=a("a"),uIe=o("TapasConfig"),bIe=o(" (TAPAS model)"),vIe=l(),$m=a("li"),dW=a("strong"),TIe=o("transfo-xl"),FIe=o(" \u2014 "),wL=a("a"),CIe=o("TransfoXLConfig"),MIe=o(" (Transformer-XL model)"),EIe=l(),Im=a("li"),cW=a("strong"),yIe=o("trocr"),wIe=o(" \u2014 "),AL=a("a"),AIe=o("TrOCRConfig"),LIe=o(" (TrOCR model)"),BIe=l(),jm=a("li"),fW=a("strong"),xIe=o("unispeech"),kIe=o(" \u2014 "),LL=a("a"),RIe=o("UniSpeechConfig"),SIe=o(" (UniSpeech model)"),PIe=l(),Nm=a("li"),mW=a("strong"),$Ie=o("unispeech-sat"),IIe=o(" \u2014 "),BL=a("a"),jIe=o("UniSpeechSatConfig"),NIe=o(" (UniSpeechSat model)"),DIe=l(),Dm=a("li"),gW=a("strong"),qIe=o("vilt"),GIe=o(" \u2014 "),xL=a("a"),OIe=o("ViltConfig"),XIe=o(" (ViLT model)"),zIe=l(),qm=a("li"),hW=a("strong"),VIe=o("vision-encoder-decoder"),WIe=o(" \u2014 "),kL=a("a"),QIe=o("VisionEncoderDecoderConfig"),HIe=o(" (Vision Encoder decoder model)"),UIe=l(),Gm=a("li"),pW=a("strong"),JIe=o("vision-text-dual-encoder"),YIe=o(" \u2014 "),RL=a("a"),KIe=o("VisionTextDualEncoderConfig"),ZIe=o(" (VisionTextDualEncoder model)"),eje=l(),Om=a("li"),_W=a("strong"),oje=o("visual_bert"),rje=o(" \u2014 "),SL=a("a"),tje=o("VisualBertConfig"),aje=o(" (VisualBert model)"),nje=l(),Xm=a("li"),uW=a("strong"),sje=o("vit"),lje=o(" \u2014 "),PL=a("a"),ije=o("ViTConfig"),dje=o(" (ViT model)"),cje=l(),zm=a("li"),bW=a("strong"),fje=o("vit_mae"),mje=o(" \u2014 "),$L=a("a"),gje=o("ViTMAEConfig"),hje=o(" (ViTMAE model)"),pje=l(),Vm=a("li"),vW=a("strong"),_je=o("wav2vec2"),uje=o(" \u2014 "),IL=a("a"),bje=o("Wav2Vec2Config"),vje=o(" (Wav2Vec2 model)"),Tje=l(),Wm=a("li"),TW=a("strong"),Fje=o("wavlm"),Cje=o(" \u2014 "),jL=a("a"),Mje=o("WavLMConfig"),Eje=o(" (WavLM model)"),yje=l(),Qm=a("li"),FW=a("strong"),wje=o("xglm"),Aje=o(" \u2014 "),NL=a("a"),Lje=o("XGLMConfig"),Bje=o(" (XGLM model)"),xje=l(),Hm=a("li"),CW=a("strong"),kje=o("xlm"),Rje=o(" \u2014 "),DL=a("a"),Sje=o("XLMConfig"),Pje=o(" (XLM model)"),$je=l(),Um=a("li"),MW=a("strong"),Ije=o("xlm-prophetnet"),jje=o(" \u2014 "),qL=a("a"),Nje=o("XLMProphetNetConfig"),Dje=o(" (XLMProphetNet model)"),qje=l(),Jm=a("li"),EW=a("strong"),Gje=o("xlm-roberta"),Oje=o(" \u2014 "),GL=a("a"),Xje=o("XLMRobertaConfig"),zje=o(" (XLM-RoBERTa model)"),Vje=l(),Ym=a("li"),yW=a("strong"),Wje=o("xlm-roberta-xl"),Qje=o(" \u2014 "),OL=a("a"),Hje=o("XLMRobertaXLConfig"),Uje=o(" (XLM-RoBERTa-XL model)"),Jje=l(),Km=a("li"),wW=a("strong"),Yje=o("xlnet"),Kje=o(" \u2014 "),XL=a("a"),Zje=o("XLNetConfig"),eNe=o(" (XLNet model)"),oNe=l(),Zm=a("li"),AW=a("strong"),rNe=o("yoso"),tNe=o(" \u2014 "),zL=a("a"),aNe=o("YosoConfig"),nNe=o(" (YOSO model)"),sNe=l(),LW=a("p"),lNe=o("Examples:"),iNe=l(),f(NC.$$.fragment),dNe=l(),eg=a("div"),f(DC.$$.fragment),cNe=l(),BW=a("p"),fNe=o("Register a new configuration for this class."),CAe=l(),Li=a("h2"),og=a("a"),xW=a("span"),f(qC.$$.fragment),mNe=l(),kW=a("span"),gNe=o("AutoTokenizer"),MAe=l(),Go=a("div"),f(GC.$$.fragment),hNe=l(),OC=a("p"),pNe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),VL=a("a"),_Ne=o("AutoTokenizer.from_pretrained()"),uNe=o(" class method."),bNe=l(),XC=a("p"),vNe=o("This class cannot be instantiated directly using "),RW=a("code"),TNe=o("__init__()"),FNe=o(" (throws an error)."),CNe=l(),co=a("div"),f(zC.$$.fragment),MNe=l(),SW=a("p"),ENe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),yNe=l(),Sa=a("p"),wNe=o("The tokenizer class to instantiate is selected based on the "),PW=a("code"),ANe=o("model_type"),LNe=o(` property of the config object (either
passed as an argument or loaded from `),$W=a("code"),BNe=o("pretrained_model_name_or_path"),xNe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IW=a("code"),kNe=o("pretrained_model_name_or_path"),RNe=o(":"),SNe=l(),M=a("ul"),Pn=a("li"),jW=a("strong"),PNe=o("albert"),$Ne=o(" \u2014 "),WL=a("a"),INe=o("AlbertTokenizer"),jNe=o(" or "),QL=a("a"),NNe=o("AlbertTokenizerFast"),DNe=o(" (ALBERT model)"),qNe=l(),$n=a("li"),NW=a("strong"),GNe=o("bart"),ONe=o(" \u2014 "),HL=a("a"),XNe=o("BartTokenizer"),zNe=o(" or "),UL=a("a"),VNe=o("BartTokenizerFast"),WNe=o(" (BART model)"),QNe=l(),In=a("li"),DW=a("strong"),HNe=o("barthez"),UNe=o(" \u2014 "),JL=a("a"),JNe=o("BarthezTokenizer"),YNe=o(" or "),YL=a("a"),KNe=o("BarthezTokenizerFast"),ZNe=o(" (BARThez model)"),eDe=l(),rg=a("li"),qW=a("strong"),oDe=o("bartpho"),rDe=o(" \u2014 "),KL=a("a"),tDe=o("BartphoTokenizer"),aDe=o(" (BARTpho model)"),nDe=l(),jn=a("li"),GW=a("strong"),sDe=o("bert"),lDe=o(" \u2014 "),ZL=a("a"),iDe=o("BertTokenizer"),dDe=o(" or "),e9=a("a"),cDe=o("BertTokenizerFast"),fDe=o(" (BERT model)"),mDe=l(),tg=a("li"),OW=a("strong"),gDe=o("bert-generation"),hDe=o(" \u2014 "),o9=a("a"),pDe=o("BertGenerationTokenizer"),_De=o(" (Bert Generation model)"),uDe=l(),ag=a("li"),XW=a("strong"),bDe=o("bert-japanese"),vDe=o(" \u2014 "),r9=a("a"),TDe=o("BertJapaneseTokenizer"),FDe=o(" (BertJapanese model)"),CDe=l(),ng=a("li"),zW=a("strong"),MDe=o("bertweet"),EDe=o(" \u2014 "),t9=a("a"),yDe=o("BertweetTokenizer"),wDe=o(" (Bertweet model)"),ADe=l(),Nn=a("li"),VW=a("strong"),LDe=o("big_bird"),BDe=o(" \u2014 "),a9=a("a"),xDe=o("BigBirdTokenizer"),kDe=o(" or "),n9=a("a"),RDe=o("BigBirdTokenizerFast"),SDe=o(" (BigBird model)"),PDe=l(),Dn=a("li"),WW=a("strong"),$De=o("bigbird_pegasus"),IDe=o(" \u2014 "),s9=a("a"),jDe=o("PegasusTokenizer"),NDe=o(" or "),l9=a("a"),DDe=o("PegasusTokenizerFast"),qDe=o(" (BigBirdPegasus model)"),GDe=l(),qn=a("li"),QW=a("strong"),ODe=o("blenderbot"),XDe=o(" \u2014 "),i9=a("a"),zDe=o("BlenderbotTokenizer"),VDe=o(" or "),d9=a("a"),WDe=o("BlenderbotTokenizerFast"),QDe=o(" (Blenderbot model)"),HDe=l(),sg=a("li"),HW=a("strong"),UDe=o("blenderbot-small"),JDe=o(" \u2014 "),c9=a("a"),YDe=o("BlenderbotSmallTokenizer"),KDe=o(" (BlenderbotSmall model)"),ZDe=l(),lg=a("li"),UW=a("strong"),eqe=o("byt5"),oqe=o(" \u2014 "),f9=a("a"),rqe=o("ByT5Tokenizer"),tqe=o(" (ByT5 model)"),aqe=l(),Gn=a("li"),JW=a("strong"),nqe=o("camembert"),sqe=o(" \u2014 "),m9=a("a"),lqe=o("CamembertTokenizer"),iqe=o(" or "),g9=a("a"),dqe=o("CamembertTokenizerFast"),cqe=o(" (CamemBERT model)"),fqe=l(),ig=a("li"),YW=a("strong"),mqe=o("canine"),gqe=o(" \u2014 "),h9=a("a"),hqe=o("CanineTokenizer"),pqe=o(" (Canine model)"),_qe=l(),On=a("li"),KW=a("strong"),uqe=o("clip"),bqe=o(" \u2014 "),p9=a("a"),vqe=o("CLIPTokenizer"),Tqe=o(" or "),_9=a("a"),Fqe=o("CLIPTokenizerFast"),Cqe=o(" (CLIP model)"),Mqe=l(),Xn=a("li"),ZW=a("strong"),Eqe=o("convbert"),yqe=o(" \u2014 "),u9=a("a"),wqe=o("ConvBertTokenizer"),Aqe=o(" or "),b9=a("a"),Lqe=o("ConvBertTokenizerFast"),Bqe=o(" (ConvBERT model)"),xqe=l(),zn=a("li"),eQ=a("strong"),kqe=o("cpm"),Rqe=o(" \u2014 "),v9=a("a"),Sqe=o("CpmTokenizer"),Pqe=o(" or "),oQ=a("code"),$qe=o("CpmTokenizerFast"),Iqe=o(" (CPM model)"),jqe=l(),dg=a("li"),rQ=a("strong"),Nqe=o("ctrl"),Dqe=o(" \u2014 "),T9=a("a"),qqe=o("CTRLTokenizer"),Gqe=o(" (CTRL model)"),Oqe=l(),Vn=a("li"),tQ=a("strong"),Xqe=o("deberta"),zqe=o(" \u2014 "),F9=a("a"),Vqe=o("DebertaTokenizer"),Wqe=o(" or "),C9=a("a"),Qqe=o("DebertaTokenizerFast"),Hqe=o(" (DeBERTa model)"),Uqe=l(),cg=a("li"),aQ=a("strong"),Jqe=o("deberta-v2"),Yqe=o(" \u2014 "),M9=a("a"),Kqe=o("DebertaV2Tokenizer"),Zqe=o(" (DeBERTa-v2 model)"),eGe=l(),Wn=a("li"),nQ=a("strong"),oGe=o("distilbert"),rGe=o(" \u2014 "),E9=a("a"),tGe=o("DistilBertTokenizer"),aGe=o(" or "),y9=a("a"),nGe=o("DistilBertTokenizerFast"),sGe=o(" (DistilBERT model)"),lGe=l(),Qn=a("li"),sQ=a("strong"),iGe=o("dpr"),dGe=o(" \u2014 "),w9=a("a"),cGe=o("DPRQuestionEncoderTokenizer"),fGe=o(" or "),A9=a("a"),mGe=o("DPRQuestionEncoderTokenizerFast"),gGe=o(" (DPR model)"),hGe=l(),Hn=a("li"),lQ=a("strong"),pGe=o("electra"),_Ge=o(" \u2014 "),L9=a("a"),uGe=o("ElectraTokenizer"),bGe=o(" or "),B9=a("a"),vGe=o("ElectraTokenizerFast"),TGe=o(" (ELECTRA model)"),FGe=l(),fg=a("li"),iQ=a("strong"),CGe=o("flaubert"),MGe=o(" \u2014 "),x9=a("a"),EGe=o("FlaubertTokenizer"),yGe=o(" (FlauBERT model)"),wGe=l(),Un=a("li"),dQ=a("strong"),AGe=o("fnet"),LGe=o(" \u2014 "),k9=a("a"),BGe=o("FNetTokenizer"),xGe=o(" or "),R9=a("a"),kGe=o("FNetTokenizerFast"),RGe=o(" (FNet model)"),SGe=l(),mg=a("li"),cQ=a("strong"),PGe=o("fsmt"),$Ge=o(" \u2014 "),S9=a("a"),IGe=o("FSMTTokenizer"),jGe=o(" (FairSeq Machine-Translation model)"),NGe=l(),Jn=a("li"),fQ=a("strong"),DGe=o("funnel"),qGe=o(" \u2014 "),P9=a("a"),GGe=o("FunnelTokenizer"),OGe=o(" or "),$9=a("a"),XGe=o("FunnelTokenizerFast"),zGe=o(" (Funnel Transformer model)"),VGe=l(),Yn=a("li"),mQ=a("strong"),WGe=o("gpt2"),QGe=o(" \u2014 "),I9=a("a"),HGe=o("GPT2Tokenizer"),UGe=o(" or "),j9=a("a"),JGe=o("GPT2TokenizerFast"),YGe=o(" (OpenAI GPT-2 model)"),KGe=l(),Kn=a("li"),gQ=a("strong"),ZGe=o("gpt_neo"),eOe=o(" \u2014 "),N9=a("a"),oOe=o("GPT2Tokenizer"),rOe=o(" or "),D9=a("a"),tOe=o("GPT2TokenizerFast"),aOe=o(" (GPT Neo model)"),nOe=l(),Zn=a("li"),hQ=a("strong"),sOe=o("herbert"),lOe=o(" \u2014 "),q9=a("a"),iOe=o("HerbertTokenizer"),dOe=o(" or "),G9=a("a"),cOe=o("HerbertTokenizerFast"),fOe=o(" (HerBERT model)"),mOe=l(),gg=a("li"),pQ=a("strong"),gOe=o("hubert"),hOe=o(" \u2014 "),O9=a("a"),pOe=o("Wav2Vec2CTCTokenizer"),_Oe=o(" (Hubert model)"),uOe=l(),es=a("li"),_Q=a("strong"),bOe=o("ibert"),vOe=o(" \u2014 "),X9=a("a"),TOe=o("RobertaTokenizer"),FOe=o(" or "),z9=a("a"),COe=o("RobertaTokenizerFast"),MOe=o(" (I-BERT model)"),EOe=l(),os=a("li"),uQ=a("strong"),yOe=o("layoutlm"),wOe=o(" \u2014 "),V9=a("a"),AOe=o("LayoutLMTokenizer"),LOe=o(" or "),W9=a("a"),BOe=o("LayoutLMTokenizerFast"),xOe=o(" (LayoutLM model)"),kOe=l(),rs=a("li"),bQ=a("strong"),ROe=o("layoutlmv2"),SOe=o(" \u2014 "),Q9=a("a"),POe=o("LayoutLMv2Tokenizer"),$Oe=o(" or "),H9=a("a"),IOe=o("LayoutLMv2TokenizerFast"),jOe=o(" (LayoutLMv2 model)"),NOe=l(),ts=a("li"),vQ=a("strong"),DOe=o("layoutxlm"),qOe=o(" \u2014 "),U9=a("a"),GOe=o("LayoutXLMTokenizer"),OOe=o(" or "),J9=a("a"),XOe=o("LayoutXLMTokenizerFast"),zOe=o(" (LayoutXLM model)"),VOe=l(),as=a("li"),TQ=a("strong"),WOe=o("led"),QOe=o(" \u2014 "),Y9=a("a"),HOe=o("LEDTokenizer"),UOe=o(" or "),K9=a("a"),JOe=o("LEDTokenizerFast"),YOe=o(" (LED model)"),KOe=l(),ns=a("li"),FQ=a("strong"),ZOe=o("longformer"),eXe=o(" \u2014 "),Z9=a("a"),oXe=o("LongformerTokenizer"),rXe=o(" or "),eB=a("a"),tXe=o("LongformerTokenizerFast"),aXe=o(" (Longformer model)"),nXe=l(),hg=a("li"),CQ=a("strong"),sXe=o("luke"),lXe=o(" \u2014 "),oB=a("a"),iXe=o("LukeTokenizer"),dXe=o(" (LUKE model)"),cXe=l(),ss=a("li"),MQ=a("strong"),fXe=o("lxmert"),mXe=o(" \u2014 "),rB=a("a"),gXe=o("LxmertTokenizer"),hXe=o(" or "),tB=a("a"),pXe=o("LxmertTokenizerFast"),_Xe=o(" (LXMERT model)"),uXe=l(),pg=a("li"),EQ=a("strong"),bXe=o("m2m_100"),vXe=o(" \u2014 "),aB=a("a"),TXe=o("M2M100Tokenizer"),FXe=o(" (M2M100 model)"),CXe=l(),_g=a("li"),yQ=a("strong"),MXe=o("marian"),EXe=o(" \u2014 "),nB=a("a"),yXe=o("MarianTokenizer"),wXe=o(" (Marian model)"),AXe=l(),ls=a("li"),wQ=a("strong"),LXe=o("mbart"),BXe=o(" \u2014 "),sB=a("a"),xXe=o("MBartTokenizer"),kXe=o(" or "),lB=a("a"),RXe=o("MBartTokenizerFast"),SXe=o(" (mBART model)"),PXe=l(),is=a("li"),AQ=a("strong"),$Xe=o("mbart50"),IXe=o(" \u2014 "),iB=a("a"),jXe=o("MBart50Tokenizer"),NXe=o(" or "),dB=a("a"),DXe=o("MBart50TokenizerFast"),qXe=o(" (mBART-50 model)"),GXe=l(),ug=a("li"),LQ=a("strong"),OXe=o("mluke"),XXe=o(" \u2014 "),cB=a("a"),zXe=o("MLukeTokenizer"),VXe=o(" (mLUKE model)"),WXe=l(),ds=a("li"),BQ=a("strong"),QXe=o("mobilebert"),HXe=o(" \u2014 "),fB=a("a"),UXe=o("MobileBertTokenizer"),JXe=o(" or "),mB=a("a"),YXe=o("MobileBertTokenizerFast"),KXe=o(" (MobileBERT model)"),ZXe=l(),cs=a("li"),xQ=a("strong"),eze=o("mpnet"),oze=o(" \u2014 "),gB=a("a"),rze=o("MPNetTokenizer"),tze=o(" or "),hB=a("a"),aze=o("MPNetTokenizerFast"),nze=o(" (MPNet model)"),sze=l(),fs=a("li"),kQ=a("strong"),lze=o("mt5"),ize=o(" \u2014 "),pB=a("a"),dze=o("MT5Tokenizer"),cze=o(" or "),_B=a("a"),fze=o("MT5TokenizerFast"),mze=o(" (mT5 model)"),gze=l(),ms=a("li"),RQ=a("strong"),hze=o("openai-gpt"),pze=o(" \u2014 "),uB=a("a"),_ze=o("OpenAIGPTTokenizer"),uze=o(" or "),bB=a("a"),bze=o("OpenAIGPTTokenizerFast"),vze=o(" (OpenAI GPT model)"),Tze=l(),gs=a("li"),SQ=a("strong"),Fze=o("pegasus"),Cze=o(" \u2014 "),vB=a("a"),Mze=o("PegasusTokenizer"),Eze=o(" or "),TB=a("a"),yze=o("PegasusTokenizerFast"),wze=o(" (Pegasus model)"),Aze=l(),bg=a("li"),PQ=a("strong"),Lze=o("perceiver"),Bze=o(" \u2014 "),FB=a("a"),xze=o("PerceiverTokenizer"),kze=o(" (Perceiver model)"),Rze=l(),vg=a("li"),$Q=a("strong"),Sze=o("phobert"),Pze=o(" \u2014 "),CB=a("a"),$ze=o("PhobertTokenizer"),Ize=o(" (PhoBERT model)"),jze=l(),Tg=a("li"),IQ=a("strong"),Nze=o("prophetnet"),Dze=o(" \u2014 "),MB=a("a"),qze=o("ProphetNetTokenizer"),Gze=o(" (ProphetNet model)"),Oze=l(),hs=a("li"),jQ=a("strong"),Xze=o("qdqbert"),zze=o(" \u2014 "),EB=a("a"),Vze=o("BertTokenizer"),Wze=o(" or "),yB=a("a"),Qze=o("BertTokenizerFast"),Hze=o(" (QDQBert model)"),Uze=l(),Fg=a("li"),NQ=a("strong"),Jze=o("rag"),Yze=o(" \u2014 "),wB=a("a"),Kze=o("RagTokenizer"),Zze=o(" (RAG model)"),eVe=l(),ps=a("li"),DQ=a("strong"),oVe=o("reformer"),rVe=o(" \u2014 "),AB=a("a"),tVe=o("ReformerTokenizer"),aVe=o(" or "),LB=a("a"),nVe=o("ReformerTokenizerFast"),sVe=o(" (Reformer model)"),lVe=l(),_s=a("li"),qQ=a("strong"),iVe=o("rembert"),dVe=o(" \u2014 "),BB=a("a"),cVe=o("RemBertTokenizer"),fVe=o(" or "),xB=a("a"),mVe=o("RemBertTokenizerFast"),gVe=o(" (RemBERT model)"),hVe=l(),us=a("li"),GQ=a("strong"),pVe=o("retribert"),_Ve=o(" \u2014 "),kB=a("a"),uVe=o("RetriBertTokenizer"),bVe=o(" or "),RB=a("a"),vVe=o("RetriBertTokenizerFast"),TVe=o(" (RetriBERT model)"),FVe=l(),bs=a("li"),OQ=a("strong"),CVe=o("roberta"),MVe=o(" \u2014 "),SB=a("a"),EVe=o("RobertaTokenizer"),yVe=o(" or "),PB=a("a"),wVe=o("RobertaTokenizerFast"),AVe=o(" (RoBERTa model)"),LVe=l(),vs=a("li"),XQ=a("strong"),BVe=o("roformer"),xVe=o(" \u2014 "),$B=a("a"),kVe=o("RoFormerTokenizer"),RVe=o(" or "),IB=a("a"),SVe=o("RoFormerTokenizerFast"),PVe=o(" (RoFormer model)"),$Ve=l(),Cg=a("li"),zQ=a("strong"),IVe=o("speech_to_text"),jVe=o(" \u2014 "),jB=a("a"),NVe=o("Speech2TextTokenizer"),DVe=o(" (Speech2Text model)"),qVe=l(),Mg=a("li"),VQ=a("strong"),GVe=o("speech_to_text_2"),OVe=o(" \u2014 "),NB=a("a"),XVe=o("Speech2Text2Tokenizer"),zVe=o(" (Speech2Text2 model)"),VVe=l(),Ts=a("li"),WQ=a("strong"),WVe=o("splinter"),QVe=o(" \u2014 "),DB=a("a"),HVe=o("SplinterTokenizer"),UVe=o(" or "),qB=a("a"),JVe=o("SplinterTokenizerFast"),YVe=o(" (Splinter model)"),KVe=l(),Fs=a("li"),QQ=a("strong"),ZVe=o("squeezebert"),eWe=o(" \u2014 "),GB=a("a"),oWe=o("SqueezeBertTokenizer"),rWe=o(" or "),OB=a("a"),tWe=o("SqueezeBertTokenizerFast"),aWe=o(" (SqueezeBERT model)"),nWe=l(),Cs=a("li"),HQ=a("strong"),sWe=o("t5"),lWe=o(" \u2014 "),XB=a("a"),iWe=o("T5Tokenizer"),dWe=o(" or "),zB=a("a"),cWe=o("T5TokenizerFast"),fWe=o(" (T5 model)"),mWe=l(),Eg=a("li"),UQ=a("strong"),gWe=o("tapas"),hWe=o(" \u2014 "),VB=a("a"),pWe=o("TapasTokenizer"),_We=o(" (TAPAS model)"),uWe=l(),yg=a("li"),JQ=a("strong"),bWe=o("transfo-xl"),vWe=o(" \u2014 "),WB=a("a"),TWe=o("TransfoXLTokenizer"),FWe=o(" (Transformer-XL model)"),CWe=l(),wg=a("li"),YQ=a("strong"),MWe=o("wav2vec2"),EWe=o(" \u2014 "),QB=a("a"),yWe=o("Wav2Vec2CTCTokenizer"),wWe=o(" (Wav2Vec2 model)"),AWe=l(),Ag=a("li"),KQ=a("strong"),LWe=o("wav2vec2_phoneme"),BWe=o(" \u2014 "),HB=a("a"),xWe=o("Wav2Vec2PhonemeCTCTokenizer"),kWe=o(" (Wav2Vec2Phoneme model)"),RWe=l(),Ms=a("li"),ZQ=a("strong"),SWe=o("xglm"),PWe=o(" \u2014 "),UB=a("a"),$We=o("XGLMTokenizer"),IWe=o(" or "),JB=a("a"),jWe=o("XGLMTokenizerFast"),NWe=o(" (XGLM model)"),DWe=l(),Lg=a("li"),eH=a("strong"),qWe=o("xlm"),GWe=o(" \u2014 "),YB=a("a"),OWe=o("XLMTokenizer"),XWe=o(" (XLM model)"),zWe=l(),Bg=a("li"),oH=a("strong"),VWe=o("xlm-prophetnet"),WWe=o(" \u2014 "),KB=a("a"),QWe=o("XLMProphetNetTokenizer"),HWe=o(" (XLMProphetNet model)"),UWe=l(),Es=a("li"),rH=a("strong"),JWe=o("xlm-roberta"),YWe=o(" \u2014 "),ZB=a("a"),KWe=o("XLMRobertaTokenizer"),ZWe=o(" or "),ex=a("a"),eQe=o("XLMRobertaTokenizerFast"),oQe=o(" (XLM-RoBERTa model)"),rQe=l(),ys=a("li"),tH=a("strong"),tQe=o("xlnet"),aQe=o(" \u2014 "),ox=a("a"),nQe=o("XLNetTokenizer"),sQe=o(" or "),rx=a("a"),lQe=o("XLNetTokenizerFast"),iQe=o(" (XLNet model)"),dQe=l(),aH=a("p"),cQe=o("Examples:"),fQe=l(),f(VC.$$.fragment),mQe=l(),xg=a("div"),f(WC.$$.fragment),gQe=l(),nH=a("p"),hQe=o("Register a new tokenizer in this mapping."),EAe=l(),Bi=a("h2"),kg=a("a"),sH=a("span"),f(QC.$$.fragment),pQe=l(),lH=a("span"),_Qe=o("AutoFeatureExtractor"),yAe=l(),Oo=a("div"),f(HC.$$.fragment),uQe=l(),UC=a("p"),bQe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tx=a("a"),vQe=o("AutoFeatureExtractor.from_pretrained()"),TQe=o(" class method."),FQe=l(),JC=a("p"),CQe=o("This class cannot be instantiated directly using "),iH=a("code"),MQe=o("__init__()"),EQe=o(" (throws an error)."),yQe=l(),Le=a("div"),f(YC.$$.fragment),wQe=l(),dH=a("p"),AQe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),LQe=l(),Pa=a("p"),BQe=o("The feature extractor class to instantiate is selected based on the "),cH=a("code"),xQe=o("model_type"),kQe=o(` property of the config object
(either passed as an argument or loaded from `),fH=a("code"),RQe=o("pretrained_model_name_or_path"),SQe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mH=a("code"),PQe=o("pretrained_model_name_or_path"),$Qe=o(":"),IQe=l(),se=a("ul"),Rg=a("li"),gH=a("strong"),jQe=o("beit"),NQe=o(" \u2014 "),ax=a("a"),DQe=o("BeitFeatureExtractor"),qQe=o(" (BEiT model)"),GQe=l(),Sg=a("li"),hH=a("strong"),OQe=o("clip"),XQe=o(" \u2014 "),nx=a("a"),zQe=o("CLIPFeatureExtractor"),VQe=o(" (CLIP model)"),WQe=l(),Pg=a("li"),pH=a("strong"),QQe=o("convnext"),HQe=o(" \u2014 "),sx=a("a"),UQe=o("ConvNextFeatureExtractor"),JQe=o(" (ConvNext model)"),YQe=l(),$g=a("li"),_H=a("strong"),KQe=o("deit"),ZQe=o(" \u2014 "),lx=a("a"),eHe=o("DeiTFeatureExtractor"),oHe=o(" (DeiT model)"),rHe=l(),Ig=a("li"),uH=a("strong"),tHe=o("detr"),aHe=o(" \u2014 "),ix=a("a"),nHe=o("DetrFeatureExtractor"),sHe=o(" (DETR model)"),lHe=l(),jg=a("li"),bH=a("strong"),iHe=o("hubert"),dHe=o(" \u2014 "),dx=a("a"),cHe=o("Wav2Vec2FeatureExtractor"),fHe=o(" (Hubert model)"),mHe=l(),Ng=a("li"),vH=a("strong"),gHe=o("layoutlmv2"),hHe=o(" \u2014 "),cx=a("a"),pHe=o("LayoutLMv2FeatureExtractor"),_He=o(" (LayoutLMv2 model)"),uHe=l(),Dg=a("li"),TH=a("strong"),bHe=o("perceiver"),vHe=o(" \u2014 "),fx=a("a"),THe=o("PerceiverFeatureExtractor"),FHe=o(" (Perceiver model)"),CHe=l(),qg=a("li"),FH=a("strong"),MHe=o("segformer"),EHe=o(" \u2014 "),mx=a("a"),yHe=o("SegformerFeatureExtractor"),wHe=o(" (SegFormer model)"),AHe=l(),Gg=a("li"),CH=a("strong"),LHe=o("speech_to_text"),BHe=o(" \u2014 "),gx=a("a"),xHe=o("Speech2TextFeatureExtractor"),kHe=o(" (Speech2Text model)"),RHe=l(),Og=a("li"),MH=a("strong"),SHe=o("swin"),PHe=o(" \u2014 "),hx=a("a"),$He=o("ViTFeatureExtractor"),IHe=o(" (Swin model)"),jHe=l(),Xg=a("li"),EH=a("strong"),NHe=o("vit"),DHe=o(" \u2014 "),px=a("a"),qHe=o("ViTFeatureExtractor"),GHe=o(" (ViT model)"),OHe=l(),zg=a("li"),yH=a("strong"),XHe=o("vit_mae"),zHe=o(" \u2014 "),_x=a("a"),VHe=o("ViTFeatureExtractor"),WHe=o(" (ViTMAE model)"),QHe=l(),Vg=a("li"),wH=a("strong"),HHe=o("wav2vec2"),UHe=o(" \u2014 "),ux=a("a"),JHe=o("Wav2Vec2FeatureExtractor"),YHe=o(" (Wav2Vec2 model)"),KHe=l(),f(Wg.$$.fragment),ZHe=l(),AH=a("p"),eUe=o("Examples:"),oUe=l(),f(KC.$$.fragment),rUe=l(),Qg=a("div"),f(ZC.$$.fragment),tUe=l(),LH=a("p"),aUe=o("Register a new feature extractor for this class."),wAe=l(),xi=a("h2"),Hg=a("a"),BH=a("span"),f(e4.$$.fragment),nUe=l(),xH=a("span"),sUe=o("AutoProcessor"),AAe=l(),ea=a("div"),f(o4.$$.fragment),lUe=l(),r4=a("p"),iUe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bx=a("a"),dUe=o("AutoProcessor.from_pretrained()"),cUe=o(" class method."),fUe=l(),t4=a("p"),mUe=o("This class cannot be instantiated directly using "),kH=a("code"),gUe=o("__init__()"),hUe=o(" (throws an error)."),pUe=l(),Be=a("div"),f(a4.$$.fragment),_Ue=l(),RH=a("p"),uUe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bUe=l(),ki=a("p"),vUe=o("The processor class to instantiate is selected based on the "),SH=a("code"),TUe=o("model_type"),FUe=o(` property of the config object (either
passed as an argument or loaded from `),PH=a("code"),CUe=o("pretrained_model_name_or_path"),MUe=o(" if possible):"),EUe=l(),ye=a("ul"),Ug=a("li"),$H=a("strong"),yUe=o("clip"),wUe=o(" \u2014 "),vx=a("a"),AUe=o("CLIPProcessor"),LUe=o(" (CLIP model)"),BUe=l(),Jg=a("li"),IH=a("strong"),xUe=o("layoutlmv2"),kUe=o(" \u2014 "),Tx=a("a"),RUe=o("LayoutLMv2Processor"),SUe=o(" (LayoutLMv2 model)"),PUe=l(),Yg=a("li"),jH=a("strong"),$Ue=o("layoutxlm"),IUe=o(" \u2014 "),Fx=a("a"),jUe=o("LayoutXLMProcessor"),NUe=o(" (LayoutXLM model)"),DUe=l(),Kg=a("li"),NH=a("strong"),qUe=o("speech_to_text"),GUe=o(" \u2014 "),Cx=a("a"),OUe=o("Speech2TextProcessor"),XUe=o(" (Speech2Text model)"),zUe=l(),Zg=a("li"),DH=a("strong"),VUe=o("speech_to_text_2"),WUe=o(" \u2014 "),Mx=a("a"),QUe=o("Speech2Text2Processor"),HUe=o(" (Speech2Text2 model)"),UUe=l(),eh=a("li"),qH=a("strong"),JUe=o("trocr"),YUe=o(" \u2014 "),Ex=a("a"),KUe=o("TrOCRProcessor"),ZUe=o(" (TrOCR model)"),eJe=l(),oh=a("li"),GH=a("strong"),oJe=o("vision-text-dual-encoder"),rJe=o(" \u2014 "),yx=a("a"),tJe=o("VisionTextDualEncoderProcessor"),aJe=o(" (VisionTextDualEncoder model)"),nJe=l(),rh=a("li"),OH=a("strong"),sJe=o("wav2vec2"),lJe=o(" \u2014 "),wx=a("a"),iJe=o("Wav2Vec2Processor"),dJe=o(" (Wav2Vec2 model)"),cJe=l(),f(th.$$.fragment),fJe=l(),XH=a("p"),mJe=o("Examples:"),gJe=l(),f(n4.$$.fragment),LAe=l(),Ri=a("h2"),ah=a("a"),zH=a("span"),f(s4.$$.fragment),hJe=l(),VH=a("span"),pJe=o("AutoModel"),BAe=l(),Xo=a("div"),f(l4.$$.fragment),_Je=l(),Si=a("p"),uJe=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WH=a("code"),bJe=o("from_pretrained()"),vJe=o("class method or the "),QH=a("code"),TJe=o("from_config()"),FJe=o(`class
method.`),CJe=l(),i4=a("p"),MJe=o("This class cannot be instantiated directly using "),HH=a("code"),EJe=o("__init__()"),yJe=o(" (throws an error)."),wJe=l(),$r=a("div"),f(d4.$$.fragment),AJe=l(),UH=a("p"),LJe=o("Instantiates one of the base model classes of the library from a configuration."),BJe=l(),Pi=a("p"),xJe=o(`Note:
Loading a model from its configuration file does `),JH=a("strong"),kJe=o("not"),RJe=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("code"),SJe=o("from_pretrained()"),PJe=o("to load the model weights."),$Je=l(),KH=a("p"),IJe=o("Examples:"),jJe=l(),f(c4.$$.fragment),NJe=l(),xe=a("div"),f(f4.$$.fragment),DJe=l(),ZH=a("p"),qJe=o("Instantiate one of the base model classes of the library from a pretrained model."),GJe=l(),$a=a("p"),OJe=o("The model class to instantiate is selected based on the "),eU=a("code"),XJe=o("model_type"),zJe=o(` property of the config object (either
passed as an argument or loaded from `),oU=a("code"),VJe=o("pretrained_model_name_or_path"),WJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rU=a("code"),QJe=o("pretrained_model_name_or_path"),HJe=o(":"),UJe=l(),F=a("ul"),nh=a("li"),tU=a("strong"),JJe=o("albert"),YJe=o(" \u2014 "),Ax=a("a"),KJe=o("AlbertModel"),ZJe=o(" (ALBERT model)"),eYe=l(),sh=a("li"),aU=a("strong"),oYe=o("bart"),rYe=o(" \u2014 "),Lx=a("a"),tYe=o("BartModel"),aYe=o(" (BART model)"),nYe=l(),lh=a("li"),nU=a("strong"),sYe=o("beit"),lYe=o(" \u2014 "),Bx=a("a"),iYe=o("BeitModel"),dYe=o(" (BEiT model)"),cYe=l(),ih=a("li"),sU=a("strong"),fYe=o("bert"),mYe=o(" \u2014 "),xx=a("a"),gYe=o("BertModel"),hYe=o(" (BERT model)"),pYe=l(),dh=a("li"),lU=a("strong"),_Ye=o("bert-generation"),uYe=o(" \u2014 "),kx=a("a"),bYe=o("BertGenerationEncoder"),vYe=o(" (Bert Generation model)"),TYe=l(),ch=a("li"),iU=a("strong"),FYe=o("big_bird"),CYe=o(" \u2014 "),Rx=a("a"),MYe=o("BigBirdModel"),EYe=o(" (BigBird model)"),yYe=l(),fh=a("li"),dU=a("strong"),wYe=o("bigbird_pegasus"),AYe=o(" \u2014 "),Sx=a("a"),LYe=o("BigBirdPegasusModel"),BYe=o(" (BigBirdPegasus model)"),xYe=l(),mh=a("li"),cU=a("strong"),kYe=o("blenderbot"),RYe=o(" \u2014 "),Px=a("a"),SYe=o("BlenderbotModel"),PYe=o(" (Blenderbot model)"),$Ye=l(),gh=a("li"),fU=a("strong"),IYe=o("blenderbot-small"),jYe=o(" \u2014 "),$x=a("a"),NYe=o("BlenderbotSmallModel"),DYe=o(" (BlenderbotSmall model)"),qYe=l(),hh=a("li"),mU=a("strong"),GYe=o("camembert"),OYe=o(" \u2014 "),Ix=a("a"),XYe=o("CamembertModel"),zYe=o(" (CamemBERT model)"),VYe=l(),ph=a("li"),gU=a("strong"),WYe=o("canine"),QYe=o(" \u2014 "),jx=a("a"),HYe=o("CanineModel"),UYe=o(" (Canine model)"),JYe=l(),_h=a("li"),hU=a("strong"),YYe=o("clip"),KYe=o(" \u2014 "),Nx=a("a"),ZYe=o("CLIPModel"),eKe=o(" (CLIP model)"),oKe=l(),uh=a("li"),pU=a("strong"),rKe=o("convbert"),tKe=o(" \u2014 "),Dx=a("a"),aKe=o("ConvBertModel"),nKe=o(" (ConvBERT model)"),sKe=l(),bh=a("li"),_U=a("strong"),lKe=o("convnext"),iKe=o(" \u2014 "),qx=a("a"),dKe=o("ConvNextModel"),cKe=o(" (ConvNext model)"),fKe=l(),vh=a("li"),uU=a("strong"),mKe=o("ctrl"),gKe=o(" \u2014 "),Gx=a("a"),hKe=o("CTRLModel"),pKe=o(" (CTRL model)"),_Ke=l(),Th=a("li"),bU=a("strong"),uKe=o("deberta"),bKe=o(" \u2014 "),Ox=a("a"),vKe=o("DebertaModel"),TKe=o(" (DeBERTa model)"),FKe=l(),Fh=a("li"),vU=a("strong"),CKe=o("deberta-v2"),MKe=o(" \u2014 "),Xx=a("a"),EKe=o("DebertaV2Model"),yKe=o(" (DeBERTa-v2 model)"),wKe=l(),Ch=a("li"),TU=a("strong"),AKe=o("deit"),LKe=o(" \u2014 "),zx=a("a"),BKe=o("DeiTModel"),xKe=o(" (DeiT model)"),kKe=l(),Mh=a("li"),FU=a("strong"),RKe=o("detr"),SKe=o(" \u2014 "),Vx=a("a"),PKe=o("DetrModel"),$Ke=o(" (DETR model)"),IKe=l(),Eh=a("li"),CU=a("strong"),jKe=o("distilbert"),NKe=o(" \u2014 "),Wx=a("a"),DKe=o("DistilBertModel"),qKe=o(" (DistilBERT model)"),GKe=l(),yh=a("li"),MU=a("strong"),OKe=o("dpr"),XKe=o(" \u2014 "),Qx=a("a"),zKe=o("DPRQuestionEncoder"),VKe=o(" (DPR model)"),WKe=l(),wh=a("li"),EU=a("strong"),QKe=o("electra"),HKe=o(" \u2014 "),Hx=a("a"),UKe=o("ElectraModel"),JKe=o(" (ELECTRA model)"),YKe=l(),Ah=a("li"),yU=a("strong"),KKe=o("flaubert"),ZKe=o(" \u2014 "),Ux=a("a"),eZe=o("FlaubertModel"),oZe=o(" (FlauBERT model)"),rZe=l(),Lh=a("li"),wU=a("strong"),tZe=o("fnet"),aZe=o(" \u2014 "),Jx=a("a"),nZe=o("FNetModel"),sZe=o(" (FNet model)"),lZe=l(),Bh=a("li"),AU=a("strong"),iZe=o("fsmt"),dZe=o(" \u2014 "),Yx=a("a"),cZe=o("FSMTModel"),fZe=o(" (FairSeq Machine-Translation model)"),mZe=l(),ws=a("li"),LU=a("strong"),gZe=o("funnel"),hZe=o(" \u2014 "),Kx=a("a"),pZe=o("FunnelModel"),_Ze=o(" or "),Zx=a("a"),uZe=o("FunnelBaseModel"),bZe=o(" (Funnel Transformer model)"),vZe=l(),xh=a("li"),BU=a("strong"),TZe=o("gpt2"),FZe=o(" \u2014 "),ek=a("a"),CZe=o("GPT2Model"),MZe=o(" (OpenAI GPT-2 model)"),EZe=l(),kh=a("li"),xU=a("strong"),yZe=o("gpt_neo"),wZe=o(" \u2014 "),ok=a("a"),AZe=o("GPTNeoModel"),LZe=o(" (GPT Neo model)"),BZe=l(),Rh=a("li"),kU=a("strong"),xZe=o("gptj"),kZe=o(" \u2014 "),rk=a("a"),RZe=o("GPTJModel"),SZe=o(" (GPT-J model)"),PZe=l(),Sh=a("li"),RU=a("strong"),$Ze=o("hubert"),IZe=o(" \u2014 "),tk=a("a"),jZe=o("HubertModel"),NZe=o(" (Hubert model)"),DZe=l(),Ph=a("li"),SU=a("strong"),qZe=o("ibert"),GZe=o(" \u2014 "),ak=a("a"),OZe=o("IBertModel"),XZe=o(" (I-BERT model)"),zZe=l(),$h=a("li"),PU=a("strong"),VZe=o("imagegpt"),WZe=o(" \u2014 "),nk=a("a"),QZe=o("ImageGPTModel"),HZe=o(" (ImageGPT model)"),UZe=l(),Ih=a("li"),$U=a("strong"),JZe=o("layoutlm"),YZe=o(" \u2014 "),sk=a("a"),KZe=o("LayoutLMModel"),ZZe=o(" (LayoutLM model)"),eeo=l(),jh=a("li"),IU=a("strong"),oeo=o("layoutlmv2"),reo=o(" \u2014 "),lk=a("a"),teo=o("LayoutLMv2Model"),aeo=o(" (LayoutLMv2 model)"),neo=l(),Nh=a("li"),jU=a("strong"),seo=o("led"),leo=o(" \u2014 "),ik=a("a"),ieo=o("LEDModel"),deo=o(" (LED model)"),ceo=l(),Dh=a("li"),NU=a("strong"),feo=o("longformer"),meo=o(" \u2014 "),dk=a("a"),geo=o("LongformerModel"),heo=o(" (Longformer model)"),peo=l(),qh=a("li"),DU=a("strong"),_eo=o("luke"),ueo=o(" \u2014 "),ck=a("a"),beo=o("LukeModel"),veo=o(" (LUKE model)"),Teo=l(),Gh=a("li"),qU=a("strong"),Feo=o("lxmert"),Ceo=o(" \u2014 "),fk=a("a"),Meo=o("LxmertModel"),Eeo=o(" (LXMERT model)"),yeo=l(),Oh=a("li"),GU=a("strong"),weo=o("m2m_100"),Aeo=o(" \u2014 "),mk=a("a"),Leo=o("M2M100Model"),Beo=o(" (M2M100 model)"),xeo=l(),Xh=a("li"),OU=a("strong"),keo=o("marian"),Reo=o(" \u2014 "),gk=a("a"),Seo=o("MarianModel"),Peo=o(" (Marian model)"),$eo=l(),zh=a("li"),XU=a("strong"),Ieo=o("mbart"),jeo=o(" \u2014 "),hk=a("a"),Neo=o("MBartModel"),Deo=o(" (mBART model)"),qeo=l(),Vh=a("li"),zU=a("strong"),Geo=o("megatron-bert"),Oeo=o(" \u2014 "),pk=a("a"),Xeo=o("MegatronBertModel"),zeo=o(" (MegatronBert model)"),Veo=l(),Wh=a("li"),VU=a("strong"),Weo=o("mobilebert"),Qeo=o(" \u2014 "),_k=a("a"),Heo=o("MobileBertModel"),Ueo=o(" (MobileBERT model)"),Jeo=l(),Qh=a("li"),WU=a("strong"),Yeo=o("mpnet"),Keo=o(" \u2014 "),uk=a("a"),Zeo=o("MPNetModel"),eoo=o(" (MPNet model)"),ooo=l(),Hh=a("li"),QU=a("strong"),roo=o("mt5"),too=o(" \u2014 "),bk=a("a"),aoo=o("MT5Model"),noo=o(" (mT5 model)"),soo=l(),Uh=a("li"),HU=a("strong"),loo=o("nystromformer"),ioo=o(" \u2014 "),vk=a("a"),doo=o("NystromformerModel"),coo=o(" (Nystromformer model)"),foo=l(),Jh=a("li"),UU=a("strong"),moo=o("openai-gpt"),goo=o(" \u2014 "),Tk=a("a"),hoo=o("OpenAIGPTModel"),poo=o(" (OpenAI GPT model)"),_oo=l(),Yh=a("li"),JU=a("strong"),uoo=o("pegasus"),boo=o(" \u2014 "),Fk=a("a"),voo=o("PegasusModel"),Too=o(" (Pegasus model)"),Foo=l(),Kh=a("li"),YU=a("strong"),Coo=o("perceiver"),Moo=o(" \u2014 "),Ck=a("a"),Eoo=o("PerceiverModel"),yoo=o(" (Perceiver model)"),woo=l(),Zh=a("li"),KU=a("strong"),Aoo=o("prophetnet"),Loo=o(" \u2014 "),Mk=a("a"),Boo=o("ProphetNetModel"),xoo=o(" (ProphetNet model)"),koo=l(),ep=a("li"),ZU=a("strong"),Roo=o("qdqbert"),Soo=o(" \u2014 "),Ek=a("a"),Poo=o("QDQBertModel"),$oo=o(" (QDQBert model)"),Ioo=l(),op=a("li"),eJ=a("strong"),joo=o("reformer"),Noo=o(" \u2014 "),yk=a("a"),Doo=o("ReformerModel"),qoo=o(" (Reformer model)"),Goo=l(),rp=a("li"),oJ=a("strong"),Ooo=o("rembert"),Xoo=o(" \u2014 "),wk=a("a"),zoo=o("RemBertModel"),Voo=o(" (RemBERT model)"),Woo=l(),tp=a("li"),rJ=a("strong"),Qoo=o("retribert"),Hoo=o(" \u2014 "),Ak=a("a"),Uoo=o("RetriBertModel"),Joo=o(" (RetriBERT model)"),Yoo=l(),ap=a("li"),tJ=a("strong"),Koo=o("roberta"),Zoo=o(" \u2014 "),Lk=a("a"),ero=o("RobertaModel"),oro=o(" (RoBERTa model)"),rro=l(),np=a("li"),aJ=a("strong"),tro=o("roformer"),aro=o(" \u2014 "),Bk=a("a"),nro=o("RoFormerModel"),sro=o(" (RoFormer model)"),lro=l(),sp=a("li"),nJ=a("strong"),iro=o("segformer"),dro=o(" \u2014 "),xk=a("a"),cro=o("SegformerModel"),fro=o(" (SegFormer model)"),mro=l(),lp=a("li"),sJ=a("strong"),gro=o("sew"),hro=o(" \u2014 "),kk=a("a"),pro=o("SEWModel"),_ro=o(" (SEW model)"),uro=l(),ip=a("li"),lJ=a("strong"),bro=o("sew-d"),vro=o(" \u2014 "),Rk=a("a"),Tro=o("SEWDModel"),Fro=o(" (SEW-D model)"),Cro=l(),dp=a("li"),iJ=a("strong"),Mro=o("speech_to_text"),Ero=o(" \u2014 "),Sk=a("a"),yro=o("Speech2TextModel"),wro=o(" (Speech2Text model)"),Aro=l(),cp=a("li"),dJ=a("strong"),Lro=o("splinter"),Bro=o(" \u2014 "),Pk=a("a"),xro=o("SplinterModel"),kro=o(" (Splinter model)"),Rro=l(),fp=a("li"),cJ=a("strong"),Sro=o("squeezebert"),Pro=o(" \u2014 "),$k=a("a"),$ro=o("SqueezeBertModel"),Iro=o(" (SqueezeBERT model)"),jro=l(),mp=a("li"),fJ=a("strong"),Nro=o("swin"),Dro=o(" \u2014 "),Ik=a("a"),qro=o("SwinModel"),Gro=o(" (Swin model)"),Oro=l(),gp=a("li"),mJ=a("strong"),Xro=o("t5"),zro=o(" \u2014 "),jk=a("a"),Vro=o("T5Model"),Wro=o(" (T5 model)"),Qro=l(),hp=a("li"),gJ=a("strong"),Hro=o("tapas"),Uro=o(" \u2014 "),Nk=a("a"),Jro=o("TapasModel"),Yro=o(" (TAPAS model)"),Kro=l(),pp=a("li"),hJ=a("strong"),Zro=o("transfo-xl"),eto=o(" \u2014 "),Dk=a("a"),oto=o("TransfoXLModel"),rto=o(" (Transformer-XL model)"),tto=l(),_p=a("li"),pJ=a("strong"),ato=o("unispeech"),nto=o(" \u2014 "),qk=a("a"),sto=o("UniSpeechModel"),lto=o(" (UniSpeech model)"),ito=l(),up=a("li"),_J=a("strong"),dto=o("unispeech-sat"),cto=o(" \u2014 "),Gk=a("a"),fto=o("UniSpeechSatModel"),mto=o(" (UniSpeechSat model)"),gto=l(),bp=a("li"),uJ=a("strong"),hto=o("vilt"),pto=o(" \u2014 "),Ok=a("a"),_to=o("ViltModel"),uto=o(" (ViLT model)"),bto=l(),vp=a("li"),bJ=a("strong"),vto=o("vision-text-dual-encoder"),Tto=o(" \u2014 "),Xk=a("a"),Fto=o("VisionTextDualEncoderModel"),Cto=o(" (VisionTextDualEncoder model)"),Mto=l(),Tp=a("li"),vJ=a("strong"),Eto=o("visual_bert"),yto=o(" \u2014 "),zk=a("a"),wto=o("VisualBertModel"),Ato=o(" (VisualBert model)"),Lto=l(),Fp=a("li"),TJ=a("strong"),Bto=o("vit"),xto=o(" \u2014 "),Vk=a("a"),kto=o("ViTModel"),Rto=o(" (ViT model)"),Sto=l(),Cp=a("li"),FJ=a("strong"),Pto=o("vit_mae"),$to=o(" \u2014 "),Wk=a("a"),Ito=o("ViTMAEModel"),jto=o(" (ViTMAE model)"),Nto=l(),Mp=a("li"),CJ=a("strong"),Dto=o("wav2vec2"),qto=o(" \u2014 "),Qk=a("a"),Gto=o("Wav2Vec2Model"),Oto=o(" (Wav2Vec2 model)"),Xto=l(),Ep=a("li"),MJ=a("strong"),zto=o("wavlm"),Vto=o(" \u2014 "),Hk=a("a"),Wto=o("WavLMModel"),Qto=o(" (WavLM model)"),Hto=l(),yp=a("li"),EJ=a("strong"),Uto=o("xglm"),Jto=o(" \u2014 "),Uk=a("a"),Yto=o("XGLMModel"),Kto=o(" (XGLM model)"),Zto=l(),wp=a("li"),yJ=a("strong"),eao=o("xlm"),oao=o(" \u2014 "),Jk=a("a"),rao=o("XLMModel"),tao=o(" (XLM model)"),aao=l(),Ap=a("li"),wJ=a("strong"),nao=o("xlm-prophetnet"),sao=o(" \u2014 "),Yk=a("a"),lao=o("XLMProphetNetModel"),iao=o(" (XLMProphetNet model)"),dao=l(),Lp=a("li"),AJ=a("strong"),cao=o("xlm-roberta"),fao=o(" \u2014 "),Kk=a("a"),mao=o("XLMRobertaModel"),gao=o(" (XLM-RoBERTa model)"),hao=l(),Bp=a("li"),LJ=a("strong"),pao=o("xlm-roberta-xl"),_ao=o(" \u2014 "),Zk=a("a"),uao=o("XLMRobertaXLModel"),bao=o(" (XLM-RoBERTa-XL model)"),vao=l(),xp=a("li"),BJ=a("strong"),Tao=o("xlnet"),Fao=o(" \u2014 "),eR=a("a"),Cao=o("XLNetModel"),Mao=o(" (XLNet model)"),Eao=l(),kp=a("li"),xJ=a("strong"),yao=o("yoso"),wao=o(" \u2014 "),oR=a("a"),Aao=o("YosoModel"),Lao=o(" (YOSO model)"),Bao=l(),Rp=a("p"),xao=o("The model is set in evaluation mode by default using "),kJ=a("code"),kao=o("model.eval()"),Rao=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RJ=a("code"),Sao=o("model.train()"),Pao=l(),SJ=a("p"),$ao=o("Examples:"),Iao=l(),f(m4.$$.fragment),xAe=l(),$i=a("h2"),Sp=a("a"),PJ=a("span"),f(g4.$$.fragment),jao=l(),$J=a("span"),Nao=o("AutoModelForPreTraining"),kAe=l(),zo=a("div"),f(h4.$$.fragment),Dao=l(),Ii=a("p"),qao=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IJ=a("code"),Gao=o("from_pretrained()"),Oao=o("class method or the "),jJ=a("code"),Xao=o("from_config()"),zao=o(`class
method.`),Vao=l(),p4=a("p"),Wao=o("This class cannot be instantiated directly using "),NJ=a("code"),Qao=o("__init__()"),Hao=o(" (throws an error)."),Uao=l(),Ir=a("div"),f(_4.$$.fragment),Jao=l(),DJ=a("p"),Yao=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kao=l(),ji=a("p"),Zao=o(`Note:
Loading a model from its configuration file does `),qJ=a("strong"),eno=o("not"),ono=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("code"),rno=o("from_pretrained()"),tno=o("to load the model weights."),ano=l(),OJ=a("p"),nno=o("Examples:"),sno=l(),f(u4.$$.fragment),lno=l(),ke=a("div"),f(b4.$$.fragment),ino=l(),XJ=a("p"),dno=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cno=l(),Ia=a("p"),fno=o("The model class to instantiate is selected based on the "),zJ=a("code"),mno=o("model_type"),gno=o(` property of the config object (either
passed as an argument or loaded from `),VJ=a("code"),hno=o("pretrained_model_name_or_path"),pno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WJ=a("code"),_no=o("pretrained_model_name_or_path"),uno=o(":"),bno=l(),k=a("ul"),Pp=a("li"),QJ=a("strong"),vno=o("albert"),Tno=o(" \u2014 "),rR=a("a"),Fno=o("AlbertForPreTraining"),Cno=o(" (ALBERT model)"),Mno=l(),$p=a("li"),HJ=a("strong"),Eno=o("bart"),yno=o(" \u2014 "),tR=a("a"),wno=o("BartForConditionalGeneration"),Ano=o(" (BART model)"),Lno=l(),Ip=a("li"),UJ=a("strong"),Bno=o("bert"),xno=o(" \u2014 "),aR=a("a"),kno=o("BertForPreTraining"),Rno=o(" (BERT model)"),Sno=l(),jp=a("li"),JJ=a("strong"),Pno=o("big_bird"),$no=o(" \u2014 "),nR=a("a"),Ino=o("BigBirdForPreTraining"),jno=o(" (BigBird model)"),Nno=l(),Np=a("li"),YJ=a("strong"),Dno=o("camembert"),qno=o(" \u2014 "),sR=a("a"),Gno=o("CamembertForMaskedLM"),Ono=o(" (CamemBERT model)"),Xno=l(),Dp=a("li"),KJ=a("strong"),zno=o("ctrl"),Vno=o(" \u2014 "),lR=a("a"),Wno=o("CTRLLMHeadModel"),Qno=o(" (CTRL model)"),Hno=l(),qp=a("li"),ZJ=a("strong"),Uno=o("deberta"),Jno=o(" \u2014 "),iR=a("a"),Yno=o("DebertaForMaskedLM"),Kno=o(" (DeBERTa model)"),Zno=l(),Gp=a("li"),eY=a("strong"),eso=o("deberta-v2"),oso=o(" \u2014 "),dR=a("a"),rso=o("DebertaV2ForMaskedLM"),tso=o(" (DeBERTa-v2 model)"),aso=l(),Op=a("li"),oY=a("strong"),nso=o("distilbert"),sso=o(" \u2014 "),cR=a("a"),lso=o("DistilBertForMaskedLM"),iso=o(" (DistilBERT model)"),dso=l(),Xp=a("li"),rY=a("strong"),cso=o("electra"),fso=o(" \u2014 "),fR=a("a"),mso=o("ElectraForPreTraining"),gso=o(" (ELECTRA model)"),hso=l(),zp=a("li"),tY=a("strong"),pso=o("flaubert"),_so=o(" \u2014 "),mR=a("a"),uso=o("FlaubertWithLMHeadModel"),bso=o(" (FlauBERT model)"),vso=l(),Vp=a("li"),aY=a("strong"),Tso=o("fnet"),Fso=o(" \u2014 "),gR=a("a"),Cso=o("FNetForPreTraining"),Mso=o(" (FNet model)"),Eso=l(),Wp=a("li"),nY=a("strong"),yso=o("fsmt"),wso=o(" \u2014 "),hR=a("a"),Aso=o("FSMTForConditionalGeneration"),Lso=o(" (FairSeq Machine-Translation model)"),Bso=l(),Qp=a("li"),sY=a("strong"),xso=o("funnel"),kso=o(" \u2014 "),pR=a("a"),Rso=o("FunnelForPreTraining"),Sso=o(" (Funnel Transformer model)"),Pso=l(),Hp=a("li"),lY=a("strong"),$so=o("gpt2"),Iso=o(" \u2014 "),_R=a("a"),jso=o("GPT2LMHeadModel"),Nso=o(" (OpenAI GPT-2 model)"),Dso=l(),Up=a("li"),iY=a("strong"),qso=o("ibert"),Gso=o(" \u2014 "),uR=a("a"),Oso=o("IBertForMaskedLM"),Xso=o(" (I-BERT model)"),zso=l(),Jp=a("li"),dY=a("strong"),Vso=o("layoutlm"),Wso=o(" \u2014 "),bR=a("a"),Qso=o("LayoutLMForMaskedLM"),Hso=o(" (LayoutLM model)"),Uso=l(),Yp=a("li"),cY=a("strong"),Jso=o("longformer"),Yso=o(" \u2014 "),vR=a("a"),Kso=o("LongformerForMaskedLM"),Zso=o(" (Longformer model)"),elo=l(),Kp=a("li"),fY=a("strong"),olo=o("lxmert"),rlo=o(" \u2014 "),TR=a("a"),tlo=o("LxmertForPreTraining"),alo=o(" (LXMERT model)"),nlo=l(),Zp=a("li"),mY=a("strong"),slo=o("megatron-bert"),llo=o(" \u2014 "),FR=a("a"),ilo=o("MegatronBertForPreTraining"),dlo=o(" (MegatronBert model)"),clo=l(),e_=a("li"),gY=a("strong"),flo=o("mobilebert"),mlo=o(" \u2014 "),CR=a("a"),glo=o("MobileBertForPreTraining"),hlo=o(" (MobileBERT model)"),plo=l(),o_=a("li"),hY=a("strong"),_lo=o("mpnet"),ulo=o(" \u2014 "),MR=a("a"),blo=o("MPNetForMaskedLM"),vlo=o(" (MPNet model)"),Tlo=l(),r_=a("li"),pY=a("strong"),Flo=o("openai-gpt"),Clo=o(" \u2014 "),ER=a("a"),Mlo=o("OpenAIGPTLMHeadModel"),Elo=o(" (OpenAI GPT model)"),ylo=l(),t_=a("li"),_Y=a("strong"),wlo=o("retribert"),Alo=o(" \u2014 "),yR=a("a"),Llo=o("RetriBertModel"),Blo=o(" (RetriBERT model)"),xlo=l(),a_=a("li"),uY=a("strong"),klo=o("roberta"),Rlo=o(" \u2014 "),wR=a("a"),Slo=o("RobertaForMaskedLM"),Plo=o(" (RoBERTa model)"),$lo=l(),n_=a("li"),bY=a("strong"),Ilo=o("squeezebert"),jlo=o(" \u2014 "),AR=a("a"),Nlo=o("SqueezeBertForMaskedLM"),Dlo=o(" (SqueezeBERT model)"),qlo=l(),s_=a("li"),vY=a("strong"),Glo=o("t5"),Olo=o(" \u2014 "),LR=a("a"),Xlo=o("T5ForConditionalGeneration"),zlo=o(" (T5 model)"),Vlo=l(),l_=a("li"),TY=a("strong"),Wlo=o("tapas"),Qlo=o(" \u2014 "),BR=a("a"),Hlo=o("TapasForMaskedLM"),Ulo=o(" (TAPAS model)"),Jlo=l(),i_=a("li"),FY=a("strong"),Ylo=o("transfo-xl"),Klo=o(" \u2014 "),xR=a("a"),Zlo=o("TransfoXLLMHeadModel"),eio=o(" (Transformer-XL model)"),oio=l(),d_=a("li"),CY=a("strong"),rio=o("unispeech"),tio=o(" \u2014 "),kR=a("a"),aio=o("UniSpeechForPreTraining"),nio=o(" (UniSpeech model)"),sio=l(),c_=a("li"),MY=a("strong"),lio=o("unispeech-sat"),iio=o(" \u2014 "),RR=a("a"),dio=o("UniSpeechSatForPreTraining"),cio=o(" (UniSpeechSat model)"),fio=l(),f_=a("li"),EY=a("strong"),mio=o("visual_bert"),gio=o(" \u2014 "),SR=a("a"),hio=o("VisualBertForPreTraining"),pio=o(" (VisualBert model)"),_io=l(),m_=a("li"),yY=a("strong"),uio=o("vit_mae"),bio=o(" \u2014 "),PR=a("a"),vio=o("ViTMAEForPreTraining"),Tio=o(" (ViTMAE model)"),Fio=l(),g_=a("li"),wY=a("strong"),Cio=o("wav2vec2"),Mio=o(" \u2014 "),$R=a("a"),Eio=o("Wav2Vec2ForPreTraining"),yio=o(" (Wav2Vec2 model)"),wio=l(),h_=a("li"),AY=a("strong"),Aio=o("xlm"),Lio=o(" \u2014 "),IR=a("a"),Bio=o("XLMWithLMHeadModel"),xio=o(" (XLM model)"),kio=l(),p_=a("li"),LY=a("strong"),Rio=o("xlm-roberta"),Sio=o(" \u2014 "),jR=a("a"),Pio=o("XLMRobertaForMaskedLM"),$io=o(" (XLM-RoBERTa model)"),Iio=l(),__=a("li"),BY=a("strong"),jio=o("xlm-roberta-xl"),Nio=o(" \u2014 "),NR=a("a"),Dio=o("XLMRobertaXLForMaskedLM"),qio=o(" (XLM-RoBERTa-XL model)"),Gio=l(),u_=a("li"),xY=a("strong"),Oio=o("xlnet"),Xio=o(" \u2014 "),DR=a("a"),zio=o("XLNetLMHeadModel"),Vio=o(" (XLNet model)"),Wio=l(),b_=a("p"),Qio=o("The model is set in evaluation mode by default using "),kY=a("code"),Hio=o("model.eval()"),Uio=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RY=a("code"),Jio=o("model.train()"),Yio=l(),SY=a("p"),Kio=o("Examples:"),Zio=l(),f(v4.$$.fragment),RAe=l(),Ni=a("h2"),v_=a("a"),PY=a("span"),f(T4.$$.fragment),edo=l(),$Y=a("span"),odo=o("AutoModelForCausalLM"),SAe=l(),Vo=a("div"),f(F4.$$.fragment),rdo=l(),Di=a("p"),tdo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IY=a("code"),ado=o("from_pretrained()"),ndo=o("class method or the "),jY=a("code"),sdo=o("from_config()"),ldo=o(`class
method.`),ido=l(),C4=a("p"),ddo=o("This class cannot be instantiated directly using "),NY=a("code"),cdo=o("__init__()"),fdo=o(" (throws an error)."),mdo=l(),jr=a("div"),f(M4.$$.fragment),gdo=l(),DY=a("p"),hdo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pdo=l(),qi=a("p"),_do=o(`Note:
Loading a model from its configuration file does `),qY=a("strong"),udo=o("not"),bdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("code"),vdo=o("from_pretrained()"),Tdo=o("to load the model weights."),Fdo=l(),OY=a("p"),Cdo=o("Examples:"),Mdo=l(),f(E4.$$.fragment),Edo=l(),Re=a("div"),f(y4.$$.fragment),ydo=l(),XY=a("p"),wdo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ado=l(),ja=a("p"),Ldo=o("The model class to instantiate is selected based on the "),zY=a("code"),Bdo=o("model_type"),xdo=o(` property of the config object (either
passed as an argument or loaded from `),VY=a("code"),kdo=o("pretrained_model_name_or_path"),Rdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WY=a("code"),Sdo=o("pretrained_model_name_or_path"),Pdo=o(":"),$do=l(),I=a("ul"),T_=a("li"),QY=a("strong"),Ido=o("bart"),jdo=o(" \u2014 "),qR=a("a"),Ndo=o("BartForCausalLM"),Ddo=o(" (BART model)"),qdo=l(),F_=a("li"),HY=a("strong"),Gdo=o("bert"),Odo=o(" \u2014 "),GR=a("a"),Xdo=o("BertLMHeadModel"),zdo=o(" (BERT model)"),Vdo=l(),C_=a("li"),UY=a("strong"),Wdo=o("bert-generation"),Qdo=o(" \u2014 "),OR=a("a"),Hdo=o("BertGenerationDecoder"),Udo=o(" (Bert Generation model)"),Jdo=l(),M_=a("li"),JY=a("strong"),Ydo=o("big_bird"),Kdo=o(" \u2014 "),XR=a("a"),Zdo=o("BigBirdForCausalLM"),eco=o(" (BigBird model)"),oco=l(),E_=a("li"),YY=a("strong"),rco=o("bigbird_pegasus"),tco=o(" \u2014 "),zR=a("a"),aco=o("BigBirdPegasusForCausalLM"),nco=o(" (BigBirdPegasus model)"),sco=l(),y_=a("li"),KY=a("strong"),lco=o("blenderbot"),ico=o(" \u2014 "),VR=a("a"),dco=o("BlenderbotForCausalLM"),cco=o(" (Blenderbot model)"),fco=l(),w_=a("li"),ZY=a("strong"),mco=o("blenderbot-small"),gco=o(" \u2014 "),WR=a("a"),hco=o("BlenderbotSmallForCausalLM"),pco=o(" (BlenderbotSmall model)"),_co=l(),A_=a("li"),eK=a("strong"),uco=o("camembert"),bco=o(" \u2014 "),QR=a("a"),vco=o("CamembertForCausalLM"),Tco=o(" (CamemBERT model)"),Fco=l(),L_=a("li"),oK=a("strong"),Cco=o("ctrl"),Mco=o(" \u2014 "),HR=a("a"),Eco=o("CTRLLMHeadModel"),yco=o(" (CTRL model)"),wco=l(),B_=a("li"),rK=a("strong"),Aco=o("electra"),Lco=o(" \u2014 "),UR=a("a"),Bco=o("ElectraForCausalLM"),xco=o(" (ELECTRA model)"),kco=l(),x_=a("li"),tK=a("strong"),Rco=o("gpt2"),Sco=o(" \u2014 "),JR=a("a"),Pco=o("GPT2LMHeadModel"),$co=o(" (OpenAI GPT-2 model)"),Ico=l(),k_=a("li"),aK=a("strong"),jco=o("gpt_neo"),Nco=o(" \u2014 "),YR=a("a"),Dco=o("GPTNeoForCausalLM"),qco=o(" (GPT Neo model)"),Gco=l(),R_=a("li"),nK=a("strong"),Oco=o("gptj"),Xco=o(" \u2014 "),KR=a("a"),zco=o("GPTJForCausalLM"),Vco=o(" (GPT-J model)"),Wco=l(),S_=a("li"),sK=a("strong"),Qco=o("marian"),Hco=o(" \u2014 "),ZR=a("a"),Uco=o("MarianForCausalLM"),Jco=o(" (Marian model)"),Yco=l(),P_=a("li"),lK=a("strong"),Kco=o("mbart"),Zco=o(" \u2014 "),eS=a("a"),efo=o("MBartForCausalLM"),ofo=o(" (mBART model)"),rfo=l(),$_=a("li"),iK=a("strong"),tfo=o("megatron-bert"),afo=o(" \u2014 "),oS=a("a"),nfo=o("MegatronBertForCausalLM"),sfo=o(" (MegatronBert model)"),lfo=l(),I_=a("li"),dK=a("strong"),ifo=o("openai-gpt"),dfo=o(" \u2014 "),rS=a("a"),cfo=o("OpenAIGPTLMHeadModel"),ffo=o(" (OpenAI GPT model)"),mfo=l(),j_=a("li"),cK=a("strong"),gfo=o("pegasus"),hfo=o(" \u2014 "),tS=a("a"),pfo=o("PegasusForCausalLM"),_fo=o(" (Pegasus model)"),ufo=l(),N_=a("li"),fK=a("strong"),bfo=o("prophetnet"),vfo=o(" \u2014 "),aS=a("a"),Tfo=o("ProphetNetForCausalLM"),Ffo=o(" (ProphetNet model)"),Cfo=l(),D_=a("li"),mK=a("strong"),Mfo=o("qdqbert"),Efo=o(" \u2014 "),nS=a("a"),yfo=o("QDQBertLMHeadModel"),wfo=o(" (QDQBert model)"),Afo=l(),q_=a("li"),gK=a("strong"),Lfo=o("reformer"),Bfo=o(" \u2014 "),sS=a("a"),xfo=o("ReformerModelWithLMHead"),kfo=o(" (Reformer model)"),Rfo=l(),G_=a("li"),hK=a("strong"),Sfo=o("rembert"),Pfo=o(" \u2014 "),lS=a("a"),$fo=o("RemBertForCausalLM"),Ifo=o(" (RemBERT model)"),jfo=l(),O_=a("li"),pK=a("strong"),Nfo=o("roberta"),Dfo=o(" \u2014 "),iS=a("a"),qfo=o("RobertaForCausalLM"),Gfo=o(" (RoBERTa model)"),Ofo=l(),X_=a("li"),_K=a("strong"),Xfo=o("roformer"),zfo=o(" \u2014 "),dS=a("a"),Vfo=o("RoFormerForCausalLM"),Wfo=o(" (RoFormer model)"),Qfo=l(),z_=a("li"),uK=a("strong"),Hfo=o("speech_to_text_2"),Ufo=o(" \u2014 "),cS=a("a"),Jfo=o("Speech2Text2ForCausalLM"),Yfo=o(" (Speech2Text2 model)"),Kfo=l(),V_=a("li"),bK=a("strong"),Zfo=o("transfo-xl"),emo=o(" \u2014 "),fS=a("a"),omo=o("TransfoXLLMHeadModel"),rmo=o(" (Transformer-XL model)"),tmo=l(),W_=a("li"),vK=a("strong"),amo=o("trocr"),nmo=o(" \u2014 "),mS=a("a"),smo=o("TrOCRForCausalLM"),lmo=o(" (TrOCR model)"),imo=l(),Q_=a("li"),TK=a("strong"),dmo=o("xglm"),cmo=o(" \u2014 "),gS=a("a"),fmo=o("XGLMForCausalLM"),mmo=o(" (XGLM model)"),gmo=l(),H_=a("li"),FK=a("strong"),hmo=o("xlm"),pmo=o(" \u2014 "),hS=a("a"),_mo=o("XLMWithLMHeadModel"),umo=o(" (XLM model)"),bmo=l(),U_=a("li"),CK=a("strong"),vmo=o("xlm-prophetnet"),Tmo=o(" \u2014 "),pS=a("a"),Fmo=o("XLMProphetNetForCausalLM"),Cmo=o(" (XLMProphetNet model)"),Mmo=l(),J_=a("li"),MK=a("strong"),Emo=o("xlm-roberta"),ymo=o(" \u2014 "),_S=a("a"),wmo=o("XLMRobertaForCausalLM"),Amo=o(" (XLM-RoBERTa model)"),Lmo=l(),Y_=a("li"),EK=a("strong"),Bmo=o("xlm-roberta-xl"),xmo=o(" \u2014 "),uS=a("a"),kmo=o("XLMRobertaXLForCausalLM"),Rmo=o(" (XLM-RoBERTa-XL model)"),Smo=l(),K_=a("li"),yK=a("strong"),Pmo=o("xlnet"),$mo=o(" \u2014 "),bS=a("a"),Imo=o("XLNetLMHeadModel"),jmo=o(" (XLNet model)"),Nmo=l(),Z_=a("p"),Dmo=o("The model is set in evaluation mode by default using "),wK=a("code"),qmo=o("model.eval()"),Gmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AK=a("code"),Omo=o("model.train()"),Xmo=l(),LK=a("p"),zmo=o("Examples:"),Vmo=l(),f(w4.$$.fragment),PAe=l(),Gi=a("h2"),eu=a("a"),BK=a("span"),f(A4.$$.fragment),Wmo=l(),xK=a("span"),Qmo=o("AutoModelForMaskedLM"),$Ae=l(),Wo=a("div"),f(L4.$$.fragment),Hmo=l(),Oi=a("p"),Umo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kK=a("code"),Jmo=o("from_pretrained()"),Ymo=o("class method or the "),RK=a("code"),Kmo=o("from_config()"),Zmo=o(`class
method.`),ego=l(),B4=a("p"),ogo=o("This class cannot be instantiated directly using "),SK=a("code"),rgo=o("__init__()"),tgo=o(" (throws an error)."),ago=l(),Nr=a("div"),f(x4.$$.fragment),ngo=l(),PK=a("p"),sgo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lgo=l(),Xi=a("p"),igo=o(`Note:
Loading a model from its configuration file does `),$K=a("strong"),dgo=o("not"),cgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("code"),fgo=o("from_pretrained()"),mgo=o("to load the model weights."),ggo=l(),jK=a("p"),hgo=o("Examples:"),pgo=l(),f(k4.$$.fragment),_go=l(),Se=a("div"),f(R4.$$.fragment),ugo=l(),NK=a("p"),bgo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vgo=l(),Na=a("p"),Tgo=o("The model class to instantiate is selected based on the "),DK=a("code"),Fgo=o("model_type"),Cgo=o(` property of the config object (either
passed as an argument or loaded from `),qK=a("code"),Mgo=o("pretrained_model_name_or_path"),Ego=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GK=a("code"),ygo=o("pretrained_model_name_or_path"),wgo=o(":"),Ago=l(),$=a("ul"),ou=a("li"),OK=a("strong"),Lgo=o("albert"),Bgo=o(" \u2014 "),vS=a("a"),xgo=o("AlbertForMaskedLM"),kgo=o(" (ALBERT model)"),Rgo=l(),ru=a("li"),XK=a("strong"),Sgo=o("bart"),Pgo=o(" \u2014 "),TS=a("a"),$go=o("BartForConditionalGeneration"),Igo=o(" (BART model)"),jgo=l(),tu=a("li"),zK=a("strong"),Ngo=o("bert"),Dgo=o(" \u2014 "),FS=a("a"),qgo=o("BertForMaskedLM"),Ggo=o(" (BERT model)"),Ogo=l(),au=a("li"),VK=a("strong"),Xgo=o("big_bird"),zgo=o(" \u2014 "),CS=a("a"),Vgo=o("BigBirdForMaskedLM"),Wgo=o(" (BigBird model)"),Qgo=l(),nu=a("li"),WK=a("strong"),Hgo=o("camembert"),Ugo=o(" \u2014 "),MS=a("a"),Jgo=o("CamembertForMaskedLM"),Ygo=o(" (CamemBERT model)"),Kgo=l(),su=a("li"),QK=a("strong"),Zgo=o("convbert"),eho=o(" \u2014 "),ES=a("a"),oho=o("ConvBertForMaskedLM"),rho=o(" (ConvBERT model)"),tho=l(),lu=a("li"),HK=a("strong"),aho=o("deberta"),nho=o(" \u2014 "),yS=a("a"),sho=o("DebertaForMaskedLM"),lho=o(" (DeBERTa model)"),iho=l(),iu=a("li"),UK=a("strong"),dho=o("deberta-v2"),cho=o(" \u2014 "),wS=a("a"),fho=o("DebertaV2ForMaskedLM"),mho=o(" (DeBERTa-v2 model)"),gho=l(),du=a("li"),JK=a("strong"),hho=o("distilbert"),pho=o(" \u2014 "),AS=a("a"),_ho=o("DistilBertForMaskedLM"),uho=o(" (DistilBERT model)"),bho=l(),cu=a("li"),YK=a("strong"),vho=o("electra"),Tho=o(" \u2014 "),LS=a("a"),Fho=o("ElectraForMaskedLM"),Cho=o(" (ELECTRA model)"),Mho=l(),fu=a("li"),KK=a("strong"),Eho=o("flaubert"),yho=o(" \u2014 "),BS=a("a"),who=o("FlaubertWithLMHeadModel"),Aho=o(" (FlauBERT model)"),Lho=l(),mu=a("li"),ZK=a("strong"),Bho=o("fnet"),xho=o(" \u2014 "),xS=a("a"),kho=o("FNetForMaskedLM"),Rho=o(" (FNet model)"),Sho=l(),gu=a("li"),eZ=a("strong"),Pho=o("funnel"),$ho=o(" \u2014 "),kS=a("a"),Iho=o("FunnelForMaskedLM"),jho=o(" (Funnel Transformer model)"),Nho=l(),hu=a("li"),oZ=a("strong"),Dho=o("ibert"),qho=o(" \u2014 "),RS=a("a"),Gho=o("IBertForMaskedLM"),Oho=o(" (I-BERT model)"),Xho=l(),pu=a("li"),rZ=a("strong"),zho=o("layoutlm"),Vho=o(" \u2014 "),SS=a("a"),Who=o("LayoutLMForMaskedLM"),Qho=o(" (LayoutLM model)"),Hho=l(),_u=a("li"),tZ=a("strong"),Uho=o("longformer"),Jho=o(" \u2014 "),PS=a("a"),Yho=o("LongformerForMaskedLM"),Kho=o(" (Longformer model)"),Zho=l(),uu=a("li"),aZ=a("strong"),epo=o("mbart"),opo=o(" \u2014 "),$S=a("a"),rpo=o("MBartForConditionalGeneration"),tpo=o(" (mBART model)"),apo=l(),bu=a("li"),nZ=a("strong"),npo=o("megatron-bert"),spo=o(" \u2014 "),IS=a("a"),lpo=o("MegatronBertForMaskedLM"),ipo=o(" (MegatronBert model)"),dpo=l(),vu=a("li"),sZ=a("strong"),cpo=o("mobilebert"),fpo=o(" \u2014 "),jS=a("a"),mpo=o("MobileBertForMaskedLM"),gpo=o(" (MobileBERT model)"),hpo=l(),Tu=a("li"),lZ=a("strong"),ppo=o("mpnet"),_po=o(" \u2014 "),NS=a("a"),upo=o("MPNetForMaskedLM"),bpo=o(" (MPNet model)"),vpo=l(),Fu=a("li"),iZ=a("strong"),Tpo=o("nystromformer"),Fpo=o(" \u2014 "),DS=a("a"),Cpo=o("NystromformerForMaskedLM"),Mpo=o(" (Nystromformer model)"),Epo=l(),Cu=a("li"),dZ=a("strong"),ypo=o("perceiver"),wpo=o(" \u2014 "),qS=a("a"),Apo=o("PerceiverForMaskedLM"),Lpo=o(" (Perceiver model)"),Bpo=l(),Mu=a("li"),cZ=a("strong"),xpo=o("qdqbert"),kpo=o(" \u2014 "),GS=a("a"),Rpo=o("QDQBertForMaskedLM"),Spo=o(" (QDQBert model)"),Ppo=l(),Eu=a("li"),fZ=a("strong"),$po=o("reformer"),Ipo=o(" \u2014 "),OS=a("a"),jpo=o("ReformerForMaskedLM"),Npo=o(" (Reformer model)"),Dpo=l(),yu=a("li"),mZ=a("strong"),qpo=o("rembert"),Gpo=o(" \u2014 "),XS=a("a"),Opo=o("RemBertForMaskedLM"),Xpo=o(" (RemBERT model)"),zpo=l(),wu=a("li"),gZ=a("strong"),Vpo=o("roberta"),Wpo=o(" \u2014 "),zS=a("a"),Qpo=o("RobertaForMaskedLM"),Hpo=o(" (RoBERTa model)"),Upo=l(),Au=a("li"),hZ=a("strong"),Jpo=o("roformer"),Ypo=o(" \u2014 "),VS=a("a"),Kpo=o("RoFormerForMaskedLM"),Zpo=o(" (RoFormer model)"),e_o=l(),Lu=a("li"),pZ=a("strong"),o_o=o("squeezebert"),r_o=o(" \u2014 "),WS=a("a"),t_o=o("SqueezeBertForMaskedLM"),a_o=o(" (SqueezeBERT model)"),n_o=l(),Bu=a("li"),_Z=a("strong"),s_o=o("tapas"),l_o=o(" \u2014 "),QS=a("a"),i_o=o("TapasForMaskedLM"),d_o=o(" (TAPAS model)"),c_o=l(),xu=a("li"),uZ=a("strong"),f_o=o("wav2vec2"),m_o=o(" \u2014 "),bZ=a("code"),g_o=o("Wav2Vec2ForMaskedLM"),h_o=o("(Wav2Vec2 model)"),p_o=l(),ku=a("li"),vZ=a("strong"),__o=o("xlm"),u_o=o(" \u2014 "),HS=a("a"),b_o=o("XLMWithLMHeadModel"),v_o=o(" (XLM model)"),T_o=l(),Ru=a("li"),TZ=a("strong"),F_o=o("xlm-roberta"),C_o=o(" \u2014 "),US=a("a"),M_o=o("XLMRobertaForMaskedLM"),E_o=o(" (XLM-RoBERTa model)"),y_o=l(),Su=a("li"),FZ=a("strong"),w_o=o("xlm-roberta-xl"),A_o=o(" \u2014 "),JS=a("a"),L_o=o("XLMRobertaXLForMaskedLM"),B_o=o(" (XLM-RoBERTa-XL model)"),x_o=l(),Pu=a("li"),CZ=a("strong"),k_o=o("yoso"),R_o=o(" \u2014 "),YS=a("a"),S_o=o("YosoForMaskedLM"),P_o=o(" (YOSO model)"),$_o=l(),$u=a("p"),I_o=o("The model is set in evaluation mode by default using "),MZ=a("code"),j_o=o("model.eval()"),N_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EZ=a("code"),D_o=o("model.train()"),q_o=l(),yZ=a("p"),G_o=o("Examples:"),O_o=l(),f(S4.$$.fragment),IAe=l(),zi=a("h2"),Iu=a("a"),wZ=a("span"),f(P4.$$.fragment),X_o=l(),AZ=a("span"),z_o=o("AutoModelForSeq2SeqLM"),jAe=l(),Qo=a("div"),f($4.$$.fragment),V_o=l(),Vi=a("p"),W_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LZ=a("code"),Q_o=o("from_pretrained()"),H_o=o("class method or the "),BZ=a("code"),U_o=o("from_config()"),J_o=o(`class
method.`),Y_o=l(),I4=a("p"),K_o=o("This class cannot be instantiated directly using "),xZ=a("code"),Z_o=o("__init__()"),euo=o(" (throws an error)."),ouo=l(),Dr=a("div"),f(j4.$$.fragment),ruo=l(),kZ=a("p"),tuo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),auo=l(),Wi=a("p"),nuo=o(`Note:
Loading a model from its configuration file does `),RZ=a("strong"),suo=o("not"),luo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("code"),iuo=o("from_pretrained()"),duo=o("to load the model weights."),cuo=l(),PZ=a("p"),fuo=o("Examples:"),muo=l(),f(N4.$$.fragment),guo=l(),Pe=a("div"),f(D4.$$.fragment),huo=l(),$Z=a("p"),puo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_uo=l(),Da=a("p"),uuo=o("The model class to instantiate is selected based on the "),IZ=a("code"),buo=o("model_type"),vuo=o(` property of the config object (either
passed as an argument or loaded from `),jZ=a("code"),Tuo=o("pretrained_model_name_or_path"),Fuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NZ=a("code"),Cuo=o("pretrained_model_name_or_path"),Muo=o(":"),Euo=l(),ne=a("ul"),ju=a("li"),DZ=a("strong"),yuo=o("bart"),wuo=o(" \u2014 "),KS=a("a"),Auo=o("BartForConditionalGeneration"),Luo=o(" (BART model)"),Buo=l(),Nu=a("li"),qZ=a("strong"),xuo=o("bigbird_pegasus"),kuo=o(" \u2014 "),ZS=a("a"),Ruo=o("BigBirdPegasusForConditionalGeneration"),Suo=o(" (BigBirdPegasus model)"),Puo=l(),Du=a("li"),GZ=a("strong"),$uo=o("blenderbot"),Iuo=o(" \u2014 "),eP=a("a"),juo=o("BlenderbotForConditionalGeneration"),Nuo=o(" (Blenderbot model)"),Duo=l(),qu=a("li"),OZ=a("strong"),quo=o("blenderbot-small"),Guo=o(" \u2014 "),oP=a("a"),Ouo=o("BlenderbotSmallForConditionalGeneration"),Xuo=o(" (BlenderbotSmall model)"),zuo=l(),Gu=a("li"),XZ=a("strong"),Vuo=o("encoder-decoder"),Wuo=o(" \u2014 "),rP=a("a"),Quo=o("EncoderDecoderModel"),Huo=o(" (Encoder decoder model)"),Uuo=l(),Ou=a("li"),zZ=a("strong"),Juo=o("fsmt"),Yuo=o(" \u2014 "),tP=a("a"),Kuo=o("FSMTForConditionalGeneration"),Zuo=o(" (FairSeq Machine-Translation model)"),e1o=l(),Xu=a("li"),VZ=a("strong"),o1o=o("led"),r1o=o(" \u2014 "),aP=a("a"),t1o=o("LEDForConditionalGeneration"),a1o=o(" (LED model)"),n1o=l(),zu=a("li"),WZ=a("strong"),s1o=o("m2m_100"),l1o=o(" \u2014 "),nP=a("a"),i1o=o("M2M100ForConditionalGeneration"),d1o=o(" (M2M100 model)"),c1o=l(),Vu=a("li"),QZ=a("strong"),f1o=o("marian"),m1o=o(" \u2014 "),sP=a("a"),g1o=o("MarianMTModel"),h1o=o(" (Marian model)"),p1o=l(),Wu=a("li"),HZ=a("strong"),_1o=o("mbart"),u1o=o(" \u2014 "),lP=a("a"),b1o=o("MBartForConditionalGeneration"),v1o=o(" (mBART model)"),T1o=l(),Qu=a("li"),UZ=a("strong"),F1o=o("mt5"),C1o=o(" \u2014 "),iP=a("a"),M1o=o("MT5ForConditionalGeneration"),E1o=o(" (mT5 model)"),y1o=l(),Hu=a("li"),JZ=a("strong"),w1o=o("pegasus"),A1o=o(" \u2014 "),dP=a("a"),L1o=o("PegasusForConditionalGeneration"),B1o=o(" (Pegasus model)"),x1o=l(),Uu=a("li"),YZ=a("strong"),k1o=o("prophetnet"),R1o=o(" \u2014 "),cP=a("a"),S1o=o("ProphetNetForConditionalGeneration"),P1o=o(" (ProphetNet model)"),$1o=l(),Ju=a("li"),KZ=a("strong"),I1o=o("t5"),j1o=o(" \u2014 "),fP=a("a"),N1o=o("T5ForConditionalGeneration"),D1o=o(" (T5 model)"),q1o=l(),Yu=a("li"),ZZ=a("strong"),G1o=o("xlm-prophetnet"),O1o=o(" \u2014 "),mP=a("a"),X1o=o("XLMProphetNetForConditionalGeneration"),z1o=o(" (XLMProphetNet model)"),V1o=l(),Ku=a("p"),W1o=o("The model is set in evaluation mode by default using "),eee=a("code"),Q1o=o("model.eval()"),H1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oee=a("code"),U1o=o("model.train()"),J1o=l(),ree=a("p"),Y1o=o("Examples:"),K1o=l(),f(q4.$$.fragment),NAe=l(),Qi=a("h2"),Zu=a("a"),tee=a("span"),f(G4.$$.fragment),Z1o=l(),aee=a("span"),ebo=o("AutoModelForSequenceClassification"),DAe=l(),Ho=a("div"),f(O4.$$.fragment),obo=l(),Hi=a("p"),rbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nee=a("code"),tbo=o("from_pretrained()"),abo=o("class method or the "),see=a("code"),nbo=o("from_config()"),sbo=o(`class
method.`),lbo=l(),X4=a("p"),ibo=o("This class cannot be instantiated directly using "),lee=a("code"),dbo=o("__init__()"),cbo=o(" (throws an error)."),fbo=l(),qr=a("div"),f(z4.$$.fragment),mbo=l(),iee=a("p"),gbo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hbo=l(),Ui=a("p"),pbo=o(`Note:
Loading a model from its configuration file does `),dee=a("strong"),_bo=o("not"),ubo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=a("code"),bbo=o("from_pretrained()"),vbo=o("to load the model weights."),Tbo=l(),fee=a("p"),Fbo=o("Examples:"),Cbo=l(),f(V4.$$.fragment),Mbo=l(),$e=a("div"),f(W4.$$.fragment),Ebo=l(),mee=a("p"),ybo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wbo=l(),qa=a("p"),Abo=o("The model class to instantiate is selected based on the "),gee=a("code"),Lbo=o("model_type"),Bbo=o(` property of the config object (either
passed as an argument or loaded from `),hee=a("code"),xbo=o("pretrained_model_name_or_path"),kbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pee=a("code"),Rbo=o("pretrained_model_name_or_path"),Sbo=o(":"),Pbo=l(),A=a("ul"),e1=a("li"),_ee=a("strong"),$bo=o("albert"),Ibo=o(" \u2014 "),gP=a("a"),jbo=o("AlbertForSequenceClassification"),Nbo=o(" (ALBERT model)"),Dbo=l(),o1=a("li"),uee=a("strong"),qbo=o("bart"),Gbo=o(" \u2014 "),hP=a("a"),Obo=o("BartForSequenceClassification"),Xbo=o(" (BART model)"),zbo=l(),r1=a("li"),bee=a("strong"),Vbo=o("bert"),Wbo=o(" \u2014 "),pP=a("a"),Qbo=o("BertForSequenceClassification"),Hbo=o(" (BERT model)"),Ubo=l(),t1=a("li"),vee=a("strong"),Jbo=o("big_bird"),Ybo=o(" \u2014 "),_P=a("a"),Kbo=o("BigBirdForSequenceClassification"),Zbo=o(" (BigBird model)"),e5o=l(),a1=a("li"),Tee=a("strong"),o5o=o("bigbird_pegasus"),r5o=o(" \u2014 "),uP=a("a"),t5o=o("BigBirdPegasusForSequenceClassification"),a5o=o(" (BigBirdPegasus model)"),n5o=l(),n1=a("li"),Fee=a("strong"),s5o=o("camembert"),l5o=o(" \u2014 "),bP=a("a"),i5o=o("CamembertForSequenceClassification"),d5o=o(" (CamemBERT model)"),c5o=l(),s1=a("li"),Cee=a("strong"),f5o=o("canine"),m5o=o(" \u2014 "),vP=a("a"),g5o=o("CanineForSequenceClassification"),h5o=o(" (Canine model)"),p5o=l(),l1=a("li"),Mee=a("strong"),_5o=o("convbert"),u5o=o(" \u2014 "),TP=a("a"),b5o=o("ConvBertForSequenceClassification"),v5o=o(" (ConvBERT model)"),T5o=l(),i1=a("li"),Eee=a("strong"),F5o=o("ctrl"),C5o=o(" \u2014 "),FP=a("a"),M5o=o("CTRLForSequenceClassification"),E5o=o(" (CTRL model)"),y5o=l(),d1=a("li"),yee=a("strong"),w5o=o("deberta"),A5o=o(" \u2014 "),CP=a("a"),L5o=o("DebertaForSequenceClassification"),B5o=o(" (DeBERTa model)"),x5o=l(),c1=a("li"),wee=a("strong"),k5o=o("deberta-v2"),R5o=o(" \u2014 "),MP=a("a"),S5o=o("DebertaV2ForSequenceClassification"),P5o=o(" (DeBERTa-v2 model)"),$5o=l(),f1=a("li"),Aee=a("strong"),I5o=o("distilbert"),j5o=o(" \u2014 "),EP=a("a"),N5o=o("DistilBertForSequenceClassification"),D5o=o(" (DistilBERT model)"),q5o=l(),m1=a("li"),Lee=a("strong"),G5o=o("electra"),O5o=o(" \u2014 "),yP=a("a"),X5o=o("ElectraForSequenceClassification"),z5o=o(" (ELECTRA model)"),V5o=l(),g1=a("li"),Bee=a("strong"),W5o=o("flaubert"),Q5o=o(" \u2014 "),wP=a("a"),H5o=o("FlaubertForSequenceClassification"),U5o=o(" (FlauBERT model)"),J5o=l(),h1=a("li"),xee=a("strong"),Y5o=o("fnet"),K5o=o(" \u2014 "),AP=a("a"),Z5o=o("FNetForSequenceClassification"),e2o=o(" (FNet model)"),o2o=l(),p1=a("li"),kee=a("strong"),r2o=o("funnel"),t2o=o(" \u2014 "),LP=a("a"),a2o=o("FunnelForSequenceClassification"),n2o=o(" (Funnel Transformer model)"),s2o=l(),_1=a("li"),Ree=a("strong"),l2o=o("gpt2"),i2o=o(" \u2014 "),BP=a("a"),d2o=o("GPT2ForSequenceClassification"),c2o=o(" (OpenAI GPT-2 model)"),f2o=l(),u1=a("li"),See=a("strong"),m2o=o("gpt_neo"),g2o=o(" \u2014 "),xP=a("a"),h2o=o("GPTNeoForSequenceClassification"),p2o=o(" (GPT Neo model)"),_2o=l(),b1=a("li"),Pee=a("strong"),u2o=o("gptj"),b2o=o(" \u2014 "),kP=a("a"),v2o=o("GPTJForSequenceClassification"),T2o=o(" (GPT-J model)"),F2o=l(),v1=a("li"),$ee=a("strong"),C2o=o("ibert"),M2o=o(" \u2014 "),RP=a("a"),E2o=o("IBertForSequenceClassification"),y2o=o(" (I-BERT model)"),w2o=l(),T1=a("li"),Iee=a("strong"),A2o=o("layoutlm"),L2o=o(" \u2014 "),SP=a("a"),B2o=o("LayoutLMForSequenceClassification"),x2o=o(" (LayoutLM model)"),k2o=l(),F1=a("li"),jee=a("strong"),R2o=o("layoutlmv2"),S2o=o(" \u2014 "),PP=a("a"),P2o=o("LayoutLMv2ForSequenceClassification"),$2o=o(" (LayoutLMv2 model)"),I2o=l(),C1=a("li"),Nee=a("strong"),j2o=o("led"),N2o=o(" \u2014 "),$P=a("a"),D2o=o("LEDForSequenceClassification"),q2o=o(" (LED model)"),G2o=l(),M1=a("li"),Dee=a("strong"),O2o=o("longformer"),X2o=o(" \u2014 "),IP=a("a"),z2o=o("LongformerForSequenceClassification"),V2o=o(" (Longformer model)"),W2o=l(),E1=a("li"),qee=a("strong"),Q2o=o("mbart"),H2o=o(" \u2014 "),jP=a("a"),U2o=o("MBartForSequenceClassification"),J2o=o(" (mBART model)"),Y2o=l(),y1=a("li"),Gee=a("strong"),K2o=o("megatron-bert"),Z2o=o(" \u2014 "),NP=a("a"),evo=o("MegatronBertForSequenceClassification"),ovo=o(" (MegatronBert model)"),rvo=l(),w1=a("li"),Oee=a("strong"),tvo=o("mobilebert"),avo=o(" \u2014 "),DP=a("a"),nvo=o("MobileBertForSequenceClassification"),svo=o(" (MobileBERT model)"),lvo=l(),A1=a("li"),Xee=a("strong"),ivo=o("mpnet"),dvo=o(" \u2014 "),qP=a("a"),cvo=o("MPNetForSequenceClassification"),fvo=o(" (MPNet model)"),mvo=l(),L1=a("li"),zee=a("strong"),gvo=o("nystromformer"),hvo=o(" \u2014 "),GP=a("a"),pvo=o("NystromformerForSequenceClassification"),_vo=o(" (Nystromformer model)"),uvo=l(),B1=a("li"),Vee=a("strong"),bvo=o("openai-gpt"),vvo=o(" \u2014 "),OP=a("a"),Tvo=o("OpenAIGPTForSequenceClassification"),Fvo=o(" (OpenAI GPT model)"),Cvo=l(),x1=a("li"),Wee=a("strong"),Mvo=o("perceiver"),Evo=o(" \u2014 "),XP=a("a"),yvo=o("PerceiverForSequenceClassification"),wvo=o(" (Perceiver model)"),Avo=l(),k1=a("li"),Qee=a("strong"),Lvo=o("qdqbert"),Bvo=o(" \u2014 "),zP=a("a"),xvo=o("QDQBertForSequenceClassification"),kvo=o(" (QDQBert model)"),Rvo=l(),R1=a("li"),Hee=a("strong"),Svo=o("reformer"),Pvo=o(" \u2014 "),VP=a("a"),$vo=o("ReformerForSequenceClassification"),Ivo=o(" (Reformer model)"),jvo=l(),S1=a("li"),Uee=a("strong"),Nvo=o("rembert"),Dvo=o(" \u2014 "),WP=a("a"),qvo=o("RemBertForSequenceClassification"),Gvo=o(" (RemBERT model)"),Ovo=l(),P1=a("li"),Jee=a("strong"),Xvo=o("roberta"),zvo=o(" \u2014 "),QP=a("a"),Vvo=o("RobertaForSequenceClassification"),Wvo=o(" (RoBERTa model)"),Qvo=l(),$1=a("li"),Yee=a("strong"),Hvo=o("roformer"),Uvo=o(" \u2014 "),HP=a("a"),Jvo=o("RoFormerForSequenceClassification"),Yvo=o(" (RoFormer model)"),Kvo=l(),I1=a("li"),Kee=a("strong"),Zvo=o("squeezebert"),e6o=o(" \u2014 "),UP=a("a"),o6o=o("SqueezeBertForSequenceClassification"),r6o=o(" (SqueezeBERT model)"),t6o=l(),j1=a("li"),Zee=a("strong"),a6o=o("tapas"),n6o=o(" \u2014 "),JP=a("a"),s6o=o("TapasForSequenceClassification"),l6o=o(" (TAPAS model)"),i6o=l(),N1=a("li"),eoe=a("strong"),d6o=o("transfo-xl"),c6o=o(" \u2014 "),YP=a("a"),f6o=o("TransfoXLForSequenceClassification"),m6o=o(" (Transformer-XL model)"),g6o=l(),D1=a("li"),ooe=a("strong"),h6o=o("xlm"),p6o=o(" \u2014 "),KP=a("a"),_6o=o("XLMForSequenceClassification"),u6o=o(" (XLM model)"),b6o=l(),q1=a("li"),roe=a("strong"),v6o=o("xlm-roberta"),T6o=o(" \u2014 "),ZP=a("a"),F6o=o("XLMRobertaForSequenceClassification"),C6o=o(" (XLM-RoBERTa model)"),M6o=l(),G1=a("li"),toe=a("strong"),E6o=o("xlm-roberta-xl"),y6o=o(" \u2014 "),e$=a("a"),w6o=o("XLMRobertaXLForSequenceClassification"),A6o=o(" (XLM-RoBERTa-XL model)"),L6o=l(),O1=a("li"),aoe=a("strong"),B6o=o("xlnet"),x6o=o(" \u2014 "),o$=a("a"),k6o=o("XLNetForSequenceClassification"),R6o=o(" (XLNet model)"),S6o=l(),X1=a("li"),noe=a("strong"),P6o=o("yoso"),$6o=o(" \u2014 "),r$=a("a"),I6o=o("YosoForSequenceClassification"),j6o=o(" (YOSO model)"),N6o=l(),z1=a("p"),D6o=o("The model is set in evaluation mode by default using "),soe=a("code"),q6o=o("model.eval()"),G6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),loe=a("code"),O6o=o("model.train()"),X6o=l(),ioe=a("p"),z6o=o("Examples:"),V6o=l(),f(Q4.$$.fragment),qAe=l(),Ji=a("h2"),V1=a("a"),doe=a("span"),f(H4.$$.fragment),W6o=l(),coe=a("span"),Q6o=o("AutoModelForMultipleChoice"),GAe=l(),Uo=a("div"),f(U4.$$.fragment),H6o=l(),Yi=a("p"),U6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),foe=a("code"),J6o=o("from_pretrained()"),Y6o=o("class method or the "),moe=a("code"),K6o=o("from_config()"),Z6o=o(`class
method.`),eTo=l(),J4=a("p"),oTo=o("This class cannot be instantiated directly using "),goe=a("code"),rTo=o("__init__()"),tTo=o(" (throws an error)."),aTo=l(),Gr=a("div"),f(Y4.$$.fragment),nTo=l(),hoe=a("p"),sTo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lTo=l(),Ki=a("p"),iTo=o(`Note:
Loading a model from its configuration file does `),poe=a("strong"),dTo=o("not"),cTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=a("code"),fTo=o("from_pretrained()"),mTo=o("to load the model weights."),gTo=l(),uoe=a("p"),hTo=o("Examples:"),pTo=l(),f(K4.$$.fragment),_To=l(),Ie=a("div"),f(Z4.$$.fragment),uTo=l(),boe=a("p"),bTo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vTo=l(),Ga=a("p"),TTo=o("The model class to instantiate is selected based on the "),voe=a("code"),FTo=o("model_type"),CTo=o(` property of the config object (either
passed as an argument or loaded from `),Toe=a("code"),MTo=o("pretrained_model_name_or_path"),ETo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Foe=a("code"),yTo=o("pretrained_model_name_or_path"),wTo=o(":"),ATo=l(),G=a("ul"),W1=a("li"),Coe=a("strong"),LTo=o("albert"),BTo=o(" \u2014 "),t$=a("a"),xTo=o("AlbertForMultipleChoice"),kTo=o(" (ALBERT model)"),RTo=l(),Q1=a("li"),Moe=a("strong"),STo=o("bert"),PTo=o(" \u2014 "),a$=a("a"),$To=o("BertForMultipleChoice"),ITo=o(" (BERT model)"),jTo=l(),H1=a("li"),Eoe=a("strong"),NTo=o("big_bird"),DTo=o(" \u2014 "),n$=a("a"),qTo=o("BigBirdForMultipleChoice"),GTo=o(" (BigBird model)"),OTo=l(),U1=a("li"),yoe=a("strong"),XTo=o("camembert"),zTo=o(" \u2014 "),s$=a("a"),VTo=o("CamembertForMultipleChoice"),WTo=o(" (CamemBERT model)"),QTo=l(),J1=a("li"),woe=a("strong"),HTo=o("canine"),UTo=o(" \u2014 "),l$=a("a"),JTo=o("CanineForMultipleChoice"),YTo=o(" (Canine model)"),KTo=l(),Y1=a("li"),Aoe=a("strong"),ZTo=o("convbert"),e7o=o(" \u2014 "),i$=a("a"),o7o=o("ConvBertForMultipleChoice"),r7o=o(" (ConvBERT model)"),t7o=l(),K1=a("li"),Loe=a("strong"),a7o=o("distilbert"),n7o=o(" \u2014 "),d$=a("a"),s7o=o("DistilBertForMultipleChoice"),l7o=o(" (DistilBERT model)"),i7o=l(),Z1=a("li"),Boe=a("strong"),d7o=o("electra"),c7o=o(" \u2014 "),c$=a("a"),f7o=o("ElectraForMultipleChoice"),m7o=o(" (ELECTRA model)"),g7o=l(),eb=a("li"),xoe=a("strong"),h7o=o("flaubert"),p7o=o(" \u2014 "),f$=a("a"),_7o=o("FlaubertForMultipleChoice"),u7o=o(" (FlauBERT model)"),b7o=l(),ob=a("li"),koe=a("strong"),v7o=o("fnet"),T7o=o(" \u2014 "),m$=a("a"),F7o=o("FNetForMultipleChoice"),C7o=o(" (FNet model)"),M7o=l(),rb=a("li"),Roe=a("strong"),E7o=o("funnel"),y7o=o(" \u2014 "),g$=a("a"),w7o=o("FunnelForMultipleChoice"),A7o=o(" (Funnel Transformer model)"),L7o=l(),tb=a("li"),Soe=a("strong"),B7o=o("ibert"),x7o=o(" \u2014 "),h$=a("a"),k7o=o("IBertForMultipleChoice"),R7o=o(" (I-BERT model)"),S7o=l(),ab=a("li"),Poe=a("strong"),P7o=o("longformer"),$7o=o(" \u2014 "),p$=a("a"),I7o=o("LongformerForMultipleChoice"),j7o=o(" (Longformer model)"),N7o=l(),nb=a("li"),$oe=a("strong"),D7o=o("megatron-bert"),q7o=o(" \u2014 "),_$=a("a"),G7o=o("MegatronBertForMultipleChoice"),O7o=o(" (MegatronBert model)"),X7o=l(),sb=a("li"),Ioe=a("strong"),z7o=o("mobilebert"),V7o=o(" \u2014 "),u$=a("a"),W7o=o("MobileBertForMultipleChoice"),Q7o=o(" (MobileBERT model)"),H7o=l(),lb=a("li"),joe=a("strong"),U7o=o("mpnet"),J7o=o(" \u2014 "),b$=a("a"),Y7o=o("MPNetForMultipleChoice"),K7o=o(" (MPNet model)"),Z7o=l(),ib=a("li"),Noe=a("strong"),e8o=o("nystromformer"),o8o=o(" \u2014 "),v$=a("a"),r8o=o("NystromformerForMultipleChoice"),t8o=o(" (Nystromformer model)"),a8o=l(),db=a("li"),Doe=a("strong"),n8o=o("qdqbert"),s8o=o(" \u2014 "),T$=a("a"),l8o=o("QDQBertForMultipleChoice"),i8o=o(" (QDQBert model)"),d8o=l(),cb=a("li"),qoe=a("strong"),c8o=o("rembert"),f8o=o(" \u2014 "),F$=a("a"),m8o=o("RemBertForMultipleChoice"),g8o=o(" (RemBERT model)"),h8o=l(),fb=a("li"),Goe=a("strong"),p8o=o("roberta"),_8o=o(" \u2014 "),C$=a("a"),u8o=o("RobertaForMultipleChoice"),b8o=o(" (RoBERTa model)"),v8o=l(),mb=a("li"),Ooe=a("strong"),T8o=o("roformer"),F8o=o(" \u2014 "),M$=a("a"),C8o=o("RoFormerForMultipleChoice"),M8o=o(" (RoFormer model)"),E8o=l(),gb=a("li"),Xoe=a("strong"),y8o=o("squeezebert"),w8o=o(" \u2014 "),E$=a("a"),A8o=o("SqueezeBertForMultipleChoice"),L8o=o(" (SqueezeBERT model)"),B8o=l(),hb=a("li"),zoe=a("strong"),x8o=o("xlm"),k8o=o(" \u2014 "),y$=a("a"),R8o=o("XLMForMultipleChoice"),S8o=o(" (XLM model)"),P8o=l(),pb=a("li"),Voe=a("strong"),$8o=o("xlm-roberta"),I8o=o(" \u2014 "),w$=a("a"),j8o=o("XLMRobertaForMultipleChoice"),N8o=o(" (XLM-RoBERTa model)"),D8o=l(),_b=a("li"),Woe=a("strong"),q8o=o("xlm-roberta-xl"),G8o=o(" \u2014 "),A$=a("a"),O8o=o("XLMRobertaXLForMultipleChoice"),X8o=o(" (XLM-RoBERTa-XL model)"),z8o=l(),ub=a("li"),Qoe=a("strong"),V8o=o("xlnet"),W8o=o(" \u2014 "),L$=a("a"),Q8o=o("XLNetForMultipleChoice"),H8o=o(" (XLNet model)"),U8o=l(),bb=a("li"),Hoe=a("strong"),J8o=o("yoso"),Y8o=o(" \u2014 "),B$=a("a"),K8o=o("YosoForMultipleChoice"),Z8o=o(" (YOSO model)"),eFo=l(),vb=a("p"),oFo=o("The model is set in evaluation mode by default using "),Uoe=a("code"),rFo=o("model.eval()"),tFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=a("code"),aFo=o("model.train()"),nFo=l(),Yoe=a("p"),sFo=o("Examples:"),lFo=l(),f(eM.$$.fragment),OAe=l(),Zi=a("h2"),Tb=a("a"),Koe=a("span"),f(oM.$$.fragment),iFo=l(),Zoe=a("span"),dFo=o("AutoModelForNextSentencePrediction"),XAe=l(),Jo=a("div"),f(rM.$$.fragment),cFo=l(),ed=a("p"),fFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ere=a("code"),mFo=o("from_pretrained()"),gFo=o("class method or the "),ore=a("code"),hFo=o("from_config()"),pFo=o(`class
method.`),_Fo=l(),tM=a("p"),uFo=o("This class cannot be instantiated directly using "),rre=a("code"),bFo=o("__init__()"),vFo=o(" (throws an error)."),TFo=l(),Or=a("div"),f(aM.$$.fragment),FFo=l(),tre=a("p"),CFo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MFo=l(),od=a("p"),EFo=o(`Note:
Loading a model from its configuration file does `),are=a("strong"),yFo=o("not"),wFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("code"),AFo=o("from_pretrained()"),LFo=o("to load the model weights."),BFo=l(),sre=a("p"),xFo=o("Examples:"),kFo=l(),f(nM.$$.fragment),RFo=l(),je=a("div"),f(sM.$$.fragment),SFo=l(),lre=a("p"),PFo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$Fo=l(),Oa=a("p"),IFo=o("The model class to instantiate is selected based on the "),ire=a("code"),jFo=o("model_type"),NFo=o(` property of the config object (either
passed as an argument or loaded from `),dre=a("code"),DFo=o("pretrained_model_name_or_path"),qFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=a("code"),GFo=o("pretrained_model_name_or_path"),OFo=o(":"),XFo=l(),oa=a("ul"),Fb=a("li"),fre=a("strong"),zFo=o("bert"),VFo=o(" \u2014 "),x$=a("a"),WFo=o("BertForNextSentencePrediction"),QFo=o(" (BERT model)"),HFo=l(),Cb=a("li"),mre=a("strong"),UFo=o("fnet"),JFo=o(" \u2014 "),k$=a("a"),YFo=o("FNetForNextSentencePrediction"),KFo=o(" (FNet model)"),ZFo=l(),Mb=a("li"),gre=a("strong"),eCo=o("megatron-bert"),oCo=o(" \u2014 "),R$=a("a"),rCo=o("MegatronBertForNextSentencePrediction"),tCo=o(" (MegatronBert model)"),aCo=l(),Eb=a("li"),hre=a("strong"),nCo=o("mobilebert"),sCo=o(" \u2014 "),S$=a("a"),lCo=o("MobileBertForNextSentencePrediction"),iCo=o(" (MobileBERT model)"),dCo=l(),yb=a("li"),pre=a("strong"),cCo=o("qdqbert"),fCo=o(" \u2014 "),P$=a("a"),mCo=o("QDQBertForNextSentencePrediction"),gCo=o(" (QDQBert model)"),hCo=l(),wb=a("p"),pCo=o("The model is set in evaluation mode by default using "),_re=a("code"),_Co=o("model.eval()"),uCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ure=a("code"),bCo=o("model.train()"),vCo=l(),bre=a("p"),TCo=o("Examples:"),FCo=l(),f(lM.$$.fragment),zAe=l(),rd=a("h2"),Ab=a("a"),vre=a("span"),f(iM.$$.fragment),CCo=l(),Tre=a("span"),MCo=o("AutoModelForTokenClassification"),VAe=l(),Yo=a("div"),f(dM.$$.fragment),ECo=l(),td=a("p"),yCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fre=a("code"),wCo=o("from_pretrained()"),ACo=o("class method or the "),Cre=a("code"),LCo=o("from_config()"),BCo=o(`class
method.`),xCo=l(),cM=a("p"),kCo=o("This class cannot be instantiated directly using "),Mre=a("code"),RCo=o("__init__()"),SCo=o(" (throws an error)."),PCo=l(),Xr=a("div"),f(fM.$$.fragment),$Co=l(),Ere=a("p"),ICo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jCo=l(),ad=a("p"),NCo=o(`Note:
Loading a model from its configuration file does `),yre=a("strong"),DCo=o("not"),qCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=a("code"),GCo=o("from_pretrained()"),OCo=o("to load the model weights."),XCo=l(),Are=a("p"),zCo=o("Examples:"),VCo=l(),f(mM.$$.fragment),WCo=l(),Ne=a("div"),f(gM.$$.fragment),QCo=l(),Lre=a("p"),HCo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),UCo=l(),Xa=a("p"),JCo=o("The model class to instantiate is selected based on the "),Bre=a("code"),YCo=o("model_type"),KCo=o(` property of the config object (either
passed as an argument or loaded from `),xre=a("code"),ZCo=o("pretrained_model_name_or_path"),e4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kre=a("code"),o4o=o("pretrained_model_name_or_path"),r4o=o(":"),t4o=l(),N=a("ul"),Lb=a("li"),Rre=a("strong"),a4o=o("albert"),n4o=o(" \u2014 "),$$=a("a"),s4o=o("AlbertForTokenClassification"),l4o=o(" (ALBERT model)"),i4o=l(),Bb=a("li"),Sre=a("strong"),d4o=o("bert"),c4o=o(" \u2014 "),I$=a("a"),f4o=o("BertForTokenClassification"),m4o=o(" (BERT model)"),g4o=l(),xb=a("li"),Pre=a("strong"),h4o=o("big_bird"),p4o=o(" \u2014 "),j$=a("a"),_4o=o("BigBirdForTokenClassification"),u4o=o(" (BigBird model)"),b4o=l(),kb=a("li"),$re=a("strong"),v4o=o("camembert"),T4o=o(" \u2014 "),N$=a("a"),F4o=o("CamembertForTokenClassification"),C4o=o(" (CamemBERT model)"),M4o=l(),Rb=a("li"),Ire=a("strong"),E4o=o("canine"),y4o=o(" \u2014 "),D$=a("a"),w4o=o("CanineForTokenClassification"),A4o=o(" (Canine model)"),L4o=l(),Sb=a("li"),jre=a("strong"),B4o=o("convbert"),x4o=o(" \u2014 "),q$=a("a"),k4o=o("ConvBertForTokenClassification"),R4o=o(" (ConvBERT model)"),S4o=l(),Pb=a("li"),Nre=a("strong"),P4o=o("deberta"),$4o=o(" \u2014 "),G$=a("a"),I4o=o("DebertaForTokenClassification"),j4o=o(" (DeBERTa model)"),N4o=l(),$b=a("li"),Dre=a("strong"),D4o=o("deberta-v2"),q4o=o(" \u2014 "),O$=a("a"),G4o=o("DebertaV2ForTokenClassification"),O4o=o(" (DeBERTa-v2 model)"),X4o=l(),Ib=a("li"),qre=a("strong"),z4o=o("distilbert"),V4o=o(" \u2014 "),X$=a("a"),W4o=o("DistilBertForTokenClassification"),Q4o=o(" (DistilBERT model)"),H4o=l(),jb=a("li"),Gre=a("strong"),U4o=o("electra"),J4o=o(" \u2014 "),z$=a("a"),Y4o=o("ElectraForTokenClassification"),K4o=o(" (ELECTRA model)"),Z4o=l(),Nb=a("li"),Ore=a("strong"),eMo=o("flaubert"),oMo=o(" \u2014 "),V$=a("a"),rMo=o("FlaubertForTokenClassification"),tMo=o(" (FlauBERT model)"),aMo=l(),Db=a("li"),Xre=a("strong"),nMo=o("fnet"),sMo=o(" \u2014 "),W$=a("a"),lMo=o("FNetForTokenClassification"),iMo=o(" (FNet model)"),dMo=l(),qb=a("li"),zre=a("strong"),cMo=o("funnel"),fMo=o(" \u2014 "),Q$=a("a"),mMo=o("FunnelForTokenClassification"),gMo=o(" (Funnel Transformer model)"),hMo=l(),Gb=a("li"),Vre=a("strong"),pMo=o("gpt2"),_Mo=o(" \u2014 "),H$=a("a"),uMo=o("GPT2ForTokenClassification"),bMo=o(" (OpenAI GPT-2 model)"),vMo=l(),Ob=a("li"),Wre=a("strong"),TMo=o("ibert"),FMo=o(" \u2014 "),U$=a("a"),CMo=o("IBertForTokenClassification"),MMo=o(" (I-BERT model)"),EMo=l(),Xb=a("li"),Qre=a("strong"),yMo=o("layoutlm"),wMo=o(" \u2014 "),J$=a("a"),AMo=o("LayoutLMForTokenClassification"),LMo=o(" (LayoutLM model)"),BMo=l(),zb=a("li"),Hre=a("strong"),xMo=o("layoutlmv2"),kMo=o(" \u2014 "),Y$=a("a"),RMo=o("LayoutLMv2ForTokenClassification"),SMo=o(" (LayoutLMv2 model)"),PMo=l(),Vb=a("li"),Ure=a("strong"),$Mo=o("longformer"),IMo=o(" \u2014 "),K$=a("a"),jMo=o("LongformerForTokenClassification"),NMo=o(" (Longformer model)"),DMo=l(),Wb=a("li"),Jre=a("strong"),qMo=o("megatron-bert"),GMo=o(" \u2014 "),Z$=a("a"),OMo=o("MegatronBertForTokenClassification"),XMo=o(" (MegatronBert model)"),zMo=l(),Qb=a("li"),Yre=a("strong"),VMo=o("mobilebert"),WMo=o(" \u2014 "),eI=a("a"),QMo=o("MobileBertForTokenClassification"),HMo=o(" (MobileBERT model)"),UMo=l(),Hb=a("li"),Kre=a("strong"),JMo=o("mpnet"),YMo=o(" \u2014 "),oI=a("a"),KMo=o("MPNetForTokenClassification"),ZMo=o(" (MPNet model)"),eEo=l(),Ub=a("li"),Zre=a("strong"),oEo=o("nystromformer"),rEo=o(" \u2014 "),rI=a("a"),tEo=o("NystromformerForTokenClassification"),aEo=o(" (Nystromformer model)"),nEo=l(),Jb=a("li"),ete=a("strong"),sEo=o("qdqbert"),lEo=o(" \u2014 "),tI=a("a"),iEo=o("QDQBertForTokenClassification"),dEo=o(" (QDQBert model)"),cEo=l(),Yb=a("li"),ote=a("strong"),fEo=o("rembert"),mEo=o(" \u2014 "),aI=a("a"),gEo=o("RemBertForTokenClassification"),hEo=o(" (RemBERT model)"),pEo=l(),Kb=a("li"),rte=a("strong"),_Eo=o("roberta"),uEo=o(" \u2014 "),nI=a("a"),bEo=o("RobertaForTokenClassification"),vEo=o(" (RoBERTa model)"),TEo=l(),Zb=a("li"),tte=a("strong"),FEo=o("roformer"),CEo=o(" \u2014 "),sI=a("a"),MEo=o("RoFormerForTokenClassification"),EEo=o(" (RoFormer model)"),yEo=l(),e5=a("li"),ate=a("strong"),wEo=o("squeezebert"),AEo=o(" \u2014 "),lI=a("a"),LEo=o("SqueezeBertForTokenClassification"),BEo=o(" (SqueezeBERT model)"),xEo=l(),o5=a("li"),nte=a("strong"),kEo=o("xlm"),REo=o(" \u2014 "),iI=a("a"),SEo=o("XLMForTokenClassification"),PEo=o(" (XLM model)"),$Eo=l(),r5=a("li"),ste=a("strong"),IEo=o("xlm-roberta"),jEo=o(" \u2014 "),dI=a("a"),NEo=o("XLMRobertaForTokenClassification"),DEo=o(" (XLM-RoBERTa model)"),qEo=l(),t5=a("li"),lte=a("strong"),GEo=o("xlm-roberta-xl"),OEo=o(" \u2014 "),cI=a("a"),XEo=o("XLMRobertaXLForTokenClassification"),zEo=o(" (XLM-RoBERTa-XL model)"),VEo=l(),a5=a("li"),ite=a("strong"),WEo=o("xlnet"),QEo=o(" \u2014 "),fI=a("a"),HEo=o("XLNetForTokenClassification"),UEo=o(" (XLNet model)"),JEo=l(),n5=a("li"),dte=a("strong"),YEo=o("yoso"),KEo=o(" \u2014 "),mI=a("a"),ZEo=o("YosoForTokenClassification"),e3o=o(" (YOSO model)"),o3o=l(),s5=a("p"),r3o=o("The model is set in evaluation mode by default using "),cte=a("code"),t3o=o("model.eval()"),a3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=a("code"),n3o=o("model.train()"),s3o=l(),mte=a("p"),l3o=o("Examples:"),i3o=l(),f(hM.$$.fragment),WAe=l(),nd=a("h2"),l5=a("a"),gte=a("span"),f(pM.$$.fragment),d3o=l(),hte=a("span"),c3o=o("AutoModelForQuestionAnswering"),QAe=l(),Ko=a("div"),f(_M.$$.fragment),f3o=l(),sd=a("p"),m3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pte=a("code"),g3o=o("from_pretrained()"),h3o=o("class method or the "),_te=a("code"),p3o=o("from_config()"),_3o=o(`class
method.`),u3o=l(),uM=a("p"),b3o=o("This class cannot be instantiated directly using "),ute=a("code"),v3o=o("__init__()"),T3o=o(" (throws an error)."),F3o=l(),zr=a("div"),f(bM.$$.fragment),C3o=l(),bte=a("p"),M3o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E3o=l(),ld=a("p"),y3o=o(`Note:
Loading a model from its configuration file does `),vte=a("strong"),w3o=o("not"),A3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=a("code"),L3o=o("from_pretrained()"),B3o=o("to load the model weights."),x3o=l(),Fte=a("p"),k3o=o("Examples:"),R3o=l(),f(vM.$$.fragment),S3o=l(),De=a("div"),f(TM.$$.fragment),P3o=l(),Cte=a("p"),$3o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I3o=l(),za=a("p"),j3o=o("The model class to instantiate is selected based on the "),Mte=a("code"),N3o=o("model_type"),D3o=o(` property of the config object (either
passed as an argument or loaded from `),Ete=a("code"),q3o=o("pretrained_model_name_or_path"),G3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yte=a("code"),O3o=o("pretrained_model_name_or_path"),X3o=o(":"),z3o=l(),R=a("ul"),i5=a("li"),wte=a("strong"),V3o=o("albert"),W3o=o(" \u2014 "),gI=a("a"),Q3o=o("AlbertForQuestionAnswering"),H3o=o(" (ALBERT model)"),U3o=l(),d5=a("li"),Ate=a("strong"),J3o=o("bart"),Y3o=o(" \u2014 "),hI=a("a"),K3o=o("BartForQuestionAnswering"),Z3o=o(" (BART model)"),eyo=l(),c5=a("li"),Lte=a("strong"),oyo=o("bert"),ryo=o(" \u2014 "),pI=a("a"),tyo=o("BertForQuestionAnswering"),ayo=o(" (BERT model)"),nyo=l(),f5=a("li"),Bte=a("strong"),syo=o("big_bird"),lyo=o(" \u2014 "),_I=a("a"),iyo=o("BigBirdForQuestionAnswering"),dyo=o(" (BigBird model)"),cyo=l(),m5=a("li"),xte=a("strong"),fyo=o("bigbird_pegasus"),myo=o(" \u2014 "),uI=a("a"),gyo=o("BigBirdPegasusForQuestionAnswering"),hyo=o(" (BigBirdPegasus model)"),pyo=l(),g5=a("li"),kte=a("strong"),_yo=o("camembert"),uyo=o(" \u2014 "),bI=a("a"),byo=o("CamembertForQuestionAnswering"),vyo=o(" (CamemBERT model)"),Tyo=l(),h5=a("li"),Rte=a("strong"),Fyo=o("canine"),Cyo=o(" \u2014 "),vI=a("a"),Myo=o("CanineForQuestionAnswering"),Eyo=o(" (Canine model)"),yyo=l(),p5=a("li"),Ste=a("strong"),wyo=o("convbert"),Ayo=o(" \u2014 "),TI=a("a"),Lyo=o("ConvBertForQuestionAnswering"),Byo=o(" (ConvBERT model)"),xyo=l(),_5=a("li"),Pte=a("strong"),kyo=o("deberta"),Ryo=o(" \u2014 "),FI=a("a"),Syo=o("DebertaForQuestionAnswering"),Pyo=o(" (DeBERTa model)"),$yo=l(),u5=a("li"),$te=a("strong"),Iyo=o("deberta-v2"),jyo=o(" \u2014 "),CI=a("a"),Nyo=o("DebertaV2ForQuestionAnswering"),Dyo=o(" (DeBERTa-v2 model)"),qyo=l(),b5=a("li"),Ite=a("strong"),Gyo=o("distilbert"),Oyo=o(" \u2014 "),MI=a("a"),Xyo=o("DistilBertForQuestionAnswering"),zyo=o(" (DistilBERT model)"),Vyo=l(),v5=a("li"),jte=a("strong"),Wyo=o("electra"),Qyo=o(" \u2014 "),EI=a("a"),Hyo=o("ElectraForQuestionAnswering"),Uyo=o(" (ELECTRA model)"),Jyo=l(),T5=a("li"),Nte=a("strong"),Yyo=o("flaubert"),Kyo=o(" \u2014 "),yI=a("a"),Zyo=o("FlaubertForQuestionAnsweringSimple"),ewo=o(" (FlauBERT model)"),owo=l(),F5=a("li"),Dte=a("strong"),rwo=o("fnet"),two=o(" \u2014 "),wI=a("a"),awo=o("FNetForQuestionAnswering"),nwo=o(" (FNet model)"),swo=l(),C5=a("li"),qte=a("strong"),lwo=o("funnel"),iwo=o(" \u2014 "),AI=a("a"),dwo=o("FunnelForQuestionAnswering"),cwo=o(" (Funnel Transformer model)"),fwo=l(),M5=a("li"),Gte=a("strong"),mwo=o("gptj"),gwo=o(" \u2014 "),LI=a("a"),hwo=o("GPTJForQuestionAnswering"),pwo=o(" (GPT-J model)"),_wo=l(),E5=a("li"),Ote=a("strong"),uwo=o("ibert"),bwo=o(" \u2014 "),BI=a("a"),vwo=o("IBertForQuestionAnswering"),Two=o(" (I-BERT model)"),Fwo=l(),y5=a("li"),Xte=a("strong"),Cwo=o("layoutlmv2"),Mwo=o(" \u2014 "),xI=a("a"),Ewo=o("LayoutLMv2ForQuestionAnswering"),ywo=o(" (LayoutLMv2 model)"),wwo=l(),w5=a("li"),zte=a("strong"),Awo=o("led"),Lwo=o(" \u2014 "),kI=a("a"),Bwo=o("LEDForQuestionAnswering"),xwo=o(" (LED model)"),kwo=l(),A5=a("li"),Vte=a("strong"),Rwo=o("longformer"),Swo=o(" \u2014 "),RI=a("a"),Pwo=o("LongformerForQuestionAnswering"),$wo=o(" (Longformer model)"),Iwo=l(),L5=a("li"),Wte=a("strong"),jwo=o("lxmert"),Nwo=o(" \u2014 "),SI=a("a"),Dwo=o("LxmertForQuestionAnswering"),qwo=o(" (LXMERT model)"),Gwo=l(),B5=a("li"),Qte=a("strong"),Owo=o("mbart"),Xwo=o(" \u2014 "),PI=a("a"),zwo=o("MBartForQuestionAnswering"),Vwo=o(" (mBART model)"),Wwo=l(),x5=a("li"),Hte=a("strong"),Qwo=o("megatron-bert"),Hwo=o(" \u2014 "),$I=a("a"),Uwo=o("MegatronBertForQuestionAnswering"),Jwo=o(" (MegatronBert model)"),Ywo=l(),k5=a("li"),Ute=a("strong"),Kwo=o("mobilebert"),Zwo=o(" \u2014 "),II=a("a"),eAo=o("MobileBertForQuestionAnswering"),oAo=o(" (MobileBERT model)"),rAo=l(),R5=a("li"),Jte=a("strong"),tAo=o("mpnet"),aAo=o(" \u2014 "),jI=a("a"),nAo=o("MPNetForQuestionAnswering"),sAo=o(" (MPNet model)"),lAo=l(),S5=a("li"),Yte=a("strong"),iAo=o("nystromformer"),dAo=o(" \u2014 "),NI=a("a"),cAo=o("NystromformerForQuestionAnswering"),fAo=o(" (Nystromformer model)"),mAo=l(),P5=a("li"),Kte=a("strong"),gAo=o("qdqbert"),hAo=o(" \u2014 "),DI=a("a"),pAo=o("QDQBertForQuestionAnswering"),_Ao=o(" (QDQBert model)"),uAo=l(),$5=a("li"),Zte=a("strong"),bAo=o("reformer"),vAo=o(" \u2014 "),qI=a("a"),TAo=o("ReformerForQuestionAnswering"),FAo=o(" (Reformer model)"),CAo=l(),I5=a("li"),eae=a("strong"),MAo=o("rembert"),EAo=o(" \u2014 "),GI=a("a"),yAo=o("RemBertForQuestionAnswering"),wAo=o(" (RemBERT model)"),AAo=l(),j5=a("li"),oae=a("strong"),LAo=o("roberta"),BAo=o(" \u2014 "),OI=a("a"),xAo=o("RobertaForQuestionAnswering"),kAo=o(" (RoBERTa model)"),RAo=l(),N5=a("li"),rae=a("strong"),SAo=o("roformer"),PAo=o(" \u2014 "),XI=a("a"),$Ao=o("RoFormerForQuestionAnswering"),IAo=o(" (RoFormer model)"),jAo=l(),D5=a("li"),tae=a("strong"),NAo=o("splinter"),DAo=o(" \u2014 "),zI=a("a"),qAo=o("SplinterForQuestionAnswering"),GAo=o(" (Splinter model)"),OAo=l(),q5=a("li"),aae=a("strong"),XAo=o("squeezebert"),zAo=o(" \u2014 "),VI=a("a"),VAo=o("SqueezeBertForQuestionAnswering"),WAo=o(" (SqueezeBERT model)"),QAo=l(),G5=a("li"),nae=a("strong"),HAo=o("xlm"),UAo=o(" \u2014 "),WI=a("a"),JAo=o("XLMForQuestionAnsweringSimple"),YAo=o(" (XLM model)"),KAo=l(),O5=a("li"),sae=a("strong"),ZAo=o("xlm-roberta"),e0o=o(" \u2014 "),QI=a("a"),o0o=o("XLMRobertaForQuestionAnswering"),r0o=o(" (XLM-RoBERTa model)"),t0o=l(),X5=a("li"),lae=a("strong"),a0o=o("xlm-roberta-xl"),n0o=o(" \u2014 "),HI=a("a"),s0o=o("XLMRobertaXLForQuestionAnswering"),l0o=o(" (XLM-RoBERTa-XL model)"),i0o=l(),z5=a("li"),iae=a("strong"),d0o=o("xlnet"),c0o=o(" \u2014 "),UI=a("a"),f0o=o("XLNetForQuestionAnsweringSimple"),m0o=o(" (XLNet model)"),g0o=l(),V5=a("li"),dae=a("strong"),h0o=o("yoso"),p0o=o(" \u2014 "),JI=a("a"),_0o=o("YosoForQuestionAnswering"),u0o=o(" (YOSO model)"),b0o=l(),W5=a("p"),v0o=o("The model is set in evaluation mode by default using "),cae=a("code"),T0o=o("model.eval()"),F0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fae=a("code"),C0o=o("model.train()"),M0o=l(),mae=a("p"),E0o=o("Examples:"),y0o=l(),f(FM.$$.fragment),HAe=l(),id=a("h2"),Q5=a("a"),gae=a("span"),f(CM.$$.fragment),w0o=l(),hae=a("span"),A0o=o("AutoModelForTableQuestionAnswering"),UAe=l(),Zo=a("div"),f(MM.$$.fragment),L0o=l(),dd=a("p"),B0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pae=a("code"),x0o=o("from_pretrained()"),k0o=o("class method or the "),_ae=a("code"),R0o=o("from_config()"),S0o=o(`class
method.`),P0o=l(),EM=a("p"),$0o=o("This class cannot be instantiated directly using "),uae=a("code"),I0o=o("__init__()"),j0o=o(" (throws an error)."),N0o=l(),Vr=a("div"),f(yM.$$.fragment),D0o=l(),bae=a("p"),q0o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),G0o=l(),cd=a("p"),O0o=o(`Note:
Loading a model from its configuration file does `),vae=a("strong"),X0o=o("not"),z0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=a("code"),V0o=o("from_pretrained()"),W0o=o("to load the model weights."),Q0o=l(),Fae=a("p"),H0o=o("Examples:"),U0o=l(),f(wM.$$.fragment),J0o=l(),qe=a("div"),f(AM.$$.fragment),Y0o=l(),Cae=a("p"),K0o=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Z0o=l(),Va=a("p"),eLo=o("The model class to instantiate is selected based on the "),Mae=a("code"),oLo=o("model_type"),rLo=o(` property of the config object (either
passed as an argument or loaded from `),Eae=a("code"),tLo=o("pretrained_model_name_or_path"),aLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=a("code"),nLo=o("pretrained_model_name_or_path"),sLo=o(":"),lLo=l(),wae=a("ul"),H5=a("li"),Aae=a("strong"),iLo=o("tapas"),dLo=o(" \u2014 "),YI=a("a"),cLo=o("TapasForQuestionAnswering"),fLo=o(" (TAPAS model)"),mLo=l(),U5=a("p"),gLo=o("The model is set in evaluation mode by default using "),Lae=a("code"),hLo=o("model.eval()"),pLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=a("code"),_Lo=o("model.train()"),uLo=l(),xae=a("p"),bLo=o("Examples:"),vLo=l(),f(LM.$$.fragment),JAe=l(),fd=a("h2"),J5=a("a"),kae=a("span"),f(BM.$$.fragment),TLo=l(),Rae=a("span"),FLo=o("AutoModelForImageClassification"),YAe=l(),er=a("div"),f(xM.$$.fragment),CLo=l(),md=a("p"),MLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sae=a("code"),ELo=o("from_pretrained()"),yLo=o("class method or the "),Pae=a("code"),wLo=o("from_config()"),ALo=o(`class
method.`),LLo=l(),kM=a("p"),BLo=o("This class cannot be instantiated directly using "),$ae=a("code"),xLo=o("__init__()"),kLo=o(" (throws an error)."),RLo=l(),Wr=a("div"),f(RM.$$.fragment),SLo=l(),Iae=a("p"),PLo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Lo=l(),gd=a("p"),ILo=o(`Note:
Loading a model from its configuration file does `),jae=a("strong"),jLo=o("not"),NLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=a("code"),DLo=o("from_pretrained()"),qLo=o("to load the model weights."),GLo=l(),Dae=a("p"),OLo=o("Examples:"),XLo=l(),f(SM.$$.fragment),zLo=l(),Ge=a("div"),f(PM.$$.fragment),VLo=l(),qae=a("p"),WLo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QLo=l(),Wa=a("p"),HLo=o("The model class to instantiate is selected based on the "),Gae=a("code"),ULo=o("model_type"),JLo=o(` property of the config object (either
passed as an argument or loaded from `),Oae=a("code"),YLo=o("pretrained_model_name_or_path"),KLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=a("code"),ZLo=o("pretrained_model_name_or_path"),e9o=o(":"),o9o=l(),we=a("ul"),Y5=a("li"),zae=a("strong"),r9o=o("beit"),t9o=o(" \u2014 "),KI=a("a"),a9o=o("BeitForImageClassification"),n9o=o(" (BEiT model)"),s9o=l(),K5=a("li"),Vae=a("strong"),l9o=o("convnext"),i9o=o(" \u2014 "),ZI=a("a"),d9o=o("ConvNextForImageClassification"),c9o=o(" (ConvNext model)"),f9o=l(),As=a("li"),Wae=a("strong"),m9o=o("deit"),g9o=o(" \u2014 "),ej=a("a"),h9o=o("DeiTForImageClassification"),p9o=o(" or "),oj=a("a"),_9o=o("DeiTForImageClassificationWithTeacher"),u9o=o(" (DeiT model)"),b9o=l(),Z5=a("li"),Qae=a("strong"),v9o=o("imagegpt"),T9o=o(" \u2014 "),rj=a("a"),F9o=o("ImageGPTForImageClassification"),C9o=o(" (ImageGPT model)"),M9o=l(),ta=a("li"),Hae=a("strong"),E9o=o("perceiver"),y9o=o(" \u2014 "),tj=a("a"),w9o=o("PerceiverForImageClassificationLearned"),A9o=o(" or "),aj=a("a"),L9o=o("PerceiverForImageClassificationFourier"),B9o=o(" or "),nj=a("a"),x9o=o("PerceiverForImageClassificationConvProcessing"),k9o=o(" (Perceiver model)"),R9o=l(),e2=a("li"),Uae=a("strong"),S9o=o("segformer"),P9o=o(" \u2014 "),sj=a("a"),$9o=o("SegformerForImageClassification"),I9o=o(" (SegFormer model)"),j9o=l(),o2=a("li"),Jae=a("strong"),N9o=o("swin"),D9o=o(" \u2014 "),lj=a("a"),q9o=o("SwinForImageClassification"),G9o=o(" (Swin model)"),O9o=l(),r2=a("li"),Yae=a("strong"),X9o=o("vit"),z9o=o(" \u2014 "),ij=a("a"),V9o=o("ViTForImageClassification"),W9o=o(" (ViT model)"),Q9o=l(),t2=a("p"),H9o=o("The model is set in evaluation mode by default using "),Kae=a("code"),U9o=o("model.eval()"),J9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=a("code"),Y9o=o("model.train()"),K9o=l(),ene=a("p"),Z9o=o("Examples:"),eBo=l(),f($M.$$.fragment),KAe=l(),hd=a("h2"),a2=a("a"),one=a("span"),f(IM.$$.fragment),oBo=l(),rne=a("span"),rBo=o("AutoModelForVision2Seq"),ZAe=l(),or=a("div"),f(jM.$$.fragment),tBo=l(),pd=a("p"),aBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tne=a("code"),nBo=o("from_pretrained()"),sBo=o("class method or the "),ane=a("code"),lBo=o("from_config()"),iBo=o(`class
method.`),dBo=l(),NM=a("p"),cBo=o("This class cannot be instantiated directly using "),nne=a("code"),fBo=o("__init__()"),mBo=o(" (throws an error)."),gBo=l(),Qr=a("div"),f(DM.$$.fragment),hBo=l(),sne=a("p"),pBo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Bo=l(),_d=a("p"),uBo=o(`Note:
Loading a model from its configuration file does `),lne=a("strong"),bBo=o("not"),vBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ine=a("code"),TBo=o("from_pretrained()"),FBo=o("to load the model weights."),CBo=l(),dne=a("p"),MBo=o("Examples:"),EBo=l(),f(qM.$$.fragment),yBo=l(),Oe=a("div"),f(GM.$$.fragment),wBo=l(),cne=a("p"),ABo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LBo=l(),Qa=a("p"),BBo=o("The model class to instantiate is selected based on the "),fne=a("code"),xBo=o("model_type"),kBo=o(` property of the config object (either
passed as an argument or loaded from `),mne=a("code"),RBo=o("pretrained_model_name_or_path"),SBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gne=a("code"),PBo=o("pretrained_model_name_or_path"),$Bo=o(":"),IBo=l(),hne=a("ul"),n2=a("li"),pne=a("strong"),jBo=o("vision-encoder-decoder"),NBo=o(" \u2014 "),dj=a("a"),DBo=o("VisionEncoderDecoderModel"),qBo=o(" (Vision Encoder decoder model)"),GBo=l(),s2=a("p"),OBo=o("The model is set in evaluation mode by default using "),_ne=a("code"),XBo=o("model.eval()"),zBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=a("code"),VBo=o("model.train()"),WBo=l(),bne=a("p"),QBo=o("Examples:"),HBo=l(),f(OM.$$.fragment),e0e=l(),ud=a("h2"),l2=a("a"),vne=a("span"),f(XM.$$.fragment),UBo=l(),Tne=a("span"),JBo=o("AutoModelForAudioClassification"),o0e=l(),rr=a("div"),f(zM.$$.fragment),YBo=l(),bd=a("p"),KBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Fne=a("code"),ZBo=o("from_pretrained()"),exo=o("class method or the "),Cne=a("code"),oxo=o("from_config()"),rxo=o(`class
method.`),txo=l(),VM=a("p"),axo=o("This class cannot be instantiated directly using "),Mne=a("code"),nxo=o("__init__()"),sxo=o(" (throws an error)."),lxo=l(),Hr=a("div"),f(WM.$$.fragment),ixo=l(),Ene=a("p"),dxo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cxo=l(),vd=a("p"),fxo=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),mxo=o("not"),gxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wne=a("code"),hxo=o("from_pretrained()"),pxo=o("to load the model weights."),_xo=l(),Ane=a("p"),uxo=o("Examples:"),bxo=l(),f(QM.$$.fragment),vxo=l(),Xe=a("div"),f(HM.$$.fragment),Txo=l(),Lne=a("p"),Fxo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Cxo=l(),Ha=a("p"),Mxo=o("The model class to instantiate is selected based on the "),Bne=a("code"),Exo=o("model_type"),yxo=o(` property of the config object (either
passed as an argument or loaded from `),xne=a("code"),wxo=o("pretrained_model_name_or_path"),Axo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),Lxo=o("pretrained_model_name_or_path"),Bxo=o(":"),xxo=l(),ro=a("ul"),i2=a("li"),Rne=a("strong"),kxo=o("hubert"),Rxo=o(" \u2014 "),cj=a("a"),Sxo=o("HubertForSequenceClassification"),Pxo=o(" (Hubert model)"),$xo=l(),d2=a("li"),Sne=a("strong"),Ixo=o("sew"),jxo=o(" \u2014 "),fj=a("a"),Nxo=o("SEWForSequenceClassification"),Dxo=o(" (SEW model)"),qxo=l(),c2=a("li"),Pne=a("strong"),Gxo=o("sew-d"),Oxo=o(" \u2014 "),mj=a("a"),Xxo=o("SEWDForSequenceClassification"),zxo=o(" (SEW-D model)"),Vxo=l(),f2=a("li"),$ne=a("strong"),Wxo=o("unispeech"),Qxo=o(" \u2014 "),gj=a("a"),Hxo=o("UniSpeechForSequenceClassification"),Uxo=o(" (UniSpeech model)"),Jxo=l(),m2=a("li"),Ine=a("strong"),Yxo=o("unispeech-sat"),Kxo=o(" \u2014 "),hj=a("a"),Zxo=o("UniSpeechSatForSequenceClassification"),eko=o(" (UniSpeechSat model)"),oko=l(),g2=a("li"),jne=a("strong"),rko=o("wav2vec2"),tko=o(" \u2014 "),pj=a("a"),ako=o("Wav2Vec2ForSequenceClassification"),nko=o(" (Wav2Vec2 model)"),sko=l(),h2=a("li"),Nne=a("strong"),lko=o("wavlm"),iko=o(" \u2014 "),_j=a("a"),dko=o("WavLMForSequenceClassification"),cko=o(" (WavLM model)"),fko=l(),p2=a("p"),mko=o("The model is set in evaluation mode by default using "),Dne=a("code"),gko=o("model.eval()"),hko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qne=a("code"),pko=o("model.train()"),_ko=l(),Gne=a("p"),uko=o("Examples:"),bko=l(),f(UM.$$.fragment),r0e=l(),Td=a("h2"),_2=a("a"),One=a("span"),f(JM.$$.fragment),vko=l(),Xne=a("span"),Tko=o("AutoModelForAudioFrameClassification"),t0e=l(),tr=a("div"),f(YM.$$.fragment),Fko=l(),Fd=a("p"),Cko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zne=a("code"),Mko=o("from_pretrained()"),Eko=o("class method or the "),Vne=a("code"),yko=o("from_config()"),wko=o(`class
method.`),Ako=l(),KM=a("p"),Lko=o("This class cannot be instantiated directly using "),Wne=a("code"),Bko=o("__init__()"),xko=o(" (throws an error)."),kko=l(),Ur=a("div"),f(ZM.$$.fragment),Rko=l(),Qne=a("p"),Sko=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Pko=l(),Cd=a("p"),$ko=o(`Note:
Loading a model from its configuration file does `),Hne=a("strong"),Iko=o("not"),jko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Une=a("code"),Nko=o("from_pretrained()"),Dko=o("to load the model weights."),qko=l(),Jne=a("p"),Gko=o("Examples:"),Oko=l(),f(eE.$$.fragment),Xko=l(),ze=a("div"),f(oE.$$.fragment),zko=l(),Yne=a("p"),Vko=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Wko=l(),Ua=a("p"),Qko=o("The model class to instantiate is selected based on the "),Kne=a("code"),Hko=o("model_type"),Uko=o(` property of the config object (either
passed as an argument or loaded from `),Zne=a("code"),Jko=o("pretrained_model_name_or_path"),Yko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ese=a("code"),Kko=o("pretrained_model_name_or_path"),Zko=o(":"),eRo=l(),Md=a("ul"),u2=a("li"),ose=a("strong"),oRo=o("unispeech-sat"),rRo=o(" \u2014 "),uj=a("a"),tRo=o("UniSpeechSatForAudioFrameClassification"),aRo=o(" (UniSpeechSat model)"),nRo=l(),b2=a("li"),rse=a("strong"),sRo=o("wav2vec2"),lRo=o(" \u2014 "),bj=a("a"),iRo=o("Wav2Vec2ForAudioFrameClassification"),dRo=o(" (Wav2Vec2 model)"),cRo=l(),v2=a("li"),tse=a("strong"),fRo=o("wavlm"),mRo=o(" \u2014 "),vj=a("a"),gRo=o("WavLMForAudioFrameClassification"),hRo=o(" (WavLM model)"),pRo=l(),T2=a("p"),_Ro=o("The model is set in evaluation mode by default using "),ase=a("code"),uRo=o("model.eval()"),bRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nse=a("code"),vRo=o("model.train()"),TRo=l(),sse=a("p"),FRo=o("Examples:"),CRo=l(),f(rE.$$.fragment),a0e=l(),Ed=a("h2"),F2=a("a"),lse=a("span"),f(tE.$$.fragment),MRo=l(),ise=a("span"),ERo=o("AutoModelForCTC"),n0e=l(),ar=a("div"),f(aE.$$.fragment),yRo=l(),yd=a("p"),wRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dse=a("code"),ARo=o("from_pretrained()"),LRo=o("class method or the "),cse=a("code"),BRo=o("from_config()"),xRo=o(`class
method.`),kRo=l(),nE=a("p"),RRo=o("This class cannot be instantiated directly using "),fse=a("code"),SRo=o("__init__()"),PRo=o(" (throws an error)."),$Ro=l(),Jr=a("div"),f(sE.$$.fragment),IRo=l(),mse=a("p"),jRo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NRo=l(),wd=a("p"),DRo=o(`Note:
Loading a model from its configuration file does `),gse=a("strong"),qRo=o("not"),GRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hse=a("code"),ORo=o("from_pretrained()"),XRo=o("to load the model weights."),zRo=l(),pse=a("p"),VRo=o("Examples:"),WRo=l(),f(lE.$$.fragment),QRo=l(),Ve=a("div"),f(iE.$$.fragment),HRo=l(),_se=a("p"),URo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),JRo=l(),Ja=a("p"),YRo=o("The model class to instantiate is selected based on the "),use=a("code"),KRo=o("model_type"),ZRo=o(` property of the config object (either
passed as an argument or loaded from `),bse=a("code"),eSo=o("pretrained_model_name_or_path"),oSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=a("code"),rSo=o("pretrained_model_name_or_path"),tSo=o(":"),aSo=l(),to=a("ul"),C2=a("li"),Tse=a("strong"),nSo=o("hubert"),sSo=o(" \u2014 "),Tj=a("a"),lSo=o("HubertForCTC"),iSo=o(" (Hubert model)"),dSo=l(),M2=a("li"),Fse=a("strong"),cSo=o("sew"),fSo=o(" \u2014 "),Fj=a("a"),mSo=o("SEWForCTC"),gSo=o(" (SEW model)"),hSo=l(),E2=a("li"),Cse=a("strong"),pSo=o("sew-d"),_So=o(" \u2014 "),Cj=a("a"),uSo=o("SEWDForCTC"),bSo=o(" (SEW-D model)"),vSo=l(),y2=a("li"),Mse=a("strong"),TSo=o("unispeech"),FSo=o(" \u2014 "),Mj=a("a"),CSo=o("UniSpeechForCTC"),MSo=o(" (UniSpeech model)"),ESo=l(),w2=a("li"),Ese=a("strong"),ySo=o("unispeech-sat"),wSo=o(" \u2014 "),Ej=a("a"),ASo=o("UniSpeechSatForCTC"),LSo=o(" (UniSpeechSat model)"),BSo=l(),A2=a("li"),yse=a("strong"),xSo=o("wav2vec2"),kSo=o(" \u2014 "),yj=a("a"),RSo=o("Wav2Vec2ForCTC"),SSo=o(" (Wav2Vec2 model)"),PSo=l(),L2=a("li"),wse=a("strong"),$So=o("wavlm"),ISo=o(" \u2014 "),wj=a("a"),jSo=o("WavLMForCTC"),NSo=o(" (WavLM model)"),DSo=l(),B2=a("p"),qSo=o("The model is set in evaluation mode by default using "),Ase=a("code"),GSo=o("model.eval()"),OSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=a("code"),XSo=o("model.train()"),zSo=l(),Bse=a("p"),VSo=o("Examples:"),WSo=l(),f(dE.$$.fragment),s0e=l(),Ad=a("h2"),x2=a("a"),xse=a("span"),f(cE.$$.fragment),QSo=l(),kse=a("span"),HSo=o("AutoModelForSpeechSeq2Seq"),l0e=l(),nr=a("div"),f(fE.$$.fragment),USo=l(),Ld=a("p"),JSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rse=a("code"),YSo=o("from_pretrained()"),KSo=o("class method or the "),Sse=a("code"),ZSo=o("from_config()"),ePo=o(`class
method.`),oPo=l(),mE=a("p"),rPo=o("This class cannot be instantiated directly using "),Pse=a("code"),tPo=o("__init__()"),aPo=o(" (throws an error)."),nPo=l(),Yr=a("div"),f(gE.$$.fragment),sPo=l(),$se=a("p"),lPo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iPo=l(),Bd=a("p"),dPo=o(`Note:
Loading a model from its configuration file does `),Ise=a("strong"),cPo=o("not"),fPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jse=a("code"),mPo=o("from_pretrained()"),gPo=o("to load the model weights."),hPo=l(),Nse=a("p"),pPo=o("Examples:"),_Po=l(),f(hE.$$.fragment),uPo=l(),We=a("div"),f(pE.$$.fragment),bPo=l(),Dse=a("p"),vPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TPo=l(),Ya=a("p"),FPo=o("The model class to instantiate is selected based on the "),qse=a("code"),CPo=o("model_type"),MPo=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),EPo=o("pretrained_model_name_or_path"),yPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=a("code"),wPo=o("pretrained_model_name_or_path"),APo=o(":"),LPo=l(),_E=a("ul"),k2=a("li"),Xse=a("strong"),BPo=o("speech-encoder-decoder"),xPo=o(" \u2014 "),Aj=a("a"),kPo=o("SpeechEncoderDecoderModel"),RPo=o(" (Speech Encoder decoder model)"),SPo=l(),R2=a("li"),zse=a("strong"),PPo=o("speech_to_text"),$Po=o(" \u2014 "),Lj=a("a"),IPo=o("Speech2TextForConditionalGeneration"),jPo=o(" (Speech2Text model)"),NPo=l(),S2=a("p"),DPo=o("The model is set in evaluation mode by default using "),Vse=a("code"),qPo=o("model.eval()"),GPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=a("code"),OPo=o("model.train()"),XPo=l(),Qse=a("p"),zPo=o("Examples:"),VPo=l(),f(uE.$$.fragment),i0e=l(),xd=a("h2"),P2=a("a"),Hse=a("span"),f(bE.$$.fragment),WPo=l(),Use=a("span"),QPo=o("AutoModelForAudioXVector"),d0e=l(),sr=a("div"),f(vE.$$.fragment),HPo=l(),kd=a("p"),UPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jse=a("code"),JPo=o("from_pretrained()"),YPo=o("class method or the "),Yse=a("code"),KPo=o("from_config()"),ZPo=o(`class
method.`),e$o=l(),TE=a("p"),o$o=o("This class cannot be instantiated directly using "),Kse=a("code"),r$o=o("__init__()"),t$o=o(" (throws an error)."),a$o=l(),Kr=a("div"),f(FE.$$.fragment),n$o=l(),Zse=a("p"),s$o=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),l$o=l(),Rd=a("p"),i$o=o(`Note:
Loading a model from its configuration file does `),ele=a("strong"),d$o=o("not"),c$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=a("code"),f$o=o("from_pretrained()"),m$o=o("to load the model weights."),g$o=l(),rle=a("p"),h$o=o("Examples:"),p$o=l(),f(CE.$$.fragment),_$o=l(),Qe=a("div"),f(ME.$$.fragment),u$o=l(),tle=a("p"),b$o=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),v$o=l(),Ka=a("p"),T$o=o("The model class to instantiate is selected based on the "),ale=a("code"),F$o=o("model_type"),C$o=o(` property of the config object (either
passed as an argument or loaded from `),nle=a("code"),M$o=o("pretrained_model_name_or_path"),E$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=a("code"),y$o=o("pretrained_model_name_or_path"),w$o=o(":"),A$o=l(),Sd=a("ul"),$2=a("li"),lle=a("strong"),L$o=o("unispeech-sat"),B$o=o(" \u2014 "),Bj=a("a"),x$o=o("UniSpeechSatForXVector"),k$o=o(" (UniSpeechSat model)"),R$o=l(),I2=a("li"),ile=a("strong"),S$o=o("wav2vec2"),P$o=o(" \u2014 "),xj=a("a"),$$o=o("Wav2Vec2ForXVector"),I$o=o(" (Wav2Vec2 model)"),j$o=l(),j2=a("li"),dle=a("strong"),N$o=o("wavlm"),D$o=o(" \u2014 "),kj=a("a"),q$o=o("WavLMForXVector"),G$o=o(" (WavLM model)"),O$o=l(),N2=a("p"),X$o=o("The model is set in evaluation mode by default using "),cle=a("code"),z$o=o("model.eval()"),V$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=a("code"),W$o=o("model.train()"),Q$o=l(),mle=a("p"),H$o=o("Examples:"),U$o=l(),f(EE.$$.fragment),c0e=l(),Pd=a("h2"),D2=a("a"),gle=a("span"),f(yE.$$.fragment),J$o=l(),hle=a("span"),Y$o=o("AutoModelForObjectDetection"),f0e=l(),lr=a("div"),f(wE.$$.fragment),K$o=l(),$d=a("p"),Z$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ple=a("code"),eIo=o("from_pretrained()"),oIo=o("class method or the "),_le=a("code"),rIo=o("from_config()"),tIo=o(`class
method.`),aIo=l(),AE=a("p"),nIo=o("This class cannot be instantiated directly using "),ule=a("code"),sIo=o("__init__()"),lIo=o(" (throws an error)."),iIo=l(),Zr=a("div"),f(LE.$$.fragment),dIo=l(),ble=a("p"),cIo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fIo=l(),Id=a("p"),mIo=o(`Note:
Loading a model from its configuration file does `),vle=a("strong"),gIo=o("not"),hIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=a("code"),pIo=o("from_pretrained()"),_Io=o("to load the model weights."),uIo=l(),Fle=a("p"),bIo=o("Examples:"),vIo=l(),f(BE.$$.fragment),TIo=l(),He=a("div"),f(xE.$$.fragment),FIo=l(),Cle=a("p"),CIo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),MIo=l(),Za=a("p"),EIo=o("The model class to instantiate is selected based on the "),Mle=a("code"),yIo=o("model_type"),wIo=o(` property of the config object (either
passed as an argument or loaded from `),Ele=a("code"),AIo=o("pretrained_model_name_or_path"),LIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=a("code"),BIo=o("pretrained_model_name_or_path"),xIo=o(":"),kIo=l(),wle=a("ul"),q2=a("li"),Ale=a("strong"),RIo=o("detr"),SIo=o(" \u2014 "),Rj=a("a"),PIo=o("DetrForObjectDetection"),$Io=o(" (DETR model)"),IIo=l(),G2=a("p"),jIo=o("The model is set in evaluation mode by default using "),Lle=a("code"),NIo=o("model.eval()"),DIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),qIo=o("model.train()"),GIo=l(),xle=a("p"),OIo=o("Examples:"),XIo=l(),f(kE.$$.fragment),m0e=l(),jd=a("h2"),O2=a("a"),kle=a("span"),f(RE.$$.fragment),zIo=l(),Rle=a("span"),VIo=o("AutoModelForImageSegmentation"),g0e=l(),ir=a("div"),f(SE.$$.fragment),WIo=l(),Nd=a("p"),QIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Sle=a("code"),HIo=o("from_pretrained()"),UIo=o("class method or the "),Ple=a("code"),JIo=o("from_config()"),YIo=o(`class
method.`),KIo=l(),PE=a("p"),ZIo=o("This class cannot be instantiated directly using "),$le=a("code"),ejo=o("__init__()"),ojo=o(" (throws an error)."),rjo=l(),et=a("div"),f($E.$$.fragment),tjo=l(),Ile=a("p"),ajo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),njo=l(),Dd=a("p"),sjo=o(`Note:
Loading a model from its configuration file does `),jle=a("strong"),ljo=o("not"),ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nle=a("code"),djo=o("from_pretrained()"),cjo=o("to load the model weights."),fjo=l(),Dle=a("p"),mjo=o("Examples:"),gjo=l(),f(IE.$$.fragment),hjo=l(),Ue=a("div"),f(jE.$$.fragment),pjo=l(),qle=a("p"),_jo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ujo=l(),en=a("p"),bjo=o("The model class to instantiate is selected based on the "),Gle=a("code"),vjo=o("model_type"),Tjo=o(` property of the config object (either
passed as an argument or loaded from `),Ole=a("code"),Fjo=o("pretrained_model_name_or_path"),Cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=a("code"),Mjo=o("pretrained_model_name_or_path"),Ejo=o(":"),yjo=l(),zle=a("ul"),X2=a("li"),Vle=a("strong"),wjo=o("detr"),Ajo=o(" \u2014 "),Sj=a("a"),Ljo=o("DetrForSegmentation"),Bjo=o(" (DETR model)"),xjo=l(),z2=a("p"),kjo=o("The model is set in evaluation mode by default using "),Wle=a("code"),Rjo=o("model.eval()"),Sjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=a("code"),Pjo=o("model.train()"),$jo=l(),Hle=a("p"),Ijo=o("Examples:"),jjo=l(),f(NE.$$.fragment),h0e=l(),qd=a("h2"),V2=a("a"),Ule=a("span"),f(DE.$$.fragment),Njo=l(),Jle=a("span"),Djo=o("AutoModelForSemanticSegmentation"),p0e=l(),dr=a("div"),f(qE.$$.fragment),qjo=l(),Gd=a("p"),Gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Yle=a("code"),Ojo=o("from_pretrained()"),Xjo=o("class method or the "),Kle=a("code"),zjo=o("from_config()"),Vjo=o(`class
method.`),Wjo=l(),GE=a("p"),Qjo=o("This class cannot be instantiated directly using "),Zle=a("code"),Hjo=o("__init__()"),Ujo=o(" (throws an error)."),Jjo=l(),ot=a("div"),f(OE.$$.fragment),Yjo=l(),eie=a("p"),Kjo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Zjo=l(),Od=a("p"),eNo=o(`Note:
Loading a model from its configuration file does `),oie=a("strong"),oNo=o("not"),rNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rie=a("code"),tNo=o("from_pretrained()"),aNo=o("to load the model weights."),nNo=l(),tie=a("p"),sNo=o("Examples:"),lNo=l(),f(XE.$$.fragment),iNo=l(),Je=a("div"),f(zE.$$.fragment),dNo=l(),aie=a("p"),cNo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fNo=l(),on=a("p"),mNo=o("The model class to instantiate is selected based on the "),nie=a("code"),gNo=o("model_type"),hNo=o(` property of the config object (either
passed as an argument or loaded from `),sie=a("code"),pNo=o("pretrained_model_name_or_path"),_No=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=a("code"),uNo=o("pretrained_model_name_or_path"),bNo=o(":"),vNo=l(),VE=a("ul"),W2=a("li"),iie=a("strong"),TNo=o("beit"),FNo=o(" \u2014 "),Pj=a("a"),CNo=o("BeitForSemanticSegmentation"),MNo=o(" (BEiT model)"),ENo=l(),Q2=a("li"),die=a("strong"),yNo=o("segformer"),wNo=o(" \u2014 "),$j=a("a"),ANo=o("SegformerForSemanticSegmentation"),LNo=o(" (SegFormer model)"),BNo=l(),H2=a("p"),xNo=o("The model is set in evaluation mode by default using "),cie=a("code"),kNo=o("model.eval()"),RNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=a("code"),SNo=o("model.train()"),PNo=l(),mie=a("p"),$No=o("Examples:"),INo=l(),f(WE.$$.fragment),_0e=l(),Xd=a("h2"),U2=a("a"),gie=a("span"),f(QE.$$.fragment),jNo=l(),hie=a("span"),NNo=o("TFAutoModel"),u0e=l(),cr=a("div"),f(HE.$$.fragment),DNo=l(),zd=a("p"),qNo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pie=a("code"),GNo=o("from_pretrained()"),ONo=o("class method or the "),_ie=a("code"),XNo=o("from_config()"),zNo=o(`class
method.`),VNo=l(),UE=a("p"),WNo=o("This class cannot be instantiated directly using "),uie=a("code"),QNo=o("__init__()"),HNo=o(" (throws an error)."),UNo=l(),rt=a("div"),f(JE.$$.fragment),JNo=l(),bie=a("p"),YNo=o("Instantiates one of the base model classes of the library from a configuration."),KNo=l(),Vd=a("p"),ZNo=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),eDo=o("not"),oDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tie=a("code"),rDo=o("from_pretrained()"),tDo=o("to load the model weights."),aDo=l(),Fie=a("p"),nDo=o("Examples:"),sDo=l(),f(YE.$$.fragment),lDo=l(),fo=a("div"),f(KE.$$.fragment),iDo=l(),Cie=a("p"),dDo=o("Instantiate one of the base model classes of the library from a pretrained model."),cDo=l(),rn=a("p"),fDo=o("The model class to instantiate is selected based on the "),Mie=a("code"),mDo=o("model_type"),gDo=o(` property of the config object (either
passed as an argument or loaded from `),Eie=a("code"),hDo=o("pretrained_model_name_or_path"),pDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),_Do=o("pretrained_model_name_or_path"),uDo=o(":"),bDo=l(),B=a("ul"),J2=a("li"),wie=a("strong"),vDo=o("albert"),TDo=o(" \u2014 "),Ij=a("a"),FDo=o("TFAlbertModel"),CDo=o(" (ALBERT model)"),MDo=l(),Y2=a("li"),Aie=a("strong"),EDo=o("bart"),yDo=o(" \u2014 "),jj=a("a"),wDo=o("TFBartModel"),ADo=o(" (BART model)"),LDo=l(),K2=a("li"),Lie=a("strong"),BDo=o("bert"),xDo=o(" \u2014 "),Nj=a("a"),kDo=o("TFBertModel"),RDo=o(" (BERT model)"),SDo=l(),Z2=a("li"),Bie=a("strong"),PDo=o("blenderbot"),$Do=o(" \u2014 "),Dj=a("a"),IDo=o("TFBlenderbotModel"),jDo=o(" (Blenderbot model)"),NDo=l(),ev=a("li"),xie=a("strong"),DDo=o("blenderbot-small"),qDo=o(" \u2014 "),qj=a("a"),GDo=o("TFBlenderbotSmallModel"),ODo=o(" (BlenderbotSmall model)"),XDo=l(),ov=a("li"),kie=a("strong"),zDo=o("camembert"),VDo=o(" \u2014 "),Gj=a("a"),WDo=o("TFCamembertModel"),QDo=o(" (CamemBERT model)"),HDo=l(),rv=a("li"),Rie=a("strong"),UDo=o("clip"),JDo=o(" \u2014 "),Oj=a("a"),YDo=o("TFCLIPModel"),KDo=o(" (CLIP model)"),ZDo=l(),tv=a("li"),Sie=a("strong"),eqo=o("convbert"),oqo=o(" \u2014 "),Xj=a("a"),rqo=o("TFConvBertModel"),tqo=o(" (ConvBERT model)"),aqo=l(),av=a("li"),Pie=a("strong"),nqo=o("ctrl"),sqo=o(" \u2014 "),zj=a("a"),lqo=o("TFCTRLModel"),iqo=o(" (CTRL model)"),dqo=l(),nv=a("li"),$ie=a("strong"),cqo=o("deberta"),fqo=o(" \u2014 "),Vj=a("a"),mqo=o("TFDebertaModel"),gqo=o(" (DeBERTa model)"),hqo=l(),sv=a("li"),Iie=a("strong"),pqo=o("deberta-v2"),_qo=o(" \u2014 "),Wj=a("a"),uqo=o("TFDebertaV2Model"),bqo=o(" (DeBERTa-v2 model)"),vqo=l(),lv=a("li"),jie=a("strong"),Tqo=o("distilbert"),Fqo=o(" \u2014 "),Qj=a("a"),Cqo=o("TFDistilBertModel"),Mqo=o(" (DistilBERT model)"),Eqo=l(),iv=a("li"),Nie=a("strong"),yqo=o("dpr"),wqo=o(" \u2014 "),Hj=a("a"),Aqo=o("TFDPRQuestionEncoder"),Lqo=o(" (DPR model)"),Bqo=l(),dv=a("li"),Die=a("strong"),xqo=o("electra"),kqo=o(" \u2014 "),Uj=a("a"),Rqo=o("TFElectraModel"),Sqo=o(" (ELECTRA model)"),Pqo=l(),cv=a("li"),qie=a("strong"),$qo=o("flaubert"),Iqo=o(" \u2014 "),Jj=a("a"),jqo=o("TFFlaubertModel"),Nqo=o(" (FlauBERT model)"),Dqo=l(),Ls=a("li"),Gie=a("strong"),qqo=o("funnel"),Gqo=o(" \u2014 "),Yj=a("a"),Oqo=o("TFFunnelModel"),Xqo=o(" or "),Kj=a("a"),zqo=o("TFFunnelBaseModel"),Vqo=o(" (Funnel Transformer model)"),Wqo=l(),fv=a("li"),Oie=a("strong"),Qqo=o("gpt2"),Hqo=o(" \u2014 "),Zj=a("a"),Uqo=o("TFGPT2Model"),Jqo=o(" (OpenAI GPT-2 model)"),Yqo=l(),mv=a("li"),Xie=a("strong"),Kqo=o("hubert"),Zqo=o(" \u2014 "),eN=a("a"),eGo=o("TFHubertModel"),oGo=o(" (Hubert model)"),rGo=l(),gv=a("li"),zie=a("strong"),tGo=o("layoutlm"),aGo=o(" \u2014 "),oN=a("a"),nGo=o("TFLayoutLMModel"),sGo=o(" (LayoutLM model)"),lGo=l(),hv=a("li"),Vie=a("strong"),iGo=o("led"),dGo=o(" \u2014 "),rN=a("a"),cGo=o("TFLEDModel"),fGo=o(" (LED model)"),mGo=l(),pv=a("li"),Wie=a("strong"),gGo=o("longformer"),hGo=o(" \u2014 "),tN=a("a"),pGo=o("TFLongformerModel"),_Go=o(" (Longformer model)"),uGo=l(),_v=a("li"),Qie=a("strong"),bGo=o("lxmert"),vGo=o(" \u2014 "),aN=a("a"),TGo=o("TFLxmertModel"),FGo=o(" (LXMERT model)"),CGo=l(),uv=a("li"),Hie=a("strong"),MGo=o("marian"),EGo=o(" \u2014 "),nN=a("a"),yGo=o("TFMarianModel"),wGo=o(" (Marian model)"),AGo=l(),bv=a("li"),Uie=a("strong"),LGo=o("mbart"),BGo=o(" \u2014 "),sN=a("a"),xGo=o("TFMBartModel"),kGo=o(" (mBART model)"),RGo=l(),vv=a("li"),Jie=a("strong"),SGo=o("mobilebert"),PGo=o(" \u2014 "),lN=a("a"),$Go=o("TFMobileBertModel"),IGo=o(" (MobileBERT model)"),jGo=l(),Tv=a("li"),Yie=a("strong"),NGo=o("mpnet"),DGo=o(" \u2014 "),iN=a("a"),qGo=o("TFMPNetModel"),GGo=o(" (MPNet model)"),OGo=l(),Fv=a("li"),Kie=a("strong"),XGo=o("mt5"),zGo=o(" \u2014 "),dN=a("a"),VGo=o("TFMT5Model"),WGo=o(" (mT5 model)"),QGo=l(),Cv=a("li"),Zie=a("strong"),HGo=o("openai-gpt"),UGo=o(" \u2014 "),cN=a("a"),JGo=o("TFOpenAIGPTModel"),YGo=o(" (OpenAI GPT model)"),KGo=l(),Mv=a("li"),ede=a("strong"),ZGo=o("pegasus"),eOo=o(" \u2014 "),fN=a("a"),oOo=o("TFPegasusModel"),rOo=o(" (Pegasus model)"),tOo=l(),Ev=a("li"),ode=a("strong"),aOo=o("rembert"),nOo=o(" \u2014 "),mN=a("a"),sOo=o("TFRemBertModel"),lOo=o(" (RemBERT model)"),iOo=l(),yv=a("li"),rde=a("strong"),dOo=o("roberta"),cOo=o(" \u2014 "),gN=a("a"),fOo=o("TFRobertaModel"),mOo=o(" (RoBERTa model)"),gOo=l(),wv=a("li"),tde=a("strong"),hOo=o("roformer"),pOo=o(" \u2014 "),hN=a("a"),_Oo=o("TFRoFormerModel"),uOo=o(" (RoFormer model)"),bOo=l(),Av=a("li"),ade=a("strong"),vOo=o("speech_to_text"),TOo=o(" \u2014 "),pN=a("a"),FOo=o("TFSpeech2TextModel"),COo=o(" (Speech2Text model)"),MOo=l(),Lv=a("li"),nde=a("strong"),EOo=o("t5"),yOo=o(" \u2014 "),_N=a("a"),wOo=o("TFT5Model"),AOo=o(" (T5 model)"),LOo=l(),Bv=a("li"),sde=a("strong"),BOo=o("tapas"),xOo=o(" \u2014 "),uN=a("a"),kOo=o("TFTapasModel"),ROo=o(" (TAPAS model)"),SOo=l(),xv=a("li"),lde=a("strong"),POo=o("transfo-xl"),$Oo=o(" \u2014 "),bN=a("a"),IOo=o("TFTransfoXLModel"),jOo=o(" (Transformer-XL model)"),NOo=l(),kv=a("li"),ide=a("strong"),DOo=o("vit"),qOo=o(" \u2014 "),vN=a("a"),GOo=o("TFViTModel"),OOo=o(" (ViT model)"),XOo=l(),Rv=a("li"),dde=a("strong"),zOo=o("wav2vec2"),VOo=o(" \u2014 "),TN=a("a"),WOo=o("TFWav2Vec2Model"),QOo=o(" (Wav2Vec2 model)"),HOo=l(),Sv=a("li"),cde=a("strong"),UOo=o("xlm"),JOo=o(" \u2014 "),FN=a("a"),YOo=o("TFXLMModel"),KOo=o(" (XLM model)"),ZOo=l(),Pv=a("li"),fde=a("strong"),eXo=o("xlm-roberta"),oXo=o(" \u2014 "),CN=a("a"),rXo=o("TFXLMRobertaModel"),tXo=o(" (XLM-RoBERTa model)"),aXo=l(),$v=a("li"),mde=a("strong"),nXo=o("xlnet"),sXo=o(" \u2014 "),MN=a("a"),lXo=o("TFXLNetModel"),iXo=o(" (XLNet model)"),dXo=l(),gde=a("p"),cXo=o("Examples:"),fXo=l(),f(ZE.$$.fragment),b0e=l(),Wd=a("h2"),Iv=a("a"),hde=a("span"),f(e3.$$.fragment),mXo=l(),pde=a("span"),gXo=o("TFAutoModelForPreTraining"),v0e=l(),fr=a("div"),f(o3.$$.fragment),hXo=l(),Qd=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_de=a("code"),_Xo=o("from_pretrained()"),uXo=o("class method or the "),ude=a("code"),bXo=o("from_config()"),vXo=o(`class
method.`),TXo=l(),r3=a("p"),FXo=o("This class cannot be instantiated directly using "),bde=a("code"),CXo=o("__init__()"),MXo=o(" (throws an error)."),EXo=l(),tt=a("div"),f(t3.$$.fragment),yXo=l(),vde=a("p"),wXo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),AXo=l(),Hd=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),Tde=a("strong"),BXo=o("not"),xXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fde=a("code"),kXo=o("from_pretrained()"),RXo=o("to load the model weights."),SXo=l(),Cde=a("p"),PXo=o("Examples:"),$Xo=l(),f(a3.$$.fragment),IXo=l(),mo=a("div"),f(n3.$$.fragment),jXo=l(),Mde=a("p"),NXo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DXo=l(),tn=a("p"),qXo=o("The model class to instantiate is selected based on the "),Ede=a("code"),GXo=o("model_type"),OXo=o(` property of the config object (either
passed as an argument or loaded from `),yde=a("code"),XXo=o("pretrained_model_name_or_path"),zXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=a("code"),VXo=o("pretrained_model_name_or_path"),WXo=o(":"),QXo=l(),H=a("ul"),jv=a("li"),Ade=a("strong"),HXo=o("albert"),UXo=o(" \u2014 "),EN=a("a"),JXo=o("TFAlbertForPreTraining"),YXo=o(" (ALBERT model)"),KXo=l(),Nv=a("li"),Lde=a("strong"),ZXo=o("bart"),ezo=o(" \u2014 "),yN=a("a"),ozo=o("TFBartForConditionalGeneration"),rzo=o(" (BART model)"),tzo=l(),Dv=a("li"),Bde=a("strong"),azo=o("bert"),nzo=o(" \u2014 "),wN=a("a"),szo=o("TFBertForPreTraining"),lzo=o(" (BERT model)"),izo=l(),qv=a("li"),xde=a("strong"),dzo=o("camembert"),czo=o(" \u2014 "),AN=a("a"),fzo=o("TFCamembertForMaskedLM"),mzo=o(" (CamemBERT model)"),gzo=l(),Gv=a("li"),kde=a("strong"),hzo=o("ctrl"),pzo=o(" \u2014 "),LN=a("a"),_zo=o("TFCTRLLMHeadModel"),uzo=o(" (CTRL model)"),bzo=l(),Ov=a("li"),Rde=a("strong"),vzo=o("distilbert"),Tzo=o(" \u2014 "),BN=a("a"),Fzo=o("TFDistilBertForMaskedLM"),Czo=o(" (DistilBERT model)"),Mzo=l(),Xv=a("li"),Sde=a("strong"),Ezo=o("electra"),yzo=o(" \u2014 "),xN=a("a"),wzo=o("TFElectraForPreTraining"),Azo=o(" (ELECTRA model)"),Lzo=l(),zv=a("li"),Pde=a("strong"),Bzo=o("flaubert"),xzo=o(" \u2014 "),kN=a("a"),kzo=o("TFFlaubertWithLMHeadModel"),Rzo=o(" (FlauBERT model)"),Szo=l(),Vv=a("li"),$de=a("strong"),Pzo=o("funnel"),$zo=o(" \u2014 "),RN=a("a"),Izo=o("TFFunnelForPreTraining"),jzo=o(" (Funnel Transformer model)"),Nzo=l(),Wv=a("li"),Ide=a("strong"),Dzo=o("gpt2"),qzo=o(" \u2014 "),SN=a("a"),Gzo=o("TFGPT2LMHeadModel"),Ozo=o(" (OpenAI GPT-2 model)"),Xzo=l(),Qv=a("li"),jde=a("strong"),zzo=o("layoutlm"),Vzo=o(" \u2014 "),PN=a("a"),Wzo=o("TFLayoutLMForMaskedLM"),Qzo=o(" (LayoutLM model)"),Hzo=l(),Hv=a("li"),Nde=a("strong"),Uzo=o("lxmert"),Jzo=o(" \u2014 "),$N=a("a"),Yzo=o("TFLxmertForPreTraining"),Kzo=o(" (LXMERT model)"),Zzo=l(),Uv=a("li"),Dde=a("strong"),eVo=o("mobilebert"),oVo=o(" \u2014 "),IN=a("a"),rVo=o("TFMobileBertForPreTraining"),tVo=o(" (MobileBERT model)"),aVo=l(),Jv=a("li"),qde=a("strong"),nVo=o("mpnet"),sVo=o(" \u2014 "),jN=a("a"),lVo=o("TFMPNetForMaskedLM"),iVo=o(" (MPNet model)"),dVo=l(),Yv=a("li"),Gde=a("strong"),cVo=o("openai-gpt"),fVo=o(" \u2014 "),NN=a("a"),mVo=o("TFOpenAIGPTLMHeadModel"),gVo=o(" (OpenAI GPT model)"),hVo=l(),Kv=a("li"),Ode=a("strong"),pVo=o("roberta"),_Vo=o(" \u2014 "),DN=a("a"),uVo=o("TFRobertaForMaskedLM"),bVo=o(" (RoBERTa model)"),vVo=l(),Zv=a("li"),Xde=a("strong"),TVo=o("t5"),FVo=o(" \u2014 "),qN=a("a"),CVo=o("TFT5ForConditionalGeneration"),MVo=o(" (T5 model)"),EVo=l(),e6=a("li"),zde=a("strong"),yVo=o("tapas"),wVo=o(" \u2014 "),GN=a("a"),AVo=o("TFTapasForMaskedLM"),LVo=o(" (TAPAS model)"),BVo=l(),o6=a("li"),Vde=a("strong"),xVo=o("transfo-xl"),kVo=o(" \u2014 "),ON=a("a"),RVo=o("TFTransfoXLLMHeadModel"),SVo=o(" (Transformer-XL model)"),PVo=l(),r6=a("li"),Wde=a("strong"),$Vo=o("xlm"),IVo=o(" \u2014 "),XN=a("a"),jVo=o("TFXLMWithLMHeadModel"),NVo=o(" (XLM model)"),DVo=l(),t6=a("li"),Qde=a("strong"),qVo=o("xlm-roberta"),GVo=o(" \u2014 "),zN=a("a"),OVo=o("TFXLMRobertaForMaskedLM"),XVo=o(" (XLM-RoBERTa model)"),zVo=l(),a6=a("li"),Hde=a("strong"),VVo=o("xlnet"),WVo=o(" \u2014 "),VN=a("a"),QVo=o("TFXLNetLMHeadModel"),HVo=o(" (XLNet model)"),UVo=l(),Ude=a("p"),JVo=o("Examples:"),YVo=l(),f(s3.$$.fragment),T0e=l(),Ud=a("h2"),n6=a("a"),Jde=a("span"),f(l3.$$.fragment),KVo=l(),Yde=a("span"),ZVo=o("TFAutoModelForCausalLM"),F0e=l(),mr=a("div"),f(i3.$$.fragment),eWo=l(),Jd=a("p"),oWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Kde=a("code"),rWo=o("from_pretrained()"),tWo=o("class method or the "),Zde=a("code"),aWo=o("from_config()"),nWo=o(`class
method.`),sWo=l(),d3=a("p"),lWo=o("This class cannot be instantiated directly using "),ece=a("code"),iWo=o("__init__()"),dWo=o(" (throws an error)."),cWo=l(),at=a("div"),f(c3.$$.fragment),fWo=l(),oce=a("p"),mWo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gWo=l(),Yd=a("p"),hWo=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),pWo=o("not"),_Wo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tce=a("code"),uWo=o("from_pretrained()"),bWo=o("to load the model weights."),vWo=l(),ace=a("p"),TWo=o("Examples:"),FWo=l(),f(f3.$$.fragment),CWo=l(),go=a("div"),f(m3.$$.fragment),MWo=l(),nce=a("p"),EWo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yWo=l(),an=a("p"),wWo=o("The model class to instantiate is selected based on the "),sce=a("code"),AWo=o("model_type"),LWo=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),BWo=o("pretrained_model_name_or_path"),xWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),kWo=o("pretrained_model_name_or_path"),RWo=o(":"),SWo=l(),he=a("ul"),s6=a("li"),dce=a("strong"),PWo=o("bert"),$Wo=o(" \u2014 "),WN=a("a"),IWo=o("TFBertLMHeadModel"),jWo=o(" (BERT model)"),NWo=l(),l6=a("li"),cce=a("strong"),DWo=o("ctrl"),qWo=o(" \u2014 "),QN=a("a"),GWo=o("TFCTRLLMHeadModel"),OWo=o(" (CTRL model)"),XWo=l(),i6=a("li"),fce=a("strong"),zWo=o("gpt2"),VWo=o(" \u2014 "),HN=a("a"),WWo=o("TFGPT2LMHeadModel"),QWo=o(" (OpenAI GPT-2 model)"),HWo=l(),d6=a("li"),mce=a("strong"),UWo=o("openai-gpt"),JWo=o(" \u2014 "),UN=a("a"),YWo=o("TFOpenAIGPTLMHeadModel"),KWo=o(" (OpenAI GPT model)"),ZWo=l(),c6=a("li"),gce=a("strong"),eQo=o("rembert"),oQo=o(" \u2014 "),JN=a("a"),rQo=o("TFRemBertForCausalLM"),tQo=o(" (RemBERT model)"),aQo=l(),f6=a("li"),hce=a("strong"),nQo=o("roberta"),sQo=o(" \u2014 "),YN=a("a"),lQo=o("TFRobertaForCausalLM"),iQo=o(" (RoBERTa model)"),dQo=l(),m6=a("li"),pce=a("strong"),cQo=o("roformer"),fQo=o(" \u2014 "),KN=a("a"),mQo=o("TFRoFormerForCausalLM"),gQo=o(" (RoFormer model)"),hQo=l(),g6=a("li"),_ce=a("strong"),pQo=o("transfo-xl"),_Qo=o(" \u2014 "),ZN=a("a"),uQo=o("TFTransfoXLLMHeadModel"),bQo=o(" (Transformer-XL model)"),vQo=l(),h6=a("li"),uce=a("strong"),TQo=o("xlm"),FQo=o(" \u2014 "),eD=a("a"),CQo=o("TFXLMWithLMHeadModel"),MQo=o(" (XLM model)"),EQo=l(),p6=a("li"),bce=a("strong"),yQo=o("xlnet"),wQo=o(" \u2014 "),oD=a("a"),AQo=o("TFXLNetLMHeadModel"),LQo=o(" (XLNet model)"),BQo=l(),vce=a("p"),xQo=o("Examples:"),kQo=l(),f(g3.$$.fragment),C0e=l(),Kd=a("h2"),_6=a("a"),Tce=a("span"),f(h3.$$.fragment),RQo=l(),Fce=a("span"),SQo=o("TFAutoModelForImageClassification"),M0e=l(),gr=a("div"),f(p3.$$.fragment),PQo=l(),Zd=a("p"),$Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Cce=a("code"),IQo=o("from_pretrained()"),jQo=o("class method or the "),Mce=a("code"),NQo=o("from_config()"),DQo=o(`class
method.`),qQo=l(),_3=a("p"),GQo=o("This class cannot be instantiated directly using "),Ece=a("code"),OQo=o("__init__()"),XQo=o(" (throws an error)."),zQo=l(),nt=a("div"),f(u3.$$.fragment),VQo=l(),yce=a("p"),WQo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QQo=l(),ec=a("p"),HQo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),UQo=o("not"),JQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ace=a("code"),YQo=o("from_pretrained()"),KQo=o("to load the model weights."),ZQo=l(),Lce=a("p"),eHo=o("Examples:"),oHo=l(),f(b3.$$.fragment),rHo=l(),ho=a("div"),f(v3.$$.fragment),tHo=l(),Bce=a("p"),aHo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nHo=l(),nn=a("p"),sHo=o("The model class to instantiate is selected based on the "),xce=a("code"),lHo=o("model_type"),iHo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),dHo=o("pretrained_model_name_or_path"),cHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),fHo=o("pretrained_model_name_or_path"),mHo=o(":"),gHo=l(),Sce=a("ul"),u6=a("li"),Pce=a("strong"),hHo=o("vit"),pHo=o(" \u2014 "),rD=a("a"),_Ho=o("TFViTForImageClassification"),uHo=o(" (ViT model)"),bHo=l(),$ce=a("p"),vHo=o("Examples:"),THo=l(),f(T3.$$.fragment),E0e=l(),oc=a("h2"),b6=a("a"),Ice=a("span"),f(F3.$$.fragment),FHo=l(),jce=a("span"),CHo=o("TFAutoModelForMaskedLM"),y0e=l(),hr=a("div"),f(C3.$$.fragment),MHo=l(),rc=a("p"),EHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nce=a("code"),yHo=o("from_pretrained()"),wHo=o("class method or the "),Dce=a("code"),AHo=o("from_config()"),LHo=o(`class
method.`),BHo=l(),M3=a("p"),xHo=o("This class cannot be instantiated directly using "),qce=a("code"),kHo=o("__init__()"),RHo=o(" (throws an error)."),SHo=l(),st=a("div"),f(E3.$$.fragment),PHo=l(),Gce=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),IHo=l(),tc=a("p"),jHo=o(`Note:
Loading a model from its configuration file does `),Oce=a("strong"),NHo=o("not"),DHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xce=a("code"),qHo=o("from_pretrained()"),GHo=o("to load the model weights."),OHo=l(),zce=a("p"),XHo=o("Examples:"),zHo=l(),f(y3.$$.fragment),VHo=l(),po=a("div"),f(w3.$$.fragment),WHo=l(),Vce=a("p"),QHo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HHo=l(),sn=a("p"),UHo=o("The model class to instantiate is selected based on the "),Wce=a("code"),JHo=o("model_type"),YHo=o(` property of the config object (either
passed as an argument or loaded from `),Qce=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(":"),rUo=l(),Y=a("ul"),v6=a("li"),Uce=a("strong"),tUo=o("albert"),aUo=o(" \u2014 "),tD=a("a"),nUo=o("TFAlbertForMaskedLM"),sUo=o(" (ALBERT model)"),lUo=l(),T6=a("li"),Jce=a("strong"),iUo=o("bert"),dUo=o(" \u2014 "),aD=a("a"),cUo=o("TFBertForMaskedLM"),fUo=o(" (BERT model)"),mUo=l(),F6=a("li"),Yce=a("strong"),gUo=o("camembert"),hUo=o(" \u2014 "),nD=a("a"),pUo=o("TFCamembertForMaskedLM"),_Uo=o(" (CamemBERT model)"),uUo=l(),C6=a("li"),Kce=a("strong"),bUo=o("convbert"),vUo=o(" \u2014 "),sD=a("a"),TUo=o("TFConvBertForMaskedLM"),FUo=o(" (ConvBERT model)"),CUo=l(),M6=a("li"),Zce=a("strong"),MUo=o("deberta"),EUo=o(" \u2014 "),lD=a("a"),yUo=o("TFDebertaForMaskedLM"),wUo=o(" (DeBERTa model)"),AUo=l(),E6=a("li"),efe=a("strong"),LUo=o("deberta-v2"),BUo=o(" \u2014 "),iD=a("a"),xUo=o("TFDebertaV2ForMaskedLM"),kUo=o(" (DeBERTa-v2 model)"),RUo=l(),y6=a("li"),ofe=a("strong"),SUo=o("distilbert"),PUo=o(" \u2014 "),dD=a("a"),$Uo=o("TFDistilBertForMaskedLM"),IUo=o(" (DistilBERT model)"),jUo=l(),w6=a("li"),rfe=a("strong"),NUo=o("electra"),DUo=o(" \u2014 "),cD=a("a"),qUo=o("TFElectraForMaskedLM"),GUo=o(" (ELECTRA model)"),OUo=l(),A6=a("li"),tfe=a("strong"),XUo=o("flaubert"),zUo=o(" \u2014 "),fD=a("a"),VUo=o("TFFlaubertWithLMHeadModel"),WUo=o(" (FlauBERT model)"),QUo=l(),L6=a("li"),afe=a("strong"),HUo=o("funnel"),UUo=o(" \u2014 "),mD=a("a"),JUo=o("TFFunnelForMaskedLM"),YUo=o(" (Funnel Transformer model)"),KUo=l(),B6=a("li"),nfe=a("strong"),ZUo=o("layoutlm"),eJo=o(" \u2014 "),gD=a("a"),oJo=o("TFLayoutLMForMaskedLM"),rJo=o(" (LayoutLM model)"),tJo=l(),x6=a("li"),sfe=a("strong"),aJo=o("longformer"),nJo=o(" \u2014 "),hD=a("a"),sJo=o("TFLongformerForMaskedLM"),lJo=o(" (Longformer model)"),iJo=l(),k6=a("li"),lfe=a("strong"),dJo=o("mobilebert"),cJo=o(" \u2014 "),pD=a("a"),fJo=o("TFMobileBertForMaskedLM"),mJo=o(" (MobileBERT model)"),gJo=l(),R6=a("li"),ife=a("strong"),hJo=o("mpnet"),pJo=o(" \u2014 "),_D=a("a"),_Jo=o("TFMPNetForMaskedLM"),uJo=o(" (MPNet model)"),bJo=l(),S6=a("li"),dfe=a("strong"),vJo=o("rembert"),TJo=o(" \u2014 "),uD=a("a"),FJo=o("TFRemBertForMaskedLM"),CJo=o(" (RemBERT model)"),MJo=l(),P6=a("li"),cfe=a("strong"),EJo=o("roberta"),yJo=o(" \u2014 "),bD=a("a"),wJo=o("TFRobertaForMaskedLM"),AJo=o(" (RoBERTa model)"),LJo=l(),$6=a("li"),ffe=a("strong"),BJo=o("roformer"),xJo=o(" \u2014 "),vD=a("a"),kJo=o("TFRoFormerForMaskedLM"),RJo=o(" (RoFormer model)"),SJo=l(),I6=a("li"),mfe=a("strong"),PJo=o("tapas"),$Jo=o(" \u2014 "),TD=a("a"),IJo=o("TFTapasForMaskedLM"),jJo=o(" (TAPAS model)"),NJo=l(),j6=a("li"),gfe=a("strong"),DJo=o("xlm"),qJo=o(" \u2014 "),FD=a("a"),GJo=o("TFXLMWithLMHeadModel"),OJo=o(" (XLM model)"),XJo=l(),N6=a("li"),hfe=a("strong"),zJo=o("xlm-roberta"),VJo=o(" \u2014 "),CD=a("a"),WJo=o("TFXLMRobertaForMaskedLM"),QJo=o(" (XLM-RoBERTa model)"),HJo=l(),pfe=a("p"),UJo=o("Examples:"),JJo=l(),f(A3.$$.fragment),w0e=l(),ac=a("h2"),D6=a("a"),_fe=a("span"),f(L3.$$.fragment),YJo=l(),ufe=a("span"),KJo=o("TFAutoModelForSeq2SeqLM"),A0e=l(),pr=a("div"),f(B3.$$.fragment),ZJo=l(),nc=a("p"),eYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bfe=a("code"),oYo=o("from_pretrained()"),rYo=o("class method or the "),vfe=a("code"),tYo=o("from_config()"),aYo=o(`class
method.`),nYo=l(),x3=a("p"),sYo=o("This class cannot be instantiated directly using "),Tfe=a("code"),lYo=o("__init__()"),iYo=o(" (throws an error)."),dYo=l(),lt=a("div"),f(k3.$$.fragment),cYo=l(),Ffe=a("p"),fYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mYo=l(),sc=a("p"),gYo=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),hYo=o("not"),pYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mfe=a("code"),_Yo=o("from_pretrained()"),uYo=o("to load the model weights."),bYo=l(),Efe=a("p"),vYo=o("Examples:"),TYo=l(),f(R3.$$.fragment),FYo=l(),_o=a("div"),f(S3.$$.fragment),CYo=l(),yfe=a("p"),MYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EYo=l(),ln=a("p"),yYo=o("The model class to instantiate is selected based on the "),wfe=a("code"),wYo=o("model_type"),AYo=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),LYo=o("pretrained_model_name_or_path"),BYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),xYo=o("pretrained_model_name_or_path"),kYo=o(":"),RYo=l(),pe=a("ul"),q6=a("li"),Bfe=a("strong"),SYo=o("bart"),PYo=o(" \u2014 "),MD=a("a"),$Yo=o("TFBartForConditionalGeneration"),IYo=o(" (BART model)"),jYo=l(),G6=a("li"),xfe=a("strong"),NYo=o("blenderbot"),DYo=o(" \u2014 "),ED=a("a"),qYo=o("TFBlenderbotForConditionalGeneration"),GYo=o(" (Blenderbot model)"),OYo=l(),O6=a("li"),kfe=a("strong"),XYo=o("blenderbot-small"),zYo=o(" \u2014 "),yD=a("a"),VYo=o("TFBlenderbotSmallForConditionalGeneration"),WYo=o(" (BlenderbotSmall model)"),QYo=l(),X6=a("li"),Rfe=a("strong"),HYo=o("encoder-decoder"),UYo=o(" \u2014 "),wD=a("a"),JYo=o("TFEncoderDecoderModel"),YYo=o(" (Encoder decoder model)"),KYo=l(),z6=a("li"),Sfe=a("strong"),ZYo=o("led"),eKo=o(" \u2014 "),AD=a("a"),oKo=o("TFLEDForConditionalGeneration"),rKo=o(" (LED model)"),tKo=l(),V6=a("li"),Pfe=a("strong"),aKo=o("marian"),nKo=o(" \u2014 "),LD=a("a"),sKo=o("TFMarianMTModel"),lKo=o(" (Marian model)"),iKo=l(),W6=a("li"),$fe=a("strong"),dKo=o("mbart"),cKo=o(" \u2014 "),BD=a("a"),fKo=o("TFMBartForConditionalGeneration"),mKo=o(" (mBART model)"),gKo=l(),Q6=a("li"),Ife=a("strong"),hKo=o("mt5"),pKo=o(" \u2014 "),xD=a("a"),_Ko=o("TFMT5ForConditionalGeneration"),uKo=o(" (mT5 model)"),bKo=l(),H6=a("li"),jfe=a("strong"),vKo=o("pegasus"),TKo=o(" \u2014 "),kD=a("a"),FKo=o("TFPegasusForConditionalGeneration"),CKo=o(" (Pegasus model)"),MKo=l(),U6=a("li"),Nfe=a("strong"),EKo=o("t5"),yKo=o(" \u2014 "),RD=a("a"),wKo=o("TFT5ForConditionalGeneration"),AKo=o(" (T5 model)"),LKo=l(),Dfe=a("p"),BKo=o("Examples:"),xKo=l(),f(P3.$$.fragment),L0e=l(),lc=a("h2"),J6=a("a"),qfe=a("span"),f($3.$$.fragment),kKo=l(),Gfe=a("span"),RKo=o("TFAutoModelForSequenceClassification"),B0e=l(),_r=a("div"),f(I3.$$.fragment),SKo=l(),ic=a("p"),PKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ofe=a("code"),$Ko=o("from_pretrained()"),IKo=o("class method or the "),Xfe=a("code"),jKo=o("from_config()"),NKo=o(`class
method.`),DKo=l(),j3=a("p"),qKo=o("This class cannot be instantiated directly using "),zfe=a("code"),GKo=o("__init__()"),OKo=o(" (throws an error)."),XKo=l(),it=a("div"),f(N3.$$.fragment),zKo=l(),Vfe=a("p"),VKo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WKo=l(),dc=a("p"),QKo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),HKo=o("not"),UKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qfe=a("code"),JKo=o("from_pretrained()"),YKo=o("to load the model weights."),KKo=l(),Hfe=a("p"),ZKo=o("Examples:"),eZo=l(),f(D3.$$.fragment),oZo=l(),uo=a("div"),f(q3.$$.fragment),rZo=l(),Ufe=a("p"),tZo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aZo=l(),dn=a("p"),nZo=o("The model class to instantiate is selected based on the "),Jfe=a("code"),sZo=o("model_type"),lZo=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),iZo=o("pretrained_model_name_or_path"),dZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),cZo=o("pretrained_model_name_or_path"),fZo=o(":"),mZo=l(),X=a("ul"),Y6=a("li"),Zfe=a("strong"),gZo=o("albert"),hZo=o(" \u2014 "),SD=a("a"),pZo=o("TFAlbertForSequenceClassification"),_Zo=o(" (ALBERT model)"),uZo=l(),K6=a("li"),eme=a("strong"),bZo=o("bert"),vZo=o(" \u2014 "),PD=a("a"),TZo=o("TFBertForSequenceClassification"),FZo=o(" (BERT model)"),CZo=l(),Z6=a("li"),ome=a("strong"),MZo=o("camembert"),EZo=o(" \u2014 "),$D=a("a"),yZo=o("TFCamembertForSequenceClassification"),wZo=o(" (CamemBERT model)"),AZo=l(),eT=a("li"),rme=a("strong"),LZo=o("convbert"),BZo=o(" \u2014 "),ID=a("a"),xZo=o("TFConvBertForSequenceClassification"),kZo=o(" (ConvBERT model)"),RZo=l(),oT=a("li"),tme=a("strong"),SZo=o("ctrl"),PZo=o(" \u2014 "),jD=a("a"),$Zo=o("TFCTRLForSequenceClassification"),IZo=o(" (CTRL model)"),jZo=l(),rT=a("li"),ame=a("strong"),NZo=o("deberta"),DZo=o(" \u2014 "),ND=a("a"),qZo=o("TFDebertaForSequenceClassification"),GZo=o(" (DeBERTa model)"),OZo=l(),tT=a("li"),nme=a("strong"),XZo=o("deberta-v2"),zZo=o(" \u2014 "),DD=a("a"),VZo=o("TFDebertaV2ForSequenceClassification"),WZo=o(" (DeBERTa-v2 model)"),QZo=l(),aT=a("li"),sme=a("strong"),HZo=o("distilbert"),UZo=o(" \u2014 "),qD=a("a"),JZo=o("TFDistilBertForSequenceClassification"),YZo=o(" (DistilBERT model)"),KZo=l(),nT=a("li"),lme=a("strong"),ZZo=o("electra"),eer=o(" \u2014 "),GD=a("a"),oer=o("TFElectraForSequenceClassification"),rer=o(" (ELECTRA model)"),ter=l(),sT=a("li"),ime=a("strong"),aer=o("flaubert"),ner=o(" \u2014 "),OD=a("a"),ser=o("TFFlaubertForSequenceClassification"),ler=o(" (FlauBERT model)"),ier=l(),lT=a("li"),dme=a("strong"),der=o("funnel"),cer=o(" \u2014 "),XD=a("a"),fer=o("TFFunnelForSequenceClassification"),mer=o(" (Funnel Transformer model)"),ger=l(),iT=a("li"),cme=a("strong"),her=o("gpt2"),per=o(" \u2014 "),zD=a("a"),_er=o("TFGPT2ForSequenceClassification"),uer=o(" (OpenAI GPT-2 model)"),ber=l(),dT=a("li"),fme=a("strong"),ver=o("layoutlm"),Ter=o(" \u2014 "),VD=a("a"),Fer=o("TFLayoutLMForSequenceClassification"),Cer=o(" (LayoutLM model)"),Mer=l(),cT=a("li"),mme=a("strong"),Eer=o("longformer"),yer=o(" \u2014 "),WD=a("a"),wer=o("TFLongformerForSequenceClassification"),Aer=o(" (Longformer model)"),Ler=l(),fT=a("li"),gme=a("strong"),Ber=o("mobilebert"),xer=o(" \u2014 "),QD=a("a"),ker=o("TFMobileBertForSequenceClassification"),Rer=o(" (MobileBERT model)"),Ser=l(),mT=a("li"),hme=a("strong"),Per=o("mpnet"),$er=o(" \u2014 "),HD=a("a"),Ier=o("TFMPNetForSequenceClassification"),jer=o(" (MPNet model)"),Ner=l(),gT=a("li"),pme=a("strong"),Der=o("openai-gpt"),qer=o(" \u2014 "),UD=a("a"),Ger=o("TFOpenAIGPTForSequenceClassification"),Oer=o(" (OpenAI GPT model)"),Xer=l(),hT=a("li"),_me=a("strong"),zer=o("rembert"),Ver=o(" \u2014 "),JD=a("a"),Wer=o("TFRemBertForSequenceClassification"),Qer=o(" (RemBERT model)"),Her=l(),pT=a("li"),ume=a("strong"),Uer=o("roberta"),Jer=o(" \u2014 "),YD=a("a"),Yer=o("TFRobertaForSequenceClassification"),Ker=o(" (RoBERTa model)"),Zer=l(),_T=a("li"),bme=a("strong"),eor=o("roformer"),oor=o(" \u2014 "),KD=a("a"),ror=o("TFRoFormerForSequenceClassification"),tor=o(" (RoFormer model)"),aor=l(),uT=a("li"),vme=a("strong"),nor=o("tapas"),sor=o(" \u2014 "),ZD=a("a"),lor=o("TFTapasForSequenceClassification"),ior=o(" (TAPAS model)"),dor=l(),bT=a("li"),Tme=a("strong"),cor=o("transfo-xl"),mor=o(" \u2014 "),eq=a("a"),gor=o("TFTransfoXLForSequenceClassification"),hor=o(" (Transformer-XL model)"),por=l(),vT=a("li"),Fme=a("strong"),_or=o("xlm"),uor=o(" \u2014 "),oq=a("a"),bor=o("TFXLMForSequenceClassification"),vor=o(" (XLM model)"),Tor=l(),TT=a("li"),Cme=a("strong"),For=o("xlm-roberta"),Cor=o(" \u2014 "),rq=a("a"),Mor=o("TFXLMRobertaForSequenceClassification"),Eor=o(" (XLM-RoBERTa model)"),yor=l(),FT=a("li"),Mme=a("strong"),wor=o("xlnet"),Aor=o(" \u2014 "),tq=a("a"),Lor=o("TFXLNetForSequenceClassification"),Bor=o(" (XLNet model)"),xor=l(),Eme=a("p"),kor=o("Examples:"),Ror=l(),f(G3.$$.fragment),x0e=l(),cc=a("h2"),CT=a("a"),yme=a("span"),f(O3.$$.fragment),Sor=l(),wme=a("span"),Por=o("TFAutoModelForMultipleChoice"),k0e=l(),ur=a("div"),f(X3.$$.fragment),$or=l(),fc=a("p"),Ior=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ame=a("code"),jor=o("from_pretrained()"),Nor=o("class method or the "),Lme=a("code"),Dor=o("from_config()"),qor=o(`class
method.`),Gor=l(),z3=a("p"),Oor=o("This class cannot be instantiated directly using "),Bme=a("code"),Xor=o("__init__()"),zor=o(" (throws an error)."),Vor=l(),dt=a("div"),f(V3.$$.fragment),Wor=l(),xme=a("p"),Qor=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hor=l(),mc=a("p"),Uor=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),Jor=o("not"),Yor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rme=a("code"),Kor=o("from_pretrained()"),Zor=o("to load the model weights."),err=l(),Sme=a("p"),orr=o("Examples:"),rrr=l(),f(W3.$$.fragment),trr=l(),bo=a("div"),f(Q3.$$.fragment),arr=l(),Pme=a("p"),nrr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),srr=l(),cn=a("p"),lrr=o("The model class to instantiate is selected based on the "),$me=a("code"),irr=o("model_type"),drr=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),crr=o("pretrained_model_name_or_path"),frr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=a("code"),mrr=o("pretrained_model_name_or_path"),grr=o(":"),hrr=l(),te=a("ul"),MT=a("li"),Nme=a("strong"),prr=o("albert"),_rr=o(" \u2014 "),aq=a("a"),urr=o("TFAlbertForMultipleChoice"),brr=o(" (ALBERT model)"),vrr=l(),ET=a("li"),Dme=a("strong"),Trr=o("bert"),Frr=o(" \u2014 "),nq=a("a"),Crr=o("TFBertForMultipleChoice"),Mrr=o(" (BERT model)"),Err=l(),yT=a("li"),qme=a("strong"),yrr=o("camembert"),wrr=o(" \u2014 "),sq=a("a"),Arr=o("TFCamembertForMultipleChoice"),Lrr=o(" (CamemBERT model)"),Brr=l(),wT=a("li"),Gme=a("strong"),xrr=o("convbert"),krr=o(" \u2014 "),lq=a("a"),Rrr=o("TFConvBertForMultipleChoice"),Srr=o(" (ConvBERT model)"),Prr=l(),AT=a("li"),Ome=a("strong"),$rr=o("distilbert"),Irr=o(" \u2014 "),iq=a("a"),jrr=o("TFDistilBertForMultipleChoice"),Nrr=o(" (DistilBERT model)"),Drr=l(),LT=a("li"),Xme=a("strong"),qrr=o("electra"),Grr=o(" \u2014 "),dq=a("a"),Orr=o("TFElectraForMultipleChoice"),Xrr=o(" (ELECTRA model)"),zrr=l(),BT=a("li"),zme=a("strong"),Vrr=o("flaubert"),Wrr=o(" \u2014 "),cq=a("a"),Qrr=o("TFFlaubertForMultipleChoice"),Hrr=o(" (FlauBERT model)"),Urr=l(),xT=a("li"),Vme=a("strong"),Jrr=o("funnel"),Yrr=o(" \u2014 "),fq=a("a"),Krr=o("TFFunnelForMultipleChoice"),Zrr=o(" (Funnel Transformer model)"),etr=l(),kT=a("li"),Wme=a("strong"),otr=o("longformer"),rtr=o(" \u2014 "),mq=a("a"),ttr=o("TFLongformerForMultipleChoice"),atr=o(" (Longformer model)"),ntr=l(),RT=a("li"),Qme=a("strong"),str=o("mobilebert"),ltr=o(" \u2014 "),gq=a("a"),itr=o("TFMobileBertForMultipleChoice"),dtr=o(" (MobileBERT model)"),ctr=l(),ST=a("li"),Hme=a("strong"),ftr=o("mpnet"),mtr=o(" \u2014 "),hq=a("a"),gtr=o("TFMPNetForMultipleChoice"),htr=o(" (MPNet model)"),ptr=l(),PT=a("li"),Ume=a("strong"),_tr=o("rembert"),utr=o(" \u2014 "),pq=a("a"),btr=o("TFRemBertForMultipleChoice"),vtr=o(" (RemBERT model)"),Ttr=l(),$T=a("li"),Jme=a("strong"),Ftr=o("roberta"),Ctr=o(" \u2014 "),_q=a("a"),Mtr=o("TFRobertaForMultipleChoice"),Etr=o(" (RoBERTa model)"),ytr=l(),IT=a("li"),Yme=a("strong"),wtr=o("roformer"),Atr=o(" \u2014 "),uq=a("a"),Ltr=o("TFRoFormerForMultipleChoice"),Btr=o(" (RoFormer model)"),xtr=l(),jT=a("li"),Kme=a("strong"),ktr=o("xlm"),Rtr=o(" \u2014 "),bq=a("a"),Str=o("TFXLMForMultipleChoice"),Ptr=o(" (XLM model)"),$tr=l(),NT=a("li"),Zme=a("strong"),Itr=o("xlm-roberta"),jtr=o(" \u2014 "),vq=a("a"),Ntr=o("TFXLMRobertaForMultipleChoice"),Dtr=o(" (XLM-RoBERTa model)"),qtr=l(),DT=a("li"),ege=a("strong"),Gtr=o("xlnet"),Otr=o(" \u2014 "),Tq=a("a"),Xtr=o("TFXLNetForMultipleChoice"),ztr=o(" (XLNet model)"),Vtr=l(),oge=a("p"),Wtr=o("Examples:"),Qtr=l(),f(H3.$$.fragment),R0e=l(),gc=a("h2"),qT=a("a"),rge=a("span"),f(U3.$$.fragment),Htr=l(),tge=a("span"),Utr=o("TFAutoModelForTableQuestionAnswering"),S0e=l(),br=a("div"),f(J3.$$.fragment),Jtr=l(),hc=a("p"),Ytr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),age=a("code"),Ktr=o("from_pretrained()"),Ztr=o("class method or the "),nge=a("code"),ear=o("from_config()"),oar=o(`class
method.`),rar=l(),Y3=a("p"),tar=o("This class cannot be instantiated directly using "),sge=a("code"),aar=o("__init__()"),nar=o(" (throws an error)."),sar=l(),ct=a("div"),f(K3.$$.fragment),lar=l(),lge=a("p"),iar=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dar=l(),pc=a("p"),car=o(`Note:
Loading a model from its configuration file does `),ige=a("strong"),far=o("not"),mar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dge=a("code"),gar=o("from_pretrained()"),har=o("to load the model weights."),par=l(),cge=a("p"),_ar=o("Examples:"),uar=l(),f(Z3.$$.fragment),bar=l(),vo=a("div"),f(ey.$$.fragment),Tar=l(),fge=a("p"),Far=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Car=l(),fn=a("p"),Mar=o("The model class to instantiate is selected based on the "),mge=a("code"),Ear=o("model_type"),yar=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),war=o("pretrained_model_name_or_path"),Aar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),Lar=o("pretrained_model_name_or_path"),Bar=o(":"),xar=l(),pge=a("ul"),GT=a("li"),_ge=a("strong"),kar=o("tapas"),Rar=o(" \u2014 "),Fq=a("a"),Sar=o("TFTapasForQuestionAnswering"),Par=o(" (TAPAS model)"),$ar=l(),uge=a("p"),Iar=o("Examples:"),jar=l(),f(oy.$$.fragment),P0e=l(),_c=a("h2"),OT=a("a"),bge=a("span"),f(ry.$$.fragment),Nar=l(),vge=a("span"),Dar=o("TFAutoModelForTokenClassification"),$0e=l(),vr=a("div"),f(ty.$$.fragment),qar=l(),uc=a("p"),Gar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tge=a("code"),Oar=o("from_pretrained()"),Xar=o("class method or the "),Fge=a("code"),zar=o("from_config()"),Var=o(`class
method.`),War=l(),ay=a("p"),Qar=o("This class cannot be instantiated directly using "),Cge=a("code"),Har=o("__init__()"),Uar=o(" (throws an error)."),Jar=l(),ft=a("div"),f(ny.$$.fragment),Yar=l(),Mge=a("p"),Kar=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zar=l(),bc=a("p"),enr=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),onr=o("not"),rnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yge=a("code"),tnr=o("from_pretrained()"),anr=o("to load the model weights."),nnr=l(),wge=a("p"),snr=o("Examples:"),lnr=l(),f(sy.$$.fragment),inr=l(),To=a("div"),f(ly.$$.fragment),dnr=l(),Age=a("p"),cnr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fnr=l(),mn=a("p"),mnr=o("The model class to instantiate is selected based on the "),Lge=a("code"),gnr=o("model_type"),hnr=o(` property of the config object (either
passed as an argument or loaded from `),Bge=a("code"),pnr=o("pretrained_model_name_or_path"),_nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=a("code"),unr=o("pretrained_model_name_or_path"),bnr=o(":"),vnr=l(),K=a("ul"),XT=a("li"),kge=a("strong"),Tnr=o("albert"),Fnr=o(" \u2014 "),Cq=a("a"),Cnr=o("TFAlbertForTokenClassification"),Mnr=o(" (ALBERT model)"),Enr=l(),zT=a("li"),Rge=a("strong"),ynr=o("bert"),wnr=o(" \u2014 "),Mq=a("a"),Anr=o("TFBertForTokenClassification"),Lnr=o(" (BERT model)"),Bnr=l(),VT=a("li"),Sge=a("strong"),xnr=o("camembert"),knr=o(" \u2014 "),Eq=a("a"),Rnr=o("TFCamembertForTokenClassification"),Snr=o(" (CamemBERT model)"),Pnr=l(),WT=a("li"),Pge=a("strong"),$nr=o("convbert"),Inr=o(" \u2014 "),yq=a("a"),jnr=o("TFConvBertForTokenClassification"),Nnr=o(" (ConvBERT model)"),Dnr=l(),QT=a("li"),$ge=a("strong"),qnr=o("deberta"),Gnr=o(" \u2014 "),wq=a("a"),Onr=o("TFDebertaForTokenClassification"),Xnr=o(" (DeBERTa model)"),znr=l(),HT=a("li"),Ige=a("strong"),Vnr=o("deberta-v2"),Wnr=o(" \u2014 "),Aq=a("a"),Qnr=o("TFDebertaV2ForTokenClassification"),Hnr=o(" (DeBERTa-v2 model)"),Unr=l(),UT=a("li"),jge=a("strong"),Jnr=o("distilbert"),Ynr=o(" \u2014 "),Lq=a("a"),Knr=o("TFDistilBertForTokenClassification"),Znr=o(" (DistilBERT model)"),esr=l(),JT=a("li"),Nge=a("strong"),osr=o("electra"),rsr=o(" \u2014 "),Bq=a("a"),tsr=o("TFElectraForTokenClassification"),asr=o(" (ELECTRA model)"),nsr=l(),YT=a("li"),Dge=a("strong"),ssr=o("flaubert"),lsr=o(" \u2014 "),xq=a("a"),isr=o("TFFlaubertForTokenClassification"),dsr=o(" (FlauBERT model)"),csr=l(),KT=a("li"),qge=a("strong"),fsr=o("funnel"),msr=o(" \u2014 "),kq=a("a"),gsr=o("TFFunnelForTokenClassification"),hsr=o(" (Funnel Transformer model)"),psr=l(),ZT=a("li"),Gge=a("strong"),_sr=o("layoutlm"),usr=o(" \u2014 "),Rq=a("a"),bsr=o("TFLayoutLMForTokenClassification"),vsr=o(" (LayoutLM model)"),Tsr=l(),e7=a("li"),Oge=a("strong"),Fsr=o("longformer"),Csr=o(" \u2014 "),Sq=a("a"),Msr=o("TFLongformerForTokenClassification"),Esr=o(" (Longformer model)"),ysr=l(),o7=a("li"),Xge=a("strong"),wsr=o("mobilebert"),Asr=o(" \u2014 "),Pq=a("a"),Lsr=o("TFMobileBertForTokenClassification"),Bsr=o(" (MobileBERT model)"),xsr=l(),r7=a("li"),zge=a("strong"),ksr=o("mpnet"),Rsr=o(" \u2014 "),$q=a("a"),Ssr=o("TFMPNetForTokenClassification"),Psr=o(" (MPNet model)"),$sr=l(),t7=a("li"),Vge=a("strong"),Isr=o("rembert"),jsr=o(" \u2014 "),Iq=a("a"),Nsr=o("TFRemBertForTokenClassification"),Dsr=o(" (RemBERT model)"),qsr=l(),a7=a("li"),Wge=a("strong"),Gsr=o("roberta"),Osr=o(" \u2014 "),jq=a("a"),Xsr=o("TFRobertaForTokenClassification"),zsr=o(" (RoBERTa model)"),Vsr=l(),n7=a("li"),Qge=a("strong"),Wsr=o("roformer"),Qsr=o(" \u2014 "),Nq=a("a"),Hsr=o("TFRoFormerForTokenClassification"),Usr=o(" (RoFormer model)"),Jsr=l(),s7=a("li"),Hge=a("strong"),Ysr=o("xlm"),Ksr=o(" \u2014 "),Dq=a("a"),Zsr=o("TFXLMForTokenClassification"),elr=o(" (XLM model)"),olr=l(),l7=a("li"),Uge=a("strong"),rlr=o("xlm-roberta"),tlr=o(" \u2014 "),qq=a("a"),alr=o("TFXLMRobertaForTokenClassification"),nlr=o(" (XLM-RoBERTa model)"),slr=l(),i7=a("li"),Jge=a("strong"),llr=o("xlnet"),ilr=o(" \u2014 "),Gq=a("a"),dlr=o("TFXLNetForTokenClassification"),clr=o(" (XLNet model)"),flr=l(),Yge=a("p"),mlr=o("Examples:"),glr=l(),f(iy.$$.fragment),I0e=l(),vc=a("h2"),d7=a("a"),Kge=a("span"),f(dy.$$.fragment),hlr=l(),Zge=a("span"),plr=o("TFAutoModelForQuestionAnswering"),j0e=l(),Tr=a("div"),f(cy.$$.fragment),_lr=l(),Tc=a("p"),ulr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ehe=a("code"),blr=o("from_pretrained()"),vlr=o("class method or the "),ohe=a("code"),Tlr=o("from_config()"),Flr=o(`class
method.`),Clr=l(),fy=a("p"),Mlr=o("This class cannot be instantiated directly using "),rhe=a("code"),Elr=o("__init__()"),ylr=o(" (throws an error)."),wlr=l(),mt=a("div"),f(my.$$.fragment),Alr=l(),the=a("p"),Llr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Blr=l(),Fc=a("p"),xlr=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),klr=o("not"),Rlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nhe=a("code"),Slr=o("from_pretrained()"),Plr=o("to load the model weights."),$lr=l(),she=a("p"),Ilr=o("Examples:"),jlr=l(),f(gy.$$.fragment),Nlr=l(),Fo=a("div"),f(hy.$$.fragment),Dlr=l(),lhe=a("p"),qlr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Glr=l(),gn=a("p"),Olr=o("The model class to instantiate is selected based on the "),ihe=a("code"),Xlr=o("model_type"),zlr=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),Vlr=o("pretrained_model_name_or_path"),Wlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),Qlr=o("pretrained_model_name_or_path"),Hlr=o(":"),Ulr=l(),Z=a("ul"),c7=a("li"),fhe=a("strong"),Jlr=o("albert"),Ylr=o(" \u2014 "),Oq=a("a"),Klr=o("TFAlbertForQuestionAnswering"),Zlr=o(" (ALBERT model)"),eir=l(),f7=a("li"),mhe=a("strong"),oir=o("bert"),rir=o(" \u2014 "),Xq=a("a"),tir=o("TFBertForQuestionAnswering"),air=o(" (BERT model)"),nir=l(),m7=a("li"),ghe=a("strong"),sir=o("camembert"),lir=o(" \u2014 "),zq=a("a"),iir=o("TFCamembertForQuestionAnswering"),dir=o(" (CamemBERT model)"),cir=l(),g7=a("li"),hhe=a("strong"),fir=o("convbert"),mir=o(" \u2014 "),Vq=a("a"),gir=o("TFConvBertForQuestionAnswering"),hir=o(" (ConvBERT model)"),pir=l(),h7=a("li"),phe=a("strong"),_ir=o("deberta"),uir=o(" \u2014 "),Wq=a("a"),bir=o("TFDebertaForQuestionAnswering"),vir=o(" (DeBERTa model)"),Tir=l(),p7=a("li"),_he=a("strong"),Fir=o("deberta-v2"),Cir=o(" \u2014 "),Qq=a("a"),Mir=o("TFDebertaV2ForQuestionAnswering"),Eir=o(" (DeBERTa-v2 model)"),yir=l(),_7=a("li"),uhe=a("strong"),wir=o("distilbert"),Air=o(" \u2014 "),Hq=a("a"),Lir=o("TFDistilBertForQuestionAnswering"),Bir=o(" (DistilBERT model)"),xir=l(),u7=a("li"),bhe=a("strong"),kir=o("electra"),Rir=o(" \u2014 "),Uq=a("a"),Sir=o("TFElectraForQuestionAnswering"),Pir=o(" (ELECTRA model)"),$ir=l(),b7=a("li"),vhe=a("strong"),Iir=o("flaubert"),jir=o(" \u2014 "),Jq=a("a"),Nir=o("TFFlaubertForQuestionAnsweringSimple"),Dir=o(" (FlauBERT model)"),qir=l(),v7=a("li"),The=a("strong"),Gir=o("funnel"),Oir=o(" \u2014 "),Yq=a("a"),Xir=o("TFFunnelForQuestionAnswering"),zir=o(" (Funnel Transformer model)"),Vir=l(),T7=a("li"),Fhe=a("strong"),Wir=o("longformer"),Qir=o(" \u2014 "),Kq=a("a"),Hir=o("TFLongformerForQuestionAnswering"),Uir=o(" (Longformer model)"),Jir=l(),F7=a("li"),Che=a("strong"),Yir=o("mobilebert"),Kir=o(" \u2014 "),Zq=a("a"),Zir=o("TFMobileBertForQuestionAnswering"),edr=o(" (MobileBERT model)"),odr=l(),C7=a("li"),Mhe=a("strong"),rdr=o("mpnet"),tdr=o(" \u2014 "),eG=a("a"),adr=o("TFMPNetForQuestionAnswering"),ndr=o(" (MPNet model)"),sdr=l(),M7=a("li"),Ehe=a("strong"),ldr=o("rembert"),idr=o(" \u2014 "),oG=a("a"),ddr=o("TFRemBertForQuestionAnswering"),cdr=o(" (RemBERT model)"),fdr=l(),E7=a("li"),yhe=a("strong"),mdr=o("roberta"),gdr=o(" \u2014 "),rG=a("a"),hdr=o("TFRobertaForQuestionAnswering"),pdr=o(" (RoBERTa model)"),_dr=l(),y7=a("li"),whe=a("strong"),udr=o("roformer"),bdr=o(" \u2014 "),tG=a("a"),vdr=o("TFRoFormerForQuestionAnswering"),Tdr=o(" (RoFormer model)"),Fdr=l(),w7=a("li"),Ahe=a("strong"),Cdr=o("xlm"),Mdr=o(" \u2014 "),aG=a("a"),Edr=o("TFXLMForQuestionAnsweringSimple"),ydr=o(" (XLM model)"),wdr=l(),A7=a("li"),Lhe=a("strong"),Adr=o("xlm-roberta"),Ldr=o(" \u2014 "),nG=a("a"),Bdr=o("TFXLMRobertaForQuestionAnswering"),xdr=o(" (XLM-RoBERTa model)"),kdr=l(),L7=a("li"),Bhe=a("strong"),Rdr=o("xlnet"),Sdr=o(" \u2014 "),sG=a("a"),Pdr=o("TFXLNetForQuestionAnsweringSimple"),$dr=o(" (XLNet model)"),Idr=l(),xhe=a("p"),jdr=o("Examples:"),Ndr=l(),f(py.$$.fragment),N0e=l(),Cc=a("h2"),B7=a("a"),khe=a("span"),f(_y.$$.fragment),Ddr=l(),Rhe=a("span"),qdr=o("TFAutoModelForVision2Seq"),D0e=l(),Fr=a("div"),f(uy.$$.fragment),Gdr=l(),Mc=a("p"),Odr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),She=a("code"),Xdr=o("from_pretrained()"),zdr=o("class method or the "),Phe=a("code"),Vdr=o("from_config()"),Wdr=o(`class
method.`),Qdr=l(),by=a("p"),Hdr=o("This class cannot be instantiated directly using "),$he=a("code"),Udr=o("__init__()"),Jdr=o(" (throws an error)."),Ydr=l(),gt=a("div"),f(vy.$$.fragment),Kdr=l(),Ihe=a("p"),Zdr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ecr=l(),Ec=a("p"),ocr=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),rcr=o("not"),tcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nhe=a("code"),acr=o("from_pretrained()"),ncr=o("to load the model weights."),scr=l(),Dhe=a("p"),lcr=o("Examples:"),icr=l(),f(Ty.$$.fragment),dcr=l(),Co=a("div"),f(Fy.$$.fragment),ccr=l(),qhe=a("p"),fcr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mcr=l(),hn=a("p"),gcr=o("The model class to instantiate is selected based on the "),Ghe=a("code"),hcr=o("model_type"),pcr=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),_cr=o("pretrained_model_name_or_path"),ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=a("code"),bcr=o("pretrained_model_name_or_path"),vcr=o(":"),Tcr=l(),zhe=a("ul"),x7=a("li"),Vhe=a("strong"),Fcr=o("vision-encoder-decoder"),Ccr=o(" \u2014 "),lG=a("a"),Mcr=o("TFVisionEncoderDecoderModel"),Ecr=o(" (Vision Encoder decoder model)"),ycr=l(),Whe=a("p"),wcr=o("Examples:"),Acr=l(),f(Cy.$$.fragment),q0e=l(),yc=a("h2"),k7=a("a"),Qhe=a("span"),f(My.$$.fragment),Lcr=l(),Hhe=a("span"),Bcr=o("TFAutoModelForSpeechSeq2Seq"),G0e=l(),Cr=a("div"),f(Ey.$$.fragment),xcr=l(),wc=a("p"),kcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Uhe=a("code"),Rcr=o("from_pretrained()"),Scr=o("class method or the "),Jhe=a("code"),Pcr=o("from_config()"),$cr=o(`class
method.`),Icr=l(),yy=a("p"),jcr=o("This class cannot be instantiated directly using "),Yhe=a("code"),Ncr=o("__init__()"),Dcr=o(" (throws an error)."),qcr=l(),ht=a("div"),f(wy.$$.fragment),Gcr=l(),Khe=a("p"),Ocr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xcr=l(),Ac=a("p"),zcr=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),Vcr=o("not"),Wcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),epe=a("code"),Qcr=o("from_pretrained()"),Hcr=o("to load the model weights."),Ucr=l(),ope=a("p"),Jcr=o("Examples:"),Ycr=l(),f(Ay.$$.fragment),Kcr=l(),Mo=a("div"),f(Ly.$$.fragment),Zcr=l(),rpe=a("p"),efr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ofr=l(),pn=a("p"),rfr=o("The model class to instantiate is selected based on the "),tpe=a("code"),tfr=o("model_type"),afr=o(` property of the config object (either
passed as an argument or loaded from `),ape=a("code"),nfr=o("pretrained_model_name_or_path"),sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=a("code"),lfr=o("pretrained_model_name_or_path"),ifr=o(":"),dfr=l(),spe=a("ul"),R7=a("li"),lpe=a("strong"),cfr=o("speech_to_text"),ffr=o(" \u2014 "),iG=a("a"),mfr=o("TFSpeech2TextForConditionalGeneration"),gfr=o(" (Speech2Text model)"),hfr=l(),ipe=a("p"),pfr=o("Examples:"),_fr=l(),f(By.$$.fragment),O0e=l(),Lc=a("h2"),S7=a("a"),dpe=a("span"),f(xy.$$.fragment),ufr=l(),cpe=a("span"),bfr=o("FlaxAutoModel"),X0e=l(),Mr=a("div"),f(ky.$$.fragment),vfr=l(),Bc=a("p"),Tfr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fpe=a("code"),Ffr=o("from_pretrained()"),Cfr=o("class method or the "),mpe=a("code"),Mfr=o("from_config()"),Efr=o(`class
method.`),yfr=l(),Ry=a("p"),wfr=o("This class cannot be instantiated directly using "),gpe=a("code"),Afr=o("__init__()"),Lfr=o(" (throws an error)."),Bfr=l(),pt=a("div"),f(Sy.$$.fragment),xfr=l(),hpe=a("p"),kfr=o("Instantiates one of the base model classes of the library from a configuration."),Rfr=l(),xc=a("p"),Sfr=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),Pfr=o("not"),$fr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_pe=a("code"),Ifr=o("from_pretrained()"),jfr=o("to load the model weights."),Nfr=l(),upe=a("p"),Dfr=o("Examples:"),qfr=l(),f(Py.$$.fragment),Gfr=l(),Eo=a("div"),f($y.$$.fragment),Ofr=l(),bpe=a("p"),Xfr=o("Instantiate one of the base model classes of the library from a pretrained model."),zfr=l(),_n=a("p"),Vfr=o("The model class to instantiate is selected based on the "),vpe=a("code"),Wfr=o("model_type"),Qfr=o(` property of the config object (either
passed as an argument or loaded from `),Tpe=a("code"),Hfr=o("pretrained_model_name_or_path"),Ufr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),V=a("ul"),P7=a("li"),Cpe=a("strong"),Zfr=o("albert"),emr=o(" \u2014 "),dG=a("a"),omr=o("FlaxAlbertModel"),rmr=o(" (ALBERT model)"),tmr=l(),$7=a("li"),Mpe=a("strong"),amr=o("bart"),nmr=o(" \u2014 "),cG=a("a"),smr=o("FlaxBartModel"),lmr=o(" (BART model)"),imr=l(),I7=a("li"),Epe=a("strong"),dmr=o("beit"),cmr=o(" \u2014 "),fG=a("a"),fmr=o("FlaxBeitModel"),mmr=o(" (BEiT model)"),gmr=l(),j7=a("li"),ype=a("strong"),hmr=o("bert"),pmr=o(" \u2014 "),mG=a("a"),_mr=o("FlaxBertModel"),umr=o(" (BERT model)"),bmr=l(),N7=a("li"),wpe=a("strong"),vmr=o("big_bird"),Tmr=o(" \u2014 "),gG=a("a"),Fmr=o("FlaxBigBirdModel"),Cmr=o(" (BigBird model)"),Mmr=l(),D7=a("li"),Ape=a("strong"),Emr=o("blenderbot"),ymr=o(" \u2014 "),hG=a("a"),wmr=o("FlaxBlenderbotModel"),Amr=o(" (Blenderbot model)"),Lmr=l(),q7=a("li"),Lpe=a("strong"),Bmr=o("blenderbot-small"),xmr=o(" \u2014 "),pG=a("a"),kmr=o("FlaxBlenderbotSmallModel"),Rmr=o(" (BlenderbotSmall model)"),Smr=l(),G7=a("li"),Bpe=a("strong"),Pmr=o("clip"),$mr=o(" \u2014 "),_G=a("a"),Imr=o("FlaxCLIPModel"),jmr=o(" (CLIP model)"),Nmr=l(),O7=a("li"),xpe=a("strong"),Dmr=o("distilbert"),qmr=o(" \u2014 "),uG=a("a"),Gmr=o("FlaxDistilBertModel"),Omr=o(" (DistilBERT model)"),Xmr=l(),X7=a("li"),kpe=a("strong"),zmr=o("electra"),Vmr=o(" \u2014 "),bG=a("a"),Wmr=o("FlaxElectraModel"),Qmr=o(" (ELECTRA model)"),Hmr=l(),z7=a("li"),Rpe=a("strong"),Umr=o("gpt2"),Jmr=o(" \u2014 "),vG=a("a"),Ymr=o("FlaxGPT2Model"),Kmr=o(" (OpenAI GPT-2 model)"),Zmr=l(),V7=a("li"),Spe=a("strong"),egr=o("gpt_neo"),ogr=o(" \u2014 "),TG=a("a"),rgr=o("FlaxGPTNeoModel"),tgr=o(" (GPT Neo model)"),agr=l(),W7=a("li"),Ppe=a("strong"),ngr=o("gptj"),sgr=o(" \u2014 "),FG=a("a"),lgr=o("FlaxGPTJModel"),igr=o(" (GPT-J model)"),dgr=l(),Q7=a("li"),$pe=a("strong"),cgr=o("marian"),fgr=o(" \u2014 "),CG=a("a"),mgr=o("FlaxMarianModel"),ggr=o(" (Marian model)"),hgr=l(),H7=a("li"),Ipe=a("strong"),pgr=o("mbart"),_gr=o(" \u2014 "),MG=a("a"),ugr=o("FlaxMBartModel"),bgr=o(" (mBART model)"),vgr=l(),U7=a("li"),jpe=a("strong"),Tgr=o("mt5"),Fgr=o(" \u2014 "),EG=a("a"),Cgr=o("FlaxMT5Model"),Mgr=o(" (mT5 model)"),Egr=l(),J7=a("li"),Npe=a("strong"),ygr=o("pegasus"),wgr=o(" \u2014 "),yG=a("a"),Agr=o("FlaxPegasusModel"),Lgr=o(" (Pegasus model)"),Bgr=l(),Y7=a("li"),Dpe=a("strong"),xgr=o("roberta"),kgr=o(" \u2014 "),wG=a("a"),Rgr=o("FlaxRobertaModel"),Sgr=o(" (RoBERTa model)"),Pgr=l(),K7=a("li"),qpe=a("strong"),$gr=o("roformer"),Igr=o(" \u2014 "),AG=a("a"),jgr=o("FlaxRoFormerModel"),Ngr=o(" (RoFormer model)"),Dgr=l(),Z7=a("li"),Gpe=a("strong"),qgr=o("t5"),Ggr=o(" \u2014 "),LG=a("a"),Ogr=o("FlaxT5Model"),Xgr=o(" (T5 model)"),zgr=l(),e8=a("li"),Ope=a("strong"),Vgr=o("vision-text-dual-encoder"),Wgr=o(" \u2014 "),BG=a("a"),Qgr=o("FlaxVisionTextDualEncoderModel"),Hgr=o(" (VisionTextDualEncoder model)"),Ugr=l(),o8=a("li"),Xpe=a("strong"),Jgr=o("vit"),Ygr=o(" \u2014 "),xG=a("a"),Kgr=o("FlaxViTModel"),Zgr=o(" (ViT model)"),ehr=l(),r8=a("li"),zpe=a("strong"),ohr=o("wav2vec2"),rhr=o(" \u2014 "),kG=a("a"),thr=o("FlaxWav2Vec2Model"),ahr=o(" (Wav2Vec2 model)"),nhr=l(),t8=a("li"),Vpe=a("strong"),shr=o("xglm"),lhr=o(" \u2014 "),RG=a("a"),ihr=o("FlaxXGLMModel"),dhr=o(" (XGLM model)"),chr=l(),Wpe=a("p"),fhr=o("Examples:"),mhr=l(),f(Iy.$$.fragment),z0e=l(),kc=a("h2"),a8=a("a"),Qpe=a("span"),f(jy.$$.fragment),ghr=l(),Hpe=a("span"),hhr=o("FlaxAutoModelForCausalLM"),V0e=l(),Er=a("div"),f(Ny.$$.fragment),phr=l(),Rc=a("p"),_hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Upe=a("code"),uhr=o("from_pretrained()"),bhr=o("class method or the "),Jpe=a("code"),vhr=o("from_config()"),Thr=o(`class
method.`),Fhr=l(),Dy=a("p"),Chr=o("This class cannot be instantiated directly using "),Ype=a("code"),Mhr=o("__init__()"),Ehr=o(" (throws an error)."),yhr=l(),_t=a("div"),f(qy.$$.fragment),whr=l(),Kpe=a("p"),Ahr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lhr=l(),Sc=a("p"),Bhr=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),xhr=o("not"),khr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e_e=a("code"),Rhr=o("from_pretrained()"),Shr=o("to load the model weights."),Phr=l(),o_e=a("p"),$hr=o("Examples:"),Ihr=l(),f(Gy.$$.fragment),jhr=l(),yo=a("div"),f(Oy.$$.fragment),Nhr=l(),r_e=a("p"),Dhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qhr=l(),un=a("p"),Ghr=o("The model class to instantiate is selected based on the "),t_e=a("code"),Ohr=o("model_type"),Xhr=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),zhr=o("pretrained_model_name_or_path"),Vhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),Whr=o("pretrained_model_name_or_path"),Qhr=o(":"),Hhr=l(),bn=a("ul"),n8=a("li"),s_e=a("strong"),Uhr=o("gpt2"),Jhr=o(" \u2014 "),SG=a("a"),Yhr=o("FlaxGPT2LMHeadModel"),Khr=o(" (OpenAI GPT-2 model)"),Zhr=l(),s8=a("li"),l_e=a("strong"),epr=o("gpt_neo"),opr=o(" \u2014 "),PG=a("a"),rpr=o("FlaxGPTNeoForCausalLM"),tpr=o(" (GPT Neo model)"),apr=l(),l8=a("li"),i_e=a("strong"),npr=o("gptj"),spr=o(" \u2014 "),$G=a("a"),lpr=o("FlaxGPTJForCausalLM"),ipr=o(" (GPT-J model)"),dpr=l(),i8=a("li"),d_e=a("strong"),cpr=o("xglm"),fpr=o(" \u2014 "),IG=a("a"),mpr=o("FlaxXGLMForCausalLM"),gpr=o(" (XGLM model)"),hpr=l(),c_e=a("p"),ppr=o("Examples:"),_pr=l(),f(Xy.$$.fragment),W0e=l(),Pc=a("h2"),d8=a("a"),f_e=a("span"),f(zy.$$.fragment),upr=l(),m_e=a("span"),bpr=o("FlaxAutoModelForPreTraining"),Q0e=l(),yr=a("div"),f(Vy.$$.fragment),vpr=l(),$c=a("p"),Tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),g_e=a("code"),Fpr=o("from_pretrained()"),Cpr=o("class method or the "),h_e=a("code"),Mpr=o("from_config()"),Epr=o(`class
method.`),ypr=l(),Wy=a("p"),wpr=o("This class cannot be instantiated directly using "),p_e=a("code"),Apr=o("__init__()"),Lpr=o(" (throws an error)."),Bpr=l(),ut=a("div"),f(Qy.$$.fragment),xpr=l(),__e=a("p"),kpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rpr=l(),Ic=a("p"),Spr=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),Ppr=o("not"),$pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),b_e=a("code"),Ipr=o("from_pretrained()"),jpr=o("to load the model weights."),Npr=l(),v_e=a("p"),Dpr=o("Examples:"),qpr=l(),f(Hy.$$.fragment),Gpr=l(),wo=a("div"),f(Uy.$$.fragment),Opr=l(),T_e=a("p"),Xpr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zpr=l(),vn=a("p"),Vpr=o("The model class to instantiate is selected based on the "),F_e=a("code"),Wpr=o("model_type"),Qpr=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=a("code"),Jpr=o("pretrained_model_name_or_path"),Ypr=o(":"),Kpr=l(),fe=a("ul"),c8=a("li"),E_e=a("strong"),Zpr=o("albert"),e_r=o(" \u2014 "),jG=a("a"),o_r=o("FlaxAlbertForPreTraining"),r_r=o(" (ALBERT model)"),t_r=l(),f8=a("li"),y_e=a("strong"),a_r=o("bart"),n_r=o(" \u2014 "),NG=a("a"),s_r=o("FlaxBartForConditionalGeneration"),l_r=o(" (BART model)"),i_r=l(),m8=a("li"),w_e=a("strong"),d_r=o("bert"),c_r=o(" \u2014 "),DG=a("a"),f_r=o("FlaxBertForPreTraining"),m_r=o(" (BERT model)"),g_r=l(),g8=a("li"),A_e=a("strong"),h_r=o("big_bird"),p_r=o(" \u2014 "),qG=a("a"),__r=o("FlaxBigBirdForPreTraining"),u_r=o(" (BigBird model)"),b_r=l(),h8=a("li"),L_e=a("strong"),v_r=o("electra"),T_r=o(" \u2014 "),GG=a("a"),F_r=o("FlaxElectraForPreTraining"),C_r=o(" (ELECTRA model)"),M_r=l(),p8=a("li"),B_e=a("strong"),E_r=o("mbart"),y_r=o(" \u2014 "),OG=a("a"),w_r=o("FlaxMBartForConditionalGeneration"),A_r=o(" (mBART model)"),L_r=l(),_8=a("li"),x_e=a("strong"),B_r=o("mt5"),x_r=o(" \u2014 "),XG=a("a"),k_r=o("FlaxMT5ForConditionalGeneration"),R_r=o(" (mT5 model)"),S_r=l(),u8=a("li"),k_e=a("strong"),P_r=o("roberta"),$_r=o(" \u2014 "),zG=a("a"),I_r=o("FlaxRobertaForMaskedLM"),j_r=o(" (RoBERTa model)"),N_r=l(),b8=a("li"),R_e=a("strong"),D_r=o("roformer"),q_r=o(" \u2014 "),VG=a("a"),G_r=o("FlaxRoFormerForMaskedLM"),O_r=o(" (RoFormer model)"),X_r=l(),v8=a("li"),S_e=a("strong"),z_r=o("t5"),V_r=o(" \u2014 "),WG=a("a"),W_r=o("FlaxT5ForConditionalGeneration"),Q_r=o(" (T5 model)"),H_r=l(),T8=a("li"),P_e=a("strong"),U_r=o("wav2vec2"),J_r=o(" \u2014 "),QG=a("a"),Y_r=o("FlaxWav2Vec2ForPreTraining"),K_r=o(" (Wav2Vec2 model)"),Z_r=l(),$_e=a("p"),eur=o("Examples:"),our=l(),f(Jy.$$.fragment),H0e=l(),jc=a("h2"),F8=a("a"),I_e=a("span"),f(Yy.$$.fragment),rur=l(),j_e=a("span"),tur=o("FlaxAutoModelForMaskedLM"),U0e=l(),wr=a("div"),f(Ky.$$.fragment),aur=l(),Nc=a("p"),nur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),N_e=a("code"),sur=o("from_pretrained()"),lur=o("class method or the "),D_e=a("code"),iur=o("from_config()"),dur=o(`class
method.`),cur=l(),Zy=a("p"),fur=o("This class cannot be instantiated directly using "),q_e=a("code"),mur=o("__init__()"),gur=o(" (throws an error)."),hur=l(),bt=a("div"),f(ew.$$.fragment),pur=l(),G_e=a("p"),_ur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uur=l(),Dc=a("p"),bur=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),vur=o("not"),Tur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X_e=a("code"),Fur=o("from_pretrained()"),Cur=o("to load the model weights."),Mur=l(),z_e=a("p"),Eur=o("Examples:"),yur=l(),f(ow.$$.fragment),wur=l(),Ao=a("div"),f(rw.$$.fragment),Aur=l(),V_e=a("p"),Lur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bur=l(),Tn=a("p"),xur=o("The model class to instantiate is selected based on the "),W_e=a("code"),kur=o("model_type"),Rur=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),Sur=o("pretrained_model_name_or_path"),Pur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),$ur=o("pretrained_model_name_or_path"),Iur=o(":"),jur=l(),be=a("ul"),C8=a("li"),U_e=a("strong"),Nur=o("albert"),Dur=o(" \u2014 "),HG=a("a"),qur=o("FlaxAlbertForMaskedLM"),Gur=o(" (ALBERT model)"),Our=l(),M8=a("li"),J_e=a("strong"),Xur=o("bart"),zur=o(" \u2014 "),UG=a("a"),Vur=o("FlaxBartForConditionalGeneration"),Wur=o(" (BART model)"),Qur=l(),E8=a("li"),Y_e=a("strong"),Hur=o("bert"),Uur=o(" \u2014 "),JG=a("a"),Jur=o("FlaxBertForMaskedLM"),Yur=o(" (BERT model)"),Kur=l(),y8=a("li"),K_e=a("strong"),Zur=o("big_bird"),e1r=o(" \u2014 "),YG=a("a"),o1r=o("FlaxBigBirdForMaskedLM"),r1r=o(" (BigBird model)"),t1r=l(),w8=a("li"),Z_e=a("strong"),a1r=o("distilbert"),n1r=o(" \u2014 "),KG=a("a"),s1r=o("FlaxDistilBertForMaskedLM"),l1r=o(" (DistilBERT model)"),i1r=l(),A8=a("li"),eue=a("strong"),d1r=o("electra"),c1r=o(" \u2014 "),ZG=a("a"),f1r=o("FlaxElectraForMaskedLM"),m1r=o(" (ELECTRA model)"),g1r=l(),L8=a("li"),oue=a("strong"),h1r=o("mbart"),p1r=o(" \u2014 "),eO=a("a"),_1r=o("FlaxMBartForConditionalGeneration"),u1r=o(" (mBART model)"),b1r=l(),B8=a("li"),rue=a("strong"),v1r=o("roberta"),T1r=o(" \u2014 "),oO=a("a"),F1r=o("FlaxRobertaForMaskedLM"),C1r=o(" (RoBERTa model)"),M1r=l(),x8=a("li"),tue=a("strong"),E1r=o("roformer"),y1r=o(" \u2014 "),rO=a("a"),w1r=o("FlaxRoFormerForMaskedLM"),A1r=o(" (RoFormer model)"),L1r=l(),aue=a("p"),B1r=o("Examples:"),x1r=l(),f(tw.$$.fragment),J0e=l(),qc=a("h2"),k8=a("a"),nue=a("span"),f(aw.$$.fragment),k1r=l(),sue=a("span"),R1r=o("FlaxAutoModelForSeq2SeqLM"),Y0e=l(),Ar=a("div"),f(nw.$$.fragment),S1r=l(),Gc=a("p"),P1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lue=a("code"),$1r=o("from_pretrained()"),I1r=o("class method or the "),iue=a("code"),j1r=o("from_config()"),N1r=o(`class
method.`),D1r=l(),sw=a("p"),q1r=o("This class cannot be instantiated directly using "),due=a("code"),G1r=o("__init__()"),O1r=o(" (throws an error)."),X1r=l(),vt=a("div"),f(lw.$$.fragment),z1r=l(),cue=a("p"),V1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W1r=l(),Oc=a("p"),Q1r=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),H1r=o("not"),U1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mue=a("code"),J1r=o("from_pretrained()"),Y1r=o("to load the model weights."),K1r=l(),gue=a("p"),Z1r=o("Examples:"),ebr=l(),f(iw.$$.fragment),obr=l(),Lo=a("div"),f(dw.$$.fragment),rbr=l(),hue=a("p"),tbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),abr=l(),Fn=a("p"),nbr=o("The model class to instantiate is selected based on the "),pue=a("code"),sbr=o("model_type"),lbr=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),ibr=o("pretrained_model_name_or_path"),dbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),cbr=o("pretrained_model_name_or_path"),fbr=o(":"),mbr=l(),ve=a("ul"),R8=a("li"),bue=a("strong"),gbr=o("bart"),hbr=o(" \u2014 "),tO=a("a"),pbr=o("FlaxBartForConditionalGeneration"),_br=o(" (BART model)"),ubr=l(),S8=a("li"),vue=a("strong"),bbr=o("blenderbot"),vbr=o(" \u2014 "),aO=a("a"),Tbr=o("FlaxBlenderbotForConditionalGeneration"),Fbr=o(" (Blenderbot model)"),Cbr=l(),P8=a("li"),Tue=a("strong"),Mbr=o("blenderbot-small"),Ebr=o(" \u2014 "),nO=a("a"),ybr=o("FlaxBlenderbotSmallForConditionalGeneration"),wbr=o(" (BlenderbotSmall model)"),Abr=l(),$8=a("li"),Fue=a("strong"),Lbr=o("encoder-decoder"),Bbr=o(" \u2014 "),sO=a("a"),xbr=o("FlaxEncoderDecoderModel"),kbr=o(" (Encoder decoder model)"),Rbr=l(),I8=a("li"),Cue=a("strong"),Sbr=o("marian"),Pbr=o(" \u2014 "),lO=a("a"),$br=o("FlaxMarianMTModel"),Ibr=o(" (Marian model)"),jbr=l(),j8=a("li"),Mue=a("strong"),Nbr=o("mbart"),Dbr=o(" \u2014 "),iO=a("a"),qbr=o("FlaxMBartForConditionalGeneration"),Gbr=o(" (mBART model)"),Obr=l(),N8=a("li"),Eue=a("strong"),Xbr=o("mt5"),zbr=o(" \u2014 "),dO=a("a"),Vbr=o("FlaxMT5ForConditionalGeneration"),Wbr=o(" (mT5 model)"),Qbr=l(),D8=a("li"),yue=a("strong"),Hbr=o("pegasus"),Ubr=o(" \u2014 "),cO=a("a"),Jbr=o("FlaxPegasusForConditionalGeneration"),Ybr=o(" (Pegasus model)"),Kbr=l(),q8=a("li"),wue=a("strong"),Zbr=o("t5"),e5r=o(" \u2014 "),fO=a("a"),o5r=o("FlaxT5ForConditionalGeneration"),r5r=o(" (T5 model)"),t5r=l(),Aue=a("p"),a5r=o("Examples:"),n5r=l(),f(cw.$$.fragment),K0e=l(),Xc=a("h2"),G8=a("a"),Lue=a("span"),f(fw.$$.fragment),s5r=l(),Bue=a("span"),l5r=o("FlaxAutoModelForSequenceClassification"),Z0e=l(),Lr=a("div"),f(mw.$$.fragment),i5r=l(),zc=a("p"),d5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xue=a("code"),c5r=o("from_pretrained()"),f5r=o("class method or the "),kue=a("code"),m5r=o("from_config()"),g5r=o(`class
method.`),h5r=l(),gw=a("p"),p5r=o("This class cannot be instantiated directly using "),Rue=a("code"),_5r=o("__init__()"),u5r=o(" (throws an error)."),b5r=l(),Tt=a("div"),f(hw.$$.fragment),v5r=l(),Sue=a("p"),T5r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F5r=l(),Vc=a("p"),C5r=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),M5r=o("not"),E5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ue=a("code"),y5r=o("from_pretrained()"),w5r=o("to load the model weights."),A5r=l(),Iue=a("p"),L5r=o("Examples:"),B5r=l(),f(pw.$$.fragment),x5r=l(),Bo=a("div"),f(_w.$$.fragment),k5r=l(),jue=a("p"),R5r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),S5r=l(),Cn=a("p"),P5r=o("The model class to instantiate is selected based on the "),Nue=a("code"),$5r=o("model_type"),I5r=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),j5r=o("pretrained_model_name_or_path"),N5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),D5r=o("pretrained_model_name_or_path"),q5r=o(":"),G5r=l(),Te=a("ul"),O8=a("li"),Gue=a("strong"),O5r=o("albert"),X5r=o(" \u2014 "),mO=a("a"),z5r=o("FlaxAlbertForSequenceClassification"),V5r=o(" (ALBERT model)"),W5r=l(),X8=a("li"),Oue=a("strong"),Q5r=o("bart"),H5r=o(" \u2014 "),gO=a("a"),U5r=o("FlaxBartForSequenceClassification"),J5r=o(" (BART model)"),Y5r=l(),z8=a("li"),Xue=a("strong"),K5r=o("bert"),Z5r=o(" \u2014 "),hO=a("a"),e2r=o("FlaxBertForSequenceClassification"),o2r=o(" (BERT model)"),r2r=l(),V8=a("li"),zue=a("strong"),t2r=o("big_bird"),a2r=o(" \u2014 "),pO=a("a"),n2r=o("FlaxBigBirdForSequenceClassification"),s2r=o(" (BigBird model)"),l2r=l(),W8=a("li"),Vue=a("strong"),i2r=o("distilbert"),d2r=o(" \u2014 "),_O=a("a"),c2r=o("FlaxDistilBertForSequenceClassification"),f2r=o(" (DistilBERT model)"),m2r=l(),Q8=a("li"),Wue=a("strong"),g2r=o("electra"),h2r=o(" \u2014 "),uO=a("a"),p2r=o("FlaxElectraForSequenceClassification"),_2r=o(" (ELECTRA model)"),u2r=l(),H8=a("li"),Que=a("strong"),b2r=o("mbart"),v2r=o(" \u2014 "),bO=a("a"),T2r=o("FlaxMBartForSequenceClassification"),F2r=o(" (mBART model)"),C2r=l(),U8=a("li"),Hue=a("strong"),M2r=o("roberta"),E2r=o(" \u2014 "),vO=a("a"),y2r=o("FlaxRobertaForSequenceClassification"),w2r=o(" (RoBERTa model)"),A2r=l(),J8=a("li"),Uue=a("strong"),L2r=o("roformer"),B2r=o(" \u2014 "),TO=a("a"),x2r=o("FlaxRoFormerForSequenceClassification"),k2r=o(" (RoFormer model)"),R2r=l(),Jue=a("p"),S2r=o("Examples:"),P2r=l(),f(uw.$$.fragment),eLe=l(),Wc=a("h2"),Y8=a("a"),Yue=a("span"),f(bw.$$.fragment),$2r=l(),Kue=a("span"),I2r=o("FlaxAutoModelForQuestionAnswering"),oLe=l(),Br=a("div"),f(vw.$$.fragment),j2r=l(),Qc=a("p"),N2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zue=a("code"),D2r=o("from_pretrained()"),q2r=o("class method or the "),e1e=a("code"),G2r=o("from_config()"),O2r=o(`class
method.`),X2r=l(),Tw=a("p"),z2r=o("This class cannot be instantiated directly using "),o1e=a("code"),V2r=o("__init__()"),W2r=o(" (throws an error)."),Q2r=l(),Ft=a("div"),f(Fw.$$.fragment),H2r=l(),r1e=a("p"),U2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J2r=l(),Hc=a("p"),Y2r=o(`Note:
Loading a model from its configuration file does `),t1e=a("strong"),K2r=o("not"),Z2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a1e=a("code"),evr=o("from_pretrained()"),ovr=o("to load the model weights."),rvr=l(),n1e=a("p"),tvr=o("Examples:"),avr=l(),f(Cw.$$.fragment),nvr=l(),xo=a("div"),f(Mw.$$.fragment),svr=l(),s1e=a("p"),lvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ivr=l(),Mn=a("p"),dvr=o("The model class to instantiate is selected based on the "),l1e=a("code"),cvr=o("model_type"),fvr=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),mvr=o("pretrained_model_name_or_path"),gvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),hvr=o("pretrained_model_name_or_path"),pvr=o(":"),_vr=l(),Fe=a("ul"),K8=a("li"),c1e=a("strong"),uvr=o("albert"),bvr=o(" \u2014 "),FO=a("a"),vvr=o("FlaxAlbertForQuestionAnswering"),Tvr=o(" (ALBERT model)"),Fvr=l(),Z8=a("li"),f1e=a("strong"),Cvr=o("bart"),Mvr=o(" \u2014 "),CO=a("a"),Evr=o("FlaxBartForQuestionAnswering"),yvr=o(" (BART model)"),wvr=l(),eF=a("li"),m1e=a("strong"),Avr=o("bert"),Lvr=o(" \u2014 "),MO=a("a"),Bvr=o("FlaxBertForQuestionAnswering"),xvr=o(" (BERT model)"),kvr=l(),oF=a("li"),g1e=a("strong"),Rvr=o("big_bird"),Svr=o(" \u2014 "),EO=a("a"),Pvr=o("FlaxBigBirdForQuestionAnswering"),$vr=o(" (BigBird model)"),Ivr=l(),rF=a("li"),h1e=a("strong"),jvr=o("distilbert"),Nvr=o(" \u2014 "),yO=a("a"),Dvr=o("FlaxDistilBertForQuestionAnswering"),qvr=o(" (DistilBERT model)"),Gvr=l(),tF=a("li"),p1e=a("strong"),Ovr=o("electra"),Xvr=o(" \u2014 "),wO=a("a"),zvr=o("FlaxElectraForQuestionAnswering"),Vvr=o(" (ELECTRA model)"),Wvr=l(),aF=a("li"),_1e=a("strong"),Qvr=o("mbart"),Hvr=o(" \u2014 "),AO=a("a"),Uvr=o("FlaxMBartForQuestionAnswering"),Jvr=o(" (mBART model)"),Yvr=l(),nF=a("li"),u1e=a("strong"),Kvr=o("roberta"),Zvr=o(" \u2014 "),LO=a("a"),e6r=o("FlaxRobertaForQuestionAnswering"),o6r=o(" (RoBERTa model)"),r6r=l(),sF=a("li"),b1e=a("strong"),t6r=o("roformer"),a6r=o(" \u2014 "),BO=a("a"),n6r=o("FlaxRoFormerForQuestionAnswering"),s6r=o(" (RoFormer model)"),l6r=l(),v1e=a("p"),i6r=o("Examples:"),d6r=l(),f(Ew.$$.fragment),rLe=l(),Uc=a("h2"),lF=a("a"),T1e=a("span"),f(yw.$$.fragment),c6r=l(),F1e=a("span"),f6r=o("FlaxAutoModelForTokenClassification"),tLe=l(),xr=a("div"),f(ww.$$.fragment),m6r=l(),Jc=a("p"),g6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),C1e=a("code"),h6r=o("from_pretrained()"),p6r=o("class method or the "),M1e=a("code"),_6r=o("from_config()"),u6r=o(`class
method.`),b6r=l(),Aw=a("p"),v6r=o("This class cannot be instantiated directly using "),E1e=a("code"),T6r=o("__init__()"),F6r=o(" (throws an error)."),C6r=l(),Ct=a("div"),f(Lw.$$.fragment),M6r=l(),y1e=a("p"),E6r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y6r=l(),Yc=a("p"),w6r=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),A6r=o("not"),L6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A1e=a("code"),B6r=o("from_pretrained()"),x6r=o("to load the model weights."),k6r=l(),L1e=a("p"),R6r=o("Examples:"),S6r=l(),f(Bw.$$.fragment),P6r=l(),ko=a("div"),f(xw.$$.fragment),$6r=l(),B1e=a("p"),I6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j6r=l(),En=a("p"),N6r=o("The model class to instantiate is selected based on the "),x1e=a("code"),D6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),k1e=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),X6r=o("pretrained_model_name_or_path"),z6r=o(":"),V6r=l(),ao=a("ul"),iF=a("li"),S1e=a("strong"),W6r=o("albert"),Q6r=o(" \u2014 "),xO=a("a"),H6r=o("FlaxAlbertForTokenClassification"),U6r=o(" (ALBERT model)"),J6r=l(),dF=a("li"),P1e=a("strong"),Y6r=o("bert"),K6r=o(" \u2014 "),kO=a("a"),Z6r=o("FlaxBertForTokenClassification"),eTr=o(" (BERT model)"),oTr=l(),cF=a("li"),$1e=a("strong"),rTr=o("big_bird"),tTr=o(" \u2014 "),RO=a("a"),aTr=o("FlaxBigBirdForTokenClassification"),nTr=o(" (BigBird model)"),sTr=l(),fF=a("li"),I1e=a("strong"),lTr=o("distilbert"),iTr=o(" \u2014 "),SO=a("a"),dTr=o("FlaxDistilBertForTokenClassification"),cTr=o(" (DistilBERT model)"),fTr=l(),mF=a("li"),j1e=a("strong"),mTr=o("electra"),gTr=o(" \u2014 "),PO=a("a"),hTr=o("FlaxElectraForTokenClassification"),pTr=o(" (ELECTRA model)"),_Tr=l(),gF=a("li"),N1e=a("strong"),uTr=o("roberta"),bTr=o(" \u2014 "),$O=a("a"),vTr=o("FlaxRobertaForTokenClassification"),TTr=o(" (RoBERTa model)"),FTr=l(),hF=a("li"),D1e=a("strong"),CTr=o("roformer"),MTr=o(" \u2014 "),IO=a("a"),ETr=o("FlaxRoFormerForTokenClassification"),yTr=o(" (RoFormer model)"),wTr=l(),q1e=a("p"),ATr=o("Examples:"),LTr=l(),f(kw.$$.fragment),aLe=l(),Kc=a("h2"),pF=a("a"),G1e=a("span"),f(Rw.$$.fragment),BTr=l(),O1e=a("span"),xTr=o("FlaxAutoModelForMultipleChoice"),nLe=l(),kr=a("div"),f(Sw.$$.fragment),kTr=l(),Zc=a("p"),RTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),X1e=a("code"),STr=o("from_pretrained()"),PTr=o("class method or the "),z1e=a("code"),$Tr=o("from_config()"),ITr=o(`class
method.`),jTr=l(),Pw=a("p"),NTr=o("This class cannot be instantiated directly using "),V1e=a("code"),DTr=o("__init__()"),qTr=o(" (throws an error)."),GTr=l(),Mt=a("div"),f($w.$$.fragment),OTr=l(),W1e=a("p"),XTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zTr=l(),ef=a("p"),VTr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),WTr=o("not"),QTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H1e=a("code"),HTr=o("from_pretrained()"),UTr=o("to load the model weights."),JTr=l(),U1e=a("p"),YTr=o("Examples:"),KTr=l(),f(Iw.$$.fragment),ZTr=l(),Ro=a("div"),f(jw.$$.fragment),e7r=l(),J1e=a("p"),o7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r7r=l(),yn=a("p"),t7r=o("The model class to instantiate is selected based on the "),Y1e=a("code"),a7r=o("model_type"),n7r=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),s7r=o("pretrained_model_name_or_path"),l7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),i7r=o("pretrained_model_name_or_path"),d7r=o(":"),c7r=l(),no=a("ul"),_F=a("li"),ebe=a("strong"),f7r=o("albert"),m7r=o(" \u2014 "),jO=a("a"),g7r=o("FlaxAlbertForMultipleChoice"),h7r=o(" (ALBERT model)"),p7r=l(),uF=a("li"),obe=a("strong"),_7r=o("bert"),u7r=o(" \u2014 "),NO=a("a"),b7r=o("FlaxBertForMultipleChoice"),v7r=o(" (BERT model)"),T7r=l(),bF=a("li"),rbe=a("strong"),F7r=o("big_bird"),C7r=o(" \u2014 "),DO=a("a"),M7r=o("FlaxBigBirdForMultipleChoice"),E7r=o(" (BigBird model)"),y7r=l(),vF=a("li"),tbe=a("strong"),w7r=o("distilbert"),A7r=o(" \u2014 "),qO=a("a"),L7r=o("FlaxDistilBertForMultipleChoice"),B7r=o(" (DistilBERT model)"),x7r=l(),TF=a("li"),abe=a("strong"),k7r=o("electra"),R7r=o(" \u2014 "),GO=a("a"),S7r=o("FlaxElectraForMultipleChoice"),P7r=o(" (ELECTRA model)"),$7r=l(),FF=a("li"),nbe=a("strong"),I7r=o("roberta"),j7r=o(" \u2014 "),OO=a("a"),N7r=o("FlaxRobertaForMultipleChoice"),D7r=o(" (RoBERTa model)"),q7r=l(),CF=a("li"),sbe=a("strong"),G7r=o("roformer"),O7r=o(" \u2014 "),XO=a("a"),X7r=o("FlaxRoFormerForMultipleChoice"),z7r=o(" (RoFormer model)"),V7r=l(),lbe=a("p"),W7r=o("Examples:"),Q7r=l(),f(Nw.$$.fragment),sLe=l(),of=a("h2"),MF=a("a"),ibe=a("span"),f(Dw.$$.fragment),H7r=l(),dbe=a("span"),U7r=o("FlaxAutoModelForNextSentencePrediction"),lLe=l(),Rr=a("div"),f(qw.$$.fragment),J7r=l(),rf=a("p"),Y7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cbe=a("code"),K7r=o("from_pretrained()"),Z7r=o("class method or the "),fbe=a("code"),e8r=o("from_config()"),o8r=o(`class
method.`),r8r=l(),Gw=a("p"),t8r=o("This class cannot be instantiated directly using "),mbe=a("code"),a8r=o("__init__()"),n8r=o(" (throws an error)."),s8r=l(),Et=a("div"),f(Ow.$$.fragment),l8r=l(),gbe=a("p"),i8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),d8r=l(),tf=a("p"),c8r=o(`Note:
Loading a model from its configuration file does `),hbe=a("strong"),f8r=o("not"),m8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pbe=a("code"),g8r=o("from_pretrained()"),h8r=o("to load the model weights."),p8r=l(),_be=a("p"),_8r=o("Examples:"),u8r=l(),f(Xw.$$.fragment),b8r=l(),So=a("div"),f(zw.$$.fragment),v8r=l(),ube=a("p"),T8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),F8r=l(),wn=a("p"),C8r=o("The model class to instantiate is selected based on the "),bbe=a("code"),M8r=o("model_type"),E8r=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),y8r=o("pretrained_model_name_or_path"),w8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),A8r=o("pretrained_model_name_or_path"),L8r=o(":"),B8r=l(),Fbe=a("ul"),EF=a("li"),Cbe=a("strong"),x8r=o("bert"),k8r=o(" \u2014 "),zO=a("a"),R8r=o("FlaxBertForNextSentencePrediction"),S8r=o(" (BERT model)"),P8r=l(),Mbe=a("p"),$8r=o("Examples:"),I8r=l(),f(Vw.$$.fragment),iLe=l(),af=a("h2"),yF=a("a"),Ebe=a("span"),f(Ww.$$.fragment),j8r=l(),ybe=a("span"),N8r=o("FlaxAutoModelForImageClassification"),dLe=l(),Sr=a("div"),f(Qw.$$.fragment),D8r=l(),nf=a("p"),q8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wbe=a("code"),G8r=o("from_pretrained()"),O8r=o("class method or the "),Abe=a("code"),X8r=o("from_config()"),z8r=o(`class
method.`),V8r=l(),Hw=a("p"),W8r=o("This class cannot be instantiated directly using "),Lbe=a("code"),Q8r=o("__init__()"),H8r=o(" (throws an error)."),U8r=l(),yt=a("div"),f(Uw.$$.fragment),J8r=l(),Bbe=a("p"),Y8r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),K8r=l(),sf=a("p"),Z8r=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),eFr=o("not"),oFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kbe=a("code"),rFr=o("from_pretrained()"),tFr=o("to load the model weights."),aFr=l(),Rbe=a("p"),nFr=o("Examples:"),sFr=l(),f(Jw.$$.fragment),lFr=l(),Po=a("div"),f(Yw.$$.fragment),iFr=l(),Sbe=a("p"),dFr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cFr=l(),An=a("p"),fFr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),mFr=o("model_type"),gFr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),hFr=o("pretrained_model_name_or_path"),pFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),_Fr=o("pretrained_model_name_or_path"),uFr=o(":"),bFr=l(),Kw=a("ul"),wF=a("li"),jbe=a("strong"),vFr=o("beit"),TFr=o(" \u2014 "),VO=a("a"),FFr=o("FlaxBeitForImageClassification"),CFr=o(" (BEiT model)"),MFr=l(),AF=a("li"),Nbe=a("strong"),EFr=o("vit"),yFr=o(" \u2014 "),WO=a("a"),wFr=o("FlaxViTForImageClassification"),AFr=o(" (ViT model)"),LFr=l(),Dbe=a("p"),BFr=o("Examples:"),xFr=l(),f(Zw.$$.fragment),cLe=l(),lf=a("h2"),LF=a("a"),qbe=a("span"),f(eA.$$.fragment),kFr=l(),Gbe=a("span"),RFr=o("FlaxAutoModelForVision2Seq"),fLe=l(),Pr=a("div"),f(oA.$$.fragment),SFr=l(),df=a("p"),PFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Obe=a("code"),$Fr=o("from_pretrained()"),IFr=o("class method or the "),Xbe=a("code"),jFr=o("from_config()"),NFr=o(`class
method.`),DFr=l(),rA=a("p"),qFr=o("This class cannot be instantiated directly using "),zbe=a("code"),GFr=o("__init__()"),OFr=o(" (throws an error)."),XFr=l(),wt=a("div"),f(tA.$$.fragment),zFr=l(),Vbe=a("p"),VFr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),WFr=l(),cf=a("p"),QFr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),HFr=o("not"),UFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=a("code"),JFr=o("from_pretrained()"),YFr=o("to load the model weights."),KFr=l(),Hbe=a("p"),ZFr=o("Examples:"),eCr=l(),f(aA.$$.fragment),oCr=l(),$o=a("div"),f(nA.$$.fragment),rCr=l(),Ube=a("p"),tCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aCr=l(),Ln=a("p"),nCr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),sCr=o("model_type"),lCr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),cCr=o("pretrained_model_name_or_path"),fCr=o(":"),mCr=l(),Zbe=a("ul"),BF=a("li"),e5e=a("strong"),gCr=o("vision-encoder-decoder"),hCr=o(" \u2014 "),QO=a("a"),pCr=o("FlaxVisionEncoderDecoderModel"),_Cr=o(" (Vision Encoder decoder model)"),uCr=l(),o5e=a("p"),bCr=o("Examples:"),vCr=l(),f(sA.$$.fragment),this.h()},l(d){const u=Pft('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Ae=i(d),le=n(d,"H1",{class:!0});var lA=s(le);me=n(lA,"A",{id:!0,class:!0,href:!0});var r5e=s(me);oo=n(r5e,"SPAN",{});var t5e=s(oo);m(ce.$$.fragment,t5e),t5e.forEach(t),r5e.forEach(t),ue=i(lA),No=n(lA,"SPAN",{});var FCr=s(No);bi=r(FCr,"Auto Classes"),FCr.forEach(t),lA.forEach(t),mf=i(d),ra=n(d,"P",{});var gLe=s(ra);vi=r(gLe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ti=n(gLe,"CODE",{});var CCr=s(Ti);AC=r(CCr,"from_pretrained()"),CCr.forEach(t),gf=r(gLe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),gLe.forEach(t),Ee=i(d),so=n(d,"P",{});var xF=s(so);Fi=r(xF,"Instantiating one of "),Bn=n(xF,"A",{href:!0});var MCr=s(Bn);LC=r(MCr,"AutoConfig"),MCr.forEach(t),xn=r(xF,", "),kn=n(xF,"A",{href:!0});var ECr=s(kn);BC=r(ECr,"AutoModel"),ECr.forEach(t),Ci=r(xF,`, and
`),Rn=n(xF,"A",{href:!0});var yCr=s(Rn);xC=r(yCr,"AutoTokenizer"),yCr.forEach(t),Mi=r(xF," will directly create a class of the relevant architecture. For instance"),xF.forEach(t),hf=i(d),m(ka.$$.fragment,d),lo=i(d),ge=n(d,"P",{});var hLe=s(ge);t0=r(hLe,"will create a model that is an instance of "),Ei=n(hLe,"A",{href:!0});var wCr=s(Ei);a0=r(wCr,"BertModel"),wCr.forEach(t),n0=r(hLe,"."),hLe.forEach(t),Do=i(d),Ra=n(d,"P",{});var pLe=s(Ra);s0=r(pLe,"There is one class of "),pf=n(pLe,"CODE",{});var ACr=s(pf);l0=r(ACr,"AutoModel"),ACr.forEach(t),vBe=r(pLe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pLe.forEach(t),pAe=i(d),yi=n(d,"H2",{class:!0});var _Le=s(yi);_f=n(_Le,"A",{id:!0,class:!0,href:!0});var LCr=s(_f);jz=n(LCr,"SPAN",{});var BCr=s(jz);m(kC.$$.fragment,BCr),BCr.forEach(t),LCr.forEach(t),TBe=i(_Le),Nz=n(_Le,"SPAN",{});var xCr=s(Nz);FBe=r(xCr,"Extending the Auto Classes"),xCr.forEach(t),_Le.forEach(t),_Ae=i(d),Sn=n(d,"P",{});var HO=s(Sn);CBe=r(HO,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dz=n(HO,"CODE",{});var kCr=s(Dz);MBe=r(kCr,"NewModel"),kCr.forEach(t),EBe=r(HO,", make sure you have a "),qz=n(HO,"CODE",{});var RCr=s(qz);yBe=r(RCr,"NewModelConfig"),RCr.forEach(t),wBe=r(HO,` then you can add those to the auto
classes like this:`),HO.forEach(t),uAe=i(d),m(RC.$$.fragment,d),bAe=i(d),i0=n(d,"P",{});var SCr=s(i0);ABe=r(SCr,"You will then be able to use the auto classes like you would usually do!"),SCr.forEach(t),vAe=i(d),m(uf.$$.fragment,d),TAe=i(d),wi=n(d,"H2",{class:!0});var uLe=s(wi);bf=n(uLe,"A",{id:!0,class:!0,href:!0});var PCr=s(bf);Gz=n(PCr,"SPAN",{});var $Cr=s(Gz);m(SC.$$.fragment,$Cr),$Cr.forEach(t),PCr.forEach(t),LBe=i(uLe),Oz=n(uLe,"SPAN",{});var ICr=s(Oz);BBe=r(ICr,"AutoConfig"),ICr.forEach(t),uLe.forEach(t),FAe=i(d),qo=n(d,"DIV",{class:!0});var Bs=s(qo);m(PC.$$.fragment,Bs),xBe=i(Bs),$C=n(Bs,"P",{});var bLe=s($C);kBe=r(bLe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),d0=n(bLe,"A",{href:!0});var jCr=s(d0);RBe=r(jCr,"from_pretrained()"),jCr.forEach(t),SBe=r(bLe," class method."),bLe.forEach(t),PBe=i(Bs),IC=n(Bs,"P",{});var vLe=s(IC);$Be=r(vLe,"This class cannot be instantiated directly using "),Xz=n(vLe,"CODE",{});var NCr=s(Xz);IBe=r(NCr,"__init__()"),NCr.forEach(t),jBe=r(vLe," (throws an error)."),vLe.forEach(t),NBe=i(Bs),io=n(Bs,"DIV",{class:!0});var aa=s(io);m(jC.$$.fragment,aa),DBe=i(aa),zz=n(aa,"P",{});var DCr=s(zz);qBe=r(DCr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),DCr.forEach(t),GBe=i(aa),Ai=n(aa,"P",{});var UO=s(Ai);OBe=r(UO,"The configuration class to instantiate is selected based on the "),Vz=n(UO,"CODE",{});var qCr=s(Vz);XBe=r(qCr,"model_type"),qCr.forEach(t),zBe=r(UO,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wz=n(UO,"CODE",{});var GCr=s(Wz);VBe=r(GCr,"pretrained_model_name_or_path"),GCr.forEach(t),WBe=r(UO,":"),UO.forEach(t),QBe=i(aa),v=n(aa,"UL",{});var T=s(v);vf=n(T,"LI",{});var a5e=s(vf);Qz=n(a5e,"STRONG",{});var OCr=s(Qz);HBe=r(OCr,"albert"),OCr.forEach(t),UBe=r(a5e," \u2014 "),c0=n(a5e,"A",{href:!0});var XCr=s(c0);JBe=r(XCr,"AlbertConfig"),XCr.forEach(t),YBe=r(a5e," (ALBERT model)"),a5e.forEach(t),KBe=i(T),Tf=n(T,"LI",{});var n5e=s(Tf);Hz=n(n5e,"STRONG",{});var zCr=s(Hz);ZBe=r(zCr,"bart"),zCr.forEach(t),exe=r(n5e," \u2014 "),f0=n(n5e,"A",{href:!0});var VCr=s(f0);oxe=r(VCr,"BartConfig"),VCr.forEach(t),rxe=r(n5e," (BART model)"),n5e.forEach(t),txe=i(T),Ff=n(T,"LI",{});var s5e=s(Ff);Uz=n(s5e,"STRONG",{});var WCr=s(Uz);axe=r(WCr,"beit"),WCr.forEach(t),nxe=r(s5e," \u2014 "),m0=n(s5e,"A",{href:!0});var QCr=s(m0);sxe=r(QCr,"BeitConfig"),QCr.forEach(t),lxe=r(s5e," (BEiT model)"),s5e.forEach(t),ixe=i(T),Cf=n(T,"LI",{});var l5e=s(Cf);Jz=n(l5e,"STRONG",{});var HCr=s(Jz);dxe=r(HCr,"bert"),HCr.forEach(t),cxe=r(l5e," \u2014 "),g0=n(l5e,"A",{href:!0});var UCr=s(g0);fxe=r(UCr,"BertConfig"),UCr.forEach(t),mxe=r(l5e," (BERT model)"),l5e.forEach(t),gxe=i(T),Mf=n(T,"LI",{});var i5e=s(Mf);Yz=n(i5e,"STRONG",{});var JCr=s(Yz);hxe=r(JCr,"bert-generation"),JCr.forEach(t),pxe=r(i5e," \u2014 "),h0=n(i5e,"A",{href:!0});var YCr=s(h0);_xe=r(YCr,"BertGenerationConfig"),YCr.forEach(t),uxe=r(i5e," (Bert Generation model)"),i5e.forEach(t),bxe=i(T),Ef=n(T,"LI",{});var d5e=s(Ef);Kz=n(d5e,"STRONG",{});var KCr=s(Kz);vxe=r(KCr,"big_bird"),KCr.forEach(t),Txe=r(d5e," \u2014 "),p0=n(d5e,"A",{href:!0});var ZCr=s(p0);Fxe=r(ZCr,"BigBirdConfig"),ZCr.forEach(t),Cxe=r(d5e," (BigBird model)"),d5e.forEach(t),Mxe=i(T),yf=n(T,"LI",{});var c5e=s(yf);Zz=n(c5e,"STRONG",{});var e4r=s(Zz);Exe=r(e4r,"bigbird_pegasus"),e4r.forEach(t),yxe=r(c5e," \u2014 "),_0=n(c5e,"A",{href:!0});var o4r=s(_0);wxe=r(o4r,"BigBirdPegasusConfig"),o4r.forEach(t),Axe=r(c5e," (BigBirdPegasus model)"),c5e.forEach(t),Lxe=i(T),wf=n(T,"LI",{});var f5e=s(wf);eV=n(f5e,"STRONG",{});var r4r=s(eV);Bxe=r(r4r,"blenderbot"),r4r.forEach(t),xxe=r(f5e," \u2014 "),u0=n(f5e,"A",{href:!0});var t4r=s(u0);kxe=r(t4r,"BlenderbotConfig"),t4r.forEach(t),Rxe=r(f5e," (Blenderbot model)"),f5e.forEach(t),Sxe=i(T),Af=n(T,"LI",{});var m5e=s(Af);oV=n(m5e,"STRONG",{});var a4r=s(oV);Pxe=r(a4r,"blenderbot-small"),a4r.forEach(t),$xe=r(m5e," \u2014 "),b0=n(m5e,"A",{href:!0});var n4r=s(b0);Ixe=r(n4r,"BlenderbotSmallConfig"),n4r.forEach(t),jxe=r(m5e," (BlenderbotSmall model)"),m5e.forEach(t),Nxe=i(T),Lf=n(T,"LI",{});var g5e=s(Lf);rV=n(g5e,"STRONG",{});var s4r=s(rV);Dxe=r(s4r,"camembert"),s4r.forEach(t),qxe=r(g5e," \u2014 "),v0=n(g5e,"A",{href:!0});var l4r=s(v0);Gxe=r(l4r,"CamembertConfig"),l4r.forEach(t),Oxe=r(g5e," (CamemBERT model)"),g5e.forEach(t),Xxe=i(T),Bf=n(T,"LI",{});var h5e=s(Bf);tV=n(h5e,"STRONG",{});var i4r=s(tV);zxe=r(i4r,"canine"),i4r.forEach(t),Vxe=r(h5e," \u2014 "),T0=n(h5e,"A",{href:!0});var d4r=s(T0);Wxe=r(d4r,"CanineConfig"),d4r.forEach(t),Qxe=r(h5e," (Canine model)"),h5e.forEach(t),Hxe=i(T),xf=n(T,"LI",{});var p5e=s(xf);aV=n(p5e,"STRONG",{});var c4r=s(aV);Uxe=r(c4r,"clip"),c4r.forEach(t),Jxe=r(p5e," \u2014 "),F0=n(p5e,"A",{href:!0});var f4r=s(F0);Yxe=r(f4r,"CLIPConfig"),f4r.forEach(t),Kxe=r(p5e," (CLIP model)"),p5e.forEach(t),Zxe=i(T),kf=n(T,"LI",{});var _5e=s(kf);nV=n(_5e,"STRONG",{});var m4r=s(nV);eke=r(m4r,"convbert"),m4r.forEach(t),oke=r(_5e," \u2014 "),C0=n(_5e,"A",{href:!0});var g4r=s(C0);rke=r(g4r,"ConvBertConfig"),g4r.forEach(t),tke=r(_5e," (ConvBERT model)"),_5e.forEach(t),ake=i(T),Rf=n(T,"LI",{});var u5e=s(Rf);sV=n(u5e,"STRONG",{});var h4r=s(sV);nke=r(h4r,"convnext"),h4r.forEach(t),ske=r(u5e," \u2014 "),M0=n(u5e,"A",{href:!0});var p4r=s(M0);lke=r(p4r,"ConvNextConfig"),p4r.forEach(t),ike=r(u5e," (ConvNext model)"),u5e.forEach(t),dke=i(T),Sf=n(T,"LI",{});var b5e=s(Sf);lV=n(b5e,"STRONG",{});var _4r=s(lV);cke=r(_4r,"ctrl"),_4r.forEach(t),fke=r(b5e," \u2014 "),E0=n(b5e,"A",{href:!0});var u4r=s(E0);mke=r(u4r,"CTRLConfig"),u4r.forEach(t),gke=r(b5e," (CTRL model)"),b5e.forEach(t),hke=i(T),Pf=n(T,"LI",{});var v5e=s(Pf);iV=n(v5e,"STRONG",{});var b4r=s(iV);pke=r(b4r,"deberta"),b4r.forEach(t),_ke=r(v5e," \u2014 "),y0=n(v5e,"A",{href:!0});var v4r=s(y0);uke=r(v4r,"DebertaConfig"),v4r.forEach(t),bke=r(v5e," (DeBERTa model)"),v5e.forEach(t),vke=i(T),$f=n(T,"LI",{});var T5e=s($f);dV=n(T5e,"STRONG",{});var T4r=s(dV);Tke=r(T4r,"deberta-v2"),T4r.forEach(t),Fke=r(T5e," \u2014 "),w0=n(T5e,"A",{href:!0});var F4r=s(w0);Cke=r(F4r,"DebertaV2Config"),F4r.forEach(t),Mke=r(T5e," (DeBERTa-v2 model)"),T5e.forEach(t),Eke=i(T),If=n(T,"LI",{});var F5e=s(If);cV=n(F5e,"STRONG",{});var C4r=s(cV);yke=r(C4r,"deit"),C4r.forEach(t),wke=r(F5e," \u2014 "),A0=n(F5e,"A",{href:!0});var M4r=s(A0);Ake=r(M4r,"DeiTConfig"),M4r.forEach(t),Lke=r(F5e," (DeiT model)"),F5e.forEach(t),Bke=i(T),jf=n(T,"LI",{});var C5e=s(jf);fV=n(C5e,"STRONG",{});var E4r=s(fV);xke=r(E4r,"detr"),E4r.forEach(t),kke=r(C5e," \u2014 "),L0=n(C5e,"A",{href:!0});var y4r=s(L0);Rke=r(y4r,"DetrConfig"),y4r.forEach(t),Ske=r(C5e," (DETR model)"),C5e.forEach(t),Pke=i(T),Nf=n(T,"LI",{});var M5e=s(Nf);mV=n(M5e,"STRONG",{});var w4r=s(mV);$ke=r(w4r,"distilbert"),w4r.forEach(t),Ike=r(M5e," \u2014 "),B0=n(M5e,"A",{href:!0});var A4r=s(B0);jke=r(A4r,"DistilBertConfig"),A4r.forEach(t),Nke=r(M5e," (DistilBERT model)"),M5e.forEach(t),Dke=i(T),Df=n(T,"LI",{});var E5e=s(Df);gV=n(E5e,"STRONG",{});var L4r=s(gV);qke=r(L4r,"dpr"),L4r.forEach(t),Gke=r(E5e," \u2014 "),x0=n(E5e,"A",{href:!0});var B4r=s(x0);Oke=r(B4r,"DPRConfig"),B4r.forEach(t),Xke=r(E5e," (DPR model)"),E5e.forEach(t),zke=i(T),qf=n(T,"LI",{});var y5e=s(qf);hV=n(y5e,"STRONG",{});var x4r=s(hV);Vke=r(x4r,"electra"),x4r.forEach(t),Wke=r(y5e," \u2014 "),k0=n(y5e,"A",{href:!0});var k4r=s(k0);Qke=r(k4r,"ElectraConfig"),k4r.forEach(t),Hke=r(y5e," (ELECTRA model)"),y5e.forEach(t),Uke=i(T),Gf=n(T,"LI",{});var w5e=s(Gf);pV=n(w5e,"STRONG",{});var R4r=s(pV);Jke=r(R4r,"encoder-decoder"),R4r.forEach(t),Yke=r(w5e," \u2014 "),R0=n(w5e,"A",{href:!0});var S4r=s(R0);Kke=r(S4r,"EncoderDecoderConfig"),S4r.forEach(t),Zke=r(w5e," (Encoder decoder model)"),w5e.forEach(t),eRe=i(T),Of=n(T,"LI",{});var A5e=s(Of);_V=n(A5e,"STRONG",{});var P4r=s(_V);oRe=r(P4r,"flaubert"),P4r.forEach(t),rRe=r(A5e," \u2014 "),S0=n(A5e,"A",{href:!0});var $4r=s(S0);tRe=r($4r,"FlaubertConfig"),$4r.forEach(t),aRe=r(A5e," (FlauBERT model)"),A5e.forEach(t),nRe=i(T),Xf=n(T,"LI",{});var L5e=s(Xf);uV=n(L5e,"STRONG",{});var I4r=s(uV);sRe=r(I4r,"fnet"),I4r.forEach(t),lRe=r(L5e," \u2014 "),P0=n(L5e,"A",{href:!0});var j4r=s(P0);iRe=r(j4r,"FNetConfig"),j4r.forEach(t),dRe=r(L5e," (FNet model)"),L5e.forEach(t),cRe=i(T),zf=n(T,"LI",{});var B5e=s(zf);bV=n(B5e,"STRONG",{});var N4r=s(bV);fRe=r(N4r,"fsmt"),N4r.forEach(t),mRe=r(B5e," \u2014 "),$0=n(B5e,"A",{href:!0});var D4r=s($0);gRe=r(D4r,"FSMTConfig"),D4r.forEach(t),hRe=r(B5e," (FairSeq Machine-Translation model)"),B5e.forEach(t),pRe=i(T),Vf=n(T,"LI",{});var x5e=s(Vf);vV=n(x5e,"STRONG",{});var q4r=s(vV);_Re=r(q4r,"funnel"),q4r.forEach(t),uRe=r(x5e," \u2014 "),I0=n(x5e,"A",{href:!0});var G4r=s(I0);bRe=r(G4r,"FunnelConfig"),G4r.forEach(t),vRe=r(x5e," (Funnel Transformer model)"),x5e.forEach(t),TRe=i(T),Wf=n(T,"LI",{});var k5e=s(Wf);TV=n(k5e,"STRONG",{});var O4r=s(TV);FRe=r(O4r,"gpt2"),O4r.forEach(t),CRe=r(k5e," \u2014 "),j0=n(k5e,"A",{href:!0});var X4r=s(j0);MRe=r(X4r,"GPT2Config"),X4r.forEach(t),ERe=r(k5e," (OpenAI GPT-2 model)"),k5e.forEach(t),yRe=i(T),Qf=n(T,"LI",{});var R5e=s(Qf);FV=n(R5e,"STRONG",{});var z4r=s(FV);wRe=r(z4r,"gpt_neo"),z4r.forEach(t),ARe=r(R5e," \u2014 "),N0=n(R5e,"A",{href:!0});var V4r=s(N0);LRe=r(V4r,"GPTNeoConfig"),V4r.forEach(t),BRe=r(R5e," (GPT Neo model)"),R5e.forEach(t),xRe=i(T),Hf=n(T,"LI",{});var S5e=s(Hf);CV=n(S5e,"STRONG",{});var W4r=s(CV);kRe=r(W4r,"gptj"),W4r.forEach(t),RRe=r(S5e," \u2014 "),D0=n(S5e,"A",{href:!0});var Q4r=s(D0);SRe=r(Q4r,"GPTJConfig"),Q4r.forEach(t),PRe=r(S5e," (GPT-J model)"),S5e.forEach(t),$Re=i(T),Uf=n(T,"LI",{});var P5e=s(Uf);MV=n(P5e,"STRONG",{});var H4r=s(MV);IRe=r(H4r,"hubert"),H4r.forEach(t),jRe=r(P5e," \u2014 "),q0=n(P5e,"A",{href:!0});var U4r=s(q0);NRe=r(U4r,"HubertConfig"),U4r.forEach(t),DRe=r(P5e," (Hubert model)"),P5e.forEach(t),qRe=i(T),Jf=n(T,"LI",{});var $5e=s(Jf);EV=n($5e,"STRONG",{});var J4r=s(EV);GRe=r(J4r,"ibert"),J4r.forEach(t),ORe=r($5e," \u2014 "),G0=n($5e,"A",{href:!0});var Y4r=s(G0);XRe=r(Y4r,"IBertConfig"),Y4r.forEach(t),zRe=r($5e," (I-BERT model)"),$5e.forEach(t),VRe=i(T),Yf=n(T,"LI",{});var I5e=s(Yf);yV=n(I5e,"STRONG",{});var K4r=s(yV);WRe=r(K4r,"imagegpt"),K4r.forEach(t),QRe=r(I5e," \u2014 "),O0=n(I5e,"A",{href:!0});var Z4r=s(O0);HRe=r(Z4r,"ImageGPTConfig"),Z4r.forEach(t),URe=r(I5e," (ImageGPT model)"),I5e.forEach(t),JRe=i(T),Kf=n(T,"LI",{});var j5e=s(Kf);wV=n(j5e,"STRONG",{});var eMr=s(wV);YRe=r(eMr,"layoutlm"),eMr.forEach(t),KRe=r(j5e," \u2014 "),X0=n(j5e,"A",{href:!0});var oMr=s(X0);ZRe=r(oMr,"LayoutLMConfig"),oMr.forEach(t),eSe=r(j5e," (LayoutLM model)"),j5e.forEach(t),oSe=i(T),Zf=n(T,"LI",{});var N5e=s(Zf);AV=n(N5e,"STRONG",{});var rMr=s(AV);rSe=r(rMr,"layoutlmv2"),rMr.forEach(t),tSe=r(N5e," \u2014 "),z0=n(N5e,"A",{href:!0});var tMr=s(z0);aSe=r(tMr,"LayoutLMv2Config"),tMr.forEach(t),nSe=r(N5e," (LayoutLMv2 model)"),N5e.forEach(t),sSe=i(T),em=n(T,"LI",{});var D5e=s(em);LV=n(D5e,"STRONG",{});var aMr=s(LV);lSe=r(aMr,"led"),aMr.forEach(t),iSe=r(D5e," \u2014 "),V0=n(D5e,"A",{href:!0});var nMr=s(V0);dSe=r(nMr,"LEDConfig"),nMr.forEach(t),cSe=r(D5e," (LED model)"),D5e.forEach(t),fSe=i(T),om=n(T,"LI",{});var q5e=s(om);BV=n(q5e,"STRONG",{});var sMr=s(BV);mSe=r(sMr,"longformer"),sMr.forEach(t),gSe=r(q5e," \u2014 "),W0=n(q5e,"A",{href:!0});var lMr=s(W0);hSe=r(lMr,"LongformerConfig"),lMr.forEach(t),pSe=r(q5e," (Longformer model)"),q5e.forEach(t),_Se=i(T),rm=n(T,"LI",{});var G5e=s(rm);xV=n(G5e,"STRONG",{});var iMr=s(xV);uSe=r(iMr,"luke"),iMr.forEach(t),bSe=r(G5e," \u2014 "),Q0=n(G5e,"A",{href:!0});var dMr=s(Q0);vSe=r(dMr,"LukeConfig"),dMr.forEach(t),TSe=r(G5e," (LUKE model)"),G5e.forEach(t),FSe=i(T),tm=n(T,"LI",{});var O5e=s(tm);kV=n(O5e,"STRONG",{});var cMr=s(kV);CSe=r(cMr,"lxmert"),cMr.forEach(t),MSe=r(O5e," \u2014 "),H0=n(O5e,"A",{href:!0});var fMr=s(H0);ESe=r(fMr,"LxmertConfig"),fMr.forEach(t),ySe=r(O5e," (LXMERT model)"),O5e.forEach(t),wSe=i(T),am=n(T,"LI",{});var X5e=s(am);RV=n(X5e,"STRONG",{});var mMr=s(RV);ASe=r(mMr,"m2m_100"),mMr.forEach(t),LSe=r(X5e," \u2014 "),U0=n(X5e,"A",{href:!0});var gMr=s(U0);BSe=r(gMr,"M2M100Config"),gMr.forEach(t),xSe=r(X5e," (M2M100 model)"),X5e.forEach(t),kSe=i(T),nm=n(T,"LI",{});var z5e=s(nm);SV=n(z5e,"STRONG",{});var hMr=s(SV);RSe=r(hMr,"marian"),hMr.forEach(t),SSe=r(z5e," \u2014 "),J0=n(z5e,"A",{href:!0});var pMr=s(J0);PSe=r(pMr,"MarianConfig"),pMr.forEach(t),$Se=r(z5e," (Marian model)"),z5e.forEach(t),ISe=i(T),sm=n(T,"LI",{});var V5e=s(sm);PV=n(V5e,"STRONG",{});var _Mr=s(PV);jSe=r(_Mr,"mbart"),_Mr.forEach(t),NSe=r(V5e," \u2014 "),Y0=n(V5e,"A",{href:!0});var uMr=s(Y0);DSe=r(uMr,"MBartConfig"),uMr.forEach(t),qSe=r(V5e," (mBART model)"),V5e.forEach(t),GSe=i(T),lm=n(T,"LI",{});var W5e=s(lm);$V=n(W5e,"STRONG",{});var bMr=s($V);OSe=r(bMr,"megatron-bert"),bMr.forEach(t),XSe=r(W5e," \u2014 "),K0=n(W5e,"A",{href:!0});var vMr=s(K0);zSe=r(vMr,"MegatronBertConfig"),vMr.forEach(t),VSe=r(W5e," (MegatronBert model)"),W5e.forEach(t),WSe=i(T),im=n(T,"LI",{});var Q5e=s(im);IV=n(Q5e,"STRONG",{});var TMr=s(IV);QSe=r(TMr,"mobilebert"),TMr.forEach(t),HSe=r(Q5e," \u2014 "),Z0=n(Q5e,"A",{href:!0});var FMr=s(Z0);USe=r(FMr,"MobileBertConfig"),FMr.forEach(t),JSe=r(Q5e," (MobileBERT model)"),Q5e.forEach(t),YSe=i(T),dm=n(T,"LI",{});var H5e=s(dm);jV=n(H5e,"STRONG",{});var CMr=s(jV);KSe=r(CMr,"mpnet"),CMr.forEach(t),ZSe=r(H5e," \u2014 "),eL=n(H5e,"A",{href:!0});var MMr=s(eL);ePe=r(MMr,"MPNetConfig"),MMr.forEach(t),oPe=r(H5e," (MPNet model)"),H5e.forEach(t),rPe=i(T),cm=n(T,"LI",{});var U5e=s(cm);NV=n(U5e,"STRONG",{});var EMr=s(NV);tPe=r(EMr,"mt5"),EMr.forEach(t),aPe=r(U5e," \u2014 "),oL=n(U5e,"A",{href:!0});var yMr=s(oL);nPe=r(yMr,"MT5Config"),yMr.forEach(t),sPe=r(U5e," (mT5 model)"),U5e.forEach(t),lPe=i(T),fm=n(T,"LI",{});var J5e=s(fm);DV=n(J5e,"STRONG",{});var wMr=s(DV);iPe=r(wMr,"nystromformer"),wMr.forEach(t),dPe=r(J5e," \u2014 "),rL=n(J5e,"A",{href:!0});var AMr=s(rL);cPe=r(AMr,"NystromformerConfig"),AMr.forEach(t),fPe=r(J5e," (Nystromformer model)"),J5e.forEach(t),mPe=i(T),mm=n(T,"LI",{});var Y5e=s(mm);qV=n(Y5e,"STRONG",{});var LMr=s(qV);gPe=r(LMr,"openai-gpt"),LMr.forEach(t),hPe=r(Y5e," \u2014 "),tL=n(Y5e,"A",{href:!0});var BMr=s(tL);pPe=r(BMr,"OpenAIGPTConfig"),BMr.forEach(t),_Pe=r(Y5e," (OpenAI GPT model)"),Y5e.forEach(t),uPe=i(T),gm=n(T,"LI",{});var K5e=s(gm);GV=n(K5e,"STRONG",{});var xMr=s(GV);bPe=r(xMr,"pegasus"),xMr.forEach(t),vPe=r(K5e," \u2014 "),aL=n(K5e,"A",{href:!0});var kMr=s(aL);TPe=r(kMr,"PegasusConfig"),kMr.forEach(t),FPe=r(K5e," (Pegasus model)"),K5e.forEach(t),CPe=i(T),hm=n(T,"LI",{});var Z5e=s(hm);OV=n(Z5e,"STRONG",{});var RMr=s(OV);MPe=r(RMr,"perceiver"),RMr.forEach(t),EPe=r(Z5e," \u2014 "),nL=n(Z5e,"A",{href:!0});var SMr=s(nL);yPe=r(SMr,"PerceiverConfig"),SMr.forEach(t),wPe=r(Z5e," (Perceiver model)"),Z5e.forEach(t),APe=i(T),pm=n(T,"LI",{});var e2e=s(pm);XV=n(e2e,"STRONG",{});var PMr=s(XV);LPe=r(PMr,"prophetnet"),PMr.forEach(t),BPe=r(e2e," \u2014 "),sL=n(e2e,"A",{href:!0});var $Mr=s(sL);xPe=r($Mr,"ProphetNetConfig"),$Mr.forEach(t),kPe=r(e2e," (ProphetNet model)"),e2e.forEach(t),RPe=i(T),_m=n(T,"LI",{});var o2e=s(_m);zV=n(o2e,"STRONG",{});var IMr=s(zV);SPe=r(IMr,"qdqbert"),IMr.forEach(t),PPe=r(o2e," \u2014 "),lL=n(o2e,"A",{href:!0});var jMr=s(lL);$Pe=r(jMr,"QDQBertConfig"),jMr.forEach(t),IPe=r(o2e," (QDQBert model)"),o2e.forEach(t),jPe=i(T),um=n(T,"LI",{});var r2e=s(um);VV=n(r2e,"STRONG",{});var NMr=s(VV);NPe=r(NMr,"rag"),NMr.forEach(t),DPe=r(r2e," \u2014 "),iL=n(r2e,"A",{href:!0});var DMr=s(iL);qPe=r(DMr,"RagConfig"),DMr.forEach(t),GPe=r(r2e," (RAG model)"),r2e.forEach(t),OPe=i(T),bm=n(T,"LI",{});var t2e=s(bm);WV=n(t2e,"STRONG",{});var qMr=s(WV);XPe=r(qMr,"realm"),qMr.forEach(t),zPe=r(t2e," \u2014 "),dL=n(t2e,"A",{href:!0});var GMr=s(dL);VPe=r(GMr,"RealmConfig"),GMr.forEach(t),WPe=r(t2e," (Realm model)"),t2e.forEach(t),QPe=i(T),vm=n(T,"LI",{});var a2e=s(vm);QV=n(a2e,"STRONG",{});var OMr=s(QV);HPe=r(OMr,"reformer"),OMr.forEach(t),UPe=r(a2e," \u2014 "),cL=n(a2e,"A",{href:!0});var XMr=s(cL);JPe=r(XMr,"ReformerConfig"),XMr.forEach(t),YPe=r(a2e," (Reformer model)"),a2e.forEach(t),KPe=i(T),Tm=n(T,"LI",{});var n2e=s(Tm);HV=n(n2e,"STRONG",{});var zMr=s(HV);ZPe=r(zMr,"rembert"),zMr.forEach(t),e$e=r(n2e," \u2014 "),fL=n(n2e,"A",{href:!0});var VMr=s(fL);o$e=r(VMr,"RemBertConfig"),VMr.forEach(t),r$e=r(n2e," (RemBERT model)"),n2e.forEach(t),t$e=i(T),Fm=n(T,"LI",{});var s2e=s(Fm);UV=n(s2e,"STRONG",{});var WMr=s(UV);a$e=r(WMr,"retribert"),WMr.forEach(t),n$e=r(s2e," \u2014 "),mL=n(s2e,"A",{href:!0});var QMr=s(mL);s$e=r(QMr,"RetriBertConfig"),QMr.forEach(t),l$e=r(s2e," (RetriBERT model)"),s2e.forEach(t),i$e=i(T),Cm=n(T,"LI",{});var l2e=s(Cm);JV=n(l2e,"STRONG",{});var HMr=s(JV);d$e=r(HMr,"roberta"),HMr.forEach(t),c$e=r(l2e," \u2014 "),gL=n(l2e,"A",{href:!0});var UMr=s(gL);f$e=r(UMr,"RobertaConfig"),UMr.forEach(t),m$e=r(l2e," (RoBERTa model)"),l2e.forEach(t),g$e=i(T),Mm=n(T,"LI",{});var i2e=s(Mm);YV=n(i2e,"STRONG",{});var JMr=s(YV);h$e=r(JMr,"roformer"),JMr.forEach(t),p$e=r(i2e," \u2014 "),hL=n(i2e,"A",{href:!0});var YMr=s(hL);_$e=r(YMr,"RoFormerConfig"),YMr.forEach(t),u$e=r(i2e," (RoFormer model)"),i2e.forEach(t),b$e=i(T),Em=n(T,"LI",{});var d2e=s(Em);KV=n(d2e,"STRONG",{});var KMr=s(KV);v$e=r(KMr,"segformer"),KMr.forEach(t),T$e=r(d2e," \u2014 "),pL=n(d2e,"A",{href:!0});var ZMr=s(pL);F$e=r(ZMr,"SegformerConfig"),ZMr.forEach(t),C$e=r(d2e," (SegFormer model)"),d2e.forEach(t),M$e=i(T),ym=n(T,"LI",{});var c2e=s(ym);ZV=n(c2e,"STRONG",{});var eEr=s(ZV);E$e=r(eEr,"sew"),eEr.forEach(t),y$e=r(c2e," \u2014 "),_L=n(c2e,"A",{href:!0});var oEr=s(_L);w$e=r(oEr,"SEWConfig"),oEr.forEach(t),A$e=r(c2e," (SEW model)"),c2e.forEach(t),L$e=i(T),wm=n(T,"LI",{});var f2e=s(wm);eW=n(f2e,"STRONG",{});var rEr=s(eW);B$e=r(rEr,"sew-d"),rEr.forEach(t),x$e=r(f2e," \u2014 "),uL=n(f2e,"A",{href:!0});var tEr=s(uL);k$e=r(tEr,"SEWDConfig"),tEr.forEach(t),R$e=r(f2e," (SEW-D model)"),f2e.forEach(t),S$e=i(T),Am=n(T,"LI",{});var m2e=s(Am);oW=n(m2e,"STRONG",{});var aEr=s(oW);P$e=r(aEr,"speech-encoder-decoder"),aEr.forEach(t),$$e=r(m2e," \u2014 "),bL=n(m2e,"A",{href:!0});var nEr=s(bL);I$e=r(nEr,"SpeechEncoderDecoderConfig"),nEr.forEach(t),j$e=r(m2e," (Speech Encoder decoder model)"),m2e.forEach(t),N$e=i(T),Lm=n(T,"LI",{});var g2e=s(Lm);rW=n(g2e,"STRONG",{});var sEr=s(rW);D$e=r(sEr,"speech_to_text"),sEr.forEach(t),q$e=r(g2e," \u2014 "),vL=n(g2e,"A",{href:!0});var lEr=s(vL);G$e=r(lEr,"Speech2TextConfig"),lEr.forEach(t),O$e=r(g2e," (Speech2Text model)"),g2e.forEach(t),X$e=i(T),Bm=n(T,"LI",{});var h2e=s(Bm);tW=n(h2e,"STRONG",{});var iEr=s(tW);z$e=r(iEr,"speech_to_text_2"),iEr.forEach(t),V$e=r(h2e," \u2014 "),TL=n(h2e,"A",{href:!0});var dEr=s(TL);W$e=r(dEr,"Speech2Text2Config"),dEr.forEach(t),Q$e=r(h2e," (Speech2Text2 model)"),h2e.forEach(t),H$e=i(T),xm=n(T,"LI",{});var p2e=s(xm);aW=n(p2e,"STRONG",{});var cEr=s(aW);U$e=r(cEr,"splinter"),cEr.forEach(t),J$e=r(p2e," \u2014 "),FL=n(p2e,"A",{href:!0});var fEr=s(FL);Y$e=r(fEr,"SplinterConfig"),fEr.forEach(t),K$e=r(p2e," (Splinter model)"),p2e.forEach(t),Z$e=i(T),km=n(T,"LI",{});var _2e=s(km);nW=n(_2e,"STRONG",{});var mEr=s(nW);eIe=r(mEr,"squeezebert"),mEr.forEach(t),oIe=r(_2e," \u2014 "),CL=n(_2e,"A",{href:!0});var gEr=s(CL);rIe=r(gEr,"SqueezeBertConfig"),gEr.forEach(t),tIe=r(_2e," (SqueezeBERT model)"),_2e.forEach(t),aIe=i(T),Rm=n(T,"LI",{});var u2e=s(Rm);sW=n(u2e,"STRONG",{});var hEr=s(sW);nIe=r(hEr,"swin"),hEr.forEach(t),sIe=r(u2e," \u2014 "),ML=n(u2e,"A",{href:!0});var pEr=s(ML);lIe=r(pEr,"SwinConfig"),pEr.forEach(t),iIe=r(u2e," (Swin model)"),u2e.forEach(t),dIe=i(T),Sm=n(T,"LI",{});var b2e=s(Sm);lW=n(b2e,"STRONG",{});var _Er=s(lW);cIe=r(_Er,"t5"),_Er.forEach(t),fIe=r(b2e," \u2014 "),EL=n(b2e,"A",{href:!0});var uEr=s(EL);mIe=r(uEr,"T5Config"),uEr.forEach(t),gIe=r(b2e," (T5 model)"),b2e.forEach(t),hIe=i(T),Pm=n(T,"LI",{});var v2e=s(Pm);iW=n(v2e,"STRONG",{});var bEr=s(iW);pIe=r(bEr,"tapas"),bEr.forEach(t),_Ie=r(v2e," \u2014 "),yL=n(v2e,"A",{href:!0});var vEr=s(yL);uIe=r(vEr,"TapasConfig"),vEr.forEach(t),bIe=r(v2e," (TAPAS model)"),v2e.forEach(t),vIe=i(T),$m=n(T,"LI",{});var T2e=s($m);dW=n(T2e,"STRONG",{});var TEr=s(dW);TIe=r(TEr,"transfo-xl"),TEr.forEach(t),FIe=r(T2e," \u2014 "),wL=n(T2e,"A",{href:!0});var FEr=s(wL);CIe=r(FEr,"TransfoXLConfig"),FEr.forEach(t),MIe=r(T2e," (Transformer-XL model)"),T2e.forEach(t),EIe=i(T),Im=n(T,"LI",{});var F2e=s(Im);cW=n(F2e,"STRONG",{});var CEr=s(cW);yIe=r(CEr,"trocr"),CEr.forEach(t),wIe=r(F2e," \u2014 "),AL=n(F2e,"A",{href:!0});var MEr=s(AL);AIe=r(MEr,"TrOCRConfig"),MEr.forEach(t),LIe=r(F2e," (TrOCR model)"),F2e.forEach(t),BIe=i(T),jm=n(T,"LI",{});var C2e=s(jm);fW=n(C2e,"STRONG",{});var EEr=s(fW);xIe=r(EEr,"unispeech"),EEr.forEach(t),kIe=r(C2e," \u2014 "),LL=n(C2e,"A",{href:!0});var yEr=s(LL);RIe=r(yEr,"UniSpeechConfig"),yEr.forEach(t),SIe=r(C2e," (UniSpeech model)"),C2e.forEach(t),PIe=i(T),Nm=n(T,"LI",{});var M2e=s(Nm);mW=n(M2e,"STRONG",{});var wEr=s(mW);$Ie=r(wEr,"unispeech-sat"),wEr.forEach(t),IIe=r(M2e," \u2014 "),BL=n(M2e,"A",{href:!0});var AEr=s(BL);jIe=r(AEr,"UniSpeechSatConfig"),AEr.forEach(t),NIe=r(M2e," (UniSpeechSat model)"),M2e.forEach(t),DIe=i(T),Dm=n(T,"LI",{});var E2e=s(Dm);gW=n(E2e,"STRONG",{});var LEr=s(gW);qIe=r(LEr,"vilt"),LEr.forEach(t),GIe=r(E2e," \u2014 "),xL=n(E2e,"A",{href:!0});var BEr=s(xL);OIe=r(BEr,"ViltConfig"),BEr.forEach(t),XIe=r(E2e," (ViLT model)"),E2e.forEach(t),zIe=i(T),qm=n(T,"LI",{});var y2e=s(qm);hW=n(y2e,"STRONG",{});var xEr=s(hW);VIe=r(xEr,"vision-encoder-decoder"),xEr.forEach(t),WIe=r(y2e," \u2014 "),kL=n(y2e,"A",{href:!0});var kEr=s(kL);QIe=r(kEr,"VisionEncoderDecoderConfig"),kEr.forEach(t),HIe=r(y2e," (Vision Encoder decoder model)"),y2e.forEach(t),UIe=i(T),Gm=n(T,"LI",{});var w2e=s(Gm);pW=n(w2e,"STRONG",{});var REr=s(pW);JIe=r(REr,"vision-text-dual-encoder"),REr.forEach(t),YIe=r(w2e," \u2014 "),RL=n(w2e,"A",{href:!0});var SEr=s(RL);KIe=r(SEr,"VisionTextDualEncoderConfig"),SEr.forEach(t),ZIe=r(w2e," (VisionTextDualEncoder model)"),w2e.forEach(t),eje=i(T),Om=n(T,"LI",{});var A2e=s(Om);_W=n(A2e,"STRONG",{});var PEr=s(_W);oje=r(PEr,"visual_bert"),PEr.forEach(t),rje=r(A2e," \u2014 "),SL=n(A2e,"A",{href:!0});var $Er=s(SL);tje=r($Er,"VisualBertConfig"),$Er.forEach(t),aje=r(A2e," (VisualBert model)"),A2e.forEach(t),nje=i(T),Xm=n(T,"LI",{});var L2e=s(Xm);uW=n(L2e,"STRONG",{});var IEr=s(uW);sje=r(IEr,"vit"),IEr.forEach(t),lje=r(L2e," \u2014 "),PL=n(L2e,"A",{href:!0});var jEr=s(PL);ije=r(jEr,"ViTConfig"),jEr.forEach(t),dje=r(L2e," (ViT model)"),L2e.forEach(t),cje=i(T),zm=n(T,"LI",{});var B2e=s(zm);bW=n(B2e,"STRONG",{});var NEr=s(bW);fje=r(NEr,"vit_mae"),NEr.forEach(t),mje=r(B2e," \u2014 "),$L=n(B2e,"A",{href:!0});var DEr=s($L);gje=r(DEr,"ViTMAEConfig"),DEr.forEach(t),hje=r(B2e," (ViTMAE model)"),B2e.forEach(t),pje=i(T),Vm=n(T,"LI",{});var x2e=s(Vm);vW=n(x2e,"STRONG",{});var qEr=s(vW);_je=r(qEr,"wav2vec2"),qEr.forEach(t),uje=r(x2e," \u2014 "),IL=n(x2e,"A",{href:!0});var GEr=s(IL);bje=r(GEr,"Wav2Vec2Config"),GEr.forEach(t),vje=r(x2e," (Wav2Vec2 model)"),x2e.forEach(t),Tje=i(T),Wm=n(T,"LI",{});var k2e=s(Wm);TW=n(k2e,"STRONG",{});var OEr=s(TW);Fje=r(OEr,"wavlm"),OEr.forEach(t),Cje=r(k2e," \u2014 "),jL=n(k2e,"A",{href:!0});var XEr=s(jL);Mje=r(XEr,"WavLMConfig"),XEr.forEach(t),Eje=r(k2e," (WavLM model)"),k2e.forEach(t),yje=i(T),Qm=n(T,"LI",{});var R2e=s(Qm);FW=n(R2e,"STRONG",{});var zEr=s(FW);wje=r(zEr,"xglm"),zEr.forEach(t),Aje=r(R2e," \u2014 "),NL=n(R2e,"A",{href:!0});var VEr=s(NL);Lje=r(VEr,"XGLMConfig"),VEr.forEach(t),Bje=r(R2e," (XGLM model)"),R2e.forEach(t),xje=i(T),Hm=n(T,"LI",{});var S2e=s(Hm);CW=n(S2e,"STRONG",{});var WEr=s(CW);kje=r(WEr,"xlm"),WEr.forEach(t),Rje=r(S2e," \u2014 "),DL=n(S2e,"A",{href:!0});var QEr=s(DL);Sje=r(QEr,"XLMConfig"),QEr.forEach(t),Pje=r(S2e," (XLM model)"),S2e.forEach(t),$je=i(T),Um=n(T,"LI",{});var P2e=s(Um);MW=n(P2e,"STRONG",{});var HEr=s(MW);Ije=r(HEr,"xlm-prophetnet"),HEr.forEach(t),jje=r(P2e," \u2014 "),qL=n(P2e,"A",{href:!0});var UEr=s(qL);Nje=r(UEr,"XLMProphetNetConfig"),UEr.forEach(t),Dje=r(P2e," (XLMProphetNet model)"),P2e.forEach(t),qje=i(T),Jm=n(T,"LI",{});var $2e=s(Jm);EW=n($2e,"STRONG",{});var JEr=s(EW);Gje=r(JEr,"xlm-roberta"),JEr.forEach(t),Oje=r($2e," \u2014 "),GL=n($2e,"A",{href:!0});var YEr=s(GL);Xje=r(YEr,"XLMRobertaConfig"),YEr.forEach(t),zje=r($2e," (XLM-RoBERTa model)"),$2e.forEach(t),Vje=i(T),Ym=n(T,"LI",{});var I2e=s(Ym);yW=n(I2e,"STRONG",{});var KEr=s(yW);Wje=r(KEr,"xlm-roberta-xl"),KEr.forEach(t),Qje=r(I2e," \u2014 "),OL=n(I2e,"A",{href:!0});var ZEr=s(OL);Hje=r(ZEr,"XLMRobertaXLConfig"),ZEr.forEach(t),Uje=r(I2e," (XLM-RoBERTa-XL model)"),I2e.forEach(t),Jje=i(T),Km=n(T,"LI",{});var j2e=s(Km);wW=n(j2e,"STRONG",{});var e3r=s(wW);Yje=r(e3r,"xlnet"),e3r.forEach(t),Kje=r(j2e," \u2014 "),XL=n(j2e,"A",{href:!0});var o3r=s(XL);Zje=r(o3r,"XLNetConfig"),o3r.forEach(t),eNe=r(j2e," (XLNet model)"),j2e.forEach(t),oNe=i(T),Zm=n(T,"LI",{});var N2e=s(Zm);AW=n(N2e,"STRONG",{});var r3r=s(AW);rNe=r(r3r,"yoso"),r3r.forEach(t),tNe=r(N2e," \u2014 "),zL=n(N2e,"A",{href:!0});var t3r=s(zL);aNe=r(t3r,"YosoConfig"),t3r.forEach(t),nNe=r(N2e," (YOSO model)"),N2e.forEach(t),T.forEach(t),sNe=i(aa),LW=n(aa,"P",{});var a3r=s(LW);lNe=r(a3r,"Examples:"),a3r.forEach(t),iNe=i(aa),m(NC.$$.fragment,aa),aa.forEach(t),dNe=i(Bs),eg=n(Bs,"DIV",{class:!0});var TLe=s(eg);m(DC.$$.fragment,TLe),cNe=i(TLe),BW=n(TLe,"P",{});var n3r=s(BW);fNe=r(n3r,"Register a new configuration for this class."),n3r.forEach(t),TLe.forEach(t),Bs.forEach(t),CAe=i(d),Li=n(d,"H2",{class:!0});var FLe=s(Li);og=n(FLe,"A",{id:!0,class:!0,href:!0});var s3r=s(og);xW=n(s3r,"SPAN",{});var l3r=s(xW);m(qC.$$.fragment,l3r),l3r.forEach(t),s3r.forEach(t),mNe=i(FLe),kW=n(FLe,"SPAN",{});var i3r=s(kW);gNe=r(i3r,"AutoTokenizer"),i3r.forEach(t),FLe.forEach(t),MAe=i(d),Go=n(d,"DIV",{class:!0});var xs=s(Go);m(GC.$$.fragment,xs),hNe=i(xs),OC=n(xs,"P",{});var CLe=s(OC);pNe=r(CLe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),VL=n(CLe,"A",{href:!0});var d3r=s(VL);_Ne=r(d3r,"AutoTokenizer.from_pretrained()"),d3r.forEach(t),uNe=r(CLe," class method."),CLe.forEach(t),bNe=i(xs),XC=n(xs,"P",{});var MLe=s(XC);vNe=r(MLe,"This class cannot be instantiated directly using "),RW=n(MLe,"CODE",{});var c3r=s(RW);TNe=r(c3r,"__init__()"),c3r.forEach(t),FNe=r(MLe," (throws an error)."),MLe.forEach(t),CNe=i(xs),co=n(xs,"DIV",{class:!0});var na=s(co);m(zC.$$.fragment,na),MNe=i(na),SW=n(na,"P",{});var f3r=s(SW);ENe=r(f3r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),f3r.forEach(t),yNe=i(na),Sa=n(na,"P",{});var kF=s(Sa);wNe=r(kF,"The tokenizer class to instantiate is selected based on the "),PW=n(kF,"CODE",{});var m3r=s(PW);ANe=r(m3r,"model_type"),m3r.forEach(t),LNe=r(kF,` property of the config object (either
passed as an argument or loaded from `),$W=n(kF,"CODE",{});var g3r=s($W);BNe=r(g3r,"pretrained_model_name_or_path"),g3r.forEach(t),xNe=r(kF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IW=n(kF,"CODE",{});var h3r=s(IW);kNe=r(h3r,"pretrained_model_name_or_path"),h3r.forEach(t),RNe=r(kF,":"),kF.forEach(t),SNe=i(na),M=n(na,"UL",{});var y=s(M);Pn=n(y,"LI",{});var iA=s(Pn);jW=n(iA,"STRONG",{});var p3r=s(jW);PNe=r(p3r,"albert"),p3r.forEach(t),$Ne=r(iA," \u2014 "),WL=n(iA,"A",{href:!0});var _3r=s(WL);INe=r(_3r,"AlbertTokenizer"),_3r.forEach(t),jNe=r(iA," or "),QL=n(iA,"A",{href:!0});var u3r=s(QL);NNe=r(u3r,"AlbertTokenizerFast"),u3r.forEach(t),DNe=r(iA," (ALBERT model)"),iA.forEach(t),qNe=i(y),$n=n(y,"LI",{});var dA=s($n);NW=n(dA,"STRONG",{});var b3r=s(NW);GNe=r(b3r,"bart"),b3r.forEach(t),ONe=r(dA," \u2014 "),HL=n(dA,"A",{href:!0});var v3r=s(HL);XNe=r(v3r,"BartTokenizer"),v3r.forEach(t),zNe=r(dA," or "),UL=n(dA,"A",{href:!0});var T3r=s(UL);VNe=r(T3r,"BartTokenizerFast"),T3r.forEach(t),WNe=r(dA," (BART model)"),dA.forEach(t),QNe=i(y),In=n(y,"LI",{});var cA=s(In);DW=n(cA,"STRONG",{});var F3r=s(DW);HNe=r(F3r,"barthez"),F3r.forEach(t),UNe=r(cA," \u2014 "),JL=n(cA,"A",{href:!0});var C3r=s(JL);JNe=r(C3r,"BarthezTokenizer"),C3r.forEach(t),YNe=r(cA," or "),YL=n(cA,"A",{href:!0});var M3r=s(YL);KNe=r(M3r,"BarthezTokenizerFast"),M3r.forEach(t),ZNe=r(cA," (BARThez model)"),cA.forEach(t),eDe=i(y),rg=n(y,"LI",{});var D2e=s(rg);qW=n(D2e,"STRONG",{});var E3r=s(qW);oDe=r(E3r,"bartpho"),E3r.forEach(t),rDe=r(D2e," \u2014 "),KL=n(D2e,"A",{href:!0});var y3r=s(KL);tDe=r(y3r,"BartphoTokenizer"),y3r.forEach(t),aDe=r(D2e," (BARTpho model)"),D2e.forEach(t),nDe=i(y),jn=n(y,"LI",{});var fA=s(jn);GW=n(fA,"STRONG",{});var w3r=s(GW);sDe=r(w3r,"bert"),w3r.forEach(t),lDe=r(fA," \u2014 "),ZL=n(fA,"A",{href:!0});var A3r=s(ZL);iDe=r(A3r,"BertTokenizer"),A3r.forEach(t),dDe=r(fA," or "),e9=n(fA,"A",{href:!0});var L3r=s(e9);cDe=r(L3r,"BertTokenizerFast"),L3r.forEach(t),fDe=r(fA," (BERT model)"),fA.forEach(t),mDe=i(y),tg=n(y,"LI",{});var q2e=s(tg);OW=n(q2e,"STRONG",{});var B3r=s(OW);gDe=r(B3r,"bert-generation"),B3r.forEach(t),hDe=r(q2e," \u2014 "),o9=n(q2e,"A",{href:!0});var x3r=s(o9);pDe=r(x3r,"BertGenerationTokenizer"),x3r.forEach(t),_De=r(q2e," (Bert Generation model)"),q2e.forEach(t),uDe=i(y),ag=n(y,"LI",{});var G2e=s(ag);XW=n(G2e,"STRONG",{});var k3r=s(XW);bDe=r(k3r,"bert-japanese"),k3r.forEach(t),vDe=r(G2e," \u2014 "),r9=n(G2e,"A",{href:!0});var R3r=s(r9);TDe=r(R3r,"BertJapaneseTokenizer"),R3r.forEach(t),FDe=r(G2e," (BertJapanese model)"),G2e.forEach(t),CDe=i(y),ng=n(y,"LI",{});var O2e=s(ng);zW=n(O2e,"STRONG",{});var S3r=s(zW);MDe=r(S3r,"bertweet"),S3r.forEach(t),EDe=r(O2e," \u2014 "),t9=n(O2e,"A",{href:!0});var P3r=s(t9);yDe=r(P3r,"BertweetTokenizer"),P3r.forEach(t),wDe=r(O2e," (Bertweet model)"),O2e.forEach(t),ADe=i(y),Nn=n(y,"LI",{});var mA=s(Nn);VW=n(mA,"STRONG",{});var $3r=s(VW);LDe=r($3r,"big_bird"),$3r.forEach(t),BDe=r(mA," \u2014 "),a9=n(mA,"A",{href:!0});var I3r=s(a9);xDe=r(I3r,"BigBirdTokenizer"),I3r.forEach(t),kDe=r(mA," or "),n9=n(mA,"A",{href:!0});var j3r=s(n9);RDe=r(j3r,"BigBirdTokenizerFast"),j3r.forEach(t),SDe=r(mA," (BigBird model)"),mA.forEach(t),PDe=i(y),Dn=n(y,"LI",{});var gA=s(Dn);WW=n(gA,"STRONG",{});var N3r=s(WW);$De=r(N3r,"bigbird_pegasus"),N3r.forEach(t),IDe=r(gA," \u2014 "),s9=n(gA,"A",{href:!0});var D3r=s(s9);jDe=r(D3r,"PegasusTokenizer"),D3r.forEach(t),NDe=r(gA," or "),l9=n(gA,"A",{href:!0});var q3r=s(l9);DDe=r(q3r,"PegasusTokenizerFast"),q3r.forEach(t),qDe=r(gA," (BigBirdPegasus model)"),gA.forEach(t),GDe=i(y),qn=n(y,"LI",{});var hA=s(qn);QW=n(hA,"STRONG",{});var G3r=s(QW);ODe=r(G3r,"blenderbot"),G3r.forEach(t),XDe=r(hA," \u2014 "),i9=n(hA,"A",{href:!0});var O3r=s(i9);zDe=r(O3r,"BlenderbotTokenizer"),O3r.forEach(t),VDe=r(hA," or "),d9=n(hA,"A",{href:!0});var X3r=s(d9);WDe=r(X3r,"BlenderbotTokenizerFast"),X3r.forEach(t),QDe=r(hA," (Blenderbot model)"),hA.forEach(t),HDe=i(y),sg=n(y,"LI",{});var X2e=s(sg);HW=n(X2e,"STRONG",{});var z3r=s(HW);UDe=r(z3r,"blenderbot-small"),z3r.forEach(t),JDe=r(X2e," \u2014 "),c9=n(X2e,"A",{href:!0});var V3r=s(c9);YDe=r(V3r,"BlenderbotSmallTokenizer"),V3r.forEach(t),KDe=r(X2e," (BlenderbotSmall model)"),X2e.forEach(t),ZDe=i(y),lg=n(y,"LI",{});var z2e=s(lg);UW=n(z2e,"STRONG",{});var W3r=s(UW);eqe=r(W3r,"byt5"),W3r.forEach(t),oqe=r(z2e," \u2014 "),f9=n(z2e,"A",{href:!0});var Q3r=s(f9);rqe=r(Q3r,"ByT5Tokenizer"),Q3r.forEach(t),tqe=r(z2e," (ByT5 model)"),z2e.forEach(t),aqe=i(y),Gn=n(y,"LI",{});var pA=s(Gn);JW=n(pA,"STRONG",{});var H3r=s(JW);nqe=r(H3r,"camembert"),H3r.forEach(t),sqe=r(pA," \u2014 "),m9=n(pA,"A",{href:!0});var U3r=s(m9);lqe=r(U3r,"CamembertTokenizer"),U3r.forEach(t),iqe=r(pA," or "),g9=n(pA,"A",{href:!0});var J3r=s(g9);dqe=r(J3r,"CamembertTokenizerFast"),J3r.forEach(t),cqe=r(pA," (CamemBERT model)"),pA.forEach(t),fqe=i(y),ig=n(y,"LI",{});var V2e=s(ig);YW=n(V2e,"STRONG",{});var Y3r=s(YW);mqe=r(Y3r,"canine"),Y3r.forEach(t),gqe=r(V2e," \u2014 "),h9=n(V2e,"A",{href:!0});var K3r=s(h9);hqe=r(K3r,"CanineTokenizer"),K3r.forEach(t),pqe=r(V2e," (Canine model)"),V2e.forEach(t),_qe=i(y),On=n(y,"LI",{});var _A=s(On);KW=n(_A,"STRONG",{});var Z3r=s(KW);uqe=r(Z3r,"clip"),Z3r.forEach(t),bqe=r(_A," \u2014 "),p9=n(_A,"A",{href:!0});var eyr=s(p9);vqe=r(eyr,"CLIPTokenizer"),eyr.forEach(t),Tqe=r(_A," or "),_9=n(_A,"A",{href:!0});var oyr=s(_9);Fqe=r(oyr,"CLIPTokenizerFast"),oyr.forEach(t),Cqe=r(_A," (CLIP model)"),_A.forEach(t),Mqe=i(y),Xn=n(y,"LI",{});var uA=s(Xn);ZW=n(uA,"STRONG",{});var ryr=s(ZW);Eqe=r(ryr,"convbert"),ryr.forEach(t),yqe=r(uA," \u2014 "),u9=n(uA,"A",{href:!0});var tyr=s(u9);wqe=r(tyr,"ConvBertTokenizer"),tyr.forEach(t),Aqe=r(uA," or "),b9=n(uA,"A",{href:!0});var ayr=s(b9);Lqe=r(ayr,"ConvBertTokenizerFast"),ayr.forEach(t),Bqe=r(uA," (ConvBERT model)"),uA.forEach(t),xqe=i(y),zn=n(y,"LI",{});var bA=s(zn);eQ=n(bA,"STRONG",{});var nyr=s(eQ);kqe=r(nyr,"cpm"),nyr.forEach(t),Rqe=r(bA," \u2014 "),v9=n(bA,"A",{href:!0});var syr=s(v9);Sqe=r(syr,"CpmTokenizer"),syr.forEach(t),Pqe=r(bA," or "),oQ=n(bA,"CODE",{});var lyr=s(oQ);$qe=r(lyr,"CpmTokenizerFast"),lyr.forEach(t),Iqe=r(bA," (CPM model)"),bA.forEach(t),jqe=i(y),dg=n(y,"LI",{});var W2e=s(dg);rQ=n(W2e,"STRONG",{});var iyr=s(rQ);Nqe=r(iyr,"ctrl"),iyr.forEach(t),Dqe=r(W2e," \u2014 "),T9=n(W2e,"A",{href:!0});var dyr=s(T9);qqe=r(dyr,"CTRLTokenizer"),dyr.forEach(t),Gqe=r(W2e," (CTRL model)"),W2e.forEach(t),Oqe=i(y),Vn=n(y,"LI",{});var vA=s(Vn);tQ=n(vA,"STRONG",{});var cyr=s(tQ);Xqe=r(cyr,"deberta"),cyr.forEach(t),zqe=r(vA," \u2014 "),F9=n(vA,"A",{href:!0});var fyr=s(F9);Vqe=r(fyr,"DebertaTokenizer"),fyr.forEach(t),Wqe=r(vA," or "),C9=n(vA,"A",{href:!0});var myr=s(C9);Qqe=r(myr,"DebertaTokenizerFast"),myr.forEach(t),Hqe=r(vA," (DeBERTa model)"),vA.forEach(t),Uqe=i(y),cg=n(y,"LI",{});var Q2e=s(cg);aQ=n(Q2e,"STRONG",{});var gyr=s(aQ);Jqe=r(gyr,"deberta-v2"),gyr.forEach(t),Yqe=r(Q2e," \u2014 "),M9=n(Q2e,"A",{href:!0});var hyr=s(M9);Kqe=r(hyr,"DebertaV2Tokenizer"),hyr.forEach(t),Zqe=r(Q2e," (DeBERTa-v2 model)"),Q2e.forEach(t),eGe=i(y),Wn=n(y,"LI",{});var TA=s(Wn);nQ=n(TA,"STRONG",{});var pyr=s(nQ);oGe=r(pyr,"distilbert"),pyr.forEach(t),rGe=r(TA," \u2014 "),E9=n(TA,"A",{href:!0});var _yr=s(E9);tGe=r(_yr,"DistilBertTokenizer"),_yr.forEach(t),aGe=r(TA," or "),y9=n(TA,"A",{href:!0});var uyr=s(y9);nGe=r(uyr,"DistilBertTokenizerFast"),uyr.forEach(t),sGe=r(TA," (DistilBERT model)"),TA.forEach(t),lGe=i(y),Qn=n(y,"LI",{});var FA=s(Qn);sQ=n(FA,"STRONG",{});var byr=s(sQ);iGe=r(byr,"dpr"),byr.forEach(t),dGe=r(FA," \u2014 "),w9=n(FA,"A",{href:!0});var vyr=s(w9);cGe=r(vyr,"DPRQuestionEncoderTokenizer"),vyr.forEach(t),fGe=r(FA," or "),A9=n(FA,"A",{href:!0});var Tyr=s(A9);mGe=r(Tyr,"DPRQuestionEncoderTokenizerFast"),Tyr.forEach(t),gGe=r(FA," (DPR model)"),FA.forEach(t),hGe=i(y),Hn=n(y,"LI",{});var CA=s(Hn);lQ=n(CA,"STRONG",{});var Fyr=s(lQ);pGe=r(Fyr,"electra"),Fyr.forEach(t),_Ge=r(CA," \u2014 "),L9=n(CA,"A",{href:!0});var Cyr=s(L9);uGe=r(Cyr,"ElectraTokenizer"),Cyr.forEach(t),bGe=r(CA," or "),B9=n(CA,"A",{href:!0});var Myr=s(B9);vGe=r(Myr,"ElectraTokenizerFast"),Myr.forEach(t),TGe=r(CA," (ELECTRA model)"),CA.forEach(t),FGe=i(y),fg=n(y,"LI",{});var H2e=s(fg);iQ=n(H2e,"STRONG",{});var Eyr=s(iQ);CGe=r(Eyr,"flaubert"),Eyr.forEach(t),MGe=r(H2e," \u2014 "),x9=n(H2e,"A",{href:!0});var yyr=s(x9);EGe=r(yyr,"FlaubertTokenizer"),yyr.forEach(t),yGe=r(H2e," (FlauBERT model)"),H2e.forEach(t),wGe=i(y),Un=n(y,"LI",{});var MA=s(Un);dQ=n(MA,"STRONG",{});var wyr=s(dQ);AGe=r(wyr,"fnet"),wyr.forEach(t),LGe=r(MA," \u2014 "),k9=n(MA,"A",{href:!0});var Ayr=s(k9);BGe=r(Ayr,"FNetTokenizer"),Ayr.forEach(t),xGe=r(MA," or "),R9=n(MA,"A",{href:!0});var Lyr=s(R9);kGe=r(Lyr,"FNetTokenizerFast"),Lyr.forEach(t),RGe=r(MA," (FNet model)"),MA.forEach(t),SGe=i(y),mg=n(y,"LI",{});var U2e=s(mg);cQ=n(U2e,"STRONG",{});var Byr=s(cQ);PGe=r(Byr,"fsmt"),Byr.forEach(t),$Ge=r(U2e," \u2014 "),S9=n(U2e,"A",{href:!0});var xyr=s(S9);IGe=r(xyr,"FSMTTokenizer"),xyr.forEach(t),jGe=r(U2e," (FairSeq Machine-Translation model)"),U2e.forEach(t),NGe=i(y),Jn=n(y,"LI",{});var EA=s(Jn);fQ=n(EA,"STRONG",{});var kyr=s(fQ);DGe=r(kyr,"funnel"),kyr.forEach(t),qGe=r(EA," \u2014 "),P9=n(EA,"A",{href:!0});var Ryr=s(P9);GGe=r(Ryr,"FunnelTokenizer"),Ryr.forEach(t),OGe=r(EA," or "),$9=n(EA,"A",{href:!0});var Syr=s($9);XGe=r(Syr,"FunnelTokenizerFast"),Syr.forEach(t),zGe=r(EA," (Funnel Transformer model)"),EA.forEach(t),VGe=i(y),Yn=n(y,"LI",{});var yA=s(Yn);mQ=n(yA,"STRONG",{});var Pyr=s(mQ);WGe=r(Pyr,"gpt2"),Pyr.forEach(t),QGe=r(yA," \u2014 "),I9=n(yA,"A",{href:!0});var $yr=s(I9);HGe=r($yr,"GPT2Tokenizer"),$yr.forEach(t),UGe=r(yA," or "),j9=n(yA,"A",{href:!0});var Iyr=s(j9);JGe=r(Iyr,"GPT2TokenizerFast"),Iyr.forEach(t),YGe=r(yA," (OpenAI GPT-2 model)"),yA.forEach(t),KGe=i(y),Kn=n(y,"LI",{});var wA=s(Kn);gQ=n(wA,"STRONG",{});var jyr=s(gQ);ZGe=r(jyr,"gpt_neo"),jyr.forEach(t),eOe=r(wA," \u2014 "),N9=n(wA,"A",{href:!0});var Nyr=s(N9);oOe=r(Nyr,"GPT2Tokenizer"),Nyr.forEach(t),rOe=r(wA," or "),D9=n(wA,"A",{href:!0});var Dyr=s(D9);tOe=r(Dyr,"GPT2TokenizerFast"),Dyr.forEach(t),aOe=r(wA," (GPT Neo model)"),wA.forEach(t),nOe=i(y),Zn=n(y,"LI",{});var AA=s(Zn);hQ=n(AA,"STRONG",{});var qyr=s(hQ);sOe=r(qyr,"herbert"),qyr.forEach(t),lOe=r(AA," \u2014 "),q9=n(AA,"A",{href:!0});var Gyr=s(q9);iOe=r(Gyr,"HerbertTokenizer"),Gyr.forEach(t),dOe=r(AA," or "),G9=n(AA,"A",{href:!0});var Oyr=s(G9);cOe=r(Oyr,"HerbertTokenizerFast"),Oyr.forEach(t),fOe=r(AA," (HerBERT model)"),AA.forEach(t),mOe=i(y),gg=n(y,"LI",{});var J2e=s(gg);pQ=n(J2e,"STRONG",{});var Xyr=s(pQ);gOe=r(Xyr,"hubert"),Xyr.forEach(t),hOe=r(J2e," \u2014 "),O9=n(J2e,"A",{href:!0});var zyr=s(O9);pOe=r(zyr,"Wav2Vec2CTCTokenizer"),zyr.forEach(t),_Oe=r(J2e," (Hubert model)"),J2e.forEach(t),uOe=i(y),es=n(y,"LI",{});var LA=s(es);_Q=n(LA,"STRONG",{});var Vyr=s(_Q);bOe=r(Vyr,"ibert"),Vyr.forEach(t),vOe=r(LA," \u2014 "),X9=n(LA,"A",{href:!0});var Wyr=s(X9);TOe=r(Wyr,"RobertaTokenizer"),Wyr.forEach(t),FOe=r(LA," or "),z9=n(LA,"A",{href:!0});var Qyr=s(z9);COe=r(Qyr,"RobertaTokenizerFast"),Qyr.forEach(t),MOe=r(LA," (I-BERT model)"),LA.forEach(t),EOe=i(y),os=n(y,"LI",{});var BA=s(os);uQ=n(BA,"STRONG",{});var Hyr=s(uQ);yOe=r(Hyr,"layoutlm"),Hyr.forEach(t),wOe=r(BA," \u2014 "),V9=n(BA,"A",{href:!0});var Uyr=s(V9);AOe=r(Uyr,"LayoutLMTokenizer"),Uyr.forEach(t),LOe=r(BA," or "),W9=n(BA,"A",{href:!0});var Jyr=s(W9);BOe=r(Jyr,"LayoutLMTokenizerFast"),Jyr.forEach(t),xOe=r(BA," (LayoutLM model)"),BA.forEach(t),kOe=i(y),rs=n(y,"LI",{});var xA=s(rs);bQ=n(xA,"STRONG",{});var Yyr=s(bQ);ROe=r(Yyr,"layoutlmv2"),Yyr.forEach(t),SOe=r(xA," \u2014 "),Q9=n(xA,"A",{href:!0});var Kyr=s(Q9);POe=r(Kyr,"LayoutLMv2Tokenizer"),Kyr.forEach(t),$Oe=r(xA," or "),H9=n(xA,"A",{href:!0});var Zyr=s(H9);IOe=r(Zyr,"LayoutLMv2TokenizerFast"),Zyr.forEach(t),jOe=r(xA," (LayoutLMv2 model)"),xA.forEach(t),NOe=i(y),ts=n(y,"LI",{});var kA=s(ts);vQ=n(kA,"STRONG",{});var ewr=s(vQ);DOe=r(ewr,"layoutxlm"),ewr.forEach(t),qOe=r(kA," \u2014 "),U9=n(kA,"A",{href:!0});var owr=s(U9);GOe=r(owr,"LayoutXLMTokenizer"),owr.forEach(t),OOe=r(kA," or "),J9=n(kA,"A",{href:!0});var rwr=s(J9);XOe=r(rwr,"LayoutXLMTokenizerFast"),rwr.forEach(t),zOe=r(kA," (LayoutXLM model)"),kA.forEach(t),VOe=i(y),as=n(y,"LI",{});var RA=s(as);TQ=n(RA,"STRONG",{});var twr=s(TQ);WOe=r(twr,"led"),twr.forEach(t),QOe=r(RA," \u2014 "),Y9=n(RA,"A",{href:!0});var awr=s(Y9);HOe=r(awr,"LEDTokenizer"),awr.forEach(t),UOe=r(RA," or "),K9=n(RA,"A",{href:!0});var nwr=s(K9);JOe=r(nwr,"LEDTokenizerFast"),nwr.forEach(t),YOe=r(RA," (LED model)"),RA.forEach(t),KOe=i(y),ns=n(y,"LI",{});var SA=s(ns);FQ=n(SA,"STRONG",{});var swr=s(FQ);ZOe=r(swr,"longformer"),swr.forEach(t),eXe=r(SA," \u2014 "),Z9=n(SA,"A",{href:!0});var lwr=s(Z9);oXe=r(lwr,"LongformerTokenizer"),lwr.forEach(t),rXe=r(SA," or "),eB=n(SA,"A",{href:!0});var iwr=s(eB);tXe=r(iwr,"LongformerTokenizerFast"),iwr.forEach(t),aXe=r(SA," (Longformer model)"),SA.forEach(t),nXe=i(y),hg=n(y,"LI",{});var Y2e=s(hg);CQ=n(Y2e,"STRONG",{});var dwr=s(CQ);sXe=r(dwr,"luke"),dwr.forEach(t),lXe=r(Y2e," \u2014 "),oB=n(Y2e,"A",{href:!0});var cwr=s(oB);iXe=r(cwr,"LukeTokenizer"),cwr.forEach(t),dXe=r(Y2e," (LUKE model)"),Y2e.forEach(t),cXe=i(y),ss=n(y,"LI",{});var PA=s(ss);MQ=n(PA,"STRONG",{});var fwr=s(MQ);fXe=r(fwr,"lxmert"),fwr.forEach(t),mXe=r(PA," \u2014 "),rB=n(PA,"A",{href:!0});var mwr=s(rB);gXe=r(mwr,"LxmertTokenizer"),mwr.forEach(t),hXe=r(PA," or "),tB=n(PA,"A",{href:!0});var gwr=s(tB);pXe=r(gwr,"LxmertTokenizerFast"),gwr.forEach(t),_Xe=r(PA," (LXMERT model)"),PA.forEach(t),uXe=i(y),pg=n(y,"LI",{});var K2e=s(pg);EQ=n(K2e,"STRONG",{});var hwr=s(EQ);bXe=r(hwr,"m2m_100"),hwr.forEach(t),vXe=r(K2e," \u2014 "),aB=n(K2e,"A",{href:!0});var pwr=s(aB);TXe=r(pwr,"M2M100Tokenizer"),pwr.forEach(t),FXe=r(K2e," (M2M100 model)"),K2e.forEach(t),CXe=i(y),_g=n(y,"LI",{});var Z2e=s(_g);yQ=n(Z2e,"STRONG",{});var _wr=s(yQ);MXe=r(_wr,"marian"),_wr.forEach(t),EXe=r(Z2e," \u2014 "),nB=n(Z2e,"A",{href:!0});var uwr=s(nB);yXe=r(uwr,"MarianTokenizer"),uwr.forEach(t),wXe=r(Z2e," (Marian model)"),Z2e.forEach(t),AXe=i(y),ls=n(y,"LI",{});var $A=s(ls);wQ=n($A,"STRONG",{});var bwr=s(wQ);LXe=r(bwr,"mbart"),bwr.forEach(t),BXe=r($A," \u2014 "),sB=n($A,"A",{href:!0});var vwr=s(sB);xXe=r(vwr,"MBartTokenizer"),vwr.forEach(t),kXe=r($A," or "),lB=n($A,"A",{href:!0});var Twr=s(lB);RXe=r(Twr,"MBartTokenizerFast"),Twr.forEach(t),SXe=r($A," (mBART model)"),$A.forEach(t),PXe=i(y),is=n(y,"LI",{});var IA=s(is);AQ=n(IA,"STRONG",{});var Fwr=s(AQ);$Xe=r(Fwr,"mbart50"),Fwr.forEach(t),IXe=r(IA," \u2014 "),iB=n(IA,"A",{href:!0});var Cwr=s(iB);jXe=r(Cwr,"MBart50Tokenizer"),Cwr.forEach(t),NXe=r(IA," or "),dB=n(IA,"A",{href:!0});var Mwr=s(dB);DXe=r(Mwr,"MBart50TokenizerFast"),Mwr.forEach(t),qXe=r(IA," (mBART-50 model)"),IA.forEach(t),GXe=i(y),ug=n(y,"LI",{});var eve=s(ug);LQ=n(eve,"STRONG",{});var Ewr=s(LQ);OXe=r(Ewr,"mluke"),Ewr.forEach(t),XXe=r(eve," \u2014 "),cB=n(eve,"A",{href:!0});var ywr=s(cB);zXe=r(ywr,"MLukeTokenizer"),ywr.forEach(t),VXe=r(eve," (mLUKE model)"),eve.forEach(t),WXe=i(y),ds=n(y,"LI",{});var jA=s(ds);BQ=n(jA,"STRONG",{});var wwr=s(BQ);QXe=r(wwr,"mobilebert"),wwr.forEach(t),HXe=r(jA," \u2014 "),fB=n(jA,"A",{href:!0});var Awr=s(fB);UXe=r(Awr,"MobileBertTokenizer"),Awr.forEach(t),JXe=r(jA," or "),mB=n(jA,"A",{href:!0});var Lwr=s(mB);YXe=r(Lwr,"MobileBertTokenizerFast"),Lwr.forEach(t),KXe=r(jA," (MobileBERT model)"),jA.forEach(t),ZXe=i(y),cs=n(y,"LI",{});var NA=s(cs);xQ=n(NA,"STRONG",{});var Bwr=s(xQ);eze=r(Bwr,"mpnet"),Bwr.forEach(t),oze=r(NA," \u2014 "),gB=n(NA,"A",{href:!0});var xwr=s(gB);rze=r(xwr,"MPNetTokenizer"),xwr.forEach(t),tze=r(NA," or "),hB=n(NA,"A",{href:!0});var kwr=s(hB);aze=r(kwr,"MPNetTokenizerFast"),kwr.forEach(t),nze=r(NA," (MPNet model)"),NA.forEach(t),sze=i(y),fs=n(y,"LI",{});var DA=s(fs);kQ=n(DA,"STRONG",{});var Rwr=s(kQ);lze=r(Rwr,"mt5"),Rwr.forEach(t),ize=r(DA," \u2014 "),pB=n(DA,"A",{href:!0});var Swr=s(pB);dze=r(Swr,"MT5Tokenizer"),Swr.forEach(t),cze=r(DA," or "),_B=n(DA,"A",{href:!0});var Pwr=s(_B);fze=r(Pwr,"MT5TokenizerFast"),Pwr.forEach(t),mze=r(DA," (mT5 model)"),DA.forEach(t),gze=i(y),ms=n(y,"LI",{});var qA=s(ms);RQ=n(qA,"STRONG",{});var $wr=s(RQ);hze=r($wr,"openai-gpt"),$wr.forEach(t),pze=r(qA," \u2014 "),uB=n(qA,"A",{href:!0});var Iwr=s(uB);_ze=r(Iwr,"OpenAIGPTTokenizer"),Iwr.forEach(t),uze=r(qA," or "),bB=n(qA,"A",{href:!0});var jwr=s(bB);bze=r(jwr,"OpenAIGPTTokenizerFast"),jwr.forEach(t),vze=r(qA," (OpenAI GPT model)"),qA.forEach(t),Tze=i(y),gs=n(y,"LI",{});var GA=s(gs);SQ=n(GA,"STRONG",{});var Nwr=s(SQ);Fze=r(Nwr,"pegasus"),Nwr.forEach(t),Cze=r(GA," \u2014 "),vB=n(GA,"A",{href:!0});var Dwr=s(vB);Mze=r(Dwr,"PegasusTokenizer"),Dwr.forEach(t),Eze=r(GA," or "),TB=n(GA,"A",{href:!0});var qwr=s(TB);yze=r(qwr,"PegasusTokenizerFast"),qwr.forEach(t),wze=r(GA," (Pegasus model)"),GA.forEach(t),Aze=i(y),bg=n(y,"LI",{});var ove=s(bg);PQ=n(ove,"STRONG",{});var Gwr=s(PQ);Lze=r(Gwr,"perceiver"),Gwr.forEach(t),Bze=r(ove," \u2014 "),FB=n(ove,"A",{href:!0});var Owr=s(FB);xze=r(Owr,"PerceiverTokenizer"),Owr.forEach(t),kze=r(ove," (Perceiver model)"),ove.forEach(t),Rze=i(y),vg=n(y,"LI",{});var rve=s(vg);$Q=n(rve,"STRONG",{});var Xwr=s($Q);Sze=r(Xwr,"phobert"),Xwr.forEach(t),Pze=r(rve," \u2014 "),CB=n(rve,"A",{href:!0});var zwr=s(CB);$ze=r(zwr,"PhobertTokenizer"),zwr.forEach(t),Ize=r(rve," (PhoBERT model)"),rve.forEach(t),jze=i(y),Tg=n(y,"LI",{});var tve=s(Tg);IQ=n(tve,"STRONG",{});var Vwr=s(IQ);Nze=r(Vwr,"prophetnet"),Vwr.forEach(t),Dze=r(tve," \u2014 "),MB=n(tve,"A",{href:!0});var Wwr=s(MB);qze=r(Wwr,"ProphetNetTokenizer"),Wwr.forEach(t),Gze=r(tve," (ProphetNet model)"),tve.forEach(t),Oze=i(y),hs=n(y,"LI",{});var OA=s(hs);jQ=n(OA,"STRONG",{});var Qwr=s(jQ);Xze=r(Qwr,"qdqbert"),Qwr.forEach(t),zze=r(OA," \u2014 "),EB=n(OA,"A",{href:!0});var Hwr=s(EB);Vze=r(Hwr,"BertTokenizer"),Hwr.forEach(t),Wze=r(OA," or "),yB=n(OA,"A",{href:!0});var Uwr=s(yB);Qze=r(Uwr,"BertTokenizerFast"),Uwr.forEach(t),Hze=r(OA," (QDQBert model)"),OA.forEach(t),Uze=i(y),Fg=n(y,"LI",{});var ave=s(Fg);NQ=n(ave,"STRONG",{});var Jwr=s(NQ);Jze=r(Jwr,"rag"),Jwr.forEach(t),Yze=r(ave," \u2014 "),wB=n(ave,"A",{href:!0});var Ywr=s(wB);Kze=r(Ywr,"RagTokenizer"),Ywr.forEach(t),Zze=r(ave," (RAG model)"),ave.forEach(t),eVe=i(y),ps=n(y,"LI",{});var XA=s(ps);DQ=n(XA,"STRONG",{});var Kwr=s(DQ);oVe=r(Kwr,"reformer"),Kwr.forEach(t),rVe=r(XA," \u2014 "),AB=n(XA,"A",{href:!0});var Zwr=s(AB);tVe=r(Zwr,"ReformerTokenizer"),Zwr.forEach(t),aVe=r(XA," or "),LB=n(XA,"A",{href:!0});var eAr=s(LB);nVe=r(eAr,"ReformerTokenizerFast"),eAr.forEach(t),sVe=r(XA," (Reformer model)"),XA.forEach(t),lVe=i(y),_s=n(y,"LI",{});var zA=s(_s);qQ=n(zA,"STRONG",{});var oAr=s(qQ);iVe=r(oAr,"rembert"),oAr.forEach(t),dVe=r(zA," \u2014 "),BB=n(zA,"A",{href:!0});var rAr=s(BB);cVe=r(rAr,"RemBertTokenizer"),rAr.forEach(t),fVe=r(zA," or "),xB=n(zA,"A",{href:!0});var tAr=s(xB);mVe=r(tAr,"RemBertTokenizerFast"),tAr.forEach(t),gVe=r(zA," (RemBERT model)"),zA.forEach(t),hVe=i(y),us=n(y,"LI",{});var VA=s(us);GQ=n(VA,"STRONG",{});var aAr=s(GQ);pVe=r(aAr,"retribert"),aAr.forEach(t),_Ve=r(VA," \u2014 "),kB=n(VA,"A",{href:!0});var nAr=s(kB);uVe=r(nAr,"RetriBertTokenizer"),nAr.forEach(t),bVe=r(VA," or "),RB=n(VA,"A",{href:!0});var sAr=s(RB);vVe=r(sAr,"RetriBertTokenizerFast"),sAr.forEach(t),TVe=r(VA," (RetriBERT model)"),VA.forEach(t),FVe=i(y),bs=n(y,"LI",{});var WA=s(bs);OQ=n(WA,"STRONG",{});var lAr=s(OQ);CVe=r(lAr,"roberta"),lAr.forEach(t),MVe=r(WA," \u2014 "),SB=n(WA,"A",{href:!0});var iAr=s(SB);EVe=r(iAr,"RobertaTokenizer"),iAr.forEach(t),yVe=r(WA," or "),PB=n(WA,"A",{href:!0});var dAr=s(PB);wVe=r(dAr,"RobertaTokenizerFast"),dAr.forEach(t),AVe=r(WA," (RoBERTa model)"),WA.forEach(t),LVe=i(y),vs=n(y,"LI",{});var QA=s(vs);XQ=n(QA,"STRONG",{});var cAr=s(XQ);BVe=r(cAr,"roformer"),cAr.forEach(t),xVe=r(QA," \u2014 "),$B=n(QA,"A",{href:!0});var fAr=s($B);kVe=r(fAr,"RoFormerTokenizer"),fAr.forEach(t),RVe=r(QA," or "),IB=n(QA,"A",{href:!0});var mAr=s(IB);SVe=r(mAr,"RoFormerTokenizerFast"),mAr.forEach(t),PVe=r(QA," (RoFormer model)"),QA.forEach(t),$Ve=i(y),Cg=n(y,"LI",{});var nve=s(Cg);zQ=n(nve,"STRONG",{});var gAr=s(zQ);IVe=r(gAr,"speech_to_text"),gAr.forEach(t),jVe=r(nve," \u2014 "),jB=n(nve,"A",{href:!0});var hAr=s(jB);NVe=r(hAr,"Speech2TextTokenizer"),hAr.forEach(t),DVe=r(nve," (Speech2Text model)"),nve.forEach(t),qVe=i(y),Mg=n(y,"LI",{});var sve=s(Mg);VQ=n(sve,"STRONG",{});var pAr=s(VQ);GVe=r(pAr,"speech_to_text_2"),pAr.forEach(t),OVe=r(sve," \u2014 "),NB=n(sve,"A",{href:!0});var _Ar=s(NB);XVe=r(_Ar,"Speech2Text2Tokenizer"),_Ar.forEach(t),zVe=r(sve," (Speech2Text2 model)"),sve.forEach(t),VVe=i(y),Ts=n(y,"LI",{});var HA=s(Ts);WQ=n(HA,"STRONG",{});var uAr=s(WQ);WVe=r(uAr,"splinter"),uAr.forEach(t),QVe=r(HA," \u2014 "),DB=n(HA,"A",{href:!0});var bAr=s(DB);HVe=r(bAr,"SplinterTokenizer"),bAr.forEach(t),UVe=r(HA," or "),qB=n(HA,"A",{href:!0});var vAr=s(qB);JVe=r(vAr,"SplinterTokenizerFast"),vAr.forEach(t),YVe=r(HA," (Splinter model)"),HA.forEach(t),KVe=i(y),Fs=n(y,"LI",{});var UA=s(Fs);QQ=n(UA,"STRONG",{});var TAr=s(QQ);ZVe=r(TAr,"squeezebert"),TAr.forEach(t),eWe=r(UA," \u2014 "),GB=n(UA,"A",{href:!0});var FAr=s(GB);oWe=r(FAr,"SqueezeBertTokenizer"),FAr.forEach(t),rWe=r(UA," or "),OB=n(UA,"A",{href:!0});var CAr=s(OB);tWe=r(CAr,"SqueezeBertTokenizerFast"),CAr.forEach(t),aWe=r(UA," (SqueezeBERT model)"),UA.forEach(t),nWe=i(y),Cs=n(y,"LI",{});var JA=s(Cs);HQ=n(JA,"STRONG",{});var MAr=s(HQ);sWe=r(MAr,"t5"),MAr.forEach(t),lWe=r(JA," \u2014 "),XB=n(JA,"A",{href:!0});var EAr=s(XB);iWe=r(EAr,"T5Tokenizer"),EAr.forEach(t),dWe=r(JA," or "),zB=n(JA,"A",{href:!0});var yAr=s(zB);cWe=r(yAr,"T5TokenizerFast"),yAr.forEach(t),fWe=r(JA," (T5 model)"),JA.forEach(t),mWe=i(y),Eg=n(y,"LI",{});var lve=s(Eg);UQ=n(lve,"STRONG",{});var wAr=s(UQ);gWe=r(wAr,"tapas"),wAr.forEach(t),hWe=r(lve," \u2014 "),VB=n(lve,"A",{href:!0});var AAr=s(VB);pWe=r(AAr,"TapasTokenizer"),AAr.forEach(t),_We=r(lve," (TAPAS model)"),lve.forEach(t),uWe=i(y),yg=n(y,"LI",{});var ive=s(yg);JQ=n(ive,"STRONG",{});var LAr=s(JQ);bWe=r(LAr,"transfo-xl"),LAr.forEach(t),vWe=r(ive," \u2014 "),WB=n(ive,"A",{href:!0});var BAr=s(WB);TWe=r(BAr,"TransfoXLTokenizer"),BAr.forEach(t),FWe=r(ive," (Transformer-XL model)"),ive.forEach(t),CWe=i(y),wg=n(y,"LI",{});var dve=s(wg);YQ=n(dve,"STRONG",{});var xAr=s(YQ);MWe=r(xAr,"wav2vec2"),xAr.forEach(t),EWe=r(dve," \u2014 "),QB=n(dve,"A",{href:!0});var kAr=s(QB);yWe=r(kAr,"Wav2Vec2CTCTokenizer"),kAr.forEach(t),wWe=r(dve," (Wav2Vec2 model)"),dve.forEach(t),AWe=i(y),Ag=n(y,"LI",{});var cve=s(Ag);KQ=n(cve,"STRONG",{});var RAr=s(KQ);LWe=r(RAr,"wav2vec2_phoneme"),RAr.forEach(t),BWe=r(cve," \u2014 "),HB=n(cve,"A",{href:!0});var SAr=s(HB);xWe=r(SAr,"Wav2Vec2PhonemeCTCTokenizer"),SAr.forEach(t),kWe=r(cve," (Wav2Vec2Phoneme model)"),cve.forEach(t),RWe=i(y),Ms=n(y,"LI",{});var YA=s(Ms);ZQ=n(YA,"STRONG",{});var PAr=s(ZQ);SWe=r(PAr,"xglm"),PAr.forEach(t),PWe=r(YA," \u2014 "),UB=n(YA,"A",{href:!0});var $Ar=s(UB);$We=r($Ar,"XGLMTokenizer"),$Ar.forEach(t),IWe=r(YA," or "),JB=n(YA,"A",{href:!0});var IAr=s(JB);jWe=r(IAr,"XGLMTokenizerFast"),IAr.forEach(t),NWe=r(YA," (XGLM model)"),YA.forEach(t),DWe=i(y),Lg=n(y,"LI",{});var fve=s(Lg);eH=n(fve,"STRONG",{});var jAr=s(eH);qWe=r(jAr,"xlm"),jAr.forEach(t),GWe=r(fve," \u2014 "),YB=n(fve,"A",{href:!0});var NAr=s(YB);OWe=r(NAr,"XLMTokenizer"),NAr.forEach(t),XWe=r(fve," (XLM model)"),fve.forEach(t),zWe=i(y),Bg=n(y,"LI",{});var mve=s(Bg);oH=n(mve,"STRONG",{});var DAr=s(oH);VWe=r(DAr,"xlm-prophetnet"),DAr.forEach(t),WWe=r(mve," \u2014 "),KB=n(mve,"A",{href:!0});var qAr=s(KB);QWe=r(qAr,"XLMProphetNetTokenizer"),qAr.forEach(t),HWe=r(mve," (XLMProphetNet model)"),mve.forEach(t),UWe=i(y),Es=n(y,"LI",{});var KA=s(Es);rH=n(KA,"STRONG",{});var GAr=s(rH);JWe=r(GAr,"xlm-roberta"),GAr.forEach(t),YWe=r(KA," \u2014 "),ZB=n(KA,"A",{href:!0});var OAr=s(ZB);KWe=r(OAr,"XLMRobertaTokenizer"),OAr.forEach(t),ZWe=r(KA," or "),ex=n(KA,"A",{href:!0});var XAr=s(ex);eQe=r(XAr,"XLMRobertaTokenizerFast"),XAr.forEach(t),oQe=r(KA," (XLM-RoBERTa model)"),KA.forEach(t),rQe=i(y),ys=n(y,"LI",{});var ZA=s(ys);tH=n(ZA,"STRONG",{});var zAr=s(tH);tQe=r(zAr,"xlnet"),zAr.forEach(t),aQe=r(ZA," \u2014 "),ox=n(ZA,"A",{href:!0});var VAr=s(ox);nQe=r(VAr,"XLNetTokenizer"),VAr.forEach(t),sQe=r(ZA," or "),rx=n(ZA,"A",{href:!0});var WAr=s(rx);lQe=r(WAr,"XLNetTokenizerFast"),WAr.forEach(t),iQe=r(ZA," (XLNet model)"),ZA.forEach(t),y.forEach(t),dQe=i(na),aH=n(na,"P",{});var QAr=s(aH);cQe=r(QAr,"Examples:"),QAr.forEach(t),fQe=i(na),m(VC.$$.fragment,na),na.forEach(t),mQe=i(xs),xg=n(xs,"DIV",{class:!0});var ELe=s(xg);m(WC.$$.fragment,ELe),gQe=i(ELe),nH=n(ELe,"P",{});var HAr=s(nH);hQe=r(HAr,"Register a new tokenizer in this mapping."),HAr.forEach(t),ELe.forEach(t),xs.forEach(t),EAe=i(d),Bi=n(d,"H2",{class:!0});var yLe=s(Bi);kg=n(yLe,"A",{id:!0,class:!0,href:!0});var UAr=s(kg);sH=n(UAr,"SPAN",{});var JAr=s(sH);m(QC.$$.fragment,JAr),JAr.forEach(t),UAr.forEach(t),pQe=i(yLe),lH=n(yLe,"SPAN",{});var YAr=s(lH);_Qe=r(YAr,"AutoFeatureExtractor"),YAr.forEach(t),yLe.forEach(t),yAe=i(d),Oo=n(d,"DIV",{class:!0});var ks=s(Oo);m(HC.$$.fragment,ks),uQe=i(ks),UC=n(ks,"P",{});var wLe=s(UC);bQe=r(wLe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tx=n(wLe,"A",{href:!0});var KAr=s(tx);vQe=r(KAr,"AutoFeatureExtractor.from_pretrained()"),KAr.forEach(t),TQe=r(wLe," class method."),wLe.forEach(t),FQe=i(ks),JC=n(ks,"P",{});var ALe=s(JC);CQe=r(ALe,"This class cannot be instantiated directly using "),iH=n(ALe,"CODE",{});var ZAr=s(iH);MQe=r(ZAr,"__init__()"),ZAr.forEach(t),EQe=r(ALe," (throws an error)."),ALe.forEach(t),yQe=i(ks),Le=n(ks,"DIV",{class:!0});var At=s(Le);m(YC.$$.fragment,At),wQe=i(At),dH=n(At,"P",{});var e0r=s(dH);AQe=r(e0r,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),e0r.forEach(t),LQe=i(At),Pa=n(At,"P",{});var RF=s(Pa);BQe=r(RF,"The feature extractor class to instantiate is selected based on the "),cH=n(RF,"CODE",{});var o0r=s(cH);xQe=r(o0r,"model_type"),o0r.forEach(t),kQe=r(RF,` property of the config object
(either passed as an argument or loaded from `),fH=n(RF,"CODE",{});var r0r=s(fH);RQe=r(r0r,"pretrained_model_name_or_path"),r0r.forEach(t),SQe=r(RF,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mH=n(RF,"CODE",{});var t0r=s(mH);PQe=r(t0r,"pretrained_model_name_or_path"),t0r.forEach(t),$Qe=r(RF,":"),RF.forEach(t),IQe=i(At),se=n(At,"UL",{});var de=s(se);Rg=n(de,"LI",{});var gve=s(Rg);gH=n(gve,"STRONG",{});var a0r=s(gH);jQe=r(a0r,"beit"),a0r.forEach(t),NQe=r(gve," \u2014 "),ax=n(gve,"A",{href:!0});var n0r=s(ax);DQe=r(n0r,"BeitFeatureExtractor"),n0r.forEach(t),qQe=r(gve," (BEiT model)"),gve.forEach(t),GQe=i(de),Sg=n(de,"LI",{});var hve=s(Sg);hH=n(hve,"STRONG",{});var s0r=s(hH);OQe=r(s0r,"clip"),s0r.forEach(t),XQe=r(hve," \u2014 "),nx=n(hve,"A",{href:!0});var l0r=s(nx);zQe=r(l0r,"CLIPFeatureExtractor"),l0r.forEach(t),VQe=r(hve," (CLIP model)"),hve.forEach(t),WQe=i(de),Pg=n(de,"LI",{});var pve=s(Pg);pH=n(pve,"STRONG",{});var i0r=s(pH);QQe=r(i0r,"convnext"),i0r.forEach(t),HQe=r(pve," \u2014 "),sx=n(pve,"A",{href:!0});var d0r=s(sx);UQe=r(d0r,"ConvNextFeatureExtractor"),d0r.forEach(t),JQe=r(pve," (ConvNext model)"),pve.forEach(t),YQe=i(de),$g=n(de,"LI",{});var _ve=s($g);_H=n(_ve,"STRONG",{});var c0r=s(_H);KQe=r(c0r,"deit"),c0r.forEach(t),ZQe=r(_ve," \u2014 "),lx=n(_ve,"A",{href:!0});var f0r=s(lx);eHe=r(f0r,"DeiTFeatureExtractor"),f0r.forEach(t),oHe=r(_ve," (DeiT model)"),_ve.forEach(t),rHe=i(de),Ig=n(de,"LI",{});var uve=s(Ig);uH=n(uve,"STRONG",{});var m0r=s(uH);tHe=r(m0r,"detr"),m0r.forEach(t),aHe=r(uve," \u2014 "),ix=n(uve,"A",{href:!0});var g0r=s(ix);nHe=r(g0r,"DetrFeatureExtractor"),g0r.forEach(t),sHe=r(uve," (DETR model)"),uve.forEach(t),lHe=i(de),jg=n(de,"LI",{});var bve=s(jg);bH=n(bve,"STRONG",{});var h0r=s(bH);iHe=r(h0r,"hubert"),h0r.forEach(t),dHe=r(bve," \u2014 "),dx=n(bve,"A",{href:!0});var p0r=s(dx);cHe=r(p0r,"Wav2Vec2FeatureExtractor"),p0r.forEach(t),fHe=r(bve," (Hubert model)"),bve.forEach(t),mHe=i(de),Ng=n(de,"LI",{});var vve=s(Ng);vH=n(vve,"STRONG",{});var _0r=s(vH);gHe=r(_0r,"layoutlmv2"),_0r.forEach(t),hHe=r(vve," \u2014 "),cx=n(vve,"A",{href:!0});var u0r=s(cx);pHe=r(u0r,"LayoutLMv2FeatureExtractor"),u0r.forEach(t),_He=r(vve," (LayoutLMv2 model)"),vve.forEach(t),uHe=i(de),Dg=n(de,"LI",{});var Tve=s(Dg);TH=n(Tve,"STRONG",{});var b0r=s(TH);bHe=r(b0r,"perceiver"),b0r.forEach(t),vHe=r(Tve," \u2014 "),fx=n(Tve,"A",{href:!0});var v0r=s(fx);THe=r(v0r,"PerceiverFeatureExtractor"),v0r.forEach(t),FHe=r(Tve," (Perceiver model)"),Tve.forEach(t),CHe=i(de),qg=n(de,"LI",{});var Fve=s(qg);FH=n(Fve,"STRONG",{});var T0r=s(FH);MHe=r(T0r,"segformer"),T0r.forEach(t),EHe=r(Fve," \u2014 "),mx=n(Fve,"A",{href:!0});var F0r=s(mx);yHe=r(F0r,"SegformerFeatureExtractor"),F0r.forEach(t),wHe=r(Fve," (SegFormer model)"),Fve.forEach(t),AHe=i(de),Gg=n(de,"LI",{});var Cve=s(Gg);CH=n(Cve,"STRONG",{});var C0r=s(CH);LHe=r(C0r,"speech_to_text"),C0r.forEach(t),BHe=r(Cve," \u2014 "),gx=n(Cve,"A",{href:!0});var M0r=s(gx);xHe=r(M0r,"Speech2TextFeatureExtractor"),M0r.forEach(t),kHe=r(Cve," (Speech2Text model)"),Cve.forEach(t),RHe=i(de),Og=n(de,"LI",{});var Mve=s(Og);MH=n(Mve,"STRONG",{});var E0r=s(MH);SHe=r(E0r,"swin"),E0r.forEach(t),PHe=r(Mve," \u2014 "),hx=n(Mve,"A",{href:!0});var y0r=s(hx);$He=r(y0r,"ViTFeatureExtractor"),y0r.forEach(t),IHe=r(Mve," (Swin model)"),Mve.forEach(t),jHe=i(de),Xg=n(de,"LI",{});var Eve=s(Xg);EH=n(Eve,"STRONG",{});var w0r=s(EH);NHe=r(w0r,"vit"),w0r.forEach(t),DHe=r(Eve," \u2014 "),px=n(Eve,"A",{href:!0});var A0r=s(px);qHe=r(A0r,"ViTFeatureExtractor"),A0r.forEach(t),GHe=r(Eve," (ViT model)"),Eve.forEach(t),OHe=i(de),zg=n(de,"LI",{});var yve=s(zg);yH=n(yve,"STRONG",{});var L0r=s(yH);XHe=r(L0r,"vit_mae"),L0r.forEach(t),zHe=r(yve," \u2014 "),_x=n(yve,"A",{href:!0});var B0r=s(_x);VHe=r(B0r,"ViTFeatureExtractor"),B0r.forEach(t),WHe=r(yve," (ViTMAE model)"),yve.forEach(t),QHe=i(de),Vg=n(de,"LI",{});var wve=s(Vg);wH=n(wve,"STRONG",{});var x0r=s(wH);HHe=r(x0r,"wav2vec2"),x0r.forEach(t),UHe=r(wve," \u2014 "),ux=n(wve,"A",{href:!0});var k0r=s(ux);JHe=r(k0r,"Wav2Vec2FeatureExtractor"),k0r.forEach(t),YHe=r(wve," (Wav2Vec2 model)"),wve.forEach(t),de.forEach(t),KHe=i(At),m(Wg.$$.fragment,At),ZHe=i(At),AH=n(At,"P",{});var R0r=s(AH);eUe=r(R0r,"Examples:"),R0r.forEach(t),oUe=i(At),m(KC.$$.fragment,At),At.forEach(t),rUe=i(ks),Qg=n(ks,"DIV",{class:!0});var LLe=s(Qg);m(ZC.$$.fragment,LLe),tUe=i(LLe),LH=n(LLe,"P",{});var S0r=s(LH);aUe=r(S0r,"Register a new feature extractor for this class."),S0r.forEach(t),LLe.forEach(t),ks.forEach(t),wAe=i(d),xi=n(d,"H2",{class:!0});var BLe=s(xi);Hg=n(BLe,"A",{id:!0,class:!0,href:!0});var P0r=s(Hg);BH=n(P0r,"SPAN",{});var $0r=s(BH);m(e4.$$.fragment,$0r),$0r.forEach(t),P0r.forEach(t),nUe=i(BLe),xH=n(BLe,"SPAN",{});var I0r=s(xH);sUe=r(I0r,"AutoProcessor"),I0r.forEach(t),BLe.forEach(t),AAe=i(d),ea=n(d,"DIV",{class:!0});var SF=s(ea);m(o4.$$.fragment,SF),lUe=i(SF),r4=n(SF,"P",{});var xLe=s(r4);iUe=r(xLe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bx=n(xLe,"A",{href:!0});var j0r=s(bx);dUe=r(j0r,"AutoProcessor.from_pretrained()"),j0r.forEach(t),cUe=r(xLe," class method."),xLe.forEach(t),fUe=i(SF),t4=n(SF,"P",{});var kLe=s(t4);mUe=r(kLe,"This class cannot be instantiated directly using "),kH=n(kLe,"CODE",{});var N0r=s(kH);gUe=r(N0r,"__init__()"),N0r.forEach(t),hUe=r(kLe," (throws an error)."),kLe.forEach(t),pUe=i(SF),Be=n(SF,"DIV",{class:!0});var Lt=s(Be);m(a4.$$.fragment,Lt),_Ue=i(Lt),RH=n(Lt,"P",{});var D0r=s(RH);uUe=r(D0r,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),D0r.forEach(t),bUe=i(Lt),ki=n(Lt,"P",{});var JO=s(ki);vUe=r(JO,"The processor class to instantiate is selected based on the "),SH=n(JO,"CODE",{});var q0r=s(SH);TUe=r(q0r,"model_type"),q0r.forEach(t),FUe=r(JO,` property of the config object (either
passed as an argument or loaded from `),PH=n(JO,"CODE",{});var G0r=s(PH);CUe=r(G0r,"pretrained_model_name_or_path"),G0r.forEach(t),MUe=r(JO," if possible):"),JO.forEach(t),EUe=i(Lt),ye=n(Lt,"UL",{});var Io=s(ye);Ug=n(Io,"LI",{});var Ave=s(Ug);$H=n(Ave,"STRONG",{});var O0r=s($H);yUe=r(O0r,"clip"),O0r.forEach(t),wUe=r(Ave," \u2014 "),vx=n(Ave,"A",{href:!0});var X0r=s(vx);AUe=r(X0r,"CLIPProcessor"),X0r.forEach(t),LUe=r(Ave," (CLIP model)"),Ave.forEach(t),BUe=i(Io),Jg=n(Io,"LI",{});var Lve=s(Jg);IH=n(Lve,"STRONG",{});var z0r=s(IH);xUe=r(z0r,"layoutlmv2"),z0r.forEach(t),kUe=r(Lve," \u2014 "),Tx=n(Lve,"A",{href:!0});var V0r=s(Tx);RUe=r(V0r,"LayoutLMv2Processor"),V0r.forEach(t),SUe=r(Lve," (LayoutLMv2 model)"),Lve.forEach(t),PUe=i(Io),Yg=n(Io,"LI",{});var Bve=s(Yg);jH=n(Bve,"STRONG",{});var W0r=s(jH);$Ue=r(W0r,"layoutxlm"),W0r.forEach(t),IUe=r(Bve," \u2014 "),Fx=n(Bve,"A",{href:!0});var Q0r=s(Fx);jUe=r(Q0r,"LayoutXLMProcessor"),Q0r.forEach(t),NUe=r(Bve," (LayoutXLM model)"),Bve.forEach(t),DUe=i(Io),Kg=n(Io,"LI",{});var xve=s(Kg);NH=n(xve,"STRONG",{});var H0r=s(NH);qUe=r(H0r,"speech_to_text"),H0r.forEach(t),GUe=r(xve," \u2014 "),Cx=n(xve,"A",{href:!0});var U0r=s(Cx);OUe=r(U0r,"Speech2TextProcessor"),U0r.forEach(t),XUe=r(xve," (Speech2Text model)"),xve.forEach(t),zUe=i(Io),Zg=n(Io,"LI",{});var kve=s(Zg);DH=n(kve,"STRONG",{});var J0r=s(DH);VUe=r(J0r,"speech_to_text_2"),J0r.forEach(t),WUe=r(kve," \u2014 "),Mx=n(kve,"A",{href:!0});var Y0r=s(Mx);QUe=r(Y0r,"Speech2Text2Processor"),Y0r.forEach(t),HUe=r(kve," (Speech2Text2 model)"),kve.forEach(t),UUe=i(Io),eh=n(Io,"LI",{});var Rve=s(eh);qH=n(Rve,"STRONG",{});var K0r=s(qH);JUe=r(K0r,"trocr"),K0r.forEach(t),YUe=r(Rve," \u2014 "),Ex=n(Rve,"A",{href:!0});var Z0r=s(Ex);KUe=r(Z0r,"TrOCRProcessor"),Z0r.forEach(t),ZUe=r(Rve," (TrOCR model)"),Rve.forEach(t),eJe=i(Io),oh=n(Io,"LI",{});var Sve=s(oh);GH=n(Sve,"STRONG",{});var eLr=s(GH);oJe=r(eLr,"vision-text-dual-encoder"),eLr.forEach(t),rJe=r(Sve," \u2014 "),yx=n(Sve,"A",{href:!0});var oLr=s(yx);tJe=r(oLr,"VisionTextDualEncoderProcessor"),oLr.forEach(t),aJe=r(Sve," (VisionTextDualEncoder model)"),Sve.forEach(t),nJe=i(Io),rh=n(Io,"LI",{});var Pve=s(rh);OH=n(Pve,"STRONG",{});var rLr=s(OH);sJe=r(rLr,"wav2vec2"),rLr.forEach(t),lJe=r(Pve," \u2014 "),wx=n(Pve,"A",{href:!0});var tLr=s(wx);iJe=r(tLr,"Wav2Vec2Processor"),tLr.forEach(t),dJe=r(Pve," (Wav2Vec2 model)"),Pve.forEach(t),Io.forEach(t),cJe=i(Lt),m(th.$$.fragment,Lt),fJe=i(Lt),XH=n(Lt,"P",{});var aLr=s(XH);mJe=r(aLr,"Examples:"),aLr.forEach(t),gJe=i(Lt),m(n4.$$.fragment,Lt),Lt.forEach(t),SF.forEach(t),LAe=i(d),Ri=n(d,"H2",{class:!0});var RLe=s(Ri);ah=n(RLe,"A",{id:!0,class:!0,href:!0});var nLr=s(ah);zH=n(nLr,"SPAN",{});var sLr=s(zH);m(s4.$$.fragment,sLr),sLr.forEach(t),nLr.forEach(t),hJe=i(RLe),VH=n(RLe,"SPAN",{});var lLr=s(VH);pJe=r(lLr,"AutoModel"),lLr.forEach(t),RLe.forEach(t),BAe=i(d),Xo=n(d,"DIV",{class:!0});var Rs=s(Xo);m(l4.$$.fragment,Rs),_Je=i(Rs),Si=n(Rs,"P",{});var YO=s(Si);uJe=r(YO,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WH=n(YO,"CODE",{});var iLr=s(WH);bJe=r(iLr,"from_pretrained()"),iLr.forEach(t),vJe=r(YO,"class method or the "),QH=n(YO,"CODE",{});var dLr=s(QH);TJe=r(dLr,"from_config()"),dLr.forEach(t),FJe=r(YO,`class
method.`),YO.forEach(t),CJe=i(Rs),i4=n(Rs,"P",{});var SLe=s(i4);MJe=r(SLe,"This class cannot be instantiated directly using "),HH=n(SLe,"CODE",{});var cLr=s(HH);EJe=r(cLr,"__init__()"),cLr.forEach(t),yJe=r(SLe," (throws an error)."),SLe.forEach(t),wJe=i(Rs),$r=n(Rs,"DIV",{class:!0});var Ss=s($r);m(d4.$$.fragment,Ss),AJe=i(Ss),UH=n(Ss,"P",{});var fLr=s(UH);LJe=r(fLr,"Instantiates one of the base model classes of the library from a configuration."),fLr.forEach(t),BJe=i(Ss),Pi=n(Ss,"P",{});var KO=s(Pi);xJe=r(KO,`Note:
Loading a model from its configuration file does `),JH=n(KO,"STRONG",{});var mLr=s(JH);kJe=r(mLr,"not"),mLr.forEach(t),RJe=r(KO,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(KO,"CODE",{});var gLr=s(YH);SJe=r(gLr,"from_pretrained()"),gLr.forEach(t),PJe=r(KO,"to load the model weights."),KO.forEach(t),$Je=i(Ss),KH=n(Ss,"P",{});var hLr=s(KH);IJe=r(hLr,"Examples:"),hLr.forEach(t),jJe=i(Ss),m(c4.$$.fragment,Ss),Ss.forEach(t),NJe=i(Rs),xe=n(Rs,"DIV",{class:!0});var Bt=s(xe);m(f4.$$.fragment,Bt),DJe=i(Bt),ZH=n(Bt,"P",{});var pLr=s(ZH);qJe=r(pLr,"Instantiate one of the base model classes of the library from a pretrained model."),pLr.forEach(t),GJe=i(Bt),$a=n(Bt,"P",{});var PF=s($a);OJe=r(PF,"The model class to instantiate is selected based on the "),eU=n(PF,"CODE",{});var _Lr=s(eU);XJe=r(_Lr,"model_type"),_Lr.forEach(t),zJe=r(PF,` property of the config object (either
passed as an argument or loaded from `),oU=n(PF,"CODE",{});var uLr=s(oU);VJe=r(uLr,"pretrained_model_name_or_path"),uLr.forEach(t),WJe=r(PF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rU=n(PF,"CODE",{});var bLr=s(rU);QJe=r(bLr,"pretrained_model_name_or_path"),bLr.forEach(t),HJe=r(PF,":"),PF.forEach(t),UJe=i(Bt),F=n(Bt,"UL",{});var C=s(F);nh=n(C,"LI",{});var $ve=s(nh);tU=n($ve,"STRONG",{});var vLr=s(tU);JJe=r(vLr,"albert"),vLr.forEach(t),YJe=r($ve," \u2014 "),Ax=n($ve,"A",{href:!0});var TLr=s(Ax);KJe=r(TLr,"AlbertModel"),TLr.forEach(t),ZJe=r($ve," (ALBERT model)"),$ve.forEach(t),eYe=i(C),sh=n(C,"LI",{});var Ive=s(sh);aU=n(Ive,"STRONG",{});var FLr=s(aU);oYe=r(FLr,"bart"),FLr.forEach(t),rYe=r(Ive," \u2014 "),Lx=n(Ive,"A",{href:!0});var CLr=s(Lx);tYe=r(CLr,"BartModel"),CLr.forEach(t),aYe=r(Ive," (BART model)"),Ive.forEach(t),nYe=i(C),lh=n(C,"LI",{});var jve=s(lh);nU=n(jve,"STRONG",{});var MLr=s(nU);sYe=r(MLr,"beit"),MLr.forEach(t),lYe=r(jve," \u2014 "),Bx=n(jve,"A",{href:!0});var ELr=s(Bx);iYe=r(ELr,"BeitModel"),ELr.forEach(t),dYe=r(jve," (BEiT model)"),jve.forEach(t),cYe=i(C),ih=n(C,"LI",{});var Nve=s(ih);sU=n(Nve,"STRONG",{});var yLr=s(sU);fYe=r(yLr,"bert"),yLr.forEach(t),mYe=r(Nve," \u2014 "),xx=n(Nve,"A",{href:!0});var wLr=s(xx);gYe=r(wLr,"BertModel"),wLr.forEach(t),hYe=r(Nve," (BERT model)"),Nve.forEach(t),pYe=i(C),dh=n(C,"LI",{});var Dve=s(dh);lU=n(Dve,"STRONG",{});var ALr=s(lU);_Ye=r(ALr,"bert-generation"),ALr.forEach(t),uYe=r(Dve," \u2014 "),kx=n(Dve,"A",{href:!0});var LLr=s(kx);bYe=r(LLr,"BertGenerationEncoder"),LLr.forEach(t),vYe=r(Dve," (Bert Generation model)"),Dve.forEach(t),TYe=i(C),ch=n(C,"LI",{});var qve=s(ch);iU=n(qve,"STRONG",{});var BLr=s(iU);FYe=r(BLr,"big_bird"),BLr.forEach(t),CYe=r(qve," \u2014 "),Rx=n(qve,"A",{href:!0});var xLr=s(Rx);MYe=r(xLr,"BigBirdModel"),xLr.forEach(t),EYe=r(qve," (BigBird model)"),qve.forEach(t),yYe=i(C),fh=n(C,"LI",{});var Gve=s(fh);dU=n(Gve,"STRONG",{});var kLr=s(dU);wYe=r(kLr,"bigbird_pegasus"),kLr.forEach(t),AYe=r(Gve," \u2014 "),Sx=n(Gve,"A",{href:!0});var RLr=s(Sx);LYe=r(RLr,"BigBirdPegasusModel"),RLr.forEach(t),BYe=r(Gve," (BigBirdPegasus model)"),Gve.forEach(t),xYe=i(C),mh=n(C,"LI",{});var Ove=s(mh);cU=n(Ove,"STRONG",{});var SLr=s(cU);kYe=r(SLr,"blenderbot"),SLr.forEach(t),RYe=r(Ove," \u2014 "),Px=n(Ove,"A",{href:!0});var PLr=s(Px);SYe=r(PLr,"BlenderbotModel"),PLr.forEach(t),PYe=r(Ove," (Blenderbot model)"),Ove.forEach(t),$Ye=i(C),gh=n(C,"LI",{});var Xve=s(gh);fU=n(Xve,"STRONG",{});var $Lr=s(fU);IYe=r($Lr,"blenderbot-small"),$Lr.forEach(t),jYe=r(Xve," \u2014 "),$x=n(Xve,"A",{href:!0});var ILr=s($x);NYe=r(ILr,"BlenderbotSmallModel"),ILr.forEach(t),DYe=r(Xve," (BlenderbotSmall model)"),Xve.forEach(t),qYe=i(C),hh=n(C,"LI",{});var zve=s(hh);mU=n(zve,"STRONG",{});var jLr=s(mU);GYe=r(jLr,"camembert"),jLr.forEach(t),OYe=r(zve," \u2014 "),Ix=n(zve,"A",{href:!0});var NLr=s(Ix);XYe=r(NLr,"CamembertModel"),NLr.forEach(t),zYe=r(zve," (CamemBERT model)"),zve.forEach(t),VYe=i(C),ph=n(C,"LI",{});var Vve=s(ph);gU=n(Vve,"STRONG",{});var DLr=s(gU);WYe=r(DLr,"canine"),DLr.forEach(t),QYe=r(Vve," \u2014 "),jx=n(Vve,"A",{href:!0});var qLr=s(jx);HYe=r(qLr,"CanineModel"),qLr.forEach(t),UYe=r(Vve," (Canine model)"),Vve.forEach(t),JYe=i(C),_h=n(C,"LI",{});var Wve=s(_h);hU=n(Wve,"STRONG",{});var GLr=s(hU);YYe=r(GLr,"clip"),GLr.forEach(t),KYe=r(Wve," \u2014 "),Nx=n(Wve,"A",{href:!0});var OLr=s(Nx);ZYe=r(OLr,"CLIPModel"),OLr.forEach(t),eKe=r(Wve," (CLIP model)"),Wve.forEach(t),oKe=i(C),uh=n(C,"LI",{});var Qve=s(uh);pU=n(Qve,"STRONG",{});var XLr=s(pU);rKe=r(XLr,"convbert"),XLr.forEach(t),tKe=r(Qve," \u2014 "),Dx=n(Qve,"A",{href:!0});var zLr=s(Dx);aKe=r(zLr,"ConvBertModel"),zLr.forEach(t),nKe=r(Qve," (ConvBERT model)"),Qve.forEach(t),sKe=i(C),bh=n(C,"LI",{});var Hve=s(bh);_U=n(Hve,"STRONG",{});var VLr=s(_U);lKe=r(VLr,"convnext"),VLr.forEach(t),iKe=r(Hve," \u2014 "),qx=n(Hve,"A",{href:!0});var WLr=s(qx);dKe=r(WLr,"ConvNextModel"),WLr.forEach(t),cKe=r(Hve," (ConvNext model)"),Hve.forEach(t),fKe=i(C),vh=n(C,"LI",{});var Uve=s(vh);uU=n(Uve,"STRONG",{});var QLr=s(uU);mKe=r(QLr,"ctrl"),QLr.forEach(t),gKe=r(Uve," \u2014 "),Gx=n(Uve,"A",{href:!0});var HLr=s(Gx);hKe=r(HLr,"CTRLModel"),HLr.forEach(t),pKe=r(Uve," (CTRL model)"),Uve.forEach(t),_Ke=i(C),Th=n(C,"LI",{});var Jve=s(Th);bU=n(Jve,"STRONG",{});var ULr=s(bU);uKe=r(ULr,"deberta"),ULr.forEach(t),bKe=r(Jve," \u2014 "),Ox=n(Jve,"A",{href:!0});var JLr=s(Ox);vKe=r(JLr,"DebertaModel"),JLr.forEach(t),TKe=r(Jve," (DeBERTa model)"),Jve.forEach(t),FKe=i(C),Fh=n(C,"LI",{});var Yve=s(Fh);vU=n(Yve,"STRONG",{});var YLr=s(vU);CKe=r(YLr,"deberta-v2"),YLr.forEach(t),MKe=r(Yve," \u2014 "),Xx=n(Yve,"A",{href:!0});var KLr=s(Xx);EKe=r(KLr,"DebertaV2Model"),KLr.forEach(t),yKe=r(Yve," (DeBERTa-v2 model)"),Yve.forEach(t),wKe=i(C),Ch=n(C,"LI",{});var Kve=s(Ch);TU=n(Kve,"STRONG",{});var ZLr=s(TU);AKe=r(ZLr,"deit"),ZLr.forEach(t),LKe=r(Kve," \u2014 "),zx=n(Kve,"A",{href:!0});var e9r=s(zx);BKe=r(e9r,"DeiTModel"),e9r.forEach(t),xKe=r(Kve," (DeiT model)"),Kve.forEach(t),kKe=i(C),Mh=n(C,"LI",{});var Zve=s(Mh);FU=n(Zve,"STRONG",{});var o9r=s(FU);RKe=r(o9r,"detr"),o9r.forEach(t),SKe=r(Zve," \u2014 "),Vx=n(Zve,"A",{href:!0});var r9r=s(Vx);PKe=r(r9r,"DetrModel"),r9r.forEach(t),$Ke=r(Zve," (DETR model)"),Zve.forEach(t),IKe=i(C),Eh=n(C,"LI",{});var e6e=s(Eh);CU=n(e6e,"STRONG",{});var t9r=s(CU);jKe=r(t9r,"distilbert"),t9r.forEach(t),NKe=r(e6e," \u2014 "),Wx=n(e6e,"A",{href:!0});var a9r=s(Wx);DKe=r(a9r,"DistilBertModel"),a9r.forEach(t),qKe=r(e6e," (DistilBERT model)"),e6e.forEach(t),GKe=i(C),yh=n(C,"LI",{});var o6e=s(yh);MU=n(o6e,"STRONG",{});var n9r=s(MU);OKe=r(n9r,"dpr"),n9r.forEach(t),XKe=r(o6e," \u2014 "),Qx=n(o6e,"A",{href:!0});var s9r=s(Qx);zKe=r(s9r,"DPRQuestionEncoder"),s9r.forEach(t),VKe=r(o6e," (DPR model)"),o6e.forEach(t),WKe=i(C),wh=n(C,"LI",{});var r6e=s(wh);EU=n(r6e,"STRONG",{});var l9r=s(EU);QKe=r(l9r,"electra"),l9r.forEach(t),HKe=r(r6e," \u2014 "),Hx=n(r6e,"A",{href:!0});var i9r=s(Hx);UKe=r(i9r,"ElectraModel"),i9r.forEach(t),JKe=r(r6e," (ELECTRA model)"),r6e.forEach(t),YKe=i(C),Ah=n(C,"LI",{});var t6e=s(Ah);yU=n(t6e,"STRONG",{});var d9r=s(yU);KKe=r(d9r,"flaubert"),d9r.forEach(t),ZKe=r(t6e," \u2014 "),Ux=n(t6e,"A",{href:!0});var c9r=s(Ux);eZe=r(c9r,"FlaubertModel"),c9r.forEach(t),oZe=r(t6e," (FlauBERT model)"),t6e.forEach(t),rZe=i(C),Lh=n(C,"LI",{});var a6e=s(Lh);wU=n(a6e,"STRONG",{});var f9r=s(wU);tZe=r(f9r,"fnet"),f9r.forEach(t),aZe=r(a6e," \u2014 "),Jx=n(a6e,"A",{href:!0});var m9r=s(Jx);nZe=r(m9r,"FNetModel"),m9r.forEach(t),sZe=r(a6e," (FNet model)"),a6e.forEach(t),lZe=i(C),Bh=n(C,"LI",{});var n6e=s(Bh);AU=n(n6e,"STRONG",{});var g9r=s(AU);iZe=r(g9r,"fsmt"),g9r.forEach(t),dZe=r(n6e," \u2014 "),Yx=n(n6e,"A",{href:!0});var h9r=s(Yx);cZe=r(h9r,"FSMTModel"),h9r.forEach(t),fZe=r(n6e," (FairSeq Machine-Translation model)"),n6e.forEach(t),mZe=i(C),ws=n(C,"LI",{});var e0=s(ws);LU=n(e0,"STRONG",{});var p9r=s(LU);gZe=r(p9r,"funnel"),p9r.forEach(t),hZe=r(e0," \u2014 "),Kx=n(e0,"A",{href:!0});var _9r=s(Kx);pZe=r(_9r,"FunnelModel"),_9r.forEach(t),_Ze=r(e0," or "),Zx=n(e0,"A",{href:!0});var u9r=s(Zx);uZe=r(u9r,"FunnelBaseModel"),u9r.forEach(t),bZe=r(e0," (Funnel Transformer model)"),e0.forEach(t),vZe=i(C),xh=n(C,"LI",{});var s6e=s(xh);BU=n(s6e,"STRONG",{});var b9r=s(BU);TZe=r(b9r,"gpt2"),b9r.forEach(t),FZe=r(s6e," \u2014 "),ek=n(s6e,"A",{href:!0});var v9r=s(ek);CZe=r(v9r,"GPT2Model"),v9r.forEach(t),MZe=r(s6e," (OpenAI GPT-2 model)"),s6e.forEach(t),EZe=i(C),kh=n(C,"LI",{});var l6e=s(kh);xU=n(l6e,"STRONG",{});var T9r=s(xU);yZe=r(T9r,"gpt_neo"),T9r.forEach(t),wZe=r(l6e," \u2014 "),ok=n(l6e,"A",{href:!0});var F9r=s(ok);AZe=r(F9r,"GPTNeoModel"),F9r.forEach(t),LZe=r(l6e," (GPT Neo model)"),l6e.forEach(t),BZe=i(C),Rh=n(C,"LI",{});var i6e=s(Rh);kU=n(i6e,"STRONG",{});var C9r=s(kU);xZe=r(C9r,"gptj"),C9r.forEach(t),kZe=r(i6e," \u2014 "),rk=n(i6e,"A",{href:!0});var M9r=s(rk);RZe=r(M9r,"GPTJModel"),M9r.forEach(t),SZe=r(i6e," (GPT-J model)"),i6e.forEach(t),PZe=i(C),Sh=n(C,"LI",{});var d6e=s(Sh);RU=n(d6e,"STRONG",{});var E9r=s(RU);$Ze=r(E9r,"hubert"),E9r.forEach(t),IZe=r(d6e," \u2014 "),tk=n(d6e,"A",{href:!0});var y9r=s(tk);jZe=r(y9r,"HubertModel"),y9r.forEach(t),NZe=r(d6e," (Hubert model)"),d6e.forEach(t),DZe=i(C),Ph=n(C,"LI",{});var c6e=s(Ph);SU=n(c6e,"STRONG",{});var w9r=s(SU);qZe=r(w9r,"ibert"),w9r.forEach(t),GZe=r(c6e," \u2014 "),ak=n(c6e,"A",{href:!0});var A9r=s(ak);OZe=r(A9r,"IBertModel"),A9r.forEach(t),XZe=r(c6e," (I-BERT model)"),c6e.forEach(t),zZe=i(C),$h=n(C,"LI",{});var f6e=s($h);PU=n(f6e,"STRONG",{});var L9r=s(PU);VZe=r(L9r,"imagegpt"),L9r.forEach(t),WZe=r(f6e," \u2014 "),nk=n(f6e,"A",{href:!0});var B9r=s(nk);QZe=r(B9r,"ImageGPTModel"),B9r.forEach(t),HZe=r(f6e," (ImageGPT model)"),f6e.forEach(t),UZe=i(C),Ih=n(C,"LI",{});var m6e=s(Ih);$U=n(m6e,"STRONG",{});var x9r=s($U);JZe=r(x9r,"layoutlm"),x9r.forEach(t),YZe=r(m6e," \u2014 "),sk=n(m6e,"A",{href:!0});var k9r=s(sk);KZe=r(k9r,"LayoutLMModel"),k9r.forEach(t),ZZe=r(m6e," (LayoutLM model)"),m6e.forEach(t),eeo=i(C),jh=n(C,"LI",{});var g6e=s(jh);IU=n(g6e,"STRONG",{});var R9r=s(IU);oeo=r(R9r,"layoutlmv2"),R9r.forEach(t),reo=r(g6e," \u2014 "),lk=n(g6e,"A",{href:!0});var S9r=s(lk);teo=r(S9r,"LayoutLMv2Model"),S9r.forEach(t),aeo=r(g6e," (LayoutLMv2 model)"),g6e.forEach(t),neo=i(C),Nh=n(C,"LI",{});var h6e=s(Nh);jU=n(h6e,"STRONG",{});var P9r=s(jU);seo=r(P9r,"led"),P9r.forEach(t),leo=r(h6e," \u2014 "),ik=n(h6e,"A",{href:!0});var $9r=s(ik);ieo=r($9r,"LEDModel"),$9r.forEach(t),deo=r(h6e," (LED model)"),h6e.forEach(t),ceo=i(C),Dh=n(C,"LI",{});var p6e=s(Dh);NU=n(p6e,"STRONG",{});var I9r=s(NU);feo=r(I9r,"longformer"),I9r.forEach(t),meo=r(p6e," \u2014 "),dk=n(p6e,"A",{href:!0});var j9r=s(dk);geo=r(j9r,"LongformerModel"),j9r.forEach(t),heo=r(p6e," (Longformer model)"),p6e.forEach(t),peo=i(C),qh=n(C,"LI",{});var _6e=s(qh);DU=n(_6e,"STRONG",{});var N9r=s(DU);_eo=r(N9r,"luke"),N9r.forEach(t),ueo=r(_6e," \u2014 "),ck=n(_6e,"A",{href:!0});var D9r=s(ck);beo=r(D9r,"LukeModel"),D9r.forEach(t),veo=r(_6e," (LUKE model)"),_6e.forEach(t),Teo=i(C),Gh=n(C,"LI",{});var u6e=s(Gh);qU=n(u6e,"STRONG",{});var q9r=s(qU);Feo=r(q9r,"lxmert"),q9r.forEach(t),Ceo=r(u6e," \u2014 "),fk=n(u6e,"A",{href:!0});var G9r=s(fk);Meo=r(G9r,"LxmertModel"),G9r.forEach(t),Eeo=r(u6e," (LXMERT model)"),u6e.forEach(t),yeo=i(C),Oh=n(C,"LI",{});var b6e=s(Oh);GU=n(b6e,"STRONG",{});var O9r=s(GU);weo=r(O9r,"m2m_100"),O9r.forEach(t),Aeo=r(b6e," \u2014 "),mk=n(b6e,"A",{href:!0});var X9r=s(mk);Leo=r(X9r,"M2M100Model"),X9r.forEach(t),Beo=r(b6e," (M2M100 model)"),b6e.forEach(t),xeo=i(C),Xh=n(C,"LI",{});var v6e=s(Xh);OU=n(v6e,"STRONG",{});var z9r=s(OU);keo=r(z9r,"marian"),z9r.forEach(t),Reo=r(v6e," \u2014 "),gk=n(v6e,"A",{href:!0});var V9r=s(gk);Seo=r(V9r,"MarianModel"),V9r.forEach(t),Peo=r(v6e," (Marian model)"),v6e.forEach(t),$eo=i(C),zh=n(C,"LI",{});var T6e=s(zh);XU=n(T6e,"STRONG",{});var W9r=s(XU);Ieo=r(W9r,"mbart"),W9r.forEach(t),jeo=r(T6e," \u2014 "),hk=n(T6e,"A",{href:!0});var Q9r=s(hk);Neo=r(Q9r,"MBartModel"),Q9r.forEach(t),Deo=r(T6e," (mBART model)"),T6e.forEach(t),qeo=i(C),Vh=n(C,"LI",{});var F6e=s(Vh);zU=n(F6e,"STRONG",{});var H9r=s(zU);Geo=r(H9r,"megatron-bert"),H9r.forEach(t),Oeo=r(F6e," \u2014 "),pk=n(F6e,"A",{href:!0});var U9r=s(pk);Xeo=r(U9r,"MegatronBertModel"),U9r.forEach(t),zeo=r(F6e," (MegatronBert model)"),F6e.forEach(t),Veo=i(C),Wh=n(C,"LI",{});var C6e=s(Wh);VU=n(C6e,"STRONG",{});var J9r=s(VU);Weo=r(J9r,"mobilebert"),J9r.forEach(t),Qeo=r(C6e," \u2014 "),_k=n(C6e,"A",{href:!0});var Y9r=s(_k);Heo=r(Y9r,"MobileBertModel"),Y9r.forEach(t),Ueo=r(C6e," (MobileBERT model)"),C6e.forEach(t),Jeo=i(C),Qh=n(C,"LI",{});var M6e=s(Qh);WU=n(M6e,"STRONG",{});var K9r=s(WU);Yeo=r(K9r,"mpnet"),K9r.forEach(t),Keo=r(M6e," \u2014 "),uk=n(M6e,"A",{href:!0});var Z9r=s(uk);Zeo=r(Z9r,"MPNetModel"),Z9r.forEach(t),eoo=r(M6e," (MPNet model)"),M6e.forEach(t),ooo=i(C),Hh=n(C,"LI",{});var E6e=s(Hh);QU=n(E6e,"STRONG",{});var eBr=s(QU);roo=r(eBr,"mt5"),eBr.forEach(t),too=r(E6e," \u2014 "),bk=n(E6e,"A",{href:!0});var oBr=s(bk);aoo=r(oBr,"MT5Model"),oBr.forEach(t),noo=r(E6e," (mT5 model)"),E6e.forEach(t),soo=i(C),Uh=n(C,"LI",{});var y6e=s(Uh);HU=n(y6e,"STRONG",{});var rBr=s(HU);loo=r(rBr,"nystromformer"),rBr.forEach(t),ioo=r(y6e," \u2014 "),vk=n(y6e,"A",{href:!0});var tBr=s(vk);doo=r(tBr,"NystromformerModel"),tBr.forEach(t),coo=r(y6e," (Nystromformer model)"),y6e.forEach(t),foo=i(C),Jh=n(C,"LI",{});var w6e=s(Jh);UU=n(w6e,"STRONG",{});var aBr=s(UU);moo=r(aBr,"openai-gpt"),aBr.forEach(t),goo=r(w6e," \u2014 "),Tk=n(w6e,"A",{href:!0});var nBr=s(Tk);hoo=r(nBr,"OpenAIGPTModel"),nBr.forEach(t),poo=r(w6e," (OpenAI GPT model)"),w6e.forEach(t),_oo=i(C),Yh=n(C,"LI",{});var A6e=s(Yh);JU=n(A6e,"STRONG",{});var sBr=s(JU);uoo=r(sBr,"pegasus"),sBr.forEach(t),boo=r(A6e," \u2014 "),Fk=n(A6e,"A",{href:!0});var lBr=s(Fk);voo=r(lBr,"PegasusModel"),lBr.forEach(t),Too=r(A6e," (Pegasus model)"),A6e.forEach(t),Foo=i(C),Kh=n(C,"LI",{});var L6e=s(Kh);YU=n(L6e,"STRONG",{});var iBr=s(YU);Coo=r(iBr,"perceiver"),iBr.forEach(t),Moo=r(L6e," \u2014 "),Ck=n(L6e,"A",{href:!0});var dBr=s(Ck);Eoo=r(dBr,"PerceiverModel"),dBr.forEach(t),yoo=r(L6e," (Perceiver model)"),L6e.forEach(t),woo=i(C),Zh=n(C,"LI",{});var B6e=s(Zh);KU=n(B6e,"STRONG",{});var cBr=s(KU);Aoo=r(cBr,"prophetnet"),cBr.forEach(t),Loo=r(B6e," \u2014 "),Mk=n(B6e,"A",{href:!0});var fBr=s(Mk);Boo=r(fBr,"ProphetNetModel"),fBr.forEach(t),xoo=r(B6e," (ProphetNet model)"),B6e.forEach(t),koo=i(C),ep=n(C,"LI",{});var x6e=s(ep);ZU=n(x6e,"STRONG",{});var mBr=s(ZU);Roo=r(mBr,"qdqbert"),mBr.forEach(t),Soo=r(x6e," \u2014 "),Ek=n(x6e,"A",{href:!0});var gBr=s(Ek);Poo=r(gBr,"QDQBertModel"),gBr.forEach(t),$oo=r(x6e," (QDQBert model)"),x6e.forEach(t),Ioo=i(C),op=n(C,"LI",{});var k6e=s(op);eJ=n(k6e,"STRONG",{});var hBr=s(eJ);joo=r(hBr,"reformer"),hBr.forEach(t),Noo=r(k6e," \u2014 "),yk=n(k6e,"A",{href:!0});var pBr=s(yk);Doo=r(pBr,"ReformerModel"),pBr.forEach(t),qoo=r(k6e," (Reformer model)"),k6e.forEach(t),Goo=i(C),rp=n(C,"LI",{});var R6e=s(rp);oJ=n(R6e,"STRONG",{});var _Br=s(oJ);Ooo=r(_Br,"rembert"),_Br.forEach(t),Xoo=r(R6e," \u2014 "),wk=n(R6e,"A",{href:!0});var uBr=s(wk);zoo=r(uBr,"RemBertModel"),uBr.forEach(t),Voo=r(R6e," (RemBERT model)"),R6e.forEach(t),Woo=i(C),tp=n(C,"LI",{});var S6e=s(tp);rJ=n(S6e,"STRONG",{});var bBr=s(rJ);Qoo=r(bBr,"retribert"),bBr.forEach(t),Hoo=r(S6e," \u2014 "),Ak=n(S6e,"A",{href:!0});var vBr=s(Ak);Uoo=r(vBr,"RetriBertModel"),vBr.forEach(t),Joo=r(S6e," (RetriBERT model)"),S6e.forEach(t),Yoo=i(C),ap=n(C,"LI",{});var P6e=s(ap);tJ=n(P6e,"STRONG",{});var TBr=s(tJ);Koo=r(TBr,"roberta"),TBr.forEach(t),Zoo=r(P6e," \u2014 "),Lk=n(P6e,"A",{href:!0});var FBr=s(Lk);ero=r(FBr,"RobertaModel"),FBr.forEach(t),oro=r(P6e," (RoBERTa model)"),P6e.forEach(t),rro=i(C),np=n(C,"LI",{});var $6e=s(np);aJ=n($6e,"STRONG",{});var CBr=s(aJ);tro=r(CBr,"roformer"),CBr.forEach(t),aro=r($6e," \u2014 "),Bk=n($6e,"A",{href:!0});var MBr=s(Bk);nro=r(MBr,"RoFormerModel"),MBr.forEach(t),sro=r($6e," (RoFormer model)"),$6e.forEach(t),lro=i(C),sp=n(C,"LI",{});var I6e=s(sp);nJ=n(I6e,"STRONG",{});var EBr=s(nJ);iro=r(EBr,"segformer"),EBr.forEach(t),dro=r(I6e," \u2014 "),xk=n(I6e,"A",{href:!0});var yBr=s(xk);cro=r(yBr,"SegformerModel"),yBr.forEach(t),fro=r(I6e," (SegFormer model)"),I6e.forEach(t),mro=i(C),lp=n(C,"LI",{});var j6e=s(lp);sJ=n(j6e,"STRONG",{});var wBr=s(sJ);gro=r(wBr,"sew"),wBr.forEach(t),hro=r(j6e," \u2014 "),kk=n(j6e,"A",{href:!0});var ABr=s(kk);pro=r(ABr,"SEWModel"),ABr.forEach(t),_ro=r(j6e," (SEW model)"),j6e.forEach(t),uro=i(C),ip=n(C,"LI",{});var N6e=s(ip);lJ=n(N6e,"STRONG",{});var LBr=s(lJ);bro=r(LBr,"sew-d"),LBr.forEach(t),vro=r(N6e," \u2014 "),Rk=n(N6e,"A",{href:!0});var BBr=s(Rk);Tro=r(BBr,"SEWDModel"),BBr.forEach(t),Fro=r(N6e," (SEW-D model)"),N6e.forEach(t),Cro=i(C),dp=n(C,"LI",{});var D6e=s(dp);iJ=n(D6e,"STRONG",{});var xBr=s(iJ);Mro=r(xBr,"speech_to_text"),xBr.forEach(t),Ero=r(D6e," \u2014 "),Sk=n(D6e,"A",{href:!0});var kBr=s(Sk);yro=r(kBr,"Speech2TextModel"),kBr.forEach(t),wro=r(D6e," (Speech2Text model)"),D6e.forEach(t),Aro=i(C),cp=n(C,"LI",{});var q6e=s(cp);dJ=n(q6e,"STRONG",{});var RBr=s(dJ);Lro=r(RBr,"splinter"),RBr.forEach(t),Bro=r(q6e," \u2014 "),Pk=n(q6e,"A",{href:!0});var SBr=s(Pk);xro=r(SBr,"SplinterModel"),SBr.forEach(t),kro=r(q6e," (Splinter model)"),q6e.forEach(t),Rro=i(C),fp=n(C,"LI",{});var G6e=s(fp);cJ=n(G6e,"STRONG",{});var PBr=s(cJ);Sro=r(PBr,"squeezebert"),PBr.forEach(t),Pro=r(G6e," \u2014 "),$k=n(G6e,"A",{href:!0});var $Br=s($k);$ro=r($Br,"SqueezeBertModel"),$Br.forEach(t),Iro=r(G6e," (SqueezeBERT model)"),G6e.forEach(t),jro=i(C),mp=n(C,"LI",{});var O6e=s(mp);fJ=n(O6e,"STRONG",{});var IBr=s(fJ);Nro=r(IBr,"swin"),IBr.forEach(t),Dro=r(O6e," \u2014 "),Ik=n(O6e,"A",{href:!0});var jBr=s(Ik);qro=r(jBr,"SwinModel"),jBr.forEach(t),Gro=r(O6e," (Swin model)"),O6e.forEach(t),Oro=i(C),gp=n(C,"LI",{});var X6e=s(gp);mJ=n(X6e,"STRONG",{});var NBr=s(mJ);Xro=r(NBr,"t5"),NBr.forEach(t),zro=r(X6e," \u2014 "),jk=n(X6e,"A",{href:!0});var DBr=s(jk);Vro=r(DBr,"T5Model"),DBr.forEach(t),Wro=r(X6e," (T5 model)"),X6e.forEach(t),Qro=i(C),hp=n(C,"LI",{});var z6e=s(hp);gJ=n(z6e,"STRONG",{});var qBr=s(gJ);Hro=r(qBr,"tapas"),qBr.forEach(t),Uro=r(z6e," \u2014 "),Nk=n(z6e,"A",{href:!0});var GBr=s(Nk);Jro=r(GBr,"TapasModel"),GBr.forEach(t),Yro=r(z6e," (TAPAS model)"),z6e.forEach(t),Kro=i(C),pp=n(C,"LI",{});var V6e=s(pp);hJ=n(V6e,"STRONG",{});var OBr=s(hJ);Zro=r(OBr,"transfo-xl"),OBr.forEach(t),eto=r(V6e," \u2014 "),Dk=n(V6e,"A",{href:!0});var XBr=s(Dk);oto=r(XBr,"TransfoXLModel"),XBr.forEach(t),rto=r(V6e," (Transformer-XL model)"),V6e.forEach(t),tto=i(C),_p=n(C,"LI",{});var W6e=s(_p);pJ=n(W6e,"STRONG",{});var zBr=s(pJ);ato=r(zBr,"unispeech"),zBr.forEach(t),nto=r(W6e," \u2014 "),qk=n(W6e,"A",{href:!0});var VBr=s(qk);sto=r(VBr,"UniSpeechModel"),VBr.forEach(t),lto=r(W6e," (UniSpeech model)"),W6e.forEach(t),ito=i(C),up=n(C,"LI",{});var Q6e=s(up);_J=n(Q6e,"STRONG",{});var WBr=s(_J);dto=r(WBr,"unispeech-sat"),WBr.forEach(t),cto=r(Q6e," \u2014 "),Gk=n(Q6e,"A",{href:!0});var QBr=s(Gk);fto=r(QBr,"UniSpeechSatModel"),QBr.forEach(t),mto=r(Q6e," (UniSpeechSat model)"),Q6e.forEach(t),gto=i(C),bp=n(C,"LI",{});var H6e=s(bp);uJ=n(H6e,"STRONG",{});var HBr=s(uJ);hto=r(HBr,"vilt"),HBr.forEach(t),pto=r(H6e," \u2014 "),Ok=n(H6e,"A",{href:!0});var UBr=s(Ok);_to=r(UBr,"ViltModel"),UBr.forEach(t),uto=r(H6e," (ViLT model)"),H6e.forEach(t),bto=i(C),vp=n(C,"LI",{});var U6e=s(vp);bJ=n(U6e,"STRONG",{});var JBr=s(bJ);vto=r(JBr,"vision-text-dual-encoder"),JBr.forEach(t),Tto=r(U6e," \u2014 "),Xk=n(U6e,"A",{href:!0});var YBr=s(Xk);Fto=r(YBr,"VisionTextDualEncoderModel"),YBr.forEach(t),Cto=r(U6e," (VisionTextDualEncoder model)"),U6e.forEach(t),Mto=i(C),Tp=n(C,"LI",{});var J6e=s(Tp);vJ=n(J6e,"STRONG",{});var KBr=s(vJ);Eto=r(KBr,"visual_bert"),KBr.forEach(t),yto=r(J6e," \u2014 "),zk=n(J6e,"A",{href:!0});var ZBr=s(zk);wto=r(ZBr,"VisualBertModel"),ZBr.forEach(t),Ato=r(J6e," (VisualBert model)"),J6e.forEach(t),Lto=i(C),Fp=n(C,"LI",{});var Y6e=s(Fp);TJ=n(Y6e,"STRONG",{});var exr=s(TJ);Bto=r(exr,"vit"),exr.forEach(t),xto=r(Y6e," \u2014 "),Vk=n(Y6e,"A",{href:!0});var oxr=s(Vk);kto=r(oxr,"ViTModel"),oxr.forEach(t),Rto=r(Y6e," (ViT model)"),Y6e.forEach(t),Sto=i(C),Cp=n(C,"LI",{});var K6e=s(Cp);FJ=n(K6e,"STRONG",{});var rxr=s(FJ);Pto=r(rxr,"vit_mae"),rxr.forEach(t),$to=r(K6e," \u2014 "),Wk=n(K6e,"A",{href:!0});var txr=s(Wk);Ito=r(txr,"ViTMAEModel"),txr.forEach(t),jto=r(K6e," (ViTMAE model)"),K6e.forEach(t),Nto=i(C),Mp=n(C,"LI",{});var Z6e=s(Mp);CJ=n(Z6e,"STRONG",{});var axr=s(CJ);Dto=r(axr,"wav2vec2"),axr.forEach(t),qto=r(Z6e," \u2014 "),Qk=n(Z6e,"A",{href:!0});var nxr=s(Qk);Gto=r(nxr,"Wav2Vec2Model"),nxr.forEach(t),Oto=r(Z6e," (Wav2Vec2 model)"),Z6e.forEach(t),Xto=i(C),Ep=n(C,"LI",{});var eTe=s(Ep);MJ=n(eTe,"STRONG",{});var sxr=s(MJ);zto=r(sxr,"wavlm"),sxr.forEach(t),Vto=r(eTe," \u2014 "),Hk=n(eTe,"A",{href:!0});var lxr=s(Hk);Wto=r(lxr,"WavLMModel"),lxr.forEach(t),Qto=r(eTe," (WavLM model)"),eTe.forEach(t),Hto=i(C),yp=n(C,"LI",{});var oTe=s(yp);EJ=n(oTe,"STRONG",{});var ixr=s(EJ);Uto=r(ixr,"xglm"),ixr.forEach(t),Jto=r(oTe," \u2014 "),Uk=n(oTe,"A",{href:!0});var dxr=s(Uk);Yto=r(dxr,"XGLMModel"),dxr.forEach(t),Kto=r(oTe," (XGLM model)"),oTe.forEach(t),Zto=i(C),wp=n(C,"LI",{});var rTe=s(wp);yJ=n(rTe,"STRONG",{});var cxr=s(yJ);eao=r(cxr,"xlm"),cxr.forEach(t),oao=r(rTe," \u2014 "),Jk=n(rTe,"A",{href:!0});var fxr=s(Jk);rao=r(fxr,"XLMModel"),fxr.forEach(t),tao=r(rTe," (XLM model)"),rTe.forEach(t),aao=i(C),Ap=n(C,"LI",{});var tTe=s(Ap);wJ=n(tTe,"STRONG",{});var mxr=s(wJ);nao=r(mxr,"xlm-prophetnet"),mxr.forEach(t),sao=r(tTe," \u2014 "),Yk=n(tTe,"A",{href:!0});var gxr=s(Yk);lao=r(gxr,"XLMProphetNetModel"),gxr.forEach(t),iao=r(tTe," (XLMProphetNet model)"),tTe.forEach(t),dao=i(C),Lp=n(C,"LI",{});var aTe=s(Lp);AJ=n(aTe,"STRONG",{});var hxr=s(AJ);cao=r(hxr,"xlm-roberta"),hxr.forEach(t),fao=r(aTe," \u2014 "),Kk=n(aTe,"A",{href:!0});var pxr=s(Kk);mao=r(pxr,"XLMRobertaModel"),pxr.forEach(t),gao=r(aTe," (XLM-RoBERTa model)"),aTe.forEach(t),hao=i(C),Bp=n(C,"LI",{});var nTe=s(Bp);LJ=n(nTe,"STRONG",{});var _xr=s(LJ);pao=r(_xr,"xlm-roberta-xl"),_xr.forEach(t),_ao=r(nTe," \u2014 "),Zk=n(nTe,"A",{href:!0});var uxr=s(Zk);uao=r(uxr,"XLMRobertaXLModel"),uxr.forEach(t),bao=r(nTe," (XLM-RoBERTa-XL model)"),nTe.forEach(t),vao=i(C),xp=n(C,"LI",{});var sTe=s(xp);BJ=n(sTe,"STRONG",{});var bxr=s(BJ);Tao=r(bxr,"xlnet"),bxr.forEach(t),Fao=r(sTe," \u2014 "),eR=n(sTe,"A",{href:!0});var vxr=s(eR);Cao=r(vxr,"XLNetModel"),vxr.forEach(t),Mao=r(sTe," (XLNet model)"),sTe.forEach(t),Eao=i(C),kp=n(C,"LI",{});var lTe=s(kp);xJ=n(lTe,"STRONG",{});var Txr=s(xJ);yao=r(Txr,"yoso"),Txr.forEach(t),wao=r(lTe," \u2014 "),oR=n(lTe,"A",{href:!0});var Fxr=s(oR);Aao=r(Fxr,"YosoModel"),Fxr.forEach(t),Lao=r(lTe," (YOSO model)"),lTe.forEach(t),C.forEach(t),Bao=i(Bt),Rp=n(Bt,"P",{});var iTe=s(Rp);xao=r(iTe,"The model is set in evaluation mode by default using "),kJ=n(iTe,"CODE",{});var Cxr=s(kJ);kao=r(Cxr,"model.eval()"),Cxr.forEach(t),Rao=r(iTe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RJ=n(iTe,"CODE",{});var Mxr=s(RJ);Sao=r(Mxr,"model.train()"),Mxr.forEach(t),iTe.forEach(t),Pao=i(Bt),SJ=n(Bt,"P",{});var Exr=s(SJ);$ao=r(Exr,"Examples:"),Exr.forEach(t),Iao=i(Bt),m(m4.$$.fragment,Bt),Bt.forEach(t),Rs.forEach(t),xAe=i(d),$i=n(d,"H2",{class:!0});var PLe=s($i);Sp=n(PLe,"A",{id:!0,class:!0,href:!0});var yxr=s(Sp);PJ=n(yxr,"SPAN",{});var wxr=s(PJ);m(g4.$$.fragment,wxr),wxr.forEach(t),yxr.forEach(t),jao=i(PLe),$J=n(PLe,"SPAN",{});var Axr=s($J);Nao=r(Axr,"AutoModelForPreTraining"),Axr.forEach(t),PLe.forEach(t),kAe=i(d),zo=n(d,"DIV",{class:!0});var Ps=s(zo);m(h4.$$.fragment,Ps),Dao=i(Ps),Ii=n(Ps,"P",{});var ZO=s(Ii);qao=r(ZO,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IJ=n(ZO,"CODE",{});var Lxr=s(IJ);Gao=r(Lxr,"from_pretrained()"),Lxr.forEach(t),Oao=r(ZO,"class method or the "),jJ=n(ZO,"CODE",{});var Bxr=s(jJ);Xao=r(Bxr,"from_config()"),Bxr.forEach(t),zao=r(ZO,`class
method.`),ZO.forEach(t),Vao=i(Ps),p4=n(Ps,"P",{});var $Le=s(p4);Wao=r($Le,"This class cannot be instantiated directly using "),NJ=n($Le,"CODE",{});var xxr=s(NJ);Qao=r(xxr,"__init__()"),xxr.forEach(t),Hao=r($Le," (throws an error)."),$Le.forEach(t),Uao=i(Ps),Ir=n(Ps,"DIV",{class:!0});var $s=s(Ir);m(_4.$$.fragment,$s),Jao=i($s),DJ=n($s,"P",{});var kxr=s(DJ);Yao=r(kxr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kxr.forEach(t),Kao=i($s),ji=n($s,"P",{});var eX=s(ji);Zao=r(eX,`Note:
Loading a model from its configuration file does `),qJ=n(eX,"STRONG",{});var Rxr=s(qJ);eno=r(Rxr,"not"),Rxr.forEach(t),ono=r(eX,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(eX,"CODE",{});var Sxr=s(GJ);rno=r(Sxr,"from_pretrained()"),Sxr.forEach(t),tno=r(eX,"to load the model weights."),eX.forEach(t),ano=i($s),OJ=n($s,"P",{});var Pxr=s(OJ);nno=r(Pxr,"Examples:"),Pxr.forEach(t),sno=i($s),m(u4.$$.fragment,$s),$s.forEach(t),lno=i(Ps),ke=n(Ps,"DIV",{class:!0});var xt=s(ke);m(b4.$$.fragment,xt),ino=i(xt),XJ=n(xt,"P",{});var $xr=s(XJ);dno=r($xr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$xr.forEach(t),cno=i(xt),Ia=n(xt,"P",{});var $F=s(Ia);fno=r($F,"The model class to instantiate is selected based on the "),zJ=n($F,"CODE",{});var Ixr=s(zJ);mno=r(Ixr,"model_type"),Ixr.forEach(t),gno=r($F,` property of the config object (either
passed as an argument or loaded from `),VJ=n($F,"CODE",{});var jxr=s(VJ);hno=r(jxr,"pretrained_model_name_or_path"),jxr.forEach(t),pno=r($F,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WJ=n($F,"CODE",{});var Nxr=s(WJ);_no=r(Nxr,"pretrained_model_name_or_path"),Nxr.forEach(t),uno=r($F,":"),$F.forEach(t),bno=i(xt),k=n(xt,"UL",{});var S=s(k);Pp=n(S,"LI",{});var dTe=s(Pp);QJ=n(dTe,"STRONG",{});var Dxr=s(QJ);vno=r(Dxr,"albert"),Dxr.forEach(t),Tno=r(dTe," \u2014 "),rR=n(dTe,"A",{href:!0});var qxr=s(rR);Fno=r(qxr,"AlbertForPreTraining"),qxr.forEach(t),Cno=r(dTe," (ALBERT model)"),dTe.forEach(t),Mno=i(S),$p=n(S,"LI",{});var cTe=s($p);HJ=n(cTe,"STRONG",{});var Gxr=s(HJ);Eno=r(Gxr,"bart"),Gxr.forEach(t),yno=r(cTe," \u2014 "),tR=n(cTe,"A",{href:!0});var Oxr=s(tR);wno=r(Oxr,"BartForConditionalGeneration"),Oxr.forEach(t),Ano=r(cTe," (BART model)"),cTe.forEach(t),Lno=i(S),Ip=n(S,"LI",{});var fTe=s(Ip);UJ=n(fTe,"STRONG",{});var Xxr=s(UJ);Bno=r(Xxr,"bert"),Xxr.forEach(t),xno=r(fTe," \u2014 "),aR=n(fTe,"A",{href:!0});var zxr=s(aR);kno=r(zxr,"BertForPreTraining"),zxr.forEach(t),Rno=r(fTe," (BERT model)"),fTe.forEach(t),Sno=i(S),jp=n(S,"LI",{});var mTe=s(jp);JJ=n(mTe,"STRONG",{});var Vxr=s(JJ);Pno=r(Vxr,"big_bird"),Vxr.forEach(t),$no=r(mTe," \u2014 "),nR=n(mTe,"A",{href:!0});var Wxr=s(nR);Ino=r(Wxr,"BigBirdForPreTraining"),Wxr.forEach(t),jno=r(mTe," (BigBird model)"),mTe.forEach(t),Nno=i(S),Np=n(S,"LI",{});var gTe=s(Np);YJ=n(gTe,"STRONG",{});var Qxr=s(YJ);Dno=r(Qxr,"camembert"),Qxr.forEach(t),qno=r(gTe," \u2014 "),sR=n(gTe,"A",{href:!0});var Hxr=s(sR);Gno=r(Hxr,"CamembertForMaskedLM"),Hxr.forEach(t),Ono=r(gTe," (CamemBERT model)"),gTe.forEach(t),Xno=i(S),Dp=n(S,"LI",{});var hTe=s(Dp);KJ=n(hTe,"STRONG",{});var Uxr=s(KJ);zno=r(Uxr,"ctrl"),Uxr.forEach(t),Vno=r(hTe," \u2014 "),lR=n(hTe,"A",{href:!0});var Jxr=s(lR);Wno=r(Jxr,"CTRLLMHeadModel"),Jxr.forEach(t),Qno=r(hTe," (CTRL model)"),hTe.forEach(t),Hno=i(S),qp=n(S,"LI",{});var pTe=s(qp);ZJ=n(pTe,"STRONG",{});var Yxr=s(ZJ);Uno=r(Yxr,"deberta"),Yxr.forEach(t),Jno=r(pTe," \u2014 "),iR=n(pTe,"A",{href:!0});var Kxr=s(iR);Yno=r(Kxr,"DebertaForMaskedLM"),Kxr.forEach(t),Kno=r(pTe," (DeBERTa model)"),pTe.forEach(t),Zno=i(S),Gp=n(S,"LI",{});var _Te=s(Gp);eY=n(_Te,"STRONG",{});var Zxr=s(eY);eso=r(Zxr,"deberta-v2"),Zxr.forEach(t),oso=r(_Te," \u2014 "),dR=n(_Te,"A",{href:!0});var ekr=s(dR);rso=r(ekr,"DebertaV2ForMaskedLM"),ekr.forEach(t),tso=r(_Te," (DeBERTa-v2 model)"),_Te.forEach(t),aso=i(S),Op=n(S,"LI",{});var uTe=s(Op);oY=n(uTe,"STRONG",{});var okr=s(oY);nso=r(okr,"distilbert"),okr.forEach(t),sso=r(uTe," \u2014 "),cR=n(uTe,"A",{href:!0});var rkr=s(cR);lso=r(rkr,"DistilBertForMaskedLM"),rkr.forEach(t),iso=r(uTe," (DistilBERT model)"),uTe.forEach(t),dso=i(S),Xp=n(S,"LI",{});var bTe=s(Xp);rY=n(bTe,"STRONG",{});var tkr=s(rY);cso=r(tkr,"electra"),tkr.forEach(t),fso=r(bTe," \u2014 "),fR=n(bTe,"A",{href:!0});var akr=s(fR);mso=r(akr,"ElectraForPreTraining"),akr.forEach(t),gso=r(bTe," (ELECTRA model)"),bTe.forEach(t),hso=i(S),zp=n(S,"LI",{});var vTe=s(zp);tY=n(vTe,"STRONG",{});var nkr=s(tY);pso=r(nkr,"flaubert"),nkr.forEach(t),_so=r(vTe," \u2014 "),mR=n(vTe,"A",{href:!0});var skr=s(mR);uso=r(skr,"FlaubertWithLMHeadModel"),skr.forEach(t),bso=r(vTe," (FlauBERT model)"),vTe.forEach(t),vso=i(S),Vp=n(S,"LI",{});var TTe=s(Vp);aY=n(TTe,"STRONG",{});var lkr=s(aY);Tso=r(lkr,"fnet"),lkr.forEach(t),Fso=r(TTe," \u2014 "),gR=n(TTe,"A",{href:!0});var ikr=s(gR);Cso=r(ikr,"FNetForPreTraining"),ikr.forEach(t),Mso=r(TTe," (FNet model)"),TTe.forEach(t),Eso=i(S),Wp=n(S,"LI",{});var FTe=s(Wp);nY=n(FTe,"STRONG",{});var dkr=s(nY);yso=r(dkr,"fsmt"),dkr.forEach(t),wso=r(FTe," \u2014 "),hR=n(FTe,"A",{href:!0});var ckr=s(hR);Aso=r(ckr,"FSMTForConditionalGeneration"),ckr.forEach(t),Lso=r(FTe," (FairSeq Machine-Translation model)"),FTe.forEach(t),Bso=i(S),Qp=n(S,"LI",{});var CTe=s(Qp);sY=n(CTe,"STRONG",{});var fkr=s(sY);xso=r(fkr,"funnel"),fkr.forEach(t),kso=r(CTe," \u2014 "),pR=n(CTe,"A",{href:!0});var mkr=s(pR);Rso=r(mkr,"FunnelForPreTraining"),mkr.forEach(t),Sso=r(CTe," (Funnel Transformer model)"),CTe.forEach(t),Pso=i(S),Hp=n(S,"LI",{});var MTe=s(Hp);lY=n(MTe,"STRONG",{});var gkr=s(lY);$so=r(gkr,"gpt2"),gkr.forEach(t),Iso=r(MTe," \u2014 "),_R=n(MTe,"A",{href:!0});var hkr=s(_R);jso=r(hkr,"GPT2LMHeadModel"),hkr.forEach(t),Nso=r(MTe," (OpenAI GPT-2 model)"),MTe.forEach(t),Dso=i(S),Up=n(S,"LI",{});var ETe=s(Up);iY=n(ETe,"STRONG",{});var pkr=s(iY);qso=r(pkr,"ibert"),pkr.forEach(t),Gso=r(ETe," \u2014 "),uR=n(ETe,"A",{href:!0});var _kr=s(uR);Oso=r(_kr,"IBertForMaskedLM"),_kr.forEach(t),Xso=r(ETe," (I-BERT model)"),ETe.forEach(t),zso=i(S),Jp=n(S,"LI",{});var yTe=s(Jp);dY=n(yTe,"STRONG",{});var ukr=s(dY);Vso=r(ukr,"layoutlm"),ukr.forEach(t),Wso=r(yTe," \u2014 "),bR=n(yTe,"A",{href:!0});var bkr=s(bR);Qso=r(bkr,"LayoutLMForMaskedLM"),bkr.forEach(t),Hso=r(yTe," (LayoutLM model)"),yTe.forEach(t),Uso=i(S),Yp=n(S,"LI",{});var wTe=s(Yp);cY=n(wTe,"STRONG",{});var vkr=s(cY);Jso=r(vkr,"longformer"),vkr.forEach(t),Yso=r(wTe," \u2014 "),vR=n(wTe,"A",{href:!0});var Tkr=s(vR);Kso=r(Tkr,"LongformerForMaskedLM"),Tkr.forEach(t),Zso=r(wTe," (Longformer model)"),wTe.forEach(t),elo=i(S),Kp=n(S,"LI",{});var ATe=s(Kp);fY=n(ATe,"STRONG",{});var Fkr=s(fY);olo=r(Fkr,"lxmert"),Fkr.forEach(t),rlo=r(ATe," \u2014 "),TR=n(ATe,"A",{href:!0});var Ckr=s(TR);tlo=r(Ckr,"LxmertForPreTraining"),Ckr.forEach(t),alo=r(ATe," (LXMERT model)"),ATe.forEach(t),nlo=i(S),Zp=n(S,"LI",{});var LTe=s(Zp);mY=n(LTe,"STRONG",{});var Mkr=s(mY);slo=r(Mkr,"megatron-bert"),Mkr.forEach(t),llo=r(LTe," \u2014 "),FR=n(LTe,"A",{href:!0});var Ekr=s(FR);ilo=r(Ekr,"MegatronBertForPreTraining"),Ekr.forEach(t),dlo=r(LTe," (MegatronBert model)"),LTe.forEach(t),clo=i(S),e_=n(S,"LI",{});var BTe=s(e_);gY=n(BTe,"STRONG",{});var ykr=s(gY);flo=r(ykr,"mobilebert"),ykr.forEach(t),mlo=r(BTe," \u2014 "),CR=n(BTe,"A",{href:!0});var wkr=s(CR);glo=r(wkr,"MobileBertForPreTraining"),wkr.forEach(t),hlo=r(BTe," (MobileBERT model)"),BTe.forEach(t),plo=i(S),o_=n(S,"LI",{});var xTe=s(o_);hY=n(xTe,"STRONG",{});var Akr=s(hY);_lo=r(Akr,"mpnet"),Akr.forEach(t),ulo=r(xTe," \u2014 "),MR=n(xTe,"A",{href:!0});var Lkr=s(MR);blo=r(Lkr,"MPNetForMaskedLM"),Lkr.forEach(t),vlo=r(xTe," (MPNet model)"),xTe.forEach(t),Tlo=i(S),r_=n(S,"LI",{});var kTe=s(r_);pY=n(kTe,"STRONG",{});var Bkr=s(pY);Flo=r(Bkr,"openai-gpt"),Bkr.forEach(t),Clo=r(kTe," \u2014 "),ER=n(kTe,"A",{href:!0});var xkr=s(ER);Mlo=r(xkr,"OpenAIGPTLMHeadModel"),xkr.forEach(t),Elo=r(kTe," (OpenAI GPT model)"),kTe.forEach(t),ylo=i(S),t_=n(S,"LI",{});var RTe=s(t_);_Y=n(RTe,"STRONG",{});var kkr=s(_Y);wlo=r(kkr,"retribert"),kkr.forEach(t),Alo=r(RTe," \u2014 "),yR=n(RTe,"A",{href:!0});var Rkr=s(yR);Llo=r(Rkr,"RetriBertModel"),Rkr.forEach(t),Blo=r(RTe," (RetriBERT model)"),RTe.forEach(t),xlo=i(S),a_=n(S,"LI",{});var STe=s(a_);uY=n(STe,"STRONG",{});var Skr=s(uY);klo=r(Skr,"roberta"),Skr.forEach(t),Rlo=r(STe," \u2014 "),wR=n(STe,"A",{href:!0});var Pkr=s(wR);Slo=r(Pkr,"RobertaForMaskedLM"),Pkr.forEach(t),Plo=r(STe," (RoBERTa model)"),STe.forEach(t),$lo=i(S),n_=n(S,"LI",{});var PTe=s(n_);bY=n(PTe,"STRONG",{});var $kr=s(bY);Ilo=r($kr,"squeezebert"),$kr.forEach(t),jlo=r(PTe," \u2014 "),AR=n(PTe,"A",{href:!0});var Ikr=s(AR);Nlo=r(Ikr,"SqueezeBertForMaskedLM"),Ikr.forEach(t),Dlo=r(PTe," (SqueezeBERT model)"),PTe.forEach(t),qlo=i(S),s_=n(S,"LI",{});var $Te=s(s_);vY=n($Te,"STRONG",{});var jkr=s(vY);Glo=r(jkr,"t5"),jkr.forEach(t),Olo=r($Te," \u2014 "),LR=n($Te,"A",{href:!0});var Nkr=s(LR);Xlo=r(Nkr,"T5ForConditionalGeneration"),Nkr.forEach(t),zlo=r($Te," (T5 model)"),$Te.forEach(t),Vlo=i(S),l_=n(S,"LI",{});var ITe=s(l_);TY=n(ITe,"STRONG",{});var Dkr=s(TY);Wlo=r(Dkr,"tapas"),Dkr.forEach(t),Qlo=r(ITe," \u2014 "),BR=n(ITe,"A",{href:!0});var qkr=s(BR);Hlo=r(qkr,"TapasForMaskedLM"),qkr.forEach(t),Ulo=r(ITe," (TAPAS model)"),ITe.forEach(t),Jlo=i(S),i_=n(S,"LI",{});var jTe=s(i_);FY=n(jTe,"STRONG",{});var Gkr=s(FY);Ylo=r(Gkr,"transfo-xl"),Gkr.forEach(t),Klo=r(jTe," \u2014 "),xR=n(jTe,"A",{href:!0});var Okr=s(xR);Zlo=r(Okr,"TransfoXLLMHeadModel"),Okr.forEach(t),eio=r(jTe," (Transformer-XL model)"),jTe.forEach(t),oio=i(S),d_=n(S,"LI",{});var NTe=s(d_);CY=n(NTe,"STRONG",{});var Xkr=s(CY);rio=r(Xkr,"unispeech"),Xkr.forEach(t),tio=r(NTe," \u2014 "),kR=n(NTe,"A",{href:!0});var zkr=s(kR);aio=r(zkr,"UniSpeechForPreTraining"),zkr.forEach(t),nio=r(NTe," (UniSpeech model)"),NTe.forEach(t),sio=i(S),c_=n(S,"LI",{});var DTe=s(c_);MY=n(DTe,"STRONG",{});var Vkr=s(MY);lio=r(Vkr,"unispeech-sat"),Vkr.forEach(t),iio=r(DTe," \u2014 "),RR=n(DTe,"A",{href:!0});var Wkr=s(RR);dio=r(Wkr,"UniSpeechSatForPreTraining"),Wkr.forEach(t),cio=r(DTe," (UniSpeechSat model)"),DTe.forEach(t),fio=i(S),f_=n(S,"LI",{});var qTe=s(f_);EY=n(qTe,"STRONG",{});var Qkr=s(EY);mio=r(Qkr,"visual_bert"),Qkr.forEach(t),gio=r(qTe," \u2014 "),SR=n(qTe,"A",{href:!0});var Hkr=s(SR);hio=r(Hkr,"VisualBertForPreTraining"),Hkr.forEach(t),pio=r(qTe," (VisualBert model)"),qTe.forEach(t),_io=i(S),m_=n(S,"LI",{});var GTe=s(m_);yY=n(GTe,"STRONG",{});var Ukr=s(yY);uio=r(Ukr,"vit_mae"),Ukr.forEach(t),bio=r(GTe," \u2014 "),PR=n(GTe,"A",{href:!0});var Jkr=s(PR);vio=r(Jkr,"ViTMAEForPreTraining"),Jkr.forEach(t),Tio=r(GTe," (ViTMAE model)"),GTe.forEach(t),Fio=i(S),g_=n(S,"LI",{});var OTe=s(g_);wY=n(OTe,"STRONG",{});var Ykr=s(wY);Cio=r(Ykr,"wav2vec2"),Ykr.forEach(t),Mio=r(OTe," \u2014 "),$R=n(OTe,"A",{href:!0});var Kkr=s($R);Eio=r(Kkr,"Wav2Vec2ForPreTraining"),Kkr.forEach(t),yio=r(OTe," (Wav2Vec2 model)"),OTe.forEach(t),wio=i(S),h_=n(S,"LI",{});var XTe=s(h_);AY=n(XTe,"STRONG",{});var Zkr=s(AY);Aio=r(Zkr,"xlm"),Zkr.forEach(t),Lio=r(XTe," \u2014 "),IR=n(XTe,"A",{href:!0});var eRr=s(IR);Bio=r(eRr,"XLMWithLMHeadModel"),eRr.forEach(t),xio=r(XTe," (XLM model)"),XTe.forEach(t),kio=i(S),p_=n(S,"LI",{});var zTe=s(p_);LY=n(zTe,"STRONG",{});var oRr=s(LY);Rio=r(oRr,"xlm-roberta"),oRr.forEach(t),Sio=r(zTe," \u2014 "),jR=n(zTe,"A",{href:!0});var rRr=s(jR);Pio=r(rRr,"XLMRobertaForMaskedLM"),rRr.forEach(t),$io=r(zTe," (XLM-RoBERTa model)"),zTe.forEach(t),Iio=i(S),__=n(S,"LI",{});var VTe=s(__);BY=n(VTe,"STRONG",{});var tRr=s(BY);jio=r(tRr,"xlm-roberta-xl"),tRr.forEach(t),Nio=r(VTe," \u2014 "),NR=n(VTe,"A",{href:!0});var aRr=s(NR);Dio=r(aRr,"XLMRobertaXLForMaskedLM"),aRr.forEach(t),qio=r(VTe," (XLM-RoBERTa-XL model)"),VTe.forEach(t),Gio=i(S),u_=n(S,"LI",{});var WTe=s(u_);xY=n(WTe,"STRONG",{});var nRr=s(xY);Oio=r(nRr,"xlnet"),nRr.forEach(t),Xio=r(WTe," \u2014 "),DR=n(WTe,"A",{href:!0});var sRr=s(DR);zio=r(sRr,"XLNetLMHeadModel"),sRr.forEach(t),Vio=r(WTe," (XLNet model)"),WTe.forEach(t),S.forEach(t),Wio=i(xt),b_=n(xt,"P",{});var QTe=s(b_);Qio=r(QTe,"The model is set in evaluation mode by default using "),kY=n(QTe,"CODE",{});var lRr=s(kY);Hio=r(lRr,"model.eval()"),lRr.forEach(t),Uio=r(QTe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RY=n(QTe,"CODE",{});var iRr=s(RY);Jio=r(iRr,"model.train()"),iRr.forEach(t),QTe.forEach(t),Yio=i(xt),SY=n(xt,"P",{});var dRr=s(SY);Kio=r(dRr,"Examples:"),dRr.forEach(t),Zio=i(xt),m(v4.$$.fragment,xt),xt.forEach(t),Ps.forEach(t),RAe=i(d),Ni=n(d,"H2",{class:!0});var ILe=s(Ni);v_=n(ILe,"A",{id:!0,class:!0,href:!0});var cRr=s(v_);PY=n(cRr,"SPAN",{});var fRr=s(PY);m(T4.$$.fragment,fRr),fRr.forEach(t),cRr.forEach(t),edo=i(ILe),$Y=n(ILe,"SPAN",{});var mRr=s($Y);odo=r(mRr,"AutoModelForCausalLM"),mRr.forEach(t),ILe.forEach(t),SAe=i(d),Vo=n(d,"DIV",{class:!0});var Is=s(Vo);m(F4.$$.fragment,Is),rdo=i(Is),Di=n(Is,"P",{});var oX=s(Di);tdo=r(oX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IY=n(oX,"CODE",{});var gRr=s(IY);ado=r(gRr,"from_pretrained()"),gRr.forEach(t),ndo=r(oX,"class method or the "),jY=n(oX,"CODE",{});var hRr=s(jY);sdo=r(hRr,"from_config()"),hRr.forEach(t),ldo=r(oX,`class
method.`),oX.forEach(t),ido=i(Is),C4=n(Is,"P",{});var jLe=s(C4);ddo=r(jLe,"This class cannot be instantiated directly using "),NY=n(jLe,"CODE",{});var pRr=s(NY);cdo=r(pRr,"__init__()"),pRr.forEach(t),fdo=r(jLe," (throws an error)."),jLe.forEach(t),mdo=i(Is),jr=n(Is,"DIV",{class:!0});var js=s(jr);m(M4.$$.fragment,js),gdo=i(js),DY=n(js,"P",{});var _Rr=s(DY);hdo=r(_Rr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Rr.forEach(t),pdo=i(js),qi=n(js,"P",{});var rX=s(qi);_do=r(rX,`Note:
Loading a model from its configuration file does `),qY=n(rX,"STRONG",{});var uRr=s(qY);udo=r(uRr,"not"),uRr.forEach(t),bdo=r(rX,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(rX,"CODE",{});var bRr=s(GY);vdo=r(bRr,"from_pretrained()"),bRr.forEach(t),Tdo=r(rX,"to load the model weights."),rX.forEach(t),Fdo=i(js),OY=n(js,"P",{});var vRr=s(OY);Cdo=r(vRr,"Examples:"),vRr.forEach(t),Mdo=i(js),m(E4.$$.fragment,js),js.forEach(t),Edo=i(Is),Re=n(Is,"DIV",{class:!0});var kt=s(Re);m(y4.$$.fragment,kt),ydo=i(kt),XY=n(kt,"P",{});var TRr=s(XY);wdo=r(TRr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TRr.forEach(t),Ado=i(kt),ja=n(kt,"P",{});var IF=s(ja);Ldo=r(IF,"The model class to instantiate is selected based on the "),zY=n(IF,"CODE",{});var FRr=s(zY);Bdo=r(FRr,"model_type"),FRr.forEach(t),xdo=r(IF,` property of the config object (either
passed as an argument or loaded from `),VY=n(IF,"CODE",{});var CRr=s(VY);kdo=r(CRr,"pretrained_model_name_or_path"),CRr.forEach(t),Rdo=r(IF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WY=n(IF,"CODE",{});var MRr=s(WY);Sdo=r(MRr,"pretrained_model_name_or_path"),MRr.forEach(t),Pdo=r(IF,":"),IF.forEach(t),$do=i(kt),I=n(kt,"UL",{});var D=s(I);T_=n(D,"LI",{});var HTe=s(T_);QY=n(HTe,"STRONG",{});var ERr=s(QY);Ido=r(ERr,"bart"),ERr.forEach(t),jdo=r(HTe," \u2014 "),qR=n(HTe,"A",{href:!0});var yRr=s(qR);Ndo=r(yRr,"BartForCausalLM"),yRr.forEach(t),Ddo=r(HTe," (BART model)"),HTe.forEach(t),qdo=i(D),F_=n(D,"LI",{});var UTe=s(F_);HY=n(UTe,"STRONG",{});var wRr=s(HY);Gdo=r(wRr,"bert"),wRr.forEach(t),Odo=r(UTe," \u2014 "),GR=n(UTe,"A",{href:!0});var ARr=s(GR);Xdo=r(ARr,"BertLMHeadModel"),ARr.forEach(t),zdo=r(UTe," (BERT model)"),UTe.forEach(t),Vdo=i(D),C_=n(D,"LI",{});var JTe=s(C_);UY=n(JTe,"STRONG",{});var LRr=s(UY);Wdo=r(LRr,"bert-generation"),LRr.forEach(t),Qdo=r(JTe," \u2014 "),OR=n(JTe,"A",{href:!0});var BRr=s(OR);Hdo=r(BRr,"BertGenerationDecoder"),BRr.forEach(t),Udo=r(JTe," (Bert Generation model)"),JTe.forEach(t),Jdo=i(D),M_=n(D,"LI",{});var YTe=s(M_);JY=n(YTe,"STRONG",{});var xRr=s(JY);Ydo=r(xRr,"big_bird"),xRr.forEach(t),Kdo=r(YTe," \u2014 "),XR=n(YTe,"A",{href:!0});var kRr=s(XR);Zdo=r(kRr,"BigBirdForCausalLM"),kRr.forEach(t),eco=r(YTe," (BigBird model)"),YTe.forEach(t),oco=i(D),E_=n(D,"LI",{});var KTe=s(E_);YY=n(KTe,"STRONG",{});var RRr=s(YY);rco=r(RRr,"bigbird_pegasus"),RRr.forEach(t),tco=r(KTe," \u2014 "),zR=n(KTe,"A",{href:!0});var SRr=s(zR);aco=r(SRr,"BigBirdPegasusForCausalLM"),SRr.forEach(t),nco=r(KTe," (BigBirdPegasus model)"),KTe.forEach(t),sco=i(D),y_=n(D,"LI",{});var ZTe=s(y_);KY=n(ZTe,"STRONG",{});var PRr=s(KY);lco=r(PRr,"blenderbot"),PRr.forEach(t),ico=r(ZTe," \u2014 "),VR=n(ZTe,"A",{href:!0});var $Rr=s(VR);dco=r($Rr,"BlenderbotForCausalLM"),$Rr.forEach(t),cco=r(ZTe," (Blenderbot model)"),ZTe.forEach(t),fco=i(D),w_=n(D,"LI",{});var e7e=s(w_);ZY=n(e7e,"STRONG",{});var IRr=s(ZY);mco=r(IRr,"blenderbot-small"),IRr.forEach(t),gco=r(e7e," \u2014 "),WR=n(e7e,"A",{href:!0});var jRr=s(WR);hco=r(jRr,"BlenderbotSmallForCausalLM"),jRr.forEach(t),pco=r(e7e," (BlenderbotSmall model)"),e7e.forEach(t),_co=i(D),A_=n(D,"LI",{});var o7e=s(A_);eK=n(o7e,"STRONG",{});var NRr=s(eK);uco=r(NRr,"camembert"),NRr.forEach(t),bco=r(o7e," \u2014 "),QR=n(o7e,"A",{href:!0});var DRr=s(QR);vco=r(DRr,"CamembertForCausalLM"),DRr.forEach(t),Tco=r(o7e," (CamemBERT model)"),o7e.forEach(t),Fco=i(D),L_=n(D,"LI",{});var r7e=s(L_);oK=n(r7e,"STRONG",{});var qRr=s(oK);Cco=r(qRr,"ctrl"),qRr.forEach(t),Mco=r(r7e," \u2014 "),HR=n(r7e,"A",{href:!0});var GRr=s(HR);Eco=r(GRr,"CTRLLMHeadModel"),GRr.forEach(t),yco=r(r7e," (CTRL model)"),r7e.forEach(t),wco=i(D),B_=n(D,"LI",{});var t7e=s(B_);rK=n(t7e,"STRONG",{});var ORr=s(rK);Aco=r(ORr,"electra"),ORr.forEach(t),Lco=r(t7e," \u2014 "),UR=n(t7e,"A",{href:!0});var XRr=s(UR);Bco=r(XRr,"ElectraForCausalLM"),XRr.forEach(t),xco=r(t7e," (ELECTRA model)"),t7e.forEach(t),kco=i(D),x_=n(D,"LI",{});var a7e=s(x_);tK=n(a7e,"STRONG",{});var zRr=s(tK);Rco=r(zRr,"gpt2"),zRr.forEach(t),Sco=r(a7e," \u2014 "),JR=n(a7e,"A",{href:!0});var VRr=s(JR);Pco=r(VRr,"GPT2LMHeadModel"),VRr.forEach(t),$co=r(a7e," (OpenAI GPT-2 model)"),a7e.forEach(t),Ico=i(D),k_=n(D,"LI",{});var n7e=s(k_);aK=n(n7e,"STRONG",{});var WRr=s(aK);jco=r(WRr,"gpt_neo"),WRr.forEach(t),Nco=r(n7e," \u2014 "),YR=n(n7e,"A",{href:!0});var QRr=s(YR);Dco=r(QRr,"GPTNeoForCausalLM"),QRr.forEach(t),qco=r(n7e," (GPT Neo model)"),n7e.forEach(t),Gco=i(D),R_=n(D,"LI",{});var s7e=s(R_);nK=n(s7e,"STRONG",{});var HRr=s(nK);Oco=r(HRr,"gptj"),HRr.forEach(t),Xco=r(s7e," \u2014 "),KR=n(s7e,"A",{href:!0});var URr=s(KR);zco=r(URr,"GPTJForCausalLM"),URr.forEach(t),Vco=r(s7e," (GPT-J model)"),s7e.forEach(t),Wco=i(D),S_=n(D,"LI",{});var l7e=s(S_);sK=n(l7e,"STRONG",{});var JRr=s(sK);Qco=r(JRr,"marian"),JRr.forEach(t),Hco=r(l7e," \u2014 "),ZR=n(l7e,"A",{href:!0});var YRr=s(ZR);Uco=r(YRr,"MarianForCausalLM"),YRr.forEach(t),Jco=r(l7e," (Marian model)"),l7e.forEach(t),Yco=i(D),P_=n(D,"LI",{});var i7e=s(P_);lK=n(i7e,"STRONG",{});var KRr=s(lK);Kco=r(KRr,"mbart"),KRr.forEach(t),Zco=r(i7e," \u2014 "),eS=n(i7e,"A",{href:!0});var ZRr=s(eS);efo=r(ZRr,"MBartForCausalLM"),ZRr.forEach(t),ofo=r(i7e," (mBART model)"),i7e.forEach(t),rfo=i(D),$_=n(D,"LI",{});var d7e=s($_);iK=n(d7e,"STRONG",{});var eSr=s(iK);tfo=r(eSr,"megatron-bert"),eSr.forEach(t),afo=r(d7e," \u2014 "),oS=n(d7e,"A",{href:!0});var oSr=s(oS);nfo=r(oSr,"MegatronBertForCausalLM"),oSr.forEach(t),sfo=r(d7e," (MegatronBert model)"),d7e.forEach(t),lfo=i(D),I_=n(D,"LI",{});var c7e=s(I_);dK=n(c7e,"STRONG",{});var rSr=s(dK);ifo=r(rSr,"openai-gpt"),rSr.forEach(t),dfo=r(c7e," \u2014 "),rS=n(c7e,"A",{href:!0});var tSr=s(rS);cfo=r(tSr,"OpenAIGPTLMHeadModel"),tSr.forEach(t),ffo=r(c7e," (OpenAI GPT model)"),c7e.forEach(t),mfo=i(D),j_=n(D,"LI",{});var f7e=s(j_);cK=n(f7e,"STRONG",{});var aSr=s(cK);gfo=r(aSr,"pegasus"),aSr.forEach(t),hfo=r(f7e," \u2014 "),tS=n(f7e,"A",{href:!0});var nSr=s(tS);pfo=r(nSr,"PegasusForCausalLM"),nSr.forEach(t),_fo=r(f7e," (Pegasus model)"),f7e.forEach(t),ufo=i(D),N_=n(D,"LI",{});var m7e=s(N_);fK=n(m7e,"STRONG",{});var sSr=s(fK);bfo=r(sSr,"prophetnet"),sSr.forEach(t),vfo=r(m7e," \u2014 "),aS=n(m7e,"A",{href:!0});var lSr=s(aS);Tfo=r(lSr,"ProphetNetForCausalLM"),lSr.forEach(t),Ffo=r(m7e," (ProphetNet model)"),m7e.forEach(t),Cfo=i(D),D_=n(D,"LI",{});var g7e=s(D_);mK=n(g7e,"STRONG",{});var iSr=s(mK);Mfo=r(iSr,"qdqbert"),iSr.forEach(t),Efo=r(g7e," \u2014 "),nS=n(g7e,"A",{href:!0});var dSr=s(nS);yfo=r(dSr,"QDQBertLMHeadModel"),dSr.forEach(t),wfo=r(g7e," (QDQBert model)"),g7e.forEach(t),Afo=i(D),q_=n(D,"LI",{});var h7e=s(q_);gK=n(h7e,"STRONG",{});var cSr=s(gK);Lfo=r(cSr,"reformer"),cSr.forEach(t),Bfo=r(h7e," \u2014 "),sS=n(h7e,"A",{href:!0});var fSr=s(sS);xfo=r(fSr,"ReformerModelWithLMHead"),fSr.forEach(t),kfo=r(h7e," (Reformer model)"),h7e.forEach(t),Rfo=i(D),G_=n(D,"LI",{});var p7e=s(G_);hK=n(p7e,"STRONG",{});var mSr=s(hK);Sfo=r(mSr,"rembert"),mSr.forEach(t),Pfo=r(p7e," \u2014 "),lS=n(p7e,"A",{href:!0});var gSr=s(lS);$fo=r(gSr,"RemBertForCausalLM"),gSr.forEach(t),Ifo=r(p7e," (RemBERT model)"),p7e.forEach(t),jfo=i(D),O_=n(D,"LI",{});var _7e=s(O_);pK=n(_7e,"STRONG",{});var hSr=s(pK);Nfo=r(hSr,"roberta"),hSr.forEach(t),Dfo=r(_7e," \u2014 "),iS=n(_7e,"A",{href:!0});var pSr=s(iS);qfo=r(pSr,"RobertaForCausalLM"),pSr.forEach(t),Gfo=r(_7e," (RoBERTa model)"),_7e.forEach(t),Ofo=i(D),X_=n(D,"LI",{});var u7e=s(X_);_K=n(u7e,"STRONG",{});var _Sr=s(_K);Xfo=r(_Sr,"roformer"),_Sr.forEach(t),zfo=r(u7e," \u2014 "),dS=n(u7e,"A",{href:!0});var uSr=s(dS);Vfo=r(uSr,"RoFormerForCausalLM"),uSr.forEach(t),Wfo=r(u7e," (RoFormer model)"),u7e.forEach(t),Qfo=i(D),z_=n(D,"LI",{});var b7e=s(z_);uK=n(b7e,"STRONG",{});var bSr=s(uK);Hfo=r(bSr,"speech_to_text_2"),bSr.forEach(t),Ufo=r(b7e," \u2014 "),cS=n(b7e,"A",{href:!0});var vSr=s(cS);Jfo=r(vSr,"Speech2Text2ForCausalLM"),vSr.forEach(t),Yfo=r(b7e," (Speech2Text2 model)"),b7e.forEach(t),Kfo=i(D),V_=n(D,"LI",{});var v7e=s(V_);bK=n(v7e,"STRONG",{});var TSr=s(bK);Zfo=r(TSr,"transfo-xl"),TSr.forEach(t),emo=r(v7e," \u2014 "),fS=n(v7e,"A",{href:!0});var FSr=s(fS);omo=r(FSr,"TransfoXLLMHeadModel"),FSr.forEach(t),rmo=r(v7e," (Transformer-XL model)"),v7e.forEach(t),tmo=i(D),W_=n(D,"LI",{});var T7e=s(W_);vK=n(T7e,"STRONG",{});var CSr=s(vK);amo=r(CSr,"trocr"),CSr.forEach(t),nmo=r(T7e," \u2014 "),mS=n(T7e,"A",{href:!0});var MSr=s(mS);smo=r(MSr,"TrOCRForCausalLM"),MSr.forEach(t),lmo=r(T7e," (TrOCR model)"),T7e.forEach(t),imo=i(D),Q_=n(D,"LI",{});var F7e=s(Q_);TK=n(F7e,"STRONG",{});var ESr=s(TK);dmo=r(ESr,"xglm"),ESr.forEach(t),cmo=r(F7e," \u2014 "),gS=n(F7e,"A",{href:!0});var ySr=s(gS);fmo=r(ySr,"XGLMForCausalLM"),ySr.forEach(t),mmo=r(F7e," (XGLM model)"),F7e.forEach(t),gmo=i(D),H_=n(D,"LI",{});var C7e=s(H_);FK=n(C7e,"STRONG",{});var wSr=s(FK);hmo=r(wSr,"xlm"),wSr.forEach(t),pmo=r(C7e," \u2014 "),hS=n(C7e,"A",{href:!0});var ASr=s(hS);_mo=r(ASr,"XLMWithLMHeadModel"),ASr.forEach(t),umo=r(C7e," (XLM model)"),C7e.forEach(t),bmo=i(D),U_=n(D,"LI",{});var M7e=s(U_);CK=n(M7e,"STRONG",{});var LSr=s(CK);vmo=r(LSr,"xlm-prophetnet"),LSr.forEach(t),Tmo=r(M7e," \u2014 "),pS=n(M7e,"A",{href:!0});var BSr=s(pS);Fmo=r(BSr,"XLMProphetNetForCausalLM"),BSr.forEach(t),Cmo=r(M7e," (XLMProphetNet model)"),M7e.forEach(t),Mmo=i(D),J_=n(D,"LI",{});var E7e=s(J_);MK=n(E7e,"STRONG",{});var xSr=s(MK);Emo=r(xSr,"xlm-roberta"),xSr.forEach(t),ymo=r(E7e," \u2014 "),_S=n(E7e,"A",{href:!0});var kSr=s(_S);wmo=r(kSr,"XLMRobertaForCausalLM"),kSr.forEach(t),Amo=r(E7e," (XLM-RoBERTa model)"),E7e.forEach(t),Lmo=i(D),Y_=n(D,"LI",{});var y7e=s(Y_);EK=n(y7e,"STRONG",{});var RSr=s(EK);Bmo=r(RSr,"xlm-roberta-xl"),RSr.forEach(t),xmo=r(y7e," \u2014 "),uS=n(y7e,"A",{href:!0});var SSr=s(uS);kmo=r(SSr,"XLMRobertaXLForCausalLM"),SSr.forEach(t),Rmo=r(y7e," (XLM-RoBERTa-XL model)"),y7e.forEach(t),Smo=i(D),K_=n(D,"LI",{});var w7e=s(K_);yK=n(w7e,"STRONG",{});var PSr=s(yK);Pmo=r(PSr,"xlnet"),PSr.forEach(t),$mo=r(w7e," \u2014 "),bS=n(w7e,"A",{href:!0});var $Sr=s(bS);Imo=r($Sr,"XLNetLMHeadModel"),$Sr.forEach(t),jmo=r(w7e," (XLNet model)"),w7e.forEach(t),D.forEach(t),Nmo=i(kt),Z_=n(kt,"P",{});var A7e=s(Z_);Dmo=r(A7e,"The model is set in evaluation mode by default using "),wK=n(A7e,"CODE",{});var ISr=s(wK);qmo=r(ISr,"model.eval()"),ISr.forEach(t),Gmo=r(A7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AK=n(A7e,"CODE",{});var jSr=s(AK);Omo=r(jSr,"model.train()"),jSr.forEach(t),A7e.forEach(t),Xmo=i(kt),LK=n(kt,"P",{});var NSr=s(LK);zmo=r(NSr,"Examples:"),NSr.forEach(t),Vmo=i(kt),m(w4.$$.fragment,kt),kt.forEach(t),Is.forEach(t),PAe=i(d),Gi=n(d,"H2",{class:!0});var NLe=s(Gi);eu=n(NLe,"A",{id:!0,class:!0,href:!0});var DSr=s(eu);BK=n(DSr,"SPAN",{});var qSr=s(BK);m(A4.$$.fragment,qSr),qSr.forEach(t),DSr.forEach(t),Wmo=i(NLe),xK=n(NLe,"SPAN",{});var GSr=s(xK);Qmo=r(GSr,"AutoModelForMaskedLM"),GSr.forEach(t),NLe.forEach(t),$Ae=i(d),Wo=n(d,"DIV",{class:!0});var Ns=s(Wo);m(L4.$$.fragment,Ns),Hmo=i(Ns),Oi=n(Ns,"P",{});var tX=s(Oi);Umo=r(tX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kK=n(tX,"CODE",{});var OSr=s(kK);Jmo=r(OSr,"from_pretrained()"),OSr.forEach(t),Ymo=r(tX,"class method or the "),RK=n(tX,"CODE",{});var XSr=s(RK);Kmo=r(XSr,"from_config()"),XSr.forEach(t),Zmo=r(tX,`class
method.`),tX.forEach(t),ego=i(Ns),B4=n(Ns,"P",{});var DLe=s(B4);ogo=r(DLe,"This class cannot be instantiated directly using "),SK=n(DLe,"CODE",{});var zSr=s(SK);rgo=r(zSr,"__init__()"),zSr.forEach(t),tgo=r(DLe," (throws an error)."),DLe.forEach(t),ago=i(Ns),Nr=n(Ns,"DIV",{class:!0});var Ds=s(Nr);m(x4.$$.fragment,Ds),ngo=i(Ds),PK=n(Ds,"P",{});var VSr=s(PK);sgo=r(VSr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VSr.forEach(t),lgo=i(Ds),Xi=n(Ds,"P",{});var aX=s(Xi);igo=r(aX,`Note:
Loading a model from its configuration file does `),$K=n(aX,"STRONG",{});var WSr=s($K);dgo=r(WSr,"not"),WSr.forEach(t),cgo=r(aX,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(aX,"CODE",{});var QSr=s(IK);fgo=r(QSr,"from_pretrained()"),QSr.forEach(t),mgo=r(aX,"to load the model weights."),aX.forEach(t),ggo=i(Ds),jK=n(Ds,"P",{});var HSr=s(jK);hgo=r(HSr,"Examples:"),HSr.forEach(t),pgo=i(Ds),m(k4.$$.fragment,Ds),Ds.forEach(t),_go=i(Ns),Se=n(Ns,"DIV",{class:!0});var Rt=s(Se);m(R4.$$.fragment,Rt),ugo=i(Rt),NK=n(Rt,"P",{});var USr=s(NK);bgo=r(USr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),USr.forEach(t),vgo=i(Rt),Na=n(Rt,"P",{});var jF=s(Na);Tgo=r(jF,"The model class to instantiate is selected based on the "),DK=n(jF,"CODE",{});var JSr=s(DK);Fgo=r(JSr,"model_type"),JSr.forEach(t),Cgo=r(jF,` property of the config object (either
passed as an argument or loaded from `),qK=n(jF,"CODE",{});var YSr=s(qK);Mgo=r(YSr,"pretrained_model_name_or_path"),YSr.forEach(t),Ego=r(jF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GK=n(jF,"CODE",{});var KSr=s(GK);ygo=r(KSr,"pretrained_model_name_or_path"),KSr.forEach(t),wgo=r(jF,":"),jF.forEach(t),Ago=i(Rt),$=n(Rt,"UL",{});var j=s($);ou=n(j,"LI",{});var L7e=s(ou);OK=n(L7e,"STRONG",{});var ZSr=s(OK);Lgo=r(ZSr,"albert"),ZSr.forEach(t),Bgo=r(L7e," \u2014 "),vS=n(L7e,"A",{href:!0});var ePr=s(vS);xgo=r(ePr,"AlbertForMaskedLM"),ePr.forEach(t),kgo=r(L7e," (ALBERT model)"),L7e.forEach(t),Rgo=i(j),ru=n(j,"LI",{});var B7e=s(ru);XK=n(B7e,"STRONG",{});var oPr=s(XK);Sgo=r(oPr,"bart"),oPr.forEach(t),Pgo=r(B7e," \u2014 "),TS=n(B7e,"A",{href:!0});var rPr=s(TS);$go=r(rPr,"BartForConditionalGeneration"),rPr.forEach(t),Igo=r(B7e," (BART model)"),B7e.forEach(t),jgo=i(j),tu=n(j,"LI",{});var x7e=s(tu);zK=n(x7e,"STRONG",{});var tPr=s(zK);Ngo=r(tPr,"bert"),tPr.forEach(t),Dgo=r(x7e," \u2014 "),FS=n(x7e,"A",{href:!0});var aPr=s(FS);qgo=r(aPr,"BertForMaskedLM"),aPr.forEach(t),Ggo=r(x7e," (BERT model)"),x7e.forEach(t),Ogo=i(j),au=n(j,"LI",{});var k7e=s(au);VK=n(k7e,"STRONG",{});var nPr=s(VK);Xgo=r(nPr,"big_bird"),nPr.forEach(t),zgo=r(k7e," \u2014 "),CS=n(k7e,"A",{href:!0});var sPr=s(CS);Vgo=r(sPr,"BigBirdForMaskedLM"),sPr.forEach(t),Wgo=r(k7e," (BigBird model)"),k7e.forEach(t),Qgo=i(j),nu=n(j,"LI",{});var R7e=s(nu);WK=n(R7e,"STRONG",{});var lPr=s(WK);Hgo=r(lPr,"camembert"),lPr.forEach(t),Ugo=r(R7e," \u2014 "),MS=n(R7e,"A",{href:!0});var iPr=s(MS);Jgo=r(iPr,"CamembertForMaskedLM"),iPr.forEach(t),Ygo=r(R7e," (CamemBERT model)"),R7e.forEach(t),Kgo=i(j),su=n(j,"LI",{});var S7e=s(su);QK=n(S7e,"STRONG",{});var dPr=s(QK);Zgo=r(dPr,"convbert"),dPr.forEach(t),eho=r(S7e," \u2014 "),ES=n(S7e,"A",{href:!0});var cPr=s(ES);oho=r(cPr,"ConvBertForMaskedLM"),cPr.forEach(t),rho=r(S7e," (ConvBERT model)"),S7e.forEach(t),tho=i(j),lu=n(j,"LI",{});var P7e=s(lu);HK=n(P7e,"STRONG",{});var fPr=s(HK);aho=r(fPr,"deberta"),fPr.forEach(t),nho=r(P7e," \u2014 "),yS=n(P7e,"A",{href:!0});var mPr=s(yS);sho=r(mPr,"DebertaForMaskedLM"),mPr.forEach(t),lho=r(P7e," (DeBERTa model)"),P7e.forEach(t),iho=i(j),iu=n(j,"LI",{});var $7e=s(iu);UK=n($7e,"STRONG",{});var gPr=s(UK);dho=r(gPr,"deberta-v2"),gPr.forEach(t),cho=r($7e," \u2014 "),wS=n($7e,"A",{href:!0});var hPr=s(wS);fho=r(hPr,"DebertaV2ForMaskedLM"),hPr.forEach(t),mho=r($7e," (DeBERTa-v2 model)"),$7e.forEach(t),gho=i(j),du=n(j,"LI",{});var I7e=s(du);JK=n(I7e,"STRONG",{});var pPr=s(JK);hho=r(pPr,"distilbert"),pPr.forEach(t),pho=r(I7e," \u2014 "),AS=n(I7e,"A",{href:!0});var _Pr=s(AS);_ho=r(_Pr,"DistilBertForMaskedLM"),_Pr.forEach(t),uho=r(I7e," (DistilBERT model)"),I7e.forEach(t),bho=i(j),cu=n(j,"LI",{});var j7e=s(cu);YK=n(j7e,"STRONG",{});var uPr=s(YK);vho=r(uPr,"electra"),uPr.forEach(t),Tho=r(j7e," \u2014 "),LS=n(j7e,"A",{href:!0});var bPr=s(LS);Fho=r(bPr,"ElectraForMaskedLM"),bPr.forEach(t),Cho=r(j7e," (ELECTRA model)"),j7e.forEach(t),Mho=i(j),fu=n(j,"LI",{});var N7e=s(fu);KK=n(N7e,"STRONG",{});var vPr=s(KK);Eho=r(vPr,"flaubert"),vPr.forEach(t),yho=r(N7e," \u2014 "),BS=n(N7e,"A",{href:!0});var TPr=s(BS);who=r(TPr,"FlaubertWithLMHeadModel"),TPr.forEach(t),Aho=r(N7e," (FlauBERT model)"),N7e.forEach(t),Lho=i(j),mu=n(j,"LI",{});var D7e=s(mu);ZK=n(D7e,"STRONG",{});var FPr=s(ZK);Bho=r(FPr,"fnet"),FPr.forEach(t),xho=r(D7e," \u2014 "),xS=n(D7e,"A",{href:!0});var CPr=s(xS);kho=r(CPr,"FNetForMaskedLM"),CPr.forEach(t),Rho=r(D7e," (FNet model)"),D7e.forEach(t),Sho=i(j),gu=n(j,"LI",{});var q7e=s(gu);eZ=n(q7e,"STRONG",{});var MPr=s(eZ);Pho=r(MPr,"funnel"),MPr.forEach(t),$ho=r(q7e," \u2014 "),kS=n(q7e,"A",{href:!0});var EPr=s(kS);Iho=r(EPr,"FunnelForMaskedLM"),EPr.forEach(t),jho=r(q7e," (Funnel Transformer model)"),q7e.forEach(t),Nho=i(j),hu=n(j,"LI",{});var G7e=s(hu);oZ=n(G7e,"STRONG",{});var yPr=s(oZ);Dho=r(yPr,"ibert"),yPr.forEach(t),qho=r(G7e," \u2014 "),RS=n(G7e,"A",{href:!0});var wPr=s(RS);Gho=r(wPr,"IBertForMaskedLM"),wPr.forEach(t),Oho=r(G7e," (I-BERT model)"),G7e.forEach(t),Xho=i(j),pu=n(j,"LI",{});var O7e=s(pu);rZ=n(O7e,"STRONG",{});var APr=s(rZ);zho=r(APr,"layoutlm"),APr.forEach(t),Vho=r(O7e," \u2014 "),SS=n(O7e,"A",{href:!0});var LPr=s(SS);Who=r(LPr,"LayoutLMForMaskedLM"),LPr.forEach(t),Qho=r(O7e," (LayoutLM model)"),O7e.forEach(t),Hho=i(j),_u=n(j,"LI",{});var X7e=s(_u);tZ=n(X7e,"STRONG",{});var BPr=s(tZ);Uho=r(BPr,"longformer"),BPr.forEach(t),Jho=r(X7e," \u2014 "),PS=n(X7e,"A",{href:!0});var xPr=s(PS);Yho=r(xPr,"LongformerForMaskedLM"),xPr.forEach(t),Kho=r(X7e," (Longformer model)"),X7e.forEach(t),Zho=i(j),uu=n(j,"LI",{});var z7e=s(uu);aZ=n(z7e,"STRONG",{});var kPr=s(aZ);epo=r(kPr,"mbart"),kPr.forEach(t),opo=r(z7e," \u2014 "),$S=n(z7e,"A",{href:!0});var RPr=s($S);rpo=r(RPr,"MBartForConditionalGeneration"),RPr.forEach(t),tpo=r(z7e," (mBART model)"),z7e.forEach(t),apo=i(j),bu=n(j,"LI",{});var V7e=s(bu);nZ=n(V7e,"STRONG",{});var SPr=s(nZ);npo=r(SPr,"megatron-bert"),SPr.forEach(t),spo=r(V7e," \u2014 "),IS=n(V7e,"A",{href:!0});var PPr=s(IS);lpo=r(PPr,"MegatronBertForMaskedLM"),PPr.forEach(t),ipo=r(V7e," (MegatronBert model)"),V7e.forEach(t),dpo=i(j),vu=n(j,"LI",{});var W7e=s(vu);sZ=n(W7e,"STRONG",{});var $Pr=s(sZ);cpo=r($Pr,"mobilebert"),$Pr.forEach(t),fpo=r(W7e," \u2014 "),jS=n(W7e,"A",{href:!0});var IPr=s(jS);mpo=r(IPr,"MobileBertForMaskedLM"),IPr.forEach(t),gpo=r(W7e," (MobileBERT model)"),W7e.forEach(t),hpo=i(j),Tu=n(j,"LI",{});var Q7e=s(Tu);lZ=n(Q7e,"STRONG",{});var jPr=s(lZ);ppo=r(jPr,"mpnet"),jPr.forEach(t),_po=r(Q7e," \u2014 "),NS=n(Q7e,"A",{href:!0});var NPr=s(NS);upo=r(NPr,"MPNetForMaskedLM"),NPr.forEach(t),bpo=r(Q7e," (MPNet model)"),Q7e.forEach(t),vpo=i(j),Fu=n(j,"LI",{});var H7e=s(Fu);iZ=n(H7e,"STRONG",{});var DPr=s(iZ);Tpo=r(DPr,"nystromformer"),DPr.forEach(t),Fpo=r(H7e," \u2014 "),DS=n(H7e,"A",{href:!0});var qPr=s(DS);Cpo=r(qPr,"NystromformerForMaskedLM"),qPr.forEach(t),Mpo=r(H7e," (Nystromformer model)"),H7e.forEach(t),Epo=i(j),Cu=n(j,"LI",{});var U7e=s(Cu);dZ=n(U7e,"STRONG",{});var GPr=s(dZ);ypo=r(GPr,"perceiver"),GPr.forEach(t),wpo=r(U7e," \u2014 "),qS=n(U7e,"A",{href:!0});var OPr=s(qS);Apo=r(OPr,"PerceiverForMaskedLM"),OPr.forEach(t),Lpo=r(U7e," (Perceiver model)"),U7e.forEach(t),Bpo=i(j),Mu=n(j,"LI",{});var J7e=s(Mu);cZ=n(J7e,"STRONG",{});var XPr=s(cZ);xpo=r(XPr,"qdqbert"),XPr.forEach(t),kpo=r(J7e," \u2014 "),GS=n(J7e,"A",{href:!0});var zPr=s(GS);Rpo=r(zPr,"QDQBertForMaskedLM"),zPr.forEach(t),Spo=r(J7e," (QDQBert model)"),J7e.forEach(t),Ppo=i(j),Eu=n(j,"LI",{});var Y7e=s(Eu);fZ=n(Y7e,"STRONG",{});var VPr=s(fZ);$po=r(VPr,"reformer"),VPr.forEach(t),Ipo=r(Y7e," \u2014 "),OS=n(Y7e,"A",{href:!0});var WPr=s(OS);jpo=r(WPr,"ReformerForMaskedLM"),WPr.forEach(t),Npo=r(Y7e," (Reformer model)"),Y7e.forEach(t),Dpo=i(j),yu=n(j,"LI",{});var K7e=s(yu);mZ=n(K7e,"STRONG",{});var QPr=s(mZ);qpo=r(QPr,"rembert"),QPr.forEach(t),Gpo=r(K7e," \u2014 "),XS=n(K7e,"A",{href:!0});var HPr=s(XS);Opo=r(HPr,"RemBertForMaskedLM"),HPr.forEach(t),Xpo=r(K7e," (RemBERT model)"),K7e.forEach(t),zpo=i(j),wu=n(j,"LI",{});var Z7e=s(wu);gZ=n(Z7e,"STRONG",{});var UPr=s(gZ);Vpo=r(UPr,"roberta"),UPr.forEach(t),Wpo=r(Z7e," \u2014 "),zS=n(Z7e,"A",{href:!0});var JPr=s(zS);Qpo=r(JPr,"RobertaForMaskedLM"),JPr.forEach(t),Hpo=r(Z7e," (RoBERTa model)"),Z7e.forEach(t),Upo=i(j),Au=n(j,"LI",{});var e8e=s(Au);hZ=n(e8e,"STRONG",{});var YPr=s(hZ);Jpo=r(YPr,"roformer"),YPr.forEach(t),Ypo=r(e8e," \u2014 "),VS=n(e8e,"A",{href:!0});var KPr=s(VS);Kpo=r(KPr,"RoFormerForMaskedLM"),KPr.forEach(t),Zpo=r(e8e," (RoFormer model)"),e8e.forEach(t),e_o=i(j),Lu=n(j,"LI",{});var o8e=s(Lu);pZ=n(o8e,"STRONG",{});var ZPr=s(pZ);o_o=r(ZPr,"squeezebert"),ZPr.forEach(t),r_o=r(o8e," \u2014 "),WS=n(o8e,"A",{href:!0});var e$r=s(WS);t_o=r(e$r,"SqueezeBertForMaskedLM"),e$r.forEach(t),a_o=r(o8e," (SqueezeBERT model)"),o8e.forEach(t),n_o=i(j),Bu=n(j,"LI",{});var r8e=s(Bu);_Z=n(r8e,"STRONG",{});var o$r=s(_Z);s_o=r(o$r,"tapas"),o$r.forEach(t),l_o=r(r8e," \u2014 "),QS=n(r8e,"A",{href:!0});var r$r=s(QS);i_o=r(r$r,"TapasForMaskedLM"),r$r.forEach(t),d_o=r(r8e," (TAPAS model)"),r8e.forEach(t),c_o=i(j),xu=n(j,"LI",{});var t8e=s(xu);uZ=n(t8e,"STRONG",{});var t$r=s(uZ);f_o=r(t$r,"wav2vec2"),t$r.forEach(t),m_o=r(t8e," \u2014 "),bZ=n(t8e,"CODE",{});var a$r=s(bZ);g_o=r(a$r,"Wav2Vec2ForMaskedLM"),a$r.forEach(t),h_o=r(t8e,"(Wav2Vec2 model)"),t8e.forEach(t),p_o=i(j),ku=n(j,"LI",{});var a8e=s(ku);vZ=n(a8e,"STRONG",{});var n$r=s(vZ);__o=r(n$r,"xlm"),n$r.forEach(t),u_o=r(a8e," \u2014 "),HS=n(a8e,"A",{href:!0});var s$r=s(HS);b_o=r(s$r,"XLMWithLMHeadModel"),s$r.forEach(t),v_o=r(a8e," (XLM model)"),a8e.forEach(t),T_o=i(j),Ru=n(j,"LI",{});var n8e=s(Ru);TZ=n(n8e,"STRONG",{});var l$r=s(TZ);F_o=r(l$r,"xlm-roberta"),l$r.forEach(t),C_o=r(n8e," \u2014 "),US=n(n8e,"A",{href:!0});var i$r=s(US);M_o=r(i$r,"XLMRobertaForMaskedLM"),i$r.forEach(t),E_o=r(n8e," (XLM-RoBERTa model)"),n8e.forEach(t),y_o=i(j),Su=n(j,"LI",{});var s8e=s(Su);FZ=n(s8e,"STRONG",{});var d$r=s(FZ);w_o=r(d$r,"xlm-roberta-xl"),d$r.forEach(t),A_o=r(s8e," \u2014 "),JS=n(s8e,"A",{href:!0});var c$r=s(JS);L_o=r(c$r,"XLMRobertaXLForMaskedLM"),c$r.forEach(t),B_o=r(s8e," (XLM-RoBERTa-XL model)"),s8e.forEach(t),x_o=i(j),Pu=n(j,"LI",{});var l8e=s(Pu);CZ=n(l8e,"STRONG",{});var f$r=s(CZ);k_o=r(f$r,"yoso"),f$r.forEach(t),R_o=r(l8e," \u2014 "),YS=n(l8e,"A",{href:!0});var m$r=s(YS);S_o=r(m$r,"YosoForMaskedLM"),m$r.forEach(t),P_o=r(l8e," (YOSO model)"),l8e.forEach(t),j.forEach(t),$_o=i(Rt),$u=n(Rt,"P",{});var i8e=s($u);I_o=r(i8e,"The model is set in evaluation mode by default using "),MZ=n(i8e,"CODE",{});var g$r=s(MZ);j_o=r(g$r,"model.eval()"),g$r.forEach(t),N_o=r(i8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EZ=n(i8e,"CODE",{});var h$r=s(EZ);D_o=r(h$r,"model.train()"),h$r.forEach(t),i8e.forEach(t),q_o=i(Rt),yZ=n(Rt,"P",{});var p$r=s(yZ);G_o=r(p$r,"Examples:"),p$r.forEach(t),O_o=i(Rt),m(S4.$$.fragment,Rt),Rt.forEach(t),Ns.forEach(t),IAe=i(d),zi=n(d,"H2",{class:!0});var qLe=s(zi);Iu=n(qLe,"A",{id:!0,class:!0,href:!0});var _$r=s(Iu);wZ=n(_$r,"SPAN",{});var u$r=s(wZ);m(P4.$$.fragment,u$r),u$r.forEach(t),_$r.forEach(t),X_o=i(qLe),AZ=n(qLe,"SPAN",{});var b$r=s(AZ);z_o=r(b$r,"AutoModelForSeq2SeqLM"),b$r.forEach(t),qLe.forEach(t),jAe=i(d),Qo=n(d,"DIV",{class:!0});var qs=s(Qo);m($4.$$.fragment,qs),V_o=i(qs),Vi=n(qs,"P",{});var nX=s(Vi);W_o=r(nX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LZ=n(nX,"CODE",{});var v$r=s(LZ);Q_o=r(v$r,"from_pretrained()"),v$r.forEach(t),H_o=r(nX,"class method or the "),BZ=n(nX,"CODE",{});var T$r=s(BZ);U_o=r(T$r,"from_config()"),T$r.forEach(t),J_o=r(nX,`class
method.`),nX.forEach(t),Y_o=i(qs),I4=n(qs,"P",{});var GLe=s(I4);K_o=r(GLe,"This class cannot be instantiated directly using "),xZ=n(GLe,"CODE",{});var F$r=s(xZ);Z_o=r(F$r,"__init__()"),F$r.forEach(t),euo=r(GLe," (throws an error)."),GLe.forEach(t),ouo=i(qs),Dr=n(qs,"DIV",{class:!0});var Gs=s(Dr);m(j4.$$.fragment,Gs),ruo=i(Gs),kZ=n(Gs,"P",{});var C$r=s(kZ);tuo=r(C$r,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C$r.forEach(t),auo=i(Gs),Wi=n(Gs,"P",{});var sX=s(Wi);nuo=r(sX,`Note:
Loading a model from its configuration file does `),RZ=n(sX,"STRONG",{});var M$r=s(RZ);suo=r(M$r,"not"),M$r.forEach(t),luo=r(sX,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(sX,"CODE",{});var E$r=s(SZ);iuo=r(E$r,"from_pretrained()"),E$r.forEach(t),duo=r(sX,"to load the model weights."),sX.forEach(t),cuo=i(Gs),PZ=n(Gs,"P",{});var y$r=s(PZ);fuo=r(y$r,"Examples:"),y$r.forEach(t),muo=i(Gs),m(N4.$$.fragment,Gs),Gs.forEach(t),guo=i(qs),Pe=n(qs,"DIV",{class:!0});var St=s(Pe);m(D4.$$.fragment,St),huo=i(St),$Z=n(St,"P",{});var w$r=s($Z);puo=r(w$r,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),w$r.forEach(t),_uo=i(St),Da=n(St,"P",{});var NF=s(Da);uuo=r(NF,"The model class to instantiate is selected based on the "),IZ=n(NF,"CODE",{});var A$r=s(IZ);buo=r(A$r,"model_type"),A$r.forEach(t),vuo=r(NF,` property of the config object (either
passed as an argument or loaded from `),jZ=n(NF,"CODE",{});var L$r=s(jZ);Tuo=r(L$r,"pretrained_model_name_or_path"),L$r.forEach(t),Fuo=r(NF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NZ=n(NF,"CODE",{});var B$r=s(NZ);Cuo=r(B$r,"pretrained_model_name_or_path"),B$r.forEach(t),Muo=r(NF,":"),NF.forEach(t),Euo=i(St),ne=n(St,"UL",{});var ie=s(ne);ju=n(ie,"LI",{});var d8e=s(ju);DZ=n(d8e,"STRONG",{});var x$r=s(DZ);yuo=r(x$r,"bart"),x$r.forEach(t),wuo=r(d8e," \u2014 "),KS=n(d8e,"A",{href:!0});var k$r=s(KS);Auo=r(k$r,"BartForConditionalGeneration"),k$r.forEach(t),Luo=r(d8e," (BART model)"),d8e.forEach(t),Buo=i(ie),Nu=n(ie,"LI",{});var c8e=s(Nu);qZ=n(c8e,"STRONG",{});var R$r=s(qZ);xuo=r(R$r,"bigbird_pegasus"),R$r.forEach(t),kuo=r(c8e," \u2014 "),ZS=n(c8e,"A",{href:!0});var S$r=s(ZS);Ruo=r(S$r,"BigBirdPegasusForConditionalGeneration"),S$r.forEach(t),Suo=r(c8e," (BigBirdPegasus model)"),c8e.forEach(t),Puo=i(ie),Du=n(ie,"LI",{});var f8e=s(Du);GZ=n(f8e,"STRONG",{});var P$r=s(GZ);$uo=r(P$r,"blenderbot"),P$r.forEach(t),Iuo=r(f8e," \u2014 "),eP=n(f8e,"A",{href:!0});var $$r=s(eP);juo=r($$r,"BlenderbotForConditionalGeneration"),$$r.forEach(t),Nuo=r(f8e," (Blenderbot model)"),f8e.forEach(t),Duo=i(ie),qu=n(ie,"LI",{});var m8e=s(qu);OZ=n(m8e,"STRONG",{});var I$r=s(OZ);quo=r(I$r,"blenderbot-small"),I$r.forEach(t),Guo=r(m8e," \u2014 "),oP=n(m8e,"A",{href:!0});var j$r=s(oP);Ouo=r(j$r,"BlenderbotSmallForConditionalGeneration"),j$r.forEach(t),Xuo=r(m8e," (BlenderbotSmall model)"),m8e.forEach(t),zuo=i(ie),Gu=n(ie,"LI",{});var g8e=s(Gu);XZ=n(g8e,"STRONG",{});var N$r=s(XZ);Vuo=r(N$r,"encoder-decoder"),N$r.forEach(t),Wuo=r(g8e," \u2014 "),rP=n(g8e,"A",{href:!0});var D$r=s(rP);Quo=r(D$r,"EncoderDecoderModel"),D$r.forEach(t),Huo=r(g8e," (Encoder decoder model)"),g8e.forEach(t),Uuo=i(ie),Ou=n(ie,"LI",{});var h8e=s(Ou);zZ=n(h8e,"STRONG",{});var q$r=s(zZ);Juo=r(q$r,"fsmt"),q$r.forEach(t),Yuo=r(h8e," \u2014 "),tP=n(h8e,"A",{href:!0});var G$r=s(tP);Kuo=r(G$r,"FSMTForConditionalGeneration"),G$r.forEach(t),Zuo=r(h8e," (FairSeq Machine-Translation model)"),h8e.forEach(t),e1o=i(ie),Xu=n(ie,"LI",{});var p8e=s(Xu);VZ=n(p8e,"STRONG",{});var O$r=s(VZ);o1o=r(O$r,"led"),O$r.forEach(t),r1o=r(p8e," \u2014 "),aP=n(p8e,"A",{href:!0});var X$r=s(aP);t1o=r(X$r,"LEDForConditionalGeneration"),X$r.forEach(t),a1o=r(p8e," (LED model)"),p8e.forEach(t),n1o=i(ie),zu=n(ie,"LI",{});var _8e=s(zu);WZ=n(_8e,"STRONG",{});var z$r=s(WZ);s1o=r(z$r,"m2m_100"),z$r.forEach(t),l1o=r(_8e," \u2014 "),nP=n(_8e,"A",{href:!0});var V$r=s(nP);i1o=r(V$r,"M2M100ForConditionalGeneration"),V$r.forEach(t),d1o=r(_8e," (M2M100 model)"),_8e.forEach(t),c1o=i(ie),Vu=n(ie,"LI",{});var u8e=s(Vu);QZ=n(u8e,"STRONG",{});var W$r=s(QZ);f1o=r(W$r,"marian"),W$r.forEach(t),m1o=r(u8e," \u2014 "),sP=n(u8e,"A",{href:!0});var Q$r=s(sP);g1o=r(Q$r,"MarianMTModel"),Q$r.forEach(t),h1o=r(u8e," (Marian model)"),u8e.forEach(t),p1o=i(ie),Wu=n(ie,"LI",{});var b8e=s(Wu);HZ=n(b8e,"STRONG",{});var H$r=s(HZ);_1o=r(H$r,"mbart"),H$r.forEach(t),u1o=r(b8e," \u2014 "),lP=n(b8e,"A",{href:!0});var U$r=s(lP);b1o=r(U$r,"MBartForConditionalGeneration"),U$r.forEach(t),v1o=r(b8e," (mBART model)"),b8e.forEach(t),T1o=i(ie),Qu=n(ie,"LI",{});var v8e=s(Qu);UZ=n(v8e,"STRONG",{});var J$r=s(UZ);F1o=r(J$r,"mt5"),J$r.forEach(t),C1o=r(v8e," \u2014 "),iP=n(v8e,"A",{href:!0});var Y$r=s(iP);M1o=r(Y$r,"MT5ForConditionalGeneration"),Y$r.forEach(t),E1o=r(v8e," (mT5 model)"),v8e.forEach(t),y1o=i(ie),Hu=n(ie,"LI",{});var T8e=s(Hu);JZ=n(T8e,"STRONG",{});var K$r=s(JZ);w1o=r(K$r,"pegasus"),K$r.forEach(t),A1o=r(T8e," \u2014 "),dP=n(T8e,"A",{href:!0});var Z$r=s(dP);L1o=r(Z$r,"PegasusForConditionalGeneration"),Z$r.forEach(t),B1o=r(T8e," (Pegasus model)"),T8e.forEach(t),x1o=i(ie),Uu=n(ie,"LI",{});var F8e=s(Uu);YZ=n(F8e,"STRONG",{});var eIr=s(YZ);k1o=r(eIr,"prophetnet"),eIr.forEach(t),R1o=r(F8e," \u2014 "),cP=n(F8e,"A",{href:!0});var oIr=s(cP);S1o=r(oIr,"ProphetNetForConditionalGeneration"),oIr.forEach(t),P1o=r(F8e," (ProphetNet model)"),F8e.forEach(t),$1o=i(ie),Ju=n(ie,"LI",{});var C8e=s(Ju);KZ=n(C8e,"STRONG",{});var rIr=s(KZ);I1o=r(rIr,"t5"),rIr.forEach(t),j1o=r(C8e," \u2014 "),fP=n(C8e,"A",{href:!0});var tIr=s(fP);N1o=r(tIr,"T5ForConditionalGeneration"),tIr.forEach(t),D1o=r(C8e," (T5 model)"),C8e.forEach(t),q1o=i(ie),Yu=n(ie,"LI",{});var M8e=s(Yu);ZZ=n(M8e,"STRONG",{});var aIr=s(ZZ);G1o=r(aIr,"xlm-prophetnet"),aIr.forEach(t),O1o=r(M8e," \u2014 "),mP=n(M8e,"A",{href:!0});var nIr=s(mP);X1o=r(nIr,"XLMProphetNetForConditionalGeneration"),nIr.forEach(t),z1o=r(M8e," (XLMProphetNet model)"),M8e.forEach(t),ie.forEach(t),V1o=i(St),Ku=n(St,"P",{});var E8e=s(Ku);W1o=r(E8e,"The model is set in evaluation mode by default using "),eee=n(E8e,"CODE",{});var sIr=s(eee);Q1o=r(sIr,"model.eval()"),sIr.forEach(t),H1o=r(E8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oee=n(E8e,"CODE",{});var lIr=s(oee);U1o=r(lIr,"model.train()"),lIr.forEach(t),E8e.forEach(t),J1o=i(St),ree=n(St,"P",{});var iIr=s(ree);Y1o=r(iIr,"Examples:"),iIr.forEach(t),K1o=i(St),m(q4.$$.fragment,St),St.forEach(t),qs.forEach(t),NAe=i(d),Qi=n(d,"H2",{class:!0});var OLe=s(Qi);Zu=n(OLe,"A",{id:!0,class:!0,href:!0});var dIr=s(Zu);tee=n(dIr,"SPAN",{});var cIr=s(tee);m(G4.$$.fragment,cIr),cIr.forEach(t),dIr.forEach(t),Z1o=i(OLe),aee=n(OLe,"SPAN",{});var fIr=s(aee);ebo=r(fIr,"AutoModelForSequenceClassification"),fIr.forEach(t),OLe.forEach(t),DAe=i(d),Ho=n(d,"DIV",{class:!0});var Os=s(Ho);m(O4.$$.fragment,Os),obo=i(Os),Hi=n(Os,"P",{});var lX=s(Hi);rbo=r(lX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nee=n(lX,"CODE",{});var mIr=s(nee);tbo=r(mIr,"from_pretrained()"),mIr.forEach(t),abo=r(lX,"class method or the "),see=n(lX,"CODE",{});var gIr=s(see);nbo=r(gIr,"from_config()"),gIr.forEach(t),sbo=r(lX,`class
method.`),lX.forEach(t),lbo=i(Os),X4=n(Os,"P",{});var XLe=s(X4);ibo=r(XLe,"This class cannot be instantiated directly using "),lee=n(XLe,"CODE",{});var hIr=s(lee);dbo=r(hIr,"__init__()"),hIr.forEach(t),cbo=r(XLe," (throws an error)."),XLe.forEach(t),fbo=i(Os),qr=n(Os,"DIV",{class:!0});var Xs=s(qr);m(z4.$$.fragment,Xs),mbo=i(Xs),iee=n(Xs,"P",{});var pIr=s(iee);gbo=r(pIr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pIr.forEach(t),hbo=i(Xs),Ui=n(Xs,"P",{});var iX=s(Ui);pbo=r(iX,`Note:
Loading a model from its configuration file does `),dee=n(iX,"STRONG",{});var _Ir=s(dee);_bo=r(_Ir,"not"),_Ir.forEach(t),ubo=r(iX,` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=n(iX,"CODE",{});var uIr=s(cee);bbo=r(uIr,"from_pretrained()"),uIr.forEach(t),vbo=r(iX,"to load the model weights."),iX.forEach(t),Tbo=i(Xs),fee=n(Xs,"P",{});var bIr=s(fee);Fbo=r(bIr,"Examples:"),bIr.forEach(t),Cbo=i(Xs),m(V4.$$.fragment,Xs),Xs.forEach(t),Mbo=i(Os),$e=n(Os,"DIV",{class:!0});var Pt=s($e);m(W4.$$.fragment,Pt),Ebo=i(Pt),mee=n(Pt,"P",{});var vIr=s(mee);ybo=r(vIr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vIr.forEach(t),wbo=i(Pt),qa=n(Pt,"P",{});var DF=s(qa);Abo=r(DF,"The model class to instantiate is selected based on the "),gee=n(DF,"CODE",{});var TIr=s(gee);Lbo=r(TIr,"model_type"),TIr.forEach(t),Bbo=r(DF,` property of the config object (either
passed as an argument or loaded from `),hee=n(DF,"CODE",{});var FIr=s(hee);xbo=r(FIr,"pretrained_model_name_or_path"),FIr.forEach(t),kbo=r(DF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pee=n(DF,"CODE",{});var CIr=s(pee);Rbo=r(CIr,"pretrained_model_name_or_path"),CIr.forEach(t),Sbo=r(DF,":"),DF.forEach(t),Pbo=i(Pt),A=n(Pt,"UL",{});var L=s(A);e1=n(L,"LI",{});var y8e=s(e1);_ee=n(y8e,"STRONG",{});var MIr=s(_ee);$bo=r(MIr,"albert"),MIr.forEach(t),Ibo=r(y8e," \u2014 "),gP=n(y8e,"A",{href:!0});var EIr=s(gP);jbo=r(EIr,"AlbertForSequenceClassification"),EIr.forEach(t),Nbo=r(y8e," (ALBERT model)"),y8e.forEach(t),Dbo=i(L),o1=n(L,"LI",{});var w8e=s(o1);uee=n(w8e,"STRONG",{});var yIr=s(uee);qbo=r(yIr,"bart"),yIr.forEach(t),Gbo=r(w8e," \u2014 "),hP=n(w8e,"A",{href:!0});var wIr=s(hP);Obo=r(wIr,"BartForSequenceClassification"),wIr.forEach(t),Xbo=r(w8e," (BART model)"),w8e.forEach(t),zbo=i(L),r1=n(L,"LI",{});var A8e=s(r1);bee=n(A8e,"STRONG",{});var AIr=s(bee);Vbo=r(AIr,"bert"),AIr.forEach(t),Wbo=r(A8e," \u2014 "),pP=n(A8e,"A",{href:!0});var LIr=s(pP);Qbo=r(LIr,"BertForSequenceClassification"),LIr.forEach(t),Hbo=r(A8e," (BERT model)"),A8e.forEach(t),Ubo=i(L),t1=n(L,"LI",{});var L8e=s(t1);vee=n(L8e,"STRONG",{});var BIr=s(vee);Jbo=r(BIr,"big_bird"),BIr.forEach(t),Ybo=r(L8e," \u2014 "),_P=n(L8e,"A",{href:!0});var xIr=s(_P);Kbo=r(xIr,"BigBirdForSequenceClassification"),xIr.forEach(t),Zbo=r(L8e," (BigBird model)"),L8e.forEach(t),e5o=i(L),a1=n(L,"LI",{});var B8e=s(a1);Tee=n(B8e,"STRONG",{});var kIr=s(Tee);o5o=r(kIr,"bigbird_pegasus"),kIr.forEach(t),r5o=r(B8e," \u2014 "),uP=n(B8e,"A",{href:!0});var RIr=s(uP);t5o=r(RIr,"BigBirdPegasusForSequenceClassification"),RIr.forEach(t),a5o=r(B8e," (BigBirdPegasus model)"),B8e.forEach(t),n5o=i(L),n1=n(L,"LI",{});var x8e=s(n1);Fee=n(x8e,"STRONG",{});var SIr=s(Fee);s5o=r(SIr,"camembert"),SIr.forEach(t),l5o=r(x8e," \u2014 "),bP=n(x8e,"A",{href:!0});var PIr=s(bP);i5o=r(PIr,"CamembertForSequenceClassification"),PIr.forEach(t),d5o=r(x8e," (CamemBERT model)"),x8e.forEach(t),c5o=i(L),s1=n(L,"LI",{});var k8e=s(s1);Cee=n(k8e,"STRONG",{});var $Ir=s(Cee);f5o=r($Ir,"canine"),$Ir.forEach(t),m5o=r(k8e," \u2014 "),vP=n(k8e,"A",{href:!0});var IIr=s(vP);g5o=r(IIr,"CanineForSequenceClassification"),IIr.forEach(t),h5o=r(k8e," (Canine model)"),k8e.forEach(t),p5o=i(L),l1=n(L,"LI",{});var R8e=s(l1);Mee=n(R8e,"STRONG",{});var jIr=s(Mee);_5o=r(jIr,"convbert"),jIr.forEach(t),u5o=r(R8e," \u2014 "),TP=n(R8e,"A",{href:!0});var NIr=s(TP);b5o=r(NIr,"ConvBertForSequenceClassification"),NIr.forEach(t),v5o=r(R8e," (ConvBERT model)"),R8e.forEach(t),T5o=i(L),i1=n(L,"LI",{});var S8e=s(i1);Eee=n(S8e,"STRONG",{});var DIr=s(Eee);F5o=r(DIr,"ctrl"),DIr.forEach(t),C5o=r(S8e," \u2014 "),FP=n(S8e,"A",{href:!0});var qIr=s(FP);M5o=r(qIr,"CTRLForSequenceClassification"),qIr.forEach(t),E5o=r(S8e," (CTRL model)"),S8e.forEach(t),y5o=i(L),d1=n(L,"LI",{});var P8e=s(d1);yee=n(P8e,"STRONG",{});var GIr=s(yee);w5o=r(GIr,"deberta"),GIr.forEach(t),A5o=r(P8e," \u2014 "),CP=n(P8e,"A",{href:!0});var OIr=s(CP);L5o=r(OIr,"DebertaForSequenceClassification"),OIr.forEach(t),B5o=r(P8e," (DeBERTa model)"),P8e.forEach(t),x5o=i(L),c1=n(L,"LI",{});var $8e=s(c1);wee=n($8e,"STRONG",{});var XIr=s(wee);k5o=r(XIr,"deberta-v2"),XIr.forEach(t),R5o=r($8e," \u2014 "),MP=n($8e,"A",{href:!0});var zIr=s(MP);S5o=r(zIr,"DebertaV2ForSequenceClassification"),zIr.forEach(t),P5o=r($8e," (DeBERTa-v2 model)"),$8e.forEach(t),$5o=i(L),f1=n(L,"LI",{});var I8e=s(f1);Aee=n(I8e,"STRONG",{});var VIr=s(Aee);I5o=r(VIr,"distilbert"),VIr.forEach(t),j5o=r(I8e," \u2014 "),EP=n(I8e,"A",{href:!0});var WIr=s(EP);N5o=r(WIr,"DistilBertForSequenceClassification"),WIr.forEach(t),D5o=r(I8e," (DistilBERT model)"),I8e.forEach(t),q5o=i(L),m1=n(L,"LI",{});var j8e=s(m1);Lee=n(j8e,"STRONG",{});var QIr=s(Lee);G5o=r(QIr,"electra"),QIr.forEach(t),O5o=r(j8e," \u2014 "),yP=n(j8e,"A",{href:!0});var HIr=s(yP);X5o=r(HIr,"ElectraForSequenceClassification"),HIr.forEach(t),z5o=r(j8e," (ELECTRA model)"),j8e.forEach(t),V5o=i(L),g1=n(L,"LI",{});var N8e=s(g1);Bee=n(N8e,"STRONG",{});var UIr=s(Bee);W5o=r(UIr,"flaubert"),UIr.forEach(t),Q5o=r(N8e," \u2014 "),wP=n(N8e,"A",{href:!0});var JIr=s(wP);H5o=r(JIr,"FlaubertForSequenceClassification"),JIr.forEach(t),U5o=r(N8e," (FlauBERT model)"),N8e.forEach(t),J5o=i(L),h1=n(L,"LI",{});var D8e=s(h1);xee=n(D8e,"STRONG",{});var YIr=s(xee);Y5o=r(YIr,"fnet"),YIr.forEach(t),K5o=r(D8e," \u2014 "),AP=n(D8e,"A",{href:!0});var KIr=s(AP);Z5o=r(KIr,"FNetForSequenceClassification"),KIr.forEach(t),e2o=r(D8e," (FNet model)"),D8e.forEach(t),o2o=i(L),p1=n(L,"LI",{});var q8e=s(p1);kee=n(q8e,"STRONG",{});var ZIr=s(kee);r2o=r(ZIr,"funnel"),ZIr.forEach(t),t2o=r(q8e," \u2014 "),LP=n(q8e,"A",{href:!0});var ejr=s(LP);a2o=r(ejr,"FunnelForSequenceClassification"),ejr.forEach(t),n2o=r(q8e," (Funnel Transformer model)"),q8e.forEach(t),s2o=i(L),_1=n(L,"LI",{});var G8e=s(_1);Ree=n(G8e,"STRONG",{});var ojr=s(Ree);l2o=r(ojr,"gpt2"),ojr.forEach(t),i2o=r(G8e," \u2014 "),BP=n(G8e,"A",{href:!0});var rjr=s(BP);d2o=r(rjr,"GPT2ForSequenceClassification"),rjr.forEach(t),c2o=r(G8e," (OpenAI GPT-2 model)"),G8e.forEach(t),f2o=i(L),u1=n(L,"LI",{});var O8e=s(u1);See=n(O8e,"STRONG",{});var tjr=s(See);m2o=r(tjr,"gpt_neo"),tjr.forEach(t),g2o=r(O8e," \u2014 "),xP=n(O8e,"A",{href:!0});var ajr=s(xP);h2o=r(ajr,"GPTNeoForSequenceClassification"),ajr.forEach(t),p2o=r(O8e," (GPT Neo model)"),O8e.forEach(t),_2o=i(L),b1=n(L,"LI",{});var X8e=s(b1);Pee=n(X8e,"STRONG",{});var njr=s(Pee);u2o=r(njr,"gptj"),njr.forEach(t),b2o=r(X8e," \u2014 "),kP=n(X8e,"A",{href:!0});var sjr=s(kP);v2o=r(sjr,"GPTJForSequenceClassification"),sjr.forEach(t),T2o=r(X8e," (GPT-J model)"),X8e.forEach(t),F2o=i(L),v1=n(L,"LI",{});var z8e=s(v1);$ee=n(z8e,"STRONG",{});var ljr=s($ee);C2o=r(ljr,"ibert"),ljr.forEach(t),M2o=r(z8e," \u2014 "),RP=n(z8e,"A",{href:!0});var ijr=s(RP);E2o=r(ijr,"IBertForSequenceClassification"),ijr.forEach(t),y2o=r(z8e," (I-BERT model)"),z8e.forEach(t),w2o=i(L),T1=n(L,"LI",{});var V8e=s(T1);Iee=n(V8e,"STRONG",{});var djr=s(Iee);A2o=r(djr,"layoutlm"),djr.forEach(t),L2o=r(V8e," \u2014 "),SP=n(V8e,"A",{href:!0});var cjr=s(SP);B2o=r(cjr,"LayoutLMForSequenceClassification"),cjr.forEach(t),x2o=r(V8e," (LayoutLM model)"),V8e.forEach(t),k2o=i(L),F1=n(L,"LI",{});var W8e=s(F1);jee=n(W8e,"STRONG",{});var fjr=s(jee);R2o=r(fjr,"layoutlmv2"),fjr.forEach(t),S2o=r(W8e," \u2014 "),PP=n(W8e,"A",{href:!0});var mjr=s(PP);P2o=r(mjr,"LayoutLMv2ForSequenceClassification"),mjr.forEach(t),$2o=r(W8e," (LayoutLMv2 model)"),W8e.forEach(t),I2o=i(L),C1=n(L,"LI",{});var Q8e=s(C1);Nee=n(Q8e,"STRONG",{});var gjr=s(Nee);j2o=r(gjr,"led"),gjr.forEach(t),N2o=r(Q8e," \u2014 "),$P=n(Q8e,"A",{href:!0});var hjr=s($P);D2o=r(hjr,"LEDForSequenceClassification"),hjr.forEach(t),q2o=r(Q8e," (LED model)"),Q8e.forEach(t),G2o=i(L),M1=n(L,"LI",{});var H8e=s(M1);Dee=n(H8e,"STRONG",{});var pjr=s(Dee);O2o=r(pjr,"longformer"),pjr.forEach(t),X2o=r(H8e," \u2014 "),IP=n(H8e,"A",{href:!0});var _jr=s(IP);z2o=r(_jr,"LongformerForSequenceClassification"),_jr.forEach(t),V2o=r(H8e," (Longformer model)"),H8e.forEach(t),W2o=i(L),E1=n(L,"LI",{});var U8e=s(E1);qee=n(U8e,"STRONG",{});var ujr=s(qee);Q2o=r(ujr,"mbart"),ujr.forEach(t),H2o=r(U8e," \u2014 "),jP=n(U8e,"A",{href:!0});var bjr=s(jP);U2o=r(bjr,"MBartForSequenceClassification"),bjr.forEach(t),J2o=r(U8e," (mBART model)"),U8e.forEach(t),Y2o=i(L),y1=n(L,"LI",{});var J8e=s(y1);Gee=n(J8e,"STRONG",{});var vjr=s(Gee);K2o=r(vjr,"megatron-bert"),vjr.forEach(t),Z2o=r(J8e," \u2014 "),NP=n(J8e,"A",{href:!0});var Tjr=s(NP);evo=r(Tjr,"MegatronBertForSequenceClassification"),Tjr.forEach(t),ovo=r(J8e," (MegatronBert model)"),J8e.forEach(t),rvo=i(L),w1=n(L,"LI",{});var Y8e=s(w1);Oee=n(Y8e,"STRONG",{});var Fjr=s(Oee);tvo=r(Fjr,"mobilebert"),Fjr.forEach(t),avo=r(Y8e," \u2014 "),DP=n(Y8e,"A",{href:!0});var Cjr=s(DP);nvo=r(Cjr,"MobileBertForSequenceClassification"),Cjr.forEach(t),svo=r(Y8e," (MobileBERT model)"),Y8e.forEach(t),lvo=i(L),A1=n(L,"LI",{});var K8e=s(A1);Xee=n(K8e,"STRONG",{});var Mjr=s(Xee);ivo=r(Mjr,"mpnet"),Mjr.forEach(t),dvo=r(K8e," \u2014 "),qP=n(K8e,"A",{href:!0});var Ejr=s(qP);cvo=r(Ejr,"MPNetForSequenceClassification"),Ejr.forEach(t),fvo=r(K8e," (MPNet model)"),K8e.forEach(t),mvo=i(L),L1=n(L,"LI",{});var Z8e=s(L1);zee=n(Z8e,"STRONG",{});var yjr=s(zee);gvo=r(yjr,"nystromformer"),yjr.forEach(t),hvo=r(Z8e," \u2014 "),GP=n(Z8e,"A",{href:!0});var wjr=s(GP);pvo=r(wjr,"NystromformerForSequenceClassification"),wjr.forEach(t),_vo=r(Z8e," (Nystromformer model)"),Z8e.forEach(t),uvo=i(L),B1=n(L,"LI",{});var eFe=s(B1);Vee=n(eFe,"STRONG",{});var Ajr=s(Vee);bvo=r(Ajr,"openai-gpt"),Ajr.forEach(t),vvo=r(eFe," \u2014 "),OP=n(eFe,"A",{href:!0});var Ljr=s(OP);Tvo=r(Ljr,"OpenAIGPTForSequenceClassification"),Ljr.forEach(t),Fvo=r(eFe," (OpenAI GPT model)"),eFe.forEach(t),Cvo=i(L),x1=n(L,"LI",{});var oFe=s(x1);Wee=n(oFe,"STRONG",{});var Bjr=s(Wee);Mvo=r(Bjr,"perceiver"),Bjr.forEach(t),Evo=r(oFe," \u2014 "),XP=n(oFe,"A",{href:!0});var xjr=s(XP);yvo=r(xjr,"PerceiverForSequenceClassification"),xjr.forEach(t),wvo=r(oFe," (Perceiver model)"),oFe.forEach(t),Avo=i(L),k1=n(L,"LI",{});var rFe=s(k1);Qee=n(rFe,"STRONG",{});var kjr=s(Qee);Lvo=r(kjr,"qdqbert"),kjr.forEach(t),Bvo=r(rFe," \u2014 "),zP=n(rFe,"A",{href:!0});var Rjr=s(zP);xvo=r(Rjr,"QDQBertForSequenceClassification"),Rjr.forEach(t),kvo=r(rFe," (QDQBert model)"),rFe.forEach(t),Rvo=i(L),R1=n(L,"LI",{});var tFe=s(R1);Hee=n(tFe,"STRONG",{});var Sjr=s(Hee);Svo=r(Sjr,"reformer"),Sjr.forEach(t),Pvo=r(tFe," \u2014 "),VP=n(tFe,"A",{href:!0});var Pjr=s(VP);$vo=r(Pjr,"ReformerForSequenceClassification"),Pjr.forEach(t),Ivo=r(tFe," (Reformer model)"),tFe.forEach(t),jvo=i(L),S1=n(L,"LI",{});var aFe=s(S1);Uee=n(aFe,"STRONG",{});var $jr=s(Uee);Nvo=r($jr,"rembert"),$jr.forEach(t),Dvo=r(aFe," \u2014 "),WP=n(aFe,"A",{href:!0});var Ijr=s(WP);qvo=r(Ijr,"RemBertForSequenceClassification"),Ijr.forEach(t),Gvo=r(aFe," (RemBERT model)"),aFe.forEach(t),Ovo=i(L),P1=n(L,"LI",{});var nFe=s(P1);Jee=n(nFe,"STRONG",{});var jjr=s(Jee);Xvo=r(jjr,"roberta"),jjr.forEach(t),zvo=r(nFe," \u2014 "),QP=n(nFe,"A",{href:!0});var Njr=s(QP);Vvo=r(Njr,"RobertaForSequenceClassification"),Njr.forEach(t),Wvo=r(nFe," (RoBERTa model)"),nFe.forEach(t),Qvo=i(L),$1=n(L,"LI",{});var sFe=s($1);Yee=n(sFe,"STRONG",{});var Djr=s(Yee);Hvo=r(Djr,"roformer"),Djr.forEach(t),Uvo=r(sFe," \u2014 "),HP=n(sFe,"A",{href:!0});var qjr=s(HP);Jvo=r(qjr,"RoFormerForSequenceClassification"),qjr.forEach(t),Yvo=r(sFe," (RoFormer model)"),sFe.forEach(t),Kvo=i(L),I1=n(L,"LI",{});var lFe=s(I1);Kee=n(lFe,"STRONG",{});var Gjr=s(Kee);Zvo=r(Gjr,"squeezebert"),Gjr.forEach(t),e6o=r(lFe," \u2014 "),UP=n(lFe,"A",{href:!0});var Ojr=s(UP);o6o=r(Ojr,"SqueezeBertForSequenceClassification"),Ojr.forEach(t),r6o=r(lFe," (SqueezeBERT model)"),lFe.forEach(t),t6o=i(L),j1=n(L,"LI",{});var iFe=s(j1);Zee=n(iFe,"STRONG",{});var Xjr=s(Zee);a6o=r(Xjr,"tapas"),Xjr.forEach(t),n6o=r(iFe," \u2014 "),JP=n(iFe,"A",{href:!0});var zjr=s(JP);s6o=r(zjr,"TapasForSequenceClassification"),zjr.forEach(t),l6o=r(iFe," (TAPAS model)"),iFe.forEach(t),i6o=i(L),N1=n(L,"LI",{});var dFe=s(N1);eoe=n(dFe,"STRONG",{});var Vjr=s(eoe);d6o=r(Vjr,"transfo-xl"),Vjr.forEach(t),c6o=r(dFe," \u2014 "),YP=n(dFe,"A",{href:!0});var Wjr=s(YP);f6o=r(Wjr,"TransfoXLForSequenceClassification"),Wjr.forEach(t),m6o=r(dFe," (Transformer-XL model)"),dFe.forEach(t),g6o=i(L),D1=n(L,"LI",{});var cFe=s(D1);ooe=n(cFe,"STRONG",{});var Qjr=s(ooe);h6o=r(Qjr,"xlm"),Qjr.forEach(t),p6o=r(cFe," \u2014 "),KP=n(cFe,"A",{href:!0});var Hjr=s(KP);_6o=r(Hjr,"XLMForSequenceClassification"),Hjr.forEach(t),u6o=r(cFe," (XLM model)"),cFe.forEach(t),b6o=i(L),q1=n(L,"LI",{});var fFe=s(q1);roe=n(fFe,"STRONG",{});var Ujr=s(roe);v6o=r(Ujr,"xlm-roberta"),Ujr.forEach(t),T6o=r(fFe," \u2014 "),ZP=n(fFe,"A",{href:!0});var Jjr=s(ZP);F6o=r(Jjr,"XLMRobertaForSequenceClassification"),Jjr.forEach(t),C6o=r(fFe," (XLM-RoBERTa model)"),fFe.forEach(t),M6o=i(L),G1=n(L,"LI",{});var mFe=s(G1);toe=n(mFe,"STRONG",{});var Yjr=s(toe);E6o=r(Yjr,"xlm-roberta-xl"),Yjr.forEach(t),y6o=r(mFe," \u2014 "),e$=n(mFe,"A",{href:!0});var Kjr=s(e$);w6o=r(Kjr,"XLMRobertaXLForSequenceClassification"),Kjr.forEach(t),A6o=r(mFe," (XLM-RoBERTa-XL model)"),mFe.forEach(t),L6o=i(L),O1=n(L,"LI",{});var gFe=s(O1);aoe=n(gFe,"STRONG",{});var Zjr=s(aoe);B6o=r(Zjr,"xlnet"),Zjr.forEach(t),x6o=r(gFe," \u2014 "),o$=n(gFe,"A",{href:!0});var eNr=s(o$);k6o=r(eNr,"XLNetForSequenceClassification"),eNr.forEach(t),R6o=r(gFe," (XLNet model)"),gFe.forEach(t),S6o=i(L),X1=n(L,"LI",{});var hFe=s(X1);noe=n(hFe,"STRONG",{});var oNr=s(noe);P6o=r(oNr,"yoso"),oNr.forEach(t),$6o=r(hFe," \u2014 "),r$=n(hFe,"A",{href:!0});var rNr=s(r$);I6o=r(rNr,"YosoForSequenceClassification"),rNr.forEach(t),j6o=r(hFe," (YOSO model)"),hFe.forEach(t),L.forEach(t),N6o=i(Pt),z1=n(Pt,"P",{});var pFe=s(z1);D6o=r(pFe,"The model is set in evaluation mode by default using "),soe=n(pFe,"CODE",{});var tNr=s(soe);q6o=r(tNr,"model.eval()"),tNr.forEach(t),G6o=r(pFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),loe=n(pFe,"CODE",{});var aNr=s(loe);O6o=r(aNr,"model.train()"),aNr.forEach(t),pFe.forEach(t),X6o=i(Pt),ioe=n(Pt,"P",{});var nNr=s(ioe);z6o=r(nNr,"Examples:"),nNr.forEach(t),V6o=i(Pt),m(Q4.$$.fragment,Pt),Pt.forEach(t),Os.forEach(t),qAe=i(d),Ji=n(d,"H2",{class:!0});var zLe=s(Ji);V1=n(zLe,"A",{id:!0,class:!0,href:!0});var sNr=s(V1);doe=n(sNr,"SPAN",{});var lNr=s(doe);m(H4.$$.fragment,lNr),lNr.forEach(t),sNr.forEach(t),W6o=i(zLe),coe=n(zLe,"SPAN",{});var iNr=s(coe);Q6o=r(iNr,"AutoModelForMultipleChoice"),iNr.forEach(t),zLe.forEach(t),GAe=i(d),Uo=n(d,"DIV",{class:!0});var zs=s(Uo);m(U4.$$.fragment,zs),H6o=i(zs),Yi=n(zs,"P",{});var dX=s(Yi);U6o=r(dX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),foe=n(dX,"CODE",{});var dNr=s(foe);J6o=r(dNr,"from_pretrained()"),dNr.forEach(t),Y6o=r(dX,"class method or the "),moe=n(dX,"CODE",{});var cNr=s(moe);K6o=r(cNr,"from_config()"),cNr.forEach(t),Z6o=r(dX,`class
method.`),dX.forEach(t),eTo=i(zs),J4=n(zs,"P",{});var VLe=s(J4);oTo=r(VLe,"This class cannot be instantiated directly using "),goe=n(VLe,"CODE",{});var fNr=s(goe);rTo=r(fNr,"__init__()"),fNr.forEach(t),tTo=r(VLe," (throws an error)."),VLe.forEach(t),aTo=i(zs),Gr=n(zs,"DIV",{class:!0});var Vs=s(Gr);m(Y4.$$.fragment,Vs),nTo=i(Vs),hoe=n(Vs,"P",{});var mNr=s(hoe);sTo=r(mNr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mNr.forEach(t),lTo=i(Vs),Ki=n(Vs,"P",{});var cX=s(Ki);iTo=r(cX,`Note:
Loading a model from its configuration file does `),poe=n(cX,"STRONG",{});var gNr=s(poe);dTo=r(gNr,"not"),gNr.forEach(t),cTo=r(cX,` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=n(cX,"CODE",{});var hNr=s(_oe);fTo=r(hNr,"from_pretrained()"),hNr.forEach(t),mTo=r(cX,"to load the model weights."),cX.forEach(t),gTo=i(Vs),uoe=n(Vs,"P",{});var pNr=s(uoe);hTo=r(pNr,"Examples:"),pNr.forEach(t),pTo=i(Vs),m(K4.$$.fragment,Vs),Vs.forEach(t),_To=i(zs),Ie=n(zs,"DIV",{class:!0});var $t=s(Ie);m(Z4.$$.fragment,$t),uTo=i($t),boe=n($t,"P",{});var _Nr=s(boe);bTo=r(_Nr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_Nr.forEach(t),vTo=i($t),Ga=n($t,"P",{});var qF=s(Ga);TTo=r(qF,"The model class to instantiate is selected based on the "),voe=n(qF,"CODE",{});var uNr=s(voe);FTo=r(uNr,"model_type"),uNr.forEach(t),CTo=r(qF,` property of the config object (either
passed as an argument or loaded from `),Toe=n(qF,"CODE",{});var bNr=s(Toe);MTo=r(bNr,"pretrained_model_name_or_path"),bNr.forEach(t),ETo=r(qF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Foe=n(qF,"CODE",{});var vNr=s(Foe);yTo=r(vNr,"pretrained_model_name_or_path"),vNr.forEach(t),wTo=r(qF,":"),qF.forEach(t),ATo=i($t),G=n($t,"UL",{});var O=s(G);W1=n(O,"LI",{});var _Fe=s(W1);Coe=n(_Fe,"STRONG",{});var TNr=s(Coe);LTo=r(TNr,"albert"),TNr.forEach(t),BTo=r(_Fe," \u2014 "),t$=n(_Fe,"A",{href:!0});var FNr=s(t$);xTo=r(FNr,"AlbertForMultipleChoice"),FNr.forEach(t),kTo=r(_Fe," (ALBERT model)"),_Fe.forEach(t),RTo=i(O),Q1=n(O,"LI",{});var uFe=s(Q1);Moe=n(uFe,"STRONG",{});var CNr=s(Moe);STo=r(CNr,"bert"),CNr.forEach(t),PTo=r(uFe," \u2014 "),a$=n(uFe,"A",{href:!0});var MNr=s(a$);$To=r(MNr,"BertForMultipleChoice"),MNr.forEach(t),ITo=r(uFe," (BERT model)"),uFe.forEach(t),jTo=i(O),H1=n(O,"LI",{});var bFe=s(H1);Eoe=n(bFe,"STRONG",{});var ENr=s(Eoe);NTo=r(ENr,"big_bird"),ENr.forEach(t),DTo=r(bFe," \u2014 "),n$=n(bFe,"A",{href:!0});var yNr=s(n$);qTo=r(yNr,"BigBirdForMultipleChoice"),yNr.forEach(t),GTo=r(bFe," (BigBird model)"),bFe.forEach(t),OTo=i(O),U1=n(O,"LI",{});var vFe=s(U1);yoe=n(vFe,"STRONG",{});var wNr=s(yoe);XTo=r(wNr,"camembert"),wNr.forEach(t),zTo=r(vFe," \u2014 "),s$=n(vFe,"A",{href:!0});var ANr=s(s$);VTo=r(ANr,"CamembertForMultipleChoice"),ANr.forEach(t),WTo=r(vFe," (CamemBERT model)"),vFe.forEach(t),QTo=i(O),J1=n(O,"LI",{});var TFe=s(J1);woe=n(TFe,"STRONG",{});var LNr=s(woe);HTo=r(LNr,"canine"),LNr.forEach(t),UTo=r(TFe," \u2014 "),l$=n(TFe,"A",{href:!0});var BNr=s(l$);JTo=r(BNr,"CanineForMultipleChoice"),BNr.forEach(t),YTo=r(TFe," (Canine model)"),TFe.forEach(t),KTo=i(O),Y1=n(O,"LI",{});var FFe=s(Y1);Aoe=n(FFe,"STRONG",{});var xNr=s(Aoe);ZTo=r(xNr,"convbert"),xNr.forEach(t),e7o=r(FFe," \u2014 "),i$=n(FFe,"A",{href:!0});var kNr=s(i$);o7o=r(kNr,"ConvBertForMultipleChoice"),kNr.forEach(t),r7o=r(FFe," (ConvBERT model)"),FFe.forEach(t),t7o=i(O),K1=n(O,"LI",{});var CFe=s(K1);Loe=n(CFe,"STRONG",{});var RNr=s(Loe);a7o=r(RNr,"distilbert"),RNr.forEach(t),n7o=r(CFe," \u2014 "),d$=n(CFe,"A",{href:!0});var SNr=s(d$);s7o=r(SNr,"DistilBertForMultipleChoice"),SNr.forEach(t),l7o=r(CFe," (DistilBERT model)"),CFe.forEach(t),i7o=i(O),Z1=n(O,"LI",{});var MFe=s(Z1);Boe=n(MFe,"STRONG",{});var PNr=s(Boe);d7o=r(PNr,"electra"),PNr.forEach(t),c7o=r(MFe," \u2014 "),c$=n(MFe,"A",{href:!0});var $Nr=s(c$);f7o=r($Nr,"ElectraForMultipleChoice"),$Nr.forEach(t),m7o=r(MFe," (ELECTRA model)"),MFe.forEach(t),g7o=i(O),eb=n(O,"LI",{});var EFe=s(eb);xoe=n(EFe,"STRONG",{});var INr=s(xoe);h7o=r(INr,"flaubert"),INr.forEach(t),p7o=r(EFe," \u2014 "),f$=n(EFe,"A",{href:!0});var jNr=s(f$);_7o=r(jNr,"FlaubertForMultipleChoice"),jNr.forEach(t),u7o=r(EFe," (FlauBERT model)"),EFe.forEach(t),b7o=i(O),ob=n(O,"LI",{});var yFe=s(ob);koe=n(yFe,"STRONG",{});var NNr=s(koe);v7o=r(NNr,"fnet"),NNr.forEach(t),T7o=r(yFe," \u2014 "),m$=n(yFe,"A",{href:!0});var DNr=s(m$);F7o=r(DNr,"FNetForMultipleChoice"),DNr.forEach(t),C7o=r(yFe," (FNet model)"),yFe.forEach(t),M7o=i(O),rb=n(O,"LI",{});var wFe=s(rb);Roe=n(wFe,"STRONG",{});var qNr=s(Roe);E7o=r(qNr,"funnel"),qNr.forEach(t),y7o=r(wFe," \u2014 "),g$=n(wFe,"A",{href:!0});var GNr=s(g$);w7o=r(GNr,"FunnelForMultipleChoice"),GNr.forEach(t),A7o=r(wFe," (Funnel Transformer model)"),wFe.forEach(t),L7o=i(O),tb=n(O,"LI",{});var AFe=s(tb);Soe=n(AFe,"STRONG",{});var ONr=s(Soe);B7o=r(ONr,"ibert"),ONr.forEach(t),x7o=r(AFe," \u2014 "),h$=n(AFe,"A",{href:!0});var XNr=s(h$);k7o=r(XNr,"IBertForMultipleChoice"),XNr.forEach(t),R7o=r(AFe," (I-BERT model)"),AFe.forEach(t),S7o=i(O),ab=n(O,"LI",{});var LFe=s(ab);Poe=n(LFe,"STRONG",{});var zNr=s(Poe);P7o=r(zNr,"longformer"),zNr.forEach(t),$7o=r(LFe," \u2014 "),p$=n(LFe,"A",{href:!0});var VNr=s(p$);I7o=r(VNr,"LongformerForMultipleChoice"),VNr.forEach(t),j7o=r(LFe," (Longformer model)"),LFe.forEach(t),N7o=i(O),nb=n(O,"LI",{});var BFe=s(nb);$oe=n(BFe,"STRONG",{});var WNr=s($oe);D7o=r(WNr,"megatron-bert"),WNr.forEach(t),q7o=r(BFe," \u2014 "),_$=n(BFe,"A",{href:!0});var QNr=s(_$);G7o=r(QNr,"MegatronBertForMultipleChoice"),QNr.forEach(t),O7o=r(BFe," (MegatronBert model)"),BFe.forEach(t),X7o=i(O),sb=n(O,"LI",{});var xFe=s(sb);Ioe=n(xFe,"STRONG",{});var HNr=s(Ioe);z7o=r(HNr,"mobilebert"),HNr.forEach(t),V7o=r(xFe," \u2014 "),u$=n(xFe,"A",{href:!0});var UNr=s(u$);W7o=r(UNr,"MobileBertForMultipleChoice"),UNr.forEach(t),Q7o=r(xFe," (MobileBERT model)"),xFe.forEach(t),H7o=i(O),lb=n(O,"LI",{});var kFe=s(lb);joe=n(kFe,"STRONG",{});var JNr=s(joe);U7o=r(JNr,"mpnet"),JNr.forEach(t),J7o=r(kFe," \u2014 "),b$=n(kFe,"A",{href:!0});var YNr=s(b$);Y7o=r(YNr,"MPNetForMultipleChoice"),YNr.forEach(t),K7o=r(kFe," (MPNet model)"),kFe.forEach(t),Z7o=i(O),ib=n(O,"LI",{});var RFe=s(ib);Noe=n(RFe,"STRONG",{});var KNr=s(Noe);e8o=r(KNr,"nystromformer"),KNr.forEach(t),o8o=r(RFe," \u2014 "),v$=n(RFe,"A",{href:!0});var ZNr=s(v$);r8o=r(ZNr,"NystromformerForMultipleChoice"),ZNr.forEach(t),t8o=r(RFe," (Nystromformer model)"),RFe.forEach(t),a8o=i(O),db=n(O,"LI",{});var SFe=s(db);Doe=n(SFe,"STRONG",{});var eDr=s(Doe);n8o=r(eDr,"qdqbert"),eDr.forEach(t),s8o=r(SFe," \u2014 "),T$=n(SFe,"A",{href:!0});var oDr=s(T$);l8o=r(oDr,"QDQBertForMultipleChoice"),oDr.forEach(t),i8o=r(SFe," (QDQBert model)"),SFe.forEach(t),d8o=i(O),cb=n(O,"LI",{});var PFe=s(cb);qoe=n(PFe,"STRONG",{});var rDr=s(qoe);c8o=r(rDr,"rembert"),rDr.forEach(t),f8o=r(PFe," \u2014 "),F$=n(PFe,"A",{href:!0});var tDr=s(F$);m8o=r(tDr,"RemBertForMultipleChoice"),tDr.forEach(t),g8o=r(PFe," (RemBERT model)"),PFe.forEach(t),h8o=i(O),fb=n(O,"LI",{});var $Fe=s(fb);Goe=n($Fe,"STRONG",{});var aDr=s(Goe);p8o=r(aDr,"roberta"),aDr.forEach(t),_8o=r($Fe," \u2014 "),C$=n($Fe,"A",{href:!0});var nDr=s(C$);u8o=r(nDr,"RobertaForMultipleChoice"),nDr.forEach(t),b8o=r($Fe," (RoBERTa model)"),$Fe.forEach(t),v8o=i(O),mb=n(O,"LI",{});var IFe=s(mb);Ooe=n(IFe,"STRONG",{});var sDr=s(Ooe);T8o=r(sDr,"roformer"),sDr.forEach(t),F8o=r(IFe," \u2014 "),M$=n(IFe,"A",{href:!0});var lDr=s(M$);C8o=r(lDr,"RoFormerForMultipleChoice"),lDr.forEach(t),M8o=r(IFe," (RoFormer model)"),IFe.forEach(t),E8o=i(O),gb=n(O,"LI",{});var jFe=s(gb);Xoe=n(jFe,"STRONG",{});var iDr=s(Xoe);y8o=r(iDr,"squeezebert"),iDr.forEach(t),w8o=r(jFe," \u2014 "),E$=n(jFe,"A",{href:!0});var dDr=s(E$);A8o=r(dDr,"SqueezeBertForMultipleChoice"),dDr.forEach(t),L8o=r(jFe," (SqueezeBERT model)"),jFe.forEach(t),B8o=i(O),hb=n(O,"LI",{});var NFe=s(hb);zoe=n(NFe,"STRONG",{});var cDr=s(zoe);x8o=r(cDr,"xlm"),cDr.forEach(t),k8o=r(NFe," \u2014 "),y$=n(NFe,"A",{href:!0});var fDr=s(y$);R8o=r(fDr,"XLMForMultipleChoice"),fDr.forEach(t),S8o=r(NFe," (XLM model)"),NFe.forEach(t),P8o=i(O),pb=n(O,"LI",{});var DFe=s(pb);Voe=n(DFe,"STRONG",{});var mDr=s(Voe);$8o=r(mDr,"xlm-roberta"),mDr.forEach(t),I8o=r(DFe," \u2014 "),w$=n(DFe,"A",{href:!0});var gDr=s(w$);j8o=r(gDr,"XLMRobertaForMultipleChoice"),gDr.forEach(t),N8o=r(DFe," (XLM-RoBERTa model)"),DFe.forEach(t),D8o=i(O),_b=n(O,"LI",{});var qFe=s(_b);Woe=n(qFe,"STRONG",{});var hDr=s(Woe);q8o=r(hDr,"xlm-roberta-xl"),hDr.forEach(t),G8o=r(qFe," \u2014 "),A$=n(qFe,"A",{href:!0});var pDr=s(A$);O8o=r(pDr,"XLMRobertaXLForMultipleChoice"),pDr.forEach(t),X8o=r(qFe," (XLM-RoBERTa-XL model)"),qFe.forEach(t),z8o=i(O),ub=n(O,"LI",{});var GFe=s(ub);Qoe=n(GFe,"STRONG",{});var _Dr=s(Qoe);V8o=r(_Dr,"xlnet"),_Dr.forEach(t),W8o=r(GFe," \u2014 "),L$=n(GFe,"A",{href:!0});var uDr=s(L$);Q8o=r(uDr,"XLNetForMultipleChoice"),uDr.forEach(t),H8o=r(GFe," (XLNet model)"),GFe.forEach(t),U8o=i(O),bb=n(O,"LI",{});var OFe=s(bb);Hoe=n(OFe,"STRONG",{});var bDr=s(Hoe);J8o=r(bDr,"yoso"),bDr.forEach(t),Y8o=r(OFe," \u2014 "),B$=n(OFe,"A",{href:!0});var vDr=s(B$);K8o=r(vDr,"YosoForMultipleChoice"),vDr.forEach(t),Z8o=r(OFe," (YOSO model)"),OFe.forEach(t),O.forEach(t),eFo=i($t),vb=n($t,"P",{});var XFe=s(vb);oFo=r(XFe,"The model is set in evaluation mode by default using "),Uoe=n(XFe,"CODE",{});var TDr=s(Uoe);rFo=r(TDr,"model.eval()"),TDr.forEach(t),tFo=r(XFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=n(XFe,"CODE",{});var FDr=s(Joe);aFo=r(FDr,"model.train()"),FDr.forEach(t),XFe.forEach(t),nFo=i($t),Yoe=n($t,"P",{});var CDr=s(Yoe);sFo=r(CDr,"Examples:"),CDr.forEach(t),lFo=i($t),m(eM.$$.fragment,$t),$t.forEach(t),zs.forEach(t),OAe=i(d),Zi=n(d,"H2",{class:!0});var WLe=s(Zi);Tb=n(WLe,"A",{id:!0,class:!0,href:!0});var MDr=s(Tb);Koe=n(MDr,"SPAN",{});var EDr=s(Koe);m(oM.$$.fragment,EDr),EDr.forEach(t),MDr.forEach(t),iFo=i(WLe),Zoe=n(WLe,"SPAN",{});var yDr=s(Zoe);dFo=r(yDr,"AutoModelForNextSentencePrediction"),yDr.forEach(t),WLe.forEach(t),XAe=i(d),Jo=n(d,"DIV",{class:!0});var Ws=s(Jo);m(rM.$$.fragment,Ws),cFo=i(Ws),ed=n(Ws,"P",{});var fX=s(ed);fFo=r(fX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ere=n(fX,"CODE",{});var wDr=s(ere);mFo=r(wDr,"from_pretrained()"),wDr.forEach(t),gFo=r(fX,"class method or the "),ore=n(fX,"CODE",{});var ADr=s(ore);hFo=r(ADr,"from_config()"),ADr.forEach(t),pFo=r(fX,`class
method.`),fX.forEach(t),_Fo=i(Ws),tM=n(Ws,"P",{});var QLe=s(tM);uFo=r(QLe,"This class cannot be instantiated directly using "),rre=n(QLe,"CODE",{});var LDr=s(rre);bFo=r(LDr,"__init__()"),LDr.forEach(t),vFo=r(QLe," (throws an error)."),QLe.forEach(t),TFo=i(Ws),Or=n(Ws,"DIV",{class:!0});var Qs=s(Or);m(aM.$$.fragment,Qs),FFo=i(Qs),tre=n(Qs,"P",{});var BDr=s(tre);CFo=r(BDr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BDr.forEach(t),MFo=i(Qs),od=n(Qs,"P",{});var mX=s(od);EFo=r(mX,`Note:
Loading a model from its configuration file does `),are=n(mX,"STRONG",{});var xDr=s(are);yFo=r(xDr,"not"),xDr.forEach(t),wFo=r(mX,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(mX,"CODE",{});var kDr=s(nre);AFo=r(kDr,"from_pretrained()"),kDr.forEach(t),LFo=r(mX,"to load the model weights."),mX.forEach(t),BFo=i(Qs),sre=n(Qs,"P",{});var RDr=s(sre);xFo=r(RDr,"Examples:"),RDr.forEach(t),kFo=i(Qs),m(nM.$$.fragment,Qs),Qs.forEach(t),RFo=i(Ws),je=n(Ws,"DIV",{class:!0});var It=s(je);m(sM.$$.fragment,It),SFo=i(It),lre=n(It,"P",{});var SDr=s(lre);PFo=r(SDr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SDr.forEach(t),$Fo=i(It),Oa=n(It,"P",{});var GF=s(Oa);IFo=r(GF,"The model class to instantiate is selected based on the "),ire=n(GF,"CODE",{});var PDr=s(ire);jFo=r(PDr,"model_type"),PDr.forEach(t),NFo=r(GF,` property of the config object (either
passed as an argument or loaded from `),dre=n(GF,"CODE",{});var $Dr=s(dre);DFo=r($Dr,"pretrained_model_name_or_path"),$Dr.forEach(t),qFo=r(GF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=n(GF,"CODE",{});var IDr=s(cre);GFo=r(IDr,"pretrained_model_name_or_path"),IDr.forEach(t),OFo=r(GF,":"),GF.forEach(t),XFo=i(It),oa=n(It,"UL",{});var Hs=s(oa);Fb=n(Hs,"LI",{});var zFe=s(Fb);fre=n(zFe,"STRONG",{});var jDr=s(fre);zFo=r(jDr,"bert"),jDr.forEach(t),VFo=r(zFe," \u2014 "),x$=n(zFe,"A",{href:!0});var NDr=s(x$);WFo=r(NDr,"BertForNextSentencePrediction"),NDr.forEach(t),QFo=r(zFe," (BERT model)"),zFe.forEach(t),HFo=i(Hs),Cb=n(Hs,"LI",{});var VFe=s(Cb);mre=n(VFe,"STRONG",{});var DDr=s(mre);UFo=r(DDr,"fnet"),DDr.forEach(t),JFo=r(VFe," \u2014 "),k$=n(VFe,"A",{href:!0});var qDr=s(k$);YFo=r(qDr,"FNetForNextSentencePrediction"),qDr.forEach(t),KFo=r(VFe," (FNet model)"),VFe.forEach(t),ZFo=i(Hs),Mb=n(Hs,"LI",{});var WFe=s(Mb);gre=n(WFe,"STRONG",{});var GDr=s(gre);eCo=r(GDr,"megatron-bert"),GDr.forEach(t),oCo=r(WFe," \u2014 "),R$=n(WFe,"A",{href:!0});var ODr=s(R$);rCo=r(ODr,"MegatronBertForNextSentencePrediction"),ODr.forEach(t),tCo=r(WFe," (MegatronBert model)"),WFe.forEach(t),aCo=i(Hs),Eb=n(Hs,"LI",{});var QFe=s(Eb);hre=n(QFe,"STRONG",{});var XDr=s(hre);nCo=r(XDr,"mobilebert"),XDr.forEach(t),sCo=r(QFe," \u2014 "),S$=n(QFe,"A",{href:!0});var zDr=s(S$);lCo=r(zDr,"MobileBertForNextSentencePrediction"),zDr.forEach(t),iCo=r(QFe," (MobileBERT model)"),QFe.forEach(t),dCo=i(Hs),yb=n(Hs,"LI",{});var HFe=s(yb);pre=n(HFe,"STRONG",{});var VDr=s(pre);cCo=r(VDr,"qdqbert"),VDr.forEach(t),fCo=r(HFe," \u2014 "),P$=n(HFe,"A",{href:!0});var WDr=s(P$);mCo=r(WDr,"QDQBertForNextSentencePrediction"),WDr.forEach(t),gCo=r(HFe," (QDQBert model)"),HFe.forEach(t),Hs.forEach(t),hCo=i(It),wb=n(It,"P",{});var UFe=s(wb);pCo=r(UFe,"The model is set in evaluation mode by default using "),_re=n(UFe,"CODE",{});var QDr=s(_re);_Co=r(QDr,"model.eval()"),QDr.forEach(t),uCo=r(UFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ure=n(UFe,"CODE",{});var HDr=s(ure);bCo=r(HDr,"model.train()"),HDr.forEach(t),UFe.forEach(t),vCo=i(It),bre=n(It,"P",{});var UDr=s(bre);TCo=r(UDr,"Examples:"),UDr.forEach(t),FCo=i(It),m(lM.$$.fragment,It),It.forEach(t),Ws.forEach(t),zAe=i(d),rd=n(d,"H2",{class:!0});var HLe=s(rd);Ab=n(HLe,"A",{id:!0,class:!0,href:!0});var JDr=s(Ab);vre=n(JDr,"SPAN",{});var YDr=s(vre);m(iM.$$.fragment,YDr),YDr.forEach(t),JDr.forEach(t),CCo=i(HLe),Tre=n(HLe,"SPAN",{});var KDr=s(Tre);MCo=r(KDr,"AutoModelForTokenClassification"),KDr.forEach(t),HLe.forEach(t),VAe=i(d),Yo=n(d,"DIV",{class:!0});var Us=s(Yo);m(dM.$$.fragment,Us),ECo=i(Us),td=n(Us,"P",{});var gX=s(td);yCo=r(gX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fre=n(gX,"CODE",{});var ZDr=s(Fre);wCo=r(ZDr,"from_pretrained()"),ZDr.forEach(t),ACo=r(gX,"class method or the "),Cre=n(gX,"CODE",{});var eqr=s(Cre);LCo=r(eqr,"from_config()"),eqr.forEach(t),BCo=r(gX,`class
method.`),gX.forEach(t),xCo=i(Us),cM=n(Us,"P",{});var ULe=s(cM);kCo=r(ULe,"This class cannot be instantiated directly using "),Mre=n(ULe,"CODE",{});var oqr=s(Mre);RCo=r(oqr,"__init__()"),oqr.forEach(t),SCo=r(ULe," (throws an error)."),ULe.forEach(t),PCo=i(Us),Xr=n(Us,"DIV",{class:!0});var Js=s(Xr);m(fM.$$.fragment,Js),$Co=i(Js),Ere=n(Js,"P",{});var rqr=s(Ere);ICo=r(rqr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rqr.forEach(t),jCo=i(Js),ad=n(Js,"P",{});var hX=s(ad);NCo=r(hX,`Note:
Loading a model from its configuration file does `),yre=n(hX,"STRONG",{});var tqr=s(yre);DCo=r(tqr,"not"),tqr.forEach(t),qCo=r(hX,` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=n(hX,"CODE",{});var aqr=s(wre);GCo=r(aqr,"from_pretrained()"),aqr.forEach(t),OCo=r(hX,"to load the model weights."),hX.forEach(t),XCo=i(Js),Are=n(Js,"P",{});var nqr=s(Are);zCo=r(nqr,"Examples:"),nqr.forEach(t),VCo=i(Js),m(mM.$$.fragment,Js),Js.forEach(t),WCo=i(Us),Ne=n(Us,"DIV",{class:!0});var jt=s(Ne);m(gM.$$.fragment,jt),QCo=i(jt),Lre=n(jt,"P",{});var sqr=s(Lre);HCo=r(sqr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sqr.forEach(t),UCo=i(jt),Xa=n(jt,"P",{});var OF=s(Xa);JCo=r(OF,"The model class to instantiate is selected based on the "),Bre=n(OF,"CODE",{});var lqr=s(Bre);YCo=r(lqr,"model_type"),lqr.forEach(t),KCo=r(OF,` property of the config object (either
passed as an argument or loaded from `),xre=n(OF,"CODE",{});var iqr=s(xre);ZCo=r(iqr,"pretrained_model_name_or_path"),iqr.forEach(t),e4o=r(OF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kre=n(OF,"CODE",{});var dqr=s(kre);o4o=r(dqr,"pretrained_model_name_or_path"),dqr.forEach(t),r4o=r(OF,":"),OF.forEach(t),t4o=i(jt),N=n(jt,"UL",{});var q=s(N);Lb=n(q,"LI",{});var JFe=s(Lb);Rre=n(JFe,"STRONG",{});var cqr=s(Rre);a4o=r(cqr,"albert"),cqr.forEach(t),n4o=r(JFe," \u2014 "),$$=n(JFe,"A",{href:!0});var fqr=s($$);s4o=r(fqr,"AlbertForTokenClassification"),fqr.forEach(t),l4o=r(JFe," (ALBERT model)"),JFe.forEach(t),i4o=i(q),Bb=n(q,"LI",{});var YFe=s(Bb);Sre=n(YFe,"STRONG",{});var mqr=s(Sre);d4o=r(mqr,"bert"),mqr.forEach(t),c4o=r(YFe," \u2014 "),I$=n(YFe,"A",{href:!0});var gqr=s(I$);f4o=r(gqr,"BertForTokenClassification"),gqr.forEach(t),m4o=r(YFe," (BERT model)"),YFe.forEach(t),g4o=i(q),xb=n(q,"LI",{});var KFe=s(xb);Pre=n(KFe,"STRONG",{});var hqr=s(Pre);h4o=r(hqr,"big_bird"),hqr.forEach(t),p4o=r(KFe," \u2014 "),j$=n(KFe,"A",{href:!0});var pqr=s(j$);_4o=r(pqr,"BigBirdForTokenClassification"),pqr.forEach(t),u4o=r(KFe," (BigBird model)"),KFe.forEach(t),b4o=i(q),kb=n(q,"LI",{});var ZFe=s(kb);$re=n(ZFe,"STRONG",{});var _qr=s($re);v4o=r(_qr,"camembert"),_qr.forEach(t),T4o=r(ZFe," \u2014 "),N$=n(ZFe,"A",{href:!0});var uqr=s(N$);F4o=r(uqr,"CamembertForTokenClassification"),uqr.forEach(t),C4o=r(ZFe," (CamemBERT model)"),ZFe.forEach(t),M4o=i(q),Rb=n(q,"LI",{});var eCe=s(Rb);Ire=n(eCe,"STRONG",{});var bqr=s(Ire);E4o=r(bqr,"canine"),bqr.forEach(t),y4o=r(eCe," \u2014 "),D$=n(eCe,"A",{href:!0});var vqr=s(D$);w4o=r(vqr,"CanineForTokenClassification"),vqr.forEach(t),A4o=r(eCe," (Canine model)"),eCe.forEach(t),L4o=i(q),Sb=n(q,"LI",{});var oCe=s(Sb);jre=n(oCe,"STRONG",{});var Tqr=s(jre);B4o=r(Tqr,"convbert"),Tqr.forEach(t),x4o=r(oCe," \u2014 "),q$=n(oCe,"A",{href:!0});var Fqr=s(q$);k4o=r(Fqr,"ConvBertForTokenClassification"),Fqr.forEach(t),R4o=r(oCe," (ConvBERT model)"),oCe.forEach(t),S4o=i(q),Pb=n(q,"LI",{});var rCe=s(Pb);Nre=n(rCe,"STRONG",{});var Cqr=s(Nre);P4o=r(Cqr,"deberta"),Cqr.forEach(t),$4o=r(rCe," \u2014 "),G$=n(rCe,"A",{href:!0});var Mqr=s(G$);I4o=r(Mqr,"DebertaForTokenClassification"),Mqr.forEach(t),j4o=r(rCe," (DeBERTa model)"),rCe.forEach(t),N4o=i(q),$b=n(q,"LI",{});var tCe=s($b);Dre=n(tCe,"STRONG",{});var Eqr=s(Dre);D4o=r(Eqr,"deberta-v2"),Eqr.forEach(t),q4o=r(tCe," \u2014 "),O$=n(tCe,"A",{href:!0});var yqr=s(O$);G4o=r(yqr,"DebertaV2ForTokenClassification"),yqr.forEach(t),O4o=r(tCe," (DeBERTa-v2 model)"),tCe.forEach(t),X4o=i(q),Ib=n(q,"LI",{});var aCe=s(Ib);qre=n(aCe,"STRONG",{});var wqr=s(qre);z4o=r(wqr,"distilbert"),wqr.forEach(t),V4o=r(aCe," \u2014 "),X$=n(aCe,"A",{href:!0});var Aqr=s(X$);W4o=r(Aqr,"DistilBertForTokenClassification"),Aqr.forEach(t),Q4o=r(aCe," (DistilBERT model)"),aCe.forEach(t),H4o=i(q),jb=n(q,"LI",{});var nCe=s(jb);Gre=n(nCe,"STRONG",{});var Lqr=s(Gre);U4o=r(Lqr,"electra"),Lqr.forEach(t),J4o=r(nCe," \u2014 "),z$=n(nCe,"A",{href:!0});var Bqr=s(z$);Y4o=r(Bqr,"ElectraForTokenClassification"),Bqr.forEach(t),K4o=r(nCe," (ELECTRA model)"),nCe.forEach(t),Z4o=i(q),Nb=n(q,"LI",{});var sCe=s(Nb);Ore=n(sCe,"STRONG",{});var xqr=s(Ore);eMo=r(xqr,"flaubert"),xqr.forEach(t),oMo=r(sCe," \u2014 "),V$=n(sCe,"A",{href:!0});var kqr=s(V$);rMo=r(kqr,"FlaubertForTokenClassification"),kqr.forEach(t),tMo=r(sCe," (FlauBERT model)"),sCe.forEach(t),aMo=i(q),Db=n(q,"LI",{});var lCe=s(Db);Xre=n(lCe,"STRONG",{});var Rqr=s(Xre);nMo=r(Rqr,"fnet"),Rqr.forEach(t),sMo=r(lCe," \u2014 "),W$=n(lCe,"A",{href:!0});var Sqr=s(W$);lMo=r(Sqr,"FNetForTokenClassification"),Sqr.forEach(t),iMo=r(lCe," (FNet model)"),lCe.forEach(t),dMo=i(q),qb=n(q,"LI",{});var iCe=s(qb);zre=n(iCe,"STRONG",{});var Pqr=s(zre);cMo=r(Pqr,"funnel"),Pqr.forEach(t),fMo=r(iCe," \u2014 "),Q$=n(iCe,"A",{href:!0});var $qr=s(Q$);mMo=r($qr,"FunnelForTokenClassification"),$qr.forEach(t),gMo=r(iCe," (Funnel Transformer model)"),iCe.forEach(t),hMo=i(q),Gb=n(q,"LI",{});var dCe=s(Gb);Vre=n(dCe,"STRONG",{});var Iqr=s(Vre);pMo=r(Iqr,"gpt2"),Iqr.forEach(t),_Mo=r(dCe," \u2014 "),H$=n(dCe,"A",{href:!0});var jqr=s(H$);uMo=r(jqr,"GPT2ForTokenClassification"),jqr.forEach(t),bMo=r(dCe," (OpenAI GPT-2 model)"),dCe.forEach(t),vMo=i(q),Ob=n(q,"LI",{});var cCe=s(Ob);Wre=n(cCe,"STRONG",{});var Nqr=s(Wre);TMo=r(Nqr,"ibert"),Nqr.forEach(t),FMo=r(cCe," \u2014 "),U$=n(cCe,"A",{href:!0});var Dqr=s(U$);CMo=r(Dqr,"IBertForTokenClassification"),Dqr.forEach(t),MMo=r(cCe," (I-BERT model)"),cCe.forEach(t),EMo=i(q),Xb=n(q,"LI",{});var fCe=s(Xb);Qre=n(fCe,"STRONG",{});var qqr=s(Qre);yMo=r(qqr,"layoutlm"),qqr.forEach(t),wMo=r(fCe," \u2014 "),J$=n(fCe,"A",{href:!0});var Gqr=s(J$);AMo=r(Gqr,"LayoutLMForTokenClassification"),Gqr.forEach(t),LMo=r(fCe," (LayoutLM model)"),fCe.forEach(t),BMo=i(q),zb=n(q,"LI",{});var mCe=s(zb);Hre=n(mCe,"STRONG",{});var Oqr=s(Hre);xMo=r(Oqr,"layoutlmv2"),Oqr.forEach(t),kMo=r(mCe," \u2014 "),Y$=n(mCe,"A",{href:!0});var Xqr=s(Y$);RMo=r(Xqr,"LayoutLMv2ForTokenClassification"),Xqr.forEach(t),SMo=r(mCe," (LayoutLMv2 model)"),mCe.forEach(t),PMo=i(q),Vb=n(q,"LI",{});var gCe=s(Vb);Ure=n(gCe,"STRONG",{});var zqr=s(Ure);$Mo=r(zqr,"longformer"),zqr.forEach(t),IMo=r(gCe," \u2014 "),K$=n(gCe,"A",{href:!0});var Vqr=s(K$);jMo=r(Vqr,"LongformerForTokenClassification"),Vqr.forEach(t),NMo=r(gCe," (Longformer model)"),gCe.forEach(t),DMo=i(q),Wb=n(q,"LI",{});var hCe=s(Wb);Jre=n(hCe,"STRONG",{});var Wqr=s(Jre);qMo=r(Wqr,"megatron-bert"),Wqr.forEach(t),GMo=r(hCe," \u2014 "),Z$=n(hCe,"A",{href:!0});var Qqr=s(Z$);OMo=r(Qqr,"MegatronBertForTokenClassification"),Qqr.forEach(t),XMo=r(hCe," (MegatronBert model)"),hCe.forEach(t),zMo=i(q),Qb=n(q,"LI",{});var pCe=s(Qb);Yre=n(pCe,"STRONG",{});var Hqr=s(Yre);VMo=r(Hqr,"mobilebert"),Hqr.forEach(t),WMo=r(pCe," \u2014 "),eI=n(pCe,"A",{href:!0});var Uqr=s(eI);QMo=r(Uqr,"MobileBertForTokenClassification"),Uqr.forEach(t),HMo=r(pCe," (MobileBERT model)"),pCe.forEach(t),UMo=i(q),Hb=n(q,"LI",{});var _Ce=s(Hb);Kre=n(_Ce,"STRONG",{});var Jqr=s(Kre);JMo=r(Jqr,"mpnet"),Jqr.forEach(t),YMo=r(_Ce," \u2014 "),oI=n(_Ce,"A",{href:!0});var Yqr=s(oI);KMo=r(Yqr,"MPNetForTokenClassification"),Yqr.forEach(t),ZMo=r(_Ce," (MPNet model)"),_Ce.forEach(t),eEo=i(q),Ub=n(q,"LI",{});var uCe=s(Ub);Zre=n(uCe,"STRONG",{});var Kqr=s(Zre);oEo=r(Kqr,"nystromformer"),Kqr.forEach(t),rEo=r(uCe," \u2014 "),rI=n(uCe,"A",{href:!0});var Zqr=s(rI);tEo=r(Zqr,"NystromformerForTokenClassification"),Zqr.forEach(t),aEo=r(uCe," (Nystromformer model)"),uCe.forEach(t),nEo=i(q),Jb=n(q,"LI",{});var bCe=s(Jb);ete=n(bCe,"STRONG",{});var eGr=s(ete);sEo=r(eGr,"qdqbert"),eGr.forEach(t),lEo=r(bCe," \u2014 "),tI=n(bCe,"A",{href:!0});var oGr=s(tI);iEo=r(oGr,"QDQBertForTokenClassification"),oGr.forEach(t),dEo=r(bCe," (QDQBert model)"),bCe.forEach(t),cEo=i(q),Yb=n(q,"LI",{});var vCe=s(Yb);ote=n(vCe,"STRONG",{});var rGr=s(ote);fEo=r(rGr,"rembert"),rGr.forEach(t),mEo=r(vCe," \u2014 "),aI=n(vCe,"A",{href:!0});var tGr=s(aI);gEo=r(tGr,"RemBertForTokenClassification"),tGr.forEach(t),hEo=r(vCe," (RemBERT model)"),vCe.forEach(t),pEo=i(q),Kb=n(q,"LI",{});var TCe=s(Kb);rte=n(TCe,"STRONG",{});var aGr=s(rte);_Eo=r(aGr,"roberta"),aGr.forEach(t),uEo=r(TCe," \u2014 "),nI=n(TCe,"A",{href:!0});var nGr=s(nI);bEo=r(nGr,"RobertaForTokenClassification"),nGr.forEach(t),vEo=r(TCe," (RoBERTa model)"),TCe.forEach(t),TEo=i(q),Zb=n(q,"LI",{});var FCe=s(Zb);tte=n(FCe,"STRONG",{});var sGr=s(tte);FEo=r(sGr,"roformer"),sGr.forEach(t),CEo=r(FCe," \u2014 "),sI=n(FCe,"A",{href:!0});var lGr=s(sI);MEo=r(lGr,"RoFormerForTokenClassification"),lGr.forEach(t),EEo=r(FCe," (RoFormer model)"),FCe.forEach(t),yEo=i(q),e5=n(q,"LI",{});var CCe=s(e5);ate=n(CCe,"STRONG",{});var iGr=s(ate);wEo=r(iGr,"squeezebert"),iGr.forEach(t),AEo=r(CCe," \u2014 "),lI=n(CCe,"A",{href:!0});var dGr=s(lI);LEo=r(dGr,"SqueezeBertForTokenClassification"),dGr.forEach(t),BEo=r(CCe," (SqueezeBERT model)"),CCe.forEach(t),xEo=i(q),o5=n(q,"LI",{});var MCe=s(o5);nte=n(MCe,"STRONG",{});var cGr=s(nte);kEo=r(cGr,"xlm"),cGr.forEach(t),REo=r(MCe," \u2014 "),iI=n(MCe,"A",{href:!0});var fGr=s(iI);SEo=r(fGr,"XLMForTokenClassification"),fGr.forEach(t),PEo=r(MCe," (XLM model)"),MCe.forEach(t),$Eo=i(q),r5=n(q,"LI",{});var ECe=s(r5);ste=n(ECe,"STRONG",{});var mGr=s(ste);IEo=r(mGr,"xlm-roberta"),mGr.forEach(t),jEo=r(ECe," \u2014 "),dI=n(ECe,"A",{href:!0});var gGr=s(dI);NEo=r(gGr,"XLMRobertaForTokenClassification"),gGr.forEach(t),DEo=r(ECe," (XLM-RoBERTa model)"),ECe.forEach(t),qEo=i(q),t5=n(q,"LI",{});var yCe=s(t5);lte=n(yCe,"STRONG",{});var hGr=s(lte);GEo=r(hGr,"xlm-roberta-xl"),hGr.forEach(t),OEo=r(yCe," \u2014 "),cI=n(yCe,"A",{href:!0});var pGr=s(cI);XEo=r(pGr,"XLMRobertaXLForTokenClassification"),pGr.forEach(t),zEo=r(yCe," (XLM-RoBERTa-XL model)"),yCe.forEach(t),VEo=i(q),a5=n(q,"LI",{});var wCe=s(a5);ite=n(wCe,"STRONG",{});var _Gr=s(ite);WEo=r(_Gr,"xlnet"),_Gr.forEach(t),QEo=r(wCe," \u2014 "),fI=n(wCe,"A",{href:!0});var uGr=s(fI);HEo=r(uGr,"XLNetForTokenClassification"),uGr.forEach(t),UEo=r(wCe," (XLNet model)"),wCe.forEach(t),JEo=i(q),n5=n(q,"LI",{});var ACe=s(n5);dte=n(ACe,"STRONG",{});var bGr=s(dte);YEo=r(bGr,"yoso"),bGr.forEach(t),KEo=r(ACe," \u2014 "),mI=n(ACe,"A",{href:!0});var vGr=s(mI);ZEo=r(vGr,"YosoForTokenClassification"),vGr.forEach(t),e3o=r(ACe," (YOSO model)"),ACe.forEach(t),q.forEach(t),o3o=i(jt),s5=n(jt,"P",{});var LCe=s(s5);r3o=r(LCe,"The model is set in evaluation mode by default using "),cte=n(LCe,"CODE",{});var TGr=s(cte);t3o=r(TGr,"model.eval()"),TGr.forEach(t),a3o=r(LCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=n(LCe,"CODE",{});var FGr=s(fte);n3o=r(FGr,"model.train()"),FGr.forEach(t),LCe.forEach(t),s3o=i(jt),mte=n(jt,"P",{});var CGr=s(mte);l3o=r(CGr,"Examples:"),CGr.forEach(t),i3o=i(jt),m(hM.$$.fragment,jt),jt.forEach(t),Us.forEach(t),WAe=i(d),nd=n(d,"H2",{class:!0});var JLe=s(nd);l5=n(JLe,"A",{id:!0,class:!0,href:!0});var MGr=s(l5);gte=n(MGr,"SPAN",{});var EGr=s(gte);m(pM.$$.fragment,EGr),EGr.forEach(t),MGr.forEach(t),d3o=i(JLe),hte=n(JLe,"SPAN",{});var yGr=s(hte);c3o=r(yGr,"AutoModelForQuestionAnswering"),yGr.forEach(t),JLe.forEach(t),QAe=i(d),Ko=n(d,"DIV",{class:!0});var Ys=s(Ko);m(_M.$$.fragment,Ys),f3o=i(Ys),sd=n(Ys,"P",{});var pX=s(sd);m3o=r(pX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pte=n(pX,"CODE",{});var wGr=s(pte);g3o=r(wGr,"from_pretrained()"),wGr.forEach(t),h3o=r(pX,"class method or the "),_te=n(pX,"CODE",{});var AGr=s(_te);p3o=r(AGr,"from_config()"),AGr.forEach(t),_3o=r(pX,`class
method.`),pX.forEach(t),u3o=i(Ys),uM=n(Ys,"P",{});var YLe=s(uM);b3o=r(YLe,"This class cannot be instantiated directly using "),ute=n(YLe,"CODE",{});var LGr=s(ute);v3o=r(LGr,"__init__()"),LGr.forEach(t),T3o=r(YLe," (throws an error)."),YLe.forEach(t),F3o=i(Ys),zr=n(Ys,"DIV",{class:!0});var Ks=s(zr);m(bM.$$.fragment,Ks),C3o=i(Ks),bte=n(Ks,"P",{});var BGr=s(bte);M3o=r(BGr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),BGr.forEach(t),E3o=i(Ks),ld=n(Ks,"P",{});var _X=s(ld);y3o=r(_X,`Note:
Loading a model from its configuration file does `),vte=n(_X,"STRONG",{});var xGr=s(vte);w3o=r(xGr,"not"),xGr.forEach(t),A3o=r(_X,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=n(_X,"CODE",{});var kGr=s(Tte);L3o=r(kGr,"from_pretrained()"),kGr.forEach(t),B3o=r(_X,"to load the model weights."),_X.forEach(t),x3o=i(Ks),Fte=n(Ks,"P",{});var RGr=s(Fte);k3o=r(RGr,"Examples:"),RGr.forEach(t),R3o=i(Ks),m(vM.$$.fragment,Ks),Ks.forEach(t),S3o=i(Ys),De=n(Ys,"DIV",{class:!0});var Nt=s(De);m(TM.$$.fragment,Nt),P3o=i(Nt),Cte=n(Nt,"P",{});var SGr=s(Cte);$3o=r(SGr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SGr.forEach(t),I3o=i(Nt),za=n(Nt,"P",{});var XF=s(za);j3o=r(XF,"The model class to instantiate is selected based on the "),Mte=n(XF,"CODE",{});var PGr=s(Mte);N3o=r(PGr,"model_type"),PGr.forEach(t),D3o=r(XF,` property of the config object (either
passed as an argument or loaded from `),Ete=n(XF,"CODE",{});var $Gr=s(Ete);q3o=r($Gr,"pretrained_model_name_or_path"),$Gr.forEach(t),G3o=r(XF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yte=n(XF,"CODE",{});var IGr=s(yte);O3o=r(IGr,"pretrained_model_name_or_path"),IGr.forEach(t),X3o=r(XF,":"),XF.forEach(t),z3o=i(Nt),R=n(Nt,"UL",{});var P=s(R);i5=n(P,"LI",{});var BCe=s(i5);wte=n(BCe,"STRONG",{});var jGr=s(wte);V3o=r(jGr,"albert"),jGr.forEach(t),W3o=r(BCe," \u2014 "),gI=n(BCe,"A",{href:!0});var NGr=s(gI);Q3o=r(NGr,"AlbertForQuestionAnswering"),NGr.forEach(t),H3o=r(BCe," (ALBERT model)"),BCe.forEach(t),U3o=i(P),d5=n(P,"LI",{});var xCe=s(d5);Ate=n(xCe,"STRONG",{});var DGr=s(Ate);J3o=r(DGr,"bart"),DGr.forEach(t),Y3o=r(xCe," \u2014 "),hI=n(xCe,"A",{href:!0});var qGr=s(hI);K3o=r(qGr,"BartForQuestionAnswering"),qGr.forEach(t),Z3o=r(xCe," (BART model)"),xCe.forEach(t),eyo=i(P),c5=n(P,"LI",{});var kCe=s(c5);Lte=n(kCe,"STRONG",{});var GGr=s(Lte);oyo=r(GGr,"bert"),GGr.forEach(t),ryo=r(kCe," \u2014 "),pI=n(kCe,"A",{href:!0});var OGr=s(pI);tyo=r(OGr,"BertForQuestionAnswering"),OGr.forEach(t),ayo=r(kCe," (BERT model)"),kCe.forEach(t),nyo=i(P),f5=n(P,"LI",{});var RCe=s(f5);Bte=n(RCe,"STRONG",{});var XGr=s(Bte);syo=r(XGr,"big_bird"),XGr.forEach(t),lyo=r(RCe," \u2014 "),_I=n(RCe,"A",{href:!0});var zGr=s(_I);iyo=r(zGr,"BigBirdForQuestionAnswering"),zGr.forEach(t),dyo=r(RCe," (BigBird model)"),RCe.forEach(t),cyo=i(P),m5=n(P,"LI",{});var SCe=s(m5);xte=n(SCe,"STRONG",{});var VGr=s(xte);fyo=r(VGr,"bigbird_pegasus"),VGr.forEach(t),myo=r(SCe," \u2014 "),uI=n(SCe,"A",{href:!0});var WGr=s(uI);gyo=r(WGr,"BigBirdPegasusForQuestionAnswering"),WGr.forEach(t),hyo=r(SCe," (BigBirdPegasus model)"),SCe.forEach(t),pyo=i(P),g5=n(P,"LI",{});var PCe=s(g5);kte=n(PCe,"STRONG",{});var QGr=s(kte);_yo=r(QGr,"camembert"),QGr.forEach(t),uyo=r(PCe," \u2014 "),bI=n(PCe,"A",{href:!0});var HGr=s(bI);byo=r(HGr,"CamembertForQuestionAnswering"),HGr.forEach(t),vyo=r(PCe," (CamemBERT model)"),PCe.forEach(t),Tyo=i(P),h5=n(P,"LI",{});var $Ce=s(h5);Rte=n($Ce,"STRONG",{});var UGr=s(Rte);Fyo=r(UGr,"canine"),UGr.forEach(t),Cyo=r($Ce," \u2014 "),vI=n($Ce,"A",{href:!0});var JGr=s(vI);Myo=r(JGr,"CanineForQuestionAnswering"),JGr.forEach(t),Eyo=r($Ce," (Canine model)"),$Ce.forEach(t),yyo=i(P),p5=n(P,"LI",{});var ICe=s(p5);Ste=n(ICe,"STRONG",{});var YGr=s(Ste);wyo=r(YGr,"convbert"),YGr.forEach(t),Ayo=r(ICe," \u2014 "),TI=n(ICe,"A",{href:!0});var KGr=s(TI);Lyo=r(KGr,"ConvBertForQuestionAnswering"),KGr.forEach(t),Byo=r(ICe," (ConvBERT model)"),ICe.forEach(t),xyo=i(P),_5=n(P,"LI",{});var jCe=s(_5);Pte=n(jCe,"STRONG",{});var ZGr=s(Pte);kyo=r(ZGr,"deberta"),ZGr.forEach(t),Ryo=r(jCe," \u2014 "),FI=n(jCe,"A",{href:!0});var eOr=s(FI);Syo=r(eOr,"DebertaForQuestionAnswering"),eOr.forEach(t),Pyo=r(jCe," (DeBERTa model)"),jCe.forEach(t),$yo=i(P),u5=n(P,"LI",{});var NCe=s(u5);$te=n(NCe,"STRONG",{});var oOr=s($te);Iyo=r(oOr,"deberta-v2"),oOr.forEach(t),jyo=r(NCe," \u2014 "),CI=n(NCe,"A",{href:!0});var rOr=s(CI);Nyo=r(rOr,"DebertaV2ForQuestionAnswering"),rOr.forEach(t),Dyo=r(NCe," (DeBERTa-v2 model)"),NCe.forEach(t),qyo=i(P),b5=n(P,"LI",{});var DCe=s(b5);Ite=n(DCe,"STRONG",{});var tOr=s(Ite);Gyo=r(tOr,"distilbert"),tOr.forEach(t),Oyo=r(DCe," \u2014 "),MI=n(DCe,"A",{href:!0});var aOr=s(MI);Xyo=r(aOr,"DistilBertForQuestionAnswering"),aOr.forEach(t),zyo=r(DCe," (DistilBERT model)"),DCe.forEach(t),Vyo=i(P),v5=n(P,"LI",{});var qCe=s(v5);jte=n(qCe,"STRONG",{});var nOr=s(jte);Wyo=r(nOr,"electra"),nOr.forEach(t),Qyo=r(qCe," \u2014 "),EI=n(qCe,"A",{href:!0});var sOr=s(EI);Hyo=r(sOr,"ElectraForQuestionAnswering"),sOr.forEach(t),Uyo=r(qCe," (ELECTRA model)"),qCe.forEach(t),Jyo=i(P),T5=n(P,"LI",{});var GCe=s(T5);Nte=n(GCe,"STRONG",{});var lOr=s(Nte);Yyo=r(lOr,"flaubert"),lOr.forEach(t),Kyo=r(GCe," \u2014 "),yI=n(GCe,"A",{href:!0});var iOr=s(yI);Zyo=r(iOr,"FlaubertForQuestionAnsweringSimple"),iOr.forEach(t),ewo=r(GCe," (FlauBERT model)"),GCe.forEach(t),owo=i(P),F5=n(P,"LI",{});var OCe=s(F5);Dte=n(OCe,"STRONG",{});var dOr=s(Dte);rwo=r(dOr,"fnet"),dOr.forEach(t),two=r(OCe," \u2014 "),wI=n(OCe,"A",{href:!0});var cOr=s(wI);awo=r(cOr,"FNetForQuestionAnswering"),cOr.forEach(t),nwo=r(OCe," (FNet model)"),OCe.forEach(t),swo=i(P),C5=n(P,"LI",{});var XCe=s(C5);qte=n(XCe,"STRONG",{});var fOr=s(qte);lwo=r(fOr,"funnel"),fOr.forEach(t),iwo=r(XCe," \u2014 "),AI=n(XCe,"A",{href:!0});var mOr=s(AI);dwo=r(mOr,"FunnelForQuestionAnswering"),mOr.forEach(t),cwo=r(XCe," (Funnel Transformer model)"),XCe.forEach(t),fwo=i(P),M5=n(P,"LI",{});var zCe=s(M5);Gte=n(zCe,"STRONG",{});var gOr=s(Gte);mwo=r(gOr,"gptj"),gOr.forEach(t),gwo=r(zCe," \u2014 "),LI=n(zCe,"A",{href:!0});var hOr=s(LI);hwo=r(hOr,"GPTJForQuestionAnswering"),hOr.forEach(t),pwo=r(zCe," (GPT-J model)"),zCe.forEach(t),_wo=i(P),E5=n(P,"LI",{});var VCe=s(E5);Ote=n(VCe,"STRONG",{});var pOr=s(Ote);uwo=r(pOr,"ibert"),pOr.forEach(t),bwo=r(VCe," \u2014 "),BI=n(VCe,"A",{href:!0});var _Or=s(BI);vwo=r(_Or,"IBertForQuestionAnswering"),_Or.forEach(t),Two=r(VCe," (I-BERT model)"),VCe.forEach(t),Fwo=i(P),y5=n(P,"LI",{});var WCe=s(y5);Xte=n(WCe,"STRONG",{});var uOr=s(Xte);Cwo=r(uOr,"layoutlmv2"),uOr.forEach(t),Mwo=r(WCe," \u2014 "),xI=n(WCe,"A",{href:!0});var bOr=s(xI);Ewo=r(bOr,"LayoutLMv2ForQuestionAnswering"),bOr.forEach(t),ywo=r(WCe," (LayoutLMv2 model)"),WCe.forEach(t),wwo=i(P),w5=n(P,"LI",{});var QCe=s(w5);zte=n(QCe,"STRONG",{});var vOr=s(zte);Awo=r(vOr,"led"),vOr.forEach(t),Lwo=r(QCe," \u2014 "),kI=n(QCe,"A",{href:!0});var TOr=s(kI);Bwo=r(TOr,"LEDForQuestionAnswering"),TOr.forEach(t),xwo=r(QCe," (LED model)"),QCe.forEach(t),kwo=i(P),A5=n(P,"LI",{});var HCe=s(A5);Vte=n(HCe,"STRONG",{});var FOr=s(Vte);Rwo=r(FOr,"longformer"),FOr.forEach(t),Swo=r(HCe," \u2014 "),RI=n(HCe,"A",{href:!0});var COr=s(RI);Pwo=r(COr,"LongformerForQuestionAnswering"),COr.forEach(t),$wo=r(HCe," (Longformer model)"),HCe.forEach(t),Iwo=i(P),L5=n(P,"LI",{});var UCe=s(L5);Wte=n(UCe,"STRONG",{});var MOr=s(Wte);jwo=r(MOr,"lxmert"),MOr.forEach(t),Nwo=r(UCe," \u2014 "),SI=n(UCe,"A",{href:!0});var EOr=s(SI);Dwo=r(EOr,"LxmertForQuestionAnswering"),EOr.forEach(t),qwo=r(UCe," (LXMERT model)"),UCe.forEach(t),Gwo=i(P),B5=n(P,"LI",{});var JCe=s(B5);Qte=n(JCe,"STRONG",{});var yOr=s(Qte);Owo=r(yOr,"mbart"),yOr.forEach(t),Xwo=r(JCe," \u2014 "),PI=n(JCe,"A",{href:!0});var wOr=s(PI);zwo=r(wOr,"MBartForQuestionAnswering"),wOr.forEach(t),Vwo=r(JCe," (mBART model)"),JCe.forEach(t),Wwo=i(P),x5=n(P,"LI",{});var YCe=s(x5);Hte=n(YCe,"STRONG",{});var AOr=s(Hte);Qwo=r(AOr,"megatron-bert"),AOr.forEach(t),Hwo=r(YCe," \u2014 "),$I=n(YCe,"A",{href:!0});var LOr=s($I);Uwo=r(LOr,"MegatronBertForQuestionAnswering"),LOr.forEach(t),Jwo=r(YCe," (MegatronBert model)"),YCe.forEach(t),Ywo=i(P),k5=n(P,"LI",{});var KCe=s(k5);Ute=n(KCe,"STRONG",{});var BOr=s(Ute);Kwo=r(BOr,"mobilebert"),BOr.forEach(t),Zwo=r(KCe," \u2014 "),II=n(KCe,"A",{href:!0});var xOr=s(II);eAo=r(xOr,"MobileBertForQuestionAnswering"),xOr.forEach(t),oAo=r(KCe," (MobileBERT model)"),KCe.forEach(t),rAo=i(P),R5=n(P,"LI",{});var ZCe=s(R5);Jte=n(ZCe,"STRONG",{});var kOr=s(Jte);tAo=r(kOr,"mpnet"),kOr.forEach(t),aAo=r(ZCe," \u2014 "),jI=n(ZCe,"A",{href:!0});var ROr=s(jI);nAo=r(ROr,"MPNetForQuestionAnswering"),ROr.forEach(t),sAo=r(ZCe," (MPNet model)"),ZCe.forEach(t),lAo=i(P),S5=n(P,"LI",{});var e4e=s(S5);Yte=n(e4e,"STRONG",{});var SOr=s(Yte);iAo=r(SOr,"nystromformer"),SOr.forEach(t),dAo=r(e4e," \u2014 "),NI=n(e4e,"A",{href:!0});var POr=s(NI);cAo=r(POr,"NystromformerForQuestionAnswering"),POr.forEach(t),fAo=r(e4e," (Nystromformer model)"),e4e.forEach(t),mAo=i(P),P5=n(P,"LI",{});var o4e=s(P5);Kte=n(o4e,"STRONG",{});var $Or=s(Kte);gAo=r($Or,"qdqbert"),$Or.forEach(t),hAo=r(o4e," \u2014 "),DI=n(o4e,"A",{href:!0});var IOr=s(DI);pAo=r(IOr,"QDQBertForQuestionAnswering"),IOr.forEach(t),_Ao=r(o4e," (QDQBert model)"),o4e.forEach(t),uAo=i(P),$5=n(P,"LI",{});var r4e=s($5);Zte=n(r4e,"STRONG",{});var jOr=s(Zte);bAo=r(jOr,"reformer"),jOr.forEach(t),vAo=r(r4e," \u2014 "),qI=n(r4e,"A",{href:!0});var NOr=s(qI);TAo=r(NOr,"ReformerForQuestionAnswering"),NOr.forEach(t),FAo=r(r4e," (Reformer model)"),r4e.forEach(t),CAo=i(P),I5=n(P,"LI",{});var t4e=s(I5);eae=n(t4e,"STRONG",{});var DOr=s(eae);MAo=r(DOr,"rembert"),DOr.forEach(t),EAo=r(t4e," \u2014 "),GI=n(t4e,"A",{href:!0});var qOr=s(GI);yAo=r(qOr,"RemBertForQuestionAnswering"),qOr.forEach(t),wAo=r(t4e," (RemBERT model)"),t4e.forEach(t),AAo=i(P),j5=n(P,"LI",{});var a4e=s(j5);oae=n(a4e,"STRONG",{});var GOr=s(oae);LAo=r(GOr,"roberta"),GOr.forEach(t),BAo=r(a4e," \u2014 "),OI=n(a4e,"A",{href:!0});var OOr=s(OI);xAo=r(OOr,"RobertaForQuestionAnswering"),OOr.forEach(t),kAo=r(a4e," (RoBERTa model)"),a4e.forEach(t),RAo=i(P),N5=n(P,"LI",{});var n4e=s(N5);rae=n(n4e,"STRONG",{});var XOr=s(rae);SAo=r(XOr,"roformer"),XOr.forEach(t),PAo=r(n4e," \u2014 "),XI=n(n4e,"A",{href:!0});var zOr=s(XI);$Ao=r(zOr,"RoFormerForQuestionAnswering"),zOr.forEach(t),IAo=r(n4e," (RoFormer model)"),n4e.forEach(t),jAo=i(P),D5=n(P,"LI",{});var s4e=s(D5);tae=n(s4e,"STRONG",{});var VOr=s(tae);NAo=r(VOr,"splinter"),VOr.forEach(t),DAo=r(s4e," \u2014 "),zI=n(s4e,"A",{href:!0});var WOr=s(zI);qAo=r(WOr,"SplinterForQuestionAnswering"),WOr.forEach(t),GAo=r(s4e," (Splinter model)"),s4e.forEach(t),OAo=i(P),q5=n(P,"LI",{});var l4e=s(q5);aae=n(l4e,"STRONG",{});var QOr=s(aae);XAo=r(QOr,"squeezebert"),QOr.forEach(t),zAo=r(l4e," \u2014 "),VI=n(l4e,"A",{href:!0});var HOr=s(VI);VAo=r(HOr,"SqueezeBertForQuestionAnswering"),HOr.forEach(t),WAo=r(l4e," (SqueezeBERT model)"),l4e.forEach(t),QAo=i(P),G5=n(P,"LI",{});var i4e=s(G5);nae=n(i4e,"STRONG",{});var UOr=s(nae);HAo=r(UOr,"xlm"),UOr.forEach(t),UAo=r(i4e," \u2014 "),WI=n(i4e,"A",{href:!0});var JOr=s(WI);JAo=r(JOr,"XLMForQuestionAnsweringSimple"),JOr.forEach(t),YAo=r(i4e," (XLM model)"),i4e.forEach(t),KAo=i(P),O5=n(P,"LI",{});var d4e=s(O5);sae=n(d4e,"STRONG",{});var YOr=s(sae);ZAo=r(YOr,"xlm-roberta"),YOr.forEach(t),e0o=r(d4e," \u2014 "),QI=n(d4e,"A",{href:!0});var KOr=s(QI);o0o=r(KOr,"XLMRobertaForQuestionAnswering"),KOr.forEach(t),r0o=r(d4e," (XLM-RoBERTa model)"),d4e.forEach(t),t0o=i(P),X5=n(P,"LI",{});var c4e=s(X5);lae=n(c4e,"STRONG",{});var ZOr=s(lae);a0o=r(ZOr,"xlm-roberta-xl"),ZOr.forEach(t),n0o=r(c4e," \u2014 "),HI=n(c4e,"A",{href:!0});var eXr=s(HI);s0o=r(eXr,"XLMRobertaXLForQuestionAnswering"),eXr.forEach(t),l0o=r(c4e," (XLM-RoBERTa-XL model)"),c4e.forEach(t),i0o=i(P),z5=n(P,"LI",{});var f4e=s(z5);iae=n(f4e,"STRONG",{});var oXr=s(iae);d0o=r(oXr,"xlnet"),oXr.forEach(t),c0o=r(f4e," \u2014 "),UI=n(f4e,"A",{href:!0});var rXr=s(UI);f0o=r(rXr,"XLNetForQuestionAnsweringSimple"),rXr.forEach(t),m0o=r(f4e," (XLNet model)"),f4e.forEach(t),g0o=i(P),V5=n(P,"LI",{});var m4e=s(V5);dae=n(m4e,"STRONG",{});var tXr=s(dae);h0o=r(tXr,"yoso"),tXr.forEach(t),p0o=r(m4e," \u2014 "),JI=n(m4e,"A",{href:!0});var aXr=s(JI);_0o=r(aXr,"YosoForQuestionAnswering"),aXr.forEach(t),u0o=r(m4e," (YOSO model)"),m4e.forEach(t),P.forEach(t),b0o=i(Nt),W5=n(Nt,"P",{});var g4e=s(W5);v0o=r(g4e,"The model is set in evaluation mode by default using "),cae=n(g4e,"CODE",{});var nXr=s(cae);T0o=r(nXr,"model.eval()"),nXr.forEach(t),F0o=r(g4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fae=n(g4e,"CODE",{});var sXr=s(fae);C0o=r(sXr,"model.train()"),sXr.forEach(t),g4e.forEach(t),M0o=i(Nt),mae=n(Nt,"P",{});var lXr=s(mae);E0o=r(lXr,"Examples:"),lXr.forEach(t),y0o=i(Nt),m(FM.$$.fragment,Nt),Nt.forEach(t),Ys.forEach(t),HAe=i(d),id=n(d,"H2",{class:!0});var KLe=s(id);Q5=n(KLe,"A",{id:!0,class:!0,href:!0});var iXr=s(Q5);gae=n(iXr,"SPAN",{});var dXr=s(gae);m(CM.$$.fragment,dXr),dXr.forEach(t),iXr.forEach(t),w0o=i(KLe),hae=n(KLe,"SPAN",{});var cXr=s(hae);A0o=r(cXr,"AutoModelForTableQuestionAnswering"),cXr.forEach(t),KLe.forEach(t),UAe=i(d),Zo=n(d,"DIV",{class:!0});var Zs=s(Zo);m(MM.$$.fragment,Zs),L0o=i(Zs),dd=n(Zs,"P",{});var uX=s(dd);B0o=r(uX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pae=n(uX,"CODE",{});var fXr=s(pae);x0o=r(fXr,"from_pretrained()"),fXr.forEach(t),k0o=r(uX,"class method or the "),_ae=n(uX,"CODE",{});var mXr=s(_ae);R0o=r(mXr,"from_config()"),mXr.forEach(t),S0o=r(uX,`class
method.`),uX.forEach(t),P0o=i(Zs),EM=n(Zs,"P",{});var ZLe=s(EM);$0o=r(ZLe,"This class cannot be instantiated directly using "),uae=n(ZLe,"CODE",{});var gXr=s(uae);I0o=r(gXr,"__init__()"),gXr.forEach(t),j0o=r(ZLe," (throws an error)."),ZLe.forEach(t),N0o=i(Zs),Vr=n(Zs,"DIV",{class:!0});var el=s(Vr);m(yM.$$.fragment,el),D0o=i(el),bae=n(el,"P",{});var hXr=s(bae);q0o=r(hXr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hXr.forEach(t),G0o=i(el),cd=n(el,"P",{});var bX=s(cd);O0o=r(bX,`Note:
Loading a model from its configuration file does `),vae=n(bX,"STRONG",{});var pXr=s(vae);X0o=r(pXr,"not"),pXr.forEach(t),z0o=r(bX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=n(bX,"CODE",{});var _Xr=s(Tae);V0o=r(_Xr,"from_pretrained()"),_Xr.forEach(t),W0o=r(bX,"to load the model weights."),bX.forEach(t),Q0o=i(el),Fae=n(el,"P",{});var uXr=s(Fae);H0o=r(uXr,"Examples:"),uXr.forEach(t),U0o=i(el),m(wM.$$.fragment,el),el.forEach(t),J0o=i(Zs),qe=n(Zs,"DIV",{class:!0});var Dt=s(qe);m(AM.$$.fragment,Dt),Y0o=i(Dt),Cae=n(Dt,"P",{});var bXr=s(Cae);K0o=r(bXr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bXr.forEach(t),Z0o=i(Dt),Va=n(Dt,"P",{});var zF=s(Va);eLo=r(zF,"The model class to instantiate is selected based on the "),Mae=n(zF,"CODE",{});var vXr=s(Mae);oLo=r(vXr,"model_type"),vXr.forEach(t),rLo=r(zF,` property of the config object (either
passed as an argument or loaded from `),Eae=n(zF,"CODE",{});var TXr=s(Eae);tLo=r(TXr,"pretrained_model_name_or_path"),TXr.forEach(t),aLo=r(zF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=n(zF,"CODE",{});var FXr=s(yae);nLo=r(FXr,"pretrained_model_name_or_path"),FXr.forEach(t),sLo=r(zF,":"),zF.forEach(t),lLo=i(Dt),wae=n(Dt,"UL",{});var CXr=s(wae);H5=n(CXr,"LI",{});var h4e=s(H5);Aae=n(h4e,"STRONG",{});var MXr=s(Aae);iLo=r(MXr,"tapas"),MXr.forEach(t),dLo=r(h4e," \u2014 "),YI=n(h4e,"A",{href:!0});var EXr=s(YI);cLo=r(EXr,"TapasForQuestionAnswering"),EXr.forEach(t),fLo=r(h4e," (TAPAS model)"),h4e.forEach(t),CXr.forEach(t),mLo=i(Dt),U5=n(Dt,"P",{});var p4e=s(U5);gLo=r(p4e,"The model is set in evaluation mode by default using "),Lae=n(p4e,"CODE",{});var yXr=s(Lae);hLo=r(yXr,"model.eval()"),yXr.forEach(t),pLo=r(p4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=n(p4e,"CODE",{});var wXr=s(Bae);_Lo=r(wXr,"model.train()"),wXr.forEach(t),p4e.forEach(t),uLo=i(Dt),xae=n(Dt,"P",{});var AXr=s(xae);bLo=r(AXr,"Examples:"),AXr.forEach(t),vLo=i(Dt),m(LM.$$.fragment,Dt),Dt.forEach(t),Zs.forEach(t),JAe=i(d),fd=n(d,"H2",{class:!0});var e9e=s(fd);J5=n(e9e,"A",{id:!0,class:!0,href:!0});var LXr=s(J5);kae=n(LXr,"SPAN",{});var BXr=s(kae);m(BM.$$.fragment,BXr),BXr.forEach(t),LXr.forEach(t),TLo=i(e9e),Rae=n(e9e,"SPAN",{});var xXr=s(Rae);FLo=r(xXr,"AutoModelForImageClassification"),xXr.forEach(t),e9e.forEach(t),YAe=i(d),er=n(d,"DIV",{class:!0});var ol=s(er);m(xM.$$.fragment,ol),CLo=i(ol),md=n(ol,"P",{});var vX=s(md);MLo=r(vX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sae=n(vX,"CODE",{});var kXr=s(Sae);ELo=r(kXr,"from_pretrained()"),kXr.forEach(t),yLo=r(vX,"class method or the "),Pae=n(vX,"CODE",{});var RXr=s(Pae);wLo=r(RXr,"from_config()"),RXr.forEach(t),ALo=r(vX,`class
method.`),vX.forEach(t),LLo=i(ol),kM=n(ol,"P",{});var o9e=s(kM);BLo=r(o9e,"This class cannot be instantiated directly using "),$ae=n(o9e,"CODE",{});var SXr=s($ae);xLo=r(SXr,"__init__()"),SXr.forEach(t),kLo=r(o9e," (throws an error)."),o9e.forEach(t),RLo=i(ol),Wr=n(ol,"DIV",{class:!0});var rl=s(Wr);m(RM.$$.fragment,rl),SLo=i(rl),Iae=n(rl,"P",{});var PXr=s(Iae);PLo=r(PXr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PXr.forEach(t),$Lo=i(rl),gd=n(rl,"P",{});var TX=s(gd);ILo=r(TX,`Note:
Loading a model from its configuration file does `),jae=n(TX,"STRONG",{});var $Xr=s(jae);jLo=r($Xr,"not"),$Xr.forEach(t),NLo=r(TX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=n(TX,"CODE",{});var IXr=s(Nae);DLo=r(IXr,"from_pretrained()"),IXr.forEach(t),qLo=r(TX,"to load the model weights."),TX.forEach(t),GLo=i(rl),Dae=n(rl,"P",{});var jXr=s(Dae);OLo=r(jXr,"Examples:"),jXr.forEach(t),XLo=i(rl),m(SM.$$.fragment,rl),rl.forEach(t),zLo=i(ol),Ge=n(ol,"DIV",{class:!0});var qt=s(Ge);m(PM.$$.fragment,qt),VLo=i(qt),qae=n(qt,"P",{});var NXr=s(qae);WLo=r(NXr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NXr.forEach(t),QLo=i(qt),Wa=n(qt,"P",{});var VF=s(Wa);HLo=r(VF,"The model class to instantiate is selected based on the "),Gae=n(VF,"CODE",{});var DXr=s(Gae);ULo=r(DXr,"model_type"),DXr.forEach(t),JLo=r(VF,` property of the config object (either
passed as an argument or loaded from `),Oae=n(VF,"CODE",{});var qXr=s(Oae);YLo=r(qXr,"pretrained_model_name_or_path"),qXr.forEach(t),KLo=r(VF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=n(VF,"CODE",{});var GXr=s(Xae);ZLo=r(GXr,"pretrained_model_name_or_path"),GXr.forEach(t),e9o=r(VF,":"),VF.forEach(t),o9o=i(qt),we=n(qt,"UL",{});var jo=s(we);Y5=n(jo,"LI",{});var _4e=s(Y5);zae=n(_4e,"STRONG",{});var OXr=s(zae);r9o=r(OXr,"beit"),OXr.forEach(t),t9o=r(_4e," \u2014 "),KI=n(_4e,"A",{href:!0});var XXr=s(KI);a9o=r(XXr,"BeitForImageClassification"),XXr.forEach(t),n9o=r(_4e," (BEiT model)"),_4e.forEach(t),s9o=i(jo),K5=n(jo,"LI",{});var u4e=s(K5);Vae=n(u4e,"STRONG",{});var zXr=s(Vae);l9o=r(zXr,"convnext"),zXr.forEach(t),i9o=r(u4e," \u2014 "),ZI=n(u4e,"A",{href:!0});var VXr=s(ZI);d9o=r(VXr,"ConvNextForImageClassification"),VXr.forEach(t),c9o=r(u4e," (ConvNext model)"),u4e.forEach(t),f9o=i(jo),As=n(jo,"LI",{});var o0=s(As);Wae=n(o0,"STRONG",{});var WXr=s(Wae);m9o=r(WXr,"deit"),WXr.forEach(t),g9o=r(o0," \u2014 "),ej=n(o0,"A",{href:!0});var QXr=s(ej);h9o=r(QXr,"DeiTForImageClassification"),QXr.forEach(t),p9o=r(o0," or "),oj=n(o0,"A",{href:!0});var HXr=s(oj);_9o=r(HXr,"DeiTForImageClassificationWithTeacher"),HXr.forEach(t),u9o=r(o0," (DeiT model)"),o0.forEach(t),b9o=i(jo),Z5=n(jo,"LI",{});var b4e=s(Z5);Qae=n(b4e,"STRONG",{});var UXr=s(Qae);v9o=r(UXr,"imagegpt"),UXr.forEach(t),T9o=r(b4e," \u2014 "),rj=n(b4e,"A",{href:!0});var JXr=s(rj);F9o=r(JXr,"ImageGPTForImageClassification"),JXr.forEach(t),C9o=r(b4e," (ImageGPT model)"),b4e.forEach(t),M9o=i(jo),ta=n(jo,"LI",{});var ff=s(ta);Hae=n(ff,"STRONG",{});var YXr=s(Hae);E9o=r(YXr,"perceiver"),YXr.forEach(t),y9o=r(ff," \u2014 "),tj=n(ff,"A",{href:!0});var KXr=s(tj);w9o=r(KXr,"PerceiverForImageClassificationLearned"),KXr.forEach(t),A9o=r(ff," or "),aj=n(ff,"A",{href:!0});var ZXr=s(aj);L9o=r(ZXr,"PerceiverForImageClassificationFourier"),ZXr.forEach(t),B9o=r(ff," or "),nj=n(ff,"A",{href:!0});var ezr=s(nj);x9o=r(ezr,"PerceiverForImageClassificationConvProcessing"),ezr.forEach(t),k9o=r(ff," (Perceiver model)"),ff.forEach(t),R9o=i(jo),e2=n(jo,"LI",{});var v4e=s(e2);Uae=n(v4e,"STRONG",{});var ozr=s(Uae);S9o=r(ozr,"segformer"),ozr.forEach(t),P9o=r(v4e," \u2014 "),sj=n(v4e,"A",{href:!0});var rzr=s(sj);$9o=r(rzr,"SegformerForImageClassification"),rzr.forEach(t),I9o=r(v4e," (SegFormer model)"),v4e.forEach(t),j9o=i(jo),o2=n(jo,"LI",{});var T4e=s(o2);Jae=n(T4e,"STRONG",{});var tzr=s(Jae);N9o=r(tzr,"swin"),tzr.forEach(t),D9o=r(T4e," \u2014 "),lj=n(T4e,"A",{href:!0});var azr=s(lj);q9o=r(azr,"SwinForImageClassification"),azr.forEach(t),G9o=r(T4e," (Swin model)"),T4e.forEach(t),O9o=i(jo),r2=n(jo,"LI",{});var F4e=s(r2);Yae=n(F4e,"STRONG",{});var nzr=s(Yae);X9o=r(nzr,"vit"),nzr.forEach(t),z9o=r(F4e," \u2014 "),ij=n(F4e,"A",{href:!0});var szr=s(ij);V9o=r(szr,"ViTForImageClassification"),szr.forEach(t),W9o=r(F4e," (ViT model)"),F4e.forEach(t),jo.forEach(t),Q9o=i(qt),t2=n(qt,"P",{});var C4e=s(t2);H9o=r(C4e,"The model is set in evaluation mode by default using "),Kae=n(C4e,"CODE",{});var lzr=s(Kae);U9o=r(lzr,"model.eval()"),lzr.forEach(t),J9o=r(C4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=n(C4e,"CODE",{});var izr=s(Zae);Y9o=r(izr,"model.train()"),izr.forEach(t),C4e.forEach(t),K9o=i(qt),ene=n(qt,"P",{});var dzr=s(ene);Z9o=r(dzr,"Examples:"),dzr.forEach(t),eBo=i(qt),m($M.$$.fragment,qt),qt.forEach(t),ol.forEach(t),KAe=i(d),hd=n(d,"H2",{class:!0});var r9e=s(hd);a2=n(r9e,"A",{id:!0,class:!0,href:!0});var czr=s(a2);one=n(czr,"SPAN",{});var fzr=s(one);m(IM.$$.fragment,fzr),fzr.forEach(t),czr.forEach(t),oBo=i(r9e),rne=n(r9e,"SPAN",{});var mzr=s(rne);rBo=r(mzr,"AutoModelForVision2Seq"),mzr.forEach(t),r9e.forEach(t),ZAe=i(d),or=n(d,"DIV",{class:!0});var tl=s(or);m(jM.$$.fragment,tl),tBo=i(tl),pd=n(tl,"P",{});var FX=s(pd);aBo=r(FX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tne=n(FX,"CODE",{});var gzr=s(tne);nBo=r(gzr,"from_pretrained()"),gzr.forEach(t),sBo=r(FX,"class method or the "),ane=n(FX,"CODE",{});var hzr=s(ane);lBo=r(hzr,"from_config()"),hzr.forEach(t),iBo=r(FX,`class
method.`),FX.forEach(t),dBo=i(tl),NM=n(tl,"P",{});var t9e=s(NM);cBo=r(t9e,"This class cannot be instantiated directly using "),nne=n(t9e,"CODE",{});var pzr=s(nne);fBo=r(pzr,"__init__()"),pzr.forEach(t),mBo=r(t9e," (throws an error)."),t9e.forEach(t),gBo=i(tl),Qr=n(tl,"DIV",{class:!0});var al=s(Qr);m(DM.$$.fragment,al),hBo=i(al),sne=n(al,"P",{});var _zr=s(sne);pBo=r(_zr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_zr.forEach(t),_Bo=i(al),_d=n(al,"P",{});var CX=s(_d);uBo=r(CX,`Note:
Loading a model from its configuration file does `),lne=n(CX,"STRONG",{});var uzr=s(lne);bBo=r(uzr,"not"),uzr.forEach(t),vBo=r(CX,` load the model weights. It only affects the
model\u2019s configuration. Use `),ine=n(CX,"CODE",{});var bzr=s(ine);TBo=r(bzr,"from_pretrained()"),bzr.forEach(t),FBo=r(CX,"to load the model weights."),CX.forEach(t),CBo=i(al),dne=n(al,"P",{});var vzr=s(dne);MBo=r(vzr,"Examples:"),vzr.forEach(t),EBo=i(al),m(qM.$$.fragment,al),al.forEach(t),yBo=i(tl),Oe=n(tl,"DIV",{class:!0});var Gt=s(Oe);m(GM.$$.fragment,Gt),wBo=i(Gt),cne=n(Gt,"P",{});var Tzr=s(cne);ABo=r(Tzr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tzr.forEach(t),LBo=i(Gt),Qa=n(Gt,"P",{});var WF=s(Qa);BBo=r(WF,"The model class to instantiate is selected based on the "),fne=n(WF,"CODE",{});var Fzr=s(fne);xBo=r(Fzr,"model_type"),Fzr.forEach(t),kBo=r(WF,` property of the config object (either
passed as an argument or loaded from `),mne=n(WF,"CODE",{});var Czr=s(mne);RBo=r(Czr,"pretrained_model_name_or_path"),Czr.forEach(t),SBo=r(WF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gne=n(WF,"CODE",{});var Mzr=s(gne);PBo=r(Mzr,"pretrained_model_name_or_path"),Mzr.forEach(t),$Bo=r(WF,":"),WF.forEach(t),IBo=i(Gt),hne=n(Gt,"UL",{});var Ezr=s(hne);n2=n(Ezr,"LI",{});var M4e=s(n2);pne=n(M4e,"STRONG",{});var yzr=s(pne);jBo=r(yzr,"vision-encoder-decoder"),yzr.forEach(t),NBo=r(M4e," \u2014 "),dj=n(M4e,"A",{href:!0});var wzr=s(dj);DBo=r(wzr,"VisionEncoderDecoderModel"),wzr.forEach(t),qBo=r(M4e," (Vision Encoder decoder model)"),M4e.forEach(t),Ezr.forEach(t),GBo=i(Gt),s2=n(Gt,"P",{});var E4e=s(s2);OBo=r(E4e,"The model is set in evaluation mode by default using "),_ne=n(E4e,"CODE",{});var Azr=s(_ne);XBo=r(Azr,"model.eval()"),Azr.forEach(t),zBo=r(E4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=n(E4e,"CODE",{});var Lzr=s(une);VBo=r(Lzr,"model.train()"),Lzr.forEach(t),E4e.forEach(t),WBo=i(Gt),bne=n(Gt,"P",{});var Bzr=s(bne);QBo=r(Bzr,"Examples:"),Bzr.forEach(t),HBo=i(Gt),m(OM.$$.fragment,Gt),Gt.forEach(t),tl.forEach(t),e0e=i(d),ud=n(d,"H2",{class:!0});var a9e=s(ud);l2=n(a9e,"A",{id:!0,class:!0,href:!0});var xzr=s(l2);vne=n(xzr,"SPAN",{});var kzr=s(vne);m(XM.$$.fragment,kzr),kzr.forEach(t),xzr.forEach(t),UBo=i(a9e),Tne=n(a9e,"SPAN",{});var Rzr=s(Tne);JBo=r(Rzr,"AutoModelForAudioClassification"),Rzr.forEach(t),a9e.forEach(t),o0e=i(d),rr=n(d,"DIV",{class:!0});var nl=s(rr);m(zM.$$.fragment,nl),YBo=i(nl),bd=n(nl,"P",{});var MX=s(bd);KBo=r(MX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Fne=n(MX,"CODE",{});var Szr=s(Fne);ZBo=r(Szr,"from_pretrained()"),Szr.forEach(t),exo=r(MX,"class method or the "),Cne=n(MX,"CODE",{});var Pzr=s(Cne);oxo=r(Pzr,"from_config()"),Pzr.forEach(t),rxo=r(MX,`class
method.`),MX.forEach(t),txo=i(nl),VM=n(nl,"P",{});var n9e=s(VM);axo=r(n9e,"This class cannot be instantiated directly using "),Mne=n(n9e,"CODE",{});var $zr=s(Mne);nxo=r($zr,"__init__()"),$zr.forEach(t),sxo=r(n9e," (throws an error)."),n9e.forEach(t),lxo=i(nl),Hr=n(nl,"DIV",{class:!0});var sl=s(Hr);m(WM.$$.fragment,sl),ixo=i(sl),Ene=n(sl,"P",{});var Izr=s(Ene);dxo=r(Izr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Izr.forEach(t),cxo=i(sl),vd=n(sl,"P",{});var EX=s(vd);fxo=r(EX,`Note:
Loading a model from its configuration file does `),yne=n(EX,"STRONG",{});var jzr=s(yne);mxo=r(jzr,"not"),jzr.forEach(t),gxo=r(EX,` load the model weights. It only affects the
model\u2019s configuration. Use `),wne=n(EX,"CODE",{});var Nzr=s(wne);hxo=r(Nzr,"from_pretrained()"),Nzr.forEach(t),pxo=r(EX,"to load the model weights."),EX.forEach(t),_xo=i(sl),Ane=n(sl,"P",{});var Dzr=s(Ane);uxo=r(Dzr,"Examples:"),Dzr.forEach(t),bxo=i(sl),m(QM.$$.fragment,sl),sl.forEach(t),vxo=i(nl),Xe=n(nl,"DIV",{class:!0});var Ot=s(Xe);m(HM.$$.fragment,Ot),Txo=i(Ot),Lne=n(Ot,"P",{});var qzr=s(Lne);Fxo=r(qzr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qzr.forEach(t),Cxo=i(Ot),Ha=n(Ot,"P",{});var QF=s(Ha);Mxo=r(QF,"The model class to instantiate is selected based on the "),Bne=n(QF,"CODE",{});var Gzr=s(Bne);Exo=r(Gzr,"model_type"),Gzr.forEach(t),yxo=r(QF,` property of the config object (either
passed as an argument or loaded from `),xne=n(QF,"CODE",{});var Ozr=s(xne);wxo=r(Ozr,"pretrained_model_name_or_path"),Ozr.forEach(t),Axo=r(QF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=n(QF,"CODE",{});var Xzr=s(kne);Lxo=r(Xzr,"pretrained_model_name_or_path"),Xzr.forEach(t),Bxo=r(QF,":"),QF.forEach(t),xxo=i(Ot),ro=n(Ot,"UL",{});var Xt=s(ro);i2=n(Xt,"LI",{});var y4e=s(i2);Rne=n(y4e,"STRONG",{});var zzr=s(Rne);kxo=r(zzr,"hubert"),zzr.forEach(t),Rxo=r(y4e," \u2014 "),cj=n(y4e,"A",{href:!0});var Vzr=s(cj);Sxo=r(Vzr,"HubertForSequenceClassification"),Vzr.forEach(t),Pxo=r(y4e," (Hubert model)"),y4e.forEach(t),$xo=i(Xt),d2=n(Xt,"LI",{});var w4e=s(d2);Sne=n(w4e,"STRONG",{});var Wzr=s(Sne);Ixo=r(Wzr,"sew"),Wzr.forEach(t),jxo=r(w4e," \u2014 "),fj=n(w4e,"A",{href:!0});var Qzr=s(fj);Nxo=r(Qzr,"SEWForSequenceClassification"),Qzr.forEach(t),Dxo=r(w4e," (SEW model)"),w4e.forEach(t),qxo=i(Xt),c2=n(Xt,"LI",{});var A4e=s(c2);Pne=n(A4e,"STRONG",{});var Hzr=s(Pne);Gxo=r(Hzr,"sew-d"),Hzr.forEach(t),Oxo=r(A4e," \u2014 "),mj=n(A4e,"A",{href:!0});var Uzr=s(mj);Xxo=r(Uzr,"SEWDForSequenceClassification"),Uzr.forEach(t),zxo=r(A4e," (SEW-D model)"),A4e.forEach(t),Vxo=i(Xt),f2=n(Xt,"LI",{});var L4e=s(f2);$ne=n(L4e,"STRONG",{});var Jzr=s($ne);Wxo=r(Jzr,"unispeech"),Jzr.forEach(t),Qxo=r(L4e," \u2014 "),gj=n(L4e,"A",{href:!0});var Yzr=s(gj);Hxo=r(Yzr,"UniSpeechForSequenceClassification"),Yzr.forEach(t),Uxo=r(L4e," (UniSpeech model)"),L4e.forEach(t),Jxo=i(Xt),m2=n(Xt,"LI",{});var B4e=s(m2);Ine=n(B4e,"STRONG",{});var Kzr=s(Ine);Yxo=r(Kzr,"unispeech-sat"),Kzr.forEach(t),Kxo=r(B4e," \u2014 "),hj=n(B4e,"A",{href:!0});var Zzr=s(hj);Zxo=r(Zzr,"UniSpeechSatForSequenceClassification"),Zzr.forEach(t),eko=r(B4e," (UniSpeechSat model)"),B4e.forEach(t),oko=i(Xt),g2=n(Xt,"LI",{});var x4e=s(g2);jne=n(x4e,"STRONG",{});var eVr=s(jne);rko=r(eVr,"wav2vec2"),eVr.forEach(t),tko=r(x4e," \u2014 "),pj=n(x4e,"A",{href:!0});var oVr=s(pj);ako=r(oVr,"Wav2Vec2ForSequenceClassification"),oVr.forEach(t),nko=r(x4e," (Wav2Vec2 model)"),x4e.forEach(t),sko=i(Xt),h2=n(Xt,"LI",{});var k4e=s(h2);Nne=n(k4e,"STRONG",{});var rVr=s(Nne);lko=r(rVr,"wavlm"),rVr.forEach(t),iko=r(k4e," \u2014 "),_j=n(k4e,"A",{href:!0});var tVr=s(_j);dko=r(tVr,"WavLMForSequenceClassification"),tVr.forEach(t),cko=r(k4e," (WavLM model)"),k4e.forEach(t),Xt.forEach(t),fko=i(Ot),p2=n(Ot,"P",{});var R4e=s(p2);mko=r(R4e,"The model is set in evaluation mode by default using "),Dne=n(R4e,"CODE",{});var aVr=s(Dne);gko=r(aVr,"model.eval()"),aVr.forEach(t),hko=r(R4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qne=n(R4e,"CODE",{});var nVr=s(qne);pko=r(nVr,"model.train()"),nVr.forEach(t),R4e.forEach(t),_ko=i(Ot),Gne=n(Ot,"P",{});var sVr=s(Gne);uko=r(sVr,"Examples:"),sVr.forEach(t),bko=i(Ot),m(UM.$$.fragment,Ot),Ot.forEach(t),nl.forEach(t),r0e=i(d),Td=n(d,"H2",{class:!0});var s9e=s(Td);_2=n(s9e,"A",{id:!0,class:!0,href:!0});var lVr=s(_2);One=n(lVr,"SPAN",{});var iVr=s(One);m(JM.$$.fragment,iVr),iVr.forEach(t),lVr.forEach(t),vko=i(s9e),Xne=n(s9e,"SPAN",{});var dVr=s(Xne);Tko=r(dVr,"AutoModelForAudioFrameClassification"),dVr.forEach(t),s9e.forEach(t),t0e=i(d),tr=n(d,"DIV",{class:!0});var ll=s(tr);m(YM.$$.fragment,ll),Fko=i(ll),Fd=n(ll,"P",{});var yX=s(Fd);Cko=r(yX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zne=n(yX,"CODE",{});var cVr=s(zne);Mko=r(cVr,"from_pretrained()"),cVr.forEach(t),Eko=r(yX,"class method or the "),Vne=n(yX,"CODE",{});var fVr=s(Vne);yko=r(fVr,"from_config()"),fVr.forEach(t),wko=r(yX,`class
method.`),yX.forEach(t),Ako=i(ll),KM=n(ll,"P",{});var l9e=s(KM);Lko=r(l9e,"This class cannot be instantiated directly using "),Wne=n(l9e,"CODE",{});var mVr=s(Wne);Bko=r(mVr,"__init__()"),mVr.forEach(t),xko=r(l9e," (throws an error)."),l9e.forEach(t),kko=i(ll),Ur=n(ll,"DIV",{class:!0});var il=s(Ur);m(ZM.$$.fragment,il),Rko=i(il),Qne=n(il,"P",{});var gVr=s(Qne);Sko=r(gVr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),gVr.forEach(t),Pko=i(il),Cd=n(il,"P",{});var wX=s(Cd);$ko=r(wX,`Note:
Loading a model from its configuration file does `),Hne=n(wX,"STRONG",{});var hVr=s(Hne);Iko=r(hVr,"not"),hVr.forEach(t),jko=r(wX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Une=n(wX,"CODE",{});var pVr=s(Une);Nko=r(pVr,"from_pretrained()"),pVr.forEach(t),Dko=r(wX,"to load the model weights."),wX.forEach(t),qko=i(il),Jne=n(il,"P",{});var _Vr=s(Jne);Gko=r(_Vr,"Examples:"),_Vr.forEach(t),Oko=i(il),m(eE.$$.fragment,il),il.forEach(t),Xko=i(ll),ze=n(ll,"DIV",{class:!0});var zt=s(ze);m(oE.$$.fragment,zt),zko=i(zt),Yne=n(zt,"P",{});var uVr=s(Yne);Vko=r(uVr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),uVr.forEach(t),Wko=i(zt),Ua=n(zt,"P",{});var HF=s(Ua);Qko=r(HF,"The model class to instantiate is selected based on the "),Kne=n(HF,"CODE",{});var bVr=s(Kne);Hko=r(bVr,"model_type"),bVr.forEach(t),Uko=r(HF,` property of the config object (either
passed as an argument or loaded from `),Zne=n(HF,"CODE",{});var vVr=s(Zne);Jko=r(vVr,"pretrained_model_name_or_path"),vVr.forEach(t),Yko=r(HF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ese=n(HF,"CODE",{});var TVr=s(ese);Kko=r(TVr,"pretrained_model_name_or_path"),TVr.forEach(t),Zko=r(HF,":"),HF.forEach(t),eRo=i(zt),Md=n(zt,"UL",{});var AX=s(Md);u2=n(AX,"LI",{});var S4e=s(u2);ose=n(S4e,"STRONG",{});var FVr=s(ose);oRo=r(FVr,"unispeech-sat"),FVr.forEach(t),rRo=r(S4e," \u2014 "),uj=n(S4e,"A",{href:!0});var CVr=s(uj);tRo=r(CVr,"UniSpeechSatForAudioFrameClassification"),CVr.forEach(t),aRo=r(S4e," (UniSpeechSat model)"),S4e.forEach(t),nRo=i(AX),b2=n(AX,"LI",{});var P4e=s(b2);rse=n(P4e,"STRONG",{});var MVr=s(rse);sRo=r(MVr,"wav2vec2"),MVr.forEach(t),lRo=r(P4e," \u2014 "),bj=n(P4e,"A",{href:!0});var EVr=s(bj);iRo=r(EVr,"Wav2Vec2ForAudioFrameClassification"),EVr.forEach(t),dRo=r(P4e," (Wav2Vec2 model)"),P4e.forEach(t),cRo=i(AX),v2=n(AX,"LI",{});var $4e=s(v2);tse=n($4e,"STRONG",{});var yVr=s(tse);fRo=r(yVr,"wavlm"),yVr.forEach(t),mRo=r($4e," \u2014 "),vj=n($4e,"A",{href:!0});var wVr=s(vj);gRo=r(wVr,"WavLMForAudioFrameClassification"),wVr.forEach(t),hRo=r($4e," (WavLM model)"),$4e.forEach(t),AX.forEach(t),pRo=i(zt),T2=n(zt,"P",{});var I4e=s(T2);_Ro=r(I4e,"The model is set in evaluation mode by default using "),ase=n(I4e,"CODE",{});var AVr=s(ase);uRo=r(AVr,"model.eval()"),AVr.forEach(t),bRo=r(I4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nse=n(I4e,"CODE",{});var LVr=s(nse);vRo=r(LVr,"model.train()"),LVr.forEach(t),I4e.forEach(t),TRo=i(zt),sse=n(zt,"P",{});var BVr=s(sse);FRo=r(BVr,"Examples:"),BVr.forEach(t),CRo=i(zt),m(rE.$$.fragment,zt),zt.forEach(t),ll.forEach(t),a0e=i(d),Ed=n(d,"H2",{class:!0});var i9e=s(Ed);F2=n(i9e,"A",{id:!0,class:!0,href:!0});var xVr=s(F2);lse=n(xVr,"SPAN",{});var kVr=s(lse);m(tE.$$.fragment,kVr),kVr.forEach(t),xVr.forEach(t),MRo=i(i9e),ise=n(i9e,"SPAN",{});var RVr=s(ise);ERo=r(RVr,"AutoModelForCTC"),RVr.forEach(t),i9e.forEach(t),n0e=i(d),ar=n(d,"DIV",{class:!0});var dl=s(ar);m(aE.$$.fragment,dl),yRo=i(dl),yd=n(dl,"P",{});var LX=s(yd);wRo=r(LX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dse=n(LX,"CODE",{});var SVr=s(dse);ARo=r(SVr,"from_pretrained()"),SVr.forEach(t),LRo=r(LX,"class method or the "),cse=n(LX,"CODE",{});var PVr=s(cse);BRo=r(PVr,"from_config()"),PVr.forEach(t),xRo=r(LX,`class
method.`),LX.forEach(t),kRo=i(dl),nE=n(dl,"P",{});var d9e=s(nE);RRo=r(d9e,"This class cannot be instantiated directly using "),fse=n(d9e,"CODE",{});var $Vr=s(fse);SRo=r($Vr,"__init__()"),$Vr.forEach(t),PRo=r(d9e," (throws an error)."),d9e.forEach(t),$Ro=i(dl),Jr=n(dl,"DIV",{class:!0});var cl=s(Jr);m(sE.$$.fragment,cl),IRo=i(cl),mse=n(cl,"P",{});var IVr=s(mse);jRo=r(IVr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),IVr.forEach(t),NRo=i(cl),wd=n(cl,"P",{});var BX=s(wd);DRo=r(BX,`Note:
Loading a model from its configuration file does `),gse=n(BX,"STRONG",{});var jVr=s(gse);qRo=r(jVr,"not"),jVr.forEach(t),GRo=r(BX,` load the model weights. It only affects the
model\u2019s configuration. Use `),hse=n(BX,"CODE",{});var NVr=s(hse);ORo=r(NVr,"from_pretrained()"),NVr.forEach(t),XRo=r(BX,"to load the model weights."),BX.forEach(t),zRo=i(cl),pse=n(cl,"P",{});var DVr=s(pse);VRo=r(DVr,"Examples:"),DVr.forEach(t),WRo=i(cl),m(lE.$$.fragment,cl),cl.forEach(t),QRo=i(dl),Ve=n(dl,"DIV",{class:!0});var Vt=s(Ve);m(iE.$$.fragment,Vt),HRo=i(Vt),_se=n(Vt,"P",{});var qVr=s(_se);URo=r(qVr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),qVr.forEach(t),JRo=i(Vt),Ja=n(Vt,"P",{});var UF=s(Ja);YRo=r(UF,"The model class to instantiate is selected based on the "),use=n(UF,"CODE",{});var GVr=s(use);KRo=r(GVr,"model_type"),GVr.forEach(t),ZRo=r(UF,` property of the config object (either
passed as an argument or loaded from `),bse=n(UF,"CODE",{});var OVr=s(bse);eSo=r(OVr,"pretrained_model_name_or_path"),OVr.forEach(t),oSo=r(UF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=n(UF,"CODE",{});var XVr=s(vse);rSo=r(XVr,"pretrained_model_name_or_path"),XVr.forEach(t),tSo=r(UF,":"),UF.forEach(t),aSo=i(Vt),to=n(Vt,"UL",{});var Wt=s(to);C2=n(Wt,"LI",{});var j4e=s(C2);Tse=n(j4e,"STRONG",{});var zVr=s(Tse);nSo=r(zVr,"hubert"),zVr.forEach(t),sSo=r(j4e," \u2014 "),Tj=n(j4e,"A",{href:!0});var VVr=s(Tj);lSo=r(VVr,"HubertForCTC"),VVr.forEach(t),iSo=r(j4e," (Hubert model)"),j4e.forEach(t),dSo=i(Wt),M2=n(Wt,"LI",{});var N4e=s(M2);Fse=n(N4e,"STRONG",{});var WVr=s(Fse);cSo=r(WVr,"sew"),WVr.forEach(t),fSo=r(N4e," \u2014 "),Fj=n(N4e,"A",{href:!0});var QVr=s(Fj);mSo=r(QVr,"SEWForCTC"),QVr.forEach(t),gSo=r(N4e," (SEW model)"),N4e.forEach(t),hSo=i(Wt),E2=n(Wt,"LI",{});var D4e=s(E2);Cse=n(D4e,"STRONG",{});var HVr=s(Cse);pSo=r(HVr,"sew-d"),HVr.forEach(t),_So=r(D4e," \u2014 "),Cj=n(D4e,"A",{href:!0});var UVr=s(Cj);uSo=r(UVr,"SEWDForCTC"),UVr.forEach(t),bSo=r(D4e," (SEW-D model)"),D4e.forEach(t),vSo=i(Wt),y2=n(Wt,"LI",{});var q4e=s(y2);Mse=n(q4e,"STRONG",{});var JVr=s(Mse);TSo=r(JVr,"unispeech"),JVr.forEach(t),FSo=r(q4e," \u2014 "),Mj=n(q4e,"A",{href:!0});var YVr=s(Mj);CSo=r(YVr,"UniSpeechForCTC"),YVr.forEach(t),MSo=r(q4e," (UniSpeech model)"),q4e.forEach(t),ESo=i(Wt),w2=n(Wt,"LI",{});var G4e=s(w2);Ese=n(G4e,"STRONG",{});var KVr=s(Ese);ySo=r(KVr,"unispeech-sat"),KVr.forEach(t),wSo=r(G4e," \u2014 "),Ej=n(G4e,"A",{href:!0});var ZVr=s(Ej);ASo=r(ZVr,"UniSpeechSatForCTC"),ZVr.forEach(t),LSo=r(G4e," (UniSpeechSat model)"),G4e.forEach(t),BSo=i(Wt),A2=n(Wt,"LI",{});var O4e=s(A2);yse=n(O4e,"STRONG",{});var eWr=s(yse);xSo=r(eWr,"wav2vec2"),eWr.forEach(t),kSo=r(O4e," \u2014 "),yj=n(O4e,"A",{href:!0});var oWr=s(yj);RSo=r(oWr,"Wav2Vec2ForCTC"),oWr.forEach(t),SSo=r(O4e," (Wav2Vec2 model)"),O4e.forEach(t),PSo=i(Wt),L2=n(Wt,"LI",{});var X4e=s(L2);wse=n(X4e,"STRONG",{});var rWr=s(wse);$So=r(rWr,"wavlm"),rWr.forEach(t),ISo=r(X4e," \u2014 "),wj=n(X4e,"A",{href:!0});var tWr=s(wj);jSo=r(tWr,"WavLMForCTC"),tWr.forEach(t),NSo=r(X4e," (WavLM model)"),X4e.forEach(t),Wt.forEach(t),DSo=i(Vt),B2=n(Vt,"P",{});var z4e=s(B2);qSo=r(z4e,"The model is set in evaluation mode by default using "),Ase=n(z4e,"CODE",{});var aWr=s(Ase);GSo=r(aWr,"model.eval()"),aWr.forEach(t),OSo=r(z4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=n(z4e,"CODE",{});var nWr=s(Lse);XSo=r(nWr,"model.train()"),nWr.forEach(t),z4e.forEach(t),zSo=i(Vt),Bse=n(Vt,"P",{});var sWr=s(Bse);VSo=r(sWr,"Examples:"),sWr.forEach(t),WSo=i(Vt),m(dE.$$.fragment,Vt),Vt.forEach(t),dl.forEach(t),s0e=i(d),Ad=n(d,"H2",{class:!0});var c9e=s(Ad);x2=n(c9e,"A",{id:!0,class:!0,href:!0});var lWr=s(x2);xse=n(lWr,"SPAN",{});var iWr=s(xse);m(cE.$$.fragment,iWr),iWr.forEach(t),lWr.forEach(t),QSo=i(c9e),kse=n(c9e,"SPAN",{});var dWr=s(kse);HSo=r(dWr,"AutoModelForSpeechSeq2Seq"),dWr.forEach(t),c9e.forEach(t),l0e=i(d),nr=n(d,"DIV",{class:!0});var fl=s(nr);m(fE.$$.fragment,fl),USo=i(fl),Ld=n(fl,"P",{});var xX=s(Ld);JSo=r(xX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rse=n(xX,"CODE",{});var cWr=s(Rse);YSo=r(cWr,"from_pretrained()"),cWr.forEach(t),KSo=r(xX,"class method or the "),Sse=n(xX,"CODE",{});var fWr=s(Sse);ZSo=r(fWr,"from_config()"),fWr.forEach(t),ePo=r(xX,`class
method.`),xX.forEach(t),oPo=i(fl),mE=n(fl,"P",{});var f9e=s(mE);rPo=r(f9e,"This class cannot be instantiated directly using "),Pse=n(f9e,"CODE",{});var mWr=s(Pse);tPo=r(mWr,"__init__()"),mWr.forEach(t),aPo=r(f9e," (throws an error)."),f9e.forEach(t),nPo=i(fl),Yr=n(fl,"DIV",{class:!0});var ml=s(Yr);m(gE.$$.fragment,ml),sPo=i(ml),$se=n(ml,"P",{});var gWr=s($se);lPo=r(gWr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gWr.forEach(t),iPo=i(ml),Bd=n(ml,"P",{});var kX=s(Bd);dPo=r(kX,`Note:
Loading a model from its configuration file does `),Ise=n(kX,"STRONG",{});var hWr=s(Ise);cPo=r(hWr,"not"),hWr.forEach(t),fPo=r(kX,` load the model weights. It only affects the
model\u2019s configuration. Use `),jse=n(kX,"CODE",{});var pWr=s(jse);mPo=r(pWr,"from_pretrained()"),pWr.forEach(t),gPo=r(kX,"to load the model weights."),kX.forEach(t),hPo=i(ml),Nse=n(ml,"P",{});var _Wr=s(Nse);pPo=r(_Wr,"Examples:"),_Wr.forEach(t),_Po=i(ml),m(hE.$$.fragment,ml),ml.forEach(t),uPo=i(fl),We=n(fl,"DIV",{class:!0});var Qt=s(We);m(pE.$$.fragment,Qt),bPo=i(Qt),Dse=n(Qt,"P",{});var uWr=s(Dse);vPo=r(uWr,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),uWr.forEach(t),TPo=i(Qt),Ya=n(Qt,"P",{});var JF=s(Ya);FPo=r(JF,"The model class to instantiate is selected based on the "),qse=n(JF,"CODE",{});var bWr=s(qse);CPo=r(bWr,"model_type"),bWr.forEach(t),MPo=r(JF,` property of the config object (either
passed as an argument or loaded from `),Gse=n(JF,"CODE",{});var vWr=s(Gse);EPo=r(vWr,"pretrained_model_name_or_path"),vWr.forEach(t),yPo=r(JF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=n(JF,"CODE",{});var TWr=s(Ose);wPo=r(TWr,"pretrained_model_name_or_path"),TWr.forEach(t),APo=r(JF,":"),JF.forEach(t),LPo=i(Qt),_E=n(Qt,"UL",{});var m9e=s(_E);k2=n(m9e,"LI",{});var V4e=s(k2);Xse=n(V4e,"STRONG",{});var FWr=s(Xse);BPo=r(FWr,"speech-encoder-decoder"),FWr.forEach(t),xPo=r(V4e," \u2014 "),Aj=n(V4e,"A",{href:!0});var CWr=s(Aj);kPo=r(CWr,"SpeechEncoderDecoderModel"),CWr.forEach(t),RPo=r(V4e," (Speech Encoder decoder model)"),V4e.forEach(t),SPo=i(m9e),R2=n(m9e,"LI",{});var W4e=s(R2);zse=n(W4e,"STRONG",{});var MWr=s(zse);PPo=r(MWr,"speech_to_text"),MWr.forEach(t),$Po=r(W4e," \u2014 "),Lj=n(W4e,"A",{href:!0});var EWr=s(Lj);IPo=r(EWr,"Speech2TextForConditionalGeneration"),EWr.forEach(t),jPo=r(W4e," (Speech2Text model)"),W4e.forEach(t),m9e.forEach(t),NPo=i(Qt),S2=n(Qt,"P",{});var Q4e=s(S2);DPo=r(Q4e,"The model is set in evaluation mode by default using "),Vse=n(Q4e,"CODE",{});var yWr=s(Vse);qPo=r(yWr,"model.eval()"),yWr.forEach(t),GPo=r(Q4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=n(Q4e,"CODE",{});var wWr=s(Wse);OPo=r(wWr,"model.train()"),wWr.forEach(t),Q4e.forEach(t),XPo=i(Qt),Qse=n(Qt,"P",{});var AWr=s(Qse);zPo=r(AWr,"Examples:"),AWr.forEach(t),VPo=i(Qt),m(uE.$$.fragment,Qt),Qt.forEach(t),fl.forEach(t),i0e=i(d),xd=n(d,"H2",{class:!0});var g9e=s(xd);P2=n(g9e,"A",{id:!0,class:!0,href:!0});var LWr=s(P2);Hse=n(LWr,"SPAN",{});var BWr=s(Hse);m(bE.$$.fragment,BWr),BWr.forEach(t),LWr.forEach(t),WPo=i(g9e),Use=n(g9e,"SPAN",{});var xWr=s(Use);QPo=r(xWr,"AutoModelForAudioXVector"),xWr.forEach(t),g9e.forEach(t),d0e=i(d),sr=n(d,"DIV",{class:!0});var gl=s(sr);m(vE.$$.fragment,gl),HPo=i(gl),kd=n(gl,"P",{});var RX=s(kd);UPo=r(RX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jse=n(RX,"CODE",{});var kWr=s(Jse);JPo=r(kWr,"from_pretrained()"),kWr.forEach(t),YPo=r(RX,"class method or the "),Yse=n(RX,"CODE",{});var RWr=s(Yse);KPo=r(RWr,"from_config()"),RWr.forEach(t),ZPo=r(RX,`class
method.`),RX.forEach(t),e$o=i(gl),TE=n(gl,"P",{});var h9e=s(TE);o$o=r(h9e,"This class cannot be instantiated directly using "),Kse=n(h9e,"CODE",{});var SWr=s(Kse);r$o=r(SWr,"__init__()"),SWr.forEach(t),t$o=r(h9e," (throws an error)."),h9e.forEach(t),a$o=i(gl),Kr=n(gl,"DIV",{class:!0});var hl=s(Kr);m(FE.$$.fragment,hl),n$o=i(hl),Zse=n(hl,"P",{});var PWr=s(Zse);s$o=r(PWr,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),PWr.forEach(t),l$o=i(hl),Rd=n(hl,"P",{});var SX=s(Rd);i$o=r(SX,`Note:
Loading a model from its configuration file does `),ele=n(SX,"STRONG",{});var $Wr=s(ele);d$o=r($Wr,"not"),$Wr.forEach(t),c$o=r(SX,` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=n(SX,"CODE",{});var IWr=s(ole);f$o=r(IWr,"from_pretrained()"),IWr.forEach(t),m$o=r(SX,"to load the model weights."),SX.forEach(t),g$o=i(hl),rle=n(hl,"P",{});var jWr=s(rle);h$o=r(jWr,"Examples:"),jWr.forEach(t),p$o=i(hl),m(CE.$$.fragment,hl),hl.forEach(t),_$o=i(gl),Qe=n(gl,"DIV",{class:!0});var Ht=s(Qe);m(ME.$$.fragment,Ht),u$o=i(Ht),tle=n(Ht,"P",{});var NWr=s(tle);b$o=r(NWr,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),NWr.forEach(t),v$o=i(Ht),Ka=n(Ht,"P",{});var YF=s(Ka);T$o=r(YF,"The model class to instantiate is selected based on the "),ale=n(YF,"CODE",{});var DWr=s(ale);F$o=r(DWr,"model_type"),DWr.forEach(t),C$o=r(YF,` property of the config object (either
passed as an argument or loaded from `),nle=n(YF,"CODE",{});var qWr=s(nle);M$o=r(qWr,"pretrained_model_name_or_path"),qWr.forEach(t),E$o=r(YF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=n(YF,"CODE",{});var GWr=s(sle);y$o=r(GWr,"pretrained_model_name_or_path"),GWr.forEach(t),w$o=r(YF,":"),YF.forEach(t),A$o=i(Ht),Sd=n(Ht,"UL",{});var PX=s(Sd);$2=n(PX,"LI",{});var H4e=s($2);lle=n(H4e,"STRONG",{});var OWr=s(lle);L$o=r(OWr,"unispeech-sat"),OWr.forEach(t),B$o=r(H4e," \u2014 "),Bj=n(H4e,"A",{href:!0});var XWr=s(Bj);x$o=r(XWr,"UniSpeechSatForXVector"),XWr.forEach(t),k$o=r(H4e," (UniSpeechSat model)"),H4e.forEach(t),R$o=i(PX),I2=n(PX,"LI",{});var U4e=s(I2);ile=n(U4e,"STRONG",{});var zWr=s(ile);S$o=r(zWr,"wav2vec2"),zWr.forEach(t),P$o=r(U4e," \u2014 "),xj=n(U4e,"A",{href:!0});var VWr=s(xj);$$o=r(VWr,"Wav2Vec2ForXVector"),VWr.forEach(t),I$o=r(U4e," (Wav2Vec2 model)"),U4e.forEach(t),j$o=i(PX),j2=n(PX,"LI",{});var J4e=s(j2);dle=n(J4e,"STRONG",{});var WWr=s(dle);N$o=r(WWr,"wavlm"),WWr.forEach(t),D$o=r(J4e," \u2014 "),kj=n(J4e,"A",{href:!0});var QWr=s(kj);q$o=r(QWr,"WavLMForXVector"),QWr.forEach(t),G$o=r(J4e," (WavLM model)"),J4e.forEach(t),PX.forEach(t),O$o=i(Ht),N2=n(Ht,"P",{});var Y4e=s(N2);X$o=r(Y4e,"The model is set in evaluation mode by default using "),cle=n(Y4e,"CODE",{});var HWr=s(cle);z$o=r(HWr,"model.eval()"),HWr.forEach(t),V$o=r(Y4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=n(Y4e,"CODE",{});var UWr=s(fle);W$o=r(UWr,"model.train()"),UWr.forEach(t),Y4e.forEach(t),Q$o=i(Ht),mle=n(Ht,"P",{});var JWr=s(mle);H$o=r(JWr,"Examples:"),JWr.forEach(t),U$o=i(Ht),m(EE.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),c0e=i(d),Pd=n(d,"H2",{class:!0});var p9e=s(Pd);D2=n(p9e,"A",{id:!0,class:!0,href:!0});var YWr=s(D2);gle=n(YWr,"SPAN",{});var KWr=s(gle);m(yE.$$.fragment,KWr),KWr.forEach(t),YWr.forEach(t),J$o=i(p9e),hle=n(p9e,"SPAN",{});var ZWr=s(hle);Y$o=r(ZWr,"AutoModelForObjectDetection"),ZWr.forEach(t),p9e.forEach(t),f0e=i(d),lr=n(d,"DIV",{class:!0});var pl=s(lr);m(wE.$$.fragment,pl),K$o=i(pl),$d=n(pl,"P",{});var $X=s($d);Z$o=r($X,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ple=n($X,"CODE",{});var eQr=s(ple);eIo=r(eQr,"from_pretrained()"),eQr.forEach(t),oIo=r($X,"class method or the "),_le=n($X,"CODE",{});var oQr=s(_le);rIo=r(oQr,"from_config()"),oQr.forEach(t),tIo=r($X,`class
method.`),$X.forEach(t),aIo=i(pl),AE=n(pl,"P",{});var _9e=s(AE);nIo=r(_9e,"This class cannot be instantiated directly using "),ule=n(_9e,"CODE",{});var rQr=s(ule);sIo=r(rQr,"__init__()"),rQr.forEach(t),lIo=r(_9e," (throws an error)."),_9e.forEach(t),iIo=i(pl),Zr=n(pl,"DIV",{class:!0});var _l=s(Zr);m(LE.$$.fragment,_l),dIo=i(_l),ble=n(_l,"P",{});var tQr=s(ble);cIo=r(tQr,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tQr.forEach(t),fIo=i(_l),Id=n(_l,"P",{});var IX=s(Id);mIo=r(IX,`Note:
Loading a model from its configuration file does `),vle=n(IX,"STRONG",{});var aQr=s(vle);gIo=r(aQr,"not"),aQr.forEach(t),hIo=r(IX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=n(IX,"CODE",{});var nQr=s(Tle);pIo=r(nQr,"from_pretrained()"),nQr.forEach(t),_Io=r(IX,"to load the model weights."),IX.forEach(t),uIo=i(_l),Fle=n(_l,"P",{});var sQr=s(Fle);bIo=r(sQr,"Examples:"),sQr.forEach(t),vIo=i(_l),m(BE.$$.fragment,_l),_l.forEach(t),TIo=i(pl),He=n(pl,"DIV",{class:!0});var Ut=s(He);m(xE.$$.fragment,Ut),FIo=i(Ut),Cle=n(Ut,"P",{});var lQr=s(Cle);CIo=r(lQr,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lQr.forEach(t),MIo=i(Ut),Za=n(Ut,"P",{});var KF=s(Za);EIo=r(KF,"The model class to instantiate is selected based on the "),Mle=n(KF,"CODE",{});var iQr=s(Mle);yIo=r(iQr,"model_type"),iQr.forEach(t),wIo=r(KF,` property of the config object (either
passed as an argument or loaded from `),Ele=n(KF,"CODE",{});var dQr=s(Ele);AIo=r(dQr,"pretrained_model_name_or_path"),dQr.forEach(t),LIo=r(KF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=n(KF,"CODE",{});var cQr=s(yle);BIo=r(cQr,"pretrained_model_name_or_path"),cQr.forEach(t),xIo=r(KF,":"),KF.forEach(t),kIo=i(Ut),wle=n(Ut,"UL",{});var fQr=s(wle);q2=n(fQr,"LI",{});var K4e=s(q2);Ale=n(K4e,"STRONG",{});var mQr=s(Ale);RIo=r(mQr,"detr"),mQr.forEach(t),SIo=r(K4e," \u2014 "),Rj=n(K4e,"A",{href:!0});var gQr=s(Rj);PIo=r(gQr,"DetrForObjectDetection"),gQr.forEach(t),$Io=r(K4e," (DETR model)"),K4e.forEach(t),fQr.forEach(t),IIo=i(Ut),G2=n(Ut,"P",{});var Z4e=s(G2);jIo=r(Z4e,"The model is set in evaluation mode by default using "),Lle=n(Z4e,"CODE",{});var hQr=s(Lle);NIo=r(hQr,"model.eval()"),hQr.forEach(t),DIo=r(Z4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=n(Z4e,"CODE",{});var pQr=s(Ble);qIo=r(pQr,"model.train()"),pQr.forEach(t),Z4e.forEach(t),GIo=i(Ut),xle=n(Ut,"P",{});var _Qr=s(xle);OIo=r(_Qr,"Examples:"),_Qr.forEach(t),XIo=i(Ut),m(kE.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),m0e=i(d),jd=n(d,"H2",{class:!0});var u9e=s(jd);O2=n(u9e,"A",{id:!0,class:!0,href:!0});var uQr=s(O2);kle=n(uQr,"SPAN",{});var bQr=s(kle);m(RE.$$.fragment,bQr),bQr.forEach(t),uQr.forEach(t),zIo=i(u9e),Rle=n(u9e,"SPAN",{});var vQr=s(Rle);VIo=r(vQr,"AutoModelForImageSegmentation"),vQr.forEach(t),u9e.forEach(t),g0e=i(d),ir=n(d,"DIV",{class:!0});var ul=s(ir);m(SE.$$.fragment,ul),WIo=i(ul),Nd=n(ul,"P",{});var jX=s(Nd);QIo=r(jX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Sle=n(jX,"CODE",{});var TQr=s(Sle);HIo=r(TQr,"from_pretrained()"),TQr.forEach(t),UIo=r(jX,"class method or the "),Ple=n(jX,"CODE",{});var FQr=s(Ple);JIo=r(FQr,"from_config()"),FQr.forEach(t),YIo=r(jX,`class
method.`),jX.forEach(t),KIo=i(ul),PE=n(ul,"P",{});var b9e=s(PE);ZIo=r(b9e,"This class cannot be instantiated directly using "),$le=n(b9e,"CODE",{});var CQr=s($le);ejo=r(CQr,"__init__()"),CQr.forEach(t),ojo=r(b9e," (throws an error)."),b9e.forEach(t),rjo=i(ul),et=n(ul,"DIV",{class:!0});var bl=s(et);m($E.$$.fragment,bl),tjo=i(bl),Ile=n(bl,"P",{});var MQr=s(Ile);ajo=r(MQr,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),MQr.forEach(t),njo=i(bl),Dd=n(bl,"P",{});var NX=s(Dd);sjo=r(NX,`Note:
Loading a model from its configuration file does `),jle=n(NX,"STRONG",{});var EQr=s(jle);ljo=r(EQr,"not"),EQr.forEach(t),ijo=r(NX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nle=n(NX,"CODE",{});var yQr=s(Nle);djo=r(yQr,"from_pretrained()"),yQr.forEach(t),cjo=r(NX,"to load the model weights."),NX.forEach(t),fjo=i(bl),Dle=n(bl,"P",{});var wQr=s(Dle);mjo=r(wQr,"Examples:"),wQr.forEach(t),gjo=i(bl),m(IE.$$.fragment,bl),bl.forEach(t),hjo=i(ul),Ue=n(ul,"DIV",{class:!0});var Jt=s(Ue);m(jE.$$.fragment,Jt),pjo=i(Jt),qle=n(Jt,"P",{});var AQr=s(qle);_jo=r(AQr,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),AQr.forEach(t),ujo=i(Jt),en=n(Jt,"P",{});var ZF=s(en);bjo=r(ZF,"The model class to instantiate is selected based on the "),Gle=n(ZF,"CODE",{});var LQr=s(Gle);vjo=r(LQr,"model_type"),LQr.forEach(t),Tjo=r(ZF,` property of the config object (either
passed as an argument or loaded from `),Ole=n(ZF,"CODE",{});var BQr=s(Ole);Fjo=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),Cjo=r(ZF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=n(ZF,"CODE",{});var xQr=s(Xle);Mjo=r(xQr,"pretrained_model_name_or_path"),xQr.forEach(t),Ejo=r(ZF,":"),ZF.forEach(t),yjo=i(Jt),zle=n(Jt,"UL",{});var kQr=s(zle);X2=n(kQr,"LI",{});var eMe=s(X2);Vle=n(eMe,"STRONG",{});var RQr=s(Vle);wjo=r(RQr,"detr"),RQr.forEach(t),Ajo=r(eMe," \u2014 "),Sj=n(eMe,"A",{href:!0});var SQr=s(Sj);Ljo=r(SQr,"DetrForSegmentation"),SQr.forEach(t),Bjo=r(eMe," (DETR model)"),eMe.forEach(t),kQr.forEach(t),xjo=i(Jt),z2=n(Jt,"P",{});var oMe=s(z2);kjo=r(oMe,"The model is set in evaluation mode by default using "),Wle=n(oMe,"CODE",{});var PQr=s(Wle);Rjo=r(PQr,"model.eval()"),PQr.forEach(t),Sjo=r(oMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=n(oMe,"CODE",{});var $Qr=s(Qle);Pjo=r($Qr,"model.train()"),$Qr.forEach(t),oMe.forEach(t),$jo=i(Jt),Hle=n(Jt,"P",{});var IQr=s(Hle);Ijo=r(IQr,"Examples:"),IQr.forEach(t),jjo=i(Jt),m(NE.$$.fragment,Jt),Jt.forEach(t),ul.forEach(t),h0e=i(d),qd=n(d,"H2",{class:!0});var v9e=s(qd);V2=n(v9e,"A",{id:!0,class:!0,href:!0});var jQr=s(V2);Ule=n(jQr,"SPAN",{});var NQr=s(Ule);m(DE.$$.fragment,NQr),NQr.forEach(t),jQr.forEach(t),Njo=i(v9e),Jle=n(v9e,"SPAN",{});var DQr=s(Jle);Djo=r(DQr,"AutoModelForSemanticSegmentation"),DQr.forEach(t),v9e.forEach(t),p0e=i(d),dr=n(d,"DIV",{class:!0});var vl=s(dr);m(qE.$$.fragment,vl),qjo=i(vl),Gd=n(vl,"P",{});var DX=s(Gd);Gjo=r(DX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Yle=n(DX,"CODE",{});var qQr=s(Yle);Ojo=r(qQr,"from_pretrained()"),qQr.forEach(t),Xjo=r(DX,"class method or the "),Kle=n(DX,"CODE",{});var GQr=s(Kle);zjo=r(GQr,"from_config()"),GQr.forEach(t),Vjo=r(DX,`class
method.`),DX.forEach(t),Wjo=i(vl),GE=n(vl,"P",{});var T9e=s(GE);Qjo=r(T9e,"This class cannot be instantiated directly using "),Zle=n(T9e,"CODE",{});var OQr=s(Zle);Hjo=r(OQr,"__init__()"),OQr.forEach(t),Ujo=r(T9e," (throws an error)."),T9e.forEach(t),Jjo=i(vl),ot=n(vl,"DIV",{class:!0});var Tl=s(ot);m(OE.$$.fragment,Tl),Yjo=i(Tl),eie=n(Tl,"P",{});var XQr=s(eie);Kjo=r(XQr,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),XQr.forEach(t),Zjo=i(Tl),Od=n(Tl,"P",{});var qX=s(Od);eNo=r(qX,`Note:
Loading a model from its configuration file does `),oie=n(qX,"STRONG",{});var zQr=s(oie);oNo=r(zQr,"not"),zQr.forEach(t),rNo=r(qX,` load the model weights. It only affects the
model\u2019s configuration. Use `),rie=n(qX,"CODE",{});var VQr=s(rie);tNo=r(VQr,"from_pretrained()"),VQr.forEach(t),aNo=r(qX,"to load the model weights."),qX.forEach(t),nNo=i(Tl),tie=n(Tl,"P",{});var WQr=s(tie);sNo=r(WQr,"Examples:"),WQr.forEach(t),lNo=i(Tl),m(XE.$$.fragment,Tl),Tl.forEach(t),iNo=i(vl),Je=n(vl,"DIV",{class:!0});var Yt=s(Je);m(zE.$$.fragment,Yt),dNo=i(Yt),aie=n(Yt,"P",{});var QQr=s(aie);cNo=r(QQr,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),QQr.forEach(t),fNo=i(Yt),on=n(Yt,"P",{});var eC=s(on);mNo=r(eC,"The model class to instantiate is selected based on the "),nie=n(eC,"CODE",{});var HQr=s(nie);gNo=r(HQr,"model_type"),HQr.forEach(t),hNo=r(eC,` property of the config object (either
passed as an argument or loaded from `),sie=n(eC,"CODE",{});var UQr=s(sie);pNo=r(UQr,"pretrained_model_name_or_path"),UQr.forEach(t),_No=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=n(eC,"CODE",{});var JQr=s(lie);uNo=r(JQr,"pretrained_model_name_or_path"),JQr.forEach(t),bNo=r(eC,":"),eC.forEach(t),vNo=i(Yt),VE=n(Yt,"UL",{});var F9e=s(VE);W2=n(F9e,"LI",{});var rMe=s(W2);iie=n(rMe,"STRONG",{});var YQr=s(iie);TNo=r(YQr,"beit"),YQr.forEach(t),FNo=r(rMe," \u2014 "),Pj=n(rMe,"A",{href:!0});var KQr=s(Pj);CNo=r(KQr,"BeitForSemanticSegmentation"),KQr.forEach(t),MNo=r(rMe," (BEiT model)"),rMe.forEach(t),ENo=i(F9e),Q2=n(F9e,"LI",{});var tMe=s(Q2);die=n(tMe,"STRONG",{});var ZQr=s(die);yNo=r(ZQr,"segformer"),ZQr.forEach(t),wNo=r(tMe," \u2014 "),$j=n(tMe,"A",{href:!0});var eHr=s($j);ANo=r(eHr,"SegformerForSemanticSegmentation"),eHr.forEach(t),LNo=r(tMe," (SegFormer model)"),tMe.forEach(t),F9e.forEach(t),BNo=i(Yt),H2=n(Yt,"P",{});var aMe=s(H2);xNo=r(aMe,"The model is set in evaluation mode by default using "),cie=n(aMe,"CODE",{});var oHr=s(cie);kNo=r(oHr,"model.eval()"),oHr.forEach(t),RNo=r(aMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=n(aMe,"CODE",{});var rHr=s(fie);SNo=r(rHr,"model.train()"),rHr.forEach(t),aMe.forEach(t),PNo=i(Yt),mie=n(Yt,"P",{});var tHr=s(mie);$No=r(tHr,"Examples:"),tHr.forEach(t),INo=i(Yt),m(WE.$$.fragment,Yt),Yt.forEach(t),vl.forEach(t),_0e=i(d),Xd=n(d,"H2",{class:!0});var C9e=s(Xd);U2=n(C9e,"A",{id:!0,class:!0,href:!0});var aHr=s(U2);gie=n(aHr,"SPAN",{});var nHr=s(gie);m(QE.$$.fragment,nHr),nHr.forEach(t),aHr.forEach(t),jNo=i(C9e),hie=n(C9e,"SPAN",{});var sHr=s(hie);NNo=r(sHr,"TFAutoModel"),sHr.forEach(t),C9e.forEach(t),u0e=i(d),cr=n(d,"DIV",{class:!0});var Fl=s(cr);m(HE.$$.fragment,Fl),DNo=i(Fl),zd=n(Fl,"P",{});var GX=s(zd);qNo=r(GX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pie=n(GX,"CODE",{});var lHr=s(pie);GNo=r(lHr,"from_pretrained()"),lHr.forEach(t),ONo=r(GX,"class method or the "),_ie=n(GX,"CODE",{});var iHr=s(_ie);XNo=r(iHr,"from_config()"),iHr.forEach(t),zNo=r(GX,`class
method.`),GX.forEach(t),VNo=i(Fl),UE=n(Fl,"P",{});var M9e=s(UE);WNo=r(M9e,"This class cannot be instantiated directly using "),uie=n(M9e,"CODE",{});var dHr=s(uie);QNo=r(dHr,"__init__()"),dHr.forEach(t),HNo=r(M9e," (throws an error)."),M9e.forEach(t),UNo=i(Fl),rt=n(Fl,"DIV",{class:!0});var Cl=s(rt);m(JE.$$.fragment,Cl),JNo=i(Cl),bie=n(Cl,"P",{});var cHr=s(bie);YNo=r(cHr,"Instantiates one of the base model classes of the library from a configuration."),cHr.forEach(t),KNo=i(Cl),Vd=n(Cl,"P",{});var OX=s(Vd);ZNo=r(OX,`Note:
Loading a model from its configuration file does `),vie=n(OX,"STRONG",{});var fHr=s(vie);eDo=r(fHr,"not"),fHr.forEach(t),oDo=r(OX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tie=n(OX,"CODE",{});var mHr=s(Tie);rDo=r(mHr,"from_pretrained()"),mHr.forEach(t),tDo=r(OX,"to load the model weights."),OX.forEach(t),aDo=i(Cl),Fie=n(Cl,"P",{});var gHr=s(Fie);nDo=r(gHr,"Examples:"),gHr.forEach(t),sDo=i(Cl),m(YE.$$.fragment,Cl),Cl.forEach(t),lDo=i(Fl),fo=n(Fl,"DIV",{class:!0});var sa=s(fo);m(KE.$$.fragment,sa),iDo=i(sa),Cie=n(sa,"P",{});var hHr=s(Cie);dDo=r(hHr,"Instantiate one of the base model classes of the library from a pretrained model."),hHr.forEach(t),cDo=i(sa),rn=n(sa,"P",{});var oC=s(rn);fDo=r(oC,"The model class to instantiate is selected based on the "),Mie=n(oC,"CODE",{});var pHr=s(Mie);mDo=r(pHr,"model_type"),pHr.forEach(t),gDo=r(oC,` property of the config object (either
passed as an argument or loaded from `),Eie=n(oC,"CODE",{});var _Hr=s(Eie);hDo=r(_Hr,"pretrained_model_name_or_path"),_Hr.forEach(t),pDo=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(oC,"CODE",{});var uHr=s(yie);_Do=r(uHr,"pretrained_model_name_or_path"),uHr.forEach(t),uDo=r(oC,":"),oC.forEach(t),bDo=i(sa),B=n(sa,"UL",{});var x=s(B);J2=n(x,"LI",{});var nMe=s(J2);wie=n(nMe,"STRONG",{});var bHr=s(wie);vDo=r(bHr,"albert"),bHr.forEach(t),TDo=r(nMe," \u2014 "),Ij=n(nMe,"A",{href:!0});var vHr=s(Ij);FDo=r(vHr,"TFAlbertModel"),vHr.forEach(t),CDo=r(nMe," (ALBERT model)"),nMe.forEach(t),MDo=i(x),Y2=n(x,"LI",{});var sMe=s(Y2);Aie=n(sMe,"STRONG",{});var THr=s(Aie);EDo=r(THr,"bart"),THr.forEach(t),yDo=r(sMe," \u2014 "),jj=n(sMe,"A",{href:!0});var FHr=s(jj);wDo=r(FHr,"TFBartModel"),FHr.forEach(t),ADo=r(sMe," (BART model)"),sMe.forEach(t),LDo=i(x),K2=n(x,"LI",{});var lMe=s(K2);Lie=n(lMe,"STRONG",{});var CHr=s(Lie);BDo=r(CHr,"bert"),CHr.forEach(t),xDo=r(lMe," \u2014 "),Nj=n(lMe,"A",{href:!0});var MHr=s(Nj);kDo=r(MHr,"TFBertModel"),MHr.forEach(t),RDo=r(lMe," (BERT model)"),lMe.forEach(t),SDo=i(x),Z2=n(x,"LI",{});var iMe=s(Z2);Bie=n(iMe,"STRONG",{});var EHr=s(Bie);PDo=r(EHr,"blenderbot"),EHr.forEach(t),$Do=r(iMe," \u2014 "),Dj=n(iMe,"A",{href:!0});var yHr=s(Dj);IDo=r(yHr,"TFBlenderbotModel"),yHr.forEach(t),jDo=r(iMe," (Blenderbot model)"),iMe.forEach(t),NDo=i(x),ev=n(x,"LI",{});var dMe=s(ev);xie=n(dMe,"STRONG",{});var wHr=s(xie);DDo=r(wHr,"blenderbot-small"),wHr.forEach(t),qDo=r(dMe," \u2014 "),qj=n(dMe,"A",{href:!0});var AHr=s(qj);GDo=r(AHr,"TFBlenderbotSmallModel"),AHr.forEach(t),ODo=r(dMe," (BlenderbotSmall model)"),dMe.forEach(t),XDo=i(x),ov=n(x,"LI",{});var cMe=s(ov);kie=n(cMe,"STRONG",{});var LHr=s(kie);zDo=r(LHr,"camembert"),LHr.forEach(t),VDo=r(cMe," \u2014 "),Gj=n(cMe,"A",{href:!0});var BHr=s(Gj);WDo=r(BHr,"TFCamembertModel"),BHr.forEach(t),QDo=r(cMe," (CamemBERT model)"),cMe.forEach(t),HDo=i(x),rv=n(x,"LI",{});var fMe=s(rv);Rie=n(fMe,"STRONG",{});var xHr=s(Rie);UDo=r(xHr,"clip"),xHr.forEach(t),JDo=r(fMe," \u2014 "),Oj=n(fMe,"A",{href:!0});var kHr=s(Oj);YDo=r(kHr,"TFCLIPModel"),kHr.forEach(t),KDo=r(fMe," (CLIP model)"),fMe.forEach(t),ZDo=i(x),tv=n(x,"LI",{});var mMe=s(tv);Sie=n(mMe,"STRONG",{});var RHr=s(Sie);eqo=r(RHr,"convbert"),RHr.forEach(t),oqo=r(mMe," \u2014 "),Xj=n(mMe,"A",{href:!0});var SHr=s(Xj);rqo=r(SHr,"TFConvBertModel"),SHr.forEach(t),tqo=r(mMe," (ConvBERT model)"),mMe.forEach(t),aqo=i(x),av=n(x,"LI",{});var gMe=s(av);Pie=n(gMe,"STRONG",{});var PHr=s(Pie);nqo=r(PHr,"ctrl"),PHr.forEach(t),sqo=r(gMe," \u2014 "),zj=n(gMe,"A",{href:!0});var $Hr=s(zj);lqo=r($Hr,"TFCTRLModel"),$Hr.forEach(t),iqo=r(gMe," (CTRL model)"),gMe.forEach(t),dqo=i(x),nv=n(x,"LI",{});var hMe=s(nv);$ie=n(hMe,"STRONG",{});var IHr=s($ie);cqo=r(IHr,"deberta"),IHr.forEach(t),fqo=r(hMe," \u2014 "),Vj=n(hMe,"A",{href:!0});var jHr=s(Vj);mqo=r(jHr,"TFDebertaModel"),jHr.forEach(t),gqo=r(hMe," (DeBERTa model)"),hMe.forEach(t),hqo=i(x),sv=n(x,"LI",{});var pMe=s(sv);Iie=n(pMe,"STRONG",{});var NHr=s(Iie);pqo=r(NHr,"deberta-v2"),NHr.forEach(t),_qo=r(pMe," \u2014 "),Wj=n(pMe,"A",{href:!0});var DHr=s(Wj);uqo=r(DHr,"TFDebertaV2Model"),DHr.forEach(t),bqo=r(pMe," (DeBERTa-v2 model)"),pMe.forEach(t),vqo=i(x),lv=n(x,"LI",{});var _Me=s(lv);jie=n(_Me,"STRONG",{});var qHr=s(jie);Tqo=r(qHr,"distilbert"),qHr.forEach(t),Fqo=r(_Me," \u2014 "),Qj=n(_Me,"A",{href:!0});var GHr=s(Qj);Cqo=r(GHr,"TFDistilBertModel"),GHr.forEach(t),Mqo=r(_Me," (DistilBERT model)"),_Me.forEach(t),Eqo=i(x),iv=n(x,"LI",{});var uMe=s(iv);Nie=n(uMe,"STRONG",{});var OHr=s(Nie);yqo=r(OHr,"dpr"),OHr.forEach(t),wqo=r(uMe," \u2014 "),Hj=n(uMe,"A",{href:!0});var XHr=s(Hj);Aqo=r(XHr,"TFDPRQuestionEncoder"),XHr.forEach(t),Lqo=r(uMe," (DPR model)"),uMe.forEach(t),Bqo=i(x),dv=n(x,"LI",{});var bMe=s(dv);Die=n(bMe,"STRONG",{});var zHr=s(Die);xqo=r(zHr,"electra"),zHr.forEach(t),kqo=r(bMe," \u2014 "),Uj=n(bMe,"A",{href:!0});var VHr=s(Uj);Rqo=r(VHr,"TFElectraModel"),VHr.forEach(t),Sqo=r(bMe," (ELECTRA model)"),bMe.forEach(t),Pqo=i(x),cv=n(x,"LI",{});var vMe=s(cv);qie=n(vMe,"STRONG",{});var WHr=s(qie);$qo=r(WHr,"flaubert"),WHr.forEach(t),Iqo=r(vMe," \u2014 "),Jj=n(vMe,"A",{href:!0});var QHr=s(Jj);jqo=r(QHr,"TFFlaubertModel"),QHr.forEach(t),Nqo=r(vMe," (FlauBERT model)"),vMe.forEach(t),Dqo=i(x),Ls=n(x,"LI",{});var r0=s(Ls);Gie=n(r0,"STRONG",{});var HHr=s(Gie);qqo=r(HHr,"funnel"),HHr.forEach(t),Gqo=r(r0," \u2014 "),Yj=n(r0,"A",{href:!0});var UHr=s(Yj);Oqo=r(UHr,"TFFunnelModel"),UHr.forEach(t),Xqo=r(r0," or "),Kj=n(r0,"A",{href:!0});var JHr=s(Kj);zqo=r(JHr,"TFFunnelBaseModel"),JHr.forEach(t),Vqo=r(r0," (Funnel Transformer model)"),r0.forEach(t),Wqo=i(x),fv=n(x,"LI",{});var TMe=s(fv);Oie=n(TMe,"STRONG",{});var YHr=s(Oie);Qqo=r(YHr,"gpt2"),YHr.forEach(t),Hqo=r(TMe," \u2014 "),Zj=n(TMe,"A",{href:!0});var KHr=s(Zj);Uqo=r(KHr,"TFGPT2Model"),KHr.forEach(t),Jqo=r(TMe," (OpenAI GPT-2 model)"),TMe.forEach(t),Yqo=i(x),mv=n(x,"LI",{});var FMe=s(mv);Xie=n(FMe,"STRONG",{});var ZHr=s(Xie);Kqo=r(ZHr,"hubert"),ZHr.forEach(t),Zqo=r(FMe," \u2014 "),eN=n(FMe,"A",{href:!0});var eUr=s(eN);eGo=r(eUr,"TFHubertModel"),eUr.forEach(t),oGo=r(FMe," (Hubert model)"),FMe.forEach(t),rGo=i(x),gv=n(x,"LI",{});var CMe=s(gv);zie=n(CMe,"STRONG",{});var oUr=s(zie);tGo=r(oUr,"layoutlm"),oUr.forEach(t),aGo=r(CMe," \u2014 "),oN=n(CMe,"A",{href:!0});var rUr=s(oN);nGo=r(rUr,"TFLayoutLMModel"),rUr.forEach(t),sGo=r(CMe," (LayoutLM model)"),CMe.forEach(t),lGo=i(x),hv=n(x,"LI",{});var MMe=s(hv);Vie=n(MMe,"STRONG",{});var tUr=s(Vie);iGo=r(tUr,"led"),tUr.forEach(t),dGo=r(MMe," \u2014 "),rN=n(MMe,"A",{href:!0});var aUr=s(rN);cGo=r(aUr,"TFLEDModel"),aUr.forEach(t),fGo=r(MMe," (LED model)"),MMe.forEach(t),mGo=i(x),pv=n(x,"LI",{});var EMe=s(pv);Wie=n(EMe,"STRONG",{});var nUr=s(Wie);gGo=r(nUr,"longformer"),nUr.forEach(t),hGo=r(EMe," \u2014 "),tN=n(EMe,"A",{href:!0});var sUr=s(tN);pGo=r(sUr,"TFLongformerModel"),sUr.forEach(t),_Go=r(EMe," (Longformer model)"),EMe.forEach(t),uGo=i(x),_v=n(x,"LI",{});var yMe=s(_v);Qie=n(yMe,"STRONG",{});var lUr=s(Qie);bGo=r(lUr,"lxmert"),lUr.forEach(t),vGo=r(yMe," \u2014 "),aN=n(yMe,"A",{href:!0});var iUr=s(aN);TGo=r(iUr,"TFLxmertModel"),iUr.forEach(t),FGo=r(yMe," (LXMERT model)"),yMe.forEach(t),CGo=i(x),uv=n(x,"LI",{});var wMe=s(uv);Hie=n(wMe,"STRONG",{});var dUr=s(Hie);MGo=r(dUr,"marian"),dUr.forEach(t),EGo=r(wMe," \u2014 "),nN=n(wMe,"A",{href:!0});var cUr=s(nN);yGo=r(cUr,"TFMarianModel"),cUr.forEach(t),wGo=r(wMe," (Marian model)"),wMe.forEach(t),AGo=i(x),bv=n(x,"LI",{});var AMe=s(bv);Uie=n(AMe,"STRONG",{});var fUr=s(Uie);LGo=r(fUr,"mbart"),fUr.forEach(t),BGo=r(AMe," \u2014 "),sN=n(AMe,"A",{href:!0});var mUr=s(sN);xGo=r(mUr,"TFMBartModel"),mUr.forEach(t),kGo=r(AMe," (mBART model)"),AMe.forEach(t),RGo=i(x),vv=n(x,"LI",{});var LMe=s(vv);Jie=n(LMe,"STRONG",{});var gUr=s(Jie);SGo=r(gUr,"mobilebert"),gUr.forEach(t),PGo=r(LMe," \u2014 "),lN=n(LMe,"A",{href:!0});var hUr=s(lN);$Go=r(hUr,"TFMobileBertModel"),hUr.forEach(t),IGo=r(LMe," (MobileBERT model)"),LMe.forEach(t),jGo=i(x),Tv=n(x,"LI",{});var BMe=s(Tv);Yie=n(BMe,"STRONG",{});var pUr=s(Yie);NGo=r(pUr,"mpnet"),pUr.forEach(t),DGo=r(BMe," \u2014 "),iN=n(BMe,"A",{href:!0});var _Ur=s(iN);qGo=r(_Ur,"TFMPNetModel"),_Ur.forEach(t),GGo=r(BMe," (MPNet model)"),BMe.forEach(t),OGo=i(x),Fv=n(x,"LI",{});var xMe=s(Fv);Kie=n(xMe,"STRONG",{});var uUr=s(Kie);XGo=r(uUr,"mt5"),uUr.forEach(t),zGo=r(xMe," \u2014 "),dN=n(xMe,"A",{href:!0});var bUr=s(dN);VGo=r(bUr,"TFMT5Model"),bUr.forEach(t),WGo=r(xMe," (mT5 model)"),xMe.forEach(t),QGo=i(x),Cv=n(x,"LI",{});var kMe=s(Cv);Zie=n(kMe,"STRONG",{});var vUr=s(Zie);HGo=r(vUr,"openai-gpt"),vUr.forEach(t),UGo=r(kMe," \u2014 "),cN=n(kMe,"A",{href:!0});var TUr=s(cN);JGo=r(TUr,"TFOpenAIGPTModel"),TUr.forEach(t),YGo=r(kMe," (OpenAI GPT model)"),kMe.forEach(t),KGo=i(x),Mv=n(x,"LI",{});var RMe=s(Mv);ede=n(RMe,"STRONG",{});var FUr=s(ede);ZGo=r(FUr,"pegasus"),FUr.forEach(t),eOo=r(RMe," \u2014 "),fN=n(RMe,"A",{href:!0});var CUr=s(fN);oOo=r(CUr,"TFPegasusModel"),CUr.forEach(t),rOo=r(RMe," (Pegasus model)"),RMe.forEach(t),tOo=i(x),Ev=n(x,"LI",{});var SMe=s(Ev);ode=n(SMe,"STRONG",{});var MUr=s(ode);aOo=r(MUr,"rembert"),MUr.forEach(t),nOo=r(SMe," \u2014 "),mN=n(SMe,"A",{href:!0});var EUr=s(mN);sOo=r(EUr,"TFRemBertModel"),EUr.forEach(t),lOo=r(SMe," (RemBERT model)"),SMe.forEach(t),iOo=i(x),yv=n(x,"LI",{});var PMe=s(yv);rde=n(PMe,"STRONG",{});var yUr=s(rde);dOo=r(yUr,"roberta"),yUr.forEach(t),cOo=r(PMe," \u2014 "),gN=n(PMe,"A",{href:!0});var wUr=s(gN);fOo=r(wUr,"TFRobertaModel"),wUr.forEach(t),mOo=r(PMe," (RoBERTa model)"),PMe.forEach(t),gOo=i(x),wv=n(x,"LI",{});var $Me=s(wv);tde=n($Me,"STRONG",{});var AUr=s(tde);hOo=r(AUr,"roformer"),AUr.forEach(t),pOo=r($Me," \u2014 "),hN=n($Me,"A",{href:!0});var LUr=s(hN);_Oo=r(LUr,"TFRoFormerModel"),LUr.forEach(t),uOo=r($Me," (RoFormer model)"),$Me.forEach(t),bOo=i(x),Av=n(x,"LI",{});var IMe=s(Av);ade=n(IMe,"STRONG",{});var BUr=s(ade);vOo=r(BUr,"speech_to_text"),BUr.forEach(t),TOo=r(IMe," \u2014 "),pN=n(IMe,"A",{href:!0});var xUr=s(pN);FOo=r(xUr,"TFSpeech2TextModel"),xUr.forEach(t),COo=r(IMe," (Speech2Text model)"),IMe.forEach(t),MOo=i(x),Lv=n(x,"LI",{});var jMe=s(Lv);nde=n(jMe,"STRONG",{});var kUr=s(nde);EOo=r(kUr,"t5"),kUr.forEach(t),yOo=r(jMe," \u2014 "),_N=n(jMe,"A",{href:!0});var RUr=s(_N);wOo=r(RUr,"TFT5Model"),RUr.forEach(t),AOo=r(jMe," (T5 model)"),jMe.forEach(t),LOo=i(x),Bv=n(x,"LI",{});var NMe=s(Bv);sde=n(NMe,"STRONG",{});var SUr=s(sde);BOo=r(SUr,"tapas"),SUr.forEach(t),xOo=r(NMe," \u2014 "),uN=n(NMe,"A",{href:!0});var PUr=s(uN);kOo=r(PUr,"TFTapasModel"),PUr.forEach(t),ROo=r(NMe," (TAPAS model)"),NMe.forEach(t),SOo=i(x),xv=n(x,"LI",{});var DMe=s(xv);lde=n(DMe,"STRONG",{});var $Ur=s(lde);POo=r($Ur,"transfo-xl"),$Ur.forEach(t),$Oo=r(DMe," \u2014 "),bN=n(DMe,"A",{href:!0});var IUr=s(bN);IOo=r(IUr,"TFTransfoXLModel"),IUr.forEach(t),jOo=r(DMe," (Transformer-XL model)"),DMe.forEach(t),NOo=i(x),kv=n(x,"LI",{});var qMe=s(kv);ide=n(qMe,"STRONG",{});var jUr=s(ide);DOo=r(jUr,"vit"),jUr.forEach(t),qOo=r(qMe," \u2014 "),vN=n(qMe,"A",{href:!0});var NUr=s(vN);GOo=r(NUr,"TFViTModel"),NUr.forEach(t),OOo=r(qMe," (ViT model)"),qMe.forEach(t),XOo=i(x),Rv=n(x,"LI",{});var GMe=s(Rv);dde=n(GMe,"STRONG",{});var DUr=s(dde);zOo=r(DUr,"wav2vec2"),DUr.forEach(t),VOo=r(GMe," \u2014 "),TN=n(GMe,"A",{href:!0});var qUr=s(TN);WOo=r(qUr,"TFWav2Vec2Model"),qUr.forEach(t),QOo=r(GMe," (Wav2Vec2 model)"),GMe.forEach(t),HOo=i(x),Sv=n(x,"LI",{});var OMe=s(Sv);cde=n(OMe,"STRONG",{});var GUr=s(cde);UOo=r(GUr,"xlm"),GUr.forEach(t),JOo=r(OMe," \u2014 "),FN=n(OMe,"A",{href:!0});var OUr=s(FN);YOo=r(OUr,"TFXLMModel"),OUr.forEach(t),KOo=r(OMe," (XLM model)"),OMe.forEach(t),ZOo=i(x),Pv=n(x,"LI",{});var XMe=s(Pv);fde=n(XMe,"STRONG",{});var XUr=s(fde);eXo=r(XUr,"xlm-roberta"),XUr.forEach(t),oXo=r(XMe," \u2014 "),CN=n(XMe,"A",{href:!0});var zUr=s(CN);rXo=r(zUr,"TFXLMRobertaModel"),zUr.forEach(t),tXo=r(XMe," (XLM-RoBERTa model)"),XMe.forEach(t),aXo=i(x),$v=n(x,"LI",{});var zMe=s($v);mde=n(zMe,"STRONG",{});var VUr=s(mde);nXo=r(VUr,"xlnet"),VUr.forEach(t),sXo=r(zMe," \u2014 "),MN=n(zMe,"A",{href:!0});var WUr=s(MN);lXo=r(WUr,"TFXLNetModel"),WUr.forEach(t),iXo=r(zMe," (XLNet model)"),zMe.forEach(t),x.forEach(t),dXo=i(sa),gde=n(sa,"P",{});var QUr=s(gde);cXo=r(QUr,"Examples:"),QUr.forEach(t),fXo=i(sa),m(ZE.$$.fragment,sa),sa.forEach(t),Fl.forEach(t),b0e=i(d),Wd=n(d,"H2",{class:!0});var E9e=s(Wd);Iv=n(E9e,"A",{id:!0,class:!0,href:!0});var HUr=s(Iv);hde=n(HUr,"SPAN",{});var UUr=s(hde);m(e3.$$.fragment,UUr),UUr.forEach(t),HUr.forEach(t),mXo=i(E9e),pde=n(E9e,"SPAN",{});var JUr=s(pde);gXo=r(JUr,"TFAutoModelForPreTraining"),JUr.forEach(t),E9e.forEach(t),v0e=i(d),fr=n(d,"DIV",{class:!0});var Ml=s(fr);m(o3.$$.fragment,Ml),hXo=i(Ml),Qd=n(Ml,"P",{});var XX=s(Qd);pXo=r(XX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_de=n(XX,"CODE",{});var YUr=s(_de);_Xo=r(YUr,"from_pretrained()"),YUr.forEach(t),uXo=r(XX,"class method or the "),ude=n(XX,"CODE",{});var KUr=s(ude);bXo=r(KUr,"from_config()"),KUr.forEach(t),vXo=r(XX,`class
method.`),XX.forEach(t),TXo=i(Ml),r3=n(Ml,"P",{});var y9e=s(r3);FXo=r(y9e,"This class cannot be instantiated directly using "),bde=n(y9e,"CODE",{});var ZUr=s(bde);CXo=r(ZUr,"__init__()"),ZUr.forEach(t),MXo=r(y9e," (throws an error)."),y9e.forEach(t),EXo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);m(t3.$$.fragment,El),yXo=i(El),vde=n(El,"P",{});var eJr=s(vde);wXo=r(eJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eJr.forEach(t),AXo=i(El),Hd=n(El,"P",{});var zX=s(Hd);LXo=r(zX,`Note:
Loading a model from its configuration file does `),Tde=n(zX,"STRONG",{});var oJr=s(Tde);BXo=r(oJr,"not"),oJr.forEach(t),xXo=r(zX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fde=n(zX,"CODE",{});var rJr=s(Fde);kXo=r(rJr,"from_pretrained()"),rJr.forEach(t),RXo=r(zX,"to load the model weights."),zX.forEach(t),SXo=i(El),Cde=n(El,"P",{});var tJr=s(Cde);PXo=r(tJr,"Examples:"),tJr.forEach(t),$Xo=i(El),m(a3.$$.fragment,El),El.forEach(t),IXo=i(Ml),mo=n(Ml,"DIV",{class:!0});var la=s(mo);m(n3.$$.fragment,la),jXo=i(la),Mde=n(la,"P",{});var aJr=s(Mde);NXo=r(aJr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aJr.forEach(t),DXo=i(la),tn=n(la,"P",{});var rC=s(tn);qXo=r(rC,"The model class to instantiate is selected based on the "),Ede=n(rC,"CODE",{});var nJr=s(Ede);GXo=r(nJr,"model_type"),nJr.forEach(t),OXo=r(rC,` property of the config object (either
passed as an argument or loaded from `),yde=n(rC,"CODE",{});var sJr=s(yde);XXo=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),zXo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=n(rC,"CODE",{});var lJr=s(wde);VXo=r(lJr,"pretrained_model_name_or_path"),lJr.forEach(t),WXo=r(rC,":"),rC.forEach(t),QXo=i(la),H=n(la,"UL",{});var U=s(H);jv=n(U,"LI",{});var VMe=s(jv);Ade=n(VMe,"STRONG",{});var iJr=s(Ade);HXo=r(iJr,"albert"),iJr.forEach(t),UXo=r(VMe," \u2014 "),EN=n(VMe,"A",{href:!0});var dJr=s(EN);JXo=r(dJr,"TFAlbertForPreTraining"),dJr.forEach(t),YXo=r(VMe," (ALBERT model)"),VMe.forEach(t),KXo=i(U),Nv=n(U,"LI",{});var WMe=s(Nv);Lde=n(WMe,"STRONG",{});var cJr=s(Lde);ZXo=r(cJr,"bart"),cJr.forEach(t),ezo=r(WMe," \u2014 "),yN=n(WMe,"A",{href:!0});var fJr=s(yN);ozo=r(fJr,"TFBartForConditionalGeneration"),fJr.forEach(t),rzo=r(WMe," (BART model)"),WMe.forEach(t),tzo=i(U),Dv=n(U,"LI",{});var QMe=s(Dv);Bde=n(QMe,"STRONG",{});var mJr=s(Bde);azo=r(mJr,"bert"),mJr.forEach(t),nzo=r(QMe," \u2014 "),wN=n(QMe,"A",{href:!0});var gJr=s(wN);szo=r(gJr,"TFBertForPreTraining"),gJr.forEach(t),lzo=r(QMe," (BERT model)"),QMe.forEach(t),izo=i(U),qv=n(U,"LI",{});var HMe=s(qv);xde=n(HMe,"STRONG",{});var hJr=s(xde);dzo=r(hJr,"camembert"),hJr.forEach(t),czo=r(HMe," \u2014 "),AN=n(HMe,"A",{href:!0});var pJr=s(AN);fzo=r(pJr,"TFCamembertForMaskedLM"),pJr.forEach(t),mzo=r(HMe," (CamemBERT model)"),HMe.forEach(t),gzo=i(U),Gv=n(U,"LI",{});var UMe=s(Gv);kde=n(UMe,"STRONG",{});var _Jr=s(kde);hzo=r(_Jr,"ctrl"),_Jr.forEach(t),pzo=r(UMe," \u2014 "),LN=n(UMe,"A",{href:!0});var uJr=s(LN);_zo=r(uJr,"TFCTRLLMHeadModel"),uJr.forEach(t),uzo=r(UMe," (CTRL model)"),UMe.forEach(t),bzo=i(U),Ov=n(U,"LI",{});var JMe=s(Ov);Rde=n(JMe,"STRONG",{});var bJr=s(Rde);vzo=r(bJr,"distilbert"),bJr.forEach(t),Tzo=r(JMe," \u2014 "),BN=n(JMe,"A",{href:!0});var vJr=s(BN);Fzo=r(vJr,"TFDistilBertForMaskedLM"),vJr.forEach(t),Czo=r(JMe," (DistilBERT model)"),JMe.forEach(t),Mzo=i(U),Xv=n(U,"LI",{});var YMe=s(Xv);Sde=n(YMe,"STRONG",{});var TJr=s(Sde);Ezo=r(TJr,"electra"),TJr.forEach(t),yzo=r(YMe," \u2014 "),xN=n(YMe,"A",{href:!0});var FJr=s(xN);wzo=r(FJr,"TFElectraForPreTraining"),FJr.forEach(t),Azo=r(YMe," (ELECTRA model)"),YMe.forEach(t),Lzo=i(U),zv=n(U,"LI",{});var KMe=s(zv);Pde=n(KMe,"STRONG",{});var CJr=s(Pde);Bzo=r(CJr,"flaubert"),CJr.forEach(t),xzo=r(KMe," \u2014 "),kN=n(KMe,"A",{href:!0});var MJr=s(kN);kzo=r(MJr,"TFFlaubertWithLMHeadModel"),MJr.forEach(t),Rzo=r(KMe," (FlauBERT model)"),KMe.forEach(t),Szo=i(U),Vv=n(U,"LI",{});var ZMe=s(Vv);$de=n(ZMe,"STRONG",{});var EJr=s($de);Pzo=r(EJr,"funnel"),EJr.forEach(t),$zo=r(ZMe," \u2014 "),RN=n(ZMe,"A",{href:!0});var yJr=s(RN);Izo=r(yJr,"TFFunnelForPreTraining"),yJr.forEach(t),jzo=r(ZMe," (Funnel Transformer model)"),ZMe.forEach(t),Nzo=i(U),Wv=n(U,"LI",{});var eEe=s(Wv);Ide=n(eEe,"STRONG",{});var wJr=s(Ide);Dzo=r(wJr,"gpt2"),wJr.forEach(t),qzo=r(eEe," \u2014 "),SN=n(eEe,"A",{href:!0});var AJr=s(SN);Gzo=r(AJr,"TFGPT2LMHeadModel"),AJr.forEach(t),Ozo=r(eEe," (OpenAI GPT-2 model)"),eEe.forEach(t),Xzo=i(U),Qv=n(U,"LI",{});var oEe=s(Qv);jde=n(oEe,"STRONG",{});var LJr=s(jde);zzo=r(LJr,"layoutlm"),LJr.forEach(t),Vzo=r(oEe," \u2014 "),PN=n(oEe,"A",{href:!0});var BJr=s(PN);Wzo=r(BJr,"TFLayoutLMForMaskedLM"),BJr.forEach(t),Qzo=r(oEe," (LayoutLM model)"),oEe.forEach(t),Hzo=i(U),Hv=n(U,"LI",{});var rEe=s(Hv);Nde=n(rEe,"STRONG",{});var xJr=s(Nde);Uzo=r(xJr,"lxmert"),xJr.forEach(t),Jzo=r(rEe," \u2014 "),$N=n(rEe,"A",{href:!0});var kJr=s($N);Yzo=r(kJr,"TFLxmertForPreTraining"),kJr.forEach(t),Kzo=r(rEe," (LXMERT model)"),rEe.forEach(t),Zzo=i(U),Uv=n(U,"LI",{});var tEe=s(Uv);Dde=n(tEe,"STRONG",{});var RJr=s(Dde);eVo=r(RJr,"mobilebert"),RJr.forEach(t),oVo=r(tEe," \u2014 "),IN=n(tEe,"A",{href:!0});var SJr=s(IN);rVo=r(SJr,"TFMobileBertForPreTraining"),SJr.forEach(t),tVo=r(tEe," (MobileBERT model)"),tEe.forEach(t),aVo=i(U),Jv=n(U,"LI",{});var aEe=s(Jv);qde=n(aEe,"STRONG",{});var PJr=s(qde);nVo=r(PJr,"mpnet"),PJr.forEach(t),sVo=r(aEe," \u2014 "),jN=n(aEe,"A",{href:!0});var $Jr=s(jN);lVo=r($Jr,"TFMPNetForMaskedLM"),$Jr.forEach(t),iVo=r(aEe," (MPNet model)"),aEe.forEach(t),dVo=i(U),Yv=n(U,"LI",{});var nEe=s(Yv);Gde=n(nEe,"STRONG",{});var IJr=s(Gde);cVo=r(IJr,"openai-gpt"),IJr.forEach(t),fVo=r(nEe," \u2014 "),NN=n(nEe,"A",{href:!0});var jJr=s(NN);mVo=r(jJr,"TFOpenAIGPTLMHeadModel"),jJr.forEach(t),gVo=r(nEe," (OpenAI GPT model)"),nEe.forEach(t),hVo=i(U),Kv=n(U,"LI",{});var sEe=s(Kv);Ode=n(sEe,"STRONG",{});var NJr=s(Ode);pVo=r(NJr,"roberta"),NJr.forEach(t),_Vo=r(sEe," \u2014 "),DN=n(sEe,"A",{href:!0});var DJr=s(DN);uVo=r(DJr,"TFRobertaForMaskedLM"),DJr.forEach(t),bVo=r(sEe," (RoBERTa model)"),sEe.forEach(t),vVo=i(U),Zv=n(U,"LI",{});var lEe=s(Zv);Xde=n(lEe,"STRONG",{});var qJr=s(Xde);TVo=r(qJr,"t5"),qJr.forEach(t),FVo=r(lEe," \u2014 "),qN=n(lEe,"A",{href:!0});var GJr=s(qN);CVo=r(GJr,"TFT5ForConditionalGeneration"),GJr.forEach(t),MVo=r(lEe," (T5 model)"),lEe.forEach(t),EVo=i(U),e6=n(U,"LI",{});var iEe=s(e6);zde=n(iEe,"STRONG",{});var OJr=s(zde);yVo=r(OJr,"tapas"),OJr.forEach(t),wVo=r(iEe," \u2014 "),GN=n(iEe,"A",{href:!0});var XJr=s(GN);AVo=r(XJr,"TFTapasForMaskedLM"),XJr.forEach(t),LVo=r(iEe," (TAPAS model)"),iEe.forEach(t),BVo=i(U),o6=n(U,"LI",{});var dEe=s(o6);Vde=n(dEe,"STRONG",{});var zJr=s(Vde);xVo=r(zJr,"transfo-xl"),zJr.forEach(t),kVo=r(dEe," \u2014 "),ON=n(dEe,"A",{href:!0});var VJr=s(ON);RVo=r(VJr,"TFTransfoXLLMHeadModel"),VJr.forEach(t),SVo=r(dEe," (Transformer-XL model)"),dEe.forEach(t),PVo=i(U),r6=n(U,"LI",{});var cEe=s(r6);Wde=n(cEe,"STRONG",{});var WJr=s(Wde);$Vo=r(WJr,"xlm"),WJr.forEach(t),IVo=r(cEe," \u2014 "),XN=n(cEe,"A",{href:!0});var QJr=s(XN);jVo=r(QJr,"TFXLMWithLMHeadModel"),QJr.forEach(t),NVo=r(cEe," (XLM model)"),cEe.forEach(t),DVo=i(U),t6=n(U,"LI",{});var fEe=s(t6);Qde=n(fEe,"STRONG",{});var HJr=s(Qde);qVo=r(HJr,"xlm-roberta"),HJr.forEach(t),GVo=r(fEe," \u2014 "),zN=n(fEe,"A",{href:!0});var UJr=s(zN);OVo=r(UJr,"TFXLMRobertaForMaskedLM"),UJr.forEach(t),XVo=r(fEe," (XLM-RoBERTa model)"),fEe.forEach(t),zVo=i(U),a6=n(U,"LI",{});var mEe=s(a6);Hde=n(mEe,"STRONG",{});var JJr=s(Hde);VVo=r(JJr,"xlnet"),JJr.forEach(t),WVo=r(mEe," \u2014 "),VN=n(mEe,"A",{href:!0});var YJr=s(VN);QVo=r(YJr,"TFXLNetLMHeadModel"),YJr.forEach(t),HVo=r(mEe," (XLNet model)"),mEe.forEach(t),U.forEach(t),UVo=i(la),Ude=n(la,"P",{});var KJr=s(Ude);JVo=r(KJr,"Examples:"),KJr.forEach(t),YVo=i(la),m(s3.$$.fragment,la),la.forEach(t),Ml.forEach(t),T0e=i(d),Ud=n(d,"H2",{class:!0});var w9e=s(Ud);n6=n(w9e,"A",{id:!0,class:!0,href:!0});var ZJr=s(n6);Jde=n(ZJr,"SPAN",{});var eYr=s(Jde);m(l3.$$.fragment,eYr),eYr.forEach(t),ZJr.forEach(t),KVo=i(w9e),Yde=n(w9e,"SPAN",{});var oYr=s(Yde);ZVo=r(oYr,"TFAutoModelForCausalLM"),oYr.forEach(t),w9e.forEach(t),F0e=i(d),mr=n(d,"DIV",{class:!0});var yl=s(mr);m(i3.$$.fragment,yl),eWo=i(yl),Jd=n(yl,"P",{});var VX=s(Jd);oWo=r(VX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Kde=n(VX,"CODE",{});var rYr=s(Kde);rWo=r(rYr,"from_pretrained()"),rYr.forEach(t),tWo=r(VX,"class method or the "),Zde=n(VX,"CODE",{});var tYr=s(Zde);aWo=r(tYr,"from_config()"),tYr.forEach(t),nWo=r(VX,`class
method.`),VX.forEach(t),sWo=i(yl),d3=n(yl,"P",{});var A9e=s(d3);lWo=r(A9e,"This class cannot be instantiated directly using "),ece=n(A9e,"CODE",{});var aYr=s(ece);iWo=r(aYr,"__init__()"),aYr.forEach(t),dWo=r(A9e," (throws an error)."),A9e.forEach(t),cWo=i(yl),at=n(yl,"DIV",{class:!0});var wl=s(at);m(c3.$$.fragment,wl),fWo=i(wl),oce=n(wl,"P",{});var nYr=s(oce);mWo=r(nYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nYr.forEach(t),gWo=i(wl),Yd=n(wl,"P",{});var WX=s(Yd);hWo=r(WX,`Note:
Loading a model from its configuration file does `),rce=n(WX,"STRONG",{});var sYr=s(rce);pWo=r(sYr,"not"),sYr.forEach(t),_Wo=r(WX,` load the model weights. It only affects the
model\u2019s configuration. Use `),tce=n(WX,"CODE",{});var lYr=s(tce);uWo=r(lYr,"from_pretrained()"),lYr.forEach(t),bWo=r(WX,"to load the model weights."),WX.forEach(t),vWo=i(wl),ace=n(wl,"P",{});var iYr=s(ace);TWo=r(iYr,"Examples:"),iYr.forEach(t),FWo=i(wl),m(f3.$$.fragment,wl),wl.forEach(t),CWo=i(yl),go=n(yl,"DIV",{class:!0});var ia=s(go);m(m3.$$.fragment,ia),MWo=i(ia),nce=n(ia,"P",{});var dYr=s(nce);EWo=r(dYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dYr.forEach(t),yWo=i(ia),an=n(ia,"P",{});var tC=s(an);wWo=r(tC,"The model class to instantiate is selected based on the "),sce=n(tC,"CODE",{});var cYr=s(sce);AWo=r(cYr,"model_type"),cYr.forEach(t),LWo=r(tC,` property of the config object (either
passed as an argument or loaded from `),lce=n(tC,"CODE",{});var fYr=s(lce);BWo=r(fYr,"pretrained_model_name_or_path"),fYr.forEach(t),xWo=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(tC,"CODE",{});var mYr=s(ice);kWo=r(mYr,"pretrained_model_name_or_path"),mYr.forEach(t),RWo=r(tC,":"),tC.forEach(t),SWo=i(ia),he=n(ia,"UL",{});var Ce=s(he);s6=n(Ce,"LI",{});var gEe=s(s6);dce=n(gEe,"STRONG",{});var gYr=s(dce);PWo=r(gYr,"bert"),gYr.forEach(t),$Wo=r(gEe," \u2014 "),WN=n(gEe,"A",{href:!0});var hYr=s(WN);IWo=r(hYr,"TFBertLMHeadModel"),hYr.forEach(t),jWo=r(gEe," (BERT model)"),gEe.forEach(t),NWo=i(Ce),l6=n(Ce,"LI",{});var hEe=s(l6);cce=n(hEe,"STRONG",{});var pYr=s(cce);DWo=r(pYr,"ctrl"),pYr.forEach(t),qWo=r(hEe," \u2014 "),QN=n(hEe,"A",{href:!0});var _Yr=s(QN);GWo=r(_Yr,"TFCTRLLMHeadModel"),_Yr.forEach(t),OWo=r(hEe," (CTRL model)"),hEe.forEach(t),XWo=i(Ce),i6=n(Ce,"LI",{});var pEe=s(i6);fce=n(pEe,"STRONG",{});var uYr=s(fce);zWo=r(uYr,"gpt2"),uYr.forEach(t),VWo=r(pEe," \u2014 "),HN=n(pEe,"A",{href:!0});var bYr=s(HN);WWo=r(bYr,"TFGPT2LMHeadModel"),bYr.forEach(t),QWo=r(pEe," (OpenAI GPT-2 model)"),pEe.forEach(t),HWo=i(Ce),d6=n(Ce,"LI",{});var _Ee=s(d6);mce=n(_Ee,"STRONG",{});var vYr=s(mce);UWo=r(vYr,"openai-gpt"),vYr.forEach(t),JWo=r(_Ee," \u2014 "),UN=n(_Ee,"A",{href:!0});var TYr=s(UN);YWo=r(TYr,"TFOpenAIGPTLMHeadModel"),TYr.forEach(t),KWo=r(_Ee," (OpenAI GPT model)"),_Ee.forEach(t),ZWo=i(Ce),c6=n(Ce,"LI",{});var uEe=s(c6);gce=n(uEe,"STRONG",{});var FYr=s(gce);eQo=r(FYr,"rembert"),FYr.forEach(t),oQo=r(uEe," \u2014 "),JN=n(uEe,"A",{href:!0});var CYr=s(JN);rQo=r(CYr,"TFRemBertForCausalLM"),CYr.forEach(t),tQo=r(uEe," (RemBERT model)"),uEe.forEach(t),aQo=i(Ce),f6=n(Ce,"LI",{});var bEe=s(f6);hce=n(bEe,"STRONG",{});var MYr=s(hce);nQo=r(MYr,"roberta"),MYr.forEach(t),sQo=r(bEe," \u2014 "),YN=n(bEe,"A",{href:!0});var EYr=s(YN);lQo=r(EYr,"TFRobertaForCausalLM"),EYr.forEach(t),iQo=r(bEe," (RoBERTa model)"),bEe.forEach(t),dQo=i(Ce),m6=n(Ce,"LI",{});var vEe=s(m6);pce=n(vEe,"STRONG",{});var yYr=s(pce);cQo=r(yYr,"roformer"),yYr.forEach(t),fQo=r(vEe," \u2014 "),KN=n(vEe,"A",{href:!0});var wYr=s(KN);mQo=r(wYr,"TFRoFormerForCausalLM"),wYr.forEach(t),gQo=r(vEe," (RoFormer model)"),vEe.forEach(t),hQo=i(Ce),g6=n(Ce,"LI",{});var TEe=s(g6);_ce=n(TEe,"STRONG",{});var AYr=s(_ce);pQo=r(AYr,"transfo-xl"),AYr.forEach(t),_Qo=r(TEe," \u2014 "),ZN=n(TEe,"A",{href:!0});var LYr=s(ZN);uQo=r(LYr,"TFTransfoXLLMHeadModel"),LYr.forEach(t),bQo=r(TEe," (Transformer-XL model)"),TEe.forEach(t),vQo=i(Ce),h6=n(Ce,"LI",{});var FEe=s(h6);uce=n(FEe,"STRONG",{});var BYr=s(uce);TQo=r(BYr,"xlm"),BYr.forEach(t),FQo=r(FEe," \u2014 "),eD=n(FEe,"A",{href:!0});var xYr=s(eD);CQo=r(xYr,"TFXLMWithLMHeadModel"),xYr.forEach(t),MQo=r(FEe," (XLM model)"),FEe.forEach(t),EQo=i(Ce),p6=n(Ce,"LI",{});var CEe=s(p6);bce=n(CEe,"STRONG",{});var kYr=s(bce);yQo=r(kYr,"xlnet"),kYr.forEach(t),wQo=r(CEe," \u2014 "),oD=n(CEe,"A",{href:!0});var RYr=s(oD);AQo=r(RYr,"TFXLNetLMHeadModel"),RYr.forEach(t),LQo=r(CEe," (XLNet model)"),CEe.forEach(t),Ce.forEach(t),BQo=i(ia),vce=n(ia,"P",{});var SYr=s(vce);xQo=r(SYr,"Examples:"),SYr.forEach(t),kQo=i(ia),m(g3.$$.fragment,ia),ia.forEach(t),yl.forEach(t),C0e=i(d),Kd=n(d,"H2",{class:!0});var L9e=s(Kd);_6=n(L9e,"A",{id:!0,class:!0,href:!0});var PYr=s(_6);Tce=n(PYr,"SPAN",{});var $Yr=s(Tce);m(h3.$$.fragment,$Yr),$Yr.forEach(t),PYr.forEach(t),RQo=i(L9e),Fce=n(L9e,"SPAN",{});var IYr=s(Fce);SQo=r(IYr,"TFAutoModelForImageClassification"),IYr.forEach(t),L9e.forEach(t),M0e=i(d),gr=n(d,"DIV",{class:!0});var Al=s(gr);m(p3.$$.fragment,Al),PQo=i(Al),Zd=n(Al,"P",{});var QX=s(Zd);$Qo=r(QX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Cce=n(QX,"CODE",{});var jYr=s(Cce);IQo=r(jYr,"from_pretrained()"),jYr.forEach(t),jQo=r(QX,"class method or the "),Mce=n(QX,"CODE",{});var NYr=s(Mce);NQo=r(NYr,"from_config()"),NYr.forEach(t),DQo=r(QX,`class
method.`),QX.forEach(t),qQo=i(Al),_3=n(Al,"P",{});var B9e=s(_3);GQo=r(B9e,"This class cannot be instantiated directly using "),Ece=n(B9e,"CODE",{});var DYr=s(Ece);OQo=r(DYr,"__init__()"),DYr.forEach(t),XQo=r(B9e," (throws an error)."),B9e.forEach(t),zQo=i(Al),nt=n(Al,"DIV",{class:!0});var Ll=s(nt);m(u3.$$.fragment,Ll),VQo=i(Ll),yce=n(Ll,"P",{});var qYr=s(yce);WQo=r(qYr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qYr.forEach(t),QQo=i(Ll),ec=n(Ll,"P",{});var HX=s(ec);HQo=r(HX,`Note:
Loading a model from its configuration file does `),wce=n(HX,"STRONG",{});var GYr=s(wce);UQo=r(GYr,"not"),GYr.forEach(t),JQo=r(HX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ace=n(HX,"CODE",{});var OYr=s(Ace);YQo=r(OYr,"from_pretrained()"),OYr.forEach(t),KQo=r(HX,"to load the model weights."),HX.forEach(t),ZQo=i(Ll),Lce=n(Ll,"P",{});var XYr=s(Lce);eHo=r(XYr,"Examples:"),XYr.forEach(t),oHo=i(Ll),m(b3.$$.fragment,Ll),Ll.forEach(t),rHo=i(Al),ho=n(Al,"DIV",{class:!0});var da=s(ho);m(v3.$$.fragment,da),tHo=i(da),Bce=n(da,"P",{});var zYr=s(Bce);aHo=r(zYr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zYr.forEach(t),nHo=i(da),nn=n(da,"P",{});var aC=s(nn);sHo=r(aC,"The model class to instantiate is selected based on the "),xce=n(aC,"CODE",{});var VYr=s(xce);lHo=r(VYr,"model_type"),VYr.forEach(t),iHo=r(aC,` property of the config object (either
passed as an argument or loaded from `),kce=n(aC,"CODE",{});var WYr=s(kce);dHo=r(WYr,"pretrained_model_name_or_path"),WYr.forEach(t),cHo=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=n(aC,"CODE",{});var QYr=s(Rce);fHo=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),mHo=r(aC,":"),aC.forEach(t),gHo=i(da),Sce=n(da,"UL",{});var HYr=s(Sce);u6=n(HYr,"LI",{});var MEe=s(u6);Pce=n(MEe,"STRONG",{});var UYr=s(Pce);hHo=r(UYr,"vit"),UYr.forEach(t),pHo=r(MEe," \u2014 "),rD=n(MEe,"A",{href:!0});var JYr=s(rD);_Ho=r(JYr,"TFViTForImageClassification"),JYr.forEach(t),uHo=r(MEe," (ViT model)"),MEe.forEach(t),HYr.forEach(t),bHo=i(da),$ce=n(da,"P",{});var YYr=s($ce);vHo=r(YYr,"Examples:"),YYr.forEach(t),THo=i(da),m(T3.$$.fragment,da),da.forEach(t),Al.forEach(t),E0e=i(d),oc=n(d,"H2",{class:!0});var x9e=s(oc);b6=n(x9e,"A",{id:!0,class:!0,href:!0});var KYr=s(b6);Ice=n(KYr,"SPAN",{});var ZYr=s(Ice);m(F3.$$.fragment,ZYr),ZYr.forEach(t),KYr.forEach(t),FHo=i(x9e),jce=n(x9e,"SPAN",{});var eKr=s(jce);CHo=r(eKr,"TFAutoModelForMaskedLM"),eKr.forEach(t),x9e.forEach(t),y0e=i(d),hr=n(d,"DIV",{class:!0});var Bl=s(hr);m(C3.$$.fragment,Bl),MHo=i(Bl),rc=n(Bl,"P",{});var UX=s(rc);EHo=r(UX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nce=n(UX,"CODE",{});var oKr=s(Nce);yHo=r(oKr,"from_pretrained()"),oKr.forEach(t),wHo=r(UX,"class method or the "),Dce=n(UX,"CODE",{});var rKr=s(Dce);AHo=r(rKr,"from_config()"),rKr.forEach(t),LHo=r(UX,`class
method.`),UX.forEach(t),BHo=i(Bl),M3=n(Bl,"P",{});var k9e=s(M3);xHo=r(k9e,"This class cannot be instantiated directly using "),qce=n(k9e,"CODE",{});var tKr=s(qce);kHo=r(tKr,"__init__()"),tKr.forEach(t),RHo=r(k9e," (throws an error)."),k9e.forEach(t),SHo=i(Bl),st=n(Bl,"DIV",{class:!0});var xl=s(st);m(E3.$$.fragment,xl),PHo=i(xl),Gce=n(xl,"P",{});var aKr=s(Gce);$Ho=r(aKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aKr.forEach(t),IHo=i(xl),tc=n(xl,"P",{});var JX=s(tc);jHo=r(JX,`Note:
Loading a model from its configuration file does `),Oce=n(JX,"STRONG",{});var nKr=s(Oce);NHo=r(nKr,"not"),nKr.forEach(t),DHo=r(JX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xce=n(JX,"CODE",{});var sKr=s(Xce);qHo=r(sKr,"from_pretrained()"),sKr.forEach(t),GHo=r(JX,"to load the model weights."),JX.forEach(t),OHo=i(xl),zce=n(xl,"P",{});var lKr=s(zce);XHo=r(lKr,"Examples:"),lKr.forEach(t),zHo=i(xl),m(y3.$$.fragment,xl),xl.forEach(t),VHo=i(Bl),po=n(Bl,"DIV",{class:!0});var ca=s(po);m(w3.$$.fragment,ca),WHo=i(ca),Vce=n(ca,"P",{});var iKr=s(Vce);QHo=r(iKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iKr.forEach(t),HHo=i(ca),sn=n(ca,"P",{});var nC=s(sn);UHo=r(nC,"The model class to instantiate is selected based on the "),Wce=n(nC,"CODE",{});var dKr=s(Wce);JHo=r(dKr,"model_type"),dKr.forEach(t),YHo=r(nC,` property of the config object (either
passed as an argument or loaded from `),Qce=n(nC,"CODE",{});var cKr=s(Qce);KHo=r(cKr,"pretrained_model_name_or_path"),cKr.forEach(t),ZHo=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=n(nC,"CODE",{});var fKr=s(Hce);eUo=r(fKr,"pretrained_model_name_or_path"),fKr.forEach(t),oUo=r(nC,":"),nC.forEach(t),rUo=i(ca),Y=n(ca,"UL",{});var ee=s(Y);v6=n(ee,"LI",{});var EEe=s(v6);Uce=n(EEe,"STRONG",{});var mKr=s(Uce);tUo=r(mKr,"albert"),mKr.forEach(t),aUo=r(EEe," \u2014 "),tD=n(EEe,"A",{href:!0});var gKr=s(tD);nUo=r(gKr,"TFAlbertForMaskedLM"),gKr.forEach(t),sUo=r(EEe," (ALBERT model)"),EEe.forEach(t),lUo=i(ee),T6=n(ee,"LI",{});var yEe=s(T6);Jce=n(yEe,"STRONG",{});var hKr=s(Jce);iUo=r(hKr,"bert"),hKr.forEach(t),dUo=r(yEe," \u2014 "),aD=n(yEe,"A",{href:!0});var pKr=s(aD);cUo=r(pKr,"TFBertForMaskedLM"),pKr.forEach(t),fUo=r(yEe," (BERT model)"),yEe.forEach(t),mUo=i(ee),F6=n(ee,"LI",{});var wEe=s(F6);Yce=n(wEe,"STRONG",{});var _Kr=s(Yce);gUo=r(_Kr,"camembert"),_Kr.forEach(t),hUo=r(wEe," \u2014 "),nD=n(wEe,"A",{href:!0});var uKr=s(nD);pUo=r(uKr,"TFCamembertForMaskedLM"),uKr.forEach(t),_Uo=r(wEe," (CamemBERT model)"),wEe.forEach(t),uUo=i(ee),C6=n(ee,"LI",{});var AEe=s(C6);Kce=n(AEe,"STRONG",{});var bKr=s(Kce);bUo=r(bKr,"convbert"),bKr.forEach(t),vUo=r(AEe," \u2014 "),sD=n(AEe,"A",{href:!0});var vKr=s(sD);TUo=r(vKr,"TFConvBertForMaskedLM"),vKr.forEach(t),FUo=r(AEe," (ConvBERT model)"),AEe.forEach(t),CUo=i(ee),M6=n(ee,"LI",{});var LEe=s(M6);Zce=n(LEe,"STRONG",{});var TKr=s(Zce);MUo=r(TKr,"deberta"),TKr.forEach(t),EUo=r(LEe," \u2014 "),lD=n(LEe,"A",{href:!0});var FKr=s(lD);yUo=r(FKr,"TFDebertaForMaskedLM"),FKr.forEach(t),wUo=r(LEe," (DeBERTa model)"),LEe.forEach(t),AUo=i(ee),E6=n(ee,"LI",{});var BEe=s(E6);efe=n(BEe,"STRONG",{});var CKr=s(efe);LUo=r(CKr,"deberta-v2"),CKr.forEach(t),BUo=r(BEe," \u2014 "),iD=n(BEe,"A",{href:!0});var MKr=s(iD);xUo=r(MKr,"TFDebertaV2ForMaskedLM"),MKr.forEach(t),kUo=r(BEe," (DeBERTa-v2 model)"),BEe.forEach(t),RUo=i(ee),y6=n(ee,"LI",{});var xEe=s(y6);ofe=n(xEe,"STRONG",{});var EKr=s(ofe);SUo=r(EKr,"distilbert"),EKr.forEach(t),PUo=r(xEe," \u2014 "),dD=n(xEe,"A",{href:!0});var yKr=s(dD);$Uo=r(yKr,"TFDistilBertForMaskedLM"),yKr.forEach(t),IUo=r(xEe," (DistilBERT model)"),xEe.forEach(t),jUo=i(ee),w6=n(ee,"LI",{});var kEe=s(w6);rfe=n(kEe,"STRONG",{});var wKr=s(rfe);NUo=r(wKr,"electra"),wKr.forEach(t),DUo=r(kEe," \u2014 "),cD=n(kEe,"A",{href:!0});var AKr=s(cD);qUo=r(AKr,"TFElectraForMaskedLM"),AKr.forEach(t),GUo=r(kEe," (ELECTRA model)"),kEe.forEach(t),OUo=i(ee),A6=n(ee,"LI",{});var REe=s(A6);tfe=n(REe,"STRONG",{});var LKr=s(tfe);XUo=r(LKr,"flaubert"),LKr.forEach(t),zUo=r(REe," \u2014 "),fD=n(REe,"A",{href:!0});var BKr=s(fD);VUo=r(BKr,"TFFlaubertWithLMHeadModel"),BKr.forEach(t),WUo=r(REe," (FlauBERT model)"),REe.forEach(t),QUo=i(ee),L6=n(ee,"LI",{});var SEe=s(L6);afe=n(SEe,"STRONG",{});var xKr=s(afe);HUo=r(xKr,"funnel"),xKr.forEach(t),UUo=r(SEe," \u2014 "),mD=n(SEe,"A",{href:!0});var kKr=s(mD);JUo=r(kKr,"TFFunnelForMaskedLM"),kKr.forEach(t),YUo=r(SEe," (Funnel Transformer model)"),SEe.forEach(t),KUo=i(ee),B6=n(ee,"LI",{});var PEe=s(B6);nfe=n(PEe,"STRONG",{});var RKr=s(nfe);ZUo=r(RKr,"layoutlm"),RKr.forEach(t),eJo=r(PEe," \u2014 "),gD=n(PEe,"A",{href:!0});var SKr=s(gD);oJo=r(SKr,"TFLayoutLMForMaskedLM"),SKr.forEach(t),rJo=r(PEe," (LayoutLM model)"),PEe.forEach(t),tJo=i(ee),x6=n(ee,"LI",{});var $Ee=s(x6);sfe=n($Ee,"STRONG",{});var PKr=s(sfe);aJo=r(PKr,"longformer"),PKr.forEach(t),nJo=r($Ee," \u2014 "),hD=n($Ee,"A",{href:!0});var $Kr=s(hD);sJo=r($Kr,"TFLongformerForMaskedLM"),$Kr.forEach(t),lJo=r($Ee," (Longformer model)"),$Ee.forEach(t),iJo=i(ee),k6=n(ee,"LI",{});var IEe=s(k6);lfe=n(IEe,"STRONG",{});var IKr=s(lfe);dJo=r(IKr,"mobilebert"),IKr.forEach(t),cJo=r(IEe," \u2014 "),pD=n(IEe,"A",{href:!0});var jKr=s(pD);fJo=r(jKr,"TFMobileBertForMaskedLM"),jKr.forEach(t),mJo=r(IEe," (MobileBERT model)"),IEe.forEach(t),gJo=i(ee),R6=n(ee,"LI",{});var jEe=s(R6);ife=n(jEe,"STRONG",{});var NKr=s(ife);hJo=r(NKr,"mpnet"),NKr.forEach(t),pJo=r(jEe," \u2014 "),_D=n(jEe,"A",{href:!0});var DKr=s(_D);_Jo=r(DKr,"TFMPNetForMaskedLM"),DKr.forEach(t),uJo=r(jEe," (MPNet model)"),jEe.forEach(t),bJo=i(ee),S6=n(ee,"LI",{});var NEe=s(S6);dfe=n(NEe,"STRONG",{});var qKr=s(dfe);vJo=r(qKr,"rembert"),qKr.forEach(t),TJo=r(NEe," \u2014 "),uD=n(NEe,"A",{href:!0});var GKr=s(uD);FJo=r(GKr,"TFRemBertForMaskedLM"),GKr.forEach(t),CJo=r(NEe," (RemBERT model)"),NEe.forEach(t),MJo=i(ee),P6=n(ee,"LI",{});var DEe=s(P6);cfe=n(DEe,"STRONG",{});var OKr=s(cfe);EJo=r(OKr,"roberta"),OKr.forEach(t),yJo=r(DEe," \u2014 "),bD=n(DEe,"A",{href:!0});var XKr=s(bD);wJo=r(XKr,"TFRobertaForMaskedLM"),XKr.forEach(t),AJo=r(DEe," (RoBERTa model)"),DEe.forEach(t),LJo=i(ee),$6=n(ee,"LI",{});var qEe=s($6);ffe=n(qEe,"STRONG",{});var zKr=s(ffe);BJo=r(zKr,"roformer"),zKr.forEach(t),xJo=r(qEe," \u2014 "),vD=n(qEe,"A",{href:!0});var VKr=s(vD);kJo=r(VKr,"TFRoFormerForMaskedLM"),VKr.forEach(t),RJo=r(qEe," (RoFormer model)"),qEe.forEach(t),SJo=i(ee),I6=n(ee,"LI",{});var GEe=s(I6);mfe=n(GEe,"STRONG",{});var WKr=s(mfe);PJo=r(WKr,"tapas"),WKr.forEach(t),$Jo=r(GEe," \u2014 "),TD=n(GEe,"A",{href:!0});var QKr=s(TD);IJo=r(QKr,"TFTapasForMaskedLM"),QKr.forEach(t),jJo=r(GEe," (TAPAS model)"),GEe.forEach(t),NJo=i(ee),j6=n(ee,"LI",{});var OEe=s(j6);gfe=n(OEe,"STRONG",{});var HKr=s(gfe);DJo=r(HKr,"xlm"),HKr.forEach(t),qJo=r(OEe," \u2014 "),FD=n(OEe,"A",{href:!0});var UKr=s(FD);GJo=r(UKr,"TFXLMWithLMHeadModel"),UKr.forEach(t),OJo=r(OEe," (XLM model)"),OEe.forEach(t),XJo=i(ee),N6=n(ee,"LI",{});var XEe=s(N6);hfe=n(XEe,"STRONG",{});var JKr=s(hfe);zJo=r(JKr,"xlm-roberta"),JKr.forEach(t),VJo=r(XEe," \u2014 "),CD=n(XEe,"A",{href:!0});var YKr=s(CD);WJo=r(YKr,"TFXLMRobertaForMaskedLM"),YKr.forEach(t),QJo=r(XEe," (XLM-RoBERTa model)"),XEe.forEach(t),ee.forEach(t),HJo=i(ca),pfe=n(ca,"P",{});var KKr=s(pfe);UJo=r(KKr,"Examples:"),KKr.forEach(t),JJo=i(ca),m(A3.$$.fragment,ca),ca.forEach(t),Bl.forEach(t),w0e=i(d),ac=n(d,"H2",{class:!0});var R9e=s(ac);D6=n(R9e,"A",{id:!0,class:!0,href:!0});var ZKr=s(D6);_fe=n(ZKr,"SPAN",{});var eZr=s(_fe);m(L3.$$.fragment,eZr),eZr.forEach(t),ZKr.forEach(t),YJo=i(R9e),ufe=n(R9e,"SPAN",{});var oZr=s(ufe);KJo=r(oZr,"TFAutoModelForSeq2SeqLM"),oZr.forEach(t),R9e.forEach(t),A0e=i(d),pr=n(d,"DIV",{class:!0});var kl=s(pr);m(B3.$$.fragment,kl),ZJo=i(kl),nc=n(kl,"P",{});var YX=s(nc);eYo=r(YX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bfe=n(YX,"CODE",{});var rZr=s(bfe);oYo=r(rZr,"from_pretrained()"),rZr.forEach(t),rYo=r(YX,"class method or the "),vfe=n(YX,"CODE",{});var tZr=s(vfe);tYo=r(tZr,"from_config()"),tZr.forEach(t),aYo=r(YX,`class
method.`),YX.forEach(t),nYo=i(kl),x3=n(kl,"P",{});var S9e=s(x3);sYo=r(S9e,"This class cannot be instantiated directly using "),Tfe=n(S9e,"CODE",{});var aZr=s(Tfe);lYo=r(aZr,"__init__()"),aZr.forEach(t),iYo=r(S9e," (throws an error)."),S9e.forEach(t),dYo=i(kl),lt=n(kl,"DIV",{class:!0});var Rl=s(lt);m(k3.$$.fragment,Rl),cYo=i(Rl),Ffe=n(Rl,"P",{});var nZr=s(Ffe);fYo=r(nZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nZr.forEach(t),mYo=i(Rl),sc=n(Rl,"P",{});var KX=s(sc);gYo=r(KX,`Note:
Loading a model from its configuration file does `),Cfe=n(KX,"STRONG",{});var sZr=s(Cfe);hYo=r(sZr,"not"),sZr.forEach(t),pYo=r(KX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mfe=n(KX,"CODE",{});var lZr=s(Mfe);_Yo=r(lZr,"from_pretrained()"),lZr.forEach(t),uYo=r(KX,"to load the model weights."),KX.forEach(t),bYo=i(Rl),Efe=n(Rl,"P",{});var iZr=s(Efe);vYo=r(iZr,"Examples:"),iZr.forEach(t),TYo=i(Rl),m(R3.$$.fragment,Rl),Rl.forEach(t),FYo=i(kl),_o=n(kl,"DIV",{class:!0});var fa=s(_o);m(S3.$$.fragment,fa),CYo=i(fa),yfe=n(fa,"P",{});var dZr=s(yfe);MYo=r(dZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dZr.forEach(t),EYo=i(fa),ln=n(fa,"P",{});var sC=s(ln);yYo=r(sC,"The model class to instantiate is selected based on the "),wfe=n(sC,"CODE",{});var cZr=s(wfe);wYo=r(cZr,"model_type"),cZr.forEach(t),AYo=r(sC,` property of the config object (either
passed as an argument or loaded from `),Afe=n(sC,"CODE",{});var fZr=s(Afe);LYo=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),BYo=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n(sC,"CODE",{});var mZr=s(Lfe);xYo=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),kYo=r(sC,":"),sC.forEach(t),RYo=i(fa),pe=n(fa,"UL",{});var Me=s(pe);q6=n(Me,"LI",{});var zEe=s(q6);Bfe=n(zEe,"STRONG",{});var gZr=s(Bfe);SYo=r(gZr,"bart"),gZr.forEach(t),PYo=r(zEe," \u2014 "),MD=n(zEe,"A",{href:!0});var hZr=s(MD);$Yo=r(hZr,"TFBartForConditionalGeneration"),hZr.forEach(t),IYo=r(zEe," (BART model)"),zEe.forEach(t),jYo=i(Me),G6=n(Me,"LI",{});var VEe=s(G6);xfe=n(VEe,"STRONG",{});var pZr=s(xfe);NYo=r(pZr,"blenderbot"),pZr.forEach(t),DYo=r(VEe," \u2014 "),ED=n(VEe,"A",{href:!0});var _Zr=s(ED);qYo=r(_Zr,"TFBlenderbotForConditionalGeneration"),_Zr.forEach(t),GYo=r(VEe," (Blenderbot model)"),VEe.forEach(t),OYo=i(Me),O6=n(Me,"LI",{});var WEe=s(O6);kfe=n(WEe,"STRONG",{});var uZr=s(kfe);XYo=r(uZr,"blenderbot-small"),uZr.forEach(t),zYo=r(WEe," \u2014 "),yD=n(WEe,"A",{href:!0});var bZr=s(yD);VYo=r(bZr,"TFBlenderbotSmallForConditionalGeneration"),bZr.forEach(t),WYo=r(WEe," (BlenderbotSmall model)"),WEe.forEach(t),QYo=i(Me),X6=n(Me,"LI",{});var QEe=s(X6);Rfe=n(QEe,"STRONG",{});var vZr=s(Rfe);HYo=r(vZr,"encoder-decoder"),vZr.forEach(t),UYo=r(QEe," \u2014 "),wD=n(QEe,"A",{href:!0});var TZr=s(wD);JYo=r(TZr,"TFEncoderDecoderModel"),TZr.forEach(t),YYo=r(QEe," (Encoder decoder model)"),QEe.forEach(t),KYo=i(Me),z6=n(Me,"LI",{});var HEe=s(z6);Sfe=n(HEe,"STRONG",{});var FZr=s(Sfe);ZYo=r(FZr,"led"),FZr.forEach(t),eKo=r(HEe," \u2014 "),AD=n(HEe,"A",{href:!0});var CZr=s(AD);oKo=r(CZr,"TFLEDForConditionalGeneration"),CZr.forEach(t),rKo=r(HEe," (LED model)"),HEe.forEach(t),tKo=i(Me),V6=n(Me,"LI",{});var UEe=s(V6);Pfe=n(UEe,"STRONG",{});var MZr=s(Pfe);aKo=r(MZr,"marian"),MZr.forEach(t),nKo=r(UEe," \u2014 "),LD=n(UEe,"A",{href:!0});var EZr=s(LD);sKo=r(EZr,"TFMarianMTModel"),EZr.forEach(t),lKo=r(UEe," (Marian model)"),UEe.forEach(t),iKo=i(Me),W6=n(Me,"LI",{});var JEe=s(W6);$fe=n(JEe,"STRONG",{});var yZr=s($fe);dKo=r(yZr,"mbart"),yZr.forEach(t),cKo=r(JEe," \u2014 "),BD=n(JEe,"A",{href:!0});var wZr=s(BD);fKo=r(wZr,"TFMBartForConditionalGeneration"),wZr.forEach(t),mKo=r(JEe," (mBART model)"),JEe.forEach(t),gKo=i(Me),Q6=n(Me,"LI",{});var YEe=s(Q6);Ife=n(YEe,"STRONG",{});var AZr=s(Ife);hKo=r(AZr,"mt5"),AZr.forEach(t),pKo=r(YEe," \u2014 "),xD=n(YEe,"A",{href:!0});var LZr=s(xD);_Ko=r(LZr,"TFMT5ForConditionalGeneration"),LZr.forEach(t),uKo=r(YEe," (mT5 model)"),YEe.forEach(t),bKo=i(Me),H6=n(Me,"LI",{});var KEe=s(H6);jfe=n(KEe,"STRONG",{});var BZr=s(jfe);vKo=r(BZr,"pegasus"),BZr.forEach(t),TKo=r(KEe," \u2014 "),kD=n(KEe,"A",{href:!0});var xZr=s(kD);FKo=r(xZr,"TFPegasusForConditionalGeneration"),xZr.forEach(t),CKo=r(KEe," (Pegasus model)"),KEe.forEach(t),MKo=i(Me),U6=n(Me,"LI",{});var ZEe=s(U6);Nfe=n(ZEe,"STRONG",{});var kZr=s(Nfe);EKo=r(kZr,"t5"),kZr.forEach(t),yKo=r(ZEe," \u2014 "),RD=n(ZEe,"A",{href:!0});var RZr=s(RD);wKo=r(RZr,"TFT5ForConditionalGeneration"),RZr.forEach(t),AKo=r(ZEe," (T5 model)"),ZEe.forEach(t),Me.forEach(t),LKo=i(fa),Dfe=n(fa,"P",{});var SZr=s(Dfe);BKo=r(SZr,"Examples:"),SZr.forEach(t),xKo=i(fa),m(P3.$$.fragment,fa),fa.forEach(t),kl.forEach(t),L0e=i(d),lc=n(d,"H2",{class:!0});var P9e=s(lc);J6=n(P9e,"A",{id:!0,class:!0,href:!0});var PZr=s(J6);qfe=n(PZr,"SPAN",{});var $Zr=s(qfe);m($3.$$.fragment,$Zr),$Zr.forEach(t),PZr.forEach(t),kKo=i(P9e),Gfe=n(P9e,"SPAN",{});var IZr=s(Gfe);RKo=r(IZr,"TFAutoModelForSequenceClassification"),IZr.forEach(t),P9e.forEach(t),B0e=i(d),_r=n(d,"DIV",{class:!0});var Sl=s(_r);m(I3.$$.fragment,Sl),SKo=i(Sl),ic=n(Sl,"P",{});var ZX=s(ic);PKo=r(ZX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ofe=n(ZX,"CODE",{});var jZr=s(Ofe);$Ko=r(jZr,"from_pretrained()"),jZr.forEach(t),IKo=r(ZX,"class method or the "),Xfe=n(ZX,"CODE",{});var NZr=s(Xfe);jKo=r(NZr,"from_config()"),NZr.forEach(t),NKo=r(ZX,`class
method.`),ZX.forEach(t),DKo=i(Sl),j3=n(Sl,"P",{});var $9e=s(j3);qKo=r($9e,"This class cannot be instantiated directly using "),zfe=n($9e,"CODE",{});var DZr=s(zfe);GKo=r(DZr,"__init__()"),DZr.forEach(t),OKo=r($9e," (throws an error)."),$9e.forEach(t),XKo=i(Sl),it=n(Sl,"DIV",{class:!0});var Pl=s(it);m(N3.$$.fragment,Pl),zKo=i(Pl),Vfe=n(Pl,"P",{});var qZr=s(Vfe);VKo=r(qZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qZr.forEach(t),WKo=i(Pl),dc=n(Pl,"P",{});var ez=s(dc);QKo=r(ez,`Note:
Loading a model from its configuration file does `),Wfe=n(ez,"STRONG",{});var GZr=s(Wfe);HKo=r(GZr,"not"),GZr.forEach(t),UKo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qfe=n(ez,"CODE",{});var OZr=s(Qfe);JKo=r(OZr,"from_pretrained()"),OZr.forEach(t),YKo=r(ez,"to load the model weights."),ez.forEach(t),KKo=i(Pl),Hfe=n(Pl,"P",{});var XZr=s(Hfe);ZKo=r(XZr,"Examples:"),XZr.forEach(t),eZo=i(Pl),m(D3.$$.fragment,Pl),Pl.forEach(t),oZo=i(Sl),uo=n(Sl,"DIV",{class:!0});var ma=s(uo);m(q3.$$.fragment,ma),rZo=i(ma),Ufe=n(ma,"P",{});var zZr=s(Ufe);tZo=r(zZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zZr.forEach(t),aZo=i(ma),dn=n(ma,"P",{});var lC=s(dn);nZo=r(lC,"The model class to instantiate is selected based on the "),Jfe=n(lC,"CODE",{});var VZr=s(Jfe);sZo=r(VZr,"model_type"),VZr.forEach(t),lZo=r(lC,` property of the config object (either
passed as an argument or loaded from `),Yfe=n(lC,"CODE",{});var WZr=s(Yfe);iZo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),dZo=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=n(lC,"CODE",{});var QZr=s(Kfe);cZo=r(QZr,"pretrained_model_name_or_path"),QZr.forEach(t),fZo=r(lC,":"),lC.forEach(t),mZo=i(ma),X=n(ma,"UL",{});var W=s(X);Y6=n(W,"LI",{});var e3e=s(Y6);Zfe=n(e3e,"STRONG",{});var HZr=s(Zfe);gZo=r(HZr,"albert"),HZr.forEach(t),hZo=r(e3e," \u2014 "),SD=n(e3e,"A",{href:!0});var UZr=s(SD);pZo=r(UZr,"TFAlbertForSequenceClassification"),UZr.forEach(t),_Zo=r(e3e," (ALBERT model)"),e3e.forEach(t),uZo=i(W),K6=n(W,"LI",{});var o3e=s(K6);eme=n(o3e,"STRONG",{});var JZr=s(eme);bZo=r(JZr,"bert"),JZr.forEach(t),vZo=r(o3e," \u2014 "),PD=n(o3e,"A",{href:!0});var YZr=s(PD);TZo=r(YZr,"TFBertForSequenceClassification"),YZr.forEach(t),FZo=r(o3e," (BERT model)"),o3e.forEach(t),CZo=i(W),Z6=n(W,"LI",{});var r3e=s(Z6);ome=n(r3e,"STRONG",{});var KZr=s(ome);MZo=r(KZr,"camembert"),KZr.forEach(t),EZo=r(r3e," \u2014 "),$D=n(r3e,"A",{href:!0});var ZZr=s($D);yZo=r(ZZr,"TFCamembertForSequenceClassification"),ZZr.forEach(t),wZo=r(r3e," (CamemBERT model)"),r3e.forEach(t),AZo=i(W),eT=n(W,"LI",{});var t3e=s(eT);rme=n(t3e,"STRONG",{});var eet=s(rme);LZo=r(eet,"convbert"),eet.forEach(t),BZo=r(t3e," \u2014 "),ID=n(t3e,"A",{href:!0});var oet=s(ID);xZo=r(oet,"TFConvBertForSequenceClassification"),oet.forEach(t),kZo=r(t3e," (ConvBERT model)"),t3e.forEach(t),RZo=i(W),oT=n(W,"LI",{});var a3e=s(oT);tme=n(a3e,"STRONG",{});var ret=s(tme);SZo=r(ret,"ctrl"),ret.forEach(t),PZo=r(a3e," \u2014 "),jD=n(a3e,"A",{href:!0});var tet=s(jD);$Zo=r(tet,"TFCTRLForSequenceClassification"),tet.forEach(t),IZo=r(a3e," (CTRL model)"),a3e.forEach(t),jZo=i(W),rT=n(W,"LI",{});var n3e=s(rT);ame=n(n3e,"STRONG",{});var aet=s(ame);NZo=r(aet,"deberta"),aet.forEach(t),DZo=r(n3e," \u2014 "),ND=n(n3e,"A",{href:!0});var net=s(ND);qZo=r(net,"TFDebertaForSequenceClassification"),net.forEach(t),GZo=r(n3e," (DeBERTa model)"),n3e.forEach(t),OZo=i(W),tT=n(W,"LI",{});var s3e=s(tT);nme=n(s3e,"STRONG",{});var set=s(nme);XZo=r(set,"deberta-v2"),set.forEach(t),zZo=r(s3e," \u2014 "),DD=n(s3e,"A",{href:!0});var iet=s(DD);VZo=r(iet,"TFDebertaV2ForSequenceClassification"),iet.forEach(t),WZo=r(s3e," (DeBERTa-v2 model)"),s3e.forEach(t),QZo=i(W),aT=n(W,"LI",{});var l3e=s(aT);sme=n(l3e,"STRONG",{});var det=s(sme);HZo=r(det,"distilbert"),det.forEach(t),UZo=r(l3e," \u2014 "),qD=n(l3e,"A",{href:!0});var cet=s(qD);JZo=r(cet,"TFDistilBertForSequenceClassification"),cet.forEach(t),YZo=r(l3e," (DistilBERT model)"),l3e.forEach(t),KZo=i(W),nT=n(W,"LI",{});var i3e=s(nT);lme=n(i3e,"STRONG",{});var fet=s(lme);ZZo=r(fet,"electra"),fet.forEach(t),eer=r(i3e," \u2014 "),GD=n(i3e,"A",{href:!0});var met=s(GD);oer=r(met,"TFElectraForSequenceClassification"),met.forEach(t),rer=r(i3e," (ELECTRA model)"),i3e.forEach(t),ter=i(W),sT=n(W,"LI",{});var d3e=s(sT);ime=n(d3e,"STRONG",{});var get=s(ime);aer=r(get,"flaubert"),get.forEach(t),ner=r(d3e," \u2014 "),OD=n(d3e,"A",{href:!0});var het=s(OD);ser=r(het,"TFFlaubertForSequenceClassification"),het.forEach(t),ler=r(d3e," (FlauBERT model)"),d3e.forEach(t),ier=i(W),lT=n(W,"LI",{});var c3e=s(lT);dme=n(c3e,"STRONG",{});var pet=s(dme);der=r(pet,"funnel"),pet.forEach(t),cer=r(c3e," \u2014 "),XD=n(c3e,"A",{href:!0});var _et=s(XD);fer=r(_et,"TFFunnelForSequenceClassification"),_et.forEach(t),mer=r(c3e," (Funnel Transformer model)"),c3e.forEach(t),ger=i(W),iT=n(W,"LI",{});var f3e=s(iT);cme=n(f3e,"STRONG",{});var uet=s(cme);her=r(uet,"gpt2"),uet.forEach(t),per=r(f3e," \u2014 "),zD=n(f3e,"A",{href:!0});var bet=s(zD);_er=r(bet,"TFGPT2ForSequenceClassification"),bet.forEach(t),uer=r(f3e," (OpenAI GPT-2 model)"),f3e.forEach(t),ber=i(W),dT=n(W,"LI",{});var m3e=s(dT);fme=n(m3e,"STRONG",{});var vet=s(fme);ver=r(vet,"layoutlm"),vet.forEach(t),Ter=r(m3e," \u2014 "),VD=n(m3e,"A",{href:!0});var Tet=s(VD);Fer=r(Tet,"TFLayoutLMForSequenceClassification"),Tet.forEach(t),Cer=r(m3e," (LayoutLM model)"),m3e.forEach(t),Mer=i(W),cT=n(W,"LI",{});var g3e=s(cT);mme=n(g3e,"STRONG",{});var Fet=s(mme);Eer=r(Fet,"longformer"),Fet.forEach(t),yer=r(g3e," \u2014 "),WD=n(g3e,"A",{href:!0});var Cet=s(WD);wer=r(Cet,"TFLongformerForSequenceClassification"),Cet.forEach(t),Aer=r(g3e," (Longformer model)"),g3e.forEach(t),Ler=i(W),fT=n(W,"LI",{});var h3e=s(fT);gme=n(h3e,"STRONG",{});var Met=s(gme);Ber=r(Met,"mobilebert"),Met.forEach(t),xer=r(h3e," \u2014 "),QD=n(h3e,"A",{href:!0});var Eet=s(QD);ker=r(Eet,"TFMobileBertForSequenceClassification"),Eet.forEach(t),Rer=r(h3e," (MobileBERT model)"),h3e.forEach(t),Ser=i(W),mT=n(W,"LI",{});var p3e=s(mT);hme=n(p3e,"STRONG",{});var yet=s(hme);Per=r(yet,"mpnet"),yet.forEach(t),$er=r(p3e," \u2014 "),HD=n(p3e,"A",{href:!0});var wet=s(HD);Ier=r(wet,"TFMPNetForSequenceClassification"),wet.forEach(t),jer=r(p3e," (MPNet model)"),p3e.forEach(t),Ner=i(W),gT=n(W,"LI",{});var _3e=s(gT);pme=n(_3e,"STRONG",{});var Aet=s(pme);Der=r(Aet,"openai-gpt"),Aet.forEach(t),qer=r(_3e," \u2014 "),UD=n(_3e,"A",{href:!0});var Let=s(UD);Ger=r(Let,"TFOpenAIGPTForSequenceClassification"),Let.forEach(t),Oer=r(_3e," (OpenAI GPT model)"),_3e.forEach(t),Xer=i(W),hT=n(W,"LI",{});var u3e=s(hT);_me=n(u3e,"STRONG",{});var Bet=s(_me);zer=r(Bet,"rembert"),Bet.forEach(t),Ver=r(u3e," \u2014 "),JD=n(u3e,"A",{href:!0});var xet=s(JD);Wer=r(xet,"TFRemBertForSequenceClassification"),xet.forEach(t),Qer=r(u3e," (RemBERT model)"),u3e.forEach(t),Her=i(W),pT=n(W,"LI",{});var b3e=s(pT);ume=n(b3e,"STRONG",{});var ket=s(ume);Uer=r(ket,"roberta"),ket.forEach(t),Jer=r(b3e," \u2014 "),YD=n(b3e,"A",{href:!0});var Ret=s(YD);Yer=r(Ret,"TFRobertaForSequenceClassification"),Ret.forEach(t),Ker=r(b3e," (RoBERTa model)"),b3e.forEach(t),Zer=i(W),_T=n(W,"LI",{});var v3e=s(_T);bme=n(v3e,"STRONG",{});var Set=s(bme);eor=r(Set,"roformer"),Set.forEach(t),oor=r(v3e," \u2014 "),KD=n(v3e,"A",{href:!0});var Pet=s(KD);ror=r(Pet,"TFRoFormerForSequenceClassification"),Pet.forEach(t),tor=r(v3e," (RoFormer model)"),v3e.forEach(t),aor=i(W),uT=n(W,"LI",{});var T3e=s(uT);vme=n(T3e,"STRONG",{});var $et=s(vme);nor=r($et,"tapas"),$et.forEach(t),sor=r(T3e," \u2014 "),ZD=n(T3e,"A",{href:!0});var Iet=s(ZD);lor=r(Iet,"TFTapasForSequenceClassification"),Iet.forEach(t),ior=r(T3e," (TAPAS model)"),T3e.forEach(t),dor=i(W),bT=n(W,"LI",{});var F3e=s(bT);Tme=n(F3e,"STRONG",{});var jet=s(Tme);cor=r(jet,"transfo-xl"),jet.forEach(t),mor=r(F3e," \u2014 "),eq=n(F3e,"A",{href:!0});var Net=s(eq);gor=r(Net,"TFTransfoXLForSequenceClassification"),Net.forEach(t),hor=r(F3e," (Transformer-XL model)"),F3e.forEach(t),por=i(W),vT=n(W,"LI",{});var C3e=s(vT);Fme=n(C3e,"STRONG",{});var Det=s(Fme);_or=r(Det,"xlm"),Det.forEach(t),uor=r(C3e," \u2014 "),oq=n(C3e,"A",{href:!0});var qet=s(oq);bor=r(qet,"TFXLMForSequenceClassification"),qet.forEach(t),vor=r(C3e," (XLM model)"),C3e.forEach(t),Tor=i(W),TT=n(W,"LI",{});var M3e=s(TT);Cme=n(M3e,"STRONG",{});var Get=s(Cme);For=r(Get,"xlm-roberta"),Get.forEach(t),Cor=r(M3e," \u2014 "),rq=n(M3e,"A",{href:!0});var Oet=s(rq);Mor=r(Oet,"TFXLMRobertaForSequenceClassification"),Oet.forEach(t),Eor=r(M3e," (XLM-RoBERTa model)"),M3e.forEach(t),yor=i(W),FT=n(W,"LI",{});var E3e=s(FT);Mme=n(E3e,"STRONG",{});var Xet=s(Mme);wor=r(Xet,"xlnet"),Xet.forEach(t),Aor=r(E3e," \u2014 "),tq=n(E3e,"A",{href:!0});var zet=s(tq);Lor=r(zet,"TFXLNetForSequenceClassification"),zet.forEach(t),Bor=r(E3e," (XLNet model)"),E3e.forEach(t),W.forEach(t),xor=i(ma),Eme=n(ma,"P",{});var Vet=s(Eme);kor=r(Vet,"Examples:"),Vet.forEach(t),Ror=i(ma),m(G3.$$.fragment,ma),ma.forEach(t),Sl.forEach(t),x0e=i(d),cc=n(d,"H2",{class:!0});var I9e=s(cc);CT=n(I9e,"A",{id:!0,class:!0,href:!0});var Wet=s(CT);yme=n(Wet,"SPAN",{});var Qet=s(yme);m(O3.$$.fragment,Qet),Qet.forEach(t),Wet.forEach(t),Sor=i(I9e),wme=n(I9e,"SPAN",{});var Het=s(wme);Por=r(Het,"TFAutoModelForMultipleChoice"),Het.forEach(t),I9e.forEach(t),k0e=i(d),ur=n(d,"DIV",{class:!0});var $l=s(ur);m(X3.$$.fragment,$l),$or=i($l),fc=n($l,"P",{});var oz=s(fc);Ior=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ame=n(oz,"CODE",{});var Uet=s(Ame);jor=r(Uet,"from_pretrained()"),Uet.forEach(t),Nor=r(oz,"class method or the "),Lme=n(oz,"CODE",{});var Jet=s(Lme);Dor=r(Jet,"from_config()"),Jet.forEach(t),qor=r(oz,`class
method.`),oz.forEach(t),Gor=i($l),z3=n($l,"P",{});var j9e=s(z3);Oor=r(j9e,"This class cannot be instantiated directly using "),Bme=n(j9e,"CODE",{});var Yet=s(Bme);Xor=r(Yet,"__init__()"),Yet.forEach(t),zor=r(j9e," (throws an error)."),j9e.forEach(t),Vor=i($l),dt=n($l,"DIV",{class:!0});var Il=s(dt);m(V3.$$.fragment,Il),Wor=i(Il),xme=n(Il,"P",{});var Ket=s(xme);Qor=r(Ket,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ket.forEach(t),Hor=i(Il),mc=n(Il,"P",{});var rz=s(mc);Uor=r(rz,`Note:
Loading a model from its configuration file does `),kme=n(rz,"STRONG",{});var Zet=s(kme);Jor=r(Zet,"not"),Zet.forEach(t),Yor=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rme=n(rz,"CODE",{});var eot=s(Rme);Kor=r(eot,"from_pretrained()"),eot.forEach(t),Zor=r(rz,"to load the model weights."),rz.forEach(t),err=i(Il),Sme=n(Il,"P",{});var oot=s(Sme);orr=r(oot,"Examples:"),oot.forEach(t),rrr=i(Il),m(W3.$$.fragment,Il),Il.forEach(t),trr=i($l),bo=n($l,"DIV",{class:!0});var ga=s(bo);m(Q3.$$.fragment,ga),arr=i(ga),Pme=n(ga,"P",{});var rot=s(Pme);nrr=r(rot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rot.forEach(t),srr=i(ga),cn=n(ga,"P",{});var iC=s(cn);lrr=r(iC,"The model class to instantiate is selected based on the "),$me=n(iC,"CODE",{});var tot=s($me);irr=r(tot,"model_type"),tot.forEach(t),drr=r(iC,` property of the config object (either
passed as an argument or loaded from `),Ime=n(iC,"CODE",{});var aot=s(Ime);crr=r(aot,"pretrained_model_name_or_path"),aot.forEach(t),frr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=n(iC,"CODE",{});var not=s(jme);mrr=r(not,"pretrained_model_name_or_path"),not.forEach(t),grr=r(iC,":"),iC.forEach(t),hrr=i(ga),te=n(ga,"UL",{});var ae=s(te);MT=n(ae,"LI",{});var y3e=s(MT);Nme=n(y3e,"STRONG",{});var sot=s(Nme);prr=r(sot,"albert"),sot.forEach(t),_rr=r(y3e," \u2014 "),aq=n(y3e,"A",{href:!0});var lot=s(aq);urr=r(lot,"TFAlbertForMultipleChoice"),lot.forEach(t),brr=r(y3e," (ALBERT model)"),y3e.forEach(t),vrr=i(ae),ET=n(ae,"LI",{});var w3e=s(ET);Dme=n(w3e,"STRONG",{});var iot=s(Dme);Trr=r(iot,"bert"),iot.forEach(t),Frr=r(w3e," \u2014 "),nq=n(w3e,"A",{href:!0});var dot=s(nq);Crr=r(dot,"TFBertForMultipleChoice"),dot.forEach(t),Mrr=r(w3e," (BERT model)"),w3e.forEach(t),Err=i(ae),yT=n(ae,"LI",{});var A3e=s(yT);qme=n(A3e,"STRONG",{});var cot=s(qme);yrr=r(cot,"camembert"),cot.forEach(t),wrr=r(A3e," \u2014 "),sq=n(A3e,"A",{href:!0});var fot=s(sq);Arr=r(fot,"TFCamembertForMultipleChoice"),fot.forEach(t),Lrr=r(A3e," (CamemBERT model)"),A3e.forEach(t),Brr=i(ae),wT=n(ae,"LI",{});var L3e=s(wT);Gme=n(L3e,"STRONG",{});var mot=s(Gme);xrr=r(mot,"convbert"),mot.forEach(t),krr=r(L3e," \u2014 "),lq=n(L3e,"A",{href:!0});var got=s(lq);Rrr=r(got,"TFConvBertForMultipleChoice"),got.forEach(t),Srr=r(L3e," (ConvBERT model)"),L3e.forEach(t),Prr=i(ae),AT=n(ae,"LI",{});var B3e=s(AT);Ome=n(B3e,"STRONG",{});var hot=s(Ome);$rr=r(hot,"distilbert"),hot.forEach(t),Irr=r(B3e," \u2014 "),iq=n(B3e,"A",{href:!0});var pot=s(iq);jrr=r(pot,"TFDistilBertForMultipleChoice"),pot.forEach(t),Nrr=r(B3e," (DistilBERT model)"),B3e.forEach(t),Drr=i(ae),LT=n(ae,"LI",{});var x3e=s(LT);Xme=n(x3e,"STRONG",{});var _ot=s(Xme);qrr=r(_ot,"electra"),_ot.forEach(t),Grr=r(x3e," \u2014 "),dq=n(x3e,"A",{href:!0});var uot=s(dq);Orr=r(uot,"TFElectraForMultipleChoice"),uot.forEach(t),Xrr=r(x3e," (ELECTRA model)"),x3e.forEach(t),zrr=i(ae),BT=n(ae,"LI",{});var k3e=s(BT);zme=n(k3e,"STRONG",{});var bot=s(zme);Vrr=r(bot,"flaubert"),bot.forEach(t),Wrr=r(k3e," \u2014 "),cq=n(k3e,"A",{href:!0});var vot=s(cq);Qrr=r(vot,"TFFlaubertForMultipleChoice"),vot.forEach(t),Hrr=r(k3e," (FlauBERT model)"),k3e.forEach(t),Urr=i(ae),xT=n(ae,"LI",{});var R3e=s(xT);Vme=n(R3e,"STRONG",{});var Tot=s(Vme);Jrr=r(Tot,"funnel"),Tot.forEach(t),Yrr=r(R3e," \u2014 "),fq=n(R3e,"A",{href:!0});var Fot=s(fq);Krr=r(Fot,"TFFunnelForMultipleChoice"),Fot.forEach(t),Zrr=r(R3e," (Funnel Transformer model)"),R3e.forEach(t),etr=i(ae),kT=n(ae,"LI",{});var S3e=s(kT);Wme=n(S3e,"STRONG",{});var Cot=s(Wme);otr=r(Cot,"longformer"),Cot.forEach(t),rtr=r(S3e," \u2014 "),mq=n(S3e,"A",{href:!0});var Mot=s(mq);ttr=r(Mot,"TFLongformerForMultipleChoice"),Mot.forEach(t),atr=r(S3e," (Longformer model)"),S3e.forEach(t),ntr=i(ae),RT=n(ae,"LI",{});var P3e=s(RT);Qme=n(P3e,"STRONG",{});var Eot=s(Qme);str=r(Eot,"mobilebert"),Eot.forEach(t),ltr=r(P3e," \u2014 "),gq=n(P3e,"A",{href:!0});var yot=s(gq);itr=r(yot,"TFMobileBertForMultipleChoice"),yot.forEach(t),dtr=r(P3e," (MobileBERT model)"),P3e.forEach(t),ctr=i(ae),ST=n(ae,"LI",{});var $3e=s(ST);Hme=n($3e,"STRONG",{});var wot=s(Hme);ftr=r(wot,"mpnet"),wot.forEach(t),mtr=r($3e," \u2014 "),hq=n($3e,"A",{href:!0});var Aot=s(hq);gtr=r(Aot,"TFMPNetForMultipleChoice"),Aot.forEach(t),htr=r($3e," (MPNet model)"),$3e.forEach(t),ptr=i(ae),PT=n(ae,"LI",{});var I3e=s(PT);Ume=n(I3e,"STRONG",{});var Lot=s(Ume);_tr=r(Lot,"rembert"),Lot.forEach(t),utr=r(I3e," \u2014 "),pq=n(I3e,"A",{href:!0});var Bot=s(pq);btr=r(Bot,"TFRemBertForMultipleChoice"),Bot.forEach(t),vtr=r(I3e," (RemBERT model)"),I3e.forEach(t),Ttr=i(ae),$T=n(ae,"LI",{});var j3e=s($T);Jme=n(j3e,"STRONG",{});var xot=s(Jme);Ftr=r(xot,"roberta"),xot.forEach(t),Ctr=r(j3e," \u2014 "),_q=n(j3e,"A",{href:!0});var kot=s(_q);Mtr=r(kot,"TFRobertaForMultipleChoice"),kot.forEach(t),Etr=r(j3e," (RoBERTa model)"),j3e.forEach(t),ytr=i(ae),IT=n(ae,"LI",{});var N3e=s(IT);Yme=n(N3e,"STRONG",{});var Rot=s(Yme);wtr=r(Rot,"roformer"),Rot.forEach(t),Atr=r(N3e," \u2014 "),uq=n(N3e,"A",{href:!0});var Sot=s(uq);Ltr=r(Sot,"TFRoFormerForMultipleChoice"),Sot.forEach(t),Btr=r(N3e," (RoFormer model)"),N3e.forEach(t),xtr=i(ae),jT=n(ae,"LI",{});var D3e=s(jT);Kme=n(D3e,"STRONG",{});var Pot=s(Kme);ktr=r(Pot,"xlm"),Pot.forEach(t),Rtr=r(D3e," \u2014 "),bq=n(D3e,"A",{href:!0});var $ot=s(bq);Str=r($ot,"TFXLMForMultipleChoice"),$ot.forEach(t),Ptr=r(D3e," (XLM model)"),D3e.forEach(t),$tr=i(ae),NT=n(ae,"LI",{});var q3e=s(NT);Zme=n(q3e,"STRONG",{});var Iot=s(Zme);Itr=r(Iot,"xlm-roberta"),Iot.forEach(t),jtr=r(q3e," \u2014 "),vq=n(q3e,"A",{href:!0});var jot=s(vq);Ntr=r(jot,"TFXLMRobertaForMultipleChoice"),jot.forEach(t),Dtr=r(q3e," (XLM-RoBERTa model)"),q3e.forEach(t),qtr=i(ae),DT=n(ae,"LI",{});var G3e=s(DT);ege=n(G3e,"STRONG",{});var Not=s(ege);Gtr=r(Not,"xlnet"),Not.forEach(t),Otr=r(G3e," \u2014 "),Tq=n(G3e,"A",{href:!0});var Dot=s(Tq);Xtr=r(Dot,"TFXLNetForMultipleChoice"),Dot.forEach(t),ztr=r(G3e," (XLNet model)"),G3e.forEach(t),ae.forEach(t),Vtr=i(ga),oge=n(ga,"P",{});var qot=s(oge);Wtr=r(qot,"Examples:"),qot.forEach(t),Qtr=i(ga),m(H3.$$.fragment,ga),ga.forEach(t),$l.forEach(t),R0e=i(d),gc=n(d,"H2",{class:!0});var N9e=s(gc);qT=n(N9e,"A",{id:!0,class:!0,href:!0});var Got=s(qT);rge=n(Got,"SPAN",{});var Oot=s(rge);m(U3.$$.fragment,Oot),Oot.forEach(t),Got.forEach(t),Htr=i(N9e),tge=n(N9e,"SPAN",{});var Xot=s(tge);Utr=r(Xot,"TFAutoModelForTableQuestionAnswering"),Xot.forEach(t),N9e.forEach(t),S0e=i(d),br=n(d,"DIV",{class:!0});var jl=s(br);m(J3.$$.fragment,jl),Jtr=i(jl),hc=n(jl,"P",{});var tz=s(hc);Ytr=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),age=n(tz,"CODE",{});var zot=s(age);Ktr=r(zot,"from_pretrained()"),zot.forEach(t),Ztr=r(tz,"class method or the "),nge=n(tz,"CODE",{});var Vot=s(nge);ear=r(Vot,"from_config()"),Vot.forEach(t),oar=r(tz,`class
method.`),tz.forEach(t),rar=i(jl),Y3=n(jl,"P",{});var D9e=s(Y3);tar=r(D9e,"This class cannot be instantiated directly using "),sge=n(D9e,"CODE",{});var Wot=s(sge);aar=r(Wot,"__init__()"),Wot.forEach(t),nar=r(D9e," (throws an error)."),D9e.forEach(t),sar=i(jl),ct=n(jl,"DIV",{class:!0});var Nl=s(ct);m(K3.$$.fragment,Nl),lar=i(Nl),lge=n(Nl,"P",{});var Qot=s(lge);iar=r(Qot,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qot.forEach(t),dar=i(Nl),pc=n(Nl,"P",{});var az=s(pc);car=r(az,`Note:
Loading a model from its configuration file does `),ige=n(az,"STRONG",{});var Hot=s(ige);far=r(Hot,"not"),Hot.forEach(t),mar=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),dge=n(az,"CODE",{});var Uot=s(dge);gar=r(Uot,"from_pretrained()"),Uot.forEach(t),har=r(az,"to load the model weights."),az.forEach(t),par=i(Nl),cge=n(Nl,"P",{});var Jot=s(cge);_ar=r(Jot,"Examples:"),Jot.forEach(t),uar=i(Nl),m(Z3.$$.fragment,Nl),Nl.forEach(t),bar=i(jl),vo=n(jl,"DIV",{class:!0});var ha=s(vo);m(ey.$$.fragment,ha),Tar=i(ha),fge=n(ha,"P",{});var Yot=s(fge);Far=r(Yot,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Yot.forEach(t),Car=i(ha),fn=n(ha,"P",{});var dC=s(fn);Mar=r(dC,"The model class to instantiate is selected based on the "),mge=n(dC,"CODE",{});var Kot=s(mge);Ear=r(Kot,"model_type"),Kot.forEach(t),yar=r(dC,` property of the config object (either
passed as an argument or loaded from `),gge=n(dC,"CODE",{});var Zot=s(gge);war=r(Zot,"pretrained_model_name_or_path"),Zot.forEach(t),Aar=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(dC,"CODE",{});var ert=s(hge);Lar=r(ert,"pretrained_model_name_or_path"),ert.forEach(t),Bar=r(dC,":"),dC.forEach(t),xar=i(ha),pge=n(ha,"UL",{});var ort=s(pge);GT=n(ort,"LI",{});var O3e=s(GT);_ge=n(O3e,"STRONG",{});var rrt=s(_ge);kar=r(rrt,"tapas"),rrt.forEach(t),Rar=r(O3e," \u2014 "),Fq=n(O3e,"A",{href:!0});var trt=s(Fq);Sar=r(trt,"TFTapasForQuestionAnswering"),trt.forEach(t),Par=r(O3e," (TAPAS model)"),O3e.forEach(t),ort.forEach(t),$ar=i(ha),uge=n(ha,"P",{});var art=s(uge);Iar=r(art,"Examples:"),art.forEach(t),jar=i(ha),m(oy.$$.fragment,ha),ha.forEach(t),jl.forEach(t),P0e=i(d),_c=n(d,"H2",{class:!0});var q9e=s(_c);OT=n(q9e,"A",{id:!0,class:!0,href:!0});var nrt=s(OT);bge=n(nrt,"SPAN",{});var srt=s(bge);m(ry.$$.fragment,srt),srt.forEach(t),nrt.forEach(t),Nar=i(q9e),vge=n(q9e,"SPAN",{});var lrt=s(vge);Dar=r(lrt,"TFAutoModelForTokenClassification"),lrt.forEach(t),q9e.forEach(t),$0e=i(d),vr=n(d,"DIV",{class:!0});var Dl=s(vr);m(ty.$$.fragment,Dl),qar=i(Dl),uc=n(Dl,"P",{});var nz=s(uc);Gar=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tge=n(nz,"CODE",{});var irt=s(Tge);Oar=r(irt,"from_pretrained()"),irt.forEach(t),Xar=r(nz,"class method or the "),Fge=n(nz,"CODE",{});var drt=s(Fge);zar=r(drt,"from_config()"),drt.forEach(t),Var=r(nz,`class
method.`),nz.forEach(t),War=i(Dl),ay=n(Dl,"P",{});var G9e=s(ay);Qar=r(G9e,"This class cannot be instantiated directly using "),Cge=n(G9e,"CODE",{});var crt=s(Cge);Har=r(crt,"__init__()"),crt.forEach(t),Uar=r(G9e," (throws an error)."),G9e.forEach(t),Jar=i(Dl),ft=n(Dl,"DIV",{class:!0});var ql=s(ft);m(ny.$$.fragment,ql),Yar=i(ql),Mge=n(ql,"P",{});var frt=s(Mge);Kar=r(frt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),frt.forEach(t),Zar=i(ql),bc=n(ql,"P",{});var sz=s(bc);enr=r(sz,`Note:
Loading a model from its configuration file does `),Ege=n(sz,"STRONG",{});var mrt=s(Ege);onr=r(mrt,"not"),mrt.forEach(t),rnr=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yge=n(sz,"CODE",{});var grt=s(yge);tnr=r(grt,"from_pretrained()"),grt.forEach(t),anr=r(sz,"to load the model weights."),sz.forEach(t),nnr=i(ql),wge=n(ql,"P",{});var hrt=s(wge);snr=r(hrt,"Examples:"),hrt.forEach(t),lnr=i(ql),m(sy.$$.fragment,ql),ql.forEach(t),inr=i(Dl),To=n(Dl,"DIV",{class:!0});var pa=s(To);m(ly.$$.fragment,pa),dnr=i(pa),Age=n(pa,"P",{});var prt=s(Age);cnr=r(prt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),prt.forEach(t),fnr=i(pa),mn=n(pa,"P",{});var cC=s(mn);mnr=r(cC,"The model class to instantiate is selected based on the "),Lge=n(cC,"CODE",{});var _rt=s(Lge);gnr=r(_rt,"model_type"),_rt.forEach(t),hnr=r(cC,` property of the config object (either
passed as an argument or loaded from `),Bge=n(cC,"CODE",{});var urt=s(Bge);pnr=r(urt,"pretrained_model_name_or_path"),urt.forEach(t),_nr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=n(cC,"CODE",{});var brt=s(xge);unr=r(brt,"pretrained_model_name_or_path"),brt.forEach(t),bnr=r(cC,":"),cC.forEach(t),vnr=i(pa),K=n(pa,"UL",{});var oe=s(K);XT=n(oe,"LI",{});var X3e=s(XT);kge=n(X3e,"STRONG",{});var vrt=s(kge);Tnr=r(vrt,"albert"),vrt.forEach(t),Fnr=r(X3e," \u2014 "),Cq=n(X3e,"A",{href:!0});var Trt=s(Cq);Cnr=r(Trt,"TFAlbertForTokenClassification"),Trt.forEach(t),Mnr=r(X3e," (ALBERT model)"),X3e.forEach(t),Enr=i(oe),zT=n(oe,"LI",{});var z3e=s(zT);Rge=n(z3e,"STRONG",{});var Frt=s(Rge);ynr=r(Frt,"bert"),Frt.forEach(t),wnr=r(z3e," \u2014 "),Mq=n(z3e,"A",{href:!0});var Crt=s(Mq);Anr=r(Crt,"TFBertForTokenClassification"),Crt.forEach(t),Lnr=r(z3e," (BERT model)"),z3e.forEach(t),Bnr=i(oe),VT=n(oe,"LI",{});var V3e=s(VT);Sge=n(V3e,"STRONG",{});var Mrt=s(Sge);xnr=r(Mrt,"camembert"),Mrt.forEach(t),knr=r(V3e," \u2014 "),Eq=n(V3e,"A",{href:!0});var Ert=s(Eq);Rnr=r(Ert,"TFCamembertForTokenClassification"),Ert.forEach(t),Snr=r(V3e," (CamemBERT model)"),V3e.forEach(t),Pnr=i(oe),WT=n(oe,"LI",{});var W3e=s(WT);Pge=n(W3e,"STRONG",{});var yrt=s(Pge);$nr=r(yrt,"convbert"),yrt.forEach(t),Inr=r(W3e," \u2014 "),yq=n(W3e,"A",{href:!0});var wrt=s(yq);jnr=r(wrt,"TFConvBertForTokenClassification"),wrt.forEach(t),Nnr=r(W3e," (ConvBERT model)"),W3e.forEach(t),Dnr=i(oe),QT=n(oe,"LI",{});var Q3e=s(QT);$ge=n(Q3e,"STRONG",{});var Art=s($ge);qnr=r(Art,"deberta"),Art.forEach(t),Gnr=r(Q3e," \u2014 "),wq=n(Q3e,"A",{href:!0});var Lrt=s(wq);Onr=r(Lrt,"TFDebertaForTokenClassification"),Lrt.forEach(t),Xnr=r(Q3e," (DeBERTa model)"),Q3e.forEach(t),znr=i(oe),HT=n(oe,"LI",{});var H3e=s(HT);Ige=n(H3e,"STRONG",{});var Brt=s(Ige);Vnr=r(Brt,"deberta-v2"),Brt.forEach(t),Wnr=r(H3e," \u2014 "),Aq=n(H3e,"A",{href:!0});var xrt=s(Aq);Qnr=r(xrt,"TFDebertaV2ForTokenClassification"),xrt.forEach(t),Hnr=r(H3e," (DeBERTa-v2 model)"),H3e.forEach(t),Unr=i(oe),UT=n(oe,"LI",{});var U3e=s(UT);jge=n(U3e,"STRONG",{});var krt=s(jge);Jnr=r(krt,"distilbert"),krt.forEach(t),Ynr=r(U3e," \u2014 "),Lq=n(U3e,"A",{href:!0});var Rrt=s(Lq);Knr=r(Rrt,"TFDistilBertForTokenClassification"),Rrt.forEach(t),Znr=r(U3e," (DistilBERT model)"),U3e.forEach(t),esr=i(oe),JT=n(oe,"LI",{});var J3e=s(JT);Nge=n(J3e,"STRONG",{});var Srt=s(Nge);osr=r(Srt,"electra"),Srt.forEach(t),rsr=r(J3e," \u2014 "),Bq=n(J3e,"A",{href:!0});var Prt=s(Bq);tsr=r(Prt,"TFElectraForTokenClassification"),Prt.forEach(t),asr=r(J3e," (ELECTRA model)"),J3e.forEach(t),nsr=i(oe),YT=n(oe,"LI",{});var Y3e=s(YT);Dge=n(Y3e,"STRONG",{});var $rt=s(Dge);ssr=r($rt,"flaubert"),$rt.forEach(t),lsr=r(Y3e," \u2014 "),xq=n(Y3e,"A",{href:!0});var Irt=s(xq);isr=r(Irt,"TFFlaubertForTokenClassification"),Irt.forEach(t),dsr=r(Y3e," (FlauBERT model)"),Y3e.forEach(t),csr=i(oe),KT=n(oe,"LI",{});var K3e=s(KT);qge=n(K3e,"STRONG",{});var jrt=s(qge);fsr=r(jrt,"funnel"),jrt.forEach(t),msr=r(K3e," \u2014 "),kq=n(K3e,"A",{href:!0});var Nrt=s(kq);gsr=r(Nrt,"TFFunnelForTokenClassification"),Nrt.forEach(t),hsr=r(K3e," (Funnel Transformer model)"),K3e.forEach(t),psr=i(oe),ZT=n(oe,"LI",{});var Z3e=s(ZT);Gge=n(Z3e,"STRONG",{});var Drt=s(Gge);_sr=r(Drt,"layoutlm"),Drt.forEach(t),usr=r(Z3e," \u2014 "),Rq=n(Z3e,"A",{href:!0});var qrt=s(Rq);bsr=r(qrt,"TFLayoutLMForTokenClassification"),qrt.forEach(t),vsr=r(Z3e," (LayoutLM model)"),Z3e.forEach(t),Tsr=i(oe),e7=n(oe,"LI",{});var eye=s(e7);Oge=n(eye,"STRONG",{});var Grt=s(Oge);Fsr=r(Grt,"longformer"),Grt.forEach(t),Csr=r(eye," \u2014 "),Sq=n(eye,"A",{href:!0});var Ort=s(Sq);Msr=r(Ort,"TFLongformerForTokenClassification"),Ort.forEach(t),Esr=r(eye," (Longformer model)"),eye.forEach(t),ysr=i(oe),o7=n(oe,"LI",{});var oye=s(o7);Xge=n(oye,"STRONG",{});var Xrt=s(Xge);wsr=r(Xrt,"mobilebert"),Xrt.forEach(t),Asr=r(oye," \u2014 "),Pq=n(oye,"A",{href:!0});var zrt=s(Pq);Lsr=r(zrt,"TFMobileBertForTokenClassification"),zrt.forEach(t),Bsr=r(oye," (MobileBERT model)"),oye.forEach(t),xsr=i(oe),r7=n(oe,"LI",{});var rye=s(r7);zge=n(rye,"STRONG",{});var Vrt=s(zge);ksr=r(Vrt,"mpnet"),Vrt.forEach(t),Rsr=r(rye," \u2014 "),$q=n(rye,"A",{href:!0});var Wrt=s($q);Ssr=r(Wrt,"TFMPNetForTokenClassification"),Wrt.forEach(t),Psr=r(rye," (MPNet model)"),rye.forEach(t),$sr=i(oe),t7=n(oe,"LI",{});var tye=s(t7);Vge=n(tye,"STRONG",{});var Qrt=s(Vge);Isr=r(Qrt,"rembert"),Qrt.forEach(t),jsr=r(tye," \u2014 "),Iq=n(tye,"A",{href:!0});var Hrt=s(Iq);Nsr=r(Hrt,"TFRemBertForTokenClassification"),Hrt.forEach(t),Dsr=r(tye," (RemBERT model)"),tye.forEach(t),qsr=i(oe),a7=n(oe,"LI",{});var aye=s(a7);Wge=n(aye,"STRONG",{});var Urt=s(Wge);Gsr=r(Urt,"roberta"),Urt.forEach(t),Osr=r(aye," \u2014 "),jq=n(aye,"A",{href:!0});var Jrt=s(jq);Xsr=r(Jrt,"TFRobertaForTokenClassification"),Jrt.forEach(t),zsr=r(aye," (RoBERTa model)"),aye.forEach(t),Vsr=i(oe),n7=n(oe,"LI",{});var nye=s(n7);Qge=n(nye,"STRONG",{});var Yrt=s(Qge);Wsr=r(Yrt,"roformer"),Yrt.forEach(t),Qsr=r(nye," \u2014 "),Nq=n(nye,"A",{href:!0});var Krt=s(Nq);Hsr=r(Krt,"TFRoFormerForTokenClassification"),Krt.forEach(t),Usr=r(nye," (RoFormer model)"),nye.forEach(t),Jsr=i(oe),s7=n(oe,"LI",{});var sye=s(s7);Hge=n(sye,"STRONG",{});var Zrt=s(Hge);Ysr=r(Zrt,"xlm"),Zrt.forEach(t),Ksr=r(sye," \u2014 "),Dq=n(sye,"A",{href:!0});var ett=s(Dq);Zsr=r(ett,"TFXLMForTokenClassification"),ett.forEach(t),elr=r(sye," (XLM model)"),sye.forEach(t),olr=i(oe),l7=n(oe,"LI",{});var lye=s(l7);Uge=n(lye,"STRONG",{});var ott=s(Uge);rlr=r(ott,"xlm-roberta"),ott.forEach(t),tlr=r(lye," \u2014 "),qq=n(lye,"A",{href:!0});var rtt=s(qq);alr=r(rtt,"TFXLMRobertaForTokenClassification"),rtt.forEach(t),nlr=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),slr=i(oe),i7=n(oe,"LI",{});var iye=s(i7);Jge=n(iye,"STRONG",{});var ttt=s(Jge);llr=r(ttt,"xlnet"),ttt.forEach(t),ilr=r(iye," \u2014 "),Gq=n(iye,"A",{href:!0});var att=s(Gq);dlr=r(att,"TFXLNetForTokenClassification"),att.forEach(t),clr=r(iye," (XLNet model)"),iye.forEach(t),oe.forEach(t),flr=i(pa),Yge=n(pa,"P",{});var ntt=s(Yge);mlr=r(ntt,"Examples:"),ntt.forEach(t),glr=i(pa),m(iy.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),I0e=i(d),vc=n(d,"H2",{class:!0});var O9e=s(vc);d7=n(O9e,"A",{id:!0,class:!0,href:!0});var stt=s(d7);Kge=n(stt,"SPAN",{});var ltt=s(Kge);m(dy.$$.fragment,ltt),ltt.forEach(t),stt.forEach(t),hlr=i(O9e),Zge=n(O9e,"SPAN",{});var itt=s(Zge);plr=r(itt,"TFAutoModelForQuestionAnswering"),itt.forEach(t),O9e.forEach(t),j0e=i(d),Tr=n(d,"DIV",{class:!0});var Gl=s(Tr);m(cy.$$.fragment,Gl),_lr=i(Gl),Tc=n(Gl,"P",{});var lz=s(Tc);ulr=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ehe=n(lz,"CODE",{});var dtt=s(ehe);blr=r(dtt,"from_pretrained()"),dtt.forEach(t),vlr=r(lz,"class method or the "),ohe=n(lz,"CODE",{});var ctt=s(ohe);Tlr=r(ctt,"from_config()"),ctt.forEach(t),Flr=r(lz,`class
method.`),lz.forEach(t),Clr=i(Gl),fy=n(Gl,"P",{});var X9e=s(fy);Mlr=r(X9e,"This class cannot be instantiated directly using "),rhe=n(X9e,"CODE",{});var ftt=s(rhe);Elr=r(ftt,"__init__()"),ftt.forEach(t),ylr=r(X9e," (throws an error)."),X9e.forEach(t),wlr=i(Gl),mt=n(Gl,"DIV",{class:!0});var Ol=s(mt);m(my.$$.fragment,Ol),Alr=i(Ol),the=n(Ol,"P",{});var mtt=s(the);Llr=r(mtt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mtt.forEach(t),Blr=i(Ol),Fc=n(Ol,"P",{});var iz=s(Fc);xlr=r(iz,`Note:
Loading a model from its configuration file does `),ahe=n(iz,"STRONG",{});var gtt=s(ahe);klr=r(gtt,"not"),gtt.forEach(t),Rlr=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nhe=n(iz,"CODE",{});var htt=s(nhe);Slr=r(htt,"from_pretrained()"),htt.forEach(t),Plr=r(iz,"to load the model weights."),iz.forEach(t),$lr=i(Ol),she=n(Ol,"P",{});var ptt=s(she);Ilr=r(ptt,"Examples:"),ptt.forEach(t),jlr=i(Ol),m(gy.$$.fragment,Ol),Ol.forEach(t),Nlr=i(Gl),Fo=n(Gl,"DIV",{class:!0});var _a=s(Fo);m(hy.$$.fragment,_a),Dlr=i(_a),lhe=n(_a,"P",{});var _tt=s(lhe);qlr=r(_tt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_tt.forEach(t),Glr=i(_a),gn=n(_a,"P",{});var fC=s(gn);Olr=r(fC,"The model class to instantiate is selected based on the "),ihe=n(fC,"CODE",{});var utt=s(ihe);Xlr=r(utt,"model_type"),utt.forEach(t),zlr=r(fC,` property of the config object (either
passed as an argument or loaded from `),dhe=n(fC,"CODE",{});var btt=s(dhe);Vlr=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),Wlr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(fC,"CODE",{});var vtt=s(che);Qlr=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),Hlr=r(fC,":"),fC.forEach(t),Ulr=i(_a),Z=n(_a,"UL",{});var re=s(Z);c7=n(re,"LI",{});var dye=s(c7);fhe=n(dye,"STRONG",{});var Ttt=s(fhe);Jlr=r(Ttt,"albert"),Ttt.forEach(t),Ylr=r(dye," \u2014 "),Oq=n(dye,"A",{href:!0});var Ftt=s(Oq);Klr=r(Ftt,"TFAlbertForQuestionAnswering"),Ftt.forEach(t),Zlr=r(dye," (ALBERT model)"),dye.forEach(t),eir=i(re),f7=n(re,"LI",{});var cye=s(f7);mhe=n(cye,"STRONG",{});var Ctt=s(mhe);oir=r(Ctt,"bert"),Ctt.forEach(t),rir=r(cye," \u2014 "),Xq=n(cye,"A",{href:!0});var Mtt=s(Xq);tir=r(Mtt,"TFBertForQuestionAnswering"),Mtt.forEach(t),air=r(cye," (BERT model)"),cye.forEach(t),nir=i(re),m7=n(re,"LI",{});var fye=s(m7);ghe=n(fye,"STRONG",{});var Ett=s(ghe);sir=r(Ett,"camembert"),Ett.forEach(t),lir=r(fye," \u2014 "),zq=n(fye,"A",{href:!0});var ytt=s(zq);iir=r(ytt,"TFCamembertForQuestionAnswering"),ytt.forEach(t),dir=r(fye," (CamemBERT model)"),fye.forEach(t),cir=i(re),g7=n(re,"LI",{});var mye=s(g7);hhe=n(mye,"STRONG",{});var wtt=s(hhe);fir=r(wtt,"convbert"),wtt.forEach(t),mir=r(mye," \u2014 "),Vq=n(mye,"A",{href:!0});var Att=s(Vq);gir=r(Att,"TFConvBertForQuestionAnswering"),Att.forEach(t),hir=r(mye," (ConvBERT model)"),mye.forEach(t),pir=i(re),h7=n(re,"LI",{});var gye=s(h7);phe=n(gye,"STRONG",{});var Ltt=s(phe);_ir=r(Ltt,"deberta"),Ltt.forEach(t),uir=r(gye," \u2014 "),Wq=n(gye,"A",{href:!0});var Btt=s(Wq);bir=r(Btt,"TFDebertaForQuestionAnswering"),Btt.forEach(t),vir=r(gye," (DeBERTa model)"),gye.forEach(t),Tir=i(re),p7=n(re,"LI",{});var hye=s(p7);_he=n(hye,"STRONG",{});var xtt=s(_he);Fir=r(xtt,"deberta-v2"),xtt.forEach(t),Cir=r(hye," \u2014 "),Qq=n(hye,"A",{href:!0});var ktt=s(Qq);Mir=r(ktt,"TFDebertaV2ForQuestionAnswering"),ktt.forEach(t),Eir=r(hye," (DeBERTa-v2 model)"),hye.forEach(t),yir=i(re),_7=n(re,"LI",{});var pye=s(_7);uhe=n(pye,"STRONG",{});var Rtt=s(uhe);wir=r(Rtt,"distilbert"),Rtt.forEach(t),Air=r(pye," \u2014 "),Hq=n(pye,"A",{href:!0});var Stt=s(Hq);Lir=r(Stt,"TFDistilBertForQuestionAnswering"),Stt.forEach(t),Bir=r(pye," (DistilBERT model)"),pye.forEach(t),xir=i(re),u7=n(re,"LI",{});var _ye=s(u7);bhe=n(_ye,"STRONG",{});var Ptt=s(bhe);kir=r(Ptt,"electra"),Ptt.forEach(t),Rir=r(_ye," \u2014 "),Uq=n(_ye,"A",{href:!0});var $tt=s(Uq);Sir=r($tt,"TFElectraForQuestionAnswering"),$tt.forEach(t),Pir=r(_ye," (ELECTRA model)"),_ye.forEach(t),$ir=i(re),b7=n(re,"LI",{});var uye=s(b7);vhe=n(uye,"STRONG",{});var Itt=s(vhe);Iir=r(Itt,"flaubert"),Itt.forEach(t),jir=r(uye," \u2014 "),Jq=n(uye,"A",{href:!0});var jtt=s(Jq);Nir=r(jtt,"TFFlaubertForQuestionAnsweringSimple"),jtt.forEach(t),Dir=r(uye," (FlauBERT model)"),uye.forEach(t),qir=i(re),v7=n(re,"LI",{});var bye=s(v7);The=n(bye,"STRONG",{});var Ntt=s(The);Gir=r(Ntt,"funnel"),Ntt.forEach(t),Oir=r(bye," \u2014 "),Yq=n(bye,"A",{href:!0});var Dtt=s(Yq);Xir=r(Dtt,"TFFunnelForQuestionAnswering"),Dtt.forEach(t),zir=r(bye," (Funnel Transformer model)"),bye.forEach(t),Vir=i(re),T7=n(re,"LI",{});var vye=s(T7);Fhe=n(vye,"STRONG",{});var qtt=s(Fhe);Wir=r(qtt,"longformer"),qtt.forEach(t),Qir=r(vye," \u2014 "),Kq=n(vye,"A",{href:!0});var Gtt=s(Kq);Hir=r(Gtt,"TFLongformerForQuestionAnswering"),Gtt.forEach(t),Uir=r(vye," (Longformer model)"),vye.forEach(t),Jir=i(re),F7=n(re,"LI",{});var Tye=s(F7);Che=n(Tye,"STRONG",{});var Ott=s(Che);Yir=r(Ott,"mobilebert"),Ott.forEach(t),Kir=r(Tye," \u2014 "),Zq=n(Tye,"A",{href:!0});var Xtt=s(Zq);Zir=r(Xtt,"TFMobileBertForQuestionAnswering"),Xtt.forEach(t),edr=r(Tye," (MobileBERT model)"),Tye.forEach(t),odr=i(re),C7=n(re,"LI",{});var Fye=s(C7);Mhe=n(Fye,"STRONG",{});var ztt=s(Mhe);rdr=r(ztt,"mpnet"),ztt.forEach(t),tdr=r(Fye," \u2014 "),eG=n(Fye,"A",{href:!0});var Vtt=s(eG);adr=r(Vtt,"TFMPNetForQuestionAnswering"),Vtt.forEach(t),ndr=r(Fye," (MPNet model)"),Fye.forEach(t),sdr=i(re),M7=n(re,"LI",{});var Cye=s(M7);Ehe=n(Cye,"STRONG",{});var Wtt=s(Ehe);ldr=r(Wtt,"rembert"),Wtt.forEach(t),idr=r(Cye," \u2014 "),oG=n(Cye,"A",{href:!0});var Qtt=s(oG);ddr=r(Qtt,"TFRemBertForQuestionAnswering"),Qtt.forEach(t),cdr=r(Cye," (RemBERT model)"),Cye.forEach(t),fdr=i(re),E7=n(re,"LI",{});var Mye=s(E7);yhe=n(Mye,"STRONG",{});var Htt=s(yhe);mdr=r(Htt,"roberta"),Htt.forEach(t),gdr=r(Mye," \u2014 "),rG=n(Mye,"A",{href:!0});var Utt=s(rG);hdr=r(Utt,"TFRobertaForQuestionAnswering"),Utt.forEach(t),pdr=r(Mye," (RoBERTa model)"),Mye.forEach(t),_dr=i(re),y7=n(re,"LI",{});var Eye=s(y7);whe=n(Eye,"STRONG",{});var Jtt=s(whe);udr=r(Jtt,"roformer"),Jtt.forEach(t),bdr=r(Eye," \u2014 "),tG=n(Eye,"A",{href:!0});var Ytt=s(tG);vdr=r(Ytt,"TFRoFormerForQuestionAnswering"),Ytt.forEach(t),Tdr=r(Eye," (RoFormer model)"),Eye.forEach(t),Fdr=i(re),w7=n(re,"LI",{});var yye=s(w7);Ahe=n(yye,"STRONG",{});var Ktt=s(Ahe);Cdr=r(Ktt,"xlm"),Ktt.forEach(t),Mdr=r(yye," \u2014 "),aG=n(yye,"A",{href:!0});var Ztt=s(aG);Edr=r(Ztt,"TFXLMForQuestionAnsweringSimple"),Ztt.forEach(t),ydr=r(yye," (XLM model)"),yye.forEach(t),wdr=i(re),A7=n(re,"LI",{});var wye=s(A7);Lhe=n(wye,"STRONG",{});var eat=s(Lhe);Adr=r(eat,"xlm-roberta"),eat.forEach(t),Ldr=r(wye," \u2014 "),nG=n(wye,"A",{href:!0});var oat=s(nG);Bdr=r(oat,"TFXLMRobertaForQuestionAnswering"),oat.forEach(t),xdr=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),kdr=i(re),L7=n(re,"LI",{});var Aye=s(L7);Bhe=n(Aye,"STRONG",{});var rat=s(Bhe);Rdr=r(rat,"xlnet"),rat.forEach(t),Sdr=r(Aye," \u2014 "),sG=n(Aye,"A",{href:!0});var tat=s(sG);Pdr=r(tat,"TFXLNetForQuestionAnsweringSimple"),tat.forEach(t),$dr=r(Aye," (XLNet model)"),Aye.forEach(t),re.forEach(t),Idr=i(_a),xhe=n(_a,"P",{});var aat=s(xhe);jdr=r(aat,"Examples:"),aat.forEach(t),Ndr=i(_a),m(py.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),N0e=i(d),Cc=n(d,"H2",{class:!0});var z9e=s(Cc);B7=n(z9e,"A",{id:!0,class:!0,href:!0});var nat=s(B7);khe=n(nat,"SPAN",{});var sat=s(khe);m(_y.$$.fragment,sat),sat.forEach(t),nat.forEach(t),Ddr=i(z9e),Rhe=n(z9e,"SPAN",{});var lat=s(Rhe);qdr=r(lat,"TFAutoModelForVision2Seq"),lat.forEach(t),z9e.forEach(t),D0e=i(d),Fr=n(d,"DIV",{class:!0});var Xl=s(Fr);m(uy.$$.fragment,Xl),Gdr=i(Xl),Mc=n(Xl,"P",{});var dz=s(Mc);Odr=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),She=n(dz,"CODE",{});var iat=s(She);Xdr=r(iat,"from_pretrained()"),iat.forEach(t),zdr=r(dz,"class method or the "),Phe=n(dz,"CODE",{});var dat=s(Phe);Vdr=r(dat,"from_config()"),dat.forEach(t),Wdr=r(dz,`class
method.`),dz.forEach(t),Qdr=i(Xl),by=n(Xl,"P",{});var V9e=s(by);Hdr=r(V9e,"This class cannot be instantiated directly using "),$he=n(V9e,"CODE",{});var cat=s($he);Udr=r(cat,"__init__()"),cat.forEach(t),Jdr=r(V9e," (throws an error)."),V9e.forEach(t),Ydr=i(Xl),gt=n(Xl,"DIV",{class:!0});var zl=s(gt);m(vy.$$.fragment,zl),Kdr=i(zl),Ihe=n(zl,"P",{});var fat=s(Ihe);Zdr=r(fat,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fat.forEach(t),ecr=i(zl),Ec=n(zl,"P",{});var cz=s(Ec);ocr=r(cz,`Note:
Loading a model from its configuration file does `),jhe=n(cz,"STRONG",{});var mat=s(jhe);rcr=r(mat,"not"),mat.forEach(t),tcr=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nhe=n(cz,"CODE",{});var gat=s(Nhe);acr=r(gat,"from_pretrained()"),gat.forEach(t),ncr=r(cz,"to load the model weights."),cz.forEach(t),scr=i(zl),Dhe=n(zl,"P",{});var hat=s(Dhe);lcr=r(hat,"Examples:"),hat.forEach(t),icr=i(zl),m(Ty.$$.fragment,zl),zl.forEach(t),dcr=i(Xl),Co=n(Xl,"DIV",{class:!0});var ua=s(Co);m(Fy.$$.fragment,ua),ccr=i(ua),qhe=n(ua,"P",{});var pat=s(qhe);fcr=r(pat,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pat.forEach(t),mcr=i(ua),hn=n(ua,"P",{});var mC=s(hn);gcr=r(mC,"The model class to instantiate is selected based on the "),Ghe=n(mC,"CODE",{});var _at=s(Ghe);hcr=r(_at,"model_type"),_at.forEach(t),pcr=r(mC,` property of the config object (either
passed as an argument or loaded from `),Ohe=n(mC,"CODE",{});var uat=s(Ohe);_cr=r(uat,"pretrained_model_name_or_path"),uat.forEach(t),ucr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=n(mC,"CODE",{});var bat=s(Xhe);bcr=r(bat,"pretrained_model_name_or_path"),bat.forEach(t),vcr=r(mC,":"),mC.forEach(t),Tcr=i(ua),zhe=n(ua,"UL",{});var vat=s(zhe);x7=n(vat,"LI",{});var Lye=s(x7);Vhe=n(Lye,"STRONG",{});var Tat=s(Vhe);Fcr=r(Tat,"vision-encoder-decoder"),Tat.forEach(t),Ccr=r(Lye," \u2014 "),lG=n(Lye,"A",{href:!0});var Fat=s(lG);Mcr=r(Fat,"TFVisionEncoderDecoderModel"),Fat.forEach(t),Ecr=r(Lye," (Vision Encoder decoder model)"),Lye.forEach(t),vat.forEach(t),ycr=i(ua),Whe=n(ua,"P",{});var Cat=s(Whe);wcr=r(Cat,"Examples:"),Cat.forEach(t),Acr=i(ua),m(Cy.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),q0e=i(d),yc=n(d,"H2",{class:!0});var W9e=s(yc);k7=n(W9e,"A",{id:!0,class:!0,href:!0});var Mat=s(k7);Qhe=n(Mat,"SPAN",{});var Eat=s(Qhe);m(My.$$.fragment,Eat),Eat.forEach(t),Mat.forEach(t),Lcr=i(W9e),Hhe=n(W9e,"SPAN",{});var yat=s(Hhe);Bcr=r(yat,"TFAutoModelForSpeechSeq2Seq"),yat.forEach(t),W9e.forEach(t),G0e=i(d),Cr=n(d,"DIV",{class:!0});var Vl=s(Cr);m(Ey.$$.fragment,Vl),xcr=i(Vl),wc=n(Vl,"P",{});var fz=s(wc);kcr=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Uhe=n(fz,"CODE",{});var wat=s(Uhe);Rcr=r(wat,"from_pretrained()"),wat.forEach(t),Scr=r(fz,"class method or the "),Jhe=n(fz,"CODE",{});var Aat=s(Jhe);Pcr=r(Aat,"from_config()"),Aat.forEach(t),$cr=r(fz,`class
method.`),fz.forEach(t),Icr=i(Vl),yy=n(Vl,"P",{});var Q9e=s(yy);jcr=r(Q9e,"This class cannot be instantiated directly using "),Yhe=n(Q9e,"CODE",{});var Lat=s(Yhe);Ncr=r(Lat,"__init__()"),Lat.forEach(t),Dcr=r(Q9e," (throws an error)."),Q9e.forEach(t),qcr=i(Vl),ht=n(Vl,"DIV",{class:!0});var Wl=s(ht);m(wy.$$.fragment,Wl),Gcr=i(Wl),Khe=n(Wl,"P",{});var Bat=s(Khe);Ocr=r(Bat,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bat.forEach(t),Xcr=i(Wl),Ac=n(Wl,"P",{});var mz=s(Ac);zcr=r(mz,`Note:
Loading a model from its configuration file does `),Zhe=n(mz,"STRONG",{});var xat=s(Zhe);Vcr=r(xat,"not"),xat.forEach(t),Wcr=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),epe=n(mz,"CODE",{});var kat=s(epe);Qcr=r(kat,"from_pretrained()"),kat.forEach(t),Hcr=r(mz,"to load the model weights."),mz.forEach(t),Ucr=i(Wl),ope=n(Wl,"P",{});var Rat=s(ope);Jcr=r(Rat,"Examples:"),Rat.forEach(t),Ycr=i(Wl),m(Ay.$$.fragment,Wl),Wl.forEach(t),Kcr=i(Vl),Mo=n(Vl,"DIV",{class:!0});var ba=s(Mo);m(Ly.$$.fragment,ba),Zcr=i(ba),rpe=n(ba,"P",{});var Sat=s(rpe);efr=r(Sat,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Sat.forEach(t),ofr=i(ba),pn=n(ba,"P",{});var gC=s(pn);rfr=r(gC,"The model class to instantiate is selected based on the "),tpe=n(gC,"CODE",{});var Pat=s(tpe);tfr=r(Pat,"model_type"),Pat.forEach(t),afr=r(gC,` property of the config object (either
passed as an argument or loaded from `),ape=n(gC,"CODE",{});var $at=s(ape);nfr=r($at,"pretrained_model_name_or_path"),$at.forEach(t),sfr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=n(gC,"CODE",{});var Iat=s(npe);lfr=r(Iat,"pretrained_model_name_or_path"),Iat.forEach(t),ifr=r(gC,":"),gC.forEach(t),dfr=i(ba),spe=n(ba,"UL",{});var jat=s(spe);R7=n(jat,"LI",{});var Bye=s(R7);lpe=n(Bye,"STRONG",{});var Nat=s(lpe);cfr=r(Nat,"speech_to_text"),Nat.forEach(t),ffr=r(Bye," \u2014 "),iG=n(Bye,"A",{href:!0});var Dat=s(iG);mfr=r(Dat,"TFSpeech2TextForConditionalGeneration"),Dat.forEach(t),gfr=r(Bye," (Speech2Text model)"),Bye.forEach(t),jat.forEach(t),hfr=i(ba),ipe=n(ba,"P",{});var qat=s(ipe);pfr=r(qat,"Examples:"),qat.forEach(t),_fr=i(ba),m(By.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),O0e=i(d),Lc=n(d,"H2",{class:!0});var H9e=s(Lc);S7=n(H9e,"A",{id:!0,class:!0,href:!0});var Gat=s(S7);dpe=n(Gat,"SPAN",{});var Oat=s(dpe);m(xy.$$.fragment,Oat),Oat.forEach(t),Gat.forEach(t),ufr=i(H9e),cpe=n(H9e,"SPAN",{});var Xat=s(cpe);bfr=r(Xat,"FlaxAutoModel"),Xat.forEach(t),H9e.forEach(t),X0e=i(d),Mr=n(d,"DIV",{class:!0});var Ql=s(Mr);m(ky.$$.fragment,Ql),vfr=i(Ql),Bc=n(Ql,"P",{});var gz=s(Bc);Tfr=r(gz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fpe=n(gz,"CODE",{});var zat=s(fpe);Ffr=r(zat,"from_pretrained()"),zat.forEach(t),Cfr=r(gz,"class method or the "),mpe=n(gz,"CODE",{});var Vat=s(mpe);Mfr=r(Vat,"from_config()"),Vat.forEach(t),Efr=r(gz,`class
method.`),gz.forEach(t),yfr=i(Ql),Ry=n(Ql,"P",{});var U9e=s(Ry);wfr=r(U9e,"This class cannot be instantiated directly using "),gpe=n(U9e,"CODE",{});var Wat=s(gpe);Afr=r(Wat,"__init__()"),Wat.forEach(t),Lfr=r(U9e," (throws an error)."),U9e.forEach(t),Bfr=i(Ql),pt=n(Ql,"DIV",{class:!0});var Hl=s(pt);m(Sy.$$.fragment,Hl),xfr=i(Hl),hpe=n(Hl,"P",{});var Qat=s(hpe);kfr=r(Qat,"Instantiates one of the base model classes of the library from a configuration."),Qat.forEach(t),Rfr=i(Hl),xc=n(Hl,"P",{});var hz=s(xc);Sfr=r(hz,`Note:
Loading a model from its configuration file does `),ppe=n(hz,"STRONG",{});var Hat=s(ppe);Pfr=r(Hat,"not"),Hat.forEach(t),$fr=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),_pe=n(hz,"CODE",{});var Uat=s(_pe);Ifr=r(Uat,"from_pretrained()"),Uat.forEach(t),jfr=r(hz,"to load the model weights."),hz.forEach(t),Nfr=i(Hl),upe=n(Hl,"P",{});var Jat=s(upe);Dfr=r(Jat,"Examples:"),Jat.forEach(t),qfr=i(Hl),m(Py.$$.fragment,Hl),Hl.forEach(t),Gfr=i(Ql),Eo=n(Ql,"DIV",{class:!0});var va=s(Eo);m($y.$$.fragment,va),Ofr=i(va),bpe=n(va,"P",{});var Yat=s(bpe);Xfr=r(Yat,"Instantiate one of the base model classes of the library from a pretrained model."),Yat.forEach(t),zfr=i(va),_n=n(va,"P",{});var hC=s(_n);Vfr=r(hC,"The model class to instantiate is selected based on the "),vpe=n(hC,"CODE",{});var Kat=s(vpe);Wfr=r(Kat,"model_type"),Kat.forEach(t),Qfr=r(hC,` property of the config object (either
passed as an argument or loaded from `),Tpe=n(hC,"CODE",{});var Zat=s(Tpe);Hfr=r(Zat,"pretrained_model_name_or_path"),Zat.forEach(t),Ufr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(hC,"CODE",{});var ent=s(Fpe);Jfr=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),Yfr=r(hC,":"),hC.forEach(t),Kfr=i(va),V=n(va,"UL",{});var Q=s(V);P7=n(Q,"LI",{});var xye=s(P7);Cpe=n(xye,"STRONG",{});var ont=s(Cpe);Zfr=r(ont,"albert"),ont.forEach(t),emr=r(xye," \u2014 "),dG=n(xye,"A",{href:!0});var rnt=s(dG);omr=r(rnt,"FlaxAlbertModel"),rnt.forEach(t),rmr=r(xye," (ALBERT model)"),xye.forEach(t),tmr=i(Q),$7=n(Q,"LI",{});var kye=s($7);Mpe=n(kye,"STRONG",{});var tnt=s(Mpe);amr=r(tnt,"bart"),tnt.forEach(t),nmr=r(kye," \u2014 "),cG=n(kye,"A",{href:!0});var ant=s(cG);smr=r(ant,"FlaxBartModel"),ant.forEach(t),lmr=r(kye," (BART model)"),kye.forEach(t),imr=i(Q),I7=n(Q,"LI",{});var Rye=s(I7);Epe=n(Rye,"STRONG",{});var nnt=s(Epe);dmr=r(nnt,"beit"),nnt.forEach(t),cmr=r(Rye," \u2014 "),fG=n(Rye,"A",{href:!0});var snt=s(fG);fmr=r(snt,"FlaxBeitModel"),snt.forEach(t),mmr=r(Rye," (BEiT model)"),Rye.forEach(t),gmr=i(Q),j7=n(Q,"LI",{});var Sye=s(j7);ype=n(Sye,"STRONG",{});var lnt=s(ype);hmr=r(lnt,"bert"),lnt.forEach(t),pmr=r(Sye," \u2014 "),mG=n(Sye,"A",{href:!0});var int=s(mG);_mr=r(int,"FlaxBertModel"),int.forEach(t),umr=r(Sye," (BERT model)"),Sye.forEach(t),bmr=i(Q),N7=n(Q,"LI",{});var Pye=s(N7);wpe=n(Pye,"STRONG",{});var dnt=s(wpe);vmr=r(dnt,"big_bird"),dnt.forEach(t),Tmr=r(Pye," \u2014 "),gG=n(Pye,"A",{href:!0});var cnt=s(gG);Fmr=r(cnt,"FlaxBigBirdModel"),cnt.forEach(t),Cmr=r(Pye," (BigBird model)"),Pye.forEach(t),Mmr=i(Q),D7=n(Q,"LI",{});var $ye=s(D7);Ape=n($ye,"STRONG",{});var fnt=s(Ape);Emr=r(fnt,"blenderbot"),fnt.forEach(t),ymr=r($ye," \u2014 "),hG=n($ye,"A",{href:!0});var mnt=s(hG);wmr=r(mnt,"FlaxBlenderbotModel"),mnt.forEach(t),Amr=r($ye," (Blenderbot model)"),$ye.forEach(t),Lmr=i(Q),q7=n(Q,"LI",{});var Iye=s(q7);Lpe=n(Iye,"STRONG",{});var gnt=s(Lpe);Bmr=r(gnt,"blenderbot-small"),gnt.forEach(t),xmr=r(Iye," \u2014 "),pG=n(Iye,"A",{href:!0});var hnt=s(pG);kmr=r(hnt,"FlaxBlenderbotSmallModel"),hnt.forEach(t),Rmr=r(Iye," (BlenderbotSmall model)"),Iye.forEach(t),Smr=i(Q),G7=n(Q,"LI",{});var jye=s(G7);Bpe=n(jye,"STRONG",{});var pnt=s(Bpe);Pmr=r(pnt,"clip"),pnt.forEach(t),$mr=r(jye," \u2014 "),_G=n(jye,"A",{href:!0});var _nt=s(_G);Imr=r(_nt,"FlaxCLIPModel"),_nt.forEach(t),jmr=r(jye," (CLIP model)"),jye.forEach(t),Nmr=i(Q),O7=n(Q,"LI",{});var Nye=s(O7);xpe=n(Nye,"STRONG",{});var unt=s(xpe);Dmr=r(unt,"distilbert"),unt.forEach(t),qmr=r(Nye," \u2014 "),uG=n(Nye,"A",{href:!0});var bnt=s(uG);Gmr=r(bnt,"FlaxDistilBertModel"),bnt.forEach(t),Omr=r(Nye," (DistilBERT model)"),Nye.forEach(t),Xmr=i(Q),X7=n(Q,"LI",{});var Dye=s(X7);kpe=n(Dye,"STRONG",{});var vnt=s(kpe);zmr=r(vnt,"electra"),vnt.forEach(t),Vmr=r(Dye," \u2014 "),bG=n(Dye,"A",{href:!0});var Tnt=s(bG);Wmr=r(Tnt,"FlaxElectraModel"),Tnt.forEach(t),Qmr=r(Dye," (ELECTRA model)"),Dye.forEach(t),Hmr=i(Q),z7=n(Q,"LI",{});var qye=s(z7);Rpe=n(qye,"STRONG",{});var Fnt=s(Rpe);Umr=r(Fnt,"gpt2"),Fnt.forEach(t),Jmr=r(qye," \u2014 "),vG=n(qye,"A",{href:!0});var Cnt=s(vG);Ymr=r(Cnt,"FlaxGPT2Model"),Cnt.forEach(t),Kmr=r(qye," (OpenAI GPT-2 model)"),qye.forEach(t),Zmr=i(Q),V7=n(Q,"LI",{});var Gye=s(V7);Spe=n(Gye,"STRONG",{});var Mnt=s(Spe);egr=r(Mnt,"gpt_neo"),Mnt.forEach(t),ogr=r(Gye," \u2014 "),TG=n(Gye,"A",{href:!0});var Ent=s(TG);rgr=r(Ent,"FlaxGPTNeoModel"),Ent.forEach(t),tgr=r(Gye," (GPT Neo model)"),Gye.forEach(t),agr=i(Q),W7=n(Q,"LI",{});var Oye=s(W7);Ppe=n(Oye,"STRONG",{});var ynt=s(Ppe);ngr=r(ynt,"gptj"),ynt.forEach(t),sgr=r(Oye," \u2014 "),FG=n(Oye,"A",{href:!0});var wnt=s(FG);lgr=r(wnt,"FlaxGPTJModel"),wnt.forEach(t),igr=r(Oye," (GPT-J model)"),Oye.forEach(t),dgr=i(Q),Q7=n(Q,"LI",{});var Xye=s(Q7);$pe=n(Xye,"STRONG",{});var Ant=s($pe);cgr=r(Ant,"marian"),Ant.forEach(t),fgr=r(Xye," \u2014 "),CG=n(Xye,"A",{href:!0});var Lnt=s(CG);mgr=r(Lnt,"FlaxMarianModel"),Lnt.forEach(t),ggr=r(Xye," (Marian model)"),Xye.forEach(t),hgr=i(Q),H7=n(Q,"LI",{});var zye=s(H7);Ipe=n(zye,"STRONG",{});var Bnt=s(Ipe);pgr=r(Bnt,"mbart"),Bnt.forEach(t),_gr=r(zye," \u2014 "),MG=n(zye,"A",{href:!0});var xnt=s(MG);ugr=r(xnt,"FlaxMBartModel"),xnt.forEach(t),bgr=r(zye," (mBART model)"),zye.forEach(t),vgr=i(Q),U7=n(Q,"LI",{});var Vye=s(U7);jpe=n(Vye,"STRONG",{});var knt=s(jpe);Tgr=r(knt,"mt5"),knt.forEach(t),Fgr=r(Vye," \u2014 "),EG=n(Vye,"A",{href:!0});var Rnt=s(EG);Cgr=r(Rnt,"FlaxMT5Model"),Rnt.forEach(t),Mgr=r(Vye," (mT5 model)"),Vye.forEach(t),Egr=i(Q),J7=n(Q,"LI",{});var Wye=s(J7);Npe=n(Wye,"STRONG",{});var Snt=s(Npe);ygr=r(Snt,"pegasus"),Snt.forEach(t),wgr=r(Wye," \u2014 "),yG=n(Wye,"A",{href:!0});var Pnt=s(yG);Agr=r(Pnt,"FlaxPegasusModel"),Pnt.forEach(t),Lgr=r(Wye," (Pegasus model)"),Wye.forEach(t),Bgr=i(Q),Y7=n(Q,"LI",{});var Qye=s(Y7);Dpe=n(Qye,"STRONG",{});var $nt=s(Dpe);xgr=r($nt,"roberta"),$nt.forEach(t),kgr=r(Qye," \u2014 "),wG=n(Qye,"A",{href:!0});var Int=s(wG);Rgr=r(Int,"FlaxRobertaModel"),Int.forEach(t),Sgr=r(Qye," (RoBERTa model)"),Qye.forEach(t),Pgr=i(Q),K7=n(Q,"LI",{});var Hye=s(K7);qpe=n(Hye,"STRONG",{});var jnt=s(qpe);$gr=r(jnt,"roformer"),jnt.forEach(t),Igr=r(Hye," \u2014 "),AG=n(Hye,"A",{href:!0});var Nnt=s(AG);jgr=r(Nnt,"FlaxRoFormerModel"),Nnt.forEach(t),Ngr=r(Hye," (RoFormer model)"),Hye.forEach(t),Dgr=i(Q),Z7=n(Q,"LI",{});var Uye=s(Z7);Gpe=n(Uye,"STRONG",{});var Dnt=s(Gpe);qgr=r(Dnt,"t5"),Dnt.forEach(t),Ggr=r(Uye," \u2014 "),LG=n(Uye,"A",{href:!0});var qnt=s(LG);Ogr=r(qnt,"FlaxT5Model"),qnt.forEach(t),Xgr=r(Uye," (T5 model)"),Uye.forEach(t),zgr=i(Q),e8=n(Q,"LI",{});var Jye=s(e8);Ope=n(Jye,"STRONG",{});var Gnt=s(Ope);Vgr=r(Gnt,"vision-text-dual-encoder"),Gnt.forEach(t),Wgr=r(Jye," \u2014 "),BG=n(Jye,"A",{href:!0});var Ont=s(BG);Qgr=r(Ont,"FlaxVisionTextDualEncoderModel"),Ont.forEach(t),Hgr=r(Jye," (VisionTextDualEncoder model)"),Jye.forEach(t),Ugr=i(Q),o8=n(Q,"LI",{});var Yye=s(o8);Xpe=n(Yye,"STRONG",{});var Xnt=s(Xpe);Jgr=r(Xnt,"vit"),Xnt.forEach(t),Ygr=r(Yye," \u2014 "),xG=n(Yye,"A",{href:!0});var znt=s(xG);Kgr=r(znt,"FlaxViTModel"),znt.forEach(t),Zgr=r(Yye," (ViT model)"),Yye.forEach(t),ehr=i(Q),r8=n(Q,"LI",{});var Kye=s(r8);zpe=n(Kye,"STRONG",{});var Vnt=s(zpe);ohr=r(Vnt,"wav2vec2"),Vnt.forEach(t),rhr=r(Kye," \u2014 "),kG=n(Kye,"A",{href:!0});var Wnt=s(kG);thr=r(Wnt,"FlaxWav2Vec2Model"),Wnt.forEach(t),ahr=r(Kye," (Wav2Vec2 model)"),Kye.forEach(t),nhr=i(Q),t8=n(Q,"LI",{});var Zye=s(t8);Vpe=n(Zye,"STRONG",{});var Qnt=s(Vpe);shr=r(Qnt,"xglm"),Qnt.forEach(t),lhr=r(Zye," \u2014 "),RG=n(Zye,"A",{href:!0});var Hnt=s(RG);ihr=r(Hnt,"FlaxXGLMModel"),Hnt.forEach(t),dhr=r(Zye," (XGLM model)"),Zye.forEach(t),Q.forEach(t),chr=i(va),Wpe=n(va,"P",{});var Unt=s(Wpe);fhr=r(Unt,"Examples:"),Unt.forEach(t),mhr=i(va),m(Iy.$$.fragment,va),va.forEach(t),Ql.forEach(t),z0e=i(d),kc=n(d,"H2",{class:!0});var J9e=s(kc);a8=n(J9e,"A",{id:!0,class:!0,href:!0});var Jnt=s(a8);Qpe=n(Jnt,"SPAN",{});var Ynt=s(Qpe);m(jy.$$.fragment,Ynt),Ynt.forEach(t),Jnt.forEach(t),ghr=i(J9e),Hpe=n(J9e,"SPAN",{});var Knt=s(Hpe);hhr=r(Knt,"FlaxAutoModelForCausalLM"),Knt.forEach(t),J9e.forEach(t),V0e=i(d),Er=n(d,"DIV",{class:!0});var Ul=s(Er);m(Ny.$$.fragment,Ul),phr=i(Ul),Rc=n(Ul,"P",{});var pz=s(Rc);_hr=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Upe=n(pz,"CODE",{});var Znt=s(Upe);uhr=r(Znt,"from_pretrained()"),Znt.forEach(t),bhr=r(pz,"class method or the "),Jpe=n(pz,"CODE",{});var est=s(Jpe);vhr=r(est,"from_config()"),est.forEach(t),Thr=r(pz,`class
method.`),pz.forEach(t),Fhr=i(Ul),Dy=n(Ul,"P",{});var Y9e=s(Dy);Chr=r(Y9e,"This class cannot be instantiated directly using "),Ype=n(Y9e,"CODE",{});var ost=s(Ype);Mhr=r(ost,"__init__()"),ost.forEach(t),Ehr=r(Y9e," (throws an error)."),Y9e.forEach(t),yhr=i(Ul),_t=n(Ul,"DIV",{class:!0});var Jl=s(_t);m(qy.$$.fragment,Jl),whr=i(Jl),Kpe=n(Jl,"P",{});var rst=s(Kpe);Ahr=r(rst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rst.forEach(t),Lhr=i(Jl),Sc=n(Jl,"P",{});var _z=s(Sc);Bhr=r(_z,`Note:
Loading a model from its configuration file does `),Zpe=n(_z,"STRONG",{});var tst=s(Zpe);xhr=r(tst,"not"),tst.forEach(t),khr=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),e_e=n(_z,"CODE",{});var ast=s(e_e);Rhr=r(ast,"from_pretrained()"),ast.forEach(t),Shr=r(_z,"to load the model weights."),_z.forEach(t),Phr=i(Jl),o_e=n(Jl,"P",{});var nst=s(o_e);$hr=r(nst,"Examples:"),nst.forEach(t),Ihr=i(Jl),m(Gy.$$.fragment,Jl),Jl.forEach(t),jhr=i(Ul),yo=n(Ul,"DIV",{class:!0});var Ta=s(yo);m(Oy.$$.fragment,Ta),Nhr=i(Ta),r_e=n(Ta,"P",{});var sst=s(r_e);Dhr=r(sst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sst.forEach(t),qhr=i(Ta),un=n(Ta,"P",{});var pC=s(un);Ghr=r(pC,"The model class to instantiate is selected based on the "),t_e=n(pC,"CODE",{});var lst=s(t_e);Ohr=r(lst,"model_type"),lst.forEach(t),Xhr=r(pC,` property of the config object (either
passed as an argument or loaded from `),a_e=n(pC,"CODE",{});var ist=s(a_e);zhr=r(ist,"pretrained_model_name_or_path"),ist.forEach(t),Vhr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(pC,"CODE",{});var dst=s(n_e);Whr=r(dst,"pretrained_model_name_or_path"),dst.forEach(t),Qhr=r(pC,":"),pC.forEach(t),Hhr=i(Ta),bn=n(Ta,"UL",{});var _C=s(bn);n8=n(_C,"LI",{});var ewe=s(n8);s_e=n(ewe,"STRONG",{});var cst=s(s_e);Uhr=r(cst,"gpt2"),cst.forEach(t),Jhr=r(ewe," \u2014 "),SG=n(ewe,"A",{href:!0});var fst=s(SG);Yhr=r(fst,"FlaxGPT2LMHeadModel"),fst.forEach(t),Khr=r(ewe," (OpenAI GPT-2 model)"),ewe.forEach(t),Zhr=i(_C),s8=n(_C,"LI",{});var owe=s(s8);l_e=n(owe,"STRONG",{});var mst=s(l_e);epr=r(mst,"gpt_neo"),mst.forEach(t),opr=r(owe," \u2014 "),PG=n(owe,"A",{href:!0});var gst=s(PG);rpr=r(gst,"FlaxGPTNeoForCausalLM"),gst.forEach(t),tpr=r(owe," (GPT Neo model)"),owe.forEach(t),apr=i(_C),l8=n(_C,"LI",{});var rwe=s(l8);i_e=n(rwe,"STRONG",{});var hst=s(i_e);npr=r(hst,"gptj"),hst.forEach(t),spr=r(rwe," \u2014 "),$G=n(rwe,"A",{href:!0});var pst=s($G);lpr=r(pst,"FlaxGPTJForCausalLM"),pst.forEach(t),ipr=r(rwe," (GPT-J model)"),rwe.forEach(t),dpr=i(_C),i8=n(_C,"LI",{});var twe=s(i8);d_e=n(twe,"STRONG",{});var _st=s(d_e);cpr=r(_st,"xglm"),_st.forEach(t),fpr=r(twe," \u2014 "),IG=n(twe,"A",{href:!0});var ust=s(IG);mpr=r(ust,"FlaxXGLMForCausalLM"),ust.forEach(t),gpr=r(twe," (XGLM model)"),twe.forEach(t),_C.forEach(t),hpr=i(Ta),c_e=n(Ta,"P",{});var bst=s(c_e);ppr=r(bst,"Examples:"),bst.forEach(t),_pr=i(Ta),m(Xy.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),W0e=i(d),Pc=n(d,"H2",{class:!0});var K9e=s(Pc);d8=n(K9e,"A",{id:!0,class:!0,href:!0});var vst=s(d8);f_e=n(vst,"SPAN",{});var Tst=s(f_e);m(zy.$$.fragment,Tst),Tst.forEach(t),vst.forEach(t),upr=i(K9e),m_e=n(K9e,"SPAN",{});var Fst=s(m_e);bpr=r(Fst,"FlaxAutoModelForPreTraining"),Fst.forEach(t),K9e.forEach(t),Q0e=i(d),yr=n(d,"DIV",{class:!0});var Yl=s(yr);m(Vy.$$.fragment,Yl),vpr=i(Yl),$c=n(Yl,"P",{});var uz=s($c);Tpr=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),g_e=n(uz,"CODE",{});var Cst=s(g_e);Fpr=r(Cst,"from_pretrained()"),Cst.forEach(t),Cpr=r(uz,"class method or the "),h_e=n(uz,"CODE",{});var Mst=s(h_e);Mpr=r(Mst,"from_config()"),Mst.forEach(t),Epr=r(uz,`class
method.`),uz.forEach(t),ypr=i(Yl),Wy=n(Yl,"P",{});var Z9e=s(Wy);wpr=r(Z9e,"This class cannot be instantiated directly using "),p_e=n(Z9e,"CODE",{});var Est=s(p_e);Apr=r(Est,"__init__()"),Est.forEach(t),Lpr=r(Z9e," (throws an error)."),Z9e.forEach(t),Bpr=i(Yl),ut=n(Yl,"DIV",{class:!0});var Kl=s(ut);m(Qy.$$.fragment,Kl),xpr=i(Kl),__e=n(Kl,"P",{});var yst=s(__e);kpr=r(yst,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yst.forEach(t),Rpr=i(Kl),Ic=n(Kl,"P",{});var bz=s(Ic);Spr=r(bz,`Note:
Loading a model from its configuration file does `),u_e=n(bz,"STRONG",{});var wst=s(u_e);Ppr=r(wst,"not"),wst.forEach(t),$pr=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),b_e=n(bz,"CODE",{});var Ast=s(b_e);Ipr=r(Ast,"from_pretrained()"),Ast.forEach(t),jpr=r(bz,"to load the model weights."),bz.forEach(t),Npr=i(Kl),v_e=n(Kl,"P",{});var Lst=s(v_e);Dpr=r(Lst,"Examples:"),Lst.forEach(t),qpr=i(Kl),m(Hy.$$.fragment,Kl),Kl.forEach(t),Gpr=i(Yl),wo=n(Yl,"DIV",{class:!0});var Fa=s(wo);m(Uy.$$.fragment,Fa),Opr=i(Fa),T_e=n(Fa,"P",{});var Bst=s(T_e);Xpr=r(Bst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bst.forEach(t),zpr=i(Fa),vn=n(Fa,"P",{});var uC=s(vn);Vpr=r(uC,"The model class to instantiate is selected based on the "),F_e=n(uC,"CODE",{});var xst=s(F_e);Wpr=r(xst,"model_type"),xst.forEach(t),Qpr=r(uC,` property of the config object (either
passed as an argument or loaded from `),C_e=n(uC,"CODE",{});var kst=s(C_e);Hpr=r(kst,"pretrained_model_name_or_path"),kst.forEach(t),Upr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=n(uC,"CODE",{});var Rst=s(M_e);Jpr=r(Rst,"pretrained_model_name_or_path"),Rst.forEach(t),Ypr=r(uC,":"),uC.forEach(t),Kpr=i(Fa),fe=n(Fa,"UL",{});var _e=s(fe);c8=n(_e,"LI",{});var awe=s(c8);E_e=n(awe,"STRONG",{});var Sst=s(E_e);Zpr=r(Sst,"albert"),Sst.forEach(t),e_r=r(awe," \u2014 "),jG=n(awe,"A",{href:!0});var Pst=s(jG);o_r=r(Pst,"FlaxAlbertForPreTraining"),Pst.forEach(t),r_r=r(awe," (ALBERT model)"),awe.forEach(t),t_r=i(_e),f8=n(_e,"LI",{});var nwe=s(f8);y_e=n(nwe,"STRONG",{});var $st=s(y_e);a_r=r($st,"bart"),$st.forEach(t),n_r=r(nwe," \u2014 "),NG=n(nwe,"A",{href:!0});var Ist=s(NG);s_r=r(Ist,"FlaxBartForConditionalGeneration"),Ist.forEach(t),l_r=r(nwe," (BART model)"),nwe.forEach(t),i_r=i(_e),m8=n(_e,"LI",{});var swe=s(m8);w_e=n(swe,"STRONG",{});var jst=s(w_e);d_r=r(jst,"bert"),jst.forEach(t),c_r=r(swe," \u2014 "),DG=n(swe,"A",{href:!0});var Nst=s(DG);f_r=r(Nst,"FlaxBertForPreTraining"),Nst.forEach(t),m_r=r(swe," (BERT model)"),swe.forEach(t),g_r=i(_e),g8=n(_e,"LI",{});var lwe=s(g8);A_e=n(lwe,"STRONG",{});var Dst=s(A_e);h_r=r(Dst,"big_bird"),Dst.forEach(t),p_r=r(lwe," \u2014 "),qG=n(lwe,"A",{href:!0});var qst=s(qG);__r=r(qst,"FlaxBigBirdForPreTraining"),qst.forEach(t),u_r=r(lwe," (BigBird model)"),lwe.forEach(t),b_r=i(_e),h8=n(_e,"LI",{});var iwe=s(h8);L_e=n(iwe,"STRONG",{});var Gst=s(L_e);v_r=r(Gst,"electra"),Gst.forEach(t),T_r=r(iwe," \u2014 "),GG=n(iwe,"A",{href:!0});var Ost=s(GG);F_r=r(Ost,"FlaxElectraForPreTraining"),Ost.forEach(t),C_r=r(iwe," (ELECTRA model)"),iwe.forEach(t),M_r=i(_e),p8=n(_e,"LI",{});var dwe=s(p8);B_e=n(dwe,"STRONG",{});var Xst=s(B_e);E_r=r(Xst,"mbart"),Xst.forEach(t),y_r=r(dwe," \u2014 "),OG=n(dwe,"A",{href:!0});var zst=s(OG);w_r=r(zst,"FlaxMBartForConditionalGeneration"),zst.forEach(t),A_r=r(dwe," (mBART model)"),dwe.forEach(t),L_r=i(_e),_8=n(_e,"LI",{});var cwe=s(_8);x_e=n(cwe,"STRONG",{});var Vst=s(x_e);B_r=r(Vst,"mt5"),Vst.forEach(t),x_r=r(cwe," \u2014 "),XG=n(cwe,"A",{href:!0});var Wst=s(XG);k_r=r(Wst,"FlaxMT5ForConditionalGeneration"),Wst.forEach(t),R_r=r(cwe," (mT5 model)"),cwe.forEach(t),S_r=i(_e),u8=n(_e,"LI",{});var fwe=s(u8);k_e=n(fwe,"STRONG",{});var Qst=s(k_e);P_r=r(Qst,"roberta"),Qst.forEach(t),$_r=r(fwe," \u2014 "),zG=n(fwe,"A",{href:!0});var Hst=s(zG);I_r=r(Hst,"FlaxRobertaForMaskedLM"),Hst.forEach(t),j_r=r(fwe," (RoBERTa model)"),fwe.forEach(t),N_r=i(_e),b8=n(_e,"LI",{});var mwe=s(b8);R_e=n(mwe,"STRONG",{});var Ust=s(R_e);D_r=r(Ust,"roformer"),Ust.forEach(t),q_r=r(mwe," \u2014 "),VG=n(mwe,"A",{href:!0});var Jst=s(VG);G_r=r(Jst,"FlaxRoFormerForMaskedLM"),Jst.forEach(t),O_r=r(mwe," (RoFormer model)"),mwe.forEach(t),X_r=i(_e),v8=n(_e,"LI",{});var gwe=s(v8);S_e=n(gwe,"STRONG",{});var Yst=s(S_e);z_r=r(Yst,"t5"),Yst.forEach(t),V_r=r(gwe," \u2014 "),WG=n(gwe,"A",{href:!0});var Kst=s(WG);W_r=r(Kst,"FlaxT5ForConditionalGeneration"),Kst.forEach(t),Q_r=r(gwe," (T5 model)"),gwe.forEach(t),H_r=i(_e),T8=n(_e,"LI",{});var hwe=s(T8);P_e=n(hwe,"STRONG",{});var Zst=s(P_e);U_r=r(Zst,"wav2vec2"),Zst.forEach(t),J_r=r(hwe," \u2014 "),QG=n(hwe,"A",{href:!0});var elt=s(QG);Y_r=r(elt,"FlaxWav2Vec2ForPreTraining"),elt.forEach(t),K_r=r(hwe," (Wav2Vec2 model)"),hwe.forEach(t),_e.forEach(t),Z_r=i(Fa),$_e=n(Fa,"P",{});var olt=s($_e);eur=r(olt,"Examples:"),olt.forEach(t),our=i(Fa),m(Jy.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),H0e=i(d),jc=n(d,"H2",{class:!0});var eBe=s(jc);F8=n(eBe,"A",{id:!0,class:!0,href:!0});var rlt=s(F8);I_e=n(rlt,"SPAN",{});var tlt=s(I_e);m(Yy.$$.fragment,tlt),tlt.forEach(t),rlt.forEach(t),rur=i(eBe),j_e=n(eBe,"SPAN",{});var alt=s(j_e);tur=r(alt,"FlaxAutoModelForMaskedLM"),alt.forEach(t),eBe.forEach(t),U0e=i(d),wr=n(d,"DIV",{class:!0});var Zl=s(wr);m(Ky.$$.fragment,Zl),aur=i(Zl),Nc=n(Zl,"P",{});var vz=s(Nc);nur=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),N_e=n(vz,"CODE",{});var nlt=s(N_e);sur=r(nlt,"from_pretrained()"),nlt.forEach(t),lur=r(vz,"class method or the "),D_e=n(vz,"CODE",{});var slt=s(D_e);iur=r(slt,"from_config()"),slt.forEach(t),dur=r(vz,`class
method.`),vz.forEach(t),cur=i(Zl),Zy=n(Zl,"P",{});var oBe=s(Zy);fur=r(oBe,"This class cannot be instantiated directly using "),q_e=n(oBe,"CODE",{});var llt=s(q_e);mur=r(llt,"__init__()"),llt.forEach(t),gur=r(oBe," (throws an error)."),oBe.forEach(t),hur=i(Zl),bt=n(Zl,"DIV",{class:!0});var ei=s(bt);m(ew.$$.fragment,ei),pur=i(ei),G_e=n(ei,"P",{});var ilt=s(G_e);_ur=r(ilt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ilt.forEach(t),uur=i(ei),Dc=n(ei,"P",{});var Tz=s(Dc);bur=r(Tz,`Note:
Loading a model from its configuration file does `),O_e=n(Tz,"STRONG",{});var dlt=s(O_e);vur=r(dlt,"not"),dlt.forEach(t),Tur=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),X_e=n(Tz,"CODE",{});var clt=s(X_e);Fur=r(clt,"from_pretrained()"),clt.forEach(t),Cur=r(Tz,"to load the model weights."),Tz.forEach(t),Mur=i(ei),z_e=n(ei,"P",{});var flt=s(z_e);Eur=r(flt,"Examples:"),flt.forEach(t),yur=i(ei),m(ow.$$.fragment,ei),ei.forEach(t),wur=i(Zl),Ao=n(Zl,"DIV",{class:!0});var Ca=s(Ao);m(rw.$$.fragment,Ca),Aur=i(Ca),V_e=n(Ca,"P",{});var mlt=s(V_e);Lur=r(mlt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mlt.forEach(t),Bur=i(Ca),Tn=n(Ca,"P",{});var bC=s(Tn);xur=r(bC,"The model class to instantiate is selected based on the "),W_e=n(bC,"CODE",{});var glt=s(W_e);kur=r(glt,"model_type"),glt.forEach(t),Rur=r(bC,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(bC,"CODE",{});var hlt=s(Q_e);Sur=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),Pur=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(bC,"CODE",{});var plt=s(H_e);$ur=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),Iur=r(bC,":"),bC.forEach(t),jur=i(Ca),be=n(Ca,"UL",{});var Ye=s(be);C8=n(Ye,"LI",{});var pwe=s(C8);U_e=n(pwe,"STRONG",{});var _lt=s(U_e);Nur=r(_lt,"albert"),_lt.forEach(t),Dur=r(pwe," \u2014 "),HG=n(pwe,"A",{href:!0});var ult=s(HG);qur=r(ult,"FlaxAlbertForMaskedLM"),ult.forEach(t),Gur=r(pwe," (ALBERT model)"),pwe.forEach(t),Our=i(Ye),M8=n(Ye,"LI",{});var _we=s(M8);J_e=n(_we,"STRONG",{});var blt=s(J_e);Xur=r(blt,"bart"),blt.forEach(t),zur=r(_we," \u2014 "),UG=n(_we,"A",{href:!0});var vlt=s(UG);Vur=r(vlt,"FlaxBartForConditionalGeneration"),vlt.forEach(t),Wur=r(_we," (BART model)"),_we.forEach(t),Qur=i(Ye),E8=n(Ye,"LI",{});var uwe=s(E8);Y_e=n(uwe,"STRONG",{});var Tlt=s(Y_e);Hur=r(Tlt,"bert"),Tlt.forEach(t),Uur=r(uwe," \u2014 "),JG=n(uwe,"A",{href:!0});var Flt=s(JG);Jur=r(Flt,"FlaxBertForMaskedLM"),Flt.forEach(t),Yur=r(uwe," (BERT model)"),uwe.forEach(t),Kur=i(Ye),y8=n(Ye,"LI",{});var bwe=s(y8);K_e=n(bwe,"STRONG",{});var Clt=s(K_e);Zur=r(Clt,"big_bird"),Clt.forEach(t),e1r=r(bwe," \u2014 "),YG=n(bwe,"A",{href:!0});var Mlt=s(YG);o1r=r(Mlt,"FlaxBigBirdForMaskedLM"),Mlt.forEach(t),r1r=r(bwe," (BigBird model)"),bwe.forEach(t),t1r=i(Ye),w8=n(Ye,"LI",{});var vwe=s(w8);Z_e=n(vwe,"STRONG",{});var Elt=s(Z_e);a1r=r(Elt,"distilbert"),Elt.forEach(t),n1r=r(vwe," \u2014 "),KG=n(vwe,"A",{href:!0});var ylt=s(KG);s1r=r(ylt,"FlaxDistilBertForMaskedLM"),ylt.forEach(t),l1r=r(vwe," (DistilBERT model)"),vwe.forEach(t),i1r=i(Ye),A8=n(Ye,"LI",{});var Twe=s(A8);eue=n(Twe,"STRONG",{});var wlt=s(eue);d1r=r(wlt,"electra"),wlt.forEach(t),c1r=r(Twe," \u2014 "),ZG=n(Twe,"A",{href:!0});var Alt=s(ZG);f1r=r(Alt,"FlaxElectraForMaskedLM"),Alt.forEach(t),m1r=r(Twe," (ELECTRA model)"),Twe.forEach(t),g1r=i(Ye),L8=n(Ye,"LI",{});var Fwe=s(L8);oue=n(Fwe,"STRONG",{});var Llt=s(oue);h1r=r(Llt,"mbart"),Llt.forEach(t),p1r=r(Fwe," \u2014 "),eO=n(Fwe,"A",{href:!0});var Blt=s(eO);_1r=r(Blt,"FlaxMBartForConditionalGeneration"),Blt.forEach(t),u1r=r(Fwe," (mBART model)"),Fwe.forEach(t),b1r=i(Ye),B8=n(Ye,"LI",{});var Cwe=s(B8);rue=n(Cwe,"STRONG",{});var xlt=s(rue);v1r=r(xlt,"roberta"),xlt.forEach(t),T1r=r(Cwe," \u2014 "),oO=n(Cwe,"A",{href:!0});var klt=s(oO);F1r=r(klt,"FlaxRobertaForMaskedLM"),klt.forEach(t),C1r=r(Cwe," (RoBERTa model)"),Cwe.forEach(t),M1r=i(Ye),x8=n(Ye,"LI",{});var Mwe=s(x8);tue=n(Mwe,"STRONG",{});var Rlt=s(tue);E1r=r(Rlt,"roformer"),Rlt.forEach(t),y1r=r(Mwe," \u2014 "),rO=n(Mwe,"A",{href:!0});var Slt=s(rO);w1r=r(Slt,"FlaxRoFormerForMaskedLM"),Slt.forEach(t),A1r=r(Mwe," (RoFormer model)"),Mwe.forEach(t),Ye.forEach(t),L1r=i(Ca),aue=n(Ca,"P",{});var Plt=s(aue);B1r=r(Plt,"Examples:"),Plt.forEach(t),x1r=i(Ca),m(tw.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),J0e=i(d),qc=n(d,"H2",{class:!0});var rBe=s(qc);k8=n(rBe,"A",{id:!0,class:!0,href:!0});var $lt=s(k8);nue=n($lt,"SPAN",{});var Ilt=s(nue);m(aw.$$.fragment,Ilt),Ilt.forEach(t),$lt.forEach(t),k1r=i(rBe),sue=n(rBe,"SPAN",{});var jlt=s(sue);R1r=r(jlt,"FlaxAutoModelForSeq2SeqLM"),jlt.forEach(t),rBe.forEach(t),Y0e=i(d),Ar=n(d,"DIV",{class:!0});var oi=s(Ar);m(nw.$$.fragment,oi),S1r=i(oi),Gc=n(oi,"P",{});var Fz=s(Gc);P1r=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lue=n(Fz,"CODE",{});var Nlt=s(lue);$1r=r(Nlt,"from_pretrained()"),Nlt.forEach(t),I1r=r(Fz,"class method or the "),iue=n(Fz,"CODE",{});var Dlt=s(iue);j1r=r(Dlt,"from_config()"),Dlt.forEach(t),N1r=r(Fz,`class
method.`),Fz.forEach(t),D1r=i(oi),sw=n(oi,"P",{});var tBe=s(sw);q1r=r(tBe,"This class cannot be instantiated directly using "),due=n(tBe,"CODE",{});var qlt=s(due);G1r=r(qlt,"__init__()"),qlt.forEach(t),O1r=r(tBe," (throws an error)."),tBe.forEach(t),X1r=i(oi),vt=n(oi,"DIV",{class:!0});var ri=s(vt);m(lw.$$.fragment,ri),z1r=i(ri),cue=n(ri,"P",{});var Glt=s(cue);V1r=r(Glt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Glt.forEach(t),W1r=i(ri),Oc=n(ri,"P",{});var Cz=s(Oc);Q1r=r(Cz,`Note:
Loading a model from its configuration file does `),fue=n(Cz,"STRONG",{});var Olt=s(fue);H1r=r(Olt,"not"),Olt.forEach(t),U1r=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mue=n(Cz,"CODE",{});var Xlt=s(mue);J1r=r(Xlt,"from_pretrained()"),Xlt.forEach(t),Y1r=r(Cz,"to load the model weights."),Cz.forEach(t),K1r=i(ri),gue=n(ri,"P",{});var zlt=s(gue);Z1r=r(zlt,"Examples:"),zlt.forEach(t),ebr=i(ri),m(iw.$$.fragment,ri),ri.forEach(t),obr=i(oi),Lo=n(oi,"DIV",{class:!0});var Ma=s(Lo);m(dw.$$.fragment,Ma),rbr=i(Ma),hue=n(Ma,"P",{});var Vlt=s(hue);tbr=r(Vlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vlt.forEach(t),abr=i(Ma),Fn=n(Ma,"P",{});var vC=s(Fn);nbr=r(vC,"The model class to instantiate is selected based on the "),pue=n(vC,"CODE",{});var Wlt=s(pue);sbr=r(Wlt,"model_type"),Wlt.forEach(t),lbr=r(vC,` property of the config object (either
passed as an argument or loaded from `),_ue=n(vC,"CODE",{});var Qlt=s(_ue);ibr=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),dbr=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(vC,"CODE",{});var Hlt=s(uue);cbr=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),fbr=r(vC,":"),vC.forEach(t),mbr=i(Ma),ve=n(Ma,"UL",{});var Ke=s(ve);R8=n(Ke,"LI",{});var Ewe=s(R8);bue=n(Ewe,"STRONG",{});var Ult=s(bue);gbr=r(Ult,"bart"),Ult.forEach(t),hbr=r(Ewe," \u2014 "),tO=n(Ewe,"A",{href:!0});var Jlt=s(tO);pbr=r(Jlt,"FlaxBartForConditionalGeneration"),Jlt.forEach(t),_br=r(Ewe," (BART model)"),Ewe.forEach(t),ubr=i(Ke),S8=n(Ke,"LI",{});var ywe=s(S8);vue=n(ywe,"STRONG",{});var Ylt=s(vue);bbr=r(Ylt,"blenderbot"),Ylt.forEach(t),vbr=r(ywe," \u2014 "),aO=n(ywe,"A",{href:!0});var Klt=s(aO);Tbr=r(Klt,"FlaxBlenderbotForConditionalGeneration"),Klt.forEach(t),Fbr=r(ywe," (Blenderbot model)"),ywe.forEach(t),Cbr=i(Ke),P8=n(Ke,"LI",{});var wwe=s(P8);Tue=n(wwe,"STRONG",{});var Zlt=s(Tue);Mbr=r(Zlt,"blenderbot-small"),Zlt.forEach(t),Ebr=r(wwe," \u2014 "),nO=n(wwe,"A",{href:!0});var eit=s(nO);ybr=r(eit,"FlaxBlenderbotSmallForConditionalGeneration"),eit.forEach(t),wbr=r(wwe," (BlenderbotSmall model)"),wwe.forEach(t),Abr=i(Ke),$8=n(Ke,"LI",{});var Awe=s($8);Fue=n(Awe,"STRONG",{});var oit=s(Fue);Lbr=r(oit,"encoder-decoder"),oit.forEach(t),Bbr=r(Awe," \u2014 "),sO=n(Awe,"A",{href:!0});var rit=s(sO);xbr=r(rit,"FlaxEncoderDecoderModel"),rit.forEach(t),kbr=r(Awe," (Encoder decoder model)"),Awe.forEach(t),Rbr=i(Ke),I8=n(Ke,"LI",{});var Lwe=s(I8);Cue=n(Lwe,"STRONG",{});var tit=s(Cue);Sbr=r(tit,"marian"),tit.forEach(t),Pbr=r(Lwe," \u2014 "),lO=n(Lwe,"A",{href:!0});var ait=s(lO);$br=r(ait,"FlaxMarianMTModel"),ait.forEach(t),Ibr=r(Lwe," (Marian model)"),Lwe.forEach(t),jbr=i(Ke),j8=n(Ke,"LI",{});var Bwe=s(j8);Mue=n(Bwe,"STRONG",{});var nit=s(Mue);Nbr=r(nit,"mbart"),nit.forEach(t),Dbr=r(Bwe," \u2014 "),iO=n(Bwe,"A",{href:!0});var sit=s(iO);qbr=r(sit,"FlaxMBartForConditionalGeneration"),sit.forEach(t),Gbr=r(Bwe," (mBART model)"),Bwe.forEach(t),Obr=i(Ke),N8=n(Ke,"LI",{});var xwe=s(N8);Eue=n(xwe,"STRONG",{});var lit=s(Eue);Xbr=r(lit,"mt5"),lit.forEach(t),zbr=r(xwe," \u2014 "),dO=n(xwe,"A",{href:!0});var iit=s(dO);Vbr=r(iit,"FlaxMT5ForConditionalGeneration"),iit.forEach(t),Wbr=r(xwe," (mT5 model)"),xwe.forEach(t),Qbr=i(Ke),D8=n(Ke,"LI",{});var kwe=s(D8);yue=n(kwe,"STRONG",{});var dit=s(yue);Hbr=r(dit,"pegasus"),dit.forEach(t),Ubr=r(kwe," \u2014 "),cO=n(kwe,"A",{href:!0});var cit=s(cO);Jbr=r(cit,"FlaxPegasusForConditionalGeneration"),cit.forEach(t),Ybr=r(kwe," (Pegasus model)"),kwe.forEach(t),Kbr=i(Ke),q8=n(Ke,"LI",{});var Rwe=s(q8);wue=n(Rwe,"STRONG",{});var fit=s(wue);Zbr=r(fit,"t5"),fit.forEach(t),e5r=r(Rwe," \u2014 "),fO=n(Rwe,"A",{href:!0});var mit=s(fO);o5r=r(mit,"FlaxT5ForConditionalGeneration"),mit.forEach(t),r5r=r(Rwe," (T5 model)"),Rwe.forEach(t),Ke.forEach(t),t5r=i(Ma),Aue=n(Ma,"P",{});var git=s(Aue);a5r=r(git,"Examples:"),git.forEach(t),n5r=i(Ma),m(cw.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),K0e=i(d),Xc=n(d,"H2",{class:!0});var aBe=s(Xc);G8=n(aBe,"A",{id:!0,class:!0,href:!0});var hit=s(G8);Lue=n(hit,"SPAN",{});var pit=s(Lue);m(fw.$$.fragment,pit),pit.forEach(t),hit.forEach(t),s5r=i(aBe),Bue=n(aBe,"SPAN",{});var _it=s(Bue);l5r=r(_it,"FlaxAutoModelForSequenceClassification"),_it.forEach(t),aBe.forEach(t),Z0e=i(d),Lr=n(d,"DIV",{class:!0});var ti=s(Lr);m(mw.$$.fragment,ti),i5r=i(ti),zc=n(ti,"P",{});var Mz=s(zc);d5r=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xue=n(Mz,"CODE",{});var uit=s(xue);c5r=r(uit,"from_pretrained()"),uit.forEach(t),f5r=r(Mz,"class method or the "),kue=n(Mz,"CODE",{});var bit=s(kue);m5r=r(bit,"from_config()"),bit.forEach(t),g5r=r(Mz,`class
method.`),Mz.forEach(t),h5r=i(ti),gw=n(ti,"P",{});var nBe=s(gw);p5r=r(nBe,"This class cannot be instantiated directly using "),Rue=n(nBe,"CODE",{});var vit=s(Rue);_5r=r(vit,"__init__()"),vit.forEach(t),u5r=r(nBe," (throws an error)."),nBe.forEach(t),b5r=i(ti),Tt=n(ti,"DIV",{class:!0});var ai=s(Tt);m(hw.$$.fragment,ai),v5r=i(ai),Sue=n(ai,"P",{});var Tit=s(Sue);T5r=r(Tit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tit.forEach(t),F5r=i(ai),Vc=n(ai,"P",{});var Ez=s(Vc);C5r=r(Ez,`Note:
Loading a model from its configuration file does `),Pue=n(Ez,"STRONG",{});var Fit=s(Pue);M5r=r(Fit,"not"),Fit.forEach(t),E5r=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ue=n(Ez,"CODE",{});var Cit=s($ue);y5r=r(Cit,"from_pretrained()"),Cit.forEach(t),w5r=r(Ez,"to load the model weights."),Ez.forEach(t),A5r=i(ai),Iue=n(ai,"P",{});var Mit=s(Iue);L5r=r(Mit,"Examples:"),Mit.forEach(t),B5r=i(ai),m(pw.$$.fragment,ai),ai.forEach(t),x5r=i(ti),Bo=n(ti,"DIV",{class:!0});var Ea=s(Bo);m(_w.$$.fragment,Ea),k5r=i(Ea),jue=n(Ea,"P",{});var Eit=s(jue);R5r=r(Eit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Eit.forEach(t),S5r=i(Ea),Cn=n(Ea,"P",{});var TC=s(Cn);P5r=r(TC,"The model class to instantiate is selected based on the "),Nue=n(TC,"CODE",{});var yit=s(Nue);$5r=r(yit,"model_type"),yit.forEach(t),I5r=r(TC,` property of the config object (either
passed as an argument or loaded from `),Due=n(TC,"CODE",{});var wit=s(Due);j5r=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),N5r=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(TC,"CODE",{});var Ait=s(que);D5r=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),q5r=r(TC,":"),TC.forEach(t),G5r=i(Ea),Te=n(Ea,"UL",{});var Ze=s(Te);O8=n(Ze,"LI",{});var Swe=s(O8);Gue=n(Swe,"STRONG",{});var Lit=s(Gue);O5r=r(Lit,"albert"),Lit.forEach(t),X5r=r(Swe," \u2014 "),mO=n(Swe,"A",{href:!0});var Bit=s(mO);z5r=r(Bit,"FlaxAlbertForSequenceClassification"),Bit.forEach(t),V5r=r(Swe," (ALBERT model)"),Swe.forEach(t),W5r=i(Ze),X8=n(Ze,"LI",{});var Pwe=s(X8);Oue=n(Pwe,"STRONG",{});var xit=s(Oue);Q5r=r(xit,"bart"),xit.forEach(t),H5r=r(Pwe," \u2014 "),gO=n(Pwe,"A",{href:!0});var kit=s(gO);U5r=r(kit,"FlaxBartForSequenceClassification"),kit.forEach(t),J5r=r(Pwe," (BART model)"),Pwe.forEach(t),Y5r=i(Ze),z8=n(Ze,"LI",{});var $we=s(z8);Xue=n($we,"STRONG",{});var Rit=s(Xue);K5r=r(Rit,"bert"),Rit.forEach(t),Z5r=r($we," \u2014 "),hO=n($we,"A",{href:!0});var Sit=s(hO);e2r=r(Sit,"FlaxBertForSequenceClassification"),Sit.forEach(t),o2r=r($we," (BERT model)"),$we.forEach(t),r2r=i(Ze),V8=n(Ze,"LI",{});var Iwe=s(V8);zue=n(Iwe,"STRONG",{});var Pit=s(zue);t2r=r(Pit,"big_bird"),Pit.forEach(t),a2r=r(Iwe," \u2014 "),pO=n(Iwe,"A",{href:!0});var $it=s(pO);n2r=r($it,"FlaxBigBirdForSequenceClassification"),$it.forEach(t),s2r=r(Iwe," (BigBird model)"),Iwe.forEach(t),l2r=i(Ze),W8=n(Ze,"LI",{});var jwe=s(W8);Vue=n(jwe,"STRONG",{});var Iit=s(Vue);i2r=r(Iit,"distilbert"),Iit.forEach(t),d2r=r(jwe," \u2014 "),_O=n(jwe,"A",{href:!0});var jit=s(_O);c2r=r(jit,"FlaxDistilBertForSequenceClassification"),jit.forEach(t),f2r=r(jwe," (DistilBERT model)"),jwe.forEach(t),m2r=i(Ze),Q8=n(Ze,"LI",{});var Nwe=s(Q8);Wue=n(Nwe,"STRONG",{});var Nit=s(Wue);g2r=r(Nit,"electra"),Nit.forEach(t),h2r=r(Nwe," \u2014 "),uO=n(Nwe,"A",{href:!0});var Dit=s(uO);p2r=r(Dit,"FlaxElectraForSequenceClassification"),Dit.forEach(t),_2r=r(Nwe," (ELECTRA model)"),Nwe.forEach(t),u2r=i(Ze),H8=n(Ze,"LI",{});var Dwe=s(H8);Que=n(Dwe,"STRONG",{});var qit=s(Que);b2r=r(qit,"mbart"),qit.forEach(t),v2r=r(Dwe," \u2014 "),bO=n(Dwe,"A",{href:!0});var Git=s(bO);T2r=r(Git,"FlaxMBartForSequenceClassification"),Git.forEach(t),F2r=r(Dwe," (mBART model)"),Dwe.forEach(t),C2r=i(Ze),U8=n(Ze,"LI",{});var qwe=s(U8);Hue=n(qwe,"STRONG",{});var Oit=s(Hue);M2r=r(Oit,"roberta"),Oit.forEach(t),E2r=r(qwe," \u2014 "),vO=n(qwe,"A",{href:!0});var Xit=s(vO);y2r=r(Xit,"FlaxRobertaForSequenceClassification"),Xit.forEach(t),w2r=r(qwe," (RoBERTa model)"),qwe.forEach(t),A2r=i(Ze),J8=n(Ze,"LI",{});var Gwe=s(J8);Uue=n(Gwe,"STRONG",{});var zit=s(Uue);L2r=r(zit,"roformer"),zit.forEach(t),B2r=r(Gwe," \u2014 "),TO=n(Gwe,"A",{href:!0});var Vit=s(TO);x2r=r(Vit,"FlaxRoFormerForSequenceClassification"),Vit.forEach(t),k2r=r(Gwe," (RoFormer model)"),Gwe.forEach(t),Ze.forEach(t),R2r=i(Ea),Jue=n(Ea,"P",{});var Wit=s(Jue);S2r=r(Wit,"Examples:"),Wit.forEach(t),P2r=i(Ea),m(uw.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),eLe=i(d),Wc=n(d,"H2",{class:!0});var sBe=s(Wc);Y8=n(sBe,"A",{id:!0,class:!0,href:!0});var Qit=s(Y8);Yue=n(Qit,"SPAN",{});var Hit=s(Yue);m(bw.$$.fragment,Hit),Hit.forEach(t),Qit.forEach(t),$2r=i(sBe),Kue=n(sBe,"SPAN",{});var Uit=s(Kue);I2r=r(Uit,"FlaxAutoModelForQuestionAnswering"),Uit.forEach(t),sBe.forEach(t),oLe=i(d),Br=n(d,"DIV",{class:!0});var ni=s(Br);m(vw.$$.fragment,ni),j2r=i(ni),Qc=n(ni,"P",{});var yz=s(Qc);N2r=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zue=n(yz,"CODE",{});var Jit=s(Zue);D2r=r(Jit,"from_pretrained()"),Jit.forEach(t),q2r=r(yz,"class method or the "),e1e=n(yz,"CODE",{});var Yit=s(e1e);G2r=r(Yit,"from_config()"),Yit.forEach(t),O2r=r(yz,`class
method.`),yz.forEach(t),X2r=i(ni),Tw=n(ni,"P",{});var lBe=s(Tw);z2r=r(lBe,"This class cannot be instantiated directly using "),o1e=n(lBe,"CODE",{});var Kit=s(o1e);V2r=r(Kit,"__init__()"),Kit.forEach(t),W2r=r(lBe," (throws an error)."),lBe.forEach(t),Q2r=i(ni),Ft=n(ni,"DIV",{class:!0});var si=s(Ft);m(Fw.$$.fragment,si),H2r=i(si),r1e=n(si,"P",{});var Zit=s(r1e);U2r=r(Zit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zit.forEach(t),J2r=i(si),Hc=n(si,"P",{});var wz=s(Hc);Y2r=r(wz,`Note:
Loading a model from its configuration file does `),t1e=n(wz,"STRONG",{});var edt=s(t1e);K2r=r(edt,"not"),edt.forEach(t),Z2r=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),a1e=n(wz,"CODE",{});var odt=s(a1e);evr=r(odt,"from_pretrained()"),odt.forEach(t),ovr=r(wz,"to load the model weights."),wz.forEach(t),rvr=i(si),n1e=n(si,"P",{});var rdt=s(n1e);tvr=r(rdt,"Examples:"),rdt.forEach(t),avr=i(si),m(Cw.$$.fragment,si),si.forEach(t),nvr=i(ni),xo=n(ni,"DIV",{class:!0});var ya=s(xo);m(Mw.$$.fragment,ya),svr=i(ya),s1e=n(ya,"P",{});var tdt=s(s1e);lvr=r(tdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tdt.forEach(t),ivr=i(ya),Mn=n(ya,"P",{});var FC=s(Mn);dvr=r(FC,"The model class to instantiate is selected based on the "),l1e=n(FC,"CODE",{});var adt=s(l1e);cvr=r(adt,"model_type"),adt.forEach(t),fvr=r(FC,` property of the config object (either
passed as an argument or loaded from `),i1e=n(FC,"CODE",{});var ndt=s(i1e);mvr=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),gvr=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(FC,"CODE",{});var sdt=s(d1e);hvr=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),pvr=r(FC,":"),FC.forEach(t),_vr=i(ya),Fe=n(ya,"UL",{});var eo=s(Fe);K8=n(eo,"LI",{});var Owe=s(K8);c1e=n(Owe,"STRONG",{});var ldt=s(c1e);uvr=r(ldt,"albert"),ldt.forEach(t),bvr=r(Owe," \u2014 "),FO=n(Owe,"A",{href:!0});var idt=s(FO);vvr=r(idt,"FlaxAlbertForQuestionAnswering"),idt.forEach(t),Tvr=r(Owe," (ALBERT model)"),Owe.forEach(t),Fvr=i(eo),Z8=n(eo,"LI",{});var Xwe=s(Z8);f1e=n(Xwe,"STRONG",{});var ddt=s(f1e);Cvr=r(ddt,"bart"),ddt.forEach(t),Mvr=r(Xwe," \u2014 "),CO=n(Xwe,"A",{href:!0});var cdt=s(CO);Evr=r(cdt,"FlaxBartForQuestionAnswering"),cdt.forEach(t),yvr=r(Xwe," (BART model)"),Xwe.forEach(t),wvr=i(eo),eF=n(eo,"LI",{});var zwe=s(eF);m1e=n(zwe,"STRONG",{});var fdt=s(m1e);Avr=r(fdt,"bert"),fdt.forEach(t),Lvr=r(zwe," \u2014 "),MO=n(zwe,"A",{href:!0});var mdt=s(MO);Bvr=r(mdt,"FlaxBertForQuestionAnswering"),mdt.forEach(t),xvr=r(zwe," (BERT model)"),zwe.forEach(t),kvr=i(eo),oF=n(eo,"LI",{});var Vwe=s(oF);g1e=n(Vwe,"STRONG",{});var gdt=s(g1e);Rvr=r(gdt,"big_bird"),gdt.forEach(t),Svr=r(Vwe," \u2014 "),EO=n(Vwe,"A",{href:!0});var hdt=s(EO);Pvr=r(hdt,"FlaxBigBirdForQuestionAnswering"),hdt.forEach(t),$vr=r(Vwe," (BigBird model)"),Vwe.forEach(t),Ivr=i(eo),rF=n(eo,"LI",{});var Wwe=s(rF);h1e=n(Wwe,"STRONG",{});var pdt=s(h1e);jvr=r(pdt,"distilbert"),pdt.forEach(t),Nvr=r(Wwe," \u2014 "),yO=n(Wwe,"A",{href:!0});var _dt=s(yO);Dvr=r(_dt,"FlaxDistilBertForQuestionAnswering"),_dt.forEach(t),qvr=r(Wwe," (DistilBERT model)"),Wwe.forEach(t),Gvr=i(eo),tF=n(eo,"LI",{});var Qwe=s(tF);p1e=n(Qwe,"STRONG",{});var udt=s(p1e);Ovr=r(udt,"electra"),udt.forEach(t),Xvr=r(Qwe," \u2014 "),wO=n(Qwe,"A",{href:!0});var bdt=s(wO);zvr=r(bdt,"FlaxElectraForQuestionAnswering"),bdt.forEach(t),Vvr=r(Qwe," (ELECTRA model)"),Qwe.forEach(t),Wvr=i(eo),aF=n(eo,"LI",{});var Hwe=s(aF);_1e=n(Hwe,"STRONG",{});var vdt=s(_1e);Qvr=r(vdt,"mbart"),vdt.forEach(t),Hvr=r(Hwe," \u2014 "),AO=n(Hwe,"A",{href:!0});var Tdt=s(AO);Uvr=r(Tdt,"FlaxMBartForQuestionAnswering"),Tdt.forEach(t),Jvr=r(Hwe," (mBART model)"),Hwe.forEach(t),Yvr=i(eo),nF=n(eo,"LI",{});var Uwe=s(nF);u1e=n(Uwe,"STRONG",{});var Fdt=s(u1e);Kvr=r(Fdt,"roberta"),Fdt.forEach(t),Zvr=r(Uwe," \u2014 "),LO=n(Uwe,"A",{href:!0});var Cdt=s(LO);e6r=r(Cdt,"FlaxRobertaForQuestionAnswering"),Cdt.forEach(t),o6r=r(Uwe," (RoBERTa model)"),Uwe.forEach(t),r6r=i(eo),sF=n(eo,"LI",{});var Jwe=s(sF);b1e=n(Jwe,"STRONG",{});var Mdt=s(b1e);t6r=r(Mdt,"roformer"),Mdt.forEach(t),a6r=r(Jwe," \u2014 "),BO=n(Jwe,"A",{href:!0});var Edt=s(BO);n6r=r(Edt,"FlaxRoFormerForQuestionAnswering"),Edt.forEach(t),s6r=r(Jwe," (RoFormer model)"),Jwe.forEach(t),eo.forEach(t),l6r=i(ya),v1e=n(ya,"P",{});var ydt=s(v1e);i6r=r(ydt,"Examples:"),ydt.forEach(t),d6r=i(ya),m(Ew.$$.fragment,ya),ya.forEach(t),ni.forEach(t),rLe=i(d),Uc=n(d,"H2",{class:!0});var iBe=s(Uc);lF=n(iBe,"A",{id:!0,class:!0,href:!0});var wdt=s(lF);T1e=n(wdt,"SPAN",{});var Adt=s(T1e);m(yw.$$.fragment,Adt),Adt.forEach(t),wdt.forEach(t),c6r=i(iBe),F1e=n(iBe,"SPAN",{});var Ldt=s(F1e);f6r=r(Ldt,"FlaxAutoModelForTokenClassification"),Ldt.forEach(t),iBe.forEach(t),tLe=i(d),xr=n(d,"DIV",{class:!0});var li=s(xr);m(ww.$$.fragment,li),m6r=i(li),Jc=n(li,"P",{});var Az=s(Jc);g6r=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),C1e=n(Az,"CODE",{});var Bdt=s(C1e);h6r=r(Bdt,"from_pretrained()"),Bdt.forEach(t),p6r=r(Az,"class method or the "),M1e=n(Az,"CODE",{});var xdt=s(M1e);_6r=r(xdt,"from_config()"),xdt.forEach(t),u6r=r(Az,`class
method.`),Az.forEach(t),b6r=i(li),Aw=n(li,"P",{});var dBe=s(Aw);v6r=r(dBe,"This class cannot be instantiated directly using "),E1e=n(dBe,"CODE",{});var kdt=s(E1e);T6r=r(kdt,"__init__()"),kdt.forEach(t),F6r=r(dBe," (throws an error)."),dBe.forEach(t),C6r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(Lw.$$.fragment,ii),M6r=i(ii),y1e=n(ii,"P",{});var Rdt=s(y1e);E6r=r(Rdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rdt.forEach(t),y6r=i(ii),Yc=n(ii,"P",{});var Lz=s(Yc);w6r=r(Lz,`Note:
Loading a model from its configuration file does `),w1e=n(Lz,"STRONG",{});var Sdt=s(w1e);A6r=r(Sdt,"not"),Sdt.forEach(t),L6r=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),A1e=n(Lz,"CODE",{});var Pdt=s(A1e);B6r=r(Pdt,"from_pretrained()"),Pdt.forEach(t),x6r=r(Lz,"to load the model weights."),Lz.forEach(t),k6r=i(ii),L1e=n(ii,"P",{});var $dt=s(L1e);R6r=r($dt,"Examples:"),$dt.forEach(t),S6r=i(ii),m(Bw.$$.fragment,ii),ii.forEach(t),P6r=i(li),ko=n(li,"DIV",{class:!0});var wa=s(ko);m(xw.$$.fragment,wa),$6r=i(wa),B1e=n(wa,"P",{});var Idt=s(B1e);I6r=r(Idt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Idt.forEach(t),j6r=i(wa),En=n(wa,"P",{});var CC=s(En);N6r=r(CC,"The model class to instantiate is selected based on the "),x1e=n(CC,"CODE",{});var jdt=s(x1e);D6r=r(jdt,"model_type"),jdt.forEach(t),q6r=r(CC,` property of the config object (either
passed as an argument or loaded from `),k1e=n(CC,"CODE",{});var Ndt=s(k1e);G6r=r(Ndt,"pretrained_model_name_or_path"),Ndt.forEach(t),O6r=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(CC,"CODE",{});var Ddt=s(R1e);X6r=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),z6r=r(CC,":"),CC.forEach(t),V6r=i(wa),ao=n(wa,"UL",{});var Kt=s(ao);iF=n(Kt,"LI",{});var Ywe=s(iF);S1e=n(Ywe,"STRONG",{});var qdt=s(S1e);W6r=r(qdt,"albert"),qdt.forEach(t),Q6r=r(Ywe," \u2014 "),xO=n(Ywe,"A",{href:!0});var Gdt=s(xO);H6r=r(Gdt,"FlaxAlbertForTokenClassification"),Gdt.forEach(t),U6r=r(Ywe," (ALBERT model)"),Ywe.forEach(t),J6r=i(Kt),dF=n(Kt,"LI",{});var Kwe=s(dF);P1e=n(Kwe,"STRONG",{});var Odt=s(P1e);Y6r=r(Odt,"bert"),Odt.forEach(t),K6r=r(Kwe," \u2014 "),kO=n(Kwe,"A",{href:!0});var Xdt=s(kO);Z6r=r(Xdt,"FlaxBertForTokenClassification"),Xdt.forEach(t),eTr=r(Kwe," (BERT model)"),Kwe.forEach(t),oTr=i(Kt),cF=n(Kt,"LI",{});var Zwe=s(cF);$1e=n(Zwe,"STRONG",{});var zdt=s($1e);rTr=r(zdt,"big_bird"),zdt.forEach(t),tTr=r(Zwe," \u2014 "),RO=n(Zwe,"A",{href:!0});var Vdt=s(RO);aTr=r(Vdt,"FlaxBigBirdForTokenClassification"),Vdt.forEach(t),nTr=r(Zwe," (BigBird model)"),Zwe.forEach(t),sTr=i(Kt),fF=n(Kt,"LI",{});var eAe=s(fF);I1e=n(eAe,"STRONG",{});var Wdt=s(I1e);lTr=r(Wdt,"distilbert"),Wdt.forEach(t),iTr=r(eAe," \u2014 "),SO=n(eAe,"A",{href:!0});var Qdt=s(SO);dTr=r(Qdt,"FlaxDistilBertForTokenClassification"),Qdt.forEach(t),cTr=r(eAe," (DistilBERT model)"),eAe.forEach(t),fTr=i(Kt),mF=n(Kt,"LI",{});var oAe=s(mF);j1e=n(oAe,"STRONG",{});var Hdt=s(j1e);mTr=r(Hdt,"electra"),Hdt.forEach(t),gTr=r(oAe," \u2014 "),PO=n(oAe,"A",{href:!0});var Udt=s(PO);hTr=r(Udt,"FlaxElectraForTokenClassification"),Udt.forEach(t),pTr=r(oAe," (ELECTRA model)"),oAe.forEach(t),_Tr=i(Kt),gF=n(Kt,"LI",{});var rAe=s(gF);N1e=n(rAe,"STRONG",{});var Jdt=s(N1e);uTr=r(Jdt,"roberta"),Jdt.forEach(t),bTr=r(rAe," \u2014 "),$O=n(rAe,"A",{href:!0});var Ydt=s($O);vTr=r(Ydt,"FlaxRobertaForTokenClassification"),Ydt.forEach(t),TTr=r(rAe," (RoBERTa model)"),rAe.forEach(t),FTr=i(Kt),hF=n(Kt,"LI",{});var tAe=s(hF);D1e=n(tAe,"STRONG",{});var Kdt=s(D1e);CTr=r(Kdt,"roformer"),Kdt.forEach(t),MTr=r(tAe," \u2014 "),IO=n(tAe,"A",{href:!0});var Zdt=s(IO);ETr=r(Zdt,"FlaxRoFormerForTokenClassification"),Zdt.forEach(t),yTr=r(tAe," (RoFormer model)"),tAe.forEach(t),Kt.forEach(t),wTr=i(wa),q1e=n(wa,"P",{});var ect=s(q1e);ATr=r(ect,"Examples:"),ect.forEach(t),LTr=i(wa),m(kw.$$.fragment,wa),wa.forEach(t),li.forEach(t),aLe=i(d),Kc=n(d,"H2",{class:!0});var cBe=s(Kc);pF=n(cBe,"A",{id:!0,class:!0,href:!0});var oct=s(pF);G1e=n(oct,"SPAN",{});var rct=s(G1e);m(Rw.$$.fragment,rct),rct.forEach(t),oct.forEach(t),BTr=i(cBe),O1e=n(cBe,"SPAN",{});var tct=s(O1e);xTr=r(tct,"FlaxAutoModelForMultipleChoice"),tct.forEach(t),cBe.forEach(t),nLe=i(d),kr=n(d,"DIV",{class:!0});var di=s(kr);m(Sw.$$.fragment,di),kTr=i(di),Zc=n(di,"P",{});var Bz=s(Zc);RTr=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),X1e=n(Bz,"CODE",{});var act=s(X1e);STr=r(act,"from_pretrained()"),act.forEach(t),PTr=r(Bz,"class method or the "),z1e=n(Bz,"CODE",{});var nct=s(z1e);$Tr=r(nct,"from_config()"),nct.forEach(t),ITr=r(Bz,`class
method.`),Bz.forEach(t),jTr=i(di),Pw=n(di,"P",{});var fBe=s(Pw);NTr=r(fBe,"This class cannot be instantiated directly using "),V1e=n(fBe,"CODE",{});var sct=s(V1e);DTr=r(sct,"__init__()"),sct.forEach(t),qTr=r(fBe," (throws an error)."),fBe.forEach(t),GTr=i(di),Mt=n(di,"DIV",{class:!0});var ci=s(Mt);m($w.$$.fragment,ci),OTr=i(ci),W1e=n(ci,"P",{});var lct=s(W1e);XTr=r(lct,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lct.forEach(t),zTr=i(ci),ef=n(ci,"P",{});var xz=s(ef);VTr=r(xz,`Note:
Loading a model from its configuration file does `),Q1e=n(xz,"STRONG",{});var ict=s(Q1e);WTr=r(ict,"not"),ict.forEach(t),QTr=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),H1e=n(xz,"CODE",{});var dct=s(H1e);HTr=r(dct,"from_pretrained()"),dct.forEach(t),UTr=r(xz,"to load the model weights."),xz.forEach(t),JTr=i(ci),U1e=n(ci,"P",{});var cct=s(U1e);YTr=r(cct,"Examples:"),cct.forEach(t),KTr=i(ci),m(Iw.$$.fragment,ci),ci.forEach(t),ZTr=i(di),Ro=n(di,"DIV",{class:!0});var Aa=s(Ro);m(jw.$$.fragment,Aa),e7r=i(Aa),J1e=n(Aa,"P",{});var fct=s(J1e);o7r=r(fct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fct.forEach(t),r7r=i(Aa),yn=n(Aa,"P",{});var MC=s(yn);t7r=r(MC,"The model class to instantiate is selected based on the "),Y1e=n(MC,"CODE",{});var mct=s(Y1e);a7r=r(mct,"model_type"),mct.forEach(t),n7r=r(MC,` property of the config object (either
passed as an argument or loaded from `),K1e=n(MC,"CODE",{});var gct=s(K1e);s7r=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),l7r=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(MC,"CODE",{});var hct=s(Z1e);i7r=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),d7r=r(MC,":"),MC.forEach(t),c7r=i(Aa),no=n(Aa,"UL",{});var Zt=s(no);_F=n(Zt,"LI",{});var aAe=s(_F);ebe=n(aAe,"STRONG",{});var pct=s(ebe);f7r=r(pct,"albert"),pct.forEach(t),m7r=r(aAe," \u2014 "),jO=n(aAe,"A",{href:!0});var _ct=s(jO);g7r=r(_ct,"FlaxAlbertForMultipleChoice"),_ct.forEach(t),h7r=r(aAe," (ALBERT model)"),aAe.forEach(t),p7r=i(Zt),uF=n(Zt,"LI",{});var nAe=s(uF);obe=n(nAe,"STRONG",{});var uct=s(obe);_7r=r(uct,"bert"),uct.forEach(t),u7r=r(nAe," \u2014 "),NO=n(nAe,"A",{href:!0});var bct=s(NO);b7r=r(bct,"FlaxBertForMultipleChoice"),bct.forEach(t),v7r=r(nAe," (BERT model)"),nAe.forEach(t),T7r=i(Zt),bF=n(Zt,"LI",{});var sAe=s(bF);rbe=n(sAe,"STRONG",{});var vct=s(rbe);F7r=r(vct,"big_bird"),vct.forEach(t),C7r=r(sAe," \u2014 "),DO=n(sAe,"A",{href:!0});var Tct=s(DO);M7r=r(Tct,"FlaxBigBirdForMultipleChoice"),Tct.forEach(t),E7r=r(sAe," (BigBird model)"),sAe.forEach(t),y7r=i(Zt),vF=n(Zt,"LI",{});var lAe=s(vF);tbe=n(lAe,"STRONG",{});var Fct=s(tbe);w7r=r(Fct,"distilbert"),Fct.forEach(t),A7r=r(lAe," \u2014 "),qO=n(lAe,"A",{href:!0});var Cct=s(qO);L7r=r(Cct,"FlaxDistilBertForMultipleChoice"),Cct.forEach(t),B7r=r(lAe," (DistilBERT model)"),lAe.forEach(t),x7r=i(Zt),TF=n(Zt,"LI",{});var iAe=s(TF);abe=n(iAe,"STRONG",{});var Mct=s(abe);k7r=r(Mct,"electra"),Mct.forEach(t),R7r=r(iAe," \u2014 "),GO=n(iAe,"A",{href:!0});var Ect=s(GO);S7r=r(Ect,"FlaxElectraForMultipleChoice"),Ect.forEach(t),P7r=r(iAe," (ELECTRA model)"),iAe.forEach(t),$7r=i(Zt),FF=n(Zt,"LI",{});var dAe=s(FF);nbe=n(dAe,"STRONG",{});var yct=s(nbe);I7r=r(yct,"roberta"),yct.forEach(t),j7r=r(dAe," \u2014 "),OO=n(dAe,"A",{href:!0});var wct=s(OO);N7r=r(wct,"FlaxRobertaForMultipleChoice"),wct.forEach(t),D7r=r(dAe," (RoBERTa model)"),dAe.forEach(t),q7r=i(Zt),CF=n(Zt,"LI",{});var cAe=s(CF);sbe=n(cAe,"STRONG",{});var Act=s(sbe);G7r=r(Act,"roformer"),Act.forEach(t),O7r=r(cAe," \u2014 "),XO=n(cAe,"A",{href:!0});var Lct=s(XO);X7r=r(Lct,"FlaxRoFormerForMultipleChoice"),Lct.forEach(t),z7r=r(cAe," (RoFormer model)"),cAe.forEach(t),Zt.forEach(t),V7r=i(Aa),lbe=n(Aa,"P",{});var Bct=s(lbe);W7r=r(Bct,"Examples:"),Bct.forEach(t),Q7r=i(Aa),m(Nw.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),sLe=i(d),of=n(d,"H2",{class:!0});var mBe=s(of);MF=n(mBe,"A",{id:!0,class:!0,href:!0});var xct=s(MF);ibe=n(xct,"SPAN",{});var kct=s(ibe);m(Dw.$$.fragment,kct),kct.forEach(t),xct.forEach(t),H7r=i(mBe),dbe=n(mBe,"SPAN",{});var Rct=s(dbe);U7r=r(Rct,"FlaxAutoModelForNextSentencePrediction"),Rct.forEach(t),mBe.forEach(t),lLe=i(d),Rr=n(d,"DIV",{class:!0});var fi=s(Rr);m(qw.$$.fragment,fi),J7r=i(fi),rf=n(fi,"P",{});var kz=s(rf);Y7r=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cbe=n(kz,"CODE",{});var Sct=s(cbe);K7r=r(Sct,"from_pretrained()"),Sct.forEach(t),Z7r=r(kz,"class method or the "),fbe=n(kz,"CODE",{});var Pct=s(fbe);e8r=r(Pct,"from_config()"),Pct.forEach(t),o8r=r(kz,`class
method.`),kz.forEach(t),r8r=i(fi),Gw=n(fi,"P",{});var gBe=s(Gw);t8r=r(gBe,"This class cannot be instantiated directly using "),mbe=n(gBe,"CODE",{});var $ct=s(mbe);a8r=r($ct,"__init__()"),$ct.forEach(t),n8r=r(gBe," (throws an error)."),gBe.forEach(t),s8r=i(fi),Et=n(fi,"DIV",{class:!0});var mi=s(Et);m(Ow.$$.fragment,mi),l8r=i(mi),gbe=n(mi,"P",{});var Ict=s(gbe);i8r=r(Ict,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ict.forEach(t),d8r=i(mi),tf=n(mi,"P",{});var Rz=s(tf);c8r=r(Rz,`Note:
Loading a model from its configuration file does `),hbe=n(Rz,"STRONG",{});var jct=s(hbe);f8r=r(jct,"not"),jct.forEach(t),m8r=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),pbe=n(Rz,"CODE",{});var Nct=s(pbe);g8r=r(Nct,"from_pretrained()"),Nct.forEach(t),h8r=r(Rz,"to load the model weights."),Rz.forEach(t),p8r=i(mi),_be=n(mi,"P",{});var Dct=s(_be);_8r=r(Dct,"Examples:"),Dct.forEach(t),u8r=i(mi),m(Xw.$$.fragment,mi),mi.forEach(t),b8r=i(fi),So=n(fi,"DIV",{class:!0});var La=s(So);m(zw.$$.fragment,La),v8r=i(La),ube=n(La,"P",{});var qct=s(ube);T8r=r(qct,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qct.forEach(t),F8r=i(La),wn=n(La,"P",{});var EC=s(wn);C8r=r(EC,"The model class to instantiate is selected based on the "),bbe=n(EC,"CODE",{});var Gct=s(bbe);M8r=r(Gct,"model_type"),Gct.forEach(t),E8r=r(EC,` property of the config object (either
passed as an argument or loaded from `),vbe=n(EC,"CODE",{});var Oct=s(vbe);y8r=r(Oct,"pretrained_model_name_or_path"),Oct.forEach(t),w8r=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(EC,"CODE",{});var Xct=s(Tbe);A8r=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),L8r=r(EC,":"),EC.forEach(t),B8r=i(La),Fbe=n(La,"UL",{});var zct=s(Fbe);EF=n(zct,"LI",{});var fAe=s(EF);Cbe=n(fAe,"STRONG",{});var Vct=s(Cbe);x8r=r(Vct,"bert"),Vct.forEach(t),k8r=r(fAe," \u2014 "),zO=n(fAe,"A",{href:!0});var Wct=s(zO);R8r=r(Wct,"FlaxBertForNextSentencePrediction"),Wct.forEach(t),S8r=r(fAe," (BERT model)"),fAe.forEach(t),zct.forEach(t),P8r=i(La),Mbe=n(La,"P",{});var Qct=s(Mbe);$8r=r(Qct,"Examples:"),Qct.forEach(t),I8r=i(La),m(Vw.$$.fragment,La),La.forEach(t),fi.forEach(t),iLe=i(d),af=n(d,"H2",{class:!0});var hBe=s(af);yF=n(hBe,"A",{id:!0,class:!0,href:!0});var Hct=s(yF);Ebe=n(Hct,"SPAN",{});var Uct=s(Ebe);m(Ww.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),j8r=i(hBe),ybe=n(hBe,"SPAN",{});var Jct=s(ybe);N8r=r(Jct,"FlaxAutoModelForImageClassification"),Jct.forEach(t),hBe.forEach(t),dLe=i(d),Sr=n(d,"DIV",{class:!0});var gi=s(Sr);m(Qw.$$.fragment,gi),D8r=i(gi),nf=n(gi,"P",{});var Sz=s(nf);q8r=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wbe=n(Sz,"CODE",{});var Yct=s(wbe);G8r=r(Yct,"from_pretrained()"),Yct.forEach(t),O8r=r(Sz,"class method or the "),Abe=n(Sz,"CODE",{});var Kct=s(Abe);X8r=r(Kct,"from_config()"),Kct.forEach(t),z8r=r(Sz,`class
method.`),Sz.forEach(t),V8r=i(gi),Hw=n(gi,"P",{});var pBe=s(Hw);W8r=r(pBe,"This class cannot be instantiated directly using "),Lbe=n(pBe,"CODE",{});var Zct=s(Lbe);Q8r=r(Zct,"__init__()"),Zct.forEach(t),H8r=r(pBe," (throws an error)."),pBe.forEach(t),U8r=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Uw.$$.fragment,hi),J8r=i(hi),Bbe=n(hi,"P",{});var eft=s(Bbe);Y8r=r(eft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eft.forEach(t),K8r=i(hi),sf=n(hi,"P",{});var Pz=s(sf);Z8r=r(Pz,`Note:
Loading a model from its configuration file does `),xbe=n(Pz,"STRONG",{});var oft=s(xbe);eFr=r(oft,"not"),oft.forEach(t),oFr=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kbe=n(Pz,"CODE",{});var rft=s(kbe);rFr=r(rft,"from_pretrained()"),rft.forEach(t),tFr=r(Pz,"to load the model weights."),Pz.forEach(t),aFr=i(hi),Rbe=n(hi,"P",{});var tft=s(Rbe);nFr=r(tft,"Examples:"),tft.forEach(t),sFr=i(hi),m(Jw.$$.fragment,hi),hi.forEach(t),lFr=i(gi),Po=n(gi,"DIV",{class:!0});var Ba=s(Po);m(Yw.$$.fragment,Ba),iFr=i(Ba),Sbe=n(Ba,"P",{});var aft=s(Sbe);dFr=r(aft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),aft.forEach(t),cFr=i(Ba),An=n(Ba,"P",{});var yC=s(An);fFr=r(yC,"The model class to instantiate is selected based on the "),Pbe=n(yC,"CODE",{});var nft=s(Pbe);mFr=r(nft,"model_type"),nft.forEach(t),gFr=r(yC,` property of the config object (either
passed as an argument or loaded from `),$be=n(yC,"CODE",{});var sft=s($be);hFr=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),pFr=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(yC,"CODE",{});var lft=s(Ibe);_Fr=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),uFr=r(yC,":"),yC.forEach(t),bFr=i(Ba),Kw=n(Ba,"UL",{});var _Be=s(Kw);wF=n(_Be,"LI",{});var mAe=s(wF);jbe=n(mAe,"STRONG",{});var ift=s(jbe);vFr=r(ift,"beit"),ift.forEach(t),TFr=r(mAe," \u2014 "),VO=n(mAe,"A",{href:!0});var dft=s(VO);FFr=r(dft,"FlaxBeitForImageClassification"),dft.forEach(t),CFr=r(mAe," (BEiT model)"),mAe.forEach(t),MFr=i(_Be),AF=n(_Be,"LI",{});var gAe=s(AF);Nbe=n(gAe,"STRONG",{});var cft=s(Nbe);EFr=r(cft,"vit"),cft.forEach(t),yFr=r(gAe," \u2014 "),WO=n(gAe,"A",{href:!0});var fft=s(WO);wFr=r(fft,"FlaxViTForImageClassification"),fft.forEach(t),AFr=r(gAe," (ViT model)"),gAe.forEach(t),_Be.forEach(t),LFr=i(Ba),Dbe=n(Ba,"P",{});var mft=s(Dbe);BFr=r(mft,"Examples:"),mft.forEach(t),xFr=i(Ba),m(Zw.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),cLe=i(d),lf=n(d,"H2",{class:!0});var uBe=s(lf);LF=n(uBe,"A",{id:!0,class:!0,href:!0});var gft=s(LF);qbe=n(gft,"SPAN",{});var hft=s(qbe);m(eA.$$.fragment,hft),hft.forEach(t),gft.forEach(t),kFr=i(uBe),Gbe=n(uBe,"SPAN",{});var pft=s(Gbe);RFr=r(pft,"FlaxAutoModelForVision2Seq"),pft.forEach(t),uBe.forEach(t),fLe=i(d),Pr=n(d,"DIV",{class:!0});var pi=s(Pr);m(oA.$$.fragment,pi),SFr=i(pi),df=n(pi,"P",{});var $z=s(df);PFr=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Obe=n($z,"CODE",{});var _ft=s(Obe);$Fr=r(_ft,"from_pretrained()"),_ft.forEach(t),IFr=r($z,"class method or the "),Xbe=n($z,"CODE",{});var uft=s(Xbe);jFr=r(uft,"from_config()"),uft.forEach(t),NFr=r($z,`class
method.`),$z.forEach(t),DFr=i(pi),rA=n(pi,"P",{});var bBe=s(rA);qFr=r(bBe,"This class cannot be instantiated directly using "),zbe=n(bBe,"CODE",{});var bft=s(zbe);GFr=r(bft,"__init__()"),bft.forEach(t),OFr=r(bBe," (throws an error)."),bBe.forEach(t),XFr=i(pi),wt=n(pi,"DIV",{class:!0});var _i=s(wt);m(tA.$$.fragment,_i),zFr=i(_i),Vbe=n(_i,"P",{});var vft=s(Vbe);VFr=r(vft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vft.forEach(t),WFr=i(_i),cf=n(_i,"P",{});var Iz=s(cf);QFr=r(Iz,`Note:
Loading a model from its configuration file does `),Wbe=n(Iz,"STRONG",{});var Tft=s(Wbe);HFr=r(Tft,"not"),Tft.forEach(t),UFr=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=n(Iz,"CODE",{});var Fft=s(Qbe);JFr=r(Fft,"from_pretrained()"),Fft.forEach(t),YFr=r(Iz,"to load the model weights."),Iz.forEach(t),KFr=i(_i),Hbe=n(_i,"P",{});var Cft=s(Hbe);ZFr=r(Cft,"Examples:"),Cft.forEach(t),eCr=i(_i),m(aA.$$.fragment,_i),_i.forEach(t),oCr=i(pi),$o=n(pi,"DIV",{class:!0});var xa=s($o);m(nA.$$.fragment,xa),rCr=i(xa),Ube=n(xa,"P",{});var Mft=s(Ube);tCr=r(Mft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mft.forEach(t),aCr=i(xa),Ln=n(xa,"P",{});var wC=s(Ln);nCr=r(wC,"The model class to instantiate is selected based on the "),Jbe=n(wC,"CODE",{});var Eft=s(Jbe);sCr=r(Eft,"model_type"),Eft.forEach(t),lCr=r(wC,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(wC,"CODE",{});var yft=s(Ybe);iCr=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),dCr=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(wC,"CODE",{});var wft=s(Kbe);cCr=r(wft,"pretrained_model_name_or_path"),wft.forEach(t),fCr=r(wC,":"),wC.forEach(t),mCr=i(xa),Zbe=n(xa,"UL",{});var Aft=s(Zbe);BF=n(Aft,"LI",{});var hAe=s(BF);e5e=n(hAe,"STRONG",{});var Lft=s(e5e);gCr=r(Lft,"vision-encoder-decoder"),Lft.forEach(t),hCr=r(hAe," \u2014 "),QO=n(hAe,"A",{href:!0});var Bft=s(QO);pCr=r(Bft,"FlaxVisionEncoderDecoderModel"),Bft.forEach(t),_Cr=r(hAe," (Vision Encoder decoder model)"),hAe.forEach(t),Aft.forEach(t),uCr=i(xa),o5e=n(xa,"P",{});var xft=s(o5e);bCr=r(xft,"Examples:"),xft.forEach(t),vCr=i(xa),m(sA.$$.fragment,xa),xa.forEach(t),pi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(Dft)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(le,"class","relative group"),c(Bn,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoConfig"),c(kn,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoModel"),c(Rn,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoTokenizer"),c(Ei,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertModel"),c(_f,"id","extending-the-auto-classes"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#extending-the-auto-classes"),c(yi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(wi,"class","relative group"),c(d0,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(c0,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig"),c(f0,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig"),c(m0,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig"),c(g0,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig"),c(h0,"href","/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(p0,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig"),c(_0,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(u0,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(b0,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(v0,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig"),c(T0,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig"),c(F0,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPConfig"),c(C0,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig"),c(M0,"href","/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextConfig"),c(E0,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig"),c(y0,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig"),c(w0,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(A0,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTConfig"),c(L0,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrConfig"),c(B0,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig"),c(x0,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRConfig"),c(k0,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig"),c(R0,"href","/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(S0,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig"),c(P0,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig"),c($0,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTConfig"),c(I0,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig"),c(j0,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config"),c(N0,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(D0,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig"),c(q0,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig"),c(G0,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig"),c(O0,"href","/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(X0,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(z0,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(V0,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig"),c(W0,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig"),c(Q0,"href","/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeConfig"),c(H0,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig"),c(U0,"href","/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Config"),c(J0,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig"),c(Y0,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig"),c(K0,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Z0,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(eL,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig"),c(oL,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config"),c(rL,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(tL,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(aL,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig"),c(nL,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig"),c(sL,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(lL,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(iL,"href","/docs/transformers/pr_15678/en/model_doc/rag#transformers.RagConfig"),c(dL,"href","/docs/transformers/pr_15678/en/model_doc/realm#transformers.RealmConfig"),c(cL,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig"),c(fL,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig"),c(mL,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertConfig"),c(gL,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig"),c(hL,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig"),c(pL,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerConfig"),c(_L,"href","/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWConfig"),c(uL,"href","/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDConfig"),c(bL,"href","/docs/transformers/pr_15678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(vL,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(TL,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(FL,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterConfig"),c(CL,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(ML,"href","/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinConfig"),c(EL,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config"),c(yL,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig"),c(wL,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(AL,"href","/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRConfig"),c(LL,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(BL,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(xL,"href","/docs/transformers/pr_15678/en/model_doc/vilt#transformers.ViltConfig"),c(kL,"href","/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(RL,"href","/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(SL,"href","/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(PL,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig"),c($L,"href","/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(IL,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(jL,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig"),c(NL,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig"),c(DL,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig"),c(qL,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(GL,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(OL,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(XL,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig"),c(zL,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig"),c(io,"class","docstring"),c(eg,"class","docstring"),c(qo,"class","docstring"),c(og,"id","transformers.AutoTokenizer"),c(og,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(og,"href","#transformers.AutoTokenizer"),c(Li,"class","relative group"),c(VL,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(WL,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertTokenizer"),c(QL,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HL,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartTokenizer"),c(UL,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartTokenizerFast"),c(JL,"href","/docs/transformers/pr_15678/en/model_doc/barthez#transformers.BarthezTokenizer"),c(YL,"href","/docs/transformers/pr_15678/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(KL,"href","/docs/transformers/pr_15678/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(ZL,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertTokenizer"),c(e9,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertTokenizerFast"),c(o9,"href","/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(r9,"href","/docs/transformers/pr_15678/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(t9,"href","/docs/transformers/pr_15678/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(a9,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(n9,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(s9,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(l9,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(i9,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(d9,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(c9,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(f9,"href","/docs/transformers/pr_15678/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(m9,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertTokenizer"),c(g9,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(h9,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineTokenizer"),c(p9,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPTokenizer"),c(_9,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(u9,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(b9,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(v9,"href","/docs/transformers/pr_15678/en/model_doc/cpm#transformers.CpmTokenizer"),c(T9,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(F9,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaTokenizer"),c(C9,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(M9,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(E9,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(y9,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(w9,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(A9,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(L9,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraTokenizer"),c(B9,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(x9,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(k9,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetTokenizer"),c(R9,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(S9,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(P9,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelTokenizer"),c($9,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(I9,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(j9,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(N9,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(D9,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(q9,"href","/docs/transformers/pr_15678/en/model_doc/herbert#transformers.HerbertTokenizer"),c(G9,"href","/docs/transformers/pr_15678/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(O9,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(X9,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(z9,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(V9,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(W9,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Q9,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(H9,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(U9,"href","/docs/transformers/pr_15678/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(J9,"href","/docs/transformers/pr_15678/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Y9,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDTokenizer"),c(K9,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDTokenizerFast"),c(Z9,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerTokenizer"),c(eB,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(oB,"href","/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeTokenizer"),c(rB,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(tB,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(aB,"href","/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(nB,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianTokenizer"),c(sB,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartTokenizer"),c(lB,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(iB,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(dB,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(cB,"href","/docs/transformers/pr_15678/en/model_doc/mluke#transformers.MLukeTokenizer"),c(fB,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(mB,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(hB,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(pB,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.T5Tokenizer"),c(_B,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.T5TokenizerFast"),c(uB,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bB,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vB,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TB,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FB,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(CB,"href","/docs/transformers/pr_15678/en/model_doc/phobert#transformers.PhobertTokenizer"),c(MB,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(EB,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertTokenizer"),c(yB,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertTokenizerFast"),c(wB,"href","/docs/transformers/pr_15678/en/model_doc/rag#transformers.RagTokenizer"),c(AB,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerTokenizer"),c(LB,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(BB,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertTokenizer"),c(xB,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(kB,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(RB,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(SB,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PB,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($B,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(IB,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(jB,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(NB,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(DB,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterTokenizer"),c(qB,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(GB,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(OB,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(XB,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.T5Tokenizer"),c(zB,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.T5TokenizerFast"),c(VB,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasTokenizer"),c(WB,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(QB,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HB,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(UB,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMTokenizer"),c(JB,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(YB,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMTokenizer"),c(KB,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(ZB,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(ex,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ox,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(rx,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(co,"class","docstring"),c(xg,"class","docstring"),c(Go,"class","docstring"),c(kg,"id","transformers.AutoFeatureExtractor"),c(kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kg,"href","#transformers.AutoFeatureExtractor"),c(Bi,"class","relative group"),c(tx,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(ax,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nx,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sx,"href","/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lx,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(ix,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(dx,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cx,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fx,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mx,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(gx,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(hx,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(px,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_x,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ux,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Le,"class","docstring"),c(Qg,"class","docstring"),c(Oo,"class","docstring"),c(Hg,"id","transformers.AutoProcessor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoProcessor"),c(xi,"class","relative group"),c(bx,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(vx,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPProcessor"),c(Tx,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Fx,"href","/docs/transformers/pr_15678/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Cx,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Mx,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Ex,"href","/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRProcessor"),c(yx,"href","/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(wx,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Be,"class","docstring"),c(ea,"class","docstring"),c(ah,"id","transformers.AutoModel"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoModel"),c(Ri,"class","relative group"),c($r,"class","docstring"),c(Ax,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertModel"),c(Lx,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartModel"),c(Bx,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitModel"),c(xx,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertModel"),c(kx,"href","/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Rx,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdModel"),c(Sx,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Px,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotModel"),c($x,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Ix,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertModel"),c(jx,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineModel"),c(Nx,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPModel"),c(Dx,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertModel"),c(qx,"href","/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextModel"),c(Gx,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLModel"),c(Ox,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaModel"),c(Xx,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(zx,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTModel"),c(Vx,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrModel"),c(Wx,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertModel"),c(Qx,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Hx,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraModel"),c(Ux,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertModel"),c(Jx,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetModel"),c(Yx,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTModel"),c(Kx,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelModel"),c(Zx,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelBaseModel"),c(ek,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Model"),c(ok,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(rk,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJModel"),c(tk,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertModel"),c(ak,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertModel"),c(nk,"href","/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(sk,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(lk,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(ik,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDModel"),c(dk,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerModel"),c(ck,"href","/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeModel"),c(fk,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertModel"),c(mk,"href","/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Model"),c(gk,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianModel"),c(hk,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartModel"),c(pk,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(_k,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertModel"),c(uk,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetModel"),c(bk,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Model"),c(vk,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Tk,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Fk,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusModel"),c(Ck,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverModel"),c(Mk,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Ek,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertModel"),c(yk,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerModel"),c(wk,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertModel"),c(Ak,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertModel"),c(Lk,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaModel"),c(Bk,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerModel"),c(xk,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerModel"),c(kk,"href","/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWModel"),c(Rk,"href","/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDModel"),c(Sk,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Pk,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterModel"),c($k,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Ik,"href","/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinModel"),c(jk,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Model"),c(Nk,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasModel"),c(Dk,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(qk,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Gk,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Ok,"href","/docs/transformers/pr_15678/en/model_doc/vilt#transformers.ViltModel"),c(Xk,"href","/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(zk,"href","/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Vk,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTModel"),c(Wk,"href","/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Qk,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Hk,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMModel"),c(Uk,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMModel"),c(Jk,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMModel"),c(Yk,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Kk,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Zk,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(eR,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetModel"),c(oR,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoModel"),c(xe,"class","docstring"),c(Xo,"class","docstring"),c(Sp,"id","transformers.AutoModelForPreTraining"),c(Sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sp,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(Ir,"class","docstring"),c(rR,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForPreTraining"),c(tR,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aR,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForPreTraining"),c(nR,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(sR,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(lR,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iR,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dR,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cR,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fR,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mR,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gR,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForPreTraining"),c(hR,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(pR,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(_R,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uR,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(bR,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(vR,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TR,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(FR,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(CR,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(MR,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ER,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yR,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertModel"),c(wR,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AR,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LR,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(BR,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xR,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kR,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(RR,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(SR,"href","/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(PR,"href","/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c($R,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(IR,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jR,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(NR,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DR,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(ke,"class","docstring"),c(zo,"class","docstring"),c(v_,"id","transformers.AutoModelForCausalLM"),c(v_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v_,"href","#transformers.AutoModelForCausalLM"),c(Ni,"class","relative group"),c(jr,"class","docstring"),c(qR,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForCausalLM"),c(GR,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertLMHeadModel"),c(OR,"href","/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(XR,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(zR,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VR,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(WR,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(QR,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(HR,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UR,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForCausalLM"),c(JR,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YR,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(KR,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ZR,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianForCausalLM"),c(eS,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForCausalLM"),c(oS,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(rS,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(tS,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(aS,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(nS,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(sS,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(lS,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(iS,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(dS,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(cS,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(fS,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mS,"href","/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(gS,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(hS,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pS,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_S,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(uS,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(bS,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Re,"class","docstring"),c(Vo,"class","docstring"),c(eu,"id","transformers.AutoModelForMaskedLM"),c(eu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eu,"href","#transformers.AutoModelForMaskedLM"),c(Gi,"class","relative group"),c(Nr,"class","docstring"),c(vS,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(TS,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(FS,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForMaskedLM"),c(CS,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(MS,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ES,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(yS,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(wS,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(AS,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(LS,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(BS,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(xS,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(kS,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(RS,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(SS,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(PS,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($S,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(IS,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(jS,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(NS,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DS,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(qS,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(GS,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(OS,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(XS,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(zS,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(VS,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(WS,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(QS,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(HS,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(US,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(JS,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(YS,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Se,"class","docstring"),c(Wo,"class","docstring"),c(Iu,"id","transformers.AutoModelForSeq2SeqLM"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForSeq2SeqLM"),c(zi,"class","relative group"),c(Dr,"class","docstring"),c(KS,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZS,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(eP,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(oP,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(rP,"href","/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(tP,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aP,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(nP,"href","/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(sP,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianMTModel"),c(lP,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iP,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(dP,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(cP,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(fP,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mP,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Pe,"class","docstring"),c(Qo,"class","docstring"),c(Zu,"id","transformers.AutoModelForSequenceClassification"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForSequenceClassification"),c(Qi,"class","relative group"),c(qr,"class","docstring"),c(gP,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(hP,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pP,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_P,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(uP,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(bP,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(vP,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(TP,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(FP,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(CP,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MP,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(EP,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(yP,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wP,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AP,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(LP,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(BP,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xP,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(kP,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(RP,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SP,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(PP,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c($P,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForSequenceClassification"),c(IP,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(jP,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(NP,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(DP,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qP,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(GP,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(OP,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(XP,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(zP,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(VP,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(WP,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(QP,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(HP,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(UP,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(JP,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(YP,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(KP,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(ZP,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(e$,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(o$,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(r$,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c($e,"class","docstring"),c(Ho,"class","docstring"),c(V1,"id","transformers.AutoModelForMultipleChoice"),c(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V1,"href","#transformers.AutoModelForMultipleChoice"),c(Ji,"class","relative group"),c(Gr,"class","docstring"),c(t$,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(a$,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForMultipleChoice"),c(n$,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(s$,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(l$,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(i$,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(d$,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(c$,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(f$,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(m$,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(g$,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(h$,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(p$,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(_$,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(u$,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(b$,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(v$,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(T$,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(F$,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(C$,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(M$,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(E$,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(y$,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(w$,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(A$,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(L$,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(B$,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ie,"class","docstring"),c(Uo,"class","docstring"),c(Tb,"id","transformers.AutoModelForNextSentencePrediction"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Zi,"class","relative group"),c(Or,"class","docstring"),c(x$,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(k$,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(R$,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(S$,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(P$,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(Ab,"id","transformers.AutoModelForTokenClassification"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForTokenClassification"),c(rd,"class","relative group"),c(Xr,"class","docstring"),c($$,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(I$,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForTokenClassification"),c(j$,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(N$,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(D$,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForTokenClassification"),c(q$,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(G$,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(O$,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(X$,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(z$,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(V$,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(W$,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Q$,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(H$,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(U$,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(J$,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Y$,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(K$,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Z$,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(eI,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(oI,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(rI,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(tI,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aI,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(nI,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(sI,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lI,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(iI,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(dI,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cI,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(fI,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(mI,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ne,"class","docstring"),c(Yo,"class","docstring"),c(l5,"id","transformers.AutoModelForQuestionAnswering"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.AutoModelForQuestionAnswering"),c(nd,"class","relative group"),c(zr,"class","docstring"),c(gI,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(hI,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(pI,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(_I,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(uI,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(bI,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(vI,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(TI,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(FI,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(CI,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(MI,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(EI,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(yI,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(wI,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(AI,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(LI,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BI,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(xI,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(kI,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(RI,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(SI,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(PI,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c($I,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(II,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(jI,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(NI,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(DI,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(qI,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(GI,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(OI,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(XI,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(zI,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(VI,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(WI,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(QI,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(HI,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(UI,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(JI,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(De,"class","docstring"),c(Ko,"class","docstring"),c(Q5,"id","transformers.AutoModelForTableQuestionAnswering"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(id,"class","relative group"),c(Vr,"class","docstring"),c(YI,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(J5,"id","transformers.AutoModelForImageClassification"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.AutoModelForImageClassification"),c(fd,"class","relative group"),c(Wr,"class","docstring"),c(KI,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitForImageClassification"),c(ZI,"href","/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(ej,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForImageClassification"),c(oj,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(rj,"href","/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(tj,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(aj,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(nj,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(sj,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(lj,"href","/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinForImageClassification"),c(ij,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ge,"class","docstring"),c(er,"class","docstring"),c(a2,"id","transformers.AutoModelForVision2Seq"),c(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a2,"href","#transformers.AutoModelForVision2Seq"),c(hd,"class","relative group"),c(Qr,"class","docstring"),c(dj,"href","/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Oe,"class","docstring"),c(or,"class","docstring"),c(l2,"id","transformers.AutoModelForAudioClassification"),c(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l2,"href","#transformers.AutoModelForAudioClassification"),c(ud,"class","relative group"),c(Hr,"class","docstring"),c(cj,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(fj,"href","/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(mj,"href","/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(gj,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(hj,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(pj,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(_j,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(_2,"id","transformers.AutoModelForAudioFrameClassification"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForAudioFrameClassification"),c(Td,"class","relative group"),c(Ur,"class","docstring"),c(uj,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(bj,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(vj,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ze,"class","docstring"),c(tr,"class","docstring"),c(F2,"id","transformers.AutoModelForCTC"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForCTC"),c(Ed,"class","relative group"),c(Jr,"class","docstring"),c(Tj,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertForCTC"),c(Fj,"href","/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWForCTC"),c(Cj,"href","/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Mj,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Ej,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yj,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(wj,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ve,"class","docstring"),c(ar,"class","docstring"),c(x2,"id","transformers.AutoModelForSpeechSeq2Seq"),c(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x2,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Ad,"class","relative group"),c(Yr,"class","docstring"),c(Aj,"href","/docs/transformers/pr_15678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Lj,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(We,"class","docstring"),c(nr,"class","docstring"),c(P2,"id","transformers.AutoModelForAudioXVector"),c(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P2,"href","#transformers.AutoModelForAudioXVector"),c(xd,"class","relative group"),c(Kr,"class","docstring"),c(Bj,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(xj,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kj,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Qe,"class","docstring"),c(sr,"class","docstring"),c(D2,"id","transformers.AutoModelForObjectDetection"),c(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D2,"href","#transformers.AutoModelForObjectDetection"),c(Pd,"class","relative group"),c(Zr,"class","docstring"),c(Rj,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrForObjectDetection"),c(He,"class","docstring"),c(lr,"class","docstring"),c(O2,"id","transformers.AutoModelForImageSegmentation"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForImageSegmentation"),c(jd,"class","relative group"),c(et,"class","docstring"),c(Sj,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrForSegmentation"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(V2,"id","transformers.AutoModelForSemanticSegmentation"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForSemanticSegmentation"),c(qd,"class","relative group"),c(ot,"class","docstring"),c(Pj,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c($j,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(U2,"id","transformers.TFAutoModel"),c(U2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U2,"href","#transformers.TFAutoModel"),c(Xd,"class","relative group"),c(rt,"class","docstring"),c(Ij,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertModel"),c(jj,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartModel"),c(Nj,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertModel"),c(Dj,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(qj,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Gj,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertModel"),c(Oj,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.TFCLIPModel"),c(Xj,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertModel"),c(zj,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Vj,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaModel"),c(Wj,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Qj,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Hj,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Uj,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraModel"),c(Jj,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Yj,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelModel"),c(Kj,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Zj,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2Model"),c(eN,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.TFHubertModel"),c(oN,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(rN,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.TFLEDModel"),c(tN,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerModel"),c(aN,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.TFLxmertModel"),c(nN,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.TFMarianModel"),c(sN,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.TFMBartModel"),c(lN,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(iN,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetModel"),c(dN,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.TFMT5Model"),c(cN,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(fN,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.TFPegasusModel"),c(mN,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertModel"),c(gN,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaModel"),c(hN,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerModel"),c(pN,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(_N,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5Model"),c(uN,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasModel"),c(bN,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(vN,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.TFViTModel"),c(TN,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(FN,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMModel"),c(CN,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(MN,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetModel"),c(fo,"class","docstring"),c(cr,"class","docstring"),c(Iv,"id","transformers.TFAutoModelForPreTraining"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(tt,"class","docstring"),c(EN,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(yN,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(wN,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForPreTraining"),c(AN,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LN,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BN,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(xN,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kN,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RN,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(SN,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PN,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($N,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IN,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(jN,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NN,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(DN,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qN,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GN,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(ON,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XN,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zN,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(VN,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(mo,"class","docstring"),c(fr,"class","docstring"),c(n6,"id","transformers.TFAutoModelForCausalLM"),c(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n6,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(at,"class","docstring"),c(WN,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(QN,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(HN,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UN,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JN,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YN,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KN,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZN,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eD,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oD,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(go,"class","docstring"),c(mr,"class","docstring"),c(_6,"id","transformers.TFAutoModelForImageClassification"),c(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_6,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(nt,"class","docstring"),c(rD,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.TFViTForImageClassification"),c(ho,"class","docstring"),c(gr,"class","docstring"),c(b6,"id","transformers.TFAutoModelForMaskedLM"),c(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b6,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(st,"class","docstring"),c(tD,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aD,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sD,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lD,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iD,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dD,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fD,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mD,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gD,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hD,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pD,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uD,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bD,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vD,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(TD,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(FD,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CD,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(po,"class","docstring"),c(hr,"class","docstring"),c(D6,"id","transformers.TFAutoModelForSeq2SeqLM"),c(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D6,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(lt,"class","docstring"),c(MD,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(AD,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.TFMarianMTModel"),c(BD,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(_o,"class","docstring"),c(pr,"class","docstring"),c(J6,"id","transformers.TFAutoModelForSequenceClassification"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(it,"class","docstring"),c(SD,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(PD,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(ND,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(DD,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(qD,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(OD,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(XD,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(zD,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(VD,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(WD,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(QD,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(UD,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(JD,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(YD,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(KD,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(eq,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(oq,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(rq,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(tq,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(uo,"class","docstring"),c(_r,"class","docstring"),c(CT,"id","transformers.TFAutoModelForMultipleChoice"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(dt,"class","docstring"),c(aq,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(nq,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(sq,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lq,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(iq,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(dq,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cq,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(fq,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(mq,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gq,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hq,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(pq,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(_q,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(uq,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bq,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vq,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Tq,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(bo,"class","docstring"),c(ur,"class","docstring"),c(qT,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(ct,"class","docstring"),c(Fq,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(vo,"class","docstring"),c(br,"class","docstring"),c(OT,"id","transformers.TFAutoModelForTokenClassification"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(ft,"class","docstring"),c(Cq,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Mq,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Eq,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yq,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(wq,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Aq,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Lq,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Bq,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(xq,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kq,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Rq,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Sq,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Pq,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c($q,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Iq,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(jq,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Nq,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Dq,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(qq,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Gq,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(To,"class","docstring"),c(vr,"class","docstring"),c(d7,"id","transformers.TFAutoModelForQuestionAnswering"),c(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d7,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(mt,"class","docstring"),c(Oq,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Xq,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zq,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Vq,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Wq,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Qq,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Hq,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Uq,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Jq,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Yq,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Kq,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Zq,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(eG,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(oG,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(rG,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(tG,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(aG,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(nG,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(sG,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Fo,"class","docstring"),c(Tr,"class","docstring"),c(B7,"id","transformers.TFAutoModelForVision2Seq"),c(B7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B7,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(gt,"class","docstring"),c(lG,"href","/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Co,"class","docstring"),c(Fr,"class","docstring"),c(k7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(ht,"class","docstring"),c(iG,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Mo,"class","docstring"),c(Cr,"class","docstring"),c(S7,"id","transformers.FlaxAutoModel"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(pt,"class","docstring"),c(dG,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cG,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartModel"),c(fG,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.FlaxBeitModel"),c(mG,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertModel"),c(gG,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hG,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(pG,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(_G,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.FlaxCLIPModel"),c(uG,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bG,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraModel"),c(vG,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(TG,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(FG,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(CG,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.FlaxMarianModel"),c(MG,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartModel"),c(EG,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yG,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(wG,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(AG,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(LG,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5Model"),c(BG,"href","/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(xG,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.FlaxViTModel"),c(kG,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(RG,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Eo,"class","docstring"),c(Mr,"class","docstring"),c(a8,"id","transformers.FlaxAutoModelForCausalLM"),c(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a8,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(_t,"class","docstring"),c(SG,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PG,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($G,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(IG,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(yo,"class","docstring"),c(Er,"class","docstring"),c(d8,"id","transformers.FlaxAutoModelForPreTraining"),c(d8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d8,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(ut,"class","docstring"),c(jG,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(NG,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DG,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(qG,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(GG,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(OG,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XG,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zG,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VG,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WG,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(QG,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(wo,"class","docstring"),c(yr,"class","docstring"),c(F8,"id","transformers.FlaxAutoModelForMaskedLM"),c(F8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F8,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(bt,"class","docstring"),c(HG,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(UG,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JG,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(YG,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(KG,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eO,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oO,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(rO,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ao,"class","docstring"),c(wr,"class","docstring"),c(k8,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(k8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k8,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(qc,"class","relative group"),c(vt,"class","docstring"),c(tO,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aO,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(nO,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(sO,"href","/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(lO,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(iO,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dO,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cO,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(fO,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Lo,"class","docstring"),c(Ar,"class","docstring"),c(G8,"id","transformers.FlaxAutoModelForSequenceClassification"),c(G8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G8,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(Tt,"class","docstring"),c(mO,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gO,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hO,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(pO,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(_O,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(uO,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bO,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vO,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(TO,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Bo,"class","docstring"),c(Lr,"class","docstring"),c(Y8,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y8,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(Ft,"class","docstring"),c(FO,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(xo,"class","docstring"),c(Br,"class","docstring"),c(lF,"id","transformers.FlaxAutoModelForTokenClassification"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(Ct,"class","docstring"),c(xO,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(kO,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(SO,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(PO,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c($O,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(IO,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ko,"class","docstring"),c(xr,"class","docstring"),c(pF,"id","transformers.FlaxAutoModelForMultipleChoice"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(Mt,"class","docstring"),c(jO,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NO,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qO,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GO,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OO,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(XO,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Ro,"class","docstring"),c(kr,"class","docstring"),c(MF,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(Et,"class","docstring"),c(zO,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(So,"class","docstring"),c(Rr,"class","docstring"),c(yF,"id","transformers.FlaxAutoModelForImageClassification"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(yt,"class","docstring"),c(VO,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(WO,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Po,"class","docstring"),c(Sr,"class","docstring"),c(LF,"id","transformers.FlaxAutoModelForVision2Seq"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(wt,"class","docstring"),c(QO,"href","/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c($o,"class","docstring"),c(Pr,"class","docstring")},m(d,u){e(document.head,J),b(d,Ae,u),b(d,le,u),e(le,me),e(me,oo),g(ce,oo,null),e(le,ue),e(le,No),e(No,bi),b(d,mf,u),b(d,ra,u),e(ra,vi),e(ra,Ti),e(Ti,AC),e(ra,gf),b(d,Ee,u),b(d,so,u),e(so,Fi),e(so,Bn),e(Bn,LC),e(so,xn),e(so,kn),e(kn,BC),e(so,Ci),e(so,Rn),e(Rn,xC),e(so,Mi),b(d,hf,u),g(ka,d,u),b(d,lo,u),b(d,ge,u),e(ge,t0),e(ge,Ei),e(Ei,a0),e(ge,n0),b(d,Do,u),b(d,Ra,u),e(Ra,s0),e(Ra,pf),e(pf,l0),e(Ra,vBe),b(d,pAe,u),b(d,yi,u),e(yi,_f),e(_f,jz),g(kC,jz,null),e(yi,TBe),e(yi,Nz),e(Nz,FBe),b(d,_Ae,u),b(d,Sn,u),e(Sn,CBe),e(Sn,Dz),e(Dz,MBe),e(Sn,EBe),e(Sn,qz),e(qz,yBe),e(Sn,wBe),b(d,uAe,u),g(RC,d,u),b(d,bAe,u),b(d,i0,u),e(i0,ABe),b(d,vAe,u),g(uf,d,u),b(d,TAe,u),b(d,wi,u),e(wi,bf),e(bf,Gz),g(SC,Gz,null),e(wi,LBe),e(wi,Oz),e(Oz,BBe),b(d,FAe,u),b(d,qo,u),g(PC,qo,null),e(qo,xBe),e(qo,$C),e($C,kBe),e($C,d0),e(d0,RBe),e($C,SBe),e(qo,PBe),e(qo,IC),e(IC,$Be),e(IC,Xz),e(Xz,IBe),e(IC,jBe),e(qo,NBe),e(qo,io),g(jC,io,null),e(io,DBe),e(io,zz),e(zz,qBe),e(io,GBe),e(io,Ai),e(Ai,OBe),e(Ai,Vz),e(Vz,XBe),e(Ai,zBe),e(Ai,Wz),e(Wz,VBe),e(Ai,WBe),e(io,QBe),e(io,v),e(v,vf),e(vf,Qz),e(Qz,HBe),e(vf,UBe),e(vf,c0),e(c0,JBe),e(vf,YBe),e(v,KBe),e(v,Tf),e(Tf,Hz),e(Hz,ZBe),e(Tf,exe),e(Tf,f0),e(f0,oxe),e(Tf,rxe),e(v,txe),e(v,Ff),e(Ff,Uz),e(Uz,axe),e(Ff,nxe),e(Ff,m0),e(m0,sxe),e(Ff,lxe),e(v,ixe),e(v,Cf),e(Cf,Jz),e(Jz,dxe),e(Cf,cxe),e(Cf,g0),e(g0,fxe),e(Cf,mxe),e(v,gxe),e(v,Mf),e(Mf,Yz),e(Yz,hxe),e(Mf,pxe),e(Mf,h0),e(h0,_xe),e(Mf,uxe),e(v,bxe),e(v,Ef),e(Ef,Kz),e(Kz,vxe),e(Ef,Txe),e(Ef,p0),e(p0,Fxe),e(Ef,Cxe),e(v,Mxe),e(v,yf),e(yf,Zz),e(Zz,Exe),e(yf,yxe),e(yf,_0),e(_0,wxe),e(yf,Axe),e(v,Lxe),e(v,wf),e(wf,eV),e(eV,Bxe),e(wf,xxe),e(wf,u0),e(u0,kxe),e(wf,Rxe),e(v,Sxe),e(v,Af),e(Af,oV),e(oV,Pxe),e(Af,$xe),e(Af,b0),e(b0,Ixe),e(Af,jxe),e(v,Nxe),e(v,Lf),e(Lf,rV),e(rV,Dxe),e(Lf,qxe),e(Lf,v0),e(v0,Gxe),e(Lf,Oxe),e(v,Xxe),e(v,Bf),e(Bf,tV),e(tV,zxe),e(Bf,Vxe),e(Bf,T0),e(T0,Wxe),e(Bf,Qxe),e(v,Hxe),e(v,xf),e(xf,aV),e(aV,Uxe),e(xf,Jxe),e(xf,F0),e(F0,Yxe),e(xf,Kxe),e(v,Zxe),e(v,kf),e(kf,nV),e(nV,eke),e(kf,oke),e(kf,C0),e(C0,rke),e(kf,tke),e(v,ake),e(v,Rf),e(Rf,sV),e(sV,nke),e(Rf,ske),e(Rf,M0),e(M0,lke),e(Rf,ike),e(v,dke),e(v,Sf),e(Sf,lV),e(lV,cke),e(Sf,fke),e(Sf,E0),e(E0,mke),e(Sf,gke),e(v,hke),e(v,Pf),e(Pf,iV),e(iV,pke),e(Pf,_ke),e(Pf,y0),e(y0,uke),e(Pf,bke),e(v,vke),e(v,$f),e($f,dV),e(dV,Tke),e($f,Fke),e($f,w0),e(w0,Cke),e($f,Mke),e(v,Eke),e(v,If),e(If,cV),e(cV,yke),e(If,wke),e(If,A0),e(A0,Ake),e(If,Lke),e(v,Bke),e(v,jf),e(jf,fV),e(fV,xke),e(jf,kke),e(jf,L0),e(L0,Rke),e(jf,Ske),e(v,Pke),e(v,Nf),e(Nf,mV),e(mV,$ke),e(Nf,Ike),e(Nf,B0),e(B0,jke),e(Nf,Nke),e(v,Dke),e(v,Df),e(Df,gV),e(gV,qke),e(Df,Gke),e(Df,x0),e(x0,Oke),e(Df,Xke),e(v,zke),e(v,qf),e(qf,hV),e(hV,Vke),e(qf,Wke),e(qf,k0),e(k0,Qke),e(qf,Hke),e(v,Uke),e(v,Gf),e(Gf,pV),e(pV,Jke),e(Gf,Yke),e(Gf,R0),e(R0,Kke),e(Gf,Zke),e(v,eRe),e(v,Of),e(Of,_V),e(_V,oRe),e(Of,rRe),e(Of,S0),e(S0,tRe),e(Of,aRe),e(v,nRe),e(v,Xf),e(Xf,uV),e(uV,sRe),e(Xf,lRe),e(Xf,P0),e(P0,iRe),e(Xf,dRe),e(v,cRe),e(v,zf),e(zf,bV),e(bV,fRe),e(zf,mRe),e(zf,$0),e($0,gRe),e(zf,hRe),e(v,pRe),e(v,Vf),e(Vf,vV),e(vV,_Re),e(Vf,uRe),e(Vf,I0),e(I0,bRe),e(Vf,vRe),e(v,TRe),e(v,Wf),e(Wf,TV),e(TV,FRe),e(Wf,CRe),e(Wf,j0),e(j0,MRe),e(Wf,ERe),e(v,yRe),e(v,Qf),e(Qf,FV),e(FV,wRe),e(Qf,ARe),e(Qf,N0),e(N0,LRe),e(Qf,BRe),e(v,xRe),e(v,Hf),e(Hf,CV),e(CV,kRe),e(Hf,RRe),e(Hf,D0),e(D0,SRe),e(Hf,PRe),e(v,$Re),e(v,Uf),e(Uf,MV),e(MV,IRe),e(Uf,jRe),e(Uf,q0),e(q0,NRe),e(Uf,DRe),e(v,qRe),e(v,Jf),e(Jf,EV),e(EV,GRe),e(Jf,ORe),e(Jf,G0),e(G0,XRe),e(Jf,zRe),e(v,VRe),e(v,Yf),e(Yf,yV),e(yV,WRe),e(Yf,QRe),e(Yf,O0),e(O0,HRe),e(Yf,URe),e(v,JRe),e(v,Kf),e(Kf,wV),e(wV,YRe),e(Kf,KRe),e(Kf,X0),e(X0,ZRe),e(Kf,eSe),e(v,oSe),e(v,Zf),e(Zf,AV),e(AV,rSe),e(Zf,tSe),e(Zf,z0),e(z0,aSe),e(Zf,nSe),e(v,sSe),e(v,em),e(em,LV),e(LV,lSe),e(em,iSe),e(em,V0),e(V0,dSe),e(em,cSe),e(v,fSe),e(v,om),e(om,BV),e(BV,mSe),e(om,gSe),e(om,W0),e(W0,hSe),e(om,pSe),e(v,_Se),e(v,rm),e(rm,xV),e(xV,uSe),e(rm,bSe),e(rm,Q0),e(Q0,vSe),e(rm,TSe),e(v,FSe),e(v,tm),e(tm,kV),e(kV,CSe),e(tm,MSe),e(tm,H0),e(H0,ESe),e(tm,ySe),e(v,wSe),e(v,am),e(am,RV),e(RV,ASe),e(am,LSe),e(am,U0),e(U0,BSe),e(am,xSe),e(v,kSe),e(v,nm),e(nm,SV),e(SV,RSe),e(nm,SSe),e(nm,J0),e(J0,PSe),e(nm,$Se),e(v,ISe),e(v,sm),e(sm,PV),e(PV,jSe),e(sm,NSe),e(sm,Y0),e(Y0,DSe),e(sm,qSe),e(v,GSe),e(v,lm),e(lm,$V),e($V,OSe),e(lm,XSe),e(lm,K0),e(K0,zSe),e(lm,VSe),e(v,WSe),e(v,im),e(im,IV),e(IV,QSe),e(im,HSe),e(im,Z0),e(Z0,USe),e(im,JSe),e(v,YSe),e(v,dm),e(dm,jV),e(jV,KSe),e(dm,ZSe),e(dm,eL),e(eL,ePe),e(dm,oPe),e(v,rPe),e(v,cm),e(cm,NV),e(NV,tPe),e(cm,aPe),e(cm,oL),e(oL,nPe),e(cm,sPe),e(v,lPe),e(v,fm),e(fm,DV),e(DV,iPe),e(fm,dPe),e(fm,rL),e(rL,cPe),e(fm,fPe),e(v,mPe),e(v,mm),e(mm,qV),e(qV,gPe),e(mm,hPe),e(mm,tL),e(tL,pPe),e(mm,_Pe),e(v,uPe),e(v,gm),e(gm,GV),e(GV,bPe),e(gm,vPe),e(gm,aL),e(aL,TPe),e(gm,FPe),e(v,CPe),e(v,hm),e(hm,OV),e(OV,MPe),e(hm,EPe),e(hm,nL),e(nL,yPe),e(hm,wPe),e(v,APe),e(v,pm),e(pm,XV),e(XV,LPe),e(pm,BPe),e(pm,sL),e(sL,xPe),e(pm,kPe),e(v,RPe),e(v,_m),e(_m,zV),e(zV,SPe),e(_m,PPe),e(_m,lL),e(lL,$Pe),e(_m,IPe),e(v,jPe),e(v,um),e(um,VV),e(VV,NPe),e(um,DPe),e(um,iL),e(iL,qPe),e(um,GPe),e(v,OPe),e(v,bm),e(bm,WV),e(WV,XPe),e(bm,zPe),e(bm,dL),e(dL,VPe),e(bm,WPe),e(v,QPe),e(v,vm),e(vm,QV),e(QV,HPe),e(vm,UPe),e(vm,cL),e(cL,JPe),e(vm,YPe),e(v,KPe),e(v,Tm),e(Tm,HV),e(HV,ZPe),e(Tm,e$e),e(Tm,fL),e(fL,o$e),e(Tm,r$e),e(v,t$e),e(v,Fm),e(Fm,UV),e(UV,a$e),e(Fm,n$e),e(Fm,mL),e(mL,s$e),e(Fm,l$e),e(v,i$e),e(v,Cm),e(Cm,JV),e(JV,d$e),e(Cm,c$e),e(Cm,gL),e(gL,f$e),e(Cm,m$e),e(v,g$e),e(v,Mm),e(Mm,YV),e(YV,h$e),e(Mm,p$e),e(Mm,hL),e(hL,_$e),e(Mm,u$e),e(v,b$e),e(v,Em),e(Em,KV),e(KV,v$e),e(Em,T$e),e(Em,pL),e(pL,F$e),e(Em,C$e),e(v,M$e),e(v,ym),e(ym,ZV),e(ZV,E$e),e(ym,y$e),e(ym,_L),e(_L,w$e),e(ym,A$e),e(v,L$e),e(v,wm),e(wm,eW),e(eW,B$e),e(wm,x$e),e(wm,uL),e(uL,k$e),e(wm,R$e),e(v,S$e),e(v,Am),e(Am,oW),e(oW,P$e),e(Am,$$e),e(Am,bL),e(bL,I$e),e(Am,j$e),e(v,N$e),e(v,Lm),e(Lm,rW),e(rW,D$e),e(Lm,q$e),e(Lm,vL),e(vL,G$e),e(Lm,O$e),e(v,X$e),e(v,Bm),e(Bm,tW),e(tW,z$e),e(Bm,V$e),e(Bm,TL),e(TL,W$e),e(Bm,Q$e),e(v,H$e),e(v,xm),e(xm,aW),e(aW,U$e),e(xm,J$e),e(xm,FL),e(FL,Y$e),e(xm,K$e),e(v,Z$e),e(v,km),e(km,nW),e(nW,eIe),e(km,oIe),e(km,CL),e(CL,rIe),e(km,tIe),e(v,aIe),e(v,Rm),e(Rm,sW),e(sW,nIe),e(Rm,sIe),e(Rm,ML),e(ML,lIe),e(Rm,iIe),e(v,dIe),e(v,Sm),e(Sm,lW),e(lW,cIe),e(Sm,fIe),e(Sm,EL),e(EL,mIe),e(Sm,gIe),e(v,hIe),e(v,Pm),e(Pm,iW),e(iW,pIe),e(Pm,_Ie),e(Pm,yL),e(yL,uIe),e(Pm,bIe),e(v,vIe),e(v,$m),e($m,dW),e(dW,TIe),e($m,FIe),e($m,wL),e(wL,CIe),e($m,MIe),e(v,EIe),e(v,Im),e(Im,cW),e(cW,yIe),e(Im,wIe),e(Im,AL),e(AL,AIe),e(Im,LIe),e(v,BIe),e(v,jm),e(jm,fW),e(fW,xIe),e(jm,kIe),e(jm,LL),e(LL,RIe),e(jm,SIe),e(v,PIe),e(v,Nm),e(Nm,mW),e(mW,$Ie),e(Nm,IIe),e(Nm,BL),e(BL,jIe),e(Nm,NIe),e(v,DIe),e(v,Dm),e(Dm,gW),e(gW,qIe),e(Dm,GIe),e(Dm,xL),e(xL,OIe),e(Dm,XIe),e(v,zIe),e(v,qm),e(qm,hW),e(hW,VIe),e(qm,WIe),e(qm,kL),e(kL,QIe),e(qm,HIe),e(v,UIe),e(v,Gm),e(Gm,pW),e(pW,JIe),e(Gm,YIe),e(Gm,RL),e(RL,KIe),e(Gm,ZIe),e(v,eje),e(v,Om),e(Om,_W),e(_W,oje),e(Om,rje),e(Om,SL),e(SL,tje),e(Om,aje),e(v,nje),e(v,Xm),e(Xm,uW),e(uW,sje),e(Xm,lje),e(Xm,PL),e(PL,ije),e(Xm,dje),e(v,cje),e(v,zm),e(zm,bW),e(bW,fje),e(zm,mje),e(zm,$L),e($L,gje),e(zm,hje),e(v,pje),e(v,Vm),e(Vm,vW),e(vW,_je),e(Vm,uje),e(Vm,IL),e(IL,bje),e(Vm,vje),e(v,Tje),e(v,Wm),e(Wm,TW),e(TW,Fje),e(Wm,Cje),e(Wm,jL),e(jL,Mje),e(Wm,Eje),e(v,yje),e(v,Qm),e(Qm,FW),e(FW,wje),e(Qm,Aje),e(Qm,NL),e(NL,Lje),e(Qm,Bje),e(v,xje),e(v,Hm),e(Hm,CW),e(CW,kje),e(Hm,Rje),e(Hm,DL),e(DL,Sje),e(Hm,Pje),e(v,$je),e(v,Um),e(Um,MW),e(MW,Ije),e(Um,jje),e(Um,qL),e(qL,Nje),e(Um,Dje),e(v,qje),e(v,Jm),e(Jm,EW),e(EW,Gje),e(Jm,Oje),e(Jm,GL),e(GL,Xje),e(Jm,zje),e(v,Vje),e(v,Ym),e(Ym,yW),e(yW,Wje),e(Ym,Qje),e(Ym,OL),e(OL,Hje),e(Ym,Uje),e(v,Jje),e(v,Km),e(Km,wW),e(wW,Yje),e(Km,Kje),e(Km,XL),e(XL,Zje),e(Km,eNe),e(v,oNe),e(v,Zm),e(Zm,AW),e(AW,rNe),e(Zm,tNe),e(Zm,zL),e(zL,aNe),e(Zm,nNe),e(io,sNe),e(io,LW),e(LW,lNe),e(io,iNe),g(NC,io,null),e(qo,dNe),e(qo,eg),g(DC,eg,null),e(eg,cNe),e(eg,BW),e(BW,fNe),b(d,CAe,u),b(d,Li,u),e(Li,og),e(og,xW),g(qC,xW,null),e(Li,mNe),e(Li,kW),e(kW,gNe),b(d,MAe,u),b(d,Go,u),g(GC,Go,null),e(Go,hNe),e(Go,OC),e(OC,pNe),e(OC,VL),e(VL,_Ne),e(OC,uNe),e(Go,bNe),e(Go,XC),e(XC,vNe),e(XC,RW),e(RW,TNe),e(XC,FNe),e(Go,CNe),e(Go,co),g(zC,co,null),e(co,MNe),e(co,SW),e(SW,ENe),e(co,yNe),e(co,Sa),e(Sa,wNe),e(Sa,PW),e(PW,ANe),e(Sa,LNe),e(Sa,$W),e($W,BNe),e(Sa,xNe),e(Sa,IW),e(IW,kNe),e(Sa,RNe),e(co,SNe),e(co,M),e(M,Pn),e(Pn,jW),e(jW,PNe),e(Pn,$Ne),e(Pn,WL),e(WL,INe),e(Pn,jNe),e(Pn,QL),e(QL,NNe),e(Pn,DNe),e(M,qNe),e(M,$n),e($n,NW),e(NW,GNe),e($n,ONe),e($n,HL),e(HL,XNe),e($n,zNe),e($n,UL),e(UL,VNe),e($n,WNe),e(M,QNe),e(M,In),e(In,DW),e(DW,HNe),e(In,UNe),e(In,JL),e(JL,JNe),e(In,YNe),e(In,YL),e(YL,KNe),e(In,ZNe),e(M,eDe),e(M,rg),e(rg,qW),e(qW,oDe),e(rg,rDe),e(rg,KL),e(KL,tDe),e(rg,aDe),e(M,nDe),e(M,jn),e(jn,GW),e(GW,sDe),e(jn,lDe),e(jn,ZL),e(ZL,iDe),e(jn,dDe),e(jn,e9),e(e9,cDe),e(jn,fDe),e(M,mDe),e(M,tg),e(tg,OW),e(OW,gDe),e(tg,hDe),e(tg,o9),e(o9,pDe),e(tg,_De),e(M,uDe),e(M,ag),e(ag,XW),e(XW,bDe),e(ag,vDe),e(ag,r9),e(r9,TDe),e(ag,FDe),e(M,CDe),e(M,ng),e(ng,zW),e(zW,MDe),e(ng,EDe),e(ng,t9),e(t9,yDe),e(ng,wDe),e(M,ADe),e(M,Nn),e(Nn,VW),e(VW,LDe),e(Nn,BDe),e(Nn,a9),e(a9,xDe),e(Nn,kDe),e(Nn,n9),e(n9,RDe),e(Nn,SDe),e(M,PDe),e(M,Dn),e(Dn,WW),e(WW,$De),e(Dn,IDe),e(Dn,s9),e(s9,jDe),e(Dn,NDe),e(Dn,l9),e(l9,DDe),e(Dn,qDe),e(M,GDe),e(M,qn),e(qn,QW),e(QW,ODe),e(qn,XDe),e(qn,i9),e(i9,zDe),e(qn,VDe),e(qn,d9),e(d9,WDe),e(qn,QDe),e(M,HDe),e(M,sg),e(sg,HW),e(HW,UDe),e(sg,JDe),e(sg,c9),e(c9,YDe),e(sg,KDe),e(M,ZDe),e(M,lg),e(lg,UW),e(UW,eqe),e(lg,oqe),e(lg,f9),e(f9,rqe),e(lg,tqe),e(M,aqe),e(M,Gn),e(Gn,JW),e(JW,nqe),e(Gn,sqe),e(Gn,m9),e(m9,lqe),e(Gn,iqe),e(Gn,g9),e(g9,dqe),e(Gn,cqe),e(M,fqe),e(M,ig),e(ig,YW),e(YW,mqe),e(ig,gqe),e(ig,h9),e(h9,hqe),e(ig,pqe),e(M,_qe),e(M,On),e(On,KW),e(KW,uqe),e(On,bqe),e(On,p9),e(p9,vqe),e(On,Tqe),e(On,_9),e(_9,Fqe),e(On,Cqe),e(M,Mqe),e(M,Xn),e(Xn,ZW),e(ZW,Eqe),e(Xn,yqe),e(Xn,u9),e(u9,wqe),e(Xn,Aqe),e(Xn,b9),e(b9,Lqe),e(Xn,Bqe),e(M,xqe),e(M,zn),e(zn,eQ),e(eQ,kqe),e(zn,Rqe),e(zn,v9),e(v9,Sqe),e(zn,Pqe),e(zn,oQ),e(oQ,$qe),e(zn,Iqe),e(M,jqe),e(M,dg),e(dg,rQ),e(rQ,Nqe),e(dg,Dqe),e(dg,T9),e(T9,qqe),e(dg,Gqe),e(M,Oqe),e(M,Vn),e(Vn,tQ),e(tQ,Xqe),e(Vn,zqe),e(Vn,F9),e(F9,Vqe),e(Vn,Wqe),e(Vn,C9),e(C9,Qqe),e(Vn,Hqe),e(M,Uqe),e(M,cg),e(cg,aQ),e(aQ,Jqe),e(cg,Yqe),e(cg,M9),e(M9,Kqe),e(cg,Zqe),e(M,eGe),e(M,Wn),e(Wn,nQ),e(nQ,oGe),e(Wn,rGe),e(Wn,E9),e(E9,tGe),e(Wn,aGe),e(Wn,y9),e(y9,nGe),e(Wn,sGe),e(M,lGe),e(M,Qn),e(Qn,sQ),e(sQ,iGe),e(Qn,dGe),e(Qn,w9),e(w9,cGe),e(Qn,fGe),e(Qn,A9),e(A9,mGe),e(Qn,gGe),e(M,hGe),e(M,Hn),e(Hn,lQ),e(lQ,pGe),e(Hn,_Ge),e(Hn,L9),e(L9,uGe),e(Hn,bGe),e(Hn,B9),e(B9,vGe),e(Hn,TGe),e(M,FGe),e(M,fg),e(fg,iQ),e(iQ,CGe),e(fg,MGe),e(fg,x9),e(x9,EGe),e(fg,yGe),e(M,wGe),e(M,Un),e(Un,dQ),e(dQ,AGe),e(Un,LGe),e(Un,k9),e(k9,BGe),e(Un,xGe),e(Un,R9),e(R9,kGe),e(Un,RGe),e(M,SGe),e(M,mg),e(mg,cQ),e(cQ,PGe),e(mg,$Ge),e(mg,S9),e(S9,IGe),e(mg,jGe),e(M,NGe),e(M,Jn),e(Jn,fQ),e(fQ,DGe),e(Jn,qGe),e(Jn,P9),e(P9,GGe),e(Jn,OGe),e(Jn,$9),e($9,XGe),e(Jn,zGe),e(M,VGe),e(M,Yn),e(Yn,mQ),e(mQ,WGe),e(Yn,QGe),e(Yn,I9),e(I9,HGe),e(Yn,UGe),e(Yn,j9),e(j9,JGe),e(Yn,YGe),e(M,KGe),e(M,Kn),e(Kn,gQ),e(gQ,ZGe),e(Kn,eOe),e(Kn,N9),e(N9,oOe),e(Kn,rOe),e(Kn,D9),e(D9,tOe),e(Kn,aOe),e(M,nOe),e(M,Zn),e(Zn,hQ),e(hQ,sOe),e(Zn,lOe),e(Zn,q9),e(q9,iOe),e(Zn,dOe),e(Zn,G9),e(G9,cOe),e(Zn,fOe),e(M,mOe),e(M,gg),e(gg,pQ),e(pQ,gOe),e(gg,hOe),e(gg,O9),e(O9,pOe),e(gg,_Oe),e(M,uOe),e(M,es),e(es,_Q),e(_Q,bOe),e(es,vOe),e(es,X9),e(X9,TOe),e(es,FOe),e(es,z9),e(z9,COe),e(es,MOe),e(M,EOe),e(M,os),e(os,uQ),e(uQ,yOe),e(os,wOe),e(os,V9),e(V9,AOe),e(os,LOe),e(os,W9),e(W9,BOe),e(os,xOe),e(M,kOe),e(M,rs),e(rs,bQ),e(bQ,ROe),e(rs,SOe),e(rs,Q9),e(Q9,POe),e(rs,$Oe),e(rs,H9),e(H9,IOe),e(rs,jOe),e(M,NOe),e(M,ts),e(ts,vQ),e(vQ,DOe),e(ts,qOe),e(ts,U9),e(U9,GOe),e(ts,OOe),e(ts,J9),e(J9,XOe),e(ts,zOe),e(M,VOe),e(M,as),e(as,TQ),e(TQ,WOe),e(as,QOe),e(as,Y9),e(Y9,HOe),e(as,UOe),e(as,K9),e(K9,JOe),e(as,YOe),e(M,KOe),e(M,ns),e(ns,FQ),e(FQ,ZOe),e(ns,eXe),e(ns,Z9),e(Z9,oXe),e(ns,rXe),e(ns,eB),e(eB,tXe),e(ns,aXe),e(M,nXe),e(M,hg),e(hg,CQ),e(CQ,sXe),e(hg,lXe),e(hg,oB),e(oB,iXe),e(hg,dXe),e(M,cXe),e(M,ss),e(ss,MQ),e(MQ,fXe),e(ss,mXe),e(ss,rB),e(rB,gXe),e(ss,hXe),e(ss,tB),e(tB,pXe),e(ss,_Xe),e(M,uXe),e(M,pg),e(pg,EQ),e(EQ,bXe),e(pg,vXe),e(pg,aB),e(aB,TXe),e(pg,FXe),e(M,CXe),e(M,_g),e(_g,yQ),e(yQ,MXe),e(_g,EXe),e(_g,nB),e(nB,yXe),e(_g,wXe),e(M,AXe),e(M,ls),e(ls,wQ),e(wQ,LXe),e(ls,BXe),e(ls,sB),e(sB,xXe),e(ls,kXe),e(ls,lB),e(lB,RXe),e(ls,SXe),e(M,PXe),e(M,is),e(is,AQ),e(AQ,$Xe),e(is,IXe),e(is,iB),e(iB,jXe),e(is,NXe),e(is,dB),e(dB,DXe),e(is,qXe),e(M,GXe),e(M,ug),e(ug,LQ),e(LQ,OXe),e(ug,XXe),e(ug,cB),e(cB,zXe),e(ug,VXe),e(M,WXe),e(M,ds),e(ds,BQ),e(BQ,QXe),e(ds,HXe),e(ds,fB),e(fB,UXe),e(ds,JXe),e(ds,mB),e(mB,YXe),e(ds,KXe),e(M,ZXe),e(M,cs),e(cs,xQ),e(xQ,eze),e(cs,oze),e(cs,gB),e(gB,rze),e(cs,tze),e(cs,hB),e(hB,aze),e(cs,nze),e(M,sze),e(M,fs),e(fs,kQ),e(kQ,lze),e(fs,ize),e(fs,pB),e(pB,dze),e(fs,cze),e(fs,_B),e(_B,fze),e(fs,mze),e(M,gze),e(M,ms),e(ms,RQ),e(RQ,hze),e(ms,pze),e(ms,uB),e(uB,_ze),e(ms,uze),e(ms,bB),e(bB,bze),e(ms,vze),e(M,Tze),e(M,gs),e(gs,SQ),e(SQ,Fze),e(gs,Cze),e(gs,vB),e(vB,Mze),e(gs,Eze),e(gs,TB),e(TB,yze),e(gs,wze),e(M,Aze),e(M,bg),e(bg,PQ),e(PQ,Lze),e(bg,Bze),e(bg,FB),e(FB,xze),e(bg,kze),e(M,Rze),e(M,vg),e(vg,$Q),e($Q,Sze),e(vg,Pze),e(vg,CB),e(CB,$ze),e(vg,Ize),e(M,jze),e(M,Tg),e(Tg,IQ),e(IQ,Nze),e(Tg,Dze),e(Tg,MB),e(MB,qze),e(Tg,Gze),e(M,Oze),e(M,hs),e(hs,jQ),e(jQ,Xze),e(hs,zze),e(hs,EB),e(EB,Vze),e(hs,Wze),e(hs,yB),e(yB,Qze),e(hs,Hze),e(M,Uze),e(M,Fg),e(Fg,NQ),e(NQ,Jze),e(Fg,Yze),e(Fg,wB),e(wB,Kze),e(Fg,Zze),e(M,eVe),e(M,ps),e(ps,DQ),e(DQ,oVe),e(ps,rVe),e(ps,AB),e(AB,tVe),e(ps,aVe),e(ps,LB),e(LB,nVe),e(ps,sVe),e(M,lVe),e(M,_s),e(_s,qQ),e(qQ,iVe),e(_s,dVe),e(_s,BB),e(BB,cVe),e(_s,fVe),e(_s,xB),e(xB,mVe),e(_s,gVe),e(M,hVe),e(M,us),e(us,GQ),e(GQ,pVe),e(us,_Ve),e(us,kB),e(kB,uVe),e(us,bVe),e(us,RB),e(RB,vVe),e(us,TVe),e(M,FVe),e(M,bs),e(bs,OQ),e(OQ,CVe),e(bs,MVe),e(bs,SB),e(SB,EVe),e(bs,yVe),e(bs,PB),e(PB,wVe),e(bs,AVe),e(M,LVe),e(M,vs),e(vs,XQ),e(XQ,BVe),e(vs,xVe),e(vs,$B),e($B,kVe),e(vs,RVe),e(vs,IB),e(IB,SVe),e(vs,PVe),e(M,$Ve),e(M,Cg),e(Cg,zQ),e(zQ,IVe),e(Cg,jVe),e(Cg,jB),e(jB,NVe),e(Cg,DVe),e(M,qVe),e(M,Mg),e(Mg,VQ),e(VQ,GVe),e(Mg,OVe),e(Mg,NB),e(NB,XVe),e(Mg,zVe),e(M,VVe),e(M,Ts),e(Ts,WQ),e(WQ,WVe),e(Ts,QVe),e(Ts,DB),e(DB,HVe),e(Ts,UVe),e(Ts,qB),e(qB,JVe),e(Ts,YVe),e(M,KVe),e(M,Fs),e(Fs,QQ),e(QQ,ZVe),e(Fs,eWe),e(Fs,GB),e(GB,oWe),e(Fs,rWe),e(Fs,OB),e(OB,tWe),e(Fs,aWe),e(M,nWe),e(M,Cs),e(Cs,HQ),e(HQ,sWe),e(Cs,lWe),e(Cs,XB),e(XB,iWe),e(Cs,dWe),e(Cs,zB),e(zB,cWe),e(Cs,fWe),e(M,mWe),e(M,Eg),e(Eg,UQ),e(UQ,gWe),e(Eg,hWe),e(Eg,VB),e(VB,pWe),e(Eg,_We),e(M,uWe),e(M,yg),e(yg,JQ),e(JQ,bWe),e(yg,vWe),e(yg,WB),e(WB,TWe),e(yg,FWe),e(M,CWe),e(M,wg),e(wg,YQ),e(YQ,MWe),e(wg,EWe),e(wg,QB),e(QB,yWe),e(wg,wWe),e(M,AWe),e(M,Ag),e(Ag,KQ),e(KQ,LWe),e(Ag,BWe),e(Ag,HB),e(HB,xWe),e(Ag,kWe),e(M,RWe),e(M,Ms),e(Ms,ZQ),e(ZQ,SWe),e(Ms,PWe),e(Ms,UB),e(UB,$We),e(Ms,IWe),e(Ms,JB),e(JB,jWe),e(Ms,NWe),e(M,DWe),e(M,Lg),e(Lg,eH),e(eH,qWe),e(Lg,GWe),e(Lg,YB),e(YB,OWe),e(Lg,XWe),e(M,zWe),e(M,Bg),e(Bg,oH),e(oH,VWe),e(Bg,WWe),e(Bg,KB),e(KB,QWe),e(Bg,HWe),e(M,UWe),e(M,Es),e(Es,rH),e(rH,JWe),e(Es,YWe),e(Es,ZB),e(ZB,KWe),e(Es,ZWe),e(Es,ex),e(ex,eQe),e(Es,oQe),e(M,rQe),e(M,ys),e(ys,tH),e(tH,tQe),e(ys,aQe),e(ys,ox),e(ox,nQe),e(ys,sQe),e(ys,rx),e(rx,lQe),e(ys,iQe),e(co,dQe),e(co,aH),e(aH,cQe),e(co,fQe),g(VC,co,null),e(Go,mQe),e(Go,xg),g(WC,xg,null),e(xg,gQe),e(xg,nH),e(nH,hQe),b(d,EAe,u),b(d,Bi,u),e(Bi,kg),e(kg,sH),g(QC,sH,null),e(Bi,pQe),e(Bi,lH),e(lH,_Qe),b(d,yAe,u),b(d,Oo,u),g(HC,Oo,null),e(Oo,uQe),e(Oo,UC),e(UC,bQe),e(UC,tx),e(tx,vQe),e(UC,TQe),e(Oo,FQe),e(Oo,JC),e(JC,CQe),e(JC,iH),e(iH,MQe),e(JC,EQe),e(Oo,yQe),e(Oo,Le),g(YC,Le,null),e(Le,wQe),e(Le,dH),e(dH,AQe),e(Le,LQe),e(Le,Pa),e(Pa,BQe),e(Pa,cH),e(cH,xQe),e(Pa,kQe),e(Pa,fH),e(fH,RQe),e(Pa,SQe),e(Pa,mH),e(mH,PQe),e(Pa,$Qe),e(Le,IQe),e(Le,se),e(se,Rg),e(Rg,gH),e(gH,jQe),e(Rg,NQe),e(Rg,ax),e(ax,DQe),e(Rg,qQe),e(se,GQe),e(se,Sg),e(Sg,hH),e(hH,OQe),e(Sg,XQe),e(Sg,nx),e(nx,zQe),e(Sg,VQe),e(se,WQe),e(se,Pg),e(Pg,pH),e(pH,QQe),e(Pg,HQe),e(Pg,sx),e(sx,UQe),e(Pg,JQe),e(se,YQe),e(se,$g),e($g,_H),e(_H,KQe),e($g,ZQe),e($g,lx),e(lx,eHe),e($g,oHe),e(se,rHe),e(se,Ig),e(Ig,uH),e(uH,tHe),e(Ig,aHe),e(Ig,ix),e(ix,nHe),e(Ig,sHe),e(se,lHe),e(se,jg),e(jg,bH),e(bH,iHe),e(jg,dHe),e(jg,dx),e(dx,cHe),e(jg,fHe),e(se,mHe),e(se,Ng),e(Ng,vH),e(vH,gHe),e(Ng,hHe),e(Ng,cx),e(cx,pHe),e(Ng,_He),e(se,uHe),e(se,Dg),e(Dg,TH),e(TH,bHe),e(Dg,vHe),e(Dg,fx),e(fx,THe),e(Dg,FHe),e(se,CHe),e(se,qg),e(qg,FH),e(FH,MHe),e(qg,EHe),e(qg,mx),e(mx,yHe),e(qg,wHe),e(se,AHe),e(se,Gg),e(Gg,CH),e(CH,LHe),e(Gg,BHe),e(Gg,gx),e(gx,xHe),e(Gg,kHe),e(se,RHe),e(se,Og),e(Og,MH),e(MH,SHe),e(Og,PHe),e(Og,hx),e(hx,$He),e(Og,IHe),e(se,jHe),e(se,Xg),e(Xg,EH),e(EH,NHe),e(Xg,DHe),e(Xg,px),e(px,qHe),e(Xg,GHe),e(se,OHe),e(se,zg),e(zg,yH),e(yH,XHe),e(zg,zHe),e(zg,_x),e(_x,VHe),e(zg,WHe),e(se,QHe),e(se,Vg),e(Vg,wH),e(wH,HHe),e(Vg,UHe),e(Vg,ux),e(ux,JHe),e(Vg,YHe),e(Le,KHe),g(Wg,Le,null),e(Le,ZHe),e(Le,AH),e(AH,eUe),e(Le,oUe),g(KC,Le,null),e(Oo,rUe),e(Oo,Qg),g(ZC,Qg,null),e(Qg,tUe),e(Qg,LH),e(LH,aUe),b(d,wAe,u),b(d,xi,u),e(xi,Hg),e(Hg,BH),g(e4,BH,null),e(xi,nUe),e(xi,xH),e(xH,sUe),b(d,AAe,u),b(d,ea,u),g(o4,ea,null),e(ea,lUe),e(ea,r4),e(r4,iUe),e(r4,bx),e(bx,dUe),e(r4,cUe),e(ea,fUe),e(ea,t4),e(t4,mUe),e(t4,kH),e(kH,gUe),e(t4,hUe),e(ea,pUe),e(ea,Be),g(a4,Be,null),e(Be,_Ue),e(Be,RH),e(RH,uUe),e(Be,bUe),e(Be,ki),e(ki,vUe),e(ki,SH),e(SH,TUe),e(ki,FUe),e(ki,PH),e(PH,CUe),e(ki,MUe),e(Be,EUe),e(Be,ye),e(ye,Ug),e(Ug,$H),e($H,yUe),e(Ug,wUe),e(Ug,vx),e(vx,AUe),e(Ug,LUe),e(ye,BUe),e(ye,Jg),e(Jg,IH),e(IH,xUe),e(Jg,kUe),e(Jg,Tx),e(Tx,RUe),e(Jg,SUe),e(ye,PUe),e(ye,Yg),e(Yg,jH),e(jH,$Ue),e(Yg,IUe),e(Yg,Fx),e(Fx,jUe),e(Yg,NUe),e(ye,DUe),e(ye,Kg),e(Kg,NH),e(NH,qUe),e(Kg,GUe),e(Kg,Cx),e(Cx,OUe),e(Kg,XUe),e(ye,zUe),e(ye,Zg),e(Zg,DH),e(DH,VUe),e(Zg,WUe),e(Zg,Mx),e(Mx,QUe),e(Zg,HUe),e(ye,UUe),e(ye,eh),e(eh,qH),e(qH,JUe),e(eh,YUe),e(eh,Ex),e(Ex,KUe),e(eh,ZUe),e(ye,eJe),e(ye,oh),e(oh,GH),e(GH,oJe),e(oh,rJe),e(oh,yx),e(yx,tJe),e(oh,aJe),e(ye,nJe),e(ye,rh),e(rh,OH),e(OH,sJe),e(rh,lJe),e(rh,wx),e(wx,iJe),e(rh,dJe),e(Be,cJe),g(th,Be,null),e(Be,fJe),e(Be,XH),e(XH,mJe),e(Be,gJe),g(n4,Be,null),b(d,LAe,u),b(d,Ri,u),e(Ri,ah),e(ah,zH),g(s4,zH,null),e(Ri,hJe),e(Ri,VH),e(VH,pJe),b(d,BAe,u),b(d,Xo,u),g(l4,Xo,null),e(Xo,_Je),e(Xo,Si),e(Si,uJe),e(Si,WH),e(WH,bJe),e(Si,vJe),e(Si,QH),e(QH,TJe),e(Si,FJe),e(Xo,CJe),e(Xo,i4),e(i4,MJe),e(i4,HH),e(HH,EJe),e(i4,yJe),e(Xo,wJe),e(Xo,$r),g(d4,$r,null),e($r,AJe),e($r,UH),e(UH,LJe),e($r,BJe),e($r,Pi),e(Pi,xJe),e(Pi,JH),e(JH,kJe),e(Pi,RJe),e(Pi,YH),e(YH,SJe),e(Pi,PJe),e($r,$Je),e($r,KH),e(KH,IJe),e($r,jJe),g(c4,$r,null),e(Xo,NJe),e(Xo,xe),g(f4,xe,null),e(xe,DJe),e(xe,ZH),e(ZH,qJe),e(xe,GJe),e(xe,$a),e($a,OJe),e($a,eU),e(eU,XJe),e($a,zJe),e($a,oU),e(oU,VJe),e($a,WJe),e($a,rU),e(rU,QJe),e($a,HJe),e(xe,UJe),e(xe,F),e(F,nh),e(nh,tU),e(tU,JJe),e(nh,YJe),e(nh,Ax),e(Ax,KJe),e(nh,ZJe),e(F,eYe),e(F,sh),e(sh,aU),e(aU,oYe),e(sh,rYe),e(sh,Lx),e(Lx,tYe),e(sh,aYe),e(F,nYe),e(F,lh),e(lh,nU),e(nU,sYe),e(lh,lYe),e(lh,Bx),e(Bx,iYe),e(lh,dYe),e(F,cYe),e(F,ih),e(ih,sU),e(sU,fYe),e(ih,mYe),e(ih,xx),e(xx,gYe),e(ih,hYe),e(F,pYe),e(F,dh),e(dh,lU),e(lU,_Ye),e(dh,uYe),e(dh,kx),e(kx,bYe),e(dh,vYe),e(F,TYe),e(F,ch),e(ch,iU),e(iU,FYe),e(ch,CYe),e(ch,Rx),e(Rx,MYe),e(ch,EYe),e(F,yYe),e(F,fh),e(fh,dU),e(dU,wYe),e(fh,AYe),e(fh,Sx),e(Sx,LYe),e(fh,BYe),e(F,xYe),e(F,mh),e(mh,cU),e(cU,kYe),e(mh,RYe),e(mh,Px),e(Px,SYe),e(mh,PYe),e(F,$Ye),e(F,gh),e(gh,fU),e(fU,IYe),e(gh,jYe),e(gh,$x),e($x,NYe),e(gh,DYe),e(F,qYe),e(F,hh),e(hh,mU),e(mU,GYe),e(hh,OYe),e(hh,Ix),e(Ix,XYe),e(hh,zYe),e(F,VYe),e(F,ph),e(ph,gU),e(gU,WYe),e(ph,QYe),e(ph,jx),e(jx,HYe),e(ph,UYe),e(F,JYe),e(F,_h),e(_h,hU),e(hU,YYe),e(_h,KYe),e(_h,Nx),e(Nx,ZYe),e(_h,eKe),e(F,oKe),e(F,uh),e(uh,pU),e(pU,rKe),e(uh,tKe),e(uh,Dx),e(Dx,aKe),e(uh,nKe),e(F,sKe),e(F,bh),e(bh,_U),e(_U,lKe),e(bh,iKe),e(bh,qx),e(qx,dKe),e(bh,cKe),e(F,fKe),e(F,vh),e(vh,uU),e(uU,mKe),e(vh,gKe),e(vh,Gx),e(Gx,hKe),e(vh,pKe),e(F,_Ke),e(F,Th),e(Th,bU),e(bU,uKe),e(Th,bKe),e(Th,Ox),e(Ox,vKe),e(Th,TKe),e(F,FKe),e(F,Fh),e(Fh,vU),e(vU,CKe),e(Fh,MKe),e(Fh,Xx),e(Xx,EKe),e(Fh,yKe),e(F,wKe),e(F,Ch),e(Ch,TU),e(TU,AKe),e(Ch,LKe),e(Ch,zx),e(zx,BKe),e(Ch,xKe),e(F,kKe),e(F,Mh),e(Mh,FU),e(FU,RKe),e(Mh,SKe),e(Mh,Vx),e(Vx,PKe),e(Mh,$Ke),e(F,IKe),e(F,Eh),e(Eh,CU),e(CU,jKe),e(Eh,NKe),e(Eh,Wx),e(Wx,DKe),e(Eh,qKe),e(F,GKe),e(F,yh),e(yh,MU),e(MU,OKe),e(yh,XKe),e(yh,Qx),e(Qx,zKe),e(yh,VKe),e(F,WKe),e(F,wh),e(wh,EU),e(EU,QKe),e(wh,HKe),e(wh,Hx),e(Hx,UKe),e(wh,JKe),e(F,YKe),e(F,Ah),e(Ah,yU),e(yU,KKe),e(Ah,ZKe),e(Ah,Ux),e(Ux,eZe),e(Ah,oZe),e(F,rZe),e(F,Lh),e(Lh,wU),e(wU,tZe),e(Lh,aZe),e(Lh,Jx),e(Jx,nZe),e(Lh,sZe),e(F,lZe),e(F,Bh),e(Bh,AU),e(AU,iZe),e(Bh,dZe),e(Bh,Yx),e(Yx,cZe),e(Bh,fZe),e(F,mZe),e(F,ws),e(ws,LU),e(LU,gZe),e(ws,hZe),e(ws,Kx),e(Kx,pZe),e(ws,_Ze),e(ws,Zx),e(Zx,uZe),e(ws,bZe),e(F,vZe),e(F,xh),e(xh,BU),e(BU,TZe),e(xh,FZe),e(xh,ek),e(ek,CZe),e(xh,MZe),e(F,EZe),e(F,kh),e(kh,xU),e(xU,yZe),e(kh,wZe),e(kh,ok),e(ok,AZe),e(kh,LZe),e(F,BZe),e(F,Rh),e(Rh,kU),e(kU,xZe),e(Rh,kZe),e(Rh,rk),e(rk,RZe),e(Rh,SZe),e(F,PZe),e(F,Sh),e(Sh,RU),e(RU,$Ze),e(Sh,IZe),e(Sh,tk),e(tk,jZe),e(Sh,NZe),e(F,DZe),e(F,Ph),e(Ph,SU),e(SU,qZe),e(Ph,GZe),e(Ph,ak),e(ak,OZe),e(Ph,XZe),e(F,zZe),e(F,$h),e($h,PU),e(PU,VZe),e($h,WZe),e($h,nk),e(nk,QZe),e($h,HZe),e(F,UZe),e(F,Ih),e(Ih,$U),e($U,JZe),e(Ih,YZe),e(Ih,sk),e(sk,KZe),e(Ih,ZZe),e(F,eeo),e(F,jh),e(jh,IU),e(IU,oeo),e(jh,reo),e(jh,lk),e(lk,teo),e(jh,aeo),e(F,neo),e(F,Nh),e(Nh,jU),e(jU,seo),e(Nh,leo),e(Nh,ik),e(ik,ieo),e(Nh,deo),e(F,ceo),e(F,Dh),e(Dh,NU),e(NU,feo),e(Dh,meo),e(Dh,dk),e(dk,geo),e(Dh,heo),e(F,peo),e(F,qh),e(qh,DU),e(DU,_eo),e(qh,ueo),e(qh,ck),e(ck,beo),e(qh,veo),e(F,Teo),e(F,Gh),e(Gh,qU),e(qU,Feo),e(Gh,Ceo),e(Gh,fk),e(fk,Meo),e(Gh,Eeo),e(F,yeo),e(F,Oh),e(Oh,GU),e(GU,weo),e(Oh,Aeo),e(Oh,mk),e(mk,Leo),e(Oh,Beo),e(F,xeo),e(F,Xh),e(Xh,OU),e(OU,keo),e(Xh,Reo),e(Xh,gk),e(gk,Seo),e(Xh,Peo),e(F,$eo),e(F,zh),e(zh,XU),e(XU,Ieo),e(zh,jeo),e(zh,hk),e(hk,Neo),e(zh,Deo),e(F,qeo),e(F,Vh),e(Vh,zU),e(zU,Geo),e(Vh,Oeo),e(Vh,pk),e(pk,Xeo),e(Vh,zeo),e(F,Veo),e(F,Wh),e(Wh,VU),e(VU,Weo),e(Wh,Qeo),e(Wh,_k),e(_k,Heo),e(Wh,Ueo),e(F,Jeo),e(F,Qh),e(Qh,WU),e(WU,Yeo),e(Qh,Keo),e(Qh,uk),e(uk,Zeo),e(Qh,eoo),e(F,ooo),e(F,Hh),e(Hh,QU),e(QU,roo),e(Hh,too),e(Hh,bk),e(bk,aoo),e(Hh,noo),e(F,soo),e(F,Uh),e(Uh,HU),e(HU,loo),e(Uh,ioo),e(Uh,vk),e(vk,doo),e(Uh,coo),e(F,foo),e(F,Jh),e(Jh,UU),e(UU,moo),e(Jh,goo),e(Jh,Tk),e(Tk,hoo),e(Jh,poo),e(F,_oo),e(F,Yh),e(Yh,JU),e(JU,uoo),e(Yh,boo),e(Yh,Fk),e(Fk,voo),e(Yh,Too),e(F,Foo),e(F,Kh),e(Kh,YU),e(YU,Coo),e(Kh,Moo),e(Kh,Ck),e(Ck,Eoo),e(Kh,yoo),e(F,woo),e(F,Zh),e(Zh,KU),e(KU,Aoo),e(Zh,Loo),e(Zh,Mk),e(Mk,Boo),e(Zh,xoo),e(F,koo),e(F,ep),e(ep,ZU),e(ZU,Roo),e(ep,Soo),e(ep,Ek),e(Ek,Poo),e(ep,$oo),e(F,Ioo),e(F,op),e(op,eJ),e(eJ,joo),e(op,Noo),e(op,yk),e(yk,Doo),e(op,qoo),e(F,Goo),e(F,rp),e(rp,oJ),e(oJ,Ooo),e(rp,Xoo),e(rp,wk),e(wk,zoo),e(rp,Voo),e(F,Woo),e(F,tp),e(tp,rJ),e(rJ,Qoo),e(tp,Hoo),e(tp,Ak),e(Ak,Uoo),e(tp,Joo),e(F,Yoo),e(F,ap),e(ap,tJ),e(tJ,Koo),e(ap,Zoo),e(ap,Lk),e(Lk,ero),e(ap,oro),e(F,rro),e(F,np),e(np,aJ),e(aJ,tro),e(np,aro),e(np,Bk),e(Bk,nro),e(np,sro),e(F,lro),e(F,sp),e(sp,nJ),e(nJ,iro),e(sp,dro),e(sp,xk),e(xk,cro),e(sp,fro),e(F,mro),e(F,lp),e(lp,sJ),e(sJ,gro),e(lp,hro),e(lp,kk),e(kk,pro),e(lp,_ro),e(F,uro),e(F,ip),e(ip,lJ),e(lJ,bro),e(ip,vro),e(ip,Rk),e(Rk,Tro),e(ip,Fro),e(F,Cro),e(F,dp),e(dp,iJ),e(iJ,Mro),e(dp,Ero),e(dp,Sk),e(Sk,yro),e(dp,wro),e(F,Aro),e(F,cp),e(cp,dJ),e(dJ,Lro),e(cp,Bro),e(cp,Pk),e(Pk,xro),e(cp,kro),e(F,Rro),e(F,fp),e(fp,cJ),e(cJ,Sro),e(fp,Pro),e(fp,$k),e($k,$ro),e(fp,Iro),e(F,jro),e(F,mp),e(mp,fJ),e(fJ,Nro),e(mp,Dro),e(mp,Ik),e(Ik,qro),e(mp,Gro),e(F,Oro),e(F,gp),e(gp,mJ),e(mJ,Xro),e(gp,zro),e(gp,jk),e(jk,Vro),e(gp,Wro),e(F,Qro),e(F,hp),e(hp,gJ),e(gJ,Hro),e(hp,Uro),e(hp,Nk),e(Nk,Jro),e(hp,Yro),e(F,Kro),e(F,pp),e(pp,hJ),e(hJ,Zro),e(pp,eto),e(pp,Dk),e(Dk,oto),e(pp,rto),e(F,tto),e(F,_p),e(_p,pJ),e(pJ,ato),e(_p,nto),e(_p,qk),e(qk,sto),e(_p,lto),e(F,ito),e(F,up),e(up,_J),e(_J,dto),e(up,cto),e(up,Gk),e(Gk,fto),e(up,mto),e(F,gto),e(F,bp),e(bp,uJ),e(uJ,hto),e(bp,pto),e(bp,Ok),e(Ok,_to),e(bp,uto),e(F,bto),e(F,vp),e(vp,bJ),e(bJ,vto),e(vp,Tto),e(vp,Xk),e(Xk,Fto),e(vp,Cto),e(F,Mto),e(F,Tp),e(Tp,vJ),e(vJ,Eto),e(Tp,yto),e(Tp,zk),e(zk,wto),e(Tp,Ato),e(F,Lto),e(F,Fp),e(Fp,TJ),e(TJ,Bto),e(Fp,xto),e(Fp,Vk),e(Vk,kto),e(Fp,Rto),e(F,Sto),e(F,Cp),e(Cp,FJ),e(FJ,Pto),e(Cp,$to),e(Cp,Wk),e(Wk,Ito),e(Cp,jto),e(F,Nto),e(F,Mp),e(Mp,CJ),e(CJ,Dto),e(Mp,qto),e(Mp,Qk),e(Qk,Gto),e(Mp,Oto),e(F,Xto),e(F,Ep),e(Ep,MJ),e(MJ,zto),e(Ep,Vto),e(Ep,Hk),e(Hk,Wto),e(Ep,Qto),e(F,Hto),e(F,yp),e(yp,EJ),e(EJ,Uto),e(yp,Jto),e(yp,Uk),e(Uk,Yto),e(yp,Kto),e(F,Zto),e(F,wp),e(wp,yJ),e(yJ,eao),e(wp,oao),e(wp,Jk),e(Jk,rao),e(wp,tao),e(F,aao),e(F,Ap),e(Ap,wJ),e(wJ,nao),e(Ap,sao),e(Ap,Yk),e(Yk,lao),e(Ap,iao),e(F,dao),e(F,Lp),e(Lp,AJ),e(AJ,cao),e(Lp,fao),e(Lp,Kk),e(Kk,mao),e(Lp,gao),e(F,hao),e(F,Bp),e(Bp,LJ),e(LJ,pao),e(Bp,_ao),e(Bp,Zk),e(Zk,uao),e(Bp,bao),e(F,vao),e(F,xp),e(xp,BJ),e(BJ,Tao),e(xp,Fao),e(xp,eR),e(eR,Cao),e(xp,Mao),e(F,Eao),e(F,kp),e(kp,xJ),e(xJ,yao),e(kp,wao),e(kp,oR),e(oR,Aao),e(kp,Lao),e(xe,Bao),e(xe,Rp),e(Rp,xao),e(Rp,kJ),e(kJ,kao),e(Rp,Rao),e(Rp,RJ),e(RJ,Sao),e(xe,Pao),e(xe,SJ),e(SJ,$ao),e(xe,Iao),g(m4,xe,null),b(d,xAe,u),b(d,$i,u),e($i,Sp),e(Sp,PJ),g(g4,PJ,null),e($i,jao),e($i,$J),e($J,Nao),b(d,kAe,u),b(d,zo,u),g(h4,zo,null),e(zo,Dao),e(zo,Ii),e(Ii,qao),e(Ii,IJ),e(IJ,Gao),e(Ii,Oao),e(Ii,jJ),e(jJ,Xao),e(Ii,zao),e(zo,Vao),e(zo,p4),e(p4,Wao),e(p4,NJ),e(NJ,Qao),e(p4,Hao),e(zo,Uao),e(zo,Ir),g(_4,Ir,null),e(Ir,Jao),e(Ir,DJ),e(DJ,Yao),e(Ir,Kao),e(Ir,ji),e(ji,Zao),e(ji,qJ),e(qJ,eno),e(ji,ono),e(ji,GJ),e(GJ,rno),e(ji,tno),e(Ir,ano),e(Ir,OJ),e(OJ,nno),e(Ir,sno),g(u4,Ir,null),e(zo,lno),e(zo,ke),g(b4,ke,null),e(ke,ino),e(ke,XJ),e(XJ,dno),e(ke,cno),e(ke,Ia),e(Ia,fno),e(Ia,zJ),e(zJ,mno),e(Ia,gno),e(Ia,VJ),e(VJ,hno),e(Ia,pno),e(Ia,WJ),e(WJ,_no),e(Ia,uno),e(ke,bno),e(ke,k),e(k,Pp),e(Pp,QJ),e(QJ,vno),e(Pp,Tno),e(Pp,rR),e(rR,Fno),e(Pp,Cno),e(k,Mno),e(k,$p),e($p,HJ),e(HJ,Eno),e($p,yno),e($p,tR),e(tR,wno),e($p,Ano),e(k,Lno),e(k,Ip),e(Ip,UJ),e(UJ,Bno),e(Ip,xno),e(Ip,aR),e(aR,kno),e(Ip,Rno),e(k,Sno),e(k,jp),e(jp,JJ),e(JJ,Pno),e(jp,$no),e(jp,nR),e(nR,Ino),e(jp,jno),e(k,Nno),e(k,Np),e(Np,YJ),e(YJ,Dno),e(Np,qno),e(Np,sR),e(sR,Gno),e(Np,Ono),e(k,Xno),e(k,Dp),e(Dp,KJ),e(KJ,zno),e(Dp,Vno),e(Dp,lR),e(lR,Wno),e(Dp,Qno),e(k,Hno),e(k,qp),e(qp,ZJ),e(ZJ,Uno),e(qp,Jno),e(qp,iR),e(iR,Yno),e(qp,Kno),e(k,Zno),e(k,Gp),e(Gp,eY),e(eY,eso),e(Gp,oso),e(Gp,dR),e(dR,rso),e(Gp,tso),e(k,aso),e(k,Op),e(Op,oY),e(oY,nso),e(Op,sso),e(Op,cR),e(cR,lso),e(Op,iso),e(k,dso),e(k,Xp),e(Xp,rY),e(rY,cso),e(Xp,fso),e(Xp,fR),e(fR,mso),e(Xp,gso),e(k,hso),e(k,zp),e(zp,tY),e(tY,pso),e(zp,_so),e(zp,mR),e(mR,uso),e(zp,bso),e(k,vso),e(k,Vp),e(Vp,aY),e(aY,Tso),e(Vp,Fso),e(Vp,gR),e(gR,Cso),e(Vp,Mso),e(k,Eso),e(k,Wp),e(Wp,nY),e(nY,yso),e(Wp,wso),e(Wp,hR),e(hR,Aso),e(Wp,Lso),e(k,Bso),e(k,Qp),e(Qp,sY),e(sY,xso),e(Qp,kso),e(Qp,pR),e(pR,Rso),e(Qp,Sso),e(k,Pso),e(k,Hp),e(Hp,lY),e(lY,$so),e(Hp,Iso),e(Hp,_R),e(_R,jso),e(Hp,Nso),e(k,Dso),e(k,Up),e(Up,iY),e(iY,qso),e(Up,Gso),e(Up,uR),e(uR,Oso),e(Up,Xso),e(k,zso),e(k,Jp),e(Jp,dY),e(dY,Vso),e(Jp,Wso),e(Jp,bR),e(bR,Qso),e(Jp,Hso),e(k,Uso),e(k,Yp),e(Yp,cY),e(cY,Jso),e(Yp,Yso),e(Yp,vR),e(vR,Kso),e(Yp,Zso),e(k,elo),e(k,Kp),e(Kp,fY),e(fY,olo),e(Kp,rlo),e(Kp,TR),e(TR,tlo),e(Kp,alo),e(k,nlo),e(k,Zp),e(Zp,mY),e(mY,slo),e(Zp,llo),e(Zp,FR),e(FR,ilo),e(Zp,dlo),e(k,clo),e(k,e_),e(e_,gY),e(gY,flo),e(e_,mlo),e(e_,CR),e(CR,glo),e(e_,hlo),e(k,plo),e(k,o_),e(o_,hY),e(hY,_lo),e(o_,ulo),e(o_,MR),e(MR,blo),e(o_,vlo),e(k,Tlo),e(k,r_),e(r_,pY),e(pY,Flo),e(r_,Clo),e(r_,ER),e(ER,Mlo),e(r_,Elo),e(k,ylo),e(k,t_),e(t_,_Y),e(_Y,wlo),e(t_,Alo),e(t_,yR),e(yR,Llo),e(t_,Blo),e(k,xlo),e(k,a_),e(a_,uY),e(uY,klo),e(a_,Rlo),e(a_,wR),e(wR,Slo),e(a_,Plo),e(k,$lo),e(k,n_),e(n_,bY),e(bY,Ilo),e(n_,jlo),e(n_,AR),e(AR,Nlo),e(n_,Dlo),e(k,qlo),e(k,s_),e(s_,vY),e(vY,Glo),e(s_,Olo),e(s_,LR),e(LR,Xlo),e(s_,zlo),e(k,Vlo),e(k,l_),e(l_,TY),e(TY,Wlo),e(l_,Qlo),e(l_,BR),e(BR,Hlo),e(l_,Ulo),e(k,Jlo),e(k,i_),e(i_,FY),e(FY,Ylo),e(i_,Klo),e(i_,xR),e(xR,Zlo),e(i_,eio),e(k,oio),e(k,d_),e(d_,CY),e(CY,rio),e(d_,tio),e(d_,kR),e(kR,aio),e(d_,nio),e(k,sio),e(k,c_),e(c_,MY),e(MY,lio),e(c_,iio),e(c_,RR),e(RR,dio),e(c_,cio),e(k,fio),e(k,f_),e(f_,EY),e(EY,mio),e(f_,gio),e(f_,SR),e(SR,hio),e(f_,pio),e(k,_io),e(k,m_),e(m_,yY),e(yY,uio),e(m_,bio),e(m_,PR),e(PR,vio),e(m_,Tio),e(k,Fio),e(k,g_),e(g_,wY),e(wY,Cio),e(g_,Mio),e(g_,$R),e($R,Eio),e(g_,yio),e(k,wio),e(k,h_),e(h_,AY),e(AY,Aio),e(h_,Lio),e(h_,IR),e(IR,Bio),e(h_,xio),e(k,kio),e(k,p_),e(p_,LY),e(LY,Rio),e(p_,Sio),e(p_,jR),e(jR,Pio),e(p_,$io),e(k,Iio),e(k,__),e(__,BY),e(BY,jio),e(__,Nio),e(__,NR),e(NR,Dio),e(__,qio),e(k,Gio),e(k,u_),e(u_,xY),e(xY,Oio),e(u_,Xio),e(u_,DR),e(DR,zio),e(u_,Vio),e(ke,Wio),e(ke,b_),e(b_,Qio),e(b_,kY),e(kY,Hio),e(b_,Uio),e(b_,RY),e(RY,Jio),e(ke,Yio),e(ke,SY),e(SY,Kio),e(ke,Zio),g(v4,ke,null),b(d,RAe,u),b(d,Ni,u),e(Ni,v_),e(v_,PY),g(T4,PY,null),e(Ni,edo),e(Ni,$Y),e($Y,odo),b(d,SAe,u),b(d,Vo,u),g(F4,Vo,null),e(Vo,rdo),e(Vo,Di),e(Di,tdo),e(Di,IY),e(IY,ado),e(Di,ndo),e(Di,jY),e(jY,sdo),e(Di,ldo),e(Vo,ido),e(Vo,C4),e(C4,ddo),e(C4,NY),e(NY,cdo),e(C4,fdo),e(Vo,mdo),e(Vo,jr),g(M4,jr,null),e(jr,gdo),e(jr,DY),e(DY,hdo),e(jr,pdo),e(jr,qi),e(qi,_do),e(qi,qY),e(qY,udo),e(qi,bdo),e(qi,GY),e(GY,vdo),e(qi,Tdo),e(jr,Fdo),e(jr,OY),e(OY,Cdo),e(jr,Mdo),g(E4,jr,null),e(Vo,Edo),e(Vo,Re),g(y4,Re,null),e(Re,ydo),e(Re,XY),e(XY,wdo),e(Re,Ado),e(Re,ja),e(ja,Ldo),e(ja,zY),e(zY,Bdo),e(ja,xdo),e(ja,VY),e(VY,kdo),e(ja,Rdo),e(ja,WY),e(WY,Sdo),e(ja,Pdo),e(Re,$do),e(Re,I),e(I,T_),e(T_,QY),e(QY,Ido),e(T_,jdo),e(T_,qR),e(qR,Ndo),e(T_,Ddo),e(I,qdo),e(I,F_),e(F_,HY),e(HY,Gdo),e(F_,Odo),e(F_,GR),e(GR,Xdo),e(F_,zdo),e(I,Vdo),e(I,C_),e(C_,UY),e(UY,Wdo),e(C_,Qdo),e(C_,OR),e(OR,Hdo),e(C_,Udo),e(I,Jdo),e(I,M_),e(M_,JY),e(JY,Ydo),e(M_,Kdo),e(M_,XR),e(XR,Zdo),e(M_,eco),e(I,oco),e(I,E_),e(E_,YY),e(YY,rco),e(E_,tco),e(E_,zR),e(zR,aco),e(E_,nco),e(I,sco),e(I,y_),e(y_,KY),e(KY,lco),e(y_,ico),e(y_,VR),e(VR,dco),e(y_,cco),e(I,fco),e(I,w_),e(w_,ZY),e(ZY,mco),e(w_,gco),e(w_,WR),e(WR,hco),e(w_,pco),e(I,_co),e(I,A_),e(A_,eK),e(eK,uco),e(A_,bco),e(A_,QR),e(QR,vco),e(A_,Tco),e(I,Fco),e(I,L_),e(L_,oK),e(oK,Cco),e(L_,Mco),e(L_,HR),e(HR,Eco),e(L_,yco),e(I,wco),e(I,B_),e(B_,rK),e(rK,Aco),e(B_,Lco),e(B_,UR),e(UR,Bco),e(B_,xco),e(I,kco),e(I,x_),e(x_,tK),e(tK,Rco),e(x_,Sco),e(x_,JR),e(JR,Pco),e(x_,$co),e(I,Ico),e(I,k_),e(k_,aK),e(aK,jco),e(k_,Nco),e(k_,YR),e(YR,Dco),e(k_,qco),e(I,Gco),e(I,R_),e(R_,nK),e(nK,Oco),e(R_,Xco),e(R_,KR),e(KR,zco),e(R_,Vco),e(I,Wco),e(I,S_),e(S_,sK),e(sK,Qco),e(S_,Hco),e(S_,ZR),e(ZR,Uco),e(S_,Jco),e(I,Yco),e(I,P_),e(P_,lK),e(lK,Kco),e(P_,Zco),e(P_,eS),e(eS,efo),e(P_,ofo),e(I,rfo),e(I,$_),e($_,iK),e(iK,tfo),e($_,afo),e($_,oS),e(oS,nfo),e($_,sfo),e(I,lfo),e(I,I_),e(I_,dK),e(dK,ifo),e(I_,dfo),e(I_,rS),e(rS,cfo),e(I_,ffo),e(I,mfo),e(I,j_),e(j_,cK),e(cK,gfo),e(j_,hfo),e(j_,tS),e(tS,pfo),e(j_,_fo),e(I,ufo),e(I,N_),e(N_,fK),e(fK,bfo),e(N_,vfo),e(N_,aS),e(aS,Tfo),e(N_,Ffo),e(I,Cfo),e(I,D_),e(D_,mK),e(mK,Mfo),e(D_,Efo),e(D_,nS),e(nS,yfo),e(D_,wfo),e(I,Afo),e(I,q_),e(q_,gK),e(gK,Lfo),e(q_,Bfo),e(q_,sS),e(sS,xfo),e(q_,kfo),e(I,Rfo),e(I,G_),e(G_,hK),e(hK,Sfo),e(G_,Pfo),e(G_,lS),e(lS,$fo),e(G_,Ifo),e(I,jfo),e(I,O_),e(O_,pK),e(pK,Nfo),e(O_,Dfo),e(O_,iS),e(iS,qfo),e(O_,Gfo),e(I,Ofo),e(I,X_),e(X_,_K),e(_K,Xfo),e(X_,zfo),e(X_,dS),e(dS,Vfo),e(X_,Wfo),e(I,Qfo),e(I,z_),e(z_,uK),e(uK,Hfo),e(z_,Ufo),e(z_,cS),e(cS,Jfo),e(z_,Yfo),e(I,Kfo),e(I,V_),e(V_,bK),e(bK,Zfo),e(V_,emo),e(V_,fS),e(fS,omo),e(V_,rmo),e(I,tmo),e(I,W_),e(W_,vK),e(vK,amo),e(W_,nmo),e(W_,mS),e(mS,smo),e(W_,lmo),e(I,imo),e(I,Q_),e(Q_,TK),e(TK,dmo),e(Q_,cmo),e(Q_,gS),e(gS,fmo),e(Q_,mmo),e(I,gmo),e(I,H_),e(H_,FK),e(FK,hmo),e(H_,pmo),e(H_,hS),e(hS,_mo),e(H_,umo),e(I,bmo),e(I,U_),e(U_,CK),e(CK,vmo),e(U_,Tmo),e(U_,pS),e(pS,Fmo),e(U_,Cmo),e(I,Mmo),e(I,J_),e(J_,MK),e(MK,Emo),e(J_,ymo),e(J_,_S),e(_S,wmo),e(J_,Amo),e(I,Lmo),e(I,Y_),e(Y_,EK),e(EK,Bmo),e(Y_,xmo),e(Y_,uS),e(uS,kmo),e(Y_,Rmo),e(I,Smo),e(I,K_),e(K_,yK),e(yK,Pmo),e(K_,$mo),e(K_,bS),e(bS,Imo),e(K_,jmo),e(Re,Nmo),e(Re,Z_),e(Z_,Dmo),e(Z_,wK),e(wK,qmo),e(Z_,Gmo),e(Z_,AK),e(AK,Omo),e(Re,Xmo),e(Re,LK),e(LK,zmo),e(Re,Vmo),g(w4,Re,null),b(d,PAe,u),b(d,Gi,u),e(Gi,eu),e(eu,BK),g(A4,BK,null),e(Gi,Wmo),e(Gi,xK),e(xK,Qmo),b(d,$Ae,u),b(d,Wo,u),g(L4,Wo,null),e(Wo,Hmo),e(Wo,Oi),e(Oi,Umo),e(Oi,kK),e(kK,Jmo),e(Oi,Ymo),e(Oi,RK),e(RK,Kmo),e(Oi,Zmo),e(Wo,ego),e(Wo,B4),e(B4,ogo),e(B4,SK),e(SK,rgo),e(B4,tgo),e(Wo,ago),e(Wo,Nr),g(x4,Nr,null),e(Nr,ngo),e(Nr,PK),e(PK,sgo),e(Nr,lgo),e(Nr,Xi),e(Xi,igo),e(Xi,$K),e($K,dgo),e(Xi,cgo),e(Xi,IK),e(IK,fgo),e(Xi,mgo),e(Nr,ggo),e(Nr,jK),e(jK,hgo),e(Nr,pgo),g(k4,Nr,null),e(Wo,_go),e(Wo,Se),g(R4,Se,null),e(Se,ugo),e(Se,NK),e(NK,bgo),e(Se,vgo),e(Se,Na),e(Na,Tgo),e(Na,DK),e(DK,Fgo),e(Na,Cgo),e(Na,qK),e(qK,Mgo),e(Na,Ego),e(Na,GK),e(GK,ygo),e(Na,wgo),e(Se,Ago),e(Se,$),e($,ou),e(ou,OK),e(OK,Lgo),e(ou,Bgo),e(ou,vS),e(vS,xgo),e(ou,kgo),e($,Rgo),e($,ru),e(ru,XK),e(XK,Sgo),e(ru,Pgo),e(ru,TS),e(TS,$go),e(ru,Igo),e($,jgo),e($,tu),e(tu,zK),e(zK,Ngo),e(tu,Dgo),e(tu,FS),e(FS,qgo),e(tu,Ggo),e($,Ogo),e($,au),e(au,VK),e(VK,Xgo),e(au,zgo),e(au,CS),e(CS,Vgo),e(au,Wgo),e($,Qgo),e($,nu),e(nu,WK),e(WK,Hgo),e(nu,Ugo),e(nu,MS),e(MS,Jgo),e(nu,Ygo),e($,Kgo),e($,su),e(su,QK),e(QK,Zgo),e(su,eho),e(su,ES),e(ES,oho),e(su,rho),e($,tho),e($,lu),e(lu,HK),e(HK,aho),e(lu,nho),e(lu,yS),e(yS,sho),e(lu,lho),e($,iho),e($,iu),e(iu,UK),e(UK,dho),e(iu,cho),e(iu,wS),e(wS,fho),e(iu,mho),e($,gho),e($,du),e(du,JK),e(JK,hho),e(du,pho),e(du,AS),e(AS,_ho),e(du,uho),e($,bho),e($,cu),e(cu,YK),e(YK,vho),e(cu,Tho),e(cu,LS),e(LS,Fho),e(cu,Cho),e($,Mho),e($,fu),e(fu,KK),e(KK,Eho),e(fu,yho),e(fu,BS),e(BS,who),e(fu,Aho),e($,Lho),e($,mu),e(mu,ZK),e(ZK,Bho),e(mu,xho),e(mu,xS),e(xS,kho),e(mu,Rho),e($,Sho),e($,gu),e(gu,eZ),e(eZ,Pho),e(gu,$ho),e(gu,kS),e(kS,Iho),e(gu,jho),e($,Nho),e($,hu),e(hu,oZ),e(oZ,Dho),e(hu,qho),e(hu,RS),e(RS,Gho),e(hu,Oho),e($,Xho),e($,pu),e(pu,rZ),e(rZ,zho),e(pu,Vho),e(pu,SS),e(SS,Who),e(pu,Qho),e($,Hho),e($,_u),e(_u,tZ),e(tZ,Uho),e(_u,Jho),e(_u,PS),e(PS,Yho),e(_u,Kho),e($,Zho),e($,uu),e(uu,aZ),e(aZ,epo),e(uu,opo),e(uu,$S),e($S,rpo),e(uu,tpo),e($,apo),e($,bu),e(bu,nZ),e(nZ,npo),e(bu,spo),e(bu,IS),e(IS,lpo),e(bu,ipo),e($,dpo),e($,vu),e(vu,sZ),e(sZ,cpo),e(vu,fpo),e(vu,jS),e(jS,mpo),e(vu,gpo),e($,hpo),e($,Tu),e(Tu,lZ),e(lZ,ppo),e(Tu,_po),e(Tu,NS),e(NS,upo),e(Tu,bpo),e($,vpo),e($,Fu),e(Fu,iZ),e(iZ,Tpo),e(Fu,Fpo),e(Fu,DS),e(DS,Cpo),e(Fu,Mpo),e($,Epo),e($,Cu),e(Cu,dZ),e(dZ,ypo),e(Cu,wpo),e(Cu,qS),e(qS,Apo),e(Cu,Lpo),e($,Bpo),e($,Mu),e(Mu,cZ),e(cZ,xpo),e(Mu,kpo),e(Mu,GS),e(GS,Rpo),e(Mu,Spo),e($,Ppo),e($,Eu),e(Eu,fZ),e(fZ,$po),e(Eu,Ipo),e(Eu,OS),e(OS,jpo),e(Eu,Npo),e($,Dpo),e($,yu),e(yu,mZ),e(mZ,qpo),e(yu,Gpo),e(yu,XS),e(XS,Opo),e(yu,Xpo),e($,zpo),e($,wu),e(wu,gZ),e(gZ,Vpo),e(wu,Wpo),e(wu,zS),e(zS,Qpo),e(wu,Hpo),e($,Upo),e($,Au),e(Au,hZ),e(hZ,Jpo),e(Au,Ypo),e(Au,VS),e(VS,Kpo),e(Au,Zpo),e($,e_o),e($,Lu),e(Lu,pZ),e(pZ,o_o),e(Lu,r_o),e(Lu,WS),e(WS,t_o),e(Lu,a_o),e($,n_o),e($,Bu),e(Bu,_Z),e(_Z,s_o),e(Bu,l_o),e(Bu,QS),e(QS,i_o),e(Bu,d_o),e($,c_o),e($,xu),e(xu,uZ),e(uZ,f_o),e(xu,m_o),e(xu,bZ),e(bZ,g_o),e(xu,h_o),e($,p_o),e($,ku),e(ku,vZ),e(vZ,__o),e(ku,u_o),e(ku,HS),e(HS,b_o),e(ku,v_o),e($,T_o),e($,Ru),e(Ru,TZ),e(TZ,F_o),e(Ru,C_o),e(Ru,US),e(US,M_o),e(Ru,E_o),e($,y_o),e($,Su),e(Su,FZ),e(FZ,w_o),e(Su,A_o),e(Su,JS),e(JS,L_o),e(Su,B_o),e($,x_o),e($,Pu),e(Pu,CZ),e(CZ,k_o),e(Pu,R_o),e(Pu,YS),e(YS,S_o),e(Pu,P_o),e(Se,$_o),e(Se,$u),e($u,I_o),e($u,MZ),e(MZ,j_o),e($u,N_o),e($u,EZ),e(EZ,D_o),e(Se,q_o),e(Se,yZ),e(yZ,G_o),e(Se,O_o),g(S4,Se,null),b(d,IAe,u),b(d,zi,u),e(zi,Iu),e(Iu,wZ),g(P4,wZ,null),e(zi,X_o),e(zi,AZ),e(AZ,z_o),b(d,jAe,u),b(d,Qo,u),g($4,Qo,null),e(Qo,V_o),e(Qo,Vi),e(Vi,W_o),e(Vi,LZ),e(LZ,Q_o),e(Vi,H_o),e(Vi,BZ),e(BZ,U_o),e(Vi,J_o),e(Qo,Y_o),e(Qo,I4),e(I4,K_o),e(I4,xZ),e(xZ,Z_o),e(I4,euo),e(Qo,ouo),e(Qo,Dr),g(j4,Dr,null),e(Dr,ruo),e(Dr,kZ),e(kZ,tuo),e(Dr,auo),e(Dr,Wi),e(Wi,nuo),e(Wi,RZ),e(RZ,suo),e(Wi,luo),e(Wi,SZ),e(SZ,iuo),e(Wi,duo),e(Dr,cuo),e(Dr,PZ),e(PZ,fuo),e(Dr,muo),g(N4,Dr,null),e(Qo,guo),e(Qo,Pe),g(D4,Pe,null),e(Pe,huo),e(Pe,$Z),e($Z,puo),e(Pe,_uo),e(Pe,Da),e(Da,uuo),e(Da,IZ),e(IZ,buo),e(Da,vuo),e(Da,jZ),e(jZ,Tuo),e(Da,Fuo),e(Da,NZ),e(NZ,Cuo),e(Da,Muo),e(Pe,Euo),e(Pe,ne),e(ne,ju),e(ju,DZ),e(DZ,yuo),e(ju,wuo),e(ju,KS),e(KS,Auo),e(ju,Luo),e(ne,Buo),e(ne,Nu),e(Nu,qZ),e(qZ,xuo),e(Nu,kuo),e(Nu,ZS),e(ZS,Ruo),e(Nu,Suo),e(ne,Puo),e(ne,Du),e(Du,GZ),e(GZ,$uo),e(Du,Iuo),e(Du,eP),e(eP,juo),e(Du,Nuo),e(ne,Duo),e(ne,qu),e(qu,OZ),e(OZ,quo),e(qu,Guo),e(qu,oP),e(oP,Ouo),e(qu,Xuo),e(ne,zuo),e(ne,Gu),e(Gu,XZ),e(XZ,Vuo),e(Gu,Wuo),e(Gu,rP),e(rP,Quo),e(Gu,Huo),e(ne,Uuo),e(ne,Ou),e(Ou,zZ),e(zZ,Juo),e(Ou,Yuo),e(Ou,tP),e(tP,Kuo),e(Ou,Zuo),e(ne,e1o),e(ne,Xu),e(Xu,VZ),e(VZ,o1o),e(Xu,r1o),e(Xu,aP),e(aP,t1o),e(Xu,a1o),e(ne,n1o),e(ne,zu),e(zu,WZ),e(WZ,s1o),e(zu,l1o),e(zu,nP),e(nP,i1o),e(zu,d1o),e(ne,c1o),e(ne,Vu),e(Vu,QZ),e(QZ,f1o),e(Vu,m1o),e(Vu,sP),e(sP,g1o),e(Vu,h1o),e(ne,p1o),e(ne,Wu),e(Wu,HZ),e(HZ,_1o),e(Wu,u1o),e(Wu,lP),e(lP,b1o),e(Wu,v1o),e(ne,T1o),e(ne,Qu),e(Qu,UZ),e(UZ,F1o),e(Qu,C1o),e(Qu,iP),e(iP,M1o),e(Qu,E1o),e(ne,y1o),e(ne,Hu),e(Hu,JZ),e(JZ,w1o),e(Hu,A1o),e(Hu,dP),e(dP,L1o),e(Hu,B1o),e(ne,x1o),e(ne,Uu),e(Uu,YZ),e(YZ,k1o),e(Uu,R1o),e(Uu,cP),e(cP,S1o),e(Uu,P1o),e(ne,$1o),e(ne,Ju),e(Ju,KZ),e(KZ,I1o),e(Ju,j1o),e(Ju,fP),e(fP,N1o),e(Ju,D1o),e(ne,q1o),e(ne,Yu),e(Yu,ZZ),e(ZZ,G1o),e(Yu,O1o),e(Yu,mP),e(mP,X1o),e(Yu,z1o),e(Pe,V1o),e(Pe,Ku),e(Ku,W1o),e(Ku,eee),e(eee,Q1o),e(Ku,H1o),e(Ku,oee),e(oee,U1o),e(Pe,J1o),e(Pe,ree),e(ree,Y1o),e(Pe,K1o),g(q4,Pe,null),b(d,NAe,u),b(d,Qi,u),e(Qi,Zu),e(Zu,tee),g(G4,tee,null),e(Qi,Z1o),e(Qi,aee),e(aee,ebo),b(d,DAe,u),b(d,Ho,u),g(O4,Ho,null),e(Ho,obo),e(Ho,Hi),e(Hi,rbo),e(Hi,nee),e(nee,tbo),e(Hi,abo),e(Hi,see),e(see,nbo),e(Hi,sbo),e(Ho,lbo),e(Ho,X4),e(X4,ibo),e(X4,lee),e(lee,dbo),e(X4,cbo),e(Ho,fbo),e(Ho,qr),g(z4,qr,null),e(qr,mbo),e(qr,iee),e(iee,gbo),e(qr,hbo),e(qr,Ui),e(Ui,pbo),e(Ui,dee),e(dee,_bo),e(Ui,ubo),e(Ui,cee),e(cee,bbo),e(Ui,vbo),e(qr,Tbo),e(qr,fee),e(fee,Fbo),e(qr,Cbo),g(V4,qr,null),e(Ho,Mbo),e(Ho,$e),g(W4,$e,null),e($e,Ebo),e($e,mee),e(mee,ybo),e($e,wbo),e($e,qa),e(qa,Abo),e(qa,gee),e(gee,Lbo),e(qa,Bbo),e(qa,hee),e(hee,xbo),e(qa,kbo),e(qa,pee),e(pee,Rbo),e(qa,Sbo),e($e,Pbo),e($e,A),e(A,e1),e(e1,_ee),e(_ee,$bo),e(e1,Ibo),e(e1,gP),e(gP,jbo),e(e1,Nbo),e(A,Dbo),e(A,o1),e(o1,uee),e(uee,qbo),e(o1,Gbo),e(o1,hP),e(hP,Obo),e(o1,Xbo),e(A,zbo),e(A,r1),e(r1,bee),e(bee,Vbo),e(r1,Wbo),e(r1,pP),e(pP,Qbo),e(r1,Hbo),e(A,Ubo),e(A,t1),e(t1,vee),e(vee,Jbo),e(t1,Ybo),e(t1,_P),e(_P,Kbo),e(t1,Zbo),e(A,e5o),e(A,a1),e(a1,Tee),e(Tee,o5o),e(a1,r5o),e(a1,uP),e(uP,t5o),e(a1,a5o),e(A,n5o),e(A,n1),e(n1,Fee),e(Fee,s5o),e(n1,l5o),e(n1,bP),e(bP,i5o),e(n1,d5o),e(A,c5o),e(A,s1),e(s1,Cee),e(Cee,f5o),e(s1,m5o),e(s1,vP),e(vP,g5o),e(s1,h5o),e(A,p5o),e(A,l1),e(l1,Mee),e(Mee,_5o),e(l1,u5o),e(l1,TP),e(TP,b5o),e(l1,v5o),e(A,T5o),e(A,i1),e(i1,Eee),e(Eee,F5o),e(i1,C5o),e(i1,FP),e(FP,M5o),e(i1,E5o),e(A,y5o),e(A,d1),e(d1,yee),e(yee,w5o),e(d1,A5o),e(d1,CP),e(CP,L5o),e(d1,B5o),e(A,x5o),e(A,c1),e(c1,wee),e(wee,k5o),e(c1,R5o),e(c1,MP),e(MP,S5o),e(c1,P5o),e(A,$5o),e(A,f1),e(f1,Aee),e(Aee,I5o),e(f1,j5o),e(f1,EP),e(EP,N5o),e(f1,D5o),e(A,q5o),e(A,m1),e(m1,Lee),e(Lee,G5o),e(m1,O5o),e(m1,yP),e(yP,X5o),e(m1,z5o),e(A,V5o),e(A,g1),e(g1,Bee),e(Bee,W5o),e(g1,Q5o),e(g1,wP),e(wP,H5o),e(g1,U5o),e(A,J5o),e(A,h1),e(h1,xee),e(xee,Y5o),e(h1,K5o),e(h1,AP),e(AP,Z5o),e(h1,e2o),e(A,o2o),e(A,p1),e(p1,kee),e(kee,r2o),e(p1,t2o),e(p1,LP),e(LP,a2o),e(p1,n2o),e(A,s2o),e(A,_1),e(_1,Ree),e(Ree,l2o),e(_1,i2o),e(_1,BP),e(BP,d2o),e(_1,c2o),e(A,f2o),e(A,u1),e(u1,See),e(See,m2o),e(u1,g2o),e(u1,xP),e(xP,h2o),e(u1,p2o),e(A,_2o),e(A,b1),e(b1,Pee),e(Pee,u2o),e(b1,b2o),e(b1,kP),e(kP,v2o),e(b1,T2o),e(A,F2o),e(A,v1),e(v1,$ee),e($ee,C2o),e(v1,M2o),e(v1,RP),e(RP,E2o),e(v1,y2o),e(A,w2o),e(A,T1),e(T1,Iee),e(Iee,A2o),e(T1,L2o),e(T1,SP),e(SP,B2o),e(T1,x2o),e(A,k2o),e(A,F1),e(F1,jee),e(jee,R2o),e(F1,S2o),e(F1,PP),e(PP,P2o),e(F1,$2o),e(A,I2o),e(A,C1),e(C1,Nee),e(Nee,j2o),e(C1,N2o),e(C1,$P),e($P,D2o),e(C1,q2o),e(A,G2o),e(A,M1),e(M1,Dee),e(Dee,O2o),e(M1,X2o),e(M1,IP),e(IP,z2o),e(M1,V2o),e(A,W2o),e(A,E1),e(E1,qee),e(qee,Q2o),e(E1,H2o),e(E1,jP),e(jP,U2o),e(E1,J2o),e(A,Y2o),e(A,y1),e(y1,Gee),e(Gee,K2o),e(y1,Z2o),e(y1,NP),e(NP,evo),e(y1,ovo),e(A,rvo),e(A,w1),e(w1,Oee),e(Oee,tvo),e(w1,avo),e(w1,DP),e(DP,nvo),e(w1,svo),e(A,lvo),e(A,A1),e(A1,Xee),e(Xee,ivo),e(A1,dvo),e(A1,qP),e(qP,cvo),e(A1,fvo),e(A,mvo),e(A,L1),e(L1,zee),e(zee,gvo),e(L1,hvo),e(L1,GP),e(GP,pvo),e(L1,_vo),e(A,uvo),e(A,B1),e(B1,Vee),e(Vee,bvo),e(B1,vvo),e(B1,OP),e(OP,Tvo),e(B1,Fvo),e(A,Cvo),e(A,x1),e(x1,Wee),e(Wee,Mvo),e(x1,Evo),e(x1,XP),e(XP,yvo),e(x1,wvo),e(A,Avo),e(A,k1),e(k1,Qee),e(Qee,Lvo),e(k1,Bvo),e(k1,zP),e(zP,xvo),e(k1,kvo),e(A,Rvo),e(A,R1),e(R1,Hee),e(Hee,Svo),e(R1,Pvo),e(R1,VP),e(VP,$vo),e(R1,Ivo),e(A,jvo),e(A,S1),e(S1,Uee),e(Uee,Nvo),e(S1,Dvo),e(S1,WP),e(WP,qvo),e(S1,Gvo),e(A,Ovo),e(A,P1),e(P1,Jee),e(Jee,Xvo),e(P1,zvo),e(P1,QP),e(QP,Vvo),e(P1,Wvo),e(A,Qvo),e(A,$1),e($1,Yee),e(Yee,Hvo),e($1,Uvo),e($1,HP),e(HP,Jvo),e($1,Yvo),e(A,Kvo),e(A,I1),e(I1,Kee),e(Kee,Zvo),e(I1,e6o),e(I1,UP),e(UP,o6o),e(I1,r6o),e(A,t6o),e(A,j1),e(j1,Zee),e(Zee,a6o),e(j1,n6o),e(j1,JP),e(JP,s6o),e(j1,l6o),e(A,i6o),e(A,N1),e(N1,eoe),e(eoe,d6o),e(N1,c6o),e(N1,YP),e(YP,f6o),e(N1,m6o),e(A,g6o),e(A,D1),e(D1,ooe),e(ooe,h6o),e(D1,p6o),e(D1,KP),e(KP,_6o),e(D1,u6o),e(A,b6o),e(A,q1),e(q1,roe),e(roe,v6o),e(q1,T6o),e(q1,ZP),e(ZP,F6o),e(q1,C6o),e(A,M6o),e(A,G1),e(G1,toe),e(toe,E6o),e(G1,y6o),e(G1,e$),e(e$,w6o),e(G1,A6o),e(A,L6o),e(A,O1),e(O1,aoe),e(aoe,B6o),e(O1,x6o),e(O1,o$),e(o$,k6o),e(O1,R6o),e(A,S6o),e(A,X1),e(X1,noe),e(noe,P6o),e(X1,$6o),e(X1,r$),e(r$,I6o),e(X1,j6o),e($e,N6o),e($e,z1),e(z1,D6o),e(z1,soe),e(soe,q6o),e(z1,G6o),e(z1,loe),e(loe,O6o),e($e,X6o),e($e,ioe),e(ioe,z6o),e($e,V6o),g(Q4,$e,null),b(d,qAe,u),b(d,Ji,u),e(Ji,V1),e(V1,doe),g(H4,doe,null),e(Ji,W6o),e(Ji,coe),e(coe,Q6o),b(d,GAe,u),b(d,Uo,u),g(U4,Uo,null),e(Uo,H6o),e(Uo,Yi),e(Yi,U6o),e(Yi,foe),e(foe,J6o),e(Yi,Y6o),e(Yi,moe),e(moe,K6o),e(Yi,Z6o),e(Uo,eTo),e(Uo,J4),e(J4,oTo),e(J4,goe),e(goe,rTo),e(J4,tTo),e(Uo,aTo),e(Uo,Gr),g(Y4,Gr,null),e(Gr,nTo),e(Gr,hoe),e(hoe,sTo),e(Gr,lTo),e(Gr,Ki),e(Ki,iTo),e(Ki,poe),e(poe,dTo),e(Ki,cTo),e(Ki,_oe),e(_oe,fTo),e(Ki,mTo),e(Gr,gTo),e(Gr,uoe),e(uoe,hTo),e(Gr,pTo),g(K4,Gr,null),e(Uo,_To),e(Uo,Ie),g(Z4,Ie,null),e(Ie,uTo),e(Ie,boe),e(boe,bTo),e(Ie,vTo),e(Ie,Ga),e(Ga,TTo),e(Ga,voe),e(voe,FTo),e(Ga,CTo),e(Ga,Toe),e(Toe,MTo),e(Ga,ETo),e(Ga,Foe),e(Foe,yTo),e(Ga,wTo),e(Ie,ATo),e(Ie,G),e(G,W1),e(W1,Coe),e(Coe,LTo),e(W1,BTo),e(W1,t$),e(t$,xTo),e(W1,kTo),e(G,RTo),e(G,Q1),e(Q1,Moe),e(Moe,STo),e(Q1,PTo),e(Q1,a$),e(a$,$To),e(Q1,ITo),e(G,jTo),e(G,H1),e(H1,Eoe),e(Eoe,NTo),e(H1,DTo),e(H1,n$),e(n$,qTo),e(H1,GTo),e(G,OTo),e(G,U1),e(U1,yoe),e(yoe,XTo),e(U1,zTo),e(U1,s$),e(s$,VTo),e(U1,WTo),e(G,QTo),e(G,J1),e(J1,woe),e(woe,HTo),e(J1,UTo),e(J1,l$),e(l$,JTo),e(J1,YTo),e(G,KTo),e(G,Y1),e(Y1,Aoe),e(Aoe,ZTo),e(Y1,e7o),e(Y1,i$),e(i$,o7o),e(Y1,r7o),e(G,t7o),e(G,K1),e(K1,Loe),e(Loe,a7o),e(K1,n7o),e(K1,d$),e(d$,s7o),e(K1,l7o),e(G,i7o),e(G,Z1),e(Z1,Boe),e(Boe,d7o),e(Z1,c7o),e(Z1,c$),e(c$,f7o),e(Z1,m7o),e(G,g7o),e(G,eb),e(eb,xoe),e(xoe,h7o),e(eb,p7o),e(eb,f$),e(f$,_7o),e(eb,u7o),e(G,b7o),e(G,ob),e(ob,koe),e(koe,v7o),e(ob,T7o),e(ob,m$),e(m$,F7o),e(ob,C7o),e(G,M7o),e(G,rb),e(rb,Roe),e(Roe,E7o),e(rb,y7o),e(rb,g$),e(g$,w7o),e(rb,A7o),e(G,L7o),e(G,tb),e(tb,Soe),e(Soe,B7o),e(tb,x7o),e(tb,h$),e(h$,k7o),e(tb,R7o),e(G,S7o),e(G,ab),e(ab,Poe),e(Poe,P7o),e(ab,$7o),e(ab,p$),e(p$,I7o),e(ab,j7o),e(G,N7o),e(G,nb),e(nb,$oe),e($oe,D7o),e(nb,q7o),e(nb,_$),e(_$,G7o),e(nb,O7o),e(G,X7o),e(G,sb),e(sb,Ioe),e(Ioe,z7o),e(sb,V7o),e(sb,u$),e(u$,W7o),e(sb,Q7o),e(G,H7o),e(G,lb),e(lb,joe),e(joe,U7o),e(lb,J7o),e(lb,b$),e(b$,Y7o),e(lb,K7o),e(G,Z7o),e(G,ib),e(ib,Noe),e(Noe,e8o),e(ib,o8o),e(ib,v$),e(v$,r8o),e(ib,t8o),e(G,a8o),e(G,db),e(db,Doe),e(Doe,n8o),e(db,s8o),e(db,T$),e(T$,l8o),e(db,i8o),e(G,d8o),e(G,cb),e(cb,qoe),e(qoe,c8o),e(cb,f8o),e(cb,F$),e(F$,m8o),e(cb,g8o),e(G,h8o),e(G,fb),e(fb,Goe),e(Goe,p8o),e(fb,_8o),e(fb,C$),e(C$,u8o),e(fb,b8o),e(G,v8o),e(G,mb),e(mb,Ooe),e(Ooe,T8o),e(mb,F8o),e(mb,M$),e(M$,C8o),e(mb,M8o),e(G,E8o),e(G,gb),e(gb,Xoe),e(Xoe,y8o),e(gb,w8o),e(gb,E$),e(E$,A8o),e(gb,L8o),e(G,B8o),e(G,hb),e(hb,zoe),e(zoe,x8o),e(hb,k8o),e(hb,y$),e(y$,R8o),e(hb,S8o),e(G,P8o),e(G,pb),e(pb,Voe),e(Voe,$8o),e(pb,I8o),e(pb,w$),e(w$,j8o),e(pb,N8o),e(G,D8o),e(G,_b),e(_b,Woe),e(Woe,q8o),e(_b,G8o),e(_b,A$),e(A$,O8o),e(_b,X8o),e(G,z8o),e(G,ub),e(ub,Qoe),e(Qoe,V8o),e(ub,W8o),e(ub,L$),e(L$,Q8o),e(ub,H8o),e(G,U8o),e(G,bb),e(bb,Hoe),e(Hoe,J8o),e(bb,Y8o),e(bb,B$),e(B$,K8o),e(bb,Z8o),e(Ie,eFo),e(Ie,vb),e(vb,oFo),e(vb,Uoe),e(Uoe,rFo),e(vb,tFo),e(vb,Joe),e(Joe,aFo),e(Ie,nFo),e(Ie,Yoe),e(Yoe,sFo),e(Ie,lFo),g(eM,Ie,null),b(d,OAe,u),b(d,Zi,u),e(Zi,Tb),e(Tb,Koe),g(oM,Koe,null),e(Zi,iFo),e(Zi,Zoe),e(Zoe,dFo),b(d,XAe,u),b(d,Jo,u),g(rM,Jo,null),e(Jo,cFo),e(Jo,ed),e(ed,fFo),e(ed,ere),e(ere,mFo),e(ed,gFo),e(ed,ore),e(ore,hFo),e(ed,pFo),e(Jo,_Fo),e(Jo,tM),e(tM,uFo),e(tM,rre),e(rre,bFo),e(tM,vFo),e(Jo,TFo),e(Jo,Or),g(aM,Or,null),e(Or,FFo),e(Or,tre),e(tre,CFo),e(Or,MFo),e(Or,od),e(od,EFo),e(od,are),e(are,yFo),e(od,wFo),e(od,nre),e(nre,AFo),e(od,LFo),e(Or,BFo),e(Or,sre),e(sre,xFo),e(Or,kFo),g(nM,Or,null),e(Jo,RFo),e(Jo,je),g(sM,je,null),e(je,SFo),e(je,lre),e(lre,PFo),e(je,$Fo),e(je,Oa),e(Oa,IFo),e(Oa,ire),e(ire,jFo),e(Oa,NFo),e(Oa,dre),e(dre,DFo),e(Oa,qFo),e(Oa,cre),e(cre,GFo),e(Oa,OFo),e(je,XFo),e(je,oa),e(oa,Fb),e(Fb,fre),e(fre,zFo),e(Fb,VFo),e(Fb,x$),e(x$,WFo),e(Fb,QFo),e(oa,HFo),e(oa,Cb),e(Cb,mre),e(mre,UFo),e(Cb,JFo),e(Cb,k$),e(k$,YFo),e(Cb,KFo),e(oa,ZFo),e(oa,Mb),e(Mb,gre),e(gre,eCo),e(Mb,oCo),e(Mb,R$),e(R$,rCo),e(Mb,tCo),e(oa,aCo),e(oa,Eb),e(Eb,hre),e(hre,nCo),e(Eb,sCo),e(Eb,S$),e(S$,lCo),e(Eb,iCo),e(oa,dCo),e(oa,yb),e(yb,pre),e(pre,cCo),e(yb,fCo),e(yb,P$),e(P$,mCo),e(yb,gCo),e(je,hCo),e(je,wb),e(wb,pCo),e(wb,_re),e(_re,_Co),e(wb,uCo),e(wb,ure),e(ure,bCo),e(je,vCo),e(je,bre),e(bre,TCo),e(je,FCo),g(lM,je,null),b(d,zAe,u),b(d,rd,u),e(rd,Ab),e(Ab,vre),g(iM,vre,null),e(rd,CCo),e(rd,Tre),e(Tre,MCo),b(d,VAe,u),b(d,Yo,u),g(dM,Yo,null),e(Yo,ECo),e(Yo,td),e(td,yCo),e(td,Fre),e(Fre,wCo),e(td,ACo),e(td,Cre),e(Cre,LCo),e(td,BCo),e(Yo,xCo),e(Yo,cM),e(cM,kCo),e(cM,Mre),e(Mre,RCo),e(cM,SCo),e(Yo,PCo),e(Yo,Xr),g(fM,Xr,null),e(Xr,$Co),e(Xr,Ere),e(Ere,ICo),e(Xr,jCo),e(Xr,ad),e(ad,NCo),e(ad,yre),e(yre,DCo),e(ad,qCo),e(ad,wre),e(wre,GCo),e(ad,OCo),e(Xr,XCo),e(Xr,Are),e(Are,zCo),e(Xr,VCo),g(mM,Xr,null),e(Yo,WCo),e(Yo,Ne),g(gM,Ne,null),e(Ne,QCo),e(Ne,Lre),e(Lre,HCo),e(Ne,UCo),e(Ne,Xa),e(Xa,JCo),e(Xa,Bre),e(Bre,YCo),e(Xa,KCo),e(Xa,xre),e(xre,ZCo),e(Xa,e4o),e(Xa,kre),e(kre,o4o),e(Xa,r4o),e(Ne,t4o),e(Ne,N),e(N,Lb),e(Lb,Rre),e(Rre,a4o),e(Lb,n4o),e(Lb,$$),e($$,s4o),e(Lb,l4o),e(N,i4o),e(N,Bb),e(Bb,Sre),e(Sre,d4o),e(Bb,c4o),e(Bb,I$),e(I$,f4o),e(Bb,m4o),e(N,g4o),e(N,xb),e(xb,Pre),e(Pre,h4o),e(xb,p4o),e(xb,j$),e(j$,_4o),e(xb,u4o),e(N,b4o),e(N,kb),e(kb,$re),e($re,v4o),e(kb,T4o),e(kb,N$),e(N$,F4o),e(kb,C4o),e(N,M4o),e(N,Rb),e(Rb,Ire),e(Ire,E4o),e(Rb,y4o),e(Rb,D$),e(D$,w4o),e(Rb,A4o),e(N,L4o),e(N,Sb),e(Sb,jre),e(jre,B4o),e(Sb,x4o),e(Sb,q$),e(q$,k4o),e(Sb,R4o),e(N,S4o),e(N,Pb),e(Pb,Nre),e(Nre,P4o),e(Pb,$4o),e(Pb,G$),e(G$,I4o),e(Pb,j4o),e(N,N4o),e(N,$b),e($b,Dre),e(Dre,D4o),e($b,q4o),e($b,O$),e(O$,G4o),e($b,O4o),e(N,X4o),e(N,Ib),e(Ib,qre),e(qre,z4o),e(Ib,V4o),e(Ib,X$),e(X$,W4o),e(Ib,Q4o),e(N,H4o),e(N,jb),e(jb,Gre),e(Gre,U4o),e(jb,J4o),e(jb,z$),e(z$,Y4o),e(jb,K4o),e(N,Z4o),e(N,Nb),e(Nb,Ore),e(Ore,eMo),e(Nb,oMo),e(Nb,V$),e(V$,rMo),e(Nb,tMo),e(N,aMo),e(N,Db),e(Db,Xre),e(Xre,nMo),e(Db,sMo),e(Db,W$),e(W$,lMo),e(Db,iMo),e(N,dMo),e(N,qb),e(qb,zre),e(zre,cMo),e(qb,fMo),e(qb,Q$),e(Q$,mMo),e(qb,gMo),e(N,hMo),e(N,Gb),e(Gb,Vre),e(Vre,pMo),e(Gb,_Mo),e(Gb,H$),e(H$,uMo),e(Gb,bMo),e(N,vMo),e(N,Ob),e(Ob,Wre),e(Wre,TMo),e(Ob,FMo),e(Ob,U$),e(U$,CMo),e(Ob,MMo),e(N,EMo),e(N,Xb),e(Xb,Qre),e(Qre,yMo),e(Xb,wMo),e(Xb,J$),e(J$,AMo),e(Xb,LMo),e(N,BMo),e(N,zb),e(zb,Hre),e(Hre,xMo),e(zb,kMo),e(zb,Y$),e(Y$,RMo),e(zb,SMo),e(N,PMo),e(N,Vb),e(Vb,Ure),e(Ure,$Mo),e(Vb,IMo),e(Vb,K$),e(K$,jMo),e(Vb,NMo),e(N,DMo),e(N,Wb),e(Wb,Jre),e(Jre,qMo),e(Wb,GMo),e(Wb,Z$),e(Z$,OMo),e(Wb,XMo),e(N,zMo),e(N,Qb),e(Qb,Yre),e(Yre,VMo),e(Qb,WMo),e(Qb,eI),e(eI,QMo),e(Qb,HMo),e(N,UMo),e(N,Hb),e(Hb,Kre),e(Kre,JMo),e(Hb,YMo),e(Hb,oI),e(oI,KMo),e(Hb,ZMo),e(N,eEo),e(N,Ub),e(Ub,Zre),e(Zre,oEo),e(Ub,rEo),e(Ub,rI),e(rI,tEo),e(Ub,aEo),e(N,nEo),e(N,Jb),e(Jb,ete),e(ete,sEo),e(Jb,lEo),e(Jb,tI),e(tI,iEo),e(Jb,dEo),e(N,cEo),e(N,Yb),e(Yb,ote),e(ote,fEo),e(Yb,mEo),e(Yb,aI),e(aI,gEo),e(Yb,hEo),e(N,pEo),e(N,Kb),e(Kb,rte),e(rte,_Eo),e(Kb,uEo),e(Kb,nI),e(nI,bEo),e(Kb,vEo),e(N,TEo),e(N,Zb),e(Zb,tte),e(tte,FEo),e(Zb,CEo),e(Zb,sI),e(sI,MEo),e(Zb,EEo),e(N,yEo),e(N,e5),e(e5,ate),e(ate,wEo),e(e5,AEo),e(e5,lI),e(lI,LEo),e(e5,BEo),e(N,xEo),e(N,o5),e(o5,nte),e(nte,kEo),e(o5,REo),e(o5,iI),e(iI,SEo),e(o5,PEo),e(N,$Eo),e(N,r5),e(r5,ste),e(ste,IEo),e(r5,jEo),e(r5,dI),e(dI,NEo),e(r5,DEo),e(N,qEo),e(N,t5),e(t5,lte),e(lte,GEo),e(t5,OEo),e(t5,cI),e(cI,XEo),e(t5,zEo),e(N,VEo),e(N,a5),e(a5,ite),e(ite,WEo),e(a5,QEo),e(a5,fI),e(fI,HEo),e(a5,UEo),e(N,JEo),e(N,n5),e(n5,dte),e(dte,YEo),e(n5,KEo),e(n5,mI),e(mI,ZEo),e(n5,e3o),e(Ne,o3o),e(Ne,s5),e(s5,r3o),e(s5,cte),e(cte,t3o),e(s5,a3o),e(s5,fte),e(fte,n3o),e(Ne,s3o),e(Ne,mte),e(mte,l3o),e(Ne,i3o),g(hM,Ne,null),b(d,WAe,u),b(d,nd,u),e(nd,l5),e(l5,gte),g(pM,gte,null),e(nd,d3o),e(nd,hte),e(hte,c3o),b(d,QAe,u),b(d,Ko,u),g(_M,Ko,null),e(Ko,f3o),e(Ko,sd),e(sd,m3o),e(sd,pte),e(pte,g3o),e(sd,h3o),e(sd,_te),e(_te,p3o),e(sd,_3o),e(Ko,u3o),e(Ko,uM),e(uM,b3o),e(uM,ute),e(ute,v3o),e(uM,T3o),e(Ko,F3o),e(Ko,zr),g(bM,zr,null),e(zr,C3o),e(zr,bte),e(bte,M3o),e(zr,E3o),e(zr,ld),e(ld,y3o),e(ld,vte),e(vte,w3o),e(ld,A3o),e(ld,Tte),e(Tte,L3o),e(ld,B3o),e(zr,x3o),e(zr,Fte),e(Fte,k3o),e(zr,R3o),g(vM,zr,null),e(Ko,S3o),e(Ko,De),g(TM,De,null),e(De,P3o),e(De,Cte),e(Cte,$3o),e(De,I3o),e(De,za),e(za,j3o),e(za,Mte),e(Mte,N3o),e(za,D3o),e(za,Ete),e(Ete,q3o),e(za,G3o),e(za,yte),e(yte,O3o),e(za,X3o),e(De,z3o),e(De,R),e(R,i5),e(i5,wte),e(wte,V3o),e(i5,W3o),e(i5,gI),e(gI,Q3o),e(i5,H3o),e(R,U3o),e(R,d5),e(d5,Ate),e(Ate,J3o),e(d5,Y3o),e(d5,hI),e(hI,K3o),e(d5,Z3o),e(R,eyo),e(R,c5),e(c5,Lte),e(Lte,oyo),e(c5,ryo),e(c5,pI),e(pI,tyo),e(c5,ayo),e(R,nyo),e(R,f5),e(f5,Bte),e(Bte,syo),e(f5,lyo),e(f5,_I),e(_I,iyo),e(f5,dyo),e(R,cyo),e(R,m5),e(m5,xte),e(xte,fyo),e(m5,myo),e(m5,uI),e(uI,gyo),e(m5,hyo),e(R,pyo),e(R,g5),e(g5,kte),e(kte,_yo),e(g5,uyo),e(g5,bI),e(bI,byo),e(g5,vyo),e(R,Tyo),e(R,h5),e(h5,Rte),e(Rte,Fyo),e(h5,Cyo),e(h5,vI),e(vI,Myo),e(h5,Eyo),e(R,yyo),e(R,p5),e(p5,Ste),e(Ste,wyo),e(p5,Ayo),e(p5,TI),e(TI,Lyo),e(p5,Byo),e(R,xyo),e(R,_5),e(_5,Pte),e(Pte,kyo),e(_5,Ryo),e(_5,FI),e(FI,Syo),e(_5,Pyo),e(R,$yo),e(R,u5),e(u5,$te),e($te,Iyo),e(u5,jyo),e(u5,CI),e(CI,Nyo),e(u5,Dyo),e(R,qyo),e(R,b5),e(b5,Ite),e(Ite,Gyo),e(b5,Oyo),e(b5,MI),e(MI,Xyo),e(b5,zyo),e(R,Vyo),e(R,v5),e(v5,jte),e(jte,Wyo),e(v5,Qyo),e(v5,EI),e(EI,Hyo),e(v5,Uyo),e(R,Jyo),e(R,T5),e(T5,Nte),e(Nte,Yyo),e(T5,Kyo),e(T5,yI),e(yI,Zyo),e(T5,ewo),e(R,owo),e(R,F5),e(F5,Dte),e(Dte,rwo),e(F5,two),e(F5,wI),e(wI,awo),e(F5,nwo),e(R,swo),e(R,C5),e(C5,qte),e(qte,lwo),e(C5,iwo),e(C5,AI),e(AI,dwo),e(C5,cwo),e(R,fwo),e(R,M5),e(M5,Gte),e(Gte,mwo),e(M5,gwo),e(M5,LI),e(LI,hwo),e(M5,pwo),e(R,_wo),e(R,E5),e(E5,Ote),e(Ote,uwo),e(E5,bwo),e(E5,BI),e(BI,vwo),e(E5,Two),e(R,Fwo),e(R,y5),e(y5,Xte),e(Xte,Cwo),e(y5,Mwo),e(y5,xI),e(xI,Ewo),e(y5,ywo),e(R,wwo),e(R,w5),e(w5,zte),e(zte,Awo),e(w5,Lwo),e(w5,kI),e(kI,Bwo),e(w5,xwo),e(R,kwo),e(R,A5),e(A5,Vte),e(Vte,Rwo),e(A5,Swo),e(A5,RI),e(RI,Pwo),e(A5,$wo),e(R,Iwo),e(R,L5),e(L5,Wte),e(Wte,jwo),e(L5,Nwo),e(L5,SI),e(SI,Dwo),e(L5,qwo),e(R,Gwo),e(R,B5),e(B5,Qte),e(Qte,Owo),e(B5,Xwo),e(B5,PI),e(PI,zwo),e(B5,Vwo),e(R,Wwo),e(R,x5),e(x5,Hte),e(Hte,Qwo),e(x5,Hwo),e(x5,$I),e($I,Uwo),e(x5,Jwo),e(R,Ywo),e(R,k5),e(k5,Ute),e(Ute,Kwo),e(k5,Zwo),e(k5,II),e(II,eAo),e(k5,oAo),e(R,rAo),e(R,R5),e(R5,Jte),e(Jte,tAo),e(R5,aAo),e(R5,jI),e(jI,nAo),e(R5,sAo),e(R,lAo),e(R,S5),e(S5,Yte),e(Yte,iAo),e(S5,dAo),e(S5,NI),e(NI,cAo),e(S5,fAo),e(R,mAo),e(R,P5),e(P5,Kte),e(Kte,gAo),e(P5,hAo),e(P5,DI),e(DI,pAo),e(P5,_Ao),e(R,uAo),e(R,$5),e($5,Zte),e(Zte,bAo),e($5,vAo),e($5,qI),e(qI,TAo),e($5,FAo),e(R,CAo),e(R,I5),e(I5,eae),e(eae,MAo),e(I5,EAo),e(I5,GI),e(GI,yAo),e(I5,wAo),e(R,AAo),e(R,j5),e(j5,oae),e(oae,LAo),e(j5,BAo),e(j5,OI),e(OI,xAo),e(j5,kAo),e(R,RAo),e(R,N5),e(N5,rae),e(rae,SAo),e(N5,PAo),e(N5,XI),e(XI,$Ao),e(N5,IAo),e(R,jAo),e(R,D5),e(D5,tae),e(tae,NAo),e(D5,DAo),e(D5,zI),e(zI,qAo),e(D5,GAo),e(R,OAo),e(R,q5),e(q5,aae),e(aae,XAo),e(q5,zAo),e(q5,VI),e(VI,VAo),e(q5,WAo),e(R,QAo),e(R,G5),e(G5,nae),e(nae,HAo),e(G5,UAo),e(G5,WI),e(WI,JAo),e(G5,YAo),e(R,KAo),e(R,O5),e(O5,sae),e(sae,ZAo),e(O5,e0o),e(O5,QI),e(QI,o0o),e(O5,r0o),e(R,t0o),e(R,X5),e(X5,lae),e(lae,a0o),e(X5,n0o),e(X5,HI),e(HI,s0o),e(X5,l0o),e(R,i0o),e(R,z5),e(z5,iae),e(iae,d0o),e(z5,c0o),e(z5,UI),e(UI,f0o),e(z5,m0o),e(R,g0o),e(R,V5),e(V5,dae),e(dae,h0o),e(V5,p0o),e(V5,JI),e(JI,_0o),e(V5,u0o),e(De,b0o),e(De,W5),e(W5,v0o),e(W5,cae),e(cae,T0o),e(W5,F0o),e(W5,fae),e(fae,C0o),e(De,M0o),e(De,mae),e(mae,E0o),e(De,y0o),g(FM,De,null),b(d,HAe,u),b(d,id,u),e(id,Q5),e(Q5,gae),g(CM,gae,null),e(id,w0o),e(id,hae),e(hae,A0o),b(d,UAe,u),b(d,Zo,u),g(MM,Zo,null),e(Zo,L0o),e(Zo,dd),e(dd,B0o),e(dd,pae),e(pae,x0o),e(dd,k0o),e(dd,_ae),e(_ae,R0o),e(dd,S0o),e(Zo,P0o),e(Zo,EM),e(EM,$0o),e(EM,uae),e(uae,I0o),e(EM,j0o),e(Zo,N0o),e(Zo,Vr),g(yM,Vr,null),e(Vr,D0o),e(Vr,bae),e(bae,q0o),e(Vr,G0o),e(Vr,cd),e(cd,O0o),e(cd,vae),e(vae,X0o),e(cd,z0o),e(cd,Tae),e(Tae,V0o),e(cd,W0o),e(Vr,Q0o),e(Vr,Fae),e(Fae,H0o),e(Vr,U0o),g(wM,Vr,null),e(Zo,J0o),e(Zo,qe),g(AM,qe,null),e(qe,Y0o),e(qe,Cae),e(Cae,K0o),e(qe,Z0o),e(qe,Va),e(Va,eLo),e(Va,Mae),e(Mae,oLo),e(Va,rLo),e(Va,Eae),e(Eae,tLo),e(Va,aLo),e(Va,yae),e(yae,nLo),e(Va,sLo),e(qe,lLo),e(qe,wae),e(wae,H5),e(H5,Aae),e(Aae,iLo),e(H5,dLo),e(H5,YI),e(YI,cLo),e(H5,fLo),e(qe,mLo),e(qe,U5),e(U5,gLo),e(U5,Lae),e(Lae,hLo),e(U5,pLo),e(U5,Bae),e(Bae,_Lo),e(qe,uLo),e(qe,xae),e(xae,bLo),e(qe,vLo),g(LM,qe,null),b(d,JAe,u),b(d,fd,u),e(fd,J5),e(J5,kae),g(BM,kae,null),e(fd,TLo),e(fd,Rae),e(Rae,FLo),b(d,YAe,u),b(d,er,u),g(xM,er,null),e(er,CLo),e(er,md),e(md,MLo),e(md,Sae),e(Sae,ELo),e(md,yLo),e(md,Pae),e(Pae,wLo),e(md,ALo),e(er,LLo),e(er,kM),e(kM,BLo),e(kM,$ae),e($ae,xLo),e(kM,kLo),e(er,RLo),e(er,Wr),g(RM,Wr,null),e(Wr,SLo),e(Wr,Iae),e(Iae,PLo),e(Wr,$Lo),e(Wr,gd),e(gd,ILo),e(gd,jae),e(jae,jLo),e(gd,NLo),e(gd,Nae),e(Nae,DLo),e(gd,qLo),e(Wr,GLo),e(Wr,Dae),e(Dae,OLo),e(Wr,XLo),g(SM,Wr,null),e(er,zLo),e(er,Ge),g(PM,Ge,null),e(Ge,VLo),e(Ge,qae),e(qae,WLo),e(Ge,QLo),e(Ge,Wa),e(Wa,HLo),e(Wa,Gae),e(Gae,ULo),e(Wa,JLo),e(Wa,Oae),e(Oae,YLo),e(Wa,KLo),e(Wa,Xae),e(Xae,ZLo),e(Wa,e9o),e(Ge,o9o),e(Ge,we),e(we,Y5),e(Y5,zae),e(zae,r9o),e(Y5,t9o),e(Y5,KI),e(KI,a9o),e(Y5,n9o),e(we,s9o),e(we,K5),e(K5,Vae),e(Vae,l9o),e(K5,i9o),e(K5,ZI),e(ZI,d9o),e(K5,c9o),e(we,f9o),e(we,As),e(As,Wae),e(Wae,m9o),e(As,g9o),e(As,ej),e(ej,h9o),e(As,p9o),e(As,oj),e(oj,_9o),e(As,u9o),e(we,b9o),e(we,Z5),e(Z5,Qae),e(Qae,v9o),e(Z5,T9o),e(Z5,rj),e(rj,F9o),e(Z5,C9o),e(we,M9o),e(we,ta),e(ta,Hae),e(Hae,E9o),e(ta,y9o),e(ta,tj),e(tj,w9o),e(ta,A9o),e(ta,aj),e(aj,L9o),e(ta,B9o),e(ta,nj),e(nj,x9o),e(ta,k9o),e(we,R9o),e(we,e2),e(e2,Uae),e(Uae,S9o),e(e2,P9o),e(e2,sj),e(sj,$9o),e(e2,I9o),e(we,j9o),e(we,o2),e(o2,Jae),e(Jae,N9o),e(o2,D9o),e(o2,lj),e(lj,q9o),e(o2,G9o),e(we,O9o),e(we,r2),e(r2,Yae),e(Yae,X9o),e(r2,z9o),e(r2,ij),e(ij,V9o),e(r2,W9o),e(Ge,Q9o),e(Ge,t2),e(t2,H9o),e(t2,Kae),e(Kae,U9o),e(t2,J9o),e(t2,Zae),e(Zae,Y9o),e(Ge,K9o),e(Ge,ene),e(ene,Z9o),e(Ge,eBo),g($M,Ge,null),b(d,KAe,u),b(d,hd,u),e(hd,a2),e(a2,one),g(IM,one,null),e(hd,oBo),e(hd,rne),e(rne,rBo),b(d,ZAe,u),b(d,or,u),g(jM,or,null),e(or,tBo),e(or,pd),e(pd,aBo),e(pd,tne),e(tne,nBo),e(pd,sBo),e(pd,ane),e(ane,lBo),e(pd,iBo),e(or,dBo),e(or,NM),e(NM,cBo),e(NM,nne),e(nne,fBo),e(NM,mBo),e(or,gBo),e(or,Qr),g(DM,Qr,null),e(Qr,hBo),e(Qr,sne),e(sne,pBo),e(Qr,_Bo),e(Qr,_d),e(_d,uBo),e(_d,lne),e(lne,bBo),e(_d,vBo),e(_d,ine),e(ine,TBo),e(_d,FBo),e(Qr,CBo),e(Qr,dne),e(dne,MBo),e(Qr,EBo),g(qM,Qr,null),e(or,yBo),e(or,Oe),g(GM,Oe,null),e(Oe,wBo),e(Oe,cne),e(cne,ABo),e(Oe,LBo),e(Oe,Qa),e(Qa,BBo),e(Qa,fne),e(fne,xBo),e(Qa,kBo),e(Qa,mne),e(mne,RBo),e(Qa,SBo),e(Qa,gne),e(gne,PBo),e(Qa,$Bo),e(Oe,IBo),e(Oe,hne),e(hne,n2),e(n2,pne),e(pne,jBo),e(n2,NBo),e(n2,dj),e(dj,DBo),e(n2,qBo),e(Oe,GBo),e(Oe,s2),e(s2,OBo),e(s2,_ne),e(_ne,XBo),e(s2,zBo),e(s2,une),e(une,VBo),e(Oe,WBo),e(Oe,bne),e(bne,QBo),e(Oe,HBo),g(OM,Oe,null),b(d,e0e,u),b(d,ud,u),e(ud,l2),e(l2,vne),g(XM,vne,null),e(ud,UBo),e(ud,Tne),e(Tne,JBo),b(d,o0e,u),b(d,rr,u),g(zM,rr,null),e(rr,YBo),e(rr,bd),e(bd,KBo),e(bd,Fne),e(Fne,ZBo),e(bd,exo),e(bd,Cne),e(Cne,oxo),e(bd,rxo),e(rr,txo),e(rr,VM),e(VM,axo),e(VM,Mne),e(Mne,nxo),e(VM,sxo),e(rr,lxo),e(rr,Hr),g(WM,Hr,null),e(Hr,ixo),e(Hr,Ene),e(Ene,dxo),e(Hr,cxo),e(Hr,vd),e(vd,fxo),e(vd,yne),e(yne,mxo),e(vd,gxo),e(vd,wne),e(wne,hxo),e(vd,pxo),e(Hr,_xo),e(Hr,Ane),e(Ane,uxo),e(Hr,bxo),g(QM,Hr,null),e(rr,vxo),e(rr,Xe),g(HM,Xe,null),e(Xe,Txo),e(Xe,Lne),e(Lne,Fxo),e(Xe,Cxo),e(Xe,Ha),e(Ha,Mxo),e(Ha,Bne),e(Bne,Exo),e(Ha,yxo),e(Ha,xne),e(xne,wxo),e(Ha,Axo),e(Ha,kne),e(kne,Lxo),e(Ha,Bxo),e(Xe,xxo),e(Xe,ro),e(ro,i2),e(i2,Rne),e(Rne,kxo),e(i2,Rxo),e(i2,cj),e(cj,Sxo),e(i2,Pxo),e(ro,$xo),e(ro,d2),e(d2,Sne),e(Sne,Ixo),e(d2,jxo),e(d2,fj),e(fj,Nxo),e(d2,Dxo),e(ro,qxo),e(ro,c2),e(c2,Pne),e(Pne,Gxo),e(c2,Oxo),e(c2,mj),e(mj,Xxo),e(c2,zxo),e(ro,Vxo),e(ro,f2),e(f2,$ne),e($ne,Wxo),e(f2,Qxo),e(f2,gj),e(gj,Hxo),e(f2,Uxo),e(ro,Jxo),e(ro,m2),e(m2,Ine),e(Ine,Yxo),e(m2,Kxo),e(m2,hj),e(hj,Zxo),e(m2,eko),e(ro,oko),e(ro,g2),e(g2,jne),e(jne,rko),e(g2,tko),e(g2,pj),e(pj,ako),e(g2,nko),e(ro,sko),e(ro,h2),e(h2,Nne),e(Nne,lko),e(h2,iko),e(h2,_j),e(_j,dko),e(h2,cko),e(Xe,fko),e(Xe,p2),e(p2,mko),e(p2,Dne),e(Dne,gko),e(p2,hko),e(p2,qne),e(qne,pko),e(Xe,_ko),e(Xe,Gne),e(Gne,uko),e(Xe,bko),g(UM,Xe,null),b(d,r0e,u),b(d,Td,u),e(Td,_2),e(_2,One),g(JM,One,null),e(Td,vko),e(Td,Xne),e(Xne,Tko),b(d,t0e,u),b(d,tr,u),g(YM,tr,null),e(tr,Fko),e(tr,Fd),e(Fd,Cko),e(Fd,zne),e(zne,Mko),e(Fd,Eko),e(Fd,Vne),e(Vne,yko),e(Fd,wko),e(tr,Ako),e(tr,KM),e(KM,Lko),e(KM,Wne),e(Wne,Bko),e(KM,xko),e(tr,kko),e(tr,Ur),g(ZM,Ur,null),e(Ur,Rko),e(Ur,Qne),e(Qne,Sko),e(Ur,Pko),e(Ur,Cd),e(Cd,$ko),e(Cd,Hne),e(Hne,Iko),e(Cd,jko),e(Cd,Une),e(Une,Nko),e(Cd,Dko),e(Ur,qko),e(Ur,Jne),e(Jne,Gko),e(Ur,Oko),g(eE,Ur,null),e(tr,Xko),e(tr,ze),g(oE,ze,null),e(ze,zko),e(ze,Yne),e(Yne,Vko),e(ze,Wko),e(ze,Ua),e(Ua,Qko),e(Ua,Kne),e(Kne,Hko),e(Ua,Uko),e(Ua,Zne),e(Zne,Jko),e(Ua,Yko),e(Ua,ese),e(ese,Kko),e(Ua,Zko),e(ze,eRo),e(ze,Md),e(Md,u2),e(u2,ose),e(ose,oRo),e(u2,rRo),e(u2,uj),e(uj,tRo),e(u2,aRo),e(Md,nRo),e(Md,b2),e(b2,rse),e(rse,sRo),e(b2,lRo),e(b2,bj),e(bj,iRo),e(b2,dRo),e(Md,cRo),e(Md,v2),e(v2,tse),e(tse,fRo),e(v2,mRo),e(v2,vj),e(vj,gRo),e(v2,hRo),e(ze,pRo),e(ze,T2),e(T2,_Ro),e(T2,ase),e(ase,uRo),e(T2,bRo),e(T2,nse),e(nse,vRo),e(ze,TRo),e(ze,sse),e(sse,FRo),e(ze,CRo),g(rE,ze,null),b(d,a0e,u),b(d,Ed,u),e(Ed,F2),e(F2,lse),g(tE,lse,null),e(Ed,MRo),e(Ed,ise),e(ise,ERo),b(d,n0e,u),b(d,ar,u),g(aE,ar,null),e(ar,yRo),e(ar,yd),e(yd,wRo),e(yd,dse),e(dse,ARo),e(yd,LRo),e(yd,cse),e(cse,BRo),e(yd,xRo),e(ar,kRo),e(ar,nE),e(nE,RRo),e(nE,fse),e(fse,SRo),e(nE,PRo),e(ar,$Ro),e(ar,Jr),g(sE,Jr,null),e(Jr,IRo),e(Jr,mse),e(mse,jRo),e(Jr,NRo),e(Jr,wd),e(wd,DRo),e(wd,gse),e(gse,qRo),e(wd,GRo),e(wd,hse),e(hse,ORo),e(wd,XRo),e(Jr,zRo),e(Jr,pse),e(pse,VRo),e(Jr,WRo),g(lE,Jr,null),e(ar,QRo),e(ar,Ve),g(iE,Ve,null),e(Ve,HRo),e(Ve,_se),e(_se,URo),e(Ve,JRo),e(Ve,Ja),e(Ja,YRo),e(Ja,use),e(use,KRo),e(Ja,ZRo),e(Ja,bse),e(bse,eSo),e(Ja,oSo),e(Ja,vse),e(vse,rSo),e(Ja,tSo),e(Ve,aSo),e(Ve,to),e(to,C2),e(C2,Tse),e(Tse,nSo),e(C2,sSo),e(C2,Tj),e(Tj,lSo),e(C2,iSo),e(to,dSo),e(to,M2),e(M2,Fse),e(Fse,cSo),e(M2,fSo),e(M2,Fj),e(Fj,mSo),e(M2,gSo),e(to,hSo),e(to,E2),e(E2,Cse),e(Cse,pSo),e(E2,_So),e(E2,Cj),e(Cj,uSo),e(E2,bSo),e(to,vSo),e(to,y2),e(y2,Mse),e(Mse,TSo),e(y2,FSo),e(y2,Mj),e(Mj,CSo),e(y2,MSo),e(to,ESo),e(to,w2),e(w2,Ese),e(Ese,ySo),e(w2,wSo),e(w2,Ej),e(Ej,ASo),e(w2,LSo),e(to,BSo),e(to,A2),e(A2,yse),e(yse,xSo),e(A2,kSo),e(A2,yj),e(yj,RSo),e(A2,SSo),e(to,PSo),e(to,L2),e(L2,wse),e(wse,$So),e(L2,ISo),e(L2,wj),e(wj,jSo),e(L2,NSo),e(Ve,DSo),e(Ve,B2),e(B2,qSo),e(B2,Ase),e(Ase,GSo),e(B2,OSo),e(B2,Lse),e(Lse,XSo),e(Ve,zSo),e(Ve,Bse),e(Bse,VSo),e(Ve,WSo),g(dE,Ve,null),b(d,s0e,u),b(d,Ad,u),e(Ad,x2),e(x2,xse),g(cE,xse,null),e(Ad,QSo),e(Ad,kse),e(kse,HSo),b(d,l0e,u),b(d,nr,u),g(fE,nr,null),e(nr,USo),e(nr,Ld),e(Ld,JSo),e(Ld,Rse),e(Rse,YSo),e(Ld,KSo),e(Ld,Sse),e(Sse,ZSo),e(Ld,ePo),e(nr,oPo),e(nr,mE),e(mE,rPo),e(mE,Pse),e(Pse,tPo),e(mE,aPo),e(nr,nPo),e(nr,Yr),g(gE,Yr,null),e(Yr,sPo),e(Yr,$se),e($se,lPo),e(Yr,iPo),e(Yr,Bd),e(Bd,dPo),e(Bd,Ise),e(Ise,cPo),e(Bd,fPo),e(Bd,jse),e(jse,mPo),e(Bd,gPo),e(Yr,hPo),e(Yr,Nse),e(Nse,pPo),e(Yr,_Po),g(hE,Yr,null),e(nr,uPo),e(nr,We),g(pE,We,null),e(We,bPo),e(We,Dse),e(Dse,vPo),e(We,TPo),e(We,Ya),e(Ya,FPo),e(Ya,qse),e(qse,CPo),e(Ya,MPo),e(Ya,Gse),e(Gse,EPo),e(Ya,yPo),e(Ya,Ose),e(Ose,wPo),e(Ya,APo),e(We,LPo),e(We,_E),e(_E,k2),e(k2,Xse),e(Xse,BPo),e(k2,xPo),e(k2,Aj),e(Aj,kPo),e(k2,RPo),e(_E,SPo),e(_E,R2),e(R2,zse),e(zse,PPo),e(R2,$Po),e(R2,Lj),e(Lj,IPo),e(R2,jPo),e(We,NPo),e(We,S2),e(S2,DPo),e(S2,Vse),e(Vse,qPo),e(S2,GPo),e(S2,Wse),e(Wse,OPo),e(We,XPo),e(We,Qse),e(Qse,zPo),e(We,VPo),g(uE,We,null),b(d,i0e,u),b(d,xd,u),e(xd,P2),e(P2,Hse),g(bE,Hse,null),e(xd,WPo),e(xd,Use),e(Use,QPo),b(d,d0e,u),b(d,sr,u),g(vE,sr,null),e(sr,HPo),e(sr,kd),e(kd,UPo),e(kd,Jse),e(Jse,JPo),e(kd,YPo),e(kd,Yse),e(Yse,KPo),e(kd,ZPo),e(sr,e$o),e(sr,TE),e(TE,o$o),e(TE,Kse),e(Kse,r$o),e(TE,t$o),e(sr,a$o),e(sr,Kr),g(FE,Kr,null),e(Kr,n$o),e(Kr,Zse),e(Zse,s$o),e(Kr,l$o),e(Kr,Rd),e(Rd,i$o),e(Rd,ele),e(ele,d$o),e(Rd,c$o),e(Rd,ole),e(ole,f$o),e(Rd,m$o),e(Kr,g$o),e(Kr,rle),e(rle,h$o),e(Kr,p$o),g(CE,Kr,null),e(sr,_$o),e(sr,Qe),g(ME,Qe,null),e(Qe,u$o),e(Qe,tle),e(tle,b$o),e(Qe,v$o),e(Qe,Ka),e(Ka,T$o),e(Ka,ale),e(ale,F$o),e(Ka,C$o),e(Ka,nle),e(nle,M$o),e(Ka,E$o),e(Ka,sle),e(sle,y$o),e(Ka,w$o),e(Qe,A$o),e(Qe,Sd),e(Sd,$2),e($2,lle),e(lle,L$o),e($2,B$o),e($2,Bj),e(Bj,x$o),e($2,k$o),e(Sd,R$o),e(Sd,I2),e(I2,ile),e(ile,S$o),e(I2,P$o),e(I2,xj),e(xj,$$o),e(I2,I$o),e(Sd,j$o),e(Sd,j2),e(j2,dle),e(dle,N$o),e(j2,D$o),e(j2,kj),e(kj,q$o),e(j2,G$o),e(Qe,O$o),e(Qe,N2),e(N2,X$o),e(N2,cle),e(cle,z$o),e(N2,V$o),e(N2,fle),e(fle,W$o),e(Qe,Q$o),e(Qe,mle),e(mle,H$o),e(Qe,U$o),g(EE,Qe,null),b(d,c0e,u),b(d,Pd,u),e(Pd,D2),e(D2,gle),g(yE,gle,null),e(Pd,J$o),e(Pd,hle),e(hle,Y$o),b(d,f0e,u),b(d,lr,u),g(wE,lr,null),e(lr,K$o),e(lr,$d),e($d,Z$o),e($d,ple),e(ple,eIo),e($d,oIo),e($d,_le),e(_le,rIo),e($d,tIo),e(lr,aIo),e(lr,AE),e(AE,nIo),e(AE,ule),e(ule,sIo),e(AE,lIo),e(lr,iIo),e(lr,Zr),g(LE,Zr,null),e(Zr,dIo),e(Zr,ble),e(ble,cIo),e(Zr,fIo),e(Zr,Id),e(Id,mIo),e(Id,vle),e(vle,gIo),e(Id,hIo),e(Id,Tle),e(Tle,pIo),e(Id,_Io),e(Zr,uIo),e(Zr,Fle),e(Fle,bIo),e(Zr,vIo),g(BE,Zr,null),e(lr,TIo),e(lr,He),g(xE,He,null),e(He,FIo),e(He,Cle),e(Cle,CIo),e(He,MIo),e(He,Za),e(Za,EIo),e(Za,Mle),e(Mle,yIo),e(Za,wIo),e(Za,Ele),e(Ele,AIo),e(Za,LIo),e(Za,yle),e(yle,BIo),e(Za,xIo),e(He,kIo),e(He,wle),e(wle,q2),e(q2,Ale),e(Ale,RIo),e(q2,SIo),e(q2,Rj),e(Rj,PIo),e(q2,$Io),e(He,IIo),e(He,G2),e(G2,jIo),e(G2,Lle),e(Lle,NIo),e(G2,DIo),e(G2,Ble),e(Ble,qIo),e(He,GIo),e(He,xle),e(xle,OIo),e(He,XIo),g(kE,He,null),b(d,m0e,u),b(d,jd,u),e(jd,O2),e(O2,kle),g(RE,kle,null),e(jd,zIo),e(jd,Rle),e(Rle,VIo),b(d,g0e,u),b(d,ir,u),g(SE,ir,null),e(ir,WIo),e(ir,Nd),e(Nd,QIo),e(Nd,Sle),e(Sle,HIo),e(Nd,UIo),e(Nd,Ple),e(Ple,JIo),e(Nd,YIo),e(ir,KIo),e(ir,PE),e(PE,ZIo),e(PE,$le),e($le,ejo),e(PE,ojo),e(ir,rjo),e(ir,et),g($E,et,null),e(et,tjo),e(et,Ile),e(Ile,ajo),e(et,njo),e(et,Dd),e(Dd,sjo),e(Dd,jle),e(jle,ljo),e(Dd,ijo),e(Dd,Nle),e(Nle,djo),e(Dd,cjo),e(et,fjo),e(et,Dle),e(Dle,mjo),e(et,gjo),g(IE,et,null),e(ir,hjo),e(ir,Ue),g(jE,Ue,null),e(Ue,pjo),e(Ue,qle),e(qle,_jo),e(Ue,ujo),e(Ue,en),e(en,bjo),e(en,Gle),e(Gle,vjo),e(en,Tjo),e(en,Ole),e(Ole,Fjo),e(en,Cjo),e(en,Xle),e(Xle,Mjo),e(en,Ejo),e(Ue,yjo),e(Ue,zle),e(zle,X2),e(X2,Vle),e(Vle,wjo),e(X2,Ajo),e(X2,Sj),e(Sj,Ljo),e(X2,Bjo),e(Ue,xjo),e(Ue,z2),e(z2,kjo),e(z2,Wle),e(Wle,Rjo),e(z2,Sjo),e(z2,Qle),e(Qle,Pjo),e(Ue,$jo),e(Ue,Hle),e(Hle,Ijo),e(Ue,jjo),g(NE,Ue,null),b(d,h0e,u),b(d,qd,u),e(qd,V2),e(V2,Ule),g(DE,Ule,null),e(qd,Njo),e(qd,Jle),e(Jle,Djo),b(d,p0e,u),b(d,dr,u),g(qE,dr,null),e(dr,qjo),e(dr,Gd),e(Gd,Gjo),e(Gd,Yle),e(Yle,Ojo),e(Gd,Xjo),e(Gd,Kle),e(Kle,zjo),e(Gd,Vjo),e(dr,Wjo),e(dr,GE),e(GE,Qjo),e(GE,Zle),e(Zle,Hjo),e(GE,Ujo),e(dr,Jjo),e(dr,ot),g(OE,ot,null),e(ot,Yjo),e(ot,eie),e(eie,Kjo),e(ot,Zjo),e(ot,Od),e(Od,eNo),e(Od,oie),e(oie,oNo),e(Od,rNo),e(Od,rie),e(rie,tNo),e(Od,aNo),e(ot,nNo),e(ot,tie),e(tie,sNo),e(ot,lNo),g(XE,ot,null),e(dr,iNo),e(dr,Je),g(zE,Je,null),e(Je,dNo),e(Je,aie),e(aie,cNo),e(Je,fNo),e(Je,on),e(on,mNo),e(on,nie),e(nie,gNo),e(on,hNo),e(on,sie),e(sie,pNo),e(on,_No),e(on,lie),e(lie,uNo),e(on,bNo),e(Je,vNo),e(Je,VE),e(VE,W2),e(W2,iie),e(iie,TNo),e(W2,FNo),e(W2,Pj),e(Pj,CNo),e(W2,MNo),e(VE,ENo),e(VE,Q2),e(Q2,die),e(die,yNo),e(Q2,wNo),e(Q2,$j),e($j,ANo),e(Q2,LNo),e(Je,BNo),e(Je,H2),e(H2,xNo),e(H2,cie),e(cie,kNo),e(H2,RNo),e(H2,fie),e(fie,SNo),e(Je,PNo),e(Je,mie),e(mie,$No),e(Je,INo),g(WE,Je,null),b(d,_0e,u),b(d,Xd,u),e(Xd,U2),e(U2,gie),g(QE,gie,null),e(Xd,jNo),e(Xd,hie),e(hie,NNo),b(d,u0e,u),b(d,cr,u),g(HE,cr,null),e(cr,DNo),e(cr,zd),e(zd,qNo),e(zd,pie),e(pie,GNo),e(zd,ONo),e(zd,_ie),e(_ie,XNo),e(zd,zNo),e(cr,VNo),e(cr,UE),e(UE,WNo),e(UE,uie),e(uie,QNo),e(UE,HNo),e(cr,UNo),e(cr,rt),g(JE,rt,null),e(rt,JNo),e(rt,bie),e(bie,YNo),e(rt,KNo),e(rt,Vd),e(Vd,ZNo),e(Vd,vie),e(vie,eDo),e(Vd,oDo),e(Vd,Tie),e(Tie,rDo),e(Vd,tDo),e(rt,aDo),e(rt,Fie),e(Fie,nDo),e(rt,sDo),g(YE,rt,null),e(cr,lDo),e(cr,fo),g(KE,fo,null),e(fo,iDo),e(fo,Cie),e(Cie,dDo),e(fo,cDo),e(fo,rn),e(rn,fDo),e(rn,Mie),e(Mie,mDo),e(rn,gDo),e(rn,Eie),e(Eie,hDo),e(rn,pDo),e(rn,yie),e(yie,_Do),e(rn,uDo),e(fo,bDo),e(fo,B),e(B,J2),e(J2,wie),e(wie,vDo),e(J2,TDo),e(J2,Ij),e(Ij,FDo),e(J2,CDo),e(B,MDo),e(B,Y2),e(Y2,Aie),e(Aie,EDo),e(Y2,yDo),e(Y2,jj),e(jj,wDo),e(Y2,ADo),e(B,LDo),e(B,K2),e(K2,Lie),e(Lie,BDo),e(K2,xDo),e(K2,Nj),e(Nj,kDo),e(K2,RDo),e(B,SDo),e(B,Z2),e(Z2,Bie),e(Bie,PDo),e(Z2,$Do),e(Z2,Dj),e(Dj,IDo),e(Z2,jDo),e(B,NDo),e(B,ev),e(ev,xie),e(xie,DDo),e(ev,qDo),e(ev,qj),e(qj,GDo),e(ev,ODo),e(B,XDo),e(B,ov),e(ov,kie),e(kie,zDo),e(ov,VDo),e(ov,Gj),e(Gj,WDo),e(ov,QDo),e(B,HDo),e(B,rv),e(rv,Rie),e(Rie,UDo),e(rv,JDo),e(rv,Oj),e(Oj,YDo),e(rv,KDo),e(B,ZDo),e(B,tv),e(tv,Sie),e(Sie,eqo),e(tv,oqo),e(tv,Xj),e(Xj,rqo),e(tv,tqo),e(B,aqo),e(B,av),e(av,Pie),e(Pie,nqo),e(av,sqo),e(av,zj),e(zj,lqo),e(av,iqo),e(B,dqo),e(B,nv),e(nv,$ie),e($ie,cqo),e(nv,fqo),e(nv,Vj),e(Vj,mqo),e(nv,gqo),e(B,hqo),e(B,sv),e(sv,Iie),e(Iie,pqo),e(sv,_qo),e(sv,Wj),e(Wj,uqo),e(sv,bqo),e(B,vqo),e(B,lv),e(lv,jie),e(jie,Tqo),e(lv,Fqo),e(lv,Qj),e(Qj,Cqo),e(lv,Mqo),e(B,Eqo),e(B,iv),e(iv,Nie),e(Nie,yqo),e(iv,wqo),e(iv,Hj),e(Hj,Aqo),e(iv,Lqo),e(B,Bqo),e(B,dv),e(dv,Die),e(Die,xqo),e(dv,kqo),e(dv,Uj),e(Uj,Rqo),e(dv,Sqo),e(B,Pqo),e(B,cv),e(cv,qie),e(qie,$qo),e(cv,Iqo),e(cv,Jj),e(Jj,jqo),e(cv,Nqo),e(B,Dqo),e(B,Ls),e(Ls,Gie),e(Gie,qqo),e(Ls,Gqo),e(Ls,Yj),e(Yj,Oqo),e(Ls,Xqo),e(Ls,Kj),e(Kj,zqo),e(Ls,Vqo),e(B,Wqo),e(B,fv),e(fv,Oie),e(Oie,Qqo),e(fv,Hqo),e(fv,Zj),e(Zj,Uqo),e(fv,Jqo),e(B,Yqo),e(B,mv),e(mv,Xie),e(Xie,Kqo),e(mv,Zqo),e(mv,eN),e(eN,eGo),e(mv,oGo),e(B,rGo),e(B,gv),e(gv,zie),e(zie,tGo),e(gv,aGo),e(gv,oN),e(oN,nGo),e(gv,sGo),e(B,lGo),e(B,hv),e(hv,Vie),e(Vie,iGo),e(hv,dGo),e(hv,rN),e(rN,cGo),e(hv,fGo),e(B,mGo),e(B,pv),e(pv,Wie),e(Wie,gGo),e(pv,hGo),e(pv,tN),e(tN,pGo),e(pv,_Go),e(B,uGo),e(B,_v),e(_v,Qie),e(Qie,bGo),e(_v,vGo),e(_v,aN),e(aN,TGo),e(_v,FGo),e(B,CGo),e(B,uv),e(uv,Hie),e(Hie,MGo),e(uv,EGo),e(uv,nN),e(nN,yGo),e(uv,wGo),e(B,AGo),e(B,bv),e(bv,Uie),e(Uie,LGo),e(bv,BGo),e(bv,sN),e(sN,xGo),e(bv,kGo),e(B,RGo),e(B,vv),e(vv,Jie),e(Jie,SGo),e(vv,PGo),e(vv,lN),e(lN,$Go),e(vv,IGo),e(B,jGo),e(B,Tv),e(Tv,Yie),e(Yie,NGo),e(Tv,DGo),e(Tv,iN),e(iN,qGo),e(Tv,GGo),e(B,OGo),e(B,Fv),e(Fv,Kie),e(Kie,XGo),e(Fv,zGo),e(Fv,dN),e(dN,VGo),e(Fv,WGo),e(B,QGo),e(B,Cv),e(Cv,Zie),e(Zie,HGo),e(Cv,UGo),e(Cv,cN),e(cN,JGo),e(Cv,YGo),e(B,KGo),e(B,Mv),e(Mv,ede),e(ede,ZGo),e(Mv,eOo),e(Mv,fN),e(fN,oOo),e(Mv,rOo),e(B,tOo),e(B,Ev),e(Ev,ode),e(ode,aOo),e(Ev,nOo),e(Ev,mN),e(mN,sOo),e(Ev,lOo),e(B,iOo),e(B,yv),e(yv,rde),e(rde,dOo),e(yv,cOo),e(yv,gN),e(gN,fOo),e(yv,mOo),e(B,gOo),e(B,wv),e(wv,tde),e(tde,hOo),e(wv,pOo),e(wv,hN),e(hN,_Oo),e(wv,uOo),e(B,bOo),e(B,Av),e(Av,ade),e(ade,vOo),e(Av,TOo),e(Av,pN),e(pN,FOo),e(Av,COo),e(B,MOo),e(B,Lv),e(Lv,nde),e(nde,EOo),e(Lv,yOo),e(Lv,_N),e(_N,wOo),e(Lv,AOo),e(B,LOo),e(B,Bv),e(Bv,sde),e(sde,BOo),e(Bv,xOo),e(Bv,uN),e(uN,kOo),e(Bv,ROo),e(B,SOo),e(B,xv),e(xv,lde),e(lde,POo),e(xv,$Oo),e(xv,bN),e(bN,IOo),e(xv,jOo),e(B,NOo),e(B,kv),e(kv,ide),e(ide,DOo),e(kv,qOo),e(kv,vN),e(vN,GOo),e(kv,OOo),e(B,XOo),e(B,Rv),e(Rv,dde),e(dde,zOo),e(Rv,VOo),e(Rv,TN),e(TN,WOo),e(Rv,QOo),e(B,HOo),e(B,Sv),e(Sv,cde),e(cde,UOo),e(Sv,JOo),e(Sv,FN),e(FN,YOo),e(Sv,KOo),e(B,ZOo),e(B,Pv),e(Pv,fde),e(fde,eXo),e(Pv,oXo),e(Pv,CN),e(CN,rXo),e(Pv,tXo),e(B,aXo),e(B,$v),e($v,mde),e(mde,nXo),e($v,sXo),e($v,MN),e(MN,lXo),e($v,iXo),e(fo,dXo),e(fo,gde),e(gde,cXo),e(fo,fXo),g(ZE,fo,null),b(d,b0e,u),b(d,Wd,u),e(Wd,Iv),e(Iv,hde),g(e3,hde,null),e(Wd,mXo),e(Wd,pde),e(pde,gXo),b(d,v0e,u),b(d,fr,u),g(o3,fr,null),e(fr,hXo),e(fr,Qd),e(Qd,pXo),e(Qd,_de),e(_de,_Xo),e(Qd,uXo),e(Qd,ude),e(ude,bXo),e(Qd,vXo),e(fr,TXo),e(fr,r3),e(r3,FXo),e(r3,bde),e(bde,CXo),e(r3,MXo),e(fr,EXo),e(fr,tt),g(t3,tt,null),e(tt,yXo),e(tt,vde),e(vde,wXo),e(tt,AXo),e(tt,Hd),e(Hd,LXo),e(Hd,Tde),e(Tde,BXo),e(Hd,xXo),e(Hd,Fde),e(Fde,kXo),e(Hd,RXo),e(tt,SXo),e(tt,Cde),e(Cde,PXo),e(tt,$Xo),g(a3,tt,null),e(fr,IXo),e(fr,mo),g(n3,mo,null),e(mo,jXo),e(mo,Mde),e(Mde,NXo),e(mo,DXo),e(mo,tn),e(tn,qXo),e(tn,Ede),e(Ede,GXo),e(tn,OXo),e(tn,yde),e(yde,XXo),e(tn,zXo),e(tn,wde),e(wde,VXo),e(tn,WXo),e(mo,QXo),e(mo,H),e(H,jv),e(jv,Ade),e(Ade,HXo),e(jv,UXo),e(jv,EN),e(EN,JXo),e(jv,YXo),e(H,KXo),e(H,Nv),e(Nv,Lde),e(Lde,ZXo),e(Nv,ezo),e(Nv,yN),e(yN,ozo),e(Nv,rzo),e(H,tzo),e(H,Dv),e(Dv,Bde),e(Bde,azo),e(Dv,nzo),e(Dv,wN),e(wN,szo),e(Dv,lzo),e(H,izo),e(H,qv),e(qv,xde),e(xde,dzo),e(qv,czo),e(qv,AN),e(AN,fzo),e(qv,mzo),e(H,gzo),e(H,Gv),e(Gv,kde),e(kde,hzo),e(Gv,pzo),e(Gv,LN),e(LN,_zo),e(Gv,uzo),e(H,bzo),e(H,Ov),e(Ov,Rde),e(Rde,vzo),e(Ov,Tzo),e(Ov,BN),e(BN,Fzo),e(Ov,Czo),e(H,Mzo),e(H,Xv),e(Xv,Sde),e(Sde,Ezo),e(Xv,yzo),e(Xv,xN),e(xN,wzo),e(Xv,Azo),e(H,Lzo),e(H,zv),e(zv,Pde),e(Pde,Bzo),e(zv,xzo),e(zv,kN),e(kN,kzo),e(zv,Rzo),e(H,Szo),e(H,Vv),e(Vv,$de),e($de,Pzo),e(Vv,$zo),e(Vv,RN),e(RN,Izo),e(Vv,jzo),e(H,Nzo),e(H,Wv),e(Wv,Ide),e(Ide,Dzo),e(Wv,qzo),e(Wv,SN),e(SN,Gzo),e(Wv,Ozo),e(H,Xzo),e(H,Qv),e(Qv,jde),e(jde,zzo),e(Qv,Vzo),e(Qv,PN),e(PN,Wzo),e(Qv,Qzo),e(H,Hzo),e(H,Hv),e(Hv,Nde),e(Nde,Uzo),e(Hv,Jzo),e(Hv,$N),e($N,Yzo),e(Hv,Kzo),e(H,Zzo),e(H,Uv),e(Uv,Dde),e(Dde,eVo),e(Uv,oVo),e(Uv,IN),e(IN,rVo),e(Uv,tVo),e(H,aVo),e(H,Jv),e(Jv,qde),e(qde,nVo),e(Jv,sVo),e(Jv,jN),e(jN,lVo),e(Jv,iVo),e(H,dVo),e(H,Yv),e(Yv,Gde),e(Gde,cVo),e(Yv,fVo),e(Yv,NN),e(NN,mVo),e(Yv,gVo),e(H,hVo),e(H,Kv),e(Kv,Ode),e(Ode,pVo),e(Kv,_Vo),e(Kv,DN),e(DN,uVo),e(Kv,bVo),e(H,vVo),e(H,Zv),e(Zv,Xde),e(Xde,TVo),e(Zv,FVo),e(Zv,qN),e(qN,CVo),e(Zv,MVo),e(H,EVo),e(H,e6),e(e6,zde),e(zde,yVo),e(e6,wVo),e(e6,GN),e(GN,AVo),e(e6,LVo),e(H,BVo),e(H,o6),e(o6,Vde),e(Vde,xVo),e(o6,kVo),e(o6,ON),e(ON,RVo),e(o6,SVo),e(H,PVo),e(H,r6),e(r6,Wde),e(Wde,$Vo),e(r6,IVo),e(r6,XN),e(XN,jVo),e(r6,NVo),e(H,DVo),e(H,t6),e(t6,Qde),e(Qde,qVo),e(t6,GVo),e(t6,zN),e(zN,OVo),e(t6,XVo),e(H,zVo),e(H,a6),e(a6,Hde),e(Hde,VVo),e(a6,WVo),e(a6,VN),e(VN,QVo),e(a6,HVo),e(mo,UVo),e(mo,Ude),e(Ude,JVo),e(mo,YVo),g(s3,mo,null),b(d,T0e,u),b(d,Ud,u),e(Ud,n6),e(n6,Jde),g(l3,Jde,null),e(Ud,KVo),e(Ud,Yde),e(Yde,ZVo),b(d,F0e,u),b(d,mr,u),g(i3,mr,null),e(mr,eWo),e(mr,Jd),e(Jd,oWo),e(Jd,Kde),e(Kde,rWo),e(Jd,tWo),e(Jd,Zde),e(Zde,aWo),e(Jd,nWo),e(mr,sWo),e(mr,d3),e(d3,lWo),e(d3,ece),e(ece,iWo),e(d3,dWo),e(mr,cWo),e(mr,at),g(c3,at,null),e(at,fWo),e(at,oce),e(oce,mWo),e(at,gWo),e(at,Yd),e(Yd,hWo),e(Yd,rce),e(rce,pWo),e(Yd,_Wo),e(Yd,tce),e(tce,uWo),e(Yd,bWo),e(at,vWo),e(at,ace),e(ace,TWo),e(at,FWo),g(f3,at,null),e(mr,CWo),e(mr,go),g(m3,go,null),e(go,MWo),e(go,nce),e(nce,EWo),e(go,yWo),e(go,an),e(an,wWo),e(an,sce),e(sce,AWo),e(an,LWo),e(an,lce),e(lce,BWo),e(an,xWo),e(an,ice),e(ice,kWo),e(an,RWo),e(go,SWo),e(go,he),e(he,s6),e(s6,dce),e(dce,PWo),e(s6,$Wo),e(s6,WN),e(WN,IWo),e(s6,jWo),e(he,NWo),e(he,l6),e(l6,cce),e(cce,DWo),e(l6,qWo),e(l6,QN),e(QN,GWo),e(l6,OWo),e(he,XWo),e(he,i6),e(i6,fce),e(fce,zWo),e(i6,VWo),e(i6,HN),e(HN,WWo),e(i6,QWo),e(he,HWo),e(he,d6),e(d6,mce),e(mce,UWo),e(d6,JWo),e(d6,UN),e(UN,YWo),e(d6,KWo),e(he,ZWo),e(he,c6),e(c6,gce),e(gce,eQo),e(c6,oQo),e(c6,JN),e(JN,rQo),e(c6,tQo),e(he,aQo),e(he,f6),e(f6,hce),e(hce,nQo),e(f6,sQo),e(f6,YN),e(YN,lQo),e(f6,iQo),e(he,dQo),e(he,m6),e(m6,pce),e(pce,cQo),e(m6,fQo),e(m6,KN),e(KN,mQo),e(m6,gQo),e(he,hQo),e(he,g6),e(g6,_ce),e(_ce,pQo),e(g6,_Qo),e(g6,ZN),e(ZN,uQo),e(g6,bQo),e(he,vQo),e(he,h6),e(h6,uce),e(uce,TQo),e(h6,FQo),e(h6,eD),e(eD,CQo),e(h6,MQo),e(he,EQo),e(he,p6),e(p6,bce),e(bce,yQo),e(p6,wQo),e(p6,oD),e(oD,AQo),e(p6,LQo),e(go,BQo),e(go,vce),e(vce,xQo),e(go,kQo),g(g3,go,null),b(d,C0e,u),b(d,Kd,u),e(Kd,_6),e(_6,Tce),g(h3,Tce,null),e(Kd,RQo),e(Kd,Fce),e(Fce,SQo),b(d,M0e,u),b(d,gr,u),g(p3,gr,null),e(gr,PQo),e(gr,Zd),e(Zd,$Qo),e(Zd,Cce),e(Cce,IQo),e(Zd,jQo),e(Zd,Mce),e(Mce,NQo),e(Zd,DQo),e(gr,qQo),e(gr,_3),e(_3,GQo),e(_3,Ece),e(Ece,OQo),e(_3,XQo),e(gr,zQo),e(gr,nt),g(u3,nt,null),e(nt,VQo),e(nt,yce),e(yce,WQo),e(nt,QQo),e(nt,ec),e(ec,HQo),e(ec,wce),e(wce,UQo),e(ec,JQo),e(ec,Ace),e(Ace,YQo),e(ec,KQo),e(nt,ZQo),e(nt,Lce),e(Lce,eHo),e(nt,oHo),g(b3,nt,null),e(gr,rHo),e(gr,ho),g(v3,ho,null),e(ho,tHo),e(ho,Bce),e(Bce,aHo),e(ho,nHo),e(ho,nn),e(nn,sHo),e(nn,xce),e(xce,lHo),e(nn,iHo),e(nn,kce),e(kce,dHo),e(nn,cHo),e(nn,Rce),e(Rce,fHo),e(nn,mHo),e(ho,gHo),e(ho,Sce),e(Sce,u6),e(u6,Pce),e(Pce,hHo),e(u6,pHo),e(u6,rD),e(rD,_Ho),e(u6,uHo),e(ho,bHo),e(ho,$ce),e($ce,vHo),e(ho,THo),g(T3,ho,null),b(d,E0e,u),b(d,oc,u),e(oc,b6),e(b6,Ice),g(F3,Ice,null),e(oc,FHo),e(oc,jce),e(jce,CHo),b(d,y0e,u),b(d,hr,u),g(C3,hr,null),e(hr,MHo),e(hr,rc),e(rc,EHo),e(rc,Nce),e(Nce,yHo),e(rc,wHo),e(rc,Dce),e(Dce,AHo),e(rc,LHo),e(hr,BHo),e(hr,M3),e(M3,xHo),e(M3,qce),e(qce,kHo),e(M3,RHo),e(hr,SHo),e(hr,st),g(E3,st,null),e(st,PHo),e(st,Gce),e(Gce,$Ho),e(st,IHo),e(st,tc),e(tc,jHo),e(tc,Oce),e(Oce,NHo),e(tc,DHo),e(tc,Xce),e(Xce,qHo),e(tc,GHo),e(st,OHo),e(st,zce),e(zce,XHo),e(st,zHo),g(y3,st,null),e(hr,VHo),e(hr,po),g(w3,po,null),e(po,WHo),e(po,Vce),e(Vce,QHo),e(po,HHo),e(po,sn),e(sn,UHo),e(sn,Wce),e(Wce,JHo),e(sn,YHo),e(sn,Qce),e(Qce,KHo),e(sn,ZHo),e(sn,Hce),e(Hce,eUo),e(sn,oUo),e(po,rUo),e(po,Y),e(Y,v6),e(v6,Uce),e(Uce,tUo),e(v6,aUo),e(v6,tD),e(tD,nUo),e(v6,sUo),e(Y,lUo),e(Y,T6),e(T6,Jce),e(Jce,iUo),e(T6,dUo),e(T6,aD),e(aD,cUo),e(T6,fUo),e(Y,mUo),e(Y,F6),e(F6,Yce),e(Yce,gUo),e(F6,hUo),e(F6,nD),e(nD,pUo),e(F6,_Uo),e(Y,uUo),e(Y,C6),e(C6,Kce),e(Kce,bUo),e(C6,vUo),e(C6,sD),e(sD,TUo),e(C6,FUo),e(Y,CUo),e(Y,M6),e(M6,Zce),e(Zce,MUo),e(M6,EUo),e(M6,lD),e(lD,yUo),e(M6,wUo),e(Y,AUo),e(Y,E6),e(E6,efe),e(efe,LUo),e(E6,BUo),e(E6,iD),e(iD,xUo),e(E6,kUo),e(Y,RUo),e(Y,y6),e(y6,ofe),e(ofe,SUo),e(y6,PUo),e(y6,dD),e(dD,$Uo),e(y6,IUo),e(Y,jUo),e(Y,w6),e(w6,rfe),e(rfe,NUo),e(w6,DUo),e(w6,cD),e(cD,qUo),e(w6,GUo),e(Y,OUo),e(Y,A6),e(A6,tfe),e(tfe,XUo),e(A6,zUo),e(A6,fD),e(fD,VUo),e(A6,WUo),e(Y,QUo),e(Y,L6),e(L6,afe),e(afe,HUo),e(L6,UUo),e(L6,mD),e(mD,JUo),e(L6,YUo),e(Y,KUo),e(Y,B6),e(B6,nfe),e(nfe,ZUo),e(B6,eJo),e(B6,gD),e(gD,oJo),e(B6,rJo),e(Y,tJo),e(Y,x6),e(x6,sfe),e(sfe,aJo),e(x6,nJo),e(x6,hD),e(hD,sJo),e(x6,lJo),e(Y,iJo),e(Y,k6),e(k6,lfe),e(lfe,dJo),e(k6,cJo),e(k6,pD),e(pD,fJo),e(k6,mJo),e(Y,gJo),e(Y,R6),e(R6,ife),e(ife,hJo),e(R6,pJo),e(R6,_D),e(_D,_Jo),e(R6,uJo),e(Y,bJo),e(Y,S6),e(S6,dfe),e(dfe,vJo),e(S6,TJo),e(S6,uD),e(uD,FJo),e(S6,CJo),e(Y,MJo),e(Y,P6),e(P6,cfe),e(cfe,EJo),e(P6,yJo),e(P6,bD),e(bD,wJo),e(P6,AJo),e(Y,LJo),e(Y,$6),e($6,ffe),e(ffe,BJo),e($6,xJo),e($6,vD),e(vD,kJo),e($6,RJo),e(Y,SJo),e(Y,I6),e(I6,mfe),e(mfe,PJo),e(I6,$Jo),e(I6,TD),e(TD,IJo),e(I6,jJo),e(Y,NJo),e(Y,j6),e(j6,gfe),e(gfe,DJo),e(j6,qJo),e(j6,FD),e(FD,GJo),e(j6,OJo),e(Y,XJo),e(Y,N6),e(N6,hfe),e(hfe,zJo),e(N6,VJo),e(N6,CD),e(CD,WJo),e(N6,QJo),e(po,HJo),e(po,pfe),e(pfe,UJo),e(po,JJo),g(A3,po,null),b(d,w0e,u),b(d,ac,u),e(ac,D6),e(D6,_fe),g(L3,_fe,null),e(ac,YJo),e(ac,ufe),e(ufe,KJo),b(d,A0e,u),b(d,pr,u),g(B3,pr,null),e(pr,ZJo),e(pr,nc),e(nc,eYo),e(nc,bfe),e(bfe,oYo),e(nc,rYo),e(nc,vfe),e(vfe,tYo),e(nc,aYo),e(pr,nYo),e(pr,x3),e(x3,sYo),e(x3,Tfe),e(Tfe,lYo),e(x3,iYo),e(pr,dYo),e(pr,lt),g(k3,lt,null),e(lt,cYo),e(lt,Ffe),e(Ffe,fYo),e(lt,mYo),e(lt,sc),e(sc,gYo),e(sc,Cfe),e(Cfe,hYo),e(sc,pYo),e(sc,Mfe),e(Mfe,_Yo),e(sc,uYo),e(lt,bYo),e(lt,Efe),e(Efe,vYo),e(lt,TYo),g(R3,lt,null),e(pr,FYo),e(pr,_o),g(S3,_o,null),e(_o,CYo),e(_o,yfe),e(yfe,MYo),e(_o,EYo),e(_o,ln),e(ln,yYo),e(ln,wfe),e(wfe,wYo),e(ln,AYo),e(ln,Afe),e(Afe,LYo),e(ln,BYo),e(ln,Lfe),e(Lfe,xYo),e(ln,kYo),e(_o,RYo),e(_o,pe),e(pe,q6),e(q6,Bfe),e(Bfe,SYo),e(q6,PYo),e(q6,MD),e(MD,$Yo),e(q6,IYo),e(pe,jYo),e(pe,G6),e(G6,xfe),e(xfe,NYo),e(G6,DYo),e(G6,ED),e(ED,qYo),e(G6,GYo),e(pe,OYo),e(pe,O6),e(O6,kfe),e(kfe,XYo),e(O6,zYo),e(O6,yD),e(yD,VYo),e(O6,WYo),e(pe,QYo),e(pe,X6),e(X6,Rfe),e(Rfe,HYo),e(X6,UYo),e(X6,wD),e(wD,JYo),e(X6,YYo),e(pe,KYo),e(pe,z6),e(z6,Sfe),e(Sfe,ZYo),e(z6,eKo),e(z6,AD),e(AD,oKo),e(z6,rKo),e(pe,tKo),e(pe,V6),e(V6,Pfe),e(Pfe,aKo),e(V6,nKo),e(V6,LD),e(LD,sKo),e(V6,lKo),e(pe,iKo),e(pe,W6),e(W6,$fe),e($fe,dKo),e(W6,cKo),e(W6,BD),e(BD,fKo),e(W6,mKo),e(pe,gKo),e(pe,Q6),e(Q6,Ife),e(Ife,hKo),e(Q6,pKo),e(Q6,xD),e(xD,_Ko),e(Q6,uKo),e(pe,bKo),e(pe,H6),e(H6,jfe),e(jfe,vKo),e(H6,TKo),e(H6,kD),e(kD,FKo),e(H6,CKo),e(pe,MKo),e(pe,U6),e(U6,Nfe),e(Nfe,EKo),e(U6,yKo),e(U6,RD),e(RD,wKo),e(U6,AKo),e(_o,LKo),e(_o,Dfe),e(Dfe,BKo),e(_o,xKo),g(P3,_o,null),b(d,L0e,u),b(d,lc,u),e(lc,J6),e(J6,qfe),g($3,qfe,null),e(lc,kKo),e(lc,Gfe),e(Gfe,RKo),b(d,B0e,u),b(d,_r,u),g(I3,_r,null),e(_r,SKo),e(_r,ic),e(ic,PKo),e(ic,Ofe),e(Ofe,$Ko),e(ic,IKo),e(ic,Xfe),e(Xfe,jKo),e(ic,NKo),e(_r,DKo),e(_r,j3),e(j3,qKo),e(j3,zfe),e(zfe,GKo),e(j3,OKo),e(_r,XKo),e(_r,it),g(N3,it,null),e(it,zKo),e(it,Vfe),e(Vfe,VKo),e(it,WKo),e(it,dc),e(dc,QKo),e(dc,Wfe),e(Wfe,HKo),e(dc,UKo),e(dc,Qfe),e(Qfe,JKo),e(dc,YKo),e(it,KKo),e(it,Hfe),e(Hfe,ZKo),e(it,eZo),g(D3,it,null),e(_r,oZo),e(_r,uo),g(q3,uo,null),e(uo,rZo),e(uo,Ufe),e(Ufe,tZo),e(uo,aZo),e(uo,dn),e(dn,nZo),e(dn,Jfe),e(Jfe,sZo),e(dn,lZo),e(dn,Yfe),e(Yfe,iZo),e(dn,dZo),e(dn,Kfe),e(Kfe,cZo),e(dn,fZo),e(uo,mZo),e(uo,X),e(X,Y6),e(Y6,Zfe),e(Zfe,gZo),e(Y6,hZo),e(Y6,SD),e(SD,pZo),e(Y6,_Zo),e(X,uZo),e(X,K6),e(K6,eme),e(eme,bZo),e(K6,vZo),e(K6,PD),e(PD,TZo),e(K6,FZo),e(X,CZo),e(X,Z6),e(Z6,ome),e(ome,MZo),e(Z6,EZo),e(Z6,$D),e($D,yZo),e(Z6,wZo),e(X,AZo),e(X,eT),e(eT,rme),e(rme,LZo),e(eT,BZo),e(eT,ID),e(ID,xZo),e(eT,kZo),e(X,RZo),e(X,oT),e(oT,tme),e(tme,SZo),e(oT,PZo),e(oT,jD),e(jD,$Zo),e(oT,IZo),e(X,jZo),e(X,rT),e(rT,ame),e(ame,NZo),e(rT,DZo),e(rT,ND),e(ND,qZo),e(rT,GZo),e(X,OZo),e(X,tT),e(tT,nme),e(nme,XZo),e(tT,zZo),e(tT,DD),e(DD,VZo),e(tT,WZo),e(X,QZo),e(X,aT),e(aT,sme),e(sme,HZo),e(aT,UZo),e(aT,qD),e(qD,JZo),e(aT,YZo),e(X,KZo),e(X,nT),e(nT,lme),e(lme,ZZo),e(nT,eer),e(nT,GD),e(GD,oer),e(nT,rer),e(X,ter),e(X,sT),e(sT,ime),e(ime,aer),e(sT,ner),e(sT,OD),e(OD,ser),e(sT,ler),e(X,ier),e(X,lT),e(lT,dme),e(dme,der),e(lT,cer),e(lT,XD),e(XD,fer),e(lT,mer),e(X,ger),e(X,iT),e(iT,cme),e(cme,her),e(iT,per),e(iT,zD),e(zD,_er),e(iT,uer),e(X,ber),e(X,dT),e(dT,fme),e(fme,ver),e(dT,Ter),e(dT,VD),e(VD,Fer),e(dT,Cer),e(X,Mer),e(X,cT),e(cT,mme),e(mme,Eer),e(cT,yer),e(cT,WD),e(WD,wer),e(cT,Aer),e(X,Ler),e(X,fT),e(fT,gme),e(gme,Ber),e(fT,xer),e(fT,QD),e(QD,ker),e(fT,Rer),e(X,Ser),e(X,mT),e(mT,hme),e(hme,Per),e(mT,$er),e(mT,HD),e(HD,Ier),e(mT,jer),e(X,Ner),e(X,gT),e(gT,pme),e(pme,Der),e(gT,qer),e(gT,UD),e(UD,Ger),e(gT,Oer),e(X,Xer),e(X,hT),e(hT,_me),e(_me,zer),e(hT,Ver),e(hT,JD),e(JD,Wer),e(hT,Qer),e(X,Her),e(X,pT),e(pT,ume),e(ume,Uer),e(pT,Jer),e(pT,YD),e(YD,Yer),e(pT,Ker),e(X,Zer),e(X,_T),e(_T,bme),e(bme,eor),e(_T,oor),e(_T,KD),e(KD,ror),e(_T,tor),e(X,aor),e(X,uT),e(uT,vme),e(vme,nor),e(uT,sor),e(uT,ZD),e(ZD,lor),e(uT,ior),e(X,dor),e(X,bT),e(bT,Tme),e(Tme,cor),e(bT,mor),e(bT,eq),e(eq,gor),e(bT,hor),e(X,por),e(X,vT),e(vT,Fme),e(Fme,_or),e(vT,uor),e(vT,oq),e(oq,bor),e(vT,vor),e(X,Tor),e(X,TT),e(TT,Cme),e(Cme,For),e(TT,Cor),e(TT,rq),e(rq,Mor),e(TT,Eor),e(X,yor),e(X,FT),e(FT,Mme),e(Mme,wor),e(FT,Aor),e(FT,tq),e(tq,Lor),e(FT,Bor),e(uo,xor),e(uo,Eme),e(Eme,kor),e(uo,Ror),g(G3,uo,null),b(d,x0e,u),b(d,cc,u),e(cc,CT),e(CT,yme),g(O3,yme,null),e(cc,Sor),e(cc,wme),e(wme,Por),b(d,k0e,u),b(d,ur,u),g(X3,ur,null),e(ur,$or),e(ur,fc),e(fc,Ior),e(fc,Ame),e(Ame,jor),e(fc,Nor),e(fc,Lme),e(Lme,Dor),e(fc,qor),e(ur,Gor),e(ur,z3),e(z3,Oor),e(z3,Bme),e(Bme,Xor),e(z3,zor),e(ur,Vor),e(ur,dt),g(V3,dt,null),e(dt,Wor),e(dt,xme),e(xme,Qor),e(dt,Hor),e(dt,mc),e(mc,Uor),e(mc,kme),e(kme,Jor),e(mc,Yor),e(mc,Rme),e(Rme,Kor),e(mc,Zor),e(dt,err),e(dt,Sme),e(Sme,orr),e(dt,rrr),g(W3,dt,null),e(ur,trr),e(ur,bo),g(Q3,bo,null),e(bo,arr),e(bo,Pme),e(Pme,nrr),e(bo,srr),e(bo,cn),e(cn,lrr),e(cn,$me),e($me,irr),e(cn,drr),e(cn,Ime),e(Ime,crr),e(cn,frr),e(cn,jme),e(jme,mrr),e(cn,grr),e(bo,hrr),e(bo,te),e(te,MT),e(MT,Nme),e(Nme,prr),e(MT,_rr),e(MT,aq),e(aq,urr),e(MT,brr),e(te,vrr),e(te,ET),e(ET,Dme),e(Dme,Trr),e(ET,Frr),e(ET,nq),e(nq,Crr),e(ET,Mrr),e(te,Err),e(te,yT),e(yT,qme),e(qme,yrr),e(yT,wrr),e(yT,sq),e(sq,Arr),e(yT,Lrr),e(te,Brr),e(te,wT),e(wT,Gme),e(Gme,xrr),e(wT,krr),e(wT,lq),e(lq,Rrr),e(wT,Srr),e(te,Prr),e(te,AT),e(AT,Ome),e(Ome,$rr),e(AT,Irr),e(AT,iq),e(iq,jrr),e(AT,Nrr),e(te,Drr),e(te,LT),e(LT,Xme),e(Xme,qrr),e(LT,Grr),e(LT,dq),e(dq,Orr),e(LT,Xrr),e(te,zrr),e(te,BT),e(BT,zme),e(zme,Vrr),e(BT,Wrr),e(BT,cq),e(cq,Qrr),e(BT,Hrr),e(te,Urr),e(te,xT),e(xT,Vme),e(Vme,Jrr),e(xT,Yrr),e(xT,fq),e(fq,Krr),e(xT,Zrr),e(te,etr),e(te,kT),e(kT,Wme),e(Wme,otr),e(kT,rtr),e(kT,mq),e(mq,ttr),e(kT,atr),e(te,ntr),e(te,RT),e(RT,Qme),e(Qme,str),e(RT,ltr),e(RT,gq),e(gq,itr),e(RT,dtr),e(te,ctr),e(te,ST),e(ST,Hme),e(Hme,ftr),e(ST,mtr),e(ST,hq),e(hq,gtr),e(ST,htr),e(te,ptr),e(te,PT),e(PT,Ume),e(Ume,_tr),e(PT,utr),e(PT,pq),e(pq,btr),e(PT,vtr),e(te,Ttr),e(te,$T),e($T,Jme),e(Jme,Ftr),e($T,Ctr),e($T,_q),e(_q,Mtr),e($T,Etr),e(te,ytr),e(te,IT),e(IT,Yme),e(Yme,wtr),e(IT,Atr),e(IT,uq),e(uq,Ltr),e(IT,Btr),e(te,xtr),e(te,jT),e(jT,Kme),e(Kme,ktr),e(jT,Rtr),e(jT,bq),e(bq,Str),e(jT,Ptr),e(te,$tr),e(te,NT),e(NT,Zme),e(Zme,Itr),e(NT,jtr),e(NT,vq),e(vq,Ntr),e(NT,Dtr),e(te,qtr),e(te,DT),e(DT,ege),e(ege,Gtr),e(DT,Otr),e(DT,Tq),e(Tq,Xtr),e(DT,ztr),e(bo,Vtr),e(bo,oge),e(oge,Wtr),e(bo,Qtr),g(H3,bo,null),b(d,R0e,u),b(d,gc,u),e(gc,qT),e(qT,rge),g(U3,rge,null),e(gc,Htr),e(gc,tge),e(tge,Utr),b(d,S0e,u),b(d,br,u),g(J3,br,null),e(br,Jtr),e(br,hc),e(hc,Ytr),e(hc,age),e(age,Ktr),e(hc,Ztr),e(hc,nge),e(nge,ear),e(hc,oar),e(br,rar),e(br,Y3),e(Y3,tar),e(Y3,sge),e(sge,aar),e(Y3,nar),e(br,sar),e(br,ct),g(K3,ct,null),e(ct,lar),e(ct,lge),e(lge,iar),e(ct,dar),e(ct,pc),e(pc,car),e(pc,ige),e(ige,far),e(pc,mar),e(pc,dge),e(dge,gar),e(pc,har),e(ct,par),e(ct,cge),e(cge,_ar),e(ct,uar),g(Z3,ct,null),e(br,bar),e(br,vo),g(ey,vo,null),e(vo,Tar),e(vo,fge),e(fge,Far),e(vo,Car),e(vo,fn),e(fn,Mar),e(fn,mge),e(mge,Ear),e(fn,yar),e(fn,gge),e(gge,war),e(fn,Aar),e(fn,hge),e(hge,Lar),e(fn,Bar),e(vo,xar),e(vo,pge),e(pge,GT),e(GT,_ge),e(_ge,kar),e(GT,Rar),e(GT,Fq),e(Fq,Sar),e(GT,Par),e(vo,$ar),e(vo,uge),e(uge,Iar),e(vo,jar),g(oy,vo,null),b(d,P0e,u),b(d,_c,u),e(_c,OT),e(OT,bge),g(ry,bge,null),e(_c,Nar),e(_c,vge),e(vge,Dar),b(d,$0e,u),b(d,vr,u),g(ty,vr,null),e(vr,qar),e(vr,uc),e(uc,Gar),e(uc,Tge),e(Tge,Oar),e(uc,Xar),e(uc,Fge),e(Fge,zar),e(uc,Var),e(vr,War),e(vr,ay),e(ay,Qar),e(ay,Cge),e(Cge,Har),e(ay,Uar),e(vr,Jar),e(vr,ft),g(ny,ft,null),e(ft,Yar),e(ft,Mge),e(Mge,Kar),e(ft,Zar),e(ft,bc),e(bc,enr),e(bc,Ege),e(Ege,onr),e(bc,rnr),e(bc,yge),e(yge,tnr),e(bc,anr),e(ft,nnr),e(ft,wge),e(wge,snr),e(ft,lnr),g(sy,ft,null),e(vr,inr),e(vr,To),g(ly,To,null),e(To,dnr),e(To,Age),e(Age,cnr),e(To,fnr),e(To,mn),e(mn,mnr),e(mn,Lge),e(Lge,gnr),e(mn,hnr),e(mn,Bge),e(Bge,pnr),e(mn,_nr),e(mn,xge),e(xge,unr),e(mn,bnr),e(To,vnr),e(To,K),e(K,XT),e(XT,kge),e(kge,Tnr),e(XT,Fnr),e(XT,Cq),e(Cq,Cnr),e(XT,Mnr),e(K,Enr),e(K,zT),e(zT,Rge),e(Rge,ynr),e(zT,wnr),e(zT,Mq),e(Mq,Anr),e(zT,Lnr),e(K,Bnr),e(K,VT),e(VT,Sge),e(Sge,xnr),e(VT,knr),e(VT,Eq),e(Eq,Rnr),e(VT,Snr),e(K,Pnr),e(K,WT),e(WT,Pge),e(Pge,$nr),e(WT,Inr),e(WT,yq),e(yq,jnr),e(WT,Nnr),e(K,Dnr),e(K,QT),e(QT,$ge),e($ge,qnr),e(QT,Gnr),e(QT,wq),e(wq,Onr),e(QT,Xnr),e(K,znr),e(K,HT),e(HT,Ige),e(Ige,Vnr),e(HT,Wnr),e(HT,Aq),e(Aq,Qnr),e(HT,Hnr),e(K,Unr),e(K,UT),e(UT,jge),e(jge,Jnr),e(UT,Ynr),e(UT,Lq),e(Lq,Knr),e(UT,Znr),e(K,esr),e(K,JT),e(JT,Nge),e(Nge,osr),e(JT,rsr),e(JT,Bq),e(Bq,tsr),e(JT,asr),e(K,nsr),e(K,YT),e(YT,Dge),e(Dge,ssr),e(YT,lsr),e(YT,xq),e(xq,isr),e(YT,dsr),e(K,csr),e(K,KT),e(KT,qge),e(qge,fsr),e(KT,msr),e(KT,kq),e(kq,gsr),e(KT,hsr),e(K,psr),e(K,ZT),e(ZT,Gge),e(Gge,_sr),e(ZT,usr),e(ZT,Rq),e(Rq,bsr),e(ZT,vsr),e(K,Tsr),e(K,e7),e(e7,Oge),e(Oge,Fsr),e(e7,Csr),e(e7,Sq),e(Sq,Msr),e(e7,Esr),e(K,ysr),e(K,o7),e(o7,Xge),e(Xge,wsr),e(o7,Asr),e(o7,Pq),e(Pq,Lsr),e(o7,Bsr),e(K,xsr),e(K,r7),e(r7,zge),e(zge,ksr),e(r7,Rsr),e(r7,$q),e($q,Ssr),e(r7,Psr),e(K,$sr),e(K,t7),e(t7,Vge),e(Vge,Isr),e(t7,jsr),e(t7,Iq),e(Iq,Nsr),e(t7,Dsr),e(K,qsr),e(K,a7),e(a7,Wge),e(Wge,Gsr),e(a7,Osr),e(a7,jq),e(jq,Xsr),e(a7,zsr),e(K,Vsr),e(K,n7),e(n7,Qge),e(Qge,Wsr),e(n7,Qsr),e(n7,Nq),e(Nq,Hsr),e(n7,Usr),e(K,Jsr),e(K,s7),e(s7,Hge),e(Hge,Ysr),e(s7,Ksr),e(s7,Dq),e(Dq,Zsr),e(s7,elr),e(K,olr),e(K,l7),e(l7,Uge),e(Uge,rlr),e(l7,tlr),e(l7,qq),e(qq,alr),e(l7,nlr),e(K,slr),e(K,i7),e(i7,Jge),e(Jge,llr),e(i7,ilr),e(i7,Gq),e(Gq,dlr),e(i7,clr),e(To,flr),e(To,Yge),e(Yge,mlr),e(To,glr),g(iy,To,null),b(d,I0e,u),b(d,vc,u),e(vc,d7),e(d7,Kge),g(dy,Kge,null),e(vc,hlr),e(vc,Zge),e(Zge,plr),b(d,j0e,u),b(d,Tr,u),g(cy,Tr,null),e(Tr,_lr),e(Tr,Tc),e(Tc,ulr),e(Tc,ehe),e(ehe,blr),e(Tc,vlr),e(Tc,ohe),e(ohe,Tlr),e(Tc,Flr),e(Tr,Clr),e(Tr,fy),e(fy,Mlr),e(fy,rhe),e(rhe,Elr),e(fy,ylr),e(Tr,wlr),e(Tr,mt),g(my,mt,null),e(mt,Alr),e(mt,the),e(the,Llr),e(mt,Blr),e(mt,Fc),e(Fc,xlr),e(Fc,ahe),e(ahe,klr),e(Fc,Rlr),e(Fc,nhe),e(nhe,Slr),e(Fc,Plr),e(mt,$lr),e(mt,she),e(she,Ilr),e(mt,jlr),g(gy,mt,null),e(Tr,Nlr),e(Tr,Fo),g(hy,Fo,null),e(Fo,Dlr),e(Fo,lhe),e(lhe,qlr),e(Fo,Glr),e(Fo,gn),e(gn,Olr),e(gn,ihe),e(ihe,Xlr),e(gn,zlr),e(gn,dhe),e(dhe,Vlr),e(gn,Wlr),e(gn,che),e(che,Qlr),e(gn,Hlr),e(Fo,Ulr),e(Fo,Z),e(Z,c7),e(c7,fhe),e(fhe,Jlr),e(c7,Ylr),e(c7,Oq),e(Oq,Klr),e(c7,Zlr),e(Z,eir),e(Z,f7),e(f7,mhe),e(mhe,oir),e(f7,rir),e(f7,Xq),e(Xq,tir),e(f7,air),e(Z,nir),e(Z,m7),e(m7,ghe),e(ghe,sir),e(m7,lir),e(m7,zq),e(zq,iir),e(m7,dir),e(Z,cir),e(Z,g7),e(g7,hhe),e(hhe,fir),e(g7,mir),e(g7,Vq),e(Vq,gir),e(g7,hir),e(Z,pir),e(Z,h7),e(h7,phe),e(phe,_ir),e(h7,uir),e(h7,Wq),e(Wq,bir),e(h7,vir),e(Z,Tir),e(Z,p7),e(p7,_he),e(_he,Fir),e(p7,Cir),e(p7,Qq),e(Qq,Mir),e(p7,Eir),e(Z,yir),e(Z,_7),e(_7,uhe),e(uhe,wir),e(_7,Air),e(_7,Hq),e(Hq,Lir),e(_7,Bir),e(Z,xir),e(Z,u7),e(u7,bhe),e(bhe,kir),e(u7,Rir),e(u7,Uq),e(Uq,Sir),e(u7,Pir),e(Z,$ir),e(Z,b7),e(b7,vhe),e(vhe,Iir),e(b7,jir),e(b7,Jq),e(Jq,Nir),e(b7,Dir),e(Z,qir),e(Z,v7),e(v7,The),e(The,Gir),e(v7,Oir),e(v7,Yq),e(Yq,Xir),e(v7,zir),e(Z,Vir),e(Z,T7),e(T7,Fhe),e(Fhe,Wir),e(T7,Qir),e(T7,Kq),e(Kq,Hir),e(T7,Uir),e(Z,Jir),e(Z,F7),e(F7,Che),e(Che,Yir),e(F7,Kir),e(F7,Zq),e(Zq,Zir),e(F7,edr),e(Z,odr),e(Z,C7),e(C7,Mhe),e(Mhe,rdr),e(C7,tdr),e(C7,eG),e(eG,adr),e(C7,ndr),e(Z,sdr),e(Z,M7),e(M7,Ehe),e(Ehe,ldr),e(M7,idr),e(M7,oG),e(oG,ddr),e(M7,cdr),e(Z,fdr),e(Z,E7),e(E7,yhe),e(yhe,mdr),e(E7,gdr),e(E7,rG),e(rG,hdr),e(E7,pdr),e(Z,_dr),e(Z,y7),e(y7,whe),e(whe,udr),e(y7,bdr),e(y7,tG),e(tG,vdr),e(y7,Tdr),e(Z,Fdr),e(Z,w7),e(w7,Ahe),e(Ahe,Cdr),e(w7,Mdr),e(w7,aG),e(aG,Edr),e(w7,ydr),e(Z,wdr),e(Z,A7),e(A7,Lhe),e(Lhe,Adr),e(A7,Ldr),e(A7,nG),e(nG,Bdr),e(A7,xdr),e(Z,kdr),e(Z,L7),e(L7,Bhe),e(Bhe,Rdr),e(L7,Sdr),e(L7,sG),e(sG,Pdr),e(L7,$dr),e(Fo,Idr),e(Fo,xhe),e(xhe,jdr),e(Fo,Ndr),g(py,Fo,null),b(d,N0e,u),b(d,Cc,u),e(Cc,B7),e(B7,khe),g(_y,khe,null),e(Cc,Ddr),e(Cc,Rhe),e(Rhe,qdr),b(d,D0e,u),b(d,Fr,u),g(uy,Fr,null),e(Fr,Gdr),e(Fr,Mc),e(Mc,Odr),e(Mc,She),e(She,Xdr),e(Mc,zdr),e(Mc,Phe),e(Phe,Vdr),e(Mc,Wdr),e(Fr,Qdr),e(Fr,by),e(by,Hdr),e(by,$he),e($he,Udr),e(by,Jdr),e(Fr,Ydr),e(Fr,gt),g(vy,gt,null),e(gt,Kdr),e(gt,Ihe),e(Ihe,Zdr),e(gt,ecr),e(gt,Ec),e(Ec,ocr),e(Ec,jhe),e(jhe,rcr),e(Ec,tcr),e(Ec,Nhe),e(Nhe,acr),e(Ec,ncr),e(gt,scr),e(gt,Dhe),e(Dhe,lcr),e(gt,icr),g(Ty,gt,null),e(Fr,dcr),e(Fr,Co),g(Fy,Co,null),e(Co,ccr),e(Co,qhe),e(qhe,fcr),e(Co,mcr),e(Co,hn),e(hn,gcr),e(hn,Ghe),e(Ghe,hcr),e(hn,pcr),e(hn,Ohe),e(Ohe,_cr),e(hn,ucr),e(hn,Xhe),e(Xhe,bcr),e(hn,vcr),e(Co,Tcr),e(Co,zhe),e(zhe,x7),e(x7,Vhe),e(Vhe,Fcr),e(x7,Ccr),e(x7,lG),e(lG,Mcr),e(x7,Ecr),e(Co,ycr),e(Co,Whe),e(Whe,wcr),e(Co,Acr),g(Cy,Co,null),b(d,q0e,u),b(d,yc,u),e(yc,k7),e(k7,Qhe),g(My,Qhe,null),e(yc,Lcr),e(yc,Hhe),e(Hhe,Bcr),b(d,G0e,u),b(d,Cr,u),g(Ey,Cr,null),e(Cr,xcr),e(Cr,wc),e(wc,kcr),e(wc,Uhe),e(Uhe,Rcr),e(wc,Scr),e(wc,Jhe),e(Jhe,Pcr),e(wc,$cr),e(Cr,Icr),e(Cr,yy),e(yy,jcr),e(yy,Yhe),e(Yhe,Ncr),e(yy,Dcr),e(Cr,qcr),e(Cr,ht),g(wy,ht,null),e(ht,Gcr),e(ht,Khe),e(Khe,Ocr),e(ht,Xcr),e(ht,Ac),e(Ac,zcr),e(Ac,Zhe),e(Zhe,Vcr),e(Ac,Wcr),e(Ac,epe),e(epe,Qcr),e(Ac,Hcr),e(ht,Ucr),e(ht,ope),e(ope,Jcr),e(ht,Ycr),g(Ay,ht,null),e(Cr,Kcr),e(Cr,Mo),g(Ly,Mo,null),e(Mo,Zcr),e(Mo,rpe),e(rpe,efr),e(Mo,ofr),e(Mo,pn),e(pn,rfr),e(pn,tpe),e(tpe,tfr),e(pn,afr),e(pn,ape),e(ape,nfr),e(pn,sfr),e(pn,npe),e(npe,lfr),e(pn,ifr),e(Mo,dfr),e(Mo,spe),e(spe,R7),e(R7,lpe),e(lpe,cfr),e(R7,ffr),e(R7,iG),e(iG,mfr),e(R7,gfr),e(Mo,hfr),e(Mo,ipe),e(ipe,pfr),e(Mo,_fr),g(By,Mo,null),b(d,O0e,u),b(d,Lc,u),e(Lc,S7),e(S7,dpe),g(xy,dpe,null),e(Lc,ufr),e(Lc,cpe),e(cpe,bfr),b(d,X0e,u),b(d,Mr,u),g(ky,Mr,null),e(Mr,vfr),e(Mr,Bc),e(Bc,Tfr),e(Bc,fpe),e(fpe,Ffr),e(Bc,Cfr),e(Bc,mpe),e(mpe,Mfr),e(Bc,Efr),e(Mr,yfr),e(Mr,Ry),e(Ry,wfr),e(Ry,gpe),e(gpe,Afr),e(Ry,Lfr),e(Mr,Bfr),e(Mr,pt),g(Sy,pt,null),e(pt,xfr),e(pt,hpe),e(hpe,kfr),e(pt,Rfr),e(pt,xc),e(xc,Sfr),e(xc,ppe),e(ppe,Pfr),e(xc,$fr),e(xc,_pe),e(_pe,Ifr),e(xc,jfr),e(pt,Nfr),e(pt,upe),e(upe,Dfr),e(pt,qfr),g(Py,pt,null),e(Mr,Gfr),e(Mr,Eo),g($y,Eo,null),e(Eo,Ofr),e(Eo,bpe),e(bpe,Xfr),e(Eo,zfr),e(Eo,_n),e(_n,Vfr),e(_n,vpe),e(vpe,Wfr),e(_n,Qfr),e(_n,Tpe),e(Tpe,Hfr),e(_n,Ufr),e(_n,Fpe),e(Fpe,Jfr),e(_n,Yfr),e(Eo,Kfr),e(Eo,V),e(V,P7),e(P7,Cpe),e(Cpe,Zfr),e(P7,emr),e(P7,dG),e(dG,omr),e(P7,rmr),e(V,tmr),e(V,$7),e($7,Mpe),e(Mpe,amr),e($7,nmr),e($7,cG),e(cG,smr),e($7,lmr),e(V,imr),e(V,I7),e(I7,Epe),e(Epe,dmr),e(I7,cmr),e(I7,fG),e(fG,fmr),e(I7,mmr),e(V,gmr),e(V,j7),e(j7,ype),e(ype,hmr),e(j7,pmr),e(j7,mG),e(mG,_mr),e(j7,umr),e(V,bmr),e(V,N7),e(N7,wpe),e(wpe,vmr),e(N7,Tmr),e(N7,gG),e(gG,Fmr),e(N7,Cmr),e(V,Mmr),e(V,D7),e(D7,Ape),e(Ape,Emr),e(D7,ymr),e(D7,hG),e(hG,wmr),e(D7,Amr),e(V,Lmr),e(V,q7),e(q7,Lpe),e(Lpe,Bmr),e(q7,xmr),e(q7,pG),e(pG,kmr),e(q7,Rmr),e(V,Smr),e(V,G7),e(G7,Bpe),e(Bpe,Pmr),e(G7,$mr),e(G7,_G),e(_G,Imr),e(G7,jmr),e(V,Nmr),e(V,O7),e(O7,xpe),e(xpe,Dmr),e(O7,qmr),e(O7,uG),e(uG,Gmr),e(O7,Omr),e(V,Xmr),e(V,X7),e(X7,kpe),e(kpe,zmr),e(X7,Vmr),e(X7,bG),e(bG,Wmr),e(X7,Qmr),e(V,Hmr),e(V,z7),e(z7,Rpe),e(Rpe,Umr),e(z7,Jmr),e(z7,vG),e(vG,Ymr),e(z7,Kmr),e(V,Zmr),e(V,V7),e(V7,Spe),e(Spe,egr),e(V7,ogr),e(V7,TG),e(TG,rgr),e(V7,tgr),e(V,agr),e(V,W7),e(W7,Ppe),e(Ppe,ngr),e(W7,sgr),e(W7,FG),e(FG,lgr),e(W7,igr),e(V,dgr),e(V,Q7),e(Q7,$pe),e($pe,cgr),e(Q7,fgr),e(Q7,CG),e(CG,mgr),e(Q7,ggr),e(V,hgr),e(V,H7),e(H7,Ipe),e(Ipe,pgr),e(H7,_gr),e(H7,MG),e(MG,ugr),e(H7,bgr),e(V,vgr),e(V,U7),e(U7,jpe),e(jpe,Tgr),e(U7,Fgr),e(U7,EG),e(EG,Cgr),e(U7,Mgr),e(V,Egr),e(V,J7),e(J7,Npe),e(Npe,ygr),e(J7,wgr),e(J7,yG),e(yG,Agr),e(J7,Lgr),e(V,Bgr),e(V,Y7),e(Y7,Dpe),e(Dpe,xgr),e(Y7,kgr),e(Y7,wG),e(wG,Rgr),e(Y7,Sgr),e(V,Pgr),e(V,K7),e(K7,qpe),e(qpe,$gr),e(K7,Igr),e(K7,AG),e(AG,jgr),e(K7,Ngr),e(V,Dgr),e(V,Z7),e(Z7,Gpe),e(Gpe,qgr),e(Z7,Ggr),e(Z7,LG),e(LG,Ogr),e(Z7,Xgr),e(V,zgr),e(V,e8),e(e8,Ope),e(Ope,Vgr),e(e8,Wgr),e(e8,BG),e(BG,Qgr),e(e8,Hgr),e(V,Ugr),e(V,o8),e(o8,Xpe),e(Xpe,Jgr),e(o8,Ygr),e(o8,xG),e(xG,Kgr),e(o8,Zgr),e(V,ehr),e(V,r8),e(r8,zpe),e(zpe,ohr),e(r8,rhr),e(r8,kG),e(kG,thr),e(r8,ahr),e(V,nhr),e(V,t8),e(t8,Vpe),e(Vpe,shr),e(t8,lhr),e(t8,RG),e(RG,ihr),e(t8,dhr),e(Eo,chr),e(Eo,Wpe),e(Wpe,fhr),e(Eo,mhr),g(Iy,Eo,null),b(d,z0e,u),b(d,kc,u),e(kc,a8),e(a8,Qpe),g(jy,Qpe,null),e(kc,ghr),e(kc,Hpe),e(Hpe,hhr),b(d,V0e,u),b(d,Er,u),g(Ny,Er,null),e(Er,phr),e(Er,Rc),e(Rc,_hr),e(Rc,Upe),e(Upe,uhr),e(Rc,bhr),e(Rc,Jpe),e(Jpe,vhr),e(Rc,Thr),e(Er,Fhr),e(Er,Dy),e(Dy,Chr),e(Dy,Ype),e(Ype,Mhr),e(Dy,Ehr),e(Er,yhr),e(Er,_t),g(qy,_t,null),e(_t,whr),e(_t,Kpe),e(Kpe,Ahr),e(_t,Lhr),e(_t,Sc),e(Sc,Bhr),e(Sc,Zpe),e(Zpe,xhr),e(Sc,khr),e(Sc,e_e),e(e_e,Rhr),e(Sc,Shr),e(_t,Phr),e(_t,o_e),e(o_e,$hr),e(_t,Ihr),g(Gy,_t,null),e(Er,jhr),e(Er,yo),g(Oy,yo,null),e(yo,Nhr),e(yo,r_e),e(r_e,Dhr),e(yo,qhr),e(yo,un),e(un,Ghr),e(un,t_e),e(t_e,Ohr),e(un,Xhr),e(un,a_e),e(a_e,zhr),e(un,Vhr),e(un,n_e),e(n_e,Whr),e(un,Qhr),e(yo,Hhr),e(yo,bn),e(bn,n8),e(n8,s_e),e(s_e,Uhr),e(n8,Jhr),e(n8,SG),e(SG,Yhr),e(n8,Khr),e(bn,Zhr),e(bn,s8),e(s8,l_e),e(l_e,epr),e(s8,opr),e(s8,PG),e(PG,rpr),e(s8,tpr),e(bn,apr),e(bn,l8),e(l8,i_e),e(i_e,npr),e(l8,spr),e(l8,$G),e($G,lpr),e(l8,ipr),e(bn,dpr),e(bn,i8),e(i8,d_e),e(d_e,cpr),e(i8,fpr),e(i8,IG),e(IG,mpr),e(i8,gpr),e(yo,hpr),e(yo,c_e),e(c_e,ppr),e(yo,_pr),g(Xy,yo,null),b(d,W0e,u),b(d,Pc,u),e(Pc,d8),e(d8,f_e),g(zy,f_e,null),e(Pc,upr),e(Pc,m_e),e(m_e,bpr),b(d,Q0e,u),b(d,yr,u),g(Vy,yr,null),e(yr,vpr),e(yr,$c),e($c,Tpr),e($c,g_e),e(g_e,Fpr),e($c,Cpr),e($c,h_e),e(h_e,Mpr),e($c,Epr),e(yr,ypr),e(yr,Wy),e(Wy,wpr),e(Wy,p_e),e(p_e,Apr),e(Wy,Lpr),e(yr,Bpr),e(yr,ut),g(Qy,ut,null),e(ut,xpr),e(ut,__e),e(__e,kpr),e(ut,Rpr),e(ut,Ic),e(Ic,Spr),e(Ic,u_e),e(u_e,Ppr),e(Ic,$pr),e(Ic,b_e),e(b_e,Ipr),e(Ic,jpr),e(ut,Npr),e(ut,v_e),e(v_e,Dpr),e(ut,qpr),g(Hy,ut,null),e(yr,Gpr),e(yr,wo),g(Uy,wo,null),e(wo,Opr),e(wo,T_e),e(T_e,Xpr),e(wo,zpr),e(wo,vn),e(vn,Vpr),e(vn,F_e),e(F_e,Wpr),e(vn,Qpr),e(vn,C_e),e(C_e,Hpr),e(vn,Upr),e(vn,M_e),e(M_e,Jpr),e(vn,Ypr),e(wo,Kpr),e(wo,fe),e(fe,c8),e(c8,E_e),e(E_e,Zpr),e(c8,e_r),e(c8,jG),e(jG,o_r),e(c8,r_r),e(fe,t_r),e(fe,f8),e(f8,y_e),e(y_e,a_r),e(f8,n_r),e(f8,NG),e(NG,s_r),e(f8,l_r),e(fe,i_r),e(fe,m8),e(m8,w_e),e(w_e,d_r),e(m8,c_r),e(m8,DG),e(DG,f_r),e(m8,m_r),e(fe,g_r),e(fe,g8),e(g8,A_e),e(A_e,h_r),e(g8,p_r),e(g8,qG),e(qG,__r),e(g8,u_r),e(fe,b_r),e(fe,h8),e(h8,L_e),e(L_e,v_r),e(h8,T_r),e(h8,GG),e(GG,F_r),e(h8,C_r),e(fe,M_r),e(fe,p8),e(p8,B_e),e(B_e,E_r),e(p8,y_r),e(p8,OG),e(OG,w_r),e(p8,A_r),e(fe,L_r),e(fe,_8),e(_8,x_e),e(x_e,B_r),e(_8,x_r),e(_8,XG),e(XG,k_r),e(_8,R_r),e(fe,S_r),e(fe,u8),e(u8,k_e),e(k_e,P_r),e(u8,$_r),e(u8,zG),e(zG,I_r),e(u8,j_r),e(fe,N_r),e(fe,b8),e(b8,R_e),e(R_e,D_r),e(b8,q_r),e(b8,VG),e(VG,G_r),e(b8,O_r),e(fe,X_r),e(fe,v8),e(v8,S_e),e(S_e,z_r),e(v8,V_r),e(v8,WG),e(WG,W_r),e(v8,Q_r),e(fe,H_r),e(fe,T8),e(T8,P_e),e(P_e,U_r),e(T8,J_r),e(T8,QG),e(QG,Y_r),e(T8,K_r),e(wo,Z_r),e(wo,$_e),e($_e,eur),e(wo,our),g(Jy,wo,null),b(d,H0e,u),b(d,jc,u),e(jc,F8),e(F8,I_e),g(Yy,I_e,null),e(jc,rur),e(jc,j_e),e(j_e,tur),b(d,U0e,u),b(d,wr,u),g(Ky,wr,null),e(wr,aur),e(wr,Nc),e(Nc,nur),e(Nc,N_e),e(N_e,sur),e(Nc,lur),e(Nc,D_e),e(D_e,iur),e(Nc,dur),e(wr,cur),e(wr,Zy),e(Zy,fur),e(Zy,q_e),e(q_e,mur),e(Zy,gur),e(wr,hur),e(wr,bt),g(ew,bt,null),e(bt,pur),e(bt,G_e),e(G_e,_ur),e(bt,uur),e(bt,Dc),e(Dc,bur),e(Dc,O_e),e(O_e,vur),e(Dc,Tur),e(Dc,X_e),e(X_e,Fur),e(Dc,Cur),e(bt,Mur),e(bt,z_e),e(z_e,Eur),e(bt,yur),g(ow,bt,null),e(wr,wur),e(wr,Ao),g(rw,Ao,null),e(Ao,Aur),e(Ao,V_e),e(V_e,Lur),e(Ao,Bur),e(Ao,Tn),e(Tn,xur),e(Tn,W_e),e(W_e,kur),e(Tn,Rur),e(Tn,Q_e),e(Q_e,Sur),e(Tn,Pur),e(Tn,H_e),e(H_e,$ur),e(Tn,Iur),e(Ao,jur),e(Ao,be),e(be,C8),e(C8,U_e),e(U_e,Nur),e(C8,Dur),e(C8,HG),e(HG,qur),e(C8,Gur),e(be,Our),e(be,M8),e(M8,J_e),e(J_e,Xur),e(M8,zur),e(M8,UG),e(UG,Vur),e(M8,Wur),e(be,Qur),e(be,E8),e(E8,Y_e),e(Y_e,Hur),e(E8,Uur),e(E8,JG),e(JG,Jur),e(E8,Yur),e(be,Kur),e(be,y8),e(y8,K_e),e(K_e,Zur),e(y8,e1r),e(y8,YG),e(YG,o1r),e(y8,r1r),e(be,t1r),e(be,w8),e(w8,Z_e),e(Z_e,a1r),e(w8,n1r),e(w8,KG),e(KG,s1r),e(w8,l1r),e(be,i1r),e(be,A8),e(A8,eue),e(eue,d1r),e(A8,c1r),e(A8,ZG),e(ZG,f1r),e(A8,m1r),e(be,g1r),e(be,L8),e(L8,oue),e(oue,h1r),e(L8,p1r),e(L8,eO),e(eO,_1r),e(L8,u1r),e(be,b1r),e(be,B8),e(B8,rue),e(rue,v1r),e(B8,T1r),e(B8,oO),e(oO,F1r),e(B8,C1r),e(be,M1r),e(be,x8),e(x8,tue),e(tue,E1r),e(x8,y1r),e(x8,rO),e(rO,w1r),e(x8,A1r),e(Ao,L1r),e(Ao,aue),e(aue,B1r),e(Ao,x1r),g(tw,Ao,null),b(d,J0e,u),b(d,qc,u),e(qc,k8),e(k8,nue),g(aw,nue,null),e(qc,k1r),e(qc,sue),e(sue,R1r),b(d,Y0e,u),b(d,Ar,u),g(nw,Ar,null),e(Ar,S1r),e(Ar,Gc),e(Gc,P1r),e(Gc,lue),e(lue,$1r),e(Gc,I1r),e(Gc,iue),e(iue,j1r),e(Gc,N1r),e(Ar,D1r),e(Ar,sw),e(sw,q1r),e(sw,due),e(due,G1r),e(sw,O1r),e(Ar,X1r),e(Ar,vt),g(lw,vt,null),e(vt,z1r),e(vt,cue),e(cue,V1r),e(vt,W1r),e(vt,Oc),e(Oc,Q1r),e(Oc,fue),e(fue,H1r),e(Oc,U1r),e(Oc,mue),e(mue,J1r),e(Oc,Y1r),e(vt,K1r),e(vt,gue),e(gue,Z1r),e(vt,ebr),g(iw,vt,null),e(Ar,obr),e(Ar,Lo),g(dw,Lo,null),e(Lo,rbr),e(Lo,hue),e(hue,tbr),e(Lo,abr),e(Lo,Fn),e(Fn,nbr),e(Fn,pue),e(pue,sbr),e(Fn,lbr),e(Fn,_ue),e(_ue,ibr),e(Fn,dbr),e(Fn,uue),e(uue,cbr),e(Fn,fbr),e(Lo,mbr),e(Lo,ve),e(ve,R8),e(R8,bue),e(bue,gbr),e(R8,hbr),e(R8,tO),e(tO,pbr),e(R8,_br),e(ve,ubr),e(ve,S8),e(S8,vue),e(vue,bbr),e(S8,vbr),e(S8,aO),e(aO,Tbr),e(S8,Fbr),e(ve,Cbr),e(ve,P8),e(P8,Tue),e(Tue,Mbr),e(P8,Ebr),e(P8,nO),e(nO,ybr),e(P8,wbr),e(ve,Abr),e(ve,$8),e($8,Fue),e(Fue,Lbr),e($8,Bbr),e($8,sO),e(sO,xbr),e($8,kbr),e(ve,Rbr),e(ve,I8),e(I8,Cue),e(Cue,Sbr),e(I8,Pbr),e(I8,lO),e(lO,$br),e(I8,Ibr),e(ve,jbr),e(ve,j8),e(j8,Mue),e(Mue,Nbr),e(j8,Dbr),e(j8,iO),e(iO,qbr),e(j8,Gbr),e(ve,Obr),e(ve,N8),e(N8,Eue),e(Eue,Xbr),e(N8,zbr),e(N8,dO),e(dO,Vbr),e(N8,Wbr),e(ve,Qbr),e(ve,D8),e(D8,yue),e(yue,Hbr),e(D8,Ubr),e(D8,cO),e(cO,Jbr),e(D8,Ybr),e(ve,Kbr),e(ve,q8),e(q8,wue),e(wue,Zbr),e(q8,e5r),e(q8,fO),e(fO,o5r),e(q8,r5r),e(Lo,t5r),e(Lo,Aue),e(Aue,a5r),e(Lo,n5r),g(cw,Lo,null),b(d,K0e,u),b(d,Xc,u),e(Xc,G8),e(G8,Lue),g(fw,Lue,null),e(Xc,s5r),e(Xc,Bue),e(Bue,l5r),b(d,Z0e,u),b(d,Lr,u),g(mw,Lr,null),e(Lr,i5r),e(Lr,zc),e(zc,d5r),e(zc,xue),e(xue,c5r),e(zc,f5r),e(zc,kue),e(kue,m5r),e(zc,g5r),e(Lr,h5r),e(Lr,gw),e(gw,p5r),e(gw,Rue),e(Rue,_5r),e(gw,u5r),e(Lr,b5r),e(Lr,Tt),g(hw,Tt,null),e(Tt,v5r),e(Tt,Sue),e(Sue,T5r),e(Tt,F5r),e(Tt,Vc),e(Vc,C5r),e(Vc,Pue),e(Pue,M5r),e(Vc,E5r),e(Vc,$ue),e($ue,y5r),e(Vc,w5r),e(Tt,A5r),e(Tt,Iue),e(Iue,L5r),e(Tt,B5r),g(pw,Tt,null),e(Lr,x5r),e(Lr,Bo),g(_w,Bo,null),e(Bo,k5r),e(Bo,jue),e(jue,R5r),e(Bo,S5r),e(Bo,Cn),e(Cn,P5r),e(Cn,Nue),e(Nue,$5r),e(Cn,I5r),e(Cn,Due),e(Due,j5r),e(Cn,N5r),e(Cn,que),e(que,D5r),e(Cn,q5r),e(Bo,G5r),e(Bo,Te),e(Te,O8),e(O8,Gue),e(Gue,O5r),e(O8,X5r),e(O8,mO),e(mO,z5r),e(O8,V5r),e(Te,W5r),e(Te,X8),e(X8,Oue),e(Oue,Q5r),e(X8,H5r),e(X8,gO),e(gO,U5r),e(X8,J5r),e(Te,Y5r),e(Te,z8),e(z8,Xue),e(Xue,K5r),e(z8,Z5r),e(z8,hO),e(hO,e2r),e(z8,o2r),e(Te,r2r),e(Te,V8),e(V8,zue),e(zue,t2r),e(V8,a2r),e(V8,pO),e(pO,n2r),e(V8,s2r),e(Te,l2r),e(Te,W8),e(W8,Vue),e(Vue,i2r),e(W8,d2r),e(W8,_O),e(_O,c2r),e(W8,f2r),e(Te,m2r),e(Te,Q8),e(Q8,Wue),e(Wue,g2r),e(Q8,h2r),e(Q8,uO),e(uO,p2r),e(Q8,_2r),e(Te,u2r),e(Te,H8),e(H8,Que),e(Que,b2r),e(H8,v2r),e(H8,bO),e(bO,T2r),e(H8,F2r),e(Te,C2r),e(Te,U8),e(U8,Hue),e(Hue,M2r),e(U8,E2r),e(U8,vO),e(vO,y2r),e(U8,w2r),e(Te,A2r),e(Te,J8),e(J8,Uue),e(Uue,L2r),e(J8,B2r),e(J8,TO),e(TO,x2r),e(J8,k2r),e(Bo,R2r),e(Bo,Jue),e(Jue,S2r),e(Bo,P2r),g(uw,Bo,null),b(d,eLe,u),b(d,Wc,u),e(Wc,Y8),e(Y8,Yue),g(bw,Yue,null),e(Wc,$2r),e(Wc,Kue),e(Kue,I2r),b(d,oLe,u),b(d,Br,u),g(vw,Br,null),e(Br,j2r),e(Br,Qc),e(Qc,N2r),e(Qc,Zue),e(Zue,D2r),e(Qc,q2r),e(Qc,e1e),e(e1e,G2r),e(Qc,O2r),e(Br,X2r),e(Br,Tw),e(Tw,z2r),e(Tw,o1e),e(o1e,V2r),e(Tw,W2r),e(Br,Q2r),e(Br,Ft),g(Fw,Ft,null),e(Ft,H2r),e(Ft,r1e),e(r1e,U2r),e(Ft,J2r),e(Ft,Hc),e(Hc,Y2r),e(Hc,t1e),e(t1e,K2r),e(Hc,Z2r),e(Hc,a1e),e(a1e,evr),e(Hc,ovr),e(Ft,rvr),e(Ft,n1e),e(n1e,tvr),e(Ft,avr),g(Cw,Ft,null),e(Br,nvr),e(Br,xo),g(Mw,xo,null),e(xo,svr),e(xo,s1e),e(s1e,lvr),e(xo,ivr),e(xo,Mn),e(Mn,dvr),e(Mn,l1e),e(l1e,cvr),e(Mn,fvr),e(Mn,i1e),e(i1e,mvr),e(Mn,gvr),e(Mn,d1e),e(d1e,hvr),e(Mn,pvr),e(xo,_vr),e(xo,Fe),e(Fe,K8),e(K8,c1e),e(c1e,uvr),e(K8,bvr),e(K8,FO),e(FO,vvr),e(K8,Tvr),e(Fe,Fvr),e(Fe,Z8),e(Z8,f1e),e(f1e,Cvr),e(Z8,Mvr),e(Z8,CO),e(CO,Evr),e(Z8,yvr),e(Fe,wvr),e(Fe,eF),e(eF,m1e),e(m1e,Avr),e(eF,Lvr),e(eF,MO),e(MO,Bvr),e(eF,xvr),e(Fe,kvr),e(Fe,oF),e(oF,g1e),e(g1e,Rvr),e(oF,Svr),e(oF,EO),e(EO,Pvr),e(oF,$vr),e(Fe,Ivr),e(Fe,rF),e(rF,h1e),e(h1e,jvr),e(rF,Nvr),e(rF,yO),e(yO,Dvr),e(rF,qvr),e(Fe,Gvr),e(Fe,tF),e(tF,p1e),e(p1e,Ovr),e(tF,Xvr),e(tF,wO),e(wO,zvr),e(tF,Vvr),e(Fe,Wvr),e(Fe,aF),e(aF,_1e),e(_1e,Qvr),e(aF,Hvr),e(aF,AO),e(AO,Uvr),e(aF,Jvr),e(Fe,Yvr),e(Fe,nF),e(nF,u1e),e(u1e,Kvr),e(nF,Zvr),e(nF,LO),e(LO,e6r),e(nF,o6r),e(Fe,r6r),e(Fe,sF),e(sF,b1e),e(b1e,t6r),e(sF,a6r),e(sF,BO),e(BO,n6r),e(sF,s6r),e(xo,l6r),e(xo,v1e),e(v1e,i6r),e(xo,d6r),g(Ew,xo,null),b(d,rLe,u),b(d,Uc,u),e(Uc,lF),e(lF,T1e),g(yw,T1e,null),e(Uc,c6r),e(Uc,F1e),e(F1e,f6r),b(d,tLe,u),b(d,xr,u),g(ww,xr,null),e(xr,m6r),e(xr,Jc),e(Jc,g6r),e(Jc,C1e),e(C1e,h6r),e(Jc,p6r),e(Jc,M1e),e(M1e,_6r),e(Jc,u6r),e(xr,b6r),e(xr,Aw),e(Aw,v6r),e(Aw,E1e),e(E1e,T6r),e(Aw,F6r),e(xr,C6r),e(xr,Ct),g(Lw,Ct,null),e(Ct,M6r),e(Ct,y1e),e(y1e,E6r),e(Ct,y6r),e(Ct,Yc),e(Yc,w6r),e(Yc,w1e),e(w1e,A6r),e(Yc,L6r),e(Yc,A1e),e(A1e,B6r),e(Yc,x6r),e(Ct,k6r),e(Ct,L1e),e(L1e,R6r),e(Ct,S6r),g(Bw,Ct,null),e(xr,P6r),e(xr,ko),g(xw,ko,null),e(ko,$6r),e(ko,B1e),e(B1e,I6r),e(ko,j6r),e(ko,En),e(En,N6r),e(En,x1e),e(x1e,D6r),e(En,q6r),e(En,k1e),e(k1e,G6r),e(En,O6r),e(En,R1e),e(R1e,X6r),e(En,z6r),e(ko,V6r),e(ko,ao),e(ao,iF),e(iF,S1e),e(S1e,W6r),e(iF,Q6r),e(iF,xO),e(xO,H6r),e(iF,U6r),e(ao,J6r),e(ao,dF),e(dF,P1e),e(P1e,Y6r),e(dF,K6r),e(dF,kO),e(kO,Z6r),e(dF,eTr),e(ao,oTr),e(ao,cF),e(cF,$1e),e($1e,rTr),e(cF,tTr),e(cF,RO),e(RO,aTr),e(cF,nTr),e(ao,sTr),e(ao,fF),e(fF,I1e),e(I1e,lTr),e(fF,iTr),e(fF,SO),e(SO,dTr),e(fF,cTr),e(ao,fTr),e(ao,mF),e(mF,j1e),e(j1e,mTr),e(mF,gTr),e(mF,PO),e(PO,hTr),e(mF,pTr),e(ao,_Tr),e(ao,gF),e(gF,N1e),e(N1e,uTr),e(gF,bTr),e(gF,$O),e($O,vTr),e(gF,TTr),e(ao,FTr),e(ao,hF),e(hF,D1e),e(D1e,CTr),e(hF,MTr),e(hF,IO),e(IO,ETr),e(hF,yTr),e(ko,wTr),e(ko,q1e),e(q1e,ATr),e(ko,LTr),g(kw,ko,null),b(d,aLe,u),b(d,Kc,u),e(Kc,pF),e(pF,G1e),g(Rw,G1e,null),e(Kc,BTr),e(Kc,O1e),e(O1e,xTr),b(d,nLe,u),b(d,kr,u),g(Sw,kr,null),e(kr,kTr),e(kr,Zc),e(Zc,RTr),e(Zc,X1e),e(X1e,STr),e(Zc,PTr),e(Zc,z1e),e(z1e,$Tr),e(Zc,ITr),e(kr,jTr),e(kr,Pw),e(Pw,NTr),e(Pw,V1e),e(V1e,DTr),e(Pw,qTr),e(kr,GTr),e(kr,Mt),g($w,Mt,null),e(Mt,OTr),e(Mt,W1e),e(W1e,XTr),e(Mt,zTr),e(Mt,ef),e(ef,VTr),e(ef,Q1e),e(Q1e,WTr),e(ef,QTr),e(ef,H1e),e(H1e,HTr),e(ef,UTr),e(Mt,JTr),e(Mt,U1e),e(U1e,YTr),e(Mt,KTr),g(Iw,Mt,null),e(kr,ZTr),e(kr,Ro),g(jw,Ro,null),e(Ro,e7r),e(Ro,J1e),e(J1e,o7r),e(Ro,r7r),e(Ro,yn),e(yn,t7r),e(yn,Y1e),e(Y1e,a7r),e(yn,n7r),e(yn,K1e),e(K1e,s7r),e(yn,l7r),e(yn,Z1e),e(Z1e,i7r),e(yn,d7r),e(Ro,c7r),e(Ro,no),e(no,_F),e(_F,ebe),e(ebe,f7r),e(_F,m7r),e(_F,jO),e(jO,g7r),e(_F,h7r),e(no,p7r),e(no,uF),e(uF,obe),e(obe,_7r),e(uF,u7r),e(uF,NO),e(NO,b7r),e(uF,v7r),e(no,T7r),e(no,bF),e(bF,rbe),e(rbe,F7r),e(bF,C7r),e(bF,DO),e(DO,M7r),e(bF,E7r),e(no,y7r),e(no,vF),e(vF,tbe),e(tbe,w7r),e(vF,A7r),e(vF,qO),e(qO,L7r),e(vF,B7r),e(no,x7r),e(no,TF),e(TF,abe),e(abe,k7r),e(TF,R7r),e(TF,GO),e(GO,S7r),e(TF,P7r),e(no,$7r),e(no,FF),e(FF,nbe),e(nbe,I7r),e(FF,j7r),e(FF,OO),e(OO,N7r),e(FF,D7r),e(no,q7r),e(no,CF),e(CF,sbe),e(sbe,G7r),e(CF,O7r),e(CF,XO),e(XO,X7r),e(CF,z7r),e(Ro,V7r),e(Ro,lbe),e(lbe,W7r),e(Ro,Q7r),g(Nw,Ro,null),b(d,sLe,u),b(d,of,u),e(of,MF),e(MF,ibe),g(Dw,ibe,null),e(of,H7r),e(of,dbe),e(dbe,U7r),b(d,lLe,u),b(d,Rr,u),g(qw,Rr,null),e(Rr,J7r),e(Rr,rf),e(rf,Y7r),e(rf,cbe),e(cbe,K7r),e(rf,Z7r),e(rf,fbe),e(fbe,e8r),e(rf,o8r),e(Rr,r8r),e(Rr,Gw),e(Gw,t8r),e(Gw,mbe),e(mbe,a8r),e(Gw,n8r),e(Rr,s8r),e(Rr,Et),g(Ow,Et,null),e(Et,l8r),e(Et,gbe),e(gbe,i8r),e(Et,d8r),e(Et,tf),e(tf,c8r),e(tf,hbe),e(hbe,f8r),e(tf,m8r),e(tf,pbe),e(pbe,g8r),e(tf,h8r),e(Et,p8r),e(Et,_be),e(_be,_8r),e(Et,u8r),g(Xw,Et,null),e(Rr,b8r),e(Rr,So),g(zw,So,null),e(So,v8r),e(So,ube),e(ube,T8r),e(So,F8r),e(So,wn),e(wn,C8r),e(wn,bbe),e(bbe,M8r),e(wn,E8r),e(wn,vbe),e(vbe,y8r),e(wn,w8r),e(wn,Tbe),e(Tbe,A8r),e(wn,L8r),e(So,B8r),e(So,Fbe),e(Fbe,EF),e(EF,Cbe),e(Cbe,x8r),e(EF,k8r),e(EF,zO),e(zO,R8r),e(EF,S8r),e(So,P8r),e(So,Mbe),e(Mbe,$8r),e(So,I8r),g(Vw,So,null),b(d,iLe,u),b(d,af,u),e(af,yF),e(yF,Ebe),g(Ww,Ebe,null),e(af,j8r),e(af,ybe),e(ybe,N8r),b(d,dLe,u),b(d,Sr,u),g(Qw,Sr,null),e(Sr,D8r),e(Sr,nf),e(nf,q8r),e(nf,wbe),e(wbe,G8r),e(nf,O8r),e(nf,Abe),e(Abe,X8r),e(nf,z8r),e(Sr,V8r),e(Sr,Hw),e(Hw,W8r),e(Hw,Lbe),e(Lbe,Q8r),e(Hw,H8r),e(Sr,U8r),e(Sr,yt),g(Uw,yt,null),e(yt,J8r),e(yt,Bbe),e(Bbe,Y8r),e(yt,K8r),e(yt,sf),e(sf,Z8r),e(sf,xbe),e(xbe,eFr),e(sf,oFr),e(sf,kbe),e(kbe,rFr),e(sf,tFr),e(yt,aFr),e(yt,Rbe),e(Rbe,nFr),e(yt,sFr),g(Jw,yt,null),e(Sr,lFr),e(Sr,Po),g(Yw,Po,null),e(Po,iFr),e(Po,Sbe),e(Sbe,dFr),e(Po,cFr),e(Po,An),e(An,fFr),e(An,Pbe),e(Pbe,mFr),e(An,gFr),e(An,$be),e($be,hFr),e(An,pFr),e(An,Ibe),e(Ibe,_Fr),e(An,uFr),e(Po,bFr),e(Po,Kw),e(Kw,wF),e(wF,jbe),e(jbe,vFr),e(wF,TFr),e(wF,VO),e(VO,FFr),e(wF,CFr),e(Kw,MFr),e(Kw,AF),e(AF,Nbe),e(Nbe,EFr),e(AF,yFr),e(AF,WO),e(WO,wFr),e(AF,AFr),e(Po,LFr),e(Po,Dbe),e(Dbe,BFr),e(Po,xFr),g(Zw,Po,null),b(d,cLe,u),b(d,lf,u),e(lf,LF),e(LF,qbe),g(eA,qbe,null),e(lf,kFr),e(lf,Gbe),e(Gbe,RFr),b(d,fLe,u),b(d,Pr,u),g(oA,Pr,null),e(Pr,SFr),e(Pr,df),e(df,PFr),e(df,Obe),e(Obe,$Fr),e(df,IFr),e(df,Xbe),e(Xbe,jFr),e(df,NFr),e(Pr,DFr),e(Pr,rA),e(rA,qFr),e(rA,zbe),e(zbe,GFr),e(rA,OFr),e(Pr,XFr),e(Pr,wt),g(tA,wt,null),e(wt,zFr),e(wt,Vbe),e(Vbe,VFr),e(wt,WFr),e(wt,cf),e(cf,QFr),e(cf,Wbe),e(Wbe,HFr),e(cf,UFr),e(cf,Qbe),e(Qbe,JFr),e(cf,YFr),e(wt,KFr),e(wt,Hbe),e(Hbe,ZFr),e(wt,eCr),g(aA,wt,null),e(Pr,oCr),e(Pr,$o),g(nA,$o,null),e($o,rCr),e($o,Ube),e(Ube,tCr),e($o,aCr),e($o,Ln),e(Ln,nCr),e(Ln,Jbe),e(Jbe,sCr),e(Ln,lCr),e(Ln,Ybe),e(Ybe,iCr),e(Ln,dCr),e(Ln,Kbe),e(Kbe,cCr),e(Ln,fCr),e($o,mCr),e($o,Zbe),e(Zbe,BF),e(BF,e5e),e(e5e,gCr),e(BF,hCr),e(BF,QO),e(QO,pCr),e(BF,_Cr),e($o,uCr),e($o,o5e),e(o5e,bCr),e($o,vCr),g(sA,$o,null),mLe=!0},p(d,[u]){const lA={};u&2&&(lA.$$scope={dirty:u,ctx:d}),uf.$set(lA);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:d}),Wg.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:d}),th.$set(t5e)},i(d){mLe||(h(ce.$$.fragment,d),h(ka.$$.fragment,d),h(kC.$$.fragment,d),h(RC.$$.fragment,d),h(uf.$$.fragment,d),h(SC.$$.fragment,d),h(PC.$$.fragment,d),h(jC.$$.fragment,d),h(NC.$$.fragment,d),h(DC.$$.fragment,d),h(qC.$$.fragment,d),h(GC.$$.fragment,d),h(zC.$$.fragment,d),h(VC.$$.fragment,d),h(WC.$$.fragment,d),h(QC.$$.fragment,d),h(HC.$$.fragment,d),h(YC.$$.fragment,d),h(Wg.$$.fragment,d),h(KC.$$.fragment,d),h(ZC.$$.fragment,d),h(e4.$$.fragment,d),h(o4.$$.fragment,d),h(a4.$$.fragment,d),h(th.$$.fragment,d),h(n4.$$.fragment,d),h(s4.$$.fragment,d),h(l4.$$.fragment,d),h(d4.$$.fragment,d),h(c4.$$.fragment,d),h(f4.$$.fragment,d),h(m4.$$.fragment,d),h(g4.$$.fragment,d),h(h4.$$.fragment,d),h(_4.$$.fragment,d),h(u4.$$.fragment,d),h(b4.$$.fragment,d),h(v4.$$.fragment,d),h(T4.$$.fragment,d),h(F4.$$.fragment,d),h(M4.$$.fragment,d),h(E4.$$.fragment,d),h(y4.$$.fragment,d),h(w4.$$.fragment,d),h(A4.$$.fragment,d),h(L4.$$.fragment,d),h(x4.$$.fragment,d),h(k4.$$.fragment,d),h(R4.$$.fragment,d),h(S4.$$.fragment,d),h(P4.$$.fragment,d),h($4.$$.fragment,d),h(j4.$$.fragment,d),h(N4.$$.fragment,d),h(D4.$$.fragment,d),h(q4.$$.fragment,d),h(G4.$$.fragment,d),h(O4.$$.fragment,d),h(z4.$$.fragment,d),h(V4.$$.fragment,d),h(W4.$$.fragment,d),h(Q4.$$.fragment,d),h(H4.$$.fragment,d),h(U4.$$.fragment,d),h(Y4.$$.fragment,d),h(K4.$$.fragment,d),h(Z4.$$.fragment,d),h(eM.$$.fragment,d),h(oM.$$.fragment,d),h(rM.$$.fragment,d),h(aM.$$.fragment,d),h(nM.$$.fragment,d),h(sM.$$.fragment,d),h(lM.$$.fragment,d),h(iM.$$.fragment,d),h(dM.$$.fragment,d),h(fM.$$.fragment,d),h(mM.$$.fragment,d),h(gM.$$.fragment,d),h(hM.$$.fragment,d),h(pM.$$.fragment,d),h(_M.$$.fragment,d),h(bM.$$.fragment,d),h(vM.$$.fragment,d),h(TM.$$.fragment,d),h(FM.$$.fragment,d),h(CM.$$.fragment,d),h(MM.$$.fragment,d),h(yM.$$.fragment,d),h(wM.$$.fragment,d),h(AM.$$.fragment,d),h(LM.$$.fragment,d),h(BM.$$.fragment,d),h(xM.$$.fragment,d),h(RM.$$.fragment,d),h(SM.$$.fragment,d),h(PM.$$.fragment,d),h($M.$$.fragment,d),h(IM.$$.fragment,d),h(jM.$$.fragment,d),h(DM.$$.fragment,d),h(qM.$$.fragment,d),h(GM.$$.fragment,d),h(OM.$$.fragment,d),h(XM.$$.fragment,d),h(zM.$$.fragment,d),h(WM.$$.fragment,d),h(QM.$$.fragment,d),h(HM.$$.fragment,d),h(UM.$$.fragment,d),h(JM.$$.fragment,d),h(YM.$$.fragment,d),h(ZM.$$.fragment,d),h(eE.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(sE.$$.fragment,d),h(lE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(pE.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(DE.$$.fragment,d),h(qE.$$.fragment,d),h(OE.$$.fragment,d),h(XE.$$.fragment,d),h(zE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(N3.$$.fragment,d),h(D3.$$.fragment,d),h(q3.$$.fragment,d),h(G3.$$.fragment,d),h(O3.$$.fragment,d),h(X3.$$.fragment,d),h(V3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(H3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(iy.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Gy.$$.fragment,d),h(Oy.$$.fragment,d),h(Xy.$$.fragment,d),h(zy.$$.fragment,d),h(Vy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Xw.$$.fragment,d),h(zw.$$.fragment,d),h(Vw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Zw.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),mLe=!0)},o(d){p(ce.$$.fragment,d),p(ka.$$.fragment,d),p(kC.$$.fragment,d),p(RC.$$.fragment,d),p(uf.$$.fragment,d),p(SC.$$.fragment,d),p(PC.$$.fragment,d),p(jC.$$.fragment,d),p(NC.$$.fragment,d),p(DC.$$.fragment,d),p(qC.$$.fragment,d),p(GC.$$.fragment,d),p(zC.$$.fragment,d),p(VC.$$.fragment,d),p(WC.$$.fragment,d),p(QC.$$.fragment,d),p(HC.$$.fragment,d),p(YC.$$.fragment,d),p(Wg.$$.fragment,d),p(KC.$$.fragment,d),p(ZC.$$.fragment,d),p(e4.$$.fragment,d),p(o4.$$.fragment,d),p(a4.$$.fragment,d),p(th.$$.fragment,d),p(n4.$$.fragment,d),p(s4.$$.fragment,d),p(l4.$$.fragment,d),p(d4.$$.fragment,d),p(c4.$$.fragment,d),p(f4.$$.fragment,d),p(m4.$$.fragment,d),p(g4.$$.fragment,d),p(h4.$$.fragment,d),p(_4.$$.fragment,d),p(u4.$$.fragment,d),p(b4.$$.fragment,d),p(v4.$$.fragment,d),p(T4.$$.fragment,d),p(F4.$$.fragment,d),p(M4.$$.fragment,d),p(E4.$$.fragment,d),p(y4.$$.fragment,d),p(w4.$$.fragment,d),p(A4.$$.fragment,d),p(L4.$$.fragment,d),p(x4.$$.fragment,d),p(k4.$$.fragment,d),p(R4.$$.fragment,d),p(S4.$$.fragment,d),p(P4.$$.fragment,d),p($4.$$.fragment,d),p(j4.$$.fragment,d),p(N4.$$.fragment,d),p(D4.$$.fragment,d),p(q4.$$.fragment,d),p(G4.$$.fragment,d),p(O4.$$.fragment,d),p(z4.$$.fragment,d),p(V4.$$.fragment,d),p(W4.$$.fragment,d),p(Q4.$$.fragment,d),p(H4.$$.fragment,d),p(U4.$$.fragment,d),p(Y4.$$.fragment,d),p(K4.$$.fragment,d),p(Z4.$$.fragment,d),p(eM.$$.fragment,d),p(oM.$$.fragment,d),p(rM.$$.fragment,d),p(aM.$$.fragment,d),p(nM.$$.fragment,d),p(sM.$$.fragment,d),p(lM.$$.fragment,d),p(iM.$$.fragment,d),p(dM.$$.fragment,d),p(fM.$$.fragment,d),p(mM.$$.fragment,d),p(gM.$$.fragment,d),p(hM.$$.fragment,d),p(pM.$$.fragment,d),p(_M.$$.fragment,d),p(bM.$$.fragment,d),p(vM.$$.fragment,d),p(TM.$$.fragment,d),p(FM.$$.fragment,d),p(CM.$$.fragment,d),p(MM.$$.fragment,d),p(yM.$$.fragment,d),p(wM.$$.fragment,d),p(AM.$$.fragment,d),p(LM.$$.fragment,d),p(BM.$$.fragment,d),p(xM.$$.fragment,d),p(RM.$$.fragment,d),p(SM.$$.fragment,d),p(PM.$$.fragment,d),p($M.$$.fragment,d),p(IM.$$.fragment,d),p(jM.$$.fragment,d),p(DM.$$.fragment,d),p(qM.$$.fragment,d),p(GM.$$.fragment,d),p(OM.$$.fragment,d),p(XM.$$.fragment,d),p(zM.$$.fragment,d),p(WM.$$.fragment,d),p(QM.$$.fragment,d),p(HM.$$.fragment,d),p(UM.$$.fragment,d),p(JM.$$.fragment,d),p(YM.$$.fragment,d),p(ZM.$$.fragment,d),p(eE.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(sE.$$.fragment,d),p(lE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(pE.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(DE.$$.fragment,d),p(qE.$$.fragment,d),p(OE.$$.fragment,d),p(XE.$$.fragment,d),p(zE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(N3.$$.fragment,d),p(D3.$$.fragment,d),p(q3.$$.fragment,d),p(G3.$$.fragment,d),p(O3.$$.fragment,d),p(X3.$$.fragment,d),p(V3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(H3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(oy.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(iy.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(py.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(By.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(Iy.$$.fragment,d),p(jy.$$.fragment,d),p(Ny.$$.fragment,d),p(qy.$$.fragment,d),p(Gy.$$.fragment,d),p(Oy.$$.fragment,d),p(Xy.$$.fragment,d),p(zy.$$.fragment,d),p(Vy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(kw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Nw.$$.fragment,d),p(Dw.$$.fragment,d),p(qw.$$.fragment,d),p(Ow.$$.fragment,d),p(Xw.$$.fragment,d),p(zw.$$.fragment,d),p(Vw.$$.fragment,d),p(Ww.$$.fragment,d),p(Qw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Zw.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),mLe=!1},d(d){t(J),d&&t(Ae),d&&t(le),_(ce),d&&t(mf),d&&t(ra),d&&t(Ee),d&&t(so),d&&t(hf),_(ka,d),d&&t(lo),d&&t(ge),d&&t(Do),d&&t(Ra),d&&t(pAe),d&&t(yi),_(kC),d&&t(_Ae),d&&t(Sn),d&&t(uAe),_(RC,d),d&&t(bAe),d&&t(i0),d&&t(vAe),_(uf,d),d&&t(TAe),d&&t(wi),_(SC),d&&t(FAe),d&&t(qo),_(PC),_(jC),_(NC),_(DC),d&&t(CAe),d&&t(Li),_(qC),d&&t(MAe),d&&t(Go),_(GC),_(zC),_(VC),_(WC),d&&t(EAe),d&&t(Bi),_(QC),d&&t(yAe),d&&t(Oo),_(HC),_(YC),_(Wg),_(KC),_(ZC),d&&t(wAe),d&&t(xi),_(e4),d&&t(AAe),d&&t(ea),_(o4),_(a4),_(th),_(n4),d&&t(LAe),d&&t(Ri),_(s4),d&&t(BAe),d&&t(Xo),_(l4),_(d4),_(c4),_(f4),_(m4),d&&t(xAe),d&&t($i),_(g4),d&&t(kAe),d&&t(zo),_(h4),_(_4),_(u4),_(b4),_(v4),d&&t(RAe),d&&t(Ni),_(T4),d&&t(SAe),d&&t(Vo),_(F4),_(M4),_(E4),_(y4),_(w4),d&&t(PAe),d&&t(Gi),_(A4),d&&t($Ae),d&&t(Wo),_(L4),_(x4),_(k4),_(R4),_(S4),d&&t(IAe),d&&t(zi),_(P4),d&&t(jAe),d&&t(Qo),_($4),_(j4),_(N4),_(D4),_(q4),d&&t(NAe),d&&t(Qi),_(G4),d&&t(DAe),d&&t(Ho),_(O4),_(z4),_(V4),_(W4),_(Q4),d&&t(qAe),d&&t(Ji),_(H4),d&&t(GAe),d&&t(Uo),_(U4),_(Y4),_(K4),_(Z4),_(eM),d&&t(OAe),d&&t(Zi),_(oM),d&&t(XAe),d&&t(Jo),_(rM),_(aM),_(nM),_(sM),_(lM),d&&t(zAe),d&&t(rd),_(iM),d&&t(VAe),d&&t(Yo),_(dM),_(fM),_(mM),_(gM),_(hM),d&&t(WAe),d&&t(nd),_(pM),d&&t(QAe),d&&t(Ko),_(_M),_(bM),_(vM),_(TM),_(FM),d&&t(HAe),d&&t(id),_(CM),d&&t(UAe),d&&t(Zo),_(MM),_(yM),_(wM),_(AM),_(LM),d&&t(JAe),d&&t(fd),_(BM),d&&t(YAe),d&&t(er),_(xM),_(RM),_(SM),_(PM),_($M),d&&t(KAe),d&&t(hd),_(IM),d&&t(ZAe),d&&t(or),_(jM),_(DM),_(qM),_(GM),_(OM),d&&t(e0e),d&&t(ud),_(XM),d&&t(o0e),d&&t(rr),_(zM),_(WM),_(QM),_(HM),_(UM),d&&t(r0e),d&&t(Td),_(JM),d&&t(t0e),d&&t(tr),_(YM),_(ZM),_(eE),_(oE),_(rE),d&&t(a0e),d&&t(Ed),_(tE),d&&t(n0e),d&&t(ar),_(aE),_(sE),_(lE),_(iE),_(dE),d&&t(s0e),d&&t(Ad),_(cE),d&&t(l0e),d&&t(nr),_(fE),_(gE),_(hE),_(pE),_(uE),d&&t(i0e),d&&t(xd),_(bE),d&&t(d0e),d&&t(sr),_(vE),_(FE),_(CE),_(ME),_(EE),d&&t(c0e),d&&t(Pd),_(yE),d&&t(f0e),d&&t(lr),_(wE),_(LE),_(BE),_(xE),_(kE),d&&t(m0e),d&&t(jd),_(RE),d&&t(g0e),d&&t(ir),_(SE),_($E),_(IE),_(jE),_(NE),d&&t(h0e),d&&t(qd),_(DE),d&&t(p0e),d&&t(dr),_(qE),_(OE),_(XE),_(zE),_(WE),d&&t(_0e),d&&t(Xd),_(QE),d&&t(u0e),d&&t(cr),_(HE),_(JE),_(YE),_(KE),_(ZE),d&&t(b0e),d&&t(Wd),_(e3),d&&t(v0e),d&&t(fr),_(o3),_(t3),_(a3),_(n3),_(s3),d&&t(T0e),d&&t(Ud),_(l3),d&&t(F0e),d&&t(mr),_(i3),_(c3),_(f3),_(m3),_(g3),d&&t(C0e),d&&t(Kd),_(h3),d&&t(M0e),d&&t(gr),_(p3),_(u3),_(b3),_(v3),_(T3),d&&t(E0e),d&&t(oc),_(F3),d&&t(y0e),d&&t(hr),_(C3),_(E3),_(y3),_(w3),_(A3),d&&t(w0e),d&&t(ac),_(L3),d&&t(A0e),d&&t(pr),_(B3),_(k3),_(R3),_(S3),_(P3),d&&t(L0e),d&&t(lc),_($3),d&&t(B0e),d&&t(_r),_(I3),_(N3),_(D3),_(q3),_(G3),d&&t(x0e),d&&t(cc),_(O3),d&&t(k0e),d&&t(ur),_(X3),_(V3),_(W3),_(Q3),_(H3),d&&t(R0e),d&&t(gc),_(U3),d&&t(S0e),d&&t(br),_(J3),_(K3),_(Z3),_(ey),_(oy),d&&t(P0e),d&&t(_c),_(ry),d&&t($0e),d&&t(vr),_(ty),_(ny),_(sy),_(ly),_(iy),d&&t(I0e),d&&t(vc),_(dy),d&&t(j0e),d&&t(Tr),_(cy),_(my),_(gy),_(hy),_(py),d&&t(N0e),d&&t(Cc),_(_y),d&&t(D0e),d&&t(Fr),_(uy),_(vy),_(Ty),_(Fy),_(Cy),d&&t(q0e),d&&t(yc),_(My),d&&t(G0e),d&&t(Cr),_(Ey),_(wy),_(Ay),_(Ly),_(By),d&&t(O0e),d&&t(Lc),_(xy),d&&t(X0e),d&&t(Mr),_(ky),_(Sy),_(Py),_($y),_(Iy),d&&t(z0e),d&&t(kc),_(jy),d&&t(V0e),d&&t(Er),_(Ny),_(qy),_(Gy),_(Oy),_(Xy),d&&t(W0e),d&&t(Pc),_(zy),d&&t(Q0e),d&&t(yr),_(Vy),_(Qy),_(Hy),_(Uy),_(Jy),d&&t(H0e),d&&t(jc),_(Yy),d&&t(U0e),d&&t(wr),_(Ky),_(ew),_(ow),_(rw),_(tw),d&&t(J0e),d&&t(qc),_(aw),d&&t(Y0e),d&&t(Ar),_(nw),_(lw),_(iw),_(dw),_(cw),d&&t(K0e),d&&t(Xc),_(fw),d&&t(Z0e),d&&t(Lr),_(mw),_(hw),_(pw),_(_w),_(uw),d&&t(eLe),d&&t(Wc),_(bw),d&&t(oLe),d&&t(Br),_(vw),_(Fw),_(Cw),_(Mw),_(Ew),d&&t(rLe),d&&t(Uc),_(yw),d&&t(tLe),d&&t(xr),_(ww),_(Lw),_(Bw),_(xw),_(kw),d&&t(aLe),d&&t(Kc),_(Rw),d&&t(nLe),d&&t(kr),_(Sw),_($w),_(Iw),_(jw),_(Nw),d&&t(sLe),d&&t(of),_(Dw),d&&t(lLe),d&&t(Rr),_(qw),_(Ow),_(Xw),_(zw),_(Vw),d&&t(iLe),d&&t(af),_(Ww),d&&t(dLe),d&&t(Sr),_(Qw),_(Uw),_(Jw),_(Yw),_(Zw),d&&t(cLe),d&&t(lf),_(eA),d&&t(fLe),d&&t(Pr),_(oA),_(tA),_(aA),_(nA),_(sA)}}}const Dft={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function qft(ui,J,Ae){let{fw:le}=J;return ui.$$set=me=>{"fw"in me&&Ae(0,le=me.fw)},[le]}class Qft extends kft{constructor(J){super();Rft(this,J,qft,Nft,Sft,{fw:0})}}export{Qft as default,Dft as metadata};
