import{S as ip,i as cp,s as fp,e as s,k as c,w as _,t as r,M as hp,c as o,d as t,m as f,a as l,x as u,h as n,b as i,F as e,g as d,y as v,q as b,o as E,B as k}from"../../chunks/vendor-6b77c823.js";import{T as dp}from"../../chunks/Tip-39098574.js";import{D as $}from"../../chunks/Docstring-abef54e3.js";import{C as Vh}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Pn}from"../../chunks/IconCopyLink-7a11ce68.js";function mp(hr){let w,X,D,O,ee,M,tt,te;return{c(){w=s("p"),X=r(`In all this class, one step is to be understood as one update step. When using gradient accumulation, one update
step may require several forward and backward passes: if you use `),D=s("code"),O=r("gradient_accumulation_steps=n"),ee=r(`, then one update
step requires going through `),M=s("em"),tt=r("n"),te=r(" batches.")},l(ae){w=o(ae,"P",{});var x=l(w);X=n(x,`In all this class, one step is to be understood as one update step. When using gradient accumulation, one update
step may require several forward and backward passes: if you use `),D=o(x,"CODE",{});var R=l(D);O=n(R,"gradient_accumulation_steps=n"),R.forEach(t),ee=n(x,`, then one update
step requires going through `),M=o(x,"EM",{});var ha=l(M);tt=n(ha,"n"),ha.forEach(t),te=n(x," batches."),x.forEach(t)},m(ae,x){d(ae,w,x),e(w,X),e(w,D),e(D,O),e(w,ee),e(w,M),e(M,tt),e(w,te)},d(ae){ae&&t(w)}}}function pp(hr){let w,X,D,O,ee,M,tt,te,ae,x,R,ha,da,Js,Ys,In,N,Xs,ma,Ks,Qs,pa,Zs,eo,ga,to,ao,Mn,ke,ro,_a,no,so,xn,y,ua,va,oo,lo,io,K,ba,co,fo,Ea,ho,mo,ka,po,go,_o,Ta,$a,uo,vo,bo,Te,Ca,Eo,ko,at,To,$o,Co,$e,wa,wo,yo,rt,Ao,Do,Lo,Ce,ya,So,Oo,nt,Po,Io,Mo,we,Aa,xo,Fo,st,No,jo,Wo,ye,Da,zo,Bo,ot,Vo,Ro,Fn,L,qo,La,Uo,Ho,Sa,Go,Jo,Oa,Yo,Xo,Pa,Ko,Qo,Ia,Zo,el,Nn,re,Ae,dr,lt,tl,mr,al,jn,De,rl,Ma,nl,sl,Wn,q,it,ol,ne,ll,xa,il,cl,ct,fl,hl,dl,j,ft,ml,pr,pl,gl,C,_l,gr,ul,vl,_r,bl,El,ur,kl,Tl,vr,$l,Cl,br,wl,yl,Er,Al,Dl,kr,Ll,Sl,Tr,Ol,Pl,$r,Il,Ml,xl,ht,Fl,dt,Nl,jl,zn,se,mt,Wl,pt,zl,Fa,Bl,Vl,Bn,oe,gt,Rl,_t,ql,Na,Ul,Hl,Vn,le,ut,Gl,vt,Jl,ja,Yl,Xl,Rn,U,bt,Kl,Et,Ql,Wa,Zl,ei,ti,H,ai,za,ri,ni,Cr,si,oi,Ba,li,ii,qn,ie,kt,ci,ce,fi,Va,hi,di,Tt,mi,pi,Un,G,$t,gi,fe,_i,Ra,ui,vi,Ct,bi,Ei,ki,W,wt,Ti,yt,$i,wr,Ci,wi,yi,At,Ai,Dt,Di,Li,Si,m,Oi,yr,Pi,Ii,Ar,Mi,xi,Dr,Fi,Ni,Lr,ji,Wi,Sr,zi,Bi,Or,Vi,Ri,Pr,qi,Ui,Ir,Hi,Gi,Mr,Ji,Yi,xr,Xi,Ki,Fr,Qi,Zi,Nr,ec,tc,jr,ac,rc,Wr,nc,sc,zr,oc,lc,Br,ic,cc,Vr,fc,hc,Rr,dc,mc,qr,pc,gc,Hn,J,Lt,_c,Y,uc,qa,vc,bc,St,Ec,kc,Ur,Tc,$c,Cc,z,Ot,wc,Hr,yc,Ac,he,Dc,Gr,Lc,Sc,Jr,Oc,Pc,Ic,F,Mc,Yr,xc,Fc,Xr,Nc,jc,Ua,Wc,zc,Kr,Bc,Vc,Gn,de,Pt,Rc,me,qc,Ha,Uc,Hc,It,Gc,Jc,Jn,pe,Mt,Yc,xt,Xc,Ga,Kc,Qc,Yn,ge,Le,Qr,Ft,Zc,Zr,ef,Xn,p,Nt,tf,en,af,rf,jt,nf,tn,sf,of,lf,P,cf,an,ff,hf,rn,df,mf,nn,pf,gf,sn,_f,uf,on,vf,bf,Ef,ln,kf,Tf,Wt,$f,Se,zt,Cf,cn,wf,yf,Oe,Bt,Af,fn,Df,Lf,Pe,Vt,Sf,hn,Of,Pf,Ie,Rt,If,qt,Mf,Ja,xf,Ff,Nf,Me,Ut,jf,dn,Wf,zf,xe,Ht,Bf,mn,Vf,Rf,Fe,Gt,qf,pn,Uf,Hf,Ne,Jt,Gf,gn,Jf,Yf,je,Yt,Xf,_n,Kf,Qf,We,Xt,Zf,un,eh,th,ze,Kt,ah,vn,rh,nh,Be,Qt,sh,bn,oh,Kn,Ve,lh,Ya,ih,ch,Qn,Zt,Zn,Re,fh,En,hh,dh,es,ea,ts,_e,qe,kn,ta,mh,Tn,ph,as,I,aa,gh,ue,_h,Xa,uh,vh,Ka,bh,Eh,kh,Ue,Th,He,ra,$h,na,Ch,$n,wh,yh,Ah,Ge,sa,Dh,oa,Lh,Cn,Sh,Oh,rs,ve,Je,wn,la,Ph,yn,Ih,ns,be,ia,Mh,Ee,xh,Qa,Fh,Nh,Za,jh,Wh,ss;return M=new Pn({}),lt=new Pn({}),it=new $({props:{name:"class transformers.integrations.CometCallback",anchor:"transformers.integrations.CometCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/integrations.py#L662"}}),ft=new $({props:{name:"setup",anchor:"transformers.integrations.CometCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/integrations.py#L673"}}),mt=new $({props:{name:"class transformers.DefaultFlowCallback",anchor:"transformers.DefaultFlowCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L406"}}),gt=new $({props:{name:"class transformers.PrinterCallback",anchor:"transformers.PrinterCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L494"}}),ut=new $({props:{name:"class transformers.ProgressCallback",anchor:"transformers.ProgressCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L452"}}),bt=new $({props:{name:"class transformers.EarlyStoppingCallback",anchor:"transformers.EarlyStoppingCallback",parameters:[{name:"early_stopping_patience",val:": int = 1"},{name:"early_stopping_threshold",val:": typing.Optional[float] = 0.0"}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L505",parametersDescription:[{anchor:"transformers.EarlyStoppingCallback.early_stopping_patience",description:`<strong>early_stopping_patience</strong> (<code>int</code>) &#x2014;
Use with <code>metric_for_best_model</code> to stop training when the specified metric worsens for
<code>early_stopping_patience</code> evaluation calls.`,name:"early_stopping_patience"},{anchor:"transformers.EarlyStoppingCallback.early_stopping_threshold(float,",description:`<strong>early_stopping_threshold(<code>float</code>,</strong> <em>optional</em>) &#x2014;
Use with TrainingArguments <code>metric_for_best_model</code> and <code>early_stopping_patience</code> to denote how much the
specified metric must improve to satisfy early stopping conditions. \``,name:"early_stopping_threshold(float,"}]}}),kt=new $({props:{name:"class transformers.integrations.TensorBoardCallback",anchor:"transformers.integrations.TensorBoardCallback",parameters:[{name:"tb_writer",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/integrations.py#L448",parametersDescription:[{anchor:"transformers.integrations.TensorBoardCallback.tb_writer",description:`<strong>tb_writer</strong> (<code>SummaryWriter</code>, <em>optional</em>) &#x2014;
The writer to use. Will instantiate one if not set.`,name:"tb_writer"}]}}),$t=new $({props:{name:"class transformers.integrations.WandbCallback",anchor:"transformers.integrations.WandbCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/integrations.py#L536"}}),wt=new $({props:{name:"setup",anchor:"transformers.integrations.WandbCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/integrations.py#L553"}}),Lt=new $({props:{name:"class transformers.integrations.MLflowCallback",anchor:"transformers.integrations.MLflowCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/integrations.py#L761"}}),Ot=new $({props:{name:"setup",anchor:"transformers.integrations.MLflowCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/integrations.py#L779"}}),Pt=new $({props:{name:"class transformers.integrations.AzureMLCallback",anchor:"transformers.integrations.AzureMLCallback",parameters:[{name:"azureml_run",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/integrations.py#L738"}}),Mt=new $({props:{name:"class transformers.integrations.CodeCarbonCallback",anchor:"transformers.integrations.CodeCarbonCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/integrations.py#L923"}}),Ft=new Pn({}),Nt=new $({props:{name:"class transformers.TrainerCallback",anchor:"transformers.TrainerCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L159",parametersDescription:[{anchor:"transformers.TrainerCallback.args",description:`<strong>args</strong> (<a href="/docs/transformers/pr_16333/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>) &#x2014;
The training arguments used to instantiate the <a href="/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer">Trainer</a>.`,name:"args"},{anchor:"transformers.TrainerCallback.state",description:`<strong>state</strong> (<a href="/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerState">TrainerState</a>) &#x2014;
The current state of the <a href="/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer">Trainer</a>.`,name:"state"},{anchor:"transformers.TrainerCallback.control",description:`<strong>control</strong> (<a href="/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerControl">TrainerControl</a>) &#x2014;
The object that is returned to the <a href="/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer">Trainer</a> and can be used to make some decisions.`,name:"control"},{anchor:"transformers.TrainerCallback.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_16333/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>) &#x2014;
The model being trained.`,name:"model"},{anchor:"transformers.TrainerCallback.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_16333/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer used for encoding the data.`,name:"tokenizer"},{anchor:"transformers.TrainerCallback.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code>) &#x2014;
The optimizer used for the training steps.`,name:"optimizer"},{anchor:"transformers.TrainerCallback.lr_scheduler",description:`<strong>lr_scheduler</strong> (<code>torch.optim.lr_scheduler.LambdaLR</code>) &#x2014;
The scheduler used for setting the learning rate.`,name:"lr_scheduler"},{anchor:"transformers.TrainerCallback.train_dataloader",description:`<strong>train_dataloader</strong> (<code>torch.utils.data.DataLoader</code>, <em>optional</em>) &#x2014;
The current dataloader used for training.`,name:"train_dataloader"},{anchor:"transformers.TrainerCallback.eval_dataloader",description:`<strong>eval_dataloader</strong> (<code>torch.utils.data.DataLoader</code>, <em>optional</em>) &#x2014;
The current dataloader used for training.`,name:"eval_dataloader"},{anchor:"transformers.TrainerCallback.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics computed by the last evaluation phase.</p>
<p>Those are only accessible in the event <code>on_evaluate</code>.`,name:"metrics"},{anchor:"transformers.TrainerCallback.logs",description:`<strong>logs</strong>  (<code>Dict[str, float]</code>) &#x2014;
The values to log.</p>
<p>Those are only accessible in the event <code>on_log</code>.`,name:"logs"}]}}),Wt=new Vh({props:{code:`class PrinterCallback(TrainerCallback):
    def on_log(self, args, state, control, logs=None, **kwargs):
        _ = logs.pop("total_flos", None)
        if state.is_local_process_zero:
            print(logs)`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">PrinterCallback</span>(<span class="hljs-title class_ inherited__">TrainerCallback</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_log</span>(<span class="hljs-params">self, args, state, control, logs=<span class="hljs-literal">None</span>, **kwargs</span>):
        _ = logs.pop(<span class="hljs-string">&quot;total_flos&quot;</span>, <span class="hljs-literal">None</span>)
        <span class="hljs-keyword">if</span> state.is_local_process_zero:
            <span class="hljs-built_in">print</span>(logs)`}}),zt=new $({props:{name:"on_epoch_begin",anchor:"transformers.TrainerCallback.on_epoch_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L227"}}),Bt=new $({props:{name:"on_epoch_end",anchor:"transformers.TrainerCallback.on_epoch_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L233"}}),Vt=new $({props:{name:"on_evaluate",anchor:"transformers.TrainerCallback.on_evaluate",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L259"}}),Rt=new $({props:{name:"on_init_end",anchor:"transformers.TrainerCallback.on_init_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L209"}}),Ut=new $({props:{name:"on_log",anchor:"transformers.TrainerCallback.on_log",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L271"}}),Ht=new $({props:{name:"on_prediction_step",anchor:"transformers.TrainerCallback.on_prediction_step",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L277"}}),Gt=new $({props:{name:"on_save",anchor:"transformers.TrainerCallback.on_save",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L265"}}),Jt=new $({props:{name:"on_step_begin",anchor:"transformers.TrainerCallback.on_step_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L239"}}),Yt=new $({props:{name:"on_step_end",anchor:"transformers.TrainerCallback.on_step_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L252"}}),Xt=new $({props:{name:"on_substep_end",anchor:"transformers.TrainerCallback.on_substep_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L246"}}),Kt=new $({props:{name:"on_train_begin",anchor:"transformers.TrainerCallback.on_train_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L215"}}),Qt=new $({props:{name:"on_train_end",anchor:"transformers.TrainerCallback.on_train_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L221"}}),Zt=new Vh({props:{code:`class MyCallback(TrainerCallback):
    "A callback that prints a message at the beginning of training"

    def on_train_begin(self, args, state, control, **kwargs):
        print("Starting training")


trainer = Trainer(
    model,
    args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    callbacks=[MyCallback],  # We can either pass the callback class this way or an instance of it (MyCallback())
)`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallback</span>(<span class="hljs-title class_ inherited__">TrainerCallback</span>):
    <span class="hljs-string">&quot;A callback that prints a message at the beginning of training&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_train_begin</span>(<span class="hljs-params">self, args, state, control, **kwargs</span>):
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Starting training&quot;</span>)


trainer = Trainer(
    model,
    args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    callbacks=[MyCallback],  <span class="hljs-comment"># We can either pass the callback class this way or an instance of it (MyCallback())</span>
)`}}),ea=new Vh({props:{code:`trainer = Trainer(...)
trainer.add_callback(MyCallback)
# Alternatively, we can pass an instance of the callback class
trainer.add_callback(MyCallback())`,highlighted:`trainer = Trainer(...)
trainer.add_callback(MyCallback)
<span class="hljs-comment"># Alternatively, we can pass an instance of the callback class</span>
trainer.add_callback(MyCallback())`}}),ta=new Pn({}),aa=new $({props:{name:"class transformers.TrainerState",anchor:"transformers.TrainerState",parameters:[{name:"epoch",val:": typing.Optional[float] = None"},{name:"global_step",val:": int = 0"},{name:"max_steps",val:": int = 0"},{name:"num_train_epochs",val:": int = 0"},{name:"total_flos",val:": float = 0"},{name:"log_history",val:": typing.List[typing.Dict[str, float]] = None"},{name:"best_metric",val:": typing.Optional[float] = None"},{name:"best_model_checkpoint",val:": typing.Optional[str] = None"},{name:"is_local_process_zero",val:": bool = True"},{name:"is_world_process_zero",val:": bool = True"},{name:"is_hyper_param_search",val:": bool = False"},{name:"trial_name",val:": str = None"},{name:"trial_params",val:": typing.Dict[str, typing.Union[str, float, int, bool]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L35",parametersDescription:[{anchor:"transformers.TrainerState.epoch",description:`<strong>epoch</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Only set during training, will represent the epoch the training is at (the decimal part being the
percentage of the current epoch completed).`,name:"epoch"},{anchor:"transformers.TrainerState.global_step",description:`<strong>global_step</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
During training, represents the number of update steps completed.`,name:"global_step"},{anchor:"transformers.TrainerState.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The number of update steps to do during the current training.`,name:"max_steps"},{anchor:"transformers.TrainerState.total_flos",description:`<strong>total_flos</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The total number of floating operations done by the model since the beginning of training (stored as floats
to avoid overflow).`,name:"total_flos"},{anchor:"transformers.TrainerState.log_history",description:`<strong>log_history</strong> (<code>List[Dict[str, float]]</code>, <em>optional</em>) &#x2014;
The list of logs done since the beginning of training.`,name:"log_history"},{anchor:"transformers.TrainerState.best_metric",description:`<strong>best_metric</strong> (<code>float</code>, <em>optional</em>) &#x2014;
When tracking the best model, the value of the best metric encountered so far.`,name:"best_metric"},{anchor:"transformers.TrainerState.best_model_checkpoint",description:`<strong>best_model_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
When tracking the best model, the value of the name of the checkpoint for the best model encountered so
far.`,name:"best_model_checkpoint"},{anchor:"transformers.TrainerState.is_local_process_zero",description:`<strong>is_local_process_zero</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on
several machines) main process.`,name:"is_local_process_zero"},{anchor:"transformers.TrainerState.is_world_process_zero",description:`<strong>is_world_process_zero</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be <code>True</code> for one process).`,name:"is_world_process_zero"},{anchor:"transformers.TrainerState.is_hyper_param_search",description:`<strong>is_hyper_param_search</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether we are in the process of a hyper parameter search using Trainer.hyperparameter_search. This will
impact the way data will be logged in TensorBoard.`,name:"is_hyper_param_search"}]}}),Ue=new dp({props:{$$slots:{default:[mp]},$$scope:{ctx:hr}}}),ra=new $({props:{name:"load_from_json",anchor:"transformers.TrainerState.load_from_json",parameters:[{name:"json_path",val:": str"}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L101"}}),sa=new $({props:{name:"save_to_json",anchor:"transformers.TrainerState.save_to_json",parameters:[{name:"json_path",val:": str"}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L95"}}),la=new Pn({}),ia=new $({props:{name:"class transformers.TrainerControl",anchor:"transformers.TrainerControl",parameters:[{name:"should_training_stop",val:": bool = False"},{name:"should_epoch_stop",val:": bool = False"},{name:"should_save",val:": bool = False"},{name:"should_evaluate",val:": bool = False"},{name:"should_log",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16333/src/transformers/trainer_callback.py#L110",parametersDescription:[{anchor:"transformers.TrainerControl.should_training_stop",description:`<strong>should_training_stop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the training should be interrupted.</p>
<p>If <code>True</code>, this variable will not be set back to <code>False</code>. The training will just stop.`,name:"should_training_stop"},{anchor:"transformers.TrainerControl.should_epoch_stop",description:`<strong>should_epoch_stop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the current epoch should be interrupted.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next epoch.`,name:"should_epoch_stop"},{anchor:"transformers.TrainerControl.should_save",description:`<strong>should_save</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should be saved at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_save"},{anchor:"transformers.TrainerControl.should_evaluate",description:`<strong>should_evaluate</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should be evaluated at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_evaluate"},{anchor:"transformers.TrainerControl.should_log",description:`<strong>should_log</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the logs should be reported at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_log"}]}}),{c(){w=s("meta"),X=c(),D=s("h1"),O=s("a"),ee=s("span"),_(M.$$.fragment),tt=c(),te=s("span"),ae=r("Callbacks"),x=c(),R=s("p"),ha=r(`Callbacks are objects that can customize the behavior of the training loop in the PyTorch
`),da=s("a"),Js=r("Trainer"),Ys=r(` (this feature is not yet implemented in TensorFlow) that can inspect the training loop
state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early
stopping).`),In=c(),N=s("p"),Xs=r("Callbacks are \u201Cread only\u201D pieces of code, apart from the "),ma=s("a"),Ks=r("TrainerControl"),Qs=r(` object they return, they
cannot change anything in the training loop. For customizations that require changes in the training loop, you should
subclass `),pa=s("a"),Zs=r("Trainer"),eo=r(" and override the methods you need (see "),ga=s("a"),to=r("trainer"),ao=r(" for examples)."),Mn=c(),ke=s("p"),ro=r("By default a "),_a=s("a"),no=r("Trainer"),so=r(" will use the following callbacks:"),xn=c(),y=s("ul"),ua=s("li"),va=s("a"),oo=r("DefaultFlowCallback"),lo=r(" which handles the default behavior for logging, saving and evaluation."),io=c(),K=s("li"),ba=s("a"),co=r("PrinterCallback"),fo=r(" or "),Ea=s("a"),ho=r("ProgressCallback"),mo=r(` to display progress and print the
logs (the first one is used if you deactivate tqdm through the `),ka=s("a"),po=r("TrainingArguments"),go=r(`, otherwise
it\u2019s the second one).`),_o=c(),Ta=s("li"),$a=s("a"),uo=r("TensorBoardCallback"),vo=r(` if tensorboard is accessible (either through PyTorch >= 1.4
or tensorboardX).`),bo=c(),Te=s("li"),Ca=s("a"),Eo=r("WandbCallback"),ko=r(" if "),at=s("a"),To=r("wandb"),$o=r(" is installed."),Co=c(),$e=s("li"),wa=s("a"),wo=r("CometCallback"),yo=r(" if "),rt=s("a"),Ao=r("comet_ml"),Do=r(" is installed."),Lo=c(),Ce=s("li"),ya=s("a"),So=r("MLflowCallback"),Oo=r(" if "),nt=s("a"),Po=r("mlflow"),Io=r(" is installed."),Mo=c(),we=s("li"),Aa=s("a"),xo=r("AzureMLCallback"),Fo=r(" if "),st=s("a"),No=r("azureml-sdk"),jo=r(` is
installed.`),Wo=c(),ye=s("li"),Da=s("a"),zo=r("CodeCarbonCallback"),Bo=r(" if "),ot=s("a"),Vo=r("codecarbon"),Ro=r(` is
installed.`),Fn=c(),L=s("p"),qo=r("The main class that implements callbacks is "),La=s("a"),Uo=r("TrainerCallback"),Ho=r(`. It gets the
`),Sa=s("a"),Go=r("TrainingArguments"),Jo=r(" used to instantiate the "),Oa=s("a"),Yo=r("Trainer"),Xo=r(`, can access that
Trainer\u2019s internal state via `),Pa=s("a"),Ko=r("TrainerState"),Qo=r(`, and can take some actions on the training loop via
`),Ia=s("a"),Zo=r("TrainerControl"),el=r("."),Nn=c(),re=s("h2"),Ae=s("a"),dr=s("span"),_(lt.$$.fragment),tl=c(),mr=s("span"),al=r("Available Callbacks"),jn=c(),De=s("p"),rl=r("Here is the list of the available "),Ma=s("a"),nl=r("TrainerCallback"),sl=r(" in the library:"),Wn=c(),q=s("div"),_(it.$$.fragment),ol=c(),ne=s("p"),ll=r("A "),xa=s("a"),il=r("TrainerCallback"),cl=r(" that sends the logs to "),ct=s("a"),fl=r("Comet ML"),hl=r("."),dl=c(),j=s("div"),_(ft.$$.fragment),ml=c(),pr=s("p"),pl=r("Setup the optional Comet.ml integration."),gl=c(),C=s("p"),_l=r(`Environment:
COMET_MODE (`),gr=s("code"),ul=r("str"),vl=r(", "),_r=s("em"),bl=r("optional"),El=r(`):
Whether to create an online, offline experiment or disable Comet logging. Can be \u201COFFLINE\u201D, \u201CONLINE\u201D,
or \u201CDISABLED\u201D. Defaults to \u201CONLINE\u201D.
COMET_PROJECT_NAME (`),ur=s("code"),kl=r("str"),Tl=r(", "),vr=s("em"),$l=r("optional"),Cl=r(`):
Comet project name for experiments
COMET_OFFLINE_DIRECTORY (`),br=s("code"),wl=r("str"),yl=r(", "),Er=s("em"),Al=r("optional"),Dl=r(`):
Folder to use for saving offline experiments when `),kr=s("code"),Ll=r("COMET_MODE"),Sl=r(` is \u201COFFLINE\u201D
COMET_LOG_ASSETS (`),Tr=s("code"),Ol=r("str"),Pl=r(", "),$r=s("em"),Il=r("optional"),Ml=r(`):
Whether or not to log training assets (tf event logs, checkpoints, etc), to Comet. Can be \u201CTRUE\u201D, or
\u201CFALSE\u201D. Defaults to \u201CTRUE\u201D.`),xl=c(),ht=s("p"),Fl=r(`For a number of configurable items in the environment, see
`),dt=s("a"),Nl=r("here"),jl=r("."),zn=c(),se=s("div"),_(mt.$$.fragment),Wl=c(),pt=s("p"),zl=r("A "),Fa=s("a"),Bl=r("TrainerCallback"),Vl=r(" that handles the default flow of the training loop for logs, evaluation and checkpoints."),Bn=c(),oe=s("div"),_(gt.$$.fragment),Rl=c(),_t=s("p"),ql=r("A bare "),Na=s("a"),Ul=r("TrainerCallback"),Hl=r(" that just prints the logs."),Vn=c(),le=s("div"),_(ut.$$.fragment),Gl=c(),vt=s("p"),Jl=r("A "),ja=s("a"),Yl=r("TrainerCallback"),Xl=r(" that displays the progress of training or evaluation."),Rn=c(),U=s("div"),_(bt.$$.fragment),Kl=c(),Et=s("p"),Ql=r("A "),Wa=s("a"),Zl=r("TrainerCallback"),ei=r(" that handles early stopping."),ti=c(),H=s("p"),ai=r("This callback depends on "),za=s("a"),ri=r("TrainingArguments"),ni=r(" argument "),Cr=s("em"),si=r("load_best_model_at_end"),oi=r(` functionality to set best_metric
in `),Ba=s("a"),li=r("TrainerState"),ii=r("."),qn=c(),ie=s("div"),_(kt.$$.fragment),ci=c(),ce=s("p"),fi=r("A "),Va=s("a"),hi=r("TrainerCallback"),di=r(" that sends the logs to "),Tt=s("a"),mi=r("TensorBoard"),pi=r("."),Un=c(),G=s("div"),_($t.$$.fragment),gi=c(),fe=s("p"),_i=r("A "),Ra=s("a"),ui=r("TrainerCallback"),vi=r(" that sends the logs to "),Ct=s("a"),bi=r("Weight and Biases"),Ei=r("."),ki=c(),W=s("div"),_(wt.$$.fragment),Ti=c(),yt=s("p"),$i=r("Setup the optional Weights & Biases ("),wr=s("em"),Ci=r("wandb"),wi=r(") integration."),yi=c(),At=s("p"),Ai=r(`One can subclass and override this method to customize the setup if needed. Find more information
`),Dt=s("a"),Di=r("here"),Li=r(`. You can also override the following environment
variables:`),Si=c(),m=s("p"),Oi=r(`Environment:
WANDB_LOG_MODEL (`),yr=s("code"),Pi=r("bool"),Ii=r(", "),Ar=s("em"),Mi=r("optional"),xi=r(", defaults to "),Dr=s("code"),Fi=r("False"),Ni=r(`):
Whether or not to log model as artifact at the end of training. Use along with
`),Lr=s("em"),ji=r("TrainingArguments.load_best_model_at_end"),Wi=r(` to upload best model.
WANDB_WATCH (`),Sr=s("code"),zi=r("str"),Bi=r(", "),Or=s("em"),Vi=r("optional"),Ri=r(" defaults to "),Pr=s("code"),qi=r('"gradients"'),Ui=r(`):
Can be `),Ir=s("code"),Hi=r('"gradients"'),Gi=r(", "),Mr=s("code"),Ji=r('"all"'),Yi=r(" or "),xr=s("code"),Xi=r('"false"'),Ki=r(". Set to "),Fr=s("code"),Qi=r('"false"'),Zi=r(" to disable gradient logging or "),Nr=s("code"),ec=r('"all"'),tc=r(` to
log gradients and parameters.
WANDB_PROJECT (`),jr=s("code"),ac=r("str"),rc=r(", "),Wr=s("em"),nc=r("optional"),sc=r(", defaults to "),zr=s("code"),oc=r('"huggingface"'),lc=r(`):
Set this to a custom string to store results in a different project.
WANDB_DISABLED (`),Br=s("code"),ic=r("bool"),cc=r(", "),Vr=s("em"),fc=r("optional"),hc=r(", defaults to "),Rr=s("code"),dc=r("False"),mc=r(`):
Whether or not to disable wandb entirely. Set `),qr=s("em"),pc=r("WANDB_DISABLED=true"),gc=r(" to disable."),Hn=c(),J=s("div"),_(Lt.$$.fragment),_c=c(),Y=s("p"),uc=r("A "),qa=s("a"),vc=r("TrainerCallback"),bc=r(" that sends the logs to "),St=s("a"),Ec=r("MLflow"),kc=r(`. Can be disabled by setting
environment variable `),Ur=s("code"),Tc=r("DISABLE_MLFLOW_INTEGRATION = TRUE"),$c=r("."),Cc=c(),z=s("div"),_(Ot.$$.fragment),wc=c(),Hr=s("p"),yc=r("Setup the optional MLflow integration."),Ac=c(),he=s("p"),Dc=r(`Environment:
HF_MLFLOW_LOG_ARTIFACTS (`),Gr=s("code"),Lc=r("str"),Sc=r(", "),Jr=s("em"),Oc=r("optional"),Pc=r(`):
Whether to use MLflow .log_artifact() facility to log artifacts.`),Ic=c(),F=s("p"),Mc=r("This only makes sense if logging to a remote server, e.g. s3 or GCS. If set to "),Yr=s("code"),xc=r("True"),Fc=r(" or "),Xr=s("em"),Nc=r("1"),jc=r(`, will copy
whatever is in `),Ua=s("a"),Wc=r("TrainingArguments"),zc=r("\u2019s "),Kr=s("code"),Bc=r("output_dir"),Vc=r(` to the local or remote artifact storage. Using it
without a remote storage will just copy the files to your artifact location.`),Gn=c(),de=s("div"),_(Pt.$$.fragment),Rc=c(),me=s("p"),qc=r("A "),Ha=s("a"),Uc=r("TrainerCallback"),Hc=r(" that sends the logs to "),It=s("a"),Gc=r("AzureML"),Jc=r("."),Jn=c(),pe=s("div"),_(Mt.$$.fragment),Yc=c(),xt=s("p"),Xc=r("A "),Ga=s("a"),Kc=r("TrainerCallback"),Qc=r(" that tracks the CO2 emission of training."),Yn=c(),ge=s("h2"),Le=s("a"),Qr=s("span"),_(Ft.$$.fragment),Zc=c(),Zr=s("span"),ef=r("TrainerCallback"),Xn=c(),p=s("div"),_(Nt.$$.fragment),tf=c(),en=s("p"),af=r(`A class for objects that will inspect the state of the training loop at some events and take some decisions. At
each of those events the following arguments are available:`),rf=c(),jt=s("p"),nf=r("The "),tn=s("code"),sf=r("control"),of=r(` object is the only one that can be changed by the callback, in which case the event that changes it
should return the modified version.`),lf=c(),P=s("p"),cf=r("The argument "),an=s("code"),ff=r("args"),hf=r(", "),rn=s("code"),df=r("state"),mf=r(" and "),nn=s("code"),pf=r("control"),gf=r(" are positionals for all events, all the others are grouped in "),sn=s("code"),_f=r("kwargs"),uf=r(`.
You can unpack the ones you need in the signature of the event using them. As an example, see the code of the
simple `),on=s("code"),vf=r("PrinterCallback"),bf=r("."),Ef=c(),ln=s("p"),kf=r("Example:"),Tf=c(),_(Wt.$$.fragment),$f=c(),Se=s("div"),_(zt.$$.fragment),Cf=c(),cn=s("p"),wf=r("Event called at the beginning of an epoch."),yf=c(),Oe=s("div"),_(Bt.$$.fragment),Af=c(),fn=s("p"),Df=r("Event called at the end of an epoch."),Lf=c(),Pe=s("div"),_(Vt.$$.fragment),Sf=c(),hn=s("p"),Of=r("Event called after an evaluation phase."),Pf=c(),Ie=s("div"),_(Rt.$$.fragment),If=c(),qt=s("p"),Mf=r("Event called at the end of the initialization of the "),Ja=s("a"),xf=r("Trainer"),Ff=r("."),Nf=c(),Me=s("div"),_(Ut.$$.fragment),jf=c(),dn=s("p"),Wf=r("Event called after logging the last logs."),zf=c(),xe=s("div"),_(Ht.$$.fragment),Bf=c(),mn=s("p"),Vf=r("Event called after a prediction step."),Rf=c(),Fe=s("div"),_(Gt.$$.fragment),qf=c(),pn=s("p"),Uf=r("Event called after a checkpoint save."),Hf=c(),Ne=s("div"),_(Jt.$$.fragment),Gf=c(),gn=s("p"),Jf=r(`Event called at the beginning of a training step. If using gradient accumulation, one training step might take
several inputs.`),Yf=c(),je=s("div"),_(Yt.$$.fragment),Xf=c(),_n=s("p"),Kf=r(`Event called at the end of a training step. If using gradient accumulation, one training step might take
several inputs.`),Qf=c(),We=s("div"),_(Xt.$$.fragment),Zf=c(),un=s("p"),eh=r("Event called at the end of an substep during gradient accumulation."),th=c(),ze=s("div"),_(Kt.$$.fragment),ah=c(),vn=s("p"),rh=r("Event called at the beginning of training."),nh=c(),Be=s("div"),_(Qt.$$.fragment),sh=c(),bn=s("p"),oh=r("Event called at the end of training."),Kn=c(),Ve=s("p"),lh=r("Here is an example of how to register a custom callback with the PyTorch "),Ya=s("a"),ih=r("Trainer"),ch=r(":"),Qn=c(),_(Zt.$$.fragment),Zn=c(),Re=s("p"),fh=r("Another way to register a callback is to call "),En=s("code"),hh=r("trainer.add_callback()"),dh=r(" as follows:"),es=c(),_(ea.$$.fragment),ts=c(),_e=s("h2"),qe=s("a"),kn=s("span"),_(ta.$$.fragment),mh=c(),Tn=s("span"),ph=r("TrainerState"),as=c(),I=s("div"),_(aa.$$.fragment),gh=c(),ue=s("p"),_h=r("A class containing the "),Xa=s("a"),uh=r("Trainer"),vh=r(` inner state that will be saved along the model and optimizer when checkpointing
and passed to the `),Ka=s("a"),bh=r("TrainerCallback"),Eh=r("."),kh=c(),_(Ue.$$.fragment),Th=c(),He=s("div"),_(ra.$$.fragment),$h=c(),na=s("p"),Ch=r("Create an instance from the content of "),$n=s("code"),wh=r("json_path"),yh=r("."),Ah=c(),Ge=s("div"),_(sa.$$.fragment),Dh=c(),oa=s("p"),Lh=r("Save the content of this instance in JSON format inside "),Cn=s("code"),Sh=r("json_path"),Oh=r("."),rs=c(),ve=s("h2"),Je=s("a"),wn=s("span"),_(la.$$.fragment),Ph=c(),yn=s("span"),Ih=r("TrainerControl"),ns=c(),be=s("div"),_(ia.$$.fragment),Mh=c(),Ee=s("p"),xh=r("A class that handles the "),Qa=s("a"),Fh=r("Trainer"),Nh=r(" control flow. This class is used by the "),Za=s("a"),jh=r("TrainerCallback"),Wh=r(` to activate some
switches in the training loop.`),this.h()},l(a){const h=hp('[data-svelte="svelte-1phssyn"]',document.head);w=o(h,"META",{name:!0,content:!0}),h.forEach(t),X=f(a),D=o(a,"H1",{class:!0});var ca=l(D);O=o(ca,"A",{id:!0,class:!0,href:!0});var Rh=l(O);ee=o(Rh,"SPAN",{});var qh=l(ee);u(M.$$.fragment,qh),qh.forEach(t),Rh.forEach(t),tt=f(ca),te=o(ca,"SPAN",{});var Uh=l(te);ae=n(Uh,"Callbacks"),Uh.forEach(t),ca.forEach(t),x=f(a),R=o(a,"P",{});var os=l(R);ha=n(os,`Callbacks are objects that can customize the behavior of the training loop in the PyTorch
`),da=o(os,"A",{href:!0});var Hh=l(da);Js=n(Hh,"Trainer"),Hh.forEach(t),Ys=n(os,` (this feature is not yet implemented in TensorFlow) that can inspect the training loop
state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early
stopping).`),os.forEach(t),In=f(a),N=o(a,"P",{});var Ye=l(N);Xs=n(Ye,"Callbacks are \u201Cread only\u201D pieces of code, apart from the "),ma=o(Ye,"A",{href:!0});var Gh=l(ma);Ks=n(Gh,"TrainerControl"),Gh.forEach(t),Qs=n(Ye,` object they return, they
cannot change anything in the training loop. For customizations that require changes in the training loop, you should
subclass `),pa=o(Ye,"A",{href:!0});var Jh=l(pa);Zs=n(Jh,"Trainer"),Jh.forEach(t),eo=n(Ye," and override the methods you need (see "),ga=o(Ye,"A",{href:!0});var Yh=l(ga);to=n(Yh,"trainer"),Yh.forEach(t),ao=n(Ye," for examples)."),Ye.forEach(t),Mn=f(a),ke=o(a,"P",{});var ls=l(ke);ro=n(ls,"By default a "),_a=o(ls,"A",{href:!0});var Xh=l(_a);no=n(Xh,"Trainer"),Xh.forEach(t),so=n(ls," will use the following callbacks:"),ls.forEach(t),xn=f(a),y=o(a,"UL",{});var S=l(y);ua=o(S,"LI",{});var zh=l(ua);va=o(zh,"A",{href:!0});var Kh=l(va);oo=n(Kh,"DefaultFlowCallback"),Kh.forEach(t),lo=n(zh," which handles the default behavior for logging, saving and evaluation."),zh.forEach(t),io=f(S),K=o(S,"LI",{});var fa=l(K);ba=o(fa,"A",{href:!0});var Qh=l(ba);co=n(Qh,"PrinterCallback"),Qh.forEach(t),fo=n(fa," or "),Ea=o(fa,"A",{href:!0});var Zh=l(Ea);ho=n(Zh,"ProgressCallback"),Zh.forEach(t),mo=n(fa,` to display progress and print the
logs (the first one is used if you deactivate tqdm through the `),ka=o(fa,"A",{href:!0});var ed=l(ka);po=n(ed,"TrainingArguments"),ed.forEach(t),go=n(fa,`, otherwise
it\u2019s the second one).`),fa.forEach(t),_o=f(S),Ta=o(S,"LI",{});var Bh=l(Ta);$a=o(Bh,"A",{href:!0});var td=l($a);uo=n(td,"TensorBoardCallback"),td.forEach(t),vo=n(Bh,` if tensorboard is accessible (either through PyTorch >= 1.4
or tensorboardX).`),Bh.forEach(t),bo=f(S),Te=o(S,"LI",{});var An=l(Te);Ca=o(An,"A",{href:!0});var ad=l(Ca);Eo=n(ad,"WandbCallback"),ad.forEach(t),ko=n(An," if "),at=o(An,"A",{href:!0,rel:!0});var rd=l(at);To=n(rd,"wandb"),rd.forEach(t),$o=n(An," is installed."),An.forEach(t),Co=f(S),$e=o(S,"LI",{});var Dn=l($e);wa=o(Dn,"A",{href:!0});var nd=l(wa);wo=n(nd,"CometCallback"),nd.forEach(t),yo=n(Dn," if "),rt=o(Dn,"A",{href:!0,rel:!0});var sd=l(rt);Ao=n(sd,"comet_ml"),sd.forEach(t),Do=n(Dn," is installed."),Dn.forEach(t),Lo=f(S),Ce=o(S,"LI",{});var Ln=l(Ce);ya=o(Ln,"A",{href:!0});var od=l(ya);So=n(od,"MLflowCallback"),od.forEach(t),Oo=n(Ln," if "),nt=o(Ln,"A",{href:!0,rel:!0});var ld=l(nt);Po=n(ld,"mlflow"),ld.forEach(t),Io=n(Ln," is installed."),Ln.forEach(t),Mo=f(S),we=o(S,"LI",{});var Sn=l(we);Aa=o(Sn,"A",{href:!0});var id=l(Aa);xo=n(id,"AzureMLCallback"),id.forEach(t),Fo=n(Sn," if "),st=o(Sn,"A",{href:!0,rel:!0});var cd=l(st);No=n(cd,"azureml-sdk"),cd.forEach(t),jo=n(Sn,` is
installed.`),Sn.forEach(t),Wo=f(S),ye=o(S,"LI",{});var On=l(ye);Da=o(On,"A",{href:!0});var fd=l(Da);zo=n(fd,"CodeCarbonCallback"),fd.forEach(t),Bo=n(On," if "),ot=o(On,"A",{href:!0,rel:!0});var hd=l(ot);Vo=n(hd,"codecarbon"),hd.forEach(t),Ro=n(On,` is
installed.`),On.forEach(t),S.forEach(t),Fn=f(a),L=o(a,"P",{});var B=l(L);qo=n(B,"The main class that implements callbacks is "),La=o(B,"A",{href:!0});var dd=l(La);Uo=n(dd,"TrainerCallback"),dd.forEach(t),Ho=n(B,`. It gets the
`),Sa=o(B,"A",{href:!0});var md=l(Sa);Go=n(md,"TrainingArguments"),md.forEach(t),Jo=n(B," used to instantiate the "),Oa=o(B,"A",{href:!0});var pd=l(Oa);Yo=n(pd,"Trainer"),pd.forEach(t),Xo=n(B,`, can access that
Trainer\u2019s internal state via `),Pa=o(B,"A",{href:!0});var gd=l(Pa);Ko=n(gd,"TrainerState"),gd.forEach(t),Qo=n(B,`, and can take some actions on the training loop via
`),Ia=o(B,"A",{href:!0});var _d=l(Ia);Zo=n(_d,"TrainerControl"),_d.forEach(t),el=n(B,"."),B.forEach(t),Nn=f(a),re=o(a,"H2",{class:!0});var is=l(re);Ae=o(is,"A",{id:!0,class:!0,href:!0});var ud=l(Ae);dr=o(ud,"SPAN",{});var vd=l(dr);u(lt.$$.fragment,vd),vd.forEach(t),ud.forEach(t),tl=f(is),mr=o(is,"SPAN",{});var bd=l(mr);al=n(bd,"Available Callbacks"),bd.forEach(t),is.forEach(t),jn=f(a),De=o(a,"P",{});var cs=l(De);rl=n(cs,"Here is the list of the available "),Ma=o(cs,"A",{href:!0});var Ed=l(Ma);nl=n(Ed,"TrainerCallback"),Ed.forEach(t),sl=n(cs," in the library:"),cs.forEach(t),Wn=f(a),q=o(a,"DIV",{class:!0});var er=l(q);u(it.$$.fragment,er),ol=f(er),ne=o(er,"P",{});var tr=l(ne);ll=n(tr,"A "),xa=o(tr,"A",{href:!0});var kd=l(xa);il=n(kd,"TrainerCallback"),kd.forEach(t),cl=n(tr," that sends the logs to "),ct=o(tr,"A",{href:!0,rel:!0});var Td=l(ct);fl=n(Td,"Comet ML"),Td.forEach(t),hl=n(tr,"."),tr.forEach(t),dl=f(er),j=o(er,"DIV",{class:!0});var Xe=l(j);u(ft.$$.fragment,Xe),ml=f(Xe),pr=o(Xe,"P",{});var $d=l(pr);pl=n($d,"Setup the optional Comet.ml integration."),$d.forEach(t),gl=f(Xe),C=o(Xe,"P",{});var A=l(C);_l=n(A,`Environment:
COMET_MODE (`),gr=o(A,"CODE",{});var Cd=l(gr);ul=n(Cd,"str"),Cd.forEach(t),vl=n(A,", "),_r=o(A,"EM",{});var wd=l(_r);bl=n(wd,"optional"),wd.forEach(t),El=n(A,`):
Whether to create an online, offline experiment or disable Comet logging. Can be \u201COFFLINE\u201D, \u201CONLINE\u201D,
or \u201CDISABLED\u201D. Defaults to \u201CONLINE\u201D.
COMET_PROJECT_NAME (`),ur=o(A,"CODE",{});var yd=l(ur);kl=n(yd,"str"),yd.forEach(t),Tl=n(A,", "),vr=o(A,"EM",{});var Ad=l(vr);$l=n(Ad,"optional"),Ad.forEach(t),Cl=n(A,`):
Comet project name for experiments
COMET_OFFLINE_DIRECTORY (`),br=o(A,"CODE",{});var Dd=l(br);wl=n(Dd,"str"),Dd.forEach(t),yl=n(A,", "),Er=o(A,"EM",{});var Ld=l(Er);Al=n(Ld,"optional"),Ld.forEach(t),Dl=n(A,`):
Folder to use for saving offline experiments when `),kr=o(A,"CODE",{});var Sd=l(kr);Ll=n(Sd,"COMET_MODE"),Sd.forEach(t),Sl=n(A,` is \u201COFFLINE\u201D
COMET_LOG_ASSETS (`),Tr=o(A,"CODE",{});var Od=l(Tr);Ol=n(Od,"str"),Od.forEach(t),Pl=n(A,", "),$r=o(A,"EM",{});var Pd=l($r);Il=n(Pd,"optional"),Pd.forEach(t),Ml=n(A,`):
Whether or not to log training assets (tf event logs, checkpoints, etc), to Comet. Can be \u201CTRUE\u201D, or
\u201CFALSE\u201D. Defaults to \u201CTRUE\u201D.`),A.forEach(t),xl=f(Xe),ht=o(Xe,"P",{});var fs=l(ht);Fl=n(fs,`For a number of configurable items in the environment, see
`),dt=o(fs,"A",{href:!0,rel:!0});var Id=l(dt);Nl=n(Id,"here"),Id.forEach(t),jl=n(fs,"."),fs.forEach(t),Xe.forEach(t),er.forEach(t),zn=f(a),se=o(a,"DIV",{class:!0});var hs=l(se);u(mt.$$.fragment,hs),Wl=f(hs),pt=o(hs,"P",{});var ds=l(pt);zl=n(ds,"A "),Fa=o(ds,"A",{href:!0});var Md=l(Fa);Bl=n(Md,"TrainerCallback"),Md.forEach(t),Vl=n(ds," that handles the default flow of the training loop for logs, evaluation and checkpoints."),ds.forEach(t),hs.forEach(t),Bn=f(a),oe=o(a,"DIV",{class:!0});var ms=l(oe);u(gt.$$.fragment,ms),Rl=f(ms),_t=o(ms,"P",{});var ps=l(_t);ql=n(ps,"A bare "),Na=o(ps,"A",{href:!0});var xd=l(Na);Ul=n(xd,"TrainerCallback"),xd.forEach(t),Hl=n(ps," that just prints the logs."),ps.forEach(t),ms.forEach(t),Vn=f(a),le=o(a,"DIV",{class:!0});var gs=l(le);u(ut.$$.fragment,gs),Gl=f(gs),vt=o(gs,"P",{});var _s=l(vt);Jl=n(_s,"A "),ja=o(_s,"A",{href:!0});var Fd=l(ja);Yl=n(Fd,"TrainerCallback"),Fd.forEach(t),Xl=n(_s," that displays the progress of training or evaluation."),_s.forEach(t),gs.forEach(t),Rn=f(a),U=o(a,"DIV",{class:!0});var ar=l(U);u(bt.$$.fragment,ar),Kl=f(ar),Et=o(ar,"P",{});var us=l(Et);Ql=n(us,"A "),Wa=o(us,"A",{href:!0});var Nd=l(Wa);Zl=n(Nd,"TrainerCallback"),Nd.forEach(t),ei=n(us," that handles early stopping."),us.forEach(t),ti=f(ar),H=o(ar,"P",{});var Ke=l(H);ai=n(Ke,"This callback depends on "),za=o(Ke,"A",{href:!0});var jd=l(za);ri=n(jd,"TrainingArguments"),jd.forEach(t),ni=n(Ke," argument "),Cr=o(Ke,"EM",{});var Wd=l(Cr);si=n(Wd,"load_best_model_at_end"),Wd.forEach(t),oi=n(Ke,` functionality to set best_metric
in `),Ba=o(Ke,"A",{href:!0});var zd=l(Ba);li=n(zd,"TrainerState"),zd.forEach(t),ii=n(Ke,"."),Ke.forEach(t),ar.forEach(t),qn=f(a),ie=o(a,"DIV",{class:!0});var vs=l(ie);u(kt.$$.fragment,vs),ci=f(vs),ce=o(vs,"P",{});var rr=l(ce);fi=n(rr,"A "),Va=o(rr,"A",{href:!0});var Bd=l(Va);hi=n(Bd,"TrainerCallback"),Bd.forEach(t),di=n(rr," that sends the logs to "),Tt=o(rr,"A",{href:!0,rel:!0});var Vd=l(Tt);mi=n(Vd,"TensorBoard"),Vd.forEach(t),pi=n(rr,"."),rr.forEach(t),vs.forEach(t),Un=f(a),G=o(a,"DIV",{class:!0});var nr=l(G);u($t.$$.fragment,nr),gi=f(nr),fe=o(nr,"P",{});var sr=l(fe);_i=n(sr,"A "),Ra=o(sr,"A",{href:!0});var Rd=l(Ra);ui=n(Rd,"TrainerCallback"),Rd.forEach(t),vi=n(sr," that sends the logs to "),Ct=o(sr,"A",{href:!0,rel:!0});var qd=l(Ct);bi=n(qd,"Weight and Biases"),qd.forEach(t),Ei=n(sr,"."),sr.forEach(t),ki=f(nr),W=o(nr,"DIV",{class:!0});var Qe=l(W);u(wt.$$.fragment,Qe),Ti=f(Qe),yt=o(Qe,"P",{});var bs=l(yt);$i=n(bs,"Setup the optional Weights & Biases ("),wr=o(bs,"EM",{});var Ud=l(wr);Ci=n(Ud,"wandb"),Ud.forEach(t),wi=n(bs,") integration."),bs.forEach(t),yi=f(Qe),At=o(Qe,"P",{});var Es=l(At);Ai=n(Es,`One can subclass and override this method to customize the setup if needed. Find more information
`),Dt=o(Es,"A",{href:!0,rel:!0});var Hd=l(Dt);Di=n(Hd,"here"),Hd.forEach(t),Li=n(Es,`. You can also override the following environment
variables:`),Es.forEach(t),Si=f(Qe),m=o(Qe,"P",{});var g=l(m);Oi=n(g,`Environment:
WANDB_LOG_MODEL (`),yr=o(g,"CODE",{});var Gd=l(yr);Pi=n(Gd,"bool"),Gd.forEach(t),Ii=n(g,", "),Ar=o(g,"EM",{});var Jd=l(Ar);Mi=n(Jd,"optional"),Jd.forEach(t),xi=n(g,", defaults to "),Dr=o(g,"CODE",{});var Yd=l(Dr);Fi=n(Yd,"False"),Yd.forEach(t),Ni=n(g,`):
Whether or not to log model as artifact at the end of training. Use along with
`),Lr=o(g,"EM",{});var Xd=l(Lr);ji=n(Xd,"TrainingArguments.load_best_model_at_end"),Xd.forEach(t),Wi=n(g,` to upload best model.
WANDB_WATCH (`),Sr=o(g,"CODE",{});var Kd=l(Sr);zi=n(Kd,"str"),Kd.forEach(t),Bi=n(g,", "),Or=o(g,"EM",{});var Qd=l(Or);Vi=n(Qd,"optional"),Qd.forEach(t),Ri=n(g," defaults to "),Pr=o(g,"CODE",{});var Zd=l(Pr);qi=n(Zd,'"gradients"'),Zd.forEach(t),Ui=n(g,`):
Can be `),Ir=o(g,"CODE",{});var em=l(Ir);Hi=n(em,'"gradients"'),em.forEach(t),Gi=n(g,", "),Mr=o(g,"CODE",{});var tm=l(Mr);Ji=n(tm,'"all"'),tm.forEach(t),Yi=n(g," or "),xr=o(g,"CODE",{});var am=l(xr);Xi=n(am,'"false"'),am.forEach(t),Ki=n(g,". Set to "),Fr=o(g,"CODE",{});var rm=l(Fr);Qi=n(rm,'"false"'),rm.forEach(t),Zi=n(g," to disable gradient logging or "),Nr=o(g,"CODE",{});var nm=l(Nr);ec=n(nm,'"all"'),nm.forEach(t),tc=n(g,` to
log gradients and parameters.
WANDB_PROJECT (`),jr=o(g,"CODE",{});var sm=l(jr);ac=n(sm,"str"),sm.forEach(t),rc=n(g,", "),Wr=o(g,"EM",{});var om=l(Wr);nc=n(om,"optional"),om.forEach(t),sc=n(g,", defaults to "),zr=o(g,"CODE",{});var lm=l(zr);oc=n(lm,'"huggingface"'),lm.forEach(t),lc=n(g,`):
Set this to a custom string to store results in a different project.
WANDB_DISABLED (`),Br=o(g,"CODE",{});var im=l(Br);ic=n(im,"bool"),im.forEach(t),cc=n(g,", "),Vr=o(g,"EM",{});var cm=l(Vr);fc=n(cm,"optional"),cm.forEach(t),hc=n(g,", defaults to "),Rr=o(g,"CODE",{});var fm=l(Rr);dc=n(fm,"False"),fm.forEach(t),mc=n(g,`):
Whether or not to disable wandb entirely. Set `),qr=o(g,"EM",{});var hm=l(qr);pc=n(hm,"WANDB_DISABLED=true"),hm.forEach(t),gc=n(g," to disable."),g.forEach(t),Qe.forEach(t),nr.forEach(t),Hn=f(a),J=o(a,"DIV",{class:!0});var or=l(J);u(Lt.$$.fragment,or),_c=f(or),Y=o(or,"P",{});var Ze=l(Y);uc=n(Ze,"A "),qa=o(Ze,"A",{href:!0});var dm=l(qa);vc=n(dm,"TrainerCallback"),dm.forEach(t),bc=n(Ze," that sends the logs to "),St=o(Ze,"A",{href:!0,rel:!0});var mm=l(St);Ec=n(mm,"MLflow"),mm.forEach(t),kc=n(Ze,`. Can be disabled by setting
environment variable `),Ur=o(Ze,"CODE",{});var pm=l(Ur);Tc=n(pm,"DISABLE_MLFLOW_INTEGRATION = TRUE"),pm.forEach(t),$c=n(Ze,"."),Ze.forEach(t),Cc=f(or),z=o(or,"DIV",{class:!0});var et=l(z);u(Ot.$$.fragment,et),wc=f(et),Hr=o(et,"P",{});var gm=l(Hr);yc=n(gm,"Setup the optional MLflow integration."),gm.forEach(t),Ac=f(et),he=o(et,"P",{});var lr=l(he);Dc=n(lr,`Environment:
HF_MLFLOW_LOG_ARTIFACTS (`),Gr=o(lr,"CODE",{});var _m=l(Gr);Lc=n(_m,"str"),_m.forEach(t),Sc=n(lr,", "),Jr=o(lr,"EM",{});var um=l(Jr);Oc=n(um,"optional"),um.forEach(t),Pc=n(lr,`):
Whether to use MLflow .log_artifact() facility to log artifacts.`),lr.forEach(t),Ic=f(et),F=o(et,"P",{});var Q=l(F);Mc=n(Q,"This only makes sense if logging to a remote server, e.g. s3 or GCS. If set to "),Yr=o(Q,"CODE",{});var vm=l(Yr);xc=n(vm,"True"),vm.forEach(t),Fc=n(Q," or "),Xr=o(Q,"EM",{});var bm=l(Xr);Nc=n(bm,"1"),bm.forEach(t),jc=n(Q,`, will copy
whatever is in `),Ua=o(Q,"A",{href:!0});var Em=l(Ua);Wc=n(Em,"TrainingArguments"),Em.forEach(t),zc=n(Q,"\u2019s "),Kr=o(Q,"CODE",{});var km=l(Kr);Bc=n(km,"output_dir"),km.forEach(t),Vc=n(Q,` to the local or remote artifact storage. Using it
without a remote storage will just copy the files to your artifact location.`),Q.forEach(t),et.forEach(t),or.forEach(t),Gn=f(a),de=o(a,"DIV",{class:!0});var ks=l(de);u(Pt.$$.fragment,ks),Rc=f(ks),me=o(ks,"P",{});var ir=l(me);qc=n(ir,"A "),Ha=o(ir,"A",{href:!0});var Tm=l(Ha);Uc=n(Tm,"TrainerCallback"),Tm.forEach(t),Hc=n(ir," that sends the logs to "),It=o(ir,"A",{href:!0,rel:!0});var $m=l(It);Gc=n($m,"AzureML"),$m.forEach(t),Jc=n(ir,"."),ir.forEach(t),ks.forEach(t),Jn=f(a),pe=o(a,"DIV",{class:!0});var Ts=l(pe);u(Mt.$$.fragment,Ts),Yc=f(Ts),xt=o(Ts,"P",{});var $s=l(xt);Xc=n($s,"A "),Ga=o($s,"A",{href:!0});var Cm=l(Ga);Kc=n(Cm,"TrainerCallback"),Cm.forEach(t),Qc=n($s," that tracks the CO2 emission of training."),$s.forEach(t),Ts.forEach(t),Yn=f(a),ge=o(a,"H2",{class:!0});var Cs=l(ge);Le=o(Cs,"A",{id:!0,class:!0,href:!0});var wm=l(Le);Qr=o(wm,"SPAN",{});var ym=l(Qr);u(Ft.$$.fragment,ym),ym.forEach(t),wm.forEach(t),Zc=f(Cs),Zr=o(Cs,"SPAN",{});var Am=l(Zr);ef=n(Am,"TrainerCallback"),Am.forEach(t),Cs.forEach(t),Xn=f(a),p=o(a,"DIV",{class:!0});var T=l(p);u(Nt.$$.fragment,T),tf=f(T),en=o(T,"P",{});var Dm=l(en);af=n(Dm,`A class for objects that will inspect the state of the training loop at some events and take some decisions. At
each of those events the following arguments are available:`),Dm.forEach(t),rf=f(T),jt=o(T,"P",{});var ws=l(jt);nf=n(ws,"The "),tn=o(ws,"CODE",{});var Lm=l(tn);sf=n(Lm,"control"),Lm.forEach(t),of=n(ws,` object is the only one that can be changed by the callback, in which case the event that changes it
should return the modified version.`),ws.forEach(t),lf=f(T),P=o(T,"P",{});var V=l(P);cf=n(V,"The argument "),an=o(V,"CODE",{});var Sm=l(an);ff=n(Sm,"args"),Sm.forEach(t),hf=n(V,", "),rn=o(V,"CODE",{});var Om=l(rn);df=n(Om,"state"),Om.forEach(t),mf=n(V," and "),nn=o(V,"CODE",{});var Pm=l(nn);pf=n(Pm,"control"),Pm.forEach(t),gf=n(V," are positionals for all events, all the others are grouped in "),sn=o(V,"CODE",{});var Im=l(sn);_f=n(Im,"kwargs"),Im.forEach(t),uf=n(V,`.
You can unpack the ones you need in the signature of the event using them. As an example, see the code of the
simple `),on=o(V,"CODE",{});var Mm=l(on);vf=n(Mm,"PrinterCallback"),Mm.forEach(t),bf=n(V,"."),V.forEach(t),Ef=f(T),ln=o(T,"P",{});var xm=l(ln);kf=n(xm,"Example:"),xm.forEach(t),Tf=f(T),u(Wt.$$.fragment,T),$f=f(T),Se=o(T,"DIV",{class:!0});var ys=l(Se);u(zt.$$.fragment,ys),Cf=f(ys),cn=o(ys,"P",{});var Fm=l(cn);wf=n(Fm,"Event called at the beginning of an epoch."),Fm.forEach(t),ys.forEach(t),yf=f(T),Oe=o(T,"DIV",{class:!0});var As=l(Oe);u(Bt.$$.fragment,As),Af=f(As),fn=o(As,"P",{});var Nm=l(fn);Df=n(Nm,"Event called at the end of an epoch."),Nm.forEach(t),As.forEach(t),Lf=f(T),Pe=o(T,"DIV",{class:!0});var Ds=l(Pe);u(Vt.$$.fragment,Ds),Sf=f(Ds),hn=o(Ds,"P",{});var jm=l(hn);Of=n(jm,"Event called after an evaluation phase."),jm.forEach(t),Ds.forEach(t),Pf=f(T),Ie=o(T,"DIV",{class:!0});var Ls=l(Ie);u(Rt.$$.fragment,Ls),If=f(Ls),qt=o(Ls,"P",{});var Ss=l(qt);Mf=n(Ss,"Event called at the end of the initialization of the "),Ja=o(Ss,"A",{href:!0});var Wm=l(Ja);xf=n(Wm,"Trainer"),Wm.forEach(t),Ff=n(Ss,"."),Ss.forEach(t),Ls.forEach(t),Nf=f(T),Me=o(T,"DIV",{class:!0});var Os=l(Me);u(Ut.$$.fragment,Os),jf=f(Os),dn=o(Os,"P",{});var zm=l(dn);Wf=n(zm,"Event called after logging the last logs."),zm.forEach(t),Os.forEach(t),zf=f(T),xe=o(T,"DIV",{class:!0});var Ps=l(xe);u(Ht.$$.fragment,Ps),Bf=f(Ps),mn=o(Ps,"P",{});var Bm=l(mn);Vf=n(Bm,"Event called after a prediction step."),Bm.forEach(t),Ps.forEach(t),Rf=f(T),Fe=o(T,"DIV",{class:!0});var Is=l(Fe);u(Gt.$$.fragment,Is),qf=f(Is),pn=o(Is,"P",{});var Vm=l(pn);Uf=n(Vm,"Event called after a checkpoint save."),Vm.forEach(t),Is.forEach(t),Hf=f(T),Ne=o(T,"DIV",{class:!0});var Ms=l(Ne);u(Jt.$$.fragment,Ms),Gf=f(Ms),gn=o(Ms,"P",{});var Rm=l(gn);Jf=n(Rm,`Event called at the beginning of a training step. If using gradient accumulation, one training step might take
several inputs.`),Rm.forEach(t),Ms.forEach(t),Yf=f(T),je=o(T,"DIV",{class:!0});var xs=l(je);u(Yt.$$.fragment,xs),Xf=f(xs),_n=o(xs,"P",{});var qm=l(_n);Kf=n(qm,`Event called at the end of a training step. If using gradient accumulation, one training step might take
several inputs.`),qm.forEach(t),xs.forEach(t),Qf=f(T),We=o(T,"DIV",{class:!0});var Fs=l(We);u(Xt.$$.fragment,Fs),Zf=f(Fs),un=o(Fs,"P",{});var Um=l(un);eh=n(Um,"Event called at the end of an substep during gradient accumulation."),Um.forEach(t),Fs.forEach(t),th=f(T),ze=o(T,"DIV",{class:!0});var Ns=l(ze);u(Kt.$$.fragment,Ns),ah=f(Ns),vn=o(Ns,"P",{});var Hm=l(vn);rh=n(Hm,"Event called at the beginning of training."),Hm.forEach(t),Ns.forEach(t),nh=f(T),Be=o(T,"DIV",{class:!0});var js=l(Be);u(Qt.$$.fragment,js),sh=f(js),bn=o(js,"P",{});var Gm=l(bn);oh=n(Gm,"Event called at the end of training."),Gm.forEach(t),js.forEach(t),T.forEach(t),Kn=f(a),Ve=o(a,"P",{});var Ws=l(Ve);lh=n(Ws,"Here is an example of how to register a custom callback with the PyTorch "),Ya=o(Ws,"A",{href:!0});var Jm=l(Ya);ih=n(Jm,"Trainer"),Jm.forEach(t),ch=n(Ws,":"),Ws.forEach(t),Qn=f(a),u(Zt.$$.fragment,a),Zn=f(a),Re=o(a,"P",{});var zs=l(Re);fh=n(zs,"Another way to register a callback is to call "),En=o(zs,"CODE",{});var Ym=l(En);hh=n(Ym,"trainer.add_callback()"),Ym.forEach(t),dh=n(zs," as follows:"),zs.forEach(t),es=f(a),u(ea.$$.fragment,a),ts=f(a),_e=o(a,"H2",{class:!0});var Bs=l(_e);qe=o(Bs,"A",{id:!0,class:!0,href:!0});var Xm=l(qe);kn=o(Xm,"SPAN",{});var Km=l(kn);u(ta.$$.fragment,Km),Km.forEach(t),Xm.forEach(t),mh=f(Bs),Tn=o(Bs,"SPAN",{});var Qm=l(Tn);ph=n(Qm,"TrainerState"),Qm.forEach(t),Bs.forEach(t),as=f(a),I=o(a,"DIV",{class:!0});var Z=l(I);u(aa.$$.fragment,Z),gh=f(Z),ue=o(Z,"P",{});var cr=l(ue);_h=n(cr,"A class containing the "),Xa=o(cr,"A",{href:!0});var Zm=l(Xa);uh=n(Zm,"Trainer"),Zm.forEach(t),vh=n(cr,` inner state that will be saved along the model and optimizer when checkpointing
and passed to the `),Ka=o(cr,"A",{href:!0});var ep=l(Ka);bh=n(ep,"TrainerCallback"),ep.forEach(t),Eh=n(cr,"."),cr.forEach(t),kh=f(Z),u(Ue.$$.fragment,Z),Th=f(Z),He=o(Z,"DIV",{class:!0});var Vs=l(He);u(ra.$$.fragment,Vs),$h=f(Vs),na=o(Vs,"P",{});var Rs=l(na);Ch=n(Rs,"Create an instance from the content of "),$n=o(Rs,"CODE",{});var tp=l($n);wh=n(tp,"json_path"),tp.forEach(t),yh=n(Rs,"."),Rs.forEach(t),Vs.forEach(t),Ah=f(Z),Ge=o(Z,"DIV",{class:!0});var qs=l(Ge);u(sa.$$.fragment,qs),Dh=f(qs),oa=o(qs,"P",{});var Us=l(oa);Lh=n(Us,"Save the content of this instance in JSON format inside "),Cn=o(Us,"CODE",{});var ap=l(Cn);Sh=n(ap,"json_path"),ap.forEach(t),Oh=n(Us,"."),Us.forEach(t),qs.forEach(t),Z.forEach(t),rs=f(a),ve=o(a,"H2",{class:!0});var Hs=l(ve);Je=o(Hs,"A",{id:!0,class:!0,href:!0});var rp=l(Je);wn=o(rp,"SPAN",{});var np=l(wn);u(la.$$.fragment,np),np.forEach(t),rp.forEach(t),Ph=f(Hs),yn=o(Hs,"SPAN",{});var sp=l(yn);Ih=n(sp,"TrainerControl"),sp.forEach(t),Hs.forEach(t),ns=f(a),be=o(a,"DIV",{class:!0});var Gs=l(be);u(ia.$$.fragment,Gs),Mh=f(Gs),Ee=o(Gs,"P",{});var fr=l(Ee);xh=n(fr,"A class that handles the "),Qa=o(fr,"A",{href:!0});var op=l(Qa);Fh=n(op,"Trainer"),op.forEach(t),Nh=n(fr," control flow. This class is used by the "),Za=o(fr,"A",{href:!0});var lp=l(Za);jh=n(lp,"TrainerCallback"),lp.forEach(t),Wh=n(fr,` to activate some
switches in the training loop.`),fr.forEach(t),Gs.forEach(t),this.h()},h(){i(w,"name","hf:doc:metadata"),i(w,"content",JSON.stringify(gp)),i(O,"id","callbacks"),i(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(O,"href","#callbacks"),i(D,"class","relative group"),i(da,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer"),i(ma,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerControl"),i(pa,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer"),i(ga,"href","trainer"),i(_a,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer"),i(va,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.DefaultFlowCallback"),i(ba,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.PrinterCallback"),i(Ea,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.ProgressCallback"),i(ka,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.TrainingArguments"),i($a,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.integrations.TensorBoardCallback"),i(Ca,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.integrations.WandbCallback"),i(at,"href","https://www.wandb.com/"),i(at,"rel","nofollow"),i(wa,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.integrations.CometCallback"),i(rt,"href","https://www.comet.ml/site/"),i(rt,"rel","nofollow"),i(ya,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.integrations.MLflowCallback"),i(nt,"href","https://www.mlflow.org/"),i(nt,"rel","nofollow"),i(Aa,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.integrations.AzureMLCallback"),i(st,"href","https://pypi.org/project/azureml-sdk/"),i(st,"rel","nofollow"),i(Da,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.integrations.CodeCarbonCallback"),i(ot,"href","https://pypi.org/project/codecarbon/"),i(ot,"rel","nofollow"),i(La,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(Sa,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.TrainingArguments"),i(Oa,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer"),i(Pa,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerState"),i(Ia,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerControl"),i(Ae,"id","transformers.integrations.CometCallback"),i(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ae,"href","#transformers.integrations.CometCallback"),i(re,"class","relative group"),i(Ma,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(xa,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(ct,"href","https://www.comet.ml/site/"),i(ct,"rel","nofollow"),i(dt,"href","https://www.comet.ml/docs/python-sdk/advanced/#comet-configuration-variables"),i(dt,"rel","nofollow"),i(j,"class","docstring"),i(q,"class","docstring"),i(Fa,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(se,"class","docstring"),i(Na,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(oe,"class","docstring"),i(ja,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(le,"class","docstring"),i(Wa,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(za,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.TrainingArguments"),i(Ba,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerState"),i(U,"class","docstring"),i(Va,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(Tt,"href","https://www.tensorflow.org/tensorboard"),i(Tt,"rel","nofollow"),i(ie,"class","docstring"),i(Ra,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(Ct,"href","https://www.wandb.com/"),i(Ct,"rel","nofollow"),i(Dt,"href","https://docs.wandb.ai/integrations/huggingface"),i(Dt,"rel","nofollow"),i(W,"class","docstring"),i(G,"class","docstring"),i(qa,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(St,"href","https://www.mlflow.org/"),i(St,"rel","nofollow"),i(Ua,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.TrainingArguments"),i(z,"class","docstring"),i(J,"class","docstring"),i(Ha,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(It,"href","https://pypi.org/project/azureml-sdk/"),i(It,"rel","nofollow"),i(de,"class","docstring"),i(Ga,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(pe,"class","docstring"),i(Le,"id","transformers.TrainerCallback"),i(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Le,"href","#transformers.TrainerCallback"),i(ge,"class","relative group"),i(Se,"class","docstring"),i(Oe,"class","docstring"),i(Pe,"class","docstring"),i(Ja,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer"),i(Ie,"class","docstring"),i(Me,"class","docstring"),i(xe,"class","docstring"),i(Fe,"class","docstring"),i(Ne,"class","docstring"),i(je,"class","docstring"),i(We,"class","docstring"),i(ze,"class","docstring"),i(Be,"class","docstring"),i(p,"class","docstring"),i(Ya,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer"),i(qe,"id","transformers.TrainerState"),i(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(qe,"href","#transformers.TrainerState"),i(_e,"class","relative group"),i(Xa,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer"),i(Ka,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(He,"class","docstring"),i(Ge,"class","docstring"),i(I,"class","docstring"),i(Je,"id","transformers.TrainerControl"),i(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Je,"href","#transformers.TrainerControl"),i(ve,"class","relative group"),i(Qa,"href","/docs/transformers/pr_16333/en/main_classes/trainer#transformers.Trainer"),i(Za,"href","/docs/transformers/pr_16333/en/main_classes/callback#transformers.TrainerCallback"),i(be,"class","docstring")},m(a,h){e(document.head,w),d(a,X,h),d(a,D,h),e(D,O),e(O,ee),v(M,ee,null),e(D,tt),e(D,te),e(te,ae),d(a,x,h),d(a,R,h),e(R,ha),e(R,da),e(da,Js),e(R,Ys),d(a,In,h),d(a,N,h),e(N,Xs),e(N,ma),e(ma,Ks),e(N,Qs),e(N,pa),e(pa,Zs),e(N,eo),e(N,ga),e(ga,to),e(N,ao),d(a,Mn,h),d(a,ke,h),e(ke,ro),e(ke,_a),e(_a,no),e(ke,so),d(a,xn,h),d(a,y,h),e(y,ua),e(ua,va),e(va,oo),e(ua,lo),e(y,io),e(y,K),e(K,ba),e(ba,co),e(K,fo),e(K,Ea),e(Ea,ho),e(K,mo),e(K,ka),e(ka,po),e(K,go),e(y,_o),e(y,Ta),e(Ta,$a),e($a,uo),e(Ta,vo),e(y,bo),e(y,Te),e(Te,Ca),e(Ca,Eo),e(Te,ko),e(Te,at),e(at,To),e(Te,$o),e(y,Co),e(y,$e),e($e,wa),e(wa,wo),e($e,yo),e($e,rt),e(rt,Ao),e($e,Do),e(y,Lo),e(y,Ce),e(Ce,ya),e(ya,So),e(Ce,Oo),e(Ce,nt),e(nt,Po),e(Ce,Io),e(y,Mo),e(y,we),e(we,Aa),e(Aa,xo),e(we,Fo),e(we,st),e(st,No),e(we,jo),e(y,Wo),e(y,ye),e(ye,Da),e(Da,zo),e(ye,Bo),e(ye,ot),e(ot,Vo),e(ye,Ro),d(a,Fn,h),d(a,L,h),e(L,qo),e(L,La),e(La,Uo),e(L,Ho),e(L,Sa),e(Sa,Go),e(L,Jo),e(L,Oa),e(Oa,Yo),e(L,Xo),e(L,Pa),e(Pa,Ko),e(L,Qo),e(L,Ia),e(Ia,Zo),e(L,el),d(a,Nn,h),d(a,re,h),e(re,Ae),e(Ae,dr),v(lt,dr,null),e(re,tl),e(re,mr),e(mr,al),d(a,jn,h),d(a,De,h),e(De,rl),e(De,Ma),e(Ma,nl),e(De,sl),d(a,Wn,h),d(a,q,h),v(it,q,null),e(q,ol),e(q,ne),e(ne,ll),e(ne,xa),e(xa,il),e(ne,cl),e(ne,ct),e(ct,fl),e(ne,hl),e(q,dl),e(q,j),v(ft,j,null),e(j,ml),e(j,pr),e(pr,pl),e(j,gl),e(j,C),e(C,_l),e(C,gr),e(gr,ul),e(C,vl),e(C,_r),e(_r,bl),e(C,El),e(C,ur),e(ur,kl),e(C,Tl),e(C,vr),e(vr,$l),e(C,Cl),e(C,br),e(br,wl),e(C,yl),e(C,Er),e(Er,Al),e(C,Dl),e(C,kr),e(kr,Ll),e(C,Sl),e(C,Tr),e(Tr,Ol),e(C,Pl),e(C,$r),e($r,Il),e(C,Ml),e(j,xl),e(j,ht),e(ht,Fl),e(ht,dt),e(dt,Nl),e(ht,jl),d(a,zn,h),d(a,se,h),v(mt,se,null),e(se,Wl),e(se,pt),e(pt,zl),e(pt,Fa),e(Fa,Bl),e(pt,Vl),d(a,Bn,h),d(a,oe,h),v(gt,oe,null),e(oe,Rl),e(oe,_t),e(_t,ql),e(_t,Na),e(Na,Ul),e(_t,Hl),d(a,Vn,h),d(a,le,h),v(ut,le,null),e(le,Gl),e(le,vt),e(vt,Jl),e(vt,ja),e(ja,Yl),e(vt,Xl),d(a,Rn,h),d(a,U,h),v(bt,U,null),e(U,Kl),e(U,Et),e(Et,Ql),e(Et,Wa),e(Wa,Zl),e(Et,ei),e(U,ti),e(U,H),e(H,ai),e(H,za),e(za,ri),e(H,ni),e(H,Cr),e(Cr,si),e(H,oi),e(H,Ba),e(Ba,li),e(H,ii),d(a,qn,h),d(a,ie,h),v(kt,ie,null),e(ie,ci),e(ie,ce),e(ce,fi),e(ce,Va),e(Va,hi),e(ce,di),e(ce,Tt),e(Tt,mi),e(ce,pi),d(a,Un,h),d(a,G,h),v($t,G,null),e(G,gi),e(G,fe),e(fe,_i),e(fe,Ra),e(Ra,ui),e(fe,vi),e(fe,Ct),e(Ct,bi),e(fe,Ei),e(G,ki),e(G,W),v(wt,W,null),e(W,Ti),e(W,yt),e(yt,$i),e(yt,wr),e(wr,Ci),e(yt,wi),e(W,yi),e(W,At),e(At,Ai),e(At,Dt),e(Dt,Di),e(At,Li),e(W,Si),e(W,m),e(m,Oi),e(m,yr),e(yr,Pi),e(m,Ii),e(m,Ar),e(Ar,Mi),e(m,xi),e(m,Dr),e(Dr,Fi),e(m,Ni),e(m,Lr),e(Lr,ji),e(m,Wi),e(m,Sr),e(Sr,zi),e(m,Bi),e(m,Or),e(Or,Vi),e(m,Ri),e(m,Pr),e(Pr,qi),e(m,Ui),e(m,Ir),e(Ir,Hi),e(m,Gi),e(m,Mr),e(Mr,Ji),e(m,Yi),e(m,xr),e(xr,Xi),e(m,Ki),e(m,Fr),e(Fr,Qi),e(m,Zi),e(m,Nr),e(Nr,ec),e(m,tc),e(m,jr),e(jr,ac),e(m,rc),e(m,Wr),e(Wr,nc),e(m,sc),e(m,zr),e(zr,oc),e(m,lc),e(m,Br),e(Br,ic),e(m,cc),e(m,Vr),e(Vr,fc),e(m,hc),e(m,Rr),e(Rr,dc),e(m,mc),e(m,qr),e(qr,pc),e(m,gc),d(a,Hn,h),d(a,J,h),v(Lt,J,null),e(J,_c),e(J,Y),e(Y,uc),e(Y,qa),e(qa,vc),e(Y,bc),e(Y,St),e(St,Ec),e(Y,kc),e(Y,Ur),e(Ur,Tc),e(Y,$c),e(J,Cc),e(J,z),v(Ot,z,null),e(z,wc),e(z,Hr),e(Hr,yc),e(z,Ac),e(z,he),e(he,Dc),e(he,Gr),e(Gr,Lc),e(he,Sc),e(he,Jr),e(Jr,Oc),e(he,Pc),e(z,Ic),e(z,F),e(F,Mc),e(F,Yr),e(Yr,xc),e(F,Fc),e(F,Xr),e(Xr,Nc),e(F,jc),e(F,Ua),e(Ua,Wc),e(F,zc),e(F,Kr),e(Kr,Bc),e(F,Vc),d(a,Gn,h),d(a,de,h),v(Pt,de,null),e(de,Rc),e(de,me),e(me,qc),e(me,Ha),e(Ha,Uc),e(me,Hc),e(me,It),e(It,Gc),e(me,Jc),d(a,Jn,h),d(a,pe,h),v(Mt,pe,null),e(pe,Yc),e(pe,xt),e(xt,Xc),e(xt,Ga),e(Ga,Kc),e(xt,Qc),d(a,Yn,h),d(a,ge,h),e(ge,Le),e(Le,Qr),v(Ft,Qr,null),e(ge,Zc),e(ge,Zr),e(Zr,ef),d(a,Xn,h),d(a,p,h),v(Nt,p,null),e(p,tf),e(p,en),e(en,af),e(p,rf),e(p,jt),e(jt,nf),e(jt,tn),e(tn,sf),e(jt,of),e(p,lf),e(p,P),e(P,cf),e(P,an),e(an,ff),e(P,hf),e(P,rn),e(rn,df),e(P,mf),e(P,nn),e(nn,pf),e(P,gf),e(P,sn),e(sn,_f),e(P,uf),e(P,on),e(on,vf),e(P,bf),e(p,Ef),e(p,ln),e(ln,kf),e(p,Tf),v(Wt,p,null),e(p,$f),e(p,Se),v(zt,Se,null),e(Se,Cf),e(Se,cn),e(cn,wf),e(p,yf),e(p,Oe),v(Bt,Oe,null),e(Oe,Af),e(Oe,fn),e(fn,Df),e(p,Lf),e(p,Pe),v(Vt,Pe,null),e(Pe,Sf),e(Pe,hn),e(hn,Of),e(p,Pf),e(p,Ie),v(Rt,Ie,null),e(Ie,If),e(Ie,qt),e(qt,Mf),e(qt,Ja),e(Ja,xf),e(qt,Ff),e(p,Nf),e(p,Me),v(Ut,Me,null),e(Me,jf),e(Me,dn),e(dn,Wf),e(p,zf),e(p,xe),v(Ht,xe,null),e(xe,Bf),e(xe,mn),e(mn,Vf),e(p,Rf),e(p,Fe),v(Gt,Fe,null),e(Fe,qf),e(Fe,pn),e(pn,Uf),e(p,Hf),e(p,Ne),v(Jt,Ne,null),e(Ne,Gf),e(Ne,gn),e(gn,Jf),e(p,Yf),e(p,je),v(Yt,je,null),e(je,Xf),e(je,_n),e(_n,Kf),e(p,Qf),e(p,We),v(Xt,We,null),e(We,Zf),e(We,un),e(un,eh),e(p,th),e(p,ze),v(Kt,ze,null),e(ze,ah),e(ze,vn),e(vn,rh),e(p,nh),e(p,Be),v(Qt,Be,null),e(Be,sh),e(Be,bn),e(bn,oh),d(a,Kn,h),d(a,Ve,h),e(Ve,lh),e(Ve,Ya),e(Ya,ih),e(Ve,ch),d(a,Qn,h),v(Zt,a,h),d(a,Zn,h),d(a,Re,h),e(Re,fh),e(Re,En),e(En,hh),e(Re,dh),d(a,es,h),v(ea,a,h),d(a,ts,h),d(a,_e,h),e(_e,qe),e(qe,kn),v(ta,kn,null),e(_e,mh),e(_e,Tn),e(Tn,ph),d(a,as,h),d(a,I,h),v(aa,I,null),e(I,gh),e(I,ue),e(ue,_h),e(ue,Xa),e(Xa,uh),e(ue,vh),e(ue,Ka),e(Ka,bh),e(ue,Eh),e(I,kh),v(Ue,I,null),e(I,Th),e(I,He),v(ra,He,null),e(He,$h),e(He,na),e(na,Ch),e(na,$n),e($n,wh),e(na,yh),e(I,Ah),e(I,Ge),v(sa,Ge,null),e(Ge,Dh),e(Ge,oa),e(oa,Lh),e(oa,Cn),e(Cn,Sh),e(oa,Oh),d(a,rs,h),d(a,ve,h),e(ve,Je),e(Je,wn),v(la,wn,null),e(ve,Ph),e(ve,yn),e(yn,Ih),d(a,ns,h),d(a,be,h),v(ia,be,null),e(be,Mh),e(be,Ee),e(Ee,xh),e(Ee,Qa),e(Qa,Fh),e(Ee,Nh),e(Ee,Za),e(Za,jh),e(Ee,Wh),ss=!0},p(a,[h]){const ca={};h&2&&(ca.$$scope={dirty:h,ctx:a}),Ue.$set(ca)},i(a){ss||(b(M.$$.fragment,a),b(lt.$$.fragment,a),b(it.$$.fragment,a),b(ft.$$.fragment,a),b(mt.$$.fragment,a),b(gt.$$.fragment,a),b(ut.$$.fragment,a),b(bt.$$.fragment,a),b(kt.$$.fragment,a),b($t.$$.fragment,a),b(wt.$$.fragment,a),b(Lt.$$.fragment,a),b(Ot.$$.fragment,a),b(Pt.$$.fragment,a),b(Mt.$$.fragment,a),b(Ft.$$.fragment,a),b(Nt.$$.fragment,a),b(Wt.$$.fragment,a),b(zt.$$.fragment,a),b(Bt.$$.fragment,a),b(Vt.$$.fragment,a),b(Rt.$$.fragment,a),b(Ut.$$.fragment,a),b(Ht.$$.fragment,a),b(Gt.$$.fragment,a),b(Jt.$$.fragment,a),b(Yt.$$.fragment,a),b(Xt.$$.fragment,a),b(Kt.$$.fragment,a),b(Qt.$$.fragment,a),b(Zt.$$.fragment,a),b(ea.$$.fragment,a),b(ta.$$.fragment,a),b(aa.$$.fragment,a),b(Ue.$$.fragment,a),b(ra.$$.fragment,a),b(sa.$$.fragment,a),b(la.$$.fragment,a),b(ia.$$.fragment,a),ss=!0)},o(a){E(M.$$.fragment,a),E(lt.$$.fragment,a),E(it.$$.fragment,a),E(ft.$$.fragment,a),E(mt.$$.fragment,a),E(gt.$$.fragment,a),E(ut.$$.fragment,a),E(bt.$$.fragment,a),E(kt.$$.fragment,a),E($t.$$.fragment,a),E(wt.$$.fragment,a),E(Lt.$$.fragment,a),E(Ot.$$.fragment,a),E(Pt.$$.fragment,a),E(Mt.$$.fragment,a),E(Ft.$$.fragment,a),E(Nt.$$.fragment,a),E(Wt.$$.fragment,a),E(zt.$$.fragment,a),E(Bt.$$.fragment,a),E(Vt.$$.fragment,a),E(Rt.$$.fragment,a),E(Ut.$$.fragment,a),E(Ht.$$.fragment,a),E(Gt.$$.fragment,a),E(Jt.$$.fragment,a),E(Yt.$$.fragment,a),E(Xt.$$.fragment,a),E(Kt.$$.fragment,a),E(Qt.$$.fragment,a),E(Zt.$$.fragment,a),E(ea.$$.fragment,a),E(ta.$$.fragment,a),E(aa.$$.fragment,a),E(Ue.$$.fragment,a),E(ra.$$.fragment,a),E(sa.$$.fragment,a),E(la.$$.fragment,a),E(ia.$$.fragment,a),ss=!1},d(a){t(w),a&&t(X),a&&t(D),k(M),a&&t(x),a&&t(R),a&&t(In),a&&t(N),a&&t(Mn),a&&t(ke),a&&t(xn),a&&t(y),a&&t(Fn),a&&t(L),a&&t(Nn),a&&t(re),k(lt),a&&t(jn),a&&t(De),a&&t(Wn),a&&t(q),k(it),k(ft),a&&t(zn),a&&t(se),k(mt),a&&t(Bn),a&&t(oe),k(gt),a&&t(Vn),a&&t(le),k(ut),a&&t(Rn),a&&t(U),k(bt),a&&t(qn),a&&t(ie),k(kt),a&&t(Un),a&&t(G),k($t),k(wt),a&&t(Hn),a&&t(J),k(Lt),k(Ot),a&&t(Gn),a&&t(de),k(Pt),a&&t(Jn),a&&t(pe),k(Mt),a&&t(Yn),a&&t(ge),k(Ft),a&&t(Xn),a&&t(p),k(Nt),k(Wt),k(zt),k(Bt),k(Vt),k(Rt),k(Ut),k(Ht),k(Gt),k(Jt),k(Yt),k(Xt),k(Kt),k(Qt),a&&t(Kn),a&&t(Ve),a&&t(Qn),k(Zt,a),a&&t(Zn),a&&t(Re),a&&t(es),k(ea,a),a&&t(ts),a&&t(_e),k(ta),a&&t(as),a&&t(I),k(aa),k(Ue),k(ra),k(sa),a&&t(rs),a&&t(ve),k(la),a&&t(ns),a&&t(be),k(ia)}}}const gp={local:"callbacks",sections:[{local:"transformers.integrations.CometCallback",title:"Available Callbacks"},{local:"transformers.TrainerCallback",title:"TrainerCallback"},{local:"transformers.TrainerState",title:"TrainerState"},{local:"transformers.TrainerControl",title:"TrainerControl"}],title:"Callbacks"};function _p(hr,w,X){let{fw:D}=w;return hr.$$set=O=>{"fw"in O&&X(0,D=O.fw)},[D]}class Tp extends ip{constructor(w){super();cp(this,w,_p,pp,fp,{fw:0})}}export{Tp as default,gp as metadata};
