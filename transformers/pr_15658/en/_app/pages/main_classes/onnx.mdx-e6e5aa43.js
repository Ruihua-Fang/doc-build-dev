import{S as Hn,i as Bn,s as Gn,e as n,k as i,w as c,t as l,L as Un,c as o,d as r,m as f,a,x as d,h as m,b as s,J as t,g as h,y as u,K as jn,q as g,o as _,B as v}from"../../chunks/vendor-9e2b328e.js";import{D as b}from"../../chunks/Docstring-50fd6873.js";import{I as xe}from"../../chunks/IconCopyLink-fd0e58fd.js";function Jn(zt){let O,$e,y,E,Te,ee,Ht,Ae,Bt,ot,q,Gt,De,Ut,jt,at,I,Jt,ye,Kt,Qt,st,N,F,qe,te,Rt,Ie,Yt,it,we,Zt,ft,C,Ee,er,be,tr,rr,Oe,nr,Ce,or,ar,Ne,sr,Pe,ir,lt,P,W,Fe,re,fr,We,lr,mt,x,ne,mr,Me,pr,hr,M,oe,cr,Xe,dr,ur,X,ae,gr,Le,_r,vr,L,se,xr,Ve,$r,yr,V,ie,wr,ze,Er,pt,k,z,He,fe,br,Be,Or,ht,S,H,le,Cr,Ge,Nr,Pr,B,me,kr,pe,Sr,Ue,Tr,Ar,ct,T,G,je,he,Dr,Je,qr,dt,ke,ut,A,U,Ke,ce,Ir,Qe,Fr,gt,j,Wr,Re,Mr,Xr,_t,D,J,Ye,de,Lr,Ze,Vr,vt,$,K,ue,zr,et,Hr,Br,Q,ge,Gr,tt,Ur,jr,R,_e,Jr,rt,Kr,Qr,Y,ve,Rr,nt,Yr,xt;return ee=new xe({}),te=new xe({}),re=new xe({}),ne=new b({props:{name:"class transformers.onnx.OnnxConfig",anchor:"transformers.onnx.OnnxConfig",parameters:[{name:"config",val:": PretrainedConfig"},{name:"task",val:": str = 'default'"},{name:"patching_specs",val:": typing.List[transformers.onnx.config.PatchingSpec] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/config.py#L68"}}),oe=new b({props:{name:"flatten_output_collection_property",anchor:"transformers.onnx.OnnxConfig.flatten_output_collection_property",parameters:[{name:"name",val:": str"},{name:"field",val:": typing.Iterable[typing.Any]"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/config.py#L316",returnDescription:`
<p>Outputs with flattened structure and key mapping this new structure.</p>
`,returnType:`
<p>(Dict[str, Any])</p>
`}}),ae=new b({props:{name:"from_model_config",anchor:"transformers.onnx.OnnxConfig.from_model_config",parameters:[{name:"config",val:": PretrainedConfig"},{name:"task",val:": str = 'default'"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/config.py#L110",returnDescription:`
<p>OnnxConfig for this model</p>
`}}),se=new b({props:{name:"generate_dummy_inputs",anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs",parameters:[{name:"preprocessor",val:": typing.Union[transformers.tokenization_utils.PreTrainedTokenizer, transformers.feature_extraction_utils.FeatureExtractionMixin]"},{name:"batch_size",val:": int = -1"},{name:"seq_length",val:": int = -1"},{name:"is_pair",val:": bool = False"},{name:"framework",val:": typing.Optional[transformers.file_utils.TensorType] = None"},{name:"num_channels",val:": int = 3"},{name:"image_width",val:": int = 40"},{name:"image_height",val:": int = 40"},{name:"tokenizer",val:": PreTrainedTokenizer = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/config.py#L234",parametersDescription:[{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
The batch size to export the model for (-1 means dynamic axis).`,name:"batch_size"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.seq_length",description:`<strong>seq_length</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
The sequence length to export the model for (-1 means dynamic axis).`,name:"seq_length"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.is_pair",description:`<strong>is_pair</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Indicate if the input is a pair (sentence 1, sentence 2)`,name:"is_pair"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.framework",description:`<strong>framework</strong> (<code>TensorType</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The framework (optional) the tokenizer will generate tensor for.`,name:"framework"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of channels of the generated images.`,name:"num_channels"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.image_width",description:`<strong>image_width</strong> (<code>int</code>, <em>optional</em>, defaults to 40) &#x2014;
The width of the generated images.`,name:"image_width"},{anchor:"transformers.onnx.OnnxConfig.generate_dummy_inputs.image_height",description:`<strong>image_height</strong> (<code>int</code>, <em>optional</em>, defaults to 40) &#x2014;
The height of the generated images.`,name:"image_height"}],returnDescription:`
<p>Mapping[str, Tensor] holding the kwargs to provide to the model\u2019s forward function</p>
`}}),ie=new b({props:{name:"use_external_data_format",anchor:"transformers.onnx.OnnxConfig.use_external_data_format",parameters:[{name:"num_parameters",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/config.py#L208",returnDescription:`
<p>True if model.num_parameters() * size_of(float32) >= 2Gb False otherwise</p>
`}}),fe=new xe({}),le=new b({props:{name:"fill_with_past_key_values_",anchor:"transformers.onnx.OnnxConfigWithPast.fill_with_past_key_values_",parameters:[{name:"inputs_or_outputs",val:": typing.Mapping[str, typing.Mapping[int, str]]"},{name:"direction",val:": str"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/config.py#L437"}}),me=new b({props:{name:"with_past",anchor:"transformers.onnx.OnnxConfigWithPast.with_past",parameters:[{name:"config",val:": PretrainedConfig"},{name:"task",val:": str = 'default'"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/config.py#L346",returnDescription:`
<p>OnnxConfig with <code>.use_past = True</code></p>
`}}),he=new xe({}),ce=new xe({}),de=new xe({}),ue=new b({props:{name:"check_supported_model_or_raise",anchor:"transformers.onnx.FeaturesManager.check_supported_model_or_raise",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, transformers.modeling_tf_utils.TFPreTrainedModel]"},{name:"feature",val:": str = 'default'"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/features.py#L321",returnDescription:`
<p>(str) The type of the model (OnnxConfig) The OnnxConfig instance holding the model export properties.</p>
`}}),ge=new b({props:{name:"get_model_class_for_feature",anchor:"transformers.onnx.FeaturesManager.get_model_class_for_feature",parameters:[{name:"feature",val:": str"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/features.py#L279",returnDescription:`
<p>The AutoModel class corresponding to the feature.</p>
`}}),_e=new b({props:{name:"get_model_from_feature",anchor:"transformers.onnx.FeaturesManager.get_model_from_feature",parameters:[{name:"feature",val:": str"},{name:"model",val:": str"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/features.py#L298",returnDescription:`
<p>The instance of the model.</p>
`}}),ve=new b({props:{name:"get_supported_features_for_model_type",anchor:"transformers.onnx.FeaturesManager.get_supported_features_for_model_type",parameters:[{name:"model_type",val:": str"},{name:"model_name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15658/src/transformers/onnx/features.py#L251",returnDescription:`
<p>The dictionary mapping each feature to a corresponding OnnxConfig constructor.</p>
`}}),{c(){O=n("meta"),$e=i(),y=n("h1"),E=n("a"),Te=n("span"),c(ee.$$.fragment),Ht=i(),Ae=n("span"),Bt=l("Exporting \u{1F917} Transformers models to ONNX"),ot=i(),q=n("p"),Gt=l("\u{1F917} Transformers provides a "),De=n("code"),Ut=l("transformers.onnx"),jt=l(` package that enables you to
convert model checkpoints to an ONNX graph by leveraging configuration objects.`),at=i(),I=n("p"),Jt=l("See the "),ye=n("a"),Kt=l("guide"),Qt=l(` on exporting \u{1F917} Transformers models for more
details.`),st=i(),N=n("h2"),F=n("a"),qe=n("span"),c(te.$$.fragment),Rt=i(),Ie=n("span"),Yt=l("ONNX Configurations"),it=i(),we=n("p"),Zt=l(`We provide three abstract classes that you should inherit from, depending on the
type of model architecture you wish to export:`),ft=i(),C=n("ul"),Ee=n("li"),er=l("Encoder-based models inherit from "),be=n("a"),tr=l("OnnxConfig"),rr=i(),Oe=n("li"),nr=l("Decoder-based models inherit from "),Ce=n("a"),or=l("OnnxConfigWithPast"),ar=i(),Ne=n("li"),sr=l("Encoder-decoder models inherit from "),Pe=n("a"),ir=l("OnnxSeq2SeqConfigWithPast"),lt=i(),P=n("h3"),W=n("a"),Fe=n("span"),c(re.$$.fragment),fr=i(),We=n("span"),lr=l("OnnxConfig"),mt=i(),x=n("div"),c(ne.$$.fragment),mr=i(),Me=n("p"),pr=l("Base class for ONNX exportable model describing metadata on how to export the model through the ONNX format."),hr=i(),M=n("div"),c(oe.$$.fragment),cr=i(),Xe=n("p"),dr=l(`Flatten any potential nested structure expanding the name of the field with the index of the element within the
structure.`),ur=i(),X=n("div"),c(ae.$$.fragment),gr=i(),Le=n("p"),_r=l("Instantiate a OnnxConfig for a specific model"),vr=i(),L=n("div"),c(se.$$.fragment),xr=i(),Ve=n("p"),$r=l("Generate inputs to provide to the ONNX exporter for the specific framework"),yr=i(),V=n("div"),c(ie.$$.fragment),wr=i(),ze=n("p"),Er=l("Flag indicating if the model requires using external data format"),pt=i(),k=n("h3"),z=n("a"),He=n("span"),c(fe.$$.fragment),br=i(),Be=n("span"),Or=l("OnnxConfigWithPast"),ht=i(),S=n("div"),H=n("div"),c(le.$$.fragment),Cr=i(),Ge=n("p"),Nr=l("Fill the input_or_ouputs mapping with past_key_values dynamic axes considering."),Pr=i(),B=n("div"),c(me.$$.fragment),kr=i(),pe=n("p"),Sr=l("Instantiate a OnnxConfig with "),Ue=n("code"),Tr=l("use_past"),Ar=l(" attribute set to True"),ct=i(),T=n("h3"),G=n("a"),je=n("span"),c(he.$$.fragment),Dr=i(),Je=n("span"),qr=l("OnnxSeq2SeqConfigWithPast"),dt=i(),ke=n("div"),ut=i(),A=n("h2"),U=n("a"),Ke=n("span"),c(ce.$$.fragment),Ir=i(),Qe=n("span"),Fr=l("ONNX Features"),gt=i(),j=n("p"),Wr=l("Each ONNX configuration is associated with a set of "),Re=n("em"),Mr=l("features"),Xr=l(` that enable you
to export models for different types of topologies or tasks.`),_t=i(),D=n("h3"),J=n("a"),Ye=n("span"),c(de.$$.fragment),Lr=i(),Ze=n("span"),Vr=l("FeaturesManager"),vt=i(),$=n("div"),K=n("div"),c(ue.$$.fragment),zr=i(),et=n("p"),Hr=l("Check whether or not the model has the requested features."),Br=i(),Q=n("div"),c(ge.$$.fragment),Gr=i(),tt=n("p"),Ur=l("Attempt to retrieve an AutoModel class from a feature name."),jr=i(),R=n("div"),c(_e.$$.fragment),Jr=i(),rt=n("p"),Kr=l("Attempt to retrieve a model from a model\u2019s name and the feature to be enabled."),Qr=i(),Y=n("div"),c(ve.$$.fragment),Rr=i(),nt=n("p"),Yr=l("Try to retrieve the feature -> OnnxConfig constructor map from the model type."),this.h()},l(e){const p=Un('[data-svelte="svelte-1phssyn"]',document.head);O=o(p,"META",{name:!0,content:!0}),p.forEach(r),$e=f(e),y=o(e,"H1",{class:!0});var $t=a(y);E=o($t,"A",{id:!0,class:!0,href:!0});var rn=a(E);Te=o(rn,"SPAN",{});var nn=a(Te);d(ee.$$.fragment,nn),nn.forEach(r),rn.forEach(r),Ht=f($t),Ae=o($t,"SPAN",{});var on=a(Ae);Bt=m(on,"Exporting \u{1F917} Transformers models to ONNX"),on.forEach(r),$t.forEach(r),ot=f(e),q=o(e,"P",{});var yt=a(q);Gt=m(yt,"\u{1F917} Transformers provides a "),De=o(yt,"CODE",{});var an=a(De);Ut=m(an,"transformers.onnx"),an.forEach(r),jt=m(yt,` package that enables you to
convert model checkpoints to an ONNX graph by leveraging configuration objects.`),yt.forEach(r),at=f(e),I=o(e,"P",{});var wt=a(I);Jt=m(wt,"See the "),ye=o(wt,"A",{href:!0});var sn=a(ye);Kt=m(sn,"guide"),sn.forEach(r),Qt=m(wt,` on exporting \u{1F917} Transformers models for more
details.`),wt.forEach(r),st=f(e),N=o(e,"H2",{class:!0});var Et=a(N);F=o(Et,"A",{id:!0,class:!0,href:!0});var fn=a(F);qe=o(fn,"SPAN",{});var ln=a(qe);d(te.$$.fragment,ln),ln.forEach(r),fn.forEach(r),Rt=f(Et),Ie=o(Et,"SPAN",{});var mn=a(Ie);Yt=m(mn,"ONNX Configurations"),mn.forEach(r),Et.forEach(r),it=f(e),we=o(e,"P",{});var pn=a(we);Zt=m(pn,`We provide three abstract classes that you should inherit from, depending on the
type of model architecture you wish to export:`),pn.forEach(r),ft=f(e),C=o(e,"UL",{});var Se=a(C);Ee=o(Se,"LI",{});var Zr=a(Ee);er=m(Zr,"Encoder-based models inherit from "),be=o(Zr,"A",{href:!0});var hn=a(be);tr=m(hn,"OnnxConfig"),hn.forEach(r),Zr.forEach(r),rr=f(Se),Oe=o(Se,"LI",{});var en=a(Oe);nr=m(en,"Decoder-based models inherit from "),Ce=o(en,"A",{href:!0});var cn=a(Ce);or=m(cn,"OnnxConfigWithPast"),cn.forEach(r),en.forEach(r),ar=f(Se),Ne=o(Se,"LI",{});var tn=a(Ne);sr=m(tn,"Encoder-decoder models inherit from "),Pe=o(tn,"A",{href:!0});var dn=a(Pe);ir=m(dn,"OnnxSeq2SeqConfigWithPast"),dn.forEach(r),tn.forEach(r),Se.forEach(r),lt=f(e),P=o(e,"H3",{class:!0});var bt=a(P);W=o(bt,"A",{id:!0,class:!0,href:!0});var un=a(W);Fe=o(un,"SPAN",{});var gn=a(Fe);d(re.$$.fragment,gn),gn.forEach(r),un.forEach(r),fr=f(bt),We=o(bt,"SPAN",{});var _n=a(We);lr=m(_n,"OnnxConfig"),_n.forEach(r),bt.forEach(r),mt=f(e),x=o(e,"DIV",{class:!0});var w=a(x);d(ne.$$.fragment,w),mr=f(w),Me=o(w,"P",{});var vn=a(Me);pr=m(vn,"Base class for ONNX exportable model describing metadata on how to export the model through the ONNX format."),vn.forEach(r),hr=f(w),M=o(w,"DIV",{class:!0});var Ot=a(M);d(oe.$$.fragment,Ot),cr=f(Ot),Xe=o(Ot,"P",{});var xn=a(Xe);dr=m(xn,`Flatten any potential nested structure expanding the name of the field with the index of the element within the
structure.`),xn.forEach(r),Ot.forEach(r),ur=f(w),X=o(w,"DIV",{class:!0});var Ct=a(X);d(ae.$$.fragment,Ct),gr=f(Ct),Le=o(Ct,"P",{});var $n=a(Le);_r=m($n,"Instantiate a OnnxConfig for a specific model"),$n.forEach(r),Ct.forEach(r),vr=f(w),L=o(w,"DIV",{class:!0});var Nt=a(L);d(se.$$.fragment,Nt),xr=f(Nt),Ve=o(Nt,"P",{});var yn=a(Ve);$r=m(yn,"Generate inputs to provide to the ONNX exporter for the specific framework"),yn.forEach(r),Nt.forEach(r),yr=f(w),V=o(w,"DIV",{class:!0});var Pt=a(V);d(ie.$$.fragment,Pt),wr=f(Pt),ze=o(Pt,"P",{});var wn=a(ze);Er=m(wn,"Flag indicating if the model requires using external data format"),wn.forEach(r),Pt.forEach(r),w.forEach(r),pt=f(e),k=o(e,"H3",{class:!0});var kt=a(k);z=o(kt,"A",{id:!0,class:!0,href:!0});var En=a(z);He=o(En,"SPAN",{});var bn=a(He);d(fe.$$.fragment,bn),bn.forEach(r),En.forEach(r),br=f(kt),Be=o(kt,"SPAN",{});var On=a(Be);Or=m(On,"OnnxConfigWithPast"),On.forEach(r),kt.forEach(r),ht=f(e),S=o(e,"DIV",{class:!0});var St=a(S);H=o(St,"DIV",{class:!0});var Tt=a(H);d(le.$$.fragment,Tt),Cr=f(Tt),Ge=o(Tt,"P",{});var Cn=a(Ge);Nr=m(Cn,"Fill the input_or_ouputs mapping with past_key_values dynamic axes considering."),Cn.forEach(r),Tt.forEach(r),Pr=f(St),B=o(St,"DIV",{class:!0});var At=a(B);d(me.$$.fragment,At),kr=f(At),pe=o(At,"P",{});var Dt=a(pe);Sr=m(Dt,"Instantiate a OnnxConfig with "),Ue=o(Dt,"CODE",{});var Nn=a(Ue);Tr=m(Nn,"use_past"),Nn.forEach(r),Ar=m(Dt," attribute set to True"),Dt.forEach(r),At.forEach(r),St.forEach(r),ct=f(e),T=o(e,"H3",{class:!0});var qt=a(T);G=o(qt,"A",{id:!0,class:!0,href:!0});var Pn=a(G);je=o(Pn,"SPAN",{});var kn=a(je);d(he.$$.fragment,kn),kn.forEach(r),Pn.forEach(r),Dr=f(qt),Je=o(qt,"SPAN",{});var Sn=a(Je);qr=m(Sn,"OnnxSeq2SeqConfigWithPast"),Sn.forEach(r),qt.forEach(r),dt=f(e),ke=o(e,"DIV",{class:!0});var zn=a(ke);zn.forEach(r),ut=f(e),A=o(e,"H2",{class:!0});var It=a(A);U=o(It,"A",{id:!0,class:!0,href:!0});var Tn=a(U);Ke=o(Tn,"SPAN",{});var An=a(Ke);d(ce.$$.fragment,An),An.forEach(r),Tn.forEach(r),Ir=f(It),Qe=o(It,"SPAN",{});var Dn=a(Qe);Fr=m(Dn,"ONNX Features"),Dn.forEach(r),It.forEach(r),gt=f(e),j=o(e,"P",{});var Ft=a(j);Wr=m(Ft,"Each ONNX configuration is associated with a set of "),Re=o(Ft,"EM",{});var qn=a(Re);Mr=m(qn,"features"),qn.forEach(r),Xr=m(Ft,` that enable you
to export models for different types of topologies or tasks.`),Ft.forEach(r),_t=f(e),D=o(e,"H3",{class:!0});var Wt=a(D);J=o(Wt,"A",{id:!0,class:!0,href:!0});var In=a(J);Ye=o(In,"SPAN",{});var Fn=a(Ye);d(de.$$.fragment,Fn),Fn.forEach(r),In.forEach(r),Lr=f(Wt),Ze=o(Wt,"SPAN",{});var Wn=a(Ze);Vr=m(Wn,"FeaturesManager"),Wn.forEach(r),Wt.forEach(r),vt=f(e),$=o(e,"DIV",{class:!0});var Z=a($);K=o(Z,"DIV",{class:!0});var Mt=a(K);d(ue.$$.fragment,Mt),zr=f(Mt),et=o(Mt,"P",{});var Mn=a(et);Hr=m(Mn,"Check whether or not the model has the requested features."),Mn.forEach(r),Mt.forEach(r),Br=f(Z),Q=o(Z,"DIV",{class:!0});var Xt=a(Q);d(ge.$$.fragment,Xt),Gr=f(Xt),tt=o(Xt,"P",{});var Xn=a(tt);Ur=m(Xn,"Attempt to retrieve an AutoModel class from a feature name."),Xn.forEach(r),Xt.forEach(r),jr=f(Z),R=o(Z,"DIV",{class:!0});var Lt=a(R);d(_e.$$.fragment,Lt),Jr=f(Lt),rt=o(Lt,"P",{});var Ln=a(rt);Kr=m(Ln,"Attempt to retrieve a model from a model\u2019s name and the feature to be enabled."),Ln.forEach(r),Lt.forEach(r),Qr=f(Z),Y=o(Z,"DIV",{class:!0});var Vt=a(Y);d(ve.$$.fragment,Vt),Rr=f(Vt),nt=o(Vt,"P",{});var Vn=a(nt);Yr=m(Vn,"Try to retrieve the feature -> OnnxConfig constructor map from the model type."),Vn.forEach(r),Vt.forEach(r),Z.forEach(r),this.h()},h(){s(O,"name","hf:doc:metadata"),s(O,"content",JSON.stringify(Kn)),s(E,"id","exporting-transformers-models-to-onnx"),s(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(E,"href","#exporting-transformers-models-to-onnx"),s(y,"class","relative group"),s(ye,"href","../serialization"),s(F,"id","onnx-configurations"),s(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(F,"href","#onnx-configurations"),s(N,"class","relative group"),s(be,"href","/docs/transformers/pr_15658/en/main_classes/onnx#transformers.onnx.OnnxConfig"),s(Ce,"href","/docs/transformers/pr_15658/en/main_classes/onnx#transformers.onnx.OnnxConfigWithPast"),s(Pe,"href","/docs/transformers/pr_15658/en/main_classes/onnx#transformers.onnx.OnnxSeq2SeqConfigWithPast"),s(W,"id","transformers.onnx.OnnxConfig"),s(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(W,"href","#transformers.onnx.OnnxConfig"),s(P,"class","relative group"),s(M,"class","docstring"),s(X,"class","docstring"),s(L,"class","docstring"),s(V,"class","docstring"),s(x,"class","docstring"),s(z,"id","transformers.onnx.OnnxConfigWithPast"),s(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(z,"href","#transformers.onnx.OnnxConfigWithPast"),s(k,"class","relative group"),s(H,"class","docstring"),s(B,"class","docstring"),s(S,"class","docstring"),s(G,"id","transformers.onnx.OnnxSeq2SeqConfigWithPast"),s(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(G,"href","#transformers.onnx.OnnxSeq2SeqConfigWithPast"),s(T,"class","relative group"),s(ke,"class","docstring"),s(U,"id","onnx-features"),s(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(U,"href","#onnx-features"),s(A,"class","relative group"),s(J,"id","transformers.onnx.FeaturesManager"),s(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(J,"href","#transformers.onnx.FeaturesManager"),s(D,"class","relative group"),s(K,"class","docstring"),s(Q,"class","docstring"),s(R,"class","docstring"),s(Y,"class","docstring"),s($,"class","docstring")},m(e,p){t(document.head,O),h(e,$e,p),h(e,y,p),t(y,E),t(E,Te),u(ee,Te,null),t(y,Ht),t(y,Ae),t(Ae,Bt),h(e,ot,p),h(e,q,p),t(q,Gt),t(q,De),t(De,Ut),t(q,jt),h(e,at,p),h(e,I,p),t(I,Jt),t(I,ye),t(ye,Kt),t(I,Qt),h(e,st,p),h(e,N,p),t(N,F),t(F,qe),u(te,qe,null),t(N,Rt),t(N,Ie),t(Ie,Yt),h(e,it,p),h(e,we,p),t(we,Zt),h(e,ft,p),h(e,C,p),t(C,Ee),t(Ee,er),t(Ee,be),t(be,tr),t(C,rr),t(C,Oe),t(Oe,nr),t(Oe,Ce),t(Ce,or),t(C,ar),t(C,Ne),t(Ne,sr),t(Ne,Pe),t(Pe,ir),h(e,lt,p),h(e,P,p),t(P,W),t(W,Fe),u(re,Fe,null),t(P,fr),t(P,We),t(We,lr),h(e,mt,p),h(e,x,p),u(ne,x,null),t(x,mr),t(x,Me),t(Me,pr),t(x,hr),t(x,M),u(oe,M,null),t(M,cr),t(M,Xe),t(Xe,dr),t(x,ur),t(x,X),u(ae,X,null),t(X,gr),t(X,Le),t(Le,_r),t(x,vr),t(x,L),u(se,L,null),t(L,xr),t(L,Ve),t(Ve,$r),t(x,yr),t(x,V),u(ie,V,null),t(V,wr),t(V,ze),t(ze,Er),h(e,pt,p),h(e,k,p),t(k,z),t(z,He),u(fe,He,null),t(k,br),t(k,Be),t(Be,Or),h(e,ht,p),h(e,S,p),t(S,H),u(le,H,null),t(H,Cr),t(H,Ge),t(Ge,Nr),t(S,Pr),t(S,B),u(me,B,null),t(B,kr),t(B,pe),t(pe,Sr),t(pe,Ue),t(Ue,Tr),t(pe,Ar),h(e,ct,p),h(e,T,p),t(T,G),t(G,je),u(he,je,null),t(T,Dr),t(T,Je),t(Je,qr),h(e,dt,p),h(e,ke,p),h(e,ut,p),h(e,A,p),t(A,U),t(U,Ke),u(ce,Ke,null),t(A,Ir),t(A,Qe),t(Qe,Fr),h(e,gt,p),h(e,j,p),t(j,Wr),t(j,Re),t(Re,Mr),t(j,Xr),h(e,_t,p),h(e,D,p),t(D,J),t(J,Ye),u(de,Ye,null),t(D,Lr),t(D,Ze),t(Ze,Vr),h(e,vt,p),h(e,$,p),t($,K),u(ue,K,null),t(K,zr),t(K,et),t(et,Hr),t($,Br),t($,Q),u(ge,Q,null),t(Q,Gr),t(Q,tt),t(tt,Ur),t($,jr),t($,R),u(_e,R,null),t(R,Jr),t(R,rt),t(rt,Kr),t($,Qr),t($,Y),u(ve,Y,null),t(Y,Rr),t(Y,nt),t(nt,Yr),xt=!0},p:jn,i(e){xt||(g(ee.$$.fragment,e),g(te.$$.fragment,e),g(re.$$.fragment,e),g(ne.$$.fragment,e),g(oe.$$.fragment,e),g(ae.$$.fragment,e),g(se.$$.fragment,e),g(ie.$$.fragment,e),g(fe.$$.fragment,e),g(le.$$.fragment,e),g(me.$$.fragment,e),g(he.$$.fragment,e),g(ce.$$.fragment,e),g(de.$$.fragment,e),g(ue.$$.fragment,e),g(ge.$$.fragment,e),g(_e.$$.fragment,e),g(ve.$$.fragment,e),xt=!0)},o(e){_(ee.$$.fragment,e),_(te.$$.fragment,e),_(re.$$.fragment,e),_(ne.$$.fragment,e),_(oe.$$.fragment,e),_(ae.$$.fragment,e),_(se.$$.fragment,e),_(ie.$$.fragment,e),_(fe.$$.fragment,e),_(le.$$.fragment,e),_(me.$$.fragment,e),_(he.$$.fragment,e),_(ce.$$.fragment,e),_(de.$$.fragment,e),_(ue.$$.fragment,e),_(ge.$$.fragment,e),_(_e.$$.fragment,e),_(ve.$$.fragment,e),xt=!1},d(e){r(O),e&&r($e),e&&r(y),v(ee),e&&r(ot),e&&r(q),e&&r(at),e&&r(I),e&&r(st),e&&r(N),v(te),e&&r(it),e&&r(we),e&&r(ft),e&&r(C),e&&r(lt),e&&r(P),v(re),e&&r(mt),e&&r(x),v(ne),v(oe),v(ae),v(se),v(ie),e&&r(pt),e&&r(k),v(fe),e&&r(ht),e&&r(S),v(le),v(me),e&&r(ct),e&&r(T),v(he),e&&r(dt),e&&r(ke),e&&r(ut),e&&r(A),v(ce),e&&r(gt),e&&r(j),e&&r(_t),e&&r(D),v(de),e&&r(vt),e&&r($),v(ue),v(ge),v(_e),v(ve)}}}const Kn={local:"exporting-transformers-models-to-onnx",sections:[{local:"onnx-configurations",sections:[{local:"transformers.onnx.OnnxConfig",title:"OnnxConfig"},{local:"transformers.onnx.OnnxConfigWithPast",title:"OnnxConfigWithPast"},{local:"transformers.onnx.OnnxSeq2SeqConfigWithPast",title:"OnnxSeq2SeqConfigWithPast"}],title:"ONNX Configurations"},{local:"onnx-features",sections:[{local:"transformers.onnx.FeaturesManager",title:"FeaturesManager"}],title:"ONNX Features"}],title:"Exporting \u{1F917} Transformers models to ONNX"};function Qn(zt,O,$e){let{fw:y}=O;return zt.$$set=E=>{"fw"in E&&$e(0,y=E.fw)},[y]}class eo extends Hn{constructor(O){super();Bn(this,O,Qn,Jn,Gn,{fw:0})}}export{eo as default,Kn as metadata};
