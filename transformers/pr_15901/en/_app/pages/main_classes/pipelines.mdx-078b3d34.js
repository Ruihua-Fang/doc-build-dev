import{S as y6,i as P6,s as x6,e as r,k as l,w as f,t as a,M as $6,c as o,d as n,m as d,a as s,x as h,h as i,b as p,F as e,g as m,y as u,q as g,o as _,B as b,v as E6}from"../../chunks/vendor-6b77c823.js";import{T as T6}from"../../chunks/Tip-39098574.js";import{D as v}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as P}from"../../chunks/IconCopyLink-7a11ce68.js";function q6(Ca){let x,_e,q,S,me;return{c(){x=r("p"),_e=a(`However, this is not automatically a win for performance. It can be either a 10x speedup or 5x slowdown depending
on hardware, data and the actual model being used.`),q=l(),S=r("p"),me=a("Example where it\u2019s mostly a speedup:")},l($){x=o($,"P",{});var O=s(x);_e=i(O,`However, this is not automatically a win for performance. It can be either a 10x speedup or 5x slowdown depending
on hardware, data and the actual model being used.`),O.forEach(n),q=d($),S=o($,"P",{});var ye=s(S);me=i(ye,"Example where it\u2019s mostly a speedup:"),ye.forEach(n)},m($,O){m($,x,O),e(x,_e),m($,q,O),m($,S,O),e(S,me)},d($){$&&n(x),$&&n(q),$&&n(S)}}}function C6(Ca){let x,_e,q,S,me;return{c(){x=r("p"),_e=a(`This pipeline only works for inputs with exactly one token masked. Experimental: We added support for multiple
masks. The returned values are raw model output, and correspond to disjoint probabilities where one might expect
joint probabilities (See `),q=r("a"),S=a("discussion"),me=a(")."),this.h()},l($){x=o($,"P",{});var O=s(x);_e=i(O,`This pipeline only works for inputs with exactly one token masked. Experimental: We added support for multiple
masks. The returned values are raw model output, and correspond to disjoint probabilities where one might expect
joint probabilities (See `),q=o(O,"A",{href:!0,rel:!0});var ye=s(q);S=i(ye,"discussion"),ye.forEach(n),me=i(O,")."),O.forEach(n),this.h()},h(){p(q,"href","https://github.com/huggingface/transformers/pull/10222"),p(q,"rel","nofollow")},m($,O){m($,x,O),e(x,_e),e(x,q),e(q,S),e(x,me)},d($){$&&n(x)}}}function A6(Ca){let x,_e,q,S,me,$,O,ye,Dg,Vm,Vt,Ig,Aa,jg,Sg,Bm,za,Mg,Zm,Bt,xl,br,Fg,Da,Lg,Ug,Gg,vr,$l,Ng,Og,w,El,Ia,Rg,Wg,ql,ja,Hg,Qg,Cl,Sa,Vg,Bg,Al,Ma,Zg,Yg,zl,Fa,Xg,Kg,Dl,La,Jg,e_,Il,Ua,t_,n_,jl,Ga,r_,o_,Sl,Na,s_,a_,Ml,Oa,i_,l_,Fl,Ra,d_,p_,Ll,Wa,c_,m_,Ul,Ha,f_,h_,Gl,Qa,u_,g_,Nl,Va,__,b_,Ol,Ba,v_,w_,Rl,Za,k_,T_,Wl,Ya,y_,Ym,Ve,Zt,Hl,wr,P_,Ql,x_,Xm,Yt,$_,Vl,E_,q_,Km,Xa,C_,Jm,kr,ef,Xt,A_,Tr,z_,D_,tf,yr,nf,Kt,I_,Bl,j_,S_,rf,Pr,of,Jt,M_,Zl,F_,L_,sf,xr,af,Ka,U_,lf,$r,df,R,Er,G_,qr,N_,Ja,O_,R_,W_,Yl,H_,Q_,Be,Cr,V_,ei,B_,Z_,Y_,Ar,X_,ti,K_,J_,eb,Xl,tb,nb,Kl,rb,ob,zr,pf,Ze,en,Jl,Dr,sb,ed,ab,cf,qe,ib,td,lb,db,nd,pb,cb,mf,Ir,ff,tn,hf,jr,uf,Sr,gf,ni,mb,_f,Mr,bf,nn,fb,rd,hb,ub,vf,Fr,wf,ri,gb,kf,oi,_b,Tf,ie,od,sd,ad,bb,vb,id,ld,wb,kb,dd,pd,Tb,yb,Lr,cd,Pb,xb,Ye,md,$b,Eb,fd,qb,Cb,hd,Ab,zb,ud,gd,Db,yf,Xe,rn,_d,Ur,Ib,bd,jb,Pf,Pe,vd,Sb,Mb,wd,Fb,Lb,kd,Ub,Gb,xf,Ce,Nb,Td,Ob,Rb,yd,Wb,Hb,$f,Gr,Ef,si,Qb,qf,Nr,Cf,ai,Vb,Af,on,Bb,Pd,Zb,Yb,zf,Ke,sn,xd,Or,Xb,$d,Kb,Df,ii,Jb,If,an,e1,Ed,t1,n1,jf,li,r1,Sf,di,qd,o1,Mf,Rr,Ff,pi,s1,Lf,Je,ln,Cd,Wr,a1,Ad,i1,Uf,ci,mi,l1,Gf,et,dn,zd,Hr,d1,Dd,p1,Nf,tt,pn,Id,Qr,c1,jd,m1,Of,J,Vr,f1,Br,h1,Sd,u1,g1,_1,nt,b1,fi,v1,w1,Md,k1,T1,y1,Zr,P1,Yr,x1,$1,E1,cn,Xr,q1,Kr,C1,hi,A1,z1,Rf,rt,mn,Fd,Jr,D1,Ld,I1,Wf,fe,eo,j1,Ud,S1,M1,Gd,F1,L1,fn,to,U1,no,G1,ui,N1,O1,Hf,ot,hn,Nd,ro,R1,Od,W1,Qf,z,oo,H1,xe,Q1,gi,V1,B1,_i,Z1,Y1,Rd,X1,K1,J1,Wd,ev,tv,so,nv,un,ao,rv,io,ov,Hd,sv,av,iv,gn,lo,lv,Qd,dv,pv,Ae,po,cv,Vd,mv,fv,he,hv,Bd,uv,gv,Zd,_v,bv,Yd,vv,wv,Xd,kv,Tv,yv,_n,co,Pv,$e,xv,Kd,$v,Ev,Jd,qv,Cv,ep,Av,zv,Vf,M,mo,Dv,tp,Iv,jv,st,Sv,bi,Mv,Fv,np,Lv,Uv,Gv,ue,Nv,rp,Ov,Rv,op,Wv,Hv,sp,Qv,Vv,fo,Bv,Zv,Yv,ap,Xv,Kv,ho,Jv,bn,uo,ew,ip,tw,Bf,at,vn,lp,go,nw,dp,rw,Zf,ee,_o,ow,pp,sw,aw,it,iw,vi,lw,dw,cp,pw,cw,mw,bo,fw,vo,hw,uw,gw,wn,wo,_w,mp,bw,Yf,lt,kn,fp,ko,vw,hp,ww,Xf,W,To,kw,dt,Tw,up,yw,Pw,wi,xw,$w,Ew,pt,qw,ki,Cw,Aw,gp,zw,Dw,Iw,yo,jw,Po,Sw,Mw,Fw,Tn,Lw,yn,xo,Uw,_p,Gw,Kf,ct,Pn,bp,$o,Nw,vp,Ow,Jf,te,Eo,Rw,qo,Ww,wp,Hw,Qw,Vw,mt,Bw,Ti,Zw,Yw,kp,Xw,Kw,Jw,Co,e0,Ao,t0,n0,r0,xn,zo,o0,Tp,s0,eh,ft,$n,yp,Do,a0,Pp,i0,th,ne,Io,l0,jo,d0,xp,p0,c0,m0,ht,f0,yi,h0,u0,$p,g0,_0,b0,So,v0,Mo,w0,k0,T0,En,Fo,y0,Ep,P0,nh,ut,qn,qp,Lo,x0,Cp,$0,rh,D,Uo,E0,gt,q0,Ap,C0,A0,Pi,z0,D0,I0,_t,j0,xi,S0,M0,zp,F0,L0,U0,Go,G0,No,N0,O0,R0,ze,Oo,W0,Dp,H0,Q0,Ip,V0,B0,Cn,Ro,Z0,jp,Y0,X0,An,Wo,K0,Sp,J0,ek,zn,Ho,tk,Mp,nk,oh,Dn,rk,$i,ok,sk,sh,bt,In,Fp,Qo,ak,Lp,ik,ah,re,Vo,lk,Bo,dk,Up,pk,ck,mk,vt,fk,Ei,hk,uk,Gp,gk,_k,bk,Zo,vk,Yo,wk,kk,Tk,jn,Xo,yk,Np,Pk,ih,wt,Sn,Op,Ko,xk,Rp,$k,lh,I,Jo,Ek,kt,qk,Wp,Ck,Ak,qi,zk,Dk,Ik,Tt,jk,Ci,Sk,Mk,Hp,Fk,Lk,Uk,es,Gk,ts,Nk,Ok,Rk,Mn,ns,Wk,Qp,Hk,Qk,De,rs,Vk,yt,Bk,Vp,Zk,Yk,Bp,Xk,Kk,Jk,Zp,eT,tT,Ie,os,nT,ss,rT,Yp,oT,sT,aT,Xp,iT,lT,Fn,as,dT,Kp,pT,dh,Pt,Ln,Jp,is,cT,ec,mT,ph,F,ls,fT,tc,hT,uT,xt,gT,Ai,_T,bT,nc,vT,wT,kT,L,TT,rc,yT,PT,oc,xT,$T,sc,ET,qT,ac,CT,AT,ic,zT,DT,lc,IT,jT,ds,ST,MT,FT,dc,LT,UT,ps,GT,Un,cs,NT,pc,OT,ch,$t,Gn,cc,ms,RT,mc,WT,mh,oe,fs,HT,hs,QT,fc,VT,BT,ZT,Et,YT,zi,XT,KT,hc,JT,ey,ty,us,ny,gs,ry,oy,sy,C,_s,ay,uc,iy,ly,H,gc,_c,dy,py,bc,vc,cy,my,wc,kc,fy,hy,Tc,yc,uy,gy,Pc,xc,_y,by,$c,Ec,vy,wy,qc,Cc,ky,Ty,bs,yy,Ac,Py,xy,$y,zc,Ey,qy,vs,Cy,Dc,Ay,zy,Ic,Dy,Iy,ws,fh,qt,Nn,jc,ks,jy,Sc,Sy,hh,Q,Ts,My,Ct,Fy,Mc,Ly,Uy,Di,Gy,Ny,Oy,At,Ry,Ii,Wy,Hy,Fc,Qy,Vy,By,ys,Zy,Lc,Yy,Xy,Ky,Ps,Jy,xs,eP,tP,nP,On,$s,rP,Uc,oP,uh,zt,Rn,Gc,Es,sP,Nc,aP,gh,se,qs,iP,Cs,lP,Oc,dP,pP,cP,Dt,mP,ji,fP,hP,Rc,uP,gP,_P,As,bP,zs,vP,wP,kP,Wn,Ds,TP,Wc,yP,_h,It,Hn,Hc,Is,PP,Qc,xP,bh,j,js,$P,Vc,EP,qP,jt,CP,Si,AP,zP,Bc,DP,IP,jP,Ss,SP,Ms,MP,FP,LP,Zc,UP,GP,Fs,NP,Qn,Ls,OP,Yc,RP,WP,Vn,Us,HP,Xc,QP,vh,St,Bn,Kc,Gs,VP,Jc,BP,wh,E,Ns,ZP,Mt,YP,em,XP,KP,Mi,JP,e2,t2,Ft,n2,Fi,r2,o2,tm,s2,a2,i2,Os,l2,Rs,d2,p2,c2,Zn,Ws,m2,nm,f2,h2,je,Hs,u2,rm,g2,_2,om,b2,v2,Yn,Qs,w2,sm,k2,T2,Xn,Vs,y2,am,P2,x2,Kn,Bs,$2,im,E2,kh,Lt,Jn,lm,Zs,q2,dm,C2,Th,U,Ys,A2,pm,z2,D2,Ut,I2,Li,j2,S2,cm,M2,F2,L2,Xs,U2,Ks,G2,N2,O2,mm,R2,W2,Js,H2,er,ea,Q2,fm,V2,yh,Gt,tr,hm,ta,B2,um,Z2,Ph,V,na,Y2,ra,X2,gm,K2,J2,ex,Ee,tx,_m,nx,rx,bm,ox,sx,vm,ax,ix,lx,Nt,dx,Ui,px,cx,wm,mx,fx,hx,oa,ux,sa,gx,_x,bx,nr,aa,vx,ia,wx,Gi,kx,Tx,xh,Ot,rr,km,la,yx,Tm,Px,$h,ae,da,xx,Rt,$x,ym,Ex,qx,Pm,Cx,Ax,zx,Wt,Dx,Ni,Ix,jx,xm,Sx,Mx,Fx,pa,Lx,ca,Ux,Gx,Nx,or,ma,Ox,$m,Rx,Eh,Ht,sr,Em,fa,Wx,Oi,Hx,qm,Qx,qh,T,ha,Vx,Cm,Bx,Zx,Am,Yx,Xx,zm,Kx,Jx,Dm,e5,t5,ge,n5,Ri,r5,o5,Im,s5,a5,jm,i5,l5,Sm,d5,p5,c5,ar,ua,m5,Mm,f5,h5,be,ga,u5,Fm,g5,_5,Lm,b5,v5,_a,w5,ir,ba,k5,Um,T5,y5,lr,va,P5,wa,x5,Gm,$5,E5,q5,dr,ka,C5,Ta,A5,Nm,z5,D5,I5,pr,ya,j5,Qt,S5,Om,M5,F5,Rm,L5,U5,G5,cr,Pa,N5,Wm,O5,R5,mr,xa,W5,$a,H5,Hm,Q5,V5,Ch;return $=new P({}),wr=new P({}),kr=new A({props:{code:`pipe = pipeline("text-classification")
pipe("This restaurant is awesome")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipe(<span class="hljs-string">&quot;This restaurant is awesome&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998743534088135</span>}]`}}),yr=new A({props:{code:`pipe = pipeline(model="roberta-large-mnli")
pipe("This restaurant is awesome")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pipe = pipeline(model=<span class="hljs-string">&quot;roberta-large-mnli&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipe(<span class="hljs-string">&quot;This restaurant is awesome&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998743534088135</span>}]`}}),Pr=new A({props:{code:`pipe = pipeline("text-classification")
pipe(["This restaurant is awesome", "This restaurant is aweful"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipe([<span class="hljs-string">&quot;This restaurant is awesome&quot;</span>, <span class="hljs-string">&quot;This restaurant is aweful&quot;</span>])
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998743534088135</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;NEGATIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9996669292449951</span>}]`}}),xr=new A({props:{code:`import datasets
from transformers import pipeline
from transformers.pipelines.pt_utils import KeyDataset
from tqdm.auto import tqdm

pipe = pipeline("automatic-speech-recognition", model="facebook/wav2vec2-base-960h", device=0)
dataset = datasets.load_dataset("superb", name="asr", split="test")

# KeyDataset (only *pt*) will simply return the item in the dict returned by the dataset item
# as we're not interested in the *target* part of the dataset.
for out in tqdm(pipe(KeyDataset(dataset, "file"))):
    print(out)
    # {"text": "NUMBER TEN FRESH NELLY IS WAITING ON YOU GOOD NIGHT HUSBAND"}
    # {"text": ....}
    # ....`,highlighted:`<span class="hljs-keyword">import</span> datasets
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> transformers.pipelines.pt_utils <span class="hljs-keyword">import</span> KeyDataset
<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm

pipe = pipeline(<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, model=<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>, device=<span class="hljs-number">0</span>)
dataset = datasets.load_dataset(<span class="hljs-string">&quot;superb&quot;</span>, name=<span class="hljs-string">&quot;asr&quot;</span>, split=<span class="hljs-string">&quot;test&quot;</span>)

<span class="hljs-comment"># KeyDataset (only *pt*) will simply return the item in the dict returned by the dataset item</span>
<span class="hljs-comment"># as we&#x27;re not interested in the *target* part of the dataset.</span>
<span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> tqdm(pipe(KeyDataset(dataset, <span class="hljs-string">&quot;file&quot;</span>))):
    <span class="hljs-built_in">print</span>(out)
    <span class="hljs-comment"># {&quot;text&quot;: &quot;NUMBER TEN FRESH NELLY IS WAITING ON YOU GOOD NIGHT HUSBAND&quot;}</span>
    <span class="hljs-comment"># {&quot;text&quot;: ....}</span>
    <span class="hljs-comment"># ....</span>`}}),$r=new A({props:{code:`from transformers import pipeline

pipe = pipeline("text-classification")


def data():
    while True:
        # This could come from a dataset, a database, a queue or HTTP request
        # in a server
        # Caveat: because this is iterative, you cannot use \`num_workers > 1\` variable
        # to use multiple threads to preprocess data. You can still have 1 thread that
        # does the preprocessing while the main runs the big inference
        yield "This is a test"


for out in pipe(data()):
    print(out)
    # {"text": "NUMBER TEN FRESH NELLY IS WAITING ON YOU GOOD NIGHT HUSBAND"}
    # {"text": ....}
    # ....`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">data</span>():
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        <span class="hljs-comment"># This could come from a dataset, a database, a queue or HTTP request</span>
        <span class="hljs-comment"># in a server</span>
        <span class="hljs-comment"># Caveat: because this is iterative, you cannot use \`num_workers &gt; 1\` variable</span>
        <span class="hljs-comment"># to use multiple threads to preprocess data. You can still have 1 thread that</span>
        <span class="hljs-comment"># does the preprocessing while the main runs the big inference</span>
        <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;This is a test&quot;</span>


<span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> pipe(data()):
    <span class="hljs-built_in">print</span>(out)
    <span class="hljs-comment"># {&quot;text&quot;: &quot;NUMBER TEN FRESH NELLY IS WAITING ON YOU GOOD NIGHT HUSBAND&quot;}</span>
    <span class="hljs-comment"># {&quot;text&quot;: ....}</span>
    <span class="hljs-comment"># ....</span>`}}),Er=new v({props:{name:"transformers.pipeline",anchor:"transformers.pipeline",parameters:[{name:"task",val:": str = None"},{name:"model",val:": typing.Optional = None"},{name:"config",val:": typing.Union[str, transformers.configuration_utils.PretrainedConfig, NoneType] = None"},{name:"tokenizer",val:": typing.Union[str, transformers.tokenization_utils.PreTrainedTokenizer, NoneType] = None"},{name:"feature_extractor",val:": typing.Union[str, ForwardRef('SequenceFeatureExtractor'), NoneType] = None"},{name:"framework",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"use_fast",val:": bool = True"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"model_kwargs",val:": typing.Dict[str, typing.Any] = None"},{name:"pipeline_class",val:": typing.Optional[typing.Any] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.pipeline.task",description:`<strong>task</strong> (<code>str</code>) &#x2014;
The task defining which pipeline will be returned. Currently accepted tasks are:</p>
<ul>
<li><code>&quot;audio-classification&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.AudioClassificationPipeline">AudioClassificationPipeline</a>.</li>
<li><code>&quot;automatic-speech-recognition&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.AutomaticSpeechRecognitionPipeline">AutomaticSpeechRecognitionPipeline</a>.</li>
<li><code>&quot;conversational&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ConversationalPipeline">ConversationalPipeline</a>.</li>
<li><code>&quot;feature-extraction&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.FeatureExtractionPipeline">FeatureExtractionPipeline</a>.</li>
<li><code>&quot;fill-mask&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.FillMaskPipeline">FillMaskPipeline</a>:.</li>
<li><code>&quot;image-classification&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ImageClassificationPipeline">ImageClassificationPipeline</a>.</li>
<li><code>&quot;question-answering&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.QuestionAnsweringPipeline">QuestionAnsweringPipeline</a>.</li>
<li><code>&quot;table-question-answering&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TableQuestionAnsweringPipeline">TableQuestionAnsweringPipeline</a>.</li>
<li><code>&quot;text2text-generation&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.Text2TextGenerationPipeline">Text2TextGenerationPipeline</a>.</li>
<li><code>&quot;text-classification&quot;</code> (alias <code>&quot;sentiment-analysis&quot;</code> available): will return a
<a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TextClassificationPipeline">TextClassificationPipeline</a>.</li>
<li><code>&quot;text-generation&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TextGenerationPipeline">TextGenerationPipeline</a>:.</li>
<li><code>&quot;token-classification&quot;</code> (alias <code>&quot;ner&quot;</code> available): will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TokenClassificationPipeline">TokenClassificationPipeline</a>.</li>
<li><code>&quot;translation&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TranslationPipeline">TranslationPipeline</a>.</li>
<li><code>&quot;translation_xx_to_yy&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TranslationPipeline">TranslationPipeline</a>.</li>
<li><code>&quot;summarization&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.SummarizationPipeline">SummarizationPipeline</a>.</li>
<li><code>&quot;zero-shot-classification&quot;</code>: will return a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ZeroShotClassificationPipeline">ZeroShotClassificationPipeline</a>.</li>
</ul>`,name:"task"},{anchor:"transformers.pipeline.model",description:`<strong>model</strong> (<code>str</code> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>, <em>optional</em>) &#x2014;
The model that will be used by the pipeline to make predictions. This can be a model identifier or an
actual instance of a pretrained model inheriting from <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> (for PyTorch) or
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> (for TensorFlow).</p>
<p>If not provided, the default for the <code>task</code> will be loaded.`,name:"model"},{anchor:"transformers.pipeline.config",description:`<strong>config</strong> (<code>str</code> or <a href="/docs/transformers/pr_15901/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration that will be used by the pipeline to instantiate the model. This can be a model
identifier or an actual pretrained model configuration inheriting from <a href="/docs/transformers/pr_15901/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>.</p>
<p>If not provided, the default configuration file for the requested model will be used. That means that if
<code>model</code> is given, its default configuration will be used. However, if <code>model</code> is not supplied, this
<code>task</code>&#x2019;s default model&#x2019;s config is used instead.`,name:"config"},{anchor:"transformers.pipeline.tokenizer",description:`<strong>tokenizer</strong> (<code>str</code> or <a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>, <em>optional</em>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This can be a model
identifier or an actual pretrained tokenizer inheriting from <a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.</p>
<p>If not provided, the default tokenizer for the given <code>model</code> will be loaded (if it is a string). If <code>model</code>
is not specified or not a string, then the default tokenizer for <code>config</code> is loaded (if it is a string).
However, if <code>config</code> is also not given or not a string, then the default tokenizer for the given <code>task</code>
will be loaded.`,name:"tokenizer"},{anchor:"transformers.pipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<code>str</code> or <code>PreTrainedFeatureExtractor</code>, <em>optional</em>) &#x2014;
The feature extractor that will be used by the pipeline to encode data for the model. This can be a model
identifier or an actual pretrained feature extractor inheriting from <code>PreTrainedFeatureExtractor</code>.</p>
<p>Feature extractors are used for non-NLP models, such as Speech or Vision models as well as multi-modal
models. Multi-modal models will also require a tokenizer to be passed.</p>
<p>If not provided, the default feature extractor for the given <code>model</code> will be loaded (if it is a string). If
<code>model</code> is not specified or not a string, then the default feature extractor for <code>config</code> is loaded (if it
is a string). However, if <code>config</code> is also not given or not a string, then the default feature extractor
for the given <code>task</code> will be loaded.`,name:"feature_extractor"},{anchor:"transformers.pipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.pipeline.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
When passing a task name or a string model identifier: The specific model version to use. It can be a
branch name, a tag name, or a commit id, since we use a git-based system for storing models and other
artifacts on huggingface.co, so <code>revision</code> can be any identifier allowed by git.`,name:"revision"},{anchor:"transformers.pipeline.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to use a Fast tokenizer if possible (a <a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast">PreTrainedTokenizerFast</a>).`,name:"use_fast"},{anchor:"transformers.pipeline.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).
model_kwargs &#x2014;
Additional dictionary of keyword arguments passed along to the model&#x2019;s <code>from_pretrained(..., **model_kwargs)</code> function.
kwargs &#x2014;
Additional keyword arguments passed along to the specific pipeline init (see the documentation for the
corresponding pipeline class for possible values).`,name:"use_auth_token"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines.py#L372",returnDescription:`
<p>A suitable pipeline for the task.</p>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.Pipeline"
>Pipeline</a></p>
`}}),zr=new A({props:{code:`from transformers import pipeline, AutoModelForTokenClassification, AutoTokenizer

# Sentiment analysis pipeline
pipeline("sentiment-analysis")

# Question answering pipeline, specifying the checkpoint identifier
pipeline("question-answering", model="distilbert-base-cased-distilled-squad", tokenizer="bert-base-cased")

# Named entity recognition pipeline, passing in a specific model and tokenizer
model = AutoModelForTokenClassification.from_pretrained("dbmdz/bert-large-cased-finetuned-conll03-english")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
pipeline("ner", model=model, tokenizer=tokenizer)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline, AutoModelForTokenClassification, AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Sentiment analysis pipeline</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Question answering pipeline, specifying the checkpoint identifier</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline(<span class="hljs-string">&quot;question-answering&quot;</span>, model=<span class="hljs-string">&quot;distilbert-base-cased-distilled-squad&quot;</span>, tokenizer=<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Named entity recognition pipeline, passing in a specific model and tokenizer</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-large-cased-finetuned-conll03-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline(<span class="hljs-string">&quot;ner&quot;</span>, model=model, tokenizer=tokenizer)`}}),Dr=new P({}),Ir=new A({props:{code:`from transformers import pipeline
from transformers.pipelines.pt_utils import KeyDataset
import datasets

dataset = datasets.load_dataset("imdb", name="plain_text", split="unsupervised")
pipe = pipeline("text-classification", device=0)
for out in pipe(KeyDataset(dataset, "text"), batch_size=8, truncation="only_first"):
    print(out)
    # [{'label': 'POSITIVE', 'score': 0.9998743534088135}]
    # Exactly the same output as before, but the content are passed
    # as batches to the model`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> transformers.pipelines.pt_utils <span class="hljs-keyword">import</span> KeyDataset
<span class="hljs-keyword">import</span> datasets

dataset = datasets.load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>, name=<span class="hljs-string">&quot;plain_text&quot;</span>, split=<span class="hljs-string">&quot;unsupervised&quot;</span>)
pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, device=<span class="hljs-number">0</span>)
<span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> pipe(KeyDataset(dataset, <span class="hljs-string">&quot;text&quot;</span>), batch_size=<span class="hljs-number">8</span>, truncation=<span class="hljs-string">&quot;only_first&quot;</span>):
    <span class="hljs-built_in">print</span>(out)
    <span class="hljs-comment"># [{&#x27;label&#x27;: &#x27;POSITIVE&#x27;, &#x27;score&#x27;: 0.9998743534088135}]</span>
    <span class="hljs-comment"># Exactly the same output as before, but the content are passed</span>
    <span class="hljs-comment"># as batches to the model</span>`}}),tn=new T6({props:{warning:!0,$$slots:{default:[q6]},$$scope:{ctx:Ca}}}),jr=new A({props:{code:`from transformers import pipeline
from torch.utils.data import Dataset
from tqdm.auto import tqdm

pipe = pipeline("text-classification", device=0)


class MyDataset(Dataset):
    def __len__(self):
        return 5000

    def __getitem__(self, i):
        return "This is a test"


dataset = MyDataset()

for batch_size in [1, 8, 64, 256]:
    print("-" * 30)
    print(f"Streaming batch_size={batch_size}")
    for out in tqdm(pipe(dataset, batch_size=batch_size), total=len(dataset)):
        pass`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset
<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm

pipe = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>, device=<span class="hljs-number">0</span>)


<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):
        <span class="hljs-keyword">return</span> <span class="hljs-number">5000</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, i</span>):
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;This is a test&quot;</span>


dataset = MyDataset()

<span class="hljs-keyword">for</span> batch_size <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">64</span>, <span class="hljs-number">256</span>]:
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">30</span>)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Streaming batch_size=<span class="hljs-subst">{batch_size}</span>&quot;</span>)
    <span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> tqdm(pipe(dataset, batch_size=batch_size), total=<span class="hljs-built_in">len</span>(dataset)):
        <span class="hljs-keyword">pass</span>`}}),Sr=new A({props:{code:`# On GTX 970
------------------------------
Streaming no batching
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5000/5000 [00:26<00:00, 187.52it/s]
------------------------------
Streaming batch_size=8
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5000/5000 [00:04<00:00, 1205.95it/s]
------------------------------
Streaming batch_size=64
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5000/5000 [00:02<00:00, 2478.24it/s]
------------------------------
Streaming batch_size=256
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5000/5000 [00:01<00:00, 2554.43it/s]
(diminishing returns, saturated the GPU)`,highlighted:`<span class="hljs-section"># On GTX 970
------------------------------</span>
Streaming no batching
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5000/5000 [00:26&lt;00:00, 187.52it/s]
<span class="hljs-code">------------------------------
Streaming batch_size=8
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5000/5000 [00:04&lt;00:00, 1205.95it/s]
------------------------------</span>
Streaming batch<span class="hljs-emphasis">_size=64
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5000/5000 [00:02&lt;00:00, 2478.24it/s]
------------------------------
Streaming batch_</span>size=256
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5000/5000 [00:01&lt;00:00, 2554.43it/s]
(diminishing returns, saturated the GPU)`}}),Mr=new A({props:{code:`class MyDataset(Dataset):
    def __len__(self):
        return 5000

    def __getitem__(self, i):
        if i % 64 == 0:
            n = 100
        else:
            n = 1
        return "This is a test" * n`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):
        <span class="hljs-keyword">return</span> <span class="hljs-number">5000</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, i</span>):
        <span class="hljs-keyword">if</span> i % <span class="hljs-number">64</span> == <span class="hljs-number">0</span>:
            n = <span class="hljs-number">100</span>
        <span class="hljs-keyword">else</span>:
            n = <span class="hljs-number">1</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;This is a test&quot;</span> * n`}}),Fr=new A({props:{code:`------------------------------
Streaming no batching
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:05<00:00, 183.69it/s]
------------------------------
Streaming batch_size=8
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:03<00:00, 265.74it/s]
------------------------------
Streaming batch_size=64
100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:26<00:00, 37.80it/s]
------------------------------
Streaming batch_size=256
  0%|                                                                                 | 0/1000 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/home/nicolas/src/transformers/test.py", line 42, in <module>
    for out in tqdm(pipe(dataset, batch_size=256), total=len(dataset)):
....
    q = q / math.sqrt(dim_per_head)  # (bs, n_heads, q_length, dim_per_head)
RuntimeError: CUDA out of memory. Tried to allocate 376.00 MiB (GPU 0; 3.95 GiB total capacity; 1.72 GiB already allocated; 354.88 MiB free; 2.46 GiB reserved in total by PyTorch)`,highlighted:`<span class="hljs-comment">------------------------------</span>
Streaming no batching
<span class="hljs-number">100</span>%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| <span class="hljs-number">1000</span>/<span class="hljs-number">1000</span> [<span class="hljs-number">00</span>:<span class="hljs-number">05</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">183.69</span><span class="hljs-keyword">it</span>/s]
<span class="hljs-comment">------------------------------</span>
Streaming batch_size=<span class="hljs-number">8</span>
<span class="hljs-number">100</span>%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| <span class="hljs-number">1000</span>/<span class="hljs-number">1000</span> [<span class="hljs-number">00</span>:<span class="hljs-number">03</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">265.74</span><span class="hljs-keyword">it</span>/s]
<span class="hljs-comment">------------------------------</span>
Streaming batch_size=<span class="hljs-number">64</span>
<span class="hljs-number">100</span>%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| <span class="hljs-number">1000</span>/<span class="hljs-number">1000</span> [<span class="hljs-number">00</span>:<span class="hljs-number">26</span>&lt;<span class="hljs-number">00</span>:<span class="hljs-number">00</span>, <span class="hljs-number">37.80</span><span class="hljs-keyword">it</span>/s]
<span class="hljs-comment">------------------------------</span>
Streaming batch_size=<span class="hljs-number">256</span>
  <span class="hljs-number">0</span>%|                                                                                 | <span class="hljs-number">0</span>/<span class="hljs-number">1000</span> [<span class="hljs-number">00</span>:<span class="hljs-number">00</span><span class="hljs-meta">&lt;?</span>, ?<span class="hljs-keyword">it</span>/s]
Traceback (most recent call <span class="hljs-keyword">last</span>):
  File <span class="hljs-string">&quot;/home/nicolas/src/transformers/test.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">42</span>, <span class="hljs-keyword">in</span> &lt;module&gt;
    <span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> tqdm(pipe(dataset, batch_size=<span class="hljs-number">256</span>), total=<span class="hljs-built_in">len</span>(dataset)):
....
    q = q / math.<span class="hljs-built_in">sqrt</span>(dim_per_head)  <span class="hljs-comment"># (bs, n_heads, q_length, dim_per_head)</span>
RuntimeError: CUDA out <span class="hljs-keyword">of</span> memory. Tried <span class="hljs-built_in">to</span> allocate <span class="hljs-number">376.00</span> MiB (GPU <span class="hljs-number">0</span>; <span class="hljs-number">3.95</span> GiB total capacity; <span class="hljs-number">1.72</span> GiB already allocated; <span class="hljs-number">354.88</span> MiB free; <span class="hljs-number">2.46</span> GiB reserved <span class="hljs-keyword">in</span> total <span class="hljs-keyword">by</span> PyTorch)`}}),Ur=new P({}),Gr=new A({props:{code:`preprocessed = pipe.preprocess(inputs)
model_outputs = pipe.forward(preprocessed)
outputs = pipe.postprocess(model_outputs)`,highlighted:`preprocessed = pipe.preprocess(inputs)
model_outputs = pipe.forward(preprocessed)
outputs = pipe.postprocess(model_outputs)`}}),Nr=new A({props:{code:`all_model_outputs = []
for preprocessed in pipe.preprocess(inputs):
    model_outputs = pipe.forward(preprocessed)
    all_model_outputs.append(model_outputs)
outputs = pipe.postprocess(all_model_outputs)`,highlighted:`all_model_outputs = []
<span class="hljs-keyword">for</span> preprocessed <span class="hljs-keyword">in</span> pipe.preprocess(inputs):
    model_outputs = pipe.forward(preprocessed)
    all_model_outputs.append(model_outputs)
outputs = pipe.postprocess(all_model_outputs)`}}),Or=new P({}),Rr=new A({props:{code:`class MyPipeline(TextClassificationPipeline):
    def postprocess():
        # Your code goes here
        scores = scores * 100
        # And here


my_pipeline = MyPipeline(model=model, tokenizer=tokenizer, ...)
# or if you use *pipeline* function, then:
my_pipeline = pipeline(model="xxxx", pipeline_class=MyPipeline)`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPipeline</span>(<span class="hljs-title class_ inherited__">TextClassificationPipeline</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postprocess</span>():
        <span class="hljs-comment"># Your code goes here</span>
        scores = scores * <span class="hljs-number">100</span>
        <span class="hljs-comment"># And here</span>


my_pipeline = MyPipeline(model=model, tokenizer=tokenizer, ...)
<span class="hljs-comment"># or if you use *pipeline* function, then:</span>
my_pipeline = pipeline(model=<span class="hljs-string">&quot;xxxx&quot;</span>, pipeline_class=MyPipeline)`}}),Wr=new P({}),Hr=new P({}),Qr=new P({}),Vr=new v({props:{name:"class transformers.AudioClassificationPipeline",anchor:"transformers.AudioClassificationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AudioClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.AudioClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.AudioClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.AudioClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.AudioClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.AudioClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.AudioClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.AudioClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.AudioClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.AudioClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/audio_classification.py#L66"}}),Xr=new v({props:{name:"__call__",anchor:"transformers.AudioClassificationPipeline.__call__",parameters:[{name:"inputs",val:": typing.Union[numpy.ndarray, bytes, str]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AudioClassificationPipeline.__call__.inputs",description:`<strong>inputs</strong> (<code>np.ndarray</code> or <code>bytes</code> or <code>str</code>) &#x2014;
The inputs is either a raw waveform (<code>np.ndarray</code> of shape (n, ) of type <code>np.float32</code> or <code>np.float64</code>)
at the correct sampling rate (no further check will be done) or a <code>str</code> that is the filename of the
audio file, the file will be read at the correct sampling rate to get the waveform using <em>ffmpeg</em>. This
requires <em>ffmpeg</em> to be installed on the system. If <em>inputs</em> is <code>bytes</code> it is supposed to be the
content of an audio file and is interpreted by <em>ffmpeg</em> in the same way.`,name:"inputs"},{anchor:"transformers.AudioClassificationPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to None) &#x2014;
The number of top labels that will be returned by the pipeline. If the provided number is <code>None</code> or
higher than the number of labels available in the model configuration, it will default to the number of
labels.`,name:"top_k"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/audio_classification.py#L89",returnDescription:`
<ul>
<li><strong>label</strong> (<code>str</code>) \u2014 The label predicted.</li>
<li><strong>score</strong> (<code>float</code>) \u2014 The corresponding probability.</li>
</ul>
`,returnType:`
<p>A list of <code>dict</code> with the following keys</p>
`}}),Jr=new P({}),eo=new v({props:{name:"class transformers.AutomaticSpeechRecognitionPipeline",anchor:"transformers.AutomaticSpeechRecognitionPipeline",parameters:[{name:"feature_extractor",val:": typing.Union[ForwardRef('SequenceFeatureExtractor'), str]"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutomaticSpeechRecognitionPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor">SequenceFeatureExtractor</a>) &#x2014;
The feature extractor that will be used by the pipeline to encode waveform for the model.`,name:"feature_extractor"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.chunk_length_s",description:`<strong>chunk_length_s</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The input length for in each chunk. If <code>chunk_length_s = 0</code> then chunking is disabled (default). Only
available for CTC models, e.g. <a href="/docs/transformers/pr_15901/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>For more information on how to effectively use <code>chunk_length_s</code>, please have a look at the <a href="https://huggingface.co/blog/asr-chunking" rel="nofollow">ASR chunking
blog post</a>.</p>

					</div>`,name:"chunk_length_s"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.stride_length_s",description:`<strong>stride_length_s</strong> (<code>float</code>, <em>optional</em>, defaults to <code>chunk_length_s / 6</code>) &#x2014;
The length of stride on the left and right of each chunk. Used only with <code>chunk_length_s &gt; 0</code>. This enables
the model to <em>see</em> more context and infer letters better than without this context but the pipeline
discards the stride bits at the end to make the final reconstitution as perfect as possible.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>For more information on how to effectively use <code>stride_length_s</code>, please have a look at the <a href="https://huggingface.co/blog/asr-chunking" rel="nofollow">ASR chunking
blog post</a>.</p>

					</div>`,name:"stride_length_s"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed. If no framework is specified, will default to the one currently installed. If no framework is
specified and both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if
no model is provided.`,name:"framework"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.decoder",description:`<strong>decoder</strong> (<code>pyctcdecode.BeamSearchDecoderCTC</code>, <em>optional</em>) &#x2014;
<a href="https://github.com/kensho-technologies/pyctcdecode/blob/2fd33dc37c4111417e08d89ccd23d28e9b308d19/pyctcdecode/decoder.py#L180" rel="nofollow">PyCTCDecode&#x2019;s
BeamSearchDecoderCTC</a>
can be passed for language model boosted decoding. See <a href="/docs/transformers/pr_15901/en/model_doc/wav2vec2#transformers.Wav2Vec2ProcessorWithLM">Wav2Vec2ProcessorWithLM</a> for more information.`,name:"decoder"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/automatic_speech_recognition.py#L67"}}),to=new v({props:{name:"__call__",anchor:"transformers.AutomaticSpeechRecognitionPipeline.__call__",parameters:[{name:"inputs",val:": typing.Union[numpy.ndarray, bytes, str]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutomaticSpeechRecognitionPipeline.__call__.inputs",description:`<strong>inputs</strong> (<code>np.ndarray</code> or <code>bytes</code> or <code>str</code> or <code>dict</code>) &#x2014;
The inputs is either :<ul>
<li><code>str</code> that is the filename of the audio file, the file will be read at the correct sampling rate
to get the waveform using <em>ffmpeg</em>. This requires <em>ffmpeg</em> to be installed on the system.</li>
<li><code>bytes</code> it is supposed to be the content of an audio file and is interpreted by <em>ffmpeg</em> in the
same way.</li>
<li>(<code>np.ndarray</code> of shape (n, ) of type <code>np.float32</code> or <code>np.float64</code>)
Raw audio at the correct sampling rate (no further check will be done)</li>
<li><code>dict</code> form can be used to pass raw audio sampled at arbitrary <code>sampling_rate</code> and let this
pipeline do the resampling. The dict must be in the format <code>{&quot;sampling_rate&quot;: int, &quot;raw&quot;: np.array}</code> with optionally a <code>&quot;stride&quot;: (left: int, right: int)</code> than can ask the pipeline to
treat the first <code>left</code> samples and last <code>right</code> samples to be ignored in decoding (but used at
inference to provide more context to the model). Only use <code>stride</code> with CTC models.</li>
</ul>`,name:"inputs"},{anchor:"transformers.AutomaticSpeechRecognitionPipeline.__call__.return_timestamps",description:`<strong>return_timestamps</strong> (<em>optional</em>, <code>str</code>) &#x2014;
Only available for pure CTC models. If set to <code>&quot;char&quot;</code>, the pipeline will return <code>timestamps</code> along the
text for every character in the text. For instance if you get <code>[{&quot;text&quot;: &quot;h&quot;, &quot;timestamps&quot;: (0.5,0.6), {&quot;text&quot;: &quot;i&quot;, &quot;timestamps&quot;: (0.7, .9)}]</code>, then it means the model predicts that the letter &#x201C;h&#x201D; was
pronounced after <code>0.5</code> and before <code>0.6</code> seconds. If set to <code>&quot;word&quot;</code>, the pipeline will return
<code>timestamps</code> along the text for every word in the text. For instance if you get <code>[{&quot;text&quot;: &quot;hi &quot;, &quot;timestamps&quot;: (0.5,0.9), {&quot;text&quot;: &quot;there&quot;, &quot;timestamps&quot;: (1.0, .1.5)}]</code>, then it means the model
predicts that the word &#x201C;hi&#x201D; was pronounces before 0.5 and after 0.9 seconds.`,name:"return_timestamps"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/automatic_speech_recognition.py#L141",returnDescription:`
<p>A dictionary with the following keys:</p>
<ul>
<li><strong>text</strong> (<code>str</code> ) \u2014 The recognized text.</li>
<li><strong>chunks</strong> (<em>optional(, <code>List[Dict]</code>)
When using <code>return_timestamps</code>, the <code>chunks</code> will become a list containing all the various text
chunks identified by the model, </em>e.g.* <code>[&#123;"text": "hi ", "timestamps": (0.5,0.9), &#123;"text": "there", "timestamps": (1.0, 1.5)&#125;]</code>. The original full text can roughly be recovered by doing
<code>"".join(chunk["text"] for chunk in output["chunks"])</code>.</li>
</ul>
`,returnType:`
<p><code>Dict</code></p>
`}}),ro=new P({}),oo=new v({props:{name:"class transformers.Conversation",anchor:"transformers.Conversation",parameters:[{name:"text",val:": str = None"},{name:"conversation_id",val:": UUID = None"},{name:"past_user_inputs",val:" = None"},{name:"generated_responses",val:" = None"}],parametersDescription:[{anchor:"transformers.Conversation.text",description:`<strong>text</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The initial user input to start the conversation. If not provided, a user input needs to be provided
manually using the <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.Conversation.add_user_input">add_user_input()</a> method before the conversation can begin.`,name:"text"},{anchor:"transformers.Conversation.conversation_id",description:`<strong>conversation_id</strong> (<code>uuid.UUID</code>, <em>optional</em>) &#x2014;
Unique identifier for the conversation. If not provided, a random UUID4 id will be assigned to the
conversation.`,name:"conversation_id"},{anchor:"transformers.Conversation.past_user_inputs",description:`<strong>past_user_inputs</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Eventual past history of the conversation of the user. You don&#x2019;t need to pass it manually if you use the
pipeline interactively but if you want to recreate history you need to set both <code>past_user_inputs</code> and
<code>generated_responses</code> with equal length lists of strings`,name:"past_user_inputs"},{anchor:"transformers.Conversation.generated_responses",description:`<strong>generated_responses</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Eventual past history of the conversation of the model. You don&#x2019;t need to pass it manually if you use the
pipeline interactively but if you want to recreate history you need to set both <code>past_user_inputs</code> and
<code>generated_responses</code> with equal length lists of strings`,name:"generated_responses"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/conversational.py#L18"}}),so=new A({props:{code:`conversation = Conversation("Going to the movies tonight - any suggestions?")

# Steps usually performed by the model when generating a response:
# 1. Mark the user input as processed (moved to the history)
conversation.mark_processed()
# 2. Append a mode response
conversation.append_response("The Big lebowski.")

conversation.add_user_input("Is it good?")`,highlighted:`conversation = Conversation(<span class="hljs-string">&quot;Going to the movies tonight - any suggestions?&quot;</span>)

<span class="hljs-comment"># Steps usually performed by the model when generating a response:</span>
<span class="hljs-comment"># 1. Mark the user input as processed (moved to the history)</span>
conversation.mark_processed()
<span class="hljs-comment"># 2. Append a mode response</span>
conversation.append_response(<span class="hljs-string">&quot;The Big lebowski.&quot;</span>)

conversation.add_user_input(<span class="hljs-string">&quot;Is it good?&quot;</span>)`}}),ao=new v({props:{name:"add_user_input",anchor:"transformers.Conversation.add_user_input",parameters:[{name:"text",val:": str"},{name:"overwrite",val:": bool = False"}],parametersDescription:[{anchor:"transformers.Conversation.add_user_input.text",description:"<strong>text</strong> (<code>str</code>) &#x2014; The user input for the next conversation round.",name:"text"},{anchor:"transformers.Conversation.add_user_input.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not existing and unprocessed user input should be overwritten when this function is called.`,name:"overwrite"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/conversational.py#L82"}}),lo=new v({props:{name:"append_response",anchor:"transformers.Conversation.append_response",parameters:[{name:"response",val:": str"}],parametersDescription:[{anchor:"transformers.Conversation.append_response.response",description:"<strong>response</strong> (<code>str</code>) &#x2014; The model generated response.",name:"response"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/conversational.py#L115"}}),po=new v({props:{name:"iter_texts",anchor:"transformers.Conversation.iter_texts",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/conversational.py#L124"}}),co=new v({props:{name:"mark_processed",anchor:"transformers.Conversation.mark_processed",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/conversational.py#L106"}}),mo=new v({props:{name:"class transformers.ConversationalPipeline",anchor:"transformers.ConversationalPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConversationalPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ConversationalPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ConversationalPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ConversationalPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ConversationalPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ConversationalPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ConversationalPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ConversationalPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ConversationalPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.ConversationalPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"},{anchor:"transformers.ConversationalPipeline.min_length_for_response",description:`<strong>min_length_for_response</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
The minimum length (in number of tokens) for a response.`,name:"min_length_for_response"},{anchor:"transformers.ConversationalPipeline.minimum_tokens",description:`<strong>minimum_tokens</strong> (<code>int</code>, <em>optional</em>, defaults to 10) &#x2014;
The minimum length of tokens to leave for a response.`,name:"minimum_tokens"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/conversational.py#L163"}}),ho=new A({props:{code:`conversational_pipeline = pipeline("conversational")

conversation_1 = Conversation("Going to the movies tonight - any suggestions?")
conversation_2 = Conversation("What's the last book you have read?")

conversational_pipeline([conversation_1, conversation_2])

conversation_1.add_user_input("Is it an action movie?")
conversation_2.add_user_input("What is the genre of this book?")

conversational_pipeline([conversation_1, conversation_2])`,highlighted:`conversational_pipeline = pipeline(<span class="hljs-string">&quot;conversational&quot;</span>)

conversation_1 = Conversation(<span class="hljs-string">&quot;Going to the movies tonight - any suggestions?&quot;</span>)
conversation_2 = Conversation(<span class="hljs-string">&quot;What&#x27;s the last book you have read?&quot;</span>)

conversational_pipeline([conversation_1, conversation_2])

conversation_1.add_user_input(<span class="hljs-string">&quot;Is it an action movie?&quot;</span>)
conversation_2.add_user_input(<span class="hljs-string">&quot;What is the genre of this book?&quot;</span>)

conversational_pipeline([conversation_1, conversation_2])`}}),uo=new v({props:{name:"__call__",anchor:"transformers.ConversationalPipeline.__call__",parameters:[{name:"conversations",val:": typing.Union[transformers.pipelines.conversational.Conversation, typing.List[transformers.pipelines.conversational.Conversation]]"},{name:"num_workers",val:" = 0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConversationalPipeline.__call__.conversations",description:`<strong>conversations</strong> (a <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.Conversation">Conversation</a> or a list of <a href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.Conversation">Conversation</a>) &#x2014;
Conversations to generate responses for.`,name:"conversations"},{anchor:"transformers.ConversationalPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.
generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"clean_up_tokenization_spaces"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/conversational.py#L218",returnDescription:`
<p>Conversation(s) with updated generated responses for those
containing a new user input.</p>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.Conversation"
>Conversation</a> or a list of <a
  href="/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.Conversation"
>Conversation</a></p>
`}}),go=new P({}),_o=new v({props:{name:"class transformers.FeatureExtractionPipeline",anchor:"transformers.FeatureExtractionPipeline",parameters:[{name:"model",val:": typing.Union[ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')]"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils.PreTrainedTokenizer] = None"},{name:"feature_extractor",val:": typing.Optional[ForwardRef('SequenceFeatureExtractor')] = None"},{name:"modelcard",val:": typing.Optional[transformers.modelcard.ModelCard] = None"},{name:"framework",val:": typing.Optional[str] = None"},{name:"task",val:": str = ''"},{name:"args_parser",val:": ArgumentHandler = None"},{name:"device",val:": int = -1"},{name:"binary_output",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FeatureExtractionPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.FeatureExtractionPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.FeatureExtractionPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.FeatureExtractionPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.FeatureExtractionPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.FeatureExtractionPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.FeatureExtractionPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/feature_extraction.py#L7"}}),wo=new v({props:{name:"__call__",anchor:"transformers.FeatureExtractionPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FeatureExtractionPipeline.__call__.args",description:"<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014; One or several texts (or one list of texts) to get the features of.",name:"args"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/feature_extraction.py#L69",returnDescription:`
<p>The features computed by the model.</p>
`,returnType:`
<p>A nested list of <code>float</code></p>
`}}),ko=new P({}),To=new v({props:{name:"class transformers.FillMaskPipeline",anchor:"transformers.FillMaskPipeline",parameters:[{name:"model",val:": typing.Union[ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')]"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils.PreTrainedTokenizer] = None"},{name:"feature_extractor",val:": typing.Optional[ForwardRef('SequenceFeatureExtractor')] = None"},{name:"modelcard",val:": typing.Optional[transformers.modelcard.ModelCard] = None"},{name:"framework",val:": typing.Optional[str] = None"},{name:"task",val:": str = ''"},{name:"args_parser",val:": ArgumentHandler = None"},{name:"device",val:": int = -1"},{name:"binary_output",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FillMaskPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.FillMaskPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.FillMaskPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.FillMaskPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.FillMaskPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.FillMaskPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.FillMaskPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.FillMaskPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.FillMaskPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.FillMaskPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"},{anchor:"transformers.FillMaskPipeline.top_k",description:`<strong>top_k</strong> (<code>int</code>, defaults to 5) &#x2014;
The number of predictions to return.`,name:"top_k"},{anchor:"transformers.FillMaskPipeline.targets",description:`<strong>targets</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
When passed, the model will limit the scores to the passed targets instead of looking up in the whole
vocab. If the provided targets are not in the model vocab, they will be tokenized and the first resulting
token will be used (with a warning, and that might be slower).`,name:"targets"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/fill_mask.py#L32"}}),Tn=new T6({props:{$$slots:{default:[C6]},$$scope:{ctx:Ca}}}),xo=new v({props:{name:"__call__",anchor:"transformers.FillMaskPipeline.__call__",parameters:[{name:"inputs",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FillMaskPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several texts (or one list of prompts) with masked tokens.`,name:"args"},{anchor:"transformers.FillMaskPipeline.__call__.targets",description:`<strong>targets</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
When passed, the model will limit the scores to the passed targets instead of looking up in the whole
vocab. If the provided targets are not in the model vocab, they will be tokenized and the first
resulting token will be used (with a warning, and that might be slower).`,name:"targets"},{anchor:"transformers.FillMaskPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When passed, overrides the number of predictions to return.`,name:"top_k"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/fill_mask.py#L203",returnDescription:`
<p>Each result comes as list of dictionaries with the following keys:</p>
<ul>
<li><strong>sequence</strong> (<code>str</code>) \u2014 The corresponding input with the mask token prediction.</li>
<li><strong>score</strong> (<code>float</code>) \u2014 The corresponding probability.</li>
<li><strong>token</strong> (<code>int</code>) \u2014 The predicted token id (to replace the masked one).</li>
<li><strong>token</strong> (<code>str</code>) \u2014 The predicted token (to replace the masked one).</li>
</ul>
`,returnType:`
<p>A list or a list of list of <code>dict</code></p>
`}}),$o=new P({}),Eo=new v({props:{name:"class transformers.ImageClassificationPipeline",anchor:"transformers.ImageClassificationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ImageClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ImageClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ImageClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ImageClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ImageClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ImageClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ImageClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ImageClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.ImageClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/image_classification.py#L31"}}),zo=new v({props:{name:"__call__",anchor:"transformers.ImageClassificationPipeline.__call__",parameters:[{name:"images",val:": typing.Union[str, typing.List[str], ForwardRef('Image.Image'), typing.List[ForwardRef('Image.Image')]]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageClassificationPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a http link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images, which must then be passed as a string.
Images in a batch must all be in the same format: all as http links, all as local paths, or all as PIL
images.`,name:"images"},{anchor:"transformers.ImageClassificationPipeline.__call__.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 5) &#x2014;
The number of top labels that will be returned by the pipeline. If the provided number is higher than
the number of labels available in the model configuration, it will default to the number of labels.`,name:"top_k"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/image_classification.py#L58",returnDescription:`
<p>A dictionary or a list of dictionaries containing result. If the input is a single image, will return a
dictionary, if the input is a list of several images, will return a list of dictionaries corresponding to
the images.</p>
<p>The dictionaries contain the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) \u2014 The label identified by the model.</li>
<li><strong>score</strong> (<code>int</code>) \u2014 The score attributed by the model for that label.</li>
</ul>
`}}),Do=new P({}),Io=new v({props:{name:"class transformers.ImageSegmentationPipeline",anchor:"transformers.ImageSegmentationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageSegmentationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ImageSegmentationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ImageSegmentationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ImageSegmentationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ImageSegmentationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ImageSegmentationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ImageSegmentationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ImageSegmentationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ImageSegmentationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.ImageSegmentationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/image_segmentation.py#L33"}}),Fo=new v({props:{name:"__call__",anchor:"transformers.ImageSegmentationPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ImageSegmentationPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing an HTTP(S) link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images. Images in a batch must all be in the
same format: all as HTTP(S) links, all as local paths, or all as PIL images.`,name:"images"},{anchor:"transformers.ImageSegmentationPipeline.__call__.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The probability necessary to make a prediction.`,name:"threshold"},{anchor:"transformers.ImageSegmentationPipeline.__call__.mask_threshold",description:`<strong>mask_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.5) &#x2014;
Threshold to use when turning the predicted masks into binary values.`,name:"mask_threshold"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/image_segmentation.py#L68",returnDescription:`
<p>A dictionary or a list of dictionaries containing the result. If the input is a single image, will return a
list of dictionaries, if the input is a list of several images, will return a list of list of dictionaries
corresponding to each image.</p>
<p>The dictionaries contain the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) \u2014 The class label identified by the model.</li>
<li><strong>mask</strong> (<code>PIL.Image</code>) \u2014 Pil Image with size (heigth, width) of the original image. Pixel values in the
image are in the range 0-255. 0 means the pixel is <em>not</em> part of the <em>label</em>, 255 means it definitely is.</li>
<li><strong>score</strong> (<em>optional</em> <code>float</code>) \u2014 Optionally, when the model is capable of estimating a confidence of the
\u201Cobject\u201D described by the label and the mask.</li>
</ul>
`}}),Lo=new P({}),Uo=new v({props:{name:"class transformers.TokenClassificationPipeline",anchor:"transformers.TokenClassificationPipeline",parameters:[{name:"args_parser",val:" = <transformers.pipelines.token_classification.TokenClassificationArgumentHandler object at 0x7f74399705b0>"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TokenClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TokenClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TokenClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TokenClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TokenClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TokenClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TokenClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TokenClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.TokenClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"},{anchor:"transformers.TokenClassificationPipeline.ignore_labels",description:`<strong>ignore_labels</strong> (<code>List[str]</code>, defaults to <code>[&quot;O&quot;]</code>) &#x2014;
A list of labels to ignore.`,name:"ignore_labels"},{anchor:"transformers.TokenClassificationPipeline.grouped_entities",description:`<strong>grouped_entities</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
DEPRECATED, use <code>aggregation_strategy</code> instead. Whether or not to group the tokens corresponding to the
same entity together in the predictions or not.`,name:"grouped_entities"},{anchor:"transformers.TokenClassificationPipeline.aggregation_strategy",description:`<strong>aggregation_strategy</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;none&quot;</code>) &#x2014;
The strategy to fuse (or not) tokens based on the model prediction.</p>
<ul>
<li>&#x201C;none&#x201D; : Will simply not do any aggregation and simply return raw results from the model</li>
<li>&#x201C;simple&#x201D; : Will attempt to group entities following the default schema. (A, B-TAG), (B, I-TAG), (C,
I-TAG), (D, B-TAG2) (E, B-TAG2) will end up being [{&#x201C;word&#x201D;: ABC, &#x201C;entity&#x201D;: &#x201C;TAG&#x201D;}, {&#x201C;word&#x201D;: &#x201C;D&#x201D;,
&#x201C;entity&#x201D;: &#x201C;TAG2&#x201D;}, {&#x201C;word&#x201D;: &#x201C;E&#x201D;, &#x201C;entity&#x201D;: &#x201C;TAG2&#x201D;}] Notice that two consecutive B tags will end up as
different entities. On word based languages, we might end up splitting words undesirably : Imagine
Microsoft being tagged as [{&#x201C;word&#x201D;: &#x201C;Micro&#x201D;, &#x201C;entity&#x201D;: &#x201C;ENTERPRISE&#x201D;}, {&#x201C;word&#x201D;: &#x201C;soft&#x201D;, &#x201C;entity&#x201D;:
&#x201C;NAME&#x201D;}]. Look for FIRST, MAX, AVERAGE for ways to mitigate that and disambiguate words (on languages
that support that meaning, which is basically tokens separated by a space). These mitigations will
only work on real words, &#x201C;New york&#x201D; might still be tagged with two different entities.</li>
<li>&#x201C;first&#x201D; : (works only on word based models) Will use the <code>SIMPLE</code> strategy except that words, cannot
end up with different tags. Words will simply use the tag of the first token of the word when there
is ambiguity.</li>
<li>&#x201C;average&#x201D; : (works only on word based models) Will use the <code>SIMPLE</code> strategy except that words,
cannot end up with different tags. scores will be averaged first across tokens, and then the maximum
label is applied.</li>
<li>&#x201C;max&#x201D; : (works only on word based models) Will use the <code>SIMPLE</code> strategy except that words, cannot
end up with different tags. Word entity will simply be the token with the maximum score.</li>
</ul>`,name:"aggregation_strategy"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L86"}}),Oo=new v({props:{name:"aggregate_words",anchor:"transformers.TokenClassificationPipeline.aggregate_words",parameters:[{name:"entities",val:": typing.List[dict]"},{name:"aggregation_strategy",val:": AggregationStrategy"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L365"}}),Ro=new v({props:{name:"gather_pre_entities",anchor:"transformers.TokenClassificationPipeline.gather_pre_entities",parameters:[{name:"sentence",val:": str"},{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"offset_mapping",val:": typing.Union[typing.List[typing.Tuple[int, int]], NoneType]"},{name:"special_tokens_mask",val:": ndarray"},{name:"aggregation_strategy",val:": AggregationStrategy"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L251"}}),Wo=new v({props:{name:"group_entities",anchor:"transformers.TokenClassificationPipeline.group_entities",parameters:[{name:"entities",val:": typing.List[dict]"}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.group_entities.entities",description:"<strong>entities</strong> (<code>dict</code>) &#x2014; The entities predicted by the pipeline.",name:"entities"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L427"}}),Ho=new v({props:{name:"group_sub_entities",anchor:"transformers.TokenClassificationPipeline.group_sub_entities",parameters:[{name:"entities",val:": typing.List[dict]"}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.group_sub_entities.entities",description:"<strong>entities</strong> (<code>dict</code>) &#x2014; The entities predicted by the pipeline.",name:"entities"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L392"}}),Qo=new P({}),Vo=new v({props:{name:"class transformers.ObjectDetectionPipeline",anchor:"transformers.ObjectDetectionPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ObjectDetectionPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ObjectDetectionPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ObjectDetectionPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ObjectDetectionPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ObjectDetectionPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ObjectDetectionPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ObjectDetectionPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ObjectDetectionPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ObjectDetectionPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.ObjectDetectionPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/object_detection.py#L24"}}),Xo=new v({props:{name:"__call__",anchor:"transformers.ObjectDetectionPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ObjectDetectionPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing an HTTP(S) link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>
<p>The pipeline accepts either a single image or a batch of images. Images in a batch must all be in the
same format: all as HTTP(S) links, all as local paths, or all as PIL images.`,name:"images"},{anchor:"transformers.ObjectDetectionPipeline.__call__.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The probability necessary to make a prediction.`,name:"threshold"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/object_detection.py#L50",returnDescription:`
<p>A list of dictionaries or a list of list of dictionaries containing the result. If the input is a single
image, will return a list of dictionaries, if the input is a list of several images, will return a list of
list of dictionaries corresponding to each image.</p>
<p>The dictionaries contain the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) \u2014 The class label identified by the model.</li>
<li><strong>score</strong> (<code>float</code>) \u2014 The score attributed by the model for that label.</li>
<li><strong>box</strong> (<code>List[Dict[str, int]]</code>) \u2014 The bounding box of detected object in image\u2019s original size.</li>
</ul>
`}}),Ko=new P({}),Jo=new v({props:{name:"class transformers.QuestionAnsweringPipeline",anchor:"transformers.QuestionAnsweringPipeline",parameters:[{name:"model",val:": typing.Union[ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')]"},{name:"tokenizer",val:": PreTrainedTokenizer"},{name:"modelcard",val:": typing.Optional[transformers.modelcard.ModelCard] = None"},{name:"framework",val:": typing.Optional[str] = None"},{name:"device",val:": int = -1"},{name:"task",val:": str = ''"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.QuestionAnsweringPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.QuestionAnsweringPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.QuestionAnsweringPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.QuestionAnsweringPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.QuestionAnsweringPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.QuestionAnsweringPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.QuestionAnsweringPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.QuestionAnsweringPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.QuestionAnsweringPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.QuestionAnsweringPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/question_answering.py#L101"}}),ns=new v({props:{name:"__call__",anchor:"transformers.QuestionAnsweringPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.QuestionAnsweringPipeline.__call__.args",description:`<strong>args</strong> (<code>SquadExample</code> or a list of <code>SquadExample</code>) &#x2014;
One or several <code>SquadExample</code> containing the question and context.`,name:"args"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.X",description:`<strong>X</strong> (<code>SquadExample</code> or a list of <code>SquadExample</code>, <em>optional</em>) &#x2014;
One or several <code>SquadExample</code> containing the question and context (will be treated the same way as if
passed as the first positional argument).`,name:"X"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.data",description:`<strong>data</strong> (<code>SquadExample</code> or a list of <code>SquadExample</code>, <em>optional</em>) &#x2014;
One or several <code>SquadExample</code> containing the question and context (will be treated the same way as if
passed as the first positional argument).`,name:"data"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.question",description:`<strong>question</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several question(s) (must be used in conjunction with the <code>context</code> argument).`,name:"question"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.context",description:`<strong>context</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several context(s) associated with the question(s) (must be used in conjunction with the
<code>question</code> argument).`,name:"context"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.topk",description:`<strong>topk</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of answers to return (will be chosen by order of likelihood). Note that we return less than
topk answers if there are not enough options available within the context.`,name:"topk"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.doc_stride",description:`<strong>doc_stride</strong> (<code>int</code>, <em>optional</em>, defaults to 128) &#x2014;
If the context is too long to fit with the question for the model, it will be split in several chunks
with some overlap. This argument controls the size of that overlap.`,name:"doc_stride"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.max_answer_len",description:`<strong>max_answer_len</strong> (<code>int</code>, <em>optional</em>, defaults to 15) &#x2014;
The maximum length of predicted answers (e.g., only answers with a shorter length are considered).`,name:"max_answer_len"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.max_seq_len",description:`<strong>max_seq_len</strong> (<code>int</code>, <em>optional</em>, defaults to 384) &#x2014;
The maximum length of the total sentence (context + question) after tokenization. The context will be
split in several chunks (using <code>doc_stride</code>) if needed.`,name:"max_seq_len"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.max_question_len",description:`<strong>max_question_len</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
The maximum length of the question after tokenization. It will be truncated if needed.`,name:"max_question_len"},{anchor:"transformers.QuestionAnsweringPipeline.__call__.handle_impossible_answer",description:`<strong>handle_impossible_answer</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not we accept impossible as an answer.`,name:"handle_impossible_answer"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/question_answering.py#L204",returnDescription:`
<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>score</strong> (<code>float</code>) \u2014 The probability associated to the answer.</li>
<li><strong>start</strong> (<code>int</code>) \u2014 The character start index of the answer (in the tokenized version of the input).</li>
<li><strong>end</strong> (<code>int</code>) \u2014 The character end index of the answer (in the tokenized version of the input).</li>
<li><strong>answer</strong> (<code>str</code>) \u2014 The answer to the question.</li>
</ul>
`,returnType:`
<p>A <code>dict</code> or a list of <code>dict</code></p>
`}}),rs=new v({props:{name:"create_sample",anchor:"transformers.QuestionAnsweringPipeline.create_sample",parameters:[{name:"question",val:": typing.Union[str, typing.List[str]]"},{name:"context",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"transformers.QuestionAnsweringPipeline.create_sample.question",description:"<strong>question</strong> (<code>str</code> or <code>List[str]</code>) &#x2014; The question(s) asked.",name:"question"},{anchor:"transformers.QuestionAnsweringPipeline.create_sample.context",description:"<strong>context</strong> (<code>str</code> or <code>List[str]</code>) &#x2014; The context(s) in which we will look for the answer.",name:"context"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/question_answering.py#L142",returnDescription:`
<p>The corresponding <code>SquadExample</code> grouping question and context.</p>
`,returnType:`
<p>One or a list of <code>SquadExample</code></p>
`}}),os=new v({props:{name:"decode",anchor:"transformers.QuestionAnsweringPipeline.decode",parameters:[{name:"start",val:": ndarray"},{name:"end",val:": ndarray"},{name:"topk",val:": int"},{name:"max_answer_len",val:": int"},{name:"undesired_tokens",val:": ndarray"}],parametersDescription:[{anchor:"transformers.QuestionAnsweringPipeline.decode.start",description:"<strong>start</strong> (<code>np.ndarray</code>) &#x2014; Individual start probabilities for each token.",name:"start"},{anchor:"transformers.QuestionAnsweringPipeline.decode.end",description:"<strong>end</strong> (<code>np.ndarray</code>) &#x2014; Individual end probabilities for each token.",name:"end"},{anchor:"transformers.QuestionAnsweringPipeline.decode.topk",description:"<strong>topk</strong> (<code>int</code>) &#x2014; Indicates how many possible answer span(s) to extract from the model output.",name:"topk"},{anchor:"transformers.QuestionAnsweringPipeline.decode.max_answer_len",description:"<strong>max_answer_len</strong> (<code>int</code>) &#x2014; Maximum size of the answer to extract from the model&#x2019;s output.",name:"max_answer_len"},{anchor:"transformers.QuestionAnsweringPipeline.decode.undesired_tokens",description:"<strong>undesired_tokens</strong> (<code>np.ndarray</code>) &#x2014; Mask determining tokens that can be part of the answer",name:"undesired_tokens"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/question_answering.py#L480"}}),as=new v({props:{name:"span_to_answer",anchor:"transformers.QuestionAnsweringPipeline.span_to_answer",parameters:[{name:"text",val:": str"},{name:"start",val:": int"},{name:"end",val:": int"}],parametersDescription:[{anchor:"transformers.QuestionAnsweringPipeline.span_to_answer.text",description:"<strong>text</strong> (<code>str</code>) &#x2014; The actual context to extract the answer from.",name:"text"},{anchor:"transformers.QuestionAnsweringPipeline.span_to_answer.start",description:"<strong>start</strong> (<code>int</code>) &#x2014; The answer starting token index.",name:"start"},{anchor:"transformers.QuestionAnsweringPipeline.span_to_answer.end",description:"<strong>end</strong> (<code>int</code>) &#x2014; The answer end token index.",name:"end"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/question_answering.py#L529",returnDescription:`
<p>str, \u2018start\u2019: int, \u2018end\u2019: int}\`</p>
`,returnType:`
<p>Dictionary like \`{\u2018answer\u2019</p>
`}}),is=new P({}),ls=new v({props:{name:"class transformers.SummarizationPipeline",anchor:"transformers.SummarizationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SummarizationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.SummarizationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.SummarizationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.SummarizationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.SummarizationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.SummarizationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.SummarizationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.SummarizationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.SummarizationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.SummarizationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text2text_generation.py#L185"}}),ps=new A({props:{code:`# use bart in pytorch
summarizer = pipeline("summarization")
summarizer("An apple a day, keeps the doctor away", min_length=5, max_length=20)

# use t5 in tf
summarizer = pipeline("summarization", model="t5-base", tokenizer="t5-base", framework="tf")
summarizer("An apple a day, keeps the doctor away", min_length=5, max_length=20)`,highlighted:`<span class="hljs-comment"># use bart in pytorch</span>
summarizer = pipeline(<span class="hljs-string">&quot;summarization&quot;</span>)
summarizer(<span class="hljs-string">&quot;An apple a day, keeps the doctor away&quot;</span>, min_length=<span class="hljs-number">5</span>, max_length=<span class="hljs-number">20</span>)

<span class="hljs-comment"># use t5 in tf</span>
summarizer = pipeline(<span class="hljs-string">&quot;summarization&quot;</span>, model=<span class="hljs-string">&quot;t5-base&quot;</span>, tokenizer=<span class="hljs-string">&quot;t5-base&quot;</span>, framework=<span class="hljs-string">&quot;tf&quot;</span>)
summarizer(<span class="hljs-string">&quot;An apple a day, keeps the doctor away&quot;</span>, min_length=<span class="hljs-number">5</span>, max_length=<span class="hljs-number">20</span>)`}}),cs=new v({props:{name:"__call__",anchor:"transformers.SummarizationPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SummarizationPipeline.__call__.documents",description:`<strong>documents</strong> (<em>str</em> or <code>List[str]</code>) &#x2014;
One or several articles (or one list of articles) to summarize.`,name:"documents"},{anchor:"transformers.SummarizationPipeline.__call__.return_text",description:`<strong>return_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to include the decoded texts in the outputs`,name:"return_text"},{anchor:"transformers.SummarizationPipeline.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to include the tensors of predictions (as token indices) in the outputs.`,name:"return_tensors"},{anchor:"transformers.SummarizationPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.
generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"clean_up_tokenization_spaces"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text2text_generation.py#L211",returnDescription:`
<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>summary_text</strong> (<code>str</code>, present when <code>return_text=True</code>) \u2014 The summary of the corresponding input.</li>
<li><strong>summary_token_ids</strong> (<code>torch.Tensor</code> or <code>tf.Tensor</code>, present when <code>return_tensors=True</code>) \u2014 The token
ids of the summary.</li>
</ul>
`,returnType:`
<p>A list or a list of list of <code>dict</code></p>
`}}),ms=new P({}),fs=new v({props:{name:"class transformers.TableQuestionAnsweringPipeline",anchor:"transformers.TableQuestionAnsweringPipeline",parameters:[{name:"args_parser",val:" = <transformers.pipelines.table_question_answering.TableQuestionAnsweringArgumentHandler object at 0x7f743994dd30>"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TableQuestionAnsweringPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TableQuestionAnsweringPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TableQuestionAnsweringPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TableQuestionAnsweringPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TableQuestionAnsweringPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TableQuestionAnsweringPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TableQuestionAnsweringPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TableQuestionAnsweringPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TableQuestionAnsweringPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.TableQuestionAnsweringPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/table_question_answering.py#L83"}}),_s=new v({props:{name:"__call__",anchor:"transformers.TableQuestionAnsweringPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.table",description:`<strong>table</strong> (<code>pd.DataFrame</code> or <code>Dict</code>) &#x2014;
Pandas DataFrame or dictionary that will be converted to a DataFrame containing all the table values.
See above for an example of dictionary.`,name:"table"},{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.query",description:`<strong>query</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
Query or list of queries that will be sent to the model alongside the table.`,name:"query"},{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.sequential",description:`<strong>sequential</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to do inference sequentially or as a batch. Batching is faster, but models like SQA require the
inference to be done sequentially to extract relations within sequences, given their conversational
nature.`,name:"sequential"},{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.padding",description:`<strong>padding</strong> (<code>bool</code>, <code>str</code> or <a href="/docs/transformers/pr_15901/en/internal/file_utils#transformers.utils.PaddingStrategy">PaddingStrategy</a>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Activates and controls padding. Accepts the following values:</p>
<ul>
<li><code>True</code> or <code>&apos;longest&apos;</code>: Pad to the longest sequence in the batch (or no padding if only a single
sequence if provided).</li>
<li><code>&apos;max_length&apos;</code>: Pad to a maximum length specified with the argument <code>max_length</code> or to the maximum
acceptable input length for the model if that argument is not provided.</li>
<li><code>False</code> or <code>&apos;do_not_pad&apos;</code> (default): No padding (i.e., can output a batch with sequences of different
lengths).</li>
</ul>`,name:"padding"},{anchor:"transformers.TableQuestionAnsweringPipeline.__call__.truncation",description:`<strong>truncation</strong> (<code>bool</code>, <code>str</code> or <code>TapasTruncationStrategy</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Activates and controls truncation. Accepts the following values:</p>
<ul>
<li><code>True</code> or <code>&apos;drop_rows_to_fit&apos;</code>: Truncate to a maximum length specified with the argument <code>max_length</code>
or to the maximum acceptable input length for the model if that argument is not provided. This will
truncate row by row, removing rows from the table.</li>
<li><code>False</code> or <code>&apos;do_not_truncate&apos;</code> (default): No truncation (i.e., can output batch with sequence lengths
greater than the model maximum admissible input size).</li>
</ul>`,name:"truncation"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/table_question_answering.py#L245",returnDescription:`
<p>Each result is a dictionary with the following
keys:</p>
<ul>
<li><strong>answer</strong> (<code>str</code>) \u2014 The answer of the query given the table. If there is an aggregator, the answer will
be preceded by <code>AGGREGATOR &gt;</code>.</li>
<li><strong>coordinates</strong> (<code>List[Tuple[int, int]]</code>) \u2014 Coordinates of the cells of the answers.</li>
<li><strong>cells</strong> (<code>List[str]</code>) \u2014 List of strings made up of the answer cell values.</li>
<li><strong>aggregator</strong> (<code>str</code>) \u2014 If the model has an aggregator, this returns the aggregator.</li>
</ul>
`,returnType:`
<p>A dictionary or a list of dictionaries containing results</p>
`}}),vs=new A({props:{code:`data = {
    "actors": ["brad pitt", "leonardo di caprio", "george clooney"],
    "age": ["56", "45", "59"],
    "number of movies": ["87", "53", "69"],
    "date of birth": ["7 february 1967", "10 june 1996", "28 november 1967"],
}`,highlighted:`data = {
    <span class="hljs-string">&quot;actors&quot;</span>: [<span class="hljs-string">&quot;brad pitt&quot;</span>, <span class="hljs-string">&quot;leonardo di caprio&quot;</span>, <span class="hljs-string">&quot;george clooney&quot;</span>],
    <span class="hljs-string">&quot;age&quot;</span>: [<span class="hljs-string">&quot;56&quot;</span>, <span class="hljs-string">&quot;45&quot;</span>, <span class="hljs-string">&quot;59&quot;</span>],
    <span class="hljs-string">&quot;number of movies&quot;</span>: [<span class="hljs-string">&quot;87&quot;</span>, <span class="hljs-string">&quot;53&quot;</span>, <span class="hljs-string">&quot;69&quot;</span>],
    <span class="hljs-string">&quot;date of birth&quot;</span>: [<span class="hljs-string">&quot;7 february 1967&quot;</span>, <span class="hljs-string">&quot;10 june 1996&quot;</span>, <span class="hljs-string">&quot;28 november 1967&quot;</span>],
}`}}),ws=new A({props:{code:`import pandas as pd

table = pd.DataFrame.from_dict(data)`,highlighted:`<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd

table = pd.DataFrame.from_dict(data)`}}),ks=new P({}),Ts=new v({props:{name:"class transformers.TextClassificationPipeline",anchor:"transformers.TextClassificationPipeline",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TextClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TextClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TextClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TextClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TextClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TextClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TextClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TextClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TextClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.TextClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"},{anchor:"transformers.TextClassificationPipeline.return_all_scores",description:`<strong>return_all_scores</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to return all prediction scores or just the one of the predicted class.`,name:"return_all_scores"},{anchor:"transformers.TextClassificationPipeline.function_to_apply",description:`<strong>function_to_apply</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;default&quot;</code>) &#x2014;
The function to apply to the model outputs in order to retrieve the scores. Accepts four different values:</p>
<ul>
<li><code>&quot;default&quot;</code>: if the model has a single label, will apply the sigmoid function on the output. If the model
has several labels, will apply the softmax function on the output.</li>
<li><code>&quot;sigmoid&quot;</code>: Applies the sigmoid function on the output.</li>
<li><code>&quot;softmax&quot;</code>: Applies the softmax function on the output.</li>
<li><code>&quot;none&quot;</code>: Does not apply any function on the output.</li>
</ul>`,name:"function_to_apply"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text_classification.py#L47"}}),$s=new v({props:{name:"__call__",anchor:"transformers.TextClassificationPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TextClassificationPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several texts (or one list of prompts) to classify.`,name:"args"},{anchor:"transformers.TextClassificationPipeline.__call__.return_all_scores",description:`<strong>return_all_scores</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to return scores for all labels.`,name:"return_all_scores"},{anchor:"transformers.TextClassificationPipeline.__call__.function_to_apply",description:`<strong>function_to_apply</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;default&quot;</code>) &#x2014;
The function to apply to the model outputs in order to retrieve the scores. Accepts four different
values:</p>
<p>If this argument is not specified, then it will apply the following functions according to the number
of labels:</p>
<ul>
<li>If the model has a single label, will apply the sigmoid function on the output.</li>
<li>If the model has several labels, will apply the softmax function on the output.</li>
</ul>
<p>Possible values are:</p>
<ul>
<li><code>&quot;sigmoid&quot;</code>: Applies the sigmoid function on the output.</li>
<li><code>&quot;softmax&quot;</code>: Applies the softmax function on the output.</li>
<li><code>&quot;none&quot;</code>: Does not apply any function on the output.</li>
</ul>`,name:"function_to_apply"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text_classification.py#L92",returnDescription:`
<p>Each result comes as list of dictionaries with the following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) \u2014 The label predicted.</li>
<li><strong>score</strong> (<code>float</code>) \u2014 The corresponding probability.</li>
</ul>
<p>If <code>self.return_all_scores=True</code>, one such dictionary is returned per label.</p>
`,returnType:`
<p>A list or a list of list of <code>dict</code></p>
`}}),Es=new P({}),qs=new v({props:{name:"class transformers.TextGenerationPipeline",anchor:"transformers.TextGenerationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TextGenerationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TextGenerationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TextGenerationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TextGenerationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TextGenerationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TextGenerationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TextGenerationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TextGenerationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TextGenerationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.TextGenerationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text_generation.py#L20"}}),Ds=new v({props:{name:"__call__",anchor:"transformers.TextGenerationPipeline.__call__",parameters:[{name:"text_inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TextGenerationPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several prompts (or one list of prompts) to complete.`,name:"args"},{anchor:"transformers.TextGenerationPipeline.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to include the tensors of predictions (as token indices) in the outputs.`,name:"return_tensors"},{anchor:"transformers.TextGenerationPipeline.__call__.return_text",description:`<strong>return_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to include the decoded texts in the outputs.`,name:"return_text"},{anchor:"transformers.TextGenerationPipeline.__call__.return_full_text",description:`<strong>return_full_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If set to <code>False</code> only added text is returned, otherwise the full text is returned Only meaningful if
<em>return_text</em> is set to True.`,name:"return_full_text"},{anchor:"transformers.TextGenerationPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.TextGenerationPipeline.__call__.prefix",description:`<strong>prefix</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Prefix added to prompt.`,name:"prefix"},{anchor:"transformers.TextGenerationPipeline.__call__.handle_long_generation",description:`<strong>handle_long_generation</strong> (<code>str</code>, <em>optional</em>) &#x2014;
By default, this pipelines does not handle long generation (ones that exceed in one form or the other
the model maximum length). There is no perfect way to adress this (more info
:<a href="https://github.com/huggingface/transformers/issues/14033#issuecomment-948385227" rel="nofollow">https://github.com/huggingface/transformers/issues/14033#issuecomment-948385227</a>). This provides common
strategies to work around that problem depending on your use case.</p>
<ul>
<li><code>None</code> : default strategy where nothing in particular happens</li>
<li><code>&quot;hole&quot;</code>: Truncates left of input, and leaves a gap wide enough to let generation happen (might
truncate a lot of the prompt and not suitable when generation exceed the model capacity)</li>
</ul>
<p>generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"handle_long_generation"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text_generation.py#L136",returnDescription:`
<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>generated_text</strong> (<code>str</code>, present when <code>return_text=True</code>) \u2014 The generated text.</li>
<li><strong>generated_token_ids</strong> (<code>torch.Tensor</code> or <code>tf.Tensor</code>, present when <code>return_tensors=True</code>) \u2014 The token
ids of the generated text.</li>
</ul>
`,returnType:`
<p>A list or a list of list of <code>dict</code></p>
`}}),Is=new P({}),js=new v({props:{name:"class transformers.Text2TextGenerationPipeline",anchor:"transformers.Text2TextGenerationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Text2TextGenerationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.Text2TextGenerationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.Text2TextGenerationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.Text2TextGenerationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.Text2TextGenerationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.Text2TextGenerationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.Text2TextGenerationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.Text2TextGenerationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.Text2TextGenerationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.Text2TextGenerationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text2text_generation.py#L25"}}),Fs=new A({props:{code:`text2text_generator = pipeline("text2text-generation")
text2text_generator("question: What is 42 ? context: 42 is the answer to life, the universe and everything")`,highlighted:`text2text_generator = pipeline(<span class="hljs-string">&quot;text2text-generation&quot;</span>)
text2text_generator(<span class="hljs-string">&quot;question: What is 42 ? context: 42 is the answer to life, the universe and everything&quot;</span>)`}}),Ls=new v({props:{name:"__call__",anchor:"transformers.Text2TextGenerationPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Text2TextGenerationPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
Input text for the encoder.`,name:"args"},{anchor:"transformers.Text2TextGenerationPipeline.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to include the tensors of predictions (as token indices) in the outputs.`,name:"return_tensors"},{anchor:"transformers.Text2TextGenerationPipeline.__call__.return_text",description:`<strong>return_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to include the decoded texts in the outputs.`,name:"return_text"},{anchor:"transformers.Text2TextGenerationPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.Text2TextGenerationPipeline.__call__.truncation",description:`<strong>truncation</strong> (<code>TruncationStrategy</code>, <em>optional</em>, defaults to <code>TruncationStrategy.DO_NOT_TRUNCATE</code>) &#x2014;
The truncation strategy for the tokenization within the pipeline. <code>TruncationStrategy.DO_NOT_TRUNCATE</code>
(default) will never truncate, but it is sometimes desirable to truncate the input to fit the model&#x2019;s
max_length instead of throwing an error down the line.
generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"truncation"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text2text_generation.py#L108",returnDescription:`
<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>generated_text</strong> (<code>str</code>, present when <code>return_text=True</code>) \u2014 The generated text.</li>
<li><strong>generated_token_ids</strong> (<code>torch.Tensor</code> or <code>tf.Tensor</code>, present when <code>return_tensors=True</code>) \u2014 The token
ids of the generated text.</li>
</ul>
`,returnType:`
<p>A list or a list of list of <code>dict</code></p>
`}}),Us=new v({props:{name:"check_inputs",anchor:"transformers.Text2TextGenerationPipeline.check_inputs",parameters:[{name:"input_length",val:": int"},{name:"min_length",val:": int"},{name:"max_length",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text2text_generation.py#L81"}}),Gs=new P({}),Ns=new v({props:{name:"class transformers.TokenClassificationPipeline",anchor:"transformers.TokenClassificationPipeline",parameters:[{name:"args_parser",val:" = <transformers.pipelines.token_classification.TokenClassificationArgumentHandler object at 0x7f74399705b0>"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TokenClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TokenClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TokenClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TokenClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TokenClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TokenClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TokenClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TokenClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.TokenClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"},{anchor:"transformers.TokenClassificationPipeline.ignore_labels",description:`<strong>ignore_labels</strong> (<code>List[str]</code>, defaults to <code>[&quot;O&quot;]</code>) &#x2014;
A list of labels to ignore.`,name:"ignore_labels"},{anchor:"transformers.TokenClassificationPipeline.grouped_entities",description:`<strong>grouped_entities</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
DEPRECATED, use <code>aggregation_strategy</code> instead. Whether or not to group the tokens corresponding to the
same entity together in the predictions or not.`,name:"grouped_entities"},{anchor:"transformers.TokenClassificationPipeline.aggregation_strategy",description:`<strong>aggregation_strategy</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;none&quot;</code>) &#x2014;
The strategy to fuse (or not) tokens based on the model prediction.</p>
<ul>
<li>&#x201C;none&#x201D; : Will simply not do any aggregation and simply return raw results from the model</li>
<li>&#x201C;simple&#x201D; : Will attempt to group entities following the default schema. (A, B-TAG), (B, I-TAG), (C,
I-TAG), (D, B-TAG2) (E, B-TAG2) will end up being [{&#x201C;word&#x201D;: ABC, &#x201C;entity&#x201D;: &#x201C;TAG&#x201D;}, {&#x201C;word&#x201D;: &#x201C;D&#x201D;,
&#x201C;entity&#x201D;: &#x201C;TAG2&#x201D;}, {&#x201C;word&#x201D;: &#x201C;E&#x201D;, &#x201C;entity&#x201D;: &#x201C;TAG2&#x201D;}] Notice that two consecutive B tags will end up as
different entities. On word based languages, we might end up splitting words undesirably : Imagine
Microsoft being tagged as [{&#x201C;word&#x201D;: &#x201C;Micro&#x201D;, &#x201C;entity&#x201D;: &#x201C;ENTERPRISE&#x201D;}, {&#x201C;word&#x201D;: &#x201C;soft&#x201D;, &#x201C;entity&#x201D;:
&#x201C;NAME&#x201D;}]. Look for FIRST, MAX, AVERAGE for ways to mitigate that and disambiguate words (on languages
that support that meaning, which is basically tokens separated by a space). These mitigations will
only work on real words, &#x201C;New york&#x201D; might still be tagged with two different entities.</li>
<li>&#x201C;first&#x201D; : (works only on word based models) Will use the <code>SIMPLE</code> strategy except that words, cannot
end up with different tags. Words will simply use the tag of the first token of the word when there
is ambiguity.</li>
<li>&#x201C;average&#x201D; : (works only on word based models) Will use the <code>SIMPLE</code> strategy except that words,
cannot end up with different tags. scores will be averaged first across tokens, and then the maximum
label is applied.</li>
<li>&#x201C;max&#x201D; : (works only on word based models) Will use the <code>SIMPLE</code> strategy except that words, cannot
end up with different tags. Word entity will simply be the token with the maximum score.</li>
</ul>`,name:"aggregation_strategy"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L86"}}),Ws=new v({props:{name:"__call__",anchor:"transformers.TokenClassificationPipeline.__call__",parameters:[{name:"inputs",val:": typing.Union[str, typing.List[str]]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.__call__.inputs",description:`<strong>inputs</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
One or several texts (or one list of texts) for token classification.`,name:"inputs"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L160",returnDescription:`
<p>Each result comes as a list of dictionaries (one for each token in the
corresponding input, or each entity if this pipeline was instantiated with an aggregation_strategy) with
the following keys:</p>
<ul>
<li><strong>word</strong> (<code>str</code>) \u2014 The token/word classified.</li>
<li><strong>score</strong> (<code>float</code>) \u2014 The corresponding probability for <code>entity</code>.</li>
<li><strong>entity</strong> (<code>str</code>) \u2014 The entity predicted for that token/word (it is named <em>entity_group</em> when
<em>aggregation_strategy</em> is not <code>"none"</code>.</li>
<li><strong>index</strong> (<code>int</code>, only present when <code>aggregation_strategy="none"</code>) \u2014 The index of the corresponding
token in the sentence.</li>
<li><strong>start</strong> (<code>int</code>, <em>optional</em>) \u2014 The index of the start of the corresponding entity in the sentence. Only
exists if the offsets are available within the tokenizer</li>
<li><strong>end</strong> (<code>int</code>, <em>optional</em>) \u2014 The index of the end of the corresponding entity in the sentence. Only
exists if the offsets are available within the tokenizer</li>
</ul>
`,returnType:`
<p>A list or a list of list of <code>dict</code></p>
`}}),Hs=new v({props:{name:"aggregate_words",anchor:"transformers.TokenClassificationPipeline.aggregate_words",parameters:[{name:"entities",val:": typing.List[dict]"},{name:"aggregation_strategy",val:": AggregationStrategy"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L365"}}),Qs=new v({props:{name:"gather_pre_entities",anchor:"transformers.TokenClassificationPipeline.gather_pre_entities",parameters:[{name:"sentence",val:": str"},{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"offset_mapping",val:": typing.Union[typing.List[typing.Tuple[int, int]], NoneType]"},{name:"special_tokens_mask",val:": ndarray"},{name:"aggregation_strategy",val:": AggregationStrategy"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L251"}}),Vs=new v({props:{name:"group_entities",anchor:"transformers.TokenClassificationPipeline.group_entities",parameters:[{name:"entities",val:": typing.List[dict]"}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.group_entities.entities",description:"<strong>entities</strong> (<code>dict</code>) &#x2014; The entities predicted by the pipeline.",name:"entities"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L427"}}),Bs=new v({props:{name:"group_sub_entities",anchor:"transformers.TokenClassificationPipeline.group_sub_entities",parameters:[{name:"entities",val:": typing.List[dict]"}],parametersDescription:[{anchor:"transformers.TokenClassificationPipeline.group_sub_entities.entities",description:"<strong>entities</strong> (<code>dict</code>) &#x2014; The entities predicted by the pipeline.",name:"entities"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/token_classification.py#L392"}}),Zs=new P({}),Ys=new v({props:{name:"class transformers.TranslationPipeline",anchor:"transformers.TranslationPipeline",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TranslationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.TranslationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.TranslationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.TranslationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.TranslationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.TranslationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.TranslationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.TranslationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.TranslationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.TranslationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text2text_generation.py#L252"}}),Js=new A({props:{code:`en_fr_translator = pipeline("translation_en_to_fr")
en_fr_translator("How old are you?")`,highlighted:`en_fr_translator = pipeline(<span class="hljs-string">&quot;translation_en_to_fr&quot;</span>)
en_fr_translator(<span class="hljs-string">&quot;How old are you?&quot;</span>)`}}),ea=new v({props:{name:"__call__",anchor:"transformers.TranslationPipeline.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TranslationPipeline.__call__.args",description:`<strong>args</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
Texts to be translated.`,name:"args"},{anchor:"transformers.TranslationPipeline.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to include the tensors of predictions (as token indices) in the outputs.`,name:"return_tensors"},{anchor:"transformers.TranslationPipeline.__call__.return_text",description:`<strong>return_text</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to include the decoded texts in the outputs.`,name:"return_text"},{anchor:"transformers.TranslationPipeline.__call__.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clean up the potential extra spaces in the text output.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.TranslationPipeline.__call__.src_lang",description:`<strong>src_lang</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language of the input. Might be required for multilingual models. Will not have any effect for
single pair translation models`,name:"src_lang"},{anchor:"transformers.TranslationPipeline.__call__.tgt_lang",description:`<strong>tgt_lang</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The language of the desired output. Might be required for multilingual models. Will not have any effect
for single pair translation models
generate_kwargs &#x2014;
Additional keyword arguments to pass along to the generate method of the model (see the generate method
corresponding to your framework <a href="./model#generative-models">here</a>).`,name:"tgt_lang"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/text2text_generation.py#L304",returnDescription:`
<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>translation_text</strong> (<code>str</code>, present when <code>return_text=True</code>) \u2014 The translation.</li>
<li><strong>translation_token_ids</strong> (<code>torch.Tensor</code> or <code>tf.Tensor</code>, present when <code>return_tensors=True</code>) \u2014 The
token ids of the translation.</li>
</ul>
`,returnType:`
<p>A list or a list of list of <code>dict</code></p>
`}}),ta=new P({}),na=new v({props:{name:"class transformers.ZeroShotClassificationPipeline",anchor:"transformers.ZeroShotClassificationPipeline",parameters:[{name:"args_parser",val:" = <transformers.pipelines.zero_shot_classification.ZeroShotClassificationArgumentHandler object at 0x7f7439970f10>"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ZeroShotClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ZeroShotClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ZeroShotClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ZeroShotClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ZeroShotClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ZeroShotClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ZeroShotClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ZeroShotClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.ZeroShotClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/zero_shot_classification.py#L46"}}),aa=new v({props:{name:"__call__",anchor:"transformers.ZeroShotClassificationPipeline.__call__",parameters:[{name:"sequences",val:": typing.Union[str, typing.List[str]]"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotClassificationPipeline.__call__.sequences",description:`<strong>sequences</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The sequence(s) to classify, will be truncated if the model input is too large.`,name:"sequences"},{anchor:"transformers.ZeroShotClassificationPipeline.__call__.candidate_labels",description:`<strong>candidate_labels</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The set of possible class labels to classify each sequence into. Can be a single label, a string of
comma-separated labels, or a list of labels.`,name:"candidate_labels"},{anchor:"transformers.ZeroShotClassificationPipeline.__call__.hypothesis_template",description:`<strong>hypothesis_template</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;This example is {}.&quot;</code>) &#x2014;
The template used to turn each label into an NLI-style hypothesis. This template must include a {} or
similar syntax for the candidate label to be inserted into the template. For example, the default
template is <code>&quot;This example is {}.&quot;</code> With the candidate label <code>&quot;sports&quot;</code>, this would be fed into the
model like <code>&quot;&lt;cls&gt; sequence to classify &lt;sep&gt; This example is sports . &lt;sep&gt;&quot;</code>. The default template
works well in many cases, but it may be worthwhile to experiment with different templates depending on
the task setting.`,name:"hypothesis_template"},{anchor:"transformers.ZeroShotClassificationPipeline.__call__.multi_label",description:`<strong>multi_label</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not multiple candidate labels can be true. If <code>False</code>, the scores are normalized such that
the sum of the label likelihoods for each sequence is 1. If <code>True</code>, the labels are considered
independent and probabilities are normalized for each candidate by doing a softmax of the entailment
score vs. the contradiction score.`,name:"multi_label"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/zero_shot_classification.py#L138",returnDescription:`
<p>Each result comes as a dictionary with the following keys:</p>
<ul>
<li><strong>sequence</strong> (<code>str</code>) \u2014 The sequence for which this is the output.</li>
<li><strong>labels</strong> (<code>List[str]</code>) \u2014 The labels sorted by order of likelihood.</li>
<li><strong>scores</strong> (<code>List[float]</code>) \u2014 The probabilities for each of the labels.</li>
</ul>
`,returnType:`
<p>A <code>dict</code> or a list of <code>dict</code></p>
`}}),la=new P({}),da=new v({props:{name:"class transformers.ZeroShotImageClassificationPipeline",anchor:"transformers.ZeroShotImageClassificationPipeline",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotImageClassificationPipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.ZeroShotImageClassificationPipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.ZeroShotImageClassificationPipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.ZeroShotImageClassificationPipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.ZeroShotImageClassificationPipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.ZeroShotImageClassificationPipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.ZeroShotImageClassificationPipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.ZeroShotImageClassificationPipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.ZeroShotImageClassificationPipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.ZeroShotImageClassificationPipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/zero_shot_image_classification.py#L29"}}),ma=new v({props:{name:"__call__",anchor:"transformers.ZeroShotImageClassificationPipeline.__call__",parameters:[{name:"images",val:": typing.Union[str, typing.List[str], ForwardRef('Image'), typing.List[ForwardRef('Image')]]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ZeroShotImageClassificationPipeline.__call__.images",description:`<strong>images</strong> (<code>str</code>, <code>List[str]</code>, <code>PIL.Image</code> or <code>List[PIL.Image]</code>) &#x2014;
The pipeline handles three types of images:</p>
<ul>
<li>A string containing a http link pointing to an image</li>
<li>A string containing a local path to an image</li>
<li>An image loaded in PIL directly</li>
</ul>`,name:"images"},{anchor:"transformers.ZeroShotImageClassificationPipeline.__call__.candidate_labels",description:`<strong>candidate_labels</strong> (<code>List[str]</code>) &#x2014;
The candidate labels for this image`,name:"candidate_labels"},{anchor:"transformers.ZeroShotImageClassificationPipeline.__call__.hypothesis_template",description:`<strong>hypothesis_template</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;This is a photo of {}&quot;</code>) &#x2014;
The sentence used in cunjunction with <em>candidate_labels</em> to attempt the image classification by
replacing the placeholder with the candidate_labels. Then likelihood is estimated by using
logits_per_image`,name:"hypothesis_template"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/zero_shot_image_classification.py#L48",returnDescription:`
<p>A list of dictionaries containing result, one dictionnary per proposed label. The dictionaries contain the
following keys:</p>
<ul>
<li><strong>label</strong> (<code>str</code>) \u2014 The label identified by the model. It is one of the suggested <code>candidate_label</code>.</li>
<li><strong>score</strong> (<code>float</code>) \u2014 The score attributed by the model for that label (between 0 and 1).</li>
</ul>
`}}),fa=new P({}),ha=new v({props:{name:"class transformers.Pipeline",anchor:"transformers.Pipeline",parameters:[{name:"model",val:": typing.Union[ForwardRef('PreTrainedModel'), ForwardRef('TFPreTrainedModel')]"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils.PreTrainedTokenizer] = None"},{name:"feature_extractor",val:": typing.Optional[ForwardRef('SequenceFeatureExtractor')] = None"},{name:"modelcard",val:": typing.Optional[transformers.modelcard.ModelCard] = None"},{name:"framework",val:": typing.Optional[str] = None"},{name:"task",val:": str = ''"},{name:"args_parser",val:": ArgumentHandler = None"},{name:"device",val:": int = -1"},{name:"binary_output",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Pipeline.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a>) &#x2014;
The model that will be used by the pipeline to make predictions. This needs to be a model inheriting from
<a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> for PyTorch and <a href="/docs/transformers/pr_15901/en/main_classes/model#transformers.TFPreTrainedModel">TFPreTrainedModel</a> for TensorFlow.`,name:"model"},{anchor:"transformers.Pipeline.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer that will be used by the pipeline to encode data for the model. This object inherits from
<a href="/docs/transformers/pr_15901/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>.`,name:"tokenizer"},{anchor:"transformers.Pipeline.modelcard",description:`<strong>modelcard</strong> (<code>str</code> or <code>ModelCard</code>, <em>optional</em>) &#x2014;
Model card attributed to the model for this pipeline.`,name:"modelcard"},{anchor:"transformers.Pipeline.framework",description:`<strong>framework</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The framework to use, either <code>&quot;pt&quot;</code> for PyTorch or <code>&quot;tf&quot;</code> for TensorFlow. The specified framework must be
installed.</p>
<p>If no framework is specified, will default to the one currently installed. If no framework is specified and
both frameworks are installed, will default to the framework of the <code>model</code>, or to PyTorch if no model is
provided.`,name:"framework"},{anchor:"transformers.Pipeline.task",description:`<strong>task</strong> (<code>str</code>, defaults to <code>&quot;&quot;</code>) &#x2014;
A task-identifier for the pipeline.`,name:"task"},{anchor:"transformers.Pipeline.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the number of
workers to be used.`,name:"num_workers"},{anchor:"transformers.Pipeline.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
When the pipeline will use <em>DataLoader</em> (when passing a dataset, on GPU for a Pytorch model), the size of
the batch to use, for inference this is not always beneficial, please read <a href="https://huggingface.co/transformers/main_classes/pipelines.html#pipeline-batching" rel="nofollow">Batching with
pipelines</a> .`,name:"batch_size"},{anchor:"transformers.Pipeline.args_parser",description:`<strong>args_parser</strong> (<a href="/docs/transformers/pr_15901/en/internal/pipelines_utils#transformers.pipelines.ArgumentHandler">ArgumentHandler</a>, <em>optional</em>) &#x2014;
Reference to the object in charge of parsing supplied pipeline parameters.`,name:"args_parser"},{anchor:"transformers.Pipeline.device",description:`<strong>device</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Device ordinal for CPU/GPU supports. Setting this to -1 will leverage CPU, a positive will run the model on
the associated CUDA device id.`,name:"device"},{anchor:"transformers.Pipeline.binary_output",description:`<strong>binary_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag indicating if the output the pipeline should happen in a binary format (i.e., pickle) or as raw text.`,name:"binary_output"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/base.py#L710"}}),ua=new v({props:{name:"check_model_type",anchor:"transformers.Pipeline.check_model_type",parameters:[{name:"supported_models",val:": typing.Union[typing.List[str], dict]"}],parametersDescription:[{anchor:"transformers.Pipeline.check_model_type.supported_models",description:`<strong>supported_models</strong> (<code>List[str]</code> or <code>dict</code>) &#x2014;
The list of models supported by the pipeline, or a dictionary with model class values.`,name:"supported_models"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/base.py#L863"}}),ga=new v({props:{name:"device_placement",anchor:"transformers.Pipeline.device_placement",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/base.py#L805",returnDescription:`
<p>Context manager</p>
`}}),_a=new A({props:{code:`# Explicitly ask for tensor allocation on CUDA device :0
pipe = pipeline(..., device=0)
with pipe.device_placement():
    # Every framework specific tensor allocation will be done on the request device
    output = pipe(...)`,highlighted:`<span class="hljs-comment"># Explicitly ask for tensor allocation on CUDA device :0</span>
pipe = pipeline(..., device=<span class="hljs-number">0</span>)
<span class="hljs-keyword">with</span> pipe.device_placement():
    <span class="hljs-comment"># Every framework specific tensor allocation will be done on the request device</span>
    output = pipe(...)`}}),ba=new v({props:{name:"ensure_tensor_on_device",anchor:"transformers.Pipeline.ensure_tensor_on_device",parameters:[{name:"**inputs",val:""}],parametersDescription:[{anchor:"transformers.Pipeline.ensure_tensor_on_device.inputs",description:`<strong>inputs</strong> (keyword arguments that should be <code>torch.Tensor</code>, the rest is ignored) &#x2014;
The tensors to place on <code>self.device</code>.`,name:"inputs"},{anchor:"transformers.Pipeline.ensure_tensor_on_device.Recursive",description:"<strong>Recursive</strong> on lists <strong>only</strong>. &#x2014;",name:"Recursive"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/base.py#L831",returnDescription:`
<p>The same as <code>inputs</code> but on the proper device.</p>
`,returnType:`
<p><code>Dict[str, torch.Tensor]</code></p>
`}}),va=new v({props:{name:"postprocess",anchor:"transformers.Pipeline.postprocess",parameters:[{name:"model_outputs",val:": ModelOutput"},{name:"**postprocess_parameters",val:": typing.Dict"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/base.py#L919"}}),ka=new v({props:{name:"predict",anchor:"transformers.Pipeline.predict",parameters:[{name:"X",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/base.py#L799"}}),ya=new v({props:{name:"preprocess",anchor:"transformers.Pipeline.preprocess",parameters:[{name:"input_",val:": typing.Any"},{name:"**preprocess_parameters",val:": typing.Dict"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/base.py#L898"}}),Pa=new v({props:{name:"save_pretrained",anchor:"transformers.Pipeline.save_pretrained",parameters:[{name:"save_directory",val:": str"}],parametersDescription:[{anchor:"transformers.Pipeline.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code>) &#x2014;
A path to the directory where to saved. It will be created if it doesn&#x2019;t exist.`,name:"save_directory"}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/base.py#L769"}}),xa=new v({props:{name:"transform",anchor:"transformers.Pipeline.transform",parameters:[{name:"X",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15901/src/transformers/pipelines/base.py#L793"}}),{c(){x=r("meta"),_e=l(),q=r("h1"),S=r("a"),me=r("span"),f($.$$.fragment),O=l(),ye=r("span"),Dg=a("Pipelines"),Vm=l(),Vt=r("p"),Ig=a(`The pipelines are a great and easy way to use models for inference. These pipelines are objects that abstract most of
the complex code from the library, offering a simple API dedicated to several tasks, including Named Entity
Recognition, Masked Language Modeling, Sentiment Analysis, Feature Extraction and Question Answering. See the
`),Aa=r("a"),jg=a("task summary"),Sg=a(" for examples of use."),Bm=l(),za=r("p"),Mg=a("There are two categories of pipeline abstractions to be aware about:"),Zm=l(),Bt=r("ul"),xl=r("li"),br=r("p"),Fg=a("The "),Da=r("a"),Lg=a("pipeline()"),Ug=a(" which is the most powerful object encapsulating all other pipelines."),Gg=l(),vr=r("li"),$l=r("p"),Ng=a("The other task-specific pipelines:"),Og=l(),w=r("ul"),El=r("li"),Ia=r("a"),Rg=a("AudioClassificationPipeline"),Wg=l(),ql=r("li"),ja=r("a"),Hg=a("AutomaticSpeechRecognitionPipeline"),Qg=l(),Cl=r("li"),Sa=r("a"),Vg=a("ConversationalPipeline"),Bg=l(),Al=r("li"),Ma=r("a"),Zg=a("FeatureExtractionPipeline"),Yg=l(),zl=r("li"),Fa=r("a"),Xg=a("FillMaskPipeline"),Kg=l(),Dl=r("li"),La=r("a"),Jg=a("ImageClassificationPipeline"),e_=l(),Il=r("li"),Ua=r("a"),t_=a("ImageSegmentationPipeline"),n_=l(),jl=r("li"),Ga=r("a"),r_=a("ObjectDetectionPipeline"),o_=l(),Sl=r("li"),Na=r("a"),s_=a("QuestionAnsweringPipeline"),a_=l(),Ml=r("li"),Oa=r("a"),i_=a("SummarizationPipeline"),l_=l(),Fl=r("li"),Ra=r("a"),d_=a("TableQuestionAnsweringPipeline"),p_=l(),Ll=r("li"),Wa=r("a"),c_=a("TextClassificationPipeline"),m_=l(),Ul=r("li"),Ha=r("a"),f_=a("TextGenerationPipeline"),h_=l(),Gl=r("li"),Qa=r("a"),u_=a("Text2TextGenerationPipeline"),g_=l(),Nl=r("li"),Va=r("a"),__=a("TokenClassificationPipeline"),b_=l(),Ol=r("li"),Ba=r("a"),v_=a("TranslationPipeline"),w_=l(),Rl=r("li"),Za=r("a"),k_=a("ZeroShotClassificationPipeline"),T_=l(),Wl=r("li"),Ya=r("a"),y_=a("ZeroShotImageClassificationPipeline"),Ym=l(),Ve=r("h2"),Zt=r("a"),Hl=r("span"),f(wr.$$.fragment),P_=l(),Ql=r("span"),x_=a("The pipeline abstraction"),Xm=l(),Yt=r("p"),$_=a("The "),Vl=r("em"),E_=a("pipeline"),q_=a(` abstraction is a wrapper around all the other available pipelines. It is instantiated as any other
pipeline but can provide additional quality of life.`),Km=l(),Xa=r("p"),C_=a("Simple call on one item:"),Jm=l(),f(kr.$$.fragment),ef=l(),Xt=r("p"),A_=a("If you want to use a specific model from the "),Tr=r("a"),z_=a("hub"),D_=a(` you can ignore the task if the model on
the hub already defines it:`),tf=l(),f(yr.$$.fragment),nf=l(),Kt=r("p"),I_=a("To call a pipeline on many items, you can either call with a "),Bl=r("em"),j_=a("list"),S_=a("."),rf=l(),f(Pr.$$.fragment),of=l(),Jt=r("p"),M_=a("To iterate of full datasets it is recommended to use a "),Zl=r("code"),F_=a("dataset"),L_=a(` directly. This means you don\u2019t need to allocate
the whole dataset at once, nor do you need to do batching yourself. This should work just as fast as custom loops on
GPU. If it doesn\u2019t don\u2019t hesitate to create an issue.`),sf=l(),f(xr.$$.fragment),af=l(),Ka=r("p"),U_=a("For ease of use, a generator is also possible:"),lf=l(),f($r.$$.fragment),df=l(),R=r("div"),f(Er.$$.fragment),G_=l(),qr=r("p"),N_=a("Utility factory method to build a "),Ja=r("a"),O_=a("Pipeline"),R_=a("."),W_=l(),Yl=r("p"),H_=a("Pipelines are made of:"),Q_=l(),Be=r("ul"),Cr=r("li"),V_=a("A "),ei=r("a"),B_=a("tokenizer"),Z_=a(" in charge of mapping raw textual input to token."),Y_=l(),Ar=r("li"),X_=a("A "),ti=r("a"),K_=a("model"),J_=a(" to make predictions from the inputs."),eb=l(),Xl=r("li"),tb=a("Some (optional) post processing for enhancing model\u2019s output."),nb=l(),Kl=r("p"),rb=a("Examples:"),ob=l(),f(zr.$$.fragment),pf=l(),Ze=r("h2"),en=r("a"),Jl=r("span"),f(Dr.$$.fragment),sb=l(),ed=r("span"),ab=a("Pipeline batching"),cf=l(),qe=r("p"),ib=a(`All pipelines can use batching. This will work
whenever the pipeline uses its streaming ability (so when passing lists or `),td=r("code"),lb=a("Dataset"),db=a(" or "),nd=r("code"),pb=a("generator"),cb=a(")."),mf=l(),f(Ir.$$.fragment),ff=l(),f(tn.$$.fragment),hf=l(),f(jr.$$.fragment),uf=l(),f(Sr.$$.fragment),gf=l(),ni=r("p"),mb=a("Example where it\u2019s most a slowdown:"),_f=l(),f(Mr.$$.fragment),bf=l(),nn=r("p"),fb=a("This is a occasional very long sentence compared to the other. In that case, the "),rd=r("strong"),hb=a("whole"),ub=a(` batch will need to be 400
tokens long, so the whole batch will be [64, 400] instead of [64, 4], leading to the high slowdown. Even worse, on
bigger batches, the program simply crashes.`),vf=l(),f(Fr.$$.fragment),wf=l(),ri=r("p"),gb=a(`There are no good (general) solutions for this problem, and your mileage may vary depending on your use cases. Rule of
thumb:`),kf=l(),oi=r("p"),_b=a("For users, a rule of thumb is:"),Tf=l(),ie=r("ul"),od=r("li"),sd=r("p"),ad=r("strong"),bb=a(`Measure performance on your load, with your hardware. Measure, measure, and keep measuring. Real numbers are the
only way to go.`),vb=l(),id=r("li"),ld=r("p"),wb=a("If you are latency constrained (live product doing inference), don\u2019t batch"),kb=l(),dd=r("li"),pd=r("p"),Tb=a("If you are using CPU, don\u2019t batch."),yb=l(),Lr=r("li"),cd=r("p"),Pb=a("If you are using throughput (you want to run your model on a bunch of static data), on GPU, then:"),xb=l(),Ye=r("ul"),md=r("li"),$b=a(`If you have no clue about the size of the sequence_length (\u201Cnatural\u201D data), by default don\u2019t batch, measure and
try tentatively to add it, add OOM checks to recover when it will fail (and it will at some point if you don\u2019t
control the sequence_length.)`),Eb=l(),fd=r("li"),qb=a(`If your sequence_length is super regular, then batching is more likely to be VERY interesting, measure and push
it until you get OOMs.`),Cb=l(),hd=r("li"),Ab=a("The larger the GPU the more likely batching is going to be more interesting"),zb=l(),ud=r("li"),gd=r("p"),Db=a("As soon as you enable batching, make sure you can handle OOMs nicely."),yf=l(),Xe=r("h2"),rn=r("a"),_d=r("span"),f(Ur.$$.fragment),Ib=l(),bd=r("span"),jb=a("Pipeline chunk batching"),Pf=l(),Pe=r("p"),vd=r("code"),Sb=a("zero-shot-classification"),Mb=a(" and "),wd=r("code"),Fb=a("question-answering"),Lb=a(` are slightly specific in the sense, that a single input might yield
multiple forward pass of a model. Under normal circumstances, this would yield issues with `),kd=r("code"),Ub=a("batch_size"),Gb=a(" argument."),xf=l(),Ce=r("p"),Nb=a("In order to circumvent this issue, both of these pipelines are a bit specific, they are "),Td=r("code"),Ob=a("ChunkPipeline"),Rb=a(` instead of
regular `),yd=r("code"),Wb=a("Pipeline"),Hb=a(". In short:"),$f=l(),f(Gr.$$.fragment),Ef=l(),si=r("p"),Qb=a("Now becomes:"),qf=l(),f(Nr.$$.fragment),Cf=l(),ai=r("p"),Vb=a(`This should be very transparent to your code because the pipelines are used in
the same way.`),Af=l(),on=r("p"),Bb=a(`This is a simplified view, since the pipeline can handle automatically the batch to ! Meaning you don\u2019t have to care
about how many forward passes you inputs are actually going to trigger, you can optimize the `),Pd=r("code"),Zb=a("batch_size"),Yb=a(`
independently of the inputs. The caveats from the previous section still apply.`),zf=l(),Ke=r("h2"),sn=r("a"),xd=r("span"),f(Or.$$.fragment),Xb=l(),$d=r("span"),Kb=a("Pipeline custom code"),Df=l(),ii=r("p"),Jb=a("If you want to override a specific pipeline."),If=l(),an=r("p"),e1=a(`Don\u2019t hesitate to create an issue for your task at hand, the goal of the pipeline is to be easy to use and support most
cases, so `),Ed=r("code"),t1=a("transformers"),n1=a(" could maybe support your use case."),jf=l(),li=r("p"),r1=a("If you want to try simply you can:"),Sf=l(),di=r("ul"),qd=r("li"),o1=a("Subclass your pipeline of choice"),Mf=l(),f(Rr.$$.fragment),Ff=l(),pi=r("p"),s1=a("That should enable you to do all the custom code you want."),Lf=l(),Je=r("h2"),ln=r("a"),Cd=r("span"),f(Wr.$$.fragment),a1=l(),Ad=r("span"),i1=a("Implementing a pipeline"),Uf=l(),ci=r("p"),mi=r("a"),l1=a("Implementing a new pipeline"),Gf=l(),et=r("h2"),dn=r("a"),zd=r("span"),f(Hr.$$.fragment),d1=l(),Dd=r("span"),p1=a("The task specific pipelines"),Nf=l(),tt=r("h3"),pn=r("a"),Id=r("span"),f(Qr.$$.fragment),c1=l(),jd=r("span"),m1=a("AudioClassificationPipeline"),Of=l(),J=r("div"),f(Vr.$$.fragment),f1=l(),Br=r("p"),h1=a("Audio classification pipeline using any "),Sd=r("code"),u1=a("AutoModelForAudioClassification"),g1=a(`. This pipeline predicts the class of a
raw waveform or an audio file. In case of an audio file, ffmpeg should be installed to support multiple audio
formats.`),_1=l(),nt=r("p"),b1=a("This pipeline can currently be loaded from "),fi=r("a"),v1=a("pipeline()"),w1=a(` using the following task identifier:
`),Md=r("code"),k1=a('"audio-classification"'),T1=a("."),y1=l(),Zr=r("p"),P1=a(`See the list of available models on
`),Yr=r("a"),x1=a("huggingface.co/models"),$1=a("."),E1=l(),cn=r("div"),f(Xr.$$.fragment),q1=l(),Kr=r("p"),C1=a("Classify the sequence(s) given as inputs. See the "),hi=r("a"),A1=a("AutomaticSpeechRecognitionPipeline"),z1=a(` documentation for more
information.`),Rf=l(),rt=r("h3"),mn=r("a"),Fd=r("span"),f(Jr.$$.fragment),D1=l(),Ld=r("span"),I1=a("AutomaticSpeechRecognitionPipeline"),Wf=l(),fe=r("div"),f(eo.$$.fragment),j1=l(),Ud=r("p"),S1=a("Pipeline that aims at extracting spoken text contained within some audio."),M1=l(),Gd=r("p"),F1=a(`The input can be either a raw waveform or a audio file. In case of the audio file, ffmpeg should be installed for
to support multiple audio formats`),L1=l(),fn=r("div"),f(to.$$.fragment),U1=l(),no=r("p"),G1=a("Classify the sequence(s) given as inputs. See the "),ui=r("a"),N1=a("AutomaticSpeechRecognitionPipeline"),O1=a(` documentation for more
information.`),Hf=l(),ot=r("h3"),hn=r("a"),Nd=r("span"),f(ro.$$.fragment),R1=l(),Od=r("span"),W1=a("ConversationalPipeline"),Qf=l(),z=r("div"),f(oo.$$.fragment),H1=l(),xe=r("p"),Q1=a(`Utility class containing a conversation and its history. This class is meant to be used as an input to the
`),gi=r("a"),V1=a("ConversationalPipeline"),B1=a(`. The conversation contains a number of utility function to manage the addition of new
user input and generated model responses. A conversation needs to contain an unprocessed user input before being
passed to the `),_i=r("a"),Z1=a("ConversationalPipeline"),Y1=a(`. This user input is either created when the class is instantiated, or by
calling `),Rd=r("code"),X1=a('conversational_pipeline.append_response("input")'),K1=a(" after a conversation turn."),J1=l(),Wd=r("p"),ev=a("Usage:"),tv=l(),f(so.$$.fragment),nv=l(),un=r("div"),f(ao.$$.fragment),rv=l(),io=r("p"),ov=a("Add a user input to the conversation for the next round. This populates the internal "),Hd=r("code"),sv=a("new_user_input"),av=a(" field."),iv=l(),gn=r("div"),f(lo.$$.fragment),lv=l(),Qd=r("p"),dv=a("Append a response to the list of generated responses."),pv=l(),Ae=r("div"),f(po.$$.fragment),cv=l(),Vd=r("p"),mv=a("Iterates over all blobs of the conversation."),fv=l(),he=r("p"),hv=a("Returns: Iterator of (is_user, text_chunk) in chronological order of the conversation. "),Bd=r("code"),uv=a("is_user"),gv=a(" is a "),Zd=r("code"),_v=a("bool"),bv=a(`,
`),Yd=r("code"),vv=a("text_chunks"),wv=a(" is a "),Xd=r("code"),kv=a("str"),Tv=a("."),yv=l(),_n=r("div"),f(co.$$.fragment),Pv=l(),$e=r("p"),xv=a("Mark the conversation as processed (moves the content of "),Kd=r("code"),$v=a("new_user_input"),Ev=a(" to "),Jd=r("code"),qv=a("past_user_inputs"),Cv=a(`) and empties
the `),ep=r("code"),Av=a("new_user_input"),zv=a(" field."),Vf=l(),M=r("div"),f(mo.$$.fragment),Dv=l(),tp=r("p"),Iv=a("Multi-turn conversational pipeline."),jv=l(),st=r("p"),Sv=a("This conversational pipeline can currently be loaded from "),bi=r("a"),Mv=a("pipeline()"),Fv=a(` using the following task identifier:
`),np=r("code"),Lv=a('"conversational"'),Uv=a("."),Gv=l(),ue=r("p"),Nv=a(`The models that this pipeline can use are models that have been fine-tuned on a multi-turn conversational task,
currently: `),rp=r("em"),Ov=a("\u2018microsoft/DialoGPT-small\u2019"),Rv=a(", "),op=r("em"),Wv=a("\u2018microsoft/DialoGPT-medium\u2019"),Hv=a(", "),sp=r("em"),Qv=a("\u2018microsoft/DialoGPT-large\u2019"),Vv=a(`. See the
up-to-date list of available models on
`),fo=r("a"),Bv=a("huggingface.co/models"),Zv=a("."),Yv=l(),ap=r("p"),Xv=a("Usage:"),Kv=l(),f(ho.$$.fragment),Jv=l(),bn=r("div"),f(uo.$$.fragment),ew=l(),ip=r("p"),tw=a("Generate responses for the conversation(s) given as inputs."),Bf=l(),at=r("h3"),vn=r("a"),lp=r("span"),f(go.$$.fragment),nw=l(),dp=r("span"),rw=a("FeatureExtractionPipeline"),Zf=l(),ee=r("div"),f(_o.$$.fragment),ow=l(),pp=r("p"),sw=a(`Feature extraction pipeline using no model head. This pipeline extracts the hidden states from the base
transformer, which can be used as features in downstream tasks.`),aw=l(),it=r("p"),iw=a("This feature extraction pipeline can currently be loaded from "),vi=r("a"),lw=a("pipeline()"),dw=a(` using the task identifier:
`),cp=r("code"),pw=a('"feature-extraction"'),cw=a("."),mw=l(),bo=r("p"),fw=a(`All models may be used for this pipeline. See a list of all models, including community-contributed models on
`),vo=r("a"),hw=a("huggingface.co/models"),uw=a("."),gw=l(),wn=r("div"),f(wo.$$.fragment),_w=l(),mp=r("p"),bw=a("Extract the features of the input(s)."),Yf=l(),lt=r("h3"),kn=r("a"),fp=r("span"),f(ko.$$.fragment),vw=l(),hp=r("span"),ww=a("FillMaskPipeline"),Xf=l(),W=r("div"),f(To.$$.fragment),kw=l(),dt=r("p"),Tw=a("Masked language modeling prediction pipeline using any "),up=r("code"),yw=a("ModelWithLMHead"),Pw=a(". See the "),wi=r("a"),xw=a(`masked language modeling
examples`),$w=a(" for more information."),Ew=l(),pt=r("p"),qw=a("This mask filling pipeline can currently be loaded from "),ki=r("a"),Cw=a("pipeline()"),Aw=a(` using the following task identifier:
`),gp=r("code"),zw=a('"fill-mask"'),Dw=a("."),Iw=l(),yo=r("p"),jw=a(`The models that this pipeline can use are models that have been trained with a masked language modeling objective,
which includes the bi-directional models in the library. See the up-to-date list of available models on
`),Po=r("a"),Sw=a("huggingface.co/models"),Mw=a("."),Fw=l(),f(Tn.$$.fragment),Lw=l(),yn=r("div"),f(xo.$$.fragment),Uw=l(),_p=r("p"),Gw=a("Fill the masked token in the text(s) given as inputs."),Kf=l(),ct=r("h3"),Pn=r("a"),bp=r("span"),f($o.$$.fragment),Nw=l(),vp=r("span"),Ow=a("ImageClassificationPipeline"),Jf=l(),te=r("div"),f(Eo.$$.fragment),Rw=l(),qo=r("p"),Ww=a("Image classification pipeline using any "),wp=r("code"),Hw=a("AutoModelForImageClassification"),Qw=a(`. This pipeline predicts the class of an
image.`),Vw=l(),mt=r("p"),Bw=a("This image classification pipeline can currently be loaded from "),Ti=r("a"),Zw=a("pipeline()"),Yw=a(` using the following task identifier:
`),kp=r("code"),Xw=a('"image-classification"'),Kw=a("."),Jw=l(),Co=r("p"),e0=a(`See the list of available models on
`),Ao=r("a"),t0=a("huggingface.co/models"),n0=a("."),r0=l(),xn=r("div"),f(zo.$$.fragment),o0=l(),Tp=r("p"),s0=a("Assign labels to the image(s) passed as inputs."),eh=l(),ft=r("h3"),$n=r("a"),yp=r("span"),f(Do.$$.fragment),a0=l(),Pp=r("span"),i0=a("ImageSegmentationPipeline"),th=l(),ne=r("div"),f(Io.$$.fragment),l0=l(),jo=r("p"),d0=a("Image segmentation pipeline using any "),xp=r("code"),p0=a("AutoModelForXXXSegmentation"),c0=a(`. This pipeline predicts masks of objects and
their classes.`),m0=l(),ht=r("p"),f0=a("This image segmentation pipeline can currently be loaded from "),yi=r("a"),h0=a("pipeline()"),u0=a(` using the following task identifier:
`),$p=r("code"),g0=a('"image-segmentation"'),_0=a("."),b0=l(),So=r("p"),v0=a(`See the list of available models on
`),Mo=r("a"),w0=a("huggingface.co/models"),k0=a("."),T0=l(),En=r("div"),f(Fo.$$.fragment),y0=l(),Ep=r("p"),P0=a("Perform segmentation (detect masks & classes) in the image(s) passed as inputs."),nh=l(),ut=r("h3"),qn=r("a"),qp=r("span"),f(Lo.$$.fragment),x0=l(),Cp=r("span"),$0=a("NerPipeline"),rh=l(),D=r("div"),f(Uo.$$.fragment),E0=l(),gt=r("p"),q0=a("Named Entity Recognition pipeline using any "),Ap=r("code"),C0=a("ModelForTokenClassification"),A0=a(". See the "),Pi=r("a"),z0=a(`named entity recognition
examples`),D0=a(" for more information."),I0=l(),_t=r("p"),j0=a("This token recognition pipeline can currently be loaded from "),xi=r("a"),S0=a("pipeline()"),M0=a(` using the following task identifier:
`),zp=r("code"),F0=a('"ner"'),L0=a(" (for predicting the classes of tokens in a sequence: person, organisation, location or miscellaneous)."),U0=l(),Go=r("p"),G0=a(`The models that this pipeline can use are models that have been fine-tuned on a token classification task. See the
up-to-date list of available models on
`),No=r("a"),N0=a("huggingface.co/models"),O0=a("."),R0=l(),ze=r("div"),f(Oo.$$.fragment),W0=l(),Dp=r("p"),H0=a("Override tokens from a given word that disagree to force agreement on word boundaries."),Q0=l(),Ip=r("p"),V0=a(`Example: micro|soft| com|pany| B-ENT I-NAME I-ENT I-ENT will be rewritten with first strategy as microsoft|
company| B-ENT I-ENT`),B0=l(),Cn=r("div"),f(Ro.$$.fragment),Z0=l(),jp=r("p"),Y0=a("Fuse various numpy arrays into dicts with all the information needed for aggregation"),X0=l(),An=r("div"),f(Wo.$$.fragment),K0=l(),Sp=r("p"),J0=a("Find and group together the adjacent tokens with the same entity predicted."),ek=l(),zn=r("div"),f(Ho.$$.fragment),tk=l(),Mp=r("p"),nk=a("Group together the adjacent tokens with the same entity predicted."),oh=l(),Dn=r("p"),rk=a("See "),$i=r("a"),ok=a("TokenClassificationPipeline"),sk=a(" for all details."),sh=l(),bt=r("h3"),In=r("a"),Fp=r("span"),f(Qo.$$.fragment),ak=l(),Lp=r("span"),ik=a("ObjectDetectionPipeline"),ah=l(),re=r("div"),f(Vo.$$.fragment),lk=l(),Bo=r("p"),dk=a("Object detection pipeline using any "),Up=r("code"),pk=a("AutoModelForObjectDetection"),ck=a(`. This pipeline predicts bounding boxes of objects
and their classes.`),mk=l(),vt=r("p"),fk=a("This object detection pipeline can currently be loaded from "),Ei=r("a"),hk=a("pipeline()"),uk=a(` using the following task identifier:
`),Gp=r("code"),gk=a('"object-detection"'),_k=a("."),bk=l(),Zo=r("p"),vk=a("See the list of available models on "),Yo=r("a"),wk=a("huggingface.co/models"),kk=a("."),Tk=l(),jn=r("div"),f(Xo.$$.fragment),yk=l(),Np=r("p"),Pk=a("Detect objects (bounding boxes & classes) in the image(s) passed as inputs."),ih=l(),wt=r("h3"),Sn=r("a"),Op=r("span"),f(Ko.$$.fragment),xk=l(),Rp=r("span"),$k=a("QuestionAnsweringPipeline"),lh=l(),I=r("div"),f(Jo.$$.fragment),Ek=l(),kt=r("p"),qk=a("Question Answering pipeline using any "),Wp=r("code"),Ck=a("ModelForQuestionAnswering"),Ak=a(". See the "),qi=r("a"),zk=a(`question answering
examples`),Dk=a(" for more information."),Ik=l(),Tt=r("p"),jk=a("This question answering pipeline can currently be loaded from "),Ci=r("a"),Sk=a("pipeline()"),Mk=a(` using the following task identifier:
`),Hp=r("code"),Fk=a('"question-answering"'),Lk=a("."),Uk=l(),es=r("p"),Gk=a(`The models that this pipeline can use are models that have been fine-tuned on a question answering task. See the
up-to-date list of available models on
`),ts=r("a"),Nk=a("huggingface.co/models"),Ok=a("."),Rk=l(),Mn=r("div"),f(ns.$$.fragment),Wk=l(),Qp=r("p"),Hk=a("Answer the question(s) given as inputs by using the context(s)."),Qk=l(),De=r("div"),f(rs.$$.fragment),Vk=l(),yt=r("p"),Bk=a("QuestionAnsweringPipeline leverages the "),Vp=r("code"),Zk=a("SquadExample"),Yk=a(` internally. This helper method encapsulate all the
logic for converting question(s) and context(s) to `),Bp=r("code"),Xk=a("SquadExample"),Kk=a("."),Jk=l(),Zp=r("p"),eT=a("We currently support extractive question answering."),tT=l(),Ie=r("div"),f(os.$$.fragment),nT=l(),ss=r("p"),rT=a("Take the output of any "),Yp=r("code"),oT=a("ModelForQuestionAnswering"),sT=a(` and will generate probabilities for each span to be the
actual answer.`),aT=l(),Xp=r("p"),iT=a(`In addition, it filters out some unwanted/impossible cases like answer len being greater than max_answer_len or
answer end position being before the starting position. The method supports output the k-best answer through
the topk argument.`),lT=l(),Fn=r("div"),f(as.$$.fragment),dT=l(),Kp=r("p"),pT=a("When decoding from token probabilities, this method maps token indexes to actual word in the initial context."),dh=l(),Pt=r("h3"),Ln=r("a"),Jp=r("span"),f(is.$$.fragment),cT=l(),ec=r("span"),mT=a("SummarizationPipeline"),ph=l(),F=r("div"),f(ls.$$.fragment),fT=l(),tc=r("p"),hT=a("Summarize news articles and other documents."),uT=l(),xt=r("p"),gT=a("This summarizing pipeline can currently be loaded from "),Ai=r("a"),_T=a("pipeline()"),bT=a(` using the following task identifier:
`),nc=r("code"),vT=a('"summarization"'),wT=a("."),kT=l(),L=r("p"),TT=a(`The models that this pipeline can use are models that have been fine-tuned on a summarization task, which is
currently, \u2019`),rc=r("em"),yT=a("bart-large-cnn"),PT=a("\u2019, \u2019"),oc=r("em"),xT=a("t5-small"),$T=a("\u2019, \u2019"),sc=r("em"),ET=a("t5-base"),qT=a("\u2019, \u2019"),ac=r("em"),CT=a("t5-large"),AT=a("\u2019, \u2019"),ic=r("em"),zT=a("t5-3b"),DT=a("\u2019, \u2019"),lc=r("em"),IT=a("t5-11b"),jT=a(`\u2019. See the up-to-date
list of available models on `),ds=r("a"),ST=a("huggingface.co/models"),MT=a("."),FT=l(),dc=r("p"),LT=a("Usage:"),UT=l(),f(ps.$$.fragment),GT=l(),Un=r("div"),f(cs.$$.fragment),NT=l(),pc=r("p"),OT=a("Summarize the text(s) given as inputs."),ch=l(),$t=r("h3"),Gn=r("a"),cc=r("span"),f(ms.$$.fragment),RT=l(),mc=r("span"),WT=a("TableQuestionAnsweringPipeline"),mh=l(),oe=r("div"),f(fs.$$.fragment),HT=l(),hs=r("p"),QT=a("Table Question Answering pipeline using a "),fc=r("code"),VT=a("ModelForTableQuestionAnswering"),BT=a(`. This pipeline is only available in
PyTorch.`),ZT=l(),Et=r("p"),YT=a("This tabular question answering pipeline can currently be loaded from "),zi=r("a"),XT=a("pipeline()"),KT=a(` using the following task
identifier: `),hc=r("code"),JT=a('"table-question-answering"'),ey=a("."),ty=l(),us=r("p"),ny=a(`The models that this pipeline can use are models that have been fine-tuned on a tabular question answering task.
See the up-to-date list of available models on
`),gs=r("a"),ry=a("huggingface.co/models"),oy=a("."),sy=l(),C=r("div"),f(_s.$$.fragment),ay=l(),uc=r("p"),iy=a("Answers queries according to a table. The pipeline accepts several types of inputs which are detailed below:"),ly=l(),H=r("ul"),gc=r("li"),_c=r("code"),dy=a("pipeline(table, query)"),py=l(),bc=r("li"),vc=r("code"),cy=a("pipeline(table, [query])"),my=l(),wc=r("li"),kc=r("code"),fy=a("pipeline(table=table, query=query)"),hy=l(),Tc=r("li"),yc=r("code"),uy=a("pipeline(table=table, query=[query])"),gy=l(),Pc=r("li"),xc=r("code"),_y=a('pipeline({"table": table, "query": query})'),by=l(),$c=r("li"),Ec=r("code"),vy=a('pipeline({"table": table, "query": [query]})'),wy=l(),qc=r("li"),Cc=r("code"),ky=a('pipeline([{"table": table, "query": query}, {"table": table, "query": query}])'),Ty=l(),bs=r("p"),yy=a("The "),Ac=r("code"),Py=a("table"),xy=a(" argument should be a dict or a DataFrame built from that dict, containing the whole table:"),$y=l(),zc=r("p"),Ey=a("Example:"),qy=l(),f(vs.$$.fragment),Cy=l(),Dc=r("p"),Ay=a("This dictionary can be passed in as such, or can be converted to a pandas DataFrame:"),zy=l(),Ic=r("p"),Dy=a("Example:"),Iy=l(),f(ws.$$.fragment),fh=l(),qt=r("h3"),Nn=r("a"),jc=r("span"),f(ks.$$.fragment),jy=l(),Sc=r("span"),Sy=a("TextClassificationPipeline"),hh=l(),Q=r("div"),f(Ts.$$.fragment),My=l(),Ct=r("p"),Fy=a("Text classification pipeline using any "),Mc=r("code"),Ly=a("ModelForSequenceClassification"),Uy=a(". See the "),Di=r("a"),Gy=a(`sequence classification
examples`),Ny=a(" for more information."),Oy=l(),At=r("p"),Ry=a("This text classification pipeline can currently be loaded from "),Ii=r("a"),Wy=a("pipeline()"),Hy=a(` using the following task identifier:
`),Fc=r("code"),Qy=a('"sentiment-analysis"'),Vy=a(" (for classifying sequences according to positive or negative sentiments)."),By=l(),ys=r("p"),Zy=a("If multiple classification labels are available ("),Lc=r("code"),Yy=a("model.config.num_labels >= 2"),Xy=a(`), the pipeline will run a softmax
over the results. If there is a single label, the pipeline will run a sigmoid over the result.`),Ky=l(),Ps=r("p"),Jy=a(`The models that this pipeline can use are models that have been fine-tuned on a sequence classification task. See
the up-to-date list of available models on
`),xs=r("a"),eP=a("huggingface.co/models"),tP=a("."),nP=l(),On=r("div"),f($s.$$.fragment),rP=l(),Uc=r("p"),oP=a("Classify the text(s) given as inputs."),uh=l(),zt=r("h3"),Rn=r("a"),Gc=r("span"),f(Es.$$.fragment),sP=l(),Nc=r("span"),aP=a("TextGenerationPipeline"),gh=l(),se=r("div"),f(qs.$$.fragment),iP=l(),Cs=r("p"),lP=a("Language generation pipeline using any "),Oc=r("code"),dP=a("ModelWithLMHead"),pP=a(`. This pipeline predicts the words that will follow a
specified text prompt.`),cP=l(),Dt=r("p"),mP=a("This language generation pipeline can currently be loaded from "),ji=r("a"),fP=a("pipeline()"),hP=a(` using the following task identifier:
`),Rc=r("code"),uP=a('"text-generation"'),gP=a("."),_P=l(),As=r("p"),bP=a(`The models that this pipeline can use are models that have been trained with an autoregressive language modeling
objective, which includes the uni-directional models in the library (e.g. gpt2). See the list of available models
on `),zs=r("a"),vP=a("huggingface.co/models"),wP=a("."),kP=l(),Wn=r("div"),f(Ds.$$.fragment),TP=l(),Wc=r("p"),yP=a("Complete the prompt(s) given as inputs."),_h=l(),It=r("h3"),Hn=r("a"),Hc=r("span"),f(Is.$$.fragment),PP=l(),Qc=r("span"),xP=a("Text2TextGenerationPipeline"),bh=l(),j=r("div"),f(js.$$.fragment),$P=l(),Vc=r("p"),EP=a("Pipeline for text to text generation using seq2seq models."),qP=l(),jt=r("p"),CP=a("This Text2TextGenerationPipeline pipeline can currently be loaded from "),Si=r("a"),AP=a("pipeline()"),zP=a(` using the following task
identifier: `),Bc=r("code"),DP=a('"text2text-generation"'),IP=a("."),jP=l(),Ss=r("p"),SP=a(`The models that this pipeline can use are models that have been fine-tuned on a translation task. See the
up-to-date list of available models on
`),Ms=r("a"),MP=a("huggingface.co/models"),FP=a("."),LP=l(),Zc=r("p"),UP=a("Usage:"),GP=l(),f(Fs.$$.fragment),NP=l(),Qn=r("div"),f(Ls.$$.fragment),OP=l(),Yc=r("p"),RP=a("Generate the output text(s) using text(s) given as inputs."),WP=l(),Vn=r("div"),f(Us.$$.fragment),HP=l(),Xc=r("p"),QP=a("Checks whether there might be something wrong with given input with regard to the model."),vh=l(),St=r("h3"),Bn=r("a"),Kc=r("span"),f(Gs.$$.fragment),VP=l(),Jc=r("span"),BP=a("TokenClassificationPipeline"),wh=l(),E=r("div"),f(Ns.$$.fragment),ZP=l(),Mt=r("p"),YP=a("Named Entity Recognition pipeline using any "),em=r("code"),XP=a("ModelForTokenClassification"),KP=a(". See the "),Mi=r("a"),JP=a(`named entity recognition
examples`),e2=a(" for more information."),t2=l(),Ft=r("p"),n2=a("This token recognition pipeline can currently be loaded from "),Fi=r("a"),r2=a("pipeline()"),o2=a(` using the following task identifier:
`),tm=r("code"),s2=a('"ner"'),a2=a(" (for predicting the classes of tokens in a sequence: person, organisation, location or miscellaneous)."),i2=l(),Os=r("p"),l2=a(`The models that this pipeline can use are models that have been fine-tuned on a token classification task. See the
up-to-date list of available models on
`),Rs=r("a"),d2=a("huggingface.co/models"),p2=a("."),c2=l(),Zn=r("div"),f(Ws.$$.fragment),m2=l(),nm=r("p"),f2=a("Classify each token of the text(s) given as inputs."),h2=l(),je=r("div"),f(Hs.$$.fragment),u2=l(),rm=r("p"),g2=a("Override tokens from a given word that disagree to force agreement on word boundaries."),_2=l(),om=r("p"),b2=a(`Example: micro|soft| com|pany| B-ENT I-NAME I-ENT I-ENT will be rewritten with first strategy as microsoft|
company| B-ENT I-ENT`),v2=l(),Yn=r("div"),f(Qs.$$.fragment),w2=l(),sm=r("p"),k2=a("Fuse various numpy arrays into dicts with all the information needed for aggregation"),T2=l(),Xn=r("div"),f(Vs.$$.fragment),y2=l(),am=r("p"),P2=a("Find and group together the adjacent tokens with the same entity predicted."),x2=l(),Kn=r("div"),f(Bs.$$.fragment),$2=l(),im=r("p"),E2=a("Group together the adjacent tokens with the same entity predicted."),kh=l(),Lt=r("h3"),Jn=r("a"),lm=r("span"),f(Zs.$$.fragment),q2=l(),dm=r("span"),C2=a("TranslationPipeline"),Th=l(),U=r("div"),f(Ys.$$.fragment),A2=l(),pm=r("p"),z2=a("Translates from one language to another."),D2=l(),Ut=r("p"),I2=a("This translation pipeline can currently be loaded from "),Li=r("a"),j2=a("pipeline()"),S2=a(` using the following task identifier:
`),cm=r("code"),M2=a('"translation_xx_to_yy"'),F2=a("."),L2=l(),Xs=r("p"),U2=a(`The models that this pipeline can use are models that have been fine-tuned on a translation task. See the
up-to-date list of available models on `),Ks=r("a"),G2=a("huggingface.co/models"),N2=a("."),O2=l(),mm=r("p"),R2=a("Usage:"),W2=l(),f(Js.$$.fragment),H2=l(),er=r("div"),f(ea.$$.fragment),Q2=l(),fm=r("p"),V2=a("Translate the text(s) given as inputs."),yh=l(),Gt=r("h3"),tr=r("a"),hm=r("span"),f(ta.$$.fragment),B2=l(),um=r("span"),Z2=a("ZeroShotClassificationPipeline"),Ph=l(),V=r("div"),f(na.$$.fragment),Y2=l(),ra=r("p"),X2=a("NLI-based zero-shot classification pipeline using a "),gm=r("code"),K2=a("ModelForSequenceClassification"),J2=a(` trained on NLI (natural
language inference) tasks.`),ex=l(),Ee=r("p"),tx=a(`Any combination of sequences and labels can be passed and each combination will be posed as a premise/hypothesis
pair and passed to the pretrained model. Then, the logit for `),_m=r("em"),nx=a("entailment"),rx=a(` is taken as the logit for the candidate
label being valid. Any NLI model can be used, but the id of the `),bm=r("em"),ox=a("entailment"),sx=a(` label must be included in the model
config\u2019s :attr:`),vm=r("em"),ax=a("~transformers.PretrainedConfig.label2id"),ix=a("."),lx=l(),Nt=r("p"),dx=a("This NLI pipeline can currently be loaded from "),Ui=r("a"),px=a("pipeline()"),cx=a(` using the following task identifier:
`),wm=r("code"),mx=a('"zero-shot-classification"'),fx=a("."),hx=l(),oa=r("p"),ux=a(`The models that this pipeline can use are models that have been fine-tuned on an NLI task. See the up-to-date list
of available models on `),sa=r("a"),gx=a("huggingface.co/models"),_x=a("."),bx=l(),nr=r("div"),f(aa.$$.fragment),vx=l(),ia=r("p"),wx=a("Classify the sequence(s) given as inputs. See the "),Gi=r("a"),kx=a("ZeroShotClassificationPipeline"),Tx=a(` documentation for more
information.`),xh=l(),Ot=r("h3"),rr=r("a"),km=r("span"),f(la.$$.fragment),yx=l(),Tm=r("span"),Px=a("ZeroShotImageClassificationPipeline"),$h=l(),ae=r("div"),f(da.$$.fragment),xx=l(),Rt=r("p"),$x=a("Zero shot image classification pipeline using "),ym=r("code"),Ex=a("CLIPModel"),qx=a(`. This pipeline predicts the class of an image when you
provide an image and a set of `),Pm=r("code"),Cx=a("candidate_labels"),Ax=a("."),zx=l(),Wt=r("p"),Dx=a("This image classification pipeline can currently be loaded from "),Ni=r("a"),Ix=a("pipeline()"),jx=a(` using the following task identifier:
`),xm=r("code"),Sx=a('"zero-shot-image-classification"'),Mx=a("."),Fx=l(),pa=r("p"),Lx=a(`See the list of available models on
`),ca=r("a"),Ux=a("huggingface.co/models"),Gx=a("."),Nx=l(),or=r("div"),f(ma.$$.fragment),Ox=l(),$m=r("p"),Rx=a("Assign labels to the image(s) passed as inputs."),Eh=l(),Ht=r("h2"),sr=r("a"),Em=r("span"),f(fa.$$.fragment),Wx=l(),Oi=r("span"),Hx=a("Parent class: "),qm=r("code"),Qx=a("Pipeline"),qh=l(),T=r("div"),f(ha.$$.fragment),Vx=l(),Cm=r("p"),Bx=a(`The Pipeline class is the class from which all pipelines inherit. Refer to this class for methods shared across
different pipelines.`),Zx=l(),Am=r("p"),Yx=a(`Base class implementing pipelined operations. Pipeline workflow is defined as a sequence of the following
operations:`),Xx=l(),zm=r("p"),Kx=a("Input -> Tokenization -> Model Inference -> Post-Processing (task dependent) -> Output"),Jx=l(),Dm=r("p"),e5=a("Pipeline supports running on CPU or GPU through the device argument (see below)."),t5=l(),ge=r("p"),n5=a("Some pipeline, like for instance "),Ri=r("a"),r5=a("FeatureExtractionPipeline"),o5=a(" ("),Im=r("code"),s5=a("'feature-extraction'"),a5=a(`) output large tensor object
as nested-lists. In order to avoid dumping such large structure as textual data we provide the `),jm=r("code"),i5=a("binary_output"),l5=a(`
constructor argument. If set to `),Sm=r("code"),d5=a("True"),p5=a(", the output will be stored in the pickle format."),c5=l(),ar=r("div"),f(ua.$$.fragment),m5=l(),Mm=r("p"),f5=a("Check if the model class is in supported by the pipeline."),h5=l(),be=r("div"),f(ga.$$.fragment),u5=l(),Fm=r("p"),g5=a("Context Manager allowing tensor allocation on the user-specified device in framework agnostic way."),_5=l(),Lm=r("p"),b5=a("Examples:"),v5=l(),f(_a.$$.fragment),w5=l(),ir=r("div"),f(ba.$$.fragment),k5=l(),Um=r("p"),T5=a("Ensure PyTorch tensors are on the specified device."),y5=l(),lr=r("div"),f(va.$$.fragment),P5=l(),wa=r("p"),x5=a("Postprocess will receive the raw outputs of the "),Gm=r("code"),$5=a("_forward"),E5=a(` method, generally tensors, and reformat them into
something more friendly. Generally it will output a list or a dict or results (containing just strings and
numbers).`),q5=l(),dr=r("div"),f(ka.$$.fragment),C5=l(),Ta=r("p"),A5=a("Scikit / Keras interface to transformers\u2019 pipelines. This method will forward to "),Nm=r("strong"),z5=a("call"),D5=a("()."),I5=l(),pr=r("div"),f(ya.$$.fragment),j5=l(),Qt=r("p"),S5=a("Preprocess will take the "),Om=r("code"),M5=a("input_"),F5=a(` of a specific pipeline and return a dictionnary of everything necessary for
`),Rm=r("code"),L5=a("_forward"),U5=a(" to run properly. It should contain at least one tensor, but might have arbitrary other items."),G5=l(),cr=r("div"),f(Pa.$$.fragment),N5=l(),Wm=r("p"),O5=a("Save the pipeline\u2019s model and tokenizer."),R5=l(),mr=r("div"),f(xa.$$.fragment),W5=l(),$a=r("p"),H5=a("Scikit / Keras interface to transformers\u2019 pipelines. This method will forward to "),Hm=r("strong"),Q5=a("call"),V5=a("()."),this.h()},l(t){const c=$6('[data-svelte="svelte-1phssyn"]',document.head);x=o(c,"META",{name:!0,content:!0}),c.forEach(n),_e=d(t),q=o(t,"H1",{class:!0});var Ea=s(q);S=o(Ea,"A",{id:!0,class:!0,href:!0});var Qm=s(S);me=o(Qm,"SPAN",{});var Z5=s(me);h($.$$.fragment,Z5),Z5.forEach(n),Qm.forEach(n),O=d(Ea),ye=o(Ea,"SPAN",{});var Y5=s(ye);Dg=i(Y5,"Pipelines"),Y5.forEach(n),Ea.forEach(n),Vm=d(t),Vt=o(t,"P",{});var Ah=s(Vt);Ig=i(Ah,`The pipelines are a great and easy way to use models for inference. These pipelines are objects that abstract most of
the complex code from the library, offering a simple API dedicated to several tasks, including Named Entity
Recognition, Masked Language Modeling, Sentiment Analysis, Feature Extraction and Question Answering. See the
`),Aa=o(Ah,"A",{href:!0});var X5=s(Aa);jg=i(X5,"task summary"),X5.forEach(n),Sg=i(Ah," for examples of use."),Ah.forEach(n),Bm=d(t),za=o(t,"P",{});var K5=s(za);Mg=i(K5,"There are two categories of pipeline abstractions to be aware about:"),K5.forEach(n),Zm=d(t),Bt=o(t,"UL",{});var zh=s(Bt);xl=o(zh,"LI",{});var J5=s(xl);br=o(J5,"P",{});var Dh=s(br);Fg=i(Dh,"The "),Da=o(Dh,"A",{href:!0});var e4=s(Da);Lg=i(e4,"pipeline()"),e4.forEach(n),Ug=i(Dh," which is the most powerful object encapsulating all other pipelines."),Dh.forEach(n),J5.forEach(n),Gg=d(zh),vr=o(zh,"LI",{});var Ih=s(vr);$l=o(Ih,"P",{});var t4=s($l);Ng=i(t4,"The other task-specific pipelines:"),t4.forEach(n),Og=d(Ih),w=o(Ih,"UL",{});var k=s(w);El=o(k,"LI",{});var n4=s(El);Ia=o(n4,"A",{href:!0});var r4=s(Ia);Rg=i(r4,"AudioClassificationPipeline"),r4.forEach(n),n4.forEach(n),Wg=d(k),ql=o(k,"LI",{});var o4=s(ql);ja=o(o4,"A",{href:!0});var s4=s(ja);Hg=i(s4,"AutomaticSpeechRecognitionPipeline"),s4.forEach(n),o4.forEach(n),Qg=d(k),Cl=o(k,"LI",{});var a4=s(Cl);Sa=o(a4,"A",{href:!0});var i4=s(Sa);Vg=i(i4,"ConversationalPipeline"),i4.forEach(n),a4.forEach(n),Bg=d(k),Al=o(k,"LI",{});var l4=s(Al);Ma=o(l4,"A",{href:!0});var d4=s(Ma);Zg=i(d4,"FeatureExtractionPipeline"),d4.forEach(n),l4.forEach(n),Yg=d(k),zl=o(k,"LI",{});var p4=s(zl);Fa=o(p4,"A",{href:!0});var c4=s(Fa);Xg=i(c4,"FillMaskPipeline"),c4.forEach(n),p4.forEach(n),Kg=d(k),Dl=o(k,"LI",{});var m4=s(Dl);La=o(m4,"A",{href:!0});var f4=s(La);Jg=i(f4,"ImageClassificationPipeline"),f4.forEach(n),m4.forEach(n),e_=d(k),Il=o(k,"LI",{});var h4=s(Il);Ua=o(h4,"A",{href:!0});var u4=s(Ua);t_=i(u4,"ImageSegmentationPipeline"),u4.forEach(n),h4.forEach(n),n_=d(k),jl=o(k,"LI",{});var g4=s(jl);Ga=o(g4,"A",{href:!0});var _4=s(Ga);r_=i(_4,"ObjectDetectionPipeline"),_4.forEach(n),g4.forEach(n),o_=d(k),Sl=o(k,"LI",{});var b4=s(Sl);Na=o(b4,"A",{href:!0});var v4=s(Na);s_=i(v4,"QuestionAnsweringPipeline"),v4.forEach(n),b4.forEach(n),a_=d(k),Ml=o(k,"LI",{});var w4=s(Ml);Oa=o(w4,"A",{href:!0});var k4=s(Oa);i_=i(k4,"SummarizationPipeline"),k4.forEach(n),w4.forEach(n),l_=d(k),Fl=o(k,"LI",{});var T4=s(Fl);Ra=o(T4,"A",{href:!0});var y4=s(Ra);d_=i(y4,"TableQuestionAnsweringPipeline"),y4.forEach(n),T4.forEach(n),p_=d(k),Ll=o(k,"LI",{});var P4=s(Ll);Wa=o(P4,"A",{href:!0});var x4=s(Wa);c_=i(x4,"TextClassificationPipeline"),x4.forEach(n),P4.forEach(n),m_=d(k),Ul=o(k,"LI",{});var $4=s(Ul);Ha=o($4,"A",{href:!0});var E4=s(Ha);f_=i(E4,"TextGenerationPipeline"),E4.forEach(n),$4.forEach(n),h_=d(k),Gl=o(k,"LI",{});var q4=s(Gl);Qa=o(q4,"A",{href:!0});var C4=s(Qa);u_=i(C4,"Text2TextGenerationPipeline"),C4.forEach(n),q4.forEach(n),g_=d(k),Nl=o(k,"LI",{});var A4=s(Nl);Va=o(A4,"A",{href:!0});var z4=s(Va);__=i(z4,"TokenClassificationPipeline"),z4.forEach(n),A4.forEach(n),b_=d(k),Ol=o(k,"LI",{});var D4=s(Ol);Ba=o(D4,"A",{href:!0});var I4=s(Ba);v_=i(I4,"TranslationPipeline"),I4.forEach(n),D4.forEach(n),w_=d(k),Rl=o(k,"LI",{});var j4=s(Rl);Za=o(j4,"A",{href:!0});var S4=s(Za);k_=i(S4,"ZeroShotClassificationPipeline"),S4.forEach(n),j4.forEach(n),T_=d(k),Wl=o(k,"LI",{});var M4=s(Wl);Ya=o(M4,"A",{href:!0});var F4=s(Ya);y_=i(F4,"ZeroShotImageClassificationPipeline"),F4.forEach(n),M4.forEach(n),k.forEach(n),Ih.forEach(n),zh.forEach(n),Ym=d(t),Ve=o(t,"H2",{class:!0});var jh=s(Ve);Zt=o(jh,"A",{id:!0,class:!0,href:!0});var L4=s(Zt);Hl=o(L4,"SPAN",{});var U4=s(Hl);h(wr.$$.fragment,U4),U4.forEach(n),L4.forEach(n),P_=d(jh),Ql=o(jh,"SPAN",{});var G4=s(Ql);x_=i(G4,"The pipeline abstraction"),G4.forEach(n),jh.forEach(n),Xm=d(t),Yt=o(t,"P",{});var Sh=s(Yt);$_=i(Sh,"The "),Vl=o(Sh,"EM",{});var N4=s(Vl);E_=i(N4,"pipeline"),N4.forEach(n),q_=i(Sh,` abstraction is a wrapper around all the other available pipelines. It is instantiated as any other
pipeline but can provide additional quality of life.`),Sh.forEach(n),Km=d(t),Xa=o(t,"P",{});var O4=s(Xa);C_=i(O4,"Simple call on one item:"),O4.forEach(n),Jm=d(t),h(kr.$$.fragment,t),ef=d(t),Xt=o(t,"P",{});var Mh=s(Xt);A_=i(Mh,"If you want to use a specific model from the "),Tr=o(Mh,"A",{href:!0,rel:!0});var R4=s(Tr);z_=i(R4,"hub"),R4.forEach(n),D_=i(Mh,` you can ignore the task if the model on
the hub already defines it:`),Mh.forEach(n),tf=d(t),h(yr.$$.fragment,t),nf=d(t),Kt=o(t,"P",{});var Fh=s(Kt);I_=i(Fh,"To call a pipeline on many items, you can either call with a "),Bl=o(Fh,"EM",{});var W4=s(Bl);j_=i(W4,"list"),W4.forEach(n),S_=i(Fh,"."),Fh.forEach(n),rf=d(t),h(Pr.$$.fragment,t),of=d(t),Jt=o(t,"P",{});var Lh=s(Jt);M_=i(Lh,"To iterate of full datasets it is recommended to use a "),Zl=o(Lh,"CODE",{});var H4=s(Zl);F_=i(H4,"dataset"),H4.forEach(n),L_=i(Lh,` directly. This means you don\u2019t need to allocate
the whole dataset at once, nor do you need to do batching yourself. This should work just as fast as custom loops on
GPU. If it doesn\u2019t don\u2019t hesitate to create an issue.`),Lh.forEach(n),sf=d(t),h(xr.$$.fragment,t),af=d(t),Ka=o(t,"P",{});var Q4=s(Ka);U_=i(Q4,"For ease of use, a generator is also possible:"),Q4.forEach(n),lf=d(t),h($r.$$.fragment,t),df=d(t),R=o(t,"DIV",{class:!0});var ve=s(R);h(Er.$$.fragment,ve),G_=d(ve),qr=o(ve,"P",{});var Uh=s(qr);N_=i(Uh,"Utility factory method to build a "),Ja=o(Uh,"A",{href:!0});var V4=s(Ja);O_=i(V4,"Pipeline"),V4.forEach(n),R_=i(Uh,"."),Uh.forEach(n),W_=d(ve),Yl=o(ve,"P",{});var B4=s(Yl);H_=i(B4,"Pipelines are made of:"),B4.forEach(n),Q_=d(ve),Be=o(ve,"UL",{});var Wi=s(Be);Cr=o(Wi,"LI",{});var Gh=s(Cr);V_=i(Gh,"A "),ei=o(Gh,"A",{href:!0});var Z4=s(ei);B_=i(Z4,"tokenizer"),Z4.forEach(n),Z_=i(Gh," in charge of mapping raw textual input to token."),Gh.forEach(n),Y_=d(Wi),Ar=o(Wi,"LI",{});var Nh=s(Ar);X_=i(Nh,"A "),ti=o(Nh,"A",{href:!0});var Y4=s(ti);K_=i(Y4,"model"),Y4.forEach(n),J_=i(Nh," to make predictions from the inputs."),Nh.forEach(n),eb=d(Wi),Xl=o(Wi,"LI",{});var X4=s(Xl);tb=i(X4,"Some (optional) post processing for enhancing model\u2019s output."),X4.forEach(n),Wi.forEach(n),nb=d(ve),Kl=o(ve,"P",{});var K4=s(Kl);rb=i(K4,"Examples:"),K4.forEach(n),ob=d(ve),h(zr.$$.fragment,ve),ve.forEach(n),pf=d(t),Ze=o(t,"H2",{class:!0});var Oh=s(Ze);en=o(Oh,"A",{id:!0,class:!0,href:!0});var J4=s(en);Jl=o(J4,"SPAN",{});var e$=s(Jl);h(Dr.$$.fragment,e$),e$.forEach(n),J4.forEach(n),sb=d(Oh),ed=o(Oh,"SPAN",{});var t$=s(ed);ab=i(t$,"Pipeline batching"),t$.forEach(n),Oh.forEach(n),cf=d(t),qe=o(t,"P",{});var Hi=s(qe);ib=i(Hi,`All pipelines can use batching. This will work
whenever the pipeline uses its streaming ability (so when passing lists or `),td=o(Hi,"CODE",{});var n$=s(td);lb=i(n$,"Dataset"),n$.forEach(n),db=i(Hi," or "),nd=o(Hi,"CODE",{});var r$=s(nd);pb=i(r$,"generator"),r$.forEach(n),cb=i(Hi,")."),Hi.forEach(n),mf=d(t),h(Ir.$$.fragment,t),ff=d(t),h(tn.$$.fragment,t),hf=d(t),h(jr.$$.fragment,t),uf=d(t),h(Sr.$$.fragment,t),gf=d(t),ni=o(t,"P",{});var o$=s(ni);mb=i(o$,"Example where it\u2019s most a slowdown:"),o$.forEach(n),_f=d(t),h(Mr.$$.fragment,t),bf=d(t),nn=o(t,"P",{});var Rh=s(nn);fb=i(Rh,"This is a occasional very long sentence compared to the other. In that case, the "),rd=o(Rh,"STRONG",{});var s$=s(rd);hb=i(s$,"whole"),s$.forEach(n),ub=i(Rh,` batch will need to be 400
tokens long, so the whole batch will be [64, 400] instead of [64, 4], leading to the high slowdown. Even worse, on
bigger batches, the program simply crashes.`),Rh.forEach(n),vf=d(t),h(Fr.$$.fragment,t),wf=d(t),ri=o(t,"P",{});var a$=s(ri);gb=i(a$,`There are no good (general) solutions for this problem, and your mileage may vary depending on your use cases. Rule of
thumb:`),a$.forEach(n),kf=d(t),oi=o(t,"P",{});var i$=s(oi);_b=i(i$,"For users, a rule of thumb is:"),i$.forEach(n),Tf=d(t),ie=o(t,"UL",{});var Se=s(ie);od=o(Se,"LI",{});var l$=s(od);sd=o(l$,"P",{});var d$=s(sd);ad=o(d$,"STRONG",{});var p$=s(ad);bb=i(p$,`Measure performance on your load, with your hardware. Measure, measure, and keep measuring. Real numbers are the
only way to go.`),p$.forEach(n),d$.forEach(n),l$.forEach(n),vb=d(Se),id=o(Se,"LI",{});var c$=s(id);ld=o(c$,"P",{});var m$=s(ld);wb=i(m$,"If you are latency constrained (live product doing inference), don\u2019t batch"),m$.forEach(n),c$.forEach(n),kb=d(Se),dd=o(Se,"LI",{});var f$=s(dd);pd=o(f$,"P",{});var h$=s(pd);Tb=i(h$,"If you are using CPU, don\u2019t batch."),h$.forEach(n),f$.forEach(n),yb=d(Se),Lr=o(Se,"LI",{});var Wh=s(Lr);cd=o(Wh,"P",{});var u$=s(cd);Pb=i(u$,"If you are using throughput (you want to run your model on a bunch of static data), on GPU, then:"),u$.forEach(n),xb=d(Wh),Ye=o(Wh,"UL",{});var Qi=s(Ye);md=o(Qi,"LI",{});var g$=s(md);$b=i(g$,`If you have no clue about the size of the sequence_length (\u201Cnatural\u201D data), by default don\u2019t batch, measure and
try tentatively to add it, add OOM checks to recover when it will fail (and it will at some point if you don\u2019t
control the sequence_length.)`),g$.forEach(n),Eb=d(Qi),fd=o(Qi,"LI",{});var _$=s(fd);qb=i(_$,`If your sequence_length is super regular, then batching is more likely to be VERY interesting, measure and push
it until you get OOMs.`),_$.forEach(n),Cb=d(Qi),hd=o(Qi,"LI",{});var b$=s(hd);Ab=i(b$,"The larger the GPU the more likely batching is going to be more interesting"),b$.forEach(n),Qi.forEach(n),Wh.forEach(n),zb=d(Se),ud=o(Se,"LI",{});var v$=s(ud);gd=o(v$,"P",{});var w$=s(gd);Db=i(w$,"As soon as you enable batching, make sure you can handle OOMs nicely."),w$.forEach(n),v$.forEach(n),Se.forEach(n),yf=d(t),Xe=o(t,"H2",{class:!0});var Hh=s(Xe);rn=o(Hh,"A",{id:!0,class:!0,href:!0});var k$=s(rn);_d=o(k$,"SPAN",{});var T$=s(_d);h(Ur.$$.fragment,T$),T$.forEach(n),k$.forEach(n),Ib=d(Hh),bd=o(Hh,"SPAN",{});var y$=s(bd);jb=i(y$,"Pipeline chunk batching"),y$.forEach(n),Hh.forEach(n),Pf=d(t),Pe=o(t,"P",{});var qa=s(Pe);vd=o(qa,"CODE",{});var P$=s(vd);Sb=i(P$,"zero-shot-classification"),P$.forEach(n),Mb=i(qa," and "),wd=o(qa,"CODE",{});var x$=s(wd);Fb=i(x$,"question-answering"),x$.forEach(n),Lb=i(qa,` are slightly specific in the sense, that a single input might yield
multiple forward pass of a model. Under normal circumstances, this would yield issues with `),kd=o(qa,"CODE",{});var $$=s(kd);Ub=i($$,"batch_size"),$$.forEach(n),Gb=i(qa," argument."),qa.forEach(n),xf=d(t),Ce=o(t,"P",{});var Vi=s(Ce);Nb=i(Vi,"In order to circumvent this issue, both of these pipelines are a bit specific, they are "),Td=o(Vi,"CODE",{});var E$=s(Td);Ob=i(E$,"ChunkPipeline"),E$.forEach(n),Rb=i(Vi,` instead of
regular `),yd=o(Vi,"CODE",{});var q$=s(yd);Wb=i(q$,"Pipeline"),q$.forEach(n),Hb=i(Vi,". In short:"),Vi.forEach(n),$f=d(t),h(Gr.$$.fragment,t),Ef=d(t),si=o(t,"P",{});var C$=s(si);Qb=i(C$,"Now becomes:"),C$.forEach(n),qf=d(t),h(Nr.$$.fragment,t),Cf=d(t),ai=o(t,"P",{});var A$=s(ai);Vb=i(A$,`This should be very transparent to your code because the pipelines are used in
the same way.`),A$.forEach(n),Af=d(t),on=o(t,"P",{});var Qh=s(on);Bb=i(Qh,`This is a simplified view, since the pipeline can handle automatically the batch to ! Meaning you don\u2019t have to care
about how many forward passes you inputs are actually going to trigger, you can optimize the `),Pd=o(Qh,"CODE",{});var z$=s(Pd);Zb=i(z$,"batch_size"),z$.forEach(n),Yb=i(Qh,`
independently of the inputs. The caveats from the previous section still apply.`),Qh.forEach(n),zf=d(t),Ke=o(t,"H2",{class:!0});var Vh=s(Ke);sn=o(Vh,"A",{id:!0,class:!0,href:!0});var D$=s(sn);xd=o(D$,"SPAN",{});var I$=s(xd);h(Or.$$.fragment,I$),I$.forEach(n),D$.forEach(n),Xb=d(Vh),$d=o(Vh,"SPAN",{});var j$=s($d);Kb=i(j$,"Pipeline custom code"),j$.forEach(n),Vh.forEach(n),Df=d(t),ii=o(t,"P",{});var S$=s(ii);Jb=i(S$,"If you want to override a specific pipeline."),S$.forEach(n),If=d(t),an=o(t,"P",{});var Bh=s(an);e1=i(Bh,`Don\u2019t hesitate to create an issue for your task at hand, the goal of the pipeline is to be easy to use and support most
cases, so `),Ed=o(Bh,"CODE",{});var M$=s(Ed);t1=i(M$,"transformers"),M$.forEach(n),n1=i(Bh," could maybe support your use case."),Bh.forEach(n),jf=d(t),li=o(t,"P",{});var F$=s(li);r1=i(F$,"If you want to try simply you can:"),F$.forEach(n),Sf=d(t),di=o(t,"UL",{});var L$=s(di);qd=o(L$,"LI",{});var U$=s(qd);o1=i(U$,"Subclass your pipeline of choice"),U$.forEach(n),L$.forEach(n),Mf=d(t),h(Rr.$$.fragment,t),Ff=d(t),pi=o(t,"P",{});var G$=s(pi);s1=i(G$,"That should enable you to do all the custom code you want."),G$.forEach(n),Lf=d(t),Je=o(t,"H2",{class:!0});var Zh=s(Je);ln=o(Zh,"A",{id:!0,class:!0,href:!0});var N$=s(ln);Cd=o(N$,"SPAN",{});var O$=s(Cd);h(Wr.$$.fragment,O$),O$.forEach(n),N$.forEach(n),a1=d(Zh),Ad=o(Zh,"SPAN",{});var R$=s(Ad);i1=i(R$,"Implementing a pipeline"),R$.forEach(n),Zh.forEach(n),Uf=d(t),ci=o(t,"P",{});var W$=s(ci);mi=o(W$,"A",{href:!0});var H$=s(mi);l1=i(H$,"Implementing a new pipeline"),H$.forEach(n),W$.forEach(n),Gf=d(t),et=o(t,"H2",{class:!0});var Yh=s(et);dn=o(Yh,"A",{id:!0,class:!0,href:!0});var Q$=s(dn);zd=o(Q$,"SPAN",{});var V$=s(zd);h(Hr.$$.fragment,V$),V$.forEach(n),Q$.forEach(n),d1=d(Yh),Dd=o(Yh,"SPAN",{});var B$=s(Dd);p1=i(B$,"The task specific pipelines"),B$.forEach(n),Yh.forEach(n),Nf=d(t),tt=o(t,"H3",{class:!0});var Xh=s(tt);pn=o(Xh,"A",{id:!0,class:!0,href:!0});var Z$=s(pn);Id=o(Z$,"SPAN",{});var Y$=s(Id);h(Qr.$$.fragment,Y$),Y$.forEach(n),Z$.forEach(n),c1=d(Xh),jd=o(Xh,"SPAN",{});var X$=s(jd);m1=i(X$,"AudioClassificationPipeline"),X$.forEach(n),Xh.forEach(n),Of=d(t),J=o(t,"DIV",{class:!0});var Me=s(J);h(Vr.$$.fragment,Me),f1=d(Me),Br=o(Me,"P",{});var Kh=s(Br);h1=i(Kh,"Audio classification pipeline using any "),Sd=o(Kh,"CODE",{});var K$=s(Sd);u1=i(K$,"AutoModelForAudioClassification"),K$.forEach(n),g1=i(Kh,`. This pipeline predicts the class of a
raw waveform or an audio file. In case of an audio file, ffmpeg should be installed to support multiple audio
formats.`),Kh.forEach(n),_1=d(Me),nt=o(Me,"P",{});var Bi=s(nt);b1=i(Bi,"This pipeline can currently be loaded from "),fi=o(Bi,"A",{href:!0});var J$=s(fi);v1=i(J$,"pipeline()"),J$.forEach(n),w1=i(Bi,` using the following task identifier:
`),Md=o(Bi,"CODE",{});var eE=s(Md);k1=i(eE,'"audio-classification"'),eE.forEach(n),T1=i(Bi,"."),Bi.forEach(n),y1=d(Me),Zr=o(Me,"P",{});var Jh=s(Zr);P1=i(Jh,`See the list of available models on
`),Yr=o(Jh,"A",{href:!0,rel:!0});var tE=s(Yr);x1=i(tE,"huggingface.co/models"),tE.forEach(n),$1=i(Jh,"."),Jh.forEach(n),E1=d(Me),cn=o(Me,"DIV",{class:!0});var eu=s(cn);h(Xr.$$.fragment,eu),q1=d(eu),Kr=o(eu,"P",{});var tu=s(Kr);C1=i(tu,"Classify the sequence(s) given as inputs. See the "),hi=o(tu,"A",{href:!0});var nE=s(hi);A1=i(nE,"AutomaticSpeechRecognitionPipeline"),nE.forEach(n),z1=i(tu,` documentation for more
information.`),tu.forEach(n),eu.forEach(n),Me.forEach(n),Rf=d(t),rt=o(t,"H3",{class:!0});var nu=s(rt);mn=o(nu,"A",{id:!0,class:!0,href:!0});var rE=s(mn);Fd=o(rE,"SPAN",{});var oE=s(Fd);h(Jr.$$.fragment,oE),oE.forEach(n),rE.forEach(n),D1=d(nu),Ld=o(nu,"SPAN",{});var sE=s(Ld);I1=i(sE,"AutomaticSpeechRecognitionPipeline"),sE.forEach(n),nu.forEach(n),Wf=d(t),fe=o(t,"DIV",{class:!0});var fr=s(fe);h(eo.$$.fragment,fr),j1=d(fr),Ud=o(fr,"P",{});var aE=s(Ud);S1=i(aE,"Pipeline that aims at extracting spoken text contained within some audio."),aE.forEach(n),M1=d(fr),Gd=o(fr,"P",{});var iE=s(Gd);F1=i(iE,`The input can be either a raw waveform or a audio file. In case of the audio file, ffmpeg should be installed for
to support multiple audio formats`),iE.forEach(n),L1=d(fr),fn=o(fr,"DIV",{class:!0});var ru=s(fn);h(to.$$.fragment,ru),U1=d(ru),no=o(ru,"P",{});var ou=s(no);G1=i(ou,"Classify the sequence(s) given as inputs. See the "),ui=o(ou,"A",{href:!0});var lE=s(ui);N1=i(lE,"AutomaticSpeechRecognitionPipeline"),lE.forEach(n),O1=i(ou,` documentation for more
information.`),ou.forEach(n),ru.forEach(n),fr.forEach(n),Hf=d(t),ot=o(t,"H3",{class:!0});var su=s(ot);hn=o(su,"A",{id:!0,class:!0,href:!0});var dE=s(hn);Nd=o(dE,"SPAN",{});var pE=s(Nd);h(ro.$$.fragment,pE),pE.forEach(n),dE.forEach(n),R1=d(su),Od=o(su,"SPAN",{});var cE=s(Od);W1=i(cE,"ConversationalPipeline"),cE.forEach(n),su.forEach(n),Qf=d(t),z=o(t,"DIV",{class:!0});var B=s(z);h(oo.$$.fragment,B),H1=d(B),xe=o(B,"P",{});var hr=s(xe);Q1=i(hr,`Utility class containing a conversation and its history. This class is meant to be used as an input to the
`),gi=o(hr,"A",{href:!0});var mE=s(gi);V1=i(mE,"ConversationalPipeline"),mE.forEach(n),B1=i(hr,`. The conversation contains a number of utility function to manage the addition of new
user input and generated model responses. A conversation needs to contain an unprocessed user input before being
passed to the `),_i=o(hr,"A",{href:!0});var fE=s(_i);Z1=i(fE,"ConversationalPipeline"),fE.forEach(n),Y1=i(hr,`. This user input is either created when the class is instantiated, or by
calling `),Rd=o(hr,"CODE",{});var hE=s(Rd);X1=i(hE,'conversational_pipeline.append_response("input")'),hE.forEach(n),K1=i(hr," after a conversation turn."),hr.forEach(n),J1=d(B),Wd=o(B,"P",{});var uE=s(Wd);ev=i(uE,"Usage:"),uE.forEach(n),tv=d(B),h(so.$$.fragment,B),nv=d(B),un=o(B,"DIV",{class:!0});var au=s(un);h(ao.$$.fragment,au),rv=d(au),io=o(au,"P",{});var iu=s(io);ov=i(iu,"Add a user input to the conversation for the next round. This populates the internal "),Hd=o(iu,"CODE",{});var gE=s(Hd);sv=i(gE,"new_user_input"),gE.forEach(n),av=i(iu," field."),iu.forEach(n),au.forEach(n),iv=d(B),gn=o(B,"DIV",{class:!0});var lu=s(gn);h(lo.$$.fragment,lu),lv=d(lu),Qd=o(lu,"P",{});var _E=s(Qd);dv=i(_E,"Append a response to the list of generated responses."),_E.forEach(n),lu.forEach(n),pv=d(B),Ae=o(B,"DIV",{class:!0});var Zi=s(Ae);h(po.$$.fragment,Zi),cv=d(Zi),Vd=o(Zi,"P",{});var bE=s(Vd);mv=i(bE,"Iterates over all blobs of the conversation."),bE.forEach(n),fv=d(Zi),he=o(Zi,"P",{});var Fe=s(he);hv=i(Fe,"Returns: Iterator of (is_user, text_chunk) in chronological order of the conversation. "),Bd=o(Fe,"CODE",{});var vE=s(Bd);uv=i(vE,"is_user"),vE.forEach(n),gv=i(Fe," is a "),Zd=o(Fe,"CODE",{});var wE=s(Zd);_v=i(wE,"bool"),wE.forEach(n),bv=i(Fe,`,
`),Yd=o(Fe,"CODE",{});var kE=s(Yd);vv=i(kE,"text_chunks"),kE.forEach(n),wv=i(Fe," is a "),Xd=o(Fe,"CODE",{});var TE=s(Xd);kv=i(TE,"str"),TE.forEach(n),Tv=i(Fe,"."),Fe.forEach(n),Zi.forEach(n),yv=d(B),_n=o(B,"DIV",{class:!0});var du=s(_n);h(co.$$.fragment,du),Pv=d(du),$e=o(du,"P",{});var ur=s($e);xv=i(ur,"Mark the conversation as processed (moves the content of "),Kd=o(ur,"CODE",{});var yE=s(Kd);$v=i(yE,"new_user_input"),yE.forEach(n),Ev=i(ur," to "),Jd=o(ur,"CODE",{});var PE=s(Jd);qv=i(PE,"past_user_inputs"),PE.forEach(n),Cv=i(ur,`) and empties
the `),ep=o(ur,"CODE",{});var xE=s(ep);Av=i(xE,"new_user_input"),xE.forEach(n),zv=i(ur," field."),ur.forEach(n),du.forEach(n),B.forEach(n),Vf=d(t),M=o(t,"DIV",{class:!0});var le=s(M);h(mo.$$.fragment,le),Dv=d(le),tp=o(le,"P",{});var $E=s(tp);Iv=i($E,"Multi-turn conversational pipeline."),$E.forEach(n),jv=d(le),st=o(le,"P",{});var Yi=s(st);Sv=i(Yi,"This conversational pipeline can currently be loaded from "),bi=o(Yi,"A",{href:!0});var EE=s(bi);Mv=i(EE,"pipeline()"),EE.forEach(n),Fv=i(Yi,` using the following task identifier:
`),np=o(Yi,"CODE",{});var qE=s(np);Lv=i(qE,'"conversational"'),qE.forEach(n),Uv=i(Yi,"."),Yi.forEach(n),Gv=d(le),ue=o(le,"P",{});var Le=s(ue);Nv=i(Le,`The models that this pipeline can use are models that have been fine-tuned on a multi-turn conversational task,
currently: `),rp=o(Le,"EM",{});var CE=s(rp);Ov=i(CE,"\u2018microsoft/DialoGPT-small\u2019"),CE.forEach(n),Rv=i(Le,", "),op=o(Le,"EM",{});var AE=s(op);Wv=i(AE,"\u2018microsoft/DialoGPT-medium\u2019"),AE.forEach(n),Hv=i(Le,", "),sp=o(Le,"EM",{});var zE=s(sp);Qv=i(zE,"\u2018microsoft/DialoGPT-large\u2019"),zE.forEach(n),Vv=i(Le,`. See the
up-to-date list of available models on
`),fo=o(Le,"A",{href:!0,rel:!0});var DE=s(fo);Bv=i(DE,"huggingface.co/models"),DE.forEach(n),Zv=i(Le,"."),Le.forEach(n),Yv=d(le),ap=o(le,"P",{});var IE=s(ap);Xv=i(IE,"Usage:"),IE.forEach(n),Kv=d(le),h(ho.$$.fragment,le),Jv=d(le),bn=o(le,"DIV",{class:!0});var pu=s(bn);h(uo.$$.fragment,pu),ew=d(pu),ip=o(pu,"P",{});var jE=s(ip);tw=i(jE,"Generate responses for the conversation(s) given as inputs."),jE.forEach(n),pu.forEach(n),le.forEach(n),Bf=d(t),at=o(t,"H3",{class:!0});var cu=s(at);vn=o(cu,"A",{id:!0,class:!0,href:!0});var SE=s(vn);lp=o(SE,"SPAN",{});var ME=s(lp);h(go.$$.fragment,ME),ME.forEach(n),SE.forEach(n),nw=d(cu),dp=o(cu,"SPAN",{});var FE=s(dp);rw=i(FE,"FeatureExtractionPipeline"),FE.forEach(n),cu.forEach(n),Zf=d(t),ee=o(t,"DIV",{class:!0});var Ue=s(ee);h(_o.$$.fragment,Ue),ow=d(Ue),pp=o(Ue,"P",{});var LE=s(pp);sw=i(LE,`Feature extraction pipeline using no model head. This pipeline extracts the hidden states from the base
transformer, which can be used as features in downstream tasks.`),LE.forEach(n),aw=d(Ue),it=o(Ue,"P",{});var Xi=s(it);iw=i(Xi,"This feature extraction pipeline can currently be loaded from "),vi=o(Xi,"A",{href:!0});var UE=s(vi);lw=i(UE,"pipeline()"),UE.forEach(n),dw=i(Xi,` using the task identifier:
`),cp=o(Xi,"CODE",{});var GE=s(cp);pw=i(GE,'"feature-extraction"'),GE.forEach(n),cw=i(Xi,"."),Xi.forEach(n),mw=d(Ue),bo=o(Ue,"P",{});var mu=s(bo);fw=i(mu,`All models may be used for this pipeline. See a list of all models, including community-contributed models on
`),vo=o(mu,"A",{href:!0,rel:!0});var NE=s(vo);hw=i(NE,"huggingface.co/models"),NE.forEach(n),uw=i(mu,"."),mu.forEach(n),gw=d(Ue),wn=o(Ue,"DIV",{class:!0});var fu=s(wn);h(wo.$$.fragment,fu),_w=d(fu),mp=o(fu,"P",{});var OE=s(mp);bw=i(OE,"Extract the features of the input(s)."),OE.forEach(n),fu.forEach(n),Ue.forEach(n),Yf=d(t),lt=o(t,"H3",{class:!0});var hu=s(lt);kn=o(hu,"A",{id:!0,class:!0,href:!0});var RE=s(kn);fp=o(RE,"SPAN",{});var WE=s(fp);h(ko.$$.fragment,WE),WE.forEach(n),RE.forEach(n),vw=d(hu),hp=o(hu,"SPAN",{});var HE=s(hp);ww=i(HE,"FillMaskPipeline"),HE.forEach(n),hu.forEach(n),Xf=d(t),W=o(t,"DIV",{class:!0});var we=s(W);h(To.$$.fragment,we),kw=d(we),dt=o(we,"P",{});var Ki=s(dt);Tw=i(Ki,"Masked language modeling prediction pipeline using any "),up=o(Ki,"CODE",{});var QE=s(up);yw=i(QE,"ModelWithLMHead"),QE.forEach(n),Pw=i(Ki,". See the "),wi=o(Ki,"A",{href:!0});var VE=s(wi);xw=i(VE,`masked language modeling
examples`),VE.forEach(n),$w=i(Ki," for more information."),Ki.forEach(n),Ew=d(we),pt=o(we,"P",{});var Ji=s(pt);qw=i(Ji,"This mask filling pipeline can currently be loaded from "),ki=o(Ji,"A",{href:!0});var BE=s(ki);Cw=i(BE,"pipeline()"),BE.forEach(n),Aw=i(Ji,` using the following task identifier:
`),gp=o(Ji,"CODE",{});var ZE=s(gp);zw=i(ZE,'"fill-mask"'),ZE.forEach(n),Dw=i(Ji,"."),Ji.forEach(n),Iw=d(we),yo=o(we,"P",{});var uu=s(yo);jw=i(uu,`The models that this pipeline can use are models that have been trained with a masked language modeling objective,
which includes the bi-directional models in the library. See the up-to-date list of available models on
`),Po=o(uu,"A",{href:!0,rel:!0});var YE=s(Po);Sw=i(YE,"huggingface.co/models"),YE.forEach(n),Mw=i(uu,"."),uu.forEach(n),Fw=d(we),h(Tn.$$.fragment,we),Lw=d(we),yn=o(we,"DIV",{class:!0});var gu=s(yn);h(xo.$$.fragment,gu),Uw=d(gu),_p=o(gu,"P",{});var XE=s(_p);Gw=i(XE,"Fill the masked token in the text(s) given as inputs."),XE.forEach(n),gu.forEach(n),we.forEach(n),Kf=d(t),ct=o(t,"H3",{class:!0});var _u=s(ct);Pn=o(_u,"A",{id:!0,class:!0,href:!0});var KE=s(Pn);bp=o(KE,"SPAN",{});var JE=s(bp);h($o.$$.fragment,JE),JE.forEach(n),KE.forEach(n),Nw=d(_u),vp=o(_u,"SPAN",{});var e3=s(vp);Ow=i(e3,"ImageClassificationPipeline"),e3.forEach(n),_u.forEach(n),Jf=d(t),te=o(t,"DIV",{class:!0});var Ge=s(te);h(Eo.$$.fragment,Ge),Rw=d(Ge),qo=o(Ge,"P",{});var bu=s(qo);Ww=i(bu,"Image classification pipeline using any "),wp=o(bu,"CODE",{});var t3=s(wp);Hw=i(t3,"AutoModelForImageClassification"),t3.forEach(n),Qw=i(bu,`. This pipeline predicts the class of an
image.`),bu.forEach(n),Vw=d(Ge),mt=o(Ge,"P",{});var el=s(mt);Bw=i(el,"This image classification pipeline can currently be loaded from "),Ti=o(el,"A",{href:!0});var n3=s(Ti);Zw=i(n3,"pipeline()"),n3.forEach(n),Yw=i(el,` using the following task identifier:
`),kp=o(el,"CODE",{});var r3=s(kp);Xw=i(r3,'"image-classification"'),r3.forEach(n),Kw=i(el,"."),el.forEach(n),Jw=d(Ge),Co=o(Ge,"P",{});var vu=s(Co);e0=i(vu,`See the list of available models on
`),Ao=o(vu,"A",{href:!0,rel:!0});var o3=s(Ao);t0=i(o3,"huggingface.co/models"),o3.forEach(n),n0=i(vu,"."),vu.forEach(n),r0=d(Ge),xn=o(Ge,"DIV",{class:!0});var wu=s(xn);h(zo.$$.fragment,wu),o0=d(wu),Tp=o(wu,"P",{});var s3=s(Tp);s0=i(s3,"Assign labels to the image(s) passed as inputs."),s3.forEach(n),wu.forEach(n),Ge.forEach(n),eh=d(t),ft=o(t,"H3",{class:!0});var ku=s(ft);$n=o(ku,"A",{id:!0,class:!0,href:!0});var a3=s($n);yp=o(a3,"SPAN",{});var i3=s(yp);h(Do.$$.fragment,i3),i3.forEach(n),a3.forEach(n),a0=d(ku),Pp=o(ku,"SPAN",{});var l3=s(Pp);i0=i(l3,"ImageSegmentationPipeline"),l3.forEach(n),ku.forEach(n),th=d(t),ne=o(t,"DIV",{class:!0});var Ne=s(ne);h(Io.$$.fragment,Ne),l0=d(Ne),jo=o(Ne,"P",{});var Tu=s(jo);d0=i(Tu,"Image segmentation pipeline using any "),xp=o(Tu,"CODE",{});var d3=s(xp);p0=i(d3,"AutoModelForXXXSegmentation"),d3.forEach(n),c0=i(Tu,`. This pipeline predicts masks of objects and
their classes.`),Tu.forEach(n),m0=d(Ne),ht=o(Ne,"P",{});var tl=s(ht);f0=i(tl,"This image segmentation pipeline can currently be loaded from "),yi=o(tl,"A",{href:!0});var p3=s(yi);h0=i(p3,"pipeline()"),p3.forEach(n),u0=i(tl,` using the following task identifier:
`),$p=o(tl,"CODE",{});var c3=s($p);g0=i(c3,'"image-segmentation"'),c3.forEach(n),_0=i(tl,"."),tl.forEach(n),b0=d(Ne),So=o(Ne,"P",{});var yu=s(So);v0=i(yu,`See the list of available models on
`),Mo=o(yu,"A",{href:!0,rel:!0});var m3=s(Mo);w0=i(m3,"huggingface.co/models"),m3.forEach(n),k0=i(yu,"."),yu.forEach(n),T0=d(Ne),En=o(Ne,"DIV",{class:!0});var Pu=s(En);h(Fo.$$.fragment,Pu),y0=d(Pu),Ep=o(Pu,"P",{});var f3=s(Ep);P0=i(f3,"Perform segmentation (detect masks & classes) in the image(s) passed as inputs."),f3.forEach(n),Pu.forEach(n),Ne.forEach(n),nh=d(t),ut=o(t,"H3",{class:!0});var xu=s(ut);qn=o(xu,"A",{id:!0,class:!0,href:!0});var h3=s(qn);qp=o(h3,"SPAN",{});var u3=s(qp);h(Lo.$$.fragment,u3),u3.forEach(n),h3.forEach(n),x0=d(xu),Cp=o(xu,"SPAN",{});var g3=s(Cp);$0=i(g3,"NerPipeline"),g3.forEach(n),xu.forEach(n),rh=d(t),D=o(t,"DIV",{class:!0});var Z=s(D);h(Uo.$$.fragment,Z),E0=d(Z),gt=o(Z,"P",{});var nl=s(gt);q0=i(nl,"Named Entity Recognition pipeline using any "),Ap=o(nl,"CODE",{});var _3=s(Ap);C0=i(_3,"ModelForTokenClassification"),_3.forEach(n),A0=i(nl,". See the "),Pi=o(nl,"A",{href:!0});var b3=s(Pi);z0=i(b3,`named entity recognition
examples`),b3.forEach(n),D0=i(nl," for more information."),nl.forEach(n),I0=d(Z),_t=o(Z,"P",{});var rl=s(_t);j0=i(rl,"This token recognition pipeline can currently be loaded from "),xi=o(rl,"A",{href:!0});var v3=s(xi);S0=i(v3,"pipeline()"),v3.forEach(n),M0=i(rl,` using the following task identifier:
`),zp=o(rl,"CODE",{});var w3=s(zp);F0=i(w3,'"ner"'),w3.forEach(n),L0=i(rl," (for predicting the classes of tokens in a sequence: person, organisation, location or miscellaneous)."),rl.forEach(n),U0=d(Z),Go=o(Z,"P",{});var $u=s(Go);G0=i($u,`The models that this pipeline can use are models that have been fine-tuned on a token classification task. See the
up-to-date list of available models on
`),No=o($u,"A",{href:!0,rel:!0});var k3=s(No);N0=i(k3,"huggingface.co/models"),k3.forEach(n),O0=i($u,"."),$u.forEach(n),R0=d(Z),ze=o(Z,"DIV",{class:!0});var ol=s(ze);h(Oo.$$.fragment,ol),W0=d(ol),Dp=o(ol,"P",{});var T3=s(Dp);H0=i(T3,"Override tokens from a given word that disagree to force agreement on word boundaries."),T3.forEach(n),Q0=d(ol),Ip=o(ol,"P",{});var y3=s(Ip);V0=i(y3,`Example: micro|soft| com|pany| B-ENT I-NAME I-ENT I-ENT will be rewritten with first strategy as microsoft|
company| B-ENT I-ENT`),y3.forEach(n),ol.forEach(n),B0=d(Z),Cn=o(Z,"DIV",{class:!0});var Eu=s(Cn);h(Ro.$$.fragment,Eu),Z0=d(Eu),jp=o(Eu,"P",{});var P3=s(jp);Y0=i(P3,"Fuse various numpy arrays into dicts with all the information needed for aggregation"),P3.forEach(n),Eu.forEach(n),X0=d(Z),An=o(Z,"DIV",{class:!0});var qu=s(An);h(Wo.$$.fragment,qu),K0=d(qu),Sp=o(qu,"P",{});var x3=s(Sp);J0=i(x3,"Find and group together the adjacent tokens with the same entity predicted."),x3.forEach(n),qu.forEach(n),ek=d(Z),zn=o(Z,"DIV",{class:!0});var Cu=s(zn);h(Ho.$$.fragment,Cu),tk=d(Cu),Mp=o(Cu,"P",{});var $3=s(Mp);nk=i($3,"Group together the adjacent tokens with the same entity predicted."),$3.forEach(n),Cu.forEach(n),Z.forEach(n),oh=d(t),Dn=o(t,"P",{});var Au=s(Dn);rk=i(Au,"See "),$i=o(Au,"A",{href:!0});var E3=s($i);ok=i(E3,"TokenClassificationPipeline"),E3.forEach(n),sk=i(Au," for all details."),Au.forEach(n),sh=d(t),bt=o(t,"H3",{class:!0});var zu=s(bt);In=o(zu,"A",{id:!0,class:!0,href:!0});var q3=s(In);Fp=o(q3,"SPAN",{});var C3=s(Fp);h(Qo.$$.fragment,C3),C3.forEach(n),q3.forEach(n),ak=d(zu),Lp=o(zu,"SPAN",{});var A3=s(Lp);ik=i(A3,"ObjectDetectionPipeline"),A3.forEach(n),zu.forEach(n),ah=d(t),re=o(t,"DIV",{class:!0});var Oe=s(re);h(Vo.$$.fragment,Oe),lk=d(Oe),Bo=o(Oe,"P",{});var Du=s(Bo);dk=i(Du,"Object detection pipeline using any "),Up=o(Du,"CODE",{});var z3=s(Up);pk=i(z3,"AutoModelForObjectDetection"),z3.forEach(n),ck=i(Du,`. This pipeline predicts bounding boxes of objects
and their classes.`),Du.forEach(n),mk=d(Oe),vt=o(Oe,"P",{});var sl=s(vt);fk=i(sl,"This object detection pipeline can currently be loaded from "),Ei=o(sl,"A",{href:!0});var D3=s(Ei);hk=i(D3,"pipeline()"),D3.forEach(n),uk=i(sl,` using the following task identifier:
`),Gp=o(sl,"CODE",{});var I3=s(Gp);gk=i(I3,'"object-detection"'),I3.forEach(n),_k=i(sl,"."),sl.forEach(n),bk=d(Oe),Zo=o(Oe,"P",{});var Iu=s(Zo);vk=i(Iu,"See the list of available models on "),Yo=o(Iu,"A",{href:!0,rel:!0});var j3=s(Yo);wk=i(j3,"huggingface.co/models"),j3.forEach(n),kk=i(Iu,"."),Iu.forEach(n),Tk=d(Oe),jn=o(Oe,"DIV",{class:!0});var ju=s(jn);h(Xo.$$.fragment,ju),yk=d(ju),Np=o(ju,"P",{});var S3=s(Np);Pk=i(S3,"Detect objects (bounding boxes & classes) in the image(s) passed as inputs."),S3.forEach(n),ju.forEach(n),Oe.forEach(n),ih=d(t),wt=o(t,"H3",{class:!0});var Su=s(wt);Sn=o(Su,"A",{id:!0,class:!0,href:!0});var M3=s(Sn);Op=o(M3,"SPAN",{});var F3=s(Op);h(Ko.$$.fragment,F3),F3.forEach(n),M3.forEach(n),xk=d(Su),Rp=o(Su,"SPAN",{});var L3=s(Rp);$k=i(L3,"QuestionAnsweringPipeline"),L3.forEach(n),Su.forEach(n),lh=d(t),I=o(t,"DIV",{class:!0});var Y=s(I);h(Jo.$$.fragment,Y),Ek=d(Y),kt=o(Y,"P",{});var al=s(kt);qk=i(al,"Question Answering pipeline using any "),Wp=o(al,"CODE",{});var U3=s(Wp);Ck=i(U3,"ModelForQuestionAnswering"),U3.forEach(n),Ak=i(al,". See the "),qi=o(al,"A",{href:!0});var G3=s(qi);zk=i(G3,`question answering
examples`),G3.forEach(n),Dk=i(al," for more information."),al.forEach(n),Ik=d(Y),Tt=o(Y,"P",{});var il=s(Tt);jk=i(il,"This question answering pipeline can currently be loaded from "),Ci=o(il,"A",{href:!0});var N3=s(Ci);Sk=i(N3,"pipeline()"),N3.forEach(n),Mk=i(il,` using the following task identifier:
`),Hp=o(il,"CODE",{});var O3=s(Hp);Fk=i(O3,'"question-answering"'),O3.forEach(n),Lk=i(il,"."),il.forEach(n),Uk=d(Y),es=o(Y,"P",{});var Mu=s(es);Gk=i(Mu,`The models that this pipeline can use are models that have been fine-tuned on a question answering task. See the
up-to-date list of available models on
`),ts=o(Mu,"A",{href:!0,rel:!0});var R3=s(ts);Nk=i(R3,"huggingface.co/models"),R3.forEach(n),Ok=i(Mu,"."),Mu.forEach(n),Rk=d(Y),Mn=o(Y,"DIV",{class:!0});var Fu=s(Mn);h(ns.$$.fragment,Fu),Wk=d(Fu),Qp=o(Fu,"P",{});var W3=s(Qp);Hk=i(W3,"Answer the question(s) given as inputs by using the context(s)."),W3.forEach(n),Fu.forEach(n),Qk=d(Y),De=o(Y,"DIV",{class:!0});var ll=s(De);h(rs.$$.fragment,ll),Vk=d(ll),yt=o(ll,"P",{});var dl=s(yt);Bk=i(dl,"QuestionAnsweringPipeline leverages the "),Vp=o(dl,"CODE",{});var H3=s(Vp);Zk=i(H3,"SquadExample"),H3.forEach(n),Yk=i(dl,` internally. This helper method encapsulate all the
logic for converting question(s) and context(s) to `),Bp=o(dl,"CODE",{});var Q3=s(Bp);Xk=i(Q3,"SquadExample"),Q3.forEach(n),Kk=i(dl,"."),dl.forEach(n),Jk=d(ll),Zp=o(ll,"P",{});var V3=s(Zp);eT=i(V3,"We currently support extractive question answering."),V3.forEach(n),ll.forEach(n),tT=d(Y),Ie=o(Y,"DIV",{class:!0});var pl=s(Ie);h(os.$$.fragment,pl),nT=d(pl),ss=o(pl,"P",{});var Lu=s(ss);rT=i(Lu,"Take the output of any "),Yp=o(Lu,"CODE",{});var B3=s(Yp);oT=i(B3,"ModelForQuestionAnswering"),B3.forEach(n),sT=i(Lu,` and will generate probabilities for each span to be the
actual answer.`),Lu.forEach(n),aT=d(pl),Xp=o(pl,"P",{});var Z3=s(Xp);iT=i(Z3,`In addition, it filters out some unwanted/impossible cases like answer len being greater than max_answer_len or
answer end position being before the starting position. The method supports output the k-best answer through
the topk argument.`),Z3.forEach(n),pl.forEach(n),lT=d(Y),Fn=o(Y,"DIV",{class:!0});var Uu=s(Fn);h(as.$$.fragment,Uu),dT=d(Uu),Kp=o(Uu,"P",{});var Y3=s(Kp);pT=i(Y3,"When decoding from token probabilities, this method maps token indexes to actual word in the initial context."),Y3.forEach(n),Uu.forEach(n),Y.forEach(n),dh=d(t),Pt=o(t,"H3",{class:!0});var Gu=s(Pt);Ln=o(Gu,"A",{id:!0,class:!0,href:!0});var X3=s(Ln);Jp=o(X3,"SPAN",{});var K3=s(Jp);h(is.$$.fragment,K3),K3.forEach(n),X3.forEach(n),cT=d(Gu),ec=o(Gu,"SPAN",{});var J3=s(ec);mT=i(J3,"SummarizationPipeline"),J3.forEach(n),Gu.forEach(n),ph=d(t),F=o(t,"DIV",{class:!0});var de=s(F);h(ls.$$.fragment,de),fT=d(de),tc=o(de,"P",{});var e9=s(tc);hT=i(e9,"Summarize news articles and other documents."),e9.forEach(n),uT=d(de),xt=o(de,"P",{});var cl=s(xt);gT=i(cl,"This summarizing pipeline can currently be loaded from "),Ai=o(cl,"A",{href:!0});var t9=s(Ai);_T=i(t9,"pipeline()"),t9.forEach(n),bT=i(cl,` using the following task identifier:
`),nc=o(cl,"CODE",{});var n9=s(nc);vT=i(n9,'"summarization"'),n9.forEach(n),wT=i(cl,"."),cl.forEach(n),kT=d(de),L=o(de,"P",{});var X=s(L);TT=i(X,`The models that this pipeline can use are models that have been fine-tuned on a summarization task, which is
currently, \u2019`),rc=o(X,"EM",{});var r9=s(rc);yT=i(r9,"bart-large-cnn"),r9.forEach(n),PT=i(X,"\u2019, \u2019"),oc=o(X,"EM",{});var o9=s(oc);xT=i(o9,"t5-small"),o9.forEach(n),$T=i(X,"\u2019, \u2019"),sc=o(X,"EM",{});var s9=s(sc);ET=i(s9,"t5-base"),s9.forEach(n),qT=i(X,"\u2019, \u2019"),ac=o(X,"EM",{});var a9=s(ac);CT=i(a9,"t5-large"),a9.forEach(n),AT=i(X,"\u2019, \u2019"),ic=o(X,"EM",{});var i9=s(ic);zT=i(i9,"t5-3b"),i9.forEach(n),DT=i(X,"\u2019, \u2019"),lc=o(X,"EM",{});var l9=s(lc);IT=i(l9,"t5-11b"),l9.forEach(n),jT=i(X,`\u2019. See the up-to-date
list of available models on `),ds=o(X,"A",{href:!0,rel:!0});var d9=s(ds);ST=i(d9,"huggingface.co/models"),d9.forEach(n),MT=i(X,"."),X.forEach(n),FT=d(de),dc=o(de,"P",{});var p9=s(dc);LT=i(p9,"Usage:"),p9.forEach(n),UT=d(de),h(ps.$$.fragment,de),GT=d(de),Un=o(de,"DIV",{class:!0});var Nu=s(Un);h(cs.$$.fragment,Nu),NT=d(Nu),pc=o(Nu,"P",{});var c9=s(pc);OT=i(c9,"Summarize the text(s) given as inputs."),c9.forEach(n),Nu.forEach(n),de.forEach(n),ch=d(t),$t=o(t,"H3",{class:!0});var Ou=s($t);Gn=o(Ou,"A",{id:!0,class:!0,href:!0});var m9=s(Gn);cc=o(m9,"SPAN",{});var f9=s(cc);h(ms.$$.fragment,f9),f9.forEach(n),m9.forEach(n),RT=d(Ou),mc=o(Ou,"SPAN",{});var h9=s(mc);WT=i(h9,"TableQuestionAnsweringPipeline"),h9.forEach(n),Ou.forEach(n),mh=d(t),oe=o(t,"DIV",{class:!0});var Re=s(oe);h(fs.$$.fragment,Re),HT=d(Re),hs=o(Re,"P",{});var Ru=s(hs);QT=i(Ru,"Table Question Answering pipeline using a "),fc=o(Ru,"CODE",{});var u9=s(fc);VT=i(u9,"ModelForTableQuestionAnswering"),u9.forEach(n),BT=i(Ru,`. This pipeline is only available in
PyTorch.`),Ru.forEach(n),ZT=d(Re),Et=o(Re,"P",{});var ml=s(Et);YT=i(ml,"This tabular question answering pipeline can currently be loaded from "),zi=o(ml,"A",{href:!0});var g9=s(zi);XT=i(g9,"pipeline()"),g9.forEach(n),KT=i(ml,` using the following task
identifier: `),hc=o(ml,"CODE",{});var _9=s(hc);JT=i(_9,'"table-question-answering"'),_9.forEach(n),ey=i(ml,"."),ml.forEach(n),ty=d(Re),us=o(Re,"P",{});var Wu=s(us);ny=i(Wu,`The models that this pipeline can use are models that have been fine-tuned on a tabular question answering task.
See the up-to-date list of available models on
`),gs=o(Wu,"A",{href:!0,rel:!0});var b9=s(gs);ry=i(b9,"huggingface.co/models"),b9.forEach(n),oy=i(Wu,"."),Wu.forEach(n),sy=d(Re),C=o(Re,"DIV",{class:!0});var G=s(C);h(_s.$$.fragment,G),ay=d(G),uc=o(G,"P",{});var v9=s(uc);iy=i(v9,"Answers queries according to a table. The pipeline accepts several types of inputs which are detailed below:"),v9.forEach(n),ly=d(G),H=o(G,"UL",{});var pe=s(H);gc=o(pe,"LI",{});var w9=s(gc);_c=o(w9,"CODE",{});var k9=s(_c);dy=i(k9,"pipeline(table, query)"),k9.forEach(n),w9.forEach(n),py=d(pe),bc=o(pe,"LI",{});var T9=s(bc);vc=o(T9,"CODE",{});var y9=s(vc);cy=i(y9,"pipeline(table, [query])"),y9.forEach(n),T9.forEach(n),my=d(pe),wc=o(pe,"LI",{});var P9=s(wc);kc=o(P9,"CODE",{});var x9=s(kc);fy=i(x9,"pipeline(table=table, query=query)"),x9.forEach(n),P9.forEach(n),hy=d(pe),Tc=o(pe,"LI",{});var $9=s(Tc);yc=o($9,"CODE",{});var E9=s(yc);uy=i(E9,"pipeline(table=table, query=[query])"),E9.forEach(n),$9.forEach(n),gy=d(pe),Pc=o(pe,"LI",{});var q9=s(Pc);xc=o(q9,"CODE",{});var C9=s(xc);_y=i(C9,'pipeline({"table": table, "query": query})'),C9.forEach(n),q9.forEach(n),by=d(pe),$c=o(pe,"LI",{});var A9=s($c);Ec=o(A9,"CODE",{});var z9=s(Ec);vy=i(z9,'pipeline({"table": table, "query": [query]})'),z9.forEach(n),A9.forEach(n),wy=d(pe),qc=o(pe,"LI",{});var D9=s(qc);Cc=o(D9,"CODE",{});var I9=s(Cc);ky=i(I9,'pipeline([{"table": table, "query": query}, {"table": table, "query": query}])'),I9.forEach(n),D9.forEach(n),pe.forEach(n),Ty=d(G),bs=o(G,"P",{});var Hu=s(bs);yy=i(Hu,"The "),Ac=o(Hu,"CODE",{});var j9=s(Ac);Py=i(j9,"table"),j9.forEach(n),xy=i(Hu," argument should be a dict or a DataFrame built from that dict, containing the whole table:"),Hu.forEach(n),$y=d(G),zc=o(G,"P",{});var S9=s(zc);Ey=i(S9,"Example:"),S9.forEach(n),qy=d(G),h(vs.$$.fragment,G),Cy=d(G),Dc=o(G,"P",{});var M9=s(Dc);Ay=i(M9,"This dictionary can be passed in as such, or can be converted to a pandas DataFrame:"),M9.forEach(n),zy=d(G),Ic=o(G,"P",{});var F9=s(Ic);Dy=i(F9,"Example:"),F9.forEach(n),Iy=d(G),h(ws.$$.fragment,G),G.forEach(n),Re.forEach(n),fh=d(t),qt=o(t,"H3",{class:!0});var Qu=s(qt);Nn=o(Qu,"A",{id:!0,class:!0,href:!0});var L9=s(Nn);jc=o(L9,"SPAN",{});var U9=s(jc);h(ks.$$.fragment,U9),U9.forEach(n),L9.forEach(n),jy=d(Qu),Sc=o(Qu,"SPAN",{});var G9=s(Sc);Sy=i(G9,"TextClassificationPipeline"),G9.forEach(n),Qu.forEach(n),hh=d(t),Q=o(t,"DIV",{class:!0});var ke=s(Q);h(Ts.$$.fragment,ke),My=d(ke),Ct=o(ke,"P",{});var fl=s(Ct);Fy=i(fl,"Text classification pipeline using any "),Mc=o(fl,"CODE",{});var N9=s(Mc);Ly=i(N9,"ModelForSequenceClassification"),N9.forEach(n),Uy=i(fl,". See the "),Di=o(fl,"A",{href:!0});var O9=s(Di);Gy=i(O9,`sequence classification
examples`),O9.forEach(n),Ny=i(fl," for more information."),fl.forEach(n),Oy=d(ke),At=o(ke,"P",{});var hl=s(At);Ry=i(hl,"This text classification pipeline can currently be loaded from "),Ii=o(hl,"A",{href:!0});var R9=s(Ii);Wy=i(R9,"pipeline()"),R9.forEach(n),Hy=i(hl,` using the following task identifier:
`),Fc=o(hl,"CODE",{});var W9=s(Fc);Qy=i(W9,'"sentiment-analysis"'),W9.forEach(n),Vy=i(hl," (for classifying sequences according to positive or negative sentiments)."),hl.forEach(n),By=d(ke),ys=o(ke,"P",{});var Vu=s(ys);Zy=i(Vu,"If multiple classification labels are available ("),Lc=o(Vu,"CODE",{});var H9=s(Lc);Yy=i(H9,"model.config.num_labels >= 2"),H9.forEach(n),Xy=i(Vu,`), the pipeline will run a softmax
over the results. If there is a single label, the pipeline will run a sigmoid over the result.`),Vu.forEach(n),Ky=d(ke),Ps=o(ke,"P",{});var Bu=s(Ps);Jy=i(Bu,`The models that this pipeline can use are models that have been fine-tuned on a sequence classification task. See
the up-to-date list of available models on
`),xs=o(Bu,"A",{href:!0,rel:!0});var Q9=s(xs);eP=i(Q9,"huggingface.co/models"),Q9.forEach(n),tP=i(Bu,"."),Bu.forEach(n),nP=d(ke),On=o(ke,"DIV",{class:!0});var Zu=s(On);h($s.$$.fragment,Zu),rP=d(Zu),Uc=o(Zu,"P",{});var V9=s(Uc);oP=i(V9,"Classify the text(s) given as inputs."),V9.forEach(n),Zu.forEach(n),ke.forEach(n),uh=d(t),zt=o(t,"H3",{class:!0});var Yu=s(zt);Rn=o(Yu,"A",{id:!0,class:!0,href:!0});var B9=s(Rn);Gc=o(B9,"SPAN",{});var Z9=s(Gc);h(Es.$$.fragment,Z9),Z9.forEach(n),B9.forEach(n),sP=d(Yu),Nc=o(Yu,"SPAN",{});var Y9=s(Nc);aP=i(Y9,"TextGenerationPipeline"),Y9.forEach(n),Yu.forEach(n),gh=d(t),se=o(t,"DIV",{class:!0});var We=s(se);h(qs.$$.fragment,We),iP=d(We),Cs=o(We,"P",{});var Xu=s(Cs);lP=i(Xu,"Language generation pipeline using any "),Oc=o(Xu,"CODE",{});var X9=s(Oc);dP=i(X9,"ModelWithLMHead"),X9.forEach(n),pP=i(Xu,`. This pipeline predicts the words that will follow a
specified text prompt.`),Xu.forEach(n),cP=d(We),Dt=o(We,"P",{});var ul=s(Dt);mP=i(ul,"This language generation pipeline can currently be loaded from "),ji=o(ul,"A",{href:!0});var K9=s(ji);fP=i(K9,"pipeline()"),K9.forEach(n),hP=i(ul,` using the following task identifier:
`),Rc=o(ul,"CODE",{});var J9=s(Rc);uP=i(J9,'"text-generation"'),J9.forEach(n),gP=i(ul,"."),ul.forEach(n),_P=d(We),As=o(We,"P",{});var Ku=s(As);bP=i(Ku,`The models that this pipeline can use are models that have been trained with an autoregressive language modeling
objective, which includes the uni-directional models in the library (e.g. gpt2). See the list of available models
on `),zs=o(Ku,"A",{href:!0,rel:!0});var eq=s(zs);vP=i(eq,"huggingface.co/models"),eq.forEach(n),wP=i(Ku,"."),Ku.forEach(n),kP=d(We),Wn=o(We,"DIV",{class:!0});var Ju=s(Wn);h(Ds.$$.fragment,Ju),TP=d(Ju),Wc=o(Ju,"P",{});var tq=s(Wc);yP=i(tq,"Complete the prompt(s) given as inputs."),tq.forEach(n),Ju.forEach(n),We.forEach(n),_h=d(t),It=o(t,"H3",{class:!0});var eg=s(It);Hn=o(eg,"A",{id:!0,class:!0,href:!0});var nq=s(Hn);Hc=o(nq,"SPAN",{});var rq=s(Hc);h(Is.$$.fragment,rq),rq.forEach(n),nq.forEach(n),PP=d(eg),Qc=o(eg,"SPAN",{});var oq=s(Qc);xP=i(oq,"Text2TextGenerationPipeline"),oq.forEach(n),eg.forEach(n),bh=d(t),j=o(t,"DIV",{class:!0});var K=s(j);h(js.$$.fragment,K),$P=d(K),Vc=o(K,"P",{});var sq=s(Vc);EP=i(sq,"Pipeline for text to text generation using seq2seq models."),sq.forEach(n),qP=d(K),jt=o(K,"P",{});var gl=s(jt);CP=i(gl,"This Text2TextGenerationPipeline pipeline can currently be loaded from "),Si=o(gl,"A",{href:!0});var aq=s(Si);AP=i(aq,"pipeline()"),aq.forEach(n),zP=i(gl,` using the following task
identifier: `),Bc=o(gl,"CODE",{});var iq=s(Bc);DP=i(iq,'"text2text-generation"'),iq.forEach(n),IP=i(gl,"."),gl.forEach(n),jP=d(K),Ss=o(K,"P",{});var tg=s(Ss);SP=i(tg,`The models that this pipeline can use are models that have been fine-tuned on a translation task. See the
up-to-date list of available models on
`),Ms=o(tg,"A",{href:!0,rel:!0});var lq=s(Ms);MP=i(lq,"huggingface.co/models"),lq.forEach(n),FP=i(tg,"."),tg.forEach(n),LP=d(K),Zc=o(K,"P",{});var dq=s(Zc);UP=i(dq,"Usage:"),dq.forEach(n),GP=d(K),h(Fs.$$.fragment,K),NP=d(K),Qn=o(K,"DIV",{class:!0});var ng=s(Qn);h(Ls.$$.fragment,ng),OP=d(ng),Yc=o(ng,"P",{});var pq=s(Yc);RP=i(pq,"Generate the output text(s) using text(s) given as inputs."),pq.forEach(n),ng.forEach(n),WP=d(K),Vn=o(K,"DIV",{class:!0});var rg=s(Vn);h(Us.$$.fragment,rg),HP=d(rg),Xc=o(rg,"P",{});var cq=s(Xc);QP=i(cq,"Checks whether there might be something wrong with given input with regard to the model."),cq.forEach(n),rg.forEach(n),K.forEach(n),vh=d(t),St=o(t,"H3",{class:!0});var og=s(St);Bn=o(og,"A",{id:!0,class:!0,href:!0});var mq=s(Bn);Kc=o(mq,"SPAN",{});var fq=s(Kc);h(Gs.$$.fragment,fq),fq.forEach(n),mq.forEach(n),VP=d(og),Jc=o(og,"SPAN",{});var hq=s(Jc);BP=i(hq,"TokenClassificationPipeline"),hq.forEach(n),og.forEach(n),wh=d(t),E=o(t,"DIV",{class:!0});var N=s(E);h(Ns.$$.fragment,N),ZP=d(N),Mt=o(N,"P",{});var _l=s(Mt);YP=i(_l,"Named Entity Recognition pipeline using any "),em=o(_l,"CODE",{});var uq=s(em);XP=i(uq,"ModelForTokenClassification"),uq.forEach(n),KP=i(_l,". See the "),Mi=o(_l,"A",{href:!0});var gq=s(Mi);JP=i(gq,`named entity recognition
examples`),gq.forEach(n),e2=i(_l," for more information."),_l.forEach(n),t2=d(N),Ft=o(N,"P",{});var bl=s(Ft);n2=i(bl,"This token recognition pipeline can currently be loaded from "),Fi=o(bl,"A",{href:!0});var _q=s(Fi);r2=i(_q,"pipeline()"),_q.forEach(n),o2=i(bl,` using the following task identifier:
`),tm=o(bl,"CODE",{});var bq=s(tm);s2=i(bq,'"ner"'),bq.forEach(n),a2=i(bl," (for predicting the classes of tokens in a sequence: person, organisation, location or miscellaneous)."),bl.forEach(n),i2=d(N),Os=o(N,"P",{});var sg=s(Os);l2=i(sg,`The models that this pipeline can use are models that have been fine-tuned on a token classification task. See the
up-to-date list of available models on
`),Rs=o(sg,"A",{href:!0,rel:!0});var vq=s(Rs);d2=i(vq,"huggingface.co/models"),vq.forEach(n),p2=i(sg,"."),sg.forEach(n),c2=d(N),Zn=o(N,"DIV",{class:!0});var ag=s(Zn);h(Ws.$$.fragment,ag),m2=d(ag),nm=o(ag,"P",{});var wq=s(nm);f2=i(wq,"Classify each token of the text(s) given as inputs."),wq.forEach(n),ag.forEach(n),h2=d(N),je=o(N,"DIV",{class:!0});var vl=s(je);h(Hs.$$.fragment,vl),u2=d(vl),rm=o(vl,"P",{});var kq=s(rm);g2=i(kq,"Override tokens from a given word that disagree to force agreement on word boundaries."),kq.forEach(n),_2=d(vl),om=o(vl,"P",{});var Tq=s(om);b2=i(Tq,`Example: micro|soft| com|pany| B-ENT I-NAME I-ENT I-ENT will be rewritten with first strategy as microsoft|
company| B-ENT I-ENT`),Tq.forEach(n),vl.forEach(n),v2=d(N),Yn=o(N,"DIV",{class:!0});var ig=s(Yn);h(Qs.$$.fragment,ig),w2=d(ig),sm=o(ig,"P",{});var yq=s(sm);k2=i(yq,"Fuse various numpy arrays into dicts with all the information needed for aggregation"),yq.forEach(n),ig.forEach(n),T2=d(N),Xn=o(N,"DIV",{class:!0});var lg=s(Xn);h(Vs.$$.fragment,lg),y2=d(lg),am=o(lg,"P",{});var Pq=s(am);P2=i(Pq,"Find and group together the adjacent tokens with the same entity predicted."),Pq.forEach(n),lg.forEach(n),x2=d(N),Kn=o(N,"DIV",{class:!0});var dg=s(Kn);h(Bs.$$.fragment,dg),$2=d(dg),im=o(dg,"P",{});var xq=s(im);E2=i(xq,"Group together the adjacent tokens with the same entity predicted."),xq.forEach(n),dg.forEach(n),N.forEach(n),kh=d(t),Lt=o(t,"H3",{class:!0});var pg=s(Lt);Jn=o(pg,"A",{id:!0,class:!0,href:!0});var $q=s(Jn);lm=o($q,"SPAN",{});var Eq=s(lm);h(Zs.$$.fragment,Eq),Eq.forEach(n),$q.forEach(n),q2=d(pg),dm=o(pg,"SPAN",{});var qq=s(dm);C2=i(qq,"TranslationPipeline"),qq.forEach(n),pg.forEach(n),Th=d(t),U=o(t,"DIV",{class:!0});var ce=s(U);h(Ys.$$.fragment,ce),A2=d(ce),pm=o(ce,"P",{});var Cq=s(pm);z2=i(Cq,"Translates from one language to another."),Cq.forEach(n),D2=d(ce),Ut=o(ce,"P",{});var wl=s(Ut);I2=i(wl,"This translation pipeline can currently be loaded from "),Li=o(wl,"A",{href:!0});var Aq=s(Li);j2=i(Aq,"pipeline()"),Aq.forEach(n),S2=i(wl,` using the following task identifier:
`),cm=o(wl,"CODE",{});var zq=s(cm);M2=i(zq,'"translation_xx_to_yy"'),zq.forEach(n),F2=i(wl,"."),wl.forEach(n),L2=d(ce),Xs=o(ce,"P",{});var cg=s(Xs);U2=i(cg,`The models that this pipeline can use are models that have been fine-tuned on a translation task. See the
up-to-date list of available models on `),Ks=o(cg,"A",{href:!0,rel:!0});var Dq=s(Ks);G2=i(Dq,"huggingface.co/models"),Dq.forEach(n),N2=i(cg,"."),cg.forEach(n),O2=d(ce),mm=o(ce,"P",{});var Iq=s(mm);R2=i(Iq,"Usage:"),Iq.forEach(n),W2=d(ce),h(Js.$$.fragment,ce),H2=d(ce),er=o(ce,"DIV",{class:!0});var mg=s(er);h(ea.$$.fragment,mg),Q2=d(mg),fm=o(mg,"P",{});var jq=s(fm);V2=i(jq,"Translate the text(s) given as inputs."),jq.forEach(n),mg.forEach(n),ce.forEach(n),yh=d(t),Gt=o(t,"H3",{class:!0});var fg=s(Gt);tr=o(fg,"A",{id:!0,class:!0,href:!0});var Sq=s(tr);hm=o(Sq,"SPAN",{});var Mq=s(hm);h(ta.$$.fragment,Mq),Mq.forEach(n),Sq.forEach(n),B2=d(fg),um=o(fg,"SPAN",{});var Fq=s(um);Z2=i(Fq,"ZeroShotClassificationPipeline"),Fq.forEach(n),fg.forEach(n),Ph=d(t),V=o(t,"DIV",{class:!0});var Te=s(V);h(na.$$.fragment,Te),Y2=d(Te),ra=o(Te,"P",{});var hg=s(ra);X2=i(hg,"NLI-based zero-shot classification pipeline using a "),gm=o(hg,"CODE",{});var Lq=s(gm);K2=i(Lq,"ModelForSequenceClassification"),Lq.forEach(n),J2=i(hg,` trained on NLI (natural
language inference) tasks.`),hg.forEach(n),ex=d(Te),Ee=o(Te,"P",{});var gr=s(Ee);tx=i(gr,`Any combination of sequences and labels can be passed and each combination will be posed as a premise/hypothesis
pair and passed to the pretrained model. Then, the logit for `),_m=o(gr,"EM",{});var Uq=s(_m);nx=i(Uq,"entailment"),Uq.forEach(n),rx=i(gr,` is taken as the logit for the candidate
label being valid. Any NLI model can be used, but the id of the `),bm=o(gr,"EM",{});var Gq=s(bm);ox=i(Gq,"entailment"),Gq.forEach(n),sx=i(gr,` label must be included in the model
config\u2019s :attr:`),vm=o(gr,"EM",{});var Nq=s(vm);ax=i(Nq,"~transformers.PretrainedConfig.label2id"),Nq.forEach(n),ix=i(gr,"."),gr.forEach(n),lx=d(Te),Nt=o(Te,"P",{});var kl=s(Nt);dx=i(kl,"This NLI pipeline can currently be loaded from "),Ui=o(kl,"A",{href:!0});var Oq=s(Ui);px=i(Oq,"pipeline()"),Oq.forEach(n),cx=i(kl,` using the following task identifier:
`),wm=o(kl,"CODE",{});var Rq=s(wm);mx=i(Rq,'"zero-shot-classification"'),Rq.forEach(n),fx=i(kl,"."),kl.forEach(n),hx=d(Te),oa=o(Te,"P",{});var ug=s(oa);ux=i(ug,`The models that this pipeline can use are models that have been fine-tuned on an NLI task. See the up-to-date list
of available models on `),sa=o(ug,"A",{href:!0,rel:!0});var Wq=s(sa);gx=i(Wq,"huggingface.co/models"),Wq.forEach(n),_x=i(ug,"."),ug.forEach(n),bx=d(Te),nr=o(Te,"DIV",{class:!0});var gg=s(nr);h(aa.$$.fragment,gg),vx=d(gg),ia=o(gg,"P",{});var _g=s(ia);wx=i(_g,"Classify the sequence(s) given as inputs. See the "),Gi=o(_g,"A",{href:!0});var Hq=s(Gi);kx=i(Hq,"ZeroShotClassificationPipeline"),Hq.forEach(n),Tx=i(_g,` documentation for more
information.`),_g.forEach(n),gg.forEach(n),Te.forEach(n),xh=d(t),Ot=o(t,"H3",{class:!0});var bg=s(Ot);rr=o(bg,"A",{id:!0,class:!0,href:!0});var Qq=s(rr);km=o(Qq,"SPAN",{});var Vq=s(km);h(la.$$.fragment,Vq),Vq.forEach(n),Qq.forEach(n),yx=d(bg),Tm=o(bg,"SPAN",{});var Bq=s(Tm);Px=i(Bq,"ZeroShotImageClassificationPipeline"),Bq.forEach(n),bg.forEach(n),$h=d(t),ae=o(t,"DIV",{class:!0});var He=s(ae);h(da.$$.fragment,He),xx=d(He),Rt=o(He,"P",{});var Tl=s(Rt);$x=i(Tl,"Zero shot image classification pipeline using "),ym=o(Tl,"CODE",{});var Zq=s(ym);Ex=i(Zq,"CLIPModel"),Zq.forEach(n),qx=i(Tl,`. This pipeline predicts the class of an image when you
provide an image and a set of `),Pm=o(Tl,"CODE",{});var Yq=s(Pm);Cx=i(Yq,"candidate_labels"),Yq.forEach(n),Ax=i(Tl,"."),Tl.forEach(n),zx=d(He),Wt=o(He,"P",{});var yl=s(Wt);Dx=i(yl,"This image classification pipeline can currently be loaded from "),Ni=o(yl,"A",{href:!0});var Xq=s(Ni);Ix=i(Xq,"pipeline()"),Xq.forEach(n),jx=i(yl,` using the following task identifier:
`),xm=o(yl,"CODE",{});var Kq=s(xm);Sx=i(Kq,'"zero-shot-image-classification"'),Kq.forEach(n),Mx=i(yl,"."),yl.forEach(n),Fx=d(He),pa=o(He,"P",{});var vg=s(pa);Lx=i(vg,`See the list of available models on
`),ca=o(vg,"A",{href:!0,rel:!0});var Jq=s(ca);Ux=i(Jq,"huggingface.co/models"),Jq.forEach(n),Gx=i(vg,"."),vg.forEach(n),Nx=d(He),or=o(He,"DIV",{class:!0});var wg=s(or);h(ma.$$.fragment,wg),Ox=d(wg),$m=o(wg,"P",{});var e6=s($m);Rx=i(e6,"Assign labels to the image(s) passed as inputs."),e6.forEach(n),wg.forEach(n),He.forEach(n),Eh=d(t),Ht=o(t,"H2",{class:!0});var kg=s(Ht);sr=o(kg,"A",{id:!0,class:!0,href:!0});var t6=s(sr);Em=o(t6,"SPAN",{});var n6=s(Em);h(fa.$$.fragment,n6),n6.forEach(n),t6.forEach(n),Wx=d(kg),Oi=o(kg,"SPAN",{});var B5=s(Oi);Hx=i(B5,"Parent class: "),qm=o(B5,"CODE",{});var r6=s(qm);Qx=i(r6,"Pipeline"),r6.forEach(n),B5.forEach(n),kg.forEach(n),qh=d(t),T=o(t,"DIV",{class:!0});var y=s(T);h(ha.$$.fragment,y),Vx=d(y),Cm=o(y,"P",{});var o6=s(Cm);Bx=i(o6,`The Pipeline class is the class from which all pipelines inherit. Refer to this class for methods shared across
different pipelines.`),o6.forEach(n),Zx=d(y),Am=o(y,"P",{});var s6=s(Am);Yx=i(s6,`Base class implementing pipelined operations. Pipeline workflow is defined as a sequence of the following
operations:`),s6.forEach(n),Xx=d(y),zm=o(y,"P",{});var a6=s(zm);Kx=i(a6,"Input -> Tokenization -> Model Inference -> Post-Processing (task dependent) -> Output"),a6.forEach(n),Jx=d(y),Dm=o(y,"P",{});var i6=s(Dm);e5=i(i6,"Pipeline supports running on CPU or GPU through the device argument (see below)."),i6.forEach(n),t5=d(y),ge=o(y,"P",{});var Qe=s(ge);n5=i(Qe,"Some pipeline, like for instance "),Ri=o(Qe,"A",{href:!0});var l6=s(Ri);r5=i(l6,"FeatureExtractionPipeline"),l6.forEach(n),o5=i(Qe," ("),Im=o(Qe,"CODE",{});var d6=s(Im);s5=i(d6,"'feature-extraction'"),d6.forEach(n),a5=i(Qe,`) output large tensor object
as nested-lists. In order to avoid dumping such large structure as textual data we provide the `),jm=o(Qe,"CODE",{});var p6=s(jm);i5=i(p6,"binary_output"),p6.forEach(n),l5=i(Qe,`
constructor argument. If set to `),Sm=o(Qe,"CODE",{});var c6=s(Sm);d5=i(c6,"True"),c6.forEach(n),p5=i(Qe,", the output will be stored in the pickle format."),Qe.forEach(n),c5=d(y),ar=o(y,"DIV",{class:!0});var Tg=s(ar);h(ua.$$.fragment,Tg),m5=d(Tg),Mm=o(Tg,"P",{});var m6=s(Mm);f5=i(m6,"Check if the model class is in supported by the pipeline."),m6.forEach(n),Tg.forEach(n),h5=d(y),be=o(y,"DIV",{class:!0});var _r=s(be);h(ga.$$.fragment,_r),u5=d(_r),Fm=o(_r,"P",{});var f6=s(Fm);g5=i(f6,"Context Manager allowing tensor allocation on the user-specified device in framework agnostic way."),f6.forEach(n),_5=d(_r),Lm=o(_r,"P",{});var h6=s(Lm);b5=i(h6,"Examples:"),h6.forEach(n),v5=d(_r),h(_a.$$.fragment,_r),_r.forEach(n),w5=d(y),ir=o(y,"DIV",{class:!0});var yg=s(ir);h(ba.$$.fragment,yg),k5=d(yg),Um=o(yg,"P",{});var u6=s(Um);T5=i(u6,"Ensure PyTorch tensors are on the specified device."),u6.forEach(n),yg.forEach(n),y5=d(y),lr=o(y,"DIV",{class:!0});var Pg=s(lr);h(va.$$.fragment,Pg),P5=d(Pg),wa=o(Pg,"P",{});var xg=s(wa);x5=i(xg,"Postprocess will receive the raw outputs of the "),Gm=o(xg,"CODE",{});var g6=s(Gm);$5=i(g6,"_forward"),g6.forEach(n),E5=i(xg,` method, generally tensors, and reformat them into
something more friendly. Generally it will output a list or a dict or results (containing just strings and
numbers).`),xg.forEach(n),Pg.forEach(n),q5=d(y),dr=o(y,"DIV",{class:!0});var $g=s(dr);h(ka.$$.fragment,$g),C5=d($g),Ta=o($g,"P",{});var Eg=s(Ta);A5=i(Eg,"Scikit / Keras interface to transformers\u2019 pipelines. This method will forward to "),Nm=o(Eg,"STRONG",{});var _6=s(Nm);z5=i(_6,"call"),_6.forEach(n),D5=i(Eg,"()."),Eg.forEach(n),$g.forEach(n),I5=d(y),pr=o(y,"DIV",{class:!0});var qg=s(pr);h(ya.$$.fragment,qg),j5=d(qg),Qt=o(qg,"P",{});var Pl=s(Qt);S5=i(Pl,"Preprocess will take the "),Om=o(Pl,"CODE",{});var b6=s(Om);M5=i(b6,"input_"),b6.forEach(n),F5=i(Pl,` of a specific pipeline and return a dictionnary of everything necessary for
`),Rm=o(Pl,"CODE",{});var v6=s(Rm);L5=i(v6,"_forward"),v6.forEach(n),U5=i(Pl," to run properly. It should contain at least one tensor, but might have arbitrary other items."),Pl.forEach(n),qg.forEach(n),G5=d(y),cr=o(y,"DIV",{class:!0});var Cg=s(cr);h(Pa.$$.fragment,Cg),N5=d(Cg),Wm=o(Cg,"P",{});var w6=s(Wm);O5=i(w6,"Save the pipeline\u2019s model and tokenizer."),w6.forEach(n),Cg.forEach(n),R5=d(y),mr=o(y,"DIV",{class:!0});var Ag=s(mr);h(xa.$$.fragment,Ag),W5=d(Ag),$a=o(Ag,"P",{});var zg=s($a);H5=i(zg,"Scikit / Keras interface to transformers\u2019 pipelines. This method will forward to "),Hm=o(zg,"STRONG",{});var k6=s(Hm);Q5=i(k6,"call"),k6.forEach(n),V5=i(zg,"()."),zg.forEach(n),Ag.forEach(n),y.forEach(n),this.h()},h(){p(x,"name","hf:doc:metadata"),p(x,"content",JSON.stringify(z6)),p(S,"id","pipelines"),p(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(S,"href","#pipelines"),p(q,"class","relative group"),p(Aa,"href","../task_summary"),p(Da,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(Ia,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.AudioClassificationPipeline"),p(ja,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.AutomaticSpeechRecognitionPipeline"),p(Sa,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ConversationalPipeline"),p(Ma,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.FeatureExtractionPipeline"),p(Fa,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.FillMaskPipeline"),p(La,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ImageClassificationPipeline"),p(Ua,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ImageSegmentationPipeline"),p(Ga,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ObjectDetectionPipeline"),p(Na,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.QuestionAnsweringPipeline"),p(Oa,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.SummarizationPipeline"),p(Ra,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TableQuestionAnsweringPipeline"),p(Wa,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TextClassificationPipeline"),p(Ha,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TextGenerationPipeline"),p(Qa,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.Text2TextGenerationPipeline"),p(Va,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TokenClassificationPipeline"),p(Ba,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TranslationPipeline"),p(Za,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ZeroShotClassificationPipeline"),p(Ya,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ZeroShotImageClassificationPipeline"),p(Zt,"id","transformers.pipeline"),p(Zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Zt,"href","#transformers.pipeline"),p(Ve,"class","relative group"),p(Tr,"href","https://huggingface.co"),p(Tr,"rel","nofollow"),p(Ja,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.Pipeline"),p(ei,"href","tokenizer"),p(ti,"href","model"),p(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(en,"id","pipeline-batching"),p(en,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(en,"href","#pipeline-batching"),p(Ze,"class","relative group"),p(rn,"id","pipeline-chunk-batching"),p(rn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(rn,"href","#pipeline-chunk-batching"),p(Xe,"class","relative group"),p(sn,"id","pipeline-custom-code"),p(sn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(sn,"href","#pipeline-custom-code"),p(Ke,"class","relative group"),p(ln,"id","implementing-a-pipeline"),p(ln,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ln,"href","#implementing-a-pipeline"),p(Je,"class","relative group"),p(mi,"href","../add_new_pipeline"),p(dn,"id","the-task-specific-pipelines"),p(dn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(dn,"href","#the-task-specific-pipelines"),p(et,"class","relative group"),p(pn,"id","transformers.AudioClassificationPipeline"),p(pn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(pn,"href","#transformers.AudioClassificationPipeline"),p(tt,"class","relative group"),p(fi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(Yr,"href","https://huggingface.co/models?filter=audio-classification"),p(Yr,"rel","nofollow"),p(hi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.AutomaticSpeechRecognitionPipeline"),p(cn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(mn,"id","transformers.AutomaticSpeechRecognitionPipeline"),p(mn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(mn,"href","#transformers.AutomaticSpeechRecognitionPipeline"),p(rt,"class","relative group"),p(ui,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.AutomaticSpeechRecognitionPipeline"),p(fn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(hn,"id","transformers.Conversation"),p(hn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(hn,"href","#transformers.Conversation"),p(ot,"class","relative group"),p(gi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ConversationalPipeline"),p(_i,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ConversationalPipeline"),p(un,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(gn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(_n,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(bi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(fo,"href","https://huggingface.co/models?filter=conversational"),p(fo,"rel","nofollow"),p(bn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(vn,"id","transformers.FeatureExtractionPipeline"),p(vn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(vn,"href","#transformers.FeatureExtractionPipeline"),p(at,"class","relative group"),p(vi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(vo,"href","https://huggingface.co/models"),p(vo,"rel","nofollow"),p(wn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(kn,"id","transformers.FillMaskPipeline"),p(kn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(kn,"href","#transformers.FillMaskPipeline"),p(lt,"class","relative group"),p(wi,"href","../task_summary#masked-language-modeling"),p(ki,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(Po,"href","https://huggingface.co/models?filter=fill-mask"),p(Po,"rel","nofollow"),p(yn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Pn,"id","transformers.ImageClassificationPipeline"),p(Pn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Pn,"href","#transformers.ImageClassificationPipeline"),p(ct,"class","relative group"),p(Ti,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(Ao,"href","https://huggingface.co/models?filter=image-classification"),p(Ao,"rel","nofollow"),p(xn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p($n,"id","transformers.ImageSegmentationPipeline"),p($n,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p($n,"href","#transformers.ImageSegmentationPipeline"),p(ft,"class","relative group"),p(yi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(Mo,"href","https://huggingface.co/models?filter=image-segmentation"),p(Mo,"rel","nofollow"),p(En,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(qn,"id","transformers.TokenClassificationPipeline"),p(qn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(qn,"href","#transformers.TokenClassificationPipeline"),p(ut,"class","relative group"),p(Pi,"href","../task_summary#named-entity-recognition"),p(xi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(No,"href","https://huggingface.co/models?filter=token-classification"),p(No,"rel","nofollow"),p(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Cn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(An,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(zn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p($i,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.TokenClassificationPipeline"),p(In,"id","transformers.ObjectDetectionPipeline"),p(In,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(In,"href","#transformers.ObjectDetectionPipeline"),p(bt,"class","relative group"),p(Ei,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(Yo,"href","https://huggingface.co/models?filter=object-detection"),p(Yo,"rel","nofollow"),p(jn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Sn,"id","transformers.QuestionAnsweringPipeline"),p(Sn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Sn,"href","#transformers.QuestionAnsweringPipeline"),p(wt,"class","relative group"),p(qi,"href","../task_summary#question-answering"),p(Ci,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(ts,"href","https://huggingface.co/models?filter=question-answering"),p(ts,"rel","nofollow"),p(Mn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Fn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Ln,"id","transformers.SummarizationPipeline"),p(Ln,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ln,"href","#transformers.SummarizationPipeline"),p(Pt,"class","relative group"),p(Ai,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(ds,"href","https://huggingface.co/models?filter=summarization"),p(ds,"rel","nofollow"),p(Un,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Gn,"id","transformers.TableQuestionAnsweringPipeline"),p(Gn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Gn,"href","#transformers.TableQuestionAnsweringPipeline"),p($t,"class","relative group"),p(zi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(gs,"href","https://huggingface.co/models?filter=table-question-answering"),p(gs,"rel","nofollow"),p(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Nn,"id","transformers.TextClassificationPipeline"),p(Nn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Nn,"href","#transformers.TextClassificationPipeline"),p(qt,"class","relative group"),p(Di,"href","../task_summary#sequence-classification"),p(Ii,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(xs,"href","https://huggingface.co/models?filter=text-classification"),p(xs,"rel","nofollow"),p(On,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Rn,"id","transformers.TextGenerationPipeline"),p(Rn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Rn,"href","#transformers.TextGenerationPipeline"),p(zt,"class","relative group"),p(ji,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(zs,"href","https://huggingface.co/models?filter=text-generation"),p(zs,"rel","nofollow"),p(Wn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Hn,"id","transformers.Text2TextGenerationPipeline"),p(Hn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Hn,"href","#transformers.Text2TextGenerationPipeline"),p(It,"class","relative group"),p(Si,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(Ms,"href","https://huggingface.co/models?filter=text2text-generation"),p(Ms,"rel","nofollow"),p(Qn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Vn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Bn,"id","transformers.TokenClassificationPipeline"),p(Bn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Bn,"href","#transformers.TokenClassificationPipeline"),p(St,"class","relative group"),p(Mi,"href","../task_summary#named-entity-recognition"),p(Fi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(Rs,"href","https://huggingface.co/models?filter=token-classification"),p(Rs,"rel","nofollow"),p(Zn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Yn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Xn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Kn,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Jn,"id","transformers.TranslationPipeline"),p(Jn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Jn,"href","#transformers.TranslationPipeline"),p(Lt,"class","relative group"),p(Li,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(Ks,"href","https://huggingface.co/models?filter=translation"),p(Ks,"rel","nofollow"),p(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(tr,"id","transformers.ZeroShotClassificationPipeline"),p(tr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(tr,"href","#transformers.ZeroShotClassificationPipeline"),p(Gt,"class","relative group"),p(Ui,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(sa,"href","https://huggingface.co/models?search=nli"),p(sa,"rel","nofollow"),p(Gi,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.ZeroShotClassificationPipeline"),p(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(rr,"id","transformers.ZeroShotImageClassificationPipeline"),p(rr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(rr,"href","#transformers.ZeroShotImageClassificationPipeline"),p(Ot,"class","relative group"),p(Ni,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.pipeline"),p(ca,"href","https://huggingface.co/models?filter=zero-shot-image-classification"),p(ca,"rel","nofollow"),p(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(sr,"id","transformers.Pipeline"),p(sr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(sr,"href","#transformers.Pipeline"),p(Ht,"class","relative group"),p(Ri,"href","/docs/transformers/pr_15901/en/main_classes/pipelines#transformers.FeatureExtractionPipeline"),p(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,c){e(document.head,x),m(t,_e,c),m(t,q,c),e(q,S),e(S,me),u($,me,null),e(q,O),e(q,ye),e(ye,Dg),m(t,Vm,c),m(t,Vt,c),e(Vt,Ig),e(Vt,Aa),e(Aa,jg),e(Vt,Sg),m(t,Bm,c),m(t,za,c),e(za,Mg),m(t,Zm,c),m(t,Bt,c),e(Bt,xl),e(xl,br),e(br,Fg),e(br,Da),e(Da,Lg),e(br,Ug),e(Bt,Gg),e(Bt,vr),e(vr,$l),e($l,Ng),e(vr,Og),e(vr,w),e(w,El),e(El,Ia),e(Ia,Rg),e(w,Wg),e(w,ql),e(ql,ja),e(ja,Hg),e(w,Qg),e(w,Cl),e(Cl,Sa),e(Sa,Vg),e(w,Bg),e(w,Al),e(Al,Ma),e(Ma,Zg),e(w,Yg),e(w,zl),e(zl,Fa),e(Fa,Xg),e(w,Kg),e(w,Dl),e(Dl,La),e(La,Jg),e(w,e_),e(w,Il),e(Il,Ua),e(Ua,t_),e(w,n_),e(w,jl),e(jl,Ga),e(Ga,r_),e(w,o_),e(w,Sl),e(Sl,Na),e(Na,s_),e(w,a_),e(w,Ml),e(Ml,Oa),e(Oa,i_),e(w,l_),e(w,Fl),e(Fl,Ra),e(Ra,d_),e(w,p_),e(w,Ll),e(Ll,Wa),e(Wa,c_),e(w,m_),e(w,Ul),e(Ul,Ha),e(Ha,f_),e(w,h_),e(w,Gl),e(Gl,Qa),e(Qa,u_),e(w,g_),e(w,Nl),e(Nl,Va),e(Va,__),e(w,b_),e(w,Ol),e(Ol,Ba),e(Ba,v_),e(w,w_),e(w,Rl),e(Rl,Za),e(Za,k_),e(w,T_),e(w,Wl),e(Wl,Ya),e(Ya,y_),m(t,Ym,c),m(t,Ve,c),e(Ve,Zt),e(Zt,Hl),u(wr,Hl,null),e(Ve,P_),e(Ve,Ql),e(Ql,x_),m(t,Xm,c),m(t,Yt,c),e(Yt,$_),e(Yt,Vl),e(Vl,E_),e(Yt,q_),m(t,Km,c),m(t,Xa,c),e(Xa,C_),m(t,Jm,c),u(kr,t,c),m(t,ef,c),m(t,Xt,c),e(Xt,A_),e(Xt,Tr),e(Tr,z_),e(Xt,D_),m(t,tf,c),u(yr,t,c),m(t,nf,c),m(t,Kt,c),e(Kt,I_),e(Kt,Bl),e(Bl,j_),e(Kt,S_),m(t,rf,c),u(Pr,t,c),m(t,of,c),m(t,Jt,c),e(Jt,M_),e(Jt,Zl),e(Zl,F_),e(Jt,L_),m(t,sf,c),u(xr,t,c),m(t,af,c),m(t,Ka,c),e(Ka,U_),m(t,lf,c),u($r,t,c),m(t,df,c),m(t,R,c),u(Er,R,null),e(R,G_),e(R,qr),e(qr,N_),e(qr,Ja),e(Ja,O_),e(qr,R_),e(R,W_),e(R,Yl),e(Yl,H_),e(R,Q_),e(R,Be),e(Be,Cr),e(Cr,V_),e(Cr,ei),e(ei,B_),e(Cr,Z_),e(Be,Y_),e(Be,Ar),e(Ar,X_),e(Ar,ti),e(ti,K_),e(Ar,J_),e(Be,eb),e(Be,Xl),e(Xl,tb),e(R,nb),e(R,Kl),e(Kl,rb),e(R,ob),u(zr,R,null),m(t,pf,c),m(t,Ze,c),e(Ze,en),e(en,Jl),u(Dr,Jl,null),e(Ze,sb),e(Ze,ed),e(ed,ab),m(t,cf,c),m(t,qe,c),e(qe,ib),e(qe,td),e(td,lb),e(qe,db),e(qe,nd),e(nd,pb),e(qe,cb),m(t,mf,c),u(Ir,t,c),m(t,ff,c),u(tn,t,c),m(t,hf,c),u(jr,t,c),m(t,uf,c),u(Sr,t,c),m(t,gf,c),m(t,ni,c),e(ni,mb),m(t,_f,c),u(Mr,t,c),m(t,bf,c),m(t,nn,c),e(nn,fb),e(nn,rd),e(rd,hb),e(nn,ub),m(t,vf,c),u(Fr,t,c),m(t,wf,c),m(t,ri,c),e(ri,gb),m(t,kf,c),m(t,oi,c),e(oi,_b),m(t,Tf,c),m(t,ie,c),e(ie,od),e(od,sd),e(sd,ad),e(ad,bb),e(ie,vb),e(ie,id),e(id,ld),e(ld,wb),e(ie,kb),e(ie,dd),e(dd,pd),e(pd,Tb),e(ie,yb),e(ie,Lr),e(Lr,cd),e(cd,Pb),e(Lr,xb),e(Lr,Ye),e(Ye,md),e(md,$b),e(Ye,Eb),e(Ye,fd),e(fd,qb),e(Ye,Cb),e(Ye,hd),e(hd,Ab),e(ie,zb),e(ie,ud),e(ud,gd),e(gd,Db),m(t,yf,c),m(t,Xe,c),e(Xe,rn),e(rn,_d),u(Ur,_d,null),e(Xe,Ib),e(Xe,bd),e(bd,jb),m(t,Pf,c),m(t,Pe,c),e(Pe,vd),e(vd,Sb),e(Pe,Mb),e(Pe,wd),e(wd,Fb),e(Pe,Lb),e(Pe,kd),e(kd,Ub),e(Pe,Gb),m(t,xf,c),m(t,Ce,c),e(Ce,Nb),e(Ce,Td),e(Td,Ob),e(Ce,Rb),e(Ce,yd),e(yd,Wb),e(Ce,Hb),m(t,$f,c),u(Gr,t,c),m(t,Ef,c),m(t,si,c),e(si,Qb),m(t,qf,c),u(Nr,t,c),m(t,Cf,c),m(t,ai,c),e(ai,Vb),m(t,Af,c),m(t,on,c),e(on,Bb),e(on,Pd),e(Pd,Zb),e(on,Yb),m(t,zf,c),m(t,Ke,c),e(Ke,sn),e(sn,xd),u(Or,xd,null),e(Ke,Xb),e(Ke,$d),e($d,Kb),m(t,Df,c),m(t,ii,c),e(ii,Jb),m(t,If,c),m(t,an,c),e(an,e1),e(an,Ed),e(Ed,t1),e(an,n1),m(t,jf,c),m(t,li,c),e(li,r1),m(t,Sf,c),m(t,di,c),e(di,qd),e(qd,o1),m(t,Mf,c),u(Rr,t,c),m(t,Ff,c),m(t,pi,c),e(pi,s1),m(t,Lf,c),m(t,Je,c),e(Je,ln),e(ln,Cd),u(Wr,Cd,null),e(Je,a1),e(Je,Ad),e(Ad,i1),m(t,Uf,c),m(t,ci,c),e(ci,mi),e(mi,l1),m(t,Gf,c),m(t,et,c),e(et,dn),e(dn,zd),u(Hr,zd,null),e(et,d1),e(et,Dd),e(Dd,p1),m(t,Nf,c),m(t,tt,c),e(tt,pn),e(pn,Id),u(Qr,Id,null),e(tt,c1),e(tt,jd),e(jd,m1),m(t,Of,c),m(t,J,c),u(Vr,J,null),e(J,f1),e(J,Br),e(Br,h1),e(Br,Sd),e(Sd,u1),e(Br,g1),e(J,_1),e(J,nt),e(nt,b1),e(nt,fi),e(fi,v1),e(nt,w1),e(nt,Md),e(Md,k1),e(nt,T1),e(J,y1),e(J,Zr),e(Zr,P1),e(Zr,Yr),e(Yr,x1),e(Zr,$1),e(J,E1),e(J,cn),u(Xr,cn,null),e(cn,q1),e(cn,Kr),e(Kr,C1),e(Kr,hi),e(hi,A1),e(Kr,z1),m(t,Rf,c),m(t,rt,c),e(rt,mn),e(mn,Fd),u(Jr,Fd,null),e(rt,D1),e(rt,Ld),e(Ld,I1),m(t,Wf,c),m(t,fe,c),u(eo,fe,null),e(fe,j1),e(fe,Ud),e(Ud,S1),e(fe,M1),e(fe,Gd),e(Gd,F1),e(fe,L1),e(fe,fn),u(to,fn,null),e(fn,U1),e(fn,no),e(no,G1),e(no,ui),e(ui,N1),e(no,O1),m(t,Hf,c),m(t,ot,c),e(ot,hn),e(hn,Nd),u(ro,Nd,null),e(ot,R1),e(ot,Od),e(Od,W1),m(t,Qf,c),m(t,z,c),u(oo,z,null),e(z,H1),e(z,xe),e(xe,Q1),e(xe,gi),e(gi,V1),e(xe,B1),e(xe,_i),e(_i,Z1),e(xe,Y1),e(xe,Rd),e(Rd,X1),e(xe,K1),e(z,J1),e(z,Wd),e(Wd,ev),e(z,tv),u(so,z,null),e(z,nv),e(z,un),u(ao,un,null),e(un,rv),e(un,io),e(io,ov),e(io,Hd),e(Hd,sv),e(io,av),e(z,iv),e(z,gn),u(lo,gn,null),e(gn,lv),e(gn,Qd),e(Qd,dv),e(z,pv),e(z,Ae),u(po,Ae,null),e(Ae,cv),e(Ae,Vd),e(Vd,mv),e(Ae,fv),e(Ae,he),e(he,hv),e(he,Bd),e(Bd,uv),e(he,gv),e(he,Zd),e(Zd,_v),e(he,bv),e(he,Yd),e(Yd,vv),e(he,wv),e(he,Xd),e(Xd,kv),e(he,Tv),e(z,yv),e(z,_n),u(co,_n,null),e(_n,Pv),e(_n,$e),e($e,xv),e($e,Kd),e(Kd,$v),e($e,Ev),e($e,Jd),e(Jd,qv),e($e,Cv),e($e,ep),e(ep,Av),e($e,zv),m(t,Vf,c),m(t,M,c),u(mo,M,null),e(M,Dv),e(M,tp),e(tp,Iv),e(M,jv),e(M,st),e(st,Sv),e(st,bi),e(bi,Mv),e(st,Fv),e(st,np),e(np,Lv),e(st,Uv),e(M,Gv),e(M,ue),e(ue,Nv),e(ue,rp),e(rp,Ov),e(ue,Rv),e(ue,op),e(op,Wv),e(ue,Hv),e(ue,sp),e(sp,Qv),e(ue,Vv),e(ue,fo),e(fo,Bv),e(ue,Zv),e(M,Yv),e(M,ap),e(ap,Xv),e(M,Kv),u(ho,M,null),e(M,Jv),e(M,bn),u(uo,bn,null),e(bn,ew),e(bn,ip),e(ip,tw),m(t,Bf,c),m(t,at,c),e(at,vn),e(vn,lp),u(go,lp,null),e(at,nw),e(at,dp),e(dp,rw),m(t,Zf,c),m(t,ee,c),u(_o,ee,null),e(ee,ow),e(ee,pp),e(pp,sw),e(ee,aw),e(ee,it),e(it,iw),e(it,vi),e(vi,lw),e(it,dw),e(it,cp),e(cp,pw),e(it,cw),e(ee,mw),e(ee,bo),e(bo,fw),e(bo,vo),e(vo,hw),e(bo,uw),e(ee,gw),e(ee,wn),u(wo,wn,null),e(wn,_w),e(wn,mp),e(mp,bw),m(t,Yf,c),m(t,lt,c),e(lt,kn),e(kn,fp),u(ko,fp,null),e(lt,vw),e(lt,hp),e(hp,ww),m(t,Xf,c),m(t,W,c),u(To,W,null),e(W,kw),e(W,dt),e(dt,Tw),e(dt,up),e(up,yw),e(dt,Pw),e(dt,wi),e(wi,xw),e(dt,$w),e(W,Ew),e(W,pt),e(pt,qw),e(pt,ki),e(ki,Cw),e(pt,Aw),e(pt,gp),e(gp,zw),e(pt,Dw),e(W,Iw),e(W,yo),e(yo,jw),e(yo,Po),e(Po,Sw),e(yo,Mw),e(W,Fw),u(Tn,W,null),e(W,Lw),e(W,yn),u(xo,yn,null),e(yn,Uw),e(yn,_p),e(_p,Gw),m(t,Kf,c),m(t,ct,c),e(ct,Pn),e(Pn,bp),u($o,bp,null),e(ct,Nw),e(ct,vp),e(vp,Ow),m(t,Jf,c),m(t,te,c),u(Eo,te,null),e(te,Rw),e(te,qo),e(qo,Ww),e(qo,wp),e(wp,Hw),e(qo,Qw),e(te,Vw),e(te,mt),e(mt,Bw),e(mt,Ti),e(Ti,Zw),e(mt,Yw),e(mt,kp),e(kp,Xw),e(mt,Kw),e(te,Jw),e(te,Co),e(Co,e0),e(Co,Ao),e(Ao,t0),e(Co,n0),e(te,r0),e(te,xn),u(zo,xn,null),e(xn,o0),e(xn,Tp),e(Tp,s0),m(t,eh,c),m(t,ft,c),e(ft,$n),e($n,yp),u(Do,yp,null),e(ft,a0),e(ft,Pp),e(Pp,i0),m(t,th,c),m(t,ne,c),u(Io,ne,null),e(ne,l0),e(ne,jo),e(jo,d0),e(jo,xp),e(xp,p0),e(jo,c0),e(ne,m0),e(ne,ht),e(ht,f0),e(ht,yi),e(yi,h0),e(ht,u0),e(ht,$p),e($p,g0),e(ht,_0),e(ne,b0),e(ne,So),e(So,v0),e(So,Mo),e(Mo,w0),e(So,k0),e(ne,T0),e(ne,En),u(Fo,En,null),e(En,y0),e(En,Ep),e(Ep,P0),m(t,nh,c),m(t,ut,c),e(ut,qn),e(qn,qp),u(Lo,qp,null),e(ut,x0),e(ut,Cp),e(Cp,$0),m(t,rh,c),m(t,D,c),u(Uo,D,null),e(D,E0),e(D,gt),e(gt,q0),e(gt,Ap),e(Ap,C0),e(gt,A0),e(gt,Pi),e(Pi,z0),e(gt,D0),e(D,I0),e(D,_t),e(_t,j0),e(_t,xi),e(xi,S0),e(_t,M0),e(_t,zp),e(zp,F0),e(_t,L0),e(D,U0),e(D,Go),e(Go,G0),e(Go,No),e(No,N0),e(Go,O0),e(D,R0),e(D,ze),u(Oo,ze,null),e(ze,W0),e(ze,Dp),e(Dp,H0),e(ze,Q0),e(ze,Ip),e(Ip,V0),e(D,B0),e(D,Cn),u(Ro,Cn,null),e(Cn,Z0),e(Cn,jp),e(jp,Y0),e(D,X0),e(D,An),u(Wo,An,null),e(An,K0),e(An,Sp),e(Sp,J0),e(D,ek),e(D,zn),u(Ho,zn,null),e(zn,tk),e(zn,Mp),e(Mp,nk),m(t,oh,c),m(t,Dn,c),e(Dn,rk),e(Dn,$i),e($i,ok),e(Dn,sk),m(t,sh,c),m(t,bt,c),e(bt,In),e(In,Fp),u(Qo,Fp,null),e(bt,ak),e(bt,Lp),e(Lp,ik),m(t,ah,c),m(t,re,c),u(Vo,re,null),e(re,lk),e(re,Bo),e(Bo,dk),e(Bo,Up),e(Up,pk),e(Bo,ck),e(re,mk),e(re,vt),e(vt,fk),e(vt,Ei),e(Ei,hk),e(vt,uk),e(vt,Gp),e(Gp,gk),e(vt,_k),e(re,bk),e(re,Zo),e(Zo,vk),e(Zo,Yo),e(Yo,wk),e(Zo,kk),e(re,Tk),e(re,jn),u(Xo,jn,null),e(jn,yk),e(jn,Np),e(Np,Pk),m(t,ih,c),m(t,wt,c),e(wt,Sn),e(Sn,Op),u(Ko,Op,null),e(wt,xk),e(wt,Rp),e(Rp,$k),m(t,lh,c),m(t,I,c),u(Jo,I,null),e(I,Ek),e(I,kt),e(kt,qk),e(kt,Wp),e(Wp,Ck),e(kt,Ak),e(kt,qi),e(qi,zk),e(kt,Dk),e(I,Ik),e(I,Tt),e(Tt,jk),e(Tt,Ci),e(Ci,Sk),e(Tt,Mk),e(Tt,Hp),e(Hp,Fk),e(Tt,Lk),e(I,Uk),e(I,es),e(es,Gk),e(es,ts),e(ts,Nk),e(es,Ok),e(I,Rk),e(I,Mn),u(ns,Mn,null),e(Mn,Wk),e(Mn,Qp),e(Qp,Hk),e(I,Qk),e(I,De),u(rs,De,null),e(De,Vk),e(De,yt),e(yt,Bk),e(yt,Vp),e(Vp,Zk),e(yt,Yk),e(yt,Bp),e(Bp,Xk),e(yt,Kk),e(De,Jk),e(De,Zp),e(Zp,eT),e(I,tT),e(I,Ie),u(os,Ie,null),e(Ie,nT),e(Ie,ss),e(ss,rT),e(ss,Yp),e(Yp,oT),e(ss,sT),e(Ie,aT),e(Ie,Xp),e(Xp,iT),e(I,lT),e(I,Fn),u(as,Fn,null),e(Fn,dT),e(Fn,Kp),e(Kp,pT),m(t,dh,c),m(t,Pt,c),e(Pt,Ln),e(Ln,Jp),u(is,Jp,null),e(Pt,cT),e(Pt,ec),e(ec,mT),m(t,ph,c),m(t,F,c),u(ls,F,null),e(F,fT),e(F,tc),e(tc,hT),e(F,uT),e(F,xt),e(xt,gT),e(xt,Ai),e(Ai,_T),e(xt,bT),e(xt,nc),e(nc,vT),e(xt,wT),e(F,kT),e(F,L),e(L,TT),e(L,rc),e(rc,yT),e(L,PT),e(L,oc),e(oc,xT),e(L,$T),e(L,sc),e(sc,ET),e(L,qT),e(L,ac),e(ac,CT),e(L,AT),e(L,ic),e(ic,zT),e(L,DT),e(L,lc),e(lc,IT),e(L,jT),e(L,ds),e(ds,ST),e(L,MT),e(F,FT),e(F,dc),e(dc,LT),e(F,UT),u(ps,F,null),e(F,GT),e(F,Un),u(cs,Un,null),e(Un,NT),e(Un,pc),e(pc,OT),m(t,ch,c),m(t,$t,c),e($t,Gn),e(Gn,cc),u(ms,cc,null),e($t,RT),e($t,mc),e(mc,WT),m(t,mh,c),m(t,oe,c),u(fs,oe,null),e(oe,HT),e(oe,hs),e(hs,QT),e(hs,fc),e(fc,VT),e(hs,BT),e(oe,ZT),e(oe,Et),e(Et,YT),e(Et,zi),e(zi,XT),e(Et,KT),e(Et,hc),e(hc,JT),e(Et,ey),e(oe,ty),e(oe,us),e(us,ny),e(us,gs),e(gs,ry),e(us,oy),e(oe,sy),e(oe,C),u(_s,C,null),e(C,ay),e(C,uc),e(uc,iy),e(C,ly),e(C,H),e(H,gc),e(gc,_c),e(_c,dy),e(H,py),e(H,bc),e(bc,vc),e(vc,cy),e(H,my),e(H,wc),e(wc,kc),e(kc,fy),e(H,hy),e(H,Tc),e(Tc,yc),e(yc,uy),e(H,gy),e(H,Pc),e(Pc,xc),e(xc,_y),e(H,by),e(H,$c),e($c,Ec),e(Ec,vy),e(H,wy),e(H,qc),e(qc,Cc),e(Cc,ky),e(C,Ty),e(C,bs),e(bs,yy),e(bs,Ac),e(Ac,Py),e(bs,xy),e(C,$y),e(C,zc),e(zc,Ey),e(C,qy),u(vs,C,null),e(C,Cy),e(C,Dc),e(Dc,Ay),e(C,zy),e(C,Ic),e(Ic,Dy),e(C,Iy),u(ws,C,null),m(t,fh,c),m(t,qt,c),e(qt,Nn),e(Nn,jc),u(ks,jc,null),e(qt,jy),e(qt,Sc),e(Sc,Sy),m(t,hh,c),m(t,Q,c),u(Ts,Q,null),e(Q,My),e(Q,Ct),e(Ct,Fy),e(Ct,Mc),e(Mc,Ly),e(Ct,Uy),e(Ct,Di),e(Di,Gy),e(Ct,Ny),e(Q,Oy),e(Q,At),e(At,Ry),e(At,Ii),e(Ii,Wy),e(At,Hy),e(At,Fc),e(Fc,Qy),e(At,Vy),e(Q,By),e(Q,ys),e(ys,Zy),e(ys,Lc),e(Lc,Yy),e(ys,Xy),e(Q,Ky),e(Q,Ps),e(Ps,Jy),e(Ps,xs),e(xs,eP),e(Ps,tP),e(Q,nP),e(Q,On),u($s,On,null),e(On,rP),e(On,Uc),e(Uc,oP),m(t,uh,c),m(t,zt,c),e(zt,Rn),e(Rn,Gc),u(Es,Gc,null),e(zt,sP),e(zt,Nc),e(Nc,aP),m(t,gh,c),m(t,se,c),u(qs,se,null),e(se,iP),e(se,Cs),e(Cs,lP),e(Cs,Oc),e(Oc,dP),e(Cs,pP),e(se,cP),e(se,Dt),e(Dt,mP),e(Dt,ji),e(ji,fP),e(Dt,hP),e(Dt,Rc),e(Rc,uP),e(Dt,gP),e(se,_P),e(se,As),e(As,bP),e(As,zs),e(zs,vP),e(As,wP),e(se,kP),e(se,Wn),u(Ds,Wn,null),e(Wn,TP),e(Wn,Wc),e(Wc,yP),m(t,_h,c),m(t,It,c),e(It,Hn),e(Hn,Hc),u(Is,Hc,null),e(It,PP),e(It,Qc),e(Qc,xP),m(t,bh,c),m(t,j,c),u(js,j,null),e(j,$P),e(j,Vc),e(Vc,EP),e(j,qP),e(j,jt),e(jt,CP),e(jt,Si),e(Si,AP),e(jt,zP),e(jt,Bc),e(Bc,DP),e(jt,IP),e(j,jP),e(j,Ss),e(Ss,SP),e(Ss,Ms),e(Ms,MP),e(Ss,FP),e(j,LP),e(j,Zc),e(Zc,UP),e(j,GP),u(Fs,j,null),e(j,NP),e(j,Qn),u(Ls,Qn,null),e(Qn,OP),e(Qn,Yc),e(Yc,RP),e(j,WP),e(j,Vn),u(Us,Vn,null),e(Vn,HP),e(Vn,Xc),e(Xc,QP),m(t,vh,c),m(t,St,c),e(St,Bn),e(Bn,Kc),u(Gs,Kc,null),e(St,VP),e(St,Jc),e(Jc,BP),m(t,wh,c),m(t,E,c),u(Ns,E,null),e(E,ZP),e(E,Mt),e(Mt,YP),e(Mt,em),e(em,XP),e(Mt,KP),e(Mt,Mi),e(Mi,JP),e(Mt,e2),e(E,t2),e(E,Ft),e(Ft,n2),e(Ft,Fi),e(Fi,r2),e(Ft,o2),e(Ft,tm),e(tm,s2),e(Ft,a2),e(E,i2),e(E,Os),e(Os,l2),e(Os,Rs),e(Rs,d2),e(Os,p2),e(E,c2),e(E,Zn),u(Ws,Zn,null),e(Zn,m2),e(Zn,nm),e(nm,f2),e(E,h2),e(E,je),u(Hs,je,null),e(je,u2),e(je,rm),e(rm,g2),e(je,_2),e(je,om),e(om,b2),e(E,v2),e(E,Yn),u(Qs,Yn,null),e(Yn,w2),e(Yn,sm),e(sm,k2),e(E,T2),e(E,Xn),u(Vs,Xn,null),e(Xn,y2),e(Xn,am),e(am,P2),e(E,x2),e(E,Kn),u(Bs,Kn,null),e(Kn,$2),e(Kn,im),e(im,E2),m(t,kh,c),m(t,Lt,c),e(Lt,Jn),e(Jn,lm),u(Zs,lm,null),e(Lt,q2),e(Lt,dm),e(dm,C2),m(t,Th,c),m(t,U,c),u(Ys,U,null),e(U,A2),e(U,pm),e(pm,z2),e(U,D2),e(U,Ut),e(Ut,I2),e(Ut,Li),e(Li,j2),e(Ut,S2),e(Ut,cm),e(cm,M2),e(Ut,F2),e(U,L2),e(U,Xs),e(Xs,U2),e(Xs,Ks),e(Ks,G2),e(Xs,N2),e(U,O2),e(U,mm),e(mm,R2),e(U,W2),u(Js,U,null),e(U,H2),e(U,er),u(ea,er,null),e(er,Q2),e(er,fm),e(fm,V2),m(t,yh,c),m(t,Gt,c),e(Gt,tr),e(tr,hm),u(ta,hm,null),e(Gt,B2),e(Gt,um),e(um,Z2),m(t,Ph,c),m(t,V,c),u(na,V,null),e(V,Y2),e(V,ra),e(ra,X2),e(ra,gm),e(gm,K2),e(ra,J2),e(V,ex),e(V,Ee),e(Ee,tx),e(Ee,_m),e(_m,nx),e(Ee,rx),e(Ee,bm),e(bm,ox),e(Ee,sx),e(Ee,vm),e(vm,ax),e(Ee,ix),e(V,lx),e(V,Nt),e(Nt,dx),e(Nt,Ui),e(Ui,px),e(Nt,cx),e(Nt,wm),e(wm,mx),e(Nt,fx),e(V,hx),e(V,oa),e(oa,ux),e(oa,sa),e(sa,gx),e(oa,_x),e(V,bx),e(V,nr),u(aa,nr,null),e(nr,vx),e(nr,ia),e(ia,wx),e(ia,Gi),e(Gi,kx),e(ia,Tx),m(t,xh,c),m(t,Ot,c),e(Ot,rr),e(rr,km),u(la,km,null),e(Ot,yx),e(Ot,Tm),e(Tm,Px),m(t,$h,c),m(t,ae,c),u(da,ae,null),e(ae,xx),e(ae,Rt),e(Rt,$x),e(Rt,ym),e(ym,Ex),e(Rt,qx),e(Rt,Pm),e(Pm,Cx),e(Rt,Ax),e(ae,zx),e(ae,Wt),e(Wt,Dx),e(Wt,Ni),e(Ni,Ix),e(Wt,jx),e(Wt,xm),e(xm,Sx),e(Wt,Mx),e(ae,Fx),e(ae,pa),e(pa,Lx),e(pa,ca),e(ca,Ux),e(pa,Gx),e(ae,Nx),e(ae,or),u(ma,or,null),e(or,Ox),e(or,$m),e($m,Rx),m(t,Eh,c),m(t,Ht,c),e(Ht,sr),e(sr,Em),u(fa,Em,null),e(Ht,Wx),e(Ht,Oi),e(Oi,Hx),e(Oi,qm),e(qm,Qx),m(t,qh,c),m(t,T,c),u(ha,T,null),e(T,Vx),e(T,Cm),e(Cm,Bx),e(T,Zx),e(T,Am),e(Am,Yx),e(T,Xx),e(T,zm),e(zm,Kx),e(T,Jx),e(T,Dm),e(Dm,e5),e(T,t5),e(T,ge),e(ge,n5),e(ge,Ri),e(Ri,r5),e(ge,o5),e(ge,Im),e(Im,s5),e(ge,a5),e(ge,jm),e(jm,i5),e(ge,l5),e(ge,Sm),e(Sm,d5),e(ge,p5),e(T,c5),e(T,ar),u(ua,ar,null),e(ar,m5),e(ar,Mm),e(Mm,f5),e(T,h5),e(T,be),u(ga,be,null),e(be,u5),e(be,Fm),e(Fm,g5),e(be,_5),e(be,Lm),e(Lm,b5),e(be,v5),u(_a,be,null),e(T,w5),e(T,ir),u(ba,ir,null),e(ir,k5),e(ir,Um),e(Um,T5),e(T,y5),e(T,lr),u(va,lr,null),e(lr,P5),e(lr,wa),e(wa,x5),e(wa,Gm),e(Gm,$5),e(wa,E5),e(T,q5),e(T,dr),u(ka,dr,null),e(dr,C5),e(dr,Ta),e(Ta,A5),e(Ta,Nm),e(Nm,z5),e(Ta,D5),e(T,I5),e(T,pr),u(ya,pr,null),e(pr,j5),e(pr,Qt),e(Qt,S5),e(Qt,Om),e(Om,M5),e(Qt,F5),e(Qt,Rm),e(Rm,L5),e(Qt,U5),e(T,G5),e(T,cr),u(Pa,cr,null),e(cr,N5),e(cr,Wm),e(Wm,O5),e(T,R5),e(T,mr),u(xa,mr,null),e(mr,W5),e(mr,$a),e($a,H5),e($a,Hm),e(Hm,Q5),e($a,V5),Ch=!0},p(t,[c]){const Ea={};c&2&&(Ea.$$scope={dirty:c,ctx:t}),tn.$set(Ea);const Qm={};c&2&&(Qm.$$scope={dirty:c,ctx:t}),Tn.$set(Qm)},i(t){Ch||(g($.$$.fragment,t),g(wr.$$.fragment,t),g(kr.$$.fragment,t),g(yr.$$.fragment,t),g(Pr.$$.fragment,t),g(xr.$$.fragment,t),g($r.$$.fragment,t),g(Er.$$.fragment,t),g(zr.$$.fragment,t),g(Dr.$$.fragment,t),g(Ir.$$.fragment,t),g(tn.$$.fragment,t),g(jr.$$.fragment,t),g(Sr.$$.fragment,t),g(Mr.$$.fragment,t),g(Fr.$$.fragment,t),g(Ur.$$.fragment,t),g(Gr.$$.fragment,t),g(Nr.$$.fragment,t),g(Or.$$.fragment,t),g(Rr.$$.fragment,t),g(Wr.$$.fragment,t),g(Hr.$$.fragment,t),g(Qr.$$.fragment,t),g(Vr.$$.fragment,t),g(Xr.$$.fragment,t),g(Jr.$$.fragment,t),g(eo.$$.fragment,t),g(to.$$.fragment,t),g(ro.$$.fragment,t),g(oo.$$.fragment,t),g(so.$$.fragment,t),g(ao.$$.fragment,t),g(lo.$$.fragment,t),g(po.$$.fragment,t),g(co.$$.fragment,t),g(mo.$$.fragment,t),g(ho.$$.fragment,t),g(uo.$$.fragment,t),g(go.$$.fragment,t),g(_o.$$.fragment,t),g(wo.$$.fragment,t),g(ko.$$.fragment,t),g(To.$$.fragment,t),g(Tn.$$.fragment,t),g(xo.$$.fragment,t),g($o.$$.fragment,t),g(Eo.$$.fragment,t),g(zo.$$.fragment,t),g(Do.$$.fragment,t),g(Io.$$.fragment,t),g(Fo.$$.fragment,t),g(Lo.$$.fragment,t),g(Uo.$$.fragment,t),g(Oo.$$.fragment,t),g(Ro.$$.fragment,t),g(Wo.$$.fragment,t),g(Ho.$$.fragment,t),g(Qo.$$.fragment,t),g(Vo.$$.fragment,t),g(Xo.$$.fragment,t),g(Ko.$$.fragment,t),g(Jo.$$.fragment,t),g(ns.$$.fragment,t),g(rs.$$.fragment,t),g(os.$$.fragment,t),g(as.$$.fragment,t),g(is.$$.fragment,t),g(ls.$$.fragment,t),g(ps.$$.fragment,t),g(cs.$$.fragment,t),g(ms.$$.fragment,t),g(fs.$$.fragment,t),g(_s.$$.fragment,t),g(vs.$$.fragment,t),g(ws.$$.fragment,t),g(ks.$$.fragment,t),g(Ts.$$.fragment,t),g($s.$$.fragment,t),g(Es.$$.fragment,t),g(qs.$$.fragment,t),g(Ds.$$.fragment,t),g(Is.$$.fragment,t),g(js.$$.fragment,t),g(Fs.$$.fragment,t),g(Ls.$$.fragment,t),g(Us.$$.fragment,t),g(Gs.$$.fragment,t),g(Ns.$$.fragment,t),g(Ws.$$.fragment,t),g(Hs.$$.fragment,t),g(Qs.$$.fragment,t),g(Vs.$$.fragment,t),g(Bs.$$.fragment,t),g(Zs.$$.fragment,t),g(Ys.$$.fragment,t),g(Js.$$.fragment,t),g(ea.$$.fragment,t),g(ta.$$.fragment,t),g(na.$$.fragment,t),g(aa.$$.fragment,t),g(la.$$.fragment,t),g(da.$$.fragment,t),g(ma.$$.fragment,t),g(fa.$$.fragment,t),g(ha.$$.fragment,t),g(ua.$$.fragment,t),g(ga.$$.fragment,t),g(_a.$$.fragment,t),g(ba.$$.fragment,t),g(va.$$.fragment,t),g(ka.$$.fragment,t),g(ya.$$.fragment,t),g(Pa.$$.fragment,t),g(xa.$$.fragment,t),Ch=!0)},o(t){_($.$$.fragment,t),_(wr.$$.fragment,t),_(kr.$$.fragment,t),_(yr.$$.fragment,t),_(Pr.$$.fragment,t),_(xr.$$.fragment,t),_($r.$$.fragment,t),_(Er.$$.fragment,t),_(zr.$$.fragment,t),_(Dr.$$.fragment,t),_(Ir.$$.fragment,t),_(tn.$$.fragment,t),_(jr.$$.fragment,t),_(Sr.$$.fragment,t),_(Mr.$$.fragment,t),_(Fr.$$.fragment,t),_(Ur.$$.fragment,t),_(Gr.$$.fragment,t),_(Nr.$$.fragment,t),_(Or.$$.fragment,t),_(Rr.$$.fragment,t),_(Wr.$$.fragment,t),_(Hr.$$.fragment,t),_(Qr.$$.fragment,t),_(Vr.$$.fragment,t),_(Xr.$$.fragment,t),_(Jr.$$.fragment,t),_(eo.$$.fragment,t),_(to.$$.fragment,t),_(ro.$$.fragment,t),_(oo.$$.fragment,t),_(so.$$.fragment,t),_(ao.$$.fragment,t),_(lo.$$.fragment,t),_(po.$$.fragment,t),_(co.$$.fragment,t),_(mo.$$.fragment,t),_(ho.$$.fragment,t),_(uo.$$.fragment,t),_(go.$$.fragment,t),_(_o.$$.fragment,t),_(wo.$$.fragment,t),_(ko.$$.fragment,t),_(To.$$.fragment,t),_(Tn.$$.fragment,t),_(xo.$$.fragment,t),_($o.$$.fragment,t),_(Eo.$$.fragment,t),_(zo.$$.fragment,t),_(Do.$$.fragment,t),_(Io.$$.fragment,t),_(Fo.$$.fragment,t),_(Lo.$$.fragment,t),_(Uo.$$.fragment,t),_(Oo.$$.fragment,t),_(Ro.$$.fragment,t),_(Wo.$$.fragment,t),_(Ho.$$.fragment,t),_(Qo.$$.fragment,t),_(Vo.$$.fragment,t),_(Xo.$$.fragment,t),_(Ko.$$.fragment,t),_(Jo.$$.fragment,t),_(ns.$$.fragment,t),_(rs.$$.fragment,t),_(os.$$.fragment,t),_(as.$$.fragment,t),_(is.$$.fragment,t),_(ls.$$.fragment,t),_(ps.$$.fragment,t),_(cs.$$.fragment,t),_(ms.$$.fragment,t),_(fs.$$.fragment,t),_(_s.$$.fragment,t),_(vs.$$.fragment,t),_(ws.$$.fragment,t),_(ks.$$.fragment,t),_(Ts.$$.fragment,t),_($s.$$.fragment,t),_(Es.$$.fragment,t),_(qs.$$.fragment,t),_(Ds.$$.fragment,t),_(Is.$$.fragment,t),_(js.$$.fragment,t),_(Fs.$$.fragment,t),_(Ls.$$.fragment,t),_(Us.$$.fragment,t),_(Gs.$$.fragment,t),_(Ns.$$.fragment,t),_(Ws.$$.fragment,t),_(Hs.$$.fragment,t),_(Qs.$$.fragment,t),_(Vs.$$.fragment,t),_(Bs.$$.fragment,t),_(Zs.$$.fragment,t),_(Ys.$$.fragment,t),_(Js.$$.fragment,t),_(ea.$$.fragment,t),_(ta.$$.fragment,t),_(na.$$.fragment,t),_(aa.$$.fragment,t),_(la.$$.fragment,t),_(da.$$.fragment,t),_(ma.$$.fragment,t),_(fa.$$.fragment,t),_(ha.$$.fragment,t),_(ua.$$.fragment,t),_(ga.$$.fragment,t),_(_a.$$.fragment,t),_(ba.$$.fragment,t),_(va.$$.fragment,t),_(ka.$$.fragment,t),_(ya.$$.fragment,t),_(Pa.$$.fragment,t),_(xa.$$.fragment,t),Ch=!1},d(t){n(x),t&&n(_e),t&&n(q),b($),t&&n(Vm),t&&n(Vt),t&&n(Bm),t&&n(za),t&&n(Zm),t&&n(Bt),t&&n(Ym),t&&n(Ve),b(wr),t&&n(Xm),t&&n(Yt),t&&n(Km),t&&n(Xa),t&&n(Jm),b(kr,t),t&&n(ef),t&&n(Xt),t&&n(tf),b(yr,t),t&&n(nf),t&&n(Kt),t&&n(rf),b(Pr,t),t&&n(of),t&&n(Jt),t&&n(sf),b(xr,t),t&&n(af),t&&n(Ka),t&&n(lf),b($r,t),t&&n(df),t&&n(R),b(Er),b(zr),t&&n(pf),t&&n(Ze),b(Dr),t&&n(cf),t&&n(qe),t&&n(mf),b(Ir,t),t&&n(ff),b(tn,t),t&&n(hf),b(jr,t),t&&n(uf),b(Sr,t),t&&n(gf),t&&n(ni),t&&n(_f),b(Mr,t),t&&n(bf),t&&n(nn),t&&n(vf),b(Fr,t),t&&n(wf),t&&n(ri),t&&n(kf),t&&n(oi),t&&n(Tf),t&&n(ie),t&&n(yf),t&&n(Xe),b(Ur),t&&n(Pf),t&&n(Pe),t&&n(xf),t&&n(Ce),t&&n($f),b(Gr,t),t&&n(Ef),t&&n(si),t&&n(qf),b(Nr,t),t&&n(Cf),t&&n(ai),t&&n(Af),t&&n(on),t&&n(zf),t&&n(Ke),b(Or),t&&n(Df),t&&n(ii),t&&n(If),t&&n(an),t&&n(jf),t&&n(li),t&&n(Sf),t&&n(di),t&&n(Mf),b(Rr,t),t&&n(Ff),t&&n(pi),t&&n(Lf),t&&n(Je),b(Wr),t&&n(Uf),t&&n(ci),t&&n(Gf),t&&n(et),b(Hr),t&&n(Nf),t&&n(tt),b(Qr),t&&n(Of),t&&n(J),b(Vr),b(Xr),t&&n(Rf),t&&n(rt),b(Jr),t&&n(Wf),t&&n(fe),b(eo),b(to),t&&n(Hf),t&&n(ot),b(ro),t&&n(Qf),t&&n(z),b(oo),b(so),b(ao),b(lo),b(po),b(co),t&&n(Vf),t&&n(M),b(mo),b(ho),b(uo),t&&n(Bf),t&&n(at),b(go),t&&n(Zf),t&&n(ee),b(_o),b(wo),t&&n(Yf),t&&n(lt),b(ko),t&&n(Xf),t&&n(W),b(To),b(Tn),b(xo),t&&n(Kf),t&&n(ct),b($o),t&&n(Jf),t&&n(te),b(Eo),b(zo),t&&n(eh),t&&n(ft),b(Do),t&&n(th),t&&n(ne),b(Io),b(Fo),t&&n(nh),t&&n(ut),b(Lo),t&&n(rh),t&&n(D),b(Uo),b(Oo),b(Ro),b(Wo),b(Ho),t&&n(oh),t&&n(Dn),t&&n(sh),t&&n(bt),b(Qo),t&&n(ah),t&&n(re),b(Vo),b(Xo),t&&n(ih),t&&n(wt),b(Ko),t&&n(lh),t&&n(I),b(Jo),b(ns),b(rs),b(os),b(as),t&&n(dh),t&&n(Pt),b(is),t&&n(ph),t&&n(F),b(ls),b(ps),b(cs),t&&n(ch),t&&n($t),b(ms),t&&n(mh),t&&n(oe),b(fs),b(_s),b(vs),b(ws),t&&n(fh),t&&n(qt),b(ks),t&&n(hh),t&&n(Q),b(Ts),b($s),t&&n(uh),t&&n(zt),b(Es),t&&n(gh),t&&n(se),b(qs),b(Ds),t&&n(_h),t&&n(It),b(Is),t&&n(bh),t&&n(j),b(js),b(Fs),b(Ls),b(Us),t&&n(vh),t&&n(St),b(Gs),t&&n(wh),t&&n(E),b(Ns),b(Ws),b(Hs),b(Qs),b(Vs),b(Bs),t&&n(kh),t&&n(Lt),b(Zs),t&&n(Th),t&&n(U),b(Ys),b(Js),b(ea),t&&n(yh),t&&n(Gt),b(ta),t&&n(Ph),t&&n(V),b(na),b(aa),t&&n(xh),t&&n(Ot),b(la),t&&n($h),t&&n(ae),b(da),b(ma),t&&n(Eh),t&&n(Ht),b(fa),t&&n(qh),t&&n(T),b(ha),b(ua),b(ga),b(_a),b(ba),b(va),b(ka),b(ya),b(Pa),b(xa)}}}const z6={local:"pipelines",sections:[{local:"transformers.pipeline",title:"The pipeline abstraction"},{local:"pipeline-batching",title:"Pipeline batching"},{local:"pipeline-chunk-batching",title:"Pipeline chunk batching"},{local:"pipeline-custom-code",title:"Pipeline custom code"},{local:"implementing-a-pipeline",title:"Implementing a pipeline"},{local:"the-task-specific-pipelines",sections:[{local:"transformers.AudioClassificationPipeline",title:"AudioClassificationPipeline"},{local:"transformers.AutomaticSpeechRecognitionPipeline",title:"AutomaticSpeechRecognitionPipeline"},{local:"transformers.Conversation",title:"ConversationalPipeline"},{local:"transformers.FeatureExtractionPipeline",title:"FeatureExtractionPipeline"},{local:"transformers.FillMaskPipeline",title:"FillMaskPipeline"},{local:"transformers.ImageClassificationPipeline",title:"ImageClassificationPipeline"},{local:"transformers.ImageSegmentationPipeline",title:"ImageSegmentationPipeline"},{local:"transformers.TokenClassificationPipeline",title:"NerPipeline"},{local:"transformers.ObjectDetectionPipeline",title:"ObjectDetectionPipeline"},{local:"transformers.QuestionAnsweringPipeline",title:"QuestionAnsweringPipeline"},{local:"transformers.SummarizationPipeline",title:"SummarizationPipeline"},{local:"transformers.TableQuestionAnsweringPipeline",title:"TableQuestionAnsweringPipeline"},{local:"transformers.TextClassificationPipeline",title:"TextClassificationPipeline"},{local:"transformers.TextGenerationPipeline",title:"TextGenerationPipeline"},{local:"transformers.Text2TextGenerationPipeline",title:"Text2TextGenerationPipeline"},{local:"transformers.TokenClassificationPipeline",title:"TokenClassificationPipeline"},{local:"transformers.TranslationPipeline",title:"TranslationPipeline"},{local:"transformers.ZeroShotClassificationPipeline",title:"ZeroShotClassificationPipeline"},{local:"transformers.ZeroShotImageClassificationPipeline",title:"ZeroShotImageClassificationPipeline"}],title:"The task specific pipelines"},{local:"transformers.Pipeline",title:"Parent class: `Pipeline`"}],title:"Pipelines"};function D6(Ca){return E6(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class L6 extends y6{constructor(x){super();P6(this,x,D6,A6,x6,{})}}export{L6 as default,z6 as metadata};
