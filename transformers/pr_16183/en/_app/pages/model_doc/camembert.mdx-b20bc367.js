import{S as Fg,i as Mg,s as Pg,e as o,k as d,w as F,t as n,M as Lg,c as r,d as t,m,a as s,x as M,h as i,b as c,F as e,g as h,y as P,q as L,o as R,B as q}from"../../chunks/vendor-6b77c823.js";import{T as ss}from"../../chunks/Tip-39098574.js";import{D as $e}from"../../chunks/Docstring-abef54e3.js";import{I as Me}from"../../chunks/IconCopyLink-7a11ce68.js";function Rg(Pe){let k,Z,A,_,D,G,le,z,de,Q,u,W,I,X,me,x,ce,se,H,w,j,V,g,b,ee,B,ae,te,O,he,ne,v,fe,S,oe,J,N,re,pe,E,ie,C,ue;return{c(){k=o("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=o("ul"),D=o("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),z=o("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=o("p"),W=n("This second option is useful when using "),I=o("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),x=o("code"),ce=n("model(inputs)"),se=n("."),H=d(),w=o("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=o("ul"),b=o("li"),ee=n("a single Tensor with "),B=o("code"),ae=n("input_ids"),te=n(" only and nothing else: "),O=o("code"),he=n("model(inputs_ids)"),ne=d(),v=o("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=o("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=o("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),E=o("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=o("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){k=r(l,"P",{});var p=s(k);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=r(l,"UL",{});var K=s(_);D=r(K,"LI",{});var be=s(D);G=i(be,"having all inputs as keyword arguments (like PyTorch models), or"),be.forEach(t),le=m(K),z=r(K,"LI",{});var Ee=s(z);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),K.forEach(t),Q=m(l),u=r(l,"P",{});var y=s(u);W=i(y,"This second option is useful when using "),I=r(y,"CODE",{});var Te=s(I);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),x=r(y,"CODE",{});var ge=s(x);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),w=r(l,"P",{});var ve=s(w);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=r(l,"UL",{});var T=s(g);b=r(T,"LI",{});var $=s(b);ee=i($,"a single Tensor with "),B=r($,"CODE",{});var Ce=s(B);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i($," only and nothing else: "),O=r($,"CODE",{});var ke=s(O);he=i(ke,"model(inputs_ids)"),ke.forEach(t),$.forEach(t),ne=m(T),v=r(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=r(U,"CODE",{});var we=s(S);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=r(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),E=r(T,"LI",{});var Y=s(E);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=r(Y,"CODE",{});var ye=s(C);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,k,p),e(k,Z),h(l,A,p),h(l,_,p),e(_,D),e(D,G),e(_,le),e(_,z),e(z,de),h(l,Q,p),h(l,u,p),e(u,W),e(u,I),e(I,X),e(u,me),e(u,x),e(x,ce),e(u,se),h(l,H,p),h(l,w,p),e(w,j),h(l,V,p),h(l,g,p),e(g,b),e(b,ee),e(b,B),e(B,ae),e(b,te),e(b,O),e(O,he),e(g,ne),e(g,v),e(v,fe),e(v,S),e(S,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,E),e(E,ie),e(E,C),e(C,ue)},d(l){l&&t(k),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(w),l&&t(V),l&&t(g)}}}function qg(Pe){let k,Z,A,_,D,G,le,z,de,Q,u,W,I,X,me,x,ce,se,H,w,j,V,g,b,ee,B,ae,te,O,he,ne,v,fe,S,oe,J,N,re,pe,E,ie,C,ue;return{c(){k=o("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=o("ul"),D=o("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),z=o("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=o("p"),W=n("This second option is useful when using "),I=o("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),x=o("code"),ce=n("model(inputs)"),se=n("."),H=d(),w=o("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=o("ul"),b=o("li"),ee=n("a single Tensor with "),B=o("code"),ae=n("input_ids"),te=n(" only and nothing else: "),O=o("code"),he=n("model(inputs_ids)"),ne=d(),v=o("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=o("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=o("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),E=o("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=o("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){k=r(l,"P",{});var p=s(k);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=r(l,"UL",{});var K=s(_);D=r(K,"LI",{});var be=s(D);G=i(be,"having all inputs as keyword arguments (like PyTorch models), or"),be.forEach(t),le=m(K),z=r(K,"LI",{});var Ee=s(z);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),K.forEach(t),Q=m(l),u=r(l,"P",{});var y=s(u);W=i(y,"This second option is useful when using "),I=r(y,"CODE",{});var Te=s(I);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),x=r(y,"CODE",{});var ge=s(x);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),w=r(l,"P",{});var ve=s(w);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=r(l,"UL",{});var T=s(g);b=r(T,"LI",{});var $=s(b);ee=i($,"a single Tensor with "),B=r($,"CODE",{});var Ce=s(B);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i($," only and nothing else: "),O=r($,"CODE",{});var ke=s(O);he=i(ke,"model(inputs_ids)"),ke.forEach(t),$.forEach(t),ne=m(T),v=r(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=r(U,"CODE",{});var we=s(S);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=r(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),E=r(T,"LI",{});var Y=s(E);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=r(Y,"CODE",{});var ye=s(C);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,k,p),e(k,Z),h(l,A,p),h(l,_,p),e(_,D),e(D,G),e(_,le),e(_,z),e(z,de),h(l,Q,p),h(l,u,p),e(u,W),e(u,I),e(I,X),e(u,me),e(u,x),e(x,ce),e(u,se),h(l,H,p),h(l,w,p),e(w,j),h(l,V,p),h(l,g,p),e(g,b),e(b,ee),e(b,B),e(B,ae),e(b,te),e(b,O),e(O,he),e(g,ne),e(g,v),e(v,fe),e(v,S),e(S,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,E),e(E,ie),e(E,C),e(C,ue)},d(l){l&&t(k),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(w),l&&t(V),l&&t(g)}}}function Ag(Pe){let k,Z,A,_,D,G,le,z,de,Q,u,W,I,X,me,x,ce,se,H,w,j,V,g,b,ee,B,ae,te,O,he,ne,v,fe,S,oe,J,N,re,pe,E,ie,C,ue;return{c(){k=o("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=o("ul"),D=o("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),z=o("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=o("p"),W=n("This second option is useful when using "),I=o("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),x=o("code"),ce=n("model(inputs)"),se=n("."),H=d(),w=o("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=o("ul"),b=o("li"),ee=n("a single Tensor with "),B=o("code"),ae=n("input_ids"),te=n(" only and nothing else: "),O=o("code"),he=n("model(inputs_ids)"),ne=d(),v=o("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=o("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=o("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),E=o("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=o("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){k=r(l,"P",{});var p=s(k);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=r(l,"UL",{});var K=s(_);D=r(K,"LI",{});var be=s(D);G=i(be,"having all inputs as keyword arguments (like PyTorch models), or"),be.forEach(t),le=m(K),z=r(K,"LI",{});var Ee=s(z);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),K.forEach(t),Q=m(l),u=r(l,"P",{});var y=s(u);W=i(y,"This second option is useful when using "),I=r(y,"CODE",{});var Te=s(I);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),x=r(y,"CODE",{});var ge=s(x);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),w=r(l,"P",{});var ve=s(w);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=r(l,"UL",{});var T=s(g);b=r(T,"LI",{});var $=s(b);ee=i($,"a single Tensor with "),B=r($,"CODE",{});var Ce=s(B);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i($," only and nothing else: "),O=r($,"CODE",{});var ke=s(O);he=i(ke,"model(inputs_ids)"),ke.forEach(t),$.forEach(t),ne=m(T),v=r(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=r(U,"CODE",{});var we=s(S);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=r(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),E=r(T,"LI",{});var Y=s(E);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=r(Y,"CODE",{});var ye=s(C);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,k,p),e(k,Z),h(l,A,p),h(l,_,p),e(_,D),e(D,G),e(_,le),e(_,z),e(z,de),h(l,Q,p),h(l,u,p),e(u,W),e(u,I),e(I,X),e(u,me),e(u,x),e(x,ce),e(u,se),h(l,H,p),h(l,w,p),e(w,j),h(l,V,p),h(l,g,p),e(g,b),e(b,ee),e(b,B),e(B,ae),e(b,te),e(b,O),e(O,he),e(g,ne),e(g,v),e(v,fe),e(v,S),e(S,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,E),e(E,ie),e(E,C),e(C,ue)},d(l){l&&t(k),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(w),l&&t(V),l&&t(g)}}}function Dg(Pe){let k,Z,A,_,D,G,le,z,de,Q,u,W,I,X,me,x,ce,se,H,w,j,V,g,b,ee,B,ae,te,O,he,ne,v,fe,S,oe,J,N,re,pe,E,ie,C,ue;return{c(){k=o("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=o("ul"),D=o("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),z=o("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=o("p"),W=n("This second option is useful when using "),I=o("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),x=o("code"),ce=n("model(inputs)"),se=n("."),H=d(),w=o("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=o("ul"),b=o("li"),ee=n("a single Tensor with "),B=o("code"),ae=n("input_ids"),te=n(" only and nothing else: "),O=o("code"),he=n("model(inputs_ids)"),ne=d(),v=o("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=o("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=o("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),E=o("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=o("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){k=r(l,"P",{});var p=s(k);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=r(l,"UL",{});var K=s(_);D=r(K,"LI",{});var be=s(D);G=i(be,"having all inputs as keyword arguments (like PyTorch models), or"),be.forEach(t),le=m(K),z=r(K,"LI",{});var Ee=s(z);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),K.forEach(t),Q=m(l),u=r(l,"P",{});var y=s(u);W=i(y,"This second option is useful when using "),I=r(y,"CODE",{});var Te=s(I);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),x=r(y,"CODE",{});var ge=s(x);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),w=r(l,"P",{});var ve=s(w);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=r(l,"UL",{});var T=s(g);b=r(T,"LI",{});var $=s(b);ee=i($,"a single Tensor with "),B=r($,"CODE",{});var Ce=s(B);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i($," only and nothing else: "),O=r($,"CODE",{});var ke=s(O);he=i(ke,"model(inputs_ids)"),ke.forEach(t),$.forEach(t),ne=m(T),v=r(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=r(U,"CODE",{});var we=s(S);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=r(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),E=r(T,"LI",{});var Y=s(E);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=r(Y,"CODE",{});var ye=s(C);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,k,p),e(k,Z),h(l,A,p),h(l,_,p),e(_,D),e(D,G),e(_,le),e(_,z),e(z,de),h(l,Q,p),h(l,u,p),e(u,W),e(u,I),e(I,X),e(u,me),e(u,x),e(x,ce),e(u,se),h(l,H,p),h(l,w,p),e(w,j),h(l,V,p),h(l,g,p),e(g,b),e(b,ee),e(b,B),e(B,ae),e(b,te),e(b,O),e(O,he),e(g,ne),e(g,v),e(v,fe),e(v,S),e(S,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,E),e(E,ie),e(E,C),e(C,ue)},d(l){l&&t(k),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(w),l&&t(V),l&&t(g)}}}function zg(Pe){let k,Z,A,_,D,G,le,z,de,Q,u,W,I,X,me,x,ce,se,H,w,j,V,g,b,ee,B,ae,te,O,he,ne,v,fe,S,oe,J,N,re,pe,E,ie,C,ue;return{c(){k=o("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=o("ul"),D=o("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),z=o("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=o("p"),W=n("This second option is useful when using "),I=o("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),x=o("code"),ce=n("model(inputs)"),se=n("."),H=d(),w=o("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=o("ul"),b=o("li"),ee=n("a single Tensor with "),B=o("code"),ae=n("input_ids"),te=n(" only and nothing else: "),O=o("code"),he=n("model(inputs_ids)"),ne=d(),v=o("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=o("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=o("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),E=o("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=o("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){k=r(l,"P",{});var p=s(k);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=r(l,"UL",{});var K=s(_);D=r(K,"LI",{});var be=s(D);G=i(be,"having all inputs as keyword arguments (like PyTorch models), or"),be.forEach(t),le=m(K),z=r(K,"LI",{});var Ee=s(z);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),K.forEach(t),Q=m(l),u=r(l,"P",{});var y=s(u);W=i(y,"This second option is useful when using "),I=r(y,"CODE",{});var Te=s(I);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),x=r(y,"CODE",{});var ge=s(x);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),w=r(l,"P",{});var ve=s(w);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=r(l,"UL",{});var T=s(g);b=r(T,"LI",{});var $=s(b);ee=i($,"a single Tensor with "),B=r($,"CODE",{});var Ce=s(B);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i($," only and nothing else: "),O=r($,"CODE",{});var ke=s(O);he=i(ke,"model(inputs_ids)"),ke.forEach(t),$.forEach(t),ne=m(T),v=r(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=r(U,"CODE",{});var we=s(S);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=r(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),E=r(T,"LI",{});var Y=s(E);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=r(Y,"CODE",{});var ye=s(C);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,k,p),e(k,Z),h(l,A,p),h(l,_,p),e(_,D),e(D,G),e(_,le),e(_,z),e(z,de),h(l,Q,p),h(l,u,p),e(u,W),e(u,I),e(I,X),e(u,me),e(u,x),e(x,ce),e(u,se),h(l,H,p),h(l,w,p),e(w,j),h(l,V,p),h(l,g,p),e(g,b),e(b,ee),e(b,B),e(B,ae),e(b,te),e(b,O),e(O,he),e(g,ne),e(g,v),e(v,fe),e(v,S),e(S,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,E),e(E,ie),e(E,C),e(C,ue)},d(l){l&&t(k),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(w),l&&t(V),l&&t(g)}}}function Ig(Pe){let k,Z,A,_,D,G,le,z,de,Q,u,W,I,X,me,x,ce,se,H,w,j,V,g,b,ee,B,ae,te,O,he,ne,v,fe,S,oe,J,N,re,pe,E,ie,C,ue;return{c(){k=o("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=o("ul"),D=o("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),z=o("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=o("p"),W=n("This second option is useful when using "),I=o("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),x=o("code"),ce=n("model(inputs)"),se=n("."),H=d(),w=o("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=o("ul"),b=o("li"),ee=n("a single Tensor with "),B=o("code"),ae=n("input_ids"),te=n(" only and nothing else: "),O=o("code"),he=n("model(inputs_ids)"),ne=d(),v=o("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=o("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=o("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),E=o("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=o("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){k=r(l,"P",{});var p=s(k);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=r(l,"UL",{});var K=s(_);D=r(K,"LI",{});var be=s(D);G=i(be,"having all inputs as keyword arguments (like PyTorch models), or"),be.forEach(t),le=m(K),z=r(K,"LI",{});var Ee=s(z);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),K.forEach(t),Q=m(l),u=r(l,"P",{});var y=s(u);W=i(y,"This second option is useful when using "),I=r(y,"CODE",{});var Te=s(I);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),x=r(y,"CODE",{});var ge=s(x);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),w=r(l,"P",{});var ve=s(w);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=r(l,"UL",{});var T=s(g);b=r(T,"LI",{});var $=s(b);ee=i($,"a single Tensor with "),B=r($,"CODE",{});var Ce=s(B);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i($," only and nothing else: "),O=r($,"CODE",{});var ke=s(O);he=i(ke,"model(inputs_ids)"),ke.forEach(t),$.forEach(t),ne=m(T),v=r(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=r(U,"CODE",{});var we=s(S);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=r(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),E=r(T,"LI",{});var Y=s(E);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=r(Y,"CODE",{});var ye=s(C);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,k,p),e(k,Z),h(l,A,p),h(l,_,p),e(_,D),e(D,G),e(_,le),e(_,z),e(z,de),h(l,Q,p),h(l,u,p),e(u,W),e(u,I),e(I,X),e(u,me),e(u,x),e(x,ce),e(u,se),h(l,H,p),h(l,w,p),e(w,j),h(l,V,p),h(l,g,p),e(g,b),e(b,ee),e(b,B),e(B,ae),e(b,te),e(b,O),e(O,he),e(g,ne),e(g,v),e(v,fe),e(v,S),e(S,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,E),e(E,ie),e(E,C),e(C,ue)},d(l){l&&t(k),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(w),l&&t(V),l&&t(g)}}}function xg(Pe){let k,Z,A,_,D,G,le,z,de,Q,u,W,I,X,me,x,ce,se,H,w,j,V,g,b,ee,B,ae,te,O,he,ne,v,fe,S,oe,J,N,re,pe,E,ie,C,ue;return{c(){k=o("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=o("ul"),D=o("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),z=o("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=o("p"),W=n("This second option is useful when using "),I=o("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),x=o("code"),ce=n("model(inputs)"),se=n("."),H=d(),w=o("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=o("ul"),b=o("li"),ee=n("a single Tensor with "),B=o("code"),ae=n("input_ids"),te=n(" only and nothing else: "),O=o("code"),he=n("model(inputs_ids)"),ne=d(),v=o("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=o("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=o("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),E=o("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=o("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){k=r(l,"P",{});var p=s(k);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=r(l,"UL",{});var K=s(_);D=r(K,"LI",{});var be=s(D);G=i(be,"having all inputs as keyword arguments (like PyTorch models), or"),be.forEach(t),le=m(K),z=r(K,"LI",{});var Ee=s(z);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),K.forEach(t),Q=m(l),u=r(l,"P",{});var y=s(u);W=i(y,"This second option is useful when using "),I=r(y,"CODE",{});var Te=s(I);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),x=r(y,"CODE",{});var ge=s(x);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),w=r(l,"P",{});var ve=s(w);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=r(l,"UL",{});var T=s(g);b=r(T,"LI",{});var $=s(b);ee=i($,"a single Tensor with "),B=r($,"CODE",{});var Ce=s(B);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i($," only and nothing else: "),O=r($,"CODE",{});var ke=s(O);he=i(ke,"model(inputs_ids)"),ke.forEach(t),$.forEach(t),ne=m(T),v=r(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),S=r(U,"CODE",{});var we=s(S);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=r(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),E=r(T,"LI",{});var Y=s(E);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),C=r(Y,"CODE",{});var ye=s(C);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,k,p),e(k,Z),h(l,A,p),h(l,_,p),e(_,D),e(D,G),e(_,le),e(_,z),e(z,de),h(l,Q,p),h(l,u,p),e(u,W),e(u,I),e(I,X),e(u,me),e(u,x),e(x,ce),e(u,se),h(l,H,p),h(l,w,p),e(w,j),h(l,V,p),h(l,g,p),e(g,b),e(b,ee),e(b,B),e(B,ae),e(b,te),e(b,O),e(O,he),e(g,ne),e(g,v),e(v,fe),e(v,S),e(S,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,E),e(E,ie),e(E,C),e(C,ue)},d(l){l&&t(k),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(w),l&&t(V),l&&t(g)}}}function Og(Pe){let k,Z,A,_,D,G,le,z,de,Q,u,W,I,X,me,x,ce,se,H,w,j,V,g,b,ee,B,ae,te,O,he,ne,v,fe,S,oe,J,N,re,pe,E,ie,C,ue,l,p,K,be,Ee,y,Te,ge,ve,T,$,Ce,ke,U,we,_e,Y,ye,ro,nl,as,il,ll,an,ht,Pt,Xs,so,dl,js,ml,nn,Fe,ao,cl,et,hl,ns,fl,pl,is,ul,gl,no,_l,vl,bl,io,kl,ls,Tl,wl,El,tt,lo,Cl,Js,yl,$l,mo,ds,Fl,Ys,Ml,Pl,ms,Ll,Zs,Rl,ql,Lt,co,Al,ho,Dl,ea,zl,Il,xl,Rt,fo,Ol,ta,Sl,Bl,cs,po,ln,ft,qt,oa,uo,Nl,ra,Ul,dn,xe,go,Hl,Ke,Ql,sa,Vl,Kl,hs,Wl,Gl,fs,Xl,jl,_o,Jl,Yl,Zl,vo,ed,ps,td,od,rd,ot,bo,sd,aa,ad,nd,ko,us,id,na,ld,dd,gs,md,ia,cd,hd,At,To,fd,la,pd,mn,pt,Dt,da,wo,ud,ma,gd,cn,Oe,Eo,_d,ca,vd,bd,Co,kd,_s,Td,wd,Ed,yo,Cd,$o,yd,$d,Fd,Fo,Md,vs,Pd,Ld,hn,ut,zt,ha,Mo,Rd,fa,qd,fn,Se,Po,Ad,Lo,Dd,pa,zd,Id,xd,Ro,Od,bs,Sd,Bd,Nd,qo,Ud,Ao,Hd,Qd,Vd,Do,Kd,ks,Wd,Gd,pn,gt,It,ua,zo,Xd,ga,jd,un,Be,Io,Jd,xo,Yd,_a,Zd,em,tm,Oo,om,Ts,rm,sm,am,So,nm,Bo,im,lm,dm,No,mm,ws,cm,hm,gn,_t,xt,va,Uo,fm,ba,pm,_n,Ne,Ho,um,ka,gm,_m,Qo,vm,Es,bm,km,Tm,Vo,wm,Ko,Em,Cm,ym,Wo,$m,Cs,Fm,Mm,vn,vt,Ot,Ta,Go,Pm,wa,Lm,bn,Ue,Xo,Rm,Ea,qm,Am,jo,Dm,ys,zm,Im,xm,Jo,Om,Yo,Sm,Bm,Nm,Zo,Um,$s,Hm,Qm,kn,bt,St,Ca,er,Vm,ya,Km,Tn,He,tr,Wm,$a,Gm,Xm,or,jm,Fs,Jm,Ym,Zm,rr,ec,sr,tc,oc,rc,ar,sc,Ms,ac,nc,wn,kt,Bt,Fa,nr,ic,Ma,lc,En,Qe,ir,dc,Nt,mc,Pa,cc,hc,La,fc,pc,lr,uc,Ps,gc,_c,vc,dr,bc,mr,kc,Tc,wc,cr,Ec,Ls,Cc,yc,Cn,Tt,Ut,Ra,hr,$c,qa,Fc,yn,Le,fr,Mc,Aa,Pc,Lc,pr,Rc,Rs,qc,Ac,Dc,ur,zc,gr,Ic,xc,Oc,Ht,Sc,_r,Bc,qs,Nc,Uc,$n,wt,Qt,Da,vr,Hc,za,Qc,Fn,Re,br,Vc,kr,Kc,Ia,Wc,Gc,Xc,Tr,jc,As,Jc,Yc,Zc,wr,eh,Er,th,oh,rh,Vt,sh,Cr,ah,Ds,nh,ih,Mn,Et,Kt,xa,yr,lh,Oa,dh,Pn,qe,$r,mh,Fr,ch,Sa,hh,fh,ph,Mr,uh,zs,gh,_h,vh,Pr,bh,Lr,kh,Th,wh,Wt,Eh,Rr,Ch,Is,yh,$h,Ln,Ct,Gt,Ba,qr,Fh,Na,Mh,Rn,Ae,Ar,Ph,Ua,Lh,Rh,Dr,qh,xs,Ah,Dh,zh,zr,Ih,Ir,xh,Oh,Sh,Xt,Bh,xr,Nh,Os,Uh,Hh,qn,yt,jt,Ha,Or,Qh,Qa,Vh,An,De,Sr,Kh,Va,Wh,Gh,Br,Xh,Ss,jh,Jh,Yh,Nr,Zh,Ur,ef,tf,of,Jt,rf,Hr,sf,Bs,af,nf,Dn,$t,Yt,Ka,Qr,lf,Wa,df,zn,ze,Vr,mf,Ga,cf,hf,Kr,ff,Ns,pf,uf,gf,Wr,_f,Gr,vf,bf,kf,Zt,Tf,Xr,wf,Us,Ef,Cf,In,Ft,eo,Xa,jr,yf,ja,$f,xn,Ie,Jr,Ff,Mt,Mf,Ja,Pf,Lf,Ya,Rf,qf,Af,Yr,Df,Hs,zf,If,xf,Zr,Of,es,Sf,Bf,Nf,to,Uf,ts,Hf,Qs,Qf,Vf,On;return G=new Me({}),X=new Me({}),$=new Me({}),Y=new $e({props:{name:"class transformers.CamembertConfig",anchor:"transformers.CamembertConfig",parameters:[{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/configuration_camembert.py#L35"}}),so=new Me({}),ao=new $e({props:{name:"class transformers.CamembertTokenizer",anchor:"transformers.CamembertTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<s>NOTUSED', '</s>NOTUSED']"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/tokenization_camembert.py#L45",parametersDescription:[{anchor:"transformers.CamembertTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.CamembertTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.CamembertTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.CamembertTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.CamembertTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.CamembertTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CamembertTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.CamembertTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.CamembertTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.CamembertTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.CamembertTokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}]}}),lo=new $e({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/tokenization_camembert.py#L161",parametersDescription:[{anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),co=new $e({props:{name:"get_special_tokens_mask",anchor:"transformers.CamembertTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/tokenization_camembert.py#L187",parametersDescription:[{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),fo=new $e({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/tokenization_camembert.py#L214",parametersDescription:[{anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),po=new $e({props:{name:"save_vocabulary",anchor:"transformers.CamembertTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/tokenization_camembert.py#L283"}}),uo=new Me({}),go=new $e({props:{name:"class transformers.CamembertTokenizerFast",anchor:"transformers.CamembertTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<s>NOTUSED', '</s>NOTUSED']"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/tokenization_camembert_fast.py#L54",parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.CamembertTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.CamembertTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.CamembertTokenizerFast.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.CamembertTokenizerFast.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.CamembertTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CamembertTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.CamembertTokenizerFast.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.CamembertTokenizerFast.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"}]}}),bo=new $e({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/tokenization_camembert_fast.py#L146",parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),To=new $e({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/tokenization_camembert_fast.py#L172",parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),wo=new Me({}),Eo=new $e({props:{name:"class transformers.CamembertModel",anchor:"transformers.CamembertModel",parameters:[{name:"config",val:""},{name:"add_pooling_layer",val:" = True"}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_camembert.py#L64",parametersDescription:[{anchor:"transformers.CamembertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Mo=new Me({}),Po=new $e({props:{name:"class transformers.CamembertForCausalLM",anchor:"transformers.CamembertForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_camembert.py#L153",parametersDescription:[{anchor:"transformers.CamembertForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),zo=new Me({}),Io=new $e({props:{name:"class transformers.CamembertForMaskedLM",anchor:"transformers.CamembertForMaskedLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_camembert.py#L77",parametersDescription:[{anchor:"transformers.CamembertForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Uo=new Me({}),Ho=new $e({props:{name:"class transformers.CamembertForSequenceClassification",anchor:"transformers.CamembertForSequenceClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_camembert.py#L93",parametersDescription:[{anchor:"transformers.CamembertForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Go=new Me({}),Xo=new $e({props:{name:"class transformers.CamembertForMultipleChoice",anchor:"transformers.CamembertForMultipleChoice",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_camembert.py#L109",parametersDescription:[{anchor:"transformers.CamembertForMultipleChoice.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),er=new Me({}),tr=new $e({props:{name:"class transformers.CamembertForTokenClassification",anchor:"transformers.CamembertForTokenClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_camembert.py#L125",parametersDescription:[{anchor:"transformers.CamembertForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),nr=new Me({}),ir=new $e({props:{name:"class transformers.CamembertForQuestionAnswering",anchor:"transformers.CamembertForQuestionAnswering",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_camembert.py#L141",parametersDescription:[{anchor:"transformers.CamembertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),hr=new Me({}),fr=new $e({props:{name:"class transformers.TFCamembertModel",anchor:"transformers.TFCamembertModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_tf_camembert.py#L81",parametersDescription:[{anchor:"transformers.TFCamembertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ht=new ss({props:{$$slots:{default:[Rg]},$$scope:{ctx:Pe}}}),vr=new Me({}),br=new $e({props:{name:"class transformers.TFCamembertForCausalLM",anchor:"transformers.TFCamembertForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_tf_camembert.py#L170",parametersDescription:[{anchor:"transformers.TFCamembertForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Vt=new ss({props:{$$slots:{default:[qg]},$$scope:{ctx:Pe}}}),yr=new Me({}),$r=new $e({props:{name:"class transformers.TFCamembertForMaskedLM",anchor:"transformers.TFCamembertForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_tf_camembert.py#L94",parametersDescription:[{anchor:"transformers.TFCamembertForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Wt=new ss({props:{$$slots:{default:[Ag]},$$scope:{ctx:Pe}}}),qr=new Me({}),Ar=new $e({props:{name:"class transformers.TFCamembertForSequenceClassification",anchor:"transformers.TFCamembertForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_tf_camembert.py#L110",parametersDescription:[{anchor:"transformers.TFCamembertForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Xt=new ss({props:{$$slots:{default:[Dg]},$$scope:{ctx:Pe}}}),Or=new Me({}),Sr=new $e({props:{name:"class transformers.TFCamembertForMultipleChoice",anchor:"transformers.TFCamembertForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_tf_camembert.py#L142",parametersDescription:[{anchor:"transformers.TFCamembertForMultipleChoice.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Jt=new ss({props:{$$slots:{default:[zg]},$$scope:{ctx:Pe}}}),Qr=new Me({}),Vr=new $e({props:{name:"class transformers.TFCamembertForTokenClassification",anchor:"transformers.TFCamembertForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_tf_camembert.py#L126",parametersDescription:[{anchor:"transformers.TFCamembertForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Zt=new ss({props:{$$slots:{default:[Ig]},$$scope:{ctx:Pe}}}),jr=new Me({}),Jr=new $e({props:{name:"class transformers.TFCamembertForQuestionAnswering",anchor:"transformers.TFCamembertForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16183/src/transformers/models/camembert/modeling_tf_camembert.py#L158",parametersDescription:[{anchor:"transformers.TFCamembertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16183/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),to=new ss({props:{$$slots:{default:[xg]},$$scope:{ctx:Pe}}}),{c(){k=o("meta"),Z=d(),A=o("h1"),_=o("a"),D=o("span"),F(G.$$.fragment),le=d(),z=o("span"),de=n("CamemBERT"),Q=d(),u=o("h2"),W=o("a"),I=o("span"),F(X.$$.fragment),me=d(),x=o("span"),ce=n("Overview"),se=d(),H=o("p"),w=n("The CamemBERT model was proposed in "),j=o("a"),V=n("CamemBERT: a Tasty French Language Model"),g=n(` by
Louis Martin, Benjamin Muller, Pedro Javier Ortiz Su\xE1rez, Yoann Dupont, Laurent Romary, \xC9ric Villemonte de la
Clergerie, Djam\xE9 Seddah, and Beno\xEEt Sagot. It is based on Facebook\u2019s RoBERTa model released in 2019. It is a model
trained on 138GB of French text.`),b=d(),ee=o("p"),B=n("The abstract from the paper is the following:"),ae=d(),te=o("p"),O=o("em"),he=n(`Pretrained language models are now ubiquitous in Natural Language Processing. Despite their success, most available
models have either been trained on English data or on the concatenation of data in multiple languages. This makes
practical use of such models \u2014in all languages except English\u2014 very limited. Aiming to address this issue for French,
we release CamemBERT, a French version of the Bi-directional Encoders for Transformers (BERT). We measure the
performance of CamemBERT compared to multilingual models in multiple downstream tasks, namely part-of-speech tagging,
dependency parsing, named-entity recognition, and natural language inference. CamemBERT improves the state of the art
for most of the tasks considered. We release the pretrained model for CamemBERT hoping to foster research and
downstream applications for French NLP.`),ne=d(),v=o("p"),fe=n("Tips:"),S=d(),oe=o("ul"),J=o("li"),N=n("This implementation is the same as RoBERTa. Refer to the "),re=o("a"),pe=n("documentation of RoBERTa"),E=n(` for usage examples
as well as the information relative to the inputs and outputs.`),ie=d(),C=o("p"),ue=n("This model was contributed by "),l=o("a"),p=n("camembert"),K=n(". The original code can be found "),be=o("a"),Ee=n("here"),y=n("."),Te=d(),ge=o("h2"),ve=o("a"),T=o("span"),F($.$$.fragment),Ce=d(),ke=o("span"),U=n("CamembertConfig"),we=d(),_e=o("div"),F(Y.$$.fragment),ye=d(),ro=o("p"),nl=n("This class overrides "),as=o("a"),il=n("RobertaConfig"),ll=n(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),an=d(),ht=o("h2"),Pt=o("a"),Xs=o("span"),F(so.$$.fragment),dl=d(),js=o("span"),ml=n("CamembertTokenizer"),nn=d(),Fe=o("div"),F(ao.$$.fragment),cl=d(),et=o("p"),hl=n("Adapted from "),ns=o("a"),fl=n("RobertaTokenizer"),pl=n(" and "),is=o("a"),ul=n("XLNetTokenizer"),gl=n(`. Construct a CamemBERT tokenizer. Based on
`),no=o("a"),_l=n("SentencePiece"),vl=n("."),bl=d(),io=o("p"),kl=n("This tokenizer inherits from "),ls=o("a"),Tl=n("PreTrainedTokenizer"),wl=n(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),El=d(),tt=o("div"),F(lo.$$.fragment),Cl=d(),Js=o("p"),yl=n(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),$l=d(),mo=o("ul"),ds=o("li"),Fl=n("single sequence: "),Ys=o("code"),Ml=n("<s> X </s>"),Pl=d(),ms=o("li"),Ll=n("pair of sequences: "),Zs=o("code"),Rl=n("<s> A </s></s> B </s>"),ql=d(),Lt=o("div"),F(co.$$.fragment),Al=d(),ho=o("p"),Dl=n(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),ea=o("code"),zl=n("prepare_for_model"),Il=n(" method."),xl=d(),Rt=o("div"),F(fo.$$.fragment),Ol=d(),ta=o("p"),Sl=n(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Bl=d(),cs=o("div"),F(po.$$.fragment),ln=d(),ft=o("h2"),qt=o("a"),oa=o("span"),F(uo.$$.fragment),Nl=d(),ra=o("span"),Ul=n("CamembertTokenizerFast"),dn=d(),xe=o("div"),F(go.$$.fragment),Hl=d(),Ke=o("p"),Ql=n("Construct a \u201Cfast\u201D CamemBERT tokenizer (backed by HuggingFace\u2019s "),sa=o("em"),Vl=n("tokenizers"),Kl=n(` library). Adapted from
`),hs=o("a"),Wl=n("RobertaTokenizer"),Gl=n(" and "),fs=o("a"),Xl=n("XLNetTokenizer"),jl=n(`. Based on
`),_o=o("a"),Jl=n("BPE"),Yl=n("."),Zl=d(),vo=o("p"),ed=n("This tokenizer inherits from "),ps=o("a"),td=n("PreTrainedTokenizerFast"),od=n(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),rd=d(),ot=o("div"),F(bo.$$.fragment),sd=d(),aa=o("p"),ad=n(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),nd=d(),ko=o("ul"),us=o("li"),id=n("single sequence: "),na=o("code"),ld=n("<s> X </s>"),dd=d(),gs=o("li"),md=n("pair of sequences: "),ia=o("code"),cd=n("<s> A </s></s> B </s>"),hd=d(),At=o("div"),F(To.$$.fragment),fd=d(),la=o("p"),pd=n(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),mn=d(),pt=o("h2"),Dt=o("a"),da=o("span"),F(wo.$$.fragment),ud=d(),ma=o("span"),gd=n("CamembertModel"),cn=d(),Oe=o("div"),F(Eo.$$.fragment),_d=d(),ca=o("p"),vd=n("The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),bd=d(),Co=o("p"),kd=n("This model inherits from "),_s=o("a"),Td=n("PreTrainedModel"),wd=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ed=d(),yo=o("p"),Cd=n("This model is also a PyTorch "),$o=o("a"),yd=n("torch.nn.Module"),$d=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Fd=d(),Fo=o("p"),Md=n("This class overrides "),vs=o("a"),Pd=n("RobertaModel"),Ld=n(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),hn=d(),ut=o("h2"),zt=o("a"),ha=o("span"),F(Mo.$$.fragment),Rd=d(),fa=o("span"),qd=n("CamembertForCausalLM"),fn=d(),Se=o("div"),F(Po.$$.fragment),Ad=d(),Lo=o("p"),Dd=n("CamemBERT Model with a "),pa=o("code"),zd=n("language modeling"),Id=n(" head on top for CLM fine-tuning."),xd=d(),Ro=o("p"),Od=n("This model inherits from "),bs=o("a"),Sd=n("PreTrainedModel"),Bd=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Nd=d(),qo=o("p"),Ud=n("This model is also a PyTorch "),Ao=o("a"),Hd=n("torch.nn.Module"),Qd=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Vd=d(),Do=o("p"),Kd=n("This class overrides "),ks=o("a"),Wd=n("RobertaForCausalLM"),Gd=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),pn=d(),gt=o("h2"),It=o("a"),ua=o("span"),F(zo.$$.fragment),Xd=d(),ga=o("span"),jd=n("CamembertForMaskedLM"),un=d(),Be=o("div"),F(Io.$$.fragment),Jd=d(),xo=o("p"),Yd=n("CamemBERT Model with a "),_a=o("code"),Zd=n("language modeling"),em=n(" head on top."),tm=d(),Oo=o("p"),om=n("This model inherits from "),Ts=o("a"),rm=n("PreTrainedModel"),sm=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),am=d(),So=o("p"),nm=n("This model is also a PyTorch "),Bo=o("a"),im=n("torch.nn.Module"),lm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),dm=d(),No=o("p"),mm=n("This class overrides "),ws=o("a"),cm=n("RobertaForMaskedLM"),hm=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),gn=d(),_t=o("h2"),xt=o("a"),va=o("span"),F(Uo.$$.fragment),fm=d(),ba=o("span"),pm=n("CamembertForSequenceClassification"),_n=d(),Ne=o("div"),F(Ho.$$.fragment),um=d(),ka=o("p"),gm=n(`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),_m=d(),Qo=o("p"),vm=n("This model inherits from "),Es=o("a"),bm=n("PreTrainedModel"),km=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Tm=d(),Vo=o("p"),wm=n("This model is also a PyTorch "),Ko=o("a"),Em=n("torch.nn.Module"),Cm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ym=d(),Wo=o("p"),$m=n("This class overrides "),Cs=o("a"),Fm=n("RobertaForSequenceClassification"),Mm=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),vn=d(),vt=o("h2"),Ot=o("a"),Ta=o("span"),F(Go.$$.fragment),Pm=d(),wa=o("span"),Lm=n("CamembertForMultipleChoice"),bn=d(),Ue=o("div"),F(Xo.$$.fragment),Rm=d(),Ea=o("p"),qm=n(`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),Am=d(),jo=o("p"),Dm=n("This model inherits from "),ys=o("a"),zm=n("PreTrainedModel"),Im=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),xm=d(),Jo=o("p"),Om=n("This model is also a PyTorch "),Yo=o("a"),Sm=n("torch.nn.Module"),Bm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Nm=d(),Zo=o("p"),Um=n("This class overrides "),$s=o("a"),Hm=n("RobertaForMultipleChoice"),Qm=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),kn=d(),bt=o("h2"),St=o("a"),Ca=o("span"),F(er.$$.fragment),Vm=d(),ya=o("span"),Km=n("CamembertForTokenClassification"),Tn=d(),He=o("div"),F(tr.$$.fragment),Wm=d(),$a=o("p"),Gm=n(`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Xm=d(),or=o("p"),jm=n("This model inherits from "),Fs=o("a"),Jm=n("PreTrainedModel"),Ym=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Zm=d(),rr=o("p"),ec=n("This model is also a PyTorch "),sr=o("a"),tc=n("torch.nn.Module"),oc=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),rc=d(),ar=o("p"),sc=n("This class overrides "),Ms=o("a"),ac=n("RobertaForTokenClassification"),nc=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),wn=d(),kt=o("h2"),Bt=o("a"),Fa=o("span"),F(nr.$$.fragment),ic=d(),Ma=o("span"),lc=n("CamembertForQuestionAnswering"),En=d(),Qe=o("div"),F(ir.$$.fragment),dc=d(),Nt=o("p"),mc=n(`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Pa=o("code"),cc=n("span start logits"),hc=n(" and "),La=o("code"),fc=n("span end logits"),pc=d(),lr=o("p"),uc=n("This model inherits from "),Ps=o("a"),gc=n("PreTrainedModel"),_c=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),vc=d(),dr=o("p"),bc=n("This model is also a PyTorch "),mr=o("a"),kc=n("torch.nn.Module"),Tc=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),wc=d(),cr=o("p"),Ec=n("This class overrides "),Ls=o("a"),Cc=n("RobertaForQuestionAnswering"),yc=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Cn=d(),Tt=o("h2"),Ut=o("a"),Ra=o("span"),F(hr.$$.fragment),$c=d(),qa=o("span"),Fc=n("TFCamembertModel"),yn=d(),Le=o("div"),F(fr.$$.fragment),Mc=d(),Aa=o("p"),Pc=n("The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Lc=d(),pr=o("p"),Rc=n("This model inherits from "),Rs=o("a"),qc=n("TFPreTrainedModel"),Ac=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Dc=d(),ur=o("p"),zc=n("This model is also a "),gr=o("a"),Ic=n("tf.keras.Model"),xc=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Oc=d(),F(Ht.$$.fragment),Sc=d(),_r=o("p"),Bc=n("This class overrides "),qs=o("a"),Nc=n("TFRobertaModel"),Uc=n(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),$n=d(),wt=o("h2"),Qt=o("a"),Da=o("span"),F(vr.$$.fragment),Hc=d(),za=o("span"),Qc=n("TFCamembertForCasualLM"),Fn=d(),Re=o("div"),F(br.$$.fragment),Vc=d(),kr=o("p"),Kc=n("CamemBERT Model with a "),Ia=o("code"),Wc=n("language modeling"),Gc=n(" head on top for CLM fine-tuning."),Xc=d(),Tr=o("p"),jc=n("This model inherits from "),As=o("a"),Jc=n("TFPreTrainedModel"),Yc=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Zc=d(),wr=o("p"),eh=n("This model is also a "),Er=o("a"),th=n("tf.keras.Model"),oh=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),rh=d(),F(Vt.$$.fragment),sh=d(),Cr=o("p"),ah=n("This class overrides "),Ds=o("a"),nh=n("TFRobertaForCausalLM"),ih=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Mn=d(),Et=o("h2"),Kt=o("a"),xa=o("span"),F(yr.$$.fragment),lh=d(),Oa=o("span"),dh=n("TFCamembertForMaskedLM"),Pn=d(),qe=o("div"),F($r.$$.fragment),mh=d(),Fr=o("p"),ch=n("CamemBERT Model with a "),Sa=o("code"),hh=n("language modeling"),fh=n(" head on top."),ph=d(),Mr=o("p"),uh=n("This model inherits from "),zs=o("a"),gh=n("TFPreTrainedModel"),_h=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),vh=d(),Pr=o("p"),bh=n("This model is also a "),Lr=o("a"),kh=n("tf.keras.Model"),Th=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),wh=d(),F(Wt.$$.fragment),Eh=d(),Rr=o("p"),Ch=n("This class overrides "),Is=o("a"),yh=n("TFRobertaForMaskedLM"),$h=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Ln=d(),Ct=o("h2"),Gt=o("a"),Ba=o("span"),F(qr.$$.fragment),Fh=d(),Na=o("span"),Mh=n("TFCamembertForSequenceClassification"),Rn=d(),Ae=o("div"),F(Ar.$$.fragment),Ph=d(),Ua=o("p"),Lh=n(`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Rh=d(),Dr=o("p"),qh=n("This model inherits from "),xs=o("a"),Ah=n("TFPreTrainedModel"),Dh=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),zh=d(),zr=o("p"),Ih=n("This model is also a "),Ir=o("a"),xh=n("tf.keras.Model"),Oh=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Sh=d(),F(Xt.$$.fragment),Bh=d(),xr=o("p"),Nh=n("This class overrides "),Os=o("a"),Uh=n("TFRobertaForSequenceClassification"),Hh=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),qn=d(),yt=o("h2"),jt=o("a"),Ha=o("span"),F(Or.$$.fragment),Qh=d(),Qa=o("span"),Vh=n("TFCamembertForMultipleChoice"),An=d(),De=o("div"),F(Sr.$$.fragment),Kh=d(),Va=o("p"),Wh=n(`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),Gh=d(),Br=o("p"),Xh=n("This model inherits from "),Ss=o("a"),jh=n("TFPreTrainedModel"),Jh=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Yh=d(),Nr=o("p"),Zh=n("This model is also a "),Ur=o("a"),ef=n("tf.keras.Model"),tf=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),of=d(),F(Jt.$$.fragment),rf=d(),Hr=o("p"),sf=n("This class overrides "),Bs=o("a"),af=n("TFRobertaForMultipleChoice"),nf=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Dn=d(),$t=o("h2"),Yt=o("a"),Ka=o("span"),F(Qr.$$.fragment),lf=d(),Wa=o("span"),df=n("TFCamembertForTokenClassification"),zn=d(),ze=o("div"),F(Vr.$$.fragment),mf=d(),Ga=o("p"),cf=n(`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),hf=d(),Kr=o("p"),ff=n("This model inherits from "),Ns=o("a"),pf=n("TFPreTrainedModel"),uf=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),gf=d(),Wr=o("p"),_f=n("This model is also a "),Gr=o("a"),vf=n("tf.keras.Model"),bf=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),kf=d(),F(Zt.$$.fragment),Tf=d(),Xr=o("p"),wf=n("This class overrides "),Us=o("a"),Ef=n("TFRobertaForTokenClassification"),Cf=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),In=d(),Ft=o("h2"),eo=o("a"),Xa=o("span"),F(jr.$$.fragment),yf=d(),ja=o("span"),$f=n("TFCamembertForQuestionAnswering"),xn=d(),Ie=o("div"),F(Jr.$$.fragment),Ff=d(),Mt=o("p"),Mf=n(`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Ja=o("code"),Pf=n("span start logits"),Lf=n(" and "),Ya=o("code"),Rf=n("span end logits"),qf=n(")."),Af=d(),Yr=o("p"),Df=n("This model inherits from "),Hs=o("a"),zf=n("TFPreTrainedModel"),If=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),xf=d(),Zr=o("p"),Of=n("This model is also a "),es=o("a"),Sf=n("tf.keras.Model"),Bf=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Nf=d(),F(to.$$.fragment),Uf=d(),ts=o("p"),Hf=n("This class overrides "),Qs=o("a"),Qf=n("TFRobertaForQuestionAnswering"),Vf=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),this.h()},l(a){const f=Lg('[data-svelte="svelte-1phssyn"]',document.head);k=r(f,"META",{name:!0,content:!0}),f.forEach(t),Z=m(a),A=r(a,"H1",{class:!0});var os=s(A);_=r(os,"A",{id:!0,class:!0,href:!0});var Za=s(_);D=r(Za,"SPAN",{});var en=s(D);M(G.$$.fragment,en),en.forEach(t),Za.forEach(t),le=m(os),z=r(os,"SPAN",{});var tn=s(z);de=i(tn,"CamemBERT"),tn.forEach(t),os.forEach(t),Q=m(a),u=r(a,"H2",{class:!0});var rs=s(u);W=r(rs,"A",{id:!0,class:!0,href:!0});var on=s(W);I=r(on,"SPAN",{});var rn=s(I);M(X.$$.fragment,rn),rn.forEach(t),on.forEach(t),me=m(rs),x=r(rs,"SPAN",{});var jf=s(x);ce=i(jf,"Overview"),jf.forEach(t),rs.forEach(t),se=m(a),H=r(a,"P",{});var Sn=s(H);w=i(Sn,"The CamemBERT model was proposed in "),j=r(Sn,"A",{href:!0,rel:!0});var Jf=s(j);V=i(Jf,"CamemBERT: a Tasty French Language Model"),Jf.forEach(t),g=i(Sn,` by
Louis Martin, Benjamin Muller, Pedro Javier Ortiz Su\xE1rez, Yoann Dupont, Laurent Romary, \xC9ric Villemonte de la
Clergerie, Djam\xE9 Seddah, and Beno\xEEt Sagot. It is based on Facebook\u2019s RoBERTa model released in 2019. It is a model
trained on 138GB of French text.`),Sn.forEach(t),b=m(a),ee=r(a,"P",{});var Yf=s(ee);B=i(Yf,"The abstract from the paper is the following:"),Yf.forEach(t),ae=m(a),te=r(a,"P",{});var Zf=s(te);O=r(Zf,"EM",{});var ep=s(O);he=i(ep,`Pretrained language models are now ubiquitous in Natural Language Processing. Despite their success, most available
models have either been trained on English data or on the concatenation of data in multiple languages. This makes
practical use of such models \u2014in all languages except English\u2014 very limited. Aiming to address this issue for French,
we release CamemBERT, a French version of the Bi-directional Encoders for Transformers (BERT). We measure the
performance of CamemBERT compared to multilingual models in multiple downstream tasks, namely part-of-speech tagging,
dependency parsing, named-entity recognition, and natural language inference. CamemBERT improves the state of the art
for most of the tasks considered. We release the pretrained model for CamemBERT hoping to foster research and
downstream applications for French NLP.`),ep.forEach(t),Zf.forEach(t),ne=m(a),v=r(a,"P",{});var tp=s(v);fe=i(tp,"Tips:"),tp.forEach(t),S=m(a),oe=r(a,"UL",{});var op=s(oe);J=r(op,"LI",{});var Bn=s(J);N=i(Bn,"This implementation is the same as RoBERTa. Refer to the "),re=r(Bn,"A",{href:!0});var rp=s(re);pe=i(rp,"documentation of RoBERTa"),rp.forEach(t),E=i(Bn,` for usage examples
as well as the information relative to the inputs and outputs.`),Bn.forEach(t),op.forEach(t),ie=m(a),C=r(a,"P",{});var Vs=s(C);ue=i(Vs,"This model was contributed by "),l=r(Vs,"A",{href:!0,rel:!0});var sp=s(l);p=i(sp,"camembert"),sp.forEach(t),K=i(Vs,". The original code can be found "),be=r(Vs,"A",{href:!0,rel:!0});var ap=s(be);Ee=i(ap,"here"),ap.forEach(t),y=i(Vs,"."),Vs.forEach(t),Te=m(a),ge=r(a,"H2",{class:!0});var Nn=s(ge);ve=r(Nn,"A",{id:!0,class:!0,href:!0});var np=s(ve);T=r(np,"SPAN",{});var ip=s(T);M($.$$.fragment,ip),ip.forEach(t),np.forEach(t),Ce=m(Nn),ke=r(Nn,"SPAN",{});var lp=s(ke);U=i(lp,"CamembertConfig"),lp.forEach(t),Nn.forEach(t),we=m(a),_e=r(a,"DIV",{class:!0});var Un=s(_e);M(Y.$$.fragment,Un),ye=m(Un),ro=r(Un,"P",{});var Hn=s(ro);nl=i(Hn,"This class overrides "),as=r(Hn,"A",{href:!0});var dp=s(as);il=i(dp,"RobertaConfig"),dp.forEach(t),ll=i(Hn,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Hn.forEach(t),Un.forEach(t),an=m(a),ht=r(a,"H2",{class:!0});var Qn=s(ht);Pt=r(Qn,"A",{id:!0,class:!0,href:!0});var mp=s(Pt);Xs=r(mp,"SPAN",{});var cp=s(Xs);M(so.$$.fragment,cp),cp.forEach(t),mp.forEach(t),dl=m(Qn),js=r(Qn,"SPAN",{});var hp=s(js);ml=i(hp,"CamembertTokenizer"),hp.forEach(t),Qn.forEach(t),nn=m(a),Fe=r(a,"DIV",{class:!0});var Ve=s(Fe);M(ao.$$.fragment,Ve),cl=m(Ve),et=r(Ve,"P",{});var oo=s(et);hl=i(oo,"Adapted from "),ns=r(oo,"A",{href:!0});var fp=s(ns);fl=i(fp,"RobertaTokenizer"),fp.forEach(t),pl=i(oo," and "),is=r(oo,"A",{href:!0});var pp=s(is);ul=i(pp,"XLNetTokenizer"),pp.forEach(t),gl=i(oo,`. Construct a CamemBERT tokenizer. Based on
`),no=r(oo,"A",{href:!0,rel:!0});var up=s(no);_l=i(up,"SentencePiece"),up.forEach(t),vl=i(oo,"."),oo.forEach(t),bl=m(Ve),io=r(Ve,"P",{});var Vn=s(io);kl=i(Vn,"This tokenizer inherits from "),ls=r(Vn,"A",{href:!0});var gp=s(ls);Tl=i(gp,"PreTrainedTokenizer"),gp.forEach(t),wl=i(Vn,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Vn.forEach(t),El=m(Ve),tt=r(Ve,"DIV",{class:!0});var Ks=s(tt);M(lo.$$.fragment,Ks),Cl=m(Ks),Js=r(Ks,"P",{});var _p=s(Js);yl=i(_p,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),_p.forEach(t),$l=m(Ks),mo=r(Ks,"UL",{});var Kn=s(mo);ds=r(Kn,"LI",{});var Kf=s(ds);Fl=i(Kf,"single sequence: "),Ys=r(Kf,"CODE",{});var vp=s(Ys);Ml=i(vp,"<s> X </s>"),vp.forEach(t),Kf.forEach(t),Pl=m(Kn),ms=r(Kn,"LI",{});var Wf=s(ms);Ll=i(Wf,"pair of sequences: "),Zs=r(Wf,"CODE",{});var bp=s(Zs);Rl=i(bp,"<s> A </s></s> B </s>"),bp.forEach(t),Wf.forEach(t),Kn.forEach(t),Ks.forEach(t),ql=m(Ve),Lt=r(Ve,"DIV",{class:!0});var Wn=s(Lt);M(co.$$.fragment,Wn),Al=m(Wn),ho=r(Wn,"P",{});var Gn=s(ho);Dl=i(Gn,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),ea=r(Gn,"CODE",{});var kp=s(ea);zl=i(kp,"prepare_for_model"),kp.forEach(t),Il=i(Gn," method."),Gn.forEach(t),Wn.forEach(t),xl=m(Ve),Rt=r(Ve,"DIV",{class:!0});var Xn=s(Rt);M(fo.$$.fragment,Xn),Ol=m(Xn),ta=r(Xn,"P",{});var Tp=s(ta);Sl=i(Tp,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Tp.forEach(t),Xn.forEach(t),Bl=m(Ve),cs=r(Ve,"DIV",{class:!0});var wp=s(cs);M(po.$$.fragment,wp),wp.forEach(t),Ve.forEach(t),ln=m(a),ft=r(a,"H2",{class:!0});var jn=s(ft);qt=r(jn,"A",{id:!0,class:!0,href:!0});var Ep=s(qt);oa=r(Ep,"SPAN",{});var Cp=s(oa);M(uo.$$.fragment,Cp),Cp.forEach(t),Ep.forEach(t),Nl=m(jn),ra=r(jn,"SPAN",{});var yp=s(ra);Ul=i(yp,"CamembertTokenizerFast"),yp.forEach(t),jn.forEach(t),dn=m(a),xe=r(a,"DIV",{class:!0});var rt=s(xe);M(go.$$.fragment,rt),Hl=m(rt),Ke=r(rt,"P",{});var st=s(Ke);Ql=i(st,"Construct a \u201Cfast\u201D CamemBERT tokenizer (backed by HuggingFace\u2019s "),sa=r(st,"EM",{});var $p=s(sa);Vl=i($p,"tokenizers"),$p.forEach(t),Kl=i(st,` library). Adapted from
`),hs=r(st,"A",{href:!0});var Fp=s(hs);Wl=i(Fp,"RobertaTokenizer"),Fp.forEach(t),Gl=i(st," and "),fs=r(st,"A",{href:!0});var Mp=s(fs);Xl=i(Mp,"XLNetTokenizer"),Mp.forEach(t),jl=i(st,`. Based on
`),_o=r(st,"A",{href:!0,rel:!0});var Pp=s(_o);Jl=i(Pp,"BPE"),Pp.forEach(t),Yl=i(st,"."),st.forEach(t),Zl=m(rt),vo=r(rt,"P",{});var Jn=s(vo);ed=i(Jn,"This tokenizer inherits from "),ps=r(Jn,"A",{href:!0});var Lp=s(ps);td=i(Lp,"PreTrainedTokenizerFast"),Lp.forEach(t),od=i(Jn,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Jn.forEach(t),rd=m(rt),ot=r(rt,"DIV",{class:!0});var Ws=s(ot);M(bo.$$.fragment,Ws),sd=m(Ws),aa=r(Ws,"P",{});var Rp=s(aa);ad=i(Rp,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),Rp.forEach(t),nd=m(Ws),ko=r(Ws,"UL",{});var Yn=s(ko);us=r(Yn,"LI",{});var Gf=s(us);id=i(Gf,"single sequence: "),na=r(Gf,"CODE",{});var qp=s(na);ld=i(qp,"<s> X </s>"),qp.forEach(t),Gf.forEach(t),dd=m(Yn),gs=r(Yn,"LI",{});var Xf=s(gs);md=i(Xf,"pair of sequences: "),ia=r(Xf,"CODE",{});var Ap=s(ia);cd=i(Ap,"<s> A </s></s> B </s>"),Ap.forEach(t),Xf.forEach(t),Yn.forEach(t),Ws.forEach(t),hd=m(rt),At=r(rt,"DIV",{class:!0});var Zn=s(At);M(To.$$.fragment,Zn),fd=m(Zn),la=r(Zn,"P",{});var Dp=s(la);pd=i(Dp,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Dp.forEach(t),Zn.forEach(t),rt.forEach(t),mn=m(a),pt=r(a,"H2",{class:!0});var ei=s(pt);Dt=r(ei,"A",{id:!0,class:!0,href:!0});var zp=s(Dt);da=r(zp,"SPAN",{});var Ip=s(da);M(wo.$$.fragment,Ip),Ip.forEach(t),zp.forEach(t),ud=m(ei),ma=r(ei,"SPAN",{});var xp=s(ma);gd=i(xp,"CamembertModel"),xp.forEach(t),ei.forEach(t),cn=m(a),Oe=r(a,"DIV",{class:!0});var at=s(Oe);M(Eo.$$.fragment,at),_d=m(at),ca=r(at,"P",{});var Op=s(ca);vd=i(Op,"The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Op.forEach(t),bd=m(at),Co=r(at,"P",{});var ti=s(Co);kd=i(ti,"This model inherits from "),_s=r(ti,"A",{href:!0});var Sp=s(_s);Td=i(Sp,"PreTrainedModel"),Sp.forEach(t),wd=i(ti,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ti.forEach(t),Ed=m(at),yo=r(at,"P",{});var oi=s(yo);Cd=i(oi,"This model is also a PyTorch "),$o=r(oi,"A",{href:!0,rel:!0});var Bp=s($o);yd=i(Bp,"torch.nn.Module"),Bp.forEach(t),$d=i(oi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),oi.forEach(t),Fd=m(at),Fo=r(at,"P",{});var ri=s(Fo);Md=i(ri,"This class overrides "),vs=r(ri,"A",{href:!0});var Np=s(vs);Pd=i(Np,"RobertaModel"),Np.forEach(t),Ld=i(ri,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ri.forEach(t),at.forEach(t),hn=m(a),ut=r(a,"H2",{class:!0});var si=s(ut);zt=r(si,"A",{id:!0,class:!0,href:!0});var Up=s(zt);ha=r(Up,"SPAN",{});var Hp=s(ha);M(Mo.$$.fragment,Hp),Hp.forEach(t),Up.forEach(t),Rd=m(si),fa=r(si,"SPAN",{});var Qp=s(fa);qd=i(Qp,"CamembertForCausalLM"),Qp.forEach(t),si.forEach(t),fn=m(a),Se=r(a,"DIV",{class:!0});var nt=s(Se);M(Po.$$.fragment,nt),Ad=m(nt),Lo=r(nt,"P",{});var ai=s(Lo);Dd=i(ai,"CamemBERT Model with a "),pa=r(ai,"CODE",{});var Vp=s(pa);zd=i(Vp,"language modeling"),Vp.forEach(t),Id=i(ai," head on top for CLM fine-tuning."),ai.forEach(t),xd=m(nt),Ro=r(nt,"P",{});var ni=s(Ro);Od=i(ni,"This model inherits from "),bs=r(ni,"A",{href:!0});var Kp=s(bs);Sd=i(Kp,"PreTrainedModel"),Kp.forEach(t),Bd=i(ni,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ni.forEach(t),Nd=m(nt),qo=r(nt,"P",{});var ii=s(qo);Ud=i(ii,"This model is also a PyTorch "),Ao=r(ii,"A",{href:!0,rel:!0});var Wp=s(Ao);Hd=i(Wp,"torch.nn.Module"),Wp.forEach(t),Qd=i(ii,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ii.forEach(t),Vd=m(nt),Do=r(nt,"P",{});var li=s(Do);Kd=i(li,"This class overrides "),ks=r(li,"A",{href:!0});var Gp=s(ks);Wd=i(Gp,"RobertaForCausalLM"),Gp.forEach(t),Gd=i(li,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),li.forEach(t),nt.forEach(t),pn=m(a),gt=r(a,"H2",{class:!0});var di=s(gt);It=r(di,"A",{id:!0,class:!0,href:!0});var Xp=s(It);ua=r(Xp,"SPAN",{});var jp=s(ua);M(zo.$$.fragment,jp),jp.forEach(t),Xp.forEach(t),Xd=m(di),ga=r(di,"SPAN",{});var Jp=s(ga);jd=i(Jp,"CamembertForMaskedLM"),Jp.forEach(t),di.forEach(t),un=m(a),Be=r(a,"DIV",{class:!0});var it=s(Be);M(Io.$$.fragment,it),Jd=m(it),xo=r(it,"P",{});var mi=s(xo);Yd=i(mi,"CamemBERT Model with a "),_a=r(mi,"CODE",{});var Yp=s(_a);Zd=i(Yp,"language modeling"),Yp.forEach(t),em=i(mi," head on top."),mi.forEach(t),tm=m(it),Oo=r(it,"P",{});var ci=s(Oo);om=i(ci,"This model inherits from "),Ts=r(ci,"A",{href:!0});var Zp=s(Ts);rm=i(Zp,"PreTrainedModel"),Zp.forEach(t),sm=i(ci,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ci.forEach(t),am=m(it),So=r(it,"P",{});var hi=s(So);nm=i(hi,"This model is also a PyTorch "),Bo=r(hi,"A",{href:!0,rel:!0});var eu=s(Bo);im=i(eu,"torch.nn.Module"),eu.forEach(t),lm=i(hi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),hi.forEach(t),dm=m(it),No=r(it,"P",{});var fi=s(No);mm=i(fi,"This class overrides "),ws=r(fi,"A",{href:!0});var tu=s(ws);cm=i(tu,"RobertaForMaskedLM"),tu.forEach(t),hm=i(fi,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),fi.forEach(t),it.forEach(t),gn=m(a),_t=r(a,"H2",{class:!0});var pi=s(_t);xt=r(pi,"A",{id:!0,class:!0,href:!0});var ou=s(xt);va=r(ou,"SPAN",{});var ru=s(va);M(Uo.$$.fragment,ru),ru.forEach(t),ou.forEach(t),fm=m(pi),ba=r(pi,"SPAN",{});var su=s(ba);pm=i(su,"CamembertForSequenceClassification"),su.forEach(t),pi.forEach(t),_n=m(a),Ne=r(a,"DIV",{class:!0});var lt=s(Ne);M(Ho.$$.fragment,lt),um=m(lt),ka=r(lt,"P",{});var au=s(ka);gm=i(au,`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),au.forEach(t),_m=m(lt),Qo=r(lt,"P",{});var ui=s(Qo);vm=i(ui,"This model inherits from "),Es=r(ui,"A",{href:!0});var nu=s(Es);bm=i(nu,"PreTrainedModel"),nu.forEach(t),km=i(ui,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ui.forEach(t),Tm=m(lt),Vo=r(lt,"P",{});var gi=s(Vo);wm=i(gi,"This model is also a PyTorch "),Ko=r(gi,"A",{href:!0,rel:!0});var iu=s(Ko);Em=i(iu,"torch.nn.Module"),iu.forEach(t),Cm=i(gi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),gi.forEach(t),ym=m(lt),Wo=r(lt,"P",{});var _i=s(Wo);$m=i(_i,"This class overrides "),Cs=r(_i,"A",{href:!0});var lu=s(Cs);Fm=i(lu,"RobertaForSequenceClassification"),lu.forEach(t),Mm=i(_i,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),_i.forEach(t),lt.forEach(t),vn=m(a),vt=r(a,"H2",{class:!0});var vi=s(vt);Ot=r(vi,"A",{id:!0,class:!0,href:!0});var du=s(Ot);Ta=r(du,"SPAN",{});var mu=s(Ta);M(Go.$$.fragment,mu),mu.forEach(t),du.forEach(t),Pm=m(vi),wa=r(vi,"SPAN",{});var cu=s(wa);Lm=i(cu,"CamembertForMultipleChoice"),cu.forEach(t),vi.forEach(t),bn=m(a),Ue=r(a,"DIV",{class:!0});var dt=s(Ue);M(Xo.$$.fragment,dt),Rm=m(dt),Ea=r(dt,"P",{});var hu=s(Ea);qm=i(hu,`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),hu.forEach(t),Am=m(dt),jo=r(dt,"P",{});var bi=s(jo);Dm=i(bi,"This model inherits from "),ys=r(bi,"A",{href:!0});var fu=s(ys);zm=i(fu,"PreTrainedModel"),fu.forEach(t),Im=i(bi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),bi.forEach(t),xm=m(dt),Jo=r(dt,"P",{});var ki=s(Jo);Om=i(ki,"This model is also a PyTorch "),Yo=r(ki,"A",{href:!0,rel:!0});var pu=s(Yo);Sm=i(pu,"torch.nn.Module"),pu.forEach(t),Bm=i(ki,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ki.forEach(t),Nm=m(dt),Zo=r(dt,"P",{});var Ti=s(Zo);Um=i(Ti,"This class overrides "),$s=r(Ti,"A",{href:!0});var uu=s($s);Hm=i(uu,"RobertaForMultipleChoice"),uu.forEach(t),Qm=i(Ti,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Ti.forEach(t),dt.forEach(t),kn=m(a),bt=r(a,"H2",{class:!0});var wi=s(bt);St=r(wi,"A",{id:!0,class:!0,href:!0});var gu=s(St);Ca=r(gu,"SPAN",{});var _u=s(Ca);M(er.$$.fragment,_u),_u.forEach(t),gu.forEach(t),Vm=m(wi),ya=r(wi,"SPAN",{});var vu=s(ya);Km=i(vu,"CamembertForTokenClassification"),vu.forEach(t),wi.forEach(t),Tn=m(a),He=r(a,"DIV",{class:!0});var mt=s(He);M(tr.$$.fragment,mt),Wm=m(mt),$a=r(mt,"P",{});var bu=s($a);Gm=i(bu,`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),bu.forEach(t),Xm=m(mt),or=r(mt,"P",{});var Ei=s(or);jm=i(Ei,"This model inherits from "),Fs=r(Ei,"A",{href:!0});var ku=s(Fs);Jm=i(ku,"PreTrainedModel"),ku.forEach(t),Ym=i(Ei,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ei.forEach(t),Zm=m(mt),rr=r(mt,"P",{});var Ci=s(rr);ec=i(Ci,"This model is also a PyTorch "),sr=r(Ci,"A",{href:!0,rel:!0});var Tu=s(sr);tc=i(Tu,"torch.nn.Module"),Tu.forEach(t),oc=i(Ci,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Ci.forEach(t),rc=m(mt),ar=r(mt,"P",{});var yi=s(ar);sc=i(yi,"This class overrides "),Ms=r(yi,"A",{href:!0});var wu=s(Ms);ac=i(wu,"RobertaForTokenClassification"),wu.forEach(t),nc=i(yi,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),yi.forEach(t),mt.forEach(t),wn=m(a),kt=r(a,"H2",{class:!0});var $i=s(kt);Bt=r($i,"A",{id:!0,class:!0,href:!0});var Eu=s(Bt);Fa=r(Eu,"SPAN",{});var Cu=s(Fa);M(nr.$$.fragment,Cu),Cu.forEach(t),Eu.forEach(t),ic=m($i),Ma=r($i,"SPAN",{});var yu=s(Ma);lc=i(yu,"CamembertForQuestionAnswering"),yu.forEach(t),$i.forEach(t),En=m(a),Qe=r(a,"DIV",{class:!0});var ct=s(Qe);M(ir.$$.fragment,ct),dc=m(ct),Nt=r(ct,"P",{});var sn=s(Nt);mc=i(sn,`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Pa=r(sn,"CODE",{});var $u=s(Pa);cc=i($u,"span start logits"),$u.forEach(t),hc=i(sn," and "),La=r(sn,"CODE",{});var Fu=s(La);fc=i(Fu,"span end logits"),Fu.forEach(t),sn.forEach(t),pc=m(ct),lr=r(ct,"P",{});var Fi=s(lr);uc=i(Fi,"This model inherits from "),Ps=r(Fi,"A",{href:!0});var Mu=s(Ps);gc=i(Mu,"PreTrainedModel"),Mu.forEach(t),_c=i(Fi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Fi.forEach(t),vc=m(ct),dr=r(ct,"P",{});var Mi=s(dr);bc=i(Mi,"This model is also a PyTorch "),mr=r(Mi,"A",{href:!0,rel:!0});var Pu=s(mr);kc=i(Pu,"torch.nn.Module"),Pu.forEach(t),Tc=i(Mi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Mi.forEach(t),wc=m(ct),cr=r(ct,"P",{});var Pi=s(cr);Ec=i(Pi,"This class overrides "),Ls=r(Pi,"A",{href:!0});var Lu=s(Ls);Cc=i(Lu,"RobertaForQuestionAnswering"),Lu.forEach(t),yc=i(Pi,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Pi.forEach(t),ct.forEach(t),Cn=m(a),Tt=r(a,"H2",{class:!0});var Li=s(Tt);Ut=r(Li,"A",{id:!0,class:!0,href:!0});var Ru=s(Ut);Ra=r(Ru,"SPAN",{});var qu=s(Ra);M(hr.$$.fragment,qu),qu.forEach(t),Ru.forEach(t),$c=m(Li),qa=r(Li,"SPAN",{});var Au=s(qa);Fc=i(Au,"TFCamembertModel"),Au.forEach(t),Li.forEach(t),yn=m(a),Le=r(a,"DIV",{class:!0});var We=s(Le);M(fr.$$.fragment,We),Mc=m(We),Aa=r(We,"P",{});var Du=s(Aa);Pc=i(Du,"The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Du.forEach(t),Lc=m(We),pr=r(We,"P",{});var Ri=s(pr);Rc=i(Ri,"This model inherits from "),Rs=r(Ri,"A",{href:!0});var zu=s(Rs);qc=i(zu,"TFPreTrainedModel"),zu.forEach(t),Ac=i(Ri,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ri.forEach(t),Dc=m(We),ur=r(We,"P",{});var qi=s(ur);zc=i(qi,"This model is also a "),gr=r(qi,"A",{href:!0,rel:!0});var Iu=s(gr);Ic=i(Iu,"tf.keras.Model"),Iu.forEach(t),xc=i(qi,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),qi.forEach(t),Oc=m(We),M(Ht.$$.fragment,We),Sc=m(We),_r=r(We,"P",{});var Ai=s(_r);Bc=i(Ai,"This class overrides "),qs=r(Ai,"A",{href:!0});var xu=s(qs);Nc=i(xu,"TFRobertaModel"),xu.forEach(t),Uc=i(Ai,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Ai.forEach(t),We.forEach(t),$n=m(a),wt=r(a,"H2",{class:!0});var Di=s(wt);Qt=r(Di,"A",{id:!0,class:!0,href:!0});var Ou=s(Qt);Da=r(Ou,"SPAN",{});var Su=s(Da);M(vr.$$.fragment,Su),Su.forEach(t),Ou.forEach(t),Hc=m(Di),za=r(Di,"SPAN",{});var Bu=s(za);Qc=i(Bu,"TFCamembertForCasualLM"),Bu.forEach(t),Di.forEach(t),Fn=m(a),Re=r(a,"DIV",{class:!0});var Ge=s(Re);M(br.$$.fragment,Ge),Vc=m(Ge),kr=r(Ge,"P",{});var zi=s(kr);Kc=i(zi,"CamemBERT Model with a "),Ia=r(zi,"CODE",{});var Nu=s(Ia);Wc=i(Nu,"language modeling"),Nu.forEach(t),Gc=i(zi," head on top for CLM fine-tuning."),zi.forEach(t),Xc=m(Ge),Tr=r(Ge,"P",{});var Ii=s(Tr);jc=i(Ii,"This model inherits from "),As=r(Ii,"A",{href:!0});var Uu=s(As);Jc=i(Uu,"TFPreTrainedModel"),Uu.forEach(t),Yc=i(Ii,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ii.forEach(t),Zc=m(Ge),wr=r(Ge,"P",{});var xi=s(wr);eh=i(xi,"This model is also a "),Er=r(xi,"A",{href:!0,rel:!0});var Hu=s(Er);th=i(Hu,"tf.keras.Model"),Hu.forEach(t),oh=i(xi,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),xi.forEach(t),rh=m(Ge),M(Vt.$$.fragment,Ge),sh=m(Ge),Cr=r(Ge,"P",{});var Oi=s(Cr);ah=i(Oi,"This class overrides "),Ds=r(Oi,"A",{href:!0});var Qu=s(Ds);nh=i(Qu,"TFRobertaForCausalLM"),Qu.forEach(t),ih=i(Oi,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Oi.forEach(t),Ge.forEach(t),Mn=m(a),Et=r(a,"H2",{class:!0});var Si=s(Et);Kt=r(Si,"A",{id:!0,class:!0,href:!0});var Vu=s(Kt);xa=r(Vu,"SPAN",{});var Ku=s(xa);M(yr.$$.fragment,Ku),Ku.forEach(t),Vu.forEach(t),lh=m(Si),Oa=r(Si,"SPAN",{});var Wu=s(Oa);dh=i(Wu,"TFCamembertForMaskedLM"),Wu.forEach(t),Si.forEach(t),Pn=m(a),qe=r(a,"DIV",{class:!0});var Xe=s(qe);M($r.$$.fragment,Xe),mh=m(Xe),Fr=r(Xe,"P",{});var Bi=s(Fr);ch=i(Bi,"CamemBERT Model with a "),Sa=r(Bi,"CODE",{});var Gu=s(Sa);hh=i(Gu,"language modeling"),Gu.forEach(t),fh=i(Bi," head on top."),Bi.forEach(t),ph=m(Xe),Mr=r(Xe,"P",{});var Ni=s(Mr);uh=i(Ni,"This model inherits from "),zs=r(Ni,"A",{href:!0});var Xu=s(zs);gh=i(Xu,"TFPreTrainedModel"),Xu.forEach(t),_h=i(Ni,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ni.forEach(t),vh=m(Xe),Pr=r(Xe,"P",{});var Ui=s(Pr);bh=i(Ui,"This model is also a "),Lr=r(Ui,"A",{href:!0,rel:!0});var ju=s(Lr);kh=i(ju,"tf.keras.Model"),ju.forEach(t),Th=i(Ui,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ui.forEach(t),wh=m(Xe),M(Wt.$$.fragment,Xe),Eh=m(Xe),Rr=r(Xe,"P",{});var Hi=s(Rr);Ch=i(Hi,"This class overrides "),Is=r(Hi,"A",{href:!0});var Ju=s(Is);yh=i(Ju,"TFRobertaForMaskedLM"),Ju.forEach(t),$h=i(Hi,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Hi.forEach(t),Xe.forEach(t),Ln=m(a),Ct=r(a,"H2",{class:!0});var Qi=s(Ct);Gt=r(Qi,"A",{id:!0,class:!0,href:!0});var Yu=s(Gt);Ba=r(Yu,"SPAN",{});var Zu=s(Ba);M(qr.$$.fragment,Zu),Zu.forEach(t),Yu.forEach(t),Fh=m(Qi),Na=r(Qi,"SPAN",{});var eg=s(Na);Mh=i(eg,"TFCamembertForSequenceClassification"),eg.forEach(t),Qi.forEach(t),Rn=m(a),Ae=r(a,"DIV",{class:!0});var je=s(Ae);M(Ar.$$.fragment,je),Ph=m(je),Ua=r(je,"P",{});var tg=s(Ua);Lh=i(tg,`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),tg.forEach(t),Rh=m(je),Dr=r(je,"P",{});var Vi=s(Dr);qh=i(Vi,"This model inherits from "),xs=r(Vi,"A",{href:!0});var og=s(xs);Ah=i(og,"TFPreTrainedModel"),og.forEach(t),Dh=i(Vi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Vi.forEach(t),zh=m(je),zr=r(je,"P",{});var Ki=s(zr);Ih=i(Ki,"This model is also a "),Ir=r(Ki,"A",{href:!0,rel:!0});var rg=s(Ir);xh=i(rg,"tf.keras.Model"),rg.forEach(t),Oh=i(Ki,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ki.forEach(t),Sh=m(je),M(Xt.$$.fragment,je),Bh=m(je),xr=r(je,"P",{});var Wi=s(xr);Nh=i(Wi,"This class overrides "),Os=r(Wi,"A",{href:!0});var sg=s(Os);Uh=i(sg,"TFRobertaForSequenceClassification"),sg.forEach(t),Hh=i(Wi,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Wi.forEach(t),je.forEach(t),qn=m(a),yt=r(a,"H2",{class:!0});var Gi=s(yt);jt=r(Gi,"A",{id:!0,class:!0,href:!0});var ag=s(jt);Ha=r(ag,"SPAN",{});var ng=s(Ha);M(Or.$$.fragment,ng),ng.forEach(t),ag.forEach(t),Qh=m(Gi),Qa=r(Gi,"SPAN",{});var ig=s(Qa);Vh=i(ig,"TFCamembertForMultipleChoice"),ig.forEach(t),Gi.forEach(t),An=m(a),De=r(a,"DIV",{class:!0});var Je=s(De);M(Sr.$$.fragment,Je),Kh=m(Je),Va=r(Je,"P",{});var lg=s(Va);Wh=i(lg,`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),lg.forEach(t),Gh=m(Je),Br=r(Je,"P",{});var Xi=s(Br);Xh=i(Xi,"This model inherits from "),Ss=r(Xi,"A",{href:!0});var dg=s(Ss);jh=i(dg,"TFPreTrainedModel"),dg.forEach(t),Jh=i(Xi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Xi.forEach(t),Yh=m(Je),Nr=r(Je,"P",{});var ji=s(Nr);Zh=i(ji,"This model is also a "),Ur=r(ji,"A",{href:!0,rel:!0});var mg=s(Ur);ef=i(mg,"tf.keras.Model"),mg.forEach(t),tf=i(ji,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ji.forEach(t),of=m(Je),M(Jt.$$.fragment,Je),rf=m(Je),Hr=r(Je,"P",{});var Ji=s(Hr);sf=i(Ji,"This class overrides "),Bs=r(Ji,"A",{href:!0});var cg=s(Bs);af=i(cg,"TFRobertaForMultipleChoice"),cg.forEach(t),nf=i(Ji,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Ji.forEach(t),Je.forEach(t),Dn=m(a),$t=r(a,"H2",{class:!0});var Yi=s($t);Yt=r(Yi,"A",{id:!0,class:!0,href:!0});var hg=s(Yt);Ka=r(hg,"SPAN",{});var fg=s(Ka);M(Qr.$$.fragment,fg),fg.forEach(t),hg.forEach(t),lf=m(Yi),Wa=r(Yi,"SPAN",{});var pg=s(Wa);df=i(pg,"TFCamembertForTokenClassification"),pg.forEach(t),Yi.forEach(t),zn=m(a),ze=r(a,"DIV",{class:!0});var Ye=s(ze);M(Vr.$$.fragment,Ye),mf=m(Ye),Ga=r(Ye,"P",{});var ug=s(Ga);cf=i(ug,`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),ug.forEach(t),hf=m(Ye),Kr=r(Ye,"P",{});var Zi=s(Kr);ff=i(Zi,"This model inherits from "),Ns=r(Zi,"A",{href:!0});var gg=s(Ns);pf=i(gg,"TFPreTrainedModel"),gg.forEach(t),uf=i(Zi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Zi.forEach(t),gf=m(Ye),Wr=r(Ye,"P",{});var el=s(Wr);_f=i(el,"This model is also a "),Gr=r(el,"A",{href:!0,rel:!0});var _g=s(Gr);vf=i(_g,"tf.keras.Model"),_g.forEach(t),bf=i(el,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),el.forEach(t),kf=m(Ye),M(Zt.$$.fragment,Ye),Tf=m(Ye),Xr=r(Ye,"P",{});var tl=s(Xr);wf=i(tl,"This class overrides "),Us=r(tl,"A",{href:!0});var vg=s(Us);Ef=i(vg,"TFRobertaForTokenClassification"),vg.forEach(t),Cf=i(tl,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),tl.forEach(t),Ye.forEach(t),In=m(a),Ft=r(a,"H2",{class:!0});var ol=s(Ft);eo=r(ol,"A",{id:!0,class:!0,href:!0});var bg=s(eo);Xa=r(bg,"SPAN",{});var kg=s(Xa);M(jr.$$.fragment,kg),kg.forEach(t),bg.forEach(t),yf=m(ol),ja=r(ol,"SPAN",{});var Tg=s(ja);$f=i(Tg,"TFCamembertForQuestionAnswering"),Tg.forEach(t),ol.forEach(t),xn=m(a),Ie=r(a,"DIV",{class:!0});var Ze=s(Ie);M(Jr.$$.fragment,Ze),Ff=m(Ze),Mt=r(Ze,"P",{});var Gs=s(Mt);Mf=i(Gs,`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Ja=r(Gs,"CODE",{});var wg=s(Ja);Pf=i(wg,"span start logits"),wg.forEach(t),Lf=i(Gs," and "),Ya=r(Gs,"CODE",{});var Eg=s(Ya);Rf=i(Eg,"span end logits"),Eg.forEach(t),qf=i(Gs,")."),Gs.forEach(t),Af=m(Ze),Yr=r(Ze,"P",{});var rl=s(Yr);Df=i(rl,"This model inherits from "),Hs=r(rl,"A",{href:!0});var Cg=s(Hs);zf=i(Cg,"TFPreTrainedModel"),Cg.forEach(t),If=i(rl,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),rl.forEach(t),xf=m(Ze),Zr=r(Ze,"P",{});var sl=s(Zr);Of=i(sl,"This model is also a "),es=r(sl,"A",{href:!0,rel:!0});var yg=s(es);Sf=i(yg,"tf.keras.Model"),yg.forEach(t),Bf=i(sl,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),sl.forEach(t),Nf=m(Ze),M(to.$$.fragment,Ze),Uf=m(Ze),ts=r(Ze,"P",{});var al=s(ts);Hf=i(al,"This class overrides "),Qs=r(al,"A",{href:!0});var $g=s(Qs);Qf=i($g,"TFRobertaForQuestionAnswering"),$g.forEach(t),Vf=i(al,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),al.forEach(t),Ze.forEach(t),this.h()},h(){c(k,"name","hf:doc:metadata"),c(k,"content",JSON.stringify(Sg)),c(_,"id","camembert"),c(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_,"href","#camembert"),c(A,"class","relative group"),c(W,"id","overview"),c(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W,"href","#overview"),c(u,"class","relative group"),c(j,"href","https://arxiv.org/abs/1911.03894"),c(j,"rel","nofollow"),c(re,"href","roberta"),c(l,"href","https://huggingface.co/camembert"),c(l,"rel","nofollow"),c(be,"href","https://camembert-model.fr/"),c(be,"rel","nofollow"),c(ve,"id","transformers.CamembertConfig"),c(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ve,"href","#transformers.CamembertConfig"),c(ge,"class","relative group"),c(as,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaConfig"),c(_e,"class","docstring"),c(Pt,"id","transformers.CamembertTokenizer"),c(Pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pt,"href","#transformers.CamembertTokenizer"),c(ht,"class","relative group"),c(ns,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaTokenizer"),c(is,"href","/docs/transformers/pr_16183/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(no,"href","https://github.com/google/sentencepiece"),c(no,"rel","nofollow"),c(ls,"href","/docs/transformers/pr_16183/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),c(tt,"class","docstring"),c(Lt,"class","docstring"),c(Rt,"class","docstring"),c(cs,"class","docstring"),c(Fe,"class","docstring"),c(qt,"id","transformers.CamembertTokenizerFast"),c(qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qt,"href","#transformers.CamembertTokenizerFast"),c(ft,"class","relative group"),c(hs,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fs,"href","/docs/transformers/pr_16183/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(_o,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=BPE#models"),c(_o,"rel","nofollow"),c(ps,"href","/docs/transformers/pr_16183/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),c(ot,"class","docstring"),c(At,"class","docstring"),c(xe,"class","docstring"),c(Dt,"id","transformers.CamembertModel"),c(Dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dt,"href","#transformers.CamembertModel"),c(pt,"class","relative group"),c(_s,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel"),c($o,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c($o,"rel","nofollow"),c(vs,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaModel"),c(Oe,"class","docstring"),c(zt,"id","transformers.CamembertForCausalLM"),c(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zt,"href","#transformers.CamembertForCausalLM"),c(ut,"class","relative group"),c(bs,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel"),c(Ao,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Ao,"rel","nofollow"),c(ks,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Se,"class","docstring"),c(It,"id","transformers.CamembertForMaskedLM"),c(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(It,"href","#transformers.CamembertForMaskedLM"),c(gt,"class","relative group"),c(Ts,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel"),c(Bo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Bo,"rel","nofollow"),c(ws,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Be,"class","docstring"),c(xt,"id","transformers.CamembertForSequenceClassification"),c(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xt,"href","#transformers.CamembertForSequenceClassification"),c(_t,"class","relative group"),c(Es,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel"),c(Ko,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Ko,"rel","nofollow"),c(Cs,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Ne,"class","docstring"),c(Ot,"id","transformers.CamembertForMultipleChoice"),c(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ot,"href","#transformers.CamembertForMultipleChoice"),c(vt,"class","relative group"),c(ys,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel"),c(Yo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Yo,"rel","nofollow"),c($s,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Ue,"class","docstring"),c(St,"id","transformers.CamembertForTokenClassification"),c(St,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(St,"href","#transformers.CamembertForTokenClassification"),c(bt,"class","relative group"),c(Fs,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel"),c(sr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(sr,"rel","nofollow"),c(Ms,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(He,"class","docstring"),c(Bt,"id","transformers.CamembertForQuestionAnswering"),c(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bt,"href","#transformers.CamembertForQuestionAnswering"),c(kt,"class","relative group"),c(Ps,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.PreTrainedModel"),c(mr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(mr,"rel","nofollow"),c(Ls,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Qe,"class","docstring"),c(Ut,"id","transformers.TFCamembertModel"),c(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ut,"href","#transformers.TFCamembertModel"),c(Tt,"class","relative group"),c(Rs,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.TFPreTrainedModel"),c(gr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(gr,"rel","nofollow"),c(qs,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.TFRobertaModel"),c(Le,"class","docstring"),c(Qt,"id","transformers.TFCamembertForCausalLM"),c(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qt,"href","#transformers.TFCamembertForCausalLM"),c(wt,"class","relative group"),c(As,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.TFPreTrainedModel"),c(Er,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Er,"rel","nofollow"),c(Ds,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Re,"class","docstring"),c(Kt,"id","transformers.TFCamembertForMaskedLM"),c(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kt,"href","#transformers.TFCamembertForMaskedLM"),c(Et,"class","relative group"),c(zs,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.TFPreTrainedModel"),c(Lr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Lr,"rel","nofollow"),c(Is,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qe,"class","docstring"),c(Gt,"id","transformers.TFCamembertForSequenceClassification"),c(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gt,"href","#transformers.TFCamembertForSequenceClassification"),c(Ct,"class","relative group"),c(xs,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.TFPreTrainedModel"),c(Ir,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Ir,"rel","nofollow"),c(Os,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Ae,"class","docstring"),c(jt,"id","transformers.TFCamembertForMultipleChoice"),c(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jt,"href","#transformers.TFCamembertForMultipleChoice"),c(yt,"class","relative group"),c(Ss,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.TFPreTrainedModel"),c(Ur,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Ur,"rel","nofollow"),c(Bs,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(De,"class","docstring"),c(Yt,"id","transformers.TFCamembertForTokenClassification"),c(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yt,"href","#transformers.TFCamembertForTokenClassification"),c($t,"class","relative group"),c(Ns,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.TFPreTrainedModel"),c(Gr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Gr,"rel","nofollow"),c(Us,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(ze,"class","docstring"),c(eo,"id","transformers.TFCamembertForQuestionAnswering"),c(eo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eo,"href","#transformers.TFCamembertForQuestionAnswering"),c(Ft,"class","relative group"),c(Hs,"href","/docs/transformers/pr_16183/en/main_classes/model#transformers.TFPreTrainedModel"),c(es,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(es,"rel","nofollow"),c(Qs,"href","/docs/transformers/pr_16183/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Ie,"class","docstring")},m(a,f){e(document.head,k),h(a,Z,f),h(a,A,f),e(A,_),e(_,D),P(G,D,null),e(A,le),e(A,z),e(z,de),h(a,Q,f),h(a,u,f),e(u,W),e(W,I),P(X,I,null),e(u,me),e(u,x),e(x,ce),h(a,se,f),h(a,H,f),e(H,w),e(H,j),e(j,V),e(H,g),h(a,b,f),h(a,ee,f),e(ee,B),h(a,ae,f),h(a,te,f),e(te,O),e(O,he),h(a,ne,f),h(a,v,f),e(v,fe),h(a,S,f),h(a,oe,f),e(oe,J),e(J,N),e(J,re),e(re,pe),e(J,E),h(a,ie,f),h(a,C,f),e(C,ue),e(C,l),e(l,p),e(C,K),e(C,be),e(be,Ee),e(C,y),h(a,Te,f),h(a,ge,f),e(ge,ve),e(ve,T),P($,T,null),e(ge,Ce),e(ge,ke),e(ke,U),h(a,we,f),h(a,_e,f),P(Y,_e,null),e(_e,ye),e(_e,ro),e(ro,nl),e(ro,as),e(as,il),e(ro,ll),h(a,an,f),h(a,ht,f),e(ht,Pt),e(Pt,Xs),P(so,Xs,null),e(ht,dl),e(ht,js),e(js,ml),h(a,nn,f),h(a,Fe,f),P(ao,Fe,null),e(Fe,cl),e(Fe,et),e(et,hl),e(et,ns),e(ns,fl),e(et,pl),e(et,is),e(is,ul),e(et,gl),e(et,no),e(no,_l),e(et,vl),e(Fe,bl),e(Fe,io),e(io,kl),e(io,ls),e(ls,Tl),e(io,wl),e(Fe,El),e(Fe,tt),P(lo,tt,null),e(tt,Cl),e(tt,Js),e(Js,yl),e(tt,$l),e(tt,mo),e(mo,ds),e(ds,Fl),e(ds,Ys),e(Ys,Ml),e(mo,Pl),e(mo,ms),e(ms,Ll),e(ms,Zs),e(Zs,Rl),e(Fe,ql),e(Fe,Lt),P(co,Lt,null),e(Lt,Al),e(Lt,ho),e(ho,Dl),e(ho,ea),e(ea,zl),e(ho,Il),e(Fe,xl),e(Fe,Rt),P(fo,Rt,null),e(Rt,Ol),e(Rt,ta),e(ta,Sl),e(Fe,Bl),e(Fe,cs),P(po,cs,null),h(a,ln,f),h(a,ft,f),e(ft,qt),e(qt,oa),P(uo,oa,null),e(ft,Nl),e(ft,ra),e(ra,Ul),h(a,dn,f),h(a,xe,f),P(go,xe,null),e(xe,Hl),e(xe,Ke),e(Ke,Ql),e(Ke,sa),e(sa,Vl),e(Ke,Kl),e(Ke,hs),e(hs,Wl),e(Ke,Gl),e(Ke,fs),e(fs,Xl),e(Ke,jl),e(Ke,_o),e(_o,Jl),e(Ke,Yl),e(xe,Zl),e(xe,vo),e(vo,ed),e(vo,ps),e(ps,td),e(vo,od),e(xe,rd),e(xe,ot),P(bo,ot,null),e(ot,sd),e(ot,aa),e(aa,ad),e(ot,nd),e(ot,ko),e(ko,us),e(us,id),e(us,na),e(na,ld),e(ko,dd),e(ko,gs),e(gs,md),e(gs,ia),e(ia,cd),e(xe,hd),e(xe,At),P(To,At,null),e(At,fd),e(At,la),e(la,pd),h(a,mn,f),h(a,pt,f),e(pt,Dt),e(Dt,da),P(wo,da,null),e(pt,ud),e(pt,ma),e(ma,gd),h(a,cn,f),h(a,Oe,f),P(Eo,Oe,null),e(Oe,_d),e(Oe,ca),e(ca,vd),e(Oe,bd),e(Oe,Co),e(Co,kd),e(Co,_s),e(_s,Td),e(Co,wd),e(Oe,Ed),e(Oe,yo),e(yo,Cd),e(yo,$o),e($o,yd),e(yo,$d),e(Oe,Fd),e(Oe,Fo),e(Fo,Md),e(Fo,vs),e(vs,Pd),e(Fo,Ld),h(a,hn,f),h(a,ut,f),e(ut,zt),e(zt,ha),P(Mo,ha,null),e(ut,Rd),e(ut,fa),e(fa,qd),h(a,fn,f),h(a,Se,f),P(Po,Se,null),e(Se,Ad),e(Se,Lo),e(Lo,Dd),e(Lo,pa),e(pa,zd),e(Lo,Id),e(Se,xd),e(Se,Ro),e(Ro,Od),e(Ro,bs),e(bs,Sd),e(Ro,Bd),e(Se,Nd),e(Se,qo),e(qo,Ud),e(qo,Ao),e(Ao,Hd),e(qo,Qd),e(Se,Vd),e(Se,Do),e(Do,Kd),e(Do,ks),e(ks,Wd),e(Do,Gd),h(a,pn,f),h(a,gt,f),e(gt,It),e(It,ua),P(zo,ua,null),e(gt,Xd),e(gt,ga),e(ga,jd),h(a,un,f),h(a,Be,f),P(Io,Be,null),e(Be,Jd),e(Be,xo),e(xo,Yd),e(xo,_a),e(_a,Zd),e(xo,em),e(Be,tm),e(Be,Oo),e(Oo,om),e(Oo,Ts),e(Ts,rm),e(Oo,sm),e(Be,am),e(Be,So),e(So,nm),e(So,Bo),e(Bo,im),e(So,lm),e(Be,dm),e(Be,No),e(No,mm),e(No,ws),e(ws,cm),e(No,hm),h(a,gn,f),h(a,_t,f),e(_t,xt),e(xt,va),P(Uo,va,null),e(_t,fm),e(_t,ba),e(ba,pm),h(a,_n,f),h(a,Ne,f),P(Ho,Ne,null),e(Ne,um),e(Ne,ka),e(ka,gm),e(Ne,_m),e(Ne,Qo),e(Qo,vm),e(Qo,Es),e(Es,bm),e(Qo,km),e(Ne,Tm),e(Ne,Vo),e(Vo,wm),e(Vo,Ko),e(Ko,Em),e(Vo,Cm),e(Ne,ym),e(Ne,Wo),e(Wo,$m),e(Wo,Cs),e(Cs,Fm),e(Wo,Mm),h(a,vn,f),h(a,vt,f),e(vt,Ot),e(Ot,Ta),P(Go,Ta,null),e(vt,Pm),e(vt,wa),e(wa,Lm),h(a,bn,f),h(a,Ue,f),P(Xo,Ue,null),e(Ue,Rm),e(Ue,Ea),e(Ea,qm),e(Ue,Am),e(Ue,jo),e(jo,Dm),e(jo,ys),e(ys,zm),e(jo,Im),e(Ue,xm),e(Ue,Jo),e(Jo,Om),e(Jo,Yo),e(Yo,Sm),e(Jo,Bm),e(Ue,Nm),e(Ue,Zo),e(Zo,Um),e(Zo,$s),e($s,Hm),e(Zo,Qm),h(a,kn,f),h(a,bt,f),e(bt,St),e(St,Ca),P(er,Ca,null),e(bt,Vm),e(bt,ya),e(ya,Km),h(a,Tn,f),h(a,He,f),P(tr,He,null),e(He,Wm),e(He,$a),e($a,Gm),e(He,Xm),e(He,or),e(or,jm),e(or,Fs),e(Fs,Jm),e(or,Ym),e(He,Zm),e(He,rr),e(rr,ec),e(rr,sr),e(sr,tc),e(rr,oc),e(He,rc),e(He,ar),e(ar,sc),e(ar,Ms),e(Ms,ac),e(ar,nc),h(a,wn,f),h(a,kt,f),e(kt,Bt),e(Bt,Fa),P(nr,Fa,null),e(kt,ic),e(kt,Ma),e(Ma,lc),h(a,En,f),h(a,Qe,f),P(ir,Qe,null),e(Qe,dc),e(Qe,Nt),e(Nt,mc),e(Nt,Pa),e(Pa,cc),e(Nt,hc),e(Nt,La),e(La,fc),e(Qe,pc),e(Qe,lr),e(lr,uc),e(lr,Ps),e(Ps,gc),e(lr,_c),e(Qe,vc),e(Qe,dr),e(dr,bc),e(dr,mr),e(mr,kc),e(dr,Tc),e(Qe,wc),e(Qe,cr),e(cr,Ec),e(cr,Ls),e(Ls,Cc),e(cr,yc),h(a,Cn,f),h(a,Tt,f),e(Tt,Ut),e(Ut,Ra),P(hr,Ra,null),e(Tt,$c),e(Tt,qa),e(qa,Fc),h(a,yn,f),h(a,Le,f),P(fr,Le,null),e(Le,Mc),e(Le,Aa),e(Aa,Pc),e(Le,Lc),e(Le,pr),e(pr,Rc),e(pr,Rs),e(Rs,qc),e(pr,Ac),e(Le,Dc),e(Le,ur),e(ur,zc),e(ur,gr),e(gr,Ic),e(ur,xc),e(Le,Oc),P(Ht,Le,null),e(Le,Sc),e(Le,_r),e(_r,Bc),e(_r,qs),e(qs,Nc),e(_r,Uc),h(a,$n,f),h(a,wt,f),e(wt,Qt),e(Qt,Da),P(vr,Da,null),e(wt,Hc),e(wt,za),e(za,Qc),h(a,Fn,f),h(a,Re,f),P(br,Re,null),e(Re,Vc),e(Re,kr),e(kr,Kc),e(kr,Ia),e(Ia,Wc),e(kr,Gc),e(Re,Xc),e(Re,Tr),e(Tr,jc),e(Tr,As),e(As,Jc),e(Tr,Yc),e(Re,Zc),e(Re,wr),e(wr,eh),e(wr,Er),e(Er,th),e(wr,oh),e(Re,rh),P(Vt,Re,null),e(Re,sh),e(Re,Cr),e(Cr,ah),e(Cr,Ds),e(Ds,nh),e(Cr,ih),h(a,Mn,f),h(a,Et,f),e(Et,Kt),e(Kt,xa),P(yr,xa,null),e(Et,lh),e(Et,Oa),e(Oa,dh),h(a,Pn,f),h(a,qe,f),P($r,qe,null),e(qe,mh),e(qe,Fr),e(Fr,ch),e(Fr,Sa),e(Sa,hh),e(Fr,fh),e(qe,ph),e(qe,Mr),e(Mr,uh),e(Mr,zs),e(zs,gh),e(Mr,_h),e(qe,vh),e(qe,Pr),e(Pr,bh),e(Pr,Lr),e(Lr,kh),e(Pr,Th),e(qe,wh),P(Wt,qe,null),e(qe,Eh),e(qe,Rr),e(Rr,Ch),e(Rr,Is),e(Is,yh),e(Rr,$h),h(a,Ln,f),h(a,Ct,f),e(Ct,Gt),e(Gt,Ba),P(qr,Ba,null),e(Ct,Fh),e(Ct,Na),e(Na,Mh),h(a,Rn,f),h(a,Ae,f),P(Ar,Ae,null),e(Ae,Ph),e(Ae,Ua),e(Ua,Lh),e(Ae,Rh),e(Ae,Dr),e(Dr,qh),e(Dr,xs),e(xs,Ah),e(Dr,Dh),e(Ae,zh),e(Ae,zr),e(zr,Ih),e(zr,Ir),e(Ir,xh),e(zr,Oh),e(Ae,Sh),P(Xt,Ae,null),e(Ae,Bh),e(Ae,xr),e(xr,Nh),e(xr,Os),e(Os,Uh),e(xr,Hh),h(a,qn,f),h(a,yt,f),e(yt,jt),e(jt,Ha),P(Or,Ha,null),e(yt,Qh),e(yt,Qa),e(Qa,Vh),h(a,An,f),h(a,De,f),P(Sr,De,null),e(De,Kh),e(De,Va),e(Va,Wh),e(De,Gh),e(De,Br),e(Br,Xh),e(Br,Ss),e(Ss,jh),e(Br,Jh),e(De,Yh),e(De,Nr),e(Nr,Zh),e(Nr,Ur),e(Ur,ef),e(Nr,tf),e(De,of),P(Jt,De,null),e(De,rf),e(De,Hr),e(Hr,sf),e(Hr,Bs),e(Bs,af),e(Hr,nf),h(a,Dn,f),h(a,$t,f),e($t,Yt),e(Yt,Ka),P(Qr,Ka,null),e($t,lf),e($t,Wa),e(Wa,df),h(a,zn,f),h(a,ze,f),P(Vr,ze,null),e(ze,mf),e(ze,Ga),e(Ga,cf),e(ze,hf),e(ze,Kr),e(Kr,ff),e(Kr,Ns),e(Ns,pf),e(Kr,uf),e(ze,gf),e(ze,Wr),e(Wr,_f),e(Wr,Gr),e(Gr,vf),e(Wr,bf),e(ze,kf),P(Zt,ze,null),e(ze,Tf),e(ze,Xr),e(Xr,wf),e(Xr,Us),e(Us,Ef),e(Xr,Cf),h(a,In,f),h(a,Ft,f),e(Ft,eo),e(eo,Xa),P(jr,Xa,null),e(Ft,yf),e(Ft,ja),e(ja,$f),h(a,xn,f),h(a,Ie,f),P(Jr,Ie,null),e(Ie,Ff),e(Ie,Mt),e(Mt,Mf),e(Mt,Ja),e(Ja,Pf),e(Mt,Lf),e(Mt,Ya),e(Ya,Rf),e(Mt,qf),e(Ie,Af),e(Ie,Yr),e(Yr,Df),e(Yr,Hs),e(Hs,zf),e(Yr,If),e(Ie,xf),e(Ie,Zr),e(Zr,Of),e(Zr,es),e(es,Sf),e(Zr,Bf),e(Ie,Nf),P(to,Ie,null),e(Ie,Uf),e(Ie,ts),e(ts,Hf),e(ts,Qs),e(Qs,Qf),e(ts,Vf),On=!0},p(a,[f]){const os={};f&2&&(os.$$scope={dirty:f,ctx:a}),Ht.$set(os);const Za={};f&2&&(Za.$$scope={dirty:f,ctx:a}),Vt.$set(Za);const en={};f&2&&(en.$$scope={dirty:f,ctx:a}),Wt.$set(en);const tn={};f&2&&(tn.$$scope={dirty:f,ctx:a}),Xt.$set(tn);const rs={};f&2&&(rs.$$scope={dirty:f,ctx:a}),Jt.$set(rs);const on={};f&2&&(on.$$scope={dirty:f,ctx:a}),Zt.$set(on);const rn={};f&2&&(rn.$$scope={dirty:f,ctx:a}),to.$set(rn)},i(a){On||(L(G.$$.fragment,a),L(X.$$.fragment,a),L($.$$.fragment,a),L(Y.$$.fragment,a),L(so.$$.fragment,a),L(ao.$$.fragment,a),L(lo.$$.fragment,a),L(co.$$.fragment,a),L(fo.$$.fragment,a),L(po.$$.fragment,a),L(uo.$$.fragment,a),L(go.$$.fragment,a),L(bo.$$.fragment,a),L(To.$$.fragment,a),L(wo.$$.fragment,a),L(Eo.$$.fragment,a),L(Mo.$$.fragment,a),L(Po.$$.fragment,a),L(zo.$$.fragment,a),L(Io.$$.fragment,a),L(Uo.$$.fragment,a),L(Ho.$$.fragment,a),L(Go.$$.fragment,a),L(Xo.$$.fragment,a),L(er.$$.fragment,a),L(tr.$$.fragment,a),L(nr.$$.fragment,a),L(ir.$$.fragment,a),L(hr.$$.fragment,a),L(fr.$$.fragment,a),L(Ht.$$.fragment,a),L(vr.$$.fragment,a),L(br.$$.fragment,a),L(Vt.$$.fragment,a),L(yr.$$.fragment,a),L($r.$$.fragment,a),L(Wt.$$.fragment,a),L(qr.$$.fragment,a),L(Ar.$$.fragment,a),L(Xt.$$.fragment,a),L(Or.$$.fragment,a),L(Sr.$$.fragment,a),L(Jt.$$.fragment,a),L(Qr.$$.fragment,a),L(Vr.$$.fragment,a),L(Zt.$$.fragment,a),L(jr.$$.fragment,a),L(Jr.$$.fragment,a),L(to.$$.fragment,a),On=!0)},o(a){R(G.$$.fragment,a),R(X.$$.fragment,a),R($.$$.fragment,a),R(Y.$$.fragment,a),R(so.$$.fragment,a),R(ao.$$.fragment,a),R(lo.$$.fragment,a),R(co.$$.fragment,a),R(fo.$$.fragment,a),R(po.$$.fragment,a),R(uo.$$.fragment,a),R(go.$$.fragment,a),R(bo.$$.fragment,a),R(To.$$.fragment,a),R(wo.$$.fragment,a),R(Eo.$$.fragment,a),R(Mo.$$.fragment,a),R(Po.$$.fragment,a),R(zo.$$.fragment,a),R(Io.$$.fragment,a),R(Uo.$$.fragment,a),R(Ho.$$.fragment,a),R(Go.$$.fragment,a),R(Xo.$$.fragment,a),R(er.$$.fragment,a),R(tr.$$.fragment,a),R(nr.$$.fragment,a),R(ir.$$.fragment,a),R(hr.$$.fragment,a),R(fr.$$.fragment,a),R(Ht.$$.fragment,a),R(vr.$$.fragment,a),R(br.$$.fragment,a),R(Vt.$$.fragment,a),R(yr.$$.fragment,a),R($r.$$.fragment,a),R(Wt.$$.fragment,a),R(qr.$$.fragment,a),R(Ar.$$.fragment,a),R(Xt.$$.fragment,a),R(Or.$$.fragment,a),R(Sr.$$.fragment,a),R(Jt.$$.fragment,a),R(Qr.$$.fragment,a),R(Vr.$$.fragment,a),R(Zt.$$.fragment,a),R(jr.$$.fragment,a),R(Jr.$$.fragment,a),R(to.$$.fragment,a),On=!1},d(a){t(k),a&&t(Z),a&&t(A),q(G),a&&t(Q),a&&t(u),q(X),a&&t(se),a&&t(H),a&&t(b),a&&t(ee),a&&t(ae),a&&t(te),a&&t(ne),a&&t(v),a&&t(S),a&&t(oe),a&&t(ie),a&&t(C),a&&t(Te),a&&t(ge),q($),a&&t(we),a&&t(_e),q(Y),a&&t(an),a&&t(ht),q(so),a&&t(nn),a&&t(Fe),q(ao),q(lo),q(co),q(fo),q(po),a&&t(ln),a&&t(ft),q(uo),a&&t(dn),a&&t(xe),q(go),q(bo),q(To),a&&t(mn),a&&t(pt),q(wo),a&&t(cn),a&&t(Oe),q(Eo),a&&t(hn),a&&t(ut),q(Mo),a&&t(fn),a&&t(Se),q(Po),a&&t(pn),a&&t(gt),q(zo),a&&t(un),a&&t(Be),q(Io),a&&t(gn),a&&t(_t),q(Uo),a&&t(_n),a&&t(Ne),q(Ho),a&&t(vn),a&&t(vt),q(Go),a&&t(bn),a&&t(Ue),q(Xo),a&&t(kn),a&&t(bt),q(er),a&&t(Tn),a&&t(He),q(tr),a&&t(wn),a&&t(kt),q(nr),a&&t(En),a&&t(Qe),q(ir),a&&t(Cn),a&&t(Tt),q(hr),a&&t(yn),a&&t(Le),q(fr),q(Ht),a&&t($n),a&&t(wt),q(vr),a&&t(Fn),a&&t(Re),q(br),q(Vt),a&&t(Mn),a&&t(Et),q(yr),a&&t(Pn),a&&t(qe),q($r),q(Wt),a&&t(Ln),a&&t(Ct),q(qr),a&&t(Rn),a&&t(Ae),q(Ar),q(Xt),a&&t(qn),a&&t(yt),q(Or),a&&t(An),a&&t(De),q(Sr),q(Jt),a&&t(Dn),a&&t($t),q(Qr),a&&t(zn),a&&t(ze),q(Vr),q(Zt),a&&t(In),a&&t(Ft),q(jr),a&&t(xn),a&&t(Ie),q(Jr),q(to)}}}const Sg={local:"camembert",sections:[{local:"overview",title:"Overview"},{local:"transformers.CamembertConfig",title:"CamembertConfig"},{local:"transformers.CamembertTokenizer",title:"CamembertTokenizer"},{local:"transformers.CamembertTokenizerFast",title:"CamembertTokenizerFast"},{local:"transformers.CamembertModel",title:"CamembertModel"},{local:"transformers.CamembertForCausalLM",title:"CamembertForCausalLM"},{local:"transformers.CamembertForMaskedLM",title:"CamembertForMaskedLM"},{local:"transformers.CamembertForSequenceClassification",title:"CamembertForSequenceClassification"},{local:"transformers.CamembertForMultipleChoice",title:"CamembertForMultipleChoice"},{local:"transformers.CamembertForTokenClassification",title:"CamembertForTokenClassification"},{local:"transformers.CamembertForQuestionAnswering",title:"CamembertForQuestionAnswering"},{local:"transformers.TFCamembertModel",title:"TFCamembertModel"},{local:"transformers.TFCamembertForCausalLM",title:"TFCamembertForCasualLM"},{local:"transformers.TFCamembertForMaskedLM",title:"TFCamembertForMaskedLM"},{local:"transformers.TFCamembertForSequenceClassification",title:"TFCamembertForSequenceClassification"},{local:"transformers.TFCamembertForMultipleChoice",title:"TFCamembertForMultipleChoice"},{local:"transformers.TFCamembertForTokenClassification",title:"TFCamembertForTokenClassification"},{local:"transformers.TFCamembertForQuestionAnswering",title:"TFCamembertForQuestionAnswering"}],title:"CamemBERT"};function Bg(Pe,k,Z){let{fw:A}=k;return Pe.$$set=_=>{"fw"in _&&Z(0,A=_.fw)},[A]}class Vg extends Fg{constructor(k){super();Mg(this,k,Bg,Og,Pg,{fw:0})}}export{Vg as default,Sg as metadata};
