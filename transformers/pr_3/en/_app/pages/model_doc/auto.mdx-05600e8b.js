import{S as pMt,i as _Mt,s as uMt,e as a,k as l,w as f,t as o,M as bMt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-6b77c823.js";import{T as wxr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function vMt(Ii){let J,$e,de,pe,io,fe,Me,Vo,ji,If,fa,Ni,Di,oy,jf,Be,co,qi,On,ry,Gn,Xn,ty,Oi,Vn,ay,Gi,Nf,qa;return{c(){J=a("p"),$e=o("If your "),de=a("code"),pe=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Me=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),Di=o('"new-model"'),oy=o(")."),jf=l(),Be=a("p"),co=o("Likewise, if your "),qi=a("code"),On=o("NewModel"),ry=o(" is a subclass of "),Gn=a("a"),Xn=o("PreTrainedModel"),ty=o(`, make sure its
`),Oi=a("code"),Vn=o("config_class"),ay=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Nf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var _e=s(J);$e=r(_e,"If your "),de=n(_e,"CODE",{});var H8=s(de);pe=r(H8,"NewModelConfig"),H8.forEach(t),io=r(_e," is a subclass of "),fe=n(_e,"CODE",{});var Xi=s(fe);Me=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(_e,`, make sure its
`),ji=n(_e,"CODE",{});var U8=s(ji);If=r(U8,"model_type"),U8.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),Ni=n(_e,"CODE",{});var J8=s(Ni);Di=r(J8,'"new-model"'),J8.forEach(t),oy=r(_e,")."),_e.forEach(t),jf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Oa=s(qi);On=r(Oa,"NewModel"),Oa.forEach(t),ry=r(zo," is a subclass of "),Gn=n(zo,"A",{href:!0});var Y8=s(Gn);Xn=r(Y8,"PreTrainedModel"),Y8.forEach(t),ty=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Df=s(Oi);Vn=r(Df,"config_class"),Df.forEach(t),ay=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var K8=s(Gi);Nf=r(K8,"NewModelConfig"),K8.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(Gn,"href","/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,J,_e),e(J,$e),e(J,de),e(de,pe),e(J,io),e(J,fe),e(fe,Me),e(J,Vo),e(J,ji),e(ji,If),e(J,fa),e(J,Ni),e(Ni,Di),e(J,oy),b(fo,jf,_e),b(fo,Be,_e),e(Be,co),e(Be,qi),e(qi,On),e(Be,ry),e(Be,Gn),e(Gn,Xn),e(Be,ty),e(Be,Oi),e(Oi,Vn),e(Be,ay),e(Be,Gi),e(Gi,Nf),e(Be,qa)},d(fo){fo&&t(J),fo&&t(jf),fo&&t(Be)}}}function TMt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function FMt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function CMt(Ii){let J,$e,de,pe,io,fe,Me,Vo,ji,If,fa,Ni,Di,oy,jf,Be,co,qi,On,ry,Gn,Xn,ty,Oi,Vn,ay,Gi,Nf,qa,fo,_e,H8,Xi,U8,J8,zo,Oa,Y8,Df,K8,KPe,Nxe,Vi,qf,xQ,ny,ZPe,kQ,e$e,Dxe,zn,o$e,RQ,r$e,t$e,SQ,a$e,n$e,qxe,sy,Oxe,Z8,s$e,Gxe,Of,Xxe,zi,Gf,PQ,ly,l$e,$Q,i$e,Vxe,Wo,iy,d$e,dy,c$e,e9,f$e,m$e,g$e,cy,h$e,IQ,p$e,_$e,u$e,mo,fy,b$e,jQ,v$e,T$e,Wi,F$e,NQ,C$e,M$e,DQ,E$e,y$e,w$e,v,Xf,qQ,A$e,L$e,o9,B$e,x$e,k$e,Vf,OQ,R$e,S$e,r9,P$e,$$e,I$e,zf,GQ,j$e,N$e,t9,D$e,q$e,O$e,Wf,XQ,G$e,X$e,a9,V$e,z$e,W$e,Qf,VQ,Q$e,H$e,n9,U$e,J$e,Y$e,Hf,zQ,K$e,Z$e,s9,eIe,oIe,rIe,Uf,WQ,tIe,aIe,l9,nIe,sIe,lIe,Jf,QQ,iIe,dIe,i9,cIe,fIe,mIe,Yf,HQ,gIe,hIe,d9,pIe,_Ie,uIe,Kf,UQ,bIe,vIe,c9,TIe,FIe,CIe,Zf,JQ,MIe,EIe,f9,yIe,wIe,AIe,em,YQ,LIe,BIe,m9,xIe,kIe,RIe,om,KQ,SIe,PIe,g9,$Ie,IIe,jIe,rm,ZQ,NIe,DIe,h9,qIe,OIe,GIe,tm,eH,XIe,VIe,p9,zIe,WIe,QIe,am,oH,HIe,UIe,_9,JIe,YIe,KIe,nm,rH,ZIe,eje,u9,oje,rje,tje,sm,tH,aje,nje,b9,sje,lje,ije,lm,aH,dje,cje,v9,fje,mje,gje,im,nH,hje,pje,T9,_je,uje,bje,dm,sH,vje,Tje,F9,Fje,Cje,Mje,cm,lH,Eje,yje,C9,wje,Aje,Lje,fm,iH,Bje,xje,M9,kje,Rje,Sje,mm,dH,Pje,$je,E9,Ije,jje,Nje,gm,cH,Dje,qje,y9,Oje,Gje,Xje,hm,fH,Vje,zje,w9,Wje,Qje,Hje,pm,mH,Uje,Jje,A9,Yje,Kje,Zje,_m,gH,eNe,oNe,L9,rNe,tNe,aNe,um,hH,nNe,sNe,B9,lNe,iNe,dNe,bm,pH,cNe,fNe,x9,mNe,gNe,hNe,vm,_H,pNe,_Ne,k9,uNe,bNe,vNe,Tm,uH,TNe,FNe,R9,CNe,MNe,ENe,Fm,bH,yNe,wNe,S9,ANe,LNe,BNe,Cm,vH,xNe,kNe,P9,RNe,SNe,PNe,Mm,TH,$Ne,INe,$9,jNe,NNe,DNe,Em,FH,qNe,ONe,I9,GNe,XNe,VNe,ym,CH,zNe,WNe,j9,QNe,HNe,UNe,wm,MH,JNe,YNe,N9,KNe,ZNe,eDe,Am,EH,oDe,rDe,D9,tDe,aDe,nDe,Lm,yH,sDe,lDe,q9,iDe,dDe,cDe,Bm,wH,fDe,mDe,O9,gDe,hDe,pDe,xm,AH,_De,uDe,G9,bDe,vDe,TDe,km,LH,FDe,CDe,X9,MDe,EDe,yDe,Rm,BH,wDe,ADe,V9,LDe,BDe,xDe,Sm,xH,kDe,RDe,z9,SDe,PDe,$De,Pm,kH,IDe,jDe,W9,NDe,DDe,qDe,$m,RH,ODe,GDe,Q9,XDe,VDe,zDe,Im,SH,WDe,QDe,H9,HDe,UDe,JDe,jm,PH,YDe,KDe,U9,ZDe,eqe,oqe,Nm,$H,rqe,tqe,J9,aqe,nqe,sqe,Dm,IH,lqe,iqe,Y9,dqe,cqe,fqe,qm,jH,mqe,gqe,K9,hqe,pqe,_qe,Om,NH,uqe,bqe,Z9,vqe,Tqe,Fqe,Gm,DH,Cqe,Mqe,eB,Eqe,yqe,wqe,Xm,qH,Aqe,Lqe,oB,Bqe,xqe,kqe,Vm,OH,Rqe,Sqe,rB,Pqe,$qe,Iqe,zm,GH,jqe,Nqe,tB,Dqe,qqe,Oqe,Wm,XH,Gqe,Xqe,aB,Vqe,zqe,Wqe,Qm,VH,Qqe,Hqe,nB,Uqe,Jqe,Yqe,Hm,zH,Kqe,Zqe,sB,eOe,oOe,rOe,Um,WH,tOe,aOe,lB,nOe,sOe,lOe,Jm,QH,iOe,dOe,iB,cOe,fOe,mOe,Ym,HH,gOe,hOe,dB,pOe,_Oe,uOe,Km,UH,bOe,vOe,cB,TOe,FOe,COe,Zm,JH,MOe,EOe,fB,yOe,wOe,AOe,eg,YH,LOe,BOe,mB,xOe,kOe,ROe,og,KH,SOe,POe,gB,$Oe,IOe,jOe,rg,ZH,NOe,DOe,hB,qOe,OOe,GOe,tg,eU,XOe,VOe,pB,zOe,WOe,QOe,ag,oU,HOe,UOe,_B,JOe,YOe,KOe,ng,rU,ZOe,eGe,uB,oGe,rGe,tGe,sg,tU,aGe,nGe,bB,sGe,lGe,iGe,lg,aU,dGe,cGe,vB,fGe,mGe,gGe,ig,nU,hGe,pGe,TB,_Ge,uGe,bGe,dg,sU,vGe,TGe,FB,FGe,CGe,MGe,cg,lU,EGe,yGe,CB,wGe,AGe,LGe,fg,iU,BGe,xGe,MB,kGe,RGe,SGe,mg,dU,PGe,$Ge,EB,IGe,jGe,NGe,gg,cU,DGe,qGe,yB,OGe,GGe,XGe,hg,fU,VGe,zGe,wB,WGe,QGe,HGe,pg,mU,UGe,JGe,AB,YGe,KGe,ZGe,_g,gU,eXe,oXe,LB,rXe,tXe,aXe,ug,hU,nXe,sXe,BB,lXe,iXe,dXe,bg,pU,cXe,fXe,xB,mXe,gXe,hXe,vg,_U,pXe,_Xe,kB,uXe,bXe,vXe,Tg,uU,TXe,FXe,RB,CXe,MXe,EXe,Fg,bU,yXe,wXe,SB,AXe,LXe,BXe,Cg,vU,xXe,kXe,PB,RXe,SXe,PXe,Mg,TU,$Xe,IXe,$B,jXe,NXe,DXe,Eg,FU,qXe,OXe,IB,GXe,XXe,VXe,yg,CU,zXe,WXe,jB,QXe,HXe,UXe,wg,MU,JXe,YXe,NB,KXe,ZXe,eVe,Ag,EU,oVe,rVe,DB,tVe,aVe,nVe,Lg,yU,sVe,lVe,qB,iVe,dVe,cVe,Bg,wU,fVe,mVe,OB,gVe,hVe,pVe,xg,AU,_Ve,uVe,GB,bVe,vVe,TVe,LU,FVe,CVe,my,MVe,kg,gy,EVe,BU,yVe,zxe,Qi,Rg,xU,hy,wVe,kU,AVe,Wxe,Qo,py,LVe,_y,BVe,XB,xVe,kVe,RVe,uy,SVe,RU,PVe,$Ve,IVe,go,by,jVe,SU,NVe,DVe,Ga,qVe,PU,OVe,GVe,$U,XVe,VVe,IU,zVe,WVe,QVe,E,Wn,jU,HVe,UVe,VB,JVe,YVe,zB,KVe,ZVe,eze,Qn,NU,oze,rze,WB,tze,aze,QB,nze,sze,lze,Hn,DU,ize,dze,HB,cze,fze,UB,mze,gze,hze,Sg,qU,pze,_ze,JB,uze,bze,vze,Un,OU,Tze,Fze,YB,Cze,Mze,KB,Eze,yze,wze,Pg,GU,Aze,Lze,ZB,Bze,xze,kze,$g,XU,Rze,Sze,ex,Pze,$ze,Ize,Ig,VU,jze,Nze,ox,Dze,qze,Oze,Jn,zU,Gze,Xze,rx,Vze,zze,tx,Wze,Qze,Hze,Yn,WU,Uze,Jze,ax,Yze,Kze,nx,Zze,eWe,oWe,Kn,QU,rWe,tWe,sx,aWe,nWe,lx,sWe,lWe,iWe,jg,HU,dWe,cWe,ix,fWe,mWe,gWe,Ng,UU,hWe,pWe,dx,_We,uWe,bWe,Zn,JU,vWe,TWe,cx,FWe,CWe,fx,MWe,EWe,yWe,Dg,YU,wWe,AWe,mx,LWe,BWe,xWe,es,KU,kWe,RWe,gx,SWe,PWe,hx,$We,IWe,jWe,os,ZU,NWe,DWe,px,qWe,OWe,_x,GWe,XWe,VWe,rs,eJ,zWe,WWe,ux,QWe,HWe,oJ,UWe,JWe,YWe,qg,rJ,KWe,ZWe,bx,eQe,oQe,rQe,ts,tJ,tQe,aQe,vx,nQe,sQe,Tx,lQe,iQe,dQe,Og,aJ,cQe,fQe,Fx,mQe,gQe,hQe,as,nJ,pQe,_Qe,Cx,uQe,bQe,Mx,vQe,TQe,FQe,ns,sJ,CQe,MQe,Ex,EQe,yQe,yx,wQe,AQe,LQe,ss,lJ,BQe,xQe,wx,kQe,RQe,Ax,SQe,PQe,$Qe,Gg,iJ,IQe,jQe,Lx,NQe,DQe,qQe,ls,dJ,OQe,GQe,Bx,XQe,VQe,xx,zQe,WQe,QQe,Xg,cJ,HQe,UQe,kx,JQe,YQe,KQe,is,fJ,ZQe,eHe,Rx,oHe,rHe,Sx,tHe,aHe,nHe,ds,mJ,sHe,lHe,Px,iHe,dHe,$x,cHe,fHe,mHe,cs,gJ,gHe,hHe,Ix,pHe,_He,jx,uHe,bHe,vHe,fs,hJ,THe,FHe,Nx,CHe,MHe,Dx,EHe,yHe,wHe,Vg,pJ,AHe,LHe,qx,BHe,xHe,kHe,ms,_J,RHe,SHe,Ox,PHe,$He,Gx,IHe,jHe,NHe,gs,uJ,DHe,qHe,Xx,OHe,GHe,Vx,XHe,VHe,zHe,hs,bJ,WHe,QHe,zx,HHe,UHe,Wx,JHe,YHe,KHe,ps,vJ,ZHe,eUe,Qx,oUe,rUe,Hx,tUe,aUe,nUe,_s,TJ,sUe,lUe,Ux,iUe,dUe,Jx,cUe,fUe,mUe,us,FJ,gUe,hUe,Yx,pUe,_Ue,Kx,uUe,bUe,vUe,zg,CJ,TUe,FUe,Zx,CUe,MUe,EUe,bs,MJ,yUe,wUe,ek,AUe,LUe,ok,BUe,xUe,kUe,Wg,EJ,RUe,SUe,rk,PUe,$Ue,IUe,Qg,yJ,jUe,NUe,tk,DUe,qUe,OUe,vs,wJ,GUe,XUe,ak,VUe,zUe,nk,WUe,QUe,HUe,Ts,AJ,UUe,JUe,sk,YUe,KUe,lk,ZUe,eJe,oJe,Hg,LJ,rJe,tJe,ik,aJe,nJe,sJe,Fs,BJ,lJe,iJe,dk,dJe,cJe,ck,fJe,mJe,gJe,Cs,xJ,hJe,pJe,fk,_Je,uJe,mk,bJe,vJe,TJe,Ms,kJ,FJe,CJe,gk,MJe,EJe,hk,yJe,wJe,AJe,Es,RJ,LJe,BJe,pk,xJe,kJe,_k,RJe,SJe,PJe,ys,SJ,$Je,IJe,uk,jJe,NJe,bk,DJe,qJe,OJe,Ug,PJ,GJe,XJe,vk,VJe,zJe,WJe,Jg,$J,QJe,HJe,Tk,UJe,JJe,YJe,Yg,IJ,KJe,ZJe,Fk,eYe,oYe,rYe,Kg,jJ,tYe,aYe,Ck,nYe,sYe,lYe,ws,NJ,iYe,dYe,Mk,cYe,fYe,Ek,mYe,gYe,hYe,Zg,DJ,pYe,_Ye,yk,uYe,bYe,vYe,As,qJ,TYe,FYe,wk,CYe,MYe,Ak,EYe,yYe,wYe,Ls,OJ,AYe,LYe,Lk,BYe,xYe,Bk,kYe,RYe,SYe,Bs,GJ,PYe,$Ye,xk,IYe,jYe,kk,NYe,DYe,qYe,xs,XJ,OYe,GYe,Rk,XYe,VYe,Sk,zYe,WYe,QYe,ks,VJ,HYe,UYe,Pk,JYe,YYe,$k,KYe,ZYe,eKe,Rs,zJ,oKe,rKe,Ik,tKe,aKe,jk,nKe,sKe,lKe,eh,WJ,iKe,dKe,Nk,cKe,fKe,mKe,oh,QJ,gKe,hKe,Dk,pKe,_Ke,uKe,Ss,HJ,bKe,vKe,qk,TKe,FKe,Ok,CKe,MKe,EKe,Ps,UJ,yKe,wKe,Gk,AKe,LKe,Xk,BKe,xKe,kKe,$s,JJ,RKe,SKe,Vk,PKe,$Ke,zk,IKe,jKe,NKe,rh,YJ,DKe,qKe,Wk,OKe,GKe,XKe,th,KJ,VKe,zKe,Qk,WKe,QKe,HKe,ah,ZJ,UKe,JKe,Hk,YKe,KKe,ZKe,nh,eY,eZe,oZe,Uk,rZe,tZe,aZe,Is,oY,nZe,sZe,Jk,lZe,iZe,Yk,dZe,cZe,fZe,sh,rY,mZe,gZe,Kk,hZe,pZe,_Ze,lh,tY,uZe,bZe,Zk,vZe,TZe,FZe,js,aY,CZe,MZe,eR,EZe,yZe,oR,wZe,AZe,LZe,Ns,nY,BZe,xZe,rR,kZe,RZe,tR,SZe,PZe,$Ze,sY,IZe,jZe,vy,NZe,ih,Ty,DZe,lY,qZe,Qxe,Hi,dh,iY,Fy,OZe,dY,GZe,Hxe,Ho,Cy,XZe,My,VZe,aR,zZe,WZe,QZe,Ey,HZe,cY,UZe,JZe,YZe,Ie,yy,KZe,fY,ZZe,eeo,Xa,oeo,mY,reo,teo,gY,aeo,neo,hY,seo,leo,ieo,re,ch,pY,deo,ceo,nR,feo,meo,geo,fh,_Y,heo,peo,sR,_eo,ueo,beo,mh,uY,veo,Teo,lR,Feo,Ceo,Meo,gh,bY,Eeo,yeo,iR,weo,Aeo,Leo,hh,vY,Beo,xeo,dR,keo,Reo,Seo,ph,TY,Peo,$eo,cR,Ieo,jeo,Neo,_h,FY,Deo,qeo,fR,Oeo,Geo,Xeo,uh,CY,Veo,zeo,mR,Weo,Qeo,Heo,bh,MY,Ueo,Jeo,gR,Yeo,Keo,Zeo,vh,EY,eoo,ooo,hR,roo,too,aoo,Th,yY,noo,soo,pR,loo,ioo,doo,Fh,wY,coo,foo,_R,moo,goo,hoo,Ch,AY,poo,_oo,uR,uoo,boo,voo,Mh,LY,Too,Foo,bR,Coo,Moo,Eoo,Eh,BY,yoo,woo,vR,Aoo,Loo,Boo,yh,xY,xoo,koo,TR,Roo,Soo,Poo,wh,kY,$oo,Ioo,FR,joo,Noo,Doo,Ah,RY,qoo,Ooo,CR,Goo,Xoo,Voo,Lh,zoo,SY,Woo,Qoo,wy,Hoo,Bh,Ay,Uoo,PY,Joo,Uxe,Ui,xh,$Y,Ly,Yoo,IY,Koo,Jxe,Uo,By,Zoo,xy,ero,MR,oro,rro,tro,ky,aro,jY,nro,sro,lro,je,Ry,iro,NY,dro,cro,Ji,fro,DY,mro,gro,qY,hro,pro,_ro,xe,kh,OY,uro,bro,ER,vro,Tro,Fro,Rh,GY,Cro,Mro,yR,Ero,yro,wro,Sh,XY,Aro,Lro,wR,Bro,xro,kro,Ph,VY,Rro,Sro,AR,Pro,$ro,Iro,$h,zY,jro,Nro,LR,Dro,qro,Oro,Ih,WY,Gro,Xro,BR,Vro,zro,Wro,jh,QY,Qro,Hro,xR,Uro,Jro,Yro,Nh,HY,Kro,Zro,kR,eto,oto,rto,Dh,tto,UY,ato,nto,Sy,sto,qh,Py,lto,JY,ito,Yxe,Yi,Oh,YY,$y,dto,KY,cto,Kxe,Jo,Iy,fto,Ki,mto,ZY,gto,hto,eK,pto,_to,uto,jy,bto,oK,vto,Tto,Fto,Vr,Ny,Cto,rK,Mto,Eto,Zi,yto,tK,wto,Ato,aK,Lto,Bto,xto,nK,kto,Rto,Dy,Sto,Ne,qy,Pto,sK,$to,Ito,Va,jto,lK,Nto,Dto,iK,qto,Oto,dK,Gto,Xto,Vto,F,Gh,cK,zto,Wto,RR,Qto,Hto,Uto,Xh,fK,Jto,Yto,SR,Kto,Zto,eao,Vh,mK,oao,rao,PR,tao,aao,nao,zh,gK,sao,lao,$R,iao,dao,cao,Wh,hK,fao,mao,IR,gao,hao,pao,Qh,pK,_ao,uao,jR,bao,vao,Tao,Hh,_K,Fao,Cao,NR,Mao,Eao,yao,Uh,uK,wao,Aao,DR,Lao,Bao,xao,Jh,bK,kao,Rao,qR,Sao,Pao,$ao,Yh,vK,Iao,jao,OR,Nao,Dao,qao,Kh,TK,Oao,Gao,GR,Xao,Vao,zao,Zh,FK,Wao,Qao,XR,Hao,Uao,Jao,ep,CK,Yao,Kao,VR,Zao,eno,ono,op,MK,rno,tno,zR,ano,nno,sno,rp,EK,lno,ino,WR,dno,cno,fno,tp,yK,mno,gno,QR,hno,pno,_no,ap,wK,uno,bno,HR,vno,Tno,Fno,np,AK,Cno,Mno,UR,Eno,yno,wno,sp,LK,Ano,Lno,JR,Bno,xno,kno,lp,BK,Rno,Sno,YR,Pno,$no,Ino,ip,xK,jno,Nno,KR,Dno,qno,Ono,dp,kK,Gno,Xno,ZR,Vno,zno,Wno,cp,RK,Qno,Hno,eS,Uno,Jno,Yno,fp,SK,Kno,Zno,oS,eso,oso,rso,mp,PK,tso,aso,rS,nso,sso,lso,gp,$K,iso,dso,tS,cso,fso,mso,hp,IK,gso,hso,aS,pso,_so,uso,Ds,jK,bso,vso,nS,Tso,Fso,sS,Cso,Mso,Eso,pp,NK,yso,wso,lS,Aso,Lso,Bso,_p,DK,xso,kso,iS,Rso,Sso,Pso,up,qK,$so,Iso,dS,jso,Nso,Dso,bp,OK,qso,Oso,cS,Gso,Xso,Vso,vp,GK,zso,Wso,fS,Qso,Hso,Uso,Tp,XK,Jso,Yso,mS,Kso,Zso,elo,Fp,VK,olo,rlo,gS,tlo,alo,nlo,Cp,zK,slo,llo,hS,ilo,dlo,clo,Mp,WK,flo,mlo,pS,glo,hlo,plo,Ep,QK,_lo,ulo,_S,blo,vlo,Tlo,yp,HK,Flo,Clo,uS,Mlo,Elo,ylo,wp,UK,wlo,Alo,bS,Llo,Blo,xlo,Ap,JK,klo,Rlo,vS,Slo,Plo,$lo,Lp,YK,Ilo,jlo,TS,Nlo,Dlo,qlo,Bp,KK,Olo,Glo,FS,Xlo,Vlo,zlo,xp,ZK,Wlo,Qlo,CS,Hlo,Ulo,Jlo,kp,eZ,Ylo,Klo,MS,Zlo,eio,oio,Rp,oZ,rio,tio,ES,aio,nio,sio,Sp,rZ,lio,iio,yS,dio,cio,fio,Pp,tZ,mio,gio,wS,hio,pio,_io,$p,aZ,uio,bio,AS,vio,Tio,Fio,Ip,nZ,Cio,Mio,LS,Eio,yio,wio,jp,sZ,Aio,Lio,BS,Bio,xio,kio,Np,lZ,Rio,Sio,xS,Pio,$io,Iio,Dp,iZ,jio,Nio,kS,Dio,qio,Oio,qp,dZ,Gio,Xio,RS,Vio,zio,Wio,Op,cZ,Qio,Hio,SS,Uio,Jio,Yio,Gp,fZ,Kio,Zio,PS,edo,odo,rdo,Xp,mZ,tdo,ado,$S,ndo,sdo,ldo,Vp,gZ,ido,ddo,IS,cdo,fdo,mdo,zp,hZ,gdo,hdo,jS,pdo,_do,udo,Wp,pZ,bdo,vdo,NS,Tdo,Fdo,Cdo,Qp,_Z,Mdo,Edo,DS,ydo,wdo,Ado,Hp,uZ,Ldo,Bdo,qS,xdo,kdo,Rdo,Up,bZ,Sdo,Pdo,OS,$do,Ido,jdo,Jp,vZ,Ndo,Ddo,GS,qdo,Odo,Gdo,Yp,TZ,Xdo,Vdo,XS,zdo,Wdo,Qdo,Kp,FZ,Hdo,Udo,VS,Jdo,Ydo,Kdo,Zp,CZ,Zdo,eco,zS,oco,rco,tco,e_,MZ,aco,nco,WS,sco,lco,ico,o_,EZ,dco,cco,QS,fco,mco,gco,r_,yZ,hco,pco,HS,_co,uco,bco,t_,wZ,vco,Tco,US,Fco,Cco,Mco,a_,AZ,Eco,yco,JS,wco,Aco,Lco,n_,LZ,Bco,xco,YS,kco,Rco,Sco,s_,BZ,Pco,$co,KS,Ico,jco,Nco,l_,xZ,Dco,qco,ZS,Oco,Gco,Xco,i_,kZ,Vco,zco,eP,Wco,Qco,Hco,d_,RZ,Uco,Jco,oP,Yco,Kco,Zco,c_,SZ,efo,ofo,rP,rfo,tfo,afo,f_,PZ,nfo,sfo,tP,lfo,ifo,dfo,m_,$Z,cfo,ffo,aP,mfo,gfo,hfo,g_,IZ,pfo,_fo,nP,ufo,bfo,vfo,h_,jZ,Tfo,Ffo,sP,Cfo,Mfo,Efo,p_,NZ,yfo,wfo,lP,Afo,Lfo,Bfo,__,DZ,xfo,kfo,iP,Rfo,Sfo,Pfo,u_,qZ,$fo,Ifo,dP,jfo,Nfo,Dfo,b_,OZ,qfo,Ofo,cP,Gfo,Xfo,Vfo,v_,GZ,zfo,Wfo,fP,Qfo,Hfo,Ufo,T_,XZ,Jfo,Yfo,mP,Kfo,Zfo,emo,F_,VZ,omo,rmo,gP,tmo,amo,nmo,C_,smo,zZ,lmo,imo,WZ,dmo,cmo,QZ,fmo,mmo,Oy,Zxe,ed,M_,HZ,Gy,gmo,UZ,hmo,eke,Yo,Xy,pmo,od,_mo,JZ,umo,bmo,YZ,vmo,Tmo,Fmo,Vy,Cmo,KZ,Mmo,Emo,ymo,zr,zy,wmo,ZZ,Amo,Lmo,rd,Bmo,eee,xmo,kmo,oee,Rmo,Smo,Pmo,ree,$mo,Imo,Wy,jmo,De,Qy,Nmo,tee,Dmo,qmo,za,Omo,aee,Gmo,Xmo,nee,Vmo,zmo,see,Wmo,Qmo,Hmo,k,E_,lee,Umo,Jmo,hP,Ymo,Kmo,Zmo,y_,iee,ego,ogo,pP,rgo,tgo,ago,w_,dee,ngo,sgo,_P,lgo,igo,dgo,A_,cee,cgo,fgo,uP,mgo,ggo,hgo,L_,fee,pgo,_go,bP,ugo,bgo,vgo,B_,mee,Tgo,Fgo,vP,Cgo,Mgo,Ego,x_,gee,ygo,wgo,TP,Ago,Lgo,Bgo,k_,hee,xgo,kgo,FP,Rgo,Sgo,Pgo,R_,pee,$go,Igo,CP,jgo,Ngo,Dgo,S_,_ee,qgo,Ogo,MP,Ggo,Xgo,Vgo,P_,uee,zgo,Wgo,EP,Qgo,Hgo,Ugo,$_,bee,Jgo,Ygo,yP,Kgo,Zgo,eho,I_,vee,oho,rho,wP,tho,aho,nho,j_,Tee,sho,lho,AP,iho,dho,cho,N_,Fee,fho,mho,LP,gho,hho,pho,D_,Cee,_ho,uho,BP,bho,vho,Tho,q_,Mee,Fho,Cho,xP,Mho,Eho,yho,O_,Eee,who,Aho,kP,Lho,Bho,xho,G_,yee,kho,Rho,RP,Sho,Pho,$ho,X_,wee,Iho,jho,SP,Nho,Dho,qho,V_,Aee,Oho,Gho,PP,Xho,Vho,zho,z_,Lee,Who,Qho,$P,Hho,Uho,Jho,W_,Bee,Yho,Kho,IP,Zho,epo,opo,Q_,xee,rpo,tpo,jP,apo,npo,spo,H_,kee,lpo,ipo,NP,dpo,cpo,fpo,U_,Ree,mpo,gpo,DP,hpo,ppo,_po,J_,See,upo,bpo,qP,vpo,Tpo,Fpo,Y_,Pee,Cpo,Mpo,OP,Epo,ypo,wpo,K_,$ee,Apo,Lpo,GP,Bpo,xpo,kpo,Z_,Iee,Rpo,Spo,XP,Ppo,$po,Ipo,eu,jee,jpo,Npo,VP,Dpo,qpo,Opo,ou,Nee,Gpo,Xpo,zP,Vpo,zpo,Wpo,ru,Dee,Qpo,Hpo,WP,Upo,Jpo,Ypo,tu,qee,Kpo,Zpo,QP,e_o,o_o,r_o,au,Oee,t_o,a_o,HP,n_o,s_o,l_o,nu,Gee,i_o,d_o,UP,c_o,f_o,m_o,su,Xee,g_o,h_o,JP,p_o,__o,u_o,lu,Vee,b_o,v_o,YP,T_o,F_o,C_o,iu,zee,M_o,E_o,KP,y_o,w_o,A_o,du,L_o,Wee,B_o,x_o,Qee,k_o,R_o,Hee,S_o,P_o,Hy,oke,td,cu,Uee,Uy,$_o,Jee,I_o,rke,Ko,Jy,j_o,ad,N_o,Yee,D_o,q_o,Kee,O_o,G_o,X_o,Yy,V_o,Zee,z_o,W_o,Q_o,Wr,Ky,H_o,eoe,U_o,J_o,nd,Y_o,ooe,K_o,Z_o,roe,euo,ouo,ruo,toe,tuo,auo,Zy,nuo,qe,ew,suo,aoe,luo,iuo,Wa,duo,noe,cuo,fuo,soe,muo,guo,loe,huo,puo,_uo,$,fu,ioe,uuo,buo,ZP,vuo,Tuo,Fuo,mu,doe,Cuo,Muo,e$,Euo,yuo,wuo,gu,coe,Auo,Luo,o$,Buo,xuo,kuo,hu,foe,Ruo,Suo,r$,Puo,$uo,Iuo,pu,moe,juo,Nuo,t$,Duo,quo,Ouo,_u,goe,Guo,Xuo,a$,Vuo,zuo,Wuo,uu,hoe,Quo,Huo,n$,Uuo,Juo,Yuo,bu,poe,Kuo,Zuo,s$,ebo,obo,rbo,vu,_oe,tbo,abo,l$,nbo,sbo,lbo,Tu,uoe,ibo,dbo,i$,cbo,fbo,mbo,Fu,boe,gbo,hbo,d$,pbo,_bo,ubo,Cu,voe,bbo,vbo,c$,Tbo,Fbo,Cbo,Mu,Toe,Mbo,Ebo,f$,ybo,wbo,Abo,Eu,Foe,Lbo,Bbo,m$,xbo,kbo,Rbo,yu,Coe,Sbo,Pbo,g$,$bo,Ibo,jbo,wu,Moe,Nbo,Dbo,h$,qbo,Obo,Gbo,Au,Eoe,Xbo,Vbo,p$,zbo,Wbo,Qbo,Lu,yoe,Hbo,Ubo,_$,Jbo,Ybo,Kbo,Bu,woe,Zbo,e3o,u$,o3o,r3o,t3o,xu,Aoe,a3o,n3o,b$,s3o,l3o,i3o,ku,Loe,d3o,c3o,v$,f3o,m3o,g3o,Ru,Boe,h3o,p3o,T$,_3o,u3o,b3o,Su,xoe,v3o,T3o,F$,F3o,C3o,M3o,Pu,koe,E3o,y3o,C$,w3o,A3o,L3o,$u,Roe,B3o,x3o,M$,k3o,R3o,S3o,Iu,Soe,P3o,$3o,E$,I3o,j3o,N3o,ju,Poe,D3o,q3o,y$,O3o,G3o,X3o,Nu,$oe,V3o,z3o,w$,W3o,Q3o,H3o,Du,Ioe,U3o,J3o,A$,Y3o,K3o,Z3o,qu,joe,e2o,o2o,L$,r2o,t2o,a2o,Ou,Noe,n2o,s2o,B$,l2o,i2o,d2o,Gu,Doe,c2o,f2o,x$,m2o,g2o,h2o,Xu,qoe,p2o,_2o,k$,u2o,b2o,v2o,Vu,Ooe,T2o,F2o,R$,C2o,M2o,E2o,zu,Goe,y2o,w2o,S$,A2o,L2o,B2o,Wu,x2o,Xoe,k2o,R2o,Voe,S2o,P2o,zoe,$2o,I2o,ow,tke,sd,Qu,Woe,rw,j2o,Qoe,N2o,ake,Zo,tw,D2o,ld,q2o,Hoe,O2o,G2o,Uoe,X2o,V2o,z2o,aw,W2o,Joe,Q2o,H2o,U2o,Qr,nw,J2o,Yoe,Y2o,K2o,id,Z2o,Koe,evo,ovo,Zoe,rvo,tvo,avo,ere,nvo,svo,sw,lvo,Oe,lw,ivo,ore,dvo,cvo,Qa,fvo,rre,mvo,gvo,tre,hvo,pvo,are,_vo,uvo,bvo,I,Hu,nre,vvo,Tvo,P$,Fvo,Cvo,Mvo,Uu,sre,Evo,yvo,$$,wvo,Avo,Lvo,Ju,lre,Bvo,xvo,I$,kvo,Rvo,Svo,Yu,ire,Pvo,$vo,j$,Ivo,jvo,Nvo,Ku,dre,Dvo,qvo,N$,Ovo,Gvo,Xvo,Zu,cre,Vvo,zvo,D$,Wvo,Qvo,Hvo,eb,fre,Uvo,Jvo,q$,Yvo,Kvo,Zvo,ob,mre,eTo,oTo,O$,rTo,tTo,aTo,rb,gre,nTo,sTo,G$,lTo,iTo,dTo,tb,hre,cTo,fTo,X$,mTo,gTo,hTo,ab,pre,pTo,_To,V$,uTo,bTo,vTo,nb,_re,TTo,FTo,z$,CTo,MTo,ETo,sb,ure,yTo,wTo,W$,ATo,LTo,BTo,lb,bre,xTo,kTo,Q$,RTo,STo,PTo,ib,vre,$To,ITo,H$,jTo,NTo,DTo,db,Tre,qTo,OTo,U$,GTo,XTo,VTo,cb,Fre,zTo,WTo,J$,QTo,HTo,UTo,fb,Cre,JTo,YTo,Y$,KTo,ZTo,e1o,mb,Mre,o1o,r1o,K$,t1o,a1o,n1o,gb,Ere,s1o,l1o,Z$,i1o,d1o,c1o,hb,yre,f1o,m1o,eI,g1o,h1o,p1o,pb,wre,_1o,u1o,oI,b1o,v1o,T1o,_b,Are,F1o,C1o,rI,M1o,E1o,y1o,ub,Lre,w1o,A1o,tI,L1o,B1o,x1o,bb,Bre,k1o,R1o,aI,S1o,P1o,$1o,vb,xre,I1o,j1o,nI,N1o,D1o,q1o,Tb,kre,O1o,G1o,sI,X1o,V1o,z1o,Fb,Rre,W1o,Q1o,lI,H1o,U1o,J1o,Cb,Sre,Y1o,K1o,iI,Z1o,eFo,oFo,Mb,Pre,rFo,tFo,dI,aFo,nFo,sFo,Eb,$re,lFo,iFo,Ire,dFo,cFo,fFo,yb,jre,mFo,gFo,cI,hFo,pFo,_Fo,wb,Nre,uFo,bFo,fI,vFo,TFo,FFo,Ab,Dre,CFo,MFo,mI,EFo,yFo,wFo,Lb,qre,AFo,LFo,gI,BFo,xFo,kFo,Bb,RFo,Ore,SFo,PFo,Gre,$Fo,IFo,Xre,jFo,NFo,iw,nke,dd,xb,Vre,dw,DFo,zre,qFo,ske,er,cw,OFo,cd,GFo,Wre,XFo,VFo,Qre,zFo,WFo,QFo,fw,HFo,Hre,UFo,JFo,YFo,Hr,mw,KFo,Ure,ZFo,eCo,fd,oCo,Jre,rCo,tCo,Yre,aCo,nCo,sCo,Kre,lCo,iCo,gw,dCo,Ge,hw,cCo,Zre,fCo,mCo,Ha,gCo,ete,hCo,pCo,ote,_Co,uCo,rte,bCo,vCo,TCo,se,kb,tte,FCo,CCo,hI,MCo,ECo,yCo,Rb,ate,wCo,ACo,pI,LCo,BCo,xCo,Sb,nte,kCo,RCo,_I,SCo,PCo,$Co,Pb,ste,ICo,jCo,uI,NCo,DCo,qCo,$b,lte,OCo,GCo,bI,XCo,VCo,zCo,Ib,ite,WCo,QCo,vI,HCo,UCo,JCo,jb,dte,YCo,KCo,TI,ZCo,eMo,oMo,Nb,cte,rMo,tMo,FI,aMo,nMo,sMo,Db,fte,lMo,iMo,CI,dMo,cMo,fMo,qb,mte,mMo,gMo,MI,hMo,pMo,_Mo,Ob,gte,uMo,bMo,EI,vMo,TMo,FMo,Gb,hte,CMo,MMo,yI,EMo,yMo,wMo,Xb,pte,AMo,LMo,wI,BMo,xMo,kMo,Vb,_te,RMo,SMo,AI,PMo,$Mo,IMo,zb,ute,jMo,NMo,LI,DMo,qMo,OMo,Wb,bte,GMo,XMo,BI,VMo,zMo,WMo,Qb,QMo,vte,HMo,UMo,Tte,JMo,YMo,Fte,KMo,ZMo,pw,lke,md,Hb,Cte,_w,e4o,Mte,o4o,ike,or,uw,r4o,gd,t4o,Ete,a4o,n4o,yte,s4o,l4o,i4o,bw,d4o,wte,c4o,f4o,m4o,Ur,vw,g4o,Ate,h4o,p4o,hd,_4o,Lte,u4o,b4o,Bte,v4o,T4o,F4o,xte,C4o,M4o,Tw,E4o,Xe,Fw,y4o,kte,w4o,A4o,Ua,L4o,Rte,B4o,x4o,Ste,k4o,R4o,Pte,S4o,P4o,$4o,A,Ub,$te,I4o,j4o,xI,N4o,D4o,q4o,Jb,Ite,O4o,G4o,kI,X4o,V4o,z4o,Yb,jte,W4o,Q4o,RI,H4o,U4o,J4o,Kb,Nte,Y4o,K4o,SI,Z4o,eEo,oEo,Zb,Dte,rEo,tEo,PI,aEo,nEo,sEo,e3,qte,lEo,iEo,$I,dEo,cEo,fEo,o3,Ote,mEo,gEo,II,hEo,pEo,_Eo,r3,Gte,uEo,bEo,jI,vEo,TEo,FEo,t3,Xte,CEo,MEo,NI,EEo,yEo,wEo,a3,Vte,AEo,LEo,DI,BEo,xEo,kEo,n3,zte,REo,SEo,qI,PEo,$Eo,IEo,s3,Wte,jEo,NEo,OI,DEo,qEo,OEo,l3,Qte,GEo,XEo,GI,VEo,zEo,WEo,i3,Hte,QEo,HEo,XI,UEo,JEo,YEo,d3,Ute,KEo,ZEo,VI,e5o,o5o,r5o,c3,Jte,t5o,a5o,zI,n5o,s5o,l5o,f3,Yte,i5o,d5o,WI,c5o,f5o,m5o,m3,Kte,g5o,h5o,QI,p5o,_5o,u5o,g3,Zte,b5o,v5o,HI,T5o,F5o,C5o,h3,eae,M5o,E5o,UI,y5o,w5o,A5o,p3,oae,L5o,B5o,JI,x5o,k5o,R5o,_3,rae,S5o,P5o,YI,$5o,I5o,j5o,u3,tae,N5o,D5o,KI,q5o,O5o,G5o,b3,aae,X5o,V5o,ZI,z5o,W5o,Q5o,v3,nae,H5o,U5o,ej,J5o,Y5o,K5o,T3,sae,Z5o,eyo,oj,oyo,ryo,tyo,F3,lae,ayo,nyo,rj,syo,lyo,iyo,C3,iae,dyo,cyo,tj,fyo,myo,gyo,M3,dae,hyo,pyo,aj,_yo,uyo,byo,E3,cae,vyo,Tyo,nj,Fyo,Cyo,Myo,y3,fae,Eyo,yyo,sj,wyo,Ayo,Lyo,w3,mae,Byo,xyo,lj,kyo,Ryo,Syo,A3,gae,Pyo,$yo,ij,Iyo,jyo,Nyo,L3,hae,Dyo,qyo,dj,Oyo,Gyo,Xyo,B3,pae,Vyo,zyo,cj,Wyo,Qyo,Hyo,x3,_ae,Uyo,Jyo,fj,Yyo,Kyo,Zyo,k3,uae,ewo,owo,mj,rwo,two,awo,R3,bae,nwo,swo,gj,lwo,iwo,dwo,S3,vae,cwo,fwo,hj,mwo,gwo,hwo,P3,Tae,pwo,_wo,pj,uwo,bwo,vwo,$3,Fae,Two,Fwo,_j,Cwo,Mwo,Ewo,I3,Cae,ywo,wwo,uj,Awo,Lwo,Bwo,j3,Mae,xwo,kwo,bj,Rwo,Swo,Pwo,N3,Eae,$wo,Iwo,vj,jwo,Nwo,Dwo,D3,yae,qwo,Owo,Tj,Gwo,Xwo,Vwo,q3,wae,zwo,Wwo,Fj,Qwo,Hwo,Uwo,O3,Jwo,Aae,Ywo,Kwo,Lae,Zwo,e6o,Bae,o6o,r6o,Cw,dke,pd,G3,xae,Mw,t6o,kae,a6o,cke,rr,Ew,n6o,_d,s6o,Rae,l6o,i6o,Sae,d6o,c6o,f6o,yw,m6o,Pae,g6o,h6o,p6o,Jr,ww,_6o,$ae,u6o,b6o,ud,v6o,Iae,T6o,F6o,jae,C6o,M6o,E6o,Nae,y6o,w6o,Aw,A6o,Ve,Lw,L6o,Dae,B6o,x6o,Ja,k6o,qae,R6o,S6o,Oae,P6o,$6o,Gae,I6o,j6o,N6o,O,X3,Xae,D6o,q6o,Cj,O6o,G6o,X6o,V3,Vae,V6o,z6o,Mj,W6o,Q6o,H6o,z3,zae,U6o,J6o,Ej,Y6o,K6o,Z6o,W3,Wae,eAo,oAo,yj,rAo,tAo,aAo,Q3,Qae,nAo,sAo,wj,lAo,iAo,dAo,H3,Hae,cAo,fAo,Aj,mAo,gAo,hAo,U3,Uae,pAo,_Ao,Lj,uAo,bAo,vAo,J3,Jae,TAo,FAo,Bj,CAo,MAo,EAo,Y3,Yae,yAo,wAo,xj,AAo,LAo,BAo,K3,Kae,xAo,kAo,kj,RAo,SAo,PAo,Z3,Zae,$Ao,IAo,Rj,jAo,NAo,DAo,e2,ene,qAo,OAo,Sj,GAo,XAo,VAo,o2,one,zAo,WAo,Pj,QAo,HAo,UAo,r2,rne,JAo,YAo,$j,KAo,ZAo,e0o,t2,tne,o0o,r0o,Ij,t0o,a0o,n0o,a2,ane,s0o,l0o,jj,i0o,d0o,c0o,n2,nne,f0o,m0o,Nj,g0o,h0o,p0o,s2,sne,_0o,u0o,Dj,b0o,v0o,T0o,l2,lne,F0o,C0o,qj,M0o,E0o,y0o,i2,ine,w0o,A0o,Oj,L0o,B0o,x0o,d2,dne,k0o,R0o,Gj,S0o,P0o,$0o,c2,cne,I0o,j0o,Xj,N0o,D0o,q0o,f2,fne,O0o,G0o,Vj,X0o,V0o,z0o,m2,mne,W0o,Q0o,zj,H0o,U0o,J0o,g2,gne,Y0o,K0o,Wj,Z0o,eLo,oLo,h2,hne,rLo,tLo,Qj,aLo,nLo,sLo,p2,pne,lLo,iLo,Hj,dLo,cLo,fLo,_2,_ne,mLo,gLo,Uj,hLo,pLo,_Lo,u2,uLo,une,bLo,vLo,bne,TLo,FLo,vne,CLo,MLo,Bw,fke,bd,b2,Tne,xw,ELo,Fne,yLo,mke,tr,kw,wLo,vd,ALo,Cne,LLo,BLo,Mne,xLo,kLo,RLo,Rw,SLo,Ene,PLo,$Lo,ILo,Yr,Sw,jLo,yne,NLo,DLo,Td,qLo,wne,OLo,GLo,Ane,XLo,VLo,zLo,Lne,WLo,QLo,Pw,HLo,ze,$w,ULo,Bne,JLo,YLo,Ya,KLo,xne,ZLo,e7o,kne,o7o,r7o,Rne,t7o,a7o,n7o,da,v2,Sne,s7o,l7o,Jj,i7o,d7o,c7o,T2,Pne,f7o,m7o,Yj,g7o,h7o,p7o,F2,$ne,_7o,u7o,Kj,b7o,v7o,T7o,C2,Ine,F7o,C7o,Zj,M7o,E7o,y7o,M2,jne,w7o,A7o,eN,L7o,B7o,x7o,E2,k7o,Nne,R7o,S7o,Dne,P7o,$7o,qne,I7o,j7o,Iw,gke,Fd,y2,One,jw,N7o,Gne,D7o,hke,ar,Nw,q7o,Cd,O7o,Xne,G7o,X7o,Vne,V7o,z7o,W7o,Dw,Q7o,zne,H7o,U7o,J7o,Kr,qw,Y7o,Wne,K7o,Z7o,Md,e8o,Qne,o8o,r8o,Hne,t8o,a8o,n8o,Une,s8o,l8o,Ow,i8o,We,Gw,d8o,Jne,c8o,f8o,Ka,m8o,Yne,g8o,h8o,Kne,p8o,_8o,Zne,u8o,b8o,v8o,D,w2,ese,T8o,F8o,oN,C8o,M8o,E8o,A2,ose,y8o,w8o,rN,A8o,L8o,B8o,L2,rse,x8o,k8o,tN,R8o,S8o,P8o,B2,tse,$8o,I8o,aN,j8o,N8o,D8o,x2,ase,q8o,O8o,nN,G8o,X8o,V8o,k2,nse,z8o,W8o,sN,Q8o,H8o,U8o,R2,sse,J8o,Y8o,lN,K8o,Z8o,e9o,S2,lse,o9o,r9o,iN,t9o,a9o,n9o,P2,ise,s9o,l9o,dN,i9o,d9o,c9o,$2,dse,f9o,m9o,cN,g9o,h9o,p9o,I2,cse,_9o,u9o,fN,b9o,v9o,T9o,j2,fse,F9o,C9o,mN,M9o,E9o,y9o,N2,mse,w9o,A9o,gN,L9o,B9o,x9o,D2,gse,k9o,R9o,hN,S9o,P9o,$9o,q2,hse,I9o,j9o,pN,N9o,D9o,q9o,O2,pse,O9o,G9o,_N,X9o,V9o,z9o,G2,_se,W9o,Q9o,uN,H9o,U9o,J9o,X2,use,Y9o,K9o,bN,Z9o,eBo,oBo,V2,bse,rBo,tBo,vN,aBo,nBo,sBo,z2,vse,lBo,iBo,TN,dBo,cBo,fBo,W2,Tse,mBo,gBo,FN,hBo,pBo,_Bo,Q2,Fse,uBo,bBo,CN,vBo,TBo,FBo,H2,Cse,CBo,MBo,MN,EBo,yBo,wBo,U2,Mse,ABo,LBo,EN,BBo,xBo,kBo,J2,Ese,RBo,SBo,yN,PBo,$Bo,IBo,Y2,yse,jBo,NBo,wN,DBo,qBo,OBo,K2,wse,GBo,XBo,AN,VBo,zBo,WBo,Z2,Ase,QBo,HBo,LN,UBo,JBo,YBo,ev,Lse,KBo,ZBo,BN,exo,oxo,rxo,ov,Bse,txo,axo,xN,nxo,sxo,lxo,rv,xse,ixo,dxo,kN,cxo,fxo,mxo,tv,kse,gxo,hxo,RN,pxo,_xo,uxo,av,Rse,bxo,vxo,SN,Txo,Fxo,Cxo,nv,Mxo,Sse,Exo,yxo,Pse,wxo,Axo,$se,Lxo,Bxo,Xw,pke,Ed,sv,Ise,Vw,xxo,jse,kxo,_ke,nr,zw,Rxo,yd,Sxo,Nse,Pxo,$xo,Dse,Ixo,jxo,Nxo,Ww,Dxo,qse,qxo,Oxo,Gxo,Zr,Qw,Xxo,Ose,Vxo,zxo,wd,Wxo,Gse,Qxo,Hxo,Xse,Uxo,Jxo,Yxo,Vse,Kxo,Zxo,Hw,eko,Qe,Uw,oko,zse,rko,tko,Za,ako,Wse,nko,sko,Qse,lko,iko,Hse,dko,cko,fko,R,lv,Use,mko,gko,PN,hko,pko,_ko,iv,Jse,uko,bko,$N,vko,Tko,Fko,dv,Yse,Cko,Mko,IN,Eko,yko,wko,cv,Kse,Ako,Lko,jN,Bko,xko,kko,fv,Zse,Rko,Sko,NN,Pko,$ko,Iko,mv,ele,jko,Nko,DN,Dko,qko,Oko,gv,ole,Gko,Xko,qN,Vko,zko,Wko,hv,rle,Qko,Hko,ON,Uko,Jko,Yko,pv,tle,Kko,Zko,GN,eRo,oRo,rRo,_v,ale,tRo,aRo,XN,nRo,sRo,lRo,uv,nle,iRo,dRo,VN,cRo,fRo,mRo,bv,sle,gRo,hRo,zN,pRo,_Ro,uRo,vv,lle,bRo,vRo,WN,TRo,FRo,CRo,Tv,ile,MRo,ERo,QN,yRo,wRo,ARo,Fv,dle,LRo,BRo,HN,xRo,kRo,RRo,Cv,cle,SRo,PRo,UN,$Ro,IRo,jRo,Mv,fle,NRo,DRo,JN,qRo,ORo,GRo,Ev,mle,XRo,VRo,YN,zRo,WRo,QRo,yv,gle,HRo,URo,KN,JRo,YRo,KRo,wv,hle,ZRo,eSo,ZN,oSo,rSo,tSo,Av,ple,aSo,nSo,eD,sSo,lSo,iSo,Lv,_le,dSo,cSo,oD,fSo,mSo,gSo,Bv,ule,hSo,pSo,rD,_So,uSo,bSo,xv,ble,vSo,TSo,tD,FSo,CSo,MSo,kv,vle,ESo,ySo,aD,wSo,ASo,LSo,Rv,Tle,BSo,xSo,nD,kSo,RSo,SSo,Sv,Fle,PSo,$So,sD,ISo,jSo,NSo,Pv,Cle,DSo,qSo,lD,OSo,GSo,XSo,$v,Mle,VSo,zSo,iD,WSo,QSo,HSo,Iv,Ele,USo,JSo,dD,YSo,KSo,ZSo,jv,yle,ePo,oPo,cD,rPo,tPo,aPo,Nv,wle,nPo,sPo,fD,lPo,iPo,dPo,Dv,Ale,cPo,fPo,mD,mPo,gPo,hPo,qv,Lle,pPo,_Po,gD,uPo,bPo,vPo,Ov,Ble,TPo,FPo,hD,CPo,MPo,EPo,Gv,xle,yPo,wPo,pD,APo,LPo,BPo,Xv,kle,xPo,kPo,_D,RPo,SPo,PPo,Vv,Rle,$Po,IPo,uD,jPo,NPo,DPo,zv,Sle,qPo,OPo,bD,GPo,XPo,VPo,Wv,zPo,Ple,WPo,QPo,$le,HPo,UPo,Ile,JPo,YPo,Jw,uke,Ad,Qv,jle,Yw,KPo,Nle,ZPo,bke,sr,Kw,e$o,Ld,o$o,Dle,r$o,t$o,qle,a$o,n$o,s$o,Zw,l$o,Ole,i$o,d$o,c$o,et,e6,f$o,Gle,m$o,g$o,Bd,h$o,Xle,p$o,_$o,Vle,u$o,b$o,v$o,zle,T$o,F$o,o6,C$o,He,r6,M$o,Wle,E$o,y$o,en,w$o,Qle,A$o,L$o,Hle,B$o,x$o,Ule,k$o,R$o,S$o,Jle,Hv,Yle,P$o,$$o,vD,I$o,j$o,N$o,Uv,D$o,Kle,q$o,O$o,Zle,G$o,X$o,eie,V$o,z$o,t6,vke,xd,Jv,oie,a6,W$o,rie,Q$o,Tke,lr,n6,H$o,kd,U$o,tie,J$o,Y$o,aie,K$o,Z$o,eIo,s6,oIo,nie,rIo,tIo,aIo,ot,l6,nIo,sie,sIo,lIo,Rd,iIo,lie,dIo,cIo,iie,fIo,mIo,gIo,die,hIo,pIo,i6,_Io,Ue,d6,uIo,cie,bIo,vIo,on,TIo,fie,FIo,CIo,mie,MIo,EIo,gie,yIo,wIo,AIo,me,Yv,hie,LIo,BIo,TD,xIo,kIo,RIo,Kv,pie,SIo,PIo,FD,$Io,IIo,jIo,qs,_ie,NIo,DIo,CD,qIo,OIo,MD,GIo,XIo,VIo,Zv,uie,zIo,WIo,ED,QIo,HIo,UIo,ma,bie,JIo,YIo,yD,KIo,ZIo,wD,ejo,ojo,AD,rjo,tjo,ajo,eT,vie,njo,sjo,LD,ljo,ijo,djo,oT,Tie,cjo,fjo,BD,mjo,gjo,hjo,rT,Fie,pjo,_jo,xD,ujo,bjo,vjo,tT,Cie,Tjo,Fjo,kD,Cjo,Mjo,Ejo,aT,Mie,yjo,wjo,RD,Ajo,Ljo,Bjo,nT,Eie,xjo,kjo,SD,Rjo,Sjo,Pjo,sT,$jo,yie,Ijo,jjo,wie,Njo,Djo,Aie,qjo,Ojo,c6,Fke,Sd,lT,Lie,f6,Gjo,Bie,Xjo,Cke,ir,m6,Vjo,Pd,zjo,xie,Wjo,Qjo,kie,Hjo,Ujo,Jjo,g6,Yjo,Rie,Kjo,Zjo,eNo,rt,h6,oNo,Sie,rNo,tNo,$d,aNo,Pie,nNo,sNo,$ie,lNo,iNo,dNo,Iie,cNo,fNo,p6,mNo,Je,_6,gNo,jie,hNo,pNo,rn,_No,Nie,uNo,bNo,Die,vNo,TNo,qie,FNo,CNo,MNo,Oie,iT,Gie,ENo,yNo,PD,wNo,ANo,LNo,dT,BNo,Xie,xNo,kNo,Vie,RNo,SNo,zie,PNo,$No,u6,Mke,Id,cT,Wie,b6,INo,Qie,jNo,Eke,dr,v6,NNo,jd,DNo,Hie,qNo,ONo,Uie,GNo,XNo,VNo,T6,zNo,Jie,WNo,QNo,HNo,tt,F6,UNo,Yie,JNo,YNo,Nd,KNo,Kie,ZNo,eDo,Zie,oDo,rDo,tDo,ede,aDo,nDo,C6,sDo,Ye,M6,lDo,ode,iDo,dDo,tn,cDo,rde,fDo,mDo,tde,gDo,hDo,ade,pDo,_Do,uDo,ke,fT,nde,bDo,vDo,$D,TDo,FDo,CDo,mT,sde,MDo,EDo,ID,yDo,wDo,ADo,gT,lde,LDo,BDo,jD,xDo,kDo,RDo,hT,ide,SDo,PDo,ND,$Do,IDo,jDo,pT,dde,NDo,DDo,DD,qDo,ODo,GDo,_T,cde,XDo,VDo,qD,zDo,WDo,QDo,uT,fde,HDo,UDo,OD,JDo,YDo,KDo,bT,mde,ZDo,eqo,GD,oqo,rqo,tqo,vT,aqo,gde,nqo,sqo,hde,lqo,iqo,pde,dqo,cqo,E6,yke,Dd,TT,_de,y6,fqo,ude,mqo,wke,cr,w6,gqo,qd,hqo,bde,pqo,_qo,vde,uqo,bqo,vqo,A6,Tqo,Tde,Fqo,Cqo,Mqo,at,L6,Eqo,Fde,yqo,wqo,Od,Aqo,Cde,Lqo,Bqo,Mde,xqo,kqo,Rqo,Ede,Sqo,Pqo,B6,$qo,Ke,x6,Iqo,yde,jqo,Nqo,an,Dqo,wde,qqo,Oqo,Ade,Gqo,Xqo,Lde,Vqo,zqo,Wqo,nn,FT,Bde,Qqo,Hqo,XD,Uqo,Jqo,Yqo,CT,xde,Kqo,Zqo,VD,eOo,oOo,rOo,MT,kde,tOo,aOo,zD,nOo,sOo,lOo,ET,Rde,iOo,dOo,WD,cOo,fOo,mOo,yT,gOo,Sde,hOo,pOo,Pde,_Oo,uOo,$de,bOo,vOo,k6,Ake,Gd,wT,Ide,R6,TOo,jde,FOo,Lke,fr,S6,COo,Xd,MOo,Nde,EOo,yOo,Dde,wOo,AOo,LOo,P6,BOo,qde,xOo,kOo,ROo,nt,$6,SOo,Ode,POo,$Oo,Vd,IOo,Gde,jOo,NOo,Xde,DOo,qOo,OOo,Vde,GOo,XOo,I6,VOo,Ze,j6,zOo,zde,WOo,QOo,sn,HOo,Wde,UOo,JOo,Qde,YOo,KOo,Hde,ZOo,eGo,oGo,Re,AT,Ude,rGo,tGo,QD,aGo,nGo,sGo,LT,Jde,lGo,iGo,HD,dGo,cGo,fGo,BT,Yde,mGo,gGo,UD,hGo,pGo,_Go,xT,Kde,uGo,bGo,JD,vGo,TGo,FGo,kT,Zde,CGo,MGo,YD,EGo,yGo,wGo,RT,ece,AGo,LGo,KD,BGo,xGo,kGo,ST,oce,RGo,SGo,ZD,PGo,$Go,IGo,PT,rce,jGo,NGo,eq,DGo,qGo,OGo,$T,GGo,tce,XGo,VGo,ace,zGo,WGo,nce,QGo,HGo,N6,Bke,zd,IT,sce,D6,UGo,lce,JGo,xke,mr,q6,YGo,Wd,KGo,ice,ZGo,eXo,dce,oXo,rXo,tXo,O6,aXo,cce,nXo,sXo,lXo,st,G6,iXo,fce,dXo,cXo,Qd,fXo,mce,mXo,gXo,gce,hXo,pXo,_Xo,hce,uXo,bXo,X6,vXo,eo,V6,TXo,pce,FXo,CXo,ln,MXo,_ce,EXo,yXo,uce,wXo,AXo,bce,LXo,BXo,xXo,z6,jT,vce,kXo,RXo,oq,SXo,PXo,$Xo,NT,Tce,IXo,jXo,rq,NXo,DXo,qXo,DT,OXo,Fce,GXo,XXo,Cce,VXo,zXo,Mce,WXo,QXo,W6,kke,Hd,qT,Ece,Q6,HXo,yce,UXo,Rke,gr,H6,JXo,Ud,YXo,wce,KXo,ZXo,Ace,eVo,oVo,rVo,U6,tVo,Lce,aVo,nVo,sVo,lt,J6,lVo,Bce,iVo,dVo,Jd,cVo,xce,fVo,mVo,kce,gVo,hVo,pVo,Rce,_Vo,uVo,Y6,bVo,oo,K6,vVo,Sce,TVo,FVo,dn,CVo,Pce,MVo,EVo,$ce,yVo,wVo,Ice,AVo,LVo,BVo,cn,OT,jce,xVo,kVo,tq,RVo,SVo,PVo,GT,Nce,$Vo,IVo,aq,jVo,NVo,DVo,XT,Dce,qVo,OVo,nq,GVo,XVo,VVo,VT,qce,zVo,WVo,sq,QVo,HVo,UVo,zT,JVo,Oce,YVo,KVo,Gce,ZVo,ezo,Xce,ozo,rzo,Z6,Ske,Yd,WT,Vce,eA,tzo,zce,azo,Pke,hr,oA,nzo,Kd,szo,Wce,lzo,izo,Qce,dzo,czo,fzo,rA,mzo,Hce,gzo,hzo,pzo,it,tA,_zo,Uce,uzo,bzo,Zd,vzo,Jce,Tzo,Fzo,Yce,Czo,Mzo,Ezo,Kce,yzo,wzo,aA,Azo,ro,nA,Lzo,Zce,Bzo,xzo,fn,kzo,efe,Rzo,Szo,ofe,Pzo,$zo,rfe,Izo,jzo,Nzo,ec,QT,tfe,Dzo,qzo,lq,Ozo,Gzo,Xzo,HT,afe,Vzo,zzo,iq,Wzo,Qzo,Hzo,UT,nfe,Uzo,Jzo,dq,Yzo,Kzo,Zzo,JT,eWo,sfe,oWo,rWo,lfe,tWo,aWo,ife,nWo,sWo,sA,$ke,oc,YT,dfe,lA,lWo,cfe,iWo,Ike,pr,iA,dWo,rc,cWo,ffe,fWo,mWo,mfe,gWo,hWo,pWo,dA,_Wo,gfe,uWo,bWo,vWo,dt,cA,TWo,hfe,FWo,CWo,tc,MWo,pfe,EWo,yWo,_fe,wWo,AWo,LWo,ufe,BWo,xWo,fA,kWo,to,mA,RWo,bfe,SWo,PWo,mn,$Wo,vfe,IWo,jWo,Tfe,NWo,DWo,Ffe,qWo,OWo,GWo,Cfe,KT,Mfe,XWo,VWo,cq,zWo,WWo,QWo,ZT,HWo,Efe,UWo,JWo,yfe,YWo,KWo,wfe,ZWo,eQo,gA,jke,ac,e1,Afe,hA,oQo,Lfe,rQo,Nke,_r,pA,tQo,nc,aQo,Bfe,nQo,sQo,xfe,lQo,iQo,dQo,_A,cQo,kfe,fQo,mQo,gQo,ct,uA,hQo,Rfe,pQo,_Qo,sc,uQo,Sfe,bQo,vQo,Pfe,TQo,FQo,CQo,$fe,MQo,EQo,bA,yQo,ao,vA,wQo,Ife,AQo,LQo,gn,BQo,jfe,xQo,kQo,Nfe,RQo,SQo,Dfe,PQo,$Qo,IQo,qfe,o1,Ofe,jQo,NQo,fq,DQo,qQo,OQo,r1,GQo,Gfe,XQo,VQo,Xfe,zQo,WQo,Vfe,QQo,HQo,TA,Dke,lc,t1,zfe,FA,UQo,Wfe,JQo,qke,ur,CA,YQo,ic,KQo,Qfe,ZQo,eHo,Hfe,oHo,rHo,tHo,MA,aHo,Ufe,nHo,sHo,lHo,ft,EA,iHo,Jfe,dHo,cHo,dc,fHo,Yfe,mHo,gHo,Kfe,hHo,pHo,_Ho,Zfe,uHo,bHo,yA,vHo,no,wA,THo,eme,FHo,CHo,hn,MHo,ome,EHo,yHo,rme,wHo,AHo,tme,LHo,BHo,xHo,AA,a1,ame,kHo,RHo,mq,SHo,PHo,$Ho,n1,nme,IHo,jHo,gq,NHo,DHo,qHo,s1,OHo,sme,GHo,XHo,lme,VHo,zHo,ime,WHo,QHo,LA,Oke,cc,l1,dme,BA,HHo,cme,UHo,Gke,br,xA,JHo,fc,YHo,fme,KHo,ZHo,mme,eUo,oUo,rUo,kA,tUo,gme,aUo,nUo,sUo,mt,RA,lUo,hme,iUo,dUo,mc,cUo,pme,fUo,mUo,_me,gUo,hUo,pUo,ume,_Uo,uUo,SA,bUo,so,PA,vUo,bme,TUo,FUo,pn,CUo,vme,MUo,EUo,Tme,yUo,wUo,Fme,AUo,LUo,BUo,Cme,i1,Mme,xUo,kUo,hq,RUo,SUo,PUo,d1,$Uo,Eme,IUo,jUo,yme,NUo,DUo,wme,qUo,OUo,$A,Xke,gc,c1,Ame,IA,GUo,Lme,XUo,Vke,vr,jA,VUo,hc,zUo,Bme,WUo,QUo,xme,HUo,UUo,JUo,NA,YUo,kme,KUo,ZUo,eJo,gt,DA,oJo,Rme,rJo,tJo,pc,aJo,Sme,nJo,sJo,Pme,lJo,iJo,dJo,$me,cJo,fJo,qA,mJo,ho,OA,gJo,Ime,hJo,pJo,_n,_Jo,jme,uJo,bJo,Nme,vJo,TJo,Dme,FJo,CJo,MJo,B,f1,qme,EJo,yJo,pq,wJo,AJo,LJo,m1,Ome,BJo,xJo,_q,kJo,RJo,SJo,g1,Gme,PJo,$Jo,uq,IJo,jJo,NJo,h1,Xme,DJo,qJo,bq,OJo,GJo,XJo,p1,Vme,VJo,zJo,vq,WJo,QJo,HJo,_1,zme,UJo,JJo,Tq,YJo,KJo,ZJo,u1,Wme,eYo,oYo,Fq,rYo,tYo,aYo,b1,Qme,nYo,sYo,Cq,lYo,iYo,dYo,v1,Hme,cYo,fYo,Mq,mYo,gYo,hYo,T1,Ume,pYo,_Yo,Eq,uYo,bYo,vYo,F1,Jme,TYo,FYo,yq,CYo,MYo,EYo,C1,Yme,yYo,wYo,wq,AYo,LYo,BYo,M1,Kme,xYo,kYo,Aq,RYo,SYo,PYo,E1,Zme,$Yo,IYo,Lq,jYo,NYo,DYo,y1,ege,qYo,OYo,Bq,GYo,XYo,VYo,w1,oge,zYo,WYo,xq,QYo,HYo,UYo,Os,rge,JYo,YYo,kq,KYo,ZYo,Rq,eKo,oKo,rKo,A1,tge,tKo,aKo,Sq,nKo,sKo,lKo,L1,age,iKo,dKo,Pq,cKo,fKo,mKo,B1,nge,gKo,hKo,$q,pKo,_Ko,uKo,x1,sge,bKo,vKo,Iq,TKo,FKo,CKo,k1,lge,MKo,EKo,jq,yKo,wKo,AKo,R1,ige,LKo,BKo,Nq,xKo,kKo,RKo,S1,dge,SKo,PKo,Dq,$Ko,IKo,jKo,P1,cge,NKo,DKo,qq,qKo,OKo,GKo,$1,fge,XKo,VKo,Oq,zKo,WKo,QKo,I1,mge,HKo,UKo,Gq,JKo,YKo,KKo,j1,gge,ZKo,eZo,Xq,oZo,rZo,tZo,N1,hge,aZo,nZo,Vq,sZo,lZo,iZo,D1,pge,dZo,cZo,zq,fZo,mZo,gZo,q1,_ge,hZo,pZo,Wq,_Zo,uZo,bZo,O1,uge,vZo,TZo,Qq,FZo,CZo,MZo,G1,bge,EZo,yZo,Hq,wZo,AZo,LZo,X1,vge,BZo,xZo,Uq,kZo,RZo,SZo,V1,Tge,PZo,$Zo,Jq,IZo,jZo,NZo,z1,Fge,DZo,qZo,Yq,OZo,GZo,XZo,W1,Cge,VZo,zZo,Kq,WZo,QZo,HZo,Q1,Mge,UZo,JZo,Zq,YZo,KZo,ZZo,H1,Ege,eer,oer,eO,rer,ter,aer,U1,yge,ner,ser,oO,ler,ier,der,J1,wge,cer,fer,rO,mer,ger,her,Y1,Age,per,_er,tO,uer,ber,ver,Lge,Ter,Fer,GA,zke,_c,K1,Bge,XA,Cer,xge,Mer,Wke,Tr,VA,Eer,uc,yer,kge,wer,Aer,Rge,Ler,Ber,xer,zA,ker,Sge,Rer,Ser,Per,ht,WA,$er,Pge,Ier,jer,bc,Ner,$ge,Der,qer,Ige,Oer,Ger,Xer,jge,Ver,zer,QA,Wer,po,HA,Qer,Nge,Her,Uer,un,Jer,Dge,Yer,Ker,qge,Zer,eor,Oge,oor,ror,tor,H,Z1,Gge,aor,nor,aO,sor,lor,ior,eF,Xge,dor,cor,nO,mor,gor,hor,oF,Vge,por,_or,sO,uor,bor,vor,rF,zge,Tor,For,lO,Cor,Mor,Eor,tF,Wge,yor,wor,iO,Aor,Lor,Bor,aF,Qge,xor,kor,dO,Ror,Sor,Por,nF,Hge,$or,Ior,cO,jor,Nor,Dor,sF,Uge,qor,Oor,fO,Gor,Xor,Vor,lF,Jge,zor,Wor,mO,Qor,Hor,Uor,iF,Yge,Jor,Yor,gO,Kor,Zor,err,dF,Kge,orr,rrr,hO,trr,arr,nrr,cF,Zge,srr,lrr,pO,irr,drr,crr,fF,ehe,frr,mrr,_O,grr,hrr,prr,mF,ohe,_rr,urr,uO,brr,vrr,Trr,gF,rhe,Frr,Crr,bO,Mrr,Err,yrr,hF,the,wrr,Arr,vO,Lrr,Brr,xrr,pF,ahe,krr,Rrr,TO,Srr,Prr,$rr,_F,nhe,Irr,jrr,FO,Nrr,Drr,qrr,uF,she,Orr,Grr,CO,Xrr,Vrr,zrr,bF,lhe,Wrr,Qrr,MO,Hrr,Urr,Jrr,vF,ihe,Yrr,Krr,EO,Zrr,etr,otr,TF,dhe,rtr,ttr,yO,atr,ntr,str,che,ltr,itr,UA,Qke,vc,FF,fhe,JA,dtr,mhe,ctr,Hke,Fr,YA,ftr,Tc,mtr,ghe,gtr,htr,hhe,ptr,_tr,utr,KA,btr,phe,vtr,Ttr,Ftr,pt,ZA,Ctr,_he,Mtr,Etr,Fc,ytr,uhe,wtr,Atr,bhe,Ltr,Btr,xtr,vhe,ktr,Rtr,e0,Str,_o,o0,Ptr,The,$tr,Itr,bn,jtr,Fhe,Ntr,Dtr,Che,qtr,Otr,Mhe,Gtr,Xtr,Vtr,ge,CF,Ehe,ztr,Wtr,wO,Qtr,Htr,Utr,MF,yhe,Jtr,Ytr,AO,Ktr,Ztr,ear,EF,whe,oar,rar,LO,tar,aar,nar,yF,Ahe,sar,lar,BO,iar,dar,car,wF,Lhe,far,mar,xO,gar,har,par,AF,Bhe,_ar,uar,kO,bar,Tar,Far,LF,xhe,Car,Mar,RO,Ear,yar,war,BF,khe,Aar,Lar,SO,Bar,xar,kar,xF,Rhe,Rar,Sar,PO,Par,$ar,Iar,kF,She,jar,Nar,$O,Dar,qar,Oar,RF,Phe,Gar,Xar,IO,Var,zar,War,$he,Qar,Har,r0,Uke,Cc,SF,Ihe,t0,Uar,jhe,Jar,Jke,Cr,a0,Yar,Mc,Kar,Nhe,Zar,enr,Dhe,onr,rnr,tnr,n0,anr,qhe,nnr,snr,lnr,_t,s0,inr,Ohe,dnr,cnr,Ec,fnr,Ghe,mnr,gnr,Xhe,hnr,pnr,_nr,Vhe,unr,bnr,l0,vnr,uo,i0,Tnr,zhe,Fnr,Cnr,vn,Mnr,Whe,Enr,ynr,Qhe,wnr,Anr,Hhe,Lnr,Bnr,xnr,d0,PF,Uhe,knr,Rnr,jO,Snr,Pnr,$nr,$F,Jhe,Inr,jnr,NO,Nnr,Dnr,qnr,Yhe,Onr,Gnr,c0,Yke,yc,IF,Khe,f0,Xnr,Zhe,Vnr,Kke,Mr,m0,znr,wc,Wnr,epe,Qnr,Hnr,ope,Unr,Jnr,Ynr,g0,Knr,rpe,Znr,esr,osr,ut,h0,rsr,tpe,tsr,asr,Ac,nsr,ape,ssr,lsr,npe,isr,dsr,csr,spe,fsr,msr,p0,gsr,bo,_0,hsr,lpe,psr,_sr,Tn,usr,ipe,bsr,vsr,dpe,Tsr,Fsr,cpe,Csr,Msr,Esr,Y,jF,fpe,ysr,wsr,DO,Asr,Lsr,Bsr,NF,mpe,xsr,ksr,qO,Rsr,Ssr,Psr,DF,gpe,$sr,Isr,OO,jsr,Nsr,Dsr,qF,hpe,qsr,Osr,GO,Gsr,Xsr,Vsr,OF,ppe,zsr,Wsr,XO,Qsr,Hsr,Usr,GF,_pe,Jsr,Ysr,VO,Ksr,Zsr,elr,XF,upe,olr,rlr,zO,tlr,alr,nlr,VF,bpe,slr,llr,WO,ilr,dlr,clr,zF,vpe,flr,mlr,QO,glr,hlr,plr,WF,Tpe,_lr,ulr,HO,blr,vlr,Tlr,QF,Fpe,Flr,Clr,UO,Mlr,Elr,ylr,HF,Cpe,wlr,Alr,JO,Llr,Blr,xlr,UF,Mpe,klr,Rlr,YO,Slr,Plr,$lr,JF,Epe,Ilr,jlr,KO,Nlr,Dlr,qlr,YF,ype,Olr,Glr,ZO,Xlr,Vlr,zlr,KF,wpe,Wlr,Qlr,eG,Hlr,Ulr,Jlr,ZF,Ape,Ylr,Klr,oG,Zlr,eir,oir,eC,Lpe,rir,tir,rG,air,nir,sir,oC,Bpe,lir,iir,tG,dir,cir,fir,rC,xpe,mir,gir,aG,hir,pir,_ir,kpe,uir,bir,u0,Zke,Lc,tC,Rpe,b0,vir,Spe,Tir,eRe,Er,v0,Fir,Bc,Cir,Ppe,Mir,Eir,$pe,yir,wir,Air,T0,Lir,Ipe,Bir,xir,kir,bt,F0,Rir,jpe,Sir,Pir,xc,$ir,Npe,Iir,jir,Dpe,Nir,Dir,qir,qpe,Oir,Gir,C0,Xir,vo,M0,Vir,Ope,zir,Wir,Fn,Qir,Gpe,Hir,Uir,Xpe,Jir,Yir,Vpe,Kir,Zir,edr,ue,aC,zpe,odr,rdr,nG,tdr,adr,ndr,nC,Wpe,sdr,ldr,sG,idr,ddr,cdr,sC,Qpe,fdr,mdr,lG,gdr,hdr,pdr,lC,Hpe,_dr,udr,iG,bdr,vdr,Tdr,iC,Upe,Fdr,Cdr,dG,Mdr,Edr,ydr,dC,Jpe,wdr,Adr,cG,Ldr,Bdr,xdr,cC,Ype,kdr,Rdr,fG,Sdr,Pdr,$dr,fC,Kpe,Idr,jdr,mG,Ndr,Ddr,qdr,mC,Zpe,Odr,Gdr,gG,Xdr,Vdr,zdr,gC,e_e,Wdr,Qdr,hG,Hdr,Udr,Jdr,o_e,Ydr,Kdr,E0,oRe,kc,hC,r_e,y0,Zdr,t_e,ecr,rRe,yr,w0,ocr,Rc,rcr,a_e,tcr,acr,n_e,ncr,scr,lcr,A0,icr,s_e,dcr,ccr,fcr,vt,L0,mcr,l_e,gcr,hcr,Sc,pcr,i_e,_cr,ucr,d_e,bcr,vcr,Tcr,c_e,Fcr,Ccr,B0,Mcr,To,x0,Ecr,f_e,ycr,wcr,Cn,Acr,m_e,Lcr,Bcr,g_e,xcr,kcr,h_e,Rcr,Scr,Pcr,V,pC,p_e,$cr,Icr,pG,jcr,Ncr,Dcr,_C,__e,qcr,Ocr,_G,Gcr,Xcr,Vcr,uC,u_e,zcr,Wcr,uG,Qcr,Hcr,Ucr,bC,b_e,Jcr,Ycr,bG,Kcr,Zcr,efr,vC,v_e,ofr,rfr,vG,tfr,afr,nfr,TC,T_e,sfr,lfr,TG,ifr,dfr,cfr,FC,F_e,ffr,mfr,FG,gfr,hfr,pfr,CC,C_e,_fr,ufr,CG,bfr,vfr,Tfr,MC,M_e,Ffr,Cfr,MG,Mfr,Efr,yfr,EC,E_e,wfr,Afr,EG,Lfr,Bfr,xfr,yC,y_e,kfr,Rfr,yG,Sfr,Pfr,$fr,wC,w_e,Ifr,jfr,wG,Nfr,Dfr,qfr,AC,A_e,Ofr,Gfr,AG,Xfr,Vfr,zfr,LC,L_e,Wfr,Qfr,LG,Hfr,Ufr,Jfr,BC,B_e,Yfr,Kfr,BG,Zfr,emr,omr,xC,x_e,rmr,tmr,xG,amr,nmr,smr,kC,k_e,lmr,imr,kG,dmr,cmr,fmr,RC,R_e,mmr,gmr,RG,hmr,pmr,_mr,SC,S_e,umr,bmr,SG,vmr,Tmr,Fmr,PC,P_e,Cmr,Mmr,PG,Emr,ymr,wmr,$C,$_e,Amr,Lmr,$G,Bmr,xmr,kmr,IC,I_e,Rmr,Smr,IG,Pmr,$mr,Imr,jC,j_e,jmr,Nmr,jG,Dmr,qmr,Omr,NC,N_e,Gmr,Xmr,NG,Vmr,zmr,Wmr,DC,D_e,Qmr,Hmr,DG,Umr,Jmr,Ymr,q_e,Kmr,Zmr,k0,tRe,Pc,qC,O_e,R0,egr,G_e,ogr,aRe,wr,S0,rgr,$c,tgr,X_e,agr,ngr,V_e,sgr,lgr,igr,P0,dgr,z_e,cgr,fgr,mgr,Tt,$0,ggr,W_e,hgr,pgr,Ic,_gr,Q_e,ugr,bgr,H_e,vgr,Tgr,Fgr,U_e,Cgr,Mgr,I0,Egr,Fo,j0,ygr,J_e,wgr,Agr,Mn,Lgr,Y_e,Bgr,xgr,K_e,kgr,Rgr,Z_e,Sgr,Pgr,$gr,ae,OC,eue,Igr,jgr,qG,Ngr,Dgr,qgr,GC,oue,Ogr,Ggr,OG,Xgr,Vgr,zgr,XC,rue,Wgr,Qgr,GG,Hgr,Ugr,Jgr,VC,tue,Ygr,Kgr,XG,Zgr,ehr,ohr,zC,aue,rhr,thr,VG,ahr,nhr,shr,WC,nue,lhr,ihr,zG,dhr,chr,fhr,QC,sue,mhr,ghr,WG,hhr,phr,_hr,HC,lue,uhr,bhr,QG,vhr,Thr,Fhr,UC,iue,Chr,Mhr,HG,Ehr,yhr,whr,JC,due,Ahr,Lhr,UG,Bhr,xhr,khr,YC,cue,Rhr,Shr,JG,Phr,$hr,Ihr,KC,fue,jhr,Nhr,YG,Dhr,qhr,Ohr,ZC,mue,Ghr,Xhr,KG,Vhr,zhr,Whr,eM,gue,Qhr,Hhr,ZG,Uhr,Jhr,Yhr,oM,hue,Khr,Zhr,eX,epr,opr,rpr,rM,pue,tpr,apr,oX,npr,spr,lpr,tM,_ue,ipr,dpr,rX,cpr,fpr,mpr,uue,gpr,hpr,N0,nRe,jc,aM,bue,D0,ppr,vue,_pr,sRe,Ar,q0,upr,Nc,bpr,Tue,vpr,Tpr,Fue,Fpr,Cpr,Mpr,O0,Epr,Cue,ypr,wpr,Apr,Ft,G0,Lpr,Mue,Bpr,xpr,Dc,kpr,Eue,Rpr,Spr,yue,Ppr,$pr,Ipr,wue,jpr,Npr,X0,Dpr,Co,V0,qpr,Aue,Opr,Gpr,En,Xpr,Lue,Vpr,zpr,Bue,Wpr,Qpr,xue,Hpr,Upr,Jpr,kue,nM,Rue,Ypr,Kpr,tX,Zpr,e_r,o_r,Sue,r_r,t_r,z0,lRe,qc,sM,Pue,W0,a_r,$ue,n_r,iRe,Lr,Q0,s_r,Oc,l_r,Iue,i_r,d_r,jue,c_r,f_r,m_r,H0,g_r,Nue,h_r,p_r,__r,Ct,U0,u_r,Due,b_r,v_r,Gc,T_r,que,F_r,C_r,Oue,M_r,E_r,y_r,Gue,w_r,A_r,J0,L_r,Mo,Y0,B_r,Xue,x_r,k_r,yn,R_r,Vue,S_r,P_r,zue,$_r,I_r,Wue,j_r,N_r,D_r,K,lM,Que,q_r,O_r,aX,G_r,X_r,V_r,iM,Hue,z_r,W_r,nX,Q_r,H_r,U_r,dM,Uue,J_r,Y_r,sX,K_r,Z_r,eur,cM,Jue,our,rur,lX,tur,aur,nur,fM,Yue,sur,lur,iX,iur,dur,cur,mM,Kue,fur,mur,dX,gur,hur,pur,gM,Zue,_ur,uur,cX,bur,vur,Tur,hM,ebe,Fur,Cur,fX,Mur,Eur,yur,pM,obe,wur,Aur,mX,Lur,Bur,xur,_M,rbe,kur,Rur,gX,Sur,Pur,$ur,uM,tbe,Iur,jur,hX,Nur,Dur,qur,bM,abe,Our,Gur,pX,Xur,Vur,zur,vM,nbe,Wur,Qur,_X,Hur,Uur,Jur,TM,sbe,Yur,Kur,uX,Zur,ebr,obr,FM,lbe,rbr,tbr,bX,abr,nbr,sbr,CM,ibe,lbr,ibr,vX,dbr,cbr,fbr,MM,dbe,mbr,gbr,TX,hbr,pbr,_br,EM,cbe,ubr,bbr,FX,vbr,Tbr,Fbr,yM,fbe,Cbr,Mbr,CX,Ebr,ybr,wbr,wM,mbe,Abr,Lbr,MX,Bbr,xbr,kbr,gbe,Rbr,Sbr,K0,dRe,Xc,AM,hbe,Z0,Pbr,pbe,$br,cRe,Br,eL,Ibr,Vc,jbr,_be,Nbr,Dbr,ube,qbr,Obr,Gbr,oL,Xbr,bbe,Vbr,zbr,Wbr,Mt,rL,Qbr,vbe,Hbr,Ubr,zc,Jbr,Tbe,Ybr,Kbr,Fbe,Zbr,e3r,o3r,Cbe,r3r,t3r,tL,a3r,Eo,aL,n3r,Mbe,s3r,l3r,wn,i3r,Ebe,d3r,c3r,ybe,f3r,m3r,wbe,g3r,h3r,p3r,Z,LM,Abe,_3r,u3r,EX,b3r,v3r,T3r,BM,Lbe,F3r,C3r,yX,M3r,E3r,y3r,xM,Bbe,w3r,A3r,wX,L3r,B3r,x3r,kM,xbe,k3r,R3r,AX,S3r,P3r,$3r,RM,kbe,I3r,j3r,LX,N3r,D3r,q3r,SM,Rbe,O3r,G3r,BX,X3r,V3r,z3r,PM,Sbe,W3r,Q3r,xX,H3r,U3r,J3r,$M,Pbe,Y3r,K3r,kX,Z3r,e2r,o2r,IM,$be,r2r,t2r,RX,a2r,n2r,s2r,jM,Ibe,l2r,i2r,SX,d2r,c2r,f2r,NM,jbe,m2r,g2r,PX,h2r,p2r,_2r,DM,Nbe,u2r,b2r,$X,v2r,T2r,F2r,qM,Dbe,C2r,M2r,IX,E2r,y2r,w2r,OM,qbe,A2r,L2r,jX,B2r,x2r,k2r,GM,Obe,R2r,S2r,NX,P2r,$2r,I2r,XM,Gbe,j2r,N2r,DX,D2r,q2r,O2r,VM,Xbe,G2r,X2r,qX,V2r,z2r,W2r,zM,Vbe,Q2r,H2r,OX,U2r,J2r,Y2r,WM,zbe,K2r,Z2r,GX,evr,ovr,rvr,Wbe,tvr,avr,nL,fRe,Wc,QM,Qbe,sL,nvr,Hbe,svr,mRe,xr,lL,lvr,Qc,ivr,Ube,dvr,cvr,Jbe,fvr,mvr,gvr,iL,hvr,Ybe,pvr,_vr,uvr,Et,dL,bvr,Kbe,vvr,Tvr,Hc,Fvr,Zbe,Cvr,Mvr,e3e,Evr,yvr,wvr,o3e,Avr,Lvr,cL,Bvr,yo,fL,xvr,r3e,kvr,Rvr,An,Svr,t3e,Pvr,$vr,a3e,Ivr,jvr,n3e,Nvr,Dvr,qvr,s3e,HM,l3e,Ovr,Gvr,XX,Xvr,Vvr,zvr,i3e,Wvr,Qvr,mL,gRe,Uc,UM,d3e,gL,Hvr,c3e,Uvr,hRe,kr,hL,Jvr,Jc,Yvr,f3e,Kvr,Zvr,m3e,eTr,oTr,rTr,pL,tTr,g3e,aTr,nTr,sTr,yt,_L,lTr,h3e,iTr,dTr,Yc,cTr,p3e,fTr,mTr,_3e,gTr,hTr,pTr,u3e,_Tr,uTr,uL,bTr,wo,bL,vTr,b3e,TTr,FTr,Ln,CTr,v3e,MTr,ETr,T3e,yTr,wTr,F3e,ATr,LTr,BTr,C3e,JM,M3e,xTr,kTr,VX,RTr,STr,PTr,E3e,$Tr,ITr,vL,pRe,Kc,YM,y3e,TL,jTr,w3e,NTr,_Re,Rr,FL,DTr,Zc,qTr,A3e,OTr,GTr,L3e,XTr,VTr,zTr,CL,WTr,B3e,QTr,HTr,UTr,wt,ML,JTr,x3e,YTr,KTr,ef,ZTr,k3e,e1r,o1r,R3e,r1r,t1r,a1r,S3e,n1r,s1r,EL,l1r,Ao,yL,i1r,P3e,d1r,c1r,Bn,f1r,$3e,m1r,g1r,I3e,h1r,p1r,j3e,_1r,u1r,b1r,z,KM,N3e,v1r,T1r,zX,F1r,C1r,M1r,ZM,D3e,E1r,y1r,WX,w1r,A1r,L1r,e4,q3e,B1r,x1r,QX,k1r,R1r,S1r,o4,O3e,P1r,$1r,HX,I1r,j1r,N1r,r4,G3e,D1r,q1r,UX,O1r,G1r,X1r,t4,X3e,V1r,z1r,JX,W1r,Q1r,H1r,a4,V3e,U1r,J1r,YX,Y1r,K1r,Z1r,n4,z3e,eFr,oFr,KX,rFr,tFr,aFr,s4,W3e,nFr,sFr,ZX,lFr,iFr,dFr,l4,Q3e,cFr,fFr,eV,mFr,gFr,hFr,i4,H3e,pFr,_Fr,oV,uFr,bFr,vFr,d4,U3e,TFr,FFr,rV,CFr,MFr,EFr,c4,J3e,yFr,wFr,tV,AFr,LFr,BFr,f4,Y3e,xFr,kFr,aV,RFr,SFr,PFr,m4,K3e,$Fr,IFr,nV,jFr,NFr,DFr,g4,Z3e,qFr,OFr,sV,GFr,XFr,VFr,h4,e2e,zFr,WFr,lV,QFr,HFr,UFr,p4,o2e,JFr,YFr,iV,KFr,ZFr,eCr,_4,r2e,oCr,rCr,dV,tCr,aCr,nCr,u4,t2e,sCr,lCr,cV,iCr,dCr,cCr,b4,a2e,fCr,mCr,fV,gCr,hCr,pCr,v4,n2e,_Cr,uCr,mV,bCr,vCr,TCr,T4,s2e,FCr,CCr,gV,MCr,ECr,yCr,F4,l2e,wCr,ACr,hV,LCr,BCr,xCr,C4,i2e,kCr,RCr,pV,SCr,PCr,$Cr,d2e,ICr,jCr,wL,uRe,of,M4,c2e,AL,NCr,f2e,DCr,bRe,Sr,LL,qCr,rf,OCr,m2e,GCr,XCr,g2e,VCr,zCr,WCr,BL,QCr,h2e,HCr,UCr,JCr,At,xL,YCr,p2e,KCr,ZCr,tf,eMr,_2e,oMr,rMr,u2e,tMr,aMr,nMr,b2e,sMr,lMr,kL,iMr,Lo,RL,dMr,v2e,cMr,fMr,xn,mMr,T2e,gMr,hMr,F2e,pMr,_Mr,C2e,uMr,bMr,vMr,ca,E4,M2e,TMr,FMr,_V,CMr,MMr,EMr,y4,E2e,yMr,wMr,uV,AMr,LMr,BMr,w4,y2e,xMr,kMr,bV,RMr,SMr,PMr,A4,w2e,$Mr,IMr,vV,jMr,NMr,DMr,L4,A2e,qMr,OMr,TV,GMr,XMr,VMr,L2e,zMr,WMr,SL,vRe,af,B4,B2e,PL,QMr,x2e,HMr,TRe,Pr,$L,UMr,nf,JMr,k2e,YMr,KMr,R2e,ZMr,e4r,o4r,IL,r4r,S2e,t4r,a4r,n4r,Lt,jL,s4r,P2e,l4r,i4r,sf,d4r,$2e,c4r,f4r,I2e,m4r,g4r,h4r,j2e,p4r,_4r,NL,u4r,Bo,DL,b4r,N2e,v4r,T4r,kn,F4r,D2e,C4r,M4r,q2e,E4r,y4r,O2e,w4r,A4r,L4r,ce,x4,G2e,B4r,x4r,FV,k4r,R4r,S4r,k4,X2e,P4r,$4r,CV,I4r,j4r,N4r,R4,V2e,D4r,q4r,MV,O4r,G4r,X4r,S4,z2e,V4r,z4r,EV,W4r,Q4r,H4r,P4,W2e,U4r,J4r,yV,Y4r,K4r,Z4r,$4,Q2e,eEr,oEr,wV,rEr,tEr,aEr,I4,H2e,nEr,sEr,AV,lEr,iEr,dEr,j4,U2e,cEr,fEr,LV,mEr,gEr,hEr,N4,J2e,pEr,_Er,BV,uEr,bEr,vEr,D4,Y2e,TEr,FEr,xV,CEr,MEr,EEr,q4,K2e,yEr,wEr,kV,AEr,LEr,BEr,O4,Z2e,xEr,kEr,RV,REr,SEr,PEr,eve,$Er,IEr,qL,FRe,lf,G4,ove,OL,jEr,rve,NEr,CRe,$r,GL,DEr,df,qEr,tve,OEr,GEr,ave,XEr,VEr,zEr,XL,WEr,nve,QEr,HEr,UEr,Bt,VL,JEr,sve,YEr,KEr,cf,ZEr,lve,e5r,o5r,ive,r5r,t5r,a5r,dve,n5r,s5r,zL,l5r,xo,WL,i5r,cve,d5r,c5r,Rn,f5r,fve,m5r,g5r,mve,h5r,p5r,gve,_5r,u5r,b5r,be,X4,hve,v5r,T5r,SV,F5r,C5r,M5r,V4,pve,E5r,y5r,PV,w5r,A5r,L5r,z4,_ve,B5r,x5r,$V,k5r,R5r,S5r,W4,uve,P5r,$5r,IV,I5r,j5r,N5r,Q4,bve,D5r,q5r,jV,O5r,G5r,X5r,H4,vve,V5r,z5r,NV,W5r,Q5r,H5r,U4,Tve,U5r,J5r,DV,Y5r,K5r,Z5r,J4,Fve,eyr,oyr,qV,ryr,tyr,ayr,Y4,Cve,nyr,syr,OV,lyr,iyr,dyr,K4,Mve,cyr,fyr,GV,myr,gyr,hyr,Eve,pyr,_yr,QL,MRe,ff,Z4,yve,HL,uyr,wve,byr,ERe,Ir,UL,vyr,mf,Tyr,Ave,Fyr,Cyr,Lve,Myr,Eyr,yyr,JL,wyr,Bve,Ayr,Lyr,Byr,xt,YL,xyr,xve,kyr,Ryr,gf,Syr,kve,Pyr,$yr,Rve,Iyr,jyr,Nyr,Sve,Dyr,qyr,KL,Oyr,ko,ZL,Gyr,Pve,Xyr,Vyr,Sn,zyr,$ve,Wyr,Qyr,Ive,Hyr,Uyr,jve,Jyr,Yyr,Kyr,Ee,eE,Nve,Zyr,ewr,XV,owr,rwr,twr,oE,Dve,awr,nwr,VV,swr,lwr,iwr,rE,qve,dwr,cwr,zV,fwr,mwr,gwr,tE,Ove,hwr,pwr,WV,_wr,uwr,bwr,aE,Gve,vwr,Twr,QV,Fwr,Cwr,Mwr,nE,Xve,Ewr,ywr,HV,wwr,Awr,Lwr,sE,Vve,Bwr,xwr,UV,kwr,Rwr,Swr,lE,zve,Pwr,$wr,JV,Iwr,jwr,Nwr,iE,Wve,Dwr,qwr,YV,Owr,Gwr,Xwr,Qve,Vwr,zwr,e7,yRe,hf,dE,Hve,o7,Wwr,Uve,Qwr,wRe,jr,r7,Hwr,pf,Uwr,Jve,Jwr,Ywr,Yve,Kwr,Zwr,e6r,t7,o6r,Kve,r6r,t6r,a6r,kt,a7,n6r,Zve,s6r,l6r,_f,i6r,eTe,d6r,c6r,oTe,f6r,m6r,g6r,rTe,h6r,p6r,n7,_6r,Ro,s7,u6r,tTe,b6r,v6r,Pn,T6r,aTe,F6r,C6r,nTe,M6r,E6r,sTe,y6r,w6r,A6r,ve,cE,lTe,L6r,B6r,KV,x6r,k6r,R6r,fE,iTe,S6r,P6r,ZV,$6r,I6r,j6r,mE,dTe,N6r,D6r,ez,q6r,O6r,G6r,gE,cTe,X6r,V6r,oz,z6r,W6r,Q6r,hE,fTe,H6r,U6r,rz,J6r,Y6r,K6r,pE,mTe,Z6r,eAr,tz,oAr,rAr,tAr,_E,gTe,aAr,nAr,az,sAr,lAr,iAr,uE,hTe,dAr,cAr,nz,fAr,mAr,gAr,bE,pTe,hAr,pAr,sz,_Ar,uAr,bAr,vE,_Te,vAr,TAr,lz,FAr,CAr,MAr,uTe,EAr,yAr,l7,ARe,uf,TE,bTe,i7,wAr,vTe,AAr,LRe,Nr,d7,LAr,bf,BAr,TTe,xAr,kAr,FTe,RAr,SAr,PAr,c7,$Ar,CTe,IAr,jAr,NAr,Rt,f7,DAr,MTe,qAr,OAr,vf,GAr,ETe,XAr,VAr,yTe,zAr,WAr,QAr,wTe,HAr,UAr,m7,JAr,So,g7,YAr,ATe,KAr,ZAr,$n,e0r,LTe,o0r,r0r,BTe,t0r,a0r,xTe,n0r,s0r,l0r,Te,FE,kTe,i0r,d0r,iz,c0r,f0r,m0r,CE,RTe,g0r,h0r,dz,p0r,_0r,u0r,ME,STe,b0r,v0r,cz,T0r,F0r,C0r,EE,PTe,M0r,E0r,fz,y0r,w0r,A0r,yE,$Te,L0r,B0r,mz,x0r,k0r,R0r,wE,ITe,S0r,P0r,gz,$0r,I0r,j0r,AE,jTe,N0r,D0r,hz,q0r,O0r,G0r,LE,NTe,X0r,V0r,pz,z0r,W0r,Q0r,BE,DTe,H0r,U0r,_z,J0r,Y0r,K0r,xE,qTe,Z0r,eLr,uz,oLr,rLr,tLr,OTe,aLr,nLr,h7,BRe,Tf,kE,GTe,p7,sLr,XTe,lLr,xRe,Dr,_7,iLr,Ff,dLr,VTe,cLr,fLr,zTe,mLr,gLr,hLr,u7,pLr,WTe,_Lr,uLr,bLr,St,b7,vLr,QTe,TLr,FLr,Cf,CLr,HTe,MLr,ELr,UTe,yLr,wLr,ALr,JTe,LLr,BLr,v7,xLr,Po,T7,kLr,YTe,RLr,SLr,In,PLr,KTe,$Lr,ILr,ZTe,jLr,NLr,e1e,DLr,qLr,OLr,Se,RE,o1e,GLr,XLr,bz,VLr,zLr,WLr,SE,r1e,QLr,HLr,vz,ULr,JLr,YLr,PE,t1e,KLr,ZLr,Tz,e7r,o7r,r7r,$E,a1e,t7r,a7r,Fz,n7r,s7r,l7r,IE,n1e,i7r,d7r,Cz,c7r,f7r,m7r,jE,s1e,g7r,h7r,Mz,p7r,_7r,u7r,NE,l1e,b7r,v7r,Ez,T7r,F7r,C7r,DE,i1e,M7r,E7r,yz,y7r,w7r,A7r,d1e,L7r,B7r,F7,kRe,Mf,qE,c1e,C7,x7r,f1e,k7r,RRe,qr,M7,R7r,Ef,S7r,m1e,P7r,$7r,g1e,I7r,j7r,N7r,E7,D7r,h1e,q7r,O7r,G7r,Pt,y7,X7r,p1e,V7r,z7r,yf,W7r,_1e,Q7r,H7r,u1e,U7r,J7r,Y7r,b1e,K7r,Z7r,w7,e8r,$o,A7,o8r,v1e,r8r,t8r,jn,a8r,T1e,n8r,s8r,F1e,l8r,i8r,C1e,d8r,c8r,f8r,Pe,OE,M1e,m8r,g8r,wz,h8r,p8r,_8r,GE,E1e,u8r,b8r,Az,v8r,T8r,F8r,XE,y1e,C8r,M8r,Lz,E8r,y8r,w8r,VE,w1e,A8r,L8r,Bz,B8r,x8r,k8r,zE,A1e,R8r,S8r,xz,P8r,$8r,I8r,WE,L1e,j8r,N8r,kz,D8r,q8r,O8r,QE,B1e,G8r,X8r,Rz,V8r,z8r,W8r,HE,x1e,Q8r,H8r,Sz,U8r,J8r,Y8r,k1e,K8r,Z8r,L7,SRe,wf,UE,R1e,B7,e9r,S1e,o9r,PRe,Or,x7,r9r,Af,t9r,P1e,a9r,n9r,$1e,s9r,l9r,i9r,k7,d9r,I1e,c9r,f9r,m9r,$t,R7,g9r,j1e,h9r,p9r,Lf,_9r,N1e,u9r,b9r,D1e,v9r,T9r,F9r,q1e,C9r,M9r,S7,E9r,Io,P7,y9r,O1e,w9r,A9r,Nn,L9r,G1e,B9r,x9r,X1e,k9r,R9r,V1e,S9r,P9r,$9r,z1e,JE,W1e,I9r,j9r,Pz,N9r,D9r,q9r,Q1e,O9r,G9r,$7,$Re,Bf,YE,H1e,I7,X9r,U1e,V9r,IRe,Gr,j7,z9r,xf,W9r,J1e,Q9r,H9r,Y1e,U9r,J9r,Y9r,N7,K9r,K1e,Z9r,eBr,oBr,It,D7,rBr,Z1e,tBr,aBr,kf,nBr,eFe,sBr,lBr,oFe,iBr,dBr,cBr,rFe,fBr,mBr,q7,gBr,jo,O7,hBr,tFe,pBr,_Br,Dn,uBr,aFe,bBr,vBr,nFe,TBr,FBr,sFe,CBr,MBr,EBr,G7,KE,lFe,yBr,wBr,$z,ABr,LBr,BBr,ZE,iFe,xBr,kBr,Iz,RBr,SBr,PBr,dFe,$Br,IBr,X7,jRe,Rf,e5,cFe,V7,jBr,fFe,NBr,NRe,Xr,z7,DBr,Sf,qBr,mFe,OBr,GBr,gFe,XBr,VBr,zBr,W7,WBr,hFe,QBr,HBr,UBr,jt,Q7,JBr,pFe,YBr,KBr,Pf,ZBr,_Fe,exr,oxr,uFe,rxr,txr,axr,bFe,nxr,sxr,H7,lxr,No,U7,ixr,vFe,dxr,cxr,qn,fxr,TFe,mxr,gxr,FFe,hxr,pxr,CFe,_xr,uxr,bxr,MFe,o5,EFe,vxr,Txr,jz,Fxr,Cxr,Mxr,yFe,Exr,yxr,J7,DRe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ny=new X({}),sy=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new wxr({props:{warning:"&lcub;true}",$$slots:{default:[vMt]},$$scope:{ctx:Ii}}}),ly=new X({}),iy=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/configuration_auto.py#L533"}}),fy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/configuration_auto.py#L556",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),my=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),gy=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/configuration_auto.py#L678",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),hy=new X({}),py=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/tokenization_auto.py#L352"}}),by=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_3/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),Ty=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),Fy=new X({}),Cy=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),yy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_3/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Lh=new wxr({props:{$$slots:{default:[TMt]},$$scope:{ctx:Ii}}}),wy=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Ay=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),Ly=new X({}),By=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/processing_auto.py#L71"}}),Ry=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Dh=new wxr({props:{$$slots:{default:[FMt]},$$scope:{ctx:Ii}}}),Sy=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Py=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),$y=new X({}),Iy=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L701"}}),Ny=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),qy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new X({}),Xy=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L708"}}),zy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Qy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new X({}),Jy=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L723"}}),Ky=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),ew=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new X({}),tw=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L730"}}),nw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),lw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new X({}),cw=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L737"}}),mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),hw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new X({}),uw=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L746"}}),vw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new X({}),Ew=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L780"}}),ww=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Lw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new X({}),kw=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L787"}}),Sw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),$w=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Nw=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L773"}}),qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new X({}),zw=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L755"}}),Qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new X({}),Kw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L762"}}),e6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),o6=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),r6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a6=new X({}),n6=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L796"}}),l6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),i6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),d6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f6=new X({}),m6=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L835"}}),h6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),p6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),_6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b6=new X({}),v6=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L842"}}),F6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),C6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),M6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y6=new X({}),w6=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L865"}}),L6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),B6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),x6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R6=new X({}),S6=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L849"}}),$6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),I6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),j6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D6=new X({}),q6=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L856"}}),G6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),X6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),V6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q6=new X({}),H6=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L874"}}),J6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Y6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),K6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new X({}),oA=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L881"}}),tA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),nA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new X({}),iA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L828"}}),cA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),mA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new X({}),pA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L803"}}),uA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),vA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new X({}),CA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L810"}}),EA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),wA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),xA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_auto.py#L819"}}),RA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),PA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),jA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),DA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),OA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),VA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),WA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),HA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),ZA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),o0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),s0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),i0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f0=new X({}),m0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),h0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),p0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),_0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b0=new X({}),v0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),F0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),C0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),M0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new X({}),w0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),L0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),B0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),x0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R0=new X({}),S0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),$0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),I0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),j0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),q0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),G0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),X0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),V0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W0=new X({}),Q0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),U0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),J0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Y0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z0=new X({}),eL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),rL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),aL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),dL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),fL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),_L=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),uL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),bL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TL=new X({}),FL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),ML=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),EL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),yL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AL=new X({}),LL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),xL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),kL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),RL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),jL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),DL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OL=new X({}),GL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),VL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),zL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),WL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new X({}),UL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),YL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),KL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),ZL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o7=new X({}),r7=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),a7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),n7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),s7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i7=new X({}),d7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),f7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),m7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),g7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p7=new X({}),_7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),b7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),v7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),T7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C7=new X({}),M7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),y7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),w7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),A7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B7=new X({}),x7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),R7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),S7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),P7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I7=new X({}),j7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),D7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),q7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),O7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V7=new X({}),z7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Q7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),H7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),U7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_3/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_3/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_3/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),pe=a("a"),io=a("span"),f(fe.$$.fragment),Me=l(),Vo=a("span"),ji=o("Auto Classes"),If=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),oy=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),qi=o("Instantiating one of "),On=a("a"),ry=o("AutoConfig"),Gn=o(", "),Xn=a("a"),ty=o("AutoModel"),Oi=o(`, and
`),Vn=a("a"),ay=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Nf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),H8=o("will create a model that is an instance of "),Xi=a("a"),U8=o("BertModel"),J8=o("."),zo=l(),Oa=a("p"),Y8=o("There is one class of "),Df=a("code"),K8=o("AutoModel"),KPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Nxe=l(),Vi=a("h2"),qf=a("a"),xQ=a("span"),f(ny.$$.fragment),ZPe=l(),kQ=a("span"),e$e=o("Extending the Auto Classes"),Dxe=l(),zn=a("p"),o$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),RQ=a("code"),r$e=o("NewModel"),t$e=o(", make sure you have a "),SQ=a("code"),a$e=o("NewModelConfig"),n$e=o(` then you can add those to the auto
classes like this:`),qxe=l(),f(sy.$$.fragment),Oxe=l(),Z8=a("p"),s$e=o("You will then be able to use the auto classes like you would usually do!"),Gxe=l(),f(Of.$$.fragment),Xxe=l(),zi=a("h2"),Gf=a("a"),PQ=a("span"),f(ly.$$.fragment),l$e=l(),$Q=a("span"),i$e=o("AutoConfig"),Vxe=l(),Wo=a("div"),f(iy.$$.fragment),d$e=l(),dy=a("p"),c$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),e9=a("a"),f$e=o("from_pretrained()"),m$e=o(" class method."),g$e=l(),cy=a("p"),h$e=o("This class cannot be instantiated directly using "),IQ=a("code"),p$e=o("__init__()"),_$e=o(" (throws an error)."),u$e=l(),mo=a("div"),f(fy.$$.fragment),b$e=l(),jQ=a("p"),v$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),T$e=l(),Wi=a("p"),F$e=o("The configuration class to instantiate is selected based on the "),NQ=a("code"),C$e=o("model_type"),M$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),DQ=a("code"),E$e=o("pretrained_model_name_or_path"),y$e=o(":"),w$e=l(),v=a("ul"),Xf=a("li"),qQ=a("strong"),A$e=o("albert"),L$e=o(" \u2014 "),o9=a("a"),B$e=o("AlbertConfig"),x$e=o(" (ALBERT model)"),k$e=l(),Vf=a("li"),OQ=a("strong"),R$e=o("bart"),S$e=o(" \u2014 "),r9=a("a"),P$e=o("BartConfig"),$$e=o(" (BART model)"),I$e=l(),zf=a("li"),GQ=a("strong"),j$e=o("beit"),N$e=o(" \u2014 "),t9=a("a"),D$e=o("BeitConfig"),q$e=o(" (BEiT model)"),O$e=l(),Wf=a("li"),XQ=a("strong"),G$e=o("bert"),X$e=o(" \u2014 "),a9=a("a"),V$e=o("BertConfig"),z$e=o(" (BERT model)"),W$e=l(),Qf=a("li"),VQ=a("strong"),Q$e=o("bert-generation"),H$e=o(" \u2014 "),n9=a("a"),U$e=o("BertGenerationConfig"),J$e=o(" (Bert Generation model)"),Y$e=l(),Hf=a("li"),zQ=a("strong"),K$e=o("big_bird"),Z$e=o(" \u2014 "),s9=a("a"),eIe=o("BigBirdConfig"),oIe=o(" (BigBird model)"),rIe=l(),Uf=a("li"),WQ=a("strong"),tIe=o("bigbird_pegasus"),aIe=o(" \u2014 "),l9=a("a"),nIe=o("BigBirdPegasusConfig"),sIe=o(" (BigBirdPegasus model)"),lIe=l(),Jf=a("li"),QQ=a("strong"),iIe=o("blenderbot"),dIe=o(" \u2014 "),i9=a("a"),cIe=o("BlenderbotConfig"),fIe=o(" (Blenderbot model)"),mIe=l(),Yf=a("li"),HQ=a("strong"),gIe=o("blenderbot-small"),hIe=o(" \u2014 "),d9=a("a"),pIe=o("BlenderbotSmallConfig"),_Ie=o(" (BlenderbotSmall model)"),uIe=l(),Kf=a("li"),UQ=a("strong"),bIe=o("camembert"),vIe=o(" \u2014 "),c9=a("a"),TIe=o("CamembertConfig"),FIe=o(" (CamemBERT model)"),CIe=l(),Zf=a("li"),JQ=a("strong"),MIe=o("canine"),EIe=o(" \u2014 "),f9=a("a"),yIe=o("CanineConfig"),wIe=o(" (Canine model)"),AIe=l(),em=a("li"),YQ=a("strong"),LIe=o("clip"),BIe=o(" \u2014 "),m9=a("a"),xIe=o("CLIPConfig"),kIe=o(" (CLIP model)"),RIe=l(),om=a("li"),KQ=a("strong"),SIe=o("convbert"),PIe=o(" \u2014 "),g9=a("a"),$Ie=o("ConvBertConfig"),IIe=o(" (ConvBERT model)"),jIe=l(),rm=a("li"),ZQ=a("strong"),NIe=o("convnext"),DIe=o(" \u2014 "),h9=a("a"),qIe=o("ConvNextConfig"),OIe=o(" (ConvNext model)"),GIe=l(),tm=a("li"),eH=a("strong"),XIe=o("ctrl"),VIe=o(" \u2014 "),p9=a("a"),zIe=o("CTRLConfig"),WIe=o(" (CTRL model)"),QIe=l(),am=a("li"),oH=a("strong"),HIe=o("data2vec-audio"),UIe=o(" \u2014 "),_9=a("a"),JIe=o("Data2VecAudioConfig"),YIe=o(" (Data2VecAudio model)"),KIe=l(),nm=a("li"),rH=a("strong"),ZIe=o("data2vec-text"),eje=o(" \u2014 "),u9=a("a"),oje=o("Data2VecTextConfig"),rje=o(" (Data2VecText model)"),tje=l(),sm=a("li"),tH=a("strong"),aje=o("deberta"),nje=o(" \u2014 "),b9=a("a"),sje=o("DebertaConfig"),lje=o(" (DeBERTa model)"),ije=l(),lm=a("li"),aH=a("strong"),dje=o("deberta-v2"),cje=o(" \u2014 "),v9=a("a"),fje=o("DebertaV2Config"),mje=o(" (DeBERTa-v2 model)"),gje=l(),im=a("li"),nH=a("strong"),hje=o("deit"),pje=o(" \u2014 "),T9=a("a"),_je=o("DeiTConfig"),uje=o(" (DeiT model)"),bje=l(),dm=a("li"),sH=a("strong"),vje=o("detr"),Tje=o(" \u2014 "),F9=a("a"),Fje=o("DetrConfig"),Cje=o(" (DETR model)"),Mje=l(),cm=a("li"),lH=a("strong"),Eje=o("distilbert"),yje=o(" \u2014 "),C9=a("a"),wje=o("DistilBertConfig"),Aje=o(" (DistilBERT model)"),Lje=l(),fm=a("li"),iH=a("strong"),Bje=o("dpr"),xje=o(" \u2014 "),M9=a("a"),kje=o("DPRConfig"),Rje=o(" (DPR model)"),Sje=l(),mm=a("li"),dH=a("strong"),Pje=o("electra"),$je=o(" \u2014 "),E9=a("a"),Ije=o("ElectraConfig"),jje=o(" (ELECTRA model)"),Nje=l(),gm=a("li"),cH=a("strong"),Dje=o("encoder-decoder"),qje=o(" \u2014 "),y9=a("a"),Oje=o("EncoderDecoderConfig"),Gje=o(" (Encoder decoder model)"),Xje=l(),hm=a("li"),fH=a("strong"),Vje=o("flaubert"),zje=o(" \u2014 "),w9=a("a"),Wje=o("FlaubertConfig"),Qje=o(" (FlauBERT model)"),Hje=l(),pm=a("li"),mH=a("strong"),Uje=o("fnet"),Jje=o(" \u2014 "),A9=a("a"),Yje=o("FNetConfig"),Kje=o(" (FNet model)"),Zje=l(),_m=a("li"),gH=a("strong"),eNe=o("fsmt"),oNe=o(" \u2014 "),L9=a("a"),rNe=o("FSMTConfig"),tNe=o(" (FairSeq Machine-Translation model)"),aNe=l(),um=a("li"),hH=a("strong"),nNe=o("funnel"),sNe=o(" \u2014 "),B9=a("a"),lNe=o("FunnelConfig"),iNe=o(" (Funnel Transformer model)"),dNe=l(),bm=a("li"),pH=a("strong"),cNe=o("gpt2"),fNe=o(" \u2014 "),x9=a("a"),mNe=o("GPT2Config"),gNe=o(" (OpenAI GPT-2 model)"),hNe=l(),vm=a("li"),_H=a("strong"),pNe=o("gpt_neo"),_Ne=o(" \u2014 "),k9=a("a"),uNe=o("GPTNeoConfig"),bNe=o(" (GPT Neo model)"),vNe=l(),Tm=a("li"),uH=a("strong"),TNe=o("gptj"),FNe=o(" \u2014 "),R9=a("a"),CNe=o("GPTJConfig"),MNe=o(" (GPT-J model)"),ENe=l(),Fm=a("li"),bH=a("strong"),yNe=o("hubert"),wNe=o(" \u2014 "),S9=a("a"),ANe=o("HubertConfig"),LNe=o(" (Hubert model)"),BNe=l(),Cm=a("li"),vH=a("strong"),xNe=o("ibert"),kNe=o(" \u2014 "),P9=a("a"),RNe=o("IBertConfig"),SNe=o(" (I-BERT model)"),PNe=l(),Mm=a("li"),TH=a("strong"),$Ne=o("imagegpt"),INe=o(" \u2014 "),$9=a("a"),jNe=o("ImageGPTConfig"),NNe=o(" (ImageGPT model)"),DNe=l(),Em=a("li"),FH=a("strong"),qNe=o("layoutlm"),ONe=o(" \u2014 "),I9=a("a"),GNe=o("LayoutLMConfig"),XNe=o(" (LayoutLM model)"),VNe=l(),ym=a("li"),CH=a("strong"),zNe=o("layoutlmv2"),WNe=o(" \u2014 "),j9=a("a"),QNe=o("LayoutLMv2Config"),HNe=o(" (LayoutLMv2 model)"),UNe=l(),wm=a("li"),MH=a("strong"),JNe=o("led"),YNe=o(" \u2014 "),N9=a("a"),KNe=o("LEDConfig"),ZNe=o(" (LED model)"),eDe=l(),Am=a("li"),EH=a("strong"),oDe=o("longformer"),rDe=o(" \u2014 "),D9=a("a"),tDe=o("LongformerConfig"),aDe=o(" (Longformer model)"),nDe=l(),Lm=a("li"),yH=a("strong"),sDe=o("luke"),lDe=o(" \u2014 "),q9=a("a"),iDe=o("LukeConfig"),dDe=o(" (LUKE model)"),cDe=l(),Bm=a("li"),wH=a("strong"),fDe=o("lxmert"),mDe=o(" \u2014 "),O9=a("a"),gDe=o("LxmertConfig"),hDe=o(" (LXMERT model)"),pDe=l(),xm=a("li"),AH=a("strong"),_De=o("m2m_100"),uDe=o(" \u2014 "),G9=a("a"),bDe=o("M2M100Config"),vDe=o(" (M2M100 model)"),TDe=l(),km=a("li"),LH=a("strong"),FDe=o("marian"),CDe=o(" \u2014 "),X9=a("a"),MDe=o("MarianConfig"),EDe=o(" (Marian model)"),yDe=l(),Rm=a("li"),BH=a("strong"),wDe=o("maskformer"),ADe=o(" \u2014 "),V9=a("a"),LDe=o("MaskFormerConfig"),BDe=o(" (MaskFormer model)"),xDe=l(),Sm=a("li"),xH=a("strong"),kDe=o("mbart"),RDe=o(" \u2014 "),z9=a("a"),SDe=o("MBartConfig"),PDe=o(" (mBART model)"),$De=l(),Pm=a("li"),kH=a("strong"),IDe=o("megatron-bert"),jDe=o(" \u2014 "),W9=a("a"),NDe=o("MegatronBertConfig"),DDe=o(" (MegatronBert model)"),qDe=l(),$m=a("li"),RH=a("strong"),ODe=o("mobilebert"),GDe=o(" \u2014 "),Q9=a("a"),XDe=o("MobileBertConfig"),VDe=o(" (MobileBERT model)"),zDe=l(),Im=a("li"),SH=a("strong"),WDe=o("mpnet"),QDe=o(" \u2014 "),H9=a("a"),HDe=o("MPNetConfig"),UDe=o(" (MPNet model)"),JDe=l(),jm=a("li"),PH=a("strong"),YDe=o("mt5"),KDe=o(" \u2014 "),U9=a("a"),ZDe=o("MT5Config"),eqe=o(" (mT5 model)"),oqe=l(),Nm=a("li"),$H=a("strong"),rqe=o("nystromformer"),tqe=o(" \u2014 "),J9=a("a"),aqe=o("NystromformerConfig"),nqe=o(" (Nystromformer model)"),sqe=l(),Dm=a("li"),IH=a("strong"),lqe=o("openai-gpt"),iqe=o(" \u2014 "),Y9=a("a"),dqe=o("OpenAIGPTConfig"),cqe=o(" (OpenAI GPT model)"),fqe=l(),qm=a("li"),jH=a("strong"),mqe=o("pegasus"),gqe=o(" \u2014 "),K9=a("a"),hqe=o("PegasusConfig"),pqe=o(" (Pegasus model)"),_qe=l(),Om=a("li"),NH=a("strong"),uqe=o("perceiver"),bqe=o(" \u2014 "),Z9=a("a"),vqe=o("PerceiverConfig"),Tqe=o(" (Perceiver model)"),Fqe=l(),Gm=a("li"),DH=a("strong"),Cqe=o("plbart"),Mqe=o(" \u2014 "),eB=a("a"),Eqe=o("PLBartConfig"),yqe=o(" (PLBart model)"),wqe=l(),Xm=a("li"),qH=a("strong"),Aqe=o("poolformer"),Lqe=o(" \u2014 "),oB=a("a"),Bqe=o("PoolFormerConfig"),xqe=o(" (PoolFormer model)"),kqe=l(),Vm=a("li"),OH=a("strong"),Rqe=o("prophetnet"),Sqe=o(" \u2014 "),rB=a("a"),Pqe=o("ProphetNetConfig"),$qe=o(" (ProphetNet model)"),Iqe=l(),zm=a("li"),GH=a("strong"),jqe=o("qdqbert"),Nqe=o(" \u2014 "),tB=a("a"),Dqe=o("QDQBertConfig"),qqe=o(" (QDQBert model)"),Oqe=l(),Wm=a("li"),XH=a("strong"),Gqe=o("rag"),Xqe=o(" \u2014 "),aB=a("a"),Vqe=o("RagConfig"),zqe=o(" (RAG model)"),Wqe=l(),Qm=a("li"),VH=a("strong"),Qqe=o("realm"),Hqe=o(" \u2014 "),nB=a("a"),Uqe=o("RealmConfig"),Jqe=o(" (Realm model)"),Yqe=l(),Hm=a("li"),zH=a("strong"),Kqe=o("reformer"),Zqe=o(" \u2014 "),sB=a("a"),eOe=o("ReformerConfig"),oOe=o(" (Reformer model)"),rOe=l(),Um=a("li"),WH=a("strong"),tOe=o("rembert"),aOe=o(" \u2014 "),lB=a("a"),nOe=o("RemBertConfig"),sOe=o(" (RemBERT model)"),lOe=l(),Jm=a("li"),QH=a("strong"),iOe=o("resnet"),dOe=o(" \u2014 "),iB=a("a"),cOe=o("ResNetConfig"),fOe=o(" (ResNet model)"),mOe=l(),Ym=a("li"),HH=a("strong"),gOe=o("retribert"),hOe=o(" \u2014 "),dB=a("a"),pOe=o("RetriBertConfig"),_Oe=o(" (RetriBERT model)"),uOe=l(),Km=a("li"),UH=a("strong"),bOe=o("roberta"),vOe=o(" \u2014 "),cB=a("a"),TOe=o("RobertaConfig"),FOe=o(" (RoBERTa model)"),COe=l(),Zm=a("li"),JH=a("strong"),MOe=o("roformer"),EOe=o(" \u2014 "),fB=a("a"),yOe=o("RoFormerConfig"),wOe=o(" (RoFormer model)"),AOe=l(),eg=a("li"),YH=a("strong"),LOe=o("segformer"),BOe=o(" \u2014 "),mB=a("a"),xOe=o("SegformerConfig"),kOe=o(" (SegFormer model)"),ROe=l(),og=a("li"),KH=a("strong"),SOe=o("sew"),POe=o(" \u2014 "),gB=a("a"),$Oe=o("SEWConfig"),IOe=o(" (SEW model)"),jOe=l(),rg=a("li"),ZH=a("strong"),NOe=o("sew-d"),DOe=o(" \u2014 "),hB=a("a"),qOe=o("SEWDConfig"),OOe=o(" (SEW-D model)"),GOe=l(),tg=a("li"),eU=a("strong"),XOe=o("speech-encoder-decoder"),VOe=o(" \u2014 "),pB=a("a"),zOe=o("SpeechEncoderDecoderConfig"),WOe=o(" (Speech Encoder decoder model)"),QOe=l(),ag=a("li"),oU=a("strong"),HOe=o("speech_to_text"),UOe=o(" \u2014 "),_B=a("a"),JOe=o("Speech2TextConfig"),YOe=o(" (Speech2Text model)"),KOe=l(),ng=a("li"),rU=a("strong"),ZOe=o("speech_to_text_2"),eGe=o(" \u2014 "),uB=a("a"),oGe=o("Speech2Text2Config"),rGe=o(" (Speech2Text2 model)"),tGe=l(),sg=a("li"),tU=a("strong"),aGe=o("splinter"),nGe=o(" \u2014 "),bB=a("a"),sGe=o("SplinterConfig"),lGe=o(" (Splinter model)"),iGe=l(),lg=a("li"),aU=a("strong"),dGe=o("squeezebert"),cGe=o(" \u2014 "),vB=a("a"),fGe=o("SqueezeBertConfig"),mGe=o(" (SqueezeBERT model)"),gGe=l(),ig=a("li"),nU=a("strong"),hGe=o("swin"),pGe=o(" \u2014 "),TB=a("a"),_Ge=o("SwinConfig"),uGe=o(" (Swin model)"),bGe=l(),dg=a("li"),sU=a("strong"),vGe=o("t5"),TGe=o(" \u2014 "),FB=a("a"),FGe=o("T5Config"),CGe=o(" (T5 model)"),MGe=l(),cg=a("li"),lU=a("strong"),EGe=o("tapas"),yGe=o(" \u2014 "),CB=a("a"),wGe=o("TapasConfig"),AGe=o(" (TAPAS model)"),LGe=l(),fg=a("li"),iU=a("strong"),BGe=o("transfo-xl"),xGe=o(" \u2014 "),MB=a("a"),kGe=o("TransfoXLConfig"),RGe=o(" (Transformer-XL model)"),SGe=l(),mg=a("li"),dU=a("strong"),PGe=o("trocr"),$Ge=o(" \u2014 "),EB=a("a"),IGe=o("TrOCRConfig"),jGe=o(" (TrOCR model)"),NGe=l(),gg=a("li"),cU=a("strong"),DGe=o("unispeech"),qGe=o(" \u2014 "),yB=a("a"),OGe=o("UniSpeechConfig"),GGe=o(" (UniSpeech model)"),XGe=l(),hg=a("li"),fU=a("strong"),VGe=o("unispeech-sat"),zGe=o(" \u2014 "),wB=a("a"),WGe=o("UniSpeechSatConfig"),QGe=o(" (UniSpeechSat model)"),HGe=l(),pg=a("li"),mU=a("strong"),UGe=o("van"),JGe=o(" \u2014 "),AB=a("a"),YGe=o("VanConfig"),KGe=o(" (VAN model)"),ZGe=l(),_g=a("li"),gU=a("strong"),eXe=o("vilt"),oXe=o(" \u2014 "),LB=a("a"),rXe=o("ViltConfig"),tXe=o(" (ViLT model)"),aXe=l(),ug=a("li"),hU=a("strong"),nXe=o("vision-encoder-decoder"),sXe=o(" \u2014 "),BB=a("a"),lXe=o("VisionEncoderDecoderConfig"),iXe=o(" (Vision Encoder decoder model)"),dXe=l(),bg=a("li"),pU=a("strong"),cXe=o("vision-text-dual-encoder"),fXe=o(" \u2014 "),xB=a("a"),mXe=o("VisionTextDualEncoderConfig"),gXe=o(" (VisionTextDualEncoder model)"),hXe=l(),vg=a("li"),_U=a("strong"),pXe=o("visual_bert"),_Xe=o(" \u2014 "),kB=a("a"),uXe=o("VisualBertConfig"),bXe=o(" (VisualBert model)"),vXe=l(),Tg=a("li"),uU=a("strong"),TXe=o("vit"),FXe=o(" \u2014 "),RB=a("a"),CXe=o("ViTConfig"),MXe=o(" (ViT model)"),EXe=l(),Fg=a("li"),bU=a("strong"),yXe=o("vit_mae"),wXe=o(" \u2014 "),SB=a("a"),AXe=o("ViTMAEConfig"),LXe=o(" (ViTMAE model)"),BXe=l(),Cg=a("li"),vU=a("strong"),xXe=o("wav2vec2"),kXe=o(" \u2014 "),PB=a("a"),RXe=o("Wav2Vec2Config"),SXe=o(" (Wav2Vec2 model)"),PXe=l(),Mg=a("li"),TU=a("strong"),$Xe=o("wavlm"),IXe=o(" \u2014 "),$B=a("a"),jXe=o("WavLMConfig"),NXe=o(" (WavLM model)"),DXe=l(),Eg=a("li"),FU=a("strong"),qXe=o("xglm"),OXe=o(" \u2014 "),IB=a("a"),GXe=o("XGLMConfig"),XXe=o(" (XGLM model)"),VXe=l(),yg=a("li"),CU=a("strong"),zXe=o("xlm"),WXe=o(" \u2014 "),jB=a("a"),QXe=o("XLMConfig"),HXe=o(" (XLM model)"),UXe=l(),wg=a("li"),MU=a("strong"),JXe=o("xlm-prophetnet"),YXe=o(" \u2014 "),NB=a("a"),KXe=o("XLMProphetNetConfig"),ZXe=o(" (XLMProphetNet model)"),eVe=l(),Ag=a("li"),EU=a("strong"),oVe=o("xlm-roberta"),rVe=o(" \u2014 "),DB=a("a"),tVe=o("XLMRobertaConfig"),aVe=o(" (XLM-RoBERTa model)"),nVe=l(),Lg=a("li"),yU=a("strong"),sVe=o("xlm-roberta-xl"),lVe=o(" \u2014 "),qB=a("a"),iVe=o("XLMRobertaXLConfig"),dVe=o(" (XLM-RoBERTa-XL model)"),cVe=l(),Bg=a("li"),wU=a("strong"),fVe=o("xlnet"),mVe=o(" \u2014 "),OB=a("a"),gVe=o("XLNetConfig"),hVe=o(" (XLNet model)"),pVe=l(),xg=a("li"),AU=a("strong"),_Ve=o("yoso"),uVe=o(" \u2014 "),GB=a("a"),bVe=o("YosoConfig"),vVe=o(" (YOSO model)"),TVe=l(),LU=a("p"),FVe=o("Examples:"),CVe=l(),f(my.$$.fragment),MVe=l(),kg=a("div"),f(gy.$$.fragment),EVe=l(),BU=a("p"),yVe=o("Register a new configuration for this class."),zxe=l(),Qi=a("h2"),Rg=a("a"),xU=a("span"),f(hy.$$.fragment),wVe=l(),kU=a("span"),AVe=o("AutoTokenizer"),Wxe=l(),Qo=a("div"),f(py.$$.fragment),LVe=l(),_y=a("p"),BVe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),XB=a("a"),xVe=o("AutoTokenizer.from_pretrained()"),kVe=o(" class method."),RVe=l(),uy=a("p"),SVe=o("This class cannot be instantiated directly using "),RU=a("code"),PVe=o("__init__()"),$Ve=o(" (throws an error)."),IVe=l(),go=a("div"),f(by.$$.fragment),jVe=l(),SU=a("p"),NVe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),DVe=l(),Ga=a("p"),qVe=o("The tokenizer class to instantiate is selected based on the "),PU=a("code"),OVe=o("model_type"),GVe=o(` property of the config object (either
passed as an argument or loaded from `),$U=a("code"),XVe=o("pretrained_model_name_or_path"),VVe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IU=a("code"),zVe=o("pretrained_model_name_or_path"),WVe=o(":"),QVe=l(),E=a("ul"),Wn=a("li"),jU=a("strong"),HVe=o("albert"),UVe=o(" \u2014 "),VB=a("a"),JVe=o("AlbertTokenizer"),YVe=o(" or "),zB=a("a"),KVe=o("AlbertTokenizerFast"),ZVe=o(" (ALBERT model)"),eze=l(),Qn=a("li"),NU=a("strong"),oze=o("bart"),rze=o(" \u2014 "),WB=a("a"),tze=o("BartTokenizer"),aze=o(" or "),QB=a("a"),nze=o("BartTokenizerFast"),sze=o(" (BART model)"),lze=l(),Hn=a("li"),DU=a("strong"),ize=o("barthez"),dze=o(" \u2014 "),HB=a("a"),cze=o("BarthezTokenizer"),fze=o(" or "),UB=a("a"),mze=o("BarthezTokenizerFast"),gze=o(" (BARThez model)"),hze=l(),Sg=a("li"),qU=a("strong"),pze=o("bartpho"),_ze=o(" \u2014 "),JB=a("a"),uze=o("BartphoTokenizer"),bze=o(" (BARTpho model)"),vze=l(),Un=a("li"),OU=a("strong"),Tze=o("bert"),Fze=o(" \u2014 "),YB=a("a"),Cze=o("BertTokenizer"),Mze=o(" or "),KB=a("a"),Eze=o("BertTokenizerFast"),yze=o(" (BERT model)"),wze=l(),Pg=a("li"),GU=a("strong"),Aze=o("bert-generation"),Lze=o(" \u2014 "),ZB=a("a"),Bze=o("BertGenerationTokenizer"),xze=o(" (Bert Generation model)"),kze=l(),$g=a("li"),XU=a("strong"),Rze=o("bert-japanese"),Sze=o(" \u2014 "),ex=a("a"),Pze=o("BertJapaneseTokenizer"),$ze=o(" (BertJapanese model)"),Ize=l(),Ig=a("li"),VU=a("strong"),jze=o("bertweet"),Nze=o(" \u2014 "),ox=a("a"),Dze=o("BertweetTokenizer"),qze=o(" (Bertweet model)"),Oze=l(),Jn=a("li"),zU=a("strong"),Gze=o("big_bird"),Xze=o(" \u2014 "),rx=a("a"),Vze=o("BigBirdTokenizer"),zze=o(" or "),tx=a("a"),Wze=o("BigBirdTokenizerFast"),Qze=o(" (BigBird model)"),Hze=l(),Yn=a("li"),WU=a("strong"),Uze=o("bigbird_pegasus"),Jze=o(" \u2014 "),ax=a("a"),Yze=o("PegasusTokenizer"),Kze=o(" or "),nx=a("a"),Zze=o("PegasusTokenizerFast"),eWe=o(" (BigBirdPegasus model)"),oWe=l(),Kn=a("li"),QU=a("strong"),rWe=o("blenderbot"),tWe=o(" \u2014 "),sx=a("a"),aWe=o("BlenderbotTokenizer"),nWe=o(" or "),lx=a("a"),sWe=o("BlenderbotTokenizerFast"),lWe=o(" (Blenderbot model)"),iWe=l(),jg=a("li"),HU=a("strong"),dWe=o("blenderbot-small"),cWe=o(" \u2014 "),ix=a("a"),fWe=o("BlenderbotSmallTokenizer"),mWe=o(" (BlenderbotSmall model)"),gWe=l(),Ng=a("li"),UU=a("strong"),hWe=o("byt5"),pWe=o(" \u2014 "),dx=a("a"),_We=o("ByT5Tokenizer"),uWe=o(" (ByT5 model)"),bWe=l(),Zn=a("li"),JU=a("strong"),vWe=o("camembert"),TWe=o(" \u2014 "),cx=a("a"),FWe=o("CamembertTokenizer"),CWe=o(" or "),fx=a("a"),MWe=o("CamembertTokenizerFast"),EWe=o(" (CamemBERT model)"),yWe=l(),Dg=a("li"),YU=a("strong"),wWe=o("canine"),AWe=o(" \u2014 "),mx=a("a"),LWe=o("CanineTokenizer"),BWe=o(" (Canine model)"),xWe=l(),es=a("li"),KU=a("strong"),kWe=o("clip"),RWe=o(" \u2014 "),gx=a("a"),SWe=o("CLIPTokenizer"),PWe=o(" or "),hx=a("a"),$We=o("CLIPTokenizerFast"),IWe=o(" (CLIP model)"),jWe=l(),os=a("li"),ZU=a("strong"),NWe=o("convbert"),DWe=o(" \u2014 "),px=a("a"),qWe=o("ConvBertTokenizer"),OWe=o(" or "),_x=a("a"),GWe=o("ConvBertTokenizerFast"),XWe=o(" (ConvBERT model)"),VWe=l(),rs=a("li"),eJ=a("strong"),zWe=o("cpm"),WWe=o(" \u2014 "),ux=a("a"),QWe=o("CpmTokenizer"),HWe=o(" or "),oJ=a("code"),UWe=o("CpmTokenizerFast"),JWe=o(" (CPM model)"),YWe=l(),qg=a("li"),rJ=a("strong"),KWe=o("ctrl"),ZWe=o(" \u2014 "),bx=a("a"),eQe=o("CTRLTokenizer"),oQe=o(" (CTRL model)"),rQe=l(),ts=a("li"),tJ=a("strong"),tQe=o("deberta"),aQe=o(" \u2014 "),vx=a("a"),nQe=o("DebertaTokenizer"),sQe=o(" or "),Tx=a("a"),lQe=o("DebertaTokenizerFast"),iQe=o(" (DeBERTa model)"),dQe=l(),Og=a("li"),aJ=a("strong"),cQe=o("deberta-v2"),fQe=o(" \u2014 "),Fx=a("a"),mQe=o("DebertaV2Tokenizer"),gQe=o(" (DeBERTa-v2 model)"),hQe=l(),as=a("li"),nJ=a("strong"),pQe=o("distilbert"),_Qe=o(" \u2014 "),Cx=a("a"),uQe=o("DistilBertTokenizer"),bQe=o(" or "),Mx=a("a"),vQe=o("DistilBertTokenizerFast"),TQe=o(" (DistilBERT model)"),FQe=l(),ns=a("li"),sJ=a("strong"),CQe=o("dpr"),MQe=o(" \u2014 "),Ex=a("a"),EQe=o("DPRQuestionEncoderTokenizer"),yQe=o(" or "),yx=a("a"),wQe=o("DPRQuestionEncoderTokenizerFast"),AQe=o(" (DPR model)"),LQe=l(),ss=a("li"),lJ=a("strong"),BQe=o("electra"),xQe=o(" \u2014 "),wx=a("a"),kQe=o("ElectraTokenizer"),RQe=o(" or "),Ax=a("a"),SQe=o("ElectraTokenizerFast"),PQe=o(" (ELECTRA model)"),$Qe=l(),Gg=a("li"),iJ=a("strong"),IQe=o("flaubert"),jQe=o(" \u2014 "),Lx=a("a"),NQe=o("FlaubertTokenizer"),DQe=o(" (FlauBERT model)"),qQe=l(),ls=a("li"),dJ=a("strong"),OQe=o("fnet"),GQe=o(" \u2014 "),Bx=a("a"),XQe=o("FNetTokenizer"),VQe=o(" or "),xx=a("a"),zQe=o("FNetTokenizerFast"),WQe=o(" (FNet model)"),QQe=l(),Xg=a("li"),cJ=a("strong"),HQe=o("fsmt"),UQe=o(" \u2014 "),kx=a("a"),JQe=o("FSMTTokenizer"),YQe=o(" (FairSeq Machine-Translation model)"),KQe=l(),is=a("li"),fJ=a("strong"),ZQe=o("funnel"),eHe=o(" \u2014 "),Rx=a("a"),oHe=o("FunnelTokenizer"),rHe=o(" or "),Sx=a("a"),tHe=o("FunnelTokenizerFast"),aHe=o(" (Funnel Transformer model)"),nHe=l(),ds=a("li"),mJ=a("strong"),sHe=o("gpt2"),lHe=o(" \u2014 "),Px=a("a"),iHe=o("GPT2Tokenizer"),dHe=o(" or "),$x=a("a"),cHe=o("GPT2TokenizerFast"),fHe=o(" (OpenAI GPT-2 model)"),mHe=l(),cs=a("li"),gJ=a("strong"),gHe=o("gpt_neo"),hHe=o(" \u2014 "),Ix=a("a"),pHe=o("GPT2Tokenizer"),_He=o(" or "),jx=a("a"),uHe=o("GPT2TokenizerFast"),bHe=o(" (GPT Neo model)"),vHe=l(),fs=a("li"),hJ=a("strong"),THe=o("herbert"),FHe=o(" \u2014 "),Nx=a("a"),CHe=o("HerbertTokenizer"),MHe=o(" or "),Dx=a("a"),EHe=o("HerbertTokenizerFast"),yHe=o(" (HerBERT model)"),wHe=l(),Vg=a("li"),pJ=a("strong"),AHe=o("hubert"),LHe=o(" \u2014 "),qx=a("a"),BHe=o("Wav2Vec2CTCTokenizer"),xHe=o(" (Hubert model)"),kHe=l(),ms=a("li"),_J=a("strong"),RHe=o("ibert"),SHe=o(" \u2014 "),Ox=a("a"),PHe=o("RobertaTokenizer"),$He=o(" or "),Gx=a("a"),IHe=o("RobertaTokenizerFast"),jHe=o(" (I-BERT model)"),NHe=l(),gs=a("li"),uJ=a("strong"),DHe=o("layoutlm"),qHe=o(" \u2014 "),Xx=a("a"),OHe=o("LayoutLMTokenizer"),GHe=o(" or "),Vx=a("a"),XHe=o("LayoutLMTokenizerFast"),VHe=o(" (LayoutLM model)"),zHe=l(),hs=a("li"),bJ=a("strong"),WHe=o("layoutlmv2"),QHe=o(" \u2014 "),zx=a("a"),HHe=o("LayoutLMv2Tokenizer"),UHe=o(" or "),Wx=a("a"),JHe=o("LayoutLMv2TokenizerFast"),YHe=o(" (LayoutLMv2 model)"),KHe=l(),ps=a("li"),vJ=a("strong"),ZHe=o("layoutxlm"),eUe=o(" \u2014 "),Qx=a("a"),oUe=o("LayoutXLMTokenizer"),rUe=o(" or "),Hx=a("a"),tUe=o("LayoutXLMTokenizerFast"),aUe=o(" (LayoutXLM model)"),nUe=l(),_s=a("li"),TJ=a("strong"),sUe=o("led"),lUe=o(" \u2014 "),Ux=a("a"),iUe=o("LEDTokenizer"),dUe=o(" or "),Jx=a("a"),cUe=o("LEDTokenizerFast"),fUe=o(" (LED model)"),mUe=l(),us=a("li"),FJ=a("strong"),gUe=o("longformer"),hUe=o(" \u2014 "),Yx=a("a"),pUe=o("LongformerTokenizer"),_Ue=o(" or "),Kx=a("a"),uUe=o("LongformerTokenizerFast"),bUe=o(" (Longformer model)"),vUe=l(),zg=a("li"),CJ=a("strong"),TUe=o("luke"),FUe=o(" \u2014 "),Zx=a("a"),CUe=o("LukeTokenizer"),MUe=o(" (LUKE model)"),EUe=l(),bs=a("li"),MJ=a("strong"),yUe=o("lxmert"),wUe=o(" \u2014 "),ek=a("a"),AUe=o("LxmertTokenizer"),LUe=o(" or "),ok=a("a"),BUe=o("LxmertTokenizerFast"),xUe=o(" (LXMERT model)"),kUe=l(),Wg=a("li"),EJ=a("strong"),RUe=o("m2m_100"),SUe=o(" \u2014 "),rk=a("a"),PUe=o("M2M100Tokenizer"),$Ue=o(" (M2M100 model)"),IUe=l(),Qg=a("li"),yJ=a("strong"),jUe=o("marian"),NUe=o(" \u2014 "),tk=a("a"),DUe=o("MarianTokenizer"),qUe=o(" (Marian model)"),OUe=l(),vs=a("li"),wJ=a("strong"),GUe=o("mbart"),XUe=o(" \u2014 "),ak=a("a"),VUe=o("MBartTokenizer"),zUe=o(" or "),nk=a("a"),WUe=o("MBartTokenizerFast"),QUe=o(" (mBART model)"),HUe=l(),Ts=a("li"),AJ=a("strong"),UUe=o("mbart50"),JUe=o(" \u2014 "),sk=a("a"),YUe=o("MBart50Tokenizer"),KUe=o(" or "),lk=a("a"),ZUe=o("MBart50TokenizerFast"),eJe=o(" (mBART-50 model)"),oJe=l(),Hg=a("li"),LJ=a("strong"),rJe=o("mluke"),tJe=o(" \u2014 "),ik=a("a"),aJe=o("MLukeTokenizer"),nJe=o(" (mLUKE model)"),sJe=l(),Fs=a("li"),BJ=a("strong"),lJe=o("mobilebert"),iJe=o(" \u2014 "),dk=a("a"),dJe=o("MobileBertTokenizer"),cJe=o(" or "),ck=a("a"),fJe=o("MobileBertTokenizerFast"),mJe=o(" (MobileBERT model)"),gJe=l(),Cs=a("li"),xJ=a("strong"),hJe=o("mpnet"),pJe=o(" \u2014 "),fk=a("a"),_Je=o("MPNetTokenizer"),uJe=o(" or "),mk=a("a"),bJe=o("MPNetTokenizerFast"),vJe=o(" (MPNet model)"),TJe=l(),Ms=a("li"),kJ=a("strong"),FJe=o("mt5"),CJe=o(" \u2014 "),gk=a("a"),MJe=o("MT5Tokenizer"),EJe=o(" or "),hk=a("a"),yJe=o("MT5TokenizerFast"),wJe=o(" (mT5 model)"),AJe=l(),Es=a("li"),RJ=a("strong"),LJe=o("openai-gpt"),BJe=o(" \u2014 "),pk=a("a"),xJe=o("OpenAIGPTTokenizer"),kJe=o(" or "),_k=a("a"),RJe=o("OpenAIGPTTokenizerFast"),SJe=o(" (OpenAI GPT model)"),PJe=l(),ys=a("li"),SJ=a("strong"),$Je=o("pegasus"),IJe=o(" \u2014 "),uk=a("a"),jJe=o("PegasusTokenizer"),NJe=o(" or "),bk=a("a"),DJe=o("PegasusTokenizerFast"),qJe=o(" (Pegasus model)"),OJe=l(),Ug=a("li"),PJ=a("strong"),GJe=o("perceiver"),XJe=o(" \u2014 "),vk=a("a"),VJe=o("PerceiverTokenizer"),zJe=o(" (Perceiver model)"),WJe=l(),Jg=a("li"),$J=a("strong"),QJe=o("phobert"),HJe=o(" \u2014 "),Tk=a("a"),UJe=o("PhobertTokenizer"),JJe=o(" (PhoBERT model)"),YJe=l(),Yg=a("li"),IJ=a("strong"),KJe=o("plbart"),ZJe=o(" \u2014 "),Fk=a("a"),eYe=o("PLBartTokenizer"),oYe=o(" (PLBart model)"),rYe=l(),Kg=a("li"),jJ=a("strong"),tYe=o("prophetnet"),aYe=o(" \u2014 "),Ck=a("a"),nYe=o("ProphetNetTokenizer"),sYe=o(" (ProphetNet model)"),lYe=l(),ws=a("li"),NJ=a("strong"),iYe=o("qdqbert"),dYe=o(" \u2014 "),Mk=a("a"),cYe=o("BertTokenizer"),fYe=o(" or "),Ek=a("a"),mYe=o("BertTokenizerFast"),gYe=o(" (QDQBert model)"),hYe=l(),Zg=a("li"),DJ=a("strong"),pYe=o("rag"),_Ye=o(" \u2014 "),yk=a("a"),uYe=o("RagTokenizer"),bYe=o(" (RAG model)"),vYe=l(),As=a("li"),qJ=a("strong"),TYe=o("realm"),FYe=o(" \u2014 "),wk=a("a"),CYe=o("RealmTokenizer"),MYe=o(" or "),Ak=a("a"),EYe=o("RealmTokenizerFast"),yYe=o(" (Realm model)"),wYe=l(),Ls=a("li"),OJ=a("strong"),AYe=o("reformer"),LYe=o(" \u2014 "),Lk=a("a"),BYe=o("ReformerTokenizer"),xYe=o(" or "),Bk=a("a"),kYe=o("ReformerTokenizerFast"),RYe=o(" (Reformer model)"),SYe=l(),Bs=a("li"),GJ=a("strong"),PYe=o("rembert"),$Ye=o(" \u2014 "),xk=a("a"),IYe=o("RemBertTokenizer"),jYe=o(" or "),kk=a("a"),NYe=o("RemBertTokenizerFast"),DYe=o(" (RemBERT model)"),qYe=l(),xs=a("li"),XJ=a("strong"),OYe=o("retribert"),GYe=o(" \u2014 "),Rk=a("a"),XYe=o("RetriBertTokenizer"),VYe=o(" or "),Sk=a("a"),zYe=o("RetriBertTokenizerFast"),WYe=o(" (RetriBERT model)"),QYe=l(),ks=a("li"),VJ=a("strong"),HYe=o("roberta"),UYe=o(" \u2014 "),Pk=a("a"),JYe=o("RobertaTokenizer"),YYe=o(" or "),$k=a("a"),KYe=o("RobertaTokenizerFast"),ZYe=o(" (RoBERTa model)"),eKe=l(),Rs=a("li"),zJ=a("strong"),oKe=o("roformer"),rKe=o(" \u2014 "),Ik=a("a"),tKe=o("RoFormerTokenizer"),aKe=o(" or "),jk=a("a"),nKe=o("RoFormerTokenizerFast"),sKe=o(" (RoFormer model)"),lKe=l(),eh=a("li"),WJ=a("strong"),iKe=o("speech_to_text"),dKe=o(" \u2014 "),Nk=a("a"),cKe=o("Speech2TextTokenizer"),fKe=o(" (Speech2Text model)"),mKe=l(),oh=a("li"),QJ=a("strong"),gKe=o("speech_to_text_2"),hKe=o(" \u2014 "),Dk=a("a"),pKe=o("Speech2Text2Tokenizer"),_Ke=o(" (Speech2Text2 model)"),uKe=l(),Ss=a("li"),HJ=a("strong"),bKe=o("splinter"),vKe=o(" \u2014 "),qk=a("a"),TKe=o("SplinterTokenizer"),FKe=o(" or "),Ok=a("a"),CKe=o("SplinterTokenizerFast"),MKe=o(" (Splinter model)"),EKe=l(),Ps=a("li"),UJ=a("strong"),yKe=o("squeezebert"),wKe=o(" \u2014 "),Gk=a("a"),AKe=o("SqueezeBertTokenizer"),LKe=o(" or "),Xk=a("a"),BKe=o("SqueezeBertTokenizerFast"),xKe=o(" (SqueezeBERT model)"),kKe=l(),$s=a("li"),JJ=a("strong"),RKe=o("t5"),SKe=o(" \u2014 "),Vk=a("a"),PKe=o("T5Tokenizer"),$Ke=o(" or "),zk=a("a"),IKe=o("T5TokenizerFast"),jKe=o(" (T5 model)"),NKe=l(),rh=a("li"),YJ=a("strong"),DKe=o("tapas"),qKe=o(" \u2014 "),Wk=a("a"),OKe=o("TapasTokenizer"),GKe=o(" (TAPAS model)"),XKe=l(),th=a("li"),KJ=a("strong"),VKe=o("transfo-xl"),zKe=o(" \u2014 "),Qk=a("a"),WKe=o("TransfoXLTokenizer"),QKe=o(" (Transformer-XL model)"),HKe=l(),ah=a("li"),ZJ=a("strong"),UKe=o("wav2vec2"),JKe=o(" \u2014 "),Hk=a("a"),YKe=o("Wav2Vec2CTCTokenizer"),KKe=o(" (Wav2Vec2 model)"),ZKe=l(),nh=a("li"),eY=a("strong"),eZe=o("wav2vec2_phoneme"),oZe=o(" \u2014 "),Uk=a("a"),rZe=o("Wav2Vec2PhonemeCTCTokenizer"),tZe=o(" (Wav2Vec2Phoneme model)"),aZe=l(),Is=a("li"),oY=a("strong"),nZe=o("xglm"),sZe=o(" \u2014 "),Jk=a("a"),lZe=o("XGLMTokenizer"),iZe=o(" or "),Yk=a("a"),dZe=o("XGLMTokenizerFast"),cZe=o(" (XGLM model)"),fZe=l(),sh=a("li"),rY=a("strong"),mZe=o("xlm"),gZe=o(" \u2014 "),Kk=a("a"),hZe=o("XLMTokenizer"),pZe=o(" (XLM model)"),_Ze=l(),lh=a("li"),tY=a("strong"),uZe=o("xlm-prophetnet"),bZe=o(" \u2014 "),Zk=a("a"),vZe=o("XLMProphetNetTokenizer"),TZe=o(" (XLMProphetNet model)"),FZe=l(),js=a("li"),aY=a("strong"),CZe=o("xlm-roberta"),MZe=o(" \u2014 "),eR=a("a"),EZe=o("XLMRobertaTokenizer"),yZe=o(" or "),oR=a("a"),wZe=o("XLMRobertaTokenizerFast"),AZe=o(" (XLM-RoBERTa model)"),LZe=l(),Ns=a("li"),nY=a("strong"),BZe=o("xlnet"),xZe=o(" \u2014 "),rR=a("a"),kZe=o("XLNetTokenizer"),RZe=o(" or "),tR=a("a"),SZe=o("XLNetTokenizerFast"),PZe=o(" (XLNet model)"),$Ze=l(),sY=a("p"),IZe=o("Examples:"),jZe=l(),f(vy.$$.fragment),NZe=l(),ih=a("div"),f(Ty.$$.fragment),DZe=l(),lY=a("p"),qZe=o("Register a new tokenizer in this mapping."),Qxe=l(),Hi=a("h2"),dh=a("a"),iY=a("span"),f(Fy.$$.fragment),OZe=l(),dY=a("span"),GZe=o("AutoFeatureExtractor"),Hxe=l(),Ho=a("div"),f(Cy.$$.fragment),XZe=l(),My=a("p"),VZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aR=a("a"),zZe=o("AutoFeatureExtractor.from_pretrained()"),WZe=o(" class method."),QZe=l(),Ey=a("p"),HZe=o("This class cannot be instantiated directly using "),cY=a("code"),UZe=o("__init__()"),JZe=o(" (throws an error)."),YZe=l(),Ie=a("div"),f(yy.$$.fragment),KZe=l(),fY=a("p"),ZZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),eeo=l(),Xa=a("p"),oeo=o("The feature extractor class to instantiate is selected based on the "),mY=a("code"),reo=o("model_type"),teo=o(` property of the config object
(either passed as an argument or loaded from `),gY=a("code"),aeo=o("pretrained_model_name_or_path"),neo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hY=a("code"),seo=o("pretrained_model_name_or_path"),leo=o(":"),ieo=l(),re=a("ul"),ch=a("li"),pY=a("strong"),deo=o("beit"),ceo=o(" \u2014 "),nR=a("a"),feo=o("BeitFeatureExtractor"),meo=o(" (BEiT model)"),geo=l(),fh=a("li"),_Y=a("strong"),heo=o("clip"),peo=o(" \u2014 "),sR=a("a"),_eo=o("CLIPFeatureExtractor"),ueo=o(" (CLIP model)"),beo=l(),mh=a("li"),uY=a("strong"),veo=o("convnext"),Teo=o(" \u2014 "),lR=a("a"),Feo=o("ConvNextFeatureExtractor"),Ceo=o(" (ConvNext model)"),Meo=l(),gh=a("li"),bY=a("strong"),Eeo=o("deit"),yeo=o(" \u2014 "),iR=a("a"),weo=o("DeiTFeatureExtractor"),Aeo=o(" (DeiT model)"),Leo=l(),hh=a("li"),vY=a("strong"),Beo=o("detr"),xeo=o(" \u2014 "),dR=a("a"),keo=o("DetrFeatureExtractor"),Reo=o(" (DETR model)"),Seo=l(),ph=a("li"),TY=a("strong"),Peo=o("hubert"),$eo=o(" \u2014 "),cR=a("a"),Ieo=o("Wav2Vec2FeatureExtractor"),jeo=o(" (Hubert model)"),Neo=l(),_h=a("li"),FY=a("strong"),Deo=o("layoutlmv2"),qeo=o(" \u2014 "),fR=a("a"),Oeo=o("LayoutLMv2FeatureExtractor"),Geo=o(" (LayoutLMv2 model)"),Xeo=l(),uh=a("li"),CY=a("strong"),Veo=o("maskformer"),zeo=o(" \u2014 "),mR=a("a"),Weo=o("MaskFormerFeatureExtractor"),Qeo=o(" (MaskFormer model)"),Heo=l(),bh=a("li"),MY=a("strong"),Ueo=o("perceiver"),Jeo=o(" \u2014 "),gR=a("a"),Yeo=o("PerceiverFeatureExtractor"),Keo=o(" (Perceiver model)"),Zeo=l(),vh=a("li"),EY=a("strong"),eoo=o("poolformer"),ooo=o(" \u2014 "),hR=a("a"),roo=o("PoolFormerFeatureExtractor"),too=o(" (PoolFormer model)"),aoo=l(),Th=a("li"),yY=a("strong"),noo=o("resnet"),soo=o(" \u2014 "),pR=a("a"),loo=o("ConvNextFeatureExtractor"),ioo=o(" (ResNet model)"),doo=l(),Fh=a("li"),wY=a("strong"),coo=o("segformer"),foo=o(" \u2014 "),_R=a("a"),moo=o("SegformerFeatureExtractor"),goo=o(" (SegFormer model)"),hoo=l(),Ch=a("li"),AY=a("strong"),poo=o("speech_to_text"),_oo=o(" \u2014 "),uR=a("a"),uoo=o("Speech2TextFeatureExtractor"),boo=o(" (Speech2Text model)"),voo=l(),Mh=a("li"),LY=a("strong"),Too=o("swin"),Foo=o(" \u2014 "),bR=a("a"),Coo=o("ViTFeatureExtractor"),Moo=o(" (Swin model)"),Eoo=l(),Eh=a("li"),BY=a("strong"),yoo=o("van"),woo=o(" \u2014 "),vR=a("a"),Aoo=o("ConvNextFeatureExtractor"),Loo=o(" (VAN model)"),Boo=l(),yh=a("li"),xY=a("strong"),xoo=o("vit"),koo=o(" \u2014 "),TR=a("a"),Roo=o("ViTFeatureExtractor"),Soo=o(" (ViT model)"),Poo=l(),wh=a("li"),kY=a("strong"),$oo=o("vit_mae"),Ioo=o(" \u2014 "),FR=a("a"),joo=o("ViTFeatureExtractor"),Noo=o(" (ViTMAE model)"),Doo=l(),Ah=a("li"),RY=a("strong"),qoo=o("wav2vec2"),Ooo=o(" \u2014 "),CR=a("a"),Goo=o("Wav2Vec2FeatureExtractor"),Xoo=o(" (Wav2Vec2 model)"),Voo=l(),f(Lh.$$.fragment),zoo=l(),SY=a("p"),Woo=o("Examples:"),Qoo=l(),f(wy.$$.fragment),Hoo=l(),Bh=a("div"),f(Ay.$$.fragment),Uoo=l(),PY=a("p"),Joo=o("Register a new feature extractor for this class."),Uxe=l(),Ui=a("h2"),xh=a("a"),$Y=a("span"),f(Ly.$$.fragment),Yoo=l(),IY=a("span"),Koo=o("AutoProcessor"),Jxe=l(),Uo=a("div"),f(By.$$.fragment),Zoo=l(),xy=a("p"),ero=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MR=a("a"),oro=o("AutoProcessor.from_pretrained()"),rro=o(" class method."),tro=l(),ky=a("p"),aro=o("This class cannot be instantiated directly using "),jY=a("code"),nro=o("__init__()"),sro=o(" (throws an error)."),lro=l(),je=a("div"),f(Ry.$$.fragment),iro=l(),NY=a("p"),dro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cro=l(),Ji=a("p"),fro=o("The processor class to instantiate is selected based on the "),DY=a("code"),mro=o("model_type"),gro=o(` property of the config object (either
passed as an argument or loaded from `),qY=a("code"),hro=o("pretrained_model_name_or_path"),pro=o(" if possible):"),_ro=l(),xe=a("ul"),kh=a("li"),OY=a("strong"),uro=o("clip"),bro=o(" \u2014 "),ER=a("a"),vro=o("CLIPProcessor"),Tro=o(" (CLIP model)"),Fro=l(),Rh=a("li"),GY=a("strong"),Cro=o("layoutlmv2"),Mro=o(" \u2014 "),yR=a("a"),Ero=o("LayoutLMv2Processor"),yro=o(" (LayoutLMv2 model)"),wro=l(),Sh=a("li"),XY=a("strong"),Aro=o("layoutxlm"),Lro=o(" \u2014 "),wR=a("a"),Bro=o("LayoutXLMProcessor"),xro=o(" (LayoutXLM model)"),kro=l(),Ph=a("li"),VY=a("strong"),Rro=o("speech_to_text"),Sro=o(" \u2014 "),AR=a("a"),Pro=o("Speech2TextProcessor"),$ro=o(" (Speech2Text model)"),Iro=l(),$h=a("li"),zY=a("strong"),jro=o("speech_to_text_2"),Nro=o(" \u2014 "),LR=a("a"),Dro=o("Speech2Text2Processor"),qro=o(" (Speech2Text2 model)"),Oro=l(),Ih=a("li"),WY=a("strong"),Gro=o("trocr"),Xro=o(" \u2014 "),BR=a("a"),Vro=o("TrOCRProcessor"),zro=o(" (TrOCR model)"),Wro=l(),jh=a("li"),QY=a("strong"),Qro=o("vision-text-dual-encoder"),Hro=o(" \u2014 "),xR=a("a"),Uro=o("VisionTextDualEncoderProcessor"),Jro=o(" (VisionTextDualEncoder model)"),Yro=l(),Nh=a("li"),HY=a("strong"),Kro=o("wav2vec2"),Zro=o(" \u2014 "),kR=a("a"),eto=o("Wav2Vec2Processor"),oto=o(" (Wav2Vec2 model)"),rto=l(),f(Dh.$$.fragment),tto=l(),UY=a("p"),ato=o("Examples:"),nto=l(),f(Sy.$$.fragment),sto=l(),qh=a("div"),f(Py.$$.fragment),lto=l(),JY=a("p"),ito=o("Register a new processor for this class."),Yxe=l(),Yi=a("h2"),Oh=a("a"),YY=a("span"),f($y.$$.fragment),dto=l(),KY=a("span"),cto=o("AutoModel"),Kxe=l(),Jo=a("div"),f(Iy.$$.fragment),fto=l(),Ki=a("p"),mto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZY=a("code"),gto=o("from_pretrained()"),hto=o("class method or the "),eK=a("code"),pto=o("from_config()"),_to=o(`class
method.`),uto=l(),jy=a("p"),bto=o("This class cannot be instantiated directly using "),oK=a("code"),vto=o("__init__()"),Tto=o(" (throws an error)."),Fto=l(),Vr=a("div"),f(Ny.$$.fragment),Cto=l(),rK=a("p"),Mto=o("Instantiates one of the base model classes of the library from a configuration."),Eto=l(),Zi=a("p"),yto=o(`Note:
Loading a model from its configuration file does `),tK=a("strong"),wto=o("not"),Ato=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("code"),Lto=o("from_pretrained()"),Bto=o("to load the model weights."),xto=l(),nK=a("p"),kto=o("Examples:"),Rto=l(),f(Dy.$$.fragment),Sto=l(),Ne=a("div"),f(qy.$$.fragment),Pto=l(),sK=a("p"),$to=o("Instantiate one of the base model classes of the library from a pretrained model."),Ito=l(),Va=a("p"),jto=o("The model class to instantiate is selected based on the "),lK=a("code"),Nto=o("model_type"),Dto=o(` property of the config object (either
passed as an argument or loaded from `),iK=a("code"),qto=o("pretrained_model_name_or_path"),Oto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dK=a("code"),Gto=o("pretrained_model_name_or_path"),Xto=o(":"),Vto=l(),F=a("ul"),Gh=a("li"),cK=a("strong"),zto=o("albert"),Wto=o(" \u2014 "),RR=a("a"),Qto=o("AlbertModel"),Hto=o(" (ALBERT model)"),Uto=l(),Xh=a("li"),fK=a("strong"),Jto=o("bart"),Yto=o(" \u2014 "),SR=a("a"),Kto=o("BartModel"),Zto=o(" (BART model)"),eao=l(),Vh=a("li"),mK=a("strong"),oao=o("beit"),rao=o(" \u2014 "),PR=a("a"),tao=o("BeitModel"),aao=o(" (BEiT model)"),nao=l(),zh=a("li"),gK=a("strong"),sao=o("bert"),lao=o(" \u2014 "),$R=a("a"),iao=o("BertModel"),dao=o(" (BERT model)"),cao=l(),Wh=a("li"),hK=a("strong"),fao=o("bert-generation"),mao=o(" \u2014 "),IR=a("a"),gao=o("BertGenerationEncoder"),hao=o(" (Bert Generation model)"),pao=l(),Qh=a("li"),pK=a("strong"),_ao=o("big_bird"),uao=o(" \u2014 "),jR=a("a"),bao=o("BigBirdModel"),vao=o(" (BigBird model)"),Tao=l(),Hh=a("li"),_K=a("strong"),Fao=o("bigbird_pegasus"),Cao=o(" \u2014 "),NR=a("a"),Mao=o("BigBirdPegasusModel"),Eao=o(" (BigBirdPegasus model)"),yao=l(),Uh=a("li"),uK=a("strong"),wao=o("blenderbot"),Aao=o(" \u2014 "),DR=a("a"),Lao=o("BlenderbotModel"),Bao=o(" (Blenderbot model)"),xao=l(),Jh=a("li"),bK=a("strong"),kao=o("blenderbot-small"),Rao=o(" \u2014 "),qR=a("a"),Sao=o("BlenderbotSmallModel"),Pao=o(" (BlenderbotSmall model)"),$ao=l(),Yh=a("li"),vK=a("strong"),Iao=o("camembert"),jao=o(" \u2014 "),OR=a("a"),Nao=o("CamembertModel"),Dao=o(" (CamemBERT model)"),qao=l(),Kh=a("li"),TK=a("strong"),Oao=o("canine"),Gao=o(" \u2014 "),GR=a("a"),Xao=o("CanineModel"),Vao=o(" (Canine model)"),zao=l(),Zh=a("li"),FK=a("strong"),Wao=o("clip"),Qao=o(" \u2014 "),XR=a("a"),Hao=o("CLIPModel"),Uao=o(" (CLIP model)"),Jao=l(),ep=a("li"),CK=a("strong"),Yao=o("convbert"),Kao=o(" \u2014 "),VR=a("a"),Zao=o("ConvBertModel"),eno=o(" (ConvBERT model)"),ono=l(),op=a("li"),MK=a("strong"),rno=o("convnext"),tno=o(" \u2014 "),zR=a("a"),ano=o("ConvNextModel"),nno=o(" (ConvNext model)"),sno=l(),rp=a("li"),EK=a("strong"),lno=o("ctrl"),ino=o(" \u2014 "),WR=a("a"),dno=o("CTRLModel"),cno=o(" (CTRL model)"),fno=l(),tp=a("li"),yK=a("strong"),mno=o("data2vec-audio"),gno=o(" \u2014 "),QR=a("a"),hno=o("Data2VecAudioModel"),pno=o(" (Data2VecAudio model)"),_no=l(),ap=a("li"),wK=a("strong"),uno=o("data2vec-text"),bno=o(" \u2014 "),HR=a("a"),vno=o("Data2VecTextModel"),Tno=o(" (Data2VecText model)"),Fno=l(),np=a("li"),AK=a("strong"),Cno=o("deberta"),Mno=o(" \u2014 "),UR=a("a"),Eno=o("DebertaModel"),yno=o(" (DeBERTa model)"),wno=l(),sp=a("li"),LK=a("strong"),Ano=o("deberta-v2"),Lno=o(" \u2014 "),JR=a("a"),Bno=o("DebertaV2Model"),xno=o(" (DeBERTa-v2 model)"),kno=l(),lp=a("li"),BK=a("strong"),Rno=o("deit"),Sno=o(" \u2014 "),YR=a("a"),Pno=o("DeiTModel"),$no=o(" (DeiT model)"),Ino=l(),ip=a("li"),xK=a("strong"),jno=o("detr"),Nno=o(" \u2014 "),KR=a("a"),Dno=o("DetrModel"),qno=o(" (DETR model)"),Ono=l(),dp=a("li"),kK=a("strong"),Gno=o("distilbert"),Xno=o(" \u2014 "),ZR=a("a"),Vno=o("DistilBertModel"),zno=o(" (DistilBERT model)"),Wno=l(),cp=a("li"),RK=a("strong"),Qno=o("dpr"),Hno=o(" \u2014 "),eS=a("a"),Uno=o("DPRQuestionEncoder"),Jno=o(" (DPR model)"),Yno=l(),fp=a("li"),SK=a("strong"),Kno=o("electra"),Zno=o(" \u2014 "),oS=a("a"),eso=o("ElectraModel"),oso=o(" (ELECTRA model)"),rso=l(),mp=a("li"),PK=a("strong"),tso=o("flaubert"),aso=o(" \u2014 "),rS=a("a"),nso=o("FlaubertModel"),sso=o(" (FlauBERT model)"),lso=l(),gp=a("li"),$K=a("strong"),iso=o("fnet"),dso=o(" \u2014 "),tS=a("a"),cso=o("FNetModel"),fso=o(" (FNet model)"),mso=l(),hp=a("li"),IK=a("strong"),gso=o("fsmt"),hso=o(" \u2014 "),aS=a("a"),pso=o("FSMTModel"),_so=o(" (FairSeq Machine-Translation model)"),uso=l(),Ds=a("li"),jK=a("strong"),bso=o("funnel"),vso=o(" \u2014 "),nS=a("a"),Tso=o("FunnelModel"),Fso=o(" or "),sS=a("a"),Cso=o("FunnelBaseModel"),Mso=o(" (Funnel Transformer model)"),Eso=l(),pp=a("li"),NK=a("strong"),yso=o("gpt2"),wso=o(" \u2014 "),lS=a("a"),Aso=o("GPT2Model"),Lso=o(" (OpenAI GPT-2 model)"),Bso=l(),_p=a("li"),DK=a("strong"),xso=o("gpt_neo"),kso=o(" \u2014 "),iS=a("a"),Rso=o("GPTNeoModel"),Sso=o(" (GPT Neo model)"),Pso=l(),up=a("li"),qK=a("strong"),$so=o("gptj"),Iso=o(" \u2014 "),dS=a("a"),jso=o("GPTJModel"),Nso=o(" (GPT-J model)"),Dso=l(),bp=a("li"),OK=a("strong"),qso=o("hubert"),Oso=o(" \u2014 "),cS=a("a"),Gso=o("HubertModel"),Xso=o(" (Hubert model)"),Vso=l(),vp=a("li"),GK=a("strong"),zso=o("ibert"),Wso=o(" \u2014 "),fS=a("a"),Qso=o("IBertModel"),Hso=o(" (I-BERT model)"),Uso=l(),Tp=a("li"),XK=a("strong"),Jso=o("imagegpt"),Yso=o(" \u2014 "),mS=a("a"),Kso=o("ImageGPTModel"),Zso=o(" (ImageGPT model)"),elo=l(),Fp=a("li"),VK=a("strong"),olo=o("layoutlm"),rlo=o(" \u2014 "),gS=a("a"),tlo=o("LayoutLMModel"),alo=o(" (LayoutLM model)"),nlo=l(),Cp=a("li"),zK=a("strong"),slo=o("layoutlmv2"),llo=o(" \u2014 "),hS=a("a"),ilo=o("LayoutLMv2Model"),dlo=o(" (LayoutLMv2 model)"),clo=l(),Mp=a("li"),WK=a("strong"),flo=o("led"),mlo=o(" \u2014 "),pS=a("a"),glo=o("LEDModel"),hlo=o(" (LED model)"),plo=l(),Ep=a("li"),QK=a("strong"),_lo=o("longformer"),ulo=o(" \u2014 "),_S=a("a"),blo=o("LongformerModel"),vlo=o(" (Longformer model)"),Tlo=l(),yp=a("li"),HK=a("strong"),Flo=o("luke"),Clo=o(" \u2014 "),uS=a("a"),Mlo=o("LukeModel"),Elo=o(" (LUKE model)"),ylo=l(),wp=a("li"),UK=a("strong"),wlo=o("lxmert"),Alo=o(" \u2014 "),bS=a("a"),Llo=o("LxmertModel"),Blo=o(" (LXMERT model)"),xlo=l(),Ap=a("li"),JK=a("strong"),klo=o("m2m_100"),Rlo=o(" \u2014 "),vS=a("a"),Slo=o("M2M100Model"),Plo=o(" (M2M100 model)"),$lo=l(),Lp=a("li"),YK=a("strong"),Ilo=o("marian"),jlo=o(" \u2014 "),TS=a("a"),Nlo=o("MarianModel"),Dlo=o(" (Marian model)"),qlo=l(),Bp=a("li"),KK=a("strong"),Olo=o("maskformer"),Glo=o(" \u2014 "),FS=a("a"),Xlo=o("MaskFormerModel"),Vlo=o(" (MaskFormer model)"),zlo=l(),xp=a("li"),ZK=a("strong"),Wlo=o("mbart"),Qlo=o(" \u2014 "),CS=a("a"),Hlo=o("MBartModel"),Ulo=o(" (mBART model)"),Jlo=l(),kp=a("li"),eZ=a("strong"),Ylo=o("megatron-bert"),Klo=o(" \u2014 "),MS=a("a"),Zlo=o("MegatronBertModel"),eio=o(" (MegatronBert model)"),oio=l(),Rp=a("li"),oZ=a("strong"),rio=o("mobilebert"),tio=o(" \u2014 "),ES=a("a"),aio=o("MobileBertModel"),nio=o(" (MobileBERT model)"),sio=l(),Sp=a("li"),rZ=a("strong"),lio=o("mpnet"),iio=o(" \u2014 "),yS=a("a"),dio=o("MPNetModel"),cio=o(" (MPNet model)"),fio=l(),Pp=a("li"),tZ=a("strong"),mio=o("mt5"),gio=o(" \u2014 "),wS=a("a"),hio=o("MT5Model"),pio=o(" (mT5 model)"),_io=l(),$p=a("li"),aZ=a("strong"),uio=o("nystromformer"),bio=o(" \u2014 "),AS=a("a"),vio=o("NystromformerModel"),Tio=o(" (Nystromformer model)"),Fio=l(),Ip=a("li"),nZ=a("strong"),Cio=o("openai-gpt"),Mio=o(" \u2014 "),LS=a("a"),Eio=o("OpenAIGPTModel"),yio=o(" (OpenAI GPT model)"),wio=l(),jp=a("li"),sZ=a("strong"),Aio=o("pegasus"),Lio=o(" \u2014 "),BS=a("a"),Bio=o("PegasusModel"),xio=o(" (Pegasus model)"),kio=l(),Np=a("li"),lZ=a("strong"),Rio=o("perceiver"),Sio=o(" \u2014 "),xS=a("a"),Pio=o("PerceiverModel"),$io=o(" (Perceiver model)"),Iio=l(),Dp=a("li"),iZ=a("strong"),jio=o("plbart"),Nio=o(" \u2014 "),kS=a("a"),Dio=o("PLBartModel"),qio=o(" (PLBart model)"),Oio=l(),qp=a("li"),dZ=a("strong"),Gio=o("poolformer"),Xio=o(" \u2014 "),RS=a("a"),Vio=o("PoolFormerModel"),zio=o(" (PoolFormer model)"),Wio=l(),Op=a("li"),cZ=a("strong"),Qio=o("prophetnet"),Hio=o(" \u2014 "),SS=a("a"),Uio=o("ProphetNetModel"),Jio=o(" (ProphetNet model)"),Yio=l(),Gp=a("li"),fZ=a("strong"),Kio=o("qdqbert"),Zio=o(" \u2014 "),PS=a("a"),edo=o("QDQBertModel"),odo=o(" (QDQBert model)"),rdo=l(),Xp=a("li"),mZ=a("strong"),tdo=o("reformer"),ado=o(" \u2014 "),$S=a("a"),ndo=o("ReformerModel"),sdo=o(" (Reformer model)"),ldo=l(),Vp=a("li"),gZ=a("strong"),ido=o("rembert"),ddo=o(" \u2014 "),IS=a("a"),cdo=o("RemBertModel"),fdo=o(" (RemBERT model)"),mdo=l(),zp=a("li"),hZ=a("strong"),gdo=o("resnet"),hdo=o(" \u2014 "),jS=a("a"),pdo=o("ResNetModel"),_do=o(" (ResNet model)"),udo=l(),Wp=a("li"),pZ=a("strong"),bdo=o("retribert"),vdo=o(" \u2014 "),NS=a("a"),Tdo=o("RetriBertModel"),Fdo=o(" (RetriBERT model)"),Cdo=l(),Qp=a("li"),_Z=a("strong"),Mdo=o("roberta"),Edo=o(" \u2014 "),DS=a("a"),ydo=o("RobertaModel"),wdo=o(" (RoBERTa model)"),Ado=l(),Hp=a("li"),uZ=a("strong"),Ldo=o("roformer"),Bdo=o(" \u2014 "),qS=a("a"),xdo=o("RoFormerModel"),kdo=o(" (RoFormer model)"),Rdo=l(),Up=a("li"),bZ=a("strong"),Sdo=o("segformer"),Pdo=o(" \u2014 "),OS=a("a"),$do=o("SegformerModel"),Ido=o(" (SegFormer model)"),jdo=l(),Jp=a("li"),vZ=a("strong"),Ndo=o("sew"),Ddo=o(" \u2014 "),GS=a("a"),qdo=o("SEWModel"),Odo=o(" (SEW model)"),Gdo=l(),Yp=a("li"),TZ=a("strong"),Xdo=o("sew-d"),Vdo=o(" \u2014 "),XS=a("a"),zdo=o("SEWDModel"),Wdo=o(" (SEW-D model)"),Qdo=l(),Kp=a("li"),FZ=a("strong"),Hdo=o("speech_to_text"),Udo=o(" \u2014 "),VS=a("a"),Jdo=o("Speech2TextModel"),Ydo=o(" (Speech2Text model)"),Kdo=l(),Zp=a("li"),CZ=a("strong"),Zdo=o("splinter"),eco=o(" \u2014 "),zS=a("a"),oco=o("SplinterModel"),rco=o(" (Splinter model)"),tco=l(),e_=a("li"),MZ=a("strong"),aco=o("squeezebert"),nco=o(" \u2014 "),WS=a("a"),sco=o("SqueezeBertModel"),lco=o(" (SqueezeBERT model)"),ico=l(),o_=a("li"),EZ=a("strong"),dco=o("swin"),cco=o(" \u2014 "),QS=a("a"),fco=o("SwinModel"),mco=o(" (Swin model)"),gco=l(),r_=a("li"),yZ=a("strong"),hco=o("t5"),pco=o(" \u2014 "),HS=a("a"),_co=o("T5Model"),uco=o(" (T5 model)"),bco=l(),t_=a("li"),wZ=a("strong"),vco=o("tapas"),Tco=o(" \u2014 "),US=a("a"),Fco=o("TapasModel"),Cco=o(" (TAPAS model)"),Mco=l(),a_=a("li"),AZ=a("strong"),Eco=o("transfo-xl"),yco=o(" \u2014 "),JS=a("a"),wco=o("TransfoXLModel"),Aco=o(" (Transformer-XL model)"),Lco=l(),n_=a("li"),LZ=a("strong"),Bco=o("unispeech"),xco=o(" \u2014 "),YS=a("a"),kco=o("UniSpeechModel"),Rco=o(" (UniSpeech model)"),Sco=l(),s_=a("li"),BZ=a("strong"),Pco=o("unispeech-sat"),$co=o(" \u2014 "),KS=a("a"),Ico=o("UniSpeechSatModel"),jco=o(" (UniSpeechSat model)"),Nco=l(),l_=a("li"),xZ=a("strong"),Dco=o("van"),qco=o(" \u2014 "),ZS=a("a"),Oco=o("VanModel"),Gco=o(" (VAN model)"),Xco=l(),i_=a("li"),kZ=a("strong"),Vco=o("vilt"),zco=o(" \u2014 "),eP=a("a"),Wco=o("ViltModel"),Qco=o(" (ViLT model)"),Hco=l(),d_=a("li"),RZ=a("strong"),Uco=o("vision-text-dual-encoder"),Jco=o(" \u2014 "),oP=a("a"),Yco=o("VisionTextDualEncoderModel"),Kco=o(" (VisionTextDualEncoder model)"),Zco=l(),c_=a("li"),SZ=a("strong"),efo=o("visual_bert"),ofo=o(" \u2014 "),rP=a("a"),rfo=o("VisualBertModel"),tfo=o(" (VisualBert model)"),afo=l(),f_=a("li"),PZ=a("strong"),nfo=o("vit"),sfo=o(" \u2014 "),tP=a("a"),lfo=o("ViTModel"),ifo=o(" (ViT model)"),dfo=l(),m_=a("li"),$Z=a("strong"),cfo=o("vit_mae"),ffo=o(" \u2014 "),aP=a("a"),mfo=o("ViTMAEModel"),gfo=o(" (ViTMAE model)"),hfo=l(),g_=a("li"),IZ=a("strong"),pfo=o("wav2vec2"),_fo=o(" \u2014 "),nP=a("a"),ufo=o("Wav2Vec2Model"),bfo=o(" (Wav2Vec2 model)"),vfo=l(),h_=a("li"),jZ=a("strong"),Tfo=o("wavlm"),Ffo=o(" \u2014 "),sP=a("a"),Cfo=o("WavLMModel"),Mfo=o(" (WavLM model)"),Efo=l(),p_=a("li"),NZ=a("strong"),yfo=o("xglm"),wfo=o(" \u2014 "),lP=a("a"),Afo=o("XGLMModel"),Lfo=o(" (XGLM model)"),Bfo=l(),__=a("li"),DZ=a("strong"),xfo=o("xlm"),kfo=o(" \u2014 "),iP=a("a"),Rfo=o("XLMModel"),Sfo=o(" (XLM model)"),Pfo=l(),u_=a("li"),qZ=a("strong"),$fo=o("xlm-prophetnet"),Ifo=o(" \u2014 "),dP=a("a"),jfo=o("XLMProphetNetModel"),Nfo=o(" (XLMProphetNet model)"),Dfo=l(),b_=a("li"),OZ=a("strong"),qfo=o("xlm-roberta"),Ofo=o(" \u2014 "),cP=a("a"),Gfo=o("XLMRobertaModel"),Xfo=o(" (XLM-RoBERTa model)"),Vfo=l(),v_=a("li"),GZ=a("strong"),zfo=o("xlm-roberta-xl"),Wfo=o(" \u2014 "),fP=a("a"),Qfo=o("XLMRobertaXLModel"),Hfo=o(" (XLM-RoBERTa-XL model)"),Ufo=l(),T_=a("li"),XZ=a("strong"),Jfo=o("xlnet"),Yfo=o(" \u2014 "),mP=a("a"),Kfo=o("XLNetModel"),Zfo=o(" (XLNet model)"),emo=l(),F_=a("li"),VZ=a("strong"),omo=o("yoso"),rmo=o(" \u2014 "),gP=a("a"),tmo=o("YosoModel"),amo=o(" (YOSO model)"),nmo=l(),C_=a("p"),smo=o("The model is set in evaluation mode by default using "),zZ=a("code"),lmo=o("model.eval()"),imo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WZ=a("code"),dmo=o("model.train()"),cmo=l(),QZ=a("p"),fmo=o("Examples:"),mmo=l(),f(Oy.$$.fragment),Zxe=l(),ed=a("h2"),M_=a("a"),HZ=a("span"),f(Gy.$$.fragment),gmo=l(),UZ=a("span"),hmo=o("AutoModelForPreTraining"),eke=l(),Yo=a("div"),f(Xy.$$.fragment),pmo=l(),od=a("p"),_mo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JZ=a("code"),umo=o("from_pretrained()"),bmo=o("class method or the "),YZ=a("code"),vmo=o("from_config()"),Tmo=o(`class
method.`),Fmo=l(),Vy=a("p"),Cmo=o("This class cannot be instantiated directly using "),KZ=a("code"),Mmo=o("__init__()"),Emo=o(" (throws an error)."),ymo=l(),zr=a("div"),f(zy.$$.fragment),wmo=l(),ZZ=a("p"),Amo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lmo=l(),rd=a("p"),Bmo=o(`Note:
Loading a model from its configuration file does `),eee=a("strong"),xmo=o("not"),kmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("code"),Rmo=o("from_pretrained()"),Smo=o("to load the model weights."),Pmo=l(),ree=a("p"),$mo=o("Examples:"),Imo=l(),f(Wy.$$.fragment),jmo=l(),De=a("div"),f(Qy.$$.fragment),Nmo=l(),tee=a("p"),Dmo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qmo=l(),za=a("p"),Omo=o("The model class to instantiate is selected based on the "),aee=a("code"),Gmo=o("model_type"),Xmo=o(` property of the config object (either
passed as an argument or loaded from `),nee=a("code"),Vmo=o("pretrained_model_name_or_path"),zmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),see=a("code"),Wmo=o("pretrained_model_name_or_path"),Qmo=o(":"),Hmo=l(),k=a("ul"),E_=a("li"),lee=a("strong"),Umo=o("albert"),Jmo=o(" \u2014 "),hP=a("a"),Ymo=o("AlbertForPreTraining"),Kmo=o(" (ALBERT model)"),Zmo=l(),y_=a("li"),iee=a("strong"),ego=o("bart"),ogo=o(" \u2014 "),pP=a("a"),rgo=o("BartForConditionalGeneration"),tgo=o(" (BART model)"),ago=l(),w_=a("li"),dee=a("strong"),ngo=o("bert"),sgo=o(" \u2014 "),_P=a("a"),lgo=o("BertForPreTraining"),igo=o(" (BERT model)"),dgo=l(),A_=a("li"),cee=a("strong"),cgo=o("big_bird"),fgo=o(" \u2014 "),uP=a("a"),mgo=o("BigBirdForPreTraining"),ggo=o(" (BigBird model)"),hgo=l(),L_=a("li"),fee=a("strong"),pgo=o("camembert"),_go=o(" \u2014 "),bP=a("a"),ugo=o("CamembertForMaskedLM"),bgo=o(" (CamemBERT model)"),vgo=l(),B_=a("li"),mee=a("strong"),Tgo=o("ctrl"),Fgo=o(" \u2014 "),vP=a("a"),Cgo=o("CTRLLMHeadModel"),Mgo=o(" (CTRL model)"),Ego=l(),x_=a("li"),gee=a("strong"),ygo=o("data2vec-text"),wgo=o(" \u2014 "),TP=a("a"),Ago=o("Data2VecTextForMaskedLM"),Lgo=o(" (Data2VecText model)"),Bgo=l(),k_=a("li"),hee=a("strong"),xgo=o("deberta"),kgo=o(" \u2014 "),FP=a("a"),Rgo=o("DebertaForMaskedLM"),Sgo=o(" (DeBERTa model)"),Pgo=l(),R_=a("li"),pee=a("strong"),$go=o("deberta-v2"),Igo=o(" \u2014 "),CP=a("a"),jgo=o("DebertaV2ForMaskedLM"),Ngo=o(" (DeBERTa-v2 model)"),Dgo=l(),S_=a("li"),_ee=a("strong"),qgo=o("distilbert"),Ogo=o(" \u2014 "),MP=a("a"),Ggo=o("DistilBertForMaskedLM"),Xgo=o(" (DistilBERT model)"),Vgo=l(),P_=a("li"),uee=a("strong"),zgo=o("electra"),Wgo=o(" \u2014 "),EP=a("a"),Qgo=o("ElectraForPreTraining"),Hgo=o(" (ELECTRA model)"),Ugo=l(),$_=a("li"),bee=a("strong"),Jgo=o("flaubert"),Ygo=o(" \u2014 "),yP=a("a"),Kgo=o("FlaubertWithLMHeadModel"),Zgo=o(" (FlauBERT model)"),eho=l(),I_=a("li"),vee=a("strong"),oho=o("fnet"),rho=o(" \u2014 "),wP=a("a"),tho=o("FNetForPreTraining"),aho=o(" (FNet model)"),nho=l(),j_=a("li"),Tee=a("strong"),sho=o("fsmt"),lho=o(" \u2014 "),AP=a("a"),iho=o("FSMTForConditionalGeneration"),dho=o(" (FairSeq Machine-Translation model)"),cho=l(),N_=a("li"),Fee=a("strong"),fho=o("funnel"),mho=o(" \u2014 "),LP=a("a"),gho=o("FunnelForPreTraining"),hho=o(" (Funnel Transformer model)"),pho=l(),D_=a("li"),Cee=a("strong"),_ho=o("gpt2"),uho=o(" \u2014 "),BP=a("a"),bho=o("GPT2LMHeadModel"),vho=o(" (OpenAI GPT-2 model)"),Tho=l(),q_=a("li"),Mee=a("strong"),Fho=o("ibert"),Cho=o(" \u2014 "),xP=a("a"),Mho=o("IBertForMaskedLM"),Eho=o(" (I-BERT model)"),yho=l(),O_=a("li"),Eee=a("strong"),who=o("layoutlm"),Aho=o(" \u2014 "),kP=a("a"),Lho=o("LayoutLMForMaskedLM"),Bho=o(" (LayoutLM model)"),xho=l(),G_=a("li"),yee=a("strong"),kho=o("longformer"),Rho=o(" \u2014 "),RP=a("a"),Sho=o("LongformerForMaskedLM"),Pho=o(" (Longformer model)"),$ho=l(),X_=a("li"),wee=a("strong"),Iho=o("lxmert"),jho=o(" \u2014 "),SP=a("a"),Nho=o("LxmertForPreTraining"),Dho=o(" (LXMERT model)"),qho=l(),V_=a("li"),Aee=a("strong"),Oho=o("megatron-bert"),Gho=o(" \u2014 "),PP=a("a"),Xho=o("MegatronBertForPreTraining"),Vho=o(" (MegatronBert model)"),zho=l(),z_=a("li"),Lee=a("strong"),Who=o("mobilebert"),Qho=o(" \u2014 "),$P=a("a"),Hho=o("MobileBertForPreTraining"),Uho=o(" (MobileBERT model)"),Jho=l(),W_=a("li"),Bee=a("strong"),Yho=o("mpnet"),Kho=o(" \u2014 "),IP=a("a"),Zho=o("MPNetForMaskedLM"),epo=o(" (MPNet model)"),opo=l(),Q_=a("li"),xee=a("strong"),rpo=o("openai-gpt"),tpo=o(" \u2014 "),jP=a("a"),apo=o("OpenAIGPTLMHeadModel"),npo=o(" (OpenAI GPT model)"),spo=l(),H_=a("li"),kee=a("strong"),lpo=o("retribert"),ipo=o(" \u2014 "),NP=a("a"),dpo=o("RetriBertModel"),cpo=o(" (RetriBERT model)"),fpo=l(),U_=a("li"),Ree=a("strong"),mpo=o("roberta"),gpo=o(" \u2014 "),DP=a("a"),hpo=o("RobertaForMaskedLM"),ppo=o(" (RoBERTa model)"),_po=l(),J_=a("li"),See=a("strong"),upo=o("squeezebert"),bpo=o(" \u2014 "),qP=a("a"),vpo=o("SqueezeBertForMaskedLM"),Tpo=o(" (SqueezeBERT model)"),Fpo=l(),Y_=a("li"),Pee=a("strong"),Cpo=o("t5"),Mpo=o(" \u2014 "),OP=a("a"),Epo=o("T5ForConditionalGeneration"),ypo=o(" (T5 model)"),wpo=l(),K_=a("li"),$ee=a("strong"),Apo=o("tapas"),Lpo=o(" \u2014 "),GP=a("a"),Bpo=o("TapasForMaskedLM"),xpo=o(" (TAPAS model)"),kpo=l(),Z_=a("li"),Iee=a("strong"),Rpo=o("transfo-xl"),Spo=o(" \u2014 "),XP=a("a"),Ppo=o("TransfoXLLMHeadModel"),$po=o(" (Transformer-XL model)"),Ipo=l(),eu=a("li"),jee=a("strong"),jpo=o("unispeech"),Npo=o(" \u2014 "),VP=a("a"),Dpo=o("UniSpeechForPreTraining"),qpo=o(" (UniSpeech model)"),Opo=l(),ou=a("li"),Nee=a("strong"),Gpo=o("unispeech-sat"),Xpo=o(" \u2014 "),zP=a("a"),Vpo=o("UniSpeechSatForPreTraining"),zpo=o(" (UniSpeechSat model)"),Wpo=l(),ru=a("li"),Dee=a("strong"),Qpo=o("visual_bert"),Hpo=o(" \u2014 "),WP=a("a"),Upo=o("VisualBertForPreTraining"),Jpo=o(" (VisualBert model)"),Ypo=l(),tu=a("li"),qee=a("strong"),Kpo=o("vit_mae"),Zpo=o(" \u2014 "),QP=a("a"),e_o=o("ViTMAEForPreTraining"),o_o=o(" (ViTMAE model)"),r_o=l(),au=a("li"),Oee=a("strong"),t_o=o("wav2vec2"),a_o=o(" \u2014 "),HP=a("a"),n_o=o("Wav2Vec2ForPreTraining"),s_o=o(" (Wav2Vec2 model)"),l_o=l(),nu=a("li"),Gee=a("strong"),i_o=o("xlm"),d_o=o(" \u2014 "),UP=a("a"),c_o=o("XLMWithLMHeadModel"),f_o=o(" (XLM model)"),m_o=l(),su=a("li"),Xee=a("strong"),g_o=o("xlm-roberta"),h_o=o(" \u2014 "),JP=a("a"),p_o=o("XLMRobertaForMaskedLM"),__o=o(" (XLM-RoBERTa model)"),u_o=l(),lu=a("li"),Vee=a("strong"),b_o=o("xlm-roberta-xl"),v_o=o(" \u2014 "),YP=a("a"),T_o=o("XLMRobertaXLForMaskedLM"),F_o=o(" (XLM-RoBERTa-XL model)"),C_o=l(),iu=a("li"),zee=a("strong"),M_o=o("xlnet"),E_o=o(" \u2014 "),KP=a("a"),y_o=o("XLNetLMHeadModel"),w_o=o(" (XLNet model)"),A_o=l(),du=a("p"),L_o=o("The model is set in evaluation mode by default using "),Wee=a("code"),B_o=o("model.eval()"),x_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qee=a("code"),k_o=o("model.train()"),R_o=l(),Hee=a("p"),S_o=o("Examples:"),P_o=l(),f(Hy.$$.fragment),oke=l(),td=a("h2"),cu=a("a"),Uee=a("span"),f(Uy.$$.fragment),$_o=l(),Jee=a("span"),I_o=o("AutoModelForCausalLM"),rke=l(),Ko=a("div"),f(Jy.$$.fragment),j_o=l(),ad=a("p"),N_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Yee=a("code"),D_o=o("from_pretrained()"),q_o=o("class method or the "),Kee=a("code"),O_o=o("from_config()"),G_o=o(`class
method.`),X_o=l(),Yy=a("p"),V_o=o("This class cannot be instantiated directly using "),Zee=a("code"),z_o=o("__init__()"),W_o=o(" (throws an error)."),Q_o=l(),Wr=a("div"),f(Ky.$$.fragment),H_o=l(),eoe=a("p"),U_o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J_o=l(),nd=a("p"),Y_o=o(`Note:
Loading a model from its configuration file does `),ooe=a("strong"),K_o=o("not"),Z_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=a("code"),euo=o("from_pretrained()"),ouo=o("to load the model weights."),ruo=l(),toe=a("p"),tuo=o("Examples:"),auo=l(),f(Zy.$$.fragment),nuo=l(),qe=a("div"),f(ew.$$.fragment),suo=l(),aoe=a("p"),luo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iuo=l(),Wa=a("p"),duo=o("The model class to instantiate is selected based on the "),noe=a("code"),cuo=o("model_type"),fuo=o(` property of the config object (either
passed as an argument or loaded from `),soe=a("code"),muo=o("pretrained_model_name_or_path"),guo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),loe=a("code"),huo=o("pretrained_model_name_or_path"),puo=o(":"),_uo=l(),$=a("ul"),fu=a("li"),ioe=a("strong"),uuo=o("bart"),buo=o(" \u2014 "),ZP=a("a"),vuo=o("BartForCausalLM"),Tuo=o(" (BART model)"),Fuo=l(),mu=a("li"),doe=a("strong"),Cuo=o("bert"),Muo=o(" \u2014 "),e$=a("a"),Euo=o("BertLMHeadModel"),yuo=o(" (BERT model)"),wuo=l(),gu=a("li"),coe=a("strong"),Auo=o("bert-generation"),Luo=o(" \u2014 "),o$=a("a"),Buo=o("BertGenerationDecoder"),xuo=o(" (Bert Generation model)"),kuo=l(),hu=a("li"),foe=a("strong"),Ruo=o("big_bird"),Suo=o(" \u2014 "),r$=a("a"),Puo=o("BigBirdForCausalLM"),$uo=o(" (BigBird model)"),Iuo=l(),pu=a("li"),moe=a("strong"),juo=o("bigbird_pegasus"),Nuo=o(" \u2014 "),t$=a("a"),Duo=o("BigBirdPegasusForCausalLM"),quo=o(" (BigBirdPegasus model)"),Ouo=l(),_u=a("li"),goe=a("strong"),Guo=o("blenderbot"),Xuo=o(" \u2014 "),a$=a("a"),Vuo=o("BlenderbotForCausalLM"),zuo=o(" (Blenderbot model)"),Wuo=l(),uu=a("li"),hoe=a("strong"),Quo=o("blenderbot-small"),Huo=o(" \u2014 "),n$=a("a"),Uuo=o("BlenderbotSmallForCausalLM"),Juo=o(" (BlenderbotSmall model)"),Yuo=l(),bu=a("li"),poe=a("strong"),Kuo=o("camembert"),Zuo=o(" \u2014 "),s$=a("a"),ebo=o("CamembertForCausalLM"),obo=o(" (CamemBERT model)"),rbo=l(),vu=a("li"),_oe=a("strong"),tbo=o("ctrl"),abo=o(" \u2014 "),l$=a("a"),nbo=o("CTRLLMHeadModel"),sbo=o(" (CTRL model)"),lbo=l(),Tu=a("li"),uoe=a("strong"),ibo=o("data2vec-text"),dbo=o(" \u2014 "),i$=a("a"),cbo=o("Data2VecTextForCausalLM"),fbo=o(" (Data2VecText model)"),mbo=l(),Fu=a("li"),boe=a("strong"),gbo=o("electra"),hbo=o(" \u2014 "),d$=a("a"),pbo=o("ElectraForCausalLM"),_bo=o(" (ELECTRA model)"),ubo=l(),Cu=a("li"),voe=a("strong"),bbo=o("gpt2"),vbo=o(" \u2014 "),c$=a("a"),Tbo=o("GPT2LMHeadModel"),Fbo=o(" (OpenAI GPT-2 model)"),Cbo=l(),Mu=a("li"),Toe=a("strong"),Mbo=o("gpt_neo"),Ebo=o(" \u2014 "),f$=a("a"),ybo=o("GPTNeoForCausalLM"),wbo=o(" (GPT Neo model)"),Abo=l(),Eu=a("li"),Foe=a("strong"),Lbo=o("gptj"),Bbo=o(" \u2014 "),m$=a("a"),xbo=o("GPTJForCausalLM"),kbo=o(" (GPT-J model)"),Rbo=l(),yu=a("li"),Coe=a("strong"),Sbo=o("marian"),Pbo=o(" \u2014 "),g$=a("a"),$bo=o("MarianForCausalLM"),Ibo=o(" (Marian model)"),jbo=l(),wu=a("li"),Moe=a("strong"),Nbo=o("mbart"),Dbo=o(" \u2014 "),h$=a("a"),qbo=o("MBartForCausalLM"),Obo=o(" (mBART model)"),Gbo=l(),Au=a("li"),Eoe=a("strong"),Xbo=o("megatron-bert"),Vbo=o(" \u2014 "),p$=a("a"),zbo=o("MegatronBertForCausalLM"),Wbo=o(" (MegatronBert model)"),Qbo=l(),Lu=a("li"),yoe=a("strong"),Hbo=o("openai-gpt"),Ubo=o(" \u2014 "),_$=a("a"),Jbo=o("OpenAIGPTLMHeadModel"),Ybo=o(" (OpenAI GPT model)"),Kbo=l(),Bu=a("li"),woe=a("strong"),Zbo=o("pegasus"),e3o=o(" \u2014 "),u$=a("a"),o3o=o("PegasusForCausalLM"),r3o=o(" (Pegasus model)"),t3o=l(),xu=a("li"),Aoe=a("strong"),a3o=o("plbart"),n3o=o(" \u2014 "),b$=a("a"),s3o=o("PLBartForCausalLM"),l3o=o(" (PLBart model)"),i3o=l(),ku=a("li"),Loe=a("strong"),d3o=o("prophetnet"),c3o=o(" \u2014 "),v$=a("a"),f3o=o("ProphetNetForCausalLM"),m3o=o(" (ProphetNet model)"),g3o=l(),Ru=a("li"),Boe=a("strong"),h3o=o("qdqbert"),p3o=o(" \u2014 "),T$=a("a"),_3o=o("QDQBertLMHeadModel"),u3o=o(" (QDQBert model)"),b3o=l(),Su=a("li"),xoe=a("strong"),v3o=o("reformer"),T3o=o(" \u2014 "),F$=a("a"),F3o=o("ReformerModelWithLMHead"),C3o=o(" (Reformer model)"),M3o=l(),Pu=a("li"),koe=a("strong"),E3o=o("rembert"),y3o=o(" \u2014 "),C$=a("a"),w3o=o("RemBertForCausalLM"),A3o=o(" (RemBERT model)"),L3o=l(),$u=a("li"),Roe=a("strong"),B3o=o("roberta"),x3o=o(" \u2014 "),M$=a("a"),k3o=o("RobertaForCausalLM"),R3o=o(" (RoBERTa model)"),S3o=l(),Iu=a("li"),Soe=a("strong"),P3o=o("roformer"),$3o=o(" \u2014 "),E$=a("a"),I3o=o("RoFormerForCausalLM"),j3o=o(" (RoFormer model)"),N3o=l(),ju=a("li"),Poe=a("strong"),D3o=o("speech_to_text_2"),q3o=o(" \u2014 "),y$=a("a"),O3o=o("Speech2Text2ForCausalLM"),G3o=o(" (Speech2Text2 model)"),X3o=l(),Nu=a("li"),$oe=a("strong"),V3o=o("transfo-xl"),z3o=o(" \u2014 "),w$=a("a"),W3o=o("TransfoXLLMHeadModel"),Q3o=o(" (Transformer-XL model)"),H3o=l(),Du=a("li"),Ioe=a("strong"),U3o=o("trocr"),J3o=o(" \u2014 "),A$=a("a"),Y3o=o("TrOCRForCausalLM"),K3o=o(" (TrOCR model)"),Z3o=l(),qu=a("li"),joe=a("strong"),e2o=o("xglm"),o2o=o(" \u2014 "),L$=a("a"),r2o=o("XGLMForCausalLM"),t2o=o(" (XGLM model)"),a2o=l(),Ou=a("li"),Noe=a("strong"),n2o=o("xlm"),s2o=o(" \u2014 "),B$=a("a"),l2o=o("XLMWithLMHeadModel"),i2o=o(" (XLM model)"),d2o=l(),Gu=a("li"),Doe=a("strong"),c2o=o("xlm-prophetnet"),f2o=o(" \u2014 "),x$=a("a"),m2o=o("XLMProphetNetForCausalLM"),g2o=o(" (XLMProphetNet model)"),h2o=l(),Xu=a("li"),qoe=a("strong"),p2o=o("xlm-roberta"),_2o=o(" \u2014 "),k$=a("a"),u2o=o("XLMRobertaForCausalLM"),b2o=o(" (XLM-RoBERTa model)"),v2o=l(),Vu=a("li"),Ooe=a("strong"),T2o=o("xlm-roberta-xl"),F2o=o(" \u2014 "),R$=a("a"),C2o=o("XLMRobertaXLForCausalLM"),M2o=o(" (XLM-RoBERTa-XL model)"),E2o=l(),zu=a("li"),Goe=a("strong"),y2o=o("xlnet"),w2o=o(" \u2014 "),S$=a("a"),A2o=o("XLNetLMHeadModel"),L2o=o(" (XLNet model)"),B2o=l(),Wu=a("p"),x2o=o("The model is set in evaluation mode by default using "),Xoe=a("code"),k2o=o("model.eval()"),R2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Voe=a("code"),S2o=o("model.train()"),P2o=l(),zoe=a("p"),$2o=o("Examples:"),I2o=l(),f(ow.$$.fragment),tke=l(),sd=a("h2"),Qu=a("a"),Woe=a("span"),f(rw.$$.fragment),j2o=l(),Qoe=a("span"),N2o=o("AutoModelForMaskedLM"),ake=l(),Zo=a("div"),f(tw.$$.fragment),D2o=l(),ld=a("p"),q2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hoe=a("code"),O2o=o("from_pretrained()"),G2o=o("class method or the "),Uoe=a("code"),X2o=o("from_config()"),V2o=o(`class
method.`),z2o=l(),aw=a("p"),W2o=o("This class cannot be instantiated directly using "),Joe=a("code"),Q2o=o("__init__()"),H2o=o(" (throws an error)."),U2o=l(),Qr=a("div"),f(nw.$$.fragment),J2o=l(),Yoe=a("p"),Y2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),K2o=l(),id=a("p"),Z2o=o(`Note:
Loading a model from its configuration file does `),Koe=a("strong"),evo=o("not"),ovo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("code"),rvo=o("from_pretrained()"),tvo=o("to load the model weights."),avo=l(),ere=a("p"),nvo=o("Examples:"),svo=l(),f(sw.$$.fragment),lvo=l(),Oe=a("div"),f(lw.$$.fragment),ivo=l(),ore=a("p"),dvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cvo=l(),Qa=a("p"),fvo=o("The model class to instantiate is selected based on the "),rre=a("code"),mvo=o("model_type"),gvo=o(` property of the config object (either
passed as an argument or loaded from `),tre=a("code"),hvo=o("pretrained_model_name_or_path"),pvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),are=a("code"),_vo=o("pretrained_model_name_or_path"),uvo=o(":"),bvo=l(),I=a("ul"),Hu=a("li"),nre=a("strong"),vvo=o("albert"),Tvo=o(" \u2014 "),P$=a("a"),Fvo=o("AlbertForMaskedLM"),Cvo=o(" (ALBERT model)"),Mvo=l(),Uu=a("li"),sre=a("strong"),Evo=o("bart"),yvo=o(" \u2014 "),$$=a("a"),wvo=o("BartForConditionalGeneration"),Avo=o(" (BART model)"),Lvo=l(),Ju=a("li"),lre=a("strong"),Bvo=o("bert"),xvo=o(" \u2014 "),I$=a("a"),kvo=o("BertForMaskedLM"),Rvo=o(" (BERT model)"),Svo=l(),Yu=a("li"),ire=a("strong"),Pvo=o("big_bird"),$vo=o(" \u2014 "),j$=a("a"),Ivo=o("BigBirdForMaskedLM"),jvo=o(" (BigBird model)"),Nvo=l(),Ku=a("li"),dre=a("strong"),Dvo=o("camembert"),qvo=o(" \u2014 "),N$=a("a"),Ovo=o("CamembertForMaskedLM"),Gvo=o(" (CamemBERT model)"),Xvo=l(),Zu=a("li"),cre=a("strong"),Vvo=o("convbert"),zvo=o(" \u2014 "),D$=a("a"),Wvo=o("ConvBertForMaskedLM"),Qvo=o(" (ConvBERT model)"),Hvo=l(),eb=a("li"),fre=a("strong"),Uvo=o("data2vec-text"),Jvo=o(" \u2014 "),q$=a("a"),Yvo=o("Data2VecTextForMaskedLM"),Kvo=o(" (Data2VecText model)"),Zvo=l(),ob=a("li"),mre=a("strong"),eTo=o("deberta"),oTo=o(" \u2014 "),O$=a("a"),rTo=o("DebertaForMaskedLM"),tTo=o(" (DeBERTa model)"),aTo=l(),rb=a("li"),gre=a("strong"),nTo=o("deberta-v2"),sTo=o(" \u2014 "),G$=a("a"),lTo=o("DebertaV2ForMaskedLM"),iTo=o(" (DeBERTa-v2 model)"),dTo=l(),tb=a("li"),hre=a("strong"),cTo=o("distilbert"),fTo=o(" \u2014 "),X$=a("a"),mTo=o("DistilBertForMaskedLM"),gTo=o(" (DistilBERT model)"),hTo=l(),ab=a("li"),pre=a("strong"),pTo=o("electra"),_To=o(" \u2014 "),V$=a("a"),uTo=o("ElectraForMaskedLM"),bTo=o(" (ELECTRA model)"),vTo=l(),nb=a("li"),_re=a("strong"),TTo=o("flaubert"),FTo=o(" \u2014 "),z$=a("a"),CTo=o("FlaubertWithLMHeadModel"),MTo=o(" (FlauBERT model)"),ETo=l(),sb=a("li"),ure=a("strong"),yTo=o("fnet"),wTo=o(" \u2014 "),W$=a("a"),ATo=o("FNetForMaskedLM"),LTo=o(" (FNet model)"),BTo=l(),lb=a("li"),bre=a("strong"),xTo=o("funnel"),kTo=o(" \u2014 "),Q$=a("a"),RTo=o("FunnelForMaskedLM"),STo=o(" (Funnel Transformer model)"),PTo=l(),ib=a("li"),vre=a("strong"),$To=o("ibert"),ITo=o(" \u2014 "),H$=a("a"),jTo=o("IBertForMaskedLM"),NTo=o(" (I-BERT model)"),DTo=l(),db=a("li"),Tre=a("strong"),qTo=o("layoutlm"),OTo=o(" \u2014 "),U$=a("a"),GTo=o("LayoutLMForMaskedLM"),XTo=o(" (LayoutLM model)"),VTo=l(),cb=a("li"),Fre=a("strong"),zTo=o("longformer"),WTo=o(" \u2014 "),J$=a("a"),QTo=o("LongformerForMaskedLM"),HTo=o(" (Longformer model)"),UTo=l(),fb=a("li"),Cre=a("strong"),JTo=o("mbart"),YTo=o(" \u2014 "),Y$=a("a"),KTo=o("MBartForConditionalGeneration"),ZTo=o(" (mBART model)"),e1o=l(),mb=a("li"),Mre=a("strong"),o1o=o("megatron-bert"),r1o=o(" \u2014 "),K$=a("a"),t1o=o("MegatronBertForMaskedLM"),a1o=o(" (MegatronBert model)"),n1o=l(),gb=a("li"),Ere=a("strong"),s1o=o("mobilebert"),l1o=o(" \u2014 "),Z$=a("a"),i1o=o("MobileBertForMaskedLM"),d1o=o(" (MobileBERT model)"),c1o=l(),hb=a("li"),yre=a("strong"),f1o=o("mpnet"),m1o=o(" \u2014 "),eI=a("a"),g1o=o("MPNetForMaskedLM"),h1o=o(" (MPNet model)"),p1o=l(),pb=a("li"),wre=a("strong"),_1o=o("nystromformer"),u1o=o(" \u2014 "),oI=a("a"),b1o=o("NystromformerForMaskedLM"),v1o=o(" (Nystromformer model)"),T1o=l(),_b=a("li"),Are=a("strong"),F1o=o("perceiver"),C1o=o(" \u2014 "),rI=a("a"),M1o=o("PerceiverForMaskedLM"),E1o=o(" (Perceiver model)"),y1o=l(),ub=a("li"),Lre=a("strong"),w1o=o("qdqbert"),A1o=o(" \u2014 "),tI=a("a"),L1o=o("QDQBertForMaskedLM"),B1o=o(" (QDQBert model)"),x1o=l(),bb=a("li"),Bre=a("strong"),k1o=o("reformer"),R1o=o(" \u2014 "),aI=a("a"),S1o=o("ReformerForMaskedLM"),P1o=o(" (Reformer model)"),$1o=l(),vb=a("li"),xre=a("strong"),I1o=o("rembert"),j1o=o(" \u2014 "),nI=a("a"),N1o=o("RemBertForMaskedLM"),D1o=o(" (RemBERT model)"),q1o=l(),Tb=a("li"),kre=a("strong"),O1o=o("roberta"),G1o=o(" \u2014 "),sI=a("a"),X1o=o("RobertaForMaskedLM"),V1o=o(" (RoBERTa model)"),z1o=l(),Fb=a("li"),Rre=a("strong"),W1o=o("roformer"),Q1o=o(" \u2014 "),lI=a("a"),H1o=o("RoFormerForMaskedLM"),U1o=o(" (RoFormer model)"),J1o=l(),Cb=a("li"),Sre=a("strong"),Y1o=o("squeezebert"),K1o=o(" \u2014 "),iI=a("a"),Z1o=o("SqueezeBertForMaskedLM"),eFo=o(" (SqueezeBERT model)"),oFo=l(),Mb=a("li"),Pre=a("strong"),rFo=o("tapas"),tFo=o(" \u2014 "),dI=a("a"),aFo=o("TapasForMaskedLM"),nFo=o(" (TAPAS model)"),sFo=l(),Eb=a("li"),$re=a("strong"),lFo=o("wav2vec2"),iFo=o(" \u2014 "),Ire=a("code"),dFo=o("Wav2Vec2ForMaskedLM"),cFo=o("(Wav2Vec2 model)"),fFo=l(),yb=a("li"),jre=a("strong"),mFo=o("xlm"),gFo=o(" \u2014 "),cI=a("a"),hFo=o("XLMWithLMHeadModel"),pFo=o(" (XLM model)"),_Fo=l(),wb=a("li"),Nre=a("strong"),uFo=o("xlm-roberta"),bFo=o(" \u2014 "),fI=a("a"),vFo=o("XLMRobertaForMaskedLM"),TFo=o(" (XLM-RoBERTa model)"),FFo=l(),Ab=a("li"),Dre=a("strong"),CFo=o("xlm-roberta-xl"),MFo=o(" \u2014 "),mI=a("a"),EFo=o("XLMRobertaXLForMaskedLM"),yFo=o(" (XLM-RoBERTa-XL model)"),wFo=l(),Lb=a("li"),qre=a("strong"),AFo=o("yoso"),LFo=o(" \u2014 "),gI=a("a"),BFo=o("YosoForMaskedLM"),xFo=o(" (YOSO model)"),kFo=l(),Bb=a("p"),RFo=o("The model is set in evaluation mode by default using "),Ore=a("code"),SFo=o("model.eval()"),PFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gre=a("code"),$Fo=o("model.train()"),IFo=l(),Xre=a("p"),jFo=o("Examples:"),NFo=l(),f(iw.$$.fragment),nke=l(),dd=a("h2"),xb=a("a"),Vre=a("span"),f(dw.$$.fragment),DFo=l(),zre=a("span"),qFo=o("AutoModelForSeq2SeqLM"),ske=l(),er=a("div"),f(cw.$$.fragment),OFo=l(),cd=a("p"),GFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wre=a("code"),XFo=o("from_pretrained()"),VFo=o("class method or the "),Qre=a("code"),zFo=o("from_config()"),WFo=o(`class
method.`),QFo=l(),fw=a("p"),HFo=o("This class cannot be instantiated directly using "),Hre=a("code"),UFo=o("__init__()"),JFo=o(" (throws an error)."),YFo=l(),Hr=a("div"),f(mw.$$.fragment),KFo=l(),Ure=a("p"),ZFo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eCo=l(),fd=a("p"),oCo=o(`Note:
Loading a model from its configuration file does `),Jre=a("strong"),rCo=o("not"),tCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yre=a("code"),aCo=o("from_pretrained()"),nCo=o("to load the model weights."),sCo=l(),Kre=a("p"),lCo=o("Examples:"),iCo=l(),f(gw.$$.fragment),dCo=l(),Ge=a("div"),f(hw.$$.fragment),cCo=l(),Zre=a("p"),fCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mCo=l(),Ha=a("p"),gCo=o("The model class to instantiate is selected based on the "),ete=a("code"),hCo=o("model_type"),pCo=o(` property of the config object (either
passed as an argument or loaded from `),ote=a("code"),_Co=o("pretrained_model_name_or_path"),uCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rte=a("code"),bCo=o("pretrained_model_name_or_path"),vCo=o(":"),TCo=l(),se=a("ul"),kb=a("li"),tte=a("strong"),FCo=o("bart"),CCo=o(" \u2014 "),hI=a("a"),MCo=o("BartForConditionalGeneration"),ECo=o(" (BART model)"),yCo=l(),Rb=a("li"),ate=a("strong"),wCo=o("bigbird_pegasus"),ACo=o(" \u2014 "),pI=a("a"),LCo=o("BigBirdPegasusForConditionalGeneration"),BCo=o(" (BigBirdPegasus model)"),xCo=l(),Sb=a("li"),nte=a("strong"),kCo=o("blenderbot"),RCo=o(" \u2014 "),_I=a("a"),SCo=o("BlenderbotForConditionalGeneration"),PCo=o(" (Blenderbot model)"),$Co=l(),Pb=a("li"),ste=a("strong"),ICo=o("blenderbot-small"),jCo=o(" \u2014 "),uI=a("a"),NCo=o("BlenderbotSmallForConditionalGeneration"),DCo=o(" (BlenderbotSmall model)"),qCo=l(),$b=a("li"),lte=a("strong"),OCo=o("encoder-decoder"),GCo=o(" \u2014 "),bI=a("a"),XCo=o("EncoderDecoderModel"),VCo=o(" (Encoder decoder model)"),zCo=l(),Ib=a("li"),ite=a("strong"),WCo=o("fsmt"),QCo=o(" \u2014 "),vI=a("a"),HCo=o("FSMTForConditionalGeneration"),UCo=o(" (FairSeq Machine-Translation model)"),JCo=l(),jb=a("li"),dte=a("strong"),YCo=o("led"),KCo=o(" \u2014 "),TI=a("a"),ZCo=o("LEDForConditionalGeneration"),eMo=o(" (LED model)"),oMo=l(),Nb=a("li"),cte=a("strong"),rMo=o("m2m_100"),tMo=o(" \u2014 "),FI=a("a"),aMo=o("M2M100ForConditionalGeneration"),nMo=o(" (M2M100 model)"),sMo=l(),Db=a("li"),fte=a("strong"),lMo=o("marian"),iMo=o(" \u2014 "),CI=a("a"),dMo=o("MarianMTModel"),cMo=o(" (Marian model)"),fMo=l(),qb=a("li"),mte=a("strong"),mMo=o("mbart"),gMo=o(" \u2014 "),MI=a("a"),hMo=o("MBartForConditionalGeneration"),pMo=o(" (mBART model)"),_Mo=l(),Ob=a("li"),gte=a("strong"),uMo=o("mt5"),bMo=o(" \u2014 "),EI=a("a"),vMo=o("MT5ForConditionalGeneration"),TMo=o(" (mT5 model)"),FMo=l(),Gb=a("li"),hte=a("strong"),CMo=o("pegasus"),MMo=o(" \u2014 "),yI=a("a"),EMo=o("PegasusForConditionalGeneration"),yMo=o(" (Pegasus model)"),wMo=l(),Xb=a("li"),pte=a("strong"),AMo=o("plbart"),LMo=o(" \u2014 "),wI=a("a"),BMo=o("PLBartForConditionalGeneration"),xMo=o(" (PLBart model)"),kMo=l(),Vb=a("li"),_te=a("strong"),RMo=o("prophetnet"),SMo=o(" \u2014 "),AI=a("a"),PMo=o("ProphetNetForConditionalGeneration"),$Mo=o(" (ProphetNet model)"),IMo=l(),zb=a("li"),ute=a("strong"),jMo=o("t5"),NMo=o(" \u2014 "),LI=a("a"),DMo=o("T5ForConditionalGeneration"),qMo=o(" (T5 model)"),OMo=l(),Wb=a("li"),bte=a("strong"),GMo=o("xlm-prophetnet"),XMo=o(" \u2014 "),BI=a("a"),VMo=o("XLMProphetNetForConditionalGeneration"),zMo=o(" (XLMProphetNet model)"),WMo=l(),Qb=a("p"),QMo=o("The model is set in evaluation mode by default using "),vte=a("code"),HMo=o("model.eval()"),UMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tte=a("code"),JMo=o("model.train()"),YMo=l(),Fte=a("p"),KMo=o("Examples:"),ZMo=l(),f(pw.$$.fragment),lke=l(),md=a("h2"),Hb=a("a"),Cte=a("span"),f(_w.$$.fragment),e4o=l(),Mte=a("span"),o4o=o("AutoModelForSequenceClassification"),ike=l(),or=a("div"),f(uw.$$.fragment),r4o=l(),gd=a("p"),t4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ete=a("code"),a4o=o("from_pretrained()"),n4o=o("class method or the "),yte=a("code"),s4o=o("from_config()"),l4o=o(`class
method.`),i4o=l(),bw=a("p"),d4o=o("This class cannot be instantiated directly using "),wte=a("code"),c4o=o("__init__()"),f4o=o(" (throws an error)."),m4o=l(),Ur=a("div"),f(vw.$$.fragment),g4o=l(),Ate=a("p"),h4o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p4o=l(),hd=a("p"),_4o=o(`Note:
Loading a model from its configuration file does `),Lte=a("strong"),u4o=o("not"),b4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=a("code"),v4o=o("from_pretrained()"),T4o=o("to load the model weights."),F4o=l(),xte=a("p"),C4o=o("Examples:"),M4o=l(),f(Tw.$$.fragment),E4o=l(),Xe=a("div"),f(Fw.$$.fragment),y4o=l(),kte=a("p"),w4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A4o=l(),Ua=a("p"),L4o=o("The model class to instantiate is selected based on the "),Rte=a("code"),B4o=o("model_type"),x4o=o(` property of the config object (either
passed as an argument or loaded from `),Ste=a("code"),k4o=o("pretrained_model_name_or_path"),R4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=a("code"),S4o=o("pretrained_model_name_or_path"),P4o=o(":"),$4o=l(),A=a("ul"),Ub=a("li"),$te=a("strong"),I4o=o("albert"),j4o=o(" \u2014 "),xI=a("a"),N4o=o("AlbertForSequenceClassification"),D4o=o(" (ALBERT model)"),q4o=l(),Jb=a("li"),Ite=a("strong"),O4o=o("bart"),G4o=o(" \u2014 "),kI=a("a"),X4o=o("BartForSequenceClassification"),V4o=o(" (BART model)"),z4o=l(),Yb=a("li"),jte=a("strong"),W4o=o("bert"),Q4o=o(" \u2014 "),RI=a("a"),H4o=o("BertForSequenceClassification"),U4o=o(" (BERT model)"),J4o=l(),Kb=a("li"),Nte=a("strong"),Y4o=o("big_bird"),K4o=o(" \u2014 "),SI=a("a"),Z4o=o("BigBirdForSequenceClassification"),eEo=o(" (BigBird model)"),oEo=l(),Zb=a("li"),Dte=a("strong"),rEo=o("bigbird_pegasus"),tEo=o(" \u2014 "),PI=a("a"),aEo=o("BigBirdPegasusForSequenceClassification"),nEo=o(" (BigBirdPegasus model)"),sEo=l(),e3=a("li"),qte=a("strong"),lEo=o("camembert"),iEo=o(" \u2014 "),$I=a("a"),dEo=o("CamembertForSequenceClassification"),cEo=o(" (CamemBERT model)"),fEo=l(),o3=a("li"),Ote=a("strong"),mEo=o("canine"),gEo=o(" \u2014 "),II=a("a"),hEo=o("CanineForSequenceClassification"),pEo=o(" (Canine model)"),_Eo=l(),r3=a("li"),Gte=a("strong"),uEo=o("convbert"),bEo=o(" \u2014 "),jI=a("a"),vEo=o("ConvBertForSequenceClassification"),TEo=o(" (ConvBERT model)"),FEo=l(),t3=a("li"),Xte=a("strong"),CEo=o("ctrl"),MEo=o(" \u2014 "),NI=a("a"),EEo=o("CTRLForSequenceClassification"),yEo=o(" (CTRL model)"),wEo=l(),a3=a("li"),Vte=a("strong"),AEo=o("data2vec-text"),LEo=o(" \u2014 "),DI=a("a"),BEo=o("Data2VecTextForSequenceClassification"),xEo=o(" (Data2VecText model)"),kEo=l(),n3=a("li"),zte=a("strong"),REo=o("deberta"),SEo=o(" \u2014 "),qI=a("a"),PEo=o("DebertaForSequenceClassification"),$Eo=o(" (DeBERTa model)"),IEo=l(),s3=a("li"),Wte=a("strong"),jEo=o("deberta-v2"),NEo=o(" \u2014 "),OI=a("a"),DEo=o("DebertaV2ForSequenceClassification"),qEo=o(" (DeBERTa-v2 model)"),OEo=l(),l3=a("li"),Qte=a("strong"),GEo=o("distilbert"),XEo=o(" \u2014 "),GI=a("a"),VEo=o("DistilBertForSequenceClassification"),zEo=o(" (DistilBERT model)"),WEo=l(),i3=a("li"),Hte=a("strong"),QEo=o("electra"),HEo=o(" \u2014 "),XI=a("a"),UEo=o("ElectraForSequenceClassification"),JEo=o(" (ELECTRA model)"),YEo=l(),d3=a("li"),Ute=a("strong"),KEo=o("flaubert"),ZEo=o(" \u2014 "),VI=a("a"),e5o=o("FlaubertForSequenceClassification"),o5o=o(" (FlauBERT model)"),r5o=l(),c3=a("li"),Jte=a("strong"),t5o=o("fnet"),a5o=o(" \u2014 "),zI=a("a"),n5o=o("FNetForSequenceClassification"),s5o=o(" (FNet model)"),l5o=l(),f3=a("li"),Yte=a("strong"),i5o=o("funnel"),d5o=o(" \u2014 "),WI=a("a"),c5o=o("FunnelForSequenceClassification"),f5o=o(" (Funnel Transformer model)"),m5o=l(),m3=a("li"),Kte=a("strong"),g5o=o("gpt2"),h5o=o(" \u2014 "),QI=a("a"),p5o=o("GPT2ForSequenceClassification"),_5o=o(" (OpenAI GPT-2 model)"),u5o=l(),g3=a("li"),Zte=a("strong"),b5o=o("gpt_neo"),v5o=o(" \u2014 "),HI=a("a"),T5o=o("GPTNeoForSequenceClassification"),F5o=o(" (GPT Neo model)"),C5o=l(),h3=a("li"),eae=a("strong"),M5o=o("gptj"),E5o=o(" \u2014 "),UI=a("a"),y5o=o("GPTJForSequenceClassification"),w5o=o(" (GPT-J model)"),A5o=l(),p3=a("li"),oae=a("strong"),L5o=o("ibert"),B5o=o(" \u2014 "),JI=a("a"),x5o=o("IBertForSequenceClassification"),k5o=o(" (I-BERT model)"),R5o=l(),_3=a("li"),rae=a("strong"),S5o=o("layoutlm"),P5o=o(" \u2014 "),YI=a("a"),$5o=o("LayoutLMForSequenceClassification"),I5o=o(" (LayoutLM model)"),j5o=l(),u3=a("li"),tae=a("strong"),N5o=o("layoutlmv2"),D5o=o(" \u2014 "),KI=a("a"),q5o=o("LayoutLMv2ForSequenceClassification"),O5o=o(" (LayoutLMv2 model)"),G5o=l(),b3=a("li"),aae=a("strong"),X5o=o("led"),V5o=o(" \u2014 "),ZI=a("a"),z5o=o("LEDForSequenceClassification"),W5o=o(" (LED model)"),Q5o=l(),v3=a("li"),nae=a("strong"),H5o=o("longformer"),U5o=o(" \u2014 "),ej=a("a"),J5o=o("LongformerForSequenceClassification"),Y5o=o(" (Longformer model)"),K5o=l(),T3=a("li"),sae=a("strong"),Z5o=o("mbart"),eyo=o(" \u2014 "),oj=a("a"),oyo=o("MBartForSequenceClassification"),ryo=o(" (mBART model)"),tyo=l(),F3=a("li"),lae=a("strong"),ayo=o("megatron-bert"),nyo=o(" \u2014 "),rj=a("a"),syo=o("MegatronBertForSequenceClassification"),lyo=o(" (MegatronBert model)"),iyo=l(),C3=a("li"),iae=a("strong"),dyo=o("mobilebert"),cyo=o(" \u2014 "),tj=a("a"),fyo=o("MobileBertForSequenceClassification"),myo=o(" (MobileBERT model)"),gyo=l(),M3=a("li"),dae=a("strong"),hyo=o("mpnet"),pyo=o(" \u2014 "),aj=a("a"),_yo=o("MPNetForSequenceClassification"),uyo=o(" (MPNet model)"),byo=l(),E3=a("li"),cae=a("strong"),vyo=o("nystromformer"),Tyo=o(" \u2014 "),nj=a("a"),Fyo=o("NystromformerForSequenceClassification"),Cyo=o(" (Nystromformer model)"),Myo=l(),y3=a("li"),fae=a("strong"),Eyo=o("openai-gpt"),yyo=o(" \u2014 "),sj=a("a"),wyo=o("OpenAIGPTForSequenceClassification"),Ayo=o(" (OpenAI GPT model)"),Lyo=l(),w3=a("li"),mae=a("strong"),Byo=o("perceiver"),xyo=o(" \u2014 "),lj=a("a"),kyo=o("PerceiverForSequenceClassification"),Ryo=o(" (Perceiver model)"),Syo=l(),A3=a("li"),gae=a("strong"),Pyo=o("plbart"),$yo=o(" \u2014 "),ij=a("a"),Iyo=o("PLBartForSequenceClassification"),jyo=o(" (PLBart model)"),Nyo=l(),L3=a("li"),hae=a("strong"),Dyo=o("qdqbert"),qyo=o(" \u2014 "),dj=a("a"),Oyo=o("QDQBertForSequenceClassification"),Gyo=o(" (QDQBert model)"),Xyo=l(),B3=a("li"),pae=a("strong"),Vyo=o("reformer"),zyo=o(" \u2014 "),cj=a("a"),Wyo=o("ReformerForSequenceClassification"),Qyo=o(" (Reformer model)"),Hyo=l(),x3=a("li"),_ae=a("strong"),Uyo=o("rembert"),Jyo=o(" \u2014 "),fj=a("a"),Yyo=o("RemBertForSequenceClassification"),Kyo=o(" (RemBERT model)"),Zyo=l(),k3=a("li"),uae=a("strong"),ewo=o("roberta"),owo=o(" \u2014 "),mj=a("a"),rwo=o("RobertaForSequenceClassification"),two=o(" (RoBERTa model)"),awo=l(),R3=a("li"),bae=a("strong"),nwo=o("roformer"),swo=o(" \u2014 "),gj=a("a"),lwo=o("RoFormerForSequenceClassification"),iwo=o(" (RoFormer model)"),dwo=l(),S3=a("li"),vae=a("strong"),cwo=o("squeezebert"),fwo=o(" \u2014 "),hj=a("a"),mwo=o("SqueezeBertForSequenceClassification"),gwo=o(" (SqueezeBERT model)"),hwo=l(),P3=a("li"),Tae=a("strong"),pwo=o("tapas"),_wo=o(" \u2014 "),pj=a("a"),uwo=o("TapasForSequenceClassification"),bwo=o(" (TAPAS model)"),vwo=l(),$3=a("li"),Fae=a("strong"),Two=o("transfo-xl"),Fwo=o(" \u2014 "),_j=a("a"),Cwo=o("TransfoXLForSequenceClassification"),Mwo=o(" (Transformer-XL model)"),Ewo=l(),I3=a("li"),Cae=a("strong"),ywo=o("xlm"),wwo=o(" \u2014 "),uj=a("a"),Awo=o("XLMForSequenceClassification"),Lwo=o(" (XLM model)"),Bwo=l(),j3=a("li"),Mae=a("strong"),xwo=o("xlm-roberta"),kwo=o(" \u2014 "),bj=a("a"),Rwo=o("XLMRobertaForSequenceClassification"),Swo=o(" (XLM-RoBERTa model)"),Pwo=l(),N3=a("li"),Eae=a("strong"),$wo=o("xlm-roberta-xl"),Iwo=o(" \u2014 "),vj=a("a"),jwo=o("XLMRobertaXLForSequenceClassification"),Nwo=o(" (XLM-RoBERTa-XL model)"),Dwo=l(),D3=a("li"),yae=a("strong"),qwo=o("xlnet"),Owo=o(" \u2014 "),Tj=a("a"),Gwo=o("XLNetForSequenceClassification"),Xwo=o(" (XLNet model)"),Vwo=l(),q3=a("li"),wae=a("strong"),zwo=o("yoso"),Wwo=o(" \u2014 "),Fj=a("a"),Qwo=o("YosoForSequenceClassification"),Hwo=o(" (YOSO model)"),Uwo=l(),O3=a("p"),Jwo=o("The model is set in evaluation mode by default using "),Aae=a("code"),Ywo=o("model.eval()"),Kwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=a("code"),Zwo=o("model.train()"),e6o=l(),Bae=a("p"),o6o=o("Examples:"),r6o=l(),f(Cw.$$.fragment),dke=l(),pd=a("h2"),G3=a("a"),xae=a("span"),f(Mw.$$.fragment),t6o=l(),kae=a("span"),a6o=o("AutoModelForMultipleChoice"),cke=l(),rr=a("div"),f(Ew.$$.fragment),n6o=l(),_d=a("p"),s6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rae=a("code"),l6o=o("from_pretrained()"),i6o=o("class method or the "),Sae=a("code"),d6o=o("from_config()"),c6o=o(`class
method.`),f6o=l(),yw=a("p"),m6o=o("This class cannot be instantiated directly using "),Pae=a("code"),g6o=o("__init__()"),h6o=o(" (throws an error)."),p6o=l(),Jr=a("div"),f(ww.$$.fragment),_6o=l(),$ae=a("p"),u6o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),b6o=l(),ud=a("p"),v6o=o(`Note:
Loading a model from its configuration file does `),Iae=a("strong"),T6o=o("not"),F6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=a("code"),C6o=o("from_pretrained()"),M6o=o("to load the model weights."),E6o=l(),Nae=a("p"),y6o=o("Examples:"),w6o=l(),f(Aw.$$.fragment),A6o=l(),Ve=a("div"),f(Lw.$$.fragment),L6o=l(),Dae=a("p"),B6o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x6o=l(),Ja=a("p"),k6o=o("The model class to instantiate is selected based on the "),qae=a("code"),R6o=o("model_type"),S6o=o(` property of the config object (either
passed as an argument or loaded from `),Oae=a("code"),P6o=o("pretrained_model_name_or_path"),$6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gae=a("code"),I6o=o("pretrained_model_name_or_path"),j6o=o(":"),N6o=l(),O=a("ul"),X3=a("li"),Xae=a("strong"),D6o=o("albert"),q6o=o(" \u2014 "),Cj=a("a"),O6o=o("AlbertForMultipleChoice"),G6o=o(" (ALBERT model)"),X6o=l(),V3=a("li"),Vae=a("strong"),V6o=o("bert"),z6o=o(" \u2014 "),Mj=a("a"),W6o=o("BertForMultipleChoice"),Q6o=o(" (BERT model)"),H6o=l(),z3=a("li"),zae=a("strong"),U6o=o("big_bird"),J6o=o(" \u2014 "),Ej=a("a"),Y6o=o("BigBirdForMultipleChoice"),K6o=o(" (BigBird model)"),Z6o=l(),W3=a("li"),Wae=a("strong"),eAo=o("camembert"),oAo=o(" \u2014 "),yj=a("a"),rAo=o("CamembertForMultipleChoice"),tAo=o(" (CamemBERT model)"),aAo=l(),Q3=a("li"),Qae=a("strong"),nAo=o("canine"),sAo=o(" \u2014 "),wj=a("a"),lAo=o("CanineForMultipleChoice"),iAo=o(" (Canine model)"),dAo=l(),H3=a("li"),Hae=a("strong"),cAo=o("convbert"),fAo=o(" \u2014 "),Aj=a("a"),mAo=o("ConvBertForMultipleChoice"),gAo=o(" (ConvBERT model)"),hAo=l(),U3=a("li"),Uae=a("strong"),pAo=o("data2vec-text"),_Ao=o(" \u2014 "),Lj=a("a"),uAo=o("Data2VecTextForMultipleChoice"),bAo=o(" (Data2VecText model)"),vAo=l(),J3=a("li"),Jae=a("strong"),TAo=o("distilbert"),FAo=o(" \u2014 "),Bj=a("a"),CAo=o("DistilBertForMultipleChoice"),MAo=o(" (DistilBERT model)"),EAo=l(),Y3=a("li"),Yae=a("strong"),yAo=o("electra"),wAo=o(" \u2014 "),xj=a("a"),AAo=o("ElectraForMultipleChoice"),LAo=o(" (ELECTRA model)"),BAo=l(),K3=a("li"),Kae=a("strong"),xAo=o("flaubert"),kAo=o(" \u2014 "),kj=a("a"),RAo=o("FlaubertForMultipleChoice"),SAo=o(" (FlauBERT model)"),PAo=l(),Z3=a("li"),Zae=a("strong"),$Ao=o("fnet"),IAo=o(" \u2014 "),Rj=a("a"),jAo=o("FNetForMultipleChoice"),NAo=o(" (FNet model)"),DAo=l(),e2=a("li"),ene=a("strong"),qAo=o("funnel"),OAo=o(" \u2014 "),Sj=a("a"),GAo=o("FunnelForMultipleChoice"),XAo=o(" (Funnel Transformer model)"),VAo=l(),o2=a("li"),one=a("strong"),zAo=o("ibert"),WAo=o(" \u2014 "),Pj=a("a"),QAo=o("IBertForMultipleChoice"),HAo=o(" (I-BERT model)"),UAo=l(),r2=a("li"),rne=a("strong"),JAo=o("longformer"),YAo=o(" \u2014 "),$j=a("a"),KAo=o("LongformerForMultipleChoice"),ZAo=o(" (Longformer model)"),e0o=l(),t2=a("li"),tne=a("strong"),o0o=o("megatron-bert"),r0o=o(" \u2014 "),Ij=a("a"),t0o=o("MegatronBertForMultipleChoice"),a0o=o(" (MegatronBert model)"),n0o=l(),a2=a("li"),ane=a("strong"),s0o=o("mobilebert"),l0o=o(" \u2014 "),jj=a("a"),i0o=o("MobileBertForMultipleChoice"),d0o=o(" (MobileBERT model)"),c0o=l(),n2=a("li"),nne=a("strong"),f0o=o("mpnet"),m0o=o(" \u2014 "),Nj=a("a"),g0o=o("MPNetForMultipleChoice"),h0o=o(" (MPNet model)"),p0o=l(),s2=a("li"),sne=a("strong"),_0o=o("nystromformer"),u0o=o(" \u2014 "),Dj=a("a"),b0o=o("NystromformerForMultipleChoice"),v0o=o(" (Nystromformer model)"),T0o=l(),l2=a("li"),lne=a("strong"),F0o=o("qdqbert"),C0o=o(" \u2014 "),qj=a("a"),M0o=o("QDQBertForMultipleChoice"),E0o=o(" (QDQBert model)"),y0o=l(),i2=a("li"),ine=a("strong"),w0o=o("rembert"),A0o=o(" \u2014 "),Oj=a("a"),L0o=o("RemBertForMultipleChoice"),B0o=o(" (RemBERT model)"),x0o=l(),d2=a("li"),dne=a("strong"),k0o=o("roberta"),R0o=o(" \u2014 "),Gj=a("a"),S0o=o("RobertaForMultipleChoice"),P0o=o(" (RoBERTa model)"),$0o=l(),c2=a("li"),cne=a("strong"),I0o=o("roformer"),j0o=o(" \u2014 "),Xj=a("a"),N0o=o("RoFormerForMultipleChoice"),D0o=o(" (RoFormer model)"),q0o=l(),f2=a("li"),fne=a("strong"),O0o=o("squeezebert"),G0o=o(" \u2014 "),Vj=a("a"),X0o=o("SqueezeBertForMultipleChoice"),V0o=o(" (SqueezeBERT model)"),z0o=l(),m2=a("li"),mne=a("strong"),W0o=o("xlm"),Q0o=o(" \u2014 "),zj=a("a"),H0o=o("XLMForMultipleChoice"),U0o=o(" (XLM model)"),J0o=l(),g2=a("li"),gne=a("strong"),Y0o=o("xlm-roberta"),K0o=o(" \u2014 "),Wj=a("a"),Z0o=o("XLMRobertaForMultipleChoice"),eLo=o(" (XLM-RoBERTa model)"),oLo=l(),h2=a("li"),hne=a("strong"),rLo=o("xlm-roberta-xl"),tLo=o(" \u2014 "),Qj=a("a"),aLo=o("XLMRobertaXLForMultipleChoice"),nLo=o(" (XLM-RoBERTa-XL model)"),sLo=l(),p2=a("li"),pne=a("strong"),lLo=o("xlnet"),iLo=o(" \u2014 "),Hj=a("a"),dLo=o("XLNetForMultipleChoice"),cLo=o(" (XLNet model)"),fLo=l(),_2=a("li"),_ne=a("strong"),mLo=o("yoso"),gLo=o(" \u2014 "),Uj=a("a"),hLo=o("YosoForMultipleChoice"),pLo=o(" (YOSO model)"),_Lo=l(),u2=a("p"),uLo=o("The model is set in evaluation mode by default using "),une=a("code"),bLo=o("model.eval()"),vLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bne=a("code"),TLo=o("model.train()"),FLo=l(),vne=a("p"),CLo=o("Examples:"),MLo=l(),f(Bw.$$.fragment),fke=l(),bd=a("h2"),b2=a("a"),Tne=a("span"),f(xw.$$.fragment),ELo=l(),Fne=a("span"),yLo=o("AutoModelForNextSentencePrediction"),mke=l(),tr=a("div"),f(kw.$$.fragment),wLo=l(),vd=a("p"),ALo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cne=a("code"),LLo=o("from_pretrained()"),BLo=o("class method or the "),Mne=a("code"),xLo=o("from_config()"),kLo=o(`class
method.`),RLo=l(),Rw=a("p"),SLo=o("This class cannot be instantiated directly using "),Ene=a("code"),PLo=o("__init__()"),$Lo=o(" (throws an error)."),ILo=l(),Yr=a("div"),f(Sw.$$.fragment),jLo=l(),yne=a("p"),NLo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DLo=l(),Td=a("p"),qLo=o(`Note:
Loading a model from its configuration file does `),wne=a("strong"),OLo=o("not"),GLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ane=a("code"),XLo=o("from_pretrained()"),VLo=o("to load the model weights."),zLo=l(),Lne=a("p"),WLo=o("Examples:"),QLo=l(),f(Pw.$$.fragment),HLo=l(),ze=a("div"),f($w.$$.fragment),ULo=l(),Bne=a("p"),JLo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YLo=l(),Ya=a("p"),KLo=o("The model class to instantiate is selected based on the "),xne=a("code"),ZLo=o("model_type"),e7o=o(` property of the config object (either
passed as an argument or loaded from `),kne=a("code"),o7o=o("pretrained_model_name_or_path"),r7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=a("code"),t7o=o("pretrained_model_name_or_path"),a7o=o(":"),n7o=l(),da=a("ul"),v2=a("li"),Sne=a("strong"),s7o=o("bert"),l7o=o(" \u2014 "),Jj=a("a"),i7o=o("BertForNextSentencePrediction"),d7o=o(" (BERT model)"),c7o=l(),T2=a("li"),Pne=a("strong"),f7o=o("fnet"),m7o=o(" \u2014 "),Yj=a("a"),g7o=o("FNetForNextSentencePrediction"),h7o=o(" (FNet model)"),p7o=l(),F2=a("li"),$ne=a("strong"),_7o=o("megatron-bert"),u7o=o(" \u2014 "),Kj=a("a"),b7o=o("MegatronBertForNextSentencePrediction"),v7o=o(" (MegatronBert model)"),T7o=l(),C2=a("li"),Ine=a("strong"),F7o=o("mobilebert"),C7o=o(" \u2014 "),Zj=a("a"),M7o=o("MobileBertForNextSentencePrediction"),E7o=o(" (MobileBERT model)"),y7o=l(),M2=a("li"),jne=a("strong"),w7o=o("qdqbert"),A7o=o(" \u2014 "),eN=a("a"),L7o=o("QDQBertForNextSentencePrediction"),B7o=o(" (QDQBert model)"),x7o=l(),E2=a("p"),k7o=o("The model is set in evaluation mode by default using "),Nne=a("code"),R7o=o("model.eval()"),S7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=a("code"),P7o=o("model.train()"),$7o=l(),qne=a("p"),I7o=o("Examples:"),j7o=l(),f(Iw.$$.fragment),gke=l(),Fd=a("h2"),y2=a("a"),One=a("span"),f(jw.$$.fragment),N7o=l(),Gne=a("span"),D7o=o("AutoModelForTokenClassification"),hke=l(),ar=a("div"),f(Nw.$$.fragment),q7o=l(),Cd=a("p"),O7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xne=a("code"),G7o=o("from_pretrained()"),X7o=o("class method or the "),Vne=a("code"),V7o=o("from_config()"),z7o=o(`class
method.`),W7o=l(),Dw=a("p"),Q7o=o("This class cannot be instantiated directly using "),zne=a("code"),H7o=o("__init__()"),U7o=o(" (throws an error)."),J7o=l(),Kr=a("div"),f(qw.$$.fragment),Y7o=l(),Wne=a("p"),K7o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Z7o=l(),Md=a("p"),e8o=o(`Note:
Loading a model from its configuration file does `),Qne=a("strong"),o8o=o("not"),r8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hne=a("code"),t8o=o("from_pretrained()"),a8o=o("to load the model weights."),n8o=l(),Une=a("p"),s8o=o("Examples:"),l8o=l(),f(Ow.$$.fragment),i8o=l(),We=a("div"),f(Gw.$$.fragment),d8o=l(),Jne=a("p"),c8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),f8o=l(),Ka=a("p"),m8o=o("The model class to instantiate is selected based on the "),Yne=a("code"),g8o=o("model_type"),h8o=o(` property of the config object (either
passed as an argument or loaded from `),Kne=a("code"),p8o=o("pretrained_model_name_or_path"),_8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=a("code"),u8o=o("pretrained_model_name_or_path"),b8o=o(":"),v8o=l(),D=a("ul"),w2=a("li"),ese=a("strong"),T8o=o("albert"),F8o=o(" \u2014 "),oN=a("a"),C8o=o("AlbertForTokenClassification"),M8o=o(" (ALBERT model)"),E8o=l(),A2=a("li"),ose=a("strong"),y8o=o("bert"),w8o=o(" \u2014 "),rN=a("a"),A8o=o("BertForTokenClassification"),L8o=o(" (BERT model)"),B8o=l(),L2=a("li"),rse=a("strong"),x8o=o("big_bird"),k8o=o(" \u2014 "),tN=a("a"),R8o=o("BigBirdForTokenClassification"),S8o=o(" (BigBird model)"),P8o=l(),B2=a("li"),tse=a("strong"),$8o=o("camembert"),I8o=o(" \u2014 "),aN=a("a"),j8o=o("CamembertForTokenClassification"),N8o=o(" (CamemBERT model)"),D8o=l(),x2=a("li"),ase=a("strong"),q8o=o("canine"),O8o=o(" \u2014 "),nN=a("a"),G8o=o("CanineForTokenClassification"),X8o=o(" (Canine model)"),V8o=l(),k2=a("li"),nse=a("strong"),z8o=o("convbert"),W8o=o(" \u2014 "),sN=a("a"),Q8o=o("ConvBertForTokenClassification"),H8o=o(" (ConvBERT model)"),U8o=l(),R2=a("li"),sse=a("strong"),J8o=o("data2vec-text"),Y8o=o(" \u2014 "),lN=a("a"),K8o=o("Data2VecTextForTokenClassification"),Z8o=o(" (Data2VecText model)"),e9o=l(),S2=a("li"),lse=a("strong"),o9o=o("deberta"),r9o=o(" \u2014 "),iN=a("a"),t9o=o("DebertaForTokenClassification"),a9o=o(" (DeBERTa model)"),n9o=l(),P2=a("li"),ise=a("strong"),s9o=o("deberta-v2"),l9o=o(" \u2014 "),dN=a("a"),i9o=o("DebertaV2ForTokenClassification"),d9o=o(" (DeBERTa-v2 model)"),c9o=l(),$2=a("li"),dse=a("strong"),f9o=o("distilbert"),m9o=o(" \u2014 "),cN=a("a"),g9o=o("DistilBertForTokenClassification"),h9o=o(" (DistilBERT model)"),p9o=l(),I2=a("li"),cse=a("strong"),_9o=o("electra"),u9o=o(" \u2014 "),fN=a("a"),b9o=o("ElectraForTokenClassification"),v9o=o(" (ELECTRA model)"),T9o=l(),j2=a("li"),fse=a("strong"),F9o=o("flaubert"),C9o=o(" \u2014 "),mN=a("a"),M9o=o("FlaubertForTokenClassification"),E9o=o(" (FlauBERT model)"),y9o=l(),N2=a("li"),mse=a("strong"),w9o=o("fnet"),A9o=o(" \u2014 "),gN=a("a"),L9o=o("FNetForTokenClassification"),B9o=o(" (FNet model)"),x9o=l(),D2=a("li"),gse=a("strong"),k9o=o("funnel"),R9o=o(" \u2014 "),hN=a("a"),S9o=o("FunnelForTokenClassification"),P9o=o(" (Funnel Transformer model)"),$9o=l(),q2=a("li"),hse=a("strong"),I9o=o("gpt2"),j9o=o(" \u2014 "),pN=a("a"),N9o=o("GPT2ForTokenClassification"),D9o=o(" (OpenAI GPT-2 model)"),q9o=l(),O2=a("li"),pse=a("strong"),O9o=o("ibert"),G9o=o(" \u2014 "),_N=a("a"),X9o=o("IBertForTokenClassification"),V9o=o(" (I-BERT model)"),z9o=l(),G2=a("li"),_se=a("strong"),W9o=o("layoutlm"),Q9o=o(" \u2014 "),uN=a("a"),H9o=o("LayoutLMForTokenClassification"),U9o=o(" (LayoutLM model)"),J9o=l(),X2=a("li"),use=a("strong"),Y9o=o("layoutlmv2"),K9o=o(" \u2014 "),bN=a("a"),Z9o=o("LayoutLMv2ForTokenClassification"),eBo=o(" (LayoutLMv2 model)"),oBo=l(),V2=a("li"),bse=a("strong"),rBo=o("longformer"),tBo=o(" \u2014 "),vN=a("a"),aBo=o("LongformerForTokenClassification"),nBo=o(" (Longformer model)"),sBo=l(),z2=a("li"),vse=a("strong"),lBo=o("megatron-bert"),iBo=o(" \u2014 "),TN=a("a"),dBo=o("MegatronBertForTokenClassification"),cBo=o(" (MegatronBert model)"),fBo=l(),W2=a("li"),Tse=a("strong"),mBo=o("mobilebert"),gBo=o(" \u2014 "),FN=a("a"),hBo=o("MobileBertForTokenClassification"),pBo=o(" (MobileBERT model)"),_Bo=l(),Q2=a("li"),Fse=a("strong"),uBo=o("mpnet"),bBo=o(" \u2014 "),CN=a("a"),vBo=o("MPNetForTokenClassification"),TBo=o(" (MPNet model)"),FBo=l(),H2=a("li"),Cse=a("strong"),CBo=o("nystromformer"),MBo=o(" \u2014 "),MN=a("a"),EBo=o("NystromformerForTokenClassification"),yBo=o(" (Nystromformer model)"),wBo=l(),U2=a("li"),Mse=a("strong"),ABo=o("qdqbert"),LBo=o(" \u2014 "),EN=a("a"),BBo=o("QDQBertForTokenClassification"),xBo=o(" (QDQBert model)"),kBo=l(),J2=a("li"),Ese=a("strong"),RBo=o("rembert"),SBo=o(" \u2014 "),yN=a("a"),PBo=o("RemBertForTokenClassification"),$Bo=o(" (RemBERT model)"),IBo=l(),Y2=a("li"),yse=a("strong"),jBo=o("roberta"),NBo=o(" \u2014 "),wN=a("a"),DBo=o("RobertaForTokenClassification"),qBo=o(" (RoBERTa model)"),OBo=l(),K2=a("li"),wse=a("strong"),GBo=o("roformer"),XBo=o(" \u2014 "),AN=a("a"),VBo=o("RoFormerForTokenClassification"),zBo=o(" (RoFormer model)"),WBo=l(),Z2=a("li"),Ase=a("strong"),QBo=o("squeezebert"),HBo=o(" \u2014 "),LN=a("a"),UBo=o("SqueezeBertForTokenClassification"),JBo=o(" (SqueezeBERT model)"),YBo=l(),ev=a("li"),Lse=a("strong"),KBo=o("xlm"),ZBo=o(" \u2014 "),BN=a("a"),exo=o("XLMForTokenClassification"),oxo=o(" (XLM model)"),rxo=l(),ov=a("li"),Bse=a("strong"),txo=o("xlm-roberta"),axo=o(" \u2014 "),xN=a("a"),nxo=o("XLMRobertaForTokenClassification"),sxo=o(" (XLM-RoBERTa model)"),lxo=l(),rv=a("li"),xse=a("strong"),ixo=o("xlm-roberta-xl"),dxo=o(" \u2014 "),kN=a("a"),cxo=o("XLMRobertaXLForTokenClassification"),fxo=o(" (XLM-RoBERTa-XL model)"),mxo=l(),tv=a("li"),kse=a("strong"),gxo=o("xlnet"),hxo=o(" \u2014 "),RN=a("a"),pxo=o("XLNetForTokenClassification"),_xo=o(" (XLNet model)"),uxo=l(),av=a("li"),Rse=a("strong"),bxo=o("yoso"),vxo=o(" \u2014 "),SN=a("a"),Txo=o("YosoForTokenClassification"),Fxo=o(" (YOSO model)"),Cxo=l(),nv=a("p"),Mxo=o("The model is set in evaluation mode by default using "),Sse=a("code"),Exo=o("model.eval()"),yxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pse=a("code"),wxo=o("model.train()"),Axo=l(),$se=a("p"),Lxo=o("Examples:"),Bxo=l(),f(Xw.$$.fragment),pke=l(),Ed=a("h2"),sv=a("a"),Ise=a("span"),f(Vw.$$.fragment),xxo=l(),jse=a("span"),kxo=o("AutoModelForQuestionAnswering"),_ke=l(),nr=a("div"),f(zw.$$.fragment),Rxo=l(),yd=a("p"),Sxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nse=a("code"),Pxo=o("from_pretrained()"),$xo=o("class method or the "),Dse=a("code"),Ixo=o("from_config()"),jxo=o(`class
method.`),Nxo=l(),Ww=a("p"),Dxo=o("This class cannot be instantiated directly using "),qse=a("code"),qxo=o("__init__()"),Oxo=o(" (throws an error)."),Gxo=l(),Zr=a("div"),f(Qw.$$.fragment),Xxo=l(),Ose=a("p"),Vxo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zxo=l(),wd=a("p"),Wxo=o(`Note:
Loading a model from its configuration file does `),Gse=a("strong"),Qxo=o("not"),Hxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xse=a("code"),Uxo=o("from_pretrained()"),Jxo=o("to load the model weights."),Yxo=l(),Vse=a("p"),Kxo=o("Examples:"),Zxo=l(),f(Hw.$$.fragment),eko=l(),Qe=a("div"),f(Uw.$$.fragment),oko=l(),zse=a("p"),rko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tko=l(),Za=a("p"),ako=o("The model class to instantiate is selected based on the "),Wse=a("code"),nko=o("model_type"),sko=o(` property of the config object (either
passed as an argument or loaded from `),Qse=a("code"),lko=o("pretrained_model_name_or_path"),iko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hse=a("code"),dko=o("pretrained_model_name_or_path"),cko=o(":"),fko=l(),R=a("ul"),lv=a("li"),Use=a("strong"),mko=o("albert"),gko=o(" \u2014 "),PN=a("a"),hko=o("AlbertForQuestionAnswering"),pko=o(" (ALBERT model)"),_ko=l(),iv=a("li"),Jse=a("strong"),uko=o("bart"),bko=o(" \u2014 "),$N=a("a"),vko=o("BartForQuestionAnswering"),Tko=o(" (BART model)"),Fko=l(),dv=a("li"),Yse=a("strong"),Cko=o("bert"),Mko=o(" \u2014 "),IN=a("a"),Eko=o("BertForQuestionAnswering"),yko=o(" (BERT model)"),wko=l(),cv=a("li"),Kse=a("strong"),Ako=o("big_bird"),Lko=o(" \u2014 "),jN=a("a"),Bko=o("BigBirdForQuestionAnswering"),xko=o(" (BigBird model)"),kko=l(),fv=a("li"),Zse=a("strong"),Rko=o("bigbird_pegasus"),Sko=o(" \u2014 "),NN=a("a"),Pko=o("BigBirdPegasusForQuestionAnswering"),$ko=o(" (BigBirdPegasus model)"),Iko=l(),mv=a("li"),ele=a("strong"),jko=o("camembert"),Nko=o(" \u2014 "),DN=a("a"),Dko=o("CamembertForQuestionAnswering"),qko=o(" (CamemBERT model)"),Oko=l(),gv=a("li"),ole=a("strong"),Gko=o("canine"),Xko=o(" \u2014 "),qN=a("a"),Vko=o("CanineForQuestionAnswering"),zko=o(" (Canine model)"),Wko=l(),hv=a("li"),rle=a("strong"),Qko=o("convbert"),Hko=o(" \u2014 "),ON=a("a"),Uko=o("ConvBertForQuestionAnswering"),Jko=o(" (ConvBERT model)"),Yko=l(),pv=a("li"),tle=a("strong"),Kko=o("data2vec-text"),Zko=o(" \u2014 "),GN=a("a"),eRo=o("Data2VecTextForQuestionAnswering"),oRo=o(" (Data2VecText model)"),rRo=l(),_v=a("li"),ale=a("strong"),tRo=o("deberta"),aRo=o(" \u2014 "),XN=a("a"),nRo=o("DebertaForQuestionAnswering"),sRo=o(" (DeBERTa model)"),lRo=l(),uv=a("li"),nle=a("strong"),iRo=o("deberta-v2"),dRo=o(" \u2014 "),VN=a("a"),cRo=o("DebertaV2ForQuestionAnswering"),fRo=o(" (DeBERTa-v2 model)"),mRo=l(),bv=a("li"),sle=a("strong"),gRo=o("distilbert"),hRo=o(" \u2014 "),zN=a("a"),pRo=o("DistilBertForQuestionAnswering"),_Ro=o(" (DistilBERT model)"),uRo=l(),vv=a("li"),lle=a("strong"),bRo=o("electra"),vRo=o(" \u2014 "),WN=a("a"),TRo=o("ElectraForQuestionAnswering"),FRo=o(" (ELECTRA model)"),CRo=l(),Tv=a("li"),ile=a("strong"),MRo=o("flaubert"),ERo=o(" \u2014 "),QN=a("a"),yRo=o("FlaubertForQuestionAnsweringSimple"),wRo=o(" (FlauBERT model)"),ARo=l(),Fv=a("li"),dle=a("strong"),LRo=o("fnet"),BRo=o(" \u2014 "),HN=a("a"),xRo=o("FNetForQuestionAnswering"),kRo=o(" (FNet model)"),RRo=l(),Cv=a("li"),cle=a("strong"),SRo=o("funnel"),PRo=o(" \u2014 "),UN=a("a"),$Ro=o("FunnelForQuestionAnswering"),IRo=o(" (Funnel Transformer model)"),jRo=l(),Mv=a("li"),fle=a("strong"),NRo=o("gptj"),DRo=o(" \u2014 "),JN=a("a"),qRo=o("GPTJForQuestionAnswering"),ORo=o(" (GPT-J model)"),GRo=l(),Ev=a("li"),mle=a("strong"),XRo=o("ibert"),VRo=o(" \u2014 "),YN=a("a"),zRo=o("IBertForQuestionAnswering"),WRo=o(" (I-BERT model)"),QRo=l(),yv=a("li"),gle=a("strong"),HRo=o("layoutlmv2"),URo=o(" \u2014 "),KN=a("a"),JRo=o("LayoutLMv2ForQuestionAnswering"),YRo=o(" (LayoutLMv2 model)"),KRo=l(),wv=a("li"),hle=a("strong"),ZRo=o("led"),eSo=o(" \u2014 "),ZN=a("a"),oSo=o("LEDForQuestionAnswering"),rSo=o(" (LED model)"),tSo=l(),Av=a("li"),ple=a("strong"),aSo=o("longformer"),nSo=o(" \u2014 "),eD=a("a"),sSo=o("LongformerForQuestionAnswering"),lSo=o(" (Longformer model)"),iSo=l(),Lv=a("li"),_le=a("strong"),dSo=o("lxmert"),cSo=o(" \u2014 "),oD=a("a"),fSo=o("LxmertForQuestionAnswering"),mSo=o(" (LXMERT model)"),gSo=l(),Bv=a("li"),ule=a("strong"),hSo=o("mbart"),pSo=o(" \u2014 "),rD=a("a"),_So=o("MBartForQuestionAnswering"),uSo=o(" (mBART model)"),bSo=l(),xv=a("li"),ble=a("strong"),vSo=o("megatron-bert"),TSo=o(" \u2014 "),tD=a("a"),FSo=o("MegatronBertForQuestionAnswering"),CSo=o(" (MegatronBert model)"),MSo=l(),kv=a("li"),vle=a("strong"),ESo=o("mobilebert"),ySo=o(" \u2014 "),aD=a("a"),wSo=o("MobileBertForQuestionAnswering"),ASo=o(" (MobileBERT model)"),LSo=l(),Rv=a("li"),Tle=a("strong"),BSo=o("mpnet"),xSo=o(" \u2014 "),nD=a("a"),kSo=o("MPNetForQuestionAnswering"),RSo=o(" (MPNet model)"),SSo=l(),Sv=a("li"),Fle=a("strong"),PSo=o("nystromformer"),$So=o(" \u2014 "),sD=a("a"),ISo=o("NystromformerForQuestionAnswering"),jSo=o(" (Nystromformer model)"),NSo=l(),Pv=a("li"),Cle=a("strong"),DSo=o("qdqbert"),qSo=o(" \u2014 "),lD=a("a"),OSo=o("QDQBertForQuestionAnswering"),GSo=o(" (QDQBert model)"),XSo=l(),$v=a("li"),Mle=a("strong"),VSo=o("reformer"),zSo=o(" \u2014 "),iD=a("a"),WSo=o("ReformerForQuestionAnswering"),QSo=o(" (Reformer model)"),HSo=l(),Iv=a("li"),Ele=a("strong"),USo=o("rembert"),JSo=o(" \u2014 "),dD=a("a"),YSo=o("RemBertForQuestionAnswering"),KSo=o(" (RemBERT model)"),ZSo=l(),jv=a("li"),yle=a("strong"),ePo=o("roberta"),oPo=o(" \u2014 "),cD=a("a"),rPo=o("RobertaForQuestionAnswering"),tPo=o(" (RoBERTa model)"),aPo=l(),Nv=a("li"),wle=a("strong"),nPo=o("roformer"),sPo=o(" \u2014 "),fD=a("a"),lPo=o("RoFormerForQuestionAnswering"),iPo=o(" (RoFormer model)"),dPo=l(),Dv=a("li"),Ale=a("strong"),cPo=o("splinter"),fPo=o(" \u2014 "),mD=a("a"),mPo=o("SplinterForQuestionAnswering"),gPo=o(" (Splinter model)"),hPo=l(),qv=a("li"),Lle=a("strong"),pPo=o("squeezebert"),_Po=o(" \u2014 "),gD=a("a"),uPo=o("SqueezeBertForQuestionAnswering"),bPo=o(" (SqueezeBERT model)"),vPo=l(),Ov=a("li"),Ble=a("strong"),TPo=o("xlm"),FPo=o(" \u2014 "),hD=a("a"),CPo=o("XLMForQuestionAnsweringSimple"),MPo=o(" (XLM model)"),EPo=l(),Gv=a("li"),xle=a("strong"),yPo=o("xlm-roberta"),wPo=o(" \u2014 "),pD=a("a"),APo=o("XLMRobertaForQuestionAnswering"),LPo=o(" (XLM-RoBERTa model)"),BPo=l(),Xv=a("li"),kle=a("strong"),xPo=o("xlm-roberta-xl"),kPo=o(" \u2014 "),_D=a("a"),RPo=o("XLMRobertaXLForQuestionAnswering"),SPo=o(" (XLM-RoBERTa-XL model)"),PPo=l(),Vv=a("li"),Rle=a("strong"),$Po=o("xlnet"),IPo=o(" \u2014 "),uD=a("a"),jPo=o("XLNetForQuestionAnsweringSimple"),NPo=o(" (XLNet model)"),DPo=l(),zv=a("li"),Sle=a("strong"),qPo=o("yoso"),OPo=o(" \u2014 "),bD=a("a"),GPo=o("YosoForQuestionAnswering"),XPo=o(" (YOSO model)"),VPo=l(),Wv=a("p"),zPo=o("The model is set in evaluation mode by default using "),Ple=a("code"),WPo=o("model.eval()"),QPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=a("code"),HPo=o("model.train()"),UPo=l(),Ile=a("p"),JPo=o("Examples:"),YPo=l(),f(Jw.$$.fragment),uke=l(),Ad=a("h2"),Qv=a("a"),jle=a("span"),f(Yw.$$.fragment),KPo=l(),Nle=a("span"),ZPo=o("AutoModelForTableQuestionAnswering"),bke=l(),sr=a("div"),f(Kw.$$.fragment),e$o=l(),Ld=a("p"),o$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dle=a("code"),r$o=o("from_pretrained()"),t$o=o("class method or the "),qle=a("code"),a$o=o("from_config()"),n$o=o(`class
method.`),s$o=l(),Zw=a("p"),l$o=o("This class cannot be instantiated directly using "),Ole=a("code"),i$o=o("__init__()"),d$o=o(" (throws an error)."),c$o=l(),et=a("div"),f(e6.$$.fragment),f$o=l(),Gle=a("p"),m$o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),g$o=l(),Bd=a("p"),h$o=o(`Note:
Loading a model from its configuration file does `),Xle=a("strong"),p$o=o("not"),_$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vle=a("code"),u$o=o("from_pretrained()"),b$o=o("to load the model weights."),v$o=l(),zle=a("p"),T$o=o("Examples:"),F$o=l(),f(o6.$$.fragment),C$o=l(),He=a("div"),f(r6.$$.fragment),M$o=l(),Wle=a("p"),E$o=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),y$o=l(),en=a("p"),w$o=o("The model class to instantiate is selected based on the "),Qle=a("code"),A$o=o("model_type"),L$o=o(` property of the config object (either
passed as an argument or loaded from `),Hle=a("code"),B$o=o("pretrained_model_name_or_path"),x$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ule=a("code"),k$o=o("pretrained_model_name_or_path"),R$o=o(":"),S$o=l(),Jle=a("ul"),Hv=a("li"),Yle=a("strong"),P$o=o("tapas"),$$o=o(" \u2014 "),vD=a("a"),I$o=o("TapasForQuestionAnswering"),j$o=o(" (TAPAS model)"),N$o=l(),Uv=a("p"),D$o=o("The model is set in evaluation mode by default using "),Kle=a("code"),q$o=o("model.eval()"),O$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=a("code"),G$o=o("model.train()"),X$o=l(),eie=a("p"),V$o=o("Examples:"),z$o=l(),f(t6.$$.fragment),vke=l(),xd=a("h2"),Jv=a("a"),oie=a("span"),f(a6.$$.fragment),W$o=l(),rie=a("span"),Q$o=o("AutoModelForImageClassification"),Tke=l(),lr=a("div"),f(n6.$$.fragment),H$o=l(),kd=a("p"),U$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tie=a("code"),J$o=o("from_pretrained()"),Y$o=o("class method or the "),aie=a("code"),K$o=o("from_config()"),Z$o=o(`class
method.`),eIo=l(),s6=a("p"),oIo=o("This class cannot be instantiated directly using "),nie=a("code"),rIo=o("__init__()"),tIo=o(" (throws an error)."),aIo=l(),ot=a("div"),f(l6.$$.fragment),nIo=l(),sie=a("p"),sIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lIo=l(),Rd=a("p"),iIo=o(`Note:
Loading a model from its configuration file does `),lie=a("strong"),dIo=o("not"),cIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iie=a("code"),fIo=o("from_pretrained()"),mIo=o("to load the model weights."),gIo=l(),die=a("p"),hIo=o("Examples:"),pIo=l(),f(i6.$$.fragment),_Io=l(),Ue=a("div"),f(d6.$$.fragment),uIo=l(),cie=a("p"),bIo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vIo=l(),on=a("p"),TIo=o("The model class to instantiate is selected based on the "),fie=a("code"),FIo=o("model_type"),CIo=o(` property of the config object (either
passed as an argument or loaded from `),mie=a("code"),MIo=o("pretrained_model_name_or_path"),EIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=a("code"),yIo=o("pretrained_model_name_or_path"),wIo=o(":"),AIo=l(),me=a("ul"),Yv=a("li"),hie=a("strong"),LIo=o("beit"),BIo=o(" \u2014 "),TD=a("a"),xIo=o("BeitForImageClassification"),kIo=o(" (BEiT model)"),RIo=l(),Kv=a("li"),pie=a("strong"),SIo=o("convnext"),PIo=o(" \u2014 "),FD=a("a"),$Io=o("ConvNextForImageClassification"),IIo=o(" (ConvNext model)"),jIo=l(),qs=a("li"),_ie=a("strong"),NIo=o("deit"),DIo=o(" \u2014 "),CD=a("a"),qIo=o("DeiTForImageClassification"),OIo=o(" or "),MD=a("a"),GIo=o("DeiTForImageClassificationWithTeacher"),XIo=o(" (DeiT model)"),VIo=l(),Zv=a("li"),uie=a("strong"),zIo=o("imagegpt"),WIo=o(" \u2014 "),ED=a("a"),QIo=o("ImageGPTForImageClassification"),HIo=o(" (ImageGPT model)"),UIo=l(),ma=a("li"),bie=a("strong"),JIo=o("perceiver"),YIo=o(" \u2014 "),yD=a("a"),KIo=o("PerceiverForImageClassificationLearned"),ZIo=o(" or "),wD=a("a"),ejo=o("PerceiverForImageClassificationFourier"),ojo=o(" or "),AD=a("a"),rjo=o("PerceiverForImageClassificationConvProcessing"),tjo=o(" (Perceiver model)"),ajo=l(),eT=a("li"),vie=a("strong"),njo=o("poolformer"),sjo=o(" \u2014 "),LD=a("a"),ljo=o("PoolFormerForImageClassification"),ijo=o(" (PoolFormer model)"),djo=l(),oT=a("li"),Tie=a("strong"),cjo=o("resnet"),fjo=o(" \u2014 "),BD=a("a"),mjo=o("ResNetForImageClassification"),gjo=o(" (ResNet model)"),hjo=l(),rT=a("li"),Fie=a("strong"),pjo=o("segformer"),_jo=o(" \u2014 "),xD=a("a"),ujo=o("SegformerForImageClassification"),bjo=o(" (SegFormer model)"),vjo=l(),tT=a("li"),Cie=a("strong"),Tjo=o("swin"),Fjo=o(" \u2014 "),kD=a("a"),Cjo=o("SwinForImageClassification"),Mjo=o(" (Swin model)"),Ejo=l(),aT=a("li"),Mie=a("strong"),yjo=o("van"),wjo=o(" \u2014 "),RD=a("a"),Ajo=o("VanForImageClassification"),Ljo=o(" (VAN model)"),Bjo=l(),nT=a("li"),Eie=a("strong"),xjo=o("vit"),kjo=o(" \u2014 "),SD=a("a"),Rjo=o("ViTForImageClassification"),Sjo=o(" (ViT model)"),Pjo=l(),sT=a("p"),$jo=o("The model is set in evaluation mode by default using "),yie=a("code"),Ijo=o("model.eval()"),jjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=a("code"),Njo=o("model.train()"),Djo=l(),Aie=a("p"),qjo=o("Examples:"),Ojo=l(),f(c6.$$.fragment),Fke=l(),Sd=a("h2"),lT=a("a"),Lie=a("span"),f(f6.$$.fragment),Gjo=l(),Bie=a("span"),Xjo=o("AutoModelForVision2Seq"),Cke=l(),ir=a("div"),f(m6.$$.fragment),Vjo=l(),Pd=a("p"),zjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xie=a("code"),Wjo=o("from_pretrained()"),Qjo=o("class method or the "),kie=a("code"),Hjo=o("from_config()"),Ujo=o(`class
method.`),Jjo=l(),g6=a("p"),Yjo=o("This class cannot be instantiated directly using "),Rie=a("code"),Kjo=o("__init__()"),Zjo=o(" (throws an error)."),eNo=l(),rt=a("div"),f(h6.$$.fragment),oNo=l(),Sie=a("p"),rNo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tNo=l(),$d=a("p"),aNo=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),nNo=o("not"),sNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=a("code"),lNo=o("from_pretrained()"),iNo=o("to load the model weights."),dNo=l(),Iie=a("p"),cNo=o("Examples:"),fNo=l(),f(p6.$$.fragment),mNo=l(),Je=a("div"),f(_6.$$.fragment),gNo=l(),jie=a("p"),hNo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pNo=l(),rn=a("p"),_No=o("The model class to instantiate is selected based on the "),Nie=a("code"),uNo=o("model_type"),bNo=o(` property of the config object (either
passed as an argument or loaded from `),Die=a("code"),vNo=o("pretrained_model_name_or_path"),TNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),FNo=o("pretrained_model_name_or_path"),CNo=o(":"),MNo=l(),Oie=a("ul"),iT=a("li"),Gie=a("strong"),ENo=o("vision-encoder-decoder"),yNo=o(" \u2014 "),PD=a("a"),wNo=o("VisionEncoderDecoderModel"),ANo=o(" (Vision Encoder decoder model)"),LNo=l(),dT=a("p"),BNo=o("The model is set in evaluation mode by default using "),Xie=a("code"),xNo=o("model.eval()"),kNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=a("code"),RNo=o("model.train()"),SNo=l(),zie=a("p"),PNo=o("Examples:"),$No=l(),f(u6.$$.fragment),Mke=l(),Id=a("h2"),cT=a("a"),Wie=a("span"),f(b6.$$.fragment),INo=l(),Qie=a("span"),jNo=o("AutoModelForAudioClassification"),Eke=l(),dr=a("div"),f(v6.$$.fragment),NNo=l(),jd=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Hie=a("code"),qNo=o("from_pretrained()"),ONo=o("class method or the "),Uie=a("code"),GNo=o("from_config()"),XNo=o(`class
method.`),VNo=l(),T6=a("p"),zNo=o("This class cannot be instantiated directly using "),Jie=a("code"),WNo=o("__init__()"),QNo=o(" (throws an error)."),HNo=l(),tt=a("div"),f(F6.$$.fragment),UNo=l(),Yie=a("p"),JNo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),YNo=l(),Nd=a("p"),KNo=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),ZNo=o("not"),eDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=a("code"),oDo=o("from_pretrained()"),rDo=o("to load the model weights."),tDo=l(),ede=a("p"),aDo=o("Examples:"),nDo=l(),f(C6.$$.fragment),sDo=l(),Ye=a("div"),f(M6.$$.fragment),lDo=l(),ode=a("p"),iDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dDo=l(),tn=a("p"),cDo=o("The model class to instantiate is selected based on the "),rde=a("code"),fDo=o("model_type"),mDo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),gDo=o("pretrained_model_name_or_path"),hDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),pDo=o("pretrained_model_name_or_path"),_Do=o(":"),uDo=l(),ke=a("ul"),fT=a("li"),nde=a("strong"),bDo=o("data2vec-audio"),vDo=o(" \u2014 "),$D=a("a"),TDo=o("Data2VecAudioForSequenceClassification"),FDo=o(" (Data2VecAudio model)"),CDo=l(),mT=a("li"),sde=a("strong"),MDo=o("hubert"),EDo=o(" \u2014 "),ID=a("a"),yDo=o("HubertForSequenceClassification"),wDo=o(" (Hubert model)"),ADo=l(),gT=a("li"),lde=a("strong"),LDo=o("sew"),BDo=o(" \u2014 "),jD=a("a"),xDo=o("SEWForSequenceClassification"),kDo=o(" (SEW model)"),RDo=l(),hT=a("li"),ide=a("strong"),SDo=o("sew-d"),PDo=o(" \u2014 "),ND=a("a"),$Do=o("SEWDForSequenceClassification"),IDo=o(" (SEW-D model)"),jDo=l(),pT=a("li"),dde=a("strong"),NDo=o("unispeech"),DDo=o(" \u2014 "),DD=a("a"),qDo=o("UniSpeechForSequenceClassification"),ODo=o(" (UniSpeech model)"),GDo=l(),_T=a("li"),cde=a("strong"),XDo=o("unispeech-sat"),VDo=o(" \u2014 "),qD=a("a"),zDo=o("UniSpeechSatForSequenceClassification"),WDo=o(" (UniSpeechSat model)"),QDo=l(),uT=a("li"),fde=a("strong"),HDo=o("wav2vec2"),UDo=o(" \u2014 "),OD=a("a"),JDo=o("Wav2Vec2ForSequenceClassification"),YDo=o(" (Wav2Vec2 model)"),KDo=l(),bT=a("li"),mde=a("strong"),ZDo=o("wavlm"),eqo=o(" \u2014 "),GD=a("a"),oqo=o("WavLMForSequenceClassification"),rqo=o(" (WavLM model)"),tqo=l(),vT=a("p"),aqo=o("The model is set in evaluation mode by default using "),gde=a("code"),nqo=o("model.eval()"),sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=a("code"),lqo=o("model.train()"),iqo=l(),pde=a("p"),dqo=o("Examples:"),cqo=l(),f(E6.$$.fragment),yke=l(),Dd=a("h2"),TT=a("a"),_de=a("span"),f(y6.$$.fragment),fqo=l(),ude=a("span"),mqo=o("AutoModelForAudioFrameClassification"),wke=l(),cr=a("div"),f(w6.$$.fragment),gqo=l(),qd=a("p"),hqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bde=a("code"),pqo=o("from_pretrained()"),_qo=o("class method or the "),vde=a("code"),uqo=o("from_config()"),bqo=o(`class
method.`),vqo=l(),A6=a("p"),Tqo=o("This class cannot be instantiated directly using "),Tde=a("code"),Fqo=o("__init__()"),Cqo=o(" (throws an error)."),Mqo=l(),at=a("div"),f(L6.$$.fragment),Eqo=l(),Fde=a("p"),yqo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wqo=l(),Od=a("p"),Aqo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),Lqo=o("not"),Bqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=a("code"),xqo=o("from_pretrained()"),kqo=o("to load the model weights."),Rqo=l(),Ede=a("p"),Sqo=o("Examples:"),Pqo=l(),f(B6.$$.fragment),$qo=l(),Ke=a("div"),f(x6.$$.fragment),Iqo=l(),yde=a("p"),jqo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Nqo=l(),an=a("p"),Dqo=o("The model class to instantiate is selected based on the "),wde=a("code"),qqo=o("model_type"),Oqo=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),Gqo=o("pretrained_model_name_or_path"),Xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),Vqo=o("pretrained_model_name_or_path"),zqo=o(":"),Wqo=l(),nn=a("ul"),FT=a("li"),Bde=a("strong"),Qqo=o("data2vec-audio"),Hqo=o(" \u2014 "),XD=a("a"),Uqo=o("Data2VecAudioForAudioFrameClassification"),Jqo=o(" (Data2VecAudio model)"),Yqo=l(),CT=a("li"),xde=a("strong"),Kqo=o("unispeech-sat"),Zqo=o(" \u2014 "),VD=a("a"),eOo=o("UniSpeechSatForAudioFrameClassification"),oOo=o(" (UniSpeechSat model)"),rOo=l(),MT=a("li"),kde=a("strong"),tOo=o("wav2vec2"),aOo=o(" \u2014 "),zD=a("a"),nOo=o("Wav2Vec2ForAudioFrameClassification"),sOo=o(" (Wav2Vec2 model)"),lOo=l(),ET=a("li"),Rde=a("strong"),iOo=o("wavlm"),dOo=o(" \u2014 "),WD=a("a"),cOo=o("WavLMForAudioFrameClassification"),fOo=o(" (WavLM model)"),mOo=l(),yT=a("p"),gOo=o("The model is set in evaluation mode by default using "),Sde=a("code"),hOo=o("model.eval()"),pOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),_Oo=o("model.train()"),uOo=l(),$de=a("p"),bOo=o("Examples:"),vOo=l(),f(k6.$$.fragment),Ake=l(),Gd=a("h2"),wT=a("a"),Ide=a("span"),f(R6.$$.fragment),TOo=l(),jde=a("span"),FOo=o("AutoModelForCTC"),Lke=l(),fr=a("div"),f(S6.$$.fragment),COo=l(),Xd=a("p"),MOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Nde=a("code"),EOo=o("from_pretrained()"),yOo=o("class method or the "),Dde=a("code"),wOo=o("from_config()"),AOo=o(`class
method.`),LOo=l(),P6=a("p"),BOo=o("This class cannot be instantiated directly using "),qde=a("code"),xOo=o("__init__()"),kOo=o(" (throws an error)."),ROo=l(),nt=a("div"),f($6.$$.fragment),SOo=l(),Ode=a("p"),POo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$Oo=l(),Vd=a("p"),IOo=o(`Note:
Loading a model from its configuration file does `),Gde=a("strong"),jOo=o("not"),NOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=a("code"),DOo=o("from_pretrained()"),qOo=o("to load the model weights."),OOo=l(),Vde=a("p"),GOo=o("Examples:"),XOo=l(),f(I6.$$.fragment),VOo=l(),Ze=a("div"),f(j6.$$.fragment),zOo=l(),zde=a("p"),WOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),QOo=l(),sn=a("p"),HOo=o("The model class to instantiate is selected based on the "),Wde=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),ZOo=o("pretrained_model_name_or_path"),eGo=o(":"),oGo=l(),Re=a("ul"),AT=a("li"),Ude=a("strong"),rGo=o("data2vec-audio"),tGo=o(" \u2014 "),QD=a("a"),aGo=o("Data2VecAudioForCTC"),nGo=o(" (Data2VecAudio model)"),sGo=l(),LT=a("li"),Jde=a("strong"),lGo=o("hubert"),iGo=o(" \u2014 "),HD=a("a"),dGo=o("HubertForCTC"),cGo=o(" (Hubert model)"),fGo=l(),BT=a("li"),Yde=a("strong"),mGo=o("sew"),gGo=o(" \u2014 "),UD=a("a"),hGo=o("SEWForCTC"),pGo=o(" (SEW model)"),_Go=l(),xT=a("li"),Kde=a("strong"),uGo=o("sew-d"),bGo=o(" \u2014 "),JD=a("a"),vGo=o("SEWDForCTC"),TGo=o(" (SEW-D model)"),FGo=l(),kT=a("li"),Zde=a("strong"),CGo=o("unispeech"),MGo=o(" \u2014 "),YD=a("a"),EGo=o("UniSpeechForCTC"),yGo=o(" (UniSpeech model)"),wGo=l(),RT=a("li"),ece=a("strong"),AGo=o("unispeech-sat"),LGo=o(" \u2014 "),KD=a("a"),BGo=o("UniSpeechSatForCTC"),xGo=o(" (UniSpeechSat model)"),kGo=l(),ST=a("li"),oce=a("strong"),RGo=o("wav2vec2"),SGo=o(" \u2014 "),ZD=a("a"),PGo=o("Wav2Vec2ForCTC"),$Go=o(" (Wav2Vec2 model)"),IGo=l(),PT=a("li"),rce=a("strong"),jGo=o("wavlm"),NGo=o(" \u2014 "),eq=a("a"),DGo=o("WavLMForCTC"),qGo=o(" (WavLM model)"),OGo=l(),$T=a("p"),GGo=o("The model is set in evaluation mode by default using "),tce=a("code"),XGo=o("model.eval()"),VGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),zGo=o("model.train()"),WGo=l(),nce=a("p"),QGo=o("Examples:"),HGo=l(),f(N6.$$.fragment),Bke=l(),zd=a("h2"),IT=a("a"),sce=a("span"),f(D6.$$.fragment),UGo=l(),lce=a("span"),JGo=o("AutoModelForSpeechSeq2Seq"),xke=l(),mr=a("div"),f(q6.$$.fragment),YGo=l(),Wd=a("p"),KGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ice=a("code"),ZGo=o("from_pretrained()"),eXo=o("class method or the "),dce=a("code"),oXo=o("from_config()"),rXo=o(`class
method.`),tXo=l(),O6=a("p"),aXo=o("This class cannot be instantiated directly using "),cce=a("code"),nXo=o("__init__()"),sXo=o(" (throws an error)."),lXo=l(),st=a("div"),f(G6.$$.fragment),iXo=l(),fce=a("p"),dXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cXo=l(),Qd=a("p"),fXo=o(`Note:
Loading a model from its configuration file does `),mce=a("strong"),mXo=o("not"),gXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=a("code"),hXo=o("from_pretrained()"),pXo=o("to load the model weights."),_Xo=l(),hce=a("p"),uXo=o("Examples:"),bXo=l(),f(X6.$$.fragment),vXo=l(),eo=a("div"),f(V6.$$.fragment),TXo=l(),pce=a("p"),FXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),CXo=l(),ln=a("p"),MXo=o("The model class to instantiate is selected based on the "),_ce=a("code"),EXo=o("model_type"),yXo=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),wXo=o("pretrained_model_name_or_path"),AXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),LXo=o("pretrained_model_name_or_path"),BXo=o(":"),xXo=l(),z6=a("ul"),jT=a("li"),vce=a("strong"),kXo=o("speech-encoder-decoder"),RXo=o(" \u2014 "),oq=a("a"),SXo=o("SpeechEncoderDecoderModel"),PXo=o(" (Speech Encoder decoder model)"),$Xo=l(),NT=a("li"),Tce=a("strong"),IXo=o("speech_to_text"),jXo=o(" \u2014 "),rq=a("a"),NXo=o("Speech2TextForConditionalGeneration"),DXo=o(" (Speech2Text model)"),qXo=l(),DT=a("p"),OXo=o("The model is set in evaluation mode by default using "),Fce=a("code"),GXo=o("model.eval()"),XXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=a("code"),VXo=o("model.train()"),zXo=l(),Mce=a("p"),WXo=o("Examples:"),QXo=l(),f(W6.$$.fragment),kke=l(),Hd=a("h2"),qT=a("a"),Ece=a("span"),f(Q6.$$.fragment),HXo=l(),yce=a("span"),UXo=o("AutoModelForAudioXVector"),Rke=l(),gr=a("div"),f(H6.$$.fragment),JXo=l(),Ud=a("p"),YXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wce=a("code"),KXo=o("from_pretrained()"),ZXo=o("class method or the "),Ace=a("code"),eVo=o("from_config()"),oVo=o(`class
method.`),rVo=l(),U6=a("p"),tVo=o("This class cannot be instantiated directly using "),Lce=a("code"),aVo=o("__init__()"),nVo=o(" (throws an error)."),sVo=l(),lt=a("div"),f(J6.$$.fragment),lVo=l(),Bce=a("p"),iVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dVo=l(),Jd=a("p"),cVo=o(`Note:
Loading a model from its configuration file does `),xce=a("strong"),fVo=o("not"),mVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kce=a("code"),gVo=o("from_pretrained()"),hVo=o("to load the model weights."),pVo=l(),Rce=a("p"),_Vo=o("Examples:"),uVo=l(),f(Y6.$$.fragment),bVo=l(),oo=a("div"),f(K6.$$.fragment),vVo=l(),Sce=a("p"),TVo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),FVo=l(),dn=a("p"),CVo=o("The model class to instantiate is selected based on the "),Pce=a("code"),MVo=o("model_type"),EVo=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),yVo=o("pretrained_model_name_or_path"),wVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),AVo=o("pretrained_model_name_or_path"),LVo=o(":"),BVo=l(),cn=a("ul"),OT=a("li"),jce=a("strong"),xVo=o("data2vec-audio"),kVo=o(" \u2014 "),tq=a("a"),RVo=o("Data2VecAudioForXVector"),SVo=o(" (Data2VecAudio model)"),PVo=l(),GT=a("li"),Nce=a("strong"),$Vo=o("unispeech-sat"),IVo=o(" \u2014 "),aq=a("a"),jVo=o("UniSpeechSatForXVector"),NVo=o(" (UniSpeechSat model)"),DVo=l(),XT=a("li"),Dce=a("strong"),qVo=o("wav2vec2"),OVo=o(" \u2014 "),nq=a("a"),GVo=o("Wav2Vec2ForXVector"),XVo=o(" (Wav2Vec2 model)"),VVo=l(),VT=a("li"),qce=a("strong"),zVo=o("wavlm"),WVo=o(" \u2014 "),sq=a("a"),QVo=o("WavLMForXVector"),HVo=o(" (WavLM model)"),UVo=l(),zT=a("p"),JVo=o("The model is set in evaluation mode by default using "),Oce=a("code"),YVo=o("model.eval()"),KVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=a("code"),ZVo=o("model.train()"),ezo=l(),Xce=a("p"),ozo=o("Examples:"),rzo=l(),f(Z6.$$.fragment),Ske=l(),Yd=a("h2"),WT=a("a"),Vce=a("span"),f(eA.$$.fragment),tzo=l(),zce=a("span"),azo=o("AutoModelForMaskedImageModeling"),Pke=l(),hr=a("div"),f(oA.$$.fragment),nzo=l(),Kd=a("p"),szo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Wce=a("code"),lzo=o("from_pretrained()"),izo=o("class method or the "),Qce=a("code"),dzo=o("from_config()"),czo=o(`class
method.`),fzo=l(),rA=a("p"),mzo=o("This class cannot be instantiated directly using "),Hce=a("code"),gzo=o("__init__()"),hzo=o(" (throws an error)."),pzo=l(),it=a("div"),f(tA.$$.fragment),_zo=l(),Uce=a("p"),uzo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bzo=l(),Zd=a("p"),vzo=o(`Note:
Loading a model from its configuration file does `),Jce=a("strong"),Tzo=o("not"),Fzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yce=a("code"),Czo=o("from_pretrained()"),Mzo=o("to load the model weights."),Ezo=l(),Kce=a("p"),yzo=o("Examples:"),wzo=l(),f(aA.$$.fragment),Azo=l(),ro=a("div"),f(nA.$$.fragment),Lzo=l(),Zce=a("p"),Bzo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xzo=l(),fn=a("p"),kzo=o("The model class to instantiate is selected based on the "),efe=a("code"),Rzo=o("model_type"),Szo=o(` property of the config object (either
passed as an argument or loaded from `),ofe=a("code"),Pzo=o("pretrained_model_name_or_path"),$zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=a("code"),Izo=o("pretrained_model_name_or_path"),jzo=o(":"),Nzo=l(),ec=a("ul"),QT=a("li"),tfe=a("strong"),Dzo=o("deit"),qzo=o(" \u2014 "),lq=a("a"),Ozo=o("DeiTForMaskedImageModeling"),Gzo=o(" (DeiT model)"),Xzo=l(),HT=a("li"),afe=a("strong"),Vzo=o("swin"),zzo=o(" \u2014 "),iq=a("a"),Wzo=o("SwinForMaskedImageModeling"),Qzo=o(" (Swin model)"),Hzo=l(),UT=a("li"),nfe=a("strong"),Uzo=o("vit"),Jzo=o(" \u2014 "),dq=a("a"),Yzo=o("ViTForMaskedImageModeling"),Kzo=o(" (ViT model)"),Zzo=l(),JT=a("p"),eWo=o("The model is set in evaluation mode by default using "),sfe=a("code"),oWo=o("model.eval()"),rWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=a("code"),tWo=o("model.train()"),aWo=l(),ife=a("p"),nWo=o("Examples:"),sWo=l(),f(sA.$$.fragment),$ke=l(),oc=a("h2"),YT=a("a"),dfe=a("span"),f(lA.$$.fragment),lWo=l(),cfe=a("span"),iWo=o("AutoModelForObjectDetection"),Ike=l(),pr=a("div"),f(iA.$$.fragment),dWo=l(),rc=a("p"),cWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ffe=a("code"),fWo=o("from_pretrained()"),mWo=o("class method or the "),mfe=a("code"),gWo=o("from_config()"),hWo=o(`class
method.`),pWo=l(),dA=a("p"),_Wo=o("This class cannot be instantiated directly using "),gfe=a("code"),uWo=o("__init__()"),bWo=o(" (throws an error)."),vWo=l(),dt=a("div"),f(cA.$$.fragment),TWo=l(),hfe=a("p"),FWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),CWo=l(),tc=a("p"),MWo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),EWo=o("not"),yWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_fe=a("code"),wWo=o("from_pretrained()"),AWo=o("to load the model weights."),LWo=l(),ufe=a("p"),BWo=o("Examples:"),xWo=l(),f(fA.$$.fragment),kWo=l(),to=a("div"),f(mA.$$.fragment),RWo=l(),bfe=a("p"),SWo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),PWo=l(),mn=a("p"),$Wo=o("The model class to instantiate is selected based on the "),vfe=a("code"),IWo=o("model_type"),jWo=o(` property of the config object (either
passed as an argument or loaded from `),Tfe=a("code"),NWo=o("pretrained_model_name_or_path"),DWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=a("code"),qWo=o("pretrained_model_name_or_path"),OWo=o(":"),GWo=l(),Cfe=a("ul"),KT=a("li"),Mfe=a("strong"),XWo=o("detr"),VWo=o(" \u2014 "),cq=a("a"),zWo=o("DetrForObjectDetection"),WWo=o(" (DETR model)"),QWo=l(),ZT=a("p"),HWo=o("The model is set in evaluation mode by default using "),Efe=a("code"),UWo=o("model.eval()"),JWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=a("code"),YWo=o("model.train()"),KWo=l(),wfe=a("p"),ZWo=o("Examples:"),eQo=l(),f(gA.$$.fragment),jke=l(),ac=a("h2"),e1=a("a"),Afe=a("span"),f(hA.$$.fragment),oQo=l(),Lfe=a("span"),rQo=o("AutoModelForImageSegmentation"),Nke=l(),_r=a("div"),f(pA.$$.fragment),tQo=l(),nc=a("p"),aQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Bfe=a("code"),nQo=o("from_pretrained()"),sQo=o("class method or the "),xfe=a("code"),lQo=o("from_config()"),iQo=o(`class
method.`),dQo=l(),_A=a("p"),cQo=o("This class cannot be instantiated directly using "),kfe=a("code"),fQo=o("__init__()"),mQo=o(" (throws an error)."),gQo=l(),ct=a("div"),f(uA.$$.fragment),hQo=l(),Rfe=a("p"),pQo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_Qo=l(),sc=a("p"),uQo=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),bQo=o("not"),vQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pfe=a("code"),TQo=o("from_pretrained()"),FQo=o("to load the model weights."),CQo=l(),$fe=a("p"),MQo=o("Examples:"),EQo=l(),f(bA.$$.fragment),yQo=l(),ao=a("div"),f(vA.$$.fragment),wQo=l(),Ife=a("p"),AQo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),LQo=l(),gn=a("p"),BQo=o("The model class to instantiate is selected based on the "),jfe=a("code"),xQo=o("model_type"),kQo=o(` property of the config object (either
passed as an argument or loaded from `),Nfe=a("code"),RQo=o("pretrained_model_name_or_path"),SQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),PQo=o("pretrained_model_name_or_path"),$Qo=o(":"),IQo=l(),qfe=a("ul"),o1=a("li"),Ofe=a("strong"),jQo=o("detr"),NQo=o(" \u2014 "),fq=a("a"),DQo=o("DetrForSegmentation"),qQo=o(" (DETR model)"),OQo=l(),r1=a("p"),GQo=o("The model is set in evaluation mode by default using "),Gfe=a("code"),XQo=o("model.eval()"),VQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),zQo=o("model.train()"),WQo=l(),Vfe=a("p"),QQo=o("Examples:"),HQo=l(),f(TA.$$.fragment),Dke=l(),lc=a("h2"),t1=a("a"),zfe=a("span"),f(FA.$$.fragment),UQo=l(),Wfe=a("span"),JQo=o("AutoModelForSemanticSegmentation"),qke=l(),ur=a("div"),f(CA.$$.fragment),YQo=l(),ic=a("p"),KQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Qfe=a("code"),ZQo=o("from_pretrained()"),eHo=o("class method or the "),Hfe=a("code"),oHo=o("from_config()"),rHo=o(`class
method.`),tHo=l(),MA=a("p"),aHo=o("This class cannot be instantiated directly using "),Ufe=a("code"),nHo=o("__init__()"),sHo=o(" (throws an error)."),lHo=l(),ft=a("div"),f(EA.$$.fragment),iHo=l(),Jfe=a("p"),dHo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cHo=l(),dc=a("p"),fHo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),mHo=o("not"),gHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=a("code"),hHo=o("from_pretrained()"),pHo=o("to load the model weights."),_Ho=l(),Zfe=a("p"),uHo=o("Examples:"),bHo=l(),f(yA.$$.fragment),vHo=l(),no=a("div"),f(wA.$$.fragment),THo=l(),eme=a("p"),FHo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),CHo=l(),hn=a("p"),MHo=o("The model class to instantiate is selected based on the "),ome=a("code"),EHo=o("model_type"),yHo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),wHo=o("pretrained_model_name_or_path"),AHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),LHo=o("pretrained_model_name_or_path"),BHo=o(":"),xHo=l(),AA=a("ul"),a1=a("li"),ame=a("strong"),kHo=o("beit"),RHo=o(" \u2014 "),mq=a("a"),SHo=o("BeitForSemanticSegmentation"),PHo=o(" (BEiT model)"),$Ho=l(),n1=a("li"),nme=a("strong"),IHo=o("segformer"),jHo=o(" \u2014 "),gq=a("a"),NHo=o("SegformerForSemanticSegmentation"),DHo=o(" (SegFormer model)"),qHo=l(),s1=a("p"),OHo=o("The model is set in evaluation mode by default using "),sme=a("code"),GHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),VHo=o("model.train()"),zHo=l(),ime=a("p"),WHo=o("Examples:"),QHo=l(),f(LA.$$.fragment),Oke=l(),cc=a("h2"),l1=a("a"),dme=a("span"),f(BA.$$.fragment),HHo=l(),cme=a("span"),UHo=o("AutoModelForInstanceSegmentation"),Gke=l(),br=a("div"),f(xA.$$.fragment),JHo=l(),fc=a("p"),YHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fme=a("code"),KHo=o("from_pretrained()"),ZHo=o("class method or the "),mme=a("code"),eUo=o("from_config()"),oUo=o(`class
method.`),rUo=l(),kA=a("p"),tUo=o("This class cannot be instantiated directly using "),gme=a("code"),aUo=o("__init__()"),nUo=o(" (throws an error)."),sUo=l(),mt=a("div"),f(RA.$$.fragment),lUo=l(),hme=a("p"),iUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dUo=l(),mc=a("p"),cUo=o(`Note:
Loading a model from its configuration file does `),pme=a("strong"),fUo=o("not"),mUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_me=a("code"),gUo=o("from_pretrained()"),hUo=o("to load the model weights."),pUo=l(),ume=a("p"),_Uo=o("Examples:"),uUo=l(),f(SA.$$.fragment),bUo=l(),so=a("div"),f(PA.$$.fragment),vUo=l(),bme=a("p"),TUo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),FUo=l(),pn=a("p"),CUo=o("The model class to instantiate is selected based on the "),vme=a("code"),MUo=o("model_type"),EUo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),yUo=o("pretrained_model_name_or_path"),wUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),AUo=o("pretrained_model_name_or_path"),LUo=o(":"),BUo=l(),Cme=a("ul"),i1=a("li"),Mme=a("strong"),xUo=o("maskformer"),kUo=o(" \u2014 "),hq=a("a"),RUo=o("MaskFormerForInstanceSegmentation"),SUo=o(" (MaskFormer model)"),PUo=l(),d1=a("p"),$Uo=o("The model is set in evaluation mode by default using "),Eme=a("code"),IUo=o("model.eval()"),jUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=a("code"),NUo=o("model.train()"),DUo=l(),wme=a("p"),qUo=o("Examples:"),OUo=l(),f($A.$$.fragment),Xke=l(),gc=a("h2"),c1=a("a"),Ame=a("span"),f(IA.$$.fragment),GUo=l(),Lme=a("span"),XUo=o("TFAutoModel"),Vke=l(),vr=a("div"),f(jA.$$.fragment),VUo=l(),hc=a("p"),zUo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bme=a("code"),WUo=o("from_pretrained()"),QUo=o("class method or the "),xme=a("code"),HUo=o("from_config()"),UUo=o(`class
method.`),JUo=l(),NA=a("p"),YUo=o("This class cannot be instantiated directly using "),kme=a("code"),KUo=o("__init__()"),ZUo=o(" (throws an error)."),eJo=l(),gt=a("div"),f(DA.$$.fragment),oJo=l(),Rme=a("p"),rJo=o("Instantiates one of the base model classes of the library from a configuration."),tJo=l(),pc=a("p"),aJo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),nJo=o("not"),sJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pme=a("code"),lJo=o("from_pretrained()"),iJo=o("to load the model weights."),dJo=l(),$me=a("p"),cJo=o("Examples:"),fJo=l(),f(qA.$$.fragment),mJo=l(),ho=a("div"),f(OA.$$.fragment),gJo=l(),Ime=a("p"),hJo=o("Instantiate one of the base model classes of the library from a pretrained model."),pJo=l(),_n=a("p"),_Jo=o("The model class to instantiate is selected based on the "),jme=a("code"),uJo=o("model_type"),bJo=o(` property of the config object (either
passed as an argument or loaded from `),Nme=a("code"),vJo=o("pretrained_model_name_or_path"),TJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),FJo=o("pretrained_model_name_or_path"),CJo=o(":"),MJo=l(),B=a("ul"),f1=a("li"),qme=a("strong"),EJo=o("albert"),yJo=o(" \u2014 "),pq=a("a"),wJo=o("TFAlbertModel"),AJo=o(" (ALBERT model)"),LJo=l(),m1=a("li"),Ome=a("strong"),BJo=o("bart"),xJo=o(" \u2014 "),_q=a("a"),kJo=o("TFBartModel"),RJo=o(" (BART model)"),SJo=l(),g1=a("li"),Gme=a("strong"),PJo=o("bert"),$Jo=o(" \u2014 "),uq=a("a"),IJo=o("TFBertModel"),jJo=o(" (BERT model)"),NJo=l(),h1=a("li"),Xme=a("strong"),DJo=o("blenderbot"),qJo=o(" \u2014 "),bq=a("a"),OJo=o("TFBlenderbotModel"),GJo=o(" (Blenderbot model)"),XJo=l(),p1=a("li"),Vme=a("strong"),VJo=o("blenderbot-small"),zJo=o(" \u2014 "),vq=a("a"),WJo=o("TFBlenderbotSmallModel"),QJo=o(" (BlenderbotSmall model)"),HJo=l(),_1=a("li"),zme=a("strong"),UJo=o("camembert"),JJo=o(" \u2014 "),Tq=a("a"),YJo=o("TFCamembertModel"),KJo=o(" (CamemBERT model)"),ZJo=l(),u1=a("li"),Wme=a("strong"),eYo=o("clip"),oYo=o(" \u2014 "),Fq=a("a"),rYo=o("TFCLIPModel"),tYo=o(" (CLIP model)"),aYo=l(),b1=a("li"),Qme=a("strong"),nYo=o("convbert"),sYo=o(" \u2014 "),Cq=a("a"),lYo=o("TFConvBertModel"),iYo=o(" (ConvBERT model)"),dYo=l(),v1=a("li"),Hme=a("strong"),cYo=o("convnext"),fYo=o(" \u2014 "),Mq=a("a"),mYo=o("TFConvNextModel"),gYo=o(" (ConvNext model)"),hYo=l(),T1=a("li"),Ume=a("strong"),pYo=o("ctrl"),_Yo=o(" \u2014 "),Eq=a("a"),uYo=o("TFCTRLModel"),bYo=o(" (CTRL model)"),vYo=l(),F1=a("li"),Jme=a("strong"),TYo=o("deberta"),FYo=o(" \u2014 "),yq=a("a"),CYo=o("TFDebertaModel"),MYo=o(" (DeBERTa model)"),EYo=l(),C1=a("li"),Yme=a("strong"),yYo=o("deberta-v2"),wYo=o(" \u2014 "),wq=a("a"),AYo=o("TFDebertaV2Model"),LYo=o(" (DeBERTa-v2 model)"),BYo=l(),M1=a("li"),Kme=a("strong"),xYo=o("distilbert"),kYo=o(" \u2014 "),Aq=a("a"),RYo=o("TFDistilBertModel"),SYo=o(" (DistilBERT model)"),PYo=l(),E1=a("li"),Zme=a("strong"),$Yo=o("dpr"),IYo=o(" \u2014 "),Lq=a("a"),jYo=o("TFDPRQuestionEncoder"),NYo=o(" (DPR model)"),DYo=l(),y1=a("li"),ege=a("strong"),qYo=o("electra"),OYo=o(" \u2014 "),Bq=a("a"),GYo=o("TFElectraModel"),XYo=o(" (ELECTRA model)"),VYo=l(),w1=a("li"),oge=a("strong"),zYo=o("flaubert"),WYo=o(" \u2014 "),xq=a("a"),QYo=o("TFFlaubertModel"),HYo=o(" (FlauBERT model)"),UYo=l(),Os=a("li"),rge=a("strong"),JYo=o("funnel"),YYo=o(" \u2014 "),kq=a("a"),KYo=o("TFFunnelModel"),ZYo=o(" or "),Rq=a("a"),eKo=o("TFFunnelBaseModel"),oKo=o(" (Funnel Transformer model)"),rKo=l(),A1=a("li"),tge=a("strong"),tKo=o("gpt2"),aKo=o(" \u2014 "),Sq=a("a"),nKo=o("TFGPT2Model"),sKo=o(" (OpenAI GPT-2 model)"),lKo=l(),L1=a("li"),age=a("strong"),iKo=o("hubert"),dKo=o(" \u2014 "),Pq=a("a"),cKo=o("TFHubertModel"),fKo=o(" (Hubert model)"),mKo=l(),B1=a("li"),nge=a("strong"),gKo=o("layoutlm"),hKo=o(" \u2014 "),$q=a("a"),pKo=o("TFLayoutLMModel"),_Ko=o(" (LayoutLM model)"),uKo=l(),x1=a("li"),sge=a("strong"),bKo=o("led"),vKo=o(" \u2014 "),Iq=a("a"),TKo=o("TFLEDModel"),FKo=o(" (LED model)"),CKo=l(),k1=a("li"),lge=a("strong"),MKo=o("longformer"),EKo=o(" \u2014 "),jq=a("a"),yKo=o("TFLongformerModel"),wKo=o(" (Longformer model)"),AKo=l(),R1=a("li"),ige=a("strong"),LKo=o("lxmert"),BKo=o(" \u2014 "),Nq=a("a"),xKo=o("TFLxmertModel"),kKo=o(" (LXMERT model)"),RKo=l(),S1=a("li"),dge=a("strong"),SKo=o("marian"),PKo=o(" \u2014 "),Dq=a("a"),$Ko=o("TFMarianModel"),IKo=o(" (Marian model)"),jKo=l(),P1=a("li"),cge=a("strong"),NKo=o("mbart"),DKo=o(" \u2014 "),qq=a("a"),qKo=o("TFMBartModel"),OKo=o(" (mBART model)"),GKo=l(),$1=a("li"),fge=a("strong"),XKo=o("mobilebert"),VKo=o(" \u2014 "),Oq=a("a"),zKo=o("TFMobileBertModel"),WKo=o(" (MobileBERT model)"),QKo=l(),I1=a("li"),mge=a("strong"),HKo=o("mpnet"),UKo=o(" \u2014 "),Gq=a("a"),JKo=o("TFMPNetModel"),YKo=o(" (MPNet model)"),KKo=l(),j1=a("li"),gge=a("strong"),ZKo=o("mt5"),eZo=o(" \u2014 "),Xq=a("a"),oZo=o("TFMT5Model"),rZo=o(" (mT5 model)"),tZo=l(),N1=a("li"),hge=a("strong"),aZo=o("openai-gpt"),nZo=o(" \u2014 "),Vq=a("a"),sZo=o("TFOpenAIGPTModel"),lZo=o(" (OpenAI GPT model)"),iZo=l(),D1=a("li"),pge=a("strong"),dZo=o("pegasus"),cZo=o(" \u2014 "),zq=a("a"),fZo=o("TFPegasusModel"),mZo=o(" (Pegasus model)"),gZo=l(),q1=a("li"),_ge=a("strong"),hZo=o("rembert"),pZo=o(" \u2014 "),Wq=a("a"),_Zo=o("TFRemBertModel"),uZo=o(" (RemBERT model)"),bZo=l(),O1=a("li"),uge=a("strong"),vZo=o("roberta"),TZo=o(" \u2014 "),Qq=a("a"),FZo=o("TFRobertaModel"),CZo=o(" (RoBERTa model)"),MZo=l(),G1=a("li"),bge=a("strong"),EZo=o("roformer"),yZo=o(" \u2014 "),Hq=a("a"),wZo=o("TFRoFormerModel"),AZo=o(" (RoFormer model)"),LZo=l(),X1=a("li"),vge=a("strong"),BZo=o("speech_to_text"),xZo=o(" \u2014 "),Uq=a("a"),kZo=o("TFSpeech2TextModel"),RZo=o(" (Speech2Text model)"),SZo=l(),V1=a("li"),Tge=a("strong"),PZo=o("t5"),$Zo=o(" \u2014 "),Jq=a("a"),IZo=o("TFT5Model"),jZo=o(" (T5 model)"),NZo=l(),z1=a("li"),Fge=a("strong"),DZo=o("tapas"),qZo=o(" \u2014 "),Yq=a("a"),OZo=o("TFTapasModel"),GZo=o(" (TAPAS model)"),XZo=l(),W1=a("li"),Cge=a("strong"),VZo=o("transfo-xl"),zZo=o(" \u2014 "),Kq=a("a"),WZo=o("TFTransfoXLModel"),QZo=o(" (Transformer-XL model)"),HZo=l(),Q1=a("li"),Mge=a("strong"),UZo=o("vit"),JZo=o(" \u2014 "),Zq=a("a"),YZo=o("TFViTModel"),KZo=o(" (ViT model)"),ZZo=l(),H1=a("li"),Ege=a("strong"),eer=o("wav2vec2"),oer=o(" \u2014 "),eO=a("a"),rer=o("TFWav2Vec2Model"),ter=o(" (Wav2Vec2 model)"),aer=l(),U1=a("li"),yge=a("strong"),ner=o("xlm"),ser=o(" \u2014 "),oO=a("a"),ler=o("TFXLMModel"),ier=o(" (XLM model)"),der=l(),J1=a("li"),wge=a("strong"),cer=o("xlm-roberta"),fer=o(" \u2014 "),rO=a("a"),mer=o("TFXLMRobertaModel"),ger=o(" (XLM-RoBERTa model)"),her=l(),Y1=a("li"),Age=a("strong"),per=o("xlnet"),_er=o(" \u2014 "),tO=a("a"),uer=o("TFXLNetModel"),ber=o(" (XLNet model)"),ver=l(),Lge=a("p"),Ter=o("Examples:"),Fer=l(),f(GA.$$.fragment),zke=l(),_c=a("h2"),K1=a("a"),Bge=a("span"),f(XA.$$.fragment),Cer=l(),xge=a("span"),Mer=o("TFAutoModelForPreTraining"),Wke=l(),Tr=a("div"),f(VA.$$.fragment),Eer=l(),uc=a("p"),yer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kge=a("code"),wer=o("from_pretrained()"),Aer=o("class method or the "),Rge=a("code"),Ler=o("from_config()"),Ber=o(`class
method.`),xer=l(),zA=a("p"),ker=o("This class cannot be instantiated directly using "),Sge=a("code"),Rer=o("__init__()"),Ser=o(" (throws an error)."),Per=l(),ht=a("div"),f(WA.$$.fragment),$er=l(),Pge=a("p"),Ier=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jer=l(),bc=a("p"),Ner=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),Der=o("not"),qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ige=a("code"),Oer=o("from_pretrained()"),Ger=o("to load the model weights."),Xer=l(),jge=a("p"),Ver=o("Examples:"),zer=l(),f(QA.$$.fragment),Wer=l(),po=a("div"),f(HA.$$.fragment),Qer=l(),Nge=a("p"),Her=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Uer=l(),un=a("p"),Jer=o("The model class to instantiate is selected based on the "),Dge=a("code"),Yer=o("model_type"),Ker=o(` property of the config object (either
passed as an argument or loaded from `),qge=a("code"),Zer=o("pretrained_model_name_or_path"),eor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),oor=o("pretrained_model_name_or_path"),ror=o(":"),tor=l(),H=a("ul"),Z1=a("li"),Gge=a("strong"),aor=o("albert"),nor=o(" \u2014 "),aO=a("a"),sor=o("TFAlbertForPreTraining"),lor=o(" (ALBERT model)"),ior=l(),eF=a("li"),Xge=a("strong"),dor=o("bart"),cor=o(" \u2014 "),nO=a("a"),mor=o("TFBartForConditionalGeneration"),gor=o(" (BART model)"),hor=l(),oF=a("li"),Vge=a("strong"),por=o("bert"),_or=o(" \u2014 "),sO=a("a"),uor=o("TFBertForPreTraining"),bor=o(" (BERT model)"),vor=l(),rF=a("li"),zge=a("strong"),Tor=o("camembert"),For=o(" \u2014 "),lO=a("a"),Cor=o("TFCamembertForMaskedLM"),Mor=o(" (CamemBERT model)"),Eor=l(),tF=a("li"),Wge=a("strong"),yor=o("ctrl"),wor=o(" \u2014 "),iO=a("a"),Aor=o("TFCTRLLMHeadModel"),Lor=o(" (CTRL model)"),Bor=l(),aF=a("li"),Qge=a("strong"),xor=o("distilbert"),kor=o(" \u2014 "),dO=a("a"),Ror=o("TFDistilBertForMaskedLM"),Sor=o(" (DistilBERT model)"),Por=l(),nF=a("li"),Hge=a("strong"),$or=o("electra"),Ior=o(" \u2014 "),cO=a("a"),jor=o("TFElectraForPreTraining"),Nor=o(" (ELECTRA model)"),Dor=l(),sF=a("li"),Uge=a("strong"),qor=o("flaubert"),Oor=o(" \u2014 "),fO=a("a"),Gor=o("TFFlaubertWithLMHeadModel"),Xor=o(" (FlauBERT model)"),Vor=l(),lF=a("li"),Jge=a("strong"),zor=o("funnel"),Wor=o(" \u2014 "),mO=a("a"),Qor=o("TFFunnelForPreTraining"),Hor=o(" (Funnel Transformer model)"),Uor=l(),iF=a("li"),Yge=a("strong"),Jor=o("gpt2"),Yor=o(" \u2014 "),gO=a("a"),Kor=o("TFGPT2LMHeadModel"),Zor=o(" (OpenAI GPT-2 model)"),err=l(),dF=a("li"),Kge=a("strong"),orr=o("layoutlm"),rrr=o(" \u2014 "),hO=a("a"),trr=o("TFLayoutLMForMaskedLM"),arr=o(" (LayoutLM model)"),nrr=l(),cF=a("li"),Zge=a("strong"),srr=o("lxmert"),lrr=o(" \u2014 "),pO=a("a"),irr=o("TFLxmertForPreTraining"),drr=o(" (LXMERT model)"),crr=l(),fF=a("li"),ehe=a("strong"),frr=o("mobilebert"),mrr=o(" \u2014 "),_O=a("a"),grr=o("TFMobileBertForPreTraining"),hrr=o(" (MobileBERT model)"),prr=l(),mF=a("li"),ohe=a("strong"),_rr=o("mpnet"),urr=o(" \u2014 "),uO=a("a"),brr=o("TFMPNetForMaskedLM"),vrr=o(" (MPNet model)"),Trr=l(),gF=a("li"),rhe=a("strong"),Frr=o("openai-gpt"),Crr=o(" \u2014 "),bO=a("a"),Mrr=o("TFOpenAIGPTLMHeadModel"),Err=o(" (OpenAI GPT model)"),yrr=l(),hF=a("li"),the=a("strong"),wrr=o("roberta"),Arr=o(" \u2014 "),vO=a("a"),Lrr=o("TFRobertaForMaskedLM"),Brr=o(" (RoBERTa model)"),xrr=l(),pF=a("li"),ahe=a("strong"),krr=o("t5"),Rrr=o(" \u2014 "),TO=a("a"),Srr=o("TFT5ForConditionalGeneration"),Prr=o(" (T5 model)"),$rr=l(),_F=a("li"),nhe=a("strong"),Irr=o("tapas"),jrr=o(" \u2014 "),FO=a("a"),Nrr=o("TFTapasForMaskedLM"),Drr=o(" (TAPAS model)"),qrr=l(),uF=a("li"),she=a("strong"),Orr=o("transfo-xl"),Grr=o(" \u2014 "),CO=a("a"),Xrr=o("TFTransfoXLLMHeadModel"),Vrr=o(" (Transformer-XL model)"),zrr=l(),bF=a("li"),lhe=a("strong"),Wrr=o("xlm"),Qrr=o(" \u2014 "),MO=a("a"),Hrr=o("TFXLMWithLMHeadModel"),Urr=o(" (XLM model)"),Jrr=l(),vF=a("li"),ihe=a("strong"),Yrr=o("xlm-roberta"),Krr=o(" \u2014 "),EO=a("a"),Zrr=o("TFXLMRobertaForMaskedLM"),etr=o(" (XLM-RoBERTa model)"),otr=l(),TF=a("li"),dhe=a("strong"),rtr=o("xlnet"),ttr=o(" \u2014 "),yO=a("a"),atr=o("TFXLNetLMHeadModel"),ntr=o(" (XLNet model)"),str=l(),che=a("p"),ltr=o("Examples:"),itr=l(),f(UA.$$.fragment),Qke=l(),vc=a("h2"),FF=a("a"),fhe=a("span"),f(JA.$$.fragment),dtr=l(),mhe=a("span"),ctr=o("TFAutoModelForCausalLM"),Hke=l(),Fr=a("div"),f(YA.$$.fragment),ftr=l(),Tc=a("p"),mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ghe=a("code"),gtr=o("from_pretrained()"),htr=o("class method or the "),hhe=a("code"),ptr=o("from_config()"),_tr=o(`class
method.`),utr=l(),KA=a("p"),btr=o("This class cannot be instantiated directly using "),phe=a("code"),vtr=o("__init__()"),Ttr=o(" (throws an error)."),Ftr=l(),pt=a("div"),f(ZA.$$.fragment),Ctr=l(),_he=a("p"),Mtr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Etr=l(),Fc=a("p"),ytr=o(`Note:
Loading a model from its configuration file does `),uhe=a("strong"),wtr=o("not"),Atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bhe=a("code"),Ltr=o("from_pretrained()"),Btr=o("to load the model weights."),xtr=l(),vhe=a("p"),ktr=o("Examples:"),Rtr=l(),f(e0.$$.fragment),Str=l(),_o=a("div"),f(o0.$$.fragment),Ptr=l(),The=a("p"),$tr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Itr=l(),bn=a("p"),jtr=o("The model class to instantiate is selected based on the "),Fhe=a("code"),Ntr=o("model_type"),Dtr=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),qtr=o("pretrained_model_name_or_path"),Otr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),Gtr=o("pretrained_model_name_or_path"),Xtr=o(":"),Vtr=l(),ge=a("ul"),CF=a("li"),Ehe=a("strong"),ztr=o("bert"),Wtr=o(" \u2014 "),wO=a("a"),Qtr=o("TFBertLMHeadModel"),Htr=o(" (BERT model)"),Utr=l(),MF=a("li"),yhe=a("strong"),Jtr=o("camembert"),Ytr=o(" \u2014 "),AO=a("a"),Ktr=o("TFCamembertForCausalLM"),Ztr=o(" (CamemBERT model)"),ear=l(),EF=a("li"),whe=a("strong"),oar=o("ctrl"),rar=o(" \u2014 "),LO=a("a"),tar=o("TFCTRLLMHeadModel"),aar=o(" (CTRL model)"),nar=l(),yF=a("li"),Ahe=a("strong"),sar=o("gpt2"),lar=o(" \u2014 "),BO=a("a"),iar=o("TFGPT2LMHeadModel"),dar=o(" (OpenAI GPT-2 model)"),car=l(),wF=a("li"),Lhe=a("strong"),far=o("openai-gpt"),mar=o(" \u2014 "),xO=a("a"),gar=o("TFOpenAIGPTLMHeadModel"),har=o(" (OpenAI GPT model)"),par=l(),AF=a("li"),Bhe=a("strong"),_ar=o("rembert"),uar=o(" \u2014 "),kO=a("a"),bar=o("TFRemBertForCausalLM"),Tar=o(" (RemBERT model)"),Far=l(),LF=a("li"),xhe=a("strong"),Car=o("roberta"),Mar=o(" \u2014 "),RO=a("a"),Ear=o("TFRobertaForCausalLM"),yar=o(" (RoBERTa model)"),war=l(),BF=a("li"),khe=a("strong"),Aar=o("roformer"),Lar=o(" \u2014 "),SO=a("a"),Bar=o("TFRoFormerForCausalLM"),xar=o(" (RoFormer model)"),kar=l(),xF=a("li"),Rhe=a("strong"),Rar=o("transfo-xl"),Sar=o(" \u2014 "),PO=a("a"),Par=o("TFTransfoXLLMHeadModel"),$ar=o(" (Transformer-XL model)"),Iar=l(),kF=a("li"),She=a("strong"),jar=o("xlm"),Nar=o(" \u2014 "),$O=a("a"),Dar=o("TFXLMWithLMHeadModel"),qar=o(" (XLM model)"),Oar=l(),RF=a("li"),Phe=a("strong"),Gar=o("xlnet"),Xar=o(" \u2014 "),IO=a("a"),Var=o("TFXLNetLMHeadModel"),zar=o(" (XLNet model)"),War=l(),$he=a("p"),Qar=o("Examples:"),Har=l(),f(r0.$$.fragment),Uke=l(),Cc=a("h2"),SF=a("a"),Ihe=a("span"),f(t0.$$.fragment),Uar=l(),jhe=a("span"),Jar=o("TFAutoModelForImageClassification"),Jke=l(),Cr=a("div"),f(a0.$$.fragment),Yar=l(),Mc=a("p"),Kar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nhe=a("code"),Zar=o("from_pretrained()"),enr=o("class method or the "),Dhe=a("code"),onr=o("from_config()"),rnr=o(`class
method.`),tnr=l(),n0=a("p"),anr=o("This class cannot be instantiated directly using "),qhe=a("code"),nnr=o("__init__()"),snr=o(" (throws an error)."),lnr=l(),_t=a("div"),f(s0.$$.fragment),inr=l(),Ohe=a("p"),dnr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cnr=l(),Ec=a("p"),fnr=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),mnr=o("not"),gnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=a("code"),hnr=o("from_pretrained()"),pnr=o("to load the model weights."),_nr=l(),Vhe=a("p"),unr=o("Examples:"),bnr=l(),f(l0.$$.fragment),vnr=l(),uo=a("div"),f(i0.$$.fragment),Tnr=l(),zhe=a("p"),Fnr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cnr=l(),vn=a("p"),Mnr=o("The model class to instantiate is selected based on the "),Whe=a("code"),Enr=o("model_type"),ynr=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),Lnr=o("pretrained_model_name_or_path"),Bnr=o(":"),xnr=l(),d0=a("ul"),PF=a("li"),Uhe=a("strong"),knr=o("convnext"),Rnr=o(" \u2014 "),jO=a("a"),Snr=o("TFConvNextForImageClassification"),Pnr=o(" (ConvNext model)"),$nr=l(),$F=a("li"),Jhe=a("strong"),Inr=o("vit"),jnr=o(" \u2014 "),NO=a("a"),Nnr=o("TFViTForImageClassification"),Dnr=o(" (ViT model)"),qnr=l(),Yhe=a("p"),Onr=o("Examples:"),Gnr=l(),f(c0.$$.fragment),Yke=l(),yc=a("h2"),IF=a("a"),Khe=a("span"),f(f0.$$.fragment),Xnr=l(),Zhe=a("span"),Vnr=o("TFAutoModelForMaskedLM"),Kke=l(),Mr=a("div"),f(m0.$$.fragment),znr=l(),wc=a("p"),Wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),epe=a("code"),Qnr=o("from_pretrained()"),Hnr=o("class method or the "),ope=a("code"),Unr=o("from_config()"),Jnr=o(`class
method.`),Ynr=l(),g0=a("p"),Knr=o("This class cannot be instantiated directly using "),rpe=a("code"),Znr=o("__init__()"),esr=o(" (throws an error)."),osr=l(),ut=a("div"),f(h0.$$.fragment),rsr=l(),tpe=a("p"),tsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),asr=l(),Ac=a("p"),nsr=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),ssr=o("not"),lsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=a("code"),isr=o("from_pretrained()"),dsr=o("to load the model weights."),csr=l(),spe=a("p"),fsr=o("Examples:"),msr=l(),f(p0.$$.fragment),gsr=l(),bo=a("div"),f(_0.$$.fragment),hsr=l(),lpe=a("p"),psr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_sr=l(),Tn=a("p"),usr=o("The model class to instantiate is selected based on the "),ipe=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),Tsr=o("pretrained_model_name_or_path"),Fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),Csr=o("pretrained_model_name_or_path"),Msr=o(":"),Esr=l(),Y=a("ul"),jF=a("li"),fpe=a("strong"),ysr=o("albert"),wsr=o(" \u2014 "),DO=a("a"),Asr=o("TFAlbertForMaskedLM"),Lsr=o(" (ALBERT model)"),Bsr=l(),NF=a("li"),mpe=a("strong"),xsr=o("bert"),ksr=o(" \u2014 "),qO=a("a"),Rsr=o("TFBertForMaskedLM"),Ssr=o(" (BERT model)"),Psr=l(),DF=a("li"),gpe=a("strong"),$sr=o("camembert"),Isr=o(" \u2014 "),OO=a("a"),jsr=o("TFCamembertForMaskedLM"),Nsr=o(" (CamemBERT model)"),Dsr=l(),qF=a("li"),hpe=a("strong"),qsr=o("convbert"),Osr=o(" \u2014 "),GO=a("a"),Gsr=o("TFConvBertForMaskedLM"),Xsr=o(" (ConvBERT model)"),Vsr=l(),OF=a("li"),ppe=a("strong"),zsr=o("deberta"),Wsr=o(" \u2014 "),XO=a("a"),Qsr=o("TFDebertaForMaskedLM"),Hsr=o(" (DeBERTa model)"),Usr=l(),GF=a("li"),_pe=a("strong"),Jsr=o("deberta-v2"),Ysr=o(" \u2014 "),VO=a("a"),Ksr=o("TFDebertaV2ForMaskedLM"),Zsr=o(" (DeBERTa-v2 model)"),elr=l(),XF=a("li"),upe=a("strong"),olr=o("distilbert"),rlr=o(" \u2014 "),zO=a("a"),tlr=o("TFDistilBertForMaskedLM"),alr=o(" (DistilBERT model)"),nlr=l(),VF=a("li"),bpe=a("strong"),slr=o("electra"),llr=o(" \u2014 "),WO=a("a"),ilr=o("TFElectraForMaskedLM"),dlr=o(" (ELECTRA model)"),clr=l(),zF=a("li"),vpe=a("strong"),flr=o("flaubert"),mlr=o(" \u2014 "),QO=a("a"),glr=o("TFFlaubertWithLMHeadModel"),hlr=o(" (FlauBERT model)"),plr=l(),WF=a("li"),Tpe=a("strong"),_lr=o("funnel"),ulr=o(" \u2014 "),HO=a("a"),blr=o("TFFunnelForMaskedLM"),vlr=o(" (Funnel Transformer model)"),Tlr=l(),QF=a("li"),Fpe=a("strong"),Flr=o("layoutlm"),Clr=o(" \u2014 "),UO=a("a"),Mlr=o("TFLayoutLMForMaskedLM"),Elr=o(" (LayoutLM model)"),ylr=l(),HF=a("li"),Cpe=a("strong"),wlr=o("longformer"),Alr=o(" \u2014 "),JO=a("a"),Llr=o("TFLongformerForMaskedLM"),Blr=o(" (Longformer model)"),xlr=l(),UF=a("li"),Mpe=a("strong"),klr=o("mobilebert"),Rlr=o(" \u2014 "),YO=a("a"),Slr=o("TFMobileBertForMaskedLM"),Plr=o(" (MobileBERT model)"),$lr=l(),JF=a("li"),Epe=a("strong"),Ilr=o("mpnet"),jlr=o(" \u2014 "),KO=a("a"),Nlr=o("TFMPNetForMaskedLM"),Dlr=o(" (MPNet model)"),qlr=l(),YF=a("li"),ype=a("strong"),Olr=o("rembert"),Glr=o(" \u2014 "),ZO=a("a"),Xlr=o("TFRemBertForMaskedLM"),Vlr=o(" (RemBERT model)"),zlr=l(),KF=a("li"),wpe=a("strong"),Wlr=o("roberta"),Qlr=o(" \u2014 "),eG=a("a"),Hlr=o("TFRobertaForMaskedLM"),Ulr=o(" (RoBERTa model)"),Jlr=l(),ZF=a("li"),Ape=a("strong"),Ylr=o("roformer"),Klr=o(" \u2014 "),oG=a("a"),Zlr=o("TFRoFormerForMaskedLM"),eir=o(" (RoFormer model)"),oir=l(),eC=a("li"),Lpe=a("strong"),rir=o("tapas"),tir=o(" \u2014 "),rG=a("a"),air=o("TFTapasForMaskedLM"),nir=o(" (TAPAS model)"),sir=l(),oC=a("li"),Bpe=a("strong"),lir=o("xlm"),iir=o(" \u2014 "),tG=a("a"),dir=o("TFXLMWithLMHeadModel"),cir=o(" (XLM model)"),fir=l(),rC=a("li"),xpe=a("strong"),mir=o("xlm-roberta"),gir=o(" \u2014 "),aG=a("a"),hir=o("TFXLMRobertaForMaskedLM"),pir=o(" (XLM-RoBERTa model)"),_ir=l(),kpe=a("p"),uir=o("Examples:"),bir=l(),f(u0.$$.fragment),Zke=l(),Lc=a("h2"),tC=a("a"),Rpe=a("span"),f(b0.$$.fragment),vir=l(),Spe=a("span"),Tir=o("TFAutoModelForSeq2SeqLM"),eRe=l(),Er=a("div"),f(v0.$$.fragment),Fir=l(),Bc=a("p"),Cir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ppe=a("code"),Mir=o("from_pretrained()"),Eir=o("class method or the "),$pe=a("code"),yir=o("from_config()"),wir=o(`class
method.`),Air=l(),T0=a("p"),Lir=o("This class cannot be instantiated directly using "),Ipe=a("code"),Bir=o("__init__()"),xir=o(" (throws an error)."),kir=l(),bt=a("div"),f(F0.$$.fragment),Rir=l(),jpe=a("p"),Sir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pir=l(),xc=a("p"),$ir=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),Iir=o("not"),jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=a("code"),Nir=o("from_pretrained()"),Dir=o("to load the model weights."),qir=l(),qpe=a("p"),Oir=o("Examples:"),Gir=l(),f(C0.$$.fragment),Xir=l(),vo=a("div"),f(M0.$$.fragment),Vir=l(),Ope=a("p"),zir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wir=l(),Fn=a("p"),Qir=o("The model class to instantiate is selected based on the "),Gpe=a("code"),Hir=o("model_type"),Uir=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),Jir=o("pretrained_model_name_or_path"),Yir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),Kir=o("pretrained_model_name_or_path"),Zir=o(":"),edr=l(),ue=a("ul"),aC=a("li"),zpe=a("strong"),odr=o("bart"),rdr=o(" \u2014 "),nG=a("a"),tdr=o("TFBartForConditionalGeneration"),adr=o(" (BART model)"),ndr=l(),nC=a("li"),Wpe=a("strong"),sdr=o("blenderbot"),ldr=o(" \u2014 "),sG=a("a"),idr=o("TFBlenderbotForConditionalGeneration"),ddr=o(" (Blenderbot model)"),cdr=l(),sC=a("li"),Qpe=a("strong"),fdr=o("blenderbot-small"),mdr=o(" \u2014 "),lG=a("a"),gdr=o("TFBlenderbotSmallForConditionalGeneration"),hdr=o(" (BlenderbotSmall model)"),pdr=l(),lC=a("li"),Hpe=a("strong"),_dr=o("encoder-decoder"),udr=o(" \u2014 "),iG=a("a"),bdr=o("TFEncoderDecoderModel"),vdr=o(" (Encoder decoder model)"),Tdr=l(),iC=a("li"),Upe=a("strong"),Fdr=o("led"),Cdr=o(" \u2014 "),dG=a("a"),Mdr=o("TFLEDForConditionalGeneration"),Edr=o(" (LED model)"),ydr=l(),dC=a("li"),Jpe=a("strong"),wdr=o("marian"),Adr=o(" \u2014 "),cG=a("a"),Ldr=o("TFMarianMTModel"),Bdr=o(" (Marian model)"),xdr=l(),cC=a("li"),Ype=a("strong"),kdr=o("mbart"),Rdr=o(" \u2014 "),fG=a("a"),Sdr=o("TFMBartForConditionalGeneration"),Pdr=o(" (mBART model)"),$dr=l(),fC=a("li"),Kpe=a("strong"),Idr=o("mt5"),jdr=o(" \u2014 "),mG=a("a"),Ndr=o("TFMT5ForConditionalGeneration"),Ddr=o(" (mT5 model)"),qdr=l(),mC=a("li"),Zpe=a("strong"),Odr=o("pegasus"),Gdr=o(" \u2014 "),gG=a("a"),Xdr=o("TFPegasusForConditionalGeneration"),Vdr=o(" (Pegasus model)"),zdr=l(),gC=a("li"),e_e=a("strong"),Wdr=o("t5"),Qdr=o(" \u2014 "),hG=a("a"),Hdr=o("TFT5ForConditionalGeneration"),Udr=o(" (T5 model)"),Jdr=l(),o_e=a("p"),Ydr=o("Examples:"),Kdr=l(),f(E0.$$.fragment),oRe=l(),kc=a("h2"),hC=a("a"),r_e=a("span"),f(y0.$$.fragment),Zdr=l(),t_e=a("span"),ecr=o("TFAutoModelForSequenceClassification"),rRe=l(),yr=a("div"),f(w0.$$.fragment),ocr=l(),Rc=a("p"),rcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),a_e=a("code"),tcr=o("from_pretrained()"),acr=o("class method or the "),n_e=a("code"),ncr=o("from_config()"),scr=o(`class
method.`),lcr=l(),A0=a("p"),icr=o("This class cannot be instantiated directly using "),s_e=a("code"),dcr=o("__init__()"),ccr=o(" (throws an error)."),fcr=l(),vt=a("div"),f(L0.$$.fragment),mcr=l(),l_e=a("p"),gcr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hcr=l(),Sc=a("p"),pcr=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),_cr=o("not"),ucr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d_e=a("code"),bcr=o("from_pretrained()"),vcr=o("to load the model weights."),Tcr=l(),c_e=a("p"),Fcr=o("Examples:"),Ccr=l(),f(B0.$$.fragment),Mcr=l(),To=a("div"),f(x0.$$.fragment),Ecr=l(),f_e=a("p"),ycr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wcr=l(),Cn=a("p"),Acr=o("The model class to instantiate is selected based on the "),m_e=a("code"),Lcr=o("model_type"),Bcr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),xcr=o("pretrained_model_name_or_path"),kcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),Rcr=o("pretrained_model_name_or_path"),Scr=o(":"),Pcr=l(),V=a("ul"),pC=a("li"),p_e=a("strong"),$cr=o("albert"),Icr=o(" \u2014 "),pG=a("a"),jcr=o("TFAlbertForSequenceClassification"),Ncr=o(" (ALBERT model)"),Dcr=l(),_C=a("li"),__e=a("strong"),qcr=o("bert"),Ocr=o(" \u2014 "),_G=a("a"),Gcr=o("TFBertForSequenceClassification"),Xcr=o(" (BERT model)"),Vcr=l(),uC=a("li"),u_e=a("strong"),zcr=o("camembert"),Wcr=o(" \u2014 "),uG=a("a"),Qcr=o("TFCamembertForSequenceClassification"),Hcr=o(" (CamemBERT model)"),Ucr=l(),bC=a("li"),b_e=a("strong"),Jcr=o("convbert"),Ycr=o(" \u2014 "),bG=a("a"),Kcr=o("TFConvBertForSequenceClassification"),Zcr=o(" (ConvBERT model)"),efr=l(),vC=a("li"),v_e=a("strong"),ofr=o("ctrl"),rfr=o(" \u2014 "),vG=a("a"),tfr=o("TFCTRLForSequenceClassification"),afr=o(" (CTRL model)"),nfr=l(),TC=a("li"),T_e=a("strong"),sfr=o("deberta"),lfr=o(" \u2014 "),TG=a("a"),ifr=o("TFDebertaForSequenceClassification"),dfr=o(" (DeBERTa model)"),cfr=l(),FC=a("li"),F_e=a("strong"),ffr=o("deberta-v2"),mfr=o(" \u2014 "),FG=a("a"),gfr=o("TFDebertaV2ForSequenceClassification"),hfr=o(" (DeBERTa-v2 model)"),pfr=l(),CC=a("li"),C_e=a("strong"),_fr=o("distilbert"),ufr=o(" \u2014 "),CG=a("a"),bfr=o("TFDistilBertForSequenceClassification"),vfr=o(" (DistilBERT model)"),Tfr=l(),MC=a("li"),M_e=a("strong"),Ffr=o("electra"),Cfr=o(" \u2014 "),MG=a("a"),Mfr=o("TFElectraForSequenceClassification"),Efr=o(" (ELECTRA model)"),yfr=l(),EC=a("li"),E_e=a("strong"),wfr=o("flaubert"),Afr=o(" \u2014 "),EG=a("a"),Lfr=o("TFFlaubertForSequenceClassification"),Bfr=o(" (FlauBERT model)"),xfr=l(),yC=a("li"),y_e=a("strong"),kfr=o("funnel"),Rfr=o(" \u2014 "),yG=a("a"),Sfr=o("TFFunnelForSequenceClassification"),Pfr=o(" (Funnel Transformer model)"),$fr=l(),wC=a("li"),w_e=a("strong"),Ifr=o("gpt2"),jfr=o(" \u2014 "),wG=a("a"),Nfr=o("TFGPT2ForSequenceClassification"),Dfr=o(" (OpenAI GPT-2 model)"),qfr=l(),AC=a("li"),A_e=a("strong"),Ofr=o("layoutlm"),Gfr=o(" \u2014 "),AG=a("a"),Xfr=o("TFLayoutLMForSequenceClassification"),Vfr=o(" (LayoutLM model)"),zfr=l(),LC=a("li"),L_e=a("strong"),Wfr=o("longformer"),Qfr=o(" \u2014 "),LG=a("a"),Hfr=o("TFLongformerForSequenceClassification"),Ufr=o(" (Longformer model)"),Jfr=l(),BC=a("li"),B_e=a("strong"),Yfr=o("mobilebert"),Kfr=o(" \u2014 "),BG=a("a"),Zfr=o("TFMobileBertForSequenceClassification"),emr=o(" (MobileBERT model)"),omr=l(),xC=a("li"),x_e=a("strong"),rmr=o("mpnet"),tmr=o(" \u2014 "),xG=a("a"),amr=o("TFMPNetForSequenceClassification"),nmr=o(" (MPNet model)"),smr=l(),kC=a("li"),k_e=a("strong"),lmr=o("openai-gpt"),imr=o(" \u2014 "),kG=a("a"),dmr=o("TFOpenAIGPTForSequenceClassification"),cmr=o(" (OpenAI GPT model)"),fmr=l(),RC=a("li"),R_e=a("strong"),mmr=o("rembert"),gmr=o(" \u2014 "),RG=a("a"),hmr=o("TFRemBertForSequenceClassification"),pmr=o(" (RemBERT model)"),_mr=l(),SC=a("li"),S_e=a("strong"),umr=o("roberta"),bmr=o(" \u2014 "),SG=a("a"),vmr=o("TFRobertaForSequenceClassification"),Tmr=o(" (RoBERTa model)"),Fmr=l(),PC=a("li"),P_e=a("strong"),Cmr=o("roformer"),Mmr=o(" \u2014 "),PG=a("a"),Emr=o("TFRoFormerForSequenceClassification"),ymr=o(" (RoFormer model)"),wmr=l(),$C=a("li"),$_e=a("strong"),Amr=o("tapas"),Lmr=o(" \u2014 "),$G=a("a"),Bmr=o("TFTapasForSequenceClassification"),xmr=o(" (TAPAS model)"),kmr=l(),IC=a("li"),I_e=a("strong"),Rmr=o("transfo-xl"),Smr=o(" \u2014 "),IG=a("a"),Pmr=o("TFTransfoXLForSequenceClassification"),$mr=o(" (Transformer-XL model)"),Imr=l(),jC=a("li"),j_e=a("strong"),jmr=o("xlm"),Nmr=o(" \u2014 "),jG=a("a"),Dmr=o("TFXLMForSequenceClassification"),qmr=o(" (XLM model)"),Omr=l(),NC=a("li"),N_e=a("strong"),Gmr=o("xlm-roberta"),Xmr=o(" \u2014 "),NG=a("a"),Vmr=o("TFXLMRobertaForSequenceClassification"),zmr=o(" (XLM-RoBERTa model)"),Wmr=l(),DC=a("li"),D_e=a("strong"),Qmr=o("xlnet"),Hmr=o(" \u2014 "),DG=a("a"),Umr=o("TFXLNetForSequenceClassification"),Jmr=o(" (XLNet model)"),Ymr=l(),q_e=a("p"),Kmr=o("Examples:"),Zmr=l(),f(k0.$$.fragment),tRe=l(),Pc=a("h2"),qC=a("a"),O_e=a("span"),f(R0.$$.fragment),egr=l(),G_e=a("span"),ogr=o("TFAutoModelForMultipleChoice"),aRe=l(),wr=a("div"),f(S0.$$.fragment),rgr=l(),$c=a("p"),tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),X_e=a("code"),agr=o("from_pretrained()"),ngr=o("class method or the "),V_e=a("code"),sgr=o("from_config()"),lgr=o(`class
method.`),igr=l(),P0=a("p"),dgr=o("This class cannot be instantiated directly using "),z_e=a("code"),cgr=o("__init__()"),fgr=o(" (throws an error)."),mgr=l(),Tt=a("div"),f($0.$$.fragment),ggr=l(),W_e=a("p"),hgr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pgr=l(),Ic=a("p"),_gr=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),ugr=o("not"),bgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=a("code"),vgr=o("from_pretrained()"),Tgr=o("to load the model weights."),Fgr=l(),U_e=a("p"),Cgr=o("Examples:"),Mgr=l(),f(I0.$$.fragment),Egr=l(),Fo=a("div"),f(j0.$$.fragment),ygr=l(),J_e=a("p"),wgr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Agr=l(),Mn=a("p"),Lgr=o("The model class to instantiate is selected based on the "),Y_e=a("code"),Bgr=o("model_type"),xgr=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),kgr=o("pretrained_model_name_or_path"),Rgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),Sgr=o("pretrained_model_name_or_path"),Pgr=o(":"),$gr=l(),ae=a("ul"),OC=a("li"),eue=a("strong"),Igr=o("albert"),jgr=o(" \u2014 "),qG=a("a"),Ngr=o("TFAlbertForMultipleChoice"),Dgr=o(" (ALBERT model)"),qgr=l(),GC=a("li"),oue=a("strong"),Ogr=o("bert"),Ggr=o(" \u2014 "),OG=a("a"),Xgr=o("TFBertForMultipleChoice"),Vgr=o(" (BERT model)"),zgr=l(),XC=a("li"),rue=a("strong"),Wgr=o("camembert"),Qgr=o(" \u2014 "),GG=a("a"),Hgr=o("TFCamembertForMultipleChoice"),Ugr=o(" (CamemBERT model)"),Jgr=l(),VC=a("li"),tue=a("strong"),Ygr=o("convbert"),Kgr=o(" \u2014 "),XG=a("a"),Zgr=o("TFConvBertForMultipleChoice"),ehr=o(" (ConvBERT model)"),ohr=l(),zC=a("li"),aue=a("strong"),rhr=o("distilbert"),thr=o(" \u2014 "),VG=a("a"),ahr=o("TFDistilBertForMultipleChoice"),nhr=o(" (DistilBERT model)"),shr=l(),WC=a("li"),nue=a("strong"),lhr=o("electra"),ihr=o(" \u2014 "),zG=a("a"),dhr=o("TFElectraForMultipleChoice"),chr=o(" (ELECTRA model)"),fhr=l(),QC=a("li"),sue=a("strong"),mhr=o("flaubert"),ghr=o(" \u2014 "),WG=a("a"),hhr=o("TFFlaubertForMultipleChoice"),phr=o(" (FlauBERT model)"),_hr=l(),HC=a("li"),lue=a("strong"),uhr=o("funnel"),bhr=o(" \u2014 "),QG=a("a"),vhr=o("TFFunnelForMultipleChoice"),Thr=o(" (Funnel Transformer model)"),Fhr=l(),UC=a("li"),iue=a("strong"),Chr=o("longformer"),Mhr=o(" \u2014 "),HG=a("a"),Ehr=o("TFLongformerForMultipleChoice"),yhr=o(" (Longformer model)"),whr=l(),JC=a("li"),due=a("strong"),Ahr=o("mobilebert"),Lhr=o(" \u2014 "),UG=a("a"),Bhr=o("TFMobileBertForMultipleChoice"),xhr=o(" (MobileBERT model)"),khr=l(),YC=a("li"),cue=a("strong"),Rhr=o("mpnet"),Shr=o(" \u2014 "),JG=a("a"),Phr=o("TFMPNetForMultipleChoice"),$hr=o(" (MPNet model)"),Ihr=l(),KC=a("li"),fue=a("strong"),jhr=o("rembert"),Nhr=o(" \u2014 "),YG=a("a"),Dhr=o("TFRemBertForMultipleChoice"),qhr=o(" (RemBERT model)"),Ohr=l(),ZC=a("li"),mue=a("strong"),Ghr=o("roberta"),Xhr=o(" \u2014 "),KG=a("a"),Vhr=o("TFRobertaForMultipleChoice"),zhr=o(" (RoBERTa model)"),Whr=l(),eM=a("li"),gue=a("strong"),Qhr=o("roformer"),Hhr=o(" \u2014 "),ZG=a("a"),Uhr=o("TFRoFormerForMultipleChoice"),Jhr=o(" (RoFormer model)"),Yhr=l(),oM=a("li"),hue=a("strong"),Khr=o("xlm"),Zhr=o(" \u2014 "),eX=a("a"),epr=o("TFXLMForMultipleChoice"),opr=o(" (XLM model)"),rpr=l(),rM=a("li"),pue=a("strong"),tpr=o("xlm-roberta"),apr=o(" \u2014 "),oX=a("a"),npr=o("TFXLMRobertaForMultipleChoice"),spr=o(" (XLM-RoBERTa model)"),lpr=l(),tM=a("li"),_ue=a("strong"),ipr=o("xlnet"),dpr=o(" \u2014 "),rX=a("a"),cpr=o("TFXLNetForMultipleChoice"),fpr=o(" (XLNet model)"),mpr=l(),uue=a("p"),gpr=o("Examples:"),hpr=l(),f(N0.$$.fragment),nRe=l(),jc=a("h2"),aM=a("a"),bue=a("span"),f(D0.$$.fragment),ppr=l(),vue=a("span"),_pr=o("TFAutoModelForTableQuestionAnswering"),sRe=l(),Ar=a("div"),f(q0.$$.fragment),upr=l(),Nc=a("p"),bpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tue=a("code"),vpr=o("from_pretrained()"),Tpr=o("class method or the "),Fue=a("code"),Fpr=o("from_config()"),Cpr=o(`class
method.`),Mpr=l(),O0=a("p"),Epr=o("This class cannot be instantiated directly using "),Cue=a("code"),ypr=o("__init__()"),wpr=o(" (throws an error)."),Apr=l(),Ft=a("div"),f(G0.$$.fragment),Lpr=l(),Mue=a("p"),Bpr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xpr=l(),Dc=a("p"),kpr=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),Rpr=o("not"),Spr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yue=a("code"),Ppr=o("from_pretrained()"),$pr=o("to load the model weights."),Ipr=l(),wue=a("p"),jpr=o("Examples:"),Npr=l(),f(X0.$$.fragment),Dpr=l(),Co=a("div"),f(V0.$$.fragment),qpr=l(),Aue=a("p"),Opr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Gpr=l(),En=a("p"),Xpr=o("The model class to instantiate is selected based on the "),Lue=a("code"),Vpr=o("model_type"),zpr=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),Wpr=o("pretrained_model_name_or_path"),Qpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(":"),Jpr=l(),kue=a("ul"),nM=a("li"),Rue=a("strong"),Ypr=o("tapas"),Kpr=o(" \u2014 "),tX=a("a"),Zpr=o("TFTapasForQuestionAnswering"),e_r=o(" (TAPAS model)"),o_r=l(),Sue=a("p"),r_r=o("Examples:"),t_r=l(),f(z0.$$.fragment),lRe=l(),qc=a("h2"),sM=a("a"),Pue=a("span"),f(W0.$$.fragment),a_r=l(),$ue=a("span"),n_r=o("TFAutoModelForTokenClassification"),iRe=l(),Lr=a("div"),f(Q0.$$.fragment),s_r=l(),Oc=a("p"),l_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Iue=a("code"),i_r=o("from_pretrained()"),d_r=o("class method or the "),jue=a("code"),c_r=o("from_config()"),f_r=o(`class
method.`),m_r=l(),H0=a("p"),g_r=o("This class cannot be instantiated directly using "),Nue=a("code"),h_r=o("__init__()"),p_r=o(" (throws an error)."),__r=l(),Ct=a("div"),f(U0.$$.fragment),u_r=l(),Due=a("p"),b_r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),v_r=l(),Gc=a("p"),T_r=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),F_r=o("not"),C_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oue=a("code"),M_r=o("from_pretrained()"),E_r=o("to load the model weights."),y_r=l(),Gue=a("p"),w_r=o("Examples:"),A_r=l(),f(J0.$$.fragment),L_r=l(),Mo=a("div"),f(Y0.$$.fragment),B_r=l(),Xue=a("p"),x_r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k_r=l(),yn=a("p"),R_r=o("The model class to instantiate is selected based on the "),Vue=a("code"),S_r=o("model_type"),P_r=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),$_r=o("pretrained_model_name_or_path"),I_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),j_r=o("pretrained_model_name_or_path"),N_r=o(":"),D_r=l(),K=a("ul"),lM=a("li"),Que=a("strong"),q_r=o("albert"),O_r=o(" \u2014 "),aX=a("a"),G_r=o("TFAlbertForTokenClassification"),X_r=o(" (ALBERT model)"),V_r=l(),iM=a("li"),Hue=a("strong"),z_r=o("bert"),W_r=o(" \u2014 "),nX=a("a"),Q_r=o("TFBertForTokenClassification"),H_r=o(" (BERT model)"),U_r=l(),dM=a("li"),Uue=a("strong"),J_r=o("camembert"),Y_r=o(" \u2014 "),sX=a("a"),K_r=o("TFCamembertForTokenClassification"),Z_r=o(" (CamemBERT model)"),eur=l(),cM=a("li"),Jue=a("strong"),our=o("convbert"),rur=o(" \u2014 "),lX=a("a"),tur=o("TFConvBertForTokenClassification"),aur=o(" (ConvBERT model)"),nur=l(),fM=a("li"),Yue=a("strong"),sur=o("deberta"),lur=o(" \u2014 "),iX=a("a"),iur=o("TFDebertaForTokenClassification"),dur=o(" (DeBERTa model)"),cur=l(),mM=a("li"),Kue=a("strong"),fur=o("deberta-v2"),mur=o(" \u2014 "),dX=a("a"),gur=o("TFDebertaV2ForTokenClassification"),hur=o(" (DeBERTa-v2 model)"),pur=l(),gM=a("li"),Zue=a("strong"),_ur=o("distilbert"),uur=o(" \u2014 "),cX=a("a"),bur=o("TFDistilBertForTokenClassification"),vur=o(" (DistilBERT model)"),Tur=l(),hM=a("li"),ebe=a("strong"),Fur=o("electra"),Cur=o(" \u2014 "),fX=a("a"),Mur=o("TFElectraForTokenClassification"),Eur=o(" (ELECTRA model)"),yur=l(),pM=a("li"),obe=a("strong"),wur=o("flaubert"),Aur=o(" \u2014 "),mX=a("a"),Lur=o("TFFlaubertForTokenClassification"),Bur=o(" (FlauBERT model)"),xur=l(),_M=a("li"),rbe=a("strong"),kur=o("funnel"),Rur=o(" \u2014 "),gX=a("a"),Sur=o("TFFunnelForTokenClassification"),Pur=o(" (Funnel Transformer model)"),$ur=l(),uM=a("li"),tbe=a("strong"),Iur=o("layoutlm"),jur=o(" \u2014 "),hX=a("a"),Nur=o("TFLayoutLMForTokenClassification"),Dur=o(" (LayoutLM model)"),qur=l(),bM=a("li"),abe=a("strong"),Our=o("longformer"),Gur=o(" \u2014 "),pX=a("a"),Xur=o("TFLongformerForTokenClassification"),Vur=o(" (Longformer model)"),zur=l(),vM=a("li"),nbe=a("strong"),Wur=o("mobilebert"),Qur=o(" \u2014 "),_X=a("a"),Hur=o("TFMobileBertForTokenClassification"),Uur=o(" (MobileBERT model)"),Jur=l(),TM=a("li"),sbe=a("strong"),Yur=o("mpnet"),Kur=o(" \u2014 "),uX=a("a"),Zur=o("TFMPNetForTokenClassification"),ebr=o(" (MPNet model)"),obr=l(),FM=a("li"),lbe=a("strong"),rbr=o("rembert"),tbr=o(" \u2014 "),bX=a("a"),abr=o("TFRemBertForTokenClassification"),nbr=o(" (RemBERT model)"),sbr=l(),CM=a("li"),ibe=a("strong"),lbr=o("roberta"),ibr=o(" \u2014 "),vX=a("a"),dbr=o("TFRobertaForTokenClassification"),cbr=o(" (RoBERTa model)"),fbr=l(),MM=a("li"),dbe=a("strong"),mbr=o("roformer"),gbr=o(" \u2014 "),TX=a("a"),hbr=o("TFRoFormerForTokenClassification"),pbr=o(" (RoFormer model)"),_br=l(),EM=a("li"),cbe=a("strong"),ubr=o("xlm"),bbr=o(" \u2014 "),FX=a("a"),vbr=o("TFXLMForTokenClassification"),Tbr=o(" (XLM model)"),Fbr=l(),yM=a("li"),fbe=a("strong"),Cbr=o("xlm-roberta"),Mbr=o(" \u2014 "),CX=a("a"),Ebr=o("TFXLMRobertaForTokenClassification"),ybr=o(" (XLM-RoBERTa model)"),wbr=l(),wM=a("li"),mbe=a("strong"),Abr=o("xlnet"),Lbr=o(" \u2014 "),MX=a("a"),Bbr=o("TFXLNetForTokenClassification"),xbr=o(" (XLNet model)"),kbr=l(),gbe=a("p"),Rbr=o("Examples:"),Sbr=l(),f(K0.$$.fragment),dRe=l(),Xc=a("h2"),AM=a("a"),hbe=a("span"),f(Z0.$$.fragment),Pbr=l(),pbe=a("span"),$br=o("TFAutoModelForQuestionAnswering"),cRe=l(),Br=a("div"),f(eL.$$.fragment),Ibr=l(),Vc=a("p"),jbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_be=a("code"),Nbr=o("from_pretrained()"),Dbr=o("class method or the "),ube=a("code"),qbr=o("from_config()"),Obr=o(`class
method.`),Gbr=l(),oL=a("p"),Xbr=o("This class cannot be instantiated directly using "),bbe=a("code"),Vbr=o("__init__()"),zbr=o(" (throws an error)."),Wbr=l(),Mt=a("div"),f(rL.$$.fragment),Qbr=l(),vbe=a("p"),Hbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ubr=l(),zc=a("p"),Jbr=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),Ybr=o("not"),Kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fbe=a("code"),Zbr=o("from_pretrained()"),e3r=o("to load the model weights."),o3r=l(),Cbe=a("p"),r3r=o("Examples:"),t3r=l(),f(tL.$$.fragment),a3r=l(),Eo=a("div"),f(aL.$$.fragment),n3r=l(),Mbe=a("p"),s3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l3r=l(),wn=a("p"),i3r=o("The model class to instantiate is selected based on the "),Ebe=a("code"),d3r=o("model_type"),c3r=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),f3r=o("pretrained_model_name_or_path"),m3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),g3r=o("pretrained_model_name_or_path"),h3r=o(":"),p3r=l(),Z=a("ul"),LM=a("li"),Abe=a("strong"),_3r=o("albert"),u3r=o(" \u2014 "),EX=a("a"),b3r=o("TFAlbertForQuestionAnswering"),v3r=o(" (ALBERT model)"),T3r=l(),BM=a("li"),Lbe=a("strong"),F3r=o("bert"),C3r=o(" \u2014 "),yX=a("a"),M3r=o("TFBertForQuestionAnswering"),E3r=o(" (BERT model)"),y3r=l(),xM=a("li"),Bbe=a("strong"),w3r=o("camembert"),A3r=o(" \u2014 "),wX=a("a"),L3r=o("TFCamembertForQuestionAnswering"),B3r=o(" (CamemBERT model)"),x3r=l(),kM=a("li"),xbe=a("strong"),k3r=o("convbert"),R3r=o(" \u2014 "),AX=a("a"),S3r=o("TFConvBertForQuestionAnswering"),P3r=o(" (ConvBERT model)"),$3r=l(),RM=a("li"),kbe=a("strong"),I3r=o("deberta"),j3r=o(" \u2014 "),LX=a("a"),N3r=o("TFDebertaForQuestionAnswering"),D3r=o(" (DeBERTa model)"),q3r=l(),SM=a("li"),Rbe=a("strong"),O3r=o("deberta-v2"),G3r=o(" \u2014 "),BX=a("a"),X3r=o("TFDebertaV2ForQuestionAnswering"),V3r=o(" (DeBERTa-v2 model)"),z3r=l(),PM=a("li"),Sbe=a("strong"),W3r=o("distilbert"),Q3r=o(" \u2014 "),xX=a("a"),H3r=o("TFDistilBertForQuestionAnswering"),U3r=o(" (DistilBERT model)"),J3r=l(),$M=a("li"),Pbe=a("strong"),Y3r=o("electra"),K3r=o(" \u2014 "),kX=a("a"),Z3r=o("TFElectraForQuestionAnswering"),e2r=o(" (ELECTRA model)"),o2r=l(),IM=a("li"),$be=a("strong"),r2r=o("flaubert"),t2r=o(" \u2014 "),RX=a("a"),a2r=o("TFFlaubertForQuestionAnsweringSimple"),n2r=o(" (FlauBERT model)"),s2r=l(),jM=a("li"),Ibe=a("strong"),l2r=o("funnel"),i2r=o(" \u2014 "),SX=a("a"),d2r=o("TFFunnelForQuestionAnswering"),c2r=o(" (Funnel Transformer model)"),f2r=l(),NM=a("li"),jbe=a("strong"),m2r=o("longformer"),g2r=o(" \u2014 "),PX=a("a"),h2r=o("TFLongformerForQuestionAnswering"),p2r=o(" (Longformer model)"),_2r=l(),DM=a("li"),Nbe=a("strong"),u2r=o("mobilebert"),b2r=o(" \u2014 "),$X=a("a"),v2r=o("TFMobileBertForQuestionAnswering"),T2r=o(" (MobileBERT model)"),F2r=l(),qM=a("li"),Dbe=a("strong"),C2r=o("mpnet"),M2r=o(" \u2014 "),IX=a("a"),E2r=o("TFMPNetForQuestionAnswering"),y2r=o(" (MPNet model)"),w2r=l(),OM=a("li"),qbe=a("strong"),A2r=o("rembert"),L2r=o(" \u2014 "),jX=a("a"),B2r=o("TFRemBertForQuestionAnswering"),x2r=o(" (RemBERT model)"),k2r=l(),GM=a("li"),Obe=a("strong"),R2r=o("roberta"),S2r=o(" \u2014 "),NX=a("a"),P2r=o("TFRobertaForQuestionAnswering"),$2r=o(" (RoBERTa model)"),I2r=l(),XM=a("li"),Gbe=a("strong"),j2r=o("roformer"),N2r=o(" \u2014 "),DX=a("a"),D2r=o("TFRoFormerForQuestionAnswering"),q2r=o(" (RoFormer model)"),O2r=l(),VM=a("li"),Xbe=a("strong"),G2r=o("xlm"),X2r=o(" \u2014 "),qX=a("a"),V2r=o("TFXLMForQuestionAnsweringSimple"),z2r=o(" (XLM model)"),W2r=l(),zM=a("li"),Vbe=a("strong"),Q2r=o("xlm-roberta"),H2r=o(" \u2014 "),OX=a("a"),U2r=o("TFXLMRobertaForQuestionAnswering"),J2r=o(" (XLM-RoBERTa model)"),Y2r=l(),WM=a("li"),zbe=a("strong"),K2r=o("xlnet"),Z2r=o(" \u2014 "),GX=a("a"),evr=o("TFXLNetForQuestionAnsweringSimple"),ovr=o(" (XLNet model)"),rvr=l(),Wbe=a("p"),tvr=o("Examples:"),avr=l(),f(nL.$$.fragment),fRe=l(),Wc=a("h2"),QM=a("a"),Qbe=a("span"),f(sL.$$.fragment),nvr=l(),Hbe=a("span"),svr=o("TFAutoModelForVision2Seq"),mRe=l(),xr=a("div"),f(lL.$$.fragment),lvr=l(),Qc=a("p"),ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ube=a("code"),dvr=o("from_pretrained()"),cvr=o("class method or the "),Jbe=a("code"),fvr=o("from_config()"),mvr=o(`class
method.`),gvr=l(),iL=a("p"),hvr=o("This class cannot be instantiated directly using "),Ybe=a("code"),pvr=o("__init__()"),_vr=o(" (throws an error)."),uvr=l(),Et=a("div"),f(dL.$$.fragment),bvr=l(),Kbe=a("p"),vvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tvr=l(),Hc=a("p"),Fvr=o(`Note:
Loading a model from its configuration file does `),Zbe=a("strong"),Cvr=o("not"),Mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e3e=a("code"),Evr=o("from_pretrained()"),yvr=o("to load the model weights."),wvr=l(),o3e=a("p"),Avr=o("Examples:"),Lvr=l(),f(cL.$$.fragment),Bvr=l(),yo=a("div"),f(fL.$$.fragment),xvr=l(),r3e=a("p"),kvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Rvr=l(),An=a("p"),Svr=o("The model class to instantiate is selected based on the "),t3e=a("code"),Pvr=o("model_type"),$vr=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),Ivr=o("pretrained_model_name_or_path"),jvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),Nvr=o("pretrained_model_name_or_path"),Dvr=o(":"),qvr=l(),s3e=a("ul"),HM=a("li"),l3e=a("strong"),Ovr=o("vision-encoder-decoder"),Gvr=o(" \u2014 "),XX=a("a"),Xvr=o("TFVisionEncoderDecoderModel"),Vvr=o(" (Vision Encoder decoder model)"),zvr=l(),i3e=a("p"),Wvr=o("Examples:"),Qvr=l(),f(mL.$$.fragment),gRe=l(),Uc=a("h2"),UM=a("a"),d3e=a("span"),f(gL.$$.fragment),Hvr=l(),c3e=a("span"),Uvr=o("TFAutoModelForSpeechSeq2Seq"),hRe=l(),kr=a("div"),f(hL.$$.fragment),Jvr=l(),Jc=a("p"),Yvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),f3e=a("code"),Kvr=o("from_pretrained()"),Zvr=o("class method or the "),m3e=a("code"),eTr=o("from_config()"),oTr=o(`class
method.`),rTr=l(),pL=a("p"),tTr=o("This class cannot be instantiated directly using "),g3e=a("code"),aTr=o("__init__()"),nTr=o(" (throws an error)."),sTr=l(),yt=a("div"),f(_L.$$.fragment),lTr=l(),h3e=a("p"),iTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dTr=l(),Yc=a("p"),cTr=o(`Note:
Loading a model from its configuration file does `),p3e=a("strong"),fTr=o("not"),mTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_3e=a("code"),gTr=o("from_pretrained()"),hTr=o("to load the model weights."),pTr=l(),u3e=a("p"),_Tr=o("Examples:"),uTr=l(),f(uL.$$.fragment),bTr=l(),wo=a("div"),f(bL.$$.fragment),vTr=l(),b3e=a("p"),TTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FTr=l(),Ln=a("p"),CTr=o("The model class to instantiate is selected based on the "),v3e=a("code"),MTr=o("model_type"),ETr=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),yTr=o("pretrained_model_name_or_path"),wTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),ATr=o("pretrained_model_name_or_path"),LTr=o(":"),BTr=l(),C3e=a("ul"),JM=a("li"),M3e=a("strong"),xTr=o("speech_to_text"),kTr=o(" \u2014 "),VX=a("a"),RTr=o("TFSpeech2TextForConditionalGeneration"),STr=o(" (Speech2Text model)"),PTr=l(),E3e=a("p"),$Tr=o("Examples:"),ITr=l(),f(vL.$$.fragment),pRe=l(),Kc=a("h2"),YM=a("a"),y3e=a("span"),f(TL.$$.fragment),jTr=l(),w3e=a("span"),NTr=o("FlaxAutoModel"),_Re=l(),Rr=a("div"),f(FL.$$.fragment),DTr=l(),Zc=a("p"),qTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),A3e=a("code"),OTr=o("from_pretrained()"),GTr=o("class method or the "),L3e=a("code"),XTr=o("from_config()"),VTr=o(`class
method.`),zTr=l(),CL=a("p"),WTr=o("This class cannot be instantiated directly using "),B3e=a("code"),QTr=o("__init__()"),HTr=o(" (throws an error)."),UTr=l(),wt=a("div"),f(ML.$$.fragment),JTr=l(),x3e=a("p"),YTr=o("Instantiates one of the base model classes of the library from a configuration."),KTr=l(),ef=a("p"),ZTr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),e1r=o("not"),o1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R3e=a("code"),r1r=o("from_pretrained()"),t1r=o("to load the model weights."),a1r=l(),S3e=a("p"),n1r=o("Examples:"),s1r=l(),f(EL.$$.fragment),l1r=l(),Ao=a("div"),f(yL.$$.fragment),i1r=l(),P3e=a("p"),d1r=o("Instantiate one of the base model classes of the library from a pretrained model."),c1r=l(),Bn=a("p"),f1r=o("The model class to instantiate is selected based on the "),$3e=a("code"),m1r=o("model_type"),g1r=o(` property of the config object (either
passed as an argument or loaded from `),I3e=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),_1r=o("pretrained_model_name_or_path"),u1r=o(":"),b1r=l(),z=a("ul"),KM=a("li"),N3e=a("strong"),v1r=o("albert"),T1r=o(" \u2014 "),zX=a("a"),F1r=o("FlaxAlbertModel"),C1r=o(" (ALBERT model)"),M1r=l(),ZM=a("li"),D3e=a("strong"),E1r=o("bart"),y1r=o(" \u2014 "),WX=a("a"),w1r=o("FlaxBartModel"),A1r=o(" (BART model)"),L1r=l(),e4=a("li"),q3e=a("strong"),B1r=o("beit"),x1r=o(" \u2014 "),QX=a("a"),k1r=o("FlaxBeitModel"),R1r=o(" (BEiT model)"),S1r=l(),o4=a("li"),O3e=a("strong"),P1r=o("bert"),$1r=o(" \u2014 "),HX=a("a"),I1r=o("FlaxBertModel"),j1r=o(" (BERT model)"),N1r=l(),r4=a("li"),G3e=a("strong"),D1r=o("big_bird"),q1r=o(" \u2014 "),UX=a("a"),O1r=o("FlaxBigBirdModel"),G1r=o(" (BigBird model)"),X1r=l(),t4=a("li"),X3e=a("strong"),V1r=o("blenderbot"),z1r=o(" \u2014 "),JX=a("a"),W1r=o("FlaxBlenderbotModel"),Q1r=o(" (Blenderbot model)"),H1r=l(),a4=a("li"),V3e=a("strong"),U1r=o("blenderbot-small"),J1r=o(" \u2014 "),YX=a("a"),Y1r=o("FlaxBlenderbotSmallModel"),K1r=o(" (BlenderbotSmall model)"),Z1r=l(),n4=a("li"),z3e=a("strong"),eFr=o("clip"),oFr=o(" \u2014 "),KX=a("a"),rFr=o("FlaxCLIPModel"),tFr=o(" (CLIP model)"),aFr=l(),s4=a("li"),W3e=a("strong"),nFr=o("distilbert"),sFr=o(" \u2014 "),ZX=a("a"),lFr=o("FlaxDistilBertModel"),iFr=o(" (DistilBERT model)"),dFr=l(),l4=a("li"),Q3e=a("strong"),cFr=o("electra"),fFr=o(" \u2014 "),eV=a("a"),mFr=o("FlaxElectraModel"),gFr=o(" (ELECTRA model)"),hFr=l(),i4=a("li"),H3e=a("strong"),pFr=o("gpt2"),_Fr=o(" \u2014 "),oV=a("a"),uFr=o("FlaxGPT2Model"),bFr=o(" (OpenAI GPT-2 model)"),vFr=l(),d4=a("li"),U3e=a("strong"),TFr=o("gpt_neo"),FFr=o(" \u2014 "),rV=a("a"),CFr=o("FlaxGPTNeoModel"),MFr=o(" (GPT Neo model)"),EFr=l(),c4=a("li"),J3e=a("strong"),yFr=o("gptj"),wFr=o(" \u2014 "),tV=a("a"),AFr=o("FlaxGPTJModel"),LFr=o(" (GPT-J model)"),BFr=l(),f4=a("li"),Y3e=a("strong"),xFr=o("marian"),kFr=o(" \u2014 "),aV=a("a"),RFr=o("FlaxMarianModel"),SFr=o(" (Marian model)"),PFr=l(),m4=a("li"),K3e=a("strong"),$Fr=o("mbart"),IFr=o(" \u2014 "),nV=a("a"),jFr=o("FlaxMBartModel"),NFr=o(" (mBART model)"),DFr=l(),g4=a("li"),Z3e=a("strong"),qFr=o("mt5"),OFr=o(" \u2014 "),sV=a("a"),GFr=o("FlaxMT5Model"),XFr=o(" (mT5 model)"),VFr=l(),h4=a("li"),e2e=a("strong"),zFr=o("pegasus"),WFr=o(" \u2014 "),lV=a("a"),QFr=o("FlaxPegasusModel"),HFr=o(" (Pegasus model)"),UFr=l(),p4=a("li"),o2e=a("strong"),JFr=o("roberta"),YFr=o(" \u2014 "),iV=a("a"),KFr=o("FlaxRobertaModel"),ZFr=o(" (RoBERTa model)"),eCr=l(),_4=a("li"),r2e=a("strong"),oCr=o("roformer"),rCr=o(" \u2014 "),dV=a("a"),tCr=o("FlaxRoFormerModel"),aCr=o(" (RoFormer model)"),nCr=l(),u4=a("li"),t2e=a("strong"),sCr=o("t5"),lCr=o(" \u2014 "),cV=a("a"),iCr=o("FlaxT5Model"),dCr=o(" (T5 model)"),cCr=l(),b4=a("li"),a2e=a("strong"),fCr=o("vision-text-dual-encoder"),mCr=o(" \u2014 "),fV=a("a"),gCr=o("FlaxVisionTextDualEncoderModel"),hCr=o(" (VisionTextDualEncoder model)"),pCr=l(),v4=a("li"),n2e=a("strong"),_Cr=o("vit"),uCr=o(" \u2014 "),mV=a("a"),bCr=o("FlaxViTModel"),vCr=o(" (ViT model)"),TCr=l(),T4=a("li"),s2e=a("strong"),FCr=o("wav2vec2"),CCr=o(" \u2014 "),gV=a("a"),MCr=o("FlaxWav2Vec2Model"),ECr=o(" (Wav2Vec2 model)"),yCr=l(),F4=a("li"),l2e=a("strong"),wCr=o("xglm"),ACr=o(" \u2014 "),hV=a("a"),LCr=o("FlaxXGLMModel"),BCr=o(" (XGLM model)"),xCr=l(),C4=a("li"),i2e=a("strong"),kCr=o("xlm-roberta"),RCr=o(" \u2014 "),pV=a("a"),SCr=o("FlaxXLMRobertaModel"),PCr=o(" (XLM-RoBERTa model)"),$Cr=l(),d2e=a("p"),ICr=o("Examples:"),jCr=l(),f(wL.$$.fragment),uRe=l(),of=a("h2"),M4=a("a"),c2e=a("span"),f(AL.$$.fragment),NCr=l(),f2e=a("span"),DCr=o("FlaxAutoModelForCausalLM"),bRe=l(),Sr=a("div"),f(LL.$$.fragment),qCr=l(),rf=a("p"),OCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),m2e=a("code"),GCr=o("from_pretrained()"),XCr=o("class method or the "),g2e=a("code"),VCr=o("from_config()"),zCr=o(`class
method.`),WCr=l(),BL=a("p"),QCr=o("This class cannot be instantiated directly using "),h2e=a("code"),HCr=o("__init__()"),UCr=o(" (throws an error)."),JCr=l(),At=a("div"),f(xL.$$.fragment),YCr=l(),p2e=a("p"),KCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZCr=l(),tf=a("p"),eMr=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),oMr=o("not"),rMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=a("code"),tMr=o("from_pretrained()"),aMr=o("to load the model weights."),nMr=l(),b2e=a("p"),sMr=o("Examples:"),lMr=l(),f(kL.$$.fragment),iMr=l(),Lo=a("div"),f(RL.$$.fragment),dMr=l(),v2e=a("p"),cMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fMr=l(),xn=a("p"),mMr=o("The model class to instantiate is selected based on the "),T2e=a("code"),gMr=o("model_type"),hMr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),pMr=o("pretrained_model_name_or_path"),_Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),uMr=o("pretrained_model_name_or_path"),bMr=o(":"),vMr=l(),ca=a("ul"),E4=a("li"),M2e=a("strong"),TMr=o("bart"),FMr=o(" \u2014 "),_V=a("a"),CMr=o("FlaxBartForCausalLM"),MMr=o(" (BART model)"),EMr=l(),y4=a("li"),E2e=a("strong"),yMr=o("gpt2"),wMr=o(" \u2014 "),uV=a("a"),AMr=o("FlaxGPT2LMHeadModel"),LMr=o(" (OpenAI GPT-2 model)"),BMr=l(),w4=a("li"),y2e=a("strong"),xMr=o("gpt_neo"),kMr=o(" \u2014 "),bV=a("a"),RMr=o("FlaxGPTNeoForCausalLM"),SMr=o(" (GPT Neo model)"),PMr=l(),A4=a("li"),w2e=a("strong"),$Mr=o("gptj"),IMr=o(" \u2014 "),vV=a("a"),jMr=o("FlaxGPTJForCausalLM"),NMr=o(" (GPT-J model)"),DMr=l(),L4=a("li"),A2e=a("strong"),qMr=o("xglm"),OMr=o(" \u2014 "),TV=a("a"),GMr=o("FlaxXGLMForCausalLM"),XMr=o(" (XGLM model)"),VMr=l(),L2e=a("p"),zMr=o("Examples:"),WMr=l(),f(SL.$$.fragment),vRe=l(),af=a("h2"),B4=a("a"),B2e=a("span"),f(PL.$$.fragment),QMr=l(),x2e=a("span"),HMr=o("FlaxAutoModelForPreTraining"),TRe=l(),Pr=a("div"),f($L.$$.fragment),UMr=l(),nf=a("p"),JMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),k2e=a("code"),YMr=o("from_pretrained()"),KMr=o("class method or the "),R2e=a("code"),ZMr=o("from_config()"),e4r=o(`class
method.`),o4r=l(),IL=a("p"),r4r=o("This class cannot be instantiated directly using "),S2e=a("code"),t4r=o("__init__()"),a4r=o(" (throws an error)."),n4r=l(),Lt=a("div"),f(jL.$$.fragment),s4r=l(),P2e=a("p"),l4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),i4r=l(),sf=a("p"),d4r=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),c4r=o("not"),f4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),I2e=a("code"),m4r=o("from_pretrained()"),g4r=o("to load the model weights."),h4r=l(),j2e=a("p"),p4r=o("Examples:"),_4r=l(),f(NL.$$.fragment),u4r=l(),Bo=a("div"),f(DL.$$.fragment),b4r=l(),N2e=a("p"),v4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T4r=l(),kn=a("p"),F4r=o("The model class to instantiate is selected based on the "),D2e=a("code"),C4r=o("model_type"),M4r=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),E4r=o("pretrained_model_name_or_path"),y4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),w4r=o("pretrained_model_name_or_path"),A4r=o(":"),L4r=l(),ce=a("ul"),x4=a("li"),G2e=a("strong"),B4r=o("albert"),x4r=o(" \u2014 "),FV=a("a"),k4r=o("FlaxAlbertForPreTraining"),R4r=o(" (ALBERT model)"),S4r=l(),k4=a("li"),X2e=a("strong"),P4r=o("bart"),$4r=o(" \u2014 "),CV=a("a"),I4r=o("FlaxBartForConditionalGeneration"),j4r=o(" (BART model)"),N4r=l(),R4=a("li"),V2e=a("strong"),D4r=o("bert"),q4r=o(" \u2014 "),MV=a("a"),O4r=o("FlaxBertForPreTraining"),G4r=o(" (BERT model)"),X4r=l(),S4=a("li"),z2e=a("strong"),V4r=o("big_bird"),z4r=o(" \u2014 "),EV=a("a"),W4r=o("FlaxBigBirdForPreTraining"),Q4r=o(" (BigBird model)"),H4r=l(),P4=a("li"),W2e=a("strong"),U4r=o("electra"),J4r=o(" \u2014 "),yV=a("a"),Y4r=o("FlaxElectraForPreTraining"),K4r=o(" (ELECTRA model)"),Z4r=l(),$4=a("li"),Q2e=a("strong"),eEr=o("mbart"),oEr=o(" \u2014 "),wV=a("a"),rEr=o("FlaxMBartForConditionalGeneration"),tEr=o(" (mBART model)"),aEr=l(),I4=a("li"),H2e=a("strong"),nEr=o("mt5"),sEr=o(" \u2014 "),AV=a("a"),lEr=o("FlaxMT5ForConditionalGeneration"),iEr=o(" (mT5 model)"),dEr=l(),j4=a("li"),U2e=a("strong"),cEr=o("roberta"),fEr=o(" \u2014 "),LV=a("a"),mEr=o("FlaxRobertaForMaskedLM"),gEr=o(" (RoBERTa model)"),hEr=l(),N4=a("li"),J2e=a("strong"),pEr=o("roformer"),_Er=o(" \u2014 "),BV=a("a"),uEr=o("FlaxRoFormerForMaskedLM"),bEr=o(" (RoFormer model)"),vEr=l(),D4=a("li"),Y2e=a("strong"),TEr=o("t5"),FEr=o(" \u2014 "),xV=a("a"),CEr=o("FlaxT5ForConditionalGeneration"),MEr=o(" (T5 model)"),EEr=l(),q4=a("li"),K2e=a("strong"),yEr=o("wav2vec2"),wEr=o(" \u2014 "),kV=a("a"),AEr=o("FlaxWav2Vec2ForPreTraining"),LEr=o(" (Wav2Vec2 model)"),BEr=l(),O4=a("li"),Z2e=a("strong"),xEr=o("xlm-roberta"),kEr=o(" \u2014 "),RV=a("a"),REr=o("FlaxXLMRobertaForMaskedLM"),SEr=o(" (XLM-RoBERTa model)"),PEr=l(),eve=a("p"),$Er=o("Examples:"),IEr=l(),f(qL.$$.fragment),FRe=l(),lf=a("h2"),G4=a("a"),ove=a("span"),f(OL.$$.fragment),jEr=l(),rve=a("span"),NEr=o("FlaxAutoModelForMaskedLM"),CRe=l(),$r=a("div"),f(GL.$$.fragment),DEr=l(),df=a("p"),qEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tve=a("code"),OEr=o("from_pretrained()"),GEr=o("class method or the "),ave=a("code"),XEr=o("from_config()"),VEr=o(`class
method.`),zEr=l(),XL=a("p"),WEr=o("This class cannot be instantiated directly using "),nve=a("code"),QEr=o("__init__()"),HEr=o(" (throws an error)."),UEr=l(),Bt=a("div"),f(VL.$$.fragment),JEr=l(),sve=a("p"),YEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KEr=l(),cf=a("p"),ZEr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),e5r=o("not"),o5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ive=a("code"),r5r=o("from_pretrained()"),t5r=o("to load the model weights."),a5r=l(),dve=a("p"),n5r=o("Examples:"),s5r=l(),f(zL.$$.fragment),l5r=l(),xo=a("div"),f(WL.$$.fragment),i5r=l(),cve=a("p"),d5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c5r=l(),Rn=a("p"),f5r=o("The model class to instantiate is selected based on the "),fve=a("code"),m5r=o("model_type"),g5r=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),h5r=o("pretrained_model_name_or_path"),p5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),_5r=o("pretrained_model_name_or_path"),u5r=o(":"),b5r=l(),be=a("ul"),X4=a("li"),hve=a("strong"),v5r=o("albert"),T5r=o(" \u2014 "),SV=a("a"),F5r=o("FlaxAlbertForMaskedLM"),C5r=o(" (ALBERT model)"),M5r=l(),V4=a("li"),pve=a("strong"),E5r=o("bart"),y5r=o(" \u2014 "),PV=a("a"),w5r=o("FlaxBartForConditionalGeneration"),A5r=o(" (BART model)"),L5r=l(),z4=a("li"),_ve=a("strong"),B5r=o("bert"),x5r=o(" \u2014 "),$V=a("a"),k5r=o("FlaxBertForMaskedLM"),R5r=o(" (BERT model)"),S5r=l(),W4=a("li"),uve=a("strong"),P5r=o("big_bird"),$5r=o(" \u2014 "),IV=a("a"),I5r=o("FlaxBigBirdForMaskedLM"),j5r=o(" (BigBird model)"),N5r=l(),Q4=a("li"),bve=a("strong"),D5r=o("distilbert"),q5r=o(" \u2014 "),jV=a("a"),O5r=o("FlaxDistilBertForMaskedLM"),G5r=o(" (DistilBERT model)"),X5r=l(),H4=a("li"),vve=a("strong"),V5r=o("electra"),z5r=o(" \u2014 "),NV=a("a"),W5r=o("FlaxElectraForMaskedLM"),Q5r=o(" (ELECTRA model)"),H5r=l(),U4=a("li"),Tve=a("strong"),U5r=o("mbart"),J5r=o(" \u2014 "),DV=a("a"),Y5r=o("FlaxMBartForConditionalGeneration"),K5r=o(" (mBART model)"),Z5r=l(),J4=a("li"),Fve=a("strong"),eyr=o("roberta"),oyr=o(" \u2014 "),qV=a("a"),ryr=o("FlaxRobertaForMaskedLM"),tyr=o(" (RoBERTa model)"),ayr=l(),Y4=a("li"),Cve=a("strong"),nyr=o("roformer"),syr=o(" \u2014 "),OV=a("a"),lyr=o("FlaxRoFormerForMaskedLM"),iyr=o(" (RoFormer model)"),dyr=l(),K4=a("li"),Mve=a("strong"),cyr=o("xlm-roberta"),fyr=o(" \u2014 "),GV=a("a"),myr=o("FlaxXLMRobertaForMaskedLM"),gyr=o(" (XLM-RoBERTa model)"),hyr=l(),Eve=a("p"),pyr=o("Examples:"),_yr=l(),f(QL.$$.fragment),MRe=l(),ff=a("h2"),Z4=a("a"),yve=a("span"),f(HL.$$.fragment),uyr=l(),wve=a("span"),byr=o("FlaxAutoModelForSeq2SeqLM"),ERe=l(),Ir=a("div"),f(UL.$$.fragment),vyr=l(),mf=a("p"),Tyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ave=a("code"),Fyr=o("from_pretrained()"),Cyr=o("class method or the "),Lve=a("code"),Myr=o("from_config()"),Eyr=o(`class
method.`),yyr=l(),JL=a("p"),wyr=o("This class cannot be instantiated directly using "),Bve=a("code"),Ayr=o("__init__()"),Lyr=o(" (throws an error)."),Byr=l(),xt=a("div"),f(YL.$$.fragment),xyr=l(),xve=a("p"),kyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ryr=l(),gf=a("p"),Syr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),Pyr=o("not"),$yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rve=a("code"),Iyr=o("from_pretrained()"),jyr=o("to load the model weights."),Nyr=l(),Sve=a("p"),Dyr=o("Examples:"),qyr=l(),f(KL.$$.fragment),Oyr=l(),ko=a("div"),f(ZL.$$.fragment),Gyr=l(),Pve=a("p"),Xyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vyr=l(),Sn=a("p"),zyr=o("The model class to instantiate is selected based on the "),$ve=a("code"),Wyr=o("model_type"),Qyr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),Hyr=o("pretrained_model_name_or_path"),Uyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(":"),Kyr=l(),Ee=a("ul"),eE=a("li"),Nve=a("strong"),Zyr=o("bart"),ewr=o(" \u2014 "),XV=a("a"),owr=o("FlaxBartForConditionalGeneration"),rwr=o(" (BART model)"),twr=l(),oE=a("li"),Dve=a("strong"),awr=o("blenderbot"),nwr=o(" \u2014 "),VV=a("a"),swr=o("FlaxBlenderbotForConditionalGeneration"),lwr=o(" (Blenderbot model)"),iwr=l(),rE=a("li"),qve=a("strong"),dwr=o("blenderbot-small"),cwr=o(" \u2014 "),zV=a("a"),fwr=o("FlaxBlenderbotSmallForConditionalGeneration"),mwr=o(" (BlenderbotSmall model)"),gwr=l(),tE=a("li"),Ove=a("strong"),hwr=o("encoder-decoder"),pwr=o(" \u2014 "),WV=a("a"),_wr=o("FlaxEncoderDecoderModel"),uwr=o(" (Encoder decoder model)"),bwr=l(),aE=a("li"),Gve=a("strong"),vwr=o("marian"),Twr=o(" \u2014 "),QV=a("a"),Fwr=o("FlaxMarianMTModel"),Cwr=o(" (Marian model)"),Mwr=l(),nE=a("li"),Xve=a("strong"),Ewr=o("mbart"),ywr=o(" \u2014 "),HV=a("a"),wwr=o("FlaxMBartForConditionalGeneration"),Awr=o(" (mBART model)"),Lwr=l(),sE=a("li"),Vve=a("strong"),Bwr=o("mt5"),xwr=o(" \u2014 "),UV=a("a"),kwr=o("FlaxMT5ForConditionalGeneration"),Rwr=o(" (mT5 model)"),Swr=l(),lE=a("li"),zve=a("strong"),Pwr=o("pegasus"),$wr=o(" \u2014 "),JV=a("a"),Iwr=o("FlaxPegasusForConditionalGeneration"),jwr=o(" (Pegasus model)"),Nwr=l(),iE=a("li"),Wve=a("strong"),Dwr=o("t5"),qwr=o(" \u2014 "),YV=a("a"),Owr=o("FlaxT5ForConditionalGeneration"),Gwr=o(" (T5 model)"),Xwr=l(),Qve=a("p"),Vwr=o("Examples:"),zwr=l(),f(e7.$$.fragment),yRe=l(),hf=a("h2"),dE=a("a"),Hve=a("span"),f(o7.$$.fragment),Wwr=l(),Uve=a("span"),Qwr=o("FlaxAutoModelForSequenceClassification"),wRe=l(),jr=a("div"),f(r7.$$.fragment),Hwr=l(),pf=a("p"),Uwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jve=a("code"),Jwr=o("from_pretrained()"),Ywr=o("class method or the "),Yve=a("code"),Kwr=o("from_config()"),Zwr=o(`class
method.`),e6r=l(),t7=a("p"),o6r=o("This class cannot be instantiated directly using "),Kve=a("code"),r6r=o("__init__()"),t6r=o(" (throws an error)."),a6r=l(),kt=a("div"),f(a7.$$.fragment),n6r=l(),Zve=a("p"),s6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l6r=l(),_f=a("p"),i6r=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),d6r=o("not"),c6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oTe=a("code"),f6r=o("from_pretrained()"),m6r=o("to load the model weights."),g6r=l(),rTe=a("p"),h6r=o("Examples:"),p6r=l(),f(n7.$$.fragment),_6r=l(),Ro=a("div"),f(s7.$$.fragment),u6r=l(),tTe=a("p"),b6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),v6r=l(),Pn=a("p"),T6r=o("The model class to instantiate is selected based on the "),aTe=a("code"),F6r=o("model_type"),C6r=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),y6r=o("pretrained_model_name_or_path"),w6r=o(":"),A6r=l(),ve=a("ul"),cE=a("li"),lTe=a("strong"),L6r=o("albert"),B6r=o(" \u2014 "),KV=a("a"),x6r=o("FlaxAlbertForSequenceClassification"),k6r=o(" (ALBERT model)"),R6r=l(),fE=a("li"),iTe=a("strong"),S6r=o("bart"),P6r=o(" \u2014 "),ZV=a("a"),$6r=o("FlaxBartForSequenceClassification"),I6r=o(" (BART model)"),j6r=l(),mE=a("li"),dTe=a("strong"),N6r=o("bert"),D6r=o(" \u2014 "),ez=a("a"),q6r=o("FlaxBertForSequenceClassification"),O6r=o(" (BERT model)"),G6r=l(),gE=a("li"),cTe=a("strong"),X6r=o("big_bird"),V6r=o(" \u2014 "),oz=a("a"),z6r=o("FlaxBigBirdForSequenceClassification"),W6r=o(" (BigBird model)"),Q6r=l(),hE=a("li"),fTe=a("strong"),H6r=o("distilbert"),U6r=o(" \u2014 "),rz=a("a"),J6r=o("FlaxDistilBertForSequenceClassification"),Y6r=o(" (DistilBERT model)"),K6r=l(),pE=a("li"),mTe=a("strong"),Z6r=o("electra"),eAr=o(" \u2014 "),tz=a("a"),oAr=o("FlaxElectraForSequenceClassification"),rAr=o(" (ELECTRA model)"),tAr=l(),_E=a("li"),gTe=a("strong"),aAr=o("mbart"),nAr=o(" \u2014 "),az=a("a"),sAr=o("FlaxMBartForSequenceClassification"),lAr=o(" (mBART model)"),iAr=l(),uE=a("li"),hTe=a("strong"),dAr=o("roberta"),cAr=o(" \u2014 "),nz=a("a"),fAr=o("FlaxRobertaForSequenceClassification"),mAr=o(" (RoBERTa model)"),gAr=l(),bE=a("li"),pTe=a("strong"),hAr=o("roformer"),pAr=o(" \u2014 "),sz=a("a"),_Ar=o("FlaxRoFormerForSequenceClassification"),uAr=o(" (RoFormer model)"),bAr=l(),vE=a("li"),_Te=a("strong"),vAr=o("xlm-roberta"),TAr=o(" \u2014 "),lz=a("a"),FAr=o("FlaxXLMRobertaForSequenceClassification"),CAr=o(" (XLM-RoBERTa model)"),MAr=l(),uTe=a("p"),EAr=o("Examples:"),yAr=l(),f(l7.$$.fragment),ARe=l(),uf=a("h2"),TE=a("a"),bTe=a("span"),f(i7.$$.fragment),wAr=l(),vTe=a("span"),AAr=o("FlaxAutoModelForQuestionAnswering"),LRe=l(),Nr=a("div"),f(d7.$$.fragment),LAr=l(),bf=a("p"),BAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TTe=a("code"),xAr=o("from_pretrained()"),kAr=o("class method or the "),FTe=a("code"),RAr=o("from_config()"),SAr=o(`class
method.`),PAr=l(),c7=a("p"),$Ar=o("This class cannot be instantiated directly using "),CTe=a("code"),IAr=o("__init__()"),jAr=o(" (throws an error)."),NAr=l(),Rt=a("div"),f(f7.$$.fragment),DAr=l(),MTe=a("p"),qAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OAr=l(),vf=a("p"),GAr=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),XAr=o("not"),VAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yTe=a("code"),zAr=o("from_pretrained()"),WAr=o("to load the model weights."),QAr=l(),wTe=a("p"),HAr=o("Examples:"),UAr=l(),f(m7.$$.fragment),JAr=l(),So=a("div"),f(g7.$$.fragment),YAr=l(),ATe=a("p"),KAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZAr=l(),$n=a("p"),e0r=o("The model class to instantiate is selected based on the "),LTe=a("code"),o0r=o("model_type"),r0r=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),t0r=o("pretrained_model_name_or_path"),a0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(":"),l0r=l(),Te=a("ul"),FE=a("li"),kTe=a("strong"),i0r=o("albert"),d0r=o(" \u2014 "),iz=a("a"),c0r=o("FlaxAlbertForQuestionAnswering"),f0r=o(" (ALBERT model)"),m0r=l(),CE=a("li"),RTe=a("strong"),g0r=o("bart"),h0r=o(" \u2014 "),dz=a("a"),p0r=o("FlaxBartForQuestionAnswering"),_0r=o(" (BART model)"),u0r=l(),ME=a("li"),STe=a("strong"),b0r=o("bert"),v0r=o(" \u2014 "),cz=a("a"),T0r=o("FlaxBertForQuestionAnswering"),F0r=o(" (BERT model)"),C0r=l(),EE=a("li"),PTe=a("strong"),M0r=o("big_bird"),E0r=o(" \u2014 "),fz=a("a"),y0r=o("FlaxBigBirdForQuestionAnswering"),w0r=o(" (BigBird model)"),A0r=l(),yE=a("li"),$Te=a("strong"),L0r=o("distilbert"),B0r=o(" \u2014 "),mz=a("a"),x0r=o("FlaxDistilBertForQuestionAnswering"),k0r=o(" (DistilBERT model)"),R0r=l(),wE=a("li"),ITe=a("strong"),S0r=o("electra"),P0r=o(" \u2014 "),gz=a("a"),$0r=o("FlaxElectraForQuestionAnswering"),I0r=o(" (ELECTRA model)"),j0r=l(),AE=a("li"),jTe=a("strong"),N0r=o("mbart"),D0r=o(" \u2014 "),hz=a("a"),q0r=o("FlaxMBartForQuestionAnswering"),O0r=o(" (mBART model)"),G0r=l(),LE=a("li"),NTe=a("strong"),X0r=o("roberta"),V0r=o(" \u2014 "),pz=a("a"),z0r=o("FlaxRobertaForQuestionAnswering"),W0r=o(" (RoBERTa model)"),Q0r=l(),BE=a("li"),DTe=a("strong"),H0r=o("roformer"),U0r=o(" \u2014 "),_z=a("a"),J0r=o("FlaxRoFormerForQuestionAnswering"),Y0r=o(" (RoFormer model)"),K0r=l(),xE=a("li"),qTe=a("strong"),Z0r=o("xlm-roberta"),eLr=o(" \u2014 "),uz=a("a"),oLr=o("FlaxXLMRobertaForQuestionAnswering"),rLr=o(" (XLM-RoBERTa model)"),tLr=l(),OTe=a("p"),aLr=o("Examples:"),nLr=l(),f(h7.$$.fragment),BRe=l(),Tf=a("h2"),kE=a("a"),GTe=a("span"),f(p7.$$.fragment),sLr=l(),XTe=a("span"),lLr=o("FlaxAutoModelForTokenClassification"),xRe=l(),Dr=a("div"),f(_7.$$.fragment),iLr=l(),Ff=a("p"),dLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VTe=a("code"),cLr=o("from_pretrained()"),fLr=o("class method or the "),zTe=a("code"),mLr=o("from_config()"),gLr=o(`class
method.`),hLr=l(),u7=a("p"),pLr=o("This class cannot be instantiated directly using "),WTe=a("code"),_Lr=o("__init__()"),uLr=o(" (throws an error)."),bLr=l(),St=a("div"),f(b7.$$.fragment),vLr=l(),QTe=a("p"),TLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FLr=l(),Cf=a("p"),CLr=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),MLr=o("not"),ELr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UTe=a("code"),yLr=o("from_pretrained()"),wLr=o("to load the model weights."),ALr=l(),JTe=a("p"),LLr=o("Examples:"),BLr=l(),f(v7.$$.fragment),xLr=l(),Po=a("div"),f(T7.$$.fragment),kLr=l(),YTe=a("p"),RLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SLr=l(),In=a("p"),PLr=o("The model class to instantiate is selected based on the "),KTe=a("code"),$Lr=o("model_type"),ILr=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),jLr=o("pretrained_model_name_or_path"),NLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),DLr=o("pretrained_model_name_or_path"),qLr=o(":"),OLr=l(),Se=a("ul"),RE=a("li"),o1e=a("strong"),GLr=o("albert"),XLr=o(" \u2014 "),bz=a("a"),VLr=o("FlaxAlbertForTokenClassification"),zLr=o(" (ALBERT model)"),WLr=l(),SE=a("li"),r1e=a("strong"),QLr=o("bert"),HLr=o(" \u2014 "),vz=a("a"),ULr=o("FlaxBertForTokenClassification"),JLr=o(" (BERT model)"),YLr=l(),PE=a("li"),t1e=a("strong"),KLr=o("big_bird"),ZLr=o(" \u2014 "),Tz=a("a"),e7r=o("FlaxBigBirdForTokenClassification"),o7r=o(" (BigBird model)"),r7r=l(),$E=a("li"),a1e=a("strong"),t7r=o("distilbert"),a7r=o(" \u2014 "),Fz=a("a"),n7r=o("FlaxDistilBertForTokenClassification"),s7r=o(" (DistilBERT model)"),l7r=l(),IE=a("li"),n1e=a("strong"),i7r=o("electra"),d7r=o(" \u2014 "),Cz=a("a"),c7r=o("FlaxElectraForTokenClassification"),f7r=o(" (ELECTRA model)"),m7r=l(),jE=a("li"),s1e=a("strong"),g7r=o("roberta"),h7r=o(" \u2014 "),Mz=a("a"),p7r=o("FlaxRobertaForTokenClassification"),_7r=o(" (RoBERTa model)"),u7r=l(),NE=a("li"),l1e=a("strong"),b7r=o("roformer"),v7r=o(" \u2014 "),Ez=a("a"),T7r=o("FlaxRoFormerForTokenClassification"),F7r=o(" (RoFormer model)"),C7r=l(),DE=a("li"),i1e=a("strong"),M7r=o("xlm-roberta"),E7r=o(" \u2014 "),yz=a("a"),y7r=o("FlaxXLMRobertaForTokenClassification"),w7r=o(" (XLM-RoBERTa model)"),A7r=l(),d1e=a("p"),L7r=o("Examples:"),B7r=l(),f(F7.$$.fragment),kRe=l(),Mf=a("h2"),qE=a("a"),c1e=a("span"),f(C7.$$.fragment),x7r=l(),f1e=a("span"),k7r=o("FlaxAutoModelForMultipleChoice"),RRe=l(),qr=a("div"),f(M7.$$.fragment),R7r=l(),Ef=a("p"),S7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),m1e=a("code"),P7r=o("from_pretrained()"),$7r=o("class method or the "),g1e=a("code"),I7r=o("from_config()"),j7r=o(`class
method.`),N7r=l(),E7=a("p"),D7r=o("This class cannot be instantiated directly using "),h1e=a("code"),q7r=o("__init__()"),O7r=o(" (throws an error)."),G7r=l(),Pt=a("div"),f(y7.$$.fragment),X7r=l(),p1e=a("p"),V7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),z7r=l(),yf=a("p"),W7r=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),Q7r=o("not"),H7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=a("code"),U7r=o("from_pretrained()"),J7r=o("to load the model weights."),Y7r=l(),b1e=a("p"),K7r=o("Examples:"),Z7r=l(),f(w7.$$.fragment),e8r=l(),$o=a("div"),f(A7.$$.fragment),o8r=l(),v1e=a("p"),r8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),t8r=l(),jn=a("p"),a8r=o("The model class to instantiate is selected based on the "),T1e=a("code"),n8r=o("model_type"),s8r=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),l8r=o("pretrained_model_name_or_path"),i8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),d8r=o("pretrained_model_name_or_path"),c8r=o(":"),f8r=l(),Pe=a("ul"),OE=a("li"),M1e=a("strong"),m8r=o("albert"),g8r=o(" \u2014 "),wz=a("a"),h8r=o("FlaxAlbertForMultipleChoice"),p8r=o(" (ALBERT model)"),_8r=l(),GE=a("li"),E1e=a("strong"),u8r=o("bert"),b8r=o(" \u2014 "),Az=a("a"),v8r=o("FlaxBertForMultipleChoice"),T8r=o(" (BERT model)"),F8r=l(),XE=a("li"),y1e=a("strong"),C8r=o("big_bird"),M8r=o(" \u2014 "),Lz=a("a"),E8r=o("FlaxBigBirdForMultipleChoice"),y8r=o(" (BigBird model)"),w8r=l(),VE=a("li"),w1e=a("strong"),A8r=o("distilbert"),L8r=o(" \u2014 "),Bz=a("a"),B8r=o("FlaxDistilBertForMultipleChoice"),x8r=o(" (DistilBERT model)"),k8r=l(),zE=a("li"),A1e=a("strong"),R8r=o("electra"),S8r=o(" \u2014 "),xz=a("a"),P8r=o("FlaxElectraForMultipleChoice"),$8r=o(" (ELECTRA model)"),I8r=l(),WE=a("li"),L1e=a("strong"),j8r=o("roberta"),N8r=o(" \u2014 "),kz=a("a"),D8r=o("FlaxRobertaForMultipleChoice"),q8r=o(" (RoBERTa model)"),O8r=l(),QE=a("li"),B1e=a("strong"),G8r=o("roformer"),X8r=o(" \u2014 "),Rz=a("a"),V8r=o("FlaxRoFormerForMultipleChoice"),z8r=o(" (RoFormer model)"),W8r=l(),HE=a("li"),x1e=a("strong"),Q8r=o("xlm-roberta"),H8r=o(" \u2014 "),Sz=a("a"),U8r=o("FlaxXLMRobertaForMultipleChoice"),J8r=o(" (XLM-RoBERTa model)"),Y8r=l(),k1e=a("p"),K8r=o("Examples:"),Z8r=l(),f(L7.$$.fragment),SRe=l(),wf=a("h2"),UE=a("a"),R1e=a("span"),f(B7.$$.fragment),e9r=l(),S1e=a("span"),o9r=o("FlaxAutoModelForNextSentencePrediction"),PRe=l(),Or=a("div"),f(x7.$$.fragment),r9r=l(),Af=a("p"),t9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),P1e=a("code"),a9r=o("from_pretrained()"),n9r=o("class method or the "),$1e=a("code"),s9r=o("from_config()"),l9r=o(`class
method.`),i9r=l(),k7=a("p"),d9r=o("This class cannot be instantiated directly using "),I1e=a("code"),c9r=o("__init__()"),f9r=o(" (throws an error)."),m9r=l(),$t=a("div"),f(R7.$$.fragment),g9r=l(),j1e=a("p"),h9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),p9r=l(),Lf=a("p"),_9r=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),u9r=o("not"),b9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),D1e=a("code"),v9r=o("from_pretrained()"),T9r=o("to load the model weights."),F9r=l(),q1e=a("p"),C9r=o("Examples:"),M9r=l(),f(S7.$$.fragment),E9r=l(),Io=a("div"),f(P7.$$.fragment),y9r=l(),O1e=a("p"),w9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),A9r=l(),Nn=a("p"),L9r=o("The model class to instantiate is selected based on the "),G1e=a("code"),B9r=o("model_type"),x9r=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),k9r=o("pretrained_model_name_or_path"),R9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),S9r=o("pretrained_model_name_or_path"),P9r=o(":"),$9r=l(),z1e=a("ul"),JE=a("li"),W1e=a("strong"),I9r=o("bert"),j9r=o(" \u2014 "),Pz=a("a"),N9r=o("FlaxBertForNextSentencePrediction"),D9r=o(" (BERT model)"),q9r=l(),Q1e=a("p"),O9r=o("Examples:"),G9r=l(),f($7.$$.fragment),$Re=l(),Bf=a("h2"),YE=a("a"),H1e=a("span"),f(I7.$$.fragment),X9r=l(),U1e=a("span"),V9r=o("FlaxAutoModelForImageClassification"),IRe=l(),Gr=a("div"),f(j7.$$.fragment),z9r=l(),xf=a("p"),W9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),J1e=a("code"),Q9r=o("from_pretrained()"),H9r=o("class method or the "),Y1e=a("code"),U9r=o("from_config()"),J9r=o(`class
method.`),Y9r=l(),N7=a("p"),K9r=o("This class cannot be instantiated directly using "),K1e=a("code"),Z9r=o("__init__()"),eBr=o(" (throws an error)."),oBr=l(),It=a("div"),f(D7.$$.fragment),rBr=l(),Z1e=a("p"),tBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aBr=l(),kf=a("p"),nBr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),sBr=o("not"),lBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oFe=a("code"),iBr=o("from_pretrained()"),dBr=o("to load the model weights."),cBr=l(),rFe=a("p"),fBr=o("Examples:"),mBr=l(),f(q7.$$.fragment),gBr=l(),jo=a("div"),f(O7.$$.fragment),hBr=l(),tFe=a("p"),pBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Br=l(),Dn=a("p"),uBr=o("The model class to instantiate is selected based on the "),aFe=a("code"),bBr=o("model_type"),vBr=o(` property of the config object (either
passed as an argument or loaded from `),nFe=a("code"),TBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=a("code"),CBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),G7=a("ul"),KE=a("li"),lFe=a("strong"),yBr=o("beit"),wBr=o(" \u2014 "),$z=a("a"),ABr=o("FlaxBeitForImageClassification"),LBr=o(" (BEiT model)"),BBr=l(),ZE=a("li"),iFe=a("strong"),xBr=o("vit"),kBr=o(" \u2014 "),Iz=a("a"),RBr=o("FlaxViTForImageClassification"),SBr=o(" (ViT model)"),PBr=l(),dFe=a("p"),$Br=o("Examples:"),IBr=l(),f(X7.$$.fragment),jRe=l(),Rf=a("h2"),e5=a("a"),cFe=a("span"),f(V7.$$.fragment),jBr=l(),fFe=a("span"),NBr=o("FlaxAutoModelForVision2Seq"),NRe=l(),Xr=a("div"),f(z7.$$.fragment),DBr=l(),Sf=a("p"),qBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mFe=a("code"),OBr=o("from_pretrained()"),GBr=o("class method or the "),gFe=a("code"),XBr=o("from_config()"),VBr=o(`class
method.`),zBr=l(),W7=a("p"),WBr=o("This class cannot be instantiated directly using "),hFe=a("code"),QBr=o("__init__()"),HBr=o(" (throws an error)."),UBr=l(),jt=a("div"),f(Q7.$$.fragment),JBr=l(),pFe=a("p"),YBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KBr=l(),Pf=a("p"),ZBr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),exr=o("not"),oxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uFe=a("code"),rxr=o("from_pretrained()"),txr=o("to load the model weights."),axr=l(),bFe=a("p"),nxr=o("Examples:"),sxr=l(),f(H7.$$.fragment),lxr=l(),No=a("div"),f(U7.$$.fragment),ixr=l(),vFe=a("p"),dxr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cxr=l(),qn=a("p"),fxr=o("The model class to instantiate is selected based on the "),TFe=a("code"),mxr=o("model_type"),gxr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),hxr=o("pretrained_model_name_or_path"),pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),_xr=o("pretrained_model_name_or_path"),uxr=o(":"),bxr=l(),MFe=a("ul"),o5=a("li"),EFe=a("strong"),vxr=o("vision-encoder-decoder"),Txr=o(" \u2014 "),jz=a("a"),Fxr=o("FlaxVisionEncoderDecoderModel"),Cxr=o(" (Vision Encoder decoder model)"),Mxr=l(),yFe=a("p"),Exr=o("Examples:"),yxr=l(),f(J7.$$.fragment),this.h()},l(c){const u=bMt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),$e=i(c),de=n(c,"H1",{class:!0});var Y7=s(de);pe=n(Y7,"A",{id:!0,class:!0,href:!0});var wFe=s(pe);io=n(wFe,"SPAN",{});var AFe=s(io);m(fe.$$.fragment,AFe),AFe.forEach(t),wFe.forEach(t),Me=i(Y7),Vo=n(Y7,"SPAN",{});var Axr=s(Vo);ji=r(Axr,"Auto Classes"),Axr.forEach(t),Y7.forEach(t),If=i(c),fa=n(c,"P",{});var qRe=s(fa);Ni=r(qRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(qRe,"CODE",{});var Lxr=s(Di);oy=r(Lxr,"from_pretrained()"),Lxr.forEach(t),jf=r(qRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qRe.forEach(t),Be=i(c),co=n(c,"P",{});var r5=s(co);qi=r(r5,"Instantiating one of "),On=n(r5,"A",{href:!0});var Bxr=s(On);ry=r(Bxr,"AutoConfig"),Bxr.forEach(t),Gn=r(r5,", "),Xn=n(r5,"A",{href:!0});var xxr=s(Xn);ty=r(xxr,"AutoModel"),xxr.forEach(t),Oi=r(r5,`, and
`),Vn=n(r5,"A",{href:!0});var kxr=s(Vn);ay=r(kxr,"AutoTokenizer"),kxr.forEach(t),Gi=r(r5," will directly create a class of the relevant architecture. For instance"),r5.forEach(t),Nf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var ORe=s(_e);H8=r(ORe,"will create a model that is an instance of "),Xi=n(ORe,"A",{href:!0});var Rxr=s(Xi);U8=r(Rxr,"BertModel"),Rxr.forEach(t),J8=r(ORe,"."),ORe.forEach(t),zo=i(c),Oa=n(c,"P",{});var GRe=s(Oa);Y8=r(GRe,"There is one class of "),Df=n(GRe,"CODE",{});var Sxr=s(Df);K8=r(Sxr,"AutoModel"),Sxr.forEach(t),KPe=r(GRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GRe.forEach(t),Nxe=i(c),Vi=n(c,"H2",{class:!0});var XRe=s(Vi);qf=n(XRe,"A",{id:!0,class:!0,href:!0});var Pxr=s(qf);xQ=n(Pxr,"SPAN",{});var $xr=s(xQ);m(ny.$$.fragment,$xr),$xr.forEach(t),Pxr.forEach(t),ZPe=i(XRe),kQ=n(XRe,"SPAN",{});var Ixr=s(kQ);e$e=r(Ixr,"Extending the Auto Classes"),Ixr.forEach(t),XRe.forEach(t),Dxe=i(c),zn=n(c,"P",{});var Nz=s(zn);o$e=r(Nz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),RQ=n(Nz,"CODE",{});var jxr=s(RQ);r$e=r(jxr,"NewModel"),jxr.forEach(t),t$e=r(Nz,", make sure you have a "),SQ=n(Nz,"CODE",{});var Nxr=s(SQ);a$e=r(Nxr,"NewModelConfig"),Nxr.forEach(t),n$e=r(Nz,` then you can add those to the auto
classes like this:`),Nz.forEach(t),qxe=i(c),m(sy.$$.fragment,c),Oxe=i(c),Z8=n(c,"P",{});var Dxr=s(Z8);s$e=r(Dxr,"You will then be able to use the auto classes like you would usually do!"),Dxr.forEach(t),Gxe=i(c),m(Of.$$.fragment,c),Xxe=i(c),zi=n(c,"H2",{class:!0});var VRe=s(zi);Gf=n(VRe,"A",{id:!0,class:!0,href:!0});var qxr=s(Gf);PQ=n(qxr,"SPAN",{});var Oxr=s(PQ);m(ly.$$.fragment,Oxr),Oxr.forEach(t),qxr.forEach(t),l$e=i(VRe),$Q=n(VRe,"SPAN",{});var Gxr=s($Q);i$e=r(Gxr,"AutoConfig"),Gxr.forEach(t),VRe.forEach(t),Vxe=i(c),Wo=n(c,"DIV",{class:!0});var Gs=s(Wo);m(iy.$$.fragment,Gs),d$e=i(Gs),dy=n(Gs,"P",{});var zRe=s(dy);c$e=r(zRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),e9=n(zRe,"A",{href:!0});var Xxr=s(e9);f$e=r(Xxr,"from_pretrained()"),Xxr.forEach(t),m$e=r(zRe," class method."),zRe.forEach(t),g$e=i(Gs),cy=n(Gs,"P",{});var WRe=s(cy);h$e=r(WRe,"This class cannot be instantiated directly using "),IQ=n(WRe,"CODE",{});var Vxr=s(IQ);p$e=r(Vxr,"__init__()"),Vxr.forEach(t),_$e=r(WRe," (throws an error)."),WRe.forEach(t),u$e=i(Gs),mo=n(Gs,"DIV",{class:!0});var ga=s(mo);m(fy.$$.fragment,ga),b$e=i(ga),jQ=n(ga,"P",{});var zxr=s(jQ);v$e=r(zxr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zxr.forEach(t),T$e=i(ga),Wi=n(ga,"P",{});var Dz=s(Wi);F$e=r(Dz,"The configuration class to instantiate is selected based on the "),NQ=n(Dz,"CODE",{});var Wxr=s(NQ);C$e=r(Wxr,"model_type"),Wxr.forEach(t),M$e=r(Dz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),DQ=n(Dz,"CODE",{});var Qxr=s(DQ);E$e=r(Qxr,"pretrained_model_name_or_path"),Qxr.forEach(t),y$e=r(Dz,":"),Dz.forEach(t),w$e=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var LFe=s(Xf);qQ=n(LFe,"STRONG",{});var Hxr=s(qQ);A$e=r(Hxr,"albert"),Hxr.forEach(t),L$e=r(LFe," \u2014 "),o9=n(LFe,"A",{href:!0});var Uxr=s(o9);B$e=r(Uxr,"AlbertConfig"),Uxr.forEach(t),x$e=r(LFe," (ALBERT model)"),LFe.forEach(t),k$e=i(T),Vf=n(T,"LI",{});var BFe=s(Vf);OQ=n(BFe,"STRONG",{});var Jxr=s(OQ);R$e=r(Jxr,"bart"),Jxr.forEach(t),S$e=r(BFe," \u2014 "),r9=n(BFe,"A",{href:!0});var Yxr=s(r9);P$e=r(Yxr,"BartConfig"),Yxr.forEach(t),$$e=r(BFe," (BART model)"),BFe.forEach(t),I$e=i(T),zf=n(T,"LI",{});var xFe=s(zf);GQ=n(xFe,"STRONG",{});var Kxr=s(GQ);j$e=r(Kxr,"beit"),Kxr.forEach(t),N$e=r(xFe," \u2014 "),t9=n(xFe,"A",{href:!0});var Zxr=s(t9);D$e=r(Zxr,"BeitConfig"),Zxr.forEach(t),q$e=r(xFe," (BEiT model)"),xFe.forEach(t),O$e=i(T),Wf=n(T,"LI",{});var kFe=s(Wf);XQ=n(kFe,"STRONG",{});var ekr=s(XQ);G$e=r(ekr,"bert"),ekr.forEach(t),X$e=r(kFe," \u2014 "),a9=n(kFe,"A",{href:!0});var okr=s(a9);V$e=r(okr,"BertConfig"),okr.forEach(t),z$e=r(kFe," (BERT model)"),kFe.forEach(t),W$e=i(T),Qf=n(T,"LI",{});var RFe=s(Qf);VQ=n(RFe,"STRONG",{});var rkr=s(VQ);Q$e=r(rkr,"bert-generation"),rkr.forEach(t),H$e=r(RFe," \u2014 "),n9=n(RFe,"A",{href:!0});var tkr=s(n9);U$e=r(tkr,"BertGenerationConfig"),tkr.forEach(t),J$e=r(RFe," (Bert Generation model)"),RFe.forEach(t),Y$e=i(T),Hf=n(T,"LI",{});var SFe=s(Hf);zQ=n(SFe,"STRONG",{});var akr=s(zQ);K$e=r(akr,"big_bird"),akr.forEach(t),Z$e=r(SFe," \u2014 "),s9=n(SFe,"A",{href:!0});var nkr=s(s9);eIe=r(nkr,"BigBirdConfig"),nkr.forEach(t),oIe=r(SFe," (BigBird model)"),SFe.forEach(t),rIe=i(T),Uf=n(T,"LI",{});var PFe=s(Uf);WQ=n(PFe,"STRONG",{});var skr=s(WQ);tIe=r(skr,"bigbird_pegasus"),skr.forEach(t),aIe=r(PFe," \u2014 "),l9=n(PFe,"A",{href:!0});var lkr=s(l9);nIe=r(lkr,"BigBirdPegasusConfig"),lkr.forEach(t),sIe=r(PFe," (BigBirdPegasus model)"),PFe.forEach(t),lIe=i(T),Jf=n(T,"LI",{});var $Fe=s(Jf);QQ=n($Fe,"STRONG",{});var ikr=s(QQ);iIe=r(ikr,"blenderbot"),ikr.forEach(t),dIe=r($Fe," \u2014 "),i9=n($Fe,"A",{href:!0});var dkr=s(i9);cIe=r(dkr,"BlenderbotConfig"),dkr.forEach(t),fIe=r($Fe," (Blenderbot model)"),$Fe.forEach(t),mIe=i(T),Yf=n(T,"LI",{});var IFe=s(Yf);HQ=n(IFe,"STRONG",{});var ckr=s(HQ);gIe=r(ckr,"blenderbot-small"),ckr.forEach(t),hIe=r(IFe," \u2014 "),d9=n(IFe,"A",{href:!0});var fkr=s(d9);pIe=r(fkr,"BlenderbotSmallConfig"),fkr.forEach(t),_Ie=r(IFe," (BlenderbotSmall model)"),IFe.forEach(t),uIe=i(T),Kf=n(T,"LI",{});var jFe=s(Kf);UQ=n(jFe,"STRONG",{});var mkr=s(UQ);bIe=r(mkr,"camembert"),mkr.forEach(t),vIe=r(jFe," \u2014 "),c9=n(jFe,"A",{href:!0});var gkr=s(c9);TIe=r(gkr,"CamembertConfig"),gkr.forEach(t),FIe=r(jFe," (CamemBERT model)"),jFe.forEach(t),CIe=i(T),Zf=n(T,"LI",{});var NFe=s(Zf);JQ=n(NFe,"STRONG",{});var hkr=s(JQ);MIe=r(hkr,"canine"),hkr.forEach(t),EIe=r(NFe," \u2014 "),f9=n(NFe,"A",{href:!0});var pkr=s(f9);yIe=r(pkr,"CanineConfig"),pkr.forEach(t),wIe=r(NFe," (Canine model)"),NFe.forEach(t),AIe=i(T),em=n(T,"LI",{});var DFe=s(em);YQ=n(DFe,"STRONG",{});var _kr=s(YQ);LIe=r(_kr,"clip"),_kr.forEach(t),BIe=r(DFe," \u2014 "),m9=n(DFe,"A",{href:!0});var ukr=s(m9);xIe=r(ukr,"CLIPConfig"),ukr.forEach(t),kIe=r(DFe," (CLIP model)"),DFe.forEach(t),RIe=i(T),om=n(T,"LI",{});var qFe=s(om);KQ=n(qFe,"STRONG",{});var bkr=s(KQ);SIe=r(bkr,"convbert"),bkr.forEach(t),PIe=r(qFe," \u2014 "),g9=n(qFe,"A",{href:!0});var vkr=s(g9);$Ie=r(vkr,"ConvBertConfig"),vkr.forEach(t),IIe=r(qFe," (ConvBERT model)"),qFe.forEach(t),jIe=i(T),rm=n(T,"LI",{});var OFe=s(rm);ZQ=n(OFe,"STRONG",{});var Tkr=s(ZQ);NIe=r(Tkr,"convnext"),Tkr.forEach(t),DIe=r(OFe," \u2014 "),h9=n(OFe,"A",{href:!0});var Fkr=s(h9);qIe=r(Fkr,"ConvNextConfig"),Fkr.forEach(t),OIe=r(OFe," (ConvNext model)"),OFe.forEach(t),GIe=i(T),tm=n(T,"LI",{});var GFe=s(tm);eH=n(GFe,"STRONG",{});var Ckr=s(eH);XIe=r(Ckr,"ctrl"),Ckr.forEach(t),VIe=r(GFe," \u2014 "),p9=n(GFe,"A",{href:!0});var Mkr=s(p9);zIe=r(Mkr,"CTRLConfig"),Mkr.forEach(t),WIe=r(GFe," (CTRL model)"),GFe.forEach(t),QIe=i(T),am=n(T,"LI",{});var XFe=s(am);oH=n(XFe,"STRONG",{});var Ekr=s(oH);HIe=r(Ekr,"data2vec-audio"),Ekr.forEach(t),UIe=r(XFe," \u2014 "),_9=n(XFe,"A",{href:!0});var ykr=s(_9);JIe=r(ykr,"Data2VecAudioConfig"),ykr.forEach(t),YIe=r(XFe," (Data2VecAudio model)"),XFe.forEach(t),KIe=i(T),nm=n(T,"LI",{});var VFe=s(nm);rH=n(VFe,"STRONG",{});var wkr=s(rH);ZIe=r(wkr,"data2vec-text"),wkr.forEach(t),eje=r(VFe," \u2014 "),u9=n(VFe,"A",{href:!0});var Akr=s(u9);oje=r(Akr,"Data2VecTextConfig"),Akr.forEach(t),rje=r(VFe," (Data2VecText model)"),VFe.forEach(t),tje=i(T),sm=n(T,"LI",{});var zFe=s(sm);tH=n(zFe,"STRONG",{});var Lkr=s(tH);aje=r(Lkr,"deberta"),Lkr.forEach(t),nje=r(zFe," \u2014 "),b9=n(zFe,"A",{href:!0});var Bkr=s(b9);sje=r(Bkr,"DebertaConfig"),Bkr.forEach(t),lje=r(zFe," (DeBERTa model)"),zFe.forEach(t),ije=i(T),lm=n(T,"LI",{});var WFe=s(lm);aH=n(WFe,"STRONG",{});var xkr=s(aH);dje=r(xkr,"deberta-v2"),xkr.forEach(t),cje=r(WFe," \u2014 "),v9=n(WFe,"A",{href:!0});var kkr=s(v9);fje=r(kkr,"DebertaV2Config"),kkr.forEach(t),mje=r(WFe," (DeBERTa-v2 model)"),WFe.forEach(t),gje=i(T),im=n(T,"LI",{});var QFe=s(im);nH=n(QFe,"STRONG",{});var Rkr=s(nH);hje=r(Rkr,"deit"),Rkr.forEach(t),pje=r(QFe," \u2014 "),T9=n(QFe,"A",{href:!0});var Skr=s(T9);_je=r(Skr,"DeiTConfig"),Skr.forEach(t),uje=r(QFe," (DeiT model)"),QFe.forEach(t),bje=i(T),dm=n(T,"LI",{});var HFe=s(dm);sH=n(HFe,"STRONG",{});var Pkr=s(sH);vje=r(Pkr,"detr"),Pkr.forEach(t),Tje=r(HFe," \u2014 "),F9=n(HFe,"A",{href:!0});var $kr=s(F9);Fje=r($kr,"DetrConfig"),$kr.forEach(t),Cje=r(HFe," (DETR model)"),HFe.forEach(t),Mje=i(T),cm=n(T,"LI",{});var UFe=s(cm);lH=n(UFe,"STRONG",{});var Ikr=s(lH);Eje=r(Ikr,"distilbert"),Ikr.forEach(t),yje=r(UFe," \u2014 "),C9=n(UFe,"A",{href:!0});var jkr=s(C9);wje=r(jkr,"DistilBertConfig"),jkr.forEach(t),Aje=r(UFe," (DistilBERT model)"),UFe.forEach(t),Lje=i(T),fm=n(T,"LI",{});var JFe=s(fm);iH=n(JFe,"STRONG",{});var Nkr=s(iH);Bje=r(Nkr,"dpr"),Nkr.forEach(t),xje=r(JFe," \u2014 "),M9=n(JFe,"A",{href:!0});var Dkr=s(M9);kje=r(Dkr,"DPRConfig"),Dkr.forEach(t),Rje=r(JFe," (DPR model)"),JFe.forEach(t),Sje=i(T),mm=n(T,"LI",{});var YFe=s(mm);dH=n(YFe,"STRONG",{});var qkr=s(dH);Pje=r(qkr,"electra"),qkr.forEach(t),$je=r(YFe," \u2014 "),E9=n(YFe,"A",{href:!0});var Okr=s(E9);Ije=r(Okr,"ElectraConfig"),Okr.forEach(t),jje=r(YFe," (ELECTRA model)"),YFe.forEach(t),Nje=i(T),gm=n(T,"LI",{});var KFe=s(gm);cH=n(KFe,"STRONG",{});var Gkr=s(cH);Dje=r(Gkr,"encoder-decoder"),Gkr.forEach(t),qje=r(KFe," \u2014 "),y9=n(KFe,"A",{href:!0});var Xkr=s(y9);Oje=r(Xkr,"EncoderDecoderConfig"),Xkr.forEach(t),Gje=r(KFe," (Encoder decoder model)"),KFe.forEach(t),Xje=i(T),hm=n(T,"LI",{});var ZFe=s(hm);fH=n(ZFe,"STRONG",{});var Vkr=s(fH);Vje=r(Vkr,"flaubert"),Vkr.forEach(t),zje=r(ZFe," \u2014 "),w9=n(ZFe,"A",{href:!0});var zkr=s(w9);Wje=r(zkr,"FlaubertConfig"),zkr.forEach(t),Qje=r(ZFe," (FlauBERT model)"),ZFe.forEach(t),Hje=i(T),pm=n(T,"LI",{});var eCe=s(pm);mH=n(eCe,"STRONG",{});var Wkr=s(mH);Uje=r(Wkr,"fnet"),Wkr.forEach(t),Jje=r(eCe," \u2014 "),A9=n(eCe,"A",{href:!0});var Qkr=s(A9);Yje=r(Qkr,"FNetConfig"),Qkr.forEach(t),Kje=r(eCe," (FNet model)"),eCe.forEach(t),Zje=i(T),_m=n(T,"LI",{});var oCe=s(_m);gH=n(oCe,"STRONG",{});var Hkr=s(gH);eNe=r(Hkr,"fsmt"),Hkr.forEach(t),oNe=r(oCe," \u2014 "),L9=n(oCe,"A",{href:!0});var Ukr=s(L9);rNe=r(Ukr,"FSMTConfig"),Ukr.forEach(t),tNe=r(oCe," (FairSeq Machine-Translation model)"),oCe.forEach(t),aNe=i(T),um=n(T,"LI",{});var rCe=s(um);hH=n(rCe,"STRONG",{});var Jkr=s(hH);nNe=r(Jkr,"funnel"),Jkr.forEach(t),sNe=r(rCe," \u2014 "),B9=n(rCe,"A",{href:!0});var Ykr=s(B9);lNe=r(Ykr,"FunnelConfig"),Ykr.forEach(t),iNe=r(rCe," (Funnel Transformer model)"),rCe.forEach(t),dNe=i(T),bm=n(T,"LI",{});var tCe=s(bm);pH=n(tCe,"STRONG",{});var Kkr=s(pH);cNe=r(Kkr,"gpt2"),Kkr.forEach(t),fNe=r(tCe," \u2014 "),x9=n(tCe,"A",{href:!0});var Zkr=s(x9);mNe=r(Zkr,"GPT2Config"),Zkr.forEach(t),gNe=r(tCe," (OpenAI GPT-2 model)"),tCe.forEach(t),hNe=i(T),vm=n(T,"LI",{});var aCe=s(vm);_H=n(aCe,"STRONG",{});var eRr=s(_H);pNe=r(eRr,"gpt_neo"),eRr.forEach(t),_Ne=r(aCe," \u2014 "),k9=n(aCe,"A",{href:!0});var oRr=s(k9);uNe=r(oRr,"GPTNeoConfig"),oRr.forEach(t),bNe=r(aCe," (GPT Neo model)"),aCe.forEach(t),vNe=i(T),Tm=n(T,"LI",{});var nCe=s(Tm);uH=n(nCe,"STRONG",{});var rRr=s(uH);TNe=r(rRr,"gptj"),rRr.forEach(t),FNe=r(nCe," \u2014 "),R9=n(nCe,"A",{href:!0});var tRr=s(R9);CNe=r(tRr,"GPTJConfig"),tRr.forEach(t),MNe=r(nCe," (GPT-J model)"),nCe.forEach(t),ENe=i(T),Fm=n(T,"LI",{});var sCe=s(Fm);bH=n(sCe,"STRONG",{});var aRr=s(bH);yNe=r(aRr,"hubert"),aRr.forEach(t),wNe=r(sCe," \u2014 "),S9=n(sCe,"A",{href:!0});var nRr=s(S9);ANe=r(nRr,"HubertConfig"),nRr.forEach(t),LNe=r(sCe," (Hubert model)"),sCe.forEach(t),BNe=i(T),Cm=n(T,"LI",{});var lCe=s(Cm);vH=n(lCe,"STRONG",{});var sRr=s(vH);xNe=r(sRr,"ibert"),sRr.forEach(t),kNe=r(lCe," \u2014 "),P9=n(lCe,"A",{href:!0});var lRr=s(P9);RNe=r(lRr,"IBertConfig"),lRr.forEach(t),SNe=r(lCe," (I-BERT model)"),lCe.forEach(t),PNe=i(T),Mm=n(T,"LI",{});var iCe=s(Mm);TH=n(iCe,"STRONG",{});var iRr=s(TH);$Ne=r(iRr,"imagegpt"),iRr.forEach(t),INe=r(iCe," \u2014 "),$9=n(iCe,"A",{href:!0});var dRr=s($9);jNe=r(dRr,"ImageGPTConfig"),dRr.forEach(t),NNe=r(iCe," (ImageGPT model)"),iCe.forEach(t),DNe=i(T),Em=n(T,"LI",{});var dCe=s(Em);FH=n(dCe,"STRONG",{});var cRr=s(FH);qNe=r(cRr,"layoutlm"),cRr.forEach(t),ONe=r(dCe," \u2014 "),I9=n(dCe,"A",{href:!0});var fRr=s(I9);GNe=r(fRr,"LayoutLMConfig"),fRr.forEach(t),XNe=r(dCe," (LayoutLM model)"),dCe.forEach(t),VNe=i(T),ym=n(T,"LI",{});var cCe=s(ym);CH=n(cCe,"STRONG",{});var mRr=s(CH);zNe=r(mRr,"layoutlmv2"),mRr.forEach(t),WNe=r(cCe," \u2014 "),j9=n(cCe,"A",{href:!0});var gRr=s(j9);QNe=r(gRr,"LayoutLMv2Config"),gRr.forEach(t),HNe=r(cCe," (LayoutLMv2 model)"),cCe.forEach(t),UNe=i(T),wm=n(T,"LI",{});var fCe=s(wm);MH=n(fCe,"STRONG",{});var hRr=s(MH);JNe=r(hRr,"led"),hRr.forEach(t),YNe=r(fCe," \u2014 "),N9=n(fCe,"A",{href:!0});var pRr=s(N9);KNe=r(pRr,"LEDConfig"),pRr.forEach(t),ZNe=r(fCe," (LED model)"),fCe.forEach(t),eDe=i(T),Am=n(T,"LI",{});var mCe=s(Am);EH=n(mCe,"STRONG",{});var _Rr=s(EH);oDe=r(_Rr,"longformer"),_Rr.forEach(t),rDe=r(mCe," \u2014 "),D9=n(mCe,"A",{href:!0});var uRr=s(D9);tDe=r(uRr,"LongformerConfig"),uRr.forEach(t),aDe=r(mCe," (Longformer model)"),mCe.forEach(t),nDe=i(T),Lm=n(T,"LI",{});var gCe=s(Lm);yH=n(gCe,"STRONG",{});var bRr=s(yH);sDe=r(bRr,"luke"),bRr.forEach(t),lDe=r(gCe," \u2014 "),q9=n(gCe,"A",{href:!0});var vRr=s(q9);iDe=r(vRr,"LukeConfig"),vRr.forEach(t),dDe=r(gCe," (LUKE model)"),gCe.forEach(t),cDe=i(T),Bm=n(T,"LI",{});var hCe=s(Bm);wH=n(hCe,"STRONG",{});var TRr=s(wH);fDe=r(TRr,"lxmert"),TRr.forEach(t),mDe=r(hCe," \u2014 "),O9=n(hCe,"A",{href:!0});var FRr=s(O9);gDe=r(FRr,"LxmertConfig"),FRr.forEach(t),hDe=r(hCe," (LXMERT model)"),hCe.forEach(t),pDe=i(T),xm=n(T,"LI",{});var pCe=s(xm);AH=n(pCe,"STRONG",{});var CRr=s(AH);_De=r(CRr,"m2m_100"),CRr.forEach(t),uDe=r(pCe," \u2014 "),G9=n(pCe,"A",{href:!0});var MRr=s(G9);bDe=r(MRr,"M2M100Config"),MRr.forEach(t),vDe=r(pCe," (M2M100 model)"),pCe.forEach(t),TDe=i(T),km=n(T,"LI",{});var _Ce=s(km);LH=n(_Ce,"STRONG",{});var ERr=s(LH);FDe=r(ERr,"marian"),ERr.forEach(t),CDe=r(_Ce," \u2014 "),X9=n(_Ce,"A",{href:!0});var yRr=s(X9);MDe=r(yRr,"MarianConfig"),yRr.forEach(t),EDe=r(_Ce," (Marian model)"),_Ce.forEach(t),yDe=i(T),Rm=n(T,"LI",{});var uCe=s(Rm);BH=n(uCe,"STRONG",{});var wRr=s(BH);wDe=r(wRr,"maskformer"),wRr.forEach(t),ADe=r(uCe," \u2014 "),V9=n(uCe,"A",{href:!0});var ARr=s(V9);LDe=r(ARr,"MaskFormerConfig"),ARr.forEach(t),BDe=r(uCe," (MaskFormer model)"),uCe.forEach(t),xDe=i(T),Sm=n(T,"LI",{});var bCe=s(Sm);xH=n(bCe,"STRONG",{});var LRr=s(xH);kDe=r(LRr,"mbart"),LRr.forEach(t),RDe=r(bCe," \u2014 "),z9=n(bCe,"A",{href:!0});var BRr=s(z9);SDe=r(BRr,"MBartConfig"),BRr.forEach(t),PDe=r(bCe," (mBART model)"),bCe.forEach(t),$De=i(T),Pm=n(T,"LI",{});var vCe=s(Pm);kH=n(vCe,"STRONG",{});var xRr=s(kH);IDe=r(xRr,"megatron-bert"),xRr.forEach(t),jDe=r(vCe," \u2014 "),W9=n(vCe,"A",{href:!0});var kRr=s(W9);NDe=r(kRr,"MegatronBertConfig"),kRr.forEach(t),DDe=r(vCe," (MegatronBert model)"),vCe.forEach(t),qDe=i(T),$m=n(T,"LI",{});var TCe=s($m);RH=n(TCe,"STRONG",{});var RRr=s(RH);ODe=r(RRr,"mobilebert"),RRr.forEach(t),GDe=r(TCe," \u2014 "),Q9=n(TCe,"A",{href:!0});var SRr=s(Q9);XDe=r(SRr,"MobileBertConfig"),SRr.forEach(t),VDe=r(TCe," (MobileBERT model)"),TCe.forEach(t),zDe=i(T),Im=n(T,"LI",{});var FCe=s(Im);SH=n(FCe,"STRONG",{});var PRr=s(SH);WDe=r(PRr,"mpnet"),PRr.forEach(t),QDe=r(FCe," \u2014 "),H9=n(FCe,"A",{href:!0});var $Rr=s(H9);HDe=r($Rr,"MPNetConfig"),$Rr.forEach(t),UDe=r(FCe," (MPNet model)"),FCe.forEach(t),JDe=i(T),jm=n(T,"LI",{});var CCe=s(jm);PH=n(CCe,"STRONG",{});var IRr=s(PH);YDe=r(IRr,"mt5"),IRr.forEach(t),KDe=r(CCe," \u2014 "),U9=n(CCe,"A",{href:!0});var jRr=s(U9);ZDe=r(jRr,"MT5Config"),jRr.forEach(t),eqe=r(CCe," (mT5 model)"),CCe.forEach(t),oqe=i(T),Nm=n(T,"LI",{});var MCe=s(Nm);$H=n(MCe,"STRONG",{});var NRr=s($H);rqe=r(NRr,"nystromformer"),NRr.forEach(t),tqe=r(MCe," \u2014 "),J9=n(MCe,"A",{href:!0});var DRr=s(J9);aqe=r(DRr,"NystromformerConfig"),DRr.forEach(t),nqe=r(MCe," (Nystromformer model)"),MCe.forEach(t),sqe=i(T),Dm=n(T,"LI",{});var ECe=s(Dm);IH=n(ECe,"STRONG",{});var qRr=s(IH);lqe=r(qRr,"openai-gpt"),qRr.forEach(t),iqe=r(ECe," \u2014 "),Y9=n(ECe,"A",{href:!0});var ORr=s(Y9);dqe=r(ORr,"OpenAIGPTConfig"),ORr.forEach(t),cqe=r(ECe," (OpenAI GPT model)"),ECe.forEach(t),fqe=i(T),qm=n(T,"LI",{});var yCe=s(qm);jH=n(yCe,"STRONG",{});var GRr=s(jH);mqe=r(GRr,"pegasus"),GRr.forEach(t),gqe=r(yCe," \u2014 "),K9=n(yCe,"A",{href:!0});var XRr=s(K9);hqe=r(XRr,"PegasusConfig"),XRr.forEach(t),pqe=r(yCe," (Pegasus model)"),yCe.forEach(t),_qe=i(T),Om=n(T,"LI",{});var wCe=s(Om);NH=n(wCe,"STRONG",{});var VRr=s(NH);uqe=r(VRr,"perceiver"),VRr.forEach(t),bqe=r(wCe," \u2014 "),Z9=n(wCe,"A",{href:!0});var zRr=s(Z9);vqe=r(zRr,"PerceiverConfig"),zRr.forEach(t),Tqe=r(wCe," (Perceiver model)"),wCe.forEach(t),Fqe=i(T),Gm=n(T,"LI",{});var ACe=s(Gm);DH=n(ACe,"STRONG",{});var WRr=s(DH);Cqe=r(WRr,"plbart"),WRr.forEach(t),Mqe=r(ACe," \u2014 "),eB=n(ACe,"A",{href:!0});var QRr=s(eB);Eqe=r(QRr,"PLBartConfig"),QRr.forEach(t),yqe=r(ACe," (PLBart model)"),ACe.forEach(t),wqe=i(T),Xm=n(T,"LI",{});var LCe=s(Xm);qH=n(LCe,"STRONG",{});var HRr=s(qH);Aqe=r(HRr,"poolformer"),HRr.forEach(t),Lqe=r(LCe," \u2014 "),oB=n(LCe,"A",{href:!0});var URr=s(oB);Bqe=r(URr,"PoolFormerConfig"),URr.forEach(t),xqe=r(LCe," (PoolFormer model)"),LCe.forEach(t),kqe=i(T),Vm=n(T,"LI",{});var BCe=s(Vm);OH=n(BCe,"STRONG",{});var JRr=s(OH);Rqe=r(JRr,"prophetnet"),JRr.forEach(t),Sqe=r(BCe," \u2014 "),rB=n(BCe,"A",{href:!0});var YRr=s(rB);Pqe=r(YRr,"ProphetNetConfig"),YRr.forEach(t),$qe=r(BCe," (ProphetNet model)"),BCe.forEach(t),Iqe=i(T),zm=n(T,"LI",{});var xCe=s(zm);GH=n(xCe,"STRONG",{});var KRr=s(GH);jqe=r(KRr,"qdqbert"),KRr.forEach(t),Nqe=r(xCe," \u2014 "),tB=n(xCe,"A",{href:!0});var ZRr=s(tB);Dqe=r(ZRr,"QDQBertConfig"),ZRr.forEach(t),qqe=r(xCe," (QDQBert model)"),xCe.forEach(t),Oqe=i(T),Wm=n(T,"LI",{});var kCe=s(Wm);XH=n(kCe,"STRONG",{});var eSr=s(XH);Gqe=r(eSr,"rag"),eSr.forEach(t),Xqe=r(kCe," \u2014 "),aB=n(kCe,"A",{href:!0});var oSr=s(aB);Vqe=r(oSr,"RagConfig"),oSr.forEach(t),zqe=r(kCe," (RAG model)"),kCe.forEach(t),Wqe=i(T),Qm=n(T,"LI",{});var RCe=s(Qm);VH=n(RCe,"STRONG",{});var rSr=s(VH);Qqe=r(rSr,"realm"),rSr.forEach(t),Hqe=r(RCe," \u2014 "),nB=n(RCe,"A",{href:!0});var tSr=s(nB);Uqe=r(tSr,"RealmConfig"),tSr.forEach(t),Jqe=r(RCe," (Realm model)"),RCe.forEach(t),Yqe=i(T),Hm=n(T,"LI",{});var SCe=s(Hm);zH=n(SCe,"STRONG",{});var aSr=s(zH);Kqe=r(aSr,"reformer"),aSr.forEach(t),Zqe=r(SCe," \u2014 "),sB=n(SCe,"A",{href:!0});var nSr=s(sB);eOe=r(nSr,"ReformerConfig"),nSr.forEach(t),oOe=r(SCe," (Reformer model)"),SCe.forEach(t),rOe=i(T),Um=n(T,"LI",{});var PCe=s(Um);WH=n(PCe,"STRONG",{});var sSr=s(WH);tOe=r(sSr,"rembert"),sSr.forEach(t),aOe=r(PCe," \u2014 "),lB=n(PCe,"A",{href:!0});var lSr=s(lB);nOe=r(lSr,"RemBertConfig"),lSr.forEach(t),sOe=r(PCe," (RemBERT model)"),PCe.forEach(t),lOe=i(T),Jm=n(T,"LI",{});var $Ce=s(Jm);QH=n($Ce,"STRONG",{});var iSr=s(QH);iOe=r(iSr,"resnet"),iSr.forEach(t),dOe=r($Ce," \u2014 "),iB=n($Ce,"A",{href:!0});var dSr=s(iB);cOe=r(dSr,"ResNetConfig"),dSr.forEach(t),fOe=r($Ce," (ResNet model)"),$Ce.forEach(t),mOe=i(T),Ym=n(T,"LI",{});var ICe=s(Ym);HH=n(ICe,"STRONG",{});var cSr=s(HH);gOe=r(cSr,"retribert"),cSr.forEach(t),hOe=r(ICe," \u2014 "),dB=n(ICe,"A",{href:!0});var fSr=s(dB);pOe=r(fSr,"RetriBertConfig"),fSr.forEach(t),_Oe=r(ICe," (RetriBERT model)"),ICe.forEach(t),uOe=i(T),Km=n(T,"LI",{});var jCe=s(Km);UH=n(jCe,"STRONG",{});var mSr=s(UH);bOe=r(mSr,"roberta"),mSr.forEach(t),vOe=r(jCe," \u2014 "),cB=n(jCe,"A",{href:!0});var gSr=s(cB);TOe=r(gSr,"RobertaConfig"),gSr.forEach(t),FOe=r(jCe," (RoBERTa model)"),jCe.forEach(t),COe=i(T),Zm=n(T,"LI",{});var NCe=s(Zm);JH=n(NCe,"STRONG",{});var hSr=s(JH);MOe=r(hSr,"roformer"),hSr.forEach(t),EOe=r(NCe," \u2014 "),fB=n(NCe,"A",{href:!0});var pSr=s(fB);yOe=r(pSr,"RoFormerConfig"),pSr.forEach(t),wOe=r(NCe," (RoFormer model)"),NCe.forEach(t),AOe=i(T),eg=n(T,"LI",{});var DCe=s(eg);YH=n(DCe,"STRONG",{});var _Sr=s(YH);LOe=r(_Sr,"segformer"),_Sr.forEach(t),BOe=r(DCe," \u2014 "),mB=n(DCe,"A",{href:!0});var uSr=s(mB);xOe=r(uSr,"SegformerConfig"),uSr.forEach(t),kOe=r(DCe," (SegFormer model)"),DCe.forEach(t),ROe=i(T),og=n(T,"LI",{});var qCe=s(og);KH=n(qCe,"STRONG",{});var bSr=s(KH);SOe=r(bSr,"sew"),bSr.forEach(t),POe=r(qCe," \u2014 "),gB=n(qCe,"A",{href:!0});var vSr=s(gB);$Oe=r(vSr,"SEWConfig"),vSr.forEach(t),IOe=r(qCe," (SEW model)"),qCe.forEach(t),jOe=i(T),rg=n(T,"LI",{});var OCe=s(rg);ZH=n(OCe,"STRONG",{});var TSr=s(ZH);NOe=r(TSr,"sew-d"),TSr.forEach(t),DOe=r(OCe," \u2014 "),hB=n(OCe,"A",{href:!0});var FSr=s(hB);qOe=r(FSr,"SEWDConfig"),FSr.forEach(t),OOe=r(OCe," (SEW-D model)"),OCe.forEach(t),GOe=i(T),tg=n(T,"LI",{});var GCe=s(tg);eU=n(GCe,"STRONG",{});var CSr=s(eU);XOe=r(CSr,"speech-encoder-decoder"),CSr.forEach(t),VOe=r(GCe," \u2014 "),pB=n(GCe,"A",{href:!0});var MSr=s(pB);zOe=r(MSr,"SpeechEncoderDecoderConfig"),MSr.forEach(t),WOe=r(GCe," (Speech Encoder decoder model)"),GCe.forEach(t),QOe=i(T),ag=n(T,"LI",{});var XCe=s(ag);oU=n(XCe,"STRONG",{});var ESr=s(oU);HOe=r(ESr,"speech_to_text"),ESr.forEach(t),UOe=r(XCe," \u2014 "),_B=n(XCe,"A",{href:!0});var ySr=s(_B);JOe=r(ySr,"Speech2TextConfig"),ySr.forEach(t),YOe=r(XCe," (Speech2Text model)"),XCe.forEach(t),KOe=i(T),ng=n(T,"LI",{});var VCe=s(ng);rU=n(VCe,"STRONG",{});var wSr=s(rU);ZOe=r(wSr,"speech_to_text_2"),wSr.forEach(t),eGe=r(VCe," \u2014 "),uB=n(VCe,"A",{href:!0});var ASr=s(uB);oGe=r(ASr,"Speech2Text2Config"),ASr.forEach(t),rGe=r(VCe," (Speech2Text2 model)"),VCe.forEach(t),tGe=i(T),sg=n(T,"LI",{});var zCe=s(sg);tU=n(zCe,"STRONG",{});var LSr=s(tU);aGe=r(LSr,"splinter"),LSr.forEach(t),nGe=r(zCe," \u2014 "),bB=n(zCe,"A",{href:!0});var BSr=s(bB);sGe=r(BSr,"SplinterConfig"),BSr.forEach(t),lGe=r(zCe," (Splinter model)"),zCe.forEach(t),iGe=i(T),lg=n(T,"LI",{});var WCe=s(lg);aU=n(WCe,"STRONG",{});var xSr=s(aU);dGe=r(xSr,"squeezebert"),xSr.forEach(t),cGe=r(WCe," \u2014 "),vB=n(WCe,"A",{href:!0});var kSr=s(vB);fGe=r(kSr,"SqueezeBertConfig"),kSr.forEach(t),mGe=r(WCe," (SqueezeBERT model)"),WCe.forEach(t),gGe=i(T),ig=n(T,"LI",{});var QCe=s(ig);nU=n(QCe,"STRONG",{});var RSr=s(nU);hGe=r(RSr,"swin"),RSr.forEach(t),pGe=r(QCe," \u2014 "),TB=n(QCe,"A",{href:!0});var SSr=s(TB);_Ge=r(SSr,"SwinConfig"),SSr.forEach(t),uGe=r(QCe," (Swin model)"),QCe.forEach(t),bGe=i(T),dg=n(T,"LI",{});var HCe=s(dg);sU=n(HCe,"STRONG",{});var PSr=s(sU);vGe=r(PSr,"t5"),PSr.forEach(t),TGe=r(HCe," \u2014 "),FB=n(HCe,"A",{href:!0});var $Sr=s(FB);FGe=r($Sr,"T5Config"),$Sr.forEach(t),CGe=r(HCe," (T5 model)"),HCe.forEach(t),MGe=i(T),cg=n(T,"LI",{});var UCe=s(cg);lU=n(UCe,"STRONG",{});var ISr=s(lU);EGe=r(ISr,"tapas"),ISr.forEach(t),yGe=r(UCe," \u2014 "),CB=n(UCe,"A",{href:!0});var jSr=s(CB);wGe=r(jSr,"TapasConfig"),jSr.forEach(t),AGe=r(UCe," (TAPAS model)"),UCe.forEach(t),LGe=i(T),fg=n(T,"LI",{});var JCe=s(fg);iU=n(JCe,"STRONG",{});var NSr=s(iU);BGe=r(NSr,"transfo-xl"),NSr.forEach(t),xGe=r(JCe," \u2014 "),MB=n(JCe,"A",{href:!0});var DSr=s(MB);kGe=r(DSr,"TransfoXLConfig"),DSr.forEach(t),RGe=r(JCe," (Transformer-XL model)"),JCe.forEach(t),SGe=i(T),mg=n(T,"LI",{});var YCe=s(mg);dU=n(YCe,"STRONG",{});var qSr=s(dU);PGe=r(qSr,"trocr"),qSr.forEach(t),$Ge=r(YCe," \u2014 "),EB=n(YCe,"A",{href:!0});var OSr=s(EB);IGe=r(OSr,"TrOCRConfig"),OSr.forEach(t),jGe=r(YCe," (TrOCR model)"),YCe.forEach(t),NGe=i(T),gg=n(T,"LI",{});var KCe=s(gg);cU=n(KCe,"STRONG",{});var GSr=s(cU);DGe=r(GSr,"unispeech"),GSr.forEach(t),qGe=r(KCe," \u2014 "),yB=n(KCe,"A",{href:!0});var XSr=s(yB);OGe=r(XSr,"UniSpeechConfig"),XSr.forEach(t),GGe=r(KCe," (UniSpeech model)"),KCe.forEach(t),XGe=i(T),hg=n(T,"LI",{});var ZCe=s(hg);fU=n(ZCe,"STRONG",{});var VSr=s(fU);VGe=r(VSr,"unispeech-sat"),VSr.forEach(t),zGe=r(ZCe," \u2014 "),wB=n(ZCe,"A",{href:!0});var zSr=s(wB);WGe=r(zSr,"UniSpeechSatConfig"),zSr.forEach(t),QGe=r(ZCe," (UniSpeechSat model)"),ZCe.forEach(t),HGe=i(T),pg=n(T,"LI",{});var eMe=s(pg);mU=n(eMe,"STRONG",{});var WSr=s(mU);UGe=r(WSr,"van"),WSr.forEach(t),JGe=r(eMe," \u2014 "),AB=n(eMe,"A",{href:!0});var QSr=s(AB);YGe=r(QSr,"VanConfig"),QSr.forEach(t),KGe=r(eMe," (VAN model)"),eMe.forEach(t),ZGe=i(T),_g=n(T,"LI",{});var oMe=s(_g);gU=n(oMe,"STRONG",{});var HSr=s(gU);eXe=r(HSr,"vilt"),HSr.forEach(t),oXe=r(oMe," \u2014 "),LB=n(oMe,"A",{href:!0});var USr=s(LB);rXe=r(USr,"ViltConfig"),USr.forEach(t),tXe=r(oMe," (ViLT model)"),oMe.forEach(t),aXe=i(T),ug=n(T,"LI",{});var rMe=s(ug);hU=n(rMe,"STRONG",{});var JSr=s(hU);nXe=r(JSr,"vision-encoder-decoder"),JSr.forEach(t),sXe=r(rMe," \u2014 "),BB=n(rMe,"A",{href:!0});var YSr=s(BB);lXe=r(YSr,"VisionEncoderDecoderConfig"),YSr.forEach(t),iXe=r(rMe," (Vision Encoder decoder model)"),rMe.forEach(t),dXe=i(T),bg=n(T,"LI",{});var tMe=s(bg);pU=n(tMe,"STRONG",{});var KSr=s(pU);cXe=r(KSr,"vision-text-dual-encoder"),KSr.forEach(t),fXe=r(tMe," \u2014 "),xB=n(tMe,"A",{href:!0});var ZSr=s(xB);mXe=r(ZSr,"VisionTextDualEncoderConfig"),ZSr.forEach(t),gXe=r(tMe," (VisionTextDualEncoder model)"),tMe.forEach(t),hXe=i(T),vg=n(T,"LI",{});var aMe=s(vg);_U=n(aMe,"STRONG",{});var ePr=s(_U);pXe=r(ePr,"visual_bert"),ePr.forEach(t),_Xe=r(aMe," \u2014 "),kB=n(aMe,"A",{href:!0});var oPr=s(kB);uXe=r(oPr,"VisualBertConfig"),oPr.forEach(t),bXe=r(aMe," (VisualBert model)"),aMe.forEach(t),vXe=i(T),Tg=n(T,"LI",{});var nMe=s(Tg);uU=n(nMe,"STRONG",{});var rPr=s(uU);TXe=r(rPr,"vit"),rPr.forEach(t),FXe=r(nMe," \u2014 "),RB=n(nMe,"A",{href:!0});var tPr=s(RB);CXe=r(tPr,"ViTConfig"),tPr.forEach(t),MXe=r(nMe," (ViT model)"),nMe.forEach(t),EXe=i(T),Fg=n(T,"LI",{});var sMe=s(Fg);bU=n(sMe,"STRONG",{});var aPr=s(bU);yXe=r(aPr,"vit_mae"),aPr.forEach(t),wXe=r(sMe," \u2014 "),SB=n(sMe,"A",{href:!0});var nPr=s(SB);AXe=r(nPr,"ViTMAEConfig"),nPr.forEach(t),LXe=r(sMe," (ViTMAE model)"),sMe.forEach(t),BXe=i(T),Cg=n(T,"LI",{});var lMe=s(Cg);vU=n(lMe,"STRONG",{});var sPr=s(vU);xXe=r(sPr,"wav2vec2"),sPr.forEach(t),kXe=r(lMe," \u2014 "),PB=n(lMe,"A",{href:!0});var lPr=s(PB);RXe=r(lPr,"Wav2Vec2Config"),lPr.forEach(t),SXe=r(lMe," (Wav2Vec2 model)"),lMe.forEach(t),PXe=i(T),Mg=n(T,"LI",{});var iMe=s(Mg);TU=n(iMe,"STRONG",{});var iPr=s(TU);$Xe=r(iPr,"wavlm"),iPr.forEach(t),IXe=r(iMe," \u2014 "),$B=n(iMe,"A",{href:!0});var dPr=s($B);jXe=r(dPr,"WavLMConfig"),dPr.forEach(t),NXe=r(iMe," (WavLM model)"),iMe.forEach(t),DXe=i(T),Eg=n(T,"LI",{});var dMe=s(Eg);FU=n(dMe,"STRONG",{});var cPr=s(FU);qXe=r(cPr,"xglm"),cPr.forEach(t),OXe=r(dMe," \u2014 "),IB=n(dMe,"A",{href:!0});var fPr=s(IB);GXe=r(fPr,"XGLMConfig"),fPr.forEach(t),XXe=r(dMe," (XGLM model)"),dMe.forEach(t),VXe=i(T),yg=n(T,"LI",{});var cMe=s(yg);CU=n(cMe,"STRONG",{});var mPr=s(CU);zXe=r(mPr,"xlm"),mPr.forEach(t),WXe=r(cMe," \u2014 "),jB=n(cMe,"A",{href:!0});var gPr=s(jB);QXe=r(gPr,"XLMConfig"),gPr.forEach(t),HXe=r(cMe," (XLM model)"),cMe.forEach(t),UXe=i(T),wg=n(T,"LI",{});var fMe=s(wg);MU=n(fMe,"STRONG",{});var hPr=s(MU);JXe=r(hPr,"xlm-prophetnet"),hPr.forEach(t),YXe=r(fMe," \u2014 "),NB=n(fMe,"A",{href:!0});var pPr=s(NB);KXe=r(pPr,"XLMProphetNetConfig"),pPr.forEach(t),ZXe=r(fMe," (XLMProphetNet model)"),fMe.forEach(t),eVe=i(T),Ag=n(T,"LI",{});var mMe=s(Ag);EU=n(mMe,"STRONG",{});var _Pr=s(EU);oVe=r(_Pr,"xlm-roberta"),_Pr.forEach(t),rVe=r(mMe," \u2014 "),DB=n(mMe,"A",{href:!0});var uPr=s(DB);tVe=r(uPr,"XLMRobertaConfig"),uPr.forEach(t),aVe=r(mMe," (XLM-RoBERTa model)"),mMe.forEach(t),nVe=i(T),Lg=n(T,"LI",{});var gMe=s(Lg);yU=n(gMe,"STRONG",{});var bPr=s(yU);sVe=r(bPr,"xlm-roberta-xl"),bPr.forEach(t),lVe=r(gMe," \u2014 "),qB=n(gMe,"A",{href:!0});var vPr=s(qB);iVe=r(vPr,"XLMRobertaXLConfig"),vPr.forEach(t),dVe=r(gMe," (XLM-RoBERTa-XL model)"),gMe.forEach(t),cVe=i(T),Bg=n(T,"LI",{});var hMe=s(Bg);wU=n(hMe,"STRONG",{});var TPr=s(wU);fVe=r(TPr,"xlnet"),TPr.forEach(t),mVe=r(hMe," \u2014 "),OB=n(hMe,"A",{href:!0});var FPr=s(OB);gVe=r(FPr,"XLNetConfig"),FPr.forEach(t),hVe=r(hMe," (XLNet model)"),hMe.forEach(t),pVe=i(T),xg=n(T,"LI",{});var pMe=s(xg);AU=n(pMe,"STRONG",{});var CPr=s(AU);_Ve=r(CPr,"yoso"),CPr.forEach(t),uVe=r(pMe," \u2014 "),GB=n(pMe,"A",{href:!0});var MPr=s(GB);bVe=r(MPr,"YosoConfig"),MPr.forEach(t),vVe=r(pMe," (YOSO model)"),pMe.forEach(t),T.forEach(t),TVe=i(ga),LU=n(ga,"P",{});var EPr=s(LU);FVe=r(EPr,"Examples:"),EPr.forEach(t),CVe=i(ga),m(my.$$.fragment,ga),ga.forEach(t),MVe=i(Gs),kg=n(Gs,"DIV",{class:!0});var QRe=s(kg);m(gy.$$.fragment,QRe),EVe=i(QRe),BU=n(QRe,"P",{});var yPr=s(BU);yVe=r(yPr,"Register a new configuration for this class."),yPr.forEach(t),QRe.forEach(t),Gs.forEach(t),zxe=i(c),Qi=n(c,"H2",{class:!0});var HRe=s(Qi);Rg=n(HRe,"A",{id:!0,class:!0,href:!0});var wPr=s(Rg);xU=n(wPr,"SPAN",{});var APr=s(xU);m(hy.$$.fragment,APr),APr.forEach(t),wPr.forEach(t),wVe=i(HRe),kU=n(HRe,"SPAN",{});var LPr=s(kU);AVe=r(LPr,"AutoTokenizer"),LPr.forEach(t),HRe.forEach(t),Wxe=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(py.$$.fragment,Xs),LVe=i(Xs),_y=n(Xs,"P",{});var URe=s(_y);BVe=r(URe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),XB=n(URe,"A",{href:!0});var BPr=s(XB);xVe=r(BPr,"AutoTokenizer.from_pretrained()"),BPr.forEach(t),kVe=r(URe," class method."),URe.forEach(t),RVe=i(Xs),uy=n(Xs,"P",{});var JRe=s(uy);SVe=r(JRe,"This class cannot be instantiated directly using "),RU=n(JRe,"CODE",{});var xPr=s(RU);PVe=r(xPr,"__init__()"),xPr.forEach(t),$Ve=r(JRe," (throws an error)."),JRe.forEach(t),IVe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(by.$$.fragment,ha),jVe=i(ha),SU=n(ha,"P",{});var kPr=s(SU);NVe=r(kPr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),kPr.forEach(t),DVe=i(ha),Ga=n(ha,"P",{});var t5=s(Ga);qVe=r(t5,"The tokenizer class to instantiate is selected based on the "),PU=n(t5,"CODE",{});var RPr=s(PU);OVe=r(RPr,"model_type"),RPr.forEach(t),GVe=r(t5,` property of the config object (either
passed as an argument or loaded from `),$U=n(t5,"CODE",{});var SPr=s($U);XVe=r(SPr,"pretrained_model_name_or_path"),SPr.forEach(t),VVe=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IU=n(t5,"CODE",{});var PPr=s(IU);zVe=r(PPr,"pretrained_model_name_or_path"),PPr.forEach(t),WVe=r(t5,":"),t5.forEach(t),QVe=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var K7=s(Wn);jU=n(K7,"STRONG",{});var $Pr=s(jU);HVe=r($Pr,"albert"),$Pr.forEach(t),UVe=r(K7," \u2014 "),VB=n(K7,"A",{href:!0});var IPr=s(VB);JVe=r(IPr,"AlbertTokenizer"),IPr.forEach(t),YVe=r(K7," or "),zB=n(K7,"A",{href:!0});var jPr=s(zB);KVe=r(jPr,"AlbertTokenizerFast"),jPr.forEach(t),ZVe=r(K7," (ALBERT model)"),K7.forEach(t),eze=i(y),Qn=n(y,"LI",{});var Z7=s(Qn);NU=n(Z7,"STRONG",{});var NPr=s(NU);oze=r(NPr,"bart"),NPr.forEach(t),rze=r(Z7," \u2014 "),WB=n(Z7,"A",{href:!0});var DPr=s(WB);tze=r(DPr,"BartTokenizer"),DPr.forEach(t),aze=r(Z7," or "),QB=n(Z7,"A",{href:!0});var qPr=s(QB);nze=r(qPr,"BartTokenizerFast"),qPr.forEach(t),sze=r(Z7," (BART model)"),Z7.forEach(t),lze=i(y),Hn=n(y,"LI",{});var e8=s(Hn);DU=n(e8,"STRONG",{});var OPr=s(DU);ize=r(OPr,"barthez"),OPr.forEach(t),dze=r(e8," \u2014 "),HB=n(e8,"A",{href:!0});var GPr=s(HB);cze=r(GPr,"BarthezTokenizer"),GPr.forEach(t),fze=r(e8," or "),UB=n(e8,"A",{href:!0});var XPr=s(UB);mze=r(XPr,"BarthezTokenizerFast"),XPr.forEach(t),gze=r(e8," (BARThez model)"),e8.forEach(t),hze=i(y),Sg=n(y,"LI",{});var _Me=s(Sg);qU=n(_Me,"STRONG",{});var VPr=s(qU);pze=r(VPr,"bartpho"),VPr.forEach(t),_ze=r(_Me," \u2014 "),JB=n(_Me,"A",{href:!0});var zPr=s(JB);uze=r(zPr,"BartphoTokenizer"),zPr.forEach(t),bze=r(_Me," (BARTpho model)"),_Me.forEach(t),vze=i(y),Un=n(y,"LI",{});var o8=s(Un);OU=n(o8,"STRONG",{});var WPr=s(OU);Tze=r(WPr,"bert"),WPr.forEach(t),Fze=r(o8," \u2014 "),YB=n(o8,"A",{href:!0});var QPr=s(YB);Cze=r(QPr,"BertTokenizer"),QPr.forEach(t),Mze=r(o8," or "),KB=n(o8,"A",{href:!0});var HPr=s(KB);Eze=r(HPr,"BertTokenizerFast"),HPr.forEach(t),yze=r(o8," (BERT model)"),o8.forEach(t),wze=i(y),Pg=n(y,"LI",{});var uMe=s(Pg);GU=n(uMe,"STRONG",{});var UPr=s(GU);Aze=r(UPr,"bert-generation"),UPr.forEach(t),Lze=r(uMe," \u2014 "),ZB=n(uMe,"A",{href:!0});var JPr=s(ZB);Bze=r(JPr,"BertGenerationTokenizer"),JPr.forEach(t),xze=r(uMe," (Bert Generation model)"),uMe.forEach(t),kze=i(y),$g=n(y,"LI",{});var bMe=s($g);XU=n(bMe,"STRONG",{});var YPr=s(XU);Rze=r(YPr,"bert-japanese"),YPr.forEach(t),Sze=r(bMe," \u2014 "),ex=n(bMe,"A",{href:!0});var KPr=s(ex);Pze=r(KPr,"BertJapaneseTokenizer"),KPr.forEach(t),$ze=r(bMe," (BertJapanese model)"),bMe.forEach(t),Ize=i(y),Ig=n(y,"LI",{});var vMe=s(Ig);VU=n(vMe,"STRONG",{});var ZPr=s(VU);jze=r(ZPr,"bertweet"),ZPr.forEach(t),Nze=r(vMe," \u2014 "),ox=n(vMe,"A",{href:!0});var e$r=s(ox);Dze=r(e$r,"BertweetTokenizer"),e$r.forEach(t),qze=r(vMe," (Bertweet model)"),vMe.forEach(t),Oze=i(y),Jn=n(y,"LI",{});var r8=s(Jn);zU=n(r8,"STRONG",{});var o$r=s(zU);Gze=r(o$r,"big_bird"),o$r.forEach(t),Xze=r(r8," \u2014 "),rx=n(r8,"A",{href:!0});var r$r=s(rx);Vze=r(r$r,"BigBirdTokenizer"),r$r.forEach(t),zze=r(r8," or "),tx=n(r8,"A",{href:!0});var t$r=s(tx);Wze=r(t$r,"BigBirdTokenizerFast"),t$r.forEach(t),Qze=r(r8," (BigBird model)"),r8.forEach(t),Hze=i(y),Yn=n(y,"LI",{});var t8=s(Yn);WU=n(t8,"STRONG",{});var a$r=s(WU);Uze=r(a$r,"bigbird_pegasus"),a$r.forEach(t),Jze=r(t8," \u2014 "),ax=n(t8,"A",{href:!0});var n$r=s(ax);Yze=r(n$r,"PegasusTokenizer"),n$r.forEach(t),Kze=r(t8," or "),nx=n(t8,"A",{href:!0});var s$r=s(nx);Zze=r(s$r,"PegasusTokenizerFast"),s$r.forEach(t),eWe=r(t8," (BigBirdPegasus model)"),t8.forEach(t),oWe=i(y),Kn=n(y,"LI",{});var a8=s(Kn);QU=n(a8,"STRONG",{});var l$r=s(QU);rWe=r(l$r,"blenderbot"),l$r.forEach(t),tWe=r(a8," \u2014 "),sx=n(a8,"A",{href:!0});var i$r=s(sx);aWe=r(i$r,"BlenderbotTokenizer"),i$r.forEach(t),nWe=r(a8," or "),lx=n(a8,"A",{href:!0});var d$r=s(lx);sWe=r(d$r,"BlenderbotTokenizerFast"),d$r.forEach(t),lWe=r(a8," (Blenderbot model)"),a8.forEach(t),iWe=i(y),jg=n(y,"LI",{});var TMe=s(jg);HU=n(TMe,"STRONG",{});var c$r=s(HU);dWe=r(c$r,"blenderbot-small"),c$r.forEach(t),cWe=r(TMe," \u2014 "),ix=n(TMe,"A",{href:!0});var f$r=s(ix);fWe=r(f$r,"BlenderbotSmallTokenizer"),f$r.forEach(t),mWe=r(TMe," (BlenderbotSmall model)"),TMe.forEach(t),gWe=i(y),Ng=n(y,"LI",{});var FMe=s(Ng);UU=n(FMe,"STRONG",{});var m$r=s(UU);hWe=r(m$r,"byt5"),m$r.forEach(t),pWe=r(FMe," \u2014 "),dx=n(FMe,"A",{href:!0});var g$r=s(dx);_We=r(g$r,"ByT5Tokenizer"),g$r.forEach(t),uWe=r(FMe," (ByT5 model)"),FMe.forEach(t),bWe=i(y),Zn=n(y,"LI",{});var n8=s(Zn);JU=n(n8,"STRONG",{});var h$r=s(JU);vWe=r(h$r,"camembert"),h$r.forEach(t),TWe=r(n8," \u2014 "),cx=n(n8,"A",{href:!0});var p$r=s(cx);FWe=r(p$r,"CamembertTokenizer"),p$r.forEach(t),CWe=r(n8," or "),fx=n(n8,"A",{href:!0});var _$r=s(fx);MWe=r(_$r,"CamembertTokenizerFast"),_$r.forEach(t),EWe=r(n8," (CamemBERT model)"),n8.forEach(t),yWe=i(y),Dg=n(y,"LI",{});var CMe=s(Dg);YU=n(CMe,"STRONG",{});var u$r=s(YU);wWe=r(u$r,"canine"),u$r.forEach(t),AWe=r(CMe," \u2014 "),mx=n(CMe,"A",{href:!0});var b$r=s(mx);LWe=r(b$r,"CanineTokenizer"),b$r.forEach(t),BWe=r(CMe," (Canine model)"),CMe.forEach(t),xWe=i(y),es=n(y,"LI",{});var s8=s(es);KU=n(s8,"STRONG",{});var v$r=s(KU);kWe=r(v$r,"clip"),v$r.forEach(t),RWe=r(s8," \u2014 "),gx=n(s8,"A",{href:!0});var T$r=s(gx);SWe=r(T$r,"CLIPTokenizer"),T$r.forEach(t),PWe=r(s8," or "),hx=n(s8,"A",{href:!0});var F$r=s(hx);$We=r(F$r,"CLIPTokenizerFast"),F$r.forEach(t),IWe=r(s8," (CLIP model)"),s8.forEach(t),jWe=i(y),os=n(y,"LI",{});var l8=s(os);ZU=n(l8,"STRONG",{});var C$r=s(ZU);NWe=r(C$r,"convbert"),C$r.forEach(t),DWe=r(l8," \u2014 "),px=n(l8,"A",{href:!0});var M$r=s(px);qWe=r(M$r,"ConvBertTokenizer"),M$r.forEach(t),OWe=r(l8," or "),_x=n(l8,"A",{href:!0});var E$r=s(_x);GWe=r(E$r,"ConvBertTokenizerFast"),E$r.forEach(t),XWe=r(l8," (ConvBERT model)"),l8.forEach(t),VWe=i(y),rs=n(y,"LI",{});var i8=s(rs);eJ=n(i8,"STRONG",{});var y$r=s(eJ);zWe=r(y$r,"cpm"),y$r.forEach(t),WWe=r(i8," \u2014 "),ux=n(i8,"A",{href:!0});var w$r=s(ux);QWe=r(w$r,"CpmTokenizer"),w$r.forEach(t),HWe=r(i8," or "),oJ=n(i8,"CODE",{});var A$r=s(oJ);UWe=r(A$r,"CpmTokenizerFast"),A$r.forEach(t),JWe=r(i8," (CPM model)"),i8.forEach(t),YWe=i(y),qg=n(y,"LI",{});var MMe=s(qg);rJ=n(MMe,"STRONG",{});var L$r=s(rJ);KWe=r(L$r,"ctrl"),L$r.forEach(t),ZWe=r(MMe," \u2014 "),bx=n(MMe,"A",{href:!0});var B$r=s(bx);eQe=r(B$r,"CTRLTokenizer"),B$r.forEach(t),oQe=r(MMe," (CTRL model)"),MMe.forEach(t),rQe=i(y),ts=n(y,"LI",{});var d8=s(ts);tJ=n(d8,"STRONG",{});var x$r=s(tJ);tQe=r(x$r,"deberta"),x$r.forEach(t),aQe=r(d8," \u2014 "),vx=n(d8,"A",{href:!0});var k$r=s(vx);nQe=r(k$r,"DebertaTokenizer"),k$r.forEach(t),sQe=r(d8," or "),Tx=n(d8,"A",{href:!0});var R$r=s(Tx);lQe=r(R$r,"DebertaTokenizerFast"),R$r.forEach(t),iQe=r(d8," (DeBERTa model)"),d8.forEach(t),dQe=i(y),Og=n(y,"LI",{});var EMe=s(Og);aJ=n(EMe,"STRONG",{});var S$r=s(aJ);cQe=r(S$r,"deberta-v2"),S$r.forEach(t),fQe=r(EMe," \u2014 "),Fx=n(EMe,"A",{href:!0});var P$r=s(Fx);mQe=r(P$r,"DebertaV2Tokenizer"),P$r.forEach(t),gQe=r(EMe," (DeBERTa-v2 model)"),EMe.forEach(t),hQe=i(y),as=n(y,"LI",{});var c8=s(as);nJ=n(c8,"STRONG",{});var $$r=s(nJ);pQe=r($$r,"distilbert"),$$r.forEach(t),_Qe=r(c8," \u2014 "),Cx=n(c8,"A",{href:!0});var I$r=s(Cx);uQe=r(I$r,"DistilBertTokenizer"),I$r.forEach(t),bQe=r(c8," or "),Mx=n(c8,"A",{href:!0});var j$r=s(Mx);vQe=r(j$r,"DistilBertTokenizerFast"),j$r.forEach(t),TQe=r(c8," (DistilBERT model)"),c8.forEach(t),FQe=i(y),ns=n(y,"LI",{});var f8=s(ns);sJ=n(f8,"STRONG",{});var N$r=s(sJ);CQe=r(N$r,"dpr"),N$r.forEach(t),MQe=r(f8," \u2014 "),Ex=n(f8,"A",{href:!0});var D$r=s(Ex);EQe=r(D$r,"DPRQuestionEncoderTokenizer"),D$r.forEach(t),yQe=r(f8," or "),yx=n(f8,"A",{href:!0});var q$r=s(yx);wQe=r(q$r,"DPRQuestionEncoderTokenizerFast"),q$r.forEach(t),AQe=r(f8," (DPR model)"),f8.forEach(t),LQe=i(y),ss=n(y,"LI",{});var m8=s(ss);lJ=n(m8,"STRONG",{});var O$r=s(lJ);BQe=r(O$r,"electra"),O$r.forEach(t),xQe=r(m8," \u2014 "),wx=n(m8,"A",{href:!0});var G$r=s(wx);kQe=r(G$r,"ElectraTokenizer"),G$r.forEach(t),RQe=r(m8," or "),Ax=n(m8,"A",{href:!0});var X$r=s(Ax);SQe=r(X$r,"ElectraTokenizerFast"),X$r.forEach(t),PQe=r(m8," (ELECTRA model)"),m8.forEach(t),$Qe=i(y),Gg=n(y,"LI",{});var yMe=s(Gg);iJ=n(yMe,"STRONG",{});var V$r=s(iJ);IQe=r(V$r,"flaubert"),V$r.forEach(t),jQe=r(yMe," \u2014 "),Lx=n(yMe,"A",{href:!0});var z$r=s(Lx);NQe=r(z$r,"FlaubertTokenizer"),z$r.forEach(t),DQe=r(yMe," (FlauBERT model)"),yMe.forEach(t),qQe=i(y),ls=n(y,"LI",{});var g8=s(ls);dJ=n(g8,"STRONG",{});var W$r=s(dJ);OQe=r(W$r,"fnet"),W$r.forEach(t),GQe=r(g8," \u2014 "),Bx=n(g8,"A",{href:!0});var Q$r=s(Bx);XQe=r(Q$r,"FNetTokenizer"),Q$r.forEach(t),VQe=r(g8," or "),xx=n(g8,"A",{href:!0});var H$r=s(xx);zQe=r(H$r,"FNetTokenizerFast"),H$r.forEach(t),WQe=r(g8," (FNet model)"),g8.forEach(t),QQe=i(y),Xg=n(y,"LI",{});var wMe=s(Xg);cJ=n(wMe,"STRONG",{});var U$r=s(cJ);HQe=r(U$r,"fsmt"),U$r.forEach(t),UQe=r(wMe," \u2014 "),kx=n(wMe,"A",{href:!0});var J$r=s(kx);JQe=r(J$r,"FSMTTokenizer"),J$r.forEach(t),YQe=r(wMe," (FairSeq Machine-Translation model)"),wMe.forEach(t),KQe=i(y),is=n(y,"LI",{});var h8=s(is);fJ=n(h8,"STRONG",{});var Y$r=s(fJ);ZQe=r(Y$r,"funnel"),Y$r.forEach(t),eHe=r(h8," \u2014 "),Rx=n(h8,"A",{href:!0});var K$r=s(Rx);oHe=r(K$r,"FunnelTokenizer"),K$r.forEach(t),rHe=r(h8," or "),Sx=n(h8,"A",{href:!0});var Z$r=s(Sx);tHe=r(Z$r,"FunnelTokenizerFast"),Z$r.forEach(t),aHe=r(h8," (Funnel Transformer model)"),h8.forEach(t),nHe=i(y),ds=n(y,"LI",{});var p8=s(ds);mJ=n(p8,"STRONG",{});var eIr=s(mJ);sHe=r(eIr,"gpt2"),eIr.forEach(t),lHe=r(p8," \u2014 "),Px=n(p8,"A",{href:!0});var oIr=s(Px);iHe=r(oIr,"GPT2Tokenizer"),oIr.forEach(t),dHe=r(p8," or "),$x=n(p8,"A",{href:!0});var rIr=s($x);cHe=r(rIr,"GPT2TokenizerFast"),rIr.forEach(t),fHe=r(p8," (OpenAI GPT-2 model)"),p8.forEach(t),mHe=i(y),cs=n(y,"LI",{});var _8=s(cs);gJ=n(_8,"STRONG",{});var tIr=s(gJ);gHe=r(tIr,"gpt_neo"),tIr.forEach(t),hHe=r(_8," \u2014 "),Ix=n(_8,"A",{href:!0});var aIr=s(Ix);pHe=r(aIr,"GPT2Tokenizer"),aIr.forEach(t),_He=r(_8," or "),jx=n(_8,"A",{href:!0});var nIr=s(jx);uHe=r(nIr,"GPT2TokenizerFast"),nIr.forEach(t),bHe=r(_8," (GPT Neo model)"),_8.forEach(t),vHe=i(y),fs=n(y,"LI",{});var u8=s(fs);hJ=n(u8,"STRONG",{});var sIr=s(hJ);THe=r(sIr,"herbert"),sIr.forEach(t),FHe=r(u8," \u2014 "),Nx=n(u8,"A",{href:!0});var lIr=s(Nx);CHe=r(lIr,"HerbertTokenizer"),lIr.forEach(t),MHe=r(u8," or "),Dx=n(u8,"A",{href:!0});var iIr=s(Dx);EHe=r(iIr,"HerbertTokenizerFast"),iIr.forEach(t),yHe=r(u8," (HerBERT model)"),u8.forEach(t),wHe=i(y),Vg=n(y,"LI",{});var AMe=s(Vg);pJ=n(AMe,"STRONG",{});var dIr=s(pJ);AHe=r(dIr,"hubert"),dIr.forEach(t),LHe=r(AMe," \u2014 "),qx=n(AMe,"A",{href:!0});var cIr=s(qx);BHe=r(cIr,"Wav2Vec2CTCTokenizer"),cIr.forEach(t),xHe=r(AMe," (Hubert model)"),AMe.forEach(t),kHe=i(y),ms=n(y,"LI",{});var b8=s(ms);_J=n(b8,"STRONG",{});var fIr=s(_J);RHe=r(fIr,"ibert"),fIr.forEach(t),SHe=r(b8," \u2014 "),Ox=n(b8,"A",{href:!0});var mIr=s(Ox);PHe=r(mIr,"RobertaTokenizer"),mIr.forEach(t),$He=r(b8," or "),Gx=n(b8,"A",{href:!0});var gIr=s(Gx);IHe=r(gIr,"RobertaTokenizerFast"),gIr.forEach(t),jHe=r(b8," (I-BERT model)"),b8.forEach(t),NHe=i(y),gs=n(y,"LI",{});var v8=s(gs);uJ=n(v8,"STRONG",{});var hIr=s(uJ);DHe=r(hIr,"layoutlm"),hIr.forEach(t),qHe=r(v8," \u2014 "),Xx=n(v8,"A",{href:!0});var pIr=s(Xx);OHe=r(pIr,"LayoutLMTokenizer"),pIr.forEach(t),GHe=r(v8," or "),Vx=n(v8,"A",{href:!0});var _Ir=s(Vx);XHe=r(_Ir,"LayoutLMTokenizerFast"),_Ir.forEach(t),VHe=r(v8," (LayoutLM model)"),v8.forEach(t),zHe=i(y),hs=n(y,"LI",{});var T8=s(hs);bJ=n(T8,"STRONG",{});var uIr=s(bJ);WHe=r(uIr,"layoutlmv2"),uIr.forEach(t),QHe=r(T8," \u2014 "),zx=n(T8,"A",{href:!0});var bIr=s(zx);HHe=r(bIr,"LayoutLMv2Tokenizer"),bIr.forEach(t),UHe=r(T8," or "),Wx=n(T8,"A",{href:!0});var vIr=s(Wx);JHe=r(vIr,"LayoutLMv2TokenizerFast"),vIr.forEach(t),YHe=r(T8," (LayoutLMv2 model)"),T8.forEach(t),KHe=i(y),ps=n(y,"LI",{});var F8=s(ps);vJ=n(F8,"STRONG",{});var TIr=s(vJ);ZHe=r(TIr,"layoutxlm"),TIr.forEach(t),eUe=r(F8," \u2014 "),Qx=n(F8,"A",{href:!0});var FIr=s(Qx);oUe=r(FIr,"LayoutXLMTokenizer"),FIr.forEach(t),rUe=r(F8," or "),Hx=n(F8,"A",{href:!0});var CIr=s(Hx);tUe=r(CIr,"LayoutXLMTokenizerFast"),CIr.forEach(t),aUe=r(F8," (LayoutXLM model)"),F8.forEach(t),nUe=i(y),_s=n(y,"LI",{});var C8=s(_s);TJ=n(C8,"STRONG",{});var MIr=s(TJ);sUe=r(MIr,"led"),MIr.forEach(t),lUe=r(C8," \u2014 "),Ux=n(C8,"A",{href:!0});var EIr=s(Ux);iUe=r(EIr,"LEDTokenizer"),EIr.forEach(t),dUe=r(C8," or "),Jx=n(C8,"A",{href:!0});var yIr=s(Jx);cUe=r(yIr,"LEDTokenizerFast"),yIr.forEach(t),fUe=r(C8," (LED model)"),C8.forEach(t),mUe=i(y),us=n(y,"LI",{});var M8=s(us);FJ=n(M8,"STRONG",{});var wIr=s(FJ);gUe=r(wIr,"longformer"),wIr.forEach(t),hUe=r(M8," \u2014 "),Yx=n(M8,"A",{href:!0});var AIr=s(Yx);pUe=r(AIr,"LongformerTokenizer"),AIr.forEach(t),_Ue=r(M8," or "),Kx=n(M8,"A",{href:!0});var LIr=s(Kx);uUe=r(LIr,"LongformerTokenizerFast"),LIr.forEach(t),bUe=r(M8," (Longformer model)"),M8.forEach(t),vUe=i(y),zg=n(y,"LI",{});var LMe=s(zg);CJ=n(LMe,"STRONG",{});var BIr=s(CJ);TUe=r(BIr,"luke"),BIr.forEach(t),FUe=r(LMe," \u2014 "),Zx=n(LMe,"A",{href:!0});var xIr=s(Zx);CUe=r(xIr,"LukeTokenizer"),xIr.forEach(t),MUe=r(LMe," (LUKE model)"),LMe.forEach(t),EUe=i(y),bs=n(y,"LI",{});var E8=s(bs);MJ=n(E8,"STRONG",{});var kIr=s(MJ);yUe=r(kIr,"lxmert"),kIr.forEach(t),wUe=r(E8," \u2014 "),ek=n(E8,"A",{href:!0});var RIr=s(ek);AUe=r(RIr,"LxmertTokenizer"),RIr.forEach(t),LUe=r(E8," or "),ok=n(E8,"A",{href:!0});var SIr=s(ok);BUe=r(SIr,"LxmertTokenizerFast"),SIr.forEach(t),xUe=r(E8," (LXMERT model)"),E8.forEach(t),kUe=i(y),Wg=n(y,"LI",{});var BMe=s(Wg);EJ=n(BMe,"STRONG",{});var PIr=s(EJ);RUe=r(PIr,"m2m_100"),PIr.forEach(t),SUe=r(BMe," \u2014 "),rk=n(BMe,"A",{href:!0});var $Ir=s(rk);PUe=r($Ir,"M2M100Tokenizer"),$Ir.forEach(t),$Ue=r(BMe," (M2M100 model)"),BMe.forEach(t),IUe=i(y),Qg=n(y,"LI",{});var xMe=s(Qg);yJ=n(xMe,"STRONG",{});var IIr=s(yJ);jUe=r(IIr,"marian"),IIr.forEach(t),NUe=r(xMe," \u2014 "),tk=n(xMe,"A",{href:!0});var jIr=s(tk);DUe=r(jIr,"MarianTokenizer"),jIr.forEach(t),qUe=r(xMe," (Marian model)"),xMe.forEach(t),OUe=i(y),vs=n(y,"LI",{});var y8=s(vs);wJ=n(y8,"STRONG",{});var NIr=s(wJ);GUe=r(NIr,"mbart"),NIr.forEach(t),XUe=r(y8," \u2014 "),ak=n(y8,"A",{href:!0});var DIr=s(ak);VUe=r(DIr,"MBartTokenizer"),DIr.forEach(t),zUe=r(y8," or "),nk=n(y8,"A",{href:!0});var qIr=s(nk);WUe=r(qIr,"MBartTokenizerFast"),qIr.forEach(t),QUe=r(y8," (mBART model)"),y8.forEach(t),HUe=i(y),Ts=n(y,"LI",{});var w8=s(Ts);AJ=n(w8,"STRONG",{});var OIr=s(AJ);UUe=r(OIr,"mbart50"),OIr.forEach(t),JUe=r(w8," \u2014 "),sk=n(w8,"A",{href:!0});var GIr=s(sk);YUe=r(GIr,"MBart50Tokenizer"),GIr.forEach(t),KUe=r(w8," or "),lk=n(w8,"A",{href:!0});var XIr=s(lk);ZUe=r(XIr,"MBart50TokenizerFast"),XIr.forEach(t),eJe=r(w8," (mBART-50 model)"),w8.forEach(t),oJe=i(y),Hg=n(y,"LI",{});var kMe=s(Hg);LJ=n(kMe,"STRONG",{});var VIr=s(LJ);rJe=r(VIr,"mluke"),VIr.forEach(t),tJe=r(kMe," \u2014 "),ik=n(kMe,"A",{href:!0});var zIr=s(ik);aJe=r(zIr,"MLukeTokenizer"),zIr.forEach(t),nJe=r(kMe," (mLUKE model)"),kMe.forEach(t),sJe=i(y),Fs=n(y,"LI",{});var A8=s(Fs);BJ=n(A8,"STRONG",{});var WIr=s(BJ);lJe=r(WIr,"mobilebert"),WIr.forEach(t),iJe=r(A8," \u2014 "),dk=n(A8,"A",{href:!0});var QIr=s(dk);dJe=r(QIr,"MobileBertTokenizer"),QIr.forEach(t),cJe=r(A8," or "),ck=n(A8,"A",{href:!0});var HIr=s(ck);fJe=r(HIr,"MobileBertTokenizerFast"),HIr.forEach(t),mJe=r(A8," (MobileBERT model)"),A8.forEach(t),gJe=i(y),Cs=n(y,"LI",{});var L8=s(Cs);xJ=n(L8,"STRONG",{});var UIr=s(xJ);hJe=r(UIr,"mpnet"),UIr.forEach(t),pJe=r(L8," \u2014 "),fk=n(L8,"A",{href:!0});var JIr=s(fk);_Je=r(JIr,"MPNetTokenizer"),JIr.forEach(t),uJe=r(L8," or "),mk=n(L8,"A",{href:!0});var YIr=s(mk);bJe=r(YIr,"MPNetTokenizerFast"),YIr.forEach(t),vJe=r(L8," (MPNet model)"),L8.forEach(t),TJe=i(y),Ms=n(y,"LI",{});var B8=s(Ms);kJ=n(B8,"STRONG",{});var KIr=s(kJ);FJe=r(KIr,"mt5"),KIr.forEach(t),CJe=r(B8," \u2014 "),gk=n(B8,"A",{href:!0});var ZIr=s(gk);MJe=r(ZIr,"MT5Tokenizer"),ZIr.forEach(t),EJe=r(B8," or "),hk=n(B8,"A",{href:!0});var ejr=s(hk);yJe=r(ejr,"MT5TokenizerFast"),ejr.forEach(t),wJe=r(B8," (mT5 model)"),B8.forEach(t),AJe=i(y),Es=n(y,"LI",{});var x8=s(Es);RJ=n(x8,"STRONG",{});var ojr=s(RJ);LJe=r(ojr,"openai-gpt"),ojr.forEach(t),BJe=r(x8," \u2014 "),pk=n(x8,"A",{href:!0});var rjr=s(pk);xJe=r(rjr,"OpenAIGPTTokenizer"),rjr.forEach(t),kJe=r(x8," or "),_k=n(x8,"A",{href:!0});var tjr=s(_k);RJe=r(tjr,"OpenAIGPTTokenizerFast"),tjr.forEach(t),SJe=r(x8," (OpenAI GPT model)"),x8.forEach(t),PJe=i(y),ys=n(y,"LI",{});var k8=s(ys);SJ=n(k8,"STRONG",{});var ajr=s(SJ);$Je=r(ajr,"pegasus"),ajr.forEach(t),IJe=r(k8," \u2014 "),uk=n(k8,"A",{href:!0});var njr=s(uk);jJe=r(njr,"PegasusTokenizer"),njr.forEach(t),NJe=r(k8," or "),bk=n(k8,"A",{href:!0});var sjr=s(bk);DJe=r(sjr,"PegasusTokenizerFast"),sjr.forEach(t),qJe=r(k8," (Pegasus model)"),k8.forEach(t),OJe=i(y),Ug=n(y,"LI",{});var RMe=s(Ug);PJ=n(RMe,"STRONG",{});var ljr=s(PJ);GJe=r(ljr,"perceiver"),ljr.forEach(t),XJe=r(RMe," \u2014 "),vk=n(RMe,"A",{href:!0});var ijr=s(vk);VJe=r(ijr,"PerceiverTokenizer"),ijr.forEach(t),zJe=r(RMe," (Perceiver model)"),RMe.forEach(t),WJe=i(y),Jg=n(y,"LI",{});var SMe=s(Jg);$J=n(SMe,"STRONG",{});var djr=s($J);QJe=r(djr,"phobert"),djr.forEach(t),HJe=r(SMe," \u2014 "),Tk=n(SMe,"A",{href:!0});var cjr=s(Tk);UJe=r(cjr,"PhobertTokenizer"),cjr.forEach(t),JJe=r(SMe," (PhoBERT model)"),SMe.forEach(t),YJe=i(y),Yg=n(y,"LI",{});var PMe=s(Yg);IJ=n(PMe,"STRONG",{});var fjr=s(IJ);KJe=r(fjr,"plbart"),fjr.forEach(t),ZJe=r(PMe," \u2014 "),Fk=n(PMe,"A",{href:!0});var mjr=s(Fk);eYe=r(mjr,"PLBartTokenizer"),mjr.forEach(t),oYe=r(PMe," (PLBart model)"),PMe.forEach(t),rYe=i(y),Kg=n(y,"LI",{});var $Me=s(Kg);jJ=n($Me,"STRONG",{});var gjr=s(jJ);tYe=r(gjr,"prophetnet"),gjr.forEach(t),aYe=r($Me," \u2014 "),Ck=n($Me,"A",{href:!0});var hjr=s(Ck);nYe=r(hjr,"ProphetNetTokenizer"),hjr.forEach(t),sYe=r($Me," (ProphetNet model)"),$Me.forEach(t),lYe=i(y),ws=n(y,"LI",{});var R8=s(ws);NJ=n(R8,"STRONG",{});var pjr=s(NJ);iYe=r(pjr,"qdqbert"),pjr.forEach(t),dYe=r(R8," \u2014 "),Mk=n(R8,"A",{href:!0});var _jr=s(Mk);cYe=r(_jr,"BertTokenizer"),_jr.forEach(t),fYe=r(R8," or "),Ek=n(R8,"A",{href:!0});var ujr=s(Ek);mYe=r(ujr,"BertTokenizerFast"),ujr.forEach(t),gYe=r(R8," (QDQBert model)"),R8.forEach(t),hYe=i(y),Zg=n(y,"LI",{});var IMe=s(Zg);DJ=n(IMe,"STRONG",{});var bjr=s(DJ);pYe=r(bjr,"rag"),bjr.forEach(t),_Ye=r(IMe," \u2014 "),yk=n(IMe,"A",{href:!0});var vjr=s(yk);uYe=r(vjr,"RagTokenizer"),vjr.forEach(t),bYe=r(IMe," (RAG model)"),IMe.forEach(t),vYe=i(y),As=n(y,"LI",{});var S8=s(As);qJ=n(S8,"STRONG",{});var Tjr=s(qJ);TYe=r(Tjr,"realm"),Tjr.forEach(t),FYe=r(S8," \u2014 "),wk=n(S8,"A",{href:!0});var Fjr=s(wk);CYe=r(Fjr,"RealmTokenizer"),Fjr.forEach(t),MYe=r(S8," or "),Ak=n(S8,"A",{href:!0});var Cjr=s(Ak);EYe=r(Cjr,"RealmTokenizerFast"),Cjr.forEach(t),yYe=r(S8," (Realm model)"),S8.forEach(t),wYe=i(y),Ls=n(y,"LI",{});var P8=s(Ls);OJ=n(P8,"STRONG",{});var Mjr=s(OJ);AYe=r(Mjr,"reformer"),Mjr.forEach(t),LYe=r(P8," \u2014 "),Lk=n(P8,"A",{href:!0});var Ejr=s(Lk);BYe=r(Ejr,"ReformerTokenizer"),Ejr.forEach(t),xYe=r(P8," or "),Bk=n(P8,"A",{href:!0});var yjr=s(Bk);kYe=r(yjr,"ReformerTokenizerFast"),yjr.forEach(t),RYe=r(P8," (Reformer model)"),P8.forEach(t),SYe=i(y),Bs=n(y,"LI",{});var $8=s(Bs);GJ=n($8,"STRONG",{});var wjr=s(GJ);PYe=r(wjr,"rembert"),wjr.forEach(t),$Ye=r($8," \u2014 "),xk=n($8,"A",{href:!0});var Ajr=s(xk);IYe=r(Ajr,"RemBertTokenizer"),Ajr.forEach(t),jYe=r($8," or "),kk=n($8,"A",{href:!0});var Ljr=s(kk);NYe=r(Ljr,"RemBertTokenizerFast"),Ljr.forEach(t),DYe=r($8," (RemBERT model)"),$8.forEach(t),qYe=i(y),xs=n(y,"LI",{});var I8=s(xs);XJ=n(I8,"STRONG",{});var Bjr=s(XJ);OYe=r(Bjr,"retribert"),Bjr.forEach(t),GYe=r(I8," \u2014 "),Rk=n(I8,"A",{href:!0});var xjr=s(Rk);XYe=r(xjr,"RetriBertTokenizer"),xjr.forEach(t),VYe=r(I8," or "),Sk=n(I8,"A",{href:!0});var kjr=s(Sk);zYe=r(kjr,"RetriBertTokenizerFast"),kjr.forEach(t),WYe=r(I8," (RetriBERT model)"),I8.forEach(t),QYe=i(y),ks=n(y,"LI",{});var j8=s(ks);VJ=n(j8,"STRONG",{});var Rjr=s(VJ);HYe=r(Rjr,"roberta"),Rjr.forEach(t),UYe=r(j8," \u2014 "),Pk=n(j8,"A",{href:!0});var Sjr=s(Pk);JYe=r(Sjr,"RobertaTokenizer"),Sjr.forEach(t),YYe=r(j8," or "),$k=n(j8,"A",{href:!0});var Pjr=s($k);KYe=r(Pjr,"RobertaTokenizerFast"),Pjr.forEach(t),ZYe=r(j8," (RoBERTa model)"),j8.forEach(t),eKe=i(y),Rs=n(y,"LI",{});var N8=s(Rs);zJ=n(N8,"STRONG",{});var $jr=s(zJ);oKe=r($jr,"roformer"),$jr.forEach(t),rKe=r(N8," \u2014 "),Ik=n(N8,"A",{href:!0});var Ijr=s(Ik);tKe=r(Ijr,"RoFormerTokenizer"),Ijr.forEach(t),aKe=r(N8," or "),jk=n(N8,"A",{href:!0});var jjr=s(jk);nKe=r(jjr,"RoFormerTokenizerFast"),jjr.forEach(t),sKe=r(N8," (RoFormer model)"),N8.forEach(t),lKe=i(y),eh=n(y,"LI",{});var jMe=s(eh);WJ=n(jMe,"STRONG",{});var Njr=s(WJ);iKe=r(Njr,"speech_to_text"),Njr.forEach(t),dKe=r(jMe," \u2014 "),Nk=n(jMe,"A",{href:!0});var Djr=s(Nk);cKe=r(Djr,"Speech2TextTokenizer"),Djr.forEach(t),fKe=r(jMe," (Speech2Text model)"),jMe.forEach(t),mKe=i(y),oh=n(y,"LI",{});var NMe=s(oh);QJ=n(NMe,"STRONG",{});var qjr=s(QJ);gKe=r(qjr,"speech_to_text_2"),qjr.forEach(t),hKe=r(NMe," \u2014 "),Dk=n(NMe,"A",{href:!0});var Ojr=s(Dk);pKe=r(Ojr,"Speech2Text2Tokenizer"),Ojr.forEach(t),_Ke=r(NMe," (Speech2Text2 model)"),NMe.forEach(t),uKe=i(y),Ss=n(y,"LI",{});var D8=s(Ss);HJ=n(D8,"STRONG",{});var Gjr=s(HJ);bKe=r(Gjr,"splinter"),Gjr.forEach(t),vKe=r(D8," \u2014 "),qk=n(D8,"A",{href:!0});var Xjr=s(qk);TKe=r(Xjr,"SplinterTokenizer"),Xjr.forEach(t),FKe=r(D8," or "),Ok=n(D8,"A",{href:!0});var Vjr=s(Ok);CKe=r(Vjr,"SplinterTokenizerFast"),Vjr.forEach(t),MKe=r(D8," (Splinter model)"),D8.forEach(t),EKe=i(y),Ps=n(y,"LI",{});var q8=s(Ps);UJ=n(q8,"STRONG",{});var zjr=s(UJ);yKe=r(zjr,"squeezebert"),zjr.forEach(t),wKe=r(q8," \u2014 "),Gk=n(q8,"A",{href:!0});var Wjr=s(Gk);AKe=r(Wjr,"SqueezeBertTokenizer"),Wjr.forEach(t),LKe=r(q8," or "),Xk=n(q8,"A",{href:!0});var Qjr=s(Xk);BKe=r(Qjr,"SqueezeBertTokenizerFast"),Qjr.forEach(t),xKe=r(q8," (SqueezeBERT model)"),q8.forEach(t),kKe=i(y),$s=n(y,"LI",{});var O8=s($s);JJ=n(O8,"STRONG",{});var Hjr=s(JJ);RKe=r(Hjr,"t5"),Hjr.forEach(t),SKe=r(O8," \u2014 "),Vk=n(O8,"A",{href:!0});var Ujr=s(Vk);PKe=r(Ujr,"T5Tokenizer"),Ujr.forEach(t),$Ke=r(O8," or "),zk=n(O8,"A",{href:!0});var Jjr=s(zk);IKe=r(Jjr,"T5TokenizerFast"),Jjr.forEach(t),jKe=r(O8," (T5 model)"),O8.forEach(t),NKe=i(y),rh=n(y,"LI",{});var DMe=s(rh);YJ=n(DMe,"STRONG",{});var Yjr=s(YJ);DKe=r(Yjr,"tapas"),Yjr.forEach(t),qKe=r(DMe," \u2014 "),Wk=n(DMe,"A",{href:!0});var Kjr=s(Wk);OKe=r(Kjr,"TapasTokenizer"),Kjr.forEach(t),GKe=r(DMe," (TAPAS model)"),DMe.forEach(t),XKe=i(y),th=n(y,"LI",{});var qMe=s(th);KJ=n(qMe,"STRONG",{});var Zjr=s(KJ);VKe=r(Zjr,"transfo-xl"),Zjr.forEach(t),zKe=r(qMe," \u2014 "),Qk=n(qMe,"A",{href:!0});var eNr=s(Qk);WKe=r(eNr,"TransfoXLTokenizer"),eNr.forEach(t),QKe=r(qMe," (Transformer-XL model)"),qMe.forEach(t),HKe=i(y),ah=n(y,"LI",{});var OMe=s(ah);ZJ=n(OMe,"STRONG",{});var oNr=s(ZJ);UKe=r(oNr,"wav2vec2"),oNr.forEach(t),JKe=r(OMe," \u2014 "),Hk=n(OMe,"A",{href:!0});var rNr=s(Hk);YKe=r(rNr,"Wav2Vec2CTCTokenizer"),rNr.forEach(t),KKe=r(OMe," (Wav2Vec2 model)"),OMe.forEach(t),ZKe=i(y),nh=n(y,"LI",{});var GMe=s(nh);eY=n(GMe,"STRONG",{});var tNr=s(eY);eZe=r(tNr,"wav2vec2_phoneme"),tNr.forEach(t),oZe=r(GMe," \u2014 "),Uk=n(GMe,"A",{href:!0});var aNr=s(Uk);rZe=r(aNr,"Wav2Vec2PhonemeCTCTokenizer"),aNr.forEach(t),tZe=r(GMe," (Wav2Vec2Phoneme model)"),GMe.forEach(t),aZe=i(y),Is=n(y,"LI",{});var G8=s(Is);oY=n(G8,"STRONG",{});var nNr=s(oY);nZe=r(nNr,"xglm"),nNr.forEach(t),sZe=r(G8," \u2014 "),Jk=n(G8,"A",{href:!0});var sNr=s(Jk);lZe=r(sNr,"XGLMTokenizer"),sNr.forEach(t),iZe=r(G8," or "),Yk=n(G8,"A",{href:!0});var lNr=s(Yk);dZe=r(lNr,"XGLMTokenizerFast"),lNr.forEach(t),cZe=r(G8," (XGLM model)"),G8.forEach(t),fZe=i(y),sh=n(y,"LI",{});var XMe=s(sh);rY=n(XMe,"STRONG",{});var iNr=s(rY);mZe=r(iNr,"xlm"),iNr.forEach(t),gZe=r(XMe," \u2014 "),Kk=n(XMe,"A",{href:!0});var dNr=s(Kk);hZe=r(dNr,"XLMTokenizer"),dNr.forEach(t),pZe=r(XMe," (XLM model)"),XMe.forEach(t),_Ze=i(y),lh=n(y,"LI",{});var VMe=s(lh);tY=n(VMe,"STRONG",{});var cNr=s(tY);uZe=r(cNr,"xlm-prophetnet"),cNr.forEach(t),bZe=r(VMe," \u2014 "),Zk=n(VMe,"A",{href:!0});var fNr=s(Zk);vZe=r(fNr,"XLMProphetNetTokenizer"),fNr.forEach(t),TZe=r(VMe," (XLMProphetNet model)"),VMe.forEach(t),FZe=i(y),js=n(y,"LI",{});var X8=s(js);aY=n(X8,"STRONG",{});var mNr=s(aY);CZe=r(mNr,"xlm-roberta"),mNr.forEach(t),MZe=r(X8," \u2014 "),eR=n(X8,"A",{href:!0});var gNr=s(eR);EZe=r(gNr,"XLMRobertaTokenizer"),gNr.forEach(t),yZe=r(X8," or "),oR=n(X8,"A",{href:!0});var hNr=s(oR);wZe=r(hNr,"XLMRobertaTokenizerFast"),hNr.forEach(t),AZe=r(X8," (XLM-RoBERTa model)"),X8.forEach(t),LZe=i(y),Ns=n(y,"LI",{});var V8=s(Ns);nY=n(V8,"STRONG",{});var pNr=s(nY);BZe=r(pNr,"xlnet"),pNr.forEach(t),xZe=r(V8," \u2014 "),rR=n(V8,"A",{href:!0});var _Nr=s(rR);kZe=r(_Nr,"XLNetTokenizer"),_Nr.forEach(t),RZe=r(V8," or "),tR=n(V8,"A",{href:!0});var uNr=s(tR);SZe=r(uNr,"XLNetTokenizerFast"),uNr.forEach(t),PZe=r(V8," (XLNet model)"),V8.forEach(t),y.forEach(t),$Ze=i(ha),sY=n(ha,"P",{});var bNr=s(sY);IZe=r(bNr,"Examples:"),bNr.forEach(t),jZe=i(ha),m(vy.$$.fragment,ha),ha.forEach(t),NZe=i(Xs),ih=n(Xs,"DIV",{class:!0});var YRe=s(ih);m(Ty.$$.fragment,YRe),DZe=i(YRe),lY=n(YRe,"P",{});var vNr=s(lY);qZe=r(vNr,"Register a new tokenizer in this mapping."),vNr.forEach(t),YRe.forEach(t),Xs.forEach(t),Qxe=i(c),Hi=n(c,"H2",{class:!0});var KRe=s(Hi);dh=n(KRe,"A",{id:!0,class:!0,href:!0});var TNr=s(dh);iY=n(TNr,"SPAN",{});var FNr=s(iY);m(Fy.$$.fragment,FNr),FNr.forEach(t),TNr.forEach(t),OZe=i(KRe),dY=n(KRe,"SPAN",{});var CNr=s(dY);GZe=r(CNr,"AutoFeatureExtractor"),CNr.forEach(t),KRe.forEach(t),Hxe=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(Cy.$$.fragment,Vs),XZe=i(Vs),My=n(Vs,"P",{});var ZRe=s(My);VZe=r(ZRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aR=n(ZRe,"A",{href:!0});var MNr=s(aR);zZe=r(MNr,"AutoFeatureExtractor.from_pretrained()"),MNr.forEach(t),WZe=r(ZRe," class method."),ZRe.forEach(t),QZe=i(Vs),Ey=n(Vs,"P",{});var eSe=s(Ey);HZe=r(eSe,"This class cannot be instantiated directly using "),cY=n(eSe,"CODE",{});var ENr=s(cY);UZe=r(ENr,"__init__()"),ENr.forEach(t),JZe=r(eSe," (throws an error)."),eSe.forEach(t),YZe=i(Vs),Ie=n(Vs,"DIV",{class:!0});var Nt=s(Ie);m(yy.$$.fragment,Nt),KZe=i(Nt),fY=n(Nt,"P",{});var yNr=s(fY);ZZe=r(yNr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),yNr.forEach(t),eeo=i(Nt),Xa=n(Nt,"P",{});var a5=s(Xa);oeo=r(a5,"The feature extractor class to instantiate is selected based on the "),mY=n(a5,"CODE",{});var wNr=s(mY);reo=r(wNr,"model_type"),wNr.forEach(t),teo=r(a5,` property of the config object
(either passed as an argument or loaded from `),gY=n(a5,"CODE",{});var ANr=s(gY);aeo=r(ANr,"pretrained_model_name_or_path"),ANr.forEach(t),neo=r(a5,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hY=n(a5,"CODE",{});var LNr=s(hY);seo=r(LNr,"pretrained_model_name_or_path"),LNr.forEach(t),leo=r(a5,":"),a5.forEach(t),ieo=i(Nt),re=n(Nt,"UL",{});var ne=s(re);ch=n(ne,"LI",{});var zMe=s(ch);pY=n(zMe,"STRONG",{});var BNr=s(pY);deo=r(BNr,"beit"),BNr.forEach(t),ceo=r(zMe," \u2014 "),nR=n(zMe,"A",{href:!0});var xNr=s(nR);feo=r(xNr,"BeitFeatureExtractor"),xNr.forEach(t),meo=r(zMe," (BEiT model)"),zMe.forEach(t),geo=i(ne),fh=n(ne,"LI",{});var WMe=s(fh);_Y=n(WMe,"STRONG",{});var kNr=s(_Y);heo=r(kNr,"clip"),kNr.forEach(t),peo=r(WMe," \u2014 "),sR=n(WMe,"A",{href:!0});var RNr=s(sR);_eo=r(RNr,"CLIPFeatureExtractor"),RNr.forEach(t),ueo=r(WMe," (CLIP model)"),WMe.forEach(t),beo=i(ne),mh=n(ne,"LI",{});var QMe=s(mh);uY=n(QMe,"STRONG",{});var SNr=s(uY);veo=r(SNr,"convnext"),SNr.forEach(t),Teo=r(QMe," \u2014 "),lR=n(QMe,"A",{href:!0});var PNr=s(lR);Feo=r(PNr,"ConvNextFeatureExtractor"),PNr.forEach(t),Ceo=r(QMe," (ConvNext model)"),QMe.forEach(t),Meo=i(ne),gh=n(ne,"LI",{});var HMe=s(gh);bY=n(HMe,"STRONG",{});var $Nr=s(bY);Eeo=r($Nr,"deit"),$Nr.forEach(t),yeo=r(HMe," \u2014 "),iR=n(HMe,"A",{href:!0});var INr=s(iR);weo=r(INr,"DeiTFeatureExtractor"),INr.forEach(t),Aeo=r(HMe," (DeiT model)"),HMe.forEach(t),Leo=i(ne),hh=n(ne,"LI",{});var UMe=s(hh);vY=n(UMe,"STRONG",{});var jNr=s(vY);Beo=r(jNr,"detr"),jNr.forEach(t),xeo=r(UMe," \u2014 "),dR=n(UMe,"A",{href:!0});var NNr=s(dR);keo=r(NNr,"DetrFeatureExtractor"),NNr.forEach(t),Reo=r(UMe," (DETR model)"),UMe.forEach(t),Seo=i(ne),ph=n(ne,"LI",{});var JMe=s(ph);TY=n(JMe,"STRONG",{});var DNr=s(TY);Peo=r(DNr,"hubert"),DNr.forEach(t),$eo=r(JMe," \u2014 "),cR=n(JMe,"A",{href:!0});var qNr=s(cR);Ieo=r(qNr,"Wav2Vec2FeatureExtractor"),qNr.forEach(t),jeo=r(JMe," (Hubert model)"),JMe.forEach(t),Neo=i(ne),_h=n(ne,"LI",{});var YMe=s(_h);FY=n(YMe,"STRONG",{});var ONr=s(FY);Deo=r(ONr,"layoutlmv2"),ONr.forEach(t),qeo=r(YMe," \u2014 "),fR=n(YMe,"A",{href:!0});var GNr=s(fR);Oeo=r(GNr,"LayoutLMv2FeatureExtractor"),GNr.forEach(t),Geo=r(YMe," (LayoutLMv2 model)"),YMe.forEach(t),Xeo=i(ne),uh=n(ne,"LI",{});var KMe=s(uh);CY=n(KMe,"STRONG",{});var XNr=s(CY);Veo=r(XNr,"maskformer"),XNr.forEach(t),zeo=r(KMe," \u2014 "),mR=n(KMe,"A",{href:!0});var VNr=s(mR);Weo=r(VNr,"MaskFormerFeatureExtractor"),VNr.forEach(t),Qeo=r(KMe," (MaskFormer model)"),KMe.forEach(t),Heo=i(ne),bh=n(ne,"LI",{});var ZMe=s(bh);MY=n(ZMe,"STRONG",{});var zNr=s(MY);Ueo=r(zNr,"perceiver"),zNr.forEach(t),Jeo=r(ZMe," \u2014 "),gR=n(ZMe,"A",{href:!0});var WNr=s(gR);Yeo=r(WNr,"PerceiverFeatureExtractor"),WNr.forEach(t),Keo=r(ZMe," (Perceiver model)"),ZMe.forEach(t),Zeo=i(ne),vh=n(ne,"LI",{});var e4e=s(vh);EY=n(e4e,"STRONG",{});var QNr=s(EY);eoo=r(QNr,"poolformer"),QNr.forEach(t),ooo=r(e4e," \u2014 "),hR=n(e4e,"A",{href:!0});var HNr=s(hR);roo=r(HNr,"PoolFormerFeatureExtractor"),HNr.forEach(t),too=r(e4e," (PoolFormer model)"),e4e.forEach(t),aoo=i(ne),Th=n(ne,"LI",{});var o4e=s(Th);yY=n(o4e,"STRONG",{});var UNr=s(yY);noo=r(UNr,"resnet"),UNr.forEach(t),soo=r(o4e," \u2014 "),pR=n(o4e,"A",{href:!0});var JNr=s(pR);loo=r(JNr,"ConvNextFeatureExtractor"),JNr.forEach(t),ioo=r(o4e," (ResNet model)"),o4e.forEach(t),doo=i(ne),Fh=n(ne,"LI",{});var r4e=s(Fh);wY=n(r4e,"STRONG",{});var YNr=s(wY);coo=r(YNr,"segformer"),YNr.forEach(t),foo=r(r4e," \u2014 "),_R=n(r4e,"A",{href:!0});var KNr=s(_R);moo=r(KNr,"SegformerFeatureExtractor"),KNr.forEach(t),goo=r(r4e," (SegFormer model)"),r4e.forEach(t),hoo=i(ne),Ch=n(ne,"LI",{});var t4e=s(Ch);AY=n(t4e,"STRONG",{});var ZNr=s(AY);poo=r(ZNr,"speech_to_text"),ZNr.forEach(t),_oo=r(t4e," \u2014 "),uR=n(t4e,"A",{href:!0});var eDr=s(uR);uoo=r(eDr,"Speech2TextFeatureExtractor"),eDr.forEach(t),boo=r(t4e," (Speech2Text model)"),t4e.forEach(t),voo=i(ne),Mh=n(ne,"LI",{});var a4e=s(Mh);LY=n(a4e,"STRONG",{});var oDr=s(LY);Too=r(oDr,"swin"),oDr.forEach(t),Foo=r(a4e," \u2014 "),bR=n(a4e,"A",{href:!0});var rDr=s(bR);Coo=r(rDr,"ViTFeatureExtractor"),rDr.forEach(t),Moo=r(a4e," (Swin model)"),a4e.forEach(t),Eoo=i(ne),Eh=n(ne,"LI",{});var n4e=s(Eh);BY=n(n4e,"STRONG",{});var tDr=s(BY);yoo=r(tDr,"van"),tDr.forEach(t),woo=r(n4e," \u2014 "),vR=n(n4e,"A",{href:!0});var aDr=s(vR);Aoo=r(aDr,"ConvNextFeatureExtractor"),aDr.forEach(t),Loo=r(n4e," (VAN model)"),n4e.forEach(t),Boo=i(ne),yh=n(ne,"LI",{});var s4e=s(yh);xY=n(s4e,"STRONG",{});var nDr=s(xY);xoo=r(nDr,"vit"),nDr.forEach(t),koo=r(s4e," \u2014 "),TR=n(s4e,"A",{href:!0});var sDr=s(TR);Roo=r(sDr,"ViTFeatureExtractor"),sDr.forEach(t),Soo=r(s4e," (ViT model)"),s4e.forEach(t),Poo=i(ne),wh=n(ne,"LI",{});var l4e=s(wh);kY=n(l4e,"STRONG",{});var lDr=s(kY);$oo=r(lDr,"vit_mae"),lDr.forEach(t),Ioo=r(l4e," \u2014 "),FR=n(l4e,"A",{href:!0});var iDr=s(FR);joo=r(iDr,"ViTFeatureExtractor"),iDr.forEach(t),Noo=r(l4e," (ViTMAE model)"),l4e.forEach(t),Doo=i(ne),Ah=n(ne,"LI",{});var i4e=s(Ah);RY=n(i4e,"STRONG",{});var dDr=s(RY);qoo=r(dDr,"wav2vec2"),dDr.forEach(t),Ooo=r(i4e," \u2014 "),CR=n(i4e,"A",{href:!0});var cDr=s(CR);Goo=r(cDr,"Wav2Vec2FeatureExtractor"),cDr.forEach(t),Xoo=r(i4e," (Wav2Vec2 model)"),i4e.forEach(t),ne.forEach(t),Voo=i(Nt),m(Lh.$$.fragment,Nt),zoo=i(Nt),SY=n(Nt,"P",{});var fDr=s(SY);Woo=r(fDr,"Examples:"),fDr.forEach(t),Qoo=i(Nt),m(wy.$$.fragment,Nt),Nt.forEach(t),Hoo=i(Vs),Bh=n(Vs,"DIV",{class:!0});var oSe=s(Bh);m(Ay.$$.fragment,oSe),Uoo=i(oSe),PY=n(oSe,"P",{});var mDr=s(PY);Joo=r(mDr,"Register a new feature extractor for this class."),mDr.forEach(t),oSe.forEach(t),Vs.forEach(t),Uxe=i(c),Ui=n(c,"H2",{class:!0});var rSe=s(Ui);xh=n(rSe,"A",{id:!0,class:!0,href:!0});var gDr=s(xh);$Y=n(gDr,"SPAN",{});var hDr=s($Y);m(Ly.$$.fragment,hDr),hDr.forEach(t),gDr.forEach(t),Yoo=i(rSe),IY=n(rSe,"SPAN",{});var pDr=s(IY);Koo=r(pDr,"AutoProcessor"),pDr.forEach(t),rSe.forEach(t),Jxe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(By.$$.fragment,zs),Zoo=i(zs),xy=n(zs,"P",{});var tSe=s(xy);ero=r(tSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MR=n(tSe,"A",{href:!0});var _Dr=s(MR);oro=r(_Dr,"AutoProcessor.from_pretrained()"),_Dr.forEach(t),rro=r(tSe," class method."),tSe.forEach(t),tro=i(zs),ky=n(zs,"P",{});var aSe=s(ky);aro=r(aSe,"This class cannot be instantiated directly using "),jY=n(aSe,"CODE",{});var uDr=s(jY);nro=r(uDr,"__init__()"),uDr.forEach(t),sro=r(aSe," (throws an error)."),aSe.forEach(t),lro=i(zs),je=n(zs,"DIV",{class:!0});var Dt=s(je);m(Ry.$$.fragment,Dt),iro=i(Dt),NY=n(Dt,"P",{});var bDr=s(NY);dro=r(bDr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bDr.forEach(t),cro=i(Dt),Ji=n(Dt,"P",{});var qz=s(Ji);fro=r(qz,"The processor class to instantiate is selected based on the "),DY=n(qz,"CODE",{});var vDr=s(DY);mro=r(vDr,"model_type"),vDr.forEach(t),gro=r(qz,` property of the config object (either
passed as an argument or loaded from `),qY=n(qz,"CODE",{});var TDr=s(qY);hro=r(TDr,"pretrained_model_name_or_path"),TDr.forEach(t),pro=r(qz," if possible):"),qz.forEach(t),_ro=i(Dt),xe=n(Dt,"UL",{});var Do=s(xe);kh=n(Do,"LI",{});var d4e=s(kh);OY=n(d4e,"STRONG",{});var FDr=s(OY);uro=r(FDr,"clip"),FDr.forEach(t),bro=r(d4e," \u2014 "),ER=n(d4e,"A",{href:!0});var CDr=s(ER);vro=r(CDr,"CLIPProcessor"),CDr.forEach(t),Tro=r(d4e," (CLIP model)"),d4e.forEach(t),Fro=i(Do),Rh=n(Do,"LI",{});var c4e=s(Rh);GY=n(c4e,"STRONG",{});var MDr=s(GY);Cro=r(MDr,"layoutlmv2"),MDr.forEach(t),Mro=r(c4e," \u2014 "),yR=n(c4e,"A",{href:!0});var EDr=s(yR);Ero=r(EDr,"LayoutLMv2Processor"),EDr.forEach(t),yro=r(c4e," (LayoutLMv2 model)"),c4e.forEach(t),wro=i(Do),Sh=n(Do,"LI",{});var f4e=s(Sh);XY=n(f4e,"STRONG",{});var yDr=s(XY);Aro=r(yDr,"layoutxlm"),yDr.forEach(t),Lro=r(f4e," \u2014 "),wR=n(f4e,"A",{href:!0});var wDr=s(wR);Bro=r(wDr,"LayoutXLMProcessor"),wDr.forEach(t),xro=r(f4e," (LayoutXLM model)"),f4e.forEach(t),kro=i(Do),Ph=n(Do,"LI",{});var m4e=s(Ph);VY=n(m4e,"STRONG",{});var ADr=s(VY);Rro=r(ADr,"speech_to_text"),ADr.forEach(t),Sro=r(m4e," \u2014 "),AR=n(m4e,"A",{href:!0});var LDr=s(AR);Pro=r(LDr,"Speech2TextProcessor"),LDr.forEach(t),$ro=r(m4e," (Speech2Text model)"),m4e.forEach(t),Iro=i(Do),$h=n(Do,"LI",{});var g4e=s($h);zY=n(g4e,"STRONG",{});var BDr=s(zY);jro=r(BDr,"speech_to_text_2"),BDr.forEach(t),Nro=r(g4e," \u2014 "),LR=n(g4e,"A",{href:!0});var xDr=s(LR);Dro=r(xDr,"Speech2Text2Processor"),xDr.forEach(t),qro=r(g4e," (Speech2Text2 model)"),g4e.forEach(t),Oro=i(Do),Ih=n(Do,"LI",{});var h4e=s(Ih);WY=n(h4e,"STRONG",{});var kDr=s(WY);Gro=r(kDr,"trocr"),kDr.forEach(t),Xro=r(h4e," \u2014 "),BR=n(h4e,"A",{href:!0});var RDr=s(BR);Vro=r(RDr,"TrOCRProcessor"),RDr.forEach(t),zro=r(h4e," (TrOCR model)"),h4e.forEach(t),Wro=i(Do),jh=n(Do,"LI",{});var p4e=s(jh);QY=n(p4e,"STRONG",{});var SDr=s(QY);Qro=r(SDr,"vision-text-dual-encoder"),SDr.forEach(t),Hro=r(p4e," \u2014 "),xR=n(p4e,"A",{href:!0});var PDr=s(xR);Uro=r(PDr,"VisionTextDualEncoderProcessor"),PDr.forEach(t),Jro=r(p4e," (VisionTextDualEncoder model)"),p4e.forEach(t),Yro=i(Do),Nh=n(Do,"LI",{});var _4e=s(Nh);HY=n(_4e,"STRONG",{});var $Dr=s(HY);Kro=r($Dr,"wav2vec2"),$Dr.forEach(t),Zro=r(_4e," \u2014 "),kR=n(_4e,"A",{href:!0});var IDr=s(kR);eto=r(IDr,"Wav2Vec2Processor"),IDr.forEach(t),oto=r(_4e," (Wav2Vec2 model)"),_4e.forEach(t),Do.forEach(t),rto=i(Dt),m(Dh.$$.fragment,Dt),tto=i(Dt),UY=n(Dt,"P",{});var jDr=s(UY);ato=r(jDr,"Examples:"),jDr.forEach(t),nto=i(Dt),m(Sy.$$.fragment,Dt),Dt.forEach(t),sto=i(zs),qh=n(zs,"DIV",{class:!0});var nSe=s(qh);m(Py.$$.fragment,nSe),lto=i(nSe),JY=n(nSe,"P",{});var NDr=s(JY);ito=r(NDr,"Register a new processor for this class."),NDr.forEach(t),nSe.forEach(t),zs.forEach(t),Yxe=i(c),Yi=n(c,"H2",{class:!0});var sSe=s(Yi);Oh=n(sSe,"A",{id:!0,class:!0,href:!0});var DDr=s(Oh);YY=n(DDr,"SPAN",{});var qDr=s(YY);m($y.$$.fragment,qDr),qDr.forEach(t),DDr.forEach(t),dto=i(sSe),KY=n(sSe,"SPAN",{});var ODr=s(KY);cto=r(ODr,"AutoModel"),ODr.forEach(t),sSe.forEach(t),Kxe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(Iy.$$.fragment,Ws),fto=i(Ws),Ki=n(Ws,"P",{});var Oz=s(Ki);mto=r(Oz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZY=n(Oz,"CODE",{});var GDr=s(ZY);gto=r(GDr,"from_pretrained()"),GDr.forEach(t),hto=r(Oz,"class method or the "),eK=n(Oz,"CODE",{});var XDr=s(eK);pto=r(XDr,"from_config()"),XDr.forEach(t),_to=r(Oz,`class
method.`),Oz.forEach(t),uto=i(Ws),jy=n(Ws,"P",{});var lSe=s(jy);bto=r(lSe,"This class cannot be instantiated directly using "),oK=n(lSe,"CODE",{});var VDr=s(oK);vto=r(VDr,"__init__()"),VDr.forEach(t),Tto=r(lSe," (throws an error)."),lSe.forEach(t),Fto=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(Ny.$$.fragment,Qs),Cto=i(Qs),rK=n(Qs,"P",{});var zDr=s(rK);Mto=r(zDr,"Instantiates one of the base model classes of the library from a configuration."),zDr.forEach(t),Eto=i(Qs),Zi=n(Qs,"P",{});var Gz=s(Zi);yto=r(Gz,`Note:
Loading a model from its configuration file does `),tK=n(Gz,"STRONG",{});var WDr=s(tK);wto=r(WDr,"not"),WDr.forEach(t),Ato=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(Gz,"CODE",{});var QDr=s(aK);Lto=r(QDr,"from_pretrained()"),QDr.forEach(t),Bto=r(Gz,"to load the model weights."),Gz.forEach(t),xto=i(Qs),nK=n(Qs,"P",{});var HDr=s(nK);kto=r(HDr,"Examples:"),HDr.forEach(t),Rto=i(Qs),m(Dy.$$.fragment,Qs),Qs.forEach(t),Sto=i(Ws),Ne=n(Ws,"DIV",{class:!0});var qt=s(Ne);m(qy.$$.fragment,qt),Pto=i(qt),sK=n(qt,"P",{});var UDr=s(sK);$to=r(UDr,"Instantiate one of the base model classes of the library from a pretrained model."),UDr.forEach(t),Ito=i(qt),Va=n(qt,"P",{});var n5=s(Va);jto=r(n5,"The model class to instantiate is selected based on the "),lK=n(n5,"CODE",{});var JDr=s(lK);Nto=r(JDr,"model_type"),JDr.forEach(t),Dto=r(n5,` property of the config object (either
passed as an argument or loaded from `),iK=n(n5,"CODE",{});var YDr=s(iK);qto=r(YDr,"pretrained_model_name_or_path"),YDr.forEach(t),Oto=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dK=n(n5,"CODE",{});var KDr=s(dK);Gto=r(KDr,"pretrained_model_name_or_path"),KDr.forEach(t),Xto=r(n5,":"),n5.forEach(t),Vto=i(qt),F=n(qt,"UL",{});var C=s(F);Gh=n(C,"LI",{});var u4e=s(Gh);cK=n(u4e,"STRONG",{});var ZDr=s(cK);zto=r(ZDr,"albert"),ZDr.forEach(t),Wto=r(u4e," \u2014 "),RR=n(u4e,"A",{href:!0});var eqr=s(RR);Qto=r(eqr,"AlbertModel"),eqr.forEach(t),Hto=r(u4e," (ALBERT model)"),u4e.forEach(t),Uto=i(C),Xh=n(C,"LI",{});var b4e=s(Xh);fK=n(b4e,"STRONG",{});var oqr=s(fK);Jto=r(oqr,"bart"),oqr.forEach(t),Yto=r(b4e," \u2014 "),SR=n(b4e,"A",{href:!0});var rqr=s(SR);Kto=r(rqr,"BartModel"),rqr.forEach(t),Zto=r(b4e," (BART model)"),b4e.forEach(t),eao=i(C),Vh=n(C,"LI",{});var v4e=s(Vh);mK=n(v4e,"STRONG",{});var tqr=s(mK);oao=r(tqr,"beit"),tqr.forEach(t),rao=r(v4e," \u2014 "),PR=n(v4e,"A",{href:!0});var aqr=s(PR);tao=r(aqr,"BeitModel"),aqr.forEach(t),aao=r(v4e," (BEiT model)"),v4e.forEach(t),nao=i(C),zh=n(C,"LI",{});var T4e=s(zh);gK=n(T4e,"STRONG",{});var nqr=s(gK);sao=r(nqr,"bert"),nqr.forEach(t),lao=r(T4e," \u2014 "),$R=n(T4e,"A",{href:!0});var sqr=s($R);iao=r(sqr,"BertModel"),sqr.forEach(t),dao=r(T4e," (BERT model)"),T4e.forEach(t),cao=i(C),Wh=n(C,"LI",{});var F4e=s(Wh);hK=n(F4e,"STRONG",{});var lqr=s(hK);fao=r(lqr,"bert-generation"),lqr.forEach(t),mao=r(F4e," \u2014 "),IR=n(F4e,"A",{href:!0});var iqr=s(IR);gao=r(iqr,"BertGenerationEncoder"),iqr.forEach(t),hao=r(F4e," (Bert Generation model)"),F4e.forEach(t),pao=i(C),Qh=n(C,"LI",{});var C4e=s(Qh);pK=n(C4e,"STRONG",{});var dqr=s(pK);_ao=r(dqr,"big_bird"),dqr.forEach(t),uao=r(C4e," \u2014 "),jR=n(C4e,"A",{href:!0});var cqr=s(jR);bao=r(cqr,"BigBirdModel"),cqr.forEach(t),vao=r(C4e," (BigBird model)"),C4e.forEach(t),Tao=i(C),Hh=n(C,"LI",{});var M4e=s(Hh);_K=n(M4e,"STRONG",{});var fqr=s(_K);Fao=r(fqr,"bigbird_pegasus"),fqr.forEach(t),Cao=r(M4e," \u2014 "),NR=n(M4e,"A",{href:!0});var mqr=s(NR);Mao=r(mqr,"BigBirdPegasusModel"),mqr.forEach(t),Eao=r(M4e," (BigBirdPegasus model)"),M4e.forEach(t),yao=i(C),Uh=n(C,"LI",{});var E4e=s(Uh);uK=n(E4e,"STRONG",{});var gqr=s(uK);wao=r(gqr,"blenderbot"),gqr.forEach(t),Aao=r(E4e," \u2014 "),DR=n(E4e,"A",{href:!0});var hqr=s(DR);Lao=r(hqr,"BlenderbotModel"),hqr.forEach(t),Bao=r(E4e," (Blenderbot model)"),E4e.forEach(t),xao=i(C),Jh=n(C,"LI",{});var y4e=s(Jh);bK=n(y4e,"STRONG",{});var pqr=s(bK);kao=r(pqr,"blenderbot-small"),pqr.forEach(t),Rao=r(y4e," \u2014 "),qR=n(y4e,"A",{href:!0});var _qr=s(qR);Sao=r(_qr,"BlenderbotSmallModel"),_qr.forEach(t),Pao=r(y4e," (BlenderbotSmall model)"),y4e.forEach(t),$ao=i(C),Yh=n(C,"LI",{});var w4e=s(Yh);vK=n(w4e,"STRONG",{});var uqr=s(vK);Iao=r(uqr,"camembert"),uqr.forEach(t),jao=r(w4e," \u2014 "),OR=n(w4e,"A",{href:!0});var bqr=s(OR);Nao=r(bqr,"CamembertModel"),bqr.forEach(t),Dao=r(w4e," (CamemBERT model)"),w4e.forEach(t),qao=i(C),Kh=n(C,"LI",{});var A4e=s(Kh);TK=n(A4e,"STRONG",{});var vqr=s(TK);Oao=r(vqr,"canine"),vqr.forEach(t),Gao=r(A4e," \u2014 "),GR=n(A4e,"A",{href:!0});var Tqr=s(GR);Xao=r(Tqr,"CanineModel"),Tqr.forEach(t),Vao=r(A4e," (Canine model)"),A4e.forEach(t),zao=i(C),Zh=n(C,"LI",{});var L4e=s(Zh);FK=n(L4e,"STRONG",{});var Fqr=s(FK);Wao=r(Fqr,"clip"),Fqr.forEach(t),Qao=r(L4e," \u2014 "),XR=n(L4e,"A",{href:!0});var Cqr=s(XR);Hao=r(Cqr,"CLIPModel"),Cqr.forEach(t),Uao=r(L4e," (CLIP model)"),L4e.forEach(t),Jao=i(C),ep=n(C,"LI",{});var B4e=s(ep);CK=n(B4e,"STRONG",{});var Mqr=s(CK);Yao=r(Mqr,"convbert"),Mqr.forEach(t),Kao=r(B4e," \u2014 "),VR=n(B4e,"A",{href:!0});var Eqr=s(VR);Zao=r(Eqr,"ConvBertModel"),Eqr.forEach(t),eno=r(B4e," (ConvBERT model)"),B4e.forEach(t),ono=i(C),op=n(C,"LI",{});var x4e=s(op);MK=n(x4e,"STRONG",{});var yqr=s(MK);rno=r(yqr,"convnext"),yqr.forEach(t),tno=r(x4e," \u2014 "),zR=n(x4e,"A",{href:!0});var wqr=s(zR);ano=r(wqr,"ConvNextModel"),wqr.forEach(t),nno=r(x4e," (ConvNext model)"),x4e.forEach(t),sno=i(C),rp=n(C,"LI",{});var k4e=s(rp);EK=n(k4e,"STRONG",{});var Aqr=s(EK);lno=r(Aqr,"ctrl"),Aqr.forEach(t),ino=r(k4e," \u2014 "),WR=n(k4e,"A",{href:!0});var Lqr=s(WR);dno=r(Lqr,"CTRLModel"),Lqr.forEach(t),cno=r(k4e," (CTRL model)"),k4e.forEach(t),fno=i(C),tp=n(C,"LI",{});var R4e=s(tp);yK=n(R4e,"STRONG",{});var Bqr=s(yK);mno=r(Bqr,"data2vec-audio"),Bqr.forEach(t),gno=r(R4e," \u2014 "),QR=n(R4e,"A",{href:!0});var xqr=s(QR);hno=r(xqr,"Data2VecAudioModel"),xqr.forEach(t),pno=r(R4e," (Data2VecAudio model)"),R4e.forEach(t),_no=i(C),ap=n(C,"LI",{});var S4e=s(ap);wK=n(S4e,"STRONG",{});var kqr=s(wK);uno=r(kqr,"data2vec-text"),kqr.forEach(t),bno=r(S4e," \u2014 "),HR=n(S4e,"A",{href:!0});var Rqr=s(HR);vno=r(Rqr,"Data2VecTextModel"),Rqr.forEach(t),Tno=r(S4e," (Data2VecText model)"),S4e.forEach(t),Fno=i(C),np=n(C,"LI",{});var P4e=s(np);AK=n(P4e,"STRONG",{});var Sqr=s(AK);Cno=r(Sqr,"deberta"),Sqr.forEach(t),Mno=r(P4e," \u2014 "),UR=n(P4e,"A",{href:!0});var Pqr=s(UR);Eno=r(Pqr,"DebertaModel"),Pqr.forEach(t),yno=r(P4e," (DeBERTa model)"),P4e.forEach(t),wno=i(C),sp=n(C,"LI",{});var $4e=s(sp);LK=n($4e,"STRONG",{});var $qr=s(LK);Ano=r($qr,"deberta-v2"),$qr.forEach(t),Lno=r($4e," \u2014 "),JR=n($4e,"A",{href:!0});var Iqr=s(JR);Bno=r(Iqr,"DebertaV2Model"),Iqr.forEach(t),xno=r($4e," (DeBERTa-v2 model)"),$4e.forEach(t),kno=i(C),lp=n(C,"LI",{});var I4e=s(lp);BK=n(I4e,"STRONG",{});var jqr=s(BK);Rno=r(jqr,"deit"),jqr.forEach(t),Sno=r(I4e," \u2014 "),YR=n(I4e,"A",{href:!0});var Nqr=s(YR);Pno=r(Nqr,"DeiTModel"),Nqr.forEach(t),$no=r(I4e," (DeiT model)"),I4e.forEach(t),Ino=i(C),ip=n(C,"LI",{});var j4e=s(ip);xK=n(j4e,"STRONG",{});var Dqr=s(xK);jno=r(Dqr,"detr"),Dqr.forEach(t),Nno=r(j4e," \u2014 "),KR=n(j4e,"A",{href:!0});var qqr=s(KR);Dno=r(qqr,"DetrModel"),qqr.forEach(t),qno=r(j4e," (DETR model)"),j4e.forEach(t),Ono=i(C),dp=n(C,"LI",{});var N4e=s(dp);kK=n(N4e,"STRONG",{});var Oqr=s(kK);Gno=r(Oqr,"distilbert"),Oqr.forEach(t),Xno=r(N4e," \u2014 "),ZR=n(N4e,"A",{href:!0});var Gqr=s(ZR);Vno=r(Gqr,"DistilBertModel"),Gqr.forEach(t),zno=r(N4e," (DistilBERT model)"),N4e.forEach(t),Wno=i(C),cp=n(C,"LI",{});var D4e=s(cp);RK=n(D4e,"STRONG",{});var Xqr=s(RK);Qno=r(Xqr,"dpr"),Xqr.forEach(t),Hno=r(D4e," \u2014 "),eS=n(D4e,"A",{href:!0});var Vqr=s(eS);Uno=r(Vqr,"DPRQuestionEncoder"),Vqr.forEach(t),Jno=r(D4e," (DPR model)"),D4e.forEach(t),Yno=i(C),fp=n(C,"LI",{});var q4e=s(fp);SK=n(q4e,"STRONG",{});var zqr=s(SK);Kno=r(zqr,"electra"),zqr.forEach(t),Zno=r(q4e," \u2014 "),oS=n(q4e,"A",{href:!0});var Wqr=s(oS);eso=r(Wqr,"ElectraModel"),Wqr.forEach(t),oso=r(q4e," (ELECTRA model)"),q4e.forEach(t),rso=i(C),mp=n(C,"LI",{});var O4e=s(mp);PK=n(O4e,"STRONG",{});var Qqr=s(PK);tso=r(Qqr,"flaubert"),Qqr.forEach(t),aso=r(O4e," \u2014 "),rS=n(O4e,"A",{href:!0});var Hqr=s(rS);nso=r(Hqr,"FlaubertModel"),Hqr.forEach(t),sso=r(O4e," (FlauBERT model)"),O4e.forEach(t),lso=i(C),gp=n(C,"LI",{});var G4e=s(gp);$K=n(G4e,"STRONG",{});var Uqr=s($K);iso=r(Uqr,"fnet"),Uqr.forEach(t),dso=r(G4e," \u2014 "),tS=n(G4e,"A",{href:!0});var Jqr=s(tS);cso=r(Jqr,"FNetModel"),Jqr.forEach(t),fso=r(G4e," (FNet model)"),G4e.forEach(t),mso=i(C),hp=n(C,"LI",{});var X4e=s(hp);IK=n(X4e,"STRONG",{});var Yqr=s(IK);gso=r(Yqr,"fsmt"),Yqr.forEach(t),hso=r(X4e," \u2014 "),aS=n(X4e,"A",{href:!0});var Kqr=s(aS);pso=r(Kqr,"FSMTModel"),Kqr.forEach(t),_so=r(X4e," (FairSeq Machine-Translation model)"),X4e.forEach(t),uso=i(C),Ds=n(C,"LI",{});var z8=s(Ds);jK=n(z8,"STRONG",{});var Zqr=s(jK);bso=r(Zqr,"funnel"),Zqr.forEach(t),vso=r(z8," \u2014 "),nS=n(z8,"A",{href:!0});var eOr=s(nS);Tso=r(eOr,"FunnelModel"),eOr.forEach(t),Fso=r(z8," or "),sS=n(z8,"A",{href:!0});var oOr=s(sS);Cso=r(oOr,"FunnelBaseModel"),oOr.forEach(t),Mso=r(z8," (Funnel Transformer model)"),z8.forEach(t),Eso=i(C),pp=n(C,"LI",{});var V4e=s(pp);NK=n(V4e,"STRONG",{});var rOr=s(NK);yso=r(rOr,"gpt2"),rOr.forEach(t),wso=r(V4e," \u2014 "),lS=n(V4e,"A",{href:!0});var tOr=s(lS);Aso=r(tOr,"GPT2Model"),tOr.forEach(t),Lso=r(V4e," (OpenAI GPT-2 model)"),V4e.forEach(t),Bso=i(C),_p=n(C,"LI",{});var z4e=s(_p);DK=n(z4e,"STRONG",{});var aOr=s(DK);xso=r(aOr,"gpt_neo"),aOr.forEach(t),kso=r(z4e," \u2014 "),iS=n(z4e,"A",{href:!0});var nOr=s(iS);Rso=r(nOr,"GPTNeoModel"),nOr.forEach(t),Sso=r(z4e," (GPT Neo model)"),z4e.forEach(t),Pso=i(C),up=n(C,"LI",{});var W4e=s(up);qK=n(W4e,"STRONG",{});var sOr=s(qK);$so=r(sOr,"gptj"),sOr.forEach(t),Iso=r(W4e," \u2014 "),dS=n(W4e,"A",{href:!0});var lOr=s(dS);jso=r(lOr,"GPTJModel"),lOr.forEach(t),Nso=r(W4e," (GPT-J model)"),W4e.forEach(t),Dso=i(C),bp=n(C,"LI",{});var Q4e=s(bp);OK=n(Q4e,"STRONG",{});var iOr=s(OK);qso=r(iOr,"hubert"),iOr.forEach(t),Oso=r(Q4e," \u2014 "),cS=n(Q4e,"A",{href:!0});var dOr=s(cS);Gso=r(dOr,"HubertModel"),dOr.forEach(t),Xso=r(Q4e," (Hubert model)"),Q4e.forEach(t),Vso=i(C),vp=n(C,"LI",{});var H4e=s(vp);GK=n(H4e,"STRONG",{});var cOr=s(GK);zso=r(cOr,"ibert"),cOr.forEach(t),Wso=r(H4e," \u2014 "),fS=n(H4e,"A",{href:!0});var fOr=s(fS);Qso=r(fOr,"IBertModel"),fOr.forEach(t),Hso=r(H4e," (I-BERT model)"),H4e.forEach(t),Uso=i(C),Tp=n(C,"LI",{});var U4e=s(Tp);XK=n(U4e,"STRONG",{});var mOr=s(XK);Jso=r(mOr,"imagegpt"),mOr.forEach(t),Yso=r(U4e," \u2014 "),mS=n(U4e,"A",{href:!0});var gOr=s(mS);Kso=r(gOr,"ImageGPTModel"),gOr.forEach(t),Zso=r(U4e," (ImageGPT model)"),U4e.forEach(t),elo=i(C),Fp=n(C,"LI",{});var J4e=s(Fp);VK=n(J4e,"STRONG",{});var hOr=s(VK);olo=r(hOr,"layoutlm"),hOr.forEach(t),rlo=r(J4e," \u2014 "),gS=n(J4e,"A",{href:!0});var pOr=s(gS);tlo=r(pOr,"LayoutLMModel"),pOr.forEach(t),alo=r(J4e," (LayoutLM model)"),J4e.forEach(t),nlo=i(C),Cp=n(C,"LI",{});var Y4e=s(Cp);zK=n(Y4e,"STRONG",{});var _Or=s(zK);slo=r(_Or,"layoutlmv2"),_Or.forEach(t),llo=r(Y4e," \u2014 "),hS=n(Y4e,"A",{href:!0});var uOr=s(hS);ilo=r(uOr,"LayoutLMv2Model"),uOr.forEach(t),dlo=r(Y4e," (LayoutLMv2 model)"),Y4e.forEach(t),clo=i(C),Mp=n(C,"LI",{});var K4e=s(Mp);WK=n(K4e,"STRONG",{});var bOr=s(WK);flo=r(bOr,"led"),bOr.forEach(t),mlo=r(K4e," \u2014 "),pS=n(K4e,"A",{href:!0});var vOr=s(pS);glo=r(vOr,"LEDModel"),vOr.forEach(t),hlo=r(K4e," (LED model)"),K4e.forEach(t),plo=i(C),Ep=n(C,"LI",{});var Z4e=s(Ep);QK=n(Z4e,"STRONG",{});var TOr=s(QK);_lo=r(TOr,"longformer"),TOr.forEach(t),ulo=r(Z4e," \u2014 "),_S=n(Z4e,"A",{href:!0});var FOr=s(_S);blo=r(FOr,"LongformerModel"),FOr.forEach(t),vlo=r(Z4e," (Longformer model)"),Z4e.forEach(t),Tlo=i(C),yp=n(C,"LI",{});var eEe=s(yp);HK=n(eEe,"STRONG",{});var COr=s(HK);Flo=r(COr,"luke"),COr.forEach(t),Clo=r(eEe," \u2014 "),uS=n(eEe,"A",{href:!0});var MOr=s(uS);Mlo=r(MOr,"LukeModel"),MOr.forEach(t),Elo=r(eEe," (LUKE model)"),eEe.forEach(t),ylo=i(C),wp=n(C,"LI",{});var oEe=s(wp);UK=n(oEe,"STRONG",{});var EOr=s(UK);wlo=r(EOr,"lxmert"),EOr.forEach(t),Alo=r(oEe," \u2014 "),bS=n(oEe,"A",{href:!0});var yOr=s(bS);Llo=r(yOr,"LxmertModel"),yOr.forEach(t),Blo=r(oEe," (LXMERT model)"),oEe.forEach(t),xlo=i(C),Ap=n(C,"LI",{});var rEe=s(Ap);JK=n(rEe,"STRONG",{});var wOr=s(JK);klo=r(wOr,"m2m_100"),wOr.forEach(t),Rlo=r(rEe," \u2014 "),vS=n(rEe,"A",{href:!0});var AOr=s(vS);Slo=r(AOr,"M2M100Model"),AOr.forEach(t),Plo=r(rEe," (M2M100 model)"),rEe.forEach(t),$lo=i(C),Lp=n(C,"LI",{});var tEe=s(Lp);YK=n(tEe,"STRONG",{});var LOr=s(YK);Ilo=r(LOr,"marian"),LOr.forEach(t),jlo=r(tEe," \u2014 "),TS=n(tEe,"A",{href:!0});var BOr=s(TS);Nlo=r(BOr,"MarianModel"),BOr.forEach(t),Dlo=r(tEe," (Marian model)"),tEe.forEach(t),qlo=i(C),Bp=n(C,"LI",{});var aEe=s(Bp);KK=n(aEe,"STRONG",{});var xOr=s(KK);Olo=r(xOr,"maskformer"),xOr.forEach(t),Glo=r(aEe," \u2014 "),FS=n(aEe,"A",{href:!0});var kOr=s(FS);Xlo=r(kOr,"MaskFormerModel"),kOr.forEach(t),Vlo=r(aEe," (MaskFormer model)"),aEe.forEach(t),zlo=i(C),xp=n(C,"LI",{});var nEe=s(xp);ZK=n(nEe,"STRONG",{});var ROr=s(ZK);Wlo=r(ROr,"mbart"),ROr.forEach(t),Qlo=r(nEe," \u2014 "),CS=n(nEe,"A",{href:!0});var SOr=s(CS);Hlo=r(SOr,"MBartModel"),SOr.forEach(t),Ulo=r(nEe," (mBART model)"),nEe.forEach(t),Jlo=i(C),kp=n(C,"LI",{});var sEe=s(kp);eZ=n(sEe,"STRONG",{});var POr=s(eZ);Ylo=r(POr,"megatron-bert"),POr.forEach(t),Klo=r(sEe," \u2014 "),MS=n(sEe,"A",{href:!0});var $Or=s(MS);Zlo=r($Or,"MegatronBertModel"),$Or.forEach(t),eio=r(sEe," (MegatronBert model)"),sEe.forEach(t),oio=i(C),Rp=n(C,"LI",{});var lEe=s(Rp);oZ=n(lEe,"STRONG",{});var IOr=s(oZ);rio=r(IOr,"mobilebert"),IOr.forEach(t),tio=r(lEe," \u2014 "),ES=n(lEe,"A",{href:!0});var jOr=s(ES);aio=r(jOr,"MobileBertModel"),jOr.forEach(t),nio=r(lEe," (MobileBERT model)"),lEe.forEach(t),sio=i(C),Sp=n(C,"LI",{});var iEe=s(Sp);rZ=n(iEe,"STRONG",{});var NOr=s(rZ);lio=r(NOr,"mpnet"),NOr.forEach(t),iio=r(iEe," \u2014 "),yS=n(iEe,"A",{href:!0});var DOr=s(yS);dio=r(DOr,"MPNetModel"),DOr.forEach(t),cio=r(iEe," (MPNet model)"),iEe.forEach(t),fio=i(C),Pp=n(C,"LI",{});var dEe=s(Pp);tZ=n(dEe,"STRONG",{});var qOr=s(tZ);mio=r(qOr,"mt5"),qOr.forEach(t),gio=r(dEe," \u2014 "),wS=n(dEe,"A",{href:!0});var OOr=s(wS);hio=r(OOr,"MT5Model"),OOr.forEach(t),pio=r(dEe," (mT5 model)"),dEe.forEach(t),_io=i(C),$p=n(C,"LI",{});var cEe=s($p);aZ=n(cEe,"STRONG",{});var GOr=s(aZ);uio=r(GOr,"nystromformer"),GOr.forEach(t),bio=r(cEe," \u2014 "),AS=n(cEe,"A",{href:!0});var XOr=s(AS);vio=r(XOr,"NystromformerModel"),XOr.forEach(t),Tio=r(cEe," (Nystromformer model)"),cEe.forEach(t),Fio=i(C),Ip=n(C,"LI",{});var fEe=s(Ip);nZ=n(fEe,"STRONG",{});var VOr=s(nZ);Cio=r(VOr,"openai-gpt"),VOr.forEach(t),Mio=r(fEe," \u2014 "),LS=n(fEe,"A",{href:!0});var zOr=s(LS);Eio=r(zOr,"OpenAIGPTModel"),zOr.forEach(t),yio=r(fEe," (OpenAI GPT model)"),fEe.forEach(t),wio=i(C),jp=n(C,"LI",{});var mEe=s(jp);sZ=n(mEe,"STRONG",{});var WOr=s(sZ);Aio=r(WOr,"pegasus"),WOr.forEach(t),Lio=r(mEe," \u2014 "),BS=n(mEe,"A",{href:!0});var QOr=s(BS);Bio=r(QOr,"PegasusModel"),QOr.forEach(t),xio=r(mEe," (Pegasus model)"),mEe.forEach(t),kio=i(C),Np=n(C,"LI",{});var gEe=s(Np);lZ=n(gEe,"STRONG",{});var HOr=s(lZ);Rio=r(HOr,"perceiver"),HOr.forEach(t),Sio=r(gEe," \u2014 "),xS=n(gEe,"A",{href:!0});var UOr=s(xS);Pio=r(UOr,"PerceiverModel"),UOr.forEach(t),$io=r(gEe," (Perceiver model)"),gEe.forEach(t),Iio=i(C),Dp=n(C,"LI",{});var hEe=s(Dp);iZ=n(hEe,"STRONG",{});var JOr=s(iZ);jio=r(JOr,"plbart"),JOr.forEach(t),Nio=r(hEe," \u2014 "),kS=n(hEe,"A",{href:!0});var YOr=s(kS);Dio=r(YOr,"PLBartModel"),YOr.forEach(t),qio=r(hEe," (PLBart model)"),hEe.forEach(t),Oio=i(C),qp=n(C,"LI",{});var pEe=s(qp);dZ=n(pEe,"STRONG",{});var KOr=s(dZ);Gio=r(KOr,"poolformer"),KOr.forEach(t),Xio=r(pEe," \u2014 "),RS=n(pEe,"A",{href:!0});var ZOr=s(RS);Vio=r(ZOr,"PoolFormerModel"),ZOr.forEach(t),zio=r(pEe," (PoolFormer model)"),pEe.forEach(t),Wio=i(C),Op=n(C,"LI",{});var _Ee=s(Op);cZ=n(_Ee,"STRONG",{});var eGr=s(cZ);Qio=r(eGr,"prophetnet"),eGr.forEach(t),Hio=r(_Ee," \u2014 "),SS=n(_Ee,"A",{href:!0});var oGr=s(SS);Uio=r(oGr,"ProphetNetModel"),oGr.forEach(t),Jio=r(_Ee," (ProphetNet model)"),_Ee.forEach(t),Yio=i(C),Gp=n(C,"LI",{});var uEe=s(Gp);fZ=n(uEe,"STRONG",{});var rGr=s(fZ);Kio=r(rGr,"qdqbert"),rGr.forEach(t),Zio=r(uEe," \u2014 "),PS=n(uEe,"A",{href:!0});var tGr=s(PS);edo=r(tGr,"QDQBertModel"),tGr.forEach(t),odo=r(uEe," (QDQBert model)"),uEe.forEach(t),rdo=i(C),Xp=n(C,"LI",{});var bEe=s(Xp);mZ=n(bEe,"STRONG",{});var aGr=s(mZ);tdo=r(aGr,"reformer"),aGr.forEach(t),ado=r(bEe," \u2014 "),$S=n(bEe,"A",{href:!0});var nGr=s($S);ndo=r(nGr,"ReformerModel"),nGr.forEach(t),sdo=r(bEe," (Reformer model)"),bEe.forEach(t),ldo=i(C),Vp=n(C,"LI",{});var vEe=s(Vp);gZ=n(vEe,"STRONG",{});var sGr=s(gZ);ido=r(sGr,"rembert"),sGr.forEach(t),ddo=r(vEe," \u2014 "),IS=n(vEe,"A",{href:!0});var lGr=s(IS);cdo=r(lGr,"RemBertModel"),lGr.forEach(t),fdo=r(vEe," (RemBERT model)"),vEe.forEach(t),mdo=i(C),zp=n(C,"LI",{});var TEe=s(zp);hZ=n(TEe,"STRONG",{});var iGr=s(hZ);gdo=r(iGr,"resnet"),iGr.forEach(t),hdo=r(TEe," \u2014 "),jS=n(TEe,"A",{href:!0});var dGr=s(jS);pdo=r(dGr,"ResNetModel"),dGr.forEach(t),_do=r(TEe," (ResNet model)"),TEe.forEach(t),udo=i(C),Wp=n(C,"LI",{});var FEe=s(Wp);pZ=n(FEe,"STRONG",{});var cGr=s(pZ);bdo=r(cGr,"retribert"),cGr.forEach(t),vdo=r(FEe," \u2014 "),NS=n(FEe,"A",{href:!0});var fGr=s(NS);Tdo=r(fGr,"RetriBertModel"),fGr.forEach(t),Fdo=r(FEe," (RetriBERT model)"),FEe.forEach(t),Cdo=i(C),Qp=n(C,"LI",{});var CEe=s(Qp);_Z=n(CEe,"STRONG",{});var mGr=s(_Z);Mdo=r(mGr,"roberta"),mGr.forEach(t),Edo=r(CEe," \u2014 "),DS=n(CEe,"A",{href:!0});var gGr=s(DS);ydo=r(gGr,"RobertaModel"),gGr.forEach(t),wdo=r(CEe," (RoBERTa model)"),CEe.forEach(t),Ado=i(C),Hp=n(C,"LI",{});var MEe=s(Hp);uZ=n(MEe,"STRONG",{});var hGr=s(uZ);Ldo=r(hGr,"roformer"),hGr.forEach(t),Bdo=r(MEe," \u2014 "),qS=n(MEe,"A",{href:!0});var pGr=s(qS);xdo=r(pGr,"RoFormerModel"),pGr.forEach(t),kdo=r(MEe," (RoFormer model)"),MEe.forEach(t),Rdo=i(C),Up=n(C,"LI",{});var EEe=s(Up);bZ=n(EEe,"STRONG",{});var _Gr=s(bZ);Sdo=r(_Gr,"segformer"),_Gr.forEach(t),Pdo=r(EEe," \u2014 "),OS=n(EEe,"A",{href:!0});var uGr=s(OS);$do=r(uGr,"SegformerModel"),uGr.forEach(t),Ido=r(EEe," (SegFormer model)"),EEe.forEach(t),jdo=i(C),Jp=n(C,"LI",{});var yEe=s(Jp);vZ=n(yEe,"STRONG",{});var bGr=s(vZ);Ndo=r(bGr,"sew"),bGr.forEach(t),Ddo=r(yEe," \u2014 "),GS=n(yEe,"A",{href:!0});var vGr=s(GS);qdo=r(vGr,"SEWModel"),vGr.forEach(t),Odo=r(yEe," (SEW model)"),yEe.forEach(t),Gdo=i(C),Yp=n(C,"LI",{});var wEe=s(Yp);TZ=n(wEe,"STRONG",{});var TGr=s(TZ);Xdo=r(TGr,"sew-d"),TGr.forEach(t),Vdo=r(wEe," \u2014 "),XS=n(wEe,"A",{href:!0});var FGr=s(XS);zdo=r(FGr,"SEWDModel"),FGr.forEach(t),Wdo=r(wEe," (SEW-D model)"),wEe.forEach(t),Qdo=i(C),Kp=n(C,"LI",{});var AEe=s(Kp);FZ=n(AEe,"STRONG",{});var CGr=s(FZ);Hdo=r(CGr,"speech_to_text"),CGr.forEach(t),Udo=r(AEe," \u2014 "),VS=n(AEe,"A",{href:!0});var MGr=s(VS);Jdo=r(MGr,"Speech2TextModel"),MGr.forEach(t),Ydo=r(AEe," (Speech2Text model)"),AEe.forEach(t),Kdo=i(C),Zp=n(C,"LI",{});var LEe=s(Zp);CZ=n(LEe,"STRONG",{});var EGr=s(CZ);Zdo=r(EGr,"splinter"),EGr.forEach(t),eco=r(LEe," \u2014 "),zS=n(LEe,"A",{href:!0});var yGr=s(zS);oco=r(yGr,"SplinterModel"),yGr.forEach(t),rco=r(LEe," (Splinter model)"),LEe.forEach(t),tco=i(C),e_=n(C,"LI",{});var BEe=s(e_);MZ=n(BEe,"STRONG",{});var wGr=s(MZ);aco=r(wGr,"squeezebert"),wGr.forEach(t),nco=r(BEe," \u2014 "),WS=n(BEe,"A",{href:!0});var AGr=s(WS);sco=r(AGr,"SqueezeBertModel"),AGr.forEach(t),lco=r(BEe," (SqueezeBERT model)"),BEe.forEach(t),ico=i(C),o_=n(C,"LI",{});var xEe=s(o_);EZ=n(xEe,"STRONG",{});var LGr=s(EZ);dco=r(LGr,"swin"),LGr.forEach(t),cco=r(xEe," \u2014 "),QS=n(xEe,"A",{href:!0});var BGr=s(QS);fco=r(BGr,"SwinModel"),BGr.forEach(t),mco=r(xEe," (Swin model)"),xEe.forEach(t),gco=i(C),r_=n(C,"LI",{});var kEe=s(r_);yZ=n(kEe,"STRONG",{});var xGr=s(yZ);hco=r(xGr,"t5"),xGr.forEach(t),pco=r(kEe," \u2014 "),HS=n(kEe,"A",{href:!0});var kGr=s(HS);_co=r(kGr,"T5Model"),kGr.forEach(t),uco=r(kEe," (T5 model)"),kEe.forEach(t),bco=i(C),t_=n(C,"LI",{});var REe=s(t_);wZ=n(REe,"STRONG",{});var RGr=s(wZ);vco=r(RGr,"tapas"),RGr.forEach(t),Tco=r(REe," \u2014 "),US=n(REe,"A",{href:!0});var SGr=s(US);Fco=r(SGr,"TapasModel"),SGr.forEach(t),Cco=r(REe," (TAPAS model)"),REe.forEach(t),Mco=i(C),a_=n(C,"LI",{});var SEe=s(a_);AZ=n(SEe,"STRONG",{});var PGr=s(AZ);Eco=r(PGr,"transfo-xl"),PGr.forEach(t),yco=r(SEe," \u2014 "),JS=n(SEe,"A",{href:!0});var $Gr=s(JS);wco=r($Gr,"TransfoXLModel"),$Gr.forEach(t),Aco=r(SEe," (Transformer-XL model)"),SEe.forEach(t),Lco=i(C),n_=n(C,"LI",{});var PEe=s(n_);LZ=n(PEe,"STRONG",{});var IGr=s(LZ);Bco=r(IGr,"unispeech"),IGr.forEach(t),xco=r(PEe," \u2014 "),YS=n(PEe,"A",{href:!0});var jGr=s(YS);kco=r(jGr,"UniSpeechModel"),jGr.forEach(t),Rco=r(PEe," (UniSpeech model)"),PEe.forEach(t),Sco=i(C),s_=n(C,"LI",{});var $Ee=s(s_);BZ=n($Ee,"STRONG",{});var NGr=s(BZ);Pco=r(NGr,"unispeech-sat"),NGr.forEach(t),$co=r($Ee," \u2014 "),KS=n($Ee,"A",{href:!0});var DGr=s(KS);Ico=r(DGr,"UniSpeechSatModel"),DGr.forEach(t),jco=r($Ee," (UniSpeechSat model)"),$Ee.forEach(t),Nco=i(C),l_=n(C,"LI",{});var IEe=s(l_);xZ=n(IEe,"STRONG",{});var qGr=s(xZ);Dco=r(qGr,"van"),qGr.forEach(t),qco=r(IEe," \u2014 "),ZS=n(IEe,"A",{href:!0});var OGr=s(ZS);Oco=r(OGr,"VanModel"),OGr.forEach(t),Gco=r(IEe," (VAN model)"),IEe.forEach(t),Xco=i(C),i_=n(C,"LI",{});var jEe=s(i_);kZ=n(jEe,"STRONG",{});var GGr=s(kZ);Vco=r(GGr,"vilt"),GGr.forEach(t),zco=r(jEe," \u2014 "),eP=n(jEe,"A",{href:!0});var XGr=s(eP);Wco=r(XGr,"ViltModel"),XGr.forEach(t),Qco=r(jEe," (ViLT model)"),jEe.forEach(t),Hco=i(C),d_=n(C,"LI",{});var NEe=s(d_);RZ=n(NEe,"STRONG",{});var VGr=s(RZ);Uco=r(VGr,"vision-text-dual-encoder"),VGr.forEach(t),Jco=r(NEe," \u2014 "),oP=n(NEe,"A",{href:!0});var zGr=s(oP);Yco=r(zGr,"VisionTextDualEncoderModel"),zGr.forEach(t),Kco=r(NEe," (VisionTextDualEncoder model)"),NEe.forEach(t),Zco=i(C),c_=n(C,"LI",{});var DEe=s(c_);SZ=n(DEe,"STRONG",{});var WGr=s(SZ);efo=r(WGr,"visual_bert"),WGr.forEach(t),ofo=r(DEe," \u2014 "),rP=n(DEe,"A",{href:!0});var QGr=s(rP);rfo=r(QGr,"VisualBertModel"),QGr.forEach(t),tfo=r(DEe," (VisualBert model)"),DEe.forEach(t),afo=i(C),f_=n(C,"LI",{});var qEe=s(f_);PZ=n(qEe,"STRONG",{});var HGr=s(PZ);nfo=r(HGr,"vit"),HGr.forEach(t),sfo=r(qEe," \u2014 "),tP=n(qEe,"A",{href:!0});var UGr=s(tP);lfo=r(UGr,"ViTModel"),UGr.forEach(t),ifo=r(qEe," (ViT model)"),qEe.forEach(t),dfo=i(C),m_=n(C,"LI",{});var OEe=s(m_);$Z=n(OEe,"STRONG",{});var JGr=s($Z);cfo=r(JGr,"vit_mae"),JGr.forEach(t),ffo=r(OEe," \u2014 "),aP=n(OEe,"A",{href:!0});var YGr=s(aP);mfo=r(YGr,"ViTMAEModel"),YGr.forEach(t),gfo=r(OEe," (ViTMAE model)"),OEe.forEach(t),hfo=i(C),g_=n(C,"LI",{});var GEe=s(g_);IZ=n(GEe,"STRONG",{});var KGr=s(IZ);pfo=r(KGr,"wav2vec2"),KGr.forEach(t),_fo=r(GEe," \u2014 "),nP=n(GEe,"A",{href:!0});var ZGr=s(nP);ufo=r(ZGr,"Wav2Vec2Model"),ZGr.forEach(t),bfo=r(GEe," (Wav2Vec2 model)"),GEe.forEach(t),vfo=i(C),h_=n(C,"LI",{});var XEe=s(h_);jZ=n(XEe,"STRONG",{});var eXr=s(jZ);Tfo=r(eXr,"wavlm"),eXr.forEach(t),Ffo=r(XEe," \u2014 "),sP=n(XEe,"A",{href:!0});var oXr=s(sP);Cfo=r(oXr,"WavLMModel"),oXr.forEach(t),Mfo=r(XEe," (WavLM model)"),XEe.forEach(t),Efo=i(C),p_=n(C,"LI",{});var VEe=s(p_);NZ=n(VEe,"STRONG",{});var rXr=s(NZ);yfo=r(rXr,"xglm"),rXr.forEach(t),wfo=r(VEe," \u2014 "),lP=n(VEe,"A",{href:!0});var tXr=s(lP);Afo=r(tXr,"XGLMModel"),tXr.forEach(t),Lfo=r(VEe," (XGLM model)"),VEe.forEach(t),Bfo=i(C),__=n(C,"LI",{});var zEe=s(__);DZ=n(zEe,"STRONG",{});var aXr=s(DZ);xfo=r(aXr,"xlm"),aXr.forEach(t),kfo=r(zEe," \u2014 "),iP=n(zEe,"A",{href:!0});var nXr=s(iP);Rfo=r(nXr,"XLMModel"),nXr.forEach(t),Sfo=r(zEe," (XLM model)"),zEe.forEach(t),Pfo=i(C),u_=n(C,"LI",{});var WEe=s(u_);qZ=n(WEe,"STRONG",{});var sXr=s(qZ);$fo=r(sXr,"xlm-prophetnet"),sXr.forEach(t),Ifo=r(WEe," \u2014 "),dP=n(WEe,"A",{href:!0});var lXr=s(dP);jfo=r(lXr,"XLMProphetNetModel"),lXr.forEach(t),Nfo=r(WEe," (XLMProphetNet model)"),WEe.forEach(t),Dfo=i(C),b_=n(C,"LI",{});var QEe=s(b_);OZ=n(QEe,"STRONG",{});var iXr=s(OZ);qfo=r(iXr,"xlm-roberta"),iXr.forEach(t),Ofo=r(QEe," \u2014 "),cP=n(QEe,"A",{href:!0});var dXr=s(cP);Gfo=r(dXr,"XLMRobertaModel"),dXr.forEach(t),Xfo=r(QEe," (XLM-RoBERTa model)"),QEe.forEach(t),Vfo=i(C),v_=n(C,"LI",{});var HEe=s(v_);GZ=n(HEe,"STRONG",{});var cXr=s(GZ);zfo=r(cXr,"xlm-roberta-xl"),cXr.forEach(t),Wfo=r(HEe," \u2014 "),fP=n(HEe,"A",{href:!0});var fXr=s(fP);Qfo=r(fXr,"XLMRobertaXLModel"),fXr.forEach(t),Hfo=r(HEe," (XLM-RoBERTa-XL model)"),HEe.forEach(t),Ufo=i(C),T_=n(C,"LI",{});var UEe=s(T_);XZ=n(UEe,"STRONG",{});var mXr=s(XZ);Jfo=r(mXr,"xlnet"),mXr.forEach(t),Yfo=r(UEe," \u2014 "),mP=n(UEe,"A",{href:!0});var gXr=s(mP);Kfo=r(gXr,"XLNetModel"),gXr.forEach(t),Zfo=r(UEe," (XLNet model)"),UEe.forEach(t),emo=i(C),F_=n(C,"LI",{});var JEe=s(F_);VZ=n(JEe,"STRONG",{});var hXr=s(VZ);omo=r(hXr,"yoso"),hXr.forEach(t),rmo=r(JEe," \u2014 "),gP=n(JEe,"A",{href:!0});var pXr=s(gP);tmo=r(pXr,"YosoModel"),pXr.forEach(t),amo=r(JEe," (YOSO model)"),JEe.forEach(t),C.forEach(t),nmo=i(qt),C_=n(qt,"P",{});var YEe=s(C_);smo=r(YEe,"The model is set in evaluation mode by default using "),zZ=n(YEe,"CODE",{});var _Xr=s(zZ);lmo=r(_Xr,"model.eval()"),_Xr.forEach(t),imo=r(YEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WZ=n(YEe,"CODE",{});var uXr=s(WZ);dmo=r(uXr,"model.train()"),uXr.forEach(t),YEe.forEach(t),cmo=i(qt),QZ=n(qt,"P",{});var bXr=s(QZ);fmo=r(bXr,"Examples:"),bXr.forEach(t),mmo=i(qt),m(Oy.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Zxe=i(c),ed=n(c,"H2",{class:!0});var iSe=s(ed);M_=n(iSe,"A",{id:!0,class:!0,href:!0});var vXr=s(M_);HZ=n(vXr,"SPAN",{});var TXr=s(HZ);m(Gy.$$.fragment,TXr),TXr.forEach(t),vXr.forEach(t),gmo=i(iSe),UZ=n(iSe,"SPAN",{});var FXr=s(UZ);hmo=r(FXr,"AutoModelForPreTraining"),FXr.forEach(t),iSe.forEach(t),eke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(Xy.$$.fragment,Hs),pmo=i(Hs),od=n(Hs,"P",{});var Xz=s(od);_mo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JZ=n(Xz,"CODE",{});var CXr=s(JZ);umo=r(CXr,"from_pretrained()"),CXr.forEach(t),bmo=r(Xz,"class method or the "),YZ=n(Xz,"CODE",{});var MXr=s(YZ);vmo=r(MXr,"from_config()"),MXr.forEach(t),Tmo=r(Xz,`class
method.`),Xz.forEach(t),Fmo=i(Hs),Vy=n(Hs,"P",{});var dSe=s(Vy);Cmo=r(dSe,"This class cannot be instantiated directly using "),KZ=n(dSe,"CODE",{});var EXr=s(KZ);Mmo=r(EXr,"__init__()"),EXr.forEach(t),Emo=r(dSe," (throws an error)."),dSe.forEach(t),ymo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(zy.$$.fragment,Us),wmo=i(Us),ZZ=n(Us,"P",{});var yXr=s(ZZ);Amo=r(yXr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yXr.forEach(t),Lmo=i(Us),rd=n(Us,"P",{});var Vz=s(rd);Bmo=r(Vz,`Note:
Loading a model from its configuration file does `),eee=n(Vz,"STRONG",{});var wXr=s(eee);xmo=r(wXr,"not"),wXr.forEach(t),kmo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Vz,"CODE",{});var AXr=s(oee);Rmo=r(AXr,"from_pretrained()"),AXr.forEach(t),Smo=r(Vz,"to load the model weights."),Vz.forEach(t),Pmo=i(Us),ree=n(Us,"P",{});var LXr=s(ree);$mo=r(LXr,"Examples:"),LXr.forEach(t),Imo=i(Us),m(Wy.$$.fragment,Us),Us.forEach(t),jmo=i(Hs),De=n(Hs,"DIV",{class:!0});var Ot=s(De);m(Qy.$$.fragment,Ot),Nmo=i(Ot),tee=n(Ot,"P",{});var BXr=s(tee);Dmo=r(BXr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BXr.forEach(t),qmo=i(Ot),za=n(Ot,"P",{});var s5=s(za);Omo=r(s5,"The model class to instantiate is selected based on the "),aee=n(s5,"CODE",{});var xXr=s(aee);Gmo=r(xXr,"model_type"),xXr.forEach(t),Xmo=r(s5,` property of the config object (either
passed as an argument or loaded from `),nee=n(s5,"CODE",{});var kXr=s(nee);Vmo=r(kXr,"pretrained_model_name_or_path"),kXr.forEach(t),zmo=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),see=n(s5,"CODE",{});var RXr=s(see);Wmo=r(RXr,"pretrained_model_name_or_path"),RXr.forEach(t),Qmo=r(s5,":"),s5.forEach(t),Hmo=i(Ot),k=n(Ot,"UL",{});var S=s(k);E_=n(S,"LI",{});var KEe=s(E_);lee=n(KEe,"STRONG",{});var SXr=s(lee);Umo=r(SXr,"albert"),SXr.forEach(t),Jmo=r(KEe," \u2014 "),hP=n(KEe,"A",{href:!0});var PXr=s(hP);Ymo=r(PXr,"AlbertForPreTraining"),PXr.forEach(t),Kmo=r(KEe," (ALBERT model)"),KEe.forEach(t),Zmo=i(S),y_=n(S,"LI",{});var ZEe=s(y_);iee=n(ZEe,"STRONG",{});var $Xr=s(iee);ego=r($Xr,"bart"),$Xr.forEach(t),ogo=r(ZEe," \u2014 "),pP=n(ZEe,"A",{href:!0});var IXr=s(pP);rgo=r(IXr,"BartForConditionalGeneration"),IXr.forEach(t),tgo=r(ZEe," (BART model)"),ZEe.forEach(t),ago=i(S),w_=n(S,"LI",{});var e5e=s(w_);dee=n(e5e,"STRONG",{});var jXr=s(dee);ngo=r(jXr,"bert"),jXr.forEach(t),sgo=r(e5e," \u2014 "),_P=n(e5e,"A",{href:!0});var NXr=s(_P);lgo=r(NXr,"BertForPreTraining"),NXr.forEach(t),igo=r(e5e," (BERT model)"),e5e.forEach(t),dgo=i(S),A_=n(S,"LI",{});var o5e=s(A_);cee=n(o5e,"STRONG",{});var DXr=s(cee);cgo=r(DXr,"big_bird"),DXr.forEach(t),fgo=r(o5e," \u2014 "),uP=n(o5e,"A",{href:!0});var qXr=s(uP);mgo=r(qXr,"BigBirdForPreTraining"),qXr.forEach(t),ggo=r(o5e," (BigBird model)"),o5e.forEach(t),hgo=i(S),L_=n(S,"LI",{});var r5e=s(L_);fee=n(r5e,"STRONG",{});var OXr=s(fee);pgo=r(OXr,"camembert"),OXr.forEach(t),_go=r(r5e," \u2014 "),bP=n(r5e,"A",{href:!0});var GXr=s(bP);ugo=r(GXr,"CamembertForMaskedLM"),GXr.forEach(t),bgo=r(r5e," (CamemBERT model)"),r5e.forEach(t),vgo=i(S),B_=n(S,"LI",{});var t5e=s(B_);mee=n(t5e,"STRONG",{});var XXr=s(mee);Tgo=r(XXr,"ctrl"),XXr.forEach(t),Fgo=r(t5e," \u2014 "),vP=n(t5e,"A",{href:!0});var VXr=s(vP);Cgo=r(VXr,"CTRLLMHeadModel"),VXr.forEach(t),Mgo=r(t5e," (CTRL model)"),t5e.forEach(t),Ego=i(S),x_=n(S,"LI",{});var a5e=s(x_);gee=n(a5e,"STRONG",{});var zXr=s(gee);ygo=r(zXr,"data2vec-text"),zXr.forEach(t),wgo=r(a5e," \u2014 "),TP=n(a5e,"A",{href:!0});var WXr=s(TP);Ago=r(WXr,"Data2VecTextForMaskedLM"),WXr.forEach(t),Lgo=r(a5e," (Data2VecText model)"),a5e.forEach(t),Bgo=i(S),k_=n(S,"LI",{});var n5e=s(k_);hee=n(n5e,"STRONG",{});var QXr=s(hee);xgo=r(QXr,"deberta"),QXr.forEach(t),kgo=r(n5e," \u2014 "),FP=n(n5e,"A",{href:!0});var HXr=s(FP);Rgo=r(HXr,"DebertaForMaskedLM"),HXr.forEach(t),Sgo=r(n5e," (DeBERTa model)"),n5e.forEach(t),Pgo=i(S),R_=n(S,"LI",{});var s5e=s(R_);pee=n(s5e,"STRONG",{});var UXr=s(pee);$go=r(UXr,"deberta-v2"),UXr.forEach(t),Igo=r(s5e," \u2014 "),CP=n(s5e,"A",{href:!0});var JXr=s(CP);jgo=r(JXr,"DebertaV2ForMaskedLM"),JXr.forEach(t),Ngo=r(s5e," (DeBERTa-v2 model)"),s5e.forEach(t),Dgo=i(S),S_=n(S,"LI",{});var l5e=s(S_);_ee=n(l5e,"STRONG",{});var YXr=s(_ee);qgo=r(YXr,"distilbert"),YXr.forEach(t),Ogo=r(l5e," \u2014 "),MP=n(l5e,"A",{href:!0});var KXr=s(MP);Ggo=r(KXr,"DistilBertForMaskedLM"),KXr.forEach(t),Xgo=r(l5e," (DistilBERT model)"),l5e.forEach(t),Vgo=i(S),P_=n(S,"LI",{});var i5e=s(P_);uee=n(i5e,"STRONG",{});var ZXr=s(uee);zgo=r(ZXr,"electra"),ZXr.forEach(t),Wgo=r(i5e," \u2014 "),EP=n(i5e,"A",{href:!0});var eVr=s(EP);Qgo=r(eVr,"ElectraForPreTraining"),eVr.forEach(t),Hgo=r(i5e," (ELECTRA model)"),i5e.forEach(t),Ugo=i(S),$_=n(S,"LI",{});var d5e=s($_);bee=n(d5e,"STRONG",{});var oVr=s(bee);Jgo=r(oVr,"flaubert"),oVr.forEach(t),Ygo=r(d5e," \u2014 "),yP=n(d5e,"A",{href:!0});var rVr=s(yP);Kgo=r(rVr,"FlaubertWithLMHeadModel"),rVr.forEach(t),Zgo=r(d5e," (FlauBERT model)"),d5e.forEach(t),eho=i(S),I_=n(S,"LI",{});var c5e=s(I_);vee=n(c5e,"STRONG",{});var tVr=s(vee);oho=r(tVr,"fnet"),tVr.forEach(t),rho=r(c5e," \u2014 "),wP=n(c5e,"A",{href:!0});var aVr=s(wP);tho=r(aVr,"FNetForPreTraining"),aVr.forEach(t),aho=r(c5e," (FNet model)"),c5e.forEach(t),nho=i(S),j_=n(S,"LI",{});var f5e=s(j_);Tee=n(f5e,"STRONG",{});var nVr=s(Tee);sho=r(nVr,"fsmt"),nVr.forEach(t),lho=r(f5e," \u2014 "),AP=n(f5e,"A",{href:!0});var sVr=s(AP);iho=r(sVr,"FSMTForConditionalGeneration"),sVr.forEach(t),dho=r(f5e," (FairSeq Machine-Translation model)"),f5e.forEach(t),cho=i(S),N_=n(S,"LI",{});var m5e=s(N_);Fee=n(m5e,"STRONG",{});var lVr=s(Fee);fho=r(lVr,"funnel"),lVr.forEach(t),mho=r(m5e," \u2014 "),LP=n(m5e,"A",{href:!0});var iVr=s(LP);gho=r(iVr,"FunnelForPreTraining"),iVr.forEach(t),hho=r(m5e," (Funnel Transformer model)"),m5e.forEach(t),pho=i(S),D_=n(S,"LI",{});var g5e=s(D_);Cee=n(g5e,"STRONG",{});var dVr=s(Cee);_ho=r(dVr,"gpt2"),dVr.forEach(t),uho=r(g5e," \u2014 "),BP=n(g5e,"A",{href:!0});var cVr=s(BP);bho=r(cVr,"GPT2LMHeadModel"),cVr.forEach(t),vho=r(g5e," (OpenAI GPT-2 model)"),g5e.forEach(t),Tho=i(S),q_=n(S,"LI",{});var h5e=s(q_);Mee=n(h5e,"STRONG",{});var fVr=s(Mee);Fho=r(fVr,"ibert"),fVr.forEach(t),Cho=r(h5e," \u2014 "),xP=n(h5e,"A",{href:!0});var mVr=s(xP);Mho=r(mVr,"IBertForMaskedLM"),mVr.forEach(t),Eho=r(h5e," (I-BERT model)"),h5e.forEach(t),yho=i(S),O_=n(S,"LI",{});var p5e=s(O_);Eee=n(p5e,"STRONG",{});var gVr=s(Eee);who=r(gVr,"layoutlm"),gVr.forEach(t),Aho=r(p5e," \u2014 "),kP=n(p5e,"A",{href:!0});var hVr=s(kP);Lho=r(hVr,"LayoutLMForMaskedLM"),hVr.forEach(t),Bho=r(p5e," (LayoutLM model)"),p5e.forEach(t),xho=i(S),G_=n(S,"LI",{});var _5e=s(G_);yee=n(_5e,"STRONG",{});var pVr=s(yee);kho=r(pVr,"longformer"),pVr.forEach(t),Rho=r(_5e," \u2014 "),RP=n(_5e,"A",{href:!0});var _Vr=s(RP);Sho=r(_Vr,"LongformerForMaskedLM"),_Vr.forEach(t),Pho=r(_5e," (Longformer model)"),_5e.forEach(t),$ho=i(S),X_=n(S,"LI",{});var u5e=s(X_);wee=n(u5e,"STRONG",{});var uVr=s(wee);Iho=r(uVr,"lxmert"),uVr.forEach(t),jho=r(u5e," \u2014 "),SP=n(u5e,"A",{href:!0});var bVr=s(SP);Nho=r(bVr,"LxmertForPreTraining"),bVr.forEach(t),Dho=r(u5e," (LXMERT model)"),u5e.forEach(t),qho=i(S),V_=n(S,"LI",{});var b5e=s(V_);Aee=n(b5e,"STRONG",{});var vVr=s(Aee);Oho=r(vVr,"megatron-bert"),vVr.forEach(t),Gho=r(b5e," \u2014 "),PP=n(b5e,"A",{href:!0});var TVr=s(PP);Xho=r(TVr,"MegatronBertForPreTraining"),TVr.forEach(t),Vho=r(b5e," (MegatronBert model)"),b5e.forEach(t),zho=i(S),z_=n(S,"LI",{});var v5e=s(z_);Lee=n(v5e,"STRONG",{});var FVr=s(Lee);Who=r(FVr,"mobilebert"),FVr.forEach(t),Qho=r(v5e," \u2014 "),$P=n(v5e,"A",{href:!0});var CVr=s($P);Hho=r(CVr,"MobileBertForPreTraining"),CVr.forEach(t),Uho=r(v5e," (MobileBERT model)"),v5e.forEach(t),Jho=i(S),W_=n(S,"LI",{});var T5e=s(W_);Bee=n(T5e,"STRONG",{});var MVr=s(Bee);Yho=r(MVr,"mpnet"),MVr.forEach(t),Kho=r(T5e," \u2014 "),IP=n(T5e,"A",{href:!0});var EVr=s(IP);Zho=r(EVr,"MPNetForMaskedLM"),EVr.forEach(t),epo=r(T5e," (MPNet model)"),T5e.forEach(t),opo=i(S),Q_=n(S,"LI",{});var F5e=s(Q_);xee=n(F5e,"STRONG",{});var yVr=s(xee);rpo=r(yVr,"openai-gpt"),yVr.forEach(t),tpo=r(F5e," \u2014 "),jP=n(F5e,"A",{href:!0});var wVr=s(jP);apo=r(wVr,"OpenAIGPTLMHeadModel"),wVr.forEach(t),npo=r(F5e," (OpenAI GPT model)"),F5e.forEach(t),spo=i(S),H_=n(S,"LI",{});var C5e=s(H_);kee=n(C5e,"STRONG",{});var AVr=s(kee);lpo=r(AVr,"retribert"),AVr.forEach(t),ipo=r(C5e," \u2014 "),NP=n(C5e,"A",{href:!0});var LVr=s(NP);dpo=r(LVr,"RetriBertModel"),LVr.forEach(t),cpo=r(C5e," (RetriBERT model)"),C5e.forEach(t),fpo=i(S),U_=n(S,"LI",{});var M5e=s(U_);Ree=n(M5e,"STRONG",{});var BVr=s(Ree);mpo=r(BVr,"roberta"),BVr.forEach(t),gpo=r(M5e," \u2014 "),DP=n(M5e,"A",{href:!0});var xVr=s(DP);hpo=r(xVr,"RobertaForMaskedLM"),xVr.forEach(t),ppo=r(M5e," (RoBERTa model)"),M5e.forEach(t),_po=i(S),J_=n(S,"LI",{});var E5e=s(J_);See=n(E5e,"STRONG",{});var kVr=s(See);upo=r(kVr,"squeezebert"),kVr.forEach(t),bpo=r(E5e," \u2014 "),qP=n(E5e,"A",{href:!0});var RVr=s(qP);vpo=r(RVr,"SqueezeBertForMaskedLM"),RVr.forEach(t),Tpo=r(E5e," (SqueezeBERT model)"),E5e.forEach(t),Fpo=i(S),Y_=n(S,"LI",{});var y5e=s(Y_);Pee=n(y5e,"STRONG",{});var SVr=s(Pee);Cpo=r(SVr,"t5"),SVr.forEach(t),Mpo=r(y5e," \u2014 "),OP=n(y5e,"A",{href:!0});var PVr=s(OP);Epo=r(PVr,"T5ForConditionalGeneration"),PVr.forEach(t),ypo=r(y5e," (T5 model)"),y5e.forEach(t),wpo=i(S),K_=n(S,"LI",{});var w5e=s(K_);$ee=n(w5e,"STRONG",{});var $Vr=s($ee);Apo=r($Vr,"tapas"),$Vr.forEach(t),Lpo=r(w5e," \u2014 "),GP=n(w5e,"A",{href:!0});var IVr=s(GP);Bpo=r(IVr,"TapasForMaskedLM"),IVr.forEach(t),xpo=r(w5e," (TAPAS model)"),w5e.forEach(t),kpo=i(S),Z_=n(S,"LI",{});var A5e=s(Z_);Iee=n(A5e,"STRONG",{});var jVr=s(Iee);Rpo=r(jVr,"transfo-xl"),jVr.forEach(t),Spo=r(A5e," \u2014 "),XP=n(A5e,"A",{href:!0});var NVr=s(XP);Ppo=r(NVr,"TransfoXLLMHeadModel"),NVr.forEach(t),$po=r(A5e," (Transformer-XL model)"),A5e.forEach(t),Ipo=i(S),eu=n(S,"LI",{});var L5e=s(eu);jee=n(L5e,"STRONG",{});var DVr=s(jee);jpo=r(DVr,"unispeech"),DVr.forEach(t),Npo=r(L5e," \u2014 "),VP=n(L5e,"A",{href:!0});var qVr=s(VP);Dpo=r(qVr,"UniSpeechForPreTraining"),qVr.forEach(t),qpo=r(L5e," (UniSpeech model)"),L5e.forEach(t),Opo=i(S),ou=n(S,"LI",{});var B5e=s(ou);Nee=n(B5e,"STRONG",{});var OVr=s(Nee);Gpo=r(OVr,"unispeech-sat"),OVr.forEach(t),Xpo=r(B5e," \u2014 "),zP=n(B5e,"A",{href:!0});var GVr=s(zP);Vpo=r(GVr,"UniSpeechSatForPreTraining"),GVr.forEach(t),zpo=r(B5e," (UniSpeechSat model)"),B5e.forEach(t),Wpo=i(S),ru=n(S,"LI",{});var x5e=s(ru);Dee=n(x5e,"STRONG",{});var XVr=s(Dee);Qpo=r(XVr,"visual_bert"),XVr.forEach(t),Hpo=r(x5e," \u2014 "),WP=n(x5e,"A",{href:!0});var VVr=s(WP);Upo=r(VVr,"VisualBertForPreTraining"),VVr.forEach(t),Jpo=r(x5e," (VisualBert model)"),x5e.forEach(t),Ypo=i(S),tu=n(S,"LI",{});var k5e=s(tu);qee=n(k5e,"STRONG",{});var zVr=s(qee);Kpo=r(zVr,"vit_mae"),zVr.forEach(t),Zpo=r(k5e," \u2014 "),QP=n(k5e,"A",{href:!0});var WVr=s(QP);e_o=r(WVr,"ViTMAEForPreTraining"),WVr.forEach(t),o_o=r(k5e," (ViTMAE model)"),k5e.forEach(t),r_o=i(S),au=n(S,"LI",{});var R5e=s(au);Oee=n(R5e,"STRONG",{});var QVr=s(Oee);t_o=r(QVr,"wav2vec2"),QVr.forEach(t),a_o=r(R5e," \u2014 "),HP=n(R5e,"A",{href:!0});var HVr=s(HP);n_o=r(HVr,"Wav2Vec2ForPreTraining"),HVr.forEach(t),s_o=r(R5e," (Wav2Vec2 model)"),R5e.forEach(t),l_o=i(S),nu=n(S,"LI",{});var S5e=s(nu);Gee=n(S5e,"STRONG",{});var UVr=s(Gee);i_o=r(UVr,"xlm"),UVr.forEach(t),d_o=r(S5e," \u2014 "),UP=n(S5e,"A",{href:!0});var JVr=s(UP);c_o=r(JVr,"XLMWithLMHeadModel"),JVr.forEach(t),f_o=r(S5e," (XLM model)"),S5e.forEach(t),m_o=i(S),su=n(S,"LI",{});var P5e=s(su);Xee=n(P5e,"STRONG",{});var YVr=s(Xee);g_o=r(YVr,"xlm-roberta"),YVr.forEach(t),h_o=r(P5e," \u2014 "),JP=n(P5e,"A",{href:!0});var KVr=s(JP);p_o=r(KVr,"XLMRobertaForMaskedLM"),KVr.forEach(t),__o=r(P5e," (XLM-RoBERTa model)"),P5e.forEach(t),u_o=i(S),lu=n(S,"LI",{});var $5e=s(lu);Vee=n($5e,"STRONG",{});var ZVr=s(Vee);b_o=r(ZVr,"xlm-roberta-xl"),ZVr.forEach(t),v_o=r($5e," \u2014 "),YP=n($5e,"A",{href:!0});var ezr=s(YP);T_o=r(ezr,"XLMRobertaXLForMaskedLM"),ezr.forEach(t),F_o=r($5e," (XLM-RoBERTa-XL model)"),$5e.forEach(t),C_o=i(S),iu=n(S,"LI",{});var I5e=s(iu);zee=n(I5e,"STRONG",{});var ozr=s(zee);M_o=r(ozr,"xlnet"),ozr.forEach(t),E_o=r(I5e," \u2014 "),KP=n(I5e,"A",{href:!0});var rzr=s(KP);y_o=r(rzr,"XLNetLMHeadModel"),rzr.forEach(t),w_o=r(I5e," (XLNet model)"),I5e.forEach(t),S.forEach(t),A_o=i(Ot),du=n(Ot,"P",{});var j5e=s(du);L_o=r(j5e,"The model is set in evaluation mode by default using "),Wee=n(j5e,"CODE",{});var tzr=s(Wee);B_o=r(tzr,"model.eval()"),tzr.forEach(t),x_o=r(j5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qee=n(j5e,"CODE",{});var azr=s(Qee);k_o=r(azr,"model.train()"),azr.forEach(t),j5e.forEach(t),R_o=i(Ot),Hee=n(Ot,"P",{});var nzr=s(Hee);S_o=r(nzr,"Examples:"),nzr.forEach(t),P_o=i(Ot),m(Hy.$$.fragment,Ot),Ot.forEach(t),Hs.forEach(t),oke=i(c),td=n(c,"H2",{class:!0});var cSe=s(td);cu=n(cSe,"A",{id:!0,class:!0,href:!0});var szr=s(cu);Uee=n(szr,"SPAN",{});var lzr=s(Uee);m(Uy.$$.fragment,lzr),lzr.forEach(t),szr.forEach(t),$_o=i(cSe),Jee=n(cSe,"SPAN",{});var izr=s(Jee);I_o=r(izr,"AutoModelForCausalLM"),izr.forEach(t),cSe.forEach(t),rke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(Jy.$$.fragment,Js),j_o=i(Js),ad=n(Js,"P",{});var zz=s(ad);N_o=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Yee=n(zz,"CODE",{});var dzr=s(Yee);D_o=r(dzr,"from_pretrained()"),dzr.forEach(t),q_o=r(zz,"class method or the "),Kee=n(zz,"CODE",{});var czr=s(Kee);O_o=r(czr,"from_config()"),czr.forEach(t),G_o=r(zz,`class
method.`),zz.forEach(t),X_o=i(Js),Yy=n(Js,"P",{});var fSe=s(Yy);V_o=r(fSe,"This class cannot be instantiated directly using "),Zee=n(fSe,"CODE",{});var fzr=s(Zee);z_o=r(fzr,"__init__()"),fzr.forEach(t),W_o=r(fSe," (throws an error)."),fSe.forEach(t),Q_o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(Ky.$$.fragment,Ys),H_o=i(Ys),eoe=n(Ys,"P",{});var mzr=s(eoe);U_o=r(mzr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mzr.forEach(t),J_o=i(Ys),nd=n(Ys,"P",{});var Wz=s(nd);Y_o=r(Wz,`Note:
Loading a model from its configuration file does `),ooe=n(Wz,"STRONG",{});var gzr=s(ooe);K_o=r(gzr,"not"),gzr.forEach(t),Z_o=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=n(Wz,"CODE",{});var hzr=s(roe);euo=r(hzr,"from_pretrained()"),hzr.forEach(t),ouo=r(Wz,"to load the model weights."),Wz.forEach(t),ruo=i(Ys),toe=n(Ys,"P",{});var pzr=s(toe);tuo=r(pzr,"Examples:"),pzr.forEach(t),auo=i(Ys),m(Zy.$$.fragment,Ys),Ys.forEach(t),nuo=i(Js),qe=n(Js,"DIV",{class:!0});var Gt=s(qe);m(ew.$$.fragment,Gt),suo=i(Gt),aoe=n(Gt,"P",{});var _zr=s(aoe);luo=r(_zr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_zr.forEach(t),iuo=i(Gt),Wa=n(Gt,"P",{});var l5=s(Wa);duo=r(l5,"The model class to instantiate is selected based on the "),noe=n(l5,"CODE",{});var uzr=s(noe);cuo=r(uzr,"model_type"),uzr.forEach(t),fuo=r(l5,` property of the config object (either
passed as an argument or loaded from `),soe=n(l5,"CODE",{});var bzr=s(soe);muo=r(bzr,"pretrained_model_name_or_path"),bzr.forEach(t),guo=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),loe=n(l5,"CODE",{});var vzr=s(loe);huo=r(vzr,"pretrained_model_name_or_path"),vzr.forEach(t),puo=r(l5,":"),l5.forEach(t),_uo=i(Gt),$=n(Gt,"UL",{});var j=s($);fu=n(j,"LI",{});var N5e=s(fu);ioe=n(N5e,"STRONG",{});var Tzr=s(ioe);uuo=r(Tzr,"bart"),Tzr.forEach(t),buo=r(N5e," \u2014 "),ZP=n(N5e,"A",{href:!0});var Fzr=s(ZP);vuo=r(Fzr,"BartForCausalLM"),Fzr.forEach(t),Tuo=r(N5e," (BART model)"),N5e.forEach(t),Fuo=i(j),mu=n(j,"LI",{});var D5e=s(mu);doe=n(D5e,"STRONG",{});var Czr=s(doe);Cuo=r(Czr,"bert"),Czr.forEach(t),Muo=r(D5e," \u2014 "),e$=n(D5e,"A",{href:!0});var Mzr=s(e$);Euo=r(Mzr,"BertLMHeadModel"),Mzr.forEach(t),yuo=r(D5e," (BERT model)"),D5e.forEach(t),wuo=i(j),gu=n(j,"LI",{});var q5e=s(gu);coe=n(q5e,"STRONG",{});var Ezr=s(coe);Auo=r(Ezr,"bert-generation"),Ezr.forEach(t),Luo=r(q5e," \u2014 "),o$=n(q5e,"A",{href:!0});var yzr=s(o$);Buo=r(yzr,"BertGenerationDecoder"),yzr.forEach(t),xuo=r(q5e," (Bert Generation model)"),q5e.forEach(t),kuo=i(j),hu=n(j,"LI",{});var O5e=s(hu);foe=n(O5e,"STRONG",{});var wzr=s(foe);Ruo=r(wzr,"big_bird"),wzr.forEach(t),Suo=r(O5e," \u2014 "),r$=n(O5e,"A",{href:!0});var Azr=s(r$);Puo=r(Azr,"BigBirdForCausalLM"),Azr.forEach(t),$uo=r(O5e," (BigBird model)"),O5e.forEach(t),Iuo=i(j),pu=n(j,"LI",{});var G5e=s(pu);moe=n(G5e,"STRONG",{});var Lzr=s(moe);juo=r(Lzr,"bigbird_pegasus"),Lzr.forEach(t),Nuo=r(G5e," \u2014 "),t$=n(G5e,"A",{href:!0});var Bzr=s(t$);Duo=r(Bzr,"BigBirdPegasusForCausalLM"),Bzr.forEach(t),quo=r(G5e," (BigBirdPegasus model)"),G5e.forEach(t),Ouo=i(j),_u=n(j,"LI",{});var X5e=s(_u);goe=n(X5e,"STRONG",{});var xzr=s(goe);Guo=r(xzr,"blenderbot"),xzr.forEach(t),Xuo=r(X5e," \u2014 "),a$=n(X5e,"A",{href:!0});var kzr=s(a$);Vuo=r(kzr,"BlenderbotForCausalLM"),kzr.forEach(t),zuo=r(X5e," (Blenderbot model)"),X5e.forEach(t),Wuo=i(j),uu=n(j,"LI",{});var V5e=s(uu);hoe=n(V5e,"STRONG",{});var Rzr=s(hoe);Quo=r(Rzr,"blenderbot-small"),Rzr.forEach(t),Huo=r(V5e," \u2014 "),n$=n(V5e,"A",{href:!0});var Szr=s(n$);Uuo=r(Szr,"BlenderbotSmallForCausalLM"),Szr.forEach(t),Juo=r(V5e," (BlenderbotSmall model)"),V5e.forEach(t),Yuo=i(j),bu=n(j,"LI",{});var z5e=s(bu);poe=n(z5e,"STRONG",{});var Pzr=s(poe);Kuo=r(Pzr,"camembert"),Pzr.forEach(t),Zuo=r(z5e," \u2014 "),s$=n(z5e,"A",{href:!0});var $zr=s(s$);ebo=r($zr,"CamembertForCausalLM"),$zr.forEach(t),obo=r(z5e," (CamemBERT model)"),z5e.forEach(t),rbo=i(j),vu=n(j,"LI",{});var W5e=s(vu);_oe=n(W5e,"STRONG",{});var Izr=s(_oe);tbo=r(Izr,"ctrl"),Izr.forEach(t),abo=r(W5e," \u2014 "),l$=n(W5e,"A",{href:!0});var jzr=s(l$);nbo=r(jzr,"CTRLLMHeadModel"),jzr.forEach(t),sbo=r(W5e," (CTRL model)"),W5e.forEach(t),lbo=i(j),Tu=n(j,"LI",{});var Q5e=s(Tu);uoe=n(Q5e,"STRONG",{});var Nzr=s(uoe);ibo=r(Nzr,"data2vec-text"),Nzr.forEach(t),dbo=r(Q5e," \u2014 "),i$=n(Q5e,"A",{href:!0});var Dzr=s(i$);cbo=r(Dzr,"Data2VecTextForCausalLM"),Dzr.forEach(t),fbo=r(Q5e," (Data2VecText model)"),Q5e.forEach(t),mbo=i(j),Fu=n(j,"LI",{});var H5e=s(Fu);boe=n(H5e,"STRONG",{});var qzr=s(boe);gbo=r(qzr,"electra"),qzr.forEach(t),hbo=r(H5e," \u2014 "),d$=n(H5e,"A",{href:!0});var Ozr=s(d$);pbo=r(Ozr,"ElectraForCausalLM"),Ozr.forEach(t),_bo=r(H5e," (ELECTRA model)"),H5e.forEach(t),ubo=i(j),Cu=n(j,"LI",{});var U5e=s(Cu);voe=n(U5e,"STRONG",{});var Gzr=s(voe);bbo=r(Gzr,"gpt2"),Gzr.forEach(t),vbo=r(U5e," \u2014 "),c$=n(U5e,"A",{href:!0});var Xzr=s(c$);Tbo=r(Xzr,"GPT2LMHeadModel"),Xzr.forEach(t),Fbo=r(U5e," (OpenAI GPT-2 model)"),U5e.forEach(t),Cbo=i(j),Mu=n(j,"LI",{});var J5e=s(Mu);Toe=n(J5e,"STRONG",{});var Vzr=s(Toe);Mbo=r(Vzr,"gpt_neo"),Vzr.forEach(t),Ebo=r(J5e," \u2014 "),f$=n(J5e,"A",{href:!0});var zzr=s(f$);ybo=r(zzr,"GPTNeoForCausalLM"),zzr.forEach(t),wbo=r(J5e," (GPT Neo model)"),J5e.forEach(t),Abo=i(j),Eu=n(j,"LI",{});var Y5e=s(Eu);Foe=n(Y5e,"STRONG",{});var Wzr=s(Foe);Lbo=r(Wzr,"gptj"),Wzr.forEach(t),Bbo=r(Y5e," \u2014 "),m$=n(Y5e,"A",{href:!0});var Qzr=s(m$);xbo=r(Qzr,"GPTJForCausalLM"),Qzr.forEach(t),kbo=r(Y5e," (GPT-J model)"),Y5e.forEach(t),Rbo=i(j),yu=n(j,"LI",{});var K5e=s(yu);Coe=n(K5e,"STRONG",{});var Hzr=s(Coe);Sbo=r(Hzr,"marian"),Hzr.forEach(t),Pbo=r(K5e," \u2014 "),g$=n(K5e,"A",{href:!0});var Uzr=s(g$);$bo=r(Uzr,"MarianForCausalLM"),Uzr.forEach(t),Ibo=r(K5e," (Marian model)"),K5e.forEach(t),jbo=i(j),wu=n(j,"LI",{});var Z5e=s(wu);Moe=n(Z5e,"STRONG",{});var Jzr=s(Moe);Nbo=r(Jzr,"mbart"),Jzr.forEach(t),Dbo=r(Z5e," \u2014 "),h$=n(Z5e,"A",{href:!0});var Yzr=s(h$);qbo=r(Yzr,"MBartForCausalLM"),Yzr.forEach(t),Obo=r(Z5e," (mBART model)"),Z5e.forEach(t),Gbo=i(j),Au=n(j,"LI",{});var eye=s(Au);Eoe=n(eye,"STRONG",{});var Kzr=s(Eoe);Xbo=r(Kzr,"megatron-bert"),Kzr.forEach(t),Vbo=r(eye," \u2014 "),p$=n(eye,"A",{href:!0});var Zzr=s(p$);zbo=r(Zzr,"MegatronBertForCausalLM"),Zzr.forEach(t),Wbo=r(eye," (MegatronBert model)"),eye.forEach(t),Qbo=i(j),Lu=n(j,"LI",{});var oye=s(Lu);yoe=n(oye,"STRONG",{});var eWr=s(yoe);Hbo=r(eWr,"openai-gpt"),eWr.forEach(t),Ubo=r(oye," \u2014 "),_$=n(oye,"A",{href:!0});var oWr=s(_$);Jbo=r(oWr,"OpenAIGPTLMHeadModel"),oWr.forEach(t),Ybo=r(oye," (OpenAI GPT model)"),oye.forEach(t),Kbo=i(j),Bu=n(j,"LI",{});var rye=s(Bu);woe=n(rye,"STRONG",{});var rWr=s(woe);Zbo=r(rWr,"pegasus"),rWr.forEach(t),e3o=r(rye," \u2014 "),u$=n(rye,"A",{href:!0});var tWr=s(u$);o3o=r(tWr,"PegasusForCausalLM"),tWr.forEach(t),r3o=r(rye," (Pegasus model)"),rye.forEach(t),t3o=i(j),xu=n(j,"LI",{});var tye=s(xu);Aoe=n(tye,"STRONG",{});var aWr=s(Aoe);a3o=r(aWr,"plbart"),aWr.forEach(t),n3o=r(tye," \u2014 "),b$=n(tye,"A",{href:!0});var nWr=s(b$);s3o=r(nWr,"PLBartForCausalLM"),nWr.forEach(t),l3o=r(tye," (PLBart model)"),tye.forEach(t),i3o=i(j),ku=n(j,"LI",{});var aye=s(ku);Loe=n(aye,"STRONG",{});var sWr=s(Loe);d3o=r(sWr,"prophetnet"),sWr.forEach(t),c3o=r(aye," \u2014 "),v$=n(aye,"A",{href:!0});var lWr=s(v$);f3o=r(lWr,"ProphetNetForCausalLM"),lWr.forEach(t),m3o=r(aye," (ProphetNet model)"),aye.forEach(t),g3o=i(j),Ru=n(j,"LI",{});var nye=s(Ru);Boe=n(nye,"STRONG",{});var iWr=s(Boe);h3o=r(iWr,"qdqbert"),iWr.forEach(t),p3o=r(nye," \u2014 "),T$=n(nye,"A",{href:!0});var dWr=s(T$);_3o=r(dWr,"QDQBertLMHeadModel"),dWr.forEach(t),u3o=r(nye," (QDQBert model)"),nye.forEach(t),b3o=i(j),Su=n(j,"LI",{});var sye=s(Su);xoe=n(sye,"STRONG",{});var cWr=s(xoe);v3o=r(cWr,"reformer"),cWr.forEach(t),T3o=r(sye," \u2014 "),F$=n(sye,"A",{href:!0});var fWr=s(F$);F3o=r(fWr,"ReformerModelWithLMHead"),fWr.forEach(t),C3o=r(sye," (Reformer model)"),sye.forEach(t),M3o=i(j),Pu=n(j,"LI",{});var lye=s(Pu);koe=n(lye,"STRONG",{});var mWr=s(koe);E3o=r(mWr,"rembert"),mWr.forEach(t),y3o=r(lye," \u2014 "),C$=n(lye,"A",{href:!0});var gWr=s(C$);w3o=r(gWr,"RemBertForCausalLM"),gWr.forEach(t),A3o=r(lye," (RemBERT model)"),lye.forEach(t),L3o=i(j),$u=n(j,"LI",{});var iye=s($u);Roe=n(iye,"STRONG",{});var hWr=s(Roe);B3o=r(hWr,"roberta"),hWr.forEach(t),x3o=r(iye," \u2014 "),M$=n(iye,"A",{href:!0});var pWr=s(M$);k3o=r(pWr,"RobertaForCausalLM"),pWr.forEach(t),R3o=r(iye," (RoBERTa model)"),iye.forEach(t),S3o=i(j),Iu=n(j,"LI",{});var dye=s(Iu);Soe=n(dye,"STRONG",{});var _Wr=s(Soe);P3o=r(_Wr,"roformer"),_Wr.forEach(t),$3o=r(dye," \u2014 "),E$=n(dye,"A",{href:!0});var uWr=s(E$);I3o=r(uWr,"RoFormerForCausalLM"),uWr.forEach(t),j3o=r(dye," (RoFormer model)"),dye.forEach(t),N3o=i(j),ju=n(j,"LI",{});var cye=s(ju);Poe=n(cye,"STRONG",{});var bWr=s(Poe);D3o=r(bWr,"speech_to_text_2"),bWr.forEach(t),q3o=r(cye," \u2014 "),y$=n(cye,"A",{href:!0});var vWr=s(y$);O3o=r(vWr,"Speech2Text2ForCausalLM"),vWr.forEach(t),G3o=r(cye," (Speech2Text2 model)"),cye.forEach(t),X3o=i(j),Nu=n(j,"LI",{});var fye=s(Nu);$oe=n(fye,"STRONG",{});var TWr=s($oe);V3o=r(TWr,"transfo-xl"),TWr.forEach(t),z3o=r(fye," \u2014 "),w$=n(fye,"A",{href:!0});var FWr=s(w$);W3o=r(FWr,"TransfoXLLMHeadModel"),FWr.forEach(t),Q3o=r(fye," (Transformer-XL model)"),fye.forEach(t),H3o=i(j),Du=n(j,"LI",{});var mye=s(Du);Ioe=n(mye,"STRONG",{});var CWr=s(Ioe);U3o=r(CWr,"trocr"),CWr.forEach(t),J3o=r(mye," \u2014 "),A$=n(mye,"A",{href:!0});var MWr=s(A$);Y3o=r(MWr,"TrOCRForCausalLM"),MWr.forEach(t),K3o=r(mye," (TrOCR model)"),mye.forEach(t),Z3o=i(j),qu=n(j,"LI",{});var gye=s(qu);joe=n(gye,"STRONG",{});var EWr=s(joe);e2o=r(EWr,"xglm"),EWr.forEach(t),o2o=r(gye," \u2014 "),L$=n(gye,"A",{href:!0});var yWr=s(L$);r2o=r(yWr,"XGLMForCausalLM"),yWr.forEach(t),t2o=r(gye," (XGLM model)"),gye.forEach(t),a2o=i(j),Ou=n(j,"LI",{});var hye=s(Ou);Noe=n(hye,"STRONG",{});var wWr=s(Noe);n2o=r(wWr,"xlm"),wWr.forEach(t),s2o=r(hye," \u2014 "),B$=n(hye,"A",{href:!0});var AWr=s(B$);l2o=r(AWr,"XLMWithLMHeadModel"),AWr.forEach(t),i2o=r(hye," (XLM model)"),hye.forEach(t),d2o=i(j),Gu=n(j,"LI",{});var pye=s(Gu);Doe=n(pye,"STRONG",{});var LWr=s(Doe);c2o=r(LWr,"xlm-prophetnet"),LWr.forEach(t),f2o=r(pye," \u2014 "),x$=n(pye,"A",{href:!0});var BWr=s(x$);m2o=r(BWr,"XLMProphetNetForCausalLM"),BWr.forEach(t),g2o=r(pye," (XLMProphetNet model)"),pye.forEach(t),h2o=i(j),Xu=n(j,"LI",{});var _ye=s(Xu);qoe=n(_ye,"STRONG",{});var xWr=s(qoe);p2o=r(xWr,"xlm-roberta"),xWr.forEach(t),_2o=r(_ye," \u2014 "),k$=n(_ye,"A",{href:!0});var kWr=s(k$);u2o=r(kWr,"XLMRobertaForCausalLM"),kWr.forEach(t),b2o=r(_ye," (XLM-RoBERTa model)"),_ye.forEach(t),v2o=i(j),Vu=n(j,"LI",{});var uye=s(Vu);Ooe=n(uye,"STRONG",{});var RWr=s(Ooe);T2o=r(RWr,"xlm-roberta-xl"),RWr.forEach(t),F2o=r(uye," \u2014 "),R$=n(uye,"A",{href:!0});var SWr=s(R$);C2o=r(SWr,"XLMRobertaXLForCausalLM"),SWr.forEach(t),M2o=r(uye," (XLM-RoBERTa-XL model)"),uye.forEach(t),E2o=i(j),zu=n(j,"LI",{});var bye=s(zu);Goe=n(bye,"STRONG",{});var PWr=s(Goe);y2o=r(PWr,"xlnet"),PWr.forEach(t),w2o=r(bye," \u2014 "),S$=n(bye,"A",{href:!0});var $Wr=s(S$);A2o=r($Wr,"XLNetLMHeadModel"),$Wr.forEach(t),L2o=r(bye," (XLNet model)"),bye.forEach(t),j.forEach(t),B2o=i(Gt),Wu=n(Gt,"P",{});var vye=s(Wu);x2o=r(vye,"The model is set in evaluation mode by default using "),Xoe=n(vye,"CODE",{});var IWr=s(Xoe);k2o=r(IWr,"model.eval()"),IWr.forEach(t),R2o=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Voe=n(vye,"CODE",{});var jWr=s(Voe);S2o=r(jWr,"model.train()"),jWr.forEach(t),vye.forEach(t),P2o=i(Gt),zoe=n(Gt,"P",{});var NWr=s(zoe);$2o=r(NWr,"Examples:"),NWr.forEach(t),I2o=i(Gt),m(ow.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),tke=i(c),sd=n(c,"H2",{class:!0});var mSe=s(sd);Qu=n(mSe,"A",{id:!0,class:!0,href:!0});var DWr=s(Qu);Woe=n(DWr,"SPAN",{});var qWr=s(Woe);m(rw.$$.fragment,qWr),qWr.forEach(t),DWr.forEach(t),j2o=i(mSe),Qoe=n(mSe,"SPAN",{});var OWr=s(Qoe);N2o=r(OWr,"AutoModelForMaskedLM"),OWr.forEach(t),mSe.forEach(t),ake=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(tw.$$.fragment,Ks),D2o=i(Ks),ld=n(Ks,"P",{});var Qz=s(ld);q2o=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hoe=n(Qz,"CODE",{});var GWr=s(Hoe);O2o=r(GWr,"from_pretrained()"),GWr.forEach(t),G2o=r(Qz,"class method or the "),Uoe=n(Qz,"CODE",{});var XWr=s(Uoe);X2o=r(XWr,"from_config()"),XWr.forEach(t),V2o=r(Qz,`class
method.`),Qz.forEach(t),z2o=i(Ks),aw=n(Ks,"P",{});var gSe=s(aw);W2o=r(gSe,"This class cannot be instantiated directly using "),Joe=n(gSe,"CODE",{});var VWr=s(Joe);Q2o=r(VWr,"__init__()"),VWr.forEach(t),H2o=r(gSe," (throws an error)."),gSe.forEach(t),U2o=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(nw.$$.fragment,Zs),J2o=i(Zs),Yoe=n(Zs,"P",{});var zWr=s(Yoe);Y2o=r(zWr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zWr.forEach(t),K2o=i(Zs),id=n(Zs,"P",{});var Hz=s(id);Z2o=r(Hz,`Note:
Loading a model from its configuration file does `),Koe=n(Hz,"STRONG",{});var WWr=s(Koe);evo=r(WWr,"not"),WWr.forEach(t),ovo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(Hz,"CODE",{});var QWr=s(Zoe);rvo=r(QWr,"from_pretrained()"),QWr.forEach(t),tvo=r(Hz,"to load the model weights."),Hz.forEach(t),avo=i(Zs),ere=n(Zs,"P",{});var HWr=s(ere);nvo=r(HWr,"Examples:"),HWr.forEach(t),svo=i(Zs),m(sw.$$.fragment,Zs),Zs.forEach(t),lvo=i(Ks),Oe=n(Ks,"DIV",{class:!0});var Xt=s(Oe);m(lw.$$.fragment,Xt),ivo=i(Xt),ore=n(Xt,"P",{});var UWr=s(ore);dvo=r(UWr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UWr.forEach(t),cvo=i(Xt),Qa=n(Xt,"P",{});var i5=s(Qa);fvo=r(i5,"The model class to instantiate is selected based on the "),rre=n(i5,"CODE",{});var JWr=s(rre);mvo=r(JWr,"model_type"),JWr.forEach(t),gvo=r(i5,` property of the config object (either
passed as an argument or loaded from `),tre=n(i5,"CODE",{});var YWr=s(tre);hvo=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),pvo=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),are=n(i5,"CODE",{});var KWr=s(are);_vo=r(KWr,"pretrained_model_name_or_path"),KWr.forEach(t),uvo=r(i5,":"),i5.forEach(t),bvo=i(Xt),I=n(Xt,"UL",{});var N=s(I);Hu=n(N,"LI",{});var Tye=s(Hu);nre=n(Tye,"STRONG",{});var ZWr=s(nre);vvo=r(ZWr,"albert"),ZWr.forEach(t),Tvo=r(Tye," \u2014 "),P$=n(Tye,"A",{href:!0});var eQr=s(P$);Fvo=r(eQr,"AlbertForMaskedLM"),eQr.forEach(t),Cvo=r(Tye," (ALBERT model)"),Tye.forEach(t),Mvo=i(N),Uu=n(N,"LI",{});var Fye=s(Uu);sre=n(Fye,"STRONG",{});var oQr=s(sre);Evo=r(oQr,"bart"),oQr.forEach(t),yvo=r(Fye," \u2014 "),$$=n(Fye,"A",{href:!0});var rQr=s($$);wvo=r(rQr,"BartForConditionalGeneration"),rQr.forEach(t),Avo=r(Fye," (BART model)"),Fye.forEach(t),Lvo=i(N),Ju=n(N,"LI",{});var Cye=s(Ju);lre=n(Cye,"STRONG",{});var tQr=s(lre);Bvo=r(tQr,"bert"),tQr.forEach(t),xvo=r(Cye," \u2014 "),I$=n(Cye,"A",{href:!0});var aQr=s(I$);kvo=r(aQr,"BertForMaskedLM"),aQr.forEach(t),Rvo=r(Cye," (BERT model)"),Cye.forEach(t),Svo=i(N),Yu=n(N,"LI",{});var Mye=s(Yu);ire=n(Mye,"STRONG",{});var nQr=s(ire);Pvo=r(nQr,"big_bird"),nQr.forEach(t),$vo=r(Mye," \u2014 "),j$=n(Mye,"A",{href:!0});var sQr=s(j$);Ivo=r(sQr,"BigBirdForMaskedLM"),sQr.forEach(t),jvo=r(Mye," (BigBird model)"),Mye.forEach(t),Nvo=i(N),Ku=n(N,"LI",{});var Eye=s(Ku);dre=n(Eye,"STRONG",{});var lQr=s(dre);Dvo=r(lQr,"camembert"),lQr.forEach(t),qvo=r(Eye," \u2014 "),N$=n(Eye,"A",{href:!0});var iQr=s(N$);Ovo=r(iQr,"CamembertForMaskedLM"),iQr.forEach(t),Gvo=r(Eye," (CamemBERT model)"),Eye.forEach(t),Xvo=i(N),Zu=n(N,"LI",{});var yye=s(Zu);cre=n(yye,"STRONG",{});var dQr=s(cre);Vvo=r(dQr,"convbert"),dQr.forEach(t),zvo=r(yye," \u2014 "),D$=n(yye,"A",{href:!0});var cQr=s(D$);Wvo=r(cQr,"ConvBertForMaskedLM"),cQr.forEach(t),Qvo=r(yye," (ConvBERT model)"),yye.forEach(t),Hvo=i(N),eb=n(N,"LI",{});var wye=s(eb);fre=n(wye,"STRONG",{});var fQr=s(fre);Uvo=r(fQr,"data2vec-text"),fQr.forEach(t),Jvo=r(wye," \u2014 "),q$=n(wye,"A",{href:!0});var mQr=s(q$);Yvo=r(mQr,"Data2VecTextForMaskedLM"),mQr.forEach(t),Kvo=r(wye," (Data2VecText model)"),wye.forEach(t),Zvo=i(N),ob=n(N,"LI",{});var Aye=s(ob);mre=n(Aye,"STRONG",{});var gQr=s(mre);eTo=r(gQr,"deberta"),gQr.forEach(t),oTo=r(Aye," \u2014 "),O$=n(Aye,"A",{href:!0});var hQr=s(O$);rTo=r(hQr,"DebertaForMaskedLM"),hQr.forEach(t),tTo=r(Aye," (DeBERTa model)"),Aye.forEach(t),aTo=i(N),rb=n(N,"LI",{});var Lye=s(rb);gre=n(Lye,"STRONG",{});var pQr=s(gre);nTo=r(pQr,"deberta-v2"),pQr.forEach(t),sTo=r(Lye," \u2014 "),G$=n(Lye,"A",{href:!0});var _Qr=s(G$);lTo=r(_Qr,"DebertaV2ForMaskedLM"),_Qr.forEach(t),iTo=r(Lye," (DeBERTa-v2 model)"),Lye.forEach(t),dTo=i(N),tb=n(N,"LI",{});var Bye=s(tb);hre=n(Bye,"STRONG",{});var uQr=s(hre);cTo=r(uQr,"distilbert"),uQr.forEach(t),fTo=r(Bye," \u2014 "),X$=n(Bye,"A",{href:!0});var bQr=s(X$);mTo=r(bQr,"DistilBertForMaskedLM"),bQr.forEach(t),gTo=r(Bye," (DistilBERT model)"),Bye.forEach(t),hTo=i(N),ab=n(N,"LI",{});var xye=s(ab);pre=n(xye,"STRONG",{});var vQr=s(pre);pTo=r(vQr,"electra"),vQr.forEach(t),_To=r(xye," \u2014 "),V$=n(xye,"A",{href:!0});var TQr=s(V$);uTo=r(TQr,"ElectraForMaskedLM"),TQr.forEach(t),bTo=r(xye," (ELECTRA model)"),xye.forEach(t),vTo=i(N),nb=n(N,"LI",{});var kye=s(nb);_re=n(kye,"STRONG",{});var FQr=s(_re);TTo=r(FQr,"flaubert"),FQr.forEach(t),FTo=r(kye," \u2014 "),z$=n(kye,"A",{href:!0});var CQr=s(z$);CTo=r(CQr,"FlaubertWithLMHeadModel"),CQr.forEach(t),MTo=r(kye," (FlauBERT model)"),kye.forEach(t),ETo=i(N),sb=n(N,"LI",{});var Rye=s(sb);ure=n(Rye,"STRONG",{});var MQr=s(ure);yTo=r(MQr,"fnet"),MQr.forEach(t),wTo=r(Rye," \u2014 "),W$=n(Rye,"A",{href:!0});var EQr=s(W$);ATo=r(EQr,"FNetForMaskedLM"),EQr.forEach(t),LTo=r(Rye," (FNet model)"),Rye.forEach(t),BTo=i(N),lb=n(N,"LI",{});var Sye=s(lb);bre=n(Sye,"STRONG",{});var yQr=s(bre);xTo=r(yQr,"funnel"),yQr.forEach(t),kTo=r(Sye," \u2014 "),Q$=n(Sye,"A",{href:!0});var wQr=s(Q$);RTo=r(wQr,"FunnelForMaskedLM"),wQr.forEach(t),STo=r(Sye," (Funnel Transformer model)"),Sye.forEach(t),PTo=i(N),ib=n(N,"LI",{});var Pye=s(ib);vre=n(Pye,"STRONG",{});var AQr=s(vre);$To=r(AQr,"ibert"),AQr.forEach(t),ITo=r(Pye," \u2014 "),H$=n(Pye,"A",{href:!0});var LQr=s(H$);jTo=r(LQr,"IBertForMaskedLM"),LQr.forEach(t),NTo=r(Pye," (I-BERT model)"),Pye.forEach(t),DTo=i(N),db=n(N,"LI",{});var $ye=s(db);Tre=n($ye,"STRONG",{});var BQr=s(Tre);qTo=r(BQr,"layoutlm"),BQr.forEach(t),OTo=r($ye," \u2014 "),U$=n($ye,"A",{href:!0});var xQr=s(U$);GTo=r(xQr,"LayoutLMForMaskedLM"),xQr.forEach(t),XTo=r($ye," (LayoutLM model)"),$ye.forEach(t),VTo=i(N),cb=n(N,"LI",{});var Iye=s(cb);Fre=n(Iye,"STRONG",{});var kQr=s(Fre);zTo=r(kQr,"longformer"),kQr.forEach(t),WTo=r(Iye," \u2014 "),J$=n(Iye,"A",{href:!0});var RQr=s(J$);QTo=r(RQr,"LongformerForMaskedLM"),RQr.forEach(t),HTo=r(Iye," (Longformer model)"),Iye.forEach(t),UTo=i(N),fb=n(N,"LI",{});var jye=s(fb);Cre=n(jye,"STRONG",{});var SQr=s(Cre);JTo=r(SQr,"mbart"),SQr.forEach(t),YTo=r(jye," \u2014 "),Y$=n(jye,"A",{href:!0});var PQr=s(Y$);KTo=r(PQr,"MBartForConditionalGeneration"),PQr.forEach(t),ZTo=r(jye," (mBART model)"),jye.forEach(t),e1o=i(N),mb=n(N,"LI",{});var Nye=s(mb);Mre=n(Nye,"STRONG",{});var $Qr=s(Mre);o1o=r($Qr,"megatron-bert"),$Qr.forEach(t),r1o=r(Nye," \u2014 "),K$=n(Nye,"A",{href:!0});var IQr=s(K$);t1o=r(IQr,"MegatronBertForMaskedLM"),IQr.forEach(t),a1o=r(Nye," (MegatronBert model)"),Nye.forEach(t),n1o=i(N),gb=n(N,"LI",{});var Dye=s(gb);Ere=n(Dye,"STRONG",{});var jQr=s(Ere);s1o=r(jQr,"mobilebert"),jQr.forEach(t),l1o=r(Dye," \u2014 "),Z$=n(Dye,"A",{href:!0});var NQr=s(Z$);i1o=r(NQr,"MobileBertForMaskedLM"),NQr.forEach(t),d1o=r(Dye," (MobileBERT model)"),Dye.forEach(t),c1o=i(N),hb=n(N,"LI",{});var qye=s(hb);yre=n(qye,"STRONG",{});var DQr=s(yre);f1o=r(DQr,"mpnet"),DQr.forEach(t),m1o=r(qye," \u2014 "),eI=n(qye,"A",{href:!0});var qQr=s(eI);g1o=r(qQr,"MPNetForMaskedLM"),qQr.forEach(t),h1o=r(qye," (MPNet model)"),qye.forEach(t),p1o=i(N),pb=n(N,"LI",{});var Oye=s(pb);wre=n(Oye,"STRONG",{});var OQr=s(wre);_1o=r(OQr,"nystromformer"),OQr.forEach(t),u1o=r(Oye," \u2014 "),oI=n(Oye,"A",{href:!0});var GQr=s(oI);b1o=r(GQr,"NystromformerForMaskedLM"),GQr.forEach(t),v1o=r(Oye," (Nystromformer model)"),Oye.forEach(t),T1o=i(N),_b=n(N,"LI",{});var Gye=s(_b);Are=n(Gye,"STRONG",{});var XQr=s(Are);F1o=r(XQr,"perceiver"),XQr.forEach(t),C1o=r(Gye," \u2014 "),rI=n(Gye,"A",{href:!0});var VQr=s(rI);M1o=r(VQr,"PerceiverForMaskedLM"),VQr.forEach(t),E1o=r(Gye," (Perceiver model)"),Gye.forEach(t),y1o=i(N),ub=n(N,"LI",{});var Xye=s(ub);Lre=n(Xye,"STRONG",{});var zQr=s(Lre);w1o=r(zQr,"qdqbert"),zQr.forEach(t),A1o=r(Xye," \u2014 "),tI=n(Xye,"A",{href:!0});var WQr=s(tI);L1o=r(WQr,"QDQBertForMaskedLM"),WQr.forEach(t),B1o=r(Xye," (QDQBert model)"),Xye.forEach(t),x1o=i(N),bb=n(N,"LI",{});var Vye=s(bb);Bre=n(Vye,"STRONG",{});var QQr=s(Bre);k1o=r(QQr,"reformer"),QQr.forEach(t),R1o=r(Vye," \u2014 "),aI=n(Vye,"A",{href:!0});var HQr=s(aI);S1o=r(HQr,"ReformerForMaskedLM"),HQr.forEach(t),P1o=r(Vye," (Reformer model)"),Vye.forEach(t),$1o=i(N),vb=n(N,"LI",{});var zye=s(vb);xre=n(zye,"STRONG",{});var UQr=s(xre);I1o=r(UQr,"rembert"),UQr.forEach(t),j1o=r(zye," \u2014 "),nI=n(zye,"A",{href:!0});var JQr=s(nI);N1o=r(JQr,"RemBertForMaskedLM"),JQr.forEach(t),D1o=r(zye," (RemBERT model)"),zye.forEach(t),q1o=i(N),Tb=n(N,"LI",{});var Wye=s(Tb);kre=n(Wye,"STRONG",{});var YQr=s(kre);O1o=r(YQr,"roberta"),YQr.forEach(t),G1o=r(Wye," \u2014 "),sI=n(Wye,"A",{href:!0});var KQr=s(sI);X1o=r(KQr,"RobertaForMaskedLM"),KQr.forEach(t),V1o=r(Wye," (RoBERTa model)"),Wye.forEach(t),z1o=i(N),Fb=n(N,"LI",{});var Qye=s(Fb);Rre=n(Qye,"STRONG",{});var ZQr=s(Rre);W1o=r(ZQr,"roformer"),ZQr.forEach(t),Q1o=r(Qye," \u2014 "),lI=n(Qye,"A",{href:!0});var eHr=s(lI);H1o=r(eHr,"RoFormerForMaskedLM"),eHr.forEach(t),U1o=r(Qye," (RoFormer model)"),Qye.forEach(t),J1o=i(N),Cb=n(N,"LI",{});var Hye=s(Cb);Sre=n(Hye,"STRONG",{});var oHr=s(Sre);Y1o=r(oHr,"squeezebert"),oHr.forEach(t),K1o=r(Hye," \u2014 "),iI=n(Hye,"A",{href:!0});var rHr=s(iI);Z1o=r(rHr,"SqueezeBertForMaskedLM"),rHr.forEach(t),eFo=r(Hye," (SqueezeBERT model)"),Hye.forEach(t),oFo=i(N),Mb=n(N,"LI",{});var Uye=s(Mb);Pre=n(Uye,"STRONG",{});var tHr=s(Pre);rFo=r(tHr,"tapas"),tHr.forEach(t),tFo=r(Uye," \u2014 "),dI=n(Uye,"A",{href:!0});var aHr=s(dI);aFo=r(aHr,"TapasForMaskedLM"),aHr.forEach(t),nFo=r(Uye," (TAPAS model)"),Uye.forEach(t),sFo=i(N),Eb=n(N,"LI",{});var Jye=s(Eb);$re=n(Jye,"STRONG",{});var nHr=s($re);lFo=r(nHr,"wav2vec2"),nHr.forEach(t),iFo=r(Jye," \u2014 "),Ire=n(Jye,"CODE",{});var sHr=s(Ire);dFo=r(sHr,"Wav2Vec2ForMaskedLM"),sHr.forEach(t),cFo=r(Jye,"(Wav2Vec2 model)"),Jye.forEach(t),fFo=i(N),yb=n(N,"LI",{});var Yye=s(yb);jre=n(Yye,"STRONG",{});var lHr=s(jre);mFo=r(lHr,"xlm"),lHr.forEach(t),gFo=r(Yye," \u2014 "),cI=n(Yye,"A",{href:!0});var iHr=s(cI);hFo=r(iHr,"XLMWithLMHeadModel"),iHr.forEach(t),pFo=r(Yye," (XLM model)"),Yye.forEach(t),_Fo=i(N),wb=n(N,"LI",{});var Kye=s(wb);Nre=n(Kye,"STRONG",{});var dHr=s(Nre);uFo=r(dHr,"xlm-roberta"),dHr.forEach(t),bFo=r(Kye," \u2014 "),fI=n(Kye,"A",{href:!0});var cHr=s(fI);vFo=r(cHr,"XLMRobertaForMaskedLM"),cHr.forEach(t),TFo=r(Kye," (XLM-RoBERTa model)"),Kye.forEach(t),FFo=i(N),Ab=n(N,"LI",{});var Zye=s(Ab);Dre=n(Zye,"STRONG",{});var fHr=s(Dre);CFo=r(fHr,"xlm-roberta-xl"),fHr.forEach(t),MFo=r(Zye," \u2014 "),mI=n(Zye,"A",{href:!0});var mHr=s(mI);EFo=r(mHr,"XLMRobertaXLForMaskedLM"),mHr.forEach(t),yFo=r(Zye," (XLM-RoBERTa-XL model)"),Zye.forEach(t),wFo=i(N),Lb=n(N,"LI",{});var ewe=s(Lb);qre=n(ewe,"STRONG",{});var gHr=s(qre);AFo=r(gHr,"yoso"),gHr.forEach(t),LFo=r(ewe," \u2014 "),gI=n(ewe,"A",{href:!0});var hHr=s(gI);BFo=r(hHr,"YosoForMaskedLM"),hHr.forEach(t),xFo=r(ewe," (YOSO model)"),ewe.forEach(t),N.forEach(t),kFo=i(Xt),Bb=n(Xt,"P",{});var owe=s(Bb);RFo=r(owe,"The model is set in evaluation mode by default using "),Ore=n(owe,"CODE",{});var pHr=s(Ore);SFo=r(pHr,"model.eval()"),pHr.forEach(t),PFo=r(owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gre=n(owe,"CODE",{});var _Hr=s(Gre);$Fo=r(_Hr,"model.train()"),_Hr.forEach(t),owe.forEach(t),IFo=i(Xt),Xre=n(Xt,"P",{});var uHr=s(Xre);jFo=r(uHr,"Examples:"),uHr.forEach(t),NFo=i(Xt),m(iw.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),nke=i(c),dd=n(c,"H2",{class:!0});var hSe=s(dd);xb=n(hSe,"A",{id:!0,class:!0,href:!0});var bHr=s(xb);Vre=n(bHr,"SPAN",{});var vHr=s(Vre);m(dw.$$.fragment,vHr),vHr.forEach(t),bHr.forEach(t),DFo=i(hSe),zre=n(hSe,"SPAN",{});var THr=s(zre);qFo=r(THr,"AutoModelForSeq2SeqLM"),THr.forEach(t),hSe.forEach(t),ske=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(cw.$$.fragment,el),OFo=i(el),cd=n(el,"P",{});var Uz=s(cd);GFo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wre=n(Uz,"CODE",{});var FHr=s(Wre);XFo=r(FHr,"from_pretrained()"),FHr.forEach(t),VFo=r(Uz,"class method or the "),Qre=n(Uz,"CODE",{});var CHr=s(Qre);zFo=r(CHr,"from_config()"),CHr.forEach(t),WFo=r(Uz,`class
method.`),Uz.forEach(t),QFo=i(el),fw=n(el,"P",{});var pSe=s(fw);HFo=r(pSe,"This class cannot be instantiated directly using "),Hre=n(pSe,"CODE",{});var MHr=s(Hre);UFo=r(MHr,"__init__()"),MHr.forEach(t),JFo=r(pSe," (throws an error)."),pSe.forEach(t),YFo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(mw.$$.fragment,ol),KFo=i(ol),Ure=n(ol,"P",{});var EHr=s(Ure);ZFo=r(EHr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EHr.forEach(t),eCo=i(ol),fd=n(ol,"P",{});var Jz=s(fd);oCo=r(Jz,`Note:
Loading a model from its configuration file does `),Jre=n(Jz,"STRONG",{});var yHr=s(Jre);rCo=r(yHr,"not"),yHr.forEach(t),tCo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yre=n(Jz,"CODE",{});var wHr=s(Yre);aCo=r(wHr,"from_pretrained()"),wHr.forEach(t),nCo=r(Jz,"to load the model weights."),Jz.forEach(t),sCo=i(ol),Kre=n(ol,"P",{});var AHr=s(Kre);lCo=r(AHr,"Examples:"),AHr.forEach(t),iCo=i(ol),m(gw.$$.fragment,ol),ol.forEach(t),dCo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(hw.$$.fragment,Vt),cCo=i(Vt),Zre=n(Vt,"P",{});var LHr=s(Zre);fCo=r(LHr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LHr.forEach(t),mCo=i(Vt),Ha=n(Vt,"P",{});var d5=s(Ha);gCo=r(d5,"The model class to instantiate is selected based on the "),ete=n(d5,"CODE",{});var BHr=s(ete);hCo=r(BHr,"model_type"),BHr.forEach(t),pCo=r(d5,` property of the config object (either
passed as an argument or loaded from `),ote=n(d5,"CODE",{});var xHr=s(ote);_Co=r(xHr,"pretrained_model_name_or_path"),xHr.forEach(t),uCo=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rte=n(d5,"CODE",{});var kHr=s(rte);bCo=r(kHr,"pretrained_model_name_or_path"),kHr.forEach(t),vCo=r(d5,":"),d5.forEach(t),TCo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);kb=n(ie,"LI",{});var rwe=s(kb);tte=n(rwe,"STRONG",{});var RHr=s(tte);FCo=r(RHr,"bart"),RHr.forEach(t),CCo=r(rwe," \u2014 "),hI=n(rwe,"A",{href:!0});var SHr=s(hI);MCo=r(SHr,"BartForConditionalGeneration"),SHr.forEach(t),ECo=r(rwe," (BART model)"),rwe.forEach(t),yCo=i(ie),Rb=n(ie,"LI",{});var twe=s(Rb);ate=n(twe,"STRONG",{});var PHr=s(ate);wCo=r(PHr,"bigbird_pegasus"),PHr.forEach(t),ACo=r(twe," \u2014 "),pI=n(twe,"A",{href:!0});var $Hr=s(pI);LCo=r($Hr,"BigBirdPegasusForConditionalGeneration"),$Hr.forEach(t),BCo=r(twe," (BigBirdPegasus model)"),twe.forEach(t),xCo=i(ie),Sb=n(ie,"LI",{});var awe=s(Sb);nte=n(awe,"STRONG",{});var IHr=s(nte);kCo=r(IHr,"blenderbot"),IHr.forEach(t),RCo=r(awe," \u2014 "),_I=n(awe,"A",{href:!0});var jHr=s(_I);SCo=r(jHr,"BlenderbotForConditionalGeneration"),jHr.forEach(t),PCo=r(awe," (Blenderbot model)"),awe.forEach(t),$Co=i(ie),Pb=n(ie,"LI",{});var nwe=s(Pb);ste=n(nwe,"STRONG",{});var NHr=s(ste);ICo=r(NHr,"blenderbot-small"),NHr.forEach(t),jCo=r(nwe," \u2014 "),uI=n(nwe,"A",{href:!0});var DHr=s(uI);NCo=r(DHr,"BlenderbotSmallForConditionalGeneration"),DHr.forEach(t),DCo=r(nwe," (BlenderbotSmall model)"),nwe.forEach(t),qCo=i(ie),$b=n(ie,"LI",{});var swe=s($b);lte=n(swe,"STRONG",{});var qHr=s(lte);OCo=r(qHr,"encoder-decoder"),qHr.forEach(t),GCo=r(swe," \u2014 "),bI=n(swe,"A",{href:!0});var OHr=s(bI);XCo=r(OHr,"EncoderDecoderModel"),OHr.forEach(t),VCo=r(swe," (Encoder decoder model)"),swe.forEach(t),zCo=i(ie),Ib=n(ie,"LI",{});var lwe=s(Ib);ite=n(lwe,"STRONG",{});var GHr=s(ite);WCo=r(GHr,"fsmt"),GHr.forEach(t),QCo=r(lwe," \u2014 "),vI=n(lwe,"A",{href:!0});var XHr=s(vI);HCo=r(XHr,"FSMTForConditionalGeneration"),XHr.forEach(t),UCo=r(lwe," (FairSeq Machine-Translation model)"),lwe.forEach(t),JCo=i(ie),jb=n(ie,"LI",{});var iwe=s(jb);dte=n(iwe,"STRONG",{});var VHr=s(dte);YCo=r(VHr,"led"),VHr.forEach(t),KCo=r(iwe," \u2014 "),TI=n(iwe,"A",{href:!0});var zHr=s(TI);ZCo=r(zHr,"LEDForConditionalGeneration"),zHr.forEach(t),eMo=r(iwe," (LED model)"),iwe.forEach(t),oMo=i(ie),Nb=n(ie,"LI",{});var dwe=s(Nb);cte=n(dwe,"STRONG",{});var WHr=s(cte);rMo=r(WHr,"m2m_100"),WHr.forEach(t),tMo=r(dwe," \u2014 "),FI=n(dwe,"A",{href:!0});var QHr=s(FI);aMo=r(QHr,"M2M100ForConditionalGeneration"),QHr.forEach(t),nMo=r(dwe," (M2M100 model)"),dwe.forEach(t),sMo=i(ie),Db=n(ie,"LI",{});var cwe=s(Db);fte=n(cwe,"STRONG",{});var HHr=s(fte);lMo=r(HHr,"marian"),HHr.forEach(t),iMo=r(cwe," \u2014 "),CI=n(cwe,"A",{href:!0});var UHr=s(CI);dMo=r(UHr,"MarianMTModel"),UHr.forEach(t),cMo=r(cwe," (Marian model)"),cwe.forEach(t),fMo=i(ie),qb=n(ie,"LI",{});var fwe=s(qb);mte=n(fwe,"STRONG",{});var JHr=s(mte);mMo=r(JHr,"mbart"),JHr.forEach(t),gMo=r(fwe," \u2014 "),MI=n(fwe,"A",{href:!0});var YHr=s(MI);hMo=r(YHr,"MBartForConditionalGeneration"),YHr.forEach(t),pMo=r(fwe," (mBART model)"),fwe.forEach(t),_Mo=i(ie),Ob=n(ie,"LI",{});var mwe=s(Ob);gte=n(mwe,"STRONG",{});var KHr=s(gte);uMo=r(KHr,"mt5"),KHr.forEach(t),bMo=r(mwe," \u2014 "),EI=n(mwe,"A",{href:!0});var ZHr=s(EI);vMo=r(ZHr,"MT5ForConditionalGeneration"),ZHr.forEach(t),TMo=r(mwe," (mT5 model)"),mwe.forEach(t),FMo=i(ie),Gb=n(ie,"LI",{});var gwe=s(Gb);hte=n(gwe,"STRONG",{});var eUr=s(hte);CMo=r(eUr,"pegasus"),eUr.forEach(t),MMo=r(gwe," \u2014 "),yI=n(gwe,"A",{href:!0});var oUr=s(yI);EMo=r(oUr,"PegasusForConditionalGeneration"),oUr.forEach(t),yMo=r(gwe," (Pegasus model)"),gwe.forEach(t),wMo=i(ie),Xb=n(ie,"LI",{});var hwe=s(Xb);pte=n(hwe,"STRONG",{});var rUr=s(pte);AMo=r(rUr,"plbart"),rUr.forEach(t),LMo=r(hwe," \u2014 "),wI=n(hwe,"A",{href:!0});var tUr=s(wI);BMo=r(tUr,"PLBartForConditionalGeneration"),tUr.forEach(t),xMo=r(hwe," (PLBart model)"),hwe.forEach(t),kMo=i(ie),Vb=n(ie,"LI",{});var pwe=s(Vb);_te=n(pwe,"STRONG",{});var aUr=s(_te);RMo=r(aUr,"prophetnet"),aUr.forEach(t),SMo=r(pwe," \u2014 "),AI=n(pwe,"A",{href:!0});var nUr=s(AI);PMo=r(nUr,"ProphetNetForConditionalGeneration"),nUr.forEach(t),$Mo=r(pwe," (ProphetNet model)"),pwe.forEach(t),IMo=i(ie),zb=n(ie,"LI",{});var _we=s(zb);ute=n(_we,"STRONG",{});var sUr=s(ute);jMo=r(sUr,"t5"),sUr.forEach(t),NMo=r(_we," \u2014 "),LI=n(_we,"A",{href:!0});var lUr=s(LI);DMo=r(lUr,"T5ForConditionalGeneration"),lUr.forEach(t),qMo=r(_we," (T5 model)"),_we.forEach(t),OMo=i(ie),Wb=n(ie,"LI",{});var uwe=s(Wb);bte=n(uwe,"STRONG",{});var iUr=s(bte);GMo=r(iUr,"xlm-prophetnet"),iUr.forEach(t),XMo=r(uwe," \u2014 "),BI=n(uwe,"A",{href:!0});var dUr=s(BI);VMo=r(dUr,"XLMProphetNetForConditionalGeneration"),dUr.forEach(t),zMo=r(uwe," (XLMProphetNet model)"),uwe.forEach(t),ie.forEach(t),WMo=i(Vt),Qb=n(Vt,"P",{});var bwe=s(Qb);QMo=r(bwe,"The model is set in evaluation mode by default using "),vte=n(bwe,"CODE",{});var cUr=s(vte);HMo=r(cUr,"model.eval()"),cUr.forEach(t),UMo=r(bwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tte=n(bwe,"CODE",{});var fUr=s(Tte);JMo=r(fUr,"model.train()"),fUr.forEach(t),bwe.forEach(t),YMo=i(Vt),Fte=n(Vt,"P",{});var mUr=s(Fte);KMo=r(mUr,"Examples:"),mUr.forEach(t),ZMo=i(Vt),m(pw.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),lke=i(c),md=n(c,"H2",{class:!0});var _Se=s(md);Hb=n(_Se,"A",{id:!0,class:!0,href:!0});var gUr=s(Hb);Cte=n(gUr,"SPAN",{});var hUr=s(Cte);m(_w.$$.fragment,hUr),hUr.forEach(t),gUr.forEach(t),e4o=i(_Se),Mte=n(_Se,"SPAN",{});var pUr=s(Mte);o4o=r(pUr,"AutoModelForSequenceClassification"),pUr.forEach(t),_Se.forEach(t),ike=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(uw.$$.fragment,rl),r4o=i(rl),gd=n(rl,"P",{});var Yz=s(gd);t4o=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ete=n(Yz,"CODE",{});var _Ur=s(Ete);a4o=r(_Ur,"from_pretrained()"),_Ur.forEach(t),n4o=r(Yz,"class method or the "),yte=n(Yz,"CODE",{});var uUr=s(yte);s4o=r(uUr,"from_config()"),uUr.forEach(t),l4o=r(Yz,`class
method.`),Yz.forEach(t),i4o=i(rl),bw=n(rl,"P",{});var uSe=s(bw);d4o=r(uSe,"This class cannot be instantiated directly using "),wte=n(uSe,"CODE",{});var bUr=s(wte);c4o=r(bUr,"__init__()"),bUr.forEach(t),f4o=r(uSe," (throws an error)."),uSe.forEach(t),m4o=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(vw.$$.fragment,tl),g4o=i(tl),Ate=n(tl,"P",{});var vUr=s(Ate);h4o=r(vUr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vUr.forEach(t),p4o=i(tl),hd=n(tl,"P",{});var Kz=s(hd);_4o=r(Kz,`Note:
Loading a model from its configuration file does `),Lte=n(Kz,"STRONG",{});var TUr=s(Lte);u4o=r(TUr,"not"),TUr.forEach(t),b4o=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=n(Kz,"CODE",{});var FUr=s(Bte);v4o=r(FUr,"from_pretrained()"),FUr.forEach(t),T4o=r(Kz,"to load the model weights."),Kz.forEach(t),F4o=i(tl),xte=n(tl,"P",{});var CUr=s(xte);C4o=r(CUr,"Examples:"),CUr.forEach(t),M4o=i(tl),m(Tw.$$.fragment,tl),tl.forEach(t),E4o=i(rl),Xe=n(rl,"DIV",{class:!0});var zt=s(Xe);m(Fw.$$.fragment,zt),y4o=i(zt),kte=n(zt,"P",{});var MUr=s(kte);w4o=r(MUr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MUr.forEach(t),A4o=i(zt),Ua=n(zt,"P",{});var c5=s(Ua);L4o=r(c5,"The model class to instantiate is selected based on the "),Rte=n(c5,"CODE",{});var EUr=s(Rte);B4o=r(EUr,"model_type"),EUr.forEach(t),x4o=r(c5,` property of the config object (either
passed as an argument or loaded from `),Ste=n(c5,"CODE",{});var yUr=s(Ste);k4o=r(yUr,"pretrained_model_name_or_path"),yUr.forEach(t),R4o=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=n(c5,"CODE",{});var wUr=s(Pte);S4o=r(wUr,"pretrained_model_name_or_path"),wUr.forEach(t),P4o=r(c5,":"),c5.forEach(t),$4o=i(zt),A=n(zt,"UL",{});var L=s(A);Ub=n(L,"LI",{});var vwe=s(Ub);$te=n(vwe,"STRONG",{});var AUr=s($te);I4o=r(AUr,"albert"),AUr.forEach(t),j4o=r(vwe," \u2014 "),xI=n(vwe,"A",{href:!0});var LUr=s(xI);N4o=r(LUr,"AlbertForSequenceClassification"),LUr.forEach(t),D4o=r(vwe," (ALBERT model)"),vwe.forEach(t),q4o=i(L),Jb=n(L,"LI",{});var Twe=s(Jb);Ite=n(Twe,"STRONG",{});var BUr=s(Ite);O4o=r(BUr,"bart"),BUr.forEach(t),G4o=r(Twe," \u2014 "),kI=n(Twe,"A",{href:!0});var xUr=s(kI);X4o=r(xUr,"BartForSequenceClassification"),xUr.forEach(t),V4o=r(Twe," (BART model)"),Twe.forEach(t),z4o=i(L),Yb=n(L,"LI",{});var Fwe=s(Yb);jte=n(Fwe,"STRONG",{});var kUr=s(jte);W4o=r(kUr,"bert"),kUr.forEach(t),Q4o=r(Fwe," \u2014 "),RI=n(Fwe,"A",{href:!0});var RUr=s(RI);H4o=r(RUr,"BertForSequenceClassification"),RUr.forEach(t),U4o=r(Fwe," (BERT model)"),Fwe.forEach(t),J4o=i(L),Kb=n(L,"LI",{});var Cwe=s(Kb);Nte=n(Cwe,"STRONG",{});var SUr=s(Nte);Y4o=r(SUr,"big_bird"),SUr.forEach(t),K4o=r(Cwe," \u2014 "),SI=n(Cwe,"A",{href:!0});var PUr=s(SI);Z4o=r(PUr,"BigBirdForSequenceClassification"),PUr.forEach(t),eEo=r(Cwe," (BigBird model)"),Cwe.forEach(t),oEo=i(L),Zb=n(L,"LI",{});var Mwe=s(Zb);Dte=n(Mwe,"STRONG",{});var $Ur=s(Dte);rEo=r($Ur,"bigbird_pegasus"),$Ur.forEach(t),tEo=r(Mwe," \u2014 "),PI=n(Mwe,"A",{href:!0});var IUr=s(PI);aEo=r(IUr,"BigBirdPegasusForSequenceClassification"),IUr.forEach(t),nEo=r(Mwe," (BigBirdPegasus model)"),Mwe.forEach(t),sEo=i(L),e3=n(L,"LI",{});var Ewe=s(e3);qte=n(Ewe,"STRONG",{});var jUr=s(qte);lEo=r(jUr,"camembert"),jUr.forEach(t),iEo=r(Ewe," \u2014 "),$I=n(Ewe,"A",{href:!0});var NUr=s($I);dEo=r(NUr,"CamembertForSequenceClassification"),NUr.forEach(t),cEo=r(Ewe," (CamemBERT model)"),Ewe.forEach(t),fEo=i(L),o3=n(L,"LI",{});var ywe=s(o3);Ote=n(ywe,"STRONG",{});var DUr=s(Ote);mEo=r(DUr,"canine"),DUr.forEach(t),gEo=r(ywe," \u2014 "),II=n(ywe,"A",{href:!0});var qUr=s(II);hEo=r(qUr,"CanineForSequenceClassification"),qUr.forEach(t),pEo=r(ywe," (Canine model)"),ywe.forEach(t),_Eo=i(L),r3=n(L,"LI",{});var wwe=s(r3);Gte=n(wwe,"STRONG",{});var OUr=s(Gte);uEo=r(OUr,"convbert"),OUr.forEach(t),bEo=r(wwe," \u2014 "),jI=n(wwe,"A",{href:!0});var GUr=s(jI);vEo=r(GUr,"ConvBertForSequenceClassification"),GUr.forEach(t),TEo=r(wwe," (ConvBERT model)"),wwe.forEach(t),FEo=i(L),t3=n(L,"LI",{});var Awe=s(t3);Xte=n(Awe,"STRONG",{});var XUr=s(Xte);CEo=r(XUr,"ctrl"),XUr.forEach(t),MEo=r(Awe," \u2014 "),NI=n(Awe,"A",{href:!0});var VUr=s(NI);EEo=r(VUr,"CTRLForSequenceClassification"),VUr.forEach(t),yEo=r(Awe," (CTRL model)"),Awe.forEach(t),wEo=i(L),a3=n(L,"LI",{});var Lwe=s(a3);Vte=n(Lwe,"STRONG",{});var zUr=s(Vte);AEo=r(zUr,"data2vec-text"),zUr.forEach(t),LEo=r(Lwe," \u2014 "),DI=n(Lwe,"A",{href:!0});var WUr=s(DI);BEo=r(WUr,"Data2VecTextForSequenceClassification"),WUr.forEach(t),xEo=r(Lwe," (Data2VecText model)"),Lwe.forEach(t),kEo=i(L),n3=n(L,"LI",{});var Bwe=s(n3);zte=n(Bwe,"STRONG",{});var QUr=s(zte);REo=r(QUr,"deberta"),QUr.forEach(t),SEo=r(Bwe," \u2014 "),qI=n(Bwe,"A",{href:!0});var HUr=s(qI);PEo=r(HUr,"DebertaForSequenceClassification"),HUr.forEach(t),$Eo=r(Bwe," (DeBERTa model)"),Bwe.forEach(t),IEo=i(L),s3=n(L,"LI",{});var xwe=s(s3);Wte=n(xwe,"STRONG",{});var UUr=s(Wte);jEo=r(UUr,"deberta-v2"),UUr.forEach(t),NEo=r(xwe," \u2014 "),OI=n(xwe,"A",{href:!0});var JUr=s(OI);DEo=r(JUr,"DebertaV2ForSequenceClassification"),JUr.forEach(t),qEo=r(xwe," (DeBERTa-v2 model)"),xwe.forEach(t),OEo=i(L),l3=n(L,"LI",{});var kwe=s(l3);Qte=n(kwe,"STRONG",{});var YUr=s(Qte);GEo=r(YUr,"distilbert"),YUr.forEach(t),XEo=r(kwe," \u2014 "),GI=n(kwe,"A",{href:!0});var KUr=s(GI);VEo=r(KUr,"DistilBertForSequenceClassification"),KUr.forEach(t),zEo=r(kwe," (DistilBERT model)"),kwe.forEach(t),WEo=i(L),i3=n(L,"LI",{});var Rwe=s(i3);Hte=n(Rwe,"STRONG",{});var ZUr=s(Hte);QEo=r(ZUr,"electra"),ZUr.forEach(t),HEo=r(Rwe," \u2014 "),XI=n(Rwe,"A",{href:!0});var eJr=s(XI);UEo=r(eJr,"ElectraForSequenceClassification"),eJr.forEach(t),JEo=r(Rwe," (ELECTRA model)"),Rwe.forEach(t),YEo=i(L),d3=n(L,"LI",{});var Swe=s(d3);Ute=n(Swe,"STRONG",{});var oJr=s(Ute);KEo=r(oJr,"flaubert"),oJr.forEach(t),ZEo=r(Swe," \u2014 "),VI=n(Swe,"A",{href:!0});var rJr=s(VI);e5o=r(rJr,"FlaubertForSequenceClassification"),rJr.forEach(t),o5o=r(Swe," (FlauBERT model)"),Swe.forEach(t),r5o=i(L),c3=n(L,"LI",{});var Pwe=s(c3);Jte=n(Pwe,"STRONG",{});var tJr=s(Jte);t5o=r(tJr,"fnet"),tJr.forEach(t),a5o=r(Pwe," \u2014 "),zI=n(Pwe,"A",{href:!0});var aJr=s(zI);n5o=r(aJr,"FNetForSequenceClassification"),aJr.forEach(t),s5o=r(Pwe," (FNet model)"),Pwe.forEach(t),l5o=i(L),f3=n(L,"LI",{});var $we=s(f3);Yte=n($we,"STRONG",{});var nJr=s(Yte);i5o=r(nJr,"funnel"),nJr.forEach(t),d5o=r($we," \u2014 "),WI=n($we,"A",{href:!0});var sJr=s(WI);c5o=r(sJr,"FunnelForSequenceClassification"),sJr.forEach(t),f5o=r($we," (Funnel Transformer model)"),$we.forEach(t),m5o=i(L),m3=n(L,"LI",{});var Iwe=s(m3);Kte=n(Iwe,"STRONG",{});var lJr=s(Kte);g5o=r(lJr,"gpt2"),lJr.forEach(t),h5o=r(Iwe," \u2014 "),QI=n(Iwe,"A",{href:!0});var iJr=s(QI);p5o=r(iJr,"GPT2ForSequenceClassification"),iJr.forEach(t),_5o=r(Iwe," (OpenAI GPT-2 model)"),Iwe.forEach(t),u5o=i(L),g3=n(L,"LI",{});var jwe=s(g3);Zte=n(jwe,"STRONG",{});var dJr=s(Zte);b5o=r(dJr,"gpt_neo"),dJr.forEach(t),v5o=r(jwe," \u2014 "),HI=n(jwe,"A",{href:!0});var cJr=s(HI);T5o=r(cJr,"GPTNeoForSequenceClassification"),cJr.forEach(t),F5o=r(jwe," (GPT Neo model)"),jwe.forEach(t),C5o=i(L),h3=n(L,"LI",{});var Nwe=s(h3);eae=n(Nwe,"STRONG",{});var fJr=s(eae);M5o=r(fJr,"gptj"),fJr.forEach(t),E5o=r(Nwe," \u2014 "),UI=n(Nwe,"A",{href:!0});var mJr=s(UI);y5o=r(mJr,"GPTJForSequenceClassification"),mJr.forEach(t),w5o=r(Nwe," (GPT-J model)"),Nwe.forEach(t),A5o=i(L),p3=n(L,"LI",{});var Dwe=s(p3);oae=n(Dwe,"STRONG",{});var gJr=s(oae);L5o=r(gJr,"ibert"),gJr.forEach(t),B5o=r(Dwe," \u2014 "),JI=n(Dwe,"A",{href:!0});var hJr=s(JI);x5o=r(hJr,"IBertForSequenceClassification"),hJr.forEach(t),k5o=r(Dwe," (I-BERT model)"),Dwe.forEach(t),R5o=i(L),_3=n(L,"LI",{});var qwe=s(_3);rae=n(qwe,"STRONG",{});var pJr=s(rae);S5o=r(pJr,"layoutlm"),pJr.forEach(t),P5o=r(qwe," \u2014 "),YI=n(qwe,"A",{href:!0});var _Jr=s(YI);$5o=r(_Jr,"LayoutLMForSequenceClassification"),_Jr.forEach(t),I5o=r(qwe," (LayoutLM model)"),qwe.forEach(t),j5o=i(L),u3=n(L,"LI",{});var Owe=s(u3);tae=n(Owe,"STRONG",{});var uJr=s(tae);N5o=r(uJr,"layoutlmv2"),uJr.forEach(t),D5o=r(Owe," \u2014 "),KI=n(Owe,"A",{href:!0});var bJr=s(KI);q5o=r(bJr,"LayoutLMv2ForSequenceClassification"),bJr.forEach(t),O5o=r(Owe," (LayoutLMv2 model)"),Owe.forEach(t),G5o=i(L),b3=n(L,"LI",{});var Gwe=s(b3);aae=n(Gwe,"STRONG",{});var vJr=s(aae);X5o=r(vJr,"led"),vJr.forEach(t),V5o=r(Gwe," \u2014 "),ZI=n(Gwe,"A",{href:!0});var TJr=s(ZI);z5o=r(TJr,"LEDForSequenceClassification"),TJr.forEach(t),W5o=r(Gwe," (LED model)"),Gwe.forEach(t),Q5o=i(L),v3=n(L,"LI",{});var Xwe=s(v3);nae=n(Xwe,"STRONG",{});var FJr=s(nae);H5o=r(FJr,"longformer"),FJr.forEach(t),U5o=r(Xwe," \u2014 "),ej=n(Xwe,"A",{href:!0});var CJr=s(ej);J5o=r(CJr,"LongformerForSequenceClassification"),CJr.forEach(t),Y5o=r(Xwe," (Longformer model)"),Xwe.forEach(t),K5o=i(L),T3=n(L,"LI",{});var Vwe=s(T3);sae=n(Vwe,"STRONG",{});var MJr=s(sae);Z5o=r(MJr,"mbart"),MJr.forEach(t),eyo=r(Vwe," \u2014 "),oj=n(Vwe,"A",{href:!0});var EJr=s(oj);oyo=r(EJr,"MBartForSequenceClassification"),EJr.forEach(t),ryo=r(Vwe," (mBART model)"),Vwe.forEach(t),tyo=i(L),F3=n(L,"LI",{});var zwe=s(F3);lae=n(zwe,"STRONG",{});var yJr=s(lae);ayo=r(yJr,"megatron-bert"),yJr.forEach(t),nyo=r(zwe," \u2014 "),rj=n(zwe,"A",{href:!0});var wJr=s(rj);syo=r(wJr,"MegatronBertForSequenceClassification"),wJr.forEach(t),lyo=r(zwe," (MegatronBert model)"),zwe.forEach(t),iyo=i(L),C3=n(L,"LI",{});var Wwe=s(C3);iae=n(Wwe,"STRONG",{});var AJr=s(iae);dyo=r(AJr,"mobilebert"),AJr.forEach(t),cyo=r(Wwe," \u2014 "),tj=n(Wwe,"A",{href:!0});var LJr=s(tj);fyo=r(LJr,"MobileBertForSequenceClassification"),LJr.forEach(t),myo=r(Wwe," (MobileBERT model)"),Wwe.forEach(t),gyo=i(L),M3=n(L,"LI",{});var Qwe=s(M3);dae=n(Qwe,"STRONG",{});var BJr=s(dae);hyo=r(BJr,"mpnet"),BJr.forEach(t),pyo=r(Qwe," \u2014 "),aj=n(Qwe,"A",{href:!0});var xJr=s(aj);_yo=r(xJr,"MPNetForSequenceClassification"),xJr.forEach(t),uyo=r(Qwe," (MPNet model)"),Qwe.forEach(t),byo=i(L),E3=n(L,"LI",{});var Hwe=s(E3);cae=n(Hwe,"STRONG",{});var kJr=s(cae);vyo=r(kJr,"nystromformer"),kJr.forEach(t),Tyo=r(Hwe," \u2014 "),nj=n(Hwe,"A",{href:!0});var RJr=s(nj);Fyo=r(RJr,"NystromformerForSequenceClassification"),RJr.forEach(t),Cyo=r(Hwe," (Nystromformer model)"),Hwe.forEach(t),Myo=i(L),y3=n(L,"LI",{});var Uwe=s(y3);fae=n(Uwe,"STRONG",{});var SJr=s(fae);Eyo=r(SJr,"openai-gpt"),SJr.forEach(t),yyo=r(Uwe," \u2014 "),sj=n(Uwe,"A",{href:!0});var PJr=s(sj);wyo=r(PJr,"OpenAIGPTForSequenceClassification"),PJr.forEach(t),Ayo=r(Uwe," (OpenAI GPT model)"),Uwe.forEach(t),Lyo=i(L),w3=n(L,"LI",{});var Jwe=s(w3);mae=n(Jwe,"STRONG",{});var $Jr=s(mae);Byo=r($Jr,"perceiver"),$Jr.forEach(t),xyo=r(Jwe," \u2014 "),lj=n(Jwe,"A",{href:!0});var IJr=s(lj);kyo=r(IJr,"PerceiverForSequenceClassification"),IJr.forEach(t),Ryo=r(Jwe," (Perceiver model)"),Jwe.forEach(t),Syo=i(L),A3=n(L,"LI",{});var Ywe=s(A3);gae=n(Ywe,"STRONG",{});var jJr=s(gae);Pyo=r(jJr,"plbart"),jJr.forEach(t),$yo=r(Ywe," \u2014 "),ij=n(Ywe,"A",{href:!0});var NJr=s(ij);Iyo=r(NJr,"PLBartForSequenceClassification"),NJr.forEach(t),jyo=r(Ywe," (PLBart model)"),Ywe.forEach(t),Nyo=i(L),L3=n(L,"LI",{});var Kwe=s(L3);hae=n(Kwe,"STRONG",{});var DJr=s(hae);Dyo=r(DJr,"qdqbert"),DJr.forEach(t),qyo=r(Kwe," \u2014 "),dj=n(Kwe,"A",{href:!0});var qJr=s(dj);Oyo=r(qJr,"QDQBertForSequenceClassification"),qJr.forEach(t),Gyo=r(Kwe," (QDQBert model)"),Kwe.forEach(t),Xyo=i(L),B3=n(L,"LI",{});var Zwe=s(B3);pae=n(Zwe,"STRONG",{});var OJr=s(pae);Vyo=r(OJr,"reformer"),OJr.forEach(t),zyo=r(Zwe," \u2014 "),cj=n(Zwe,"A",{href:!0});var GJr=s(cj);Wyo=r(GJr,"ReformerForSequenceClassification"),GJr.forEach(t),Qyo=r(Zwe," (Reformer model)"),Zwe.forEach(t),Hyo=i(L),x3=n(L,"LI",{});var e6e=s(x3);_ae=n(e6e,"STRONG",{});var XJr=s(_ae);Uyo=r(XJr,"rembert"),XJr.forEach(t),Jyo=r(e6e," \u2014 "),fj=n(e6e,"A",{href:!0});var VJr=s(fj);Yyo=r(VJr,"RemBertForSequenceClassification"),VJr.forEach(t),Kyo=r(e6e," (RemBERT model)"),e6e.forEach(t),Zyo=i(L),k3=n(L,"LI",{});var o6e=s(k3);uae=n(o6e,"STRONG",{});var zJr=s(uae);ewo=r(zJr,"roberta"),zJr.forEach(t),owo=r(o6e," \u2014 "),mj=n(o6e,"A",{href:!0});var WJr=s(mj);rwo=r(WJr,"RobertaForSequenceClassification"),WJr.forEach(t),two=r(o6e," (RoBERTa model)"),o6e.forEach(t),awo=i(L),R3=n(L,"LI",{});var r6e=s(R3);bae=n(r6e,"STRONG",{});var QJr=s(bae);nwo=r(QJr,"roformer"),QJr.forEach(t),swo=r(r6e," \u2014 "),gj=n(r6e,"A",{href:!0});var HJr=s(gj);lwo=r(HJr,"RoFormerForSequenceClassification"),HJr.forEach(t),iwo=r(r6e," (RoFormer model)"),r6e.forEach(t),dwo=i(L),S3=n(L,"LI",{});var t6e=s(S3);vae=n(t6e,"STRONG",{});var UJr=s(vae);cwo=r(UJr,"squeezebert"),UJr.forEach(t),fwo=r(t6e," \u2014 "),hj=n(t6e,"A",{href:!0});var JJr=s(hj);mwo=r(JJr,"SqueezeBertForSequenceClassification"),JJr.forEach(t),gwo=r(t6e," (SqueezeBERT model)"),t6e.forEach(t),hwo=i(L),P3=n(L,"LI",{});var a6e=s(P3);Tae=n(a6e,"STRONG",{});var YJr=s(Tae);pwo=r(YJr,"tapas"),YJr.forEach(t),_wo=r(a6e," \u2014 "),pj=n(a6e,"A",{href:!0});var KJr=s(pj);uwo=r(KJr,"TapasForSequenceClassification"),KJr.forEach(t),bwo=r(a6e," (TAPAS model)"),a6e.forEach(t),vwo=i(L),$3=n(L,"LI",{});var n6e=s($3);Fae=n(n6e,"STRONG",{});var ZJr=s(Fae);Two=r(ZJr,"transfo-xl"),ZJr.forEach(t),Fwo=r(n6e," \u2014 "),_j=n(n6e,"A",{href:!0});var eYr=s(_j);Cwo=r(eYr,"TransfoXLForSequenceClassification"),eYr.forEach(t),Mwo=r(n6e," (Transformer-XL model)"),n6e.forEach(t),Ewo=i(L),I3=n(L,"LI",{});var s6e=s(I3);Cae=n(s6e,"STRONG",{});var oYr=s(Cae);ywo=r(oYr,"xlm"),oYr.forEach(t),wwo=r(s6e," \u2014 "),uj=n(s6e,"A",{href:!0});var rYr=s(uj);Awo=r(rYr,"XLMForSequenceClassification"),rYr.forEach(t),Lwo=r(s6e," (XLM model)"),s6e.forEach(t),Bwo=i(L),j3=n(L,"LI",{});var l6e=s(j3);Mae=n(l6e,"STRONG",{});var tYr=s(Mae);xwo=r(tYr,"xlm-roberta"),tYr.forEach(t),kwo=r(l6e," \u2014 "),bj=n(l6e,"A",{href:!0});var aYr=s(bj);Rwo=r(aYr,"XLMRobertaForSequenceClassification"),aYr.forEach(t),Swo=r(l6e," (XLM-RoBERTa model)"),l6e.forEach(t),Pwo=i(L),N3=n(L,"LI",{});var i6e=s(N3);Eae=n(i6e,"STRONG",{});var nYr=s(Eae);$wo=r(nYr,"xlm-roberta-xl"),nYr.forEach(t),Iwo=r(i6e," \u2014 "),vj=n(i6e,"A",{href:!0});var sYr=s(vj);jwo=r(sYr,"XLMRobertaXLForSequenceClassification"),sYr.forEach(t),Nwo=r(i6e," (XLM-RoBERTa-XL model)"),i6e.forEach(t),Dwo=i(L),D3=n(L,"LI",{});var d6e=s(D3);yae=n(d6e,"STRONG",{});var lYr=s(yae);qwo=r(lYr,"xlnet"),lYr.forEach(t),Owo=r(d6e," \u2014 "),Tj=n(d6e,"A",{href:!0});var iYr=s(Tj);Gwo=r(iYr,"XLNetForSequenceClassification"),iYr.forEach(t),Xwo=r(d6e," (XLNet model)"),d6e.forEach(t),Vwo=i(L),q3=n(L,"LI",{});var c6e=s(q3);wae=n(c6e,"STRONG",{});var dYr=s(wae);zwo=r(dYr,"yoso"),dYr.forEach(t),Wwo=r(c6e," \u2014 "),Fj=n(c6e,"A",{href:!0});var cYr=s(Fj);Qwo=r(cYr,"YosoForSequenceClassification"),cYr.forEach(t),Hwo=r(c6e," (YOSO model)"),c6e.forEach(t),L.forEach(t),Uwo=i(zt),O3=n(zt,"P",{});var f6e=s(O3);Jwo=r(f6e,"The model is set in evaluation mode by default using "),Aae=n(f6e,"CODE",{});var fYr=s(Aae);Ywo=r(fYr,"model.eval()"),fYr.forEach(t),Kwo=r(f6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=n(f6e,"CODE",{});var mYr=s(Lae);Zwo=r(mYr,"model.train()"),mYr.forEach(t),f6e.forEach(t),e6o=i(zt),Bae=n(zt,"P",{});var gYr=s(Bae);o6o=r(gYr,"Examples:"),gYr.forEach(t),r6o=i(zt),m(Cw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),dke=i(c),pd=n(c,"H2",{class:!0});var bSe=s(pd);G3=n(bSe,"A",{id:!0,class:!0,href:!0});var hYr=s(G3);xae=n(hYr,"SPAN",{});var pYr=s(xae);m(Mw.$$.fragment,pYr),pYr.forEach(t),hYr.forEach(t),t6o=i(bSe),kae=n(bSe,"SPAN",{});var _Yr=s(kae);a6o=r(_Yr,"AutoModelForMultipleChoice"),_Yr.forEach(t),bSe.forEach(t),cke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Ew.$$.fragment,al),n6o=i(al),_d=n(al,"P",{});var Zz=s(_d);s6o=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rae=n(Zz,"CODE",{});var uYr=s(Rae);l6o=r(uYr,"from_pretrained()"),uYr.forEach(t),i6o=r(Zz,"class method or the "),Sae=n(Zz,"CODE",{});var bYr=s(Sae);d6o=r(bYr,"from_config()"),bYr.forEach(t),c6o=r(Zz,`class
method.`),Zz.forEach(t),f6o=i(al),yw=n(al,"P",{});var vSe=s(yw);m6o=r(vSe,"This class cannot be instantiated directly using "),Pae=n(vSe,"CODE",{});var vYr=s(Pae);g6o=r(vYr,"__init__()"),vYr.forEach(t),h6o=r(vSe," (throws an error)."),vSe.forEach(t),p6o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(ww.$$.fragment,nl),_6o=i(nl),$ae=n(nl,"P",{});var TYr=s($ae);u6o=r(TYr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TYr.forEach(t),b6o=i(nl),ud=n(nl,"P",{});var eW=s(ud);v6o=r(eW,`Note:
Loading a model from its configuration file does `),Iae=n(eW,"STRONG",{});var FYr=s(Iae);T6o=r(FYr,"not"),FYr.forEach(t),F6o=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=n(eW,"CODE",{});var CYr=s(jae);C6o=r(CYr,"from_pretrained()"),CYr.forEach(t),M6o=r(eW,"to load the model weights."),eW.forEach(t),E6o=i(nl),Nae=n(nl,"P",{});var MYr=s(Nae);y6o=r(MYr,"Examples:"),MYr.forEach(t),w6o=i(nl),m(Aw.$$.fragment,nl),nl.forEach(t),A6o=i(al),Ve=n(al,"DIV",{class:!0});var Wt=s(Ve);m(Lw.$$.fragment,Wt),L6o=i(Wt),Dae=n(Wt,"P",{});var EYr=s(Dae);B6o=r(EYr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),EYr.forEach(t),x6o=i(Wt),Ja=n(Wt,"P",{});var f5=s(Ja);k6o=r(f5,"The model class to instantiate is selected based on the "),qae=n(f5,"CODE",{});var yYr=s(qae);R6o=r(yYr,"model_type"),yYr.forEach(t),S6o=r(f5,` property of the config object (either
passed as an argument or loaded from `),Oae=n(f5,"CODE",{});var wYr=s(Oae);P6o=r(wYr,"pretrained_model_name_or_path"),wYr.forEach(t),$6o=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gae=n(f5,"CODE",{});var AYr=s(Gae);I6o=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),j6o=r(f5,":"),f5.forEach(t),N6o=i(Wt),O=n(Wt,"UL",{});var G=s(O);X3=n(G,"LI",{});var m6e=s(X3);Xae=n(m6e,"STRONG",{});var LYr=s(Xae);D6o=r(LYr,"albert"),LYr.forEach(t),q6o=r(m6e," \u2014 "),Cj=n(m6e,"A",{href:!0});var BYr=s(Cj);O6o=r(BYr,"AlbertForMultipleChoice"),BYr.forEach(t),G6o=r(m6e," (ALBERT model)"),m6e.forEach(t),X6o=i(G),V3=n(G,"LI",{});var g6e=s(V3);Vae=n(g6e,"STRONG",{});var xYr=s(Vae);V6o=r(xYr,"bert"),xYr.forEach(t),z6o=r(g6e," \u2014 "),Mj=n(g6e,"A",{href:!0});var kYr=s(Mj);W6o=r(kYr,"BertForMultipleChoice"),kYr.forEach(t),Q6o=r(g6e," (BERT model)"),g6e.forEach(t),H6o=i(G),z3=n(G,"LI",{});var h6e=s(z3);zae=n(h6e,"STRONG",{});var RYr=s(zae);U6o=r(RYr,"big_bird"),RYr.forEach(t),J6o=r(h6e," \u2014 "),Ej=n(h6e,"A",{href:!0});var SYr=s(Ej);Y6o=r(SYr,"BigBirdForMultipleChoice"),SYr.forEach(t),K6o=r(h6e," (BigBird model)"),h6e.forEach(t),Z6o=i(G),W3=n(G,"LI",{});var p6e=s(W3);Wae=n(p6e,"STRONG",{});var PYr=s(Wae);eAo=r(PYr,"camembert"),PYr.forEach(t),oAo=r(p6e," \u2014 "),yj=n(p6e,"A",{href:!0});var $Yr=s(yj);rAo=r($Yr,"CamembertForMultipleChoice"),$Yr.forEach(t),tAo=r(p6e," (CamemBERT model)"),p6e.forEach(t),aAo=i(G),Q3=n(G,"LI",{});var _6e=s(Q3);Qae=n(_6e,"STRONG",{});var IYr=s(Qae);nAo=r(IYr,"canine"),IYr.forEach(t),sAo=r(_6e," \u2014 "),wj=n(_6e,"A",{href:!0});var jYr=s(wj);lAo=r(jYr,"CanineForMultipleChoice"),jYr.forEach(t),iAo=r(_6e," (Canine model)"),_6e.forEach(t),dAo=i(G),H3=n(G,"LI",{});var u6e=s(H3);Hae=n(u6e,"STRONG",{});var NYr=s(Hae);cAo=r(NYr,"convbert"),NYr.forEach(t),fAo=r(u6e," \u2014 "),Aj=n(u6e,"A",{href:!0});var DYr=s(Aj);mAo=r(DYr,"ConvBertForMultipleChoice"),DYr.forEach(t),gAo=r(u6e," (ConvBERT model)"),u6e.forEach(t),hAo=i(G),U3=n(G,"LI",{});var b6e=s(U3);Uae=n(b6e,"STRONG",{});var qYr=s(Uae);pAo=r(qYr,"data2vec-text"),qYr.forEach(t),_Ao=r(b6e," \u2014 "),Lj=n(b6e,"A",{href:!0});var OYr=s(Lj);uAo=r(OYr,"Data2VecTextForMultipleChoice"),OYr.forEach(t),bAo=r(b6e," (Data2VecText model)"),b6e.forEach(t),vAo=i(G),J3=n(G,"LI",{});var v6e=s(J3);Jae=n(v6e,"STRONG",{});var GYr=s(Jae);TAo=r(GYr,"distilbert"),GYr.forEach(t),FAo=r(v6e," \u2014 "),Bj=n(v6e,"A",{href:!0});var XYr=s(Bj);CAo=r(XYr,"DistilBertForMultipleChoice"),XYr.forEach(t),MAo=r(v6e," (DistilBERT model)"),v6e.forEach(t),EAo=i(G),Y3=n(G,"LI",{});var T6e=s(Y3);Yae=n(T6e,"STRONG",{});var VYr=s(Yae);yAo=r(VYr,"electra"),VYr.forEach(t),wAo=r(T6e," \u2014 "),xj=n(T6e,"A",{href:!0});var zYr=s(xj);AAo=r(zYr,"ElectraForMultipleChoice"),zYr.forEach(t),LAo=r(T6e," (ELECTRA model)"),T6e.forEach(t),BAo=i(G),K3=n(G,"LI",{});var F6e=s(K3);Kae=n(F6e,"STRONG",{});var WYr=s(Kae);xAo=r(WYr,"flaubert"),WYr.forEach(t),kAo=r(F6e," \u2014 "),kj=n(F6e,"A",{href:!0});var QYr=s(kj);RAo=r(QYr,"FlaubertForMultipleChoice"),QYr.forEach(t),SAo=r(F6e," (FlauBERT model)"),F6e.forEach(t),PAo=i(G),Z3=n(G,"LI",{});var C6e=s(Z3);Zae=n(C6e,"STRONG",{});var HYr=s(Zae);$Ao=r(HYr,"fnet"),HYr.forEach(t),IAo=r(C6e," \u2014 "),Rj=n(C6e,"A",{href:!0});var UYr=s(Rj);jAo=r(UYr,"FNetForMultipleChoice"),UYr.forEach(t),NAo=r(C6e," (FNet model)"),C6e.forEach(t),DAo=i(G),e2=n(G,"LI",{});var M6e=s(e2);ene=n(M6e,"STRONG",{});var JYr=s(ene);qAo=r(JYr,"funnel"),JYr.forEach(t),OAo=r(M6e," \u2014 "),Sj=n(M6e,"A",{href:!0});var YYr=s(Sj);GAo=r(YYr,"FunnelForMultipleChoice"),YYr.forEach(t),XAo=r(M6e," (Funnel Transformer model)"),M6e.forEach(t),VAo=i(G),o2=n(G,"LI",{});var E6e=s(o2);one=n(E6e,"STRONG",{});var KYr=s(one);zAo=r(KYr,"ibert"),KYr.forEach(t),WAo=r(E6e," \u2014 "),Pj=n(E6e,"A",{href:!0});var ZYr=s(Pj);QAo=r(ZYr,"IBertForMultipleChoice"),ZYr.forEach(t),HAo=r(E6e," (I-BERT model)"),E6e.forEach(t),UAo=i(G),r2=n(G,"LI",{});var y6e=s(r2);rne=n(y6e,"STRONG",{});var eKr=s(rne);JAo=r(eKr,"longformer"),eKr.forEach(t),YAo=r(y6e," \u2014 "),$j=n(y6e,"A",{href:!0});var oKr=s($j);KAo=r(oKr,"LongformerForMultipleChoice"),oKr.forEach(t),ZAo=r(y6e," (Longformer model)"),y6e.forEach(t),e0o=i(G),t2=n(G,"LI",{});var w6e=s(t2);tne=n(w6e,"STRONG",{});var rKr=s(tne);o0o=r(rKr,"megatron-bert"),rKr.forEach(t),r0o=r(w6e," \u2014 "),Ij=n(w6e,"A",{href:!0});var tKr=s(Ij);t0o=r(tKr,"MegatronBertForMultipleChoice"),tKr.forEach(t),a0o=r(w6e," (MegatronBert model)"),w6e.forEach(t),n0o=i(G),a2=n(G,"LI",{});var A6e=s(a2);ane=n(A6e,"STRONG",{});var aKr=s(ane);s0o=r(aKr,"mobilebert"),aKr.forEach(t),l0o=r(A6e," \u2014 "),jj=n(A6e,"A",{href:!0});var nKr=s(jj);i0o=r(nKr,"MobileBertForMultipleChoice"),nKr.forEach(t),d0o=r(A6e," (MobileBERT model)"),A6e.forEach(t),c0o=i(G),n2=n(G,"LI",{});var L6e=s(n2);nne=n(L6e,"STRONG",{});var sKr=s(nne);f0o=r(sKr,"mpnet"),sKr.forEach(t),m0o=r(L6e," \u2014 "),Nj=n(L6e,"A",{href:!0});var lKr=s(Nj);g0o=r(lKr,"MPNetForMultipleChoice"),lKr.forEach(t),h0o=r(L6e," (MPNet model)"),L6e.forEach(t),p0o=i(G),s2=n(G,"LI",{});var B6e=s(s2);sne=n(B6e,"STRONG",{});var iKr=s(sne);_0o=r(iKr,"nystromformer"),iKr.forEach(t),u0o=r(B6e," \u2014 "),Dj=n(B6e,"A",{href:!0});var dKr=s(Dj);b0o=r(dKr,"NystromformerForMultipleChoice"),dKr.forEach(t),v0o=r(B6e," (Nystromformer model)"),B6e.forEach(t),T0o=i(G),l2=n(G,"LI",{});var x6e=s(l2);lne=n(x6e,"STRONG",{});var cKr=s(lne);F0o=r(cKr,"qdqbert"),cKr.forEach(t),C0o=r(x6e," \u2014 "),qj=n(x6e,"A",{href:!0});var fKr=s(qj);M0o=r(fKr,"QDQBertForMultipleChoice"),fKr.forEach(t),E0o=r(x6e," (QDQBert model)"),x6e.forEach(t),y0o=i(G),i2=n(G,"LI",{});var k6e=s(i2);ine=n(k6e,"STRONG",{});var mKr=s(ine);w0o=r(mKr,"rembert"),mKr.forEach(t),A0o=r(k6e," \u2014 "),Oj=n(k6e,"A",{href:!0});var gKr=s(Oj);L0o=r(gKr,"RemBertForMultipleChoice"),gKr.forEach(t),B0o=r(k6e," (RemBERT model)"),k6e.forEach(t),x0o=i(G),d2=n(G,"LI",{});var R6e=s(d2);dne=n(R6e,"STRONG",{});var hKr=s(dne);k0o=r(hKr,"roberta"),hKr.forEach(t),R0o=r(R6e," \u2014 "),Gj=n(R6e,"A",{href:!0});var pKr=s(Gj);S0o=r(pKr,"RobertaForMultipleChoice"),pKr.forEach(t),P0o=r(R6e," (RoBERTa model)"),R6e.forEach(t),$0o=i(G),c2=n(G,"LI",{});var S6e=s(c2);cne=n(S6e,"STRONG",{});var _Kr=s(cne);I0o=r(_Kr,"roformer"),_Kr.forEach(t),j0o=r(S6e," \u2014 "),Xj=n(S6e,"A",{href:!0});var uKr=s(Xj);N0o=r(uKr,"RoFormerForMultipleChoice"),uKr.forEach(t),D0o=r(S6e," (RoFormer model)"),S6e.forEach(t),q0o=i(G),f2=n(G,"LI",{});var P6e=s(f2);fne=n(P6e,"STRONG",{});var bKr=s(fne);O0o=r(bKr,"squeezebert"),bKr.forEach(t),G0o=r(P6e," \u2014 "),Vj=n(P6e,"A",{href:!0});var vKr=s(Vj);X0o=r(vKr,"SqueezeBertForMultipleChoice"),vKr.forEach(t),V0o=r(P6e," (SqueezeBERT model)"),P6e.forEach(t),z0o=i(G),m2=n(G,"LI",{});var $6e=s(m2);mne=n($6e,"STRONG",{});var TKr=s(mne);W0o=r(TKr,"xlm"),TKr.forEach(t),Q0o=r($6e," \u2014 "),zj=n($6e,"A",{href:!0});var FKr=s(zj);H0o=r(FKr,"XLMForMultipleChoice"),FKr.forEach(t),U0o=r($6e," (XLM model)"),$6e.forEach(t),J0o=i(G),g2=n(G,"LI",{});var I6e=s(g2);gne=n(I6e,"STRONG",{});var CKr=s(gne);Y0o=r(CKr,"xlm-roberta"),CKr.forEach(t),K0o=r(I6e," \u2014 "),Wj=n(I6e,"A",{href:!0});var MKr=s(Wj);Z0o=r(MKr,"XLMRobertaForMultipleChoice"),MKr.forEach(t),eLo=r(I6e," (XLM-RoBERTa model)"),I6e.forEach(t),oLo=i(G),h2=n(G,"LI",{});var j6e=s(h2);hne=n(j6e,"STRONG",{});var EKr=s(hne);rLo=r(EKr,"xlm-roberta-xl"),EKr.forEach(t),tLo=r(j6e," \u2014 "),Qj=n(j6e,"A",{href:!0});var yKr=s(Qj);aLo=r(yKr,"XLMRobertaXLForMultipleChoice"),yKr.forEach(t),nLo=r(j6e," (XLM-RoBERTa-XL model)"),j6e.forEach(t),sLo=i(G),p2=n(G,"LI",{});var N6e=s(p2);pne=n(N6e,"STRONG",{});var wKr=s(pne);lLo=r(wKr,"xlnet"),wKr.forEach(t),iLo=r(N6e," \u2014 "),Hj=n(N6e,"A",{href:!0});var AKr=s(Hj);dLo=r(AKr,"XLNetForMultipleChoice"),AKr.forEach(t),cLo=r(N6e," (XLNet model)"),N6e.forEach(t),fLo=i(G),_2=n(G,"LI",{});var D6e=s(_2);_ne=n(D6e,"STRONG",{});var LKr=s(_ne);mLo=r(LKr,"yoso"),LKr.forEach(t),gLo=r(D6e," \u2014 "),Uj=n(D6e,"A",{href:!0});var BKr=s(Uj);hLo=r(BKr,"YosoForMultipleChoice"),BKr.forEach(t),pLo=r(D6e," (YOSO model)"),D6e.forEach(t),G.forEach(t),_Lo=i(Wt),u2=n(Wt,"P",{});var q6e=s(u2);uLo=r(q6e,"The model is set in evaluation mode by default using "),une=n(q6e,"CODE",{});var xKr=s(une);bLo=r(xKr,"model.eval()"),xKr.forEach(t),vLo=r(q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bne=n(q6e,"CODE",{});var kKr=s(bne);TLo=r(kKr,"model.train()"),kKr.forEach(t),q6e.forEach(t),FLo=i(Wt),vne=n(Wt,"P",{});var RKr=s(vne);CLo=r(RKr,"Examples:"),RKr.forEach(t),MLo=i(Wt),m(Bw.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),fke=i(c),bd=n(c,"H2",{class:!0});var TSe=s(bd);b2=n(TSe,"A",{id:!0,class:!0,href:!0});var SKr=s(b2);Tne=n(SKr,"SPAN",{});var PKr=s(Tne);m(xw.$$.fragment,PKr),PKr.forEach(t),SKr.forEach(t),ELo=i(TSe),Fne=n(TSe,"SPAN",{});var $Kr=s(Fne);yLo=r($Kr,"AutoModelForNextSentencePrediction"),$Kr.forEach(t),TSe.forEach(t),mke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(kw.$$.fragment,sl),wLo=i(sl),vd=n(sl,"P",{});var oW=s(vd);ALo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cne=n(oW,"CODE",{});var IKr=s(Cne);LLo=r(IKr,"from_pretrained()"),IKr.forEach(t),BLo=r(oW,"class method or the "),Mne=n(oW,"CODE",{});var jKr=s(Mne);xLo=r(jKr,"from_config()"),jKr.forEach(t),kLo=r(oW,`class
method.`),oW.forEach(t),RLo=i(sl),Rw=n(sl,"P",{});var FSe=s(Rw);SLo=r(FSe,"This class cannot be instantiated directly using "),Ene=n(FSe,"CODE",{});var NKr=s(Ene);PLo=r(NKr,"__init__()"),NKr.forEach(t),$Lo=r(FSe," (throws an error)."),FSe.forEach(t),ILo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Sw.$$.fragment,ll),jLo=i(ll),yne=n(ll,"P",{});var DKr=s(yne);NLo=r(DKr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DKr.forEach(t),DLo=i(ll),Td=n(ll,"P",{});var rW=s(Td);qLo=r(rW,`Note:
Loading a model from its configuration file does `),wne=n(rW,"STRONG",{});var qKr=s(wne);OLo=r(qKr,"not"),qKr.forEach(t),GLo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ane=n(rW,"CODE",{});var OKr=s(Ane);XLo=r(OKr,"from_pretrained()"),OKr.forEach(t),VLo=r(rW,"to load the model weights."),rW.forEach(t),zLo=i(ll),Lne=n(ll,"P",{});var GKr=s(Lne);WLo=r(GKr,"Examples:"),GKr.forEach(t),QLo=i(ll),m(Pw.$$.fragment,ll),ll.forEach(t),HLo=i(sl),ze=n(sl,"DIV",{class:!0});var Qt=s(ze);m($w.$$.fragment,Qt),ULo=i(Qt),Bne=n(Qt,"P",{});var XKr=s(Bne);JLo=r(XKr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XKr.forEach(t),YLo=i(Qt),Ya=n(Qt,"P",{});var m5=s(Ya);KLo=r(m5,"The model class to instantiate is selected based on the "),xne=n(m5,"CODE",{});var VKr=s(xne);ZLo=r(VKr,"model_type"),VKr.forEach(t),e7o=r(m5,` property of the config object (either
passed as an argument or loaded from `),kne=n(m5,"CODE",{});var zKr=s(kne);o7o=r(zKr,"pretrained_model_name_or_path"),zKr.forEach(t),r7o=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rne=n(m5,"CODE",{});var WKr=s(Rne);t7o=r(WKr,"pretrained_model_name_or_path"),WKr.forEach(t),a7o=r(m5,":"),m5.forEach(t),n7o=i(Qt),da=n(Qt,"UL",{});var il=s(da);v2=n(il,"LI",{});var O6e=s(v2);Sne=n(O6e,"STRONG",{});var QKr=s(Sne);s7o=r(QKr,"bert"),QKr.forEach(t),l7o=r(O6e," \u2014 "),Jj=n(O6e,"A",{href:!0});var HKr=s(Jj);i7o=r(HKr,"BertForNextSentencePrediction"),HKr.forEach(t),d7o=r(O6e," (BERT model)"),O6e.forEach(t),c7o=i(il),T2=n(il,"LI",{});var G6e=s(T2);Pne=n(G6e,"STRONG",{});var UKr=s(Pne);f7o=r(UKr,"fnet"),UKr.forEach(t),m7o=r(G6e," \u2014 "),Yj=n(G6e,"A",{href:!0});var JKr=s(Yj);g7o=r(JKr,"FNetForNextSentencePrediction"),JKr.forEach(t),h7o=r(G6e," (FNet model)"),G6e.forEach(t),p7o=i(il),F2=n(il,"LI",{});var X6e=s(F2);$ne=n(X6e,"STRONG",{});var YKr=s($ne);_7o=r(YKr,"megatron-bert"),YKr.forEach(t),u7o=r(X6e," \u2014 "),Kj=n(X6e,"A",{href:!0});var KKr=s(Kj);b7o=r(KKr,"MegatronBertForNextSentencePrediction"),KKr.forEach(t),v7o=r(X6e," (MegatronBert model)"),X6e.forEach(t),T7o=i(il),C2=n(il,"LI",{});var V6e=s(C2);Ine=n(V6e,"STRONG",{});var ZKr=s(Ine);F7o=r(ZKr,"mobilebert"),ZKr.forEach(t),C7o=r(V6e," \u2014 "),Zj=n(V6e,"A",{href:!0});var eZr=s(Zj);M7o=r(eZr,"MobileBertForNextSentencePrediction"),eZr.forEach(t),E7o=r(V6e," (MobileBERT model)"),V6e.forEach(t),y7o=i(il),M2=n(il,"LI",{});var z6e=s(M2);jne=n(z6e,"STRONG",{});var oZr=s(jne);w7o=r(oZr,"qdqbert"),oZr.forEach(t),A7o=r(z6e," \u2014 "),eN=n(z6e,"A",{href:!0});var rZr=s(eN);L7o=r(rZr,"QDQBertForNextSentencePrediction"),rZr.forEach(t),B7o=r(z6e," (QDQBert model)"),z6e.forEach(t),il.forEach(t),x7o=i(Qt),E2=n(Qt,"P",{});var W6e=s(E2);k7o=r(W6e,"The model is set in evaluation mode by default using "),Nne=n(W6e,"CODE",{});var tZr=s(Nne);R7o=r(tZr,"model.eval()"),tZr.forEach(t),S7o=r(W6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=n(W6e,"CODE",{});var aZr=s(Dne);P7o=r(aZr,"model.train()"),aZr.forEach(t),W6e.forEach(t),$7o=i(Qt),qne=n(Qt,"P",{});var nZr=s(qne);I7o=r(nZr,"Examples:"),nZr.forEach(t),j7o=i(Qt),m(Iw.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),gke=i(c),Fd=n(c,"H2",{class:!0});var CSe=s(Fd);y2=n(CSe,"A",{id:!0,class:!0,href:!0});var sZr=s(y2);One=n(sZr,"SPAN",{});var lZr=s(One);m(jw.$$.fragment,lZr),lZr.forEach(t),sZr.forEach(t),N7o=i(CSe),Gne=n(CSe,"SPAN",{});var iZr=s(Gne);D7o=r(iZr,"AutoModelForTokenClassification"),iZr.forEach(t),CSe.forEach(t),hke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Nw.$$.fragment,dl),q7o=i(dl),Cd=n(dl,"P",{});var tW=s(Cd);O7o=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xne=n(tW,"CODE",{});var dZr=s(Xne);G7o=r(dZr,"from_pretrained()"),dZr.forEach(t),X7o=r(tW,"class method or the "),Vne=n(tW,"CODE",{});var cZr=s(Vne);V7o=r(cZr,"from_config()"),cZr.forEach(t),z7o=r(tW,`class
method.`),tW.forEach(t),W7o=i(dl),Dw=n(dl,"P",{});var MSe=s(Dw);Q7o=r(MSe,"This class cannot be instantiated directly using "),zne=n(MSe,"CODE",{});var fZr=s(zne);H7o=r(fZr,"__init__()"),fZr.forEach(t),U7o=r(MSe," (throws an error)."),MSe.forEach(t),J7o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(qw.$$.fragment,cl),Y7o=i(cl),Wne=n(cl,"P",{});var mZr=s(Wne);K7o=r(mZr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mZr.forEach(t),Z7o=i(cl),Md=n(cl,"P",{});var aW=s(Md);e8o=r(aW,`Note:
Loading a model from its configuration file does `),Qne=n(aW,"STRONG",{});var gZr=s(Qne);o8o=r(gZr,"not"),gZr.forEach(t),r8o=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hne=n(aW,"CODE",{});var hZr=s(Hne);t8o=r(hZr,"from_pretrained()"),hZr.forEach(t),a8o=r(aW,"to load the model weights."),aW.forEach(t),n8o=i(cl),Une=n(cl,"P",{});var pZr=s(Une);s8o=r(pZr,"Examples:"),pZr.forEach(t),l8o=i(cl),m(Ow.$$.fragment,cl),cl.forEach(t),i8o=i(dl),We=n(dl,"DIV",{class:!0});var Ht=s(We);m(Gw.$$.fragment,Ht),d8o=i(Ht),Jne=n(Ht,"P",{});var _Zr=s(Jne);c8o=r(_Zr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Zr.forEach(t),f8o=i(Ht),Ka=n(Ht,"P",{});var g5=s(Ka);m8o=r(g5,"The model class to instantiate is selected based on the "),Yne=n(g5,"CODE",{});var uZr=s(Yne);g8o=r(uZr,"model_type"),uZr.forEach(t),h8o=r(g5,` property of the config object (either
passed as an argument or loaded from `),Kne=n(g5,"CODE",{});var bZr=s(Kne);p8o=r(bZr,"pretrained_model_name_or_path"),bZr.forEach(t),_8o=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=n(g5,"CODE",{});var vZr=s(Zne);u8o=r(vZr,"pretrained_model_name_or_path"),vZr.forEach(t),b8o=r(g5,":"),g5.forEach(t),v8o=i(Ht),D=n(Ht,"UL",{});var q=s(D);w2=n(q,"LI",{});var Q6e=s(w2);ese=n(Q6e,"STRONG",{});var TZr=s(ese);T8o=r(TZr,"albert"),TZr.forEach(t),F8o=r(Q6e," \u2014 "),oN=n(Q6e,"A",{href:!0});var FZr=s(oN);C8o=r(FZr,"AlbertForTokenClassification"),FZr.forEach(t),M8o=r(Q6e," (ALBERT model)"),Q6e.forEach(t),E8o=i(q),A2=n(q,"LI",{});var H6e=s(A2);ose=n(H6e,"STRONG",{});var CZr=s(ose);y8o=r(CZr,"bert"),CZr.forEach(t),w8o=r(H6e," \u2014 "),rN=n(H6e,"A",{href:!0});var MZr=s(rN);A8o=r(MZr,"BertForTokenClassification"),MZr.forEach(t),L8o=r(H6e," (BERT model)"),H6e.forEach(t),B8o=i(q),L2=n(q,"LI",{});var U6e=s(L2);rse=n(U6e,"STRONG",{});var EZr=s(rse);x8o=r(EZr,"big_bird"),EZr.forEach(t),k8o=r(U6e," \u2014 "),tN=n(U6e,"A",{href:!0});var yZr=s(tN);R8o=r(yZr,"BigBirdForTokenClassification"),yZr.forEach(t),S8o=r(U6e," (BigBird model)"),U6e.forEach(t),P8o=i(q),B2=n(q,"LI",{});var J6e=s(B2);tse=n(J6e,"STRONG",{});var wZr=s(tse);$8o=r(wZr,"camembert"),wZr.forEach(t),I8o=r(J6e," \u2014 "),aN=n(J6e,"A",{href:!0});var AZr=s(aN);j8o=r(AZr,"CamembertForTokenClassification"),AZr.forEach(t),N8o=r(J6e," (CamemBERT model)"),J6e.forEach(t),D8o=i(q),x2=n(q,"LI",{});var Y6e=s(x2);ase=n(Y6e,"STRONG",{});var LZr=s(ase);q8o=r(LZr,"canine"),LZr.forEach(t),O8o=r(Y6e," \u2014 "),nN=n(Y6e,"A",{href:!0});var BZr=s(nN);G8o=r(BZr,"CanineForTokenClassification"),BZr.forEach(t),X8o=r(Y6e," (Canine model)"),Y6e.forEach(t),V8o=i(q),k2=n(q,"LI",{});var K6e=s(k2);nse=n(K6e,"STRONG",{});var xZr=s(nse);z8o=r(xZr,"convbert"),xZr.forEach(t),W8o=r(K6e," \u2014 "),sN=n(K6e,"A",{href:!0});var kZr=s(sN);Q8o=r(kZr,"ConvBertForTokenClassification"),kZr.forEach(t),H8o=r(K6e," (ConvBERT model)"),K6e.forEach(t),U8o=i(q),R2=n(q,"LI",{});var Z6e=s(R2);sse=n(Z6e,"STRONG",{});var RZr=s(sse);J8o=r(RZr,"data2vec-text"),RZr.forEach(t),Y8o=r(Z6e," \u2014 "),lN=n(Z6e,"A",{href:!0});var SZr=s(lN);K8o=r(SZr,"Data2VecTextForTokenClassification"),SZr.forEach(t),Z8o=r(Z6e," (Data2VecText model)"),Z6e.forEach(t),e9o=i(q),S2=n(q,"LI",{});var eAe=s(S2);lse=n(eAe,"STRONG",{});var PZr=s(lse);o9o=r(PZr,"deberta"),PZr.forEach(t),r9o=r(eAe," \u2014 "),iN=n(eAe,"A",{href:!0});var $Zr=s(iN);t9o=r($Zr,"DebertaForTokenClassification"),$Zr.forEach(t),a9o=r(eAe," (DeBERTa model)"),eAe.forEach(t),n9o=i(q),P2=n(q,"LI",{});var oAe=s(P2);ise=n(oAe,"STRONG",{});var IZr=s(ise);s9o=r(IZr,"deberta-v2"),IZr.forEach(t),l9o=r(oAe," \u2014 "),dN=n(oAe,"A",{href:!0});var jZr=s(dN);i9o=r(jZr,"DebertaV2ForTokenClassification"),jZr.forEach(t),d9o=r(oAe," (DeBERTa-v2 model)"),oAe.forEach(t),c9o=i(q),$2=n(q,"LI",{});var rAe=s($2);dse=n(rAe,"STRONG",{});var NZr=s(dse);f9o=r(NZr,"distilbert"),NZr.forEach(t),m9o=r(rAe," \u2014 "),cN=n(rAe,"A",{href:!0});var DZr=s(cN);g9o=r(DZr,"DistilBertForTokenClassification"),DZr.forEach(t),h9o=r(rAe," (DistilBERT model)"),rAe.forEach(t),p9o=i(q),I2=n(q,"LI",{});var tAe=s(I2);cse=n(tAe,"STRONG",{});var qZr=s(cse);_9o=r(qZr,"electra"),qZr.forEach(t),u9o=r(tAe," \u2014 "),fN=n(tAe,"A",{href:!0});var OZr=s(fN);b9o=r(OZr,"ElectraForTokenClassification"),OZr.forEach(t),v9o=r(tAe," (ELECTRA model)"),tAe.forEach(t),T9o=i(q),j2=n(q,"LI",{});var aAe=s(j2);fse=n(aAe,"STRONG",{});var GZr=s(fse);F9o=r(GZr,"flaubert"),GZr.forEach(t),C9o=r(aAe," \u2014 "),mN=n(aAe,"A",{href:!0});var XZr=s(mN);M9o=r(XZr,"FlaubertForTokenClassification"),XZr.forEach(t),E9o=r(aAe," (FlauBERT model)"),aAe.forEach(t),y9o=i(q),N2=n(q,"LI",{});var nAe=s(N2);mse=n(nAe,"STRONG",{});var VZr=s(mse);w9o=r(VZr,"fnet"),VZr.forEach(t),A9o=r(nAe," \u2014 "),gN=n(nAe,"A",{href:!0});var zZr=s(gN);L9o=r(zZr,"FNetForTokenClassification"),zZr.forEach(t),B9o=r(nAe," (FNet model)"),nAe.forEach(t),x9o=i(q),D2=n(q,"LI",{});var sAe=s(D2);gse=n(sAe,"STRONG",{});var WZr=s(gse);k9o=r(WZr,"funnel"),WZr.forEach(t),R9o=r(sAe," \u2014 "),hN=n(sAe,"A",{href:!0});var QZr=s(hN);S9o=r(QZr,"FunnelForTokenClassification"),QZr.forEach(t),P9o=r(sAe," (Funnel Transformer model)"),sAe.forEach(t),$9o=i(q),q2=n(q,"LI",{});var lAe=s(q2);hse=n(lAe,"STRONG",{});var HZr=s(hse);I9o=r(HZr,"gpt2"),HZr.forEach(t),j9o=r(lAe," \u2014 "),pN=n(lAe,"A",{href:!0});var UZr=s(pN);N9o=r(UZr,"GPT2ForTokenClassification"),UZr.forEach(t),D9o=r(lAe," (OpenAI GPT-2 model)"),lAe.forEach(t),q9o=i(q),O2=n(q,"LI",{});var iAe=s(O2);pse=n(iAe,"STRONG",{});var JZr=s(pse);O9o=r(JZr,"ibert"),JZr.forEach(t),G9o=r(iAe," \u2014 "),_N=n(iAe,"A",{href:!0});var YZr=s(_N);X9o=r(YZr,"IBertForTokenClassification"),YZr.forEach(t),V9o=r(iAe," (I-BERT model)"),iAe.forEach(t),z9o=i(q),G2=n(q,"LI",{});var dAe=s(G2);_se=n(dAe,"STRONG",{});var KZr=s(_se);W9o=r(KZr,"layoutlm"),KZr.forEach(t),Q9o=r(dAe," \u2014 "),uN=n(dAe,"A",{href:!0});var ZZr=s(uN);H9o=r(ZZr,"LayoutLMForTokenClassification"),ZZr.forEach(t),U9o=r(dAe," (LayoutLM model)"),dAe.forEach(t),J9o=i(q),X2=n(q,"LI",{});var cAe=s(X2);use=n(cAe,"STRONG",{});var eet=s(use);Y9o=r(eet,"layoutlmv2"),eet.forEach(t),K9o=r(cAe," \u2014 "),bN=n(cAe,"A",{href:!0});var oet=s(bN);Z9o=r(oet,"LayoutLMv2ForTokenClassification"),oet.forEach(t),eBo=r(cAe," (LayoutLMv2 model)"),cAe.forEach(t),oBo=i(q),V2=n(q,"LI",{});var fAe=s(V2);bse=n(fAe,"STRONG",{});var ret=s(bse);rBo=r(ret,"longformer"),ret.forEach(t),tBo=r(fAe," \u2014 "),vN=n(fAe,"A",{href:!0});var tet=s(vN);aBo=r(tet,"LongformerForTokenClassification"),tet.forEach(t),nBo=r(fAe," (Longformer model)"),fAe.forEach(t),sBo=i(q),z2=n(q,"LI",{});var mAe=s(z2);vse=n(mAe,"STRONG",{});var aet=s(vse);lBo=r(aet,"megatron-bert"),aet.forEach(t),iBo=r(mAe," \u2014 "),TN=n(mAe,"A",{href:!0});var net=s(TN);dBo=r(net,"MegatronBertForTokenClassification"),net.forEach(t),cBo=r(mAe," (MegatronBert model)"),mAe.forEach(t),fBo=i(q),W2=n(q,"LI",{});var gAe=s(W2);Tse=n(gAe,"STRONG",{});var set=s(Tse);mBo=r(set,"mobilebert"),set.forEach(t),gBo=r(gAe," \u2014 "),FN=n(gAe,"A",{href:!0});var iet=s(FN);hBo=r(iet,"MobileBertForTokenClassification"),iet.forEach(t),pBo=r(gAe," (MobileBERT model)"),gAe.forEach(t),_Bo=i(q),Q2=n(q,"LI",{});var hAe=s(Q2);Fse=n(hAe,"STRONG",{});var det=s(Fse);uBo=r(det,"mpnet"),det.forEach(t),bBo=r(hAe," \u2014 "),CN=n(hAe,"A",{href:!0});var cet=s(CN);vBo=r(cet,"MPNetForTokenClassification"),cet.forEach(t),TBo=r(hAe," (MPNet model)"),hAe.forEach(t),FBo=i(q),H2=n(q,"LI",{});var pAe=s(H2);Cse=n(pAe,"STRONG",{});var fet=s(Cse);CBo=r(fet,"nystromformer"),fet.forEach(t),MBo=r(pAe," \u2014 "),MN=n(pAe,"A",{href:!0});var met=s(MN);EBo=r(met,"NystromformerForTokenClassification"),met.forEach(t),yBo=r(pAe," (Nystromformer model)"),pAe.forEach(t),wBo=i(q),U2=n(q,"LI",{});var _Ae=s(U2);Mse=n(_Ae,"STRONG",{});var get=s(Mse);ABo=r(get,"qdqbert"),get.forEach(t),LBo=r(_Ae," \u2014 "),EN=n(_Ae,"A",{href:!0});var het=s(EN);BBo=r(het,"QDQBertForTokenClassification"),het.forEach(t),xBo=r(_Ae," (QDQBert model)"),_Ae.forEach(t),kBo=i(q),J2=n(q,"LI",{});var uAe=s(J2);Ese=n(uAe,"STRONG",{});var pet=s(Ese);RBo=r(pet,"rembert"),pet.forEach(t),SBo=r(uAe," \u2014 "),yN=n(uAe,"A",{href:!0});var _et=s(yN);PBo=r(_et,"RemBertForTokenClassification"),_et.forEach(t),$Bo=r(uAe," (RemBERT model)"),uAe.forEach(t),IBo=i(q),Y2=n(q,"LI",{});var bAe=s(Y2);yse=n(bAe,"STRONG",{});var uet=s(yse);jBo=r(uet,"roberta"),uet.forEach(t),NBo=r(bAe," \u2014 "),wN=n(bAe,"A",{href:!0});var bet=s(wN);DBo=r(bet,"RobertaForTokenClassification"),bet.forEach(t),qBo=r(bAe," (RoBERTa model)"),bAe.forEach(t),OBo=i(q),K2=n(q,"LI",{});var vAe=s(K2);wse=n(vAe,"STRONG",{});var vet=s(wse);GBo=r(vet,"roformer"),vet.forEach(t),XBo=r(vAe," \u2014 "),AN=n(vAe,"A",{href:!0});var Tet=s(AN);VBo=r(Tet,"RoFormerForTokenClassification"),Tet.forEach(t),zBo=r(vAe," (RoFormer model)"),vAe.forEach(t),WBo=i(q),Z2=n(q,"LI",{});var TAe=s(Z2);Ase=n(TAe,"STRONG",{});var Fet=s(Ase);QBo=r(Fet,"squeezebert"),Fet.forEach(t),HBo=r(TAe," \u2014 "),LN=n(TAe,"A",{href:!0});var Cet=s(LN);UBo=r(Cet,"SqueezeBertForTokenClassification"),Cet.forEach(t),JBo=r(TAe," (SqueezeBERT model)"),TAe.forEach(t),YBo=i(q),ev=n(q,"LI",{});var FAe=s(ev);Lse=n(FAe,"STRONG",{});var Met=s(Lse);KBo=r(Met,"xlm"),Met.forEach(t),ZBo=r(FAe," \u2014 "),BN=n(FAe,"A",{href:!0});var Eet=s(BN);exo=r(Eet,"XLMForTokenClassification"),Eet.forEach(t),oxo=r(FAe," (XLM model)"),FAe.forEach(t),rxo=i(q),ov=n(q,"LI",{});var CAe=s(ov);Bse=n(CAe,"STRONG",{});var yet=s(Bse);txo=r(yet,"xlm-roberta"),yet.forEach(t),axo=r(CAe," \u2014 "),xN=n(CAe,"A",{href:!0});var wet=s(xN);nxo=r(wet,"XLMRobertaForTokenClassification"),wet.forEach(t),sxo=r(CAe," (XLM-RoBERTa model)"),CAe.forEach(t),lxo=i(q),rv=n(q,"LI",{});var MAe=s(rv);xse=n(MAe,"STRONG",{});var Aet=s(xse);ixo=r(Aet,"xlm-roberta-xl"),Aet.forEach(t),dxo=r(MAe," \u2014 "),kN=n(MAe,"A",{href:!0});var Let=s(kN);cxo=r(Let,"XLMRobertaXLForTokenClassification"),Let.forEach(t),fxo=r(MAe," (XLM-RoBERTa-XL model)"),MAe.forEach(t),mxo=i(q),tv=n(q,"LI",{});var EAe=s(tv);kse=n(EAe,"STRONG",{});var Bet=s(kse);gxo=r(Bet,"xlnet"),Bet.forEach(t),hxo=r(EAe," \u2014 "),RN=n(EAe,"A",{href:!0});var xet=s(RN);pxo=r(xet,"XLNetForTokenClassification"),xet.forEach(t),_xo=r(EAe," (XLNet model)"),EAe.forEach(t),uxo=i(q),av=n(q,"LI",{});var yAe=s(av);Rse=n(yAe,"STRONG",{});var ket=s(Rse);bxo=r(ket,"yoso"),ket.forEach(t),vxo=r(yAe," \u2014 "),SN=n(yAe,"A",{href:!0});var Ret=s(SN);Txo=r(Ret,"YosoForTokenClassification"),Ret.forEach(t),Fxo=r(yAe," (YOSO model)"),yAe.forEach(t),q.forEach(t),Cxo=i(Ht),nv=n(Ht,"P",{});var wAe=s(nv);Mxo=r(wAe,"The model is set in evaluation mode by default using "),Sse=n(wAe,"CODE",{});var Set=s(Sse);Exo=r(Set,"model.eval()"),Set.forEach(t),yxo=r(wAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pse=n(wAe,"CODE",{});var Pet=s(Pse);wxo=r(Pet,"model.train()"),Pet.forEach(t),wAe.forEach(t),Axo=i(Ht),$se=n(Ht,"P",{});var $et=s($se);Lxo=r($et,"Examples:"),$et.forEach(t),Bxo=i(Ht),m(Xw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),pke=i(c),Ed=n(c,"H2",{class:!0});var ESe=s(Ed);sv=n(ESe,"A",{id:!0,class:!0,href:!0});var Iet=s(sv);Ise=n(Iet,"SPAN",{});var jet=s(Ise);m(Vw.$$.fragment,jet),jet.forEach(t),Iet.forEach(t),xxo=i(ESe),jse=n(ESe,"SPAN",{});var Net=s(jse);kxo=r(Net,"AutoModelForQuestionAnswering"),Net.forEach(t),ESe.forEach(t),_ke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(zw.$$.fragment,fl),Rxo=i(fl),yd=n(fl,"P",{});var nW=s(yd);Sxo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nse=n(nW,"CODE",{});var Det=s(Nse);Pxo=r(Det,"from_pretrained()"),Det.forEach(t),$xo=r(nW,"class method or the "),Dse=n(nW,"CODE",{});var qet=s(Dse);Ixo=r(qet,"from_config()"),qet.forEach(t),jxo=r(nW,`class
method.`),nW.forEach(t),Nxo=i(fl),Ww=n(fl,"P",{});var ySe=s(Ww);Dxo=r(ySe,"This class cannot be instantiated directly using "),qse=n(ySe,"CODE",{});var Oet=s(qse);qxo=r(Oet,"__init__()"),Oet.forEach(t),Oxo=r(ySe," (throws an error)."),ySe.forEach(t),Gxo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(Qw.$$.fragment,ml),Xxo=i(ml),Ose=n(ml,"P",{});var Get=s(Ose);Vxo=r(Get,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Get.forEach(t),zxo=i(ml),wd=n(ml,"P",{});var sW=s(wd);Wxo=r(sW,`Note:
Loading a model from its configuration file does `),Gse=n(sW,"STRONG",{});var Xet=s(Gse);Qxo=r(Xet,"not"),Xet.forEach(t),Hxo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xse=n(sW,"CODE",{});var Vet=s(Xse);Uxo=r(Vet,"from_pretrained()"),Vet.forEach(t),Jxo=r(sW,"to load the model weights."),sW.forEach(t),Yxo=i(ml),Vse=n(ml,"P",{});var zet=s(Vse);Kxo=r(zet,"Examples:"),zet.forEach(t),Zxo=i(ml),m(Hw.$$.fragment,ml),ml.forEach(t),eko=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(Uw.$$.fragment,Ut),oko=i(Ut),zse=n(Ut,"P",{});var Wet=s(zse);rko=r(Wet,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wet.forEach(t),tko=i(Ut),Za=n(Ut,"P",{});var h5=s(Za);ako=r(h5,"The model class to instantiate is selected based on the "),Wse=n(h5,"CODE",{});var Qet=s(Wse);nko=r(Qet,"model_type"),Qet.forEach(t),sko=r(h5,` property of the config object (either
passed as an argument or loaded from `),Qse=n(h5,"CODE",{});var Het=s(Qse);lko=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),iko=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hse=n(h5,"CODE",{});var Uet=s(Hse);dko=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),cko=r(h5,":"),h5.forEach(t),fko=i(Ut),R=n(Ut,"UL",{});var P=s(R);lv=n(P,"LI",{});var AAe=s(lv);Use=n(AAe,"STRONG",{});var Jet=s(Use);mko=r(Jet,"albert"),Jet.forEach(t),gko=r(AAe," \u2014 "),PN=n(AAe,"A",{href:!0});var Yet=s(PN);hko=r(Yet,"AlbertForQuestionAnswering"),Yet.forEach(t),pko=r(AAe," (ALBERT model)"),AAe.forEach(t),_ko=i(P),iv=n(P,"LI",{});var LAe=s(iv);Jse=n(LAe,"STRONG",{});var Ket=s(Jse);uko=r(Ket,"bart"),Ket.forEach(t),bko=r(LAe," \u2014 "),$N=n(LAe,"A",{href:!0});var Zet=s($N);vko=r(Zet,"BartForQuestionAnswering"),Zet.forEach(t),Tko=r(LAe," (BART model)"),LAe.forEach(t),Fko=i(P),dv=n(P,"LI",{});var BAe=s(dv);Yse=n(BAe,"STRONG",{});var eot=s(Yse);Cko=r(eot,"bert"),eot.forEach(t),Mko=r(BAe," \u2014 "),IN=n(BAe,"A",{href:!0});var oot=s(IN);Eko=r(oot,"BertForQuestionAnswering"),oot.forEach(t),yko=r(BAe," (BERT model)"),BAe.forEach(t),wko=i(P),cv=n(P,"LI",{});var xAe=s(cv);Kse=n(xAe,"STRONG",{});var rot=s(Kse);Ako=r(rot,"big_bird"),rot.forEach(t),Lko=r(xAe," \u2014 "),jN=n(xAe,"A",{href:!0});var tot=s(jN);Bko=r(tot,"BigBirdForQuestionAnswering"),tot.forEach(t),xko=r(xAe," (BigBird model)"),xAe.forEach(t),kko=i(P),fv=n(P,"LI",{});var kAe=s(fv);Zse=n(kAe,"STRONG",{});var aot=s(Zse);Rko=r(aot,"bigbird_pegasus"),aot.forEach(t),Sko=r(kAe," \u2014 "),NN=n(kAe,"A",{href:!0});var not=s(NN);Pko=r(not,"BigBirdPegasusForQuestionAnswering"),not.forEach(t),$ko=r(kAe," (BigBirdPegasus model)"),kAe.forEach(t),Iko=i(P),mv=n(P,"LI",{});var RAe=s(mv);ele=n(RAe,"STRONG",{});var sot=s(ele);jko=r(sot,"camembert"),sot.forEach(t),Nko=r(RAe," \u2014 "),DN=n(RAe,"A",{href:!0});var lot=s(DN);Dko=r(lot,"CamembertForQuestionAnswering"),lot.forEach(t),qko=r(RAe," (CamemBERT model)"),RAe.forEach(t),Oko=i(P),gv=n(P,"LI",{});var SAe=s(gv);ole=n(SAe,"STRONG",{});var iot=s(ole);Gko=r(iot,"canine"),iot.forEach(t),Xko=r(SAe," \u2014 "),qN=n(SAe,"A",{href:!0});var dot=s(qN);Vko=r(dot,"CanineForQuestionAnswering"),dot.forEach(t),zko=r(SAe," (Canine model)"),SAe.forEach(t),Wko=i(P),hv=n(P,"LI",{});var PAe=s(hv);rle=n(PAe,"STRONG",{});var cot=s(rle);Qko=r(cot,"convbert"),cot.forEach(t),Hko=r(PAe," \u2014 "),ON=n(PAe,"A",{href:!0});var fot=s(ON);Uko=r(fot,"ConvBertForQuestionAnswering"),fot.forEach(t),Jko=r(PAe," (ConvBERT model)"),PAe.forEach(t),Yko=i(P),pv=n(P,"LI",{});var $Ae=s(pv);tle=n($Ae,"STRONG",{});var mot=s(tle);Kko=r(mot,"data2vec-text"),mot.forEach(t),Zko=r($Ae," \u2014 "),GN=n($Ae,"A",{href:!0});var got=s(GN);eRo=r(got,"Data2VecTextForQuestionAnswering"),got.forEach(t),oRo=r($Ae," (Data2VecText model)"),$Ae.forEach(t),rRo=i(P),_v=n(P,"LI",{});var IAe=s(_v);ale=n(IAe,"STRONG",{});var hot=s(ale);tRo=r(hot,"deberta"),hot.forEach(t),aRo=r(IAe," \u2014 "),XN=n(IAe,"A",{href:!0});var pot=s(XN);nRo=r(pot,"DebertaForQuestionAnswering"),pot.forEach(t),sRo=r(IAe," (DeBERTa model)"),IAe.forEach(t),lRo=i(P),uv=n(P,"LI",{});var jAe=s(uv);nle=n(jAe,"STRONG",{});var _ot=s(nle);iRo=r(_ot,"deberta-v2"),_ot.forEach(t),dRo=r(jAe," \u2014 "),VN=n(jAe,"A",{href:!0});var uot=s(VN);cRo=r(uot,"DebertaV2ForQuestionAnswering"),uot.forEach(t),fRo=r(jAe," (DeBERTa-v2 model)"),jAe.forEach(t),mRo=i(P),bv=n(P,"LI",{});var NAe=s(bv);sle=n(NAe,"STRONG",{});var bot=s(sle);gRo=r(bot,"distilbert"),bot.forEach(t),hRo=r(NAe," \u2014 "),zN=n(NAe,"A",{href:!0});var vot=s(zN);pRo=r(vot,"DistilBertForQuestionAnswering"),vot.forEach(t),_Ro=r(NAe," (DistilBERT model)"),NAe.forEach(t),uRo=i(P),vv=n(P,"LI",{});var DAe=s(vv);lle=n(DAe,"STRONG",{});var Tot=s(lle);bRo=r(Tot,"electra"),Tot.forEach(t),vRo=r(DAe," \u2014 "),WN=n(DAe,"A",{href:!0});var Fot=s(WN);TRo=r(Fot,"ElectraForQuestionAnswering"),Fot.forEach(t),FRo=r(DAe," (ELECTRA model)"),DAe.forEach(t),CRo=i(P),Tv=n(P,"LI",{});var qAe=s(Tv);ile=n(qAe,"STRONG",{});var Cot=s(ile);MRo=r(Cot,"flaubert"),Cot.forEach(t),ERo=r(qAe," \u2014 "),QN=n(qAe,"A",{href:!0});var Mot=s(QN);yRo=r(Mot,"FlaubertForQuestionAnsweringSimple"),Mot.forEach(t),wRo=r(qAe," (FlauBERT model)"),qAe.forEach(t),ARo=i(P),Fv=n(P,"LI",{});var OAe=s(Fv);dle=n(OAe,"STRONG",{});var Eot=s(dle);LRo=r(Eot,"fnet"),Eot.forEach(t),BRo=r(OAe," \u2014 "),HN=n(OAe,"A",{href:!0});var yot=s(HN);xRo=r(yot,"FNetForQuestionAnswering"),yot.forEach(t),kRo=r(OAe," (FNet model)"),OAe.forEach(t),RRo=i(P),Cv=n(P,"LI",{});var GAe=s(Cv);cle=n(GAe,"STRONG",{});var wot=s(cle);SRo=r(wot,"funnel"),wot.forEach(t),PRo=r(GAe," \u2014 "),UN=n(GAe,"A",{href:!0});var Aot=s(UN);$Ro=r(Aot,"FunnelForQuestionAnswering"),Aot.forEach(t),IRo=r(GAe," (Funnel Transformer model)"),GAe.forEach(t),jRo=i(P),Mv=n(P,"LI",{});var XAe=s(Mv);fle=n(XAe,"STRONG",{});var Lot=s(fle);NRo=r(Lot,"gptj"),Lot.forEach(t),DRo=r(XAe," \u2014 "),JN=n(XAe,"A",{href:!0});var Bot=s(JN);qRo=r(Bot,"GPTJForQuestionAnswering"),Bot.forEach(t),ORo=r(XAe," (GPT-J model)"),XAe.forEach(t),GRo=i(P),Ev=n(P,"LI",{});var VAe=s(Ev);mle=n(VAe,"STRONG",{});var xot=s(mle);XRo=r(xot,"ibert"),xot.forEach(t),VRo=r(VAe," \u2014 "),YN=n(VAe,"A",{href:!0});var kot=s(YN);zRo=r(kot,"IBertForQuestionAnswering"),kot.forEach(t),WRo=r(VAe," (I-BERT model)"),VAe.forEach(t),QRo=i(P),yv=n(P,"LI",{});var zAe=s(yv);gle=n(zAe,"STRONG",{});var Rot=s(gle);HRo=r(Rot,"layoutlmv2"),Rot.forEach(t),URo=r(zAe," \u2014 "),KN=n(zAe,"A",{href:!0});var Sot=s(KN);JRo=r(Sot,"LayoutLMv2ForQuestionAnswering"),Sot.forEach(t),YRo=r(zAe," (LayoutLMv2 model)"),zAe.forEach(t),KRo=i(P),wv=n(P,"LI",{});var WAe=s(wv);hle=n(WAe,"STRONG",{});var Pot=s(hle);ZRo=r(Pot,"led"),Pot.forEach(t),eSo=r(WAe," \u2014 "),ZN=n(WAe,"A",{href:!0});var $ot=s(ZN);oSo=r($ot,"LEDForQuestionAnswering"),$ot.forEach(t),rSo=r(WAe," (LED model)"),WAe.forEach(t),tSo=i(P),Av=n(P,"LI",{});var QAe=s(Av);ple=n(QAe,"STRONG",{});var Iot=s(ple);aSo=r(Iot,"longformer"),Iot.forEach(t),nSo=r(QAe," \u2014 "),eD=n(QAe,"A",{href:!0});var jot=s(eD);sSo=r(jot,"LongformerForQuestionAnswering"),jot.forEach(t),lSo=r(QAe," (Longformer model)"),QAe.forEach(t),iSo=i(P),Lv=n(P,"LI",{});var HAe=s(Lv);_le=n(HAe,"STRONG",{});var Not=s(_le);dSo=r(Not,"lxmert"),Not.forEach(t),cSo=r(HAe," \u2014 "),oD=n(HAe,"A",{href:!0});var Dot=s(oD);fSo=r(Dot,"LxmertForQuestionAnswering"),Dot.forEach(t),mSo=r(HAe," (LXMERT model)"),HAe.forEach(t),gSo=i(P),Bv=n(P,"LI",{});var UAe=s(Bv);ule=n(UAe,"STRONG",{});var qot=s(ule);hSo=r(qot,"mbart"),qot.forEach(t),pSo=r(UAe," \u2014 "),rD=n(UAe,"A",{href:!0});var Oot=s(rD);_So=r(Oot,"MBartForQuestionAnswering"),Oot.forEach(t),uSo=r(UAe," (mBART model)"),UAe.forEach(t),bSo=i(P),xv=n(P,"LI",{});var JAe=s(xv);ble=n(JAe,"STRONG",{});var Got=s(ble);vSo=r(Got,"megatron-bert"),Got.forEach(t),TSo=r(JAe," \u2014 "),tD=n(JAe,"A",{href:!0});var Xot=s(tD);FSo=r(Xot,"MegatronBertForQuestionAnswering"),Xot.forEach(t),CSo=r(JAe," (MegatronBert model)"),JAe.forEach(t),MSo=i(P),kv=n(P,"LI",{});var YAe=s(kv);vle=n(YAe,"STRONG",{});var Vot=s(vle);ESo=r(Vot,"mobilebert"),Vot.forEach(t),ySo=r(YAe," \u2014 "),aD=n(YAe,"A",{href:!0});var zot=s(aD);wSo=r(zot,"MobileBertForQuestionAnswering"),zot.forEach(t),ASo=r(YAe," (MobileBERT model)"),YAe.forEach(t),LSo=i(P),Rv=n(P,"LI",{});var KAe=s(Rv);Tle=n(KAe,"STRONG",{});var Wot=s(Tle);BSo=r(Wot,"mpnet"),Wot.forEach(t),xSo=r(KAe," \u2014 "),nD=n(KAe,"A",{href:!0});var Qot=s(nD);kSo=r(Qot,"MPNetForQuestionAnswering"),Qot.forEach(t),RSo=r(KAe," (MPNet model)"),KAe.forEach(t),SSo=i(P),Sv=n(P,"LI",{});var ZAe=s(Sv);Fle=n(ZAe,"STRONG",{});var Hot=s(Fle);PSo=r(Hot,"nystromformer"),Hot.forEach(t),$So=r(ZAe," \u2014 "),sD=n(ZAe,"A",{href:!0});var Uot=s(sD);ISo=r(Uot,"NystromformerForQuestionAnswering"),Uot.forEach(t),jSo=r(ZAe," (Nystromformer model)"),ZAe.forEach(t),NSo=i(P),Pv=n(P,"LI",{});var e0e=s(Pv);Cle=n(e0e,"STRONG",{});var Jot=s(Cle);DSo=r(Jot,"qdqbert"),Jot.forEach(t),qSo=r(e0e," \u2014 "),lD=n(e0e,"A",{href:!0});var Yot=s(lD);OSo=r(Yot,"QDQBertForQuestionAnswering"),Yot.forEach(t),GSo=r(e0e," (QDQBert model)"),e0e.forEach(t),XSo=i(P),$v=n(P,"LI",{});var o0e=s($v);Mle=n(o0e,"STRONG",{});var Kot=s(Mle);VSo=r(Kot,"reformer"),Kot.forEach(t),zSo=r(o0e," \u2014 "),iD=n(o0e,"A",{href:!0});var Zot=s(iD);WSo=r(Zot,"ReformerForQuestionAnswering"),Zot.forEach(t),QSo=r(o0e," (Reformer model)"),o0e.forEach(t),HSo=i(P),Iv=n(P,"LI",{});var r0e=s(Iv);Ele=n(r0e,"STRONG",{});var ert=s(Ele);USo=r(ert,"rembert"),ert.forEach(t),JSo=r(r0e," \u2014 "),dD=n(r0e,"A",{href:!0});var ort=s(dD);YSo=r(ort,"RemBertForQuestionAnswering"),ort.forEach(t),KSo=r(r0e," (RemBERT model)"),r0e.forEach(t),ZSo=i(P),jv=n(P,"LI",{});var t0e=s(jv);yle=n(t0e,"STRONG",{});var rrt=s(yle);ePo=r(rrt,"roberta"),rrt.forEach(t),oPo=r(t0e," \u2014 "),cD=n(t0e,"A",{href:!0});var trt=s(cD);rPo=r(trt,"RobertaForQuestionAnswering"),trt.forEach(t),tPo=r(t0e," (RoBERTa model)"),t0e.forEach(t),aPo=i(P),Nv=n(P,"LI",{});var a0e=s(Nv);wle=n(a0e,"STRONG",{});var art=s(wle);nPo=r(art,"roformer"),art.forEach(t),sPo=r(a0e," \u2014 "),fD=n(a0e,"A",{href:!0});var nrt=s(fD);lPo=r(nrt,"RoFormerForQuestionAnswering"),nrt.forEach(t),iPo=r(a0e," (RoFormer model)"),a0e.forEach(t),dPo=i(P),Dv=n(P,"LI",{});var n0e=s(Dv);Ale=n(n0e,"STRONG",{});var srt=s(Ale);cPo=r(srt,"splinter"),srt.forEach(t),fPo=r(n0e," \u2014 "),mD=n(n0e,"A",{href:!0});var lrt=s(mD);mPo=r(lrt,"SplinterForQuestionAnswering"),lrt.forEach(t),gPo=r(n0e," (Splinter model)"),n0e.forEach(t),hPo=i(P),qv=n(P,"LI",{});var s0e=s(qv);Lle=n(s0e,"STRONG",{});var irt=s(Lle);pPo=r(irt,"squeezebert"),irt.forEach(t),_Po=r(s0e," \u2014 "),gD=n(s0e,"A",{href:!0});var drt=s(gD);uPo=r(drt,"SqueezeBertForQuestionAnswering"),drt.forEach(t),bPo=r(s0e," (SqueezeBERT model)"),s0e.forEach(t),vPo=i(P),Ov=n(P,"LI",{});var l0e=s(Ov);Ble=n(l0e,"STRONG",{});var crt=s(Ble);TPo=r(crt,"xlm"),crt.forEach(t),FPo=r(l0e," \u2014 "),hD=n(l0e,"A",{href:!0});var frt=s(hD);CPo=r(frt,"XLMForQuestionAnsweringSimple"),frt.forEach(t),MPo=r(l0e," (XLM model)"),l0e.forEach(t),EPo=i(P),Gv=n(P,"LI",{});var i0e=s(Gv);xle=n(i0e,"STRONG",{});var mrt=s(xle);yPo=r(mrt,"xlm-roberta"),mrt.forEach(t),wPo=r(i0e," \u2014 "),pD=n(i0e,"A",{href:!0});var grt=s(pD);APo=r(grt,"XLMRobertaForQuestionAnswering"),grt.forEach(t),LPo=r(i0e," (XLM-RoBERTa model)"),i0e.forEach(t),BPo=i(P),Xv=n(P,"LI",{});var d0e=s(Xv);kle=n(d0e,"STRONG",{});var hrt=s(kle);xPo=r(hrt,"xlm-roberta-xl"),hrt.forEach(t),kPo=r(d0e," \u2014 "),_D=n(d0e,"A",{href:!0});var prt=s(_D);RPo=r(prt,"XLMRobertaXLForQuestionAnswering"),prt.forEach(t),SPo=r(d0e," (XLM-RoBERTa-XL model)"),d0e.forEach(t),PPo=i(P),Vv=n(P,"LI",{});var c0e=s(Vv);Rle=n(c0e,"STRONG",{});var _rt=s(Rle);$Po=r(_rt,"xlnet"),_rt.forEach(t),IPo=r(c0e," \u2014 "),uD=n(c0e,"A",{href:!0});var urt=s(uD);jPo=r(urt,"XLNetForQuestionAnsweringSimple"),urt.forEach(t),NPo=r(c0e," (XLNet model)"),c0e.forEach(t),DPo=i(P),zv=n(P,"LI",{});var f0e=s(zv);Sle=n(f0e,"STRONG",{});var brt=s(Sle);qPo=r(brt,"yoso"),brt.forEach(t),OPo=r(f0e," \u2014 "),bD=n(f0e,"A",{href:!0});var vrt=s(bD);GPo=r(vrt,"YosoForQuestionAnswering"),vrt.forEach(t),XPo=r(f0e," (YOSO model)"),f0e.forEach(t),P.forEach(t),VPo=i(Ut),Wv=n(Ut,"P",{});var m0e=s(Wv);zPo=r(m0e,"The model is set in evaluation mode by default using "),Ple=n(m0e,"CODE",{});var Trt=s(Ple);WPo=r(Trt,"model.eval()"),Trt.forEach(t),QPo=r(m0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$le=n(m0e,"CODE",{});var Frt=s($le);HPo=r(Frt,"model.train()"),Frt.forEach(t),m0e.forEach(t),UPo=i(Ut),Ile=n(Ut,"P",{});var Crt=s(Ile);JPo=r(Crt,"Examples:"),Crt.forEach(t),YPo=i(Ut),m(Jw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),uke=i(c),Ad=n(c,"H2",{class:!0});var wSe=s(Ad);Qv=n(wSe,"A",{id:!0,class:!0,href:!0});var Mrt=s(Qv);jle=n(Mrt,"SPAN",{});var Ert=s(jle);m(Yw.$$.fragment,Ert),Ert.forEach(t),Mrt.forEach(t),KPo=i(wSe),Nle=n(wSe,"SPAN",{});var yrt=s(Nle);ZPo=r(yrt,"AutoModelForTableQuestionAnswering"),yrt.forEach(t),wSe.forEach(t),bke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(Kw.$$.fragment,gl),e$o=i(gl),Ld=n(gl,"P",{});var lW=s(Ld);o$o=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dle=n(lW,"CODE",{});var wrt=s(Dle);r$o=r(wrt,"from_pretrained()"),wrt.forEach(t),t$o=r(lW,"class method or the "),qle=n(lW,"CODE",{});var Art=s(qle);a$o=r(Art,"from_config()"),Art.forEach(t),n$o=r(lW,`class
method.`),lW.forEach(t),s$o=i(gl),Zw=n(gl,"P",{});var ASe=s(Zw);l$o=r(ASe,"This class cannot be instantiated directly using "),Ole=n(ASe,"CODE",{});var Lrt=s(Ole);i$o=r(Lrt,"__init__()"),Lrt.forEach(t),d$o=r(ASe," (throws an error)."),ASe.forEach(t),c$o=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(e6.$$.fragment,hl),f$o=i(hl),Gle=n(hl,"P",{});var Brt=s(Gle);m$o=r(Brt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Brt.forEach(t),g$o=i(hl),Bd=n(hl,"P",{});var iW=s(Bd);h$o=r(iW,`Note:
Loading a model from its configuration file does `),Xle=n(iW,"STRONG",{});var xrt=s(Xle);p$o=r(xrt,"not"),xrt.forEach(t),_$o=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vle=n(iW,"CODE",{});var krt=s(Vle);u$o=r(krt,"from_pretrained()"),krt.forEach(t),b$o=r(iW,"to load the model weights."),iW.forEach(t),v$o=i(hl),zle=n(hl,"P",{});var Rrt=s(zle);T$o=r(Rrt,"Examples:"),Rrt.forEach(t),F$o=i(hl),m(o6.$$.fragment,hl),hl.forEach(t),C$o=i(gl),He=n(gl,"DIV",{class:!0});var Jt=s(He);m(r6.$$.fragment,Jt),M$o=i(Jt),Wle=n(Jt,"P",{});var Srt=s(Wle);E$o=r(Srt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Srt.forEach(t),y$o=i(Jt),en=n(Jt,"P",{});var p5=s(en);w$o=r(p5,"The model class to instantiate is selected based on the "),Qle=n(p5,"CODE",{});var Prt=s(Qle);A$o=r(Prt,"model_type"),Prt.forEach(t),L$o=r(p5,` property of the config object (either
passed as an argument or loaded from `),Hle=n(p5,"CODE",{});var $rt=s(Hle);B$o=r($rt,"pretrained_model_name_or_path"),$rt.forEach(t),x$o=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ule=n(p5,"CODE",{});var Irt=s(Ule);k$o=r(Irt,"pretrained_model_name_or_path"),Irt.forEach(t),R$o=r(p5,":"),p5.forEach(t),S$o=i(Jt),Jle=n(Jt,"UL",{});var jrt=s(Jle);Hv=n(jrt,"LI",{});var g0e=s(Hv);Yle=n(g0e,"STRONG",{});var Nrt=s(Yle);P$o=r(Nrt,"tapas"),Nrt.forEach(t),$$o=r(g0e," \u2014 "),vD=n(g0e,"A",{href:!0});var Drt=s(vD);I$o=r(Drt,"TapasForQuestionAnswering"),Drt.forEach(t),j$o=r(g0e," (TAPAS model)"),g0e.forEach(t),jrt.forEach(t),N$o=i(Jt),Uv=n(Jt,"P",{});var h0e=s(Uv);D$o=r(h0e,"The model is set in evaluation mode by default using "),Kle=n(h0e,"CODE",{});var qrt=s(Kle);q$o=r(qrt,"model.eval()"),qrt.forEach(t),O$o=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=n(h0e,"CODE",{});var Ort=s(Zle);G$o=r(Ort,"model.train()"),Ort.forEach(t),h0e.forEach(t),X$o=i(Jt),eie=n(Jt,"P",{});var Grt=s(eie);V$o=r(Grt,"Examples:"),Grt.forEach(t),z$o=i(Jt),m(t6.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),vke=i(c),xd=n(c,"H2",{class:!0});var LSe=s(xd);Jv=n(LSe,"A",{id:!0,class:!0,href:!0});var Xrt=s(Jv);oie=n(Xrt,"SPAN",{});var Vrt=s(oie);m(a6.$$.fragment,Vrt),Vrt.forEach(t),Xrt.forEach(t),W$o=i(LSe),rie=n(LSe,"SPAN",{});var zrt=s(rie);Q$o=r(zrt,"AutoModelForImageClassification"),zrt.forEach(t),LSe.forEach(t),Tke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(n6.$$.fragment,pl),H$o=i(pl),kd=n(pl,"P",{});var dW=s(kd);U$o=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tie=n(dW,"CODE",{});var Wrt=s(tie);J$o=r(Wrt,"from_pretrained()"),Wrt.forEach(t),Y$o=r(dW,"class method or the "),aie=n(dW,"CODE",{});var Qrt=s(aie);K$o=r(Qrt,"from_config()"),Qrt.forEach(t),Z$o=r(dW,`class
method.`),dW.forEach(t),eIo=i(pl),s6=n(pl,"P",{});var BSe=s(s6);oIo=r(BSe,"This class cannot be instantiated directly using "),nie=n(BSe,"CODE",{});var Hrt=s(nie);rIo=r(Hrt,"__init__()"),Hrt.forEach(t),tIo=r(BSe," (throws an error)."),BSe.forEach(t),aIo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(l6.$$.fragment,_l),nIo=i(_l),sie=n(_l,"P",{});var Urt=s(sie);sIo=r(Urt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Urt.forEach(t),lIo=i(_l),Rd=n(_l,"P",{});var cW=s(Rd);iIo=r(cW,`Note:
Loading a model from its configuration file does `),lie=n(cW,"STRONG",{});var Jrt=s(lie);dIo=r(Jrt,"not"),Jrt.forEach(t),cIo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),iie=n(cW,"CODE",{});var Yrt=s(iie);fIo=r(Yrt,"from_pretrained()"),Yrt.forEach(t),mIo=r(cW,"to load the model weights."),cW.forEach(t),gIo=i(_l),die=n(_l,"P",{});var Krt=s(die);hIo=r(Krt,"Examples:"),Krt.forEach(t),pIo=i(_l),m(i6.$$.fragment,_l),_l.forEach(t),_Io=i(pl),Ue=n(pl,"DIV",{class:!0});var Yt=s(Ue);m(d6.$$.fragment,Yt),uIo=i(Yt),cie=n(Yt,"P",{});var Zrt=s(cie);bIo=r(Zrt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zrt.forEach(t),vIo=i(Yt),on=n(Yt,"P",{});var _5=s(on);TIo=r(_5,"The model class to instantiate is selected based on the "),fie=n(_5,"CODE",{});var ett=s(fie);FIo=r(ett,"model_type"),ett.forEach(t),CIo=r(_5,` property of the config object (either
passed as an argument or loaded from `),mie=n(_5,"CODE",{});var ott=s(mie);MIo=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),EIo=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=n(_5,"CODE",{});var rtt=s(gie);yIo=r(rtt,"pretrained_model_name_or_path"),rtt.forEach(t),wIo=r(_5,":"),_5.forEach(t),AIo=i(Yt),me=n(Yt,"UL",{});var Fe=s(me);Yv=n(Fe,"LI",{});var p0e=s(Yv);hie=n(p0e,"STRONG",{});var ttt=s(hie);LIo=r(ttt,"beit"),ttt.forEach(t),BIo=r(p0e," \u2014 "),TD=n(p0e,"A",{href:!0});var att=s(TD);xIo=r(att,"BeitForImageClassification"),att.forEach(t),kIo=r(p0e," (BEiT model)"),p0e.forEach(t),RIo=i(Fe),Kv=n(Fe,"LI",{});var _0e=s(Kv);pie=n(_0e,"STRONG",{});var ntt=s(pie);SIo=r(ntt,"convnext"),ntt.forEach(t),PIo=r(_0e," \u2014 "),FD=n(_0e,"A",{href:!0});var stt=s(FD);$Io=r(stt,"ConvNextForImageClassification"),stt.forEach(t),IIo=r(_0e," (ConvNext model)"),_0e.forEach(t),jIo=i(Fe),qs=n(Fe,"LI",{});var W8=s(qs);_ie=n(W8,"STRONG",{});var ltt=s(_ie);NIo=r(ltt,"deit"),ltt.forEach(t),DIo=r(W8," \u2014 "),CD=n(W8,"A",{href:!0});var itt=s(CD);qIo=r(itt,"DeiTForImageClassification"),itt.forEach(t),OIo=r(W8," or "),MD=n(W8,"A",{href:!0});var dtt=s(MD);GIo=r(dtt,"DeiTForImageClassificationWithTeacher"),dtt.forEach(t),XIo=r(W8," (DeiT model)"),W8.forEach(t),VIo=i(Fe),Zv=n(Fe,"LI",{});var u0e=s(Zv);uie=n(u0e,"STRONG",{});var ctt=s(uie);zIo=r(ctt,"imagegpt"),ctt.forEach(t),WIo=r(u0e," \u2014 "),ED=n(u0e,"A",{href:!0});var ftt=s(ED);QIo=r(ftt,"ImageGPTForImageClassification"),ftt.forEach(t),HIo=r(u0e," (ImageGPT model)"),u0e.forEach(t),UIo=i(Fe),ma=n(Fe,"LI",{});var $f=s(ma);bie=n($f,"STRONG",{});var mtt=s(bie);JIo=r(mtt,"perceiver"),mtt.forEach(t),YIo=r($f," \u2014 "),yD=n($f,"A",{href:!0});var gtt=s(yD);KIo=r(gtt,"PerceiverForImageClassificationLearned"),gtt.forEach(t),ZIo=r($f," or "),wD=n($f,"A",{href:!0});var htt=s(wD);ejo=r(htt,"PerceiverForImageClassificationFourier"),htt.forEach(t),ojo=r($f," or "),AD=n($f,"A",{href:!0});var ptt=s(AD);rjo=r(ptt,"PerceiverForImageClassificationConvProcessing"),ptt.forEach(t),tjo=r($f," (Perceiver model)"),$f.forEach(t),ajo=i(Fe),eT=n(Fe,"LI",{});var b0e=s(eT);vie=n(b0e,"STRONG",{});var _tt=s(vie);njo=r(_tt,"poolformer"),_tt.forEach(t),sjo=r(b0e," \u2014 "),LD=n(b0e,"A",{href:!0});var utt=s(LD);ljo=r(utt,"PoolFormerForImageClassification"),utt.forEach(t),ijo=r(b0e," (PoolFormer model)"),b0e.forEach(t),djo=i(Fe),oT=n(Fe,"LI",{});var v0e=s(oT);Tie=n(v0e,"STRONG",{});var btt=s(Tie);cjo=r(btt,"resnet"),btt.forEach(t),fjo=r(v0e," \u2014 "),BD=n(v0e,"A",{href:!0});var vtt=s(BD);mjo=r(vtt,"ResNetForImageClassification"),vtt.forEach(t),gjo=r(v0e," (ResNet model)"),v0e.forEach(t),hjo=i(Fe),rT=n(Fe,"LI",{});var T0e=s(rT);Fie=n(T0e,"STRONG",{});var Ttt=s(Fie);pjo=r(Ttt,"segformer"),Ttt.forEach(t),_jo=r(T0e," \u2014 "),xD=n(T0e,"A",{href:!0});var Ftt=s(xD);ujo=r(Ftt,"SegformerForImageClassification"),Ftt.forEach(t),bjo=r(T0e," (SegFormer model)"),T0e.forEach(t),vjo=i(Fe),tT=n(Fe,"LI",{});var F0e=s(tT);Cie=n(F0e,"STRONG",{});var Ctt=s(Cie);Tjo=r(Ctt,"swin"),Ctt.forEach(t),Fjo=r(F0e," \u2014 "),kD=n(F0e,"A",{href:!0});var Mtt=s(kD);Cjo=r(Mtt,"SwinForImageClassification"),Mtt.forEach(t),Mjo=r(F0e," (Swin model)"),F0e.forEach(t),Ejo=i(Fe),aT=n(Fe,"LI",{});var C0e=s(aT);Mie=n(C0e,"STRONG",{});var Ett=s(Mie);yjo=r(Ett,"van"),Ett.forEach(t),wjo=r(C0e," \u2014 "),RD=n(C0e,"A",{href:!0});var ytt=s(RD);Ajo=r(ytt,"VanForImageClassification"),ytt.forEach(t),Ljo=r(C0e," (VAN model)"),C0e.forEach(t),Bjo=i(Fe),nT=n(Fe,"LI",{});var M0e=s(nT);Eie=n(M0e,"STRONG",{});var wtt=s(Eie);xjo=r(wtt,"vit"),wtt.forEach(t),kjo=r(M0e," \u2014 "),SD=n(M0e,"A",{href:!0});var Att=s(SD);Rjo=r(Att,"ViTForImageClassification"),Att.forEach(t),Sjo=r(M0e," (ViT model)"),M0e.forEach(t),Fe.forEach(t),Pjo=i(Yt),sT=n(Yt,"P",{});var E0e=s(sT);$jo=r(E0e,"The model is set in evaluation mode by default using "),yie=n(E0e,"CODE",{});var Ltt=s(yie);Ijo=r(Ltt,"model.eval()"),Ltt.forEach(t),jjo=r(E0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=n(E0e,"CODE",{});var Btt=s(wie);Njo=r(Btt,"model.train()"),Btt.forEach(t),E0e.forEach(t),Djo=i(Yt),Aie=n(Yt,"P",{});var xtt=s(Aie);qjo=r(xtt,"Examples:"),xtt.forEach(t),Ojo=i(Yt),m(c6.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Fke=i(c),Sd=n(c,"H2",{class:!0});var xSe=s(Sd);lT=n(xSe,"A",{id:!0,class:!0,href:!0});var ktt=s(lT);Lie=n(ktt,"SPAN",{});var Rtt=s(Lie);m(f6.$$.fragment,Rtt),Rtt.forEach(t),ktt.forEach(t),Gjo=i(xSe),Bie=n(xSe,"SPAN",{});var Stt=s(Bie);Xjo=r(Stt,"AutoModelForVision2Seq"),Stt.forEach(t),xSe.forEach(t),Cke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(m6.$$.fragment,ul),Vjo=i(ul),Pd=n(ul,"P",{});var fW=s(Pd);zjo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xie=n(fW,"CODE",{});var Ptt=s(xie);Wjo=r(Ptt,"from_pretrained()"),Ptt.forEach(t),Qjo=r(fW,"class method or the "),kie=n(fW,"CODE",{});var $tt=s(kie);Hjo=r($tt,"from_config()"),$tt.forEach(t),Ujo=r(fW,`class
method.`),fW.forEach(t),Jjo=i(ul),g6=n(ul,"P",{});var kSe=s(g6);Yjo=r(kSe,"This class cannot be instantiated directly using "),Rie=n(kSe,"CODE",{});var Itt=s(Rie);Kjo=r(Itt,"__init__()"),Itt.forEach(t),Zjo=r(kSe," (throws an error)."),kSe.forEach(t),eNo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(h6.$$.fragment,bl),oNo=i(bl),Sie=n(bl,"P",{});var jtt=s(Sie);rNo=r(jtt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jtt.forEach(t),tNo=i(bl),$d=n(bl,"P",{});var mW=s($d);aNo=r(mW,`Note:
Loading a model from its configuration file does `),Pie=n(mW,"STRONG",{});var Ntt=s(Pie);nNo=r(Ntt,"not"),Ntt.forEach(t),sNo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=n(mW,"CODE",{});var Dtt=s($ie);lNo=r(Dtt,"from_pretrained()"),Dtt.forEach(t),iNo=r(mW,"to load the model weights."),mW.forEach(t),dNo=i(bl),Iie=n(bl,"P",{});var qtt=s(Iie);cNo=r(qtt,"Examples:"),qtt.forEach(t),fNo=i(bl),m(p6.$$.fragment,bl),bl.forEach(t),mNo=i(ul),Je=n(ul,"DIV",{class:!0});var Kt=s(Je);m(_6.$$.fragment,Kt),gNo=i(Kt),jie=n(Kt,"P",{});var Ott=s(jie);hNo=r(Ott,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ott.forEach(t),pNo=i(Kt),rn=n(Kt,"P",{});var u5=s(rn);_No=r(u5,"The model class to instantiate is selected based on the "),Nie=n(u5,"CODE",{});var Gtt=s(Nie);uNo=r(Gtt,"model_type"),Gtt.forEach(t),bNo=r(u5,` property of the config object (either
passed as an argument or loaded from `),Die=n(u5,"CODE",{});var Xtt=s(Die);vNo=r(Xtt,"pretrained_model_name_or_path"),Xtt.forEach(t),TNo=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(u5,"CODE",{});var Vtt=s(qie);FNo=r(Vtt,"pretrained_model_name_or_path"),Vtt.forEach(t),CNo=r(u5,":"),u5.forEach(t),MNo=i(Kt),Oie=n(Kt,"UL",{});var ztt=s(Oie);iT=n(ztt,"LI",{});var y0e=s(iT);Gie=n(y0e,"STRONG",{});var Wtt=s(Gie);ENo=r(Wtt,"vision-encoder-decoder"),Wtt.forEach(t),yNo=r(y0e," \u2014 "),PD=n(y0e,"A",{href:!0});var Qtt=s(PD);wNo=r(Qtt,"VisionEncoderDecoderModel"),Qtt.forEach(t),ANo=r(y0e," (Vision Encoder decoder model)"),y0e.forEach(t),ztt.forEach(t),LNo=i(Kt),dT=n(Kt,"P",{});var w0e=s(dT);BNo=r(w0e,"The model is set in evaluation mode by default using "),Xie=n(w0e,"CODE",{});var Htt=s(Xie);xNo=r(Htt,"model.eval()"),Htt.forEach(t),kNo=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=n(w0e,"CODE",{});var Utt=s(Vie);RNo=r(Utt,"model.train()"),Utt.forEach(t),w0e.forEach(t),SNo=i(Kt),zie=n(Kt,"P",{});var Jtt=s(zie);PNo=r(Jtt,"Examples:"),Jtt.forEach(t),$No=i(Kt),m(u6.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),Mke=i(c),Id=n(c,"H2",{class:!0});var RSe=s(Id);cT=n(RSe,"A",{id:!0,class:!0,href:!0});var Ytt=s(cT);Wie=n(Ytt,"SPAN",{});var Ktt=s(Wie);m(b6.$$.fragment,Ktt),Ktt.forEach(t),Ytt.forEach(t),INo=i(RSe),Qie=n(RSe,"SPAN",{});var Ztt=s(Qie);jNo=r(Ztt,"AutoModelForAudioClassification"),Ztt.forEach(t),RSe.forEach(t),Eke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(v6.$$.fragment,vl),NNo=i(vl),jd=n(vl,"P",{});var gW=s(jd);DNo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Hie=n(gW,"CODE",{});var eat=s(Hie);qNo=r(eat,"from_pretrained()"),eat.forEach(t),ONo=r(gW,"class method or the "),Uie=n(gW,"CODE",{});var oat=s(Uie);GNo=r(oat,"from_config()"),oat.forEach(t),XNo=r(gW,`class
method.`),gW.forEach(t),VNo=i(vl),T6=n(vl,"P",{});var SSe=s(T6);zNo=r(SSe,"This class cannot be instantiated directly using "),Jie=n(SSe,"CODE",{});var rat=s(Jie);WNo=r(rat,"__init__()"),rat.forEach(t),QNo=r(SSe," (throws an error)."),SSe.forEach(t),HNo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(F6.$$.fragment,Tl),UNo=i(Tl),Yie=n(Tl,"P",{});var tat=s(Yie);JNo=r(tat,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),tat.forEach(t),YNo=i(Tl),Nd=n(Tl,"P",{});var hW=s(Nd);KNo=r(hW,`Note:
Loading a model from its configuration file does `),Kie=n(hW,"STRONG",{});var aat=s(Kie);ZNo=r(aat,"not"),aat.forEach(t),eDo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=n(hW,"CODE",{});var nat=s(Zie);oDo=r(nat,"from_pretrained()"),nat.forEach(t),rDo=r(hW,"to load the model weights."),hW.forEach(t),tDo=i(Tl),ede=n(Tl,"P",{});var sat=s(ede);aDo=r(sat,"Examples:"),sat.forEach(t),nDo=i(Tl),m(C6.$$.fragment,Tl),Tl.forEach(t),sDo=i(vl),Ye=n(vl,"DIV",{class:!0});var Zt=s(Ye);m(M6.$$.fragment,Zt),lDo=i(Zt),ode=n(Zt,"P",{});var lat=s(ode);iDo=r(lat,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lat.forEach(t),dDo=i(Zt),tn=n(Zt,"P",{});var b5=s(tn);cDo=r(b5,"The model class to instantiate is selected based on the "),rde=n(b5,"CODE",{});var iat=s(rde);fDo=r(iat,"model_type"),iat.forEach(t),mDo=r(b5,` property of the config object (either
passed as an argument or loaded from `),tde=n(b5,"CODE",{});var dat=s(tde);gDo=r(dat,"pretrained_model_name_or_path"),dat.forEach(t),hDo=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(b5,"CODE",{});var cat=s(ade);pDo=r(cat,"pretrained_model_name_or_path"),cat.forEach(t),_Do=r(b5,":"),b5.forEach(t),uDo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);fT=n(qo,"LI",{});var A0e=s(fT);nde=n(A0e,"STRONG",{});var fat=s(nde);bDo=r(fat,"data2vec-audio"),fat.forEach(t),vDo=r(A0e," \u2014 "),$D=n(A0e,"A",{href:!0});var mat=s($D);TDo=r(mat,"Data2VecAudioForSequenceClassification"),mat.forEach(t),FDo=r(A0e," (Data2VecAudio model)"),A0e.forEach(t),CDo=i(qo),mT=n(qo,"LI",{});var L0e=s(mT);sde=n(L0e,"STRONG",{});var gat=s(sde);MDo=r(gat,"hubert"),gat.forEach(t),EDo=r(L0e," \u2014 "),ID=n(L0e,"A",{href:!0});var hat=s(ID);yDo=r(hat,"HubertForSequenceClassification"),hat.forEach(t),wDo=r(L0e," (Hubert model)"),L0e.forEach(t),ADo=i(qo),gT=n(qo,"LI",{});var B0e=s(gT);lde=n(B0e,"STRONG",{});var pat=s(lde);LDo=r(pat,"sew"),pat.forEach(t),BDo=r(B0e," \u2014 "),jD=n(B0e,"A",{href:!0});var _at=s(jD);xDo=r(_at,"SEWForSequenceClassification"),_at.forEach(t),kDo=r(B0e," (SEW model)"),B0e.forEach(t),RDo=i(qo),hT=n(qo,"LI",{});var x0e=s(hT);ide=n(x0e,"STRONG",{});var uat=s(ide);SDo=r(uat,"sew-d"),uat.forEach(t),PDo=r(x0e," \u2014 "),ND=n(x0e,"A",{href:!0});var bat=s(ND);$Do=r(bat,"SEWDForSequenceClassification"),bat.forEach(t),IDo=r(x0e," (SEW-D model)"),x0e.forEach(t),jDo=i(qo),pT=n(qo,"LI",{});var k0e=s(pT);dde=n(k0e,"STRONG",{});var vat=s(dde);NDo=r(vat,"unispeech"),vat.forEach(t),DDo=r(k0e," \u2014 "),DD=n(k0e,"A",{href:!0});var Tat=s(DD);qDo=r(Tat,"UniSpeechForSequenceClassification"),Tat.forEach(t),ODo=r(k0e," (UniSpeech model)"),k0e.forEach(t),GDo=i(qo),_T=n(qo,"LI",{});var R0e=s(_T);cde=n(R0e,"STRONG",{});var Fat=s(cde);XDo=r(Fat,"unispeech-sat"),Fat.forEach(t),VDo=r(R0e," \u2014 "),qD=n(R0e,"A",{href:!0});var Cat=s(qD);zDo=r(Cat,"UniSpeechSatForSequenceClassification"),Cat.forEach(t),WDo=r(R0e," (UniSpeechSat model)"),R0e.forEach(t),QDo=i(qo),uT=n(qo,"LI",{});var S0e=s(uT);fde=n(S0e,"STRONG",{});var Mat=s(fde);HDo=r(Mat,"wav2vec2"),Mat.forEach(t),UDo=r(S0e," \u2014 "),OD=n(S0e,"A",{href:!0});var Eat=s(OD);JDo=r(Eat,"Wav2Vec2ForSequenceClassification"),Eat.forEach(t),YDo=r(S0e," (Wav2Vec2 model)"),S0e.forEach(t),KDo=i(qo),bT=n(qo,"LI",{});var P0e=s(bT);mde=n(P0e,"STRONG",{});var yat=s(mde);ZDo=r(yat,"wavlm"),yat.forEach(t),eqo=r(P0e," \u2014 "),GD=n(P0e,"A",{href:!0});var wat=s(GD);oqo=r(wat,"WavLMForSequenceClassification"),wat.forEach(t),rqo=r(P0e," (WavLM model)"),P0e.forEach(t),qo.forEach(t),tqo=i(Zt),vT=n(Zt,"P",{});var $0e=s(vT);aqo=r($0e,"The model is set in evaluation mode by default using "),gde=n($0e,"CODE",{});var Aat=s(gde);nqo=r(Aat,"model.eval()"),Aat.forEach(t),sqo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=n($0e,"CODE",{});var Lat=s(hde);lqo=r(Lat,"model.train()"),Lat.forEach(t),$0e.forEach(t),iqo=i(Zt),pde=n(Zt,"P",{});var Bat=s(pde);dqo=r(Bat,"Examples:"),Bat.forEach(t),cqo=i(Zt),m(E6.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),yke=i(c),Dd=n(c,"H2",{class:!0});var PSe=s(Dd);TT=n(PSe,"A",{id:!0,class:!0,href:!0});var xat=s(TT);_de=n(xat,"SPAN",{});var kat=s(_de);m(y6.$$.fragment,kat),kat.forEach(t),xat.forEach(t),fqo=i(PSe),ude=n(PSe,"SPAN",{});var Rat=s(ude);mqo=r(Rat,"AutoModelForAudioFrameClassification"),Rat.forEach(t),PSe.forEach(t),wke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(w6.$$.fragment,Fl),gqo=i(Fl),qd=n(Fl,"P",{});var pW=s(qd);hqo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bde=n(pW,"CODE",{});var Sat=s(bde);pqo=r(Sat,"from_pretrained()"),Sat.forEach(t),_qo=r(pW,"class method or the "),vde=n(pW,"CODE",{});var Pat=s(vde);uqo=r(Pat,"from_config()"),Pat.forEach(t),bqo=r(pW,`class
method.`),pW.forEach(t),vqo=i(Fl),A6=n(Fl,"P",{});var $Se=s(A6);Tqo=r($Se,"This class cannot be instantiated directly using "),Tde=n($Se,"CODE",{});var $at=s(Tde);Fqo=r($at,"__init__()"),$at.forEach(t),Cqo=r($Se," (throws an error)."),$Se.forEach(t),Mqo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(L6.$$.fragment,Cl),Eqo=i(Cl),Fde=n(Cl,"P",{});var Iat=s(Fde);yqo=r(Iat,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Iat.forEach(t),wqo=i(Cl),Od=n(Cl,"P",{});var _W=s(Od);Aqo=r(_W,`Note:
Loading a model from its configuration file does `),Cde=n(_W,"STRONG",{});var jat=s(Cde);Lqo=r(jat,"not"),jat.forEach(t),Bqo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=n(_W,"CODE",{});var Nat=s(Mde);xqo=r(Nat,"from_pretrained()"),Nat.forEach(t),kqo=r(_W,"to load the model weights."),_W.forEach(t),Rqo=i(Cl),Ede=n(Cl,"P",{});var Dat=s(Ede);Sqo=r(Dat,"Examples:"),Dat.forEach(t),Pqo=i(Cl),m(B6.$$.fragment,Cl),Cl.forEach(t),$qo=i(Fl),Ke=n(Fl,"DIV",{class:!0});var ea=s(Ke);m(x6.$$.fragment,ea),Iqo=i(ea),yde=n(ea,"P",{});var qat=s(yde);jqo=r(qat,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),qat.forEach(t),Nqo=i(ea),an=n(ea,"P",{});var v5=s(an);Dqo=r(v5,"The model class to instantiate is selected based on the "),wde=n(v5,"CODE",{});var Oat=s(wde);qqo=r(Oat,"model_type"),Oat.forEach(t),Oqo=r(v5,` property of the config object (either
passed as an argument or loaded from `),Ade=n(v5,"CODE",{});var Gat=s(Ade);Gqo=r(Gat,"pretrained_model_name_or_path"),Gat.forEach(t),Xqo=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(v5,"CODE",{});var Xat=s(Lde);Vqo=r(Xat,"pretrained_model_name_or_path"),Xat.forEach(t),zqo=r(v5,":"),v5.forEach(t),Wqo=i(ea),nn=n(ea,"UL",{});var T5=s(nn);FT=n(T5,"LI",{});var I0e=s(FT);Bde=n(I0e,"STRONG",{});var Vat=s(Bde);Qqo=r(Vat,"data2vec-audio"),Vat.forEach(t),Hqo=r(I0e," \u2014 "),XD=n(I0e,"A",{href:!0});var zat=s(XD);Uqo=r(zat,"Data2VecAudioForAudioFrameClassification"),zat.forEach(t),Jqo=r(I0e," (Data2VecAudio model)"),I0e.forEach(t),Yqo=i(T5),CT=n(T5,"LI",{});var j0e=s(CT);xde=n(j0e,"STRONG",{});var Wat=s(xde);Kqo=r(Wat,"unispeech-sat"),Wat.forEach(t),Zqo=r(j0e," \u2014 "),VD=n(j0e,"A",{href:!0});var Qat=s(VD);eOo=r(Qat,"UniSpeechSatForAudioFrameClassification"),Qat.forEach(t),oOo=r(j0e," (UniSpeechSat model)"),j0e.forEach(t),rOo=i(T5),MT=n(T5,"LI",{});var N0e=s(MT);kde=n(N0e,"STRONG",{});var Hat=s(kde);tOo=r(Hat,"wav2vec2"),Hat.forEach(t),aOo=r(N0e," \u2014 "),zD=n(N0e,"A",{href:!0});var Uat=s(zD);nOo=r(Uat,"Wav2Vec2ForAudioFrameClassification"),Uat.forEach(t),sOo=r(N0e," (Wav2Vec2 model)"),N0e.forEach(t),lOo=i(T5),ET=n(T5,"LI",{});var D0e=s(ET);Rde=n(D0e,"STRONG",{});var Jat=s(Rde);iOo=r(Jat,"wavlm"),Jat.forEach(t),dOo=r(D0e," \u2014 "),WD=n(D0e,"A",{href:!0});var Yat=s(WD);cOo=r(Yat,"WavLMForAudioFrameClassification"),Yat.forEach(t),fOo=r(D0e," (WavLM model)"),D0e.forEach(t),T5.forEach(t),mOo=i(ea),yT=n(ea,"P",{});var q0e=s(yT);gOo=r(q0e,"The model is set in evaluation mode by default using "),Sde=n(q0e,"CODE",{});var Kat=s(Sde);hOo=r(Kat,"model.eval()"),Kat.forEach(t),pOo=r(q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(q0e,"CODE",{});var Zat=s(Pde);_Oo=r(Zat,"model.train()"),Zat.forEach(t),q0e.forEach(t),uOo=i(ea),$de=n(ea,"P",{});var ent=s($de);bOo=r(ent,"Examples:"),ent.forEach(t),vOo=i(ea),m(k6.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Ake=i(c),Gd=n(c,"H2",{class:!0});var ISe=s(Gd);wT=n(ISe,"A",{id:!0,class:!0,href:!0});var ont=s(wT);Ide=n(ont,"SPAN",{});var rnt=s(Ide);m(R6.$$.fragment,rnt),rnt.forEach(t),ont.forEach(t),TOo=i(ISe),jde=n(ISe,"SPAN",{});var tnt=s(jde);FOo=r(tnt,"AutoModelForCTC"),tnt.forEach(t),ISe.forEach(t),Lke=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(S6.$$.fragment,Ml),COo=i(Ml),Xd=n(Ml,"P",{});var uW=s(Xd);MOo=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Nde=n(uW,"CODE",{});var ant=s(Nde);EOo=r(ant,"from_pretrained()"),ant.forEach(t),yOo=r(uW,"class method or the "),Dde=n(uW,"CODE",{});var nnt=s(Dde);wOo=r(nnt,"from_config()"),nnt.forEach(t),AOo=r(uW,`class
method.`),uW.forEach(t),LOo=i(Ml),P6=n(Ml,"P",{});var jSe=s(P6);BOo=r(jSe,"This class cannot be instantiated directly using "),qde=n(jSe,"CODE",{});var snt=s(qde);xOo=r(snt,"__init__()"),snt.forEach(t),kOo=r(jSe," (throws an error)."),jSe.forEach(t),ROo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m($6.$$.fragment,El),SOo=i(El),Ode=n(El,"P",{});var lnt=s(Ode);POo=r(lnt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lnt.forEach(t),$Oo=i(El),Vd=n(El,"P",{});var bW=s(Vd);IOo=r(bW,`Note:
Loading a model from its configuration file does `),Gde=n(bW,"STRONG",{});var int=s(Gde);jOo=r(int,"not"),int.forEach(t),NOo=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=n(bW,"CODE",{});var dnt=s(Xde);DOo=r(dnt,"from_pretrained()"),dnt.forEach(t),qOo=r(bW,"to load the model weights."),bW.forEach(t),OOo=i(El),Vde=n(El,"P",{});var cnt=s(Vde);GOo=r(cnt,"Examples:"),cnt.forEach(t),XOo=i(El),m(I6.$$.fragment,El),El.forEach(t),VOo=i(Ml),Ze=n(Ml,"DIV",{class:!0});var oa=s(Ze);m(j6.$$.fragment,oa),zOo=i(oa),zde=n(oa,"P",{});var fnt=s(zde);WOo=r(fnt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fnt.forEach(t),QOo=i(oa),sn=n(oa,"P",{});var F5=s(sn);HOo=r(F5,"The model class to instantiate is selected based on the "),Wde=n(F5,"CODE",{});var mnt=s(Wde);UOo=r(mnt,"model_type"),mnt.forEach(t),JOo=r(F5,` property of the config object (either
passed as an argument or loaded from `),Qde=n(F5,"CODE",{});var gnt=s(Qde);YOo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),KOo=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(F5,"CODE",{});var hnt=s(Hde);ZOo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),eGo=r(F5,":"),F5.forEach(t),oGo=i(oa),Re=n(oa,"UL",{});var Oo=s(Re);AT=n(Oo,"LI",{});var O0e=s(AT);Ude=n(O0e,"STRONG",{});var pnt=s(Ude);rGo=r(pnt,"data2vec-audio"),pnt.forEach(t),tGo=r(O0e," \u2014 "),QD=n(O0e,"A",{href:!0});var _nt=s(QD);aGo=r(_nt,"Data2VecAudioForCTC"),_nt.forEach(t),nGo=r(O0e," (Data2VecAudio model)"),O0e.forEach(t),sGo=i(Oo),LT=n(Oo,"LI",{});var G0e=s(LT);Jde=n(G0e,"STRONG",{});var unt=s(Jde);lGo=r(unt,"hubert"),unt.forEach(t),iGo=r(G0e," \u2014 "),HD=n(G0e,"A",{href:!0});var bnt=s(HD);dGo=r(bnt,"HubertForCTC"),bnt.forEach(t),cGo=r(G0e," (Hubert model)"),G0e.forEach(t),fGo=i(Oo),BT=n(Oo,"LI",{});var X0e=s(BT);Yde=n(X0e,"STRONG",{});var vnt=s(Yde);mGo=r(vnt,"sew"),vnt.forEach(t),gGo=r(X0e," \u2014 "),UD=n(X0e,"A",{href:!0});var Tnt=s(UD);hGo=r(Tnt,"SEWForCTC"),Tnt.forEach(t),pGo=r(X0e," (SEW model)"),X0e.forEach(t),_Go=i(Oo),xT=n(Oo,"LI",{});var V0e=s(xT);Kde=n(V0e,"STRONG",{});var Fnt=s(Kde);uGo=r(Fnt,"sew-d"),Fnt.forEach(t),bGo=r(V0e," \u2014 "),JD=n(V0e,"A",{href:!0});var Cnt=s(JD);vGo=r(Cnt,"SEWDForCTC"),Cnt.forEach(t),TGo=r(V0e," (SEW-D model)"),V0e.forEach(t),FGo=i(Oo),kT=n(Oo,"LI",{});var z0e=s(kT);Zde=n(z0e,"STRONG",{});var Mnt=s(Zde);CGo=r(Mnt,"unispeech"),Mnt.forEach(t),MGo=r(z0e," \u2014 "),YD=n(z0e,"A",{href:!0});var Ent=s(YD);EGo=r(Ent,"UniSpeechForCTC"),Ent.forEach(t),yGo=r(z0e," (UniSpeech model)"),z0e.forEach(t),wGo=i(Oo),RT=n(Oo,"LI",{});var W0e=s(RT);ece=n(W0e,"STRONG",{});var ynt=s(ece);AGo=r(ynt,"unispeech-sat"),ynt.forEach(t),LGo=r(W0e," \u2014 "),KD=n(W0e,"A",{href:!0});var wnt=s(KD);BGo=r(wnt,"UniSpeechSatForCTC"),wnt.forEach(t),xGo=r(W0e," (UniSpeechSat model)"),W0e.forEach(t),kGo=i(Oo),ST=n(Oo,"LI",{});var Q0e=s(ST);oce=n(Q0e,"STRONG",{});var Ant=s(oce);RGo=r(Ant,"wav2vec2"),Ant.forEach(t),SGo=r(Q0e," \u2014 "),ZD=n(Q0e,"A",{href:!0});var Lnt=s(ZD);PGo=r(Lnt,"Wav2Vec2ForCTC"),Lnt.forEach(t),$Go=r(Q0e," (Wav2Vec2 model)"),Q0e.forEach(t),IGo=i(Oo),PT=n(Oo,"LI",{});var H0e=s(PT);rce=n(H0e,"STRONG",{});var Bnt=s(rce);jGo=r(Bnt,"wavlm"),Bnt.forEach(t),NGo=r(H0e," \u2014 "),eq=n(H0e,"A",{href:!0});var xnt=s(eq);DGo=r(xnt,"WavLMForCTC"),xnt.forEach(t),qGo=r(H0e," (WavLM model)"),H0e.forEach(t),Oo.forEach(t),OGo=i(oa),$T=n(oa,"P",{});var U0e=s($T);GGo=r(U0e,"The model is set in evaluation mode by default using "),tce=n(U0e,"CODE",{});var knt=s(tce);XGo=r(knt,"model.eval()"),knt.forEach(t),VGo=r(U0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(U0e,"CODE",{});var Rnt=s(ace);zGo=r(Rnt,"model.train()"),Rnt.forEach(t),U0e.forEach(t),WGo=i(oa),nce=n(oa,"P",{});var Snt=s(nce);QGo=r(Snt,"Examples:"),Snt.forEach(t),HGo=i(oa),m(N6.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Bke=i(c),zd=n(c,"H2",{class:!0});var NSe=s(zd);IT=n(NSe,"A",{id:!0,class:!0,href:!0});var Pnt=s(IT);sce=n(Pnt,"SPAN",{});var $nt=s(sce);m(D6.$$.fragment,$nt),$nt.forEach(t),Pnt.forEach(t),UGo=i(NSe),lce=n(NSe,"SPAN",{});var Int=s(lce);JGo=r(Int,"AutoModelForSpeechSeq2Seq"),Int.forEach(t),NSe.forEach(t),xke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(q6.$$.fragment,yl),YGo=i(yl),Wd=n(yl,"P",{});var vW=s(Wd);KGo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ice=n(vW,"CODE",{});var jnt=s(ice);ZGo=r(jnt,"from_pretrained()"),jnt.forEach(t),eXo=r(vW,"class method or the "),dce=n(vW,"CODE",{});var Nnt=s(dce);oXo=r(Nnt,"from_config()"),Nnt.forEach(t),rXo=r(vW,`class
method.`),vW.forEach(t),tXo=i(yl),O6=n(yl,"P",{});var DSe=s(O6);aXo=r(DSe,"This class cannot be instantiated directly using "),cce=n(DSe,"CODE",{});var Dnt=s(cce);nXo=r(Dnt,"__init__()"),Dnt.forEach(t),sXo=r(DSe," (throws an error)."),DSe.forEach(t),lXo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(G6.$$.fragment,wl),iXo=i(wl),fce=n(wl,"P",{});var qnt=s(fce);dXo=r(qnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qnt.forEach(t),cXo=i(wl),Qd=n(wl,"P",{});var TW=s(Qd);fXo=r(TW,`Note:
Loading a model from its configuration file does `),mce=n(TW,"STRONG",{});var Ont=s(mce);mXo=r(Ont,"not"),Ont.forEach(t),gXo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=n(TW,"CODE",{});var Gnt=s(gce);hXo=r(Gnt,"from_pretrained()"),Gnt.forEach(t),pXo=r(TW,"to load the model weights."),TW.forEach(t),_Xo=i(wl),hce=n(wl,"P",{});var Xnt=s(hce);uXo=r(Xnt,"Examples:"),Xnt.forEach(t),bXo=i(wl),m(X6.$$.fragment,wl),wl.forEach(t),vXo=i(yl),eo=n(yl,"DIV",{class:!0});var ra=s(eo);m(V6.$$.fragment,ra),TXo=i(ra),pce=n(ra,"P",{});var Vnt=s(pce);FXo=r(Vnt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vnt.forEach(t),CXo=i(ra),ln=n(ra,"P",{});var C5=s(ln);MXo=r(C5,"The model class to instantiate is selected based on the "),_ce=n(C5,"CODE",{});var znt=s(_ce);EXo=r(znt,"model_type"),znt.forEach(t),yXo=r(C5,` property of the config object (either
passed as an argument or loaded from `),uce=n(C5,"CODE",{});var Wnt=s(uce);wXo=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),AXo=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(C5,"CODE",{});var Qnt=s(bce);LXo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),BXo=r(C5,":"),C5.forEach(t),xXo=i(ra),z6=n(ra,"UL",{});var qSe=s(z6);jT=n(qSe,"LI",{});var J0e=s(jT);vce=n(J0e,"STRONG",{});var Hnt=s(vce);kXo=r(Hnt,"speech-encoder-decoder"),Hnt.forEach(t),RXo=r(J0e," \u2014 "),oq=n(J0e,"A",{href:!0});var Unt=s(oq);SXo=r(Unt,"SpeechEncoderDecoderModel"),Unt.forEach(t),PXo=r(J0e," (Speech Encoder decoder model)"),J0e.forEach(t),$Xo=i(qSe),NT=n(qSe,"LI",{});var Y0e=s(NT);Tce=n(Y0e,"STRONG",{});var Jnt=s(Tce);IXo=r(Jnt,"speech_to_text"),Jnt.forEach(t),jXo=r(Y0e," \u2014 "),rq=n(Y0e,"A",{href:!0});var Ynt=s(rq);NXo=r(Ynt,"Speech2TextForConditionalGeneration"),Ynt.forEach(t),DXo=r(Y0e," (Speech2Text model)"),Y0e.forEach(t),qSe.forEach(t),qXo=i(ra),DT=n(ra,"P",{});var K0e=s(DT);OXo=r(K0e,"The model is set in evaluation mode by default using "),Fce=n(K0e,"CODE",{});var Knt=s(Fce);GXo=r(Knt,"model.eval()"),Knt.forEach(t),XXo=r(K0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=n(K0e,"CODE",{});var Znt=s(Cce);VXo=r(Znt,"model.train()"),Znt.forEach(t),K0e.forEach(t),zXo=i(ra),Mce=n(ra,"P",{});var est=s(Mce);WXo=r(est,"Examples:"),est.forEach(t),QXo=i(ra),m(W6.$$.fragment,ra),ra.forEach(t),yl.forEach(t),kke=i(c),Hd=n(c,"H2",{class:!0});var OSe=s(Hd);qT=n(OSe,"A",{id:!0,class:!0,href:!0});var ost=s(qT);Ece=n(ost,"SPAN",{});var rst=s(Ece);m(Q6.$$.fragment,rst),rst.forEach(t),ost.forEach(t),HXo=i(OSe),yce=n(OSe,"SPAN",{});var tst=s(yce);UXo=r(tst,"AutoModelForAudioXVector"),tst.forEach(t),OSe.forEach(t),Rke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(H6.$$.fragment,Al),JXo=i(Al),Ud=n(Al,"P",{});var FW=s(Ud);YXo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wce=n(FW,"CODE",{});var ast=s(wce);KXo=r(ast,"from_pretrained()"),ast.forEach(t),ZXo=r(FW,"class method or the "),Ace=n(FW,"CODE",{});var nst=s(Ace);eVo=r(nst,"from_config()"),nst.forEach(t),oVo=r(FW,`class
method.`),FW.forEach(t),rVo=i(Al),U6=n(Al,"P",{});var GSe=s(U6);tVo=r(GSe,"This class cannot be instantiated directly using "),Lce=n(GSe,"CODE",{});var sst=s(Lce);aVo=r(sst,"__init__()"),sst.forEach(t),nVo=r(GSe," (throws an error)."),GSe.forEach(t),sVo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(J6.$$.fragment,Ll),lVo=i(Ll),Bce=n(Ll,"P",{});var lst=s(Bce);iVo=r(lst,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lst.forEach(t),dVo=i(Ll),Jd=n(Ll,"P",{});var CW=s(Jd);cVo=r(CW,`Note:
Loading a model from its configuration file does `),xce=n(CW,"STRONG",{});var ist=s(xce);fVo=r(ist,"not"),ist.forEach(t),mVo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kce=n(CW,"CODE",{});var dst=s(kce);gVo=r(dst,"from_pretrained()"),dst.forEach(t),hVo=r(CW,"to load the model weights."),CW.forEach(t),pVo=i(Ll),Rce=n(Ll,"P",{});var cst=s(Rce);_Vo=r(cst,"Examples:"),cst.forEach(t),uVo=i(Ll),m(Y6.$$.fragment,Ll),Ll.forEach(t),bVo=i(Al),oo=n(Al,"DIV",{class:!0});var ta=s(oo);m(K6.$$.fragment,ta),vVo=i(ta),Sce=n(ta,"P",{});var fst=s(Sce);TVo=r(fst,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fst.forEach(t),FVo=i(ta),dn=n(ta,"P",{});var M5=s(dn);CVo=r(M5,"The model class to instantiate is selected based on the "),Pce=n(M5,"CODE",{});var mst=s(Pce);MVo=r(mst,"model_type"),mst.forEach(t),EVo=r(M5,` property of the config object (either
passed as an argument or loaded from `),$ce=n(M5,"CODE",{});var gst=s($ce);yVo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),wVo=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(M5,"CODE",{});var hst=s(Ice);AVo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),LVo=r(M5,":"),M5.forEach(t),BVo=i(ta),cn=n(ta,"UL",{});var E5=s(cn);OT=n(E5,"LI",{});var Z0e=s(OT);jce=n(Z0e,"STRONG",{});var pst=s(jce);xVo=r(pst,"data2vec-audio"),pst.forEach(t),kVo=r(Z0e," \u2014 "),tq=n(Z0e,"A",{href:!0});var _st=s(tq);RVo=r(_st,"Data2VecAudioForXVector"),_st.forEach(t),SVo=r(Z0e," (Data2VecAudio model)"),Z0e.forEach(t),PVo=i(E5),GT=n(E5,"LI",{});var eLe=s(GT);Nce=n(eLe,"STRONG",{});var ust=s(Nce);$Vo=r(ust,"unispeech-sat"),ust.forEach(t),IVo=r(eLe," \u2014 "),aq=n(eLe,"A",{href:!0});var bst=s(aq);jVo=r(bst,"UniSpeechSatForXVector"),bst.forEach(t),NVo=r(eLe," (UniSpeechSat model)"),eLe.forEach(t),DVo=i(E5),XT=n(E5,"LI",{});var oLe=s(XT);Dce=n(oLe,"STRONG",{});var vst=s(Dce);qVo=r(vst,"wav2vec2"),vst.forEach(t),OVo=r(oLe," \u2014 "),nq=n(oLe,"A",{href:!0});var Tst=s(nq);GVo=r(Tst,"Wav2Vec2ForXVector"),Tst.forEach(t),XVo=r(oLe," (Wav2Vec2 model)"),oLe.forEach(t),VVo=i(E5),VT=n(E5,"LI",{});var rLe=s(VT);qce=n(rLe,"STRONG",{});var Fst=s(qce);zVo=r(Fst,"wavlm"),Fst.forEach(t),WVo=r(rLe," \u2014 "),sq=n(rLe,"A",{href:!0});var Cst=s(sq);QVo=r(Cst,"WavLMForXVector"),Cst.forEach(t),HVo=r(rLe," (WavLM model)"),rLe.forEach(t),E5.forEach(t),UVo=i(ta),zT=n(ta,"P",{});var tLe=s(zT);JVo=r(tLe,"The model is set in evaluation mode by default using "),Oce=n(tLe,"CODE",{});var Mst=s(Oce);YVo=r(Mst,"model.eval()"),Mst.forEach(t),KVo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=n(tLe,"CODE",{});var Est=s(Gce);ZVo=r(Est,"model.train()"),Est.forEach(t),tLe.forEach(t),ezo=i(ta),Xce=n(ta,"P",{});var yst=s(Xce);ozo=r(yst,"Examples:"),yst.forEach(t),rzo=i(ta),m(Z6.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Ske=i(c),Yd=n(c,"H2",{class:!0});var XSe=s(Yd);WT=n(XSe,"A",{id:!0,class:!0,href:!0});var wst=s(WT);Vce=n(wst,"SPAN",{});var Ast=s(Vce);m(eA.$$.fragment,Ast),Ast.forEach(t),wst.forEach(t),tzo=i(XSe),zce=n(XSe,"SPAN",{});var Lst=s(zce);azo=r(Lst,"AutoModelForMaskedImageModeling"),Lst.forEach(t),XSe.forEach(t),Pke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(oA.$$.fragment,Bl),nzo=i(Bl),Kd=n(Bl,"P",{});var MW=s(Kd);szo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Wce=n(MW,"CODE",{});var Bst=s(Wce);lzo=r(Bst,"from_pretrained()"),Bst.forEach(t),izo=r(MW,"class method or the "),Qce=n(MW,"CODE",{});var xst=s(Qce);dzo=r(xst,"from_config()"),xst.forEach(t),czo=r(MW,`class
method.`),MW.forEach(t),fzo=i(Bl),rA=n(Bl,"P",{});var VSe=s(rA);mzo=r(VSe,"This class cannot be instantiated directly using "),Hce=n(VSe,"CODE",{});var kst=s(Hce);gzo=r(kst,"__init__()"),kst.forEach(t),hzo=r(VSe," (throws an error)."),VSe.forEach(t),pzo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(tA.$$.fragment,xl),_zo=i(xl),Uce=n(xl,"P",{});var Rst=s(Uce);uzo=r(Rst,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rst.forEach(t),bzo=i(xl),Zd=n(xl,"P",{});var EW=s(Zd);vzo=r(EW,`Note:
Loading a model from its configuration file does `),Jce=n(EW,"STRONG",{});var Sst=s(Jce);Tzo=r(Sst,"not"),Sst.forEach(t),Fzo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yce=n(EW,"CODE",{});var Pst=s(Yce);Czo=r(Pst,"from_pretrained()"),Pst.forEach(t),Mzo=r(EW,"to load the model weights."),EW.forEach(t),Ezo=i(xl),Kce=n(xl,"P",{});var $st=s(Kce);yzo=r($st,"Examples:"),$st.forEach(t),wzo=i(xl),m(aA.$$.fragment,xl),xl.forEach(t),Azo=i(Bl),ro=n(Bl,"DIV",{class:!0});var aa=s(ro);m(nA.$$.fragment,aa),Lzo=i(aa),Zce=n(aa,"P",{});var Ist=s(Zce);Bzo=r(Ist,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ist.forEach(t),xzo=i(aa),fn=n(aa,"P",{});var y5=s(fn);kzo=r(y5,"The model class to instantiate is selected based on the "),efe=n(y5,"CODE",{});var jst=s(efe);Rzo=r(jst,"model_type"),jst.forEach(t),Szo=r(y5,` property of the config object (either
passed as an argument or loaded from `),ofe=n(y5,"CODE",{});var Nst=s(ofe);Pzo=r(Nst,"pretrained_model_name_or_path"),Nst.forEach(t),$zo=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=n(y5,"CODE",{});var Dst=s(rfe);Izo=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),jzo=r(y5,":"),y5.forEach(t),Nzo=i(aa),ec=n(aa,"UL",{});var yW=s(ec);QT=n(yW,"LI",{});var aLe=s(QT);tfe=n(aLe,"STRONG",{});var qst=s(tfe);Dzo=r(qst,"deit"),qst.forEach(t),qzo=r(aLe," \u2014 "),lq=n(aLe,"A",{href:!0});var Ost=s(lq);Ozo=r(Ost,"DeiTForMaskedImageModeling"),Ost.forEach(t),Gzo=r(aLe," (DeiT model)"),aLe.forEach(t),Xzo=i(yW),HT=n(yW,"LI",{});var nLe=s(HT);afe=n(nLe,"STRONG",{});var Gst=s(afe);Vzo=r(Gst,"swin"),Gst.forEach(t),zzo=r(nLe," \u2014 "),iq=n(nLe,"A",{href:!0});var Xst=s(iq);Wzo=r(Xst,"SwinForMaskedImageModeling"),Xst.forEach(t),Qzo=r(nLe," (Swin model)"),nLe.forEach(t),Hzo=i(yW),UT=n(yW,"LI",{});var sLe=s(UT);nfe=n(sLe,"STRONG",{});var Vst=s(nfe);Uzo=r(Vst,"vit"),Vst.forEach(t),Jzo=r(sLe," \u2014 "),dq=n(sLe,"A",{href:!0});var zst=s(dq);Yzo=r(zst,"ViTForMaskedImageModeling"),zst.forEach(t),Kzo=r(sLe," (ViT model)"),sLe.forEach(t),yW.forEach(t),Zzo=i(aa),JT=n(aa,"P",{});var lLe=s(JT);eWo=r(lLe,"The model is set in evaluation mode by default using "),sfe=n(lLe,"CODE",{});var Wst=s(sfe);oWo=r(Wst,"model.eval()"),Wst.forEach(t),rWo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=n(lLe,"CODE",{});var Qst=s(lfe);tWo=r(Qst,"model.train()"),Qst.forEach(t),lLe.forEach(t),aWo=i(aa),ife=n(aa,"P",{});var Hst=s(ife);nWo=r(Hst,"Examples:"),Hst.forEach(t),sWo=i(aa),m(sA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),$ke=i(c),oc=n(c,"H2",{class:!0});var zSe=s(oc);YT=n(zSe,"A",{id:!0,class:!0,href:!0});var Ust=s(YT);dfe=n(Ust,"SPAN",{});var Jst=s(dfe);m(lA.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),lWo=i(zSe),cfe=n(zSe,"SPAN",{});var Yst=s(cfe);iWo=r(Yst,"AutoModelForObjectDetection"),Yst.forEach(t),zSe.forEach(t),Ike=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(iA.$$.fragment,kl),dWo=i(kl),rc=n(kl,"P",{});var wW=s(rc);cWo=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ffe=n(wW,"CODE",{});var Kst=s(ffe);fWo=r(Kst,"from_pretrained()"),Kst.forEach(t),mWo=r(wW,"class method or the "),mfe=n(wW,"CODE",{});var Zst=s(mfe);gWo=r(Zst,"from_config()"),Zst.forEach(t),hWo=r(wW,`class
method.`),wW.forEach(t),pWo=i(kl),dA=n(kl,"P",{});var WSe=s(dA);_Wo=r(WSe,"This class cannot be instantiated directly using "),gfe=n(WSe,"CODE",{});var elt=s(gfe);uWo=r(elt,"__init__()"),elt.forEach(t),bWo=r(WSe," (throws an error)."),WSe.forEach(t),vWo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(cA.$$.fragment,Rl),TWo=i(Rl),hfe=n(Rl,"P",{});var olt=s(hfe);FWo=r(olt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),olt.forEach(t),CWo=i(Rl),tc=n(Rl,"P",{});var AW=s(tc);MWo=r(AW,`Note:
Loading a model from its configuration file does `),pfe=n(AW,"STRONG",{});var rlt=s(pfe);EWo=r(rlt,"not"),rlt.forEach(t),yWo=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_fe=n(AW,"CODE",{});var tlt=s(_fe);wWo=r(tlt,"from_pretrained()"),tlt.forEach(t),AWo=r(AW,"to load the model weights."),AW.forEach(t),LWo=i(Rl),ufe=n(Rl,"P",{});var alt=s(ufe);BWo=r(alt,"Examples:"),alt.forEach(t),xWo=i(Rl),m(fA.$$.fragment,Rl),Rl.forEach(t),kWo=i(kl),to=n(kl,"DIV",{class:!0});var na=s(to);m(mA.$$.fragment,na),RWo=i(na),bfe=n(na,"P",{});var nlt=s(bfe);SWo=r(nlt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nlt.forEach(t),PWo=i(na),mn=n(na,"P",{});var w5=s(mn);$Wo=r(w5,"The model class to instantiate is selected based on the "),vfe=n(w5,"CODE",{});var slt=s(vfe);IWo=r(slt,"model_type"),slt.forEach(t),jWo=r(w5,` property of the config object (either
passed as an argument or loaded from `),Tfe=n(w5,"CODE",{});var llt=s(Tfe);NWo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),DWo=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=n(w5,"CODE",{});var ilt=s(Ffe);qWo=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),OWo=r(w5,":"),w5.forEach(t),GWo=i(na),Cfe=n(na,"UL",{});var dlt=s(Cfe);KT=n(dlt,"LI",{});var iLe=s(KT);Mfe=n(iLe,"STRONG",{});var clt=s(Mfe);XWo=r(clt,"detr"),clt.forEach(t),VWo=r(iLe," \u2014 "),cq=n(iLe,"A",{href:!0});var flt=s(cq);zWo=r(flt,"DetrForObjectDetection"),flt.forEach(t),WWo=r(iLe," (DETR model)"),iLe.forEach(t),dlt.forEach(t),QWo=i(na),ZT=n(na,"P",{});var dLe=s(ZT);HWo=r(dLe,"The model is set in evaluation mode by default using "),Efe=n(dLe,"CODE",{});var mlt=s(Efe);UWo=r(mlt,"model.eval()"),mlt.forEach(t),JWo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=n(dLe,"CODE",{});var glt=s(yfe);YWo=r(glt,"model.train()"),glt.forEach(t),dLe.forEach(t),KWo=i(na),wfe=n(na,"P",{});var hlt=s(wfe);ZWo=r(hlt,"Examples:"),hlt.forEach(t),eQo=i(na),m(gA.$$.fragment,na),na.forEach(t),kl.forEach(t),jke=i(c),ac=n(c,"H2",{class:!0});var QSe=s(ac);e1=n(QSe,"A",{id:!0,class:!0,href:!0});var plt=s(e1);Afe=n(plt,"SPAN",{});var _lt=s(Afe);m(hA.$$.fragment,_lt),_lt.forEach(t),plt.forEach(t),oQo=i(QSe),Lfe=n(QSe,"SPAN",{});var ult=s(Lfe);rQo=r(ult,"AutoModelForImageSegmentation"),ult.forEach(t),QSe.forEach(t),Nke=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(pA.$$.fragment,Sl),tQo=i(Sl),nc=n(Sl,"P",{});var LW=s(nc);aQo=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Bfe=n(LW,"CODE",{});var blt=s(Bfe);nQo=r(blt,"from_pretrained()"),blt.forEach(t),sQo=r(LW,"class method or the "),xfe=n(LW,"CODE",{});var vlt=s(xfe);lQo=r(vlt,"from_config()"),vlt.forEach(t),iQo=r(LW,`class
method.`),LW.forEach(t),dQo=i(Sl),_A=n(Sl,"P",{});var HSe=s(_A);cQo=r(HSe,"This class cannot be instantiated directly using "),kfe=n(HSe,"CODE",{});var Tlt=s(kfe);fQo=r(Tlt,"__init__()"),Tlt.forEach(t),mQo=r(HSe," (throws an error)."),HSe.forEach(t),gQo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(uA.$$.fragment,Pl),hQo=i(Pl),Rfe=n(Pl,"P",{});var Flt=s(Rfe);pQo=r(Flt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Flt.forEach(t),_Qo=i(Pl),sc=n(Pl,"P",{});var BW=s(sc);uQo=r(BW,`Note:
Loading a model from its configuration file does `),Sfe=n(BW,"STRONG",{});var Clt=s(Sfe);bQo=r(Clt,"not"),Clt.forEach(t),vQo=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pfe=n(BW,"CODE",{});var Mlt=s(Pfe);TQo=r(Mlt,"from_pretrained()"),Mlt.forEach(t),FQo=r(BW,"to load the model weights."),BW.forEach(t),CQo=i(Pl),$fe=n(Pl,"P",{});var Elt=s($fe);MQo=r(Elt,"Examples:"),Elt.forEach(t),EQo=i(Pl),m(bA.$$.fragment,Pl),Pl.forEach(t),yQo=i(Sl),ao=n(Sl,"DIV",{class:!0});var sa=s(ao);m(vA.$$.fragment,sa),wQo=i(sa),Ife=n(sa,"P",{});var ylt=s(Ife);AQo=r(ylt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ylt.forEach(t),LQo=i(sa),gn=n(sa,"P",{});var A5=s(gn);BQo=r(A5,"The model class to instantiate is selected based on the "),jfe=n(A5,"CODE",{});var wlt=s(jfe);xQo=r(wlt,"model_type"),wlt.forEach(t),kQo=r(A5,` property of the config object (either
passed as an argument or loaded from `),Nfe=n(A5,"CODE",{});var Alt=s(Nfe);RQo=r(Alt,"pretrained_model_name_or_path"),Alt.forEach(t),SQo=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(A5,"CODE",{});var Llt=s(Dfe);PQo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),$Qo=r(A5,":"),A5.forEach(t),IQo=i(sa),qfe=n(sa,"UL",{});var Blt=s(qfe);o1=n(Blt,"LI",{});var cLe=s(o1);Ofe=n(cLe,"STRONG",{});var xlt=s(Ofe);jQo=r(xlt,"detr"),xlt.forEach(t),NQo=r(cLe," \u2014 "),fq=n(cLe,"A",{href:!0});var klt=s(fq);DQo=r(klt,"DetrForSegmentation"),klt.forEach(t),qQo=r(cLe," (DETR model)"),cLe.forEach(t),Blt.forEach(t),OQo=i(sa),r1=n(sa,"P",{});var fLe=s(r1);GQo=r(fLe,"The model is set in evaluation mode by default using "),Gfe=n(fLe,"CODE",{});var Rlt=s(Gfe);XQo=r(Rlt,"model.eval()"),Rlt.forEach(t),VQo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(fLe,"CODE",{});var Slt=s(Xfe);zQo=r(Slt,"model.train()"),Slt.forEach(t),fLe.forEach(t),WQo=i(sa),Vfe=n(sa,"P",{});var Plt=s(Vfe);QQo=r(Plt,"Examples:"),Plt.forEach(t),HQo=i(sa),m(TA.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),Dke=i(c),lc=n(c,"H2",{class:!0});var USe=s(lc);t1=n(USe,"A",{id:!0,class:!0,href:!0});var $lt=s(t1);zfe=n($lt,"SPAN",{});var Ilt=s(zfe);m(FA.$$.fragment,Ilt),Ilt.forEach(t),$lt.forEach(t),UQo=i(USe),Wfe=n(USe,"SPAN",{});var jlt=s(Wfe);JQo=r(jlt,"AutoModelForSemanticSegmentation"),jlt.forEach(t),USe.forEach(t),qke=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(CA.$$.fragment,$l),YQo=i($l),ic=n($l,"P",{});var xW=s(ic);KQo=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Qfe=n(xW,"CODE",{});var Nlt=s(Qfe);ZQo=r(Nlt,"from_pretrained()"),Nlt.forEach(t),eHo=r(xW,"class method or the "),Hfe=n(xW,"CODE",{});var Dlt=s(Hfe);oHo=r(Dlt,"from_config()"),Dlt.forEach(t),rHo=r(xW,`class
method.`),xW.forEach(t),tHo=i($l),MA=n($l,"P",{});var JSe=s(MA);aHo=r(JSe,"This class cannot be instantiated directly using "),Ufe=n(JSe,"CODE",{});var qlt=s(Ufe);nHo=r(qlt,"__init__()"),qlt.forEach(t),sHo=r(JSe," (throws an error)."),JSe.forEach(t),lHo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(EA.$$.fragment,Il),iHo=i(Il),Jfe=n(Il,"P",{});var Olt=s(Jfe);dHo=r(Olt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Olt.forEach(t),cHo=i(Il),dc=n(Il,"P",{});var kW=s(dc);fHo=r(kW,`Note:
Loading a model from its configuration file does `),Yfe=n(kW,"STRONG",{});var Glt=s(Yfe);mHo=r(Glt,"not"),Glt.forEach(t),gHo=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=n(kW,"CODE",{});var Xlt=s(Kfe);hHo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),pHo=r(kW,"to load the model weights."),kW.forEach(t),_Ho=i(Il),Zfe=n(Il,"P",{});var Vlt=s(Zfe);uHo=r(Vlt,"Examples:"),Vlt.forEach(t),bHo=i(Il),m(yA.$$.fragment,Il),Il.forEach(t),vHo=i($l),no=n($l,"DIV",{class:!0});var la=s(no);m(wA.$$.fragment,la),THo=i(la),eme=n(la,"P",{});var zlt=s(eme);FHo=r(zlt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zlt.forEach(t),CHo=i(la),hn=n(la,"P",{});var L5=s(hn);MHo=r(L5,"The model class to instantiate is selected based on the "),ome=n(L5,"CODE",{});var Wlt=s(ome);EHo=r(Wlt,"model_type"),Wlt.forEach(t),yHo=r(L5,` property of the config object (either
passed as an argument or loaded from `),rme=n(L5,"CODE",{});var Qlt=s(rme);wHo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),AHo=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(L5,"CODE",{});var Hlt=s(tme);LHo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),BHo=r(L5,":"),L5.forEach(t),xHo=i(la),AA=n(la,"UL",{});var YSe=s(AA);a1=n(YSe,"LI",{});var mLe=s(a1);ame=n(mLe,"STRONG",{});var Ult=s(ame);kHo=r(Ult,"beit"),Ult.forEach(t),RHo=r(mLe," \u2014 "),mq=n(mLe,"A",{href:!0});var Jlt=s(mq);SHo=r(Jlt,"BeitForSemanticSegmentation"),Jlt.forEach(t),PHo=r(mLe," (BEiT model)"),mLe.forEach(t),$Ho=i(YSe),n1=n(YSe,"LI",{});var gLe=s(n1);nme=n(gLe,"STRONG",{});var Ylt=s(nme);IHo=r(Ylt,"segformer"),Ylt.forEach(t),jHo=r(gLe," \u2014 "),gq=n(gLe,"A",{href:!0});var Klt=s(gq);NHo=r(Klt,"SegformerForSemanticSegmentation"),Klt.forEach(t),DHo=r(gLe," (SegFormer model)"),gLe.forEach(t),YSe.forEach(t),qHo=i(la),s1=n(la,"P",{});var hLe=s(s1);OHo=r(hLe,"The model is set in evaluation mode by default using "),sme=n(hLe,"CODE",{});var Zlt=s(sme);GHo=r(Zlt,"model.eval()"),Zlt.forEach(t),XHo=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(hLe,"CODE",{});var eit=s(lme);VHo=r(eit,"model.train()"),eit.forEach(t),hLe.forEach(t),zHo=i(la),ime=n(la,"P",{});var oit=s(ime);WHo=r(oit,"Examples:"),oit.forEach(t),QHo=i(la),m(LA.$$.fragment,la),la.forEach(t),$l.forEach(t),Oke=i(c),cc=n(c,"H2",{class:!0});var KSe=s(cc);l1=n(KSe,"A",{id:!0,class:!0,href:!0});var rit=s(l1);dme=n(rit,"SPAN",{});var tit=s(dme);m(BA.$$.fragment,tit),tit.forEach(t),rit.forEach(t),HHo=i(KSe),cme=n(KSe,"SPAN",{});var ait=s(cme);UHo=r(ait,"AutoModelForInstanceSegmentation"),ait.forEach(t),KSe.forEach(t),Gke=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(xA.$$.fragment,jl),JHo=i(jl),fc=n(jl,"P",{});var RW=s(fc);YHo=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fme=n(RW,"CODE",{});var nit=s(fme);KHo=r(nit,"from_pretrained()"),nit.forEach(t),ZHo=r(RW,"class method or the "),mme=n(RW,"CODE",{});var sit=s(mme);eUo=r(sit,"from_config()"),sit.forEach(t),oUo=r(RW,`class
method.`),RW.forEach(t),rUo=i(jl),kA=n(jl,"P",{});var ZSe=s(kA);tUo=r(ZSe,"This class cannot be instantiated directly using "),gme=n(ZSe,"CODE",{});var lit=s(gme);aUo=r(lit,"__init__()"),lit.forEach(t),nUo=r(ZSe," (throws an error)."),ZSe.forEach(t),sUo=i(jl),mt=n(jl,"DIV",{class:!0});var Nl=s(mt);m(RA.$$.fragment,Nl),lUo=i(Nl),hme=n(Nl,"P",{});var iit=s(hme);iUo=r(iit,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),iit.forEach(t),dUo=i(Nl),mc=n(Nl,"P",{});var SW=s(mc);cUo=r(SW,`Note:
Loading a model from its configuration file does `),pme=n(SW,"STRONG",{});var dit=s(pme);fUo=r(dit,"not"),dit.forEach(t),mUo=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_me=n(SW,"CODE",{});var cit=s(_me);gUo=r(cit,"from_pretrained()"),cit.forEach(t),hUo=r(SW,"to load the model weights."),SW.forEach(t),pUo=i(Nl),ume=n(Nl,"P",{});var fit=s(ume);_Uo=r(fit,"Examples:"),fit.forEach(t),uUo=i(Nl),m(SA.$$.fragment,Nl),Nl.forEach(t),bUo=i(jl),so=n(jl,"DIV",{class:!0});var ia=s(so);m(PA.$$.fragment,ia),vUo=i(ia),bme=n(ia,"P",{});var mit=s(bme);TUo=r(mit,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mit.forEach(t),FUo=i(ia),pn=n(ia,"P",{});var B5=s(pn);CUo=r(B5,"The model class to instantiate is selected based on the "),vme=n(B5,"CODE",{});var git=s(vme);MUo=r(git,"model_type"),git.forEach(t),EUo=r(B5,` property of the config object (either
passed as an argument or loaded from `),Tme=n(B5,"CODE",{});var hit=s(Tme);yUo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),wUo=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(B5,"CODE",{});var pit=s(Fme);AUo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),LUo=r(B5,":"),B5.forEach(t),BUo=i(ia),Cme=n(ia,"UL",{});var _it=s(Cme);i1=n(_it,"LI",{});var pLe=s(i1);Mme=n(pLe,"STRONG",{});var uit=s(Mme);xUo=r(uit,"maskformer"),uit.forEach(t),kUo=r(pLe," \u2014 "),hq=n(pLe,"A",{href:!0});var bit=s(hq);RUo=r(bit,"MaskFormerForInstanceSegmentation"),bit.forEach(t),SUo=r(pLe," (MaskFormer model)"),pLe.forEach(t),_it.forEach(t),PUo=i(ia),d1=n(ia,"P",{});var _Le=s(d1);$Uo=r(_Le,"The model is set in evaluation mode by default using "),Eme=n(_Le,"CODE",{});var vit=s(Eme);IUo=r(vit,"model.eval()"),vit.forEach(t),jUo=r(_Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=n(_Le,"CODE",{});var Tit=s(yme);NUo=r(Tit,"model.train()"),Tit.forEach(t),_Le.forEach(t),DUo=i(ia),wme=n(ia,"P",{});var Fit=s(wme);qUo=r(Fit,"Examples:"),Fit.forEach(t),OUo=i(ia),m($A.$$.fragment,ia),ia.forEach(t),jl.forEach(t),Xke=i(c),gc=n(c,"H2",{class:!0});var ePe=s(gc);c1=n(ePe,"A",{id:!0,class:!0,href:!0});var Cit=s(c1);Ame=n(Cit,"SPAN",{});var Mit=s(Ame);m(IA.$$.fragment,Mit),Mit.forEach(t),Cit.forEach(t),GUo=i(ePe),Lme=n(ePe,"SPAN",{});var Eit=s(Lme);XUo=r(Eit,"TFAutoModel"),Eit.forEach(t),ePe.forEach(t),Vke=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(jA.$$.fragment,Dl),VUo=i(Dl),hc=n(Dl,"P",{});var PW=s(hc);zUo=r(PW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bme=n(PW,"CODE",{});var yit=s(Bme);WUo=r(yit,"from_pretrained()"),yit.forEach(t),QUo=r(PW,"class method or the "),xme=n(PW,"CODE",{});var wit=s(xme);HUo=r(wit,"from_config()"),wit.forEach(t),UUo=r(PW,`class
method.`),PW.forEach(t),JUo=i(Dl),NA=n(Dl,"P",{});var oPe=s(NA);YUo=r(oPe,"This class cannot be instantiated directly using "),kme=n(oPe,"CODE",{});var Ait=s(kme);KUo=r(Ait,"__init__()"),Ait.forEach(t),ZUo=r(oPe," (throws an error)."),oPe.forEach(t),eJo=i(Dl),gt=n(Dl,"DIV",{class:!0});var ql=s(gt);m(DA.$$.fragment,ql),oJo=i(ql),Rme=n(ql,"P",{});var Lit=s(Rme);rJo=r(Lit,"Instantiates one of the base model classes of the library from a configuration."),Lit.forEach(t),tJo=i(ql),pc=n(ql,"P",{});var $W=s(pc);aJo=r($W,`Note:
Loading a model from its configuration file does `),Sme=n($W,"STRONG",{});var Bit=s(Sme);nJo=r(Bit,"not"),Bit.forEach(t),sJo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pme=n($W,"CODE",{});var xit=s(Pme);lJo=r(xit,"from_pretrained()"),xit.forEach(t),iJo=r($W,"to load the model weights."),$W.forEach(t),dJo=i(ql),$me=n(ql,"P",{});var kit=s($me);cJo=r(kit,"Examples:"),kit.forEach(t),fJo=i(ql),m(qA.$$.fragment,ql),ql.forEach(t),mJo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(OA.$$.fragment,pa),gJo=i(pa),Ime=n(pa,"P",{});var Rit=s(Ime);hJo=r(Rit,"Instantiate one of the base model classes of the library from a pretrained model."),Rit.forEach(t),pJo=i(pa),_n=n(pa,"P",{});var x5=s(_n);_Jo=r(x5,"The model class to instantiate is selected based on the "),jme=n(x5,"CODE",{});var Sit=s(jme);uJo=r(Sit,"model_type"),Sit.forEach(t),bJo=r(x5,` property of the config object (either
passed as an argument or loaded from `),Nme=n(x5,"CODE",{});var Pit=s(Nme);vJo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),TJo=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(x5,"CODE",{});var $it=s(Dme);FJo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),CJo=r(x5,":"),x5.forEach(t),MJo=i(pa),B=n(pa,"UL",{});var x=s(B);f1=n(x,"LI",{});var uLe=s(f1);qme=n(uLe,"STRONG",{});var Iit=s(qme);EJo=r(Iit,"albert"),Iit.forEach(t),yJo=r(uLe," \u2014 "),pq=n(uLe,"A",{href:!0});var jit=s(pq);wJo=r(jit,"TFAlbertModel"),jit.forEach(t),AJo=r(uLe," (ALBERT model)"),uLe.forEach(t),LJo=i(x),m1=n(x,"LI",{});var bLe=s(m1);Ome=n(bLe,"STRONG",{});var Nit=s(Ome);BJo=r(Nit,"bart"),Nit.forEach(t),xJo=r(bLe," \u2014 "),_q=n(bLe,"A",{href:!0});var Dit=s(_q);kJo=r(Dit,"TFBartModel"),Dit.forEach(t),RJo=r(bLe," (BART model)"),bLe.forEach(t),SJo=i(x),g1=n(x,"LI",{});var vLe=s(g1);Gme=n(vLe,"STRONG",{});var qit=s(Gme);PJo=r(qit,"bert"),qit.forEach(t),$Jo=r(vLe," \u2014 "),uq=n(vLe,"A",{href:!0});var Oit=s(uq);IJo=r(Oit,"TFBertModel"),Oit.forEach(t),jJo=r(vLe," (BERT model)"),vLe.forEach(t),NJo=i(x),h1=n(x,"LI",{});var TLe=s(h1);Xme=n(TLe,"STRONG",{});var Git=s(Xme);DJo=r(Git,"blenderbot"),Git.forEach(t),qJo=r(TLe," \u2014 "),bq=n(TLe,"A",{href:!0});var Xit=s(bq);OJo=r(Xit,"TFBlenderbotModel"),Xit.forEach(t),GJo=r(TLe," (Blenderbot model)"),TLe.forEach(t),XJo=i(x),p1=n(x,"LI",{});var FLe=s(p1);Vme=n(FLe,"STRONG",{});var Vit=s(Vme);VJo=r(Vit,"blenderbot-small"),Vit.forEach(t),zJo=r(FLe," \u2014 "),vq=n(FLe,"A",{href:!0});var zit=s(vq);WJo=r(zit,"TFBlenderbotSmallModel"),zit.forEach(t),QJo=r(FLe," (BlenderbotSmall model)"),FLe.forEach(t),HJo=i(x),_1=n(x,"LI",{});var CLe=s(_1);zme=n(CLe,"STRONG",{});var Wit=s(zme);UJo=r(Wit,"camembert"),Wit.forEach(t),JJo=r(CLe," \u2014 "),Tq=n(CLe,"A",{href:!0});var Qit=s(Tq);YJo=r(Qit,"TFCamembertModel"),Qit.forEach(t),KJo=r(CLe," (CamemBERT model)"),CLe.forEach(t),ZJo=i(x),u1=n(x,"LI",{});var MLe=s(u1);Wme=n(MLe,"STRONG",{});var Hit=s(Wme);eYo=r(Hit,"clip"),Hit.forEach(t),oYo=r(MLe," \u2014 "),Fq=n(MLe,"A",{href:!0});var Uit=s(Fq);rYo=r(Uit,"TFCLIPModel"),Uit.forEach(t),tYo=r(MLe," (CLIP model)"),MLe.forEach(t),aYo=i(x),b1=n(x,"LI",{});var ELe=s(b1);Qme=n(ELe,"STRONG",{});var Jit=s(Qme);nYo=r(Jit,"convbert"),Jit.forEach(t),sYo=r(ELe," \u2014 "),Cq=n(ELe,"A",{href:!0});var Yit=s(Cq);lYo=r(Yit,"TFConvBertModel"),Yit.forEach(t),iYo=r(ELe," (ConvBERT model)"),ELe.forEach(t),dYo=i(x),v1=n(x,"LI",{});var yLe=s(v1);Hme=n(yLe,"STRONG",{});var Kit=s(Hme);cYo=r(Kit,"convnext"),Kit.forEach(t),fYo=r(yLe," \u2014 "),Mq=n(yLe,"A",{href:!0});var Zit=s(Mq);mYo=r(Zit,"TFConvNextModel"),Zit.forEach(t),gYo=r(yLe," (ConvNext model)"),yLe.forEach(t),hYo=i(x),T1=n(x,"LI",{});var wLe=s(T1);Ume=n(wLe,"STRONG",{});var edt=s(Ume);pYo=r(edt,"ctrl"),edt.forEach(t),_Yo=r(wLe," \u2014 "),Eq=n(wLe,"A",{href:!0});var odt=s(Eq);uYo=r(odt,"TFCTRLModel"),odt.forEach(t),bYo=r(wLe," (CTRL model)"),wLe.forEach(t),vYo=i(x),F1=n(x,"LI",{});var ALe=s(F1);Jme=n(ALe,"STRONG",{});var rdt=s(Jme);TYo=r(rdt,"deberta"),rdt.forEach(t),FYo=r(ALe," \u2014 "),yq=n(ALe,"A",{href:!0});var tdt=s(yq);CYo=r(tdt,"TFDebertaModel"),tdt.forEach(t),MYo=r(ALe," (DeBERTa model)"),ALe.forEach(t),EYo=i(x),C1=n(x,"LI",{});var LLe=s(C1);Yme=n(LLe,"STRONG",{});var adt=s(Yme);yYo=r(adt,"deberta-v2"),adt.forEach(t),wYo=r(LLe," \u2014 "),wq=n(LLe,"A",{href:!0});var ndt=s(wq);AYo=r(ndt,"TFDebertaV2Model"),ndt.forEach(t),LYo=r(LLe," (DeBERTa-v2 model)"),LLe.forEach(t),BYo=i(x),M1=n(x,"LI",{});var BLe=s(M1);Kme=n(BLe,"STRONG",{});var sdt=s(Kme);xYo=r(sdt,"distilbert"),sdt.forEach(t),kYo=r(BLe," \u2014 "),Aq=n(BLe,"A",{href:!0});var ldt=s(Aq);RYo=r(ldt,"TFDistilBertModel"),ldt.forEach(t),SYo=r(BLe," (DistilBERT model)"),BLe.forEach(t),PYo=i(x),E1=n(x,"LI",{});var xLe=s(E1);Zme=n(xLe,"STRONG",{});var idt=s(Zme);$Yo=r(idt,"dpr"),idt.forEach(t),IYo=r(xLe," \u2014 "),Lq=n(xLe,"A",{href:!0});var ddt=s(Lq);jYo=r(ddt,"TFDPRQuestionEncoder"),ddt.forEach(t),NYo=r(xLe," (DPR model)"),xLe.forEach(t),DYo=i(x),y1=n(x,"LI",{});var kLe=s(y1);ege=n(kLe,"STRONG",{});var cdt=s(ege);qYo=r(cdt,"electra"),cdt.forEach(t),OYo=r(kLe," \u2014 "),Bq=n(kLe,"A",{href:!0});var fdt=s(Bq);GYo=r(fdt,"TFElectraModel"),fdt.forEach(t),XYo=r(kLe," (ELECTRA model)"),kLe.forEach(t),VYo=i(x),w1=n(x,"LI",{});var RLe=s(w1);oge=n(RLe,"STRONG",{});var mdt=s(oge);zYo=r(mdt,"flaubert"),mdt.forEach(t),WYo=r(RLe," \u2014 "),xq=n(RLe,"A",{href:!0});var gdt=s(xq);QYo=r(gdt,"TFFlaubertModel"),gdt.forEach(t),HYo=r(RLe," (FlauBERT model)"),RLe.forEach(t),UYo=i(x),Os=n(x,"LI",{});var Q8=s(Os);rge=n(Q8,"STRONG",{});var hdt=s(rge);JYo=r(hdt,"funnel"),hdt.forEach(t),YYo=r(Q8," \u2014 "),kq=n(Q8,"A",{href:!0});var pdt=s(kq);KYo=r(pdt,"TFFunnelModel"),pdt.forEach(t),ZYo=r(Q8," or "),Rq=n(Q8,"A",{href:!0});var _dt=s(Rq);eKo=r(_dt,"TFFunnelBaseModel"),_dt.forEach(t),oKo=r(Q8," (Funnel Transformer model)"),Q8.forEach(t),rKo=i(x),A1=n(x,"LI",{});var SLe=s(A1);tge=n(SLe,"STRONG",{});var udt=s(tge);tKo=r(udt,"gpt2"),udt.forEach(t),aKo=r(SLe," \u2014 "),Sq=n(SLe,"A",{href:!0});var bdt=s(Sq);nKo=r(bdt,"TFGPT2Model"),bdt.forEach(t),sKo=r(SLe," (OpenAI GPT-2 model)"),SLe.forEach(t),lKo=i(x),L1=n(x,"LI",{});var PLe=s(L1);age=n(PLe,"STRONG",{});var vdt=s(age);iKo=r(vdt,"hubert"),vdt.forEach(t),dKo=r(PLe," \u2014 "),Pq=n(PLe,"A",{href:!0});var Tdt=s(Pq);cKo=r(Tdt,"TFHubertModel"),Tdt.forEach(t),fKo=r(PLe," (Hubert model)"),PLe.forEach(t),mKo=i(x),B1=n(x,"LI",{});var $Le=s(B1);nge=n($Le,"STRONG",{});var Fdt=s(nge);gKo=r(Fdt,"layoutlm"),Fdt.forEach(t),hKo=r($Le," \u2014 "),$q=n($Le,"A",{href:!0});var Cdt=s($q);pKo=r(Cdt,"TFLayoutLMModel"),Cdt.forEach(t),_Ko=r($Le," (LayoutLM model)"),$Le.forEach(t),uKo=i(x),x1=n(x,"LI",{});var ILe=s(x1);sge=n(ILe,"STRONG",{});var Mdt=s(sge);bKo=r(Mdt,"led"),Mdt.forEach(t),vKo=r(ILe," \u2014 "),Iq=n(ILe,"A",{href:!0});var Edt=s(Iq);TKo=r(Edt,"TFLEDModel"),Edt.forEach(t),FKo=r(ILe," (LED model)"),ILe.forEach(t),CKo=i(x),k1=n(x,"LI",{});var jLe=s(k1);lge=n(jLe,"STRONG",{});var ydt=s(lge);MKo=r(ydt,"longformer"),ydt.forEach(t),EKo=r(jLe," \u2014 "),jq=n(jLe,"A",{href:!0});var wdt=s(jq);yKo=r(wdt,"TFLongformerModel"),wdt.forEach(t),wKo=r(jLe," (Longformer model)"),jLe.forEach(t),AKo=i(x),R1=n(x,"LI",{});var NLe=s(R1);ige=n(NLe,"STRONG",{});var Adt=s(ige);LKo=r(Adt,"lxmert"),Adt.forEach(t),BKo=r(NLe," \u2014 "),Nq=n(NLe,"A",{href:!0});var Ldt=s(Nq);xKo=r(Ldt,"TFLxmertModel"),Ldt.forEach(t),kKo=r(NLe," (LXMERT model)"),NLe.forEach(t),RKo=i(x),S1=n(x,"LI",{});var DLe=s(S1);dge=n(DLe,"STRONG",{});var Bdt=s(dge);SKo=r(Bdt,"marian"),Bdt.forEach(t),PKo=r(DLe," \u2014 "),Dq=n(DLe,"A",{href:!0});var xdt=s(Dq);$Ko=r(xdt,"TFMarianModel"),xdt.forEach(t),IKo=r(DLe," (Marian model)"),DLe.forEach(t),jKo=i(x),P1=n(x,"LI",{});var qLe=s(P1);cge=n(qLe,"STRONG",{});var kdt=s(cge);NKo=r(kdt,"mbart"),kdt.forEach(t),DKo=r(qLe," \u2014 "),qq=n(qLe,"A",{href:!0});var Rdt=s(qq);qKo=r(Rdt,"TFMBartModel"),Rdt.forEach(t),OKo=r(qLe," (mBART model)"),qLe.forEach(t),GKo=i(x),$1=n(x,"LI",{});var OLe=s($1);fge=n(OLe,"STRONG",{});var Sdt=s(fge);XKo=r(Sdt,"mobilebert"),Sdt.forEach(t),VKo=r(OLe," \u2014 "),Oq=n(OLe,"A",{href:!0});var Pdt=s(Oq);zKo=r(Pdt,"TFMobileBertModel"),Pdt.forEach(t),WKo=r(OLe," (MobileBERT model)"),OLe.forEach(t),QKo=i(x),I1=n(x,"LI",{});var GLe=s(I1);mge=n(GLe,"STRONG",{});var $dt=s(mge);HKo=r($dt,"mpnet"),$dt.forEach(t),UKo=r(GLe," \u2014 "),Gq=n(GLe,"A",{href:!0});var Idt=s(Gq);JKo=r(Idt,"TFMPNetModel"),Idt.forEach(t),YKo=r(GLe," (MPNet model)"),GLe.forEach(t),KKo=i(x),j1=n(x,"LI",{});var XLe=s(j1);gge=n(XLe,"STRONG",{});var jdt=s(gge);ZKo=r(jdt,"mt5"),jdt.forEach(t),eZo=r(XLe," \u2014 "),Xq=n(XLe,"A",{href:!0});var Ndt=s(Xq);oZo=r(Ndt,"TFMT5Model"),Ndt.forEach(t),rZo=r(XLe," (mT5 model)"),XLe.forEach(t),tZo=i(x),N1=n(x,"LI",{});var VLe=s(N1);hge=n(VLe,"STRONG",{});var Ddt=s(hge);aZo=r(Ddt,"openai-gpt"),Ddt.forEach(t),nZo=r(VLe," \u2014 "),Vq=n(VLe,"A",{href:!0});var qdt=s(Vq);sZo=r(qdt,"TFOpenAIGPTModel"),qdt.forEach(t),lZo=r(VLe," (OpenAI GPT model)"),VLe.forEach(t),iZo=i(x),D1=n(x,"LI",{});var zLe=s(D1);pge=n(zLe,"STRONG",{});var Odt=s(pge);dZo=r(Odt,"pegasus"),Odt.forEach(t),cZo=r(zLe," \u2014 "),zq=n(zLe,"A",{href:!0});var Gdt=s(zq);fZo=r(Gdt,"TFPegasusModel"),Gdt.forEach(t),mZo=r(zLe," (Pegasus model)"),zLe.forEach(t),gZo=i(x),q1=n(x,"LI",{});var WLe=s(q1);_ge=n(WLe,"STRONG",{});var Xdt=s(_ge);hZo=r(Xdt,"rembert"),Xdt.forEach(t),pZo=r(WLe," \u2014 "),Wq=n(WLe,"A",{href:!0});var Vdt=s(Wq);_Zo=r(Vdt,"TFRemBertModel"),Vdt.forEach(t),uZo=r(WLe," (RemBERT model)"),WLe.forEach(t),bZo=i(x),O1=n(x,"LI",{});var QLe=s(O1);uge=n(QLe,"STRONG",{});var zdt=s(uge);vZo=r(zdt,"roberta"),zdt.forEach(t),TZo=r(QLe," \u2014 "),Qq=n(QLe,"A",{href:!0});var Wdt=s(Qq);FZo=r(Wdt,"TFRobertaModel"),Wdt.forEach(t),CZo=r(QLe," (RoBERTa model)"),QLe.forEach(t),MZo=i(x),G1=n(x,"LI",{});var HLe=s(G1);bge=n(HLe,"STRONG",{});var Qdt=s(bge);EZo=r(Qdt,"roformer"),Qdt.forEach(t),yZo=r(HLe," \u2014 "),Hq=n(HLe,"A",{href:!0});var Hdt=s(Hq);wZo=r(Hdt,"TFRoFormerModel"),Hdt.forEach(t),AZo=r(HLe," (RoFormer model)"),HLe.forEach(t),LZo=i(x),X1=n(x,"LI",{});var ULe=s(X1);vge=n(ULe,"STRONG",{});var Udt=s(vge);BZo=r(Udt,"speech_to_text"),Udt.forEach(t),xZo=r(ULe," \u2014 "),Uq=n(ULe,"A",{href:!0});var Jdt=s(Uq);kZo=r(Jdt,"TFSpeech2TextModel"),Jdt.forEach(t),RZo=r(ULe," (Speech2Text model)"),ULe.forEach(t),SZo=i(x),V1=n(x,"LI",{});var JLe=s(V1);Tge=n(JLe,"STRONG",{});var Ydt=s(Tge);PZo=r(Ydt,"t5"),Ydt.forEach(t),$Zo=r(JLe," \u2014 "),Jq=n(JLe,"A",{href:!0});var Kdt=s(Jq);IZo=r(Kdt,"TFT5Model"),Kdt.forEach(t),jZo=r(JLe," (T5 model)"),JLe.forEach(t),NZo=i(x),z1=n(x,"LI",{});var YLe=s(z1);Fge=n(YLe,"STRONG",{});var Zdt=s(Fge);DZo=r(Zdt,"tapas"),Zdt.forEach(t),qZo=r(YLe," \u2014 "),Yq=n(YLe,"A",{href:!0});var ect=s(Yq);OZo=r(ect,"TFTapasModel"),ect.forEach(t),GZo=r(YLe," (TAPAS model)"),YLe.forEach(t),XZo=i(x),W1=n(x,"LI",{});var KLe=s(W1);Cge=n(KLe,"STRONG",{});var oct=s(Cge);VZo=r(oct,"transfo-xl"),oct.forEach(t),zZo=r(KLe," \u2014 "),Kq=n(KLe,"A",{href:!0});var rct=s(Kq);WZo=r(rct,"TFTransfoXLModel"),rct.forEach(t),QZo=r(KLe," (Transformer-XL model)"),KLe.forEach(t),HZo=i(x),Q1=n(x,"LI",{});var ZLe=s(Q1);Mge=n(ZLe,"STRONG",{});var tct=s(Mge);UZo=r(tct,"vit"),tct.forEach(t),JZo=r(ZLe," \u2014 "),Zq=n(ZLe,"A",{href:!0});var act=s(Zq);YZo=r(act,"TFViTModel"),act.forEach(t),KZo=r(ZLe," (ViT model)"),ZLe.forEach(t),ZZo=i(x),H1=n(x,"LI",{});var e7e=s(H1);Ege=n(e7e,"STRONG",{});var nct=s(Ege);eer=r(nct,"wav2vec2"),nct.forEach(t),oer=r(e7e," \u2014 "),eO=n(e7e,"A",{href:!0});var sct=s(eO);rer=r(sct,"TFWav2Vec2Model"),sct.forEach(t),ter=r(e7e," (Wav2Vec2 model)"),e7e.forEach(t),aer=i(x),U1=n(x,"LI",{});var o7e=s(U1);yge=n(o7e,"STRONG",{});var lct=s(yge);ner=r(lct,"xlm"),lct.forEach(t),ser=r(o7e," \u2014 "),oO=n(o7e,"A",{href:!0});var ict=s(oO);ler=r(ict,"TFXLMModel"),ict.forEach(t),ier=r(o7e," (XLM model)"),o7e.forEach(t),der=i(x),J1=n(x,"LI",{});var r7e=s(J1);wge=n(r7e,"STRONG",{});var dct=s(wge);cer=r(dct,"xlm-roberta"),dct.forEach(t),fer=r(r7e," \u2014 "),rO=n(r7e,"A",{href:!0});var cct=s(rO);mer=r(cct,"TFXLMRobertaModel"),cct.forEach(t),ger=r(r7e," (XLM-RoBERTa model)"),r7e.forEach(t),her=i(x),Y1=n(x,"LI",{});var t7e=s(Y1);Age=n(t7e,"STRONG",{});var fct=s(Age);per=r(fct,"xlnet"),fct.forEach(t),_er=r(t7e," \u2014 "),tO=n(t7e,"A",{href:!0});var mct=s(tO);uer=r(mct,"TFXLNetModel"),mct.forEach(t),ber=r(t7e," (XLNet model)"),t7e.forEach(t),x.forEach(t),ver=i(pa),Lge=n(pa,"P",{});var gct=s(Lge);Ter=r(gct,"Examples:"),gct.forEach(t),Fer=i(pa),m(GA.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),zke=i(c),_c=n(c,"H2",{class:!0});var rPe=s(_c);K1=n(rPe,"A",{id:!0,class:!0,href:!0});var hct=s(K1);Bge=n(hct,"SPAN",{});var pct=s(Bge);m(XA.$$.fragment,pct),pct.forEach(t),hct.forEach(t),Cer=i(rPe),xge=n(rPe,"SPAN",{});var _ct=s(xge);Mer=r(_ct,"TFAutoModelForPreTraining"),_ct.forEach(t),rPe.forEach(t),Wke=i(c),Tr=n(c,"DIV",{class:!0});var Ol=s(Tr);m(VA.$$.fragment,Ol),Eer=i(Ol),uc=n(Ol,"P",{});var IW=s(uc);yer=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kge=n(IW,"CODE",{});var uct=s(kge);wer=r(uct,"from_pretrained()"),uct.forEach(t),Aer=r(IW,"class method or the "),Rge=n(IW,"CODE",{});var bct=s(Rge);Ler=r(bct,"from_config()"),bct.forEach(t),Ber=r(IW,`class
method.`),IW.forEach(t),xer=i(Ol),zA=n(Ol,"P",{});var tPe=s(zA);ker=r(tPe,"This class cannot be instantiated directly using "),Sge=n(tPe,"CODE",{});var vct=s(Sge);Rer=r(vct,"__init__()"),vct.forEach(t),Ser=r(tPe," (throws an error)."),tPe.forEach(t),Per=i(Ol),ht=n(Ol,"DIV",{class:!0});var Gl=s(ht);m(WA.$$.fragment,Gl),$er=i(Gl),Pge=n(Gl,"P",{});var Tct=s(Pge);Ier=r(Tct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tct.forEach(t),jer=i(Gl),bc=n(Gl,"P",{});var jW=s(bc);Ner=r(jW,`Note:
Loading a model from its configuration file does `),$ge=n(jW,"STRONG",{});var Fct=s($ge);Der=r(Fct,"not"),Fct.forEach(t),qer=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ige=n(jW,"CODE",{});var Cct=s(Ige);Oer=r(Cct,"from_pretrained()"),Cct.forEach(t),Ger=r(jW,"to load the model weights."),jW.forEach(t),Xer=i(Gl),jge=n(Gl,"P",{});var Mct=s(jge);Ver=r(Mct,"Examples:"),Mct.forEach(t),zer=i(Gl),m(QA.$$.fragment,Gl),Gl.forEach(t),Wer=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(HA.$$.fragment,_a),Qer=i(_a),Nge=n(_a,"P",{});var Ect=s(Nge);Her=r(Ect,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ect.forEach(t),Uer=i(_a),un=n(_a,"P",{});var k5=s(un);Jer=r(k5,"The model class to instantiate is selected based on the "),Dge=n(k5,"CODE",{});var yct=s(Dge);Yer=r(yct,"model_type"),yct.forEach(t),Ker=r(k5,` property of the config object (either
passed as an argument or loaded from `),qge=n(k5,"CODE",{});var wct=s(qge);Zer=r(wct,"pretrained_model_name_or_path"),wct.forEach(t),eor=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(k5,"CODE",{});var Act=s(Oge);oor=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),ror=r(k5,":"),k5.forEach(t),tor=i(_a),H=n(_a,"UL",{});var U=s(H);Z1=n(U,"LI",{});var a7e=s(Z1);Gge=n(a7e,"STRONG",{});var Lct=s(Gge);aor=r(Lct,"albert"),Lct.forEach(t),nor=r(a7e," \u2014 "),aO=n(a7e,"A",{href:!0});var Bct=s(aO);sor=r(Bct,"TFAlbertForPreTraining"),Bct.forEach(t),lor=r(a7e," (ALBERT model)"),a7e.forEach(t),ior=i(U),eF=n(U,"LI",{});var n7e=s(eF);Xge=n(n7e,"STRONG",{});var xct=s(Xge);dor=r(xct,"bart"),xct.forEach(t),cor=r(n7e," \u2014 "),nO=n(n7e,"A",{href:!0});var kct=s(nO);mor=r(kct,"TFBartForConditionalGeneration"),kct.forEach(t),gor=r(n7e," (BART model)"),n7e.forEach(t),hor=i(U),oF=n(U,"LI",{});var s7e=s(oF);Vge=n(s7e,"STRONG",{});var Rct=s(Vge);por=r(Rct,"bert"),Rct.forEach(t),_or=r(s7e," \u2014 "),sO=n(s7e,"A",{href:!0});var Sct=s(sO);uor=r(Sct,"TFBertForPreTraining"),Sct.forEach(t),bor=r(s7e," (BERT model)"),s7e.forEach(t),vor=i(U),rF=n(U,"LI",{});var l7e=s(rF);zge=n(l7e,"STRONG",{});var Pct=s(zge);Tor=r(Pct,"camembert"),Pct.forEach(t),For=r(l7e," \u2014 "),lO=n(l7e,"A",{href:!0});var $ct=s(lO);Cor=r($ct,"TFCamembertForMaskedLM"),$ct.forEach(t),Mor=r(l7e," (CamemBERT model)"),l7e.forEach(t),Eor=i(U),tF=n(U,"LI",{});var i7e=s(tF);Wge=n(i7e,"STRONG",{});var Ict=s(Wge);yor=r(Ict,"ctrl"),Ict.forEach(t),wor=r(i7e," \u2014 "),iO=n(i7e,"A",{href:!0});var jct=s(iO);Aor=r(jct,"TFCTRLLMHeadModel"),jct.forEach(t),Lor=r(i7e," (CTRL model)"),i7e.forEach(t),Bor=i(U),aF=n(U,"LI",{});var d7e=s(aF);Qge=n(d7e,"STRONG",{});var Nct=s(Qge);xor=r(Nct,"distilbert"),Nct.forEach(t),kor=r(d7e," \u2014 "),dO=n(d7e,"A",{href:!0});var Dct=s(dO);Ror=r(Dct,"TFDistilBertForMaskedLM"),Dct.forEach(t),Sor=r(d7e," (DistilBERT model)"),d7e.forEach(t),Por=i(U),nF=n(U,"LI",{});var c7e=s(nF);Hge=n(c7e,"STRONG",{});var qct=s(Hge);$or=r(qct,"electra"),qct.forEach(t),Ior=r(c7e," \u2014 "),cO=n(c7e,"A",{href:!0});var Oct=s(cO);jor=r(Oct,"TFElectraForPreTraining"),Oct.forEach(t),Nor=r(c7e," (ELECTRA model)"),c7e.forEach(t),Dor=i(U),sF=n(U,"LI",{});var f7e=s(sF);Uge=n(f7e,"STRONG",{});var Gct=s(Uge);qor=r(Gct,"flaubert"),Gct.forEach(t),Oor=r(f7e," \u2014 "),fO=n(f7e,"A",{href:!0});var Xct=s(fO);Gor=r(Xct,"TFFlaubertWithLMHeadModel"),Xct.forEach(t),Xor=r(f7e," (FlauBERT model)"),f7e.forEach(t),Vor=i(U),lF=n(U,"LI",{});var m7e=s(lF);Jge=n(m7e,"STRONG",{});var Vct=s(Jge);zor=r(Vct,"funnel"),Vct.forEach(t),Wor=r(m7e," \u2014 "),mO=n(m7e,"A",{href:!0});var zct=s(mO);Qor=r(zct,"TFFunnelForPreTraining"),zct.forEach(t),Hor=r(m7e," (Funnel Transformer model)"),m7e.forEach(t),Uor=i(U),iF=n(U,"LI",{});var g7e=s(iF);Yge=n(g7e,"STRONG",{});var Wct=s(Yge);Jor=r(Wct,"gpt2"),Wct.forEach(t),Yor=r(g7e," \u2014 "),gO=n(g7e,"A",{href:!0});var Qct=s(gO);Kor=r(Qct,"TFGPT2LMHeadModel"),Qct.forEach(t),Zor=r(g7e," (OpenAI GPT-2 model)"),g7e.forEach(t),err=i(U),dF=n(U,"LI",{});var h7e=s(dF);Kge=n(h7e,"STRONG",{});var Hct=s(Kge);orr=r(Hct,"layoutlm"),Hct.forEach(t),rrr=r(h7e," \u2014 "),hO=n(h7e,"A",{href:!0});var Uct=s(hO);trr=r(Uct,"TFLayoutLMForMaskedLM"),Uct.forEach(t),arr=r(h7e," (LayoutLM model)"),h7e.forEach(t),nrr=i(U),cF=n(U,"LI",{});var p7e=s(cF);Zge=n(p7e,"STRONG",{});var Jct=s(Zge);srr=r(Jct,"lxmert"),Jct.forEach(t),lrr=r(p7e," \u2014 "),pO=n(p7e,"A",{href:!0});var Yct=s(pO);irr=r(Yct,"TFLxmertForPreTraining"),Yct.forEach(t),drr=r(p7e," (LXMERT model)"),p7e.forEach(t),crr=i(U),fF=n(U,"LI",{});var _7e=s(fF);ehe=n(_7e,"STRONG",{});var Kct=s(ehe);frr=r(Kct,"mobilebert"),Kct.forEach(t),mrr=r(_7e," \u2014 "),_O=n(_7e,"A",{href:!0});var Zct=s(_O);grr=r(Zct,"TFMobileBertForPreTraining"),Zct.forEach(t),hrr=r(_7e," (MobileBERT model)"),_7e.forEach(t),prr=i(U),mF=n(U,"LI",{});var u7e=s(mF);ohe=n(u7e,"STRONG",{});var eft=s(ohe);_rr=r(eft,"mpnet"),eft.forEach(t),urr=r(u7e," \u2014 "),uO=n(u7e,"A",{href:!0});var oft=s(uO);brr=r(oft,"TFMPNetForMaskedLM"),oft.forEach(t),vrr=r(u7e," (MPNet model)"),u7e.forEach(t),Trr=i(U),gF=n(U,"LI",{});var b7e=s(gF);rhe=n(b7e,"STRONG",{});var rft=s(rhe);Frr=r(rft,"openai-gpt"),rft.forEach(t),Crr=r(b7e," \u2014 "),bO=n(b7e,"A",{href:!0});var tft=s(bO);Mrr=r(tft,"TFOpenAIGPTLMHeadModel"),tft.forEach(t),Err=r(b7e," (OpenAI GPT model)"),b7e.forEach(t),yrr=i(U),hF=n(U,"LI",{});var v7e=s(hF);the=n(v7e,"STRONG",{});var aft=s(the);wrr=r(aft,"roberta"),aft.forEach(t),Arr=r(v7e," \u2014 "),vO=n(v7e,"A",{href:!0});var nft=s(vO);Lrr=r(nft,"TFRobertaForMaskedLM"),nft.forEach(t),Brr=r(v7e," (RoBERTa model)"),v7e.forEach(t),xrr=i(U),pF=n(U,"LI",{});var T7e=s(pF);ahe=n(T7e,"STRONG",{});var sft=s(ahe);krr=r(sft,"t5"),sft.forEach(t),Rrr=r(T7e," \u2014 "),TO=n(T7e,"A",{href:!0});var lft=s(TO);Srr=r(lft,"TFT5ForConditionalGeneration"),lft.forEach(t),Prr=r(T7e," (T5 model)"),T7e.forEach(t),$rr=i(U),_F=n(U,"LI",{});var F7e=s(_F);nhe=n(F7e,"STRONG",{});var ift=s(nhe);Irr=r(ift,"tapas"),ift.forEach(t),jrr=r(F7e," \u2014 "),FO=n(F7e,"A",{href:!0});var dft=s(FO);Nrr=r(dft,"TFTapasForMaskedLM"),dft.forEach(t),Drr=r(F7e," (TAPAS model)"),F7e.forEach(t),qrr=i(U),uF=n(U,"LI",{});var C7e=s(uF);she=n(C7e,"STRONG",{});var cft=s(she);Orr=r(cft,"transfo-xl"),cft.forEach(t),Grr=r(C7e," \u2014 "),CO=n(C7e,"A",{href:!0});var fft=s(CO);Xrr=r(fft,"TFTransfoXLLMHeadModel"),fft.forEach(t),Vrr=r(C7e," (Transformer-XL model)"),C7e.forEach(t),zrr=i(U),bF=n(U,"LI",{});var M7e=s(bF);lhe=n(M7e,"STRONG",{});var mft=s(lhe);Wrr=r(mft,"xlm"),mft.forEach(t),Qrr=r(M7e," \u2014 "),MO=n(M7e,"A",{href:!0});var gft=s(MO);Hrr=r(gft,"TFXLMWithLMHeadModel"),gft.forEach(t),Urr=r(M7e," (XLM model)"),M7e.forEach(t),Jrr=i(U),vF=n(U,"LI",{});var E7e=s(vF);ihe=n(E7e,"STRONG",{});var hft=s(ihe);Yrr=r(hft,"xlm-roberta"),hft.forEach(t),Krr=r(E7e," \u2014 "),EO=n(E7e,"A",{href:!0});var pft=s(EO);Zrr=r(pft,"TFXLMRobertaForMaskedLM"),pft.forEach(t),etr=r(E7e," (XLM-RoBERTa model)"),E7e.forEach(t),otr=i(U),TF=n(U,"LI",{});var y7e=s(TF);dhe=n(y7e,"STRONG",{});var _ft=s(dhe);rtr=r(_ft,"xlnet"),_ft.forEach(t),ttr=r(y7e," \u2014 "),yO=n(y7e,"A",{href:!0});var uft=s(yO);atr=r(uft,"TFXLNetLMHeadModel"),uft.forEach(t),ntr=r(y7e," (XLNet model)"),y7e.forEach(t),U.forEach(t),str=i(_a),che=n(_a,"P",{});var bft=s(che);ltr=r(bft,"Examples:"),bft.forEach(t),itr=i(_a),m(UA.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),Qke=i(c),vc=n(c,"H2",{class:!0});var aPe=s(vc);FF=n(aPe,"A",{id:!0,class:!0,href:!0});var vft=s(FF);fhe=n(vft,"SPAN",{});var Tft=s(fhe);m(JA.$$.fragment,Tft),Tft.forEach(t),vft.forEach(t),dtr=i(aPe),mhe=n(aPe,"SPAN",{});var Fft=s(mhe);ctr=r(Fft,"TFAutoModelForCausalLM"),Fft.forEach(t),aPe.forEach(t),Hke=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(YA.$$.fragment,Xl),ftr=i(Xl),Tc=n(Xl,"P",{});var NW=s(Tc);mtr=r(NW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ghe=n(NW,"CODE",{});var Cft=s(ghe);gtr=r(Cft,"from_pretrained()"),Cft.forEach(t),htr=r(NW,"class method or the "),hhe=n(NW,"CODE",{});var Mft=s(hhe);ptr=r(Mft,"from_config()"),Mft.forEach(t),_tr=r(NW,`class
method.`),NW.forEach(t),utr=i(Xl),KA=n(Xl,"P",{});var nPe=s(KA);btr=r(nPe,"This class cannot be instantiated directly using "),phe=n(nPe,"CODE",{});var Eft=s(phe);vtr=r(Eft,"__init__()"),Eft.forEach(t),Ttr=r(nPe," (throws an error)."),nPe.forEach(t),Ftr=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(ZA.$$.fragment,Vl),Ctr=i(Vl),_he=n(Vl,"P",{});var yft=s(_he);Mtr=r(yft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yft.forEach(t),Etr=i(Vl),Fc=n(Vl,"P",{});var DW=s(Fc);ytr=r(DW,`Note:
Loading a model from its configuration file does `),uhe=n(DW,"STRONG",{});var wft=s(uhe);wtr=r(wft,"not"),wft.forEach(t),Atr=r(DW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bhe=n(DW,"CODE",{});var Aft=s(bhe);Ltr=r(Aft,"from_pretrained()"),Aft.forEach(t),Btr=r(DW,"to load the model weights."),DW.forEach(t),xtr=i(Vl),vhe=n(Vl,"P",{});var Lft=s(vhe);ktr=r(Lft,"Examples:"),Lft.forEach(t),Rtr=i(Vl),m(e0.$$.fragment,Vl),Vl.forEach(t),Str=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(o0.$$.fragment,ua),Ptr=i(ua),The=n(ua,"P",{});var Bft=s(The);$tr=r(Bft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bft.forEach(t),Itr=i(ua),bn=n(ua,"P",{});var R5=s(bn);jtr=r(R5,"The model class to instantiate is selected based on the "),Fhe=n(R5,"CODE",{});var xft=s(Fhe);Ntr=r(xft,"model_type"),xft.forEach(t),Dtr=r(R5,` property of the config object (either
passed as an argument or loaded from `),Che=n(R5,"CODE",{});var kft=s(Che);qtr=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),Otr=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(R5,"CODE",{});var Rft=s(Mhe);Gtr=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),Xtr=r(R5,":"),R5.forEach(t),Vtr=i(ua),ge=n(ua,"UL",{});var Ce=s(ge);CF=n(Ce,"LI",{});var w7e=s(CF);Ehe=n(w7e,"STRONG",{});var Sft=s(Ehe);ztr=r(Sft,"bert"),Sft.forEach(t),Wtr=r(w7e," \u2014 "),wO=n(w7e,"A",{href:!0});var Pft=s(wO);Qtr=r(Pft,"TFBertLMHeadModel"),Pft.forEach(t),Htr=r(w7e," (BERT model)"),w7e.forEach(t),Utr=i(Ce),MF=n(Ce,"LI",{});var A7e=s(MF);yhe=n(A7e,"STRONG",{});var $ft=s(yhe);Jtr=r($ft,"camembert"),$ft.forEach(t),Ytr=r(A7e," \u2014 "),AO=n(A7e,"A",{href:!0});var Ift=s(AO);Ktr=r(Ift,"TFCamembertForCausalLM"),Ift.forEach(t),Ztr=r(A7e," (CamemBERT model)"),A7e.forEach(t),ear=i(Ce),EF=n(Ce,"LI",{});var L7e=s(EF);whe=n(L7e,"STRONG",{});var jft=s(whe);oar=r(jft,"ctrl"),jft.forEach(t),rar=r(L7e," \u2014 "),LO=n(L7e,"A",{href:!0});var Nft=s(LO);tar=r(Nft,"TFCTRLLMHeadModel"),Nft.forEach(t),aar=r(L7e," (CTRL model)"),L7e.forEach(t),nar=i(Ce),yF=n(Ce,"LI",{});var B7e=s(yF);Ahe=n(B7e,"STRONG",{});var Dft=s(Ahe);sar=r(Dft,"gpt2"),Dft.forEach(t),lar=r(B7e," \u2014 "),BO=n(B7e,"A",{href:!0});var qft=s(BO);iar=r(qft,"TFGPT2LMHeadModel"),qft.forEach(t),dar=r(B7e," (OpenAI GPT-2 model)"),B7e.forEach(t),car=i(Ce),wF=n(Ce,"LI",{});var x7e=s(wF);Lhe=n(x7e,"STRONG",{});var Oft=s(Lhe);far=r(Oft,"openai-gpt"),Oft.forEach(t),mar=r(x7e," \u2014 "),xO=n(x7e,"A",{href:!0});var Gft=s(xO);gar=r(Gft,"TFOpenAIGPTLMHeadModel"),Gft.forEach(t),har=r(x7e," (OpenAI GPT model)"),x7e.forEach(t),par=i(Ce),AF=n(Ce,"LI",{});var k7e=s(AF);Bhe=n(k7e,"STRONG",{});var Xft=s(Bhe);_ar=r(Xft,"rembert"),Xft.forEach(t),uar=r(k7e," \u2014 "),kO=n(k7e,"A",{href:!0});var Vft=s(kO);bar=r(Vft,"TFRemBertForCausalLM"),Vft.forEach(t),Tar=r(k7e," (RemBERT model)"),k7e.forEach(t),Far=i(Ce),LF=n(Ce,"LI",{});var R7e=s(LF);xhe=n(R7e,"STRONG",{});var zft=s(xhe);Car=r(zft,"roberta"),zft.forEach(t),Mar=r(R7e," \u2014 "),RO=n(R7e,"A",{href:!0});var Wft=s(RO);Ear=r(Wft,"TFRobertaForCausalLM"),Wft.forEach(t),yar=r(R7e," (RoBERTa model)"),R7e.forEach(t),war=i(Ce),BF=n(Ce,"LI",{});var S7e=s(BF);khe=n(S7e,"STRONG",{});var Qft=s(khe);Aar=r(Qft,"roformer"),Qft.forEach(t),Lar=r(S7e," \u2014 "),SO=n(S7e,"A",{href:!0});var Hft=s(SO);Bar=r(Hft,"TFRoFormerForCausalLM"),Hft.forEach(t),xar=r(S7e," (RoFormer model)"),S7e.forEach(t),kar=i(Ce),xF=n(Ce,"LI",{});var P7e=s(xF);Rhe=n(P7e,"STRONG",{});var Uft=s(Rhe);Rar=r(Uft,"transfo-xl"),Uft.forEach(t),Sar=r(P7e," \u2014 "),PO=n(P7e,"A",{href:!0});var Jft=s(PO);Par=r(Jft,"TFTransfoXLLMHeadModel"),Jft.forEach(t),$ar=r(P7e," (Transformer-XL model)"),P7e.forEach(t),Iar=i(Ce),kF=n(Ce,"LI",{});var $7e=s(kF);She=n($7e,"STRONG",{});var Yft=s(She);jar=r(Yft,"xlm"),Yft.forEach(t),Nar=r($7e," \u2014 "),$O=n($7e,"A",{href:!0});var Kft=s($O);Dar=r(Kft,"TFXLMWithLMHeadModel"),Kft.forEach(t),qar=r($7e," (XLM model)"),$7e.forEach(t),Oar=i(Ce),RF=n(Ce,"LI",{});var I7e=s(RF);Phe=n(I7e,"STRONG",{});var Zft=s(Phe);Gar=r(Zft,"xlnet"),Zft.forEach(t),Xar=r(I7e," \u2014 "),IO=n(I7e,"A",{href:!0});var emt=s(IO);Var=r(emt,"TFXLNetLMHeadModel"),emt.forEach(t),zar=r(I7e," (XLNet model)"),I7e.forEach(t),Ce.forEach(t),War=i(ua),$he=n(ua,"P",{});var omt=s($he);Qar=r(omt,"Examples:"),omt.forEach(t),Har=i(ua),m(r0.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),Uke=i(c),Cc=n(c,"H2",{class:!0});var sPe=s(Cc);SF=n(sPe,"A",{id:!0,class:!0,href:!0});var rmt=s(SF);Ihe=n(rmt,"SPAN",{});var tmt=s(Ihe);m(t0.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),Uar=i(sPe),jhe=n(sPe,"SPAN",{});var amt=s(jhe);Jar=r(amt,"TFAutoModelForImageClassification"),amt.forEach(t),sPe.forEach(t),Jke=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(a0.$$.fragment,zl),Yar=i(zl),Mc=n(zl,"P",{});var qW=s(Mc);Kar=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nhe=n(qW,"CODE",{});var nmt=s(Nhe);Zar=r(nmt,"from_pretrained()"),nmt.forEach(t),enr=r(qW,"class method or the "),Dhe=n(qW,"CODE",{});var smt=s(Dhe);onr=r(smt,"from_config()"),smt.forEach(t),rnr=r(qW,`class
method.`),qW.forEach(t),tnr=i(zl),n0=n(zl,"P",{});var lPe=s(n0);anr=r(lPe,"This class cannot be instantiated directly using "),qhe=n(lPe,"CODE",{});var lmt=s(qhe);nnr=r(lmt,"__init__()"),lmt.forEach(t),snr=r(lPe," (throws an error)."),lPe.forEach(t),lnr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(s0.$$.fragment,Wl),inr=i(Wl),Ohe=n(Wl,"P",{});var imt=s(Ohe);dnr=r(imt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),imt.forEach(t),cnr=i(Wl),Ec=n(Wl,"P",{});var OW=s(Ec);fnr=r(OW,`Note:
Loading a model from its configuration file does `),Ghe=n(OW,"STRONG",{});var dmt=s(Ghe);mnr=r(dmt,"not"),dmt.forEach(t),gnr=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=n(OW,"CODE",{});var cmt=s(Xhe);hnr=r(cmt,"from_pretrained()"),cmt.forEach(t),pnr=r(OW,"to load the model weights."),OW.forEach(t),_nr=i(Wl),Vhe=n(Wl,"P",{});var fmt=s(Vhe);unr=r(fmt,"Examples:"),fmt.forEach(t),bnr=i(Wl),m(l0.$$.fragment,Wl),Wl.forEach(t),vnr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(i0.$$.fragment,ba),Tnr=i(ba),zhe=n(ba,"P",{});var mmt=s(zhe);Fnr=r(mmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mmt.forEach(t),Cnr=i(ba),vn=n(ba,"P",{});var S5=s(vn);Mnr=r(S5,"The model class to instantiate is selected based on the "),Whe=n(S5,"CODE",{});var gmt=s(Whe);Enr=r(gmt,"model_type"),gmt.forEach(t),ynr=r(S5,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(S5,"CODE",{});var hmt=s(Qhe);wnr=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),Anr=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(S5,"CODE",{});var pmt=s(Hhe);Lnr=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),Bnr=r(S5,":"),S5.forEach(t),xnr=i(ba),d0=n(ba,"UL",{});var iPe=s(d0);PF=n(iPe,"LI",{});var j7e=s(PF);Uhe=n(j7e,"STRONG",{});var _mt=s(Uhe);knr=r(_mt,"convnext"),_mt.forEach(t),Rnr=r(j7e," \u2014 "),jO=n(j7e,"A",{href:!0});var umt=s(jO);Snr=r(umt,"TFConvNextForImageClassification"),umt.forEach(t),Pnr=r(j7e," (ConvNext model)"),j7e.forEach(t),$nr=i(iPe),$F=n(iPe,"LI",{});var N7e=s($F);Jhe=n(N7e,"STRONG",{});var bmt=s(Jhe);Inr=r(bmt,"vit"),bmt.forEach(t),jnr=r(N7e," \u2014 "),NO=n(N7e,"A",{href:!0});var vmt=s(NO);Nnr=r(vmt,"TFViTForImageClassification"),vmt.forEach(t),Dnr=r(N7e," (ViT model)"),N7e.forEach(t),iPe.forEach(t),qnr=i(ba),Yhe=n(ba,"P",{});var Tmt=s(Yhe);Onr=r(Tmt,"Examples:"),Tmt.forEach(t),Gnr=i(ba),m(c0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),Yke=i(c),yc=n(c,"H2",{class:!0});var dPe=s(yc);IF=n(dPe,"A",{id:!0,class:!0,href:!0});var Fmt=s(IF);Khe=n(Fmt,"SPAN",{});var Cmt=s(Khe);m(f0.$$.fragment,Cmt),Cmt.forEach(t),Fmt.forEach(t),Xnr=i(dPe),Zhe=n(dPe,"SPAN",{});var Mmt=s(Zhe);Vnr=r(Mmt,"TFAutoModelForMaskedLM"),Mmt.forEach(t),dPe.forEach(t),Kke=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(m0.$$.fragment,Ql),znr=i(Ql),wc=n(Ql,"P",{});var GW=s(wc);Wnr=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),epe=n(GW,"CODE",{});var Emt=s(epe);Qnr=r(Emt,"from_pretrained()"),Emt.forEach(t),Hnr=r(GW,"class method or the "),ope=n(GW,"CODE",{});var ymt=s(ope);Unr=r(ymt,"from_config()"),ymt.forEach(t),Jnr=r(GW,`class
method.`),GW.forEach(t),Ynr=i(Ql),g0=n(Ql,"P",{});var cPe=s(g0);Knr=r(cPe,"This class cannot be instantiated directly using "),rpe=n(cPe,"CODE",{});var wmt=s(rpe);Znr=r(wmt,"__init__()"),wmt.forEach(t),esr=r(cPe," (throws an error)."),cPe.forEach(t),osr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(h0.$$.fragment,Hl),rsr=i(Hl),tpe=n(Hl,"P",{});var Amt=s(tpe);tsr=r(Amt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Amt.forEach(t),asr=i(Hl),Ac=n(Hl,"P",{});var XW=s(Ac);nsr=r(XW,`Note:
Loading a model from its configuration file does `),ape=n(XW,"STRONG",{});var Lmt=s(ape);ssr=r(Lmt,"not"),Lmt.forEach(t),lsr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=n(XW,"CODE",{});var Bmt=s(npe);isr=r(Bmt,"from_pretrained()"),Bmt.forEach(t),dsr=r(XW,"to load the model weights."),XW.forEach(t),csr=i(Hl),spe=n(Hl,"P",{});var xmt=s(spe);fsr=r(xmt,"Examples:"),xmt.forEach(t),msr=i(Hl),m(p0.$$.fragment,Hl),Hl.forEach(t),gsr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(_0.$$.fragment,va),hsr=i(va),lpe=n(va,"P",{});var kmt=s(lpe);psr=r(kmt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kmt.forEach(t),_sr=i(va),Tn=n(va,"P",{});var P5=s(Tn);usr=r(P5,"The model class to instantiate is selected based on the "),ipe=n(P5,"CODE",{});var Rmt=s(ipe);bsr=r(Rmt,"model_type"),Rmt.forEach(t),vsr=r(P5,` property of the config object (either
passed as an argument or loaded from `),dpe=n(P5,"CODE",{});var Smt=s(dpe);Tsr=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),Fsr=r(P5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(P5,"CODE",{});var Pmt=s(cpe);Csr=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),Msr=r(P5,":"),P5.forEach(t),Esr=i(va),Y=n(va,"UL",{});var ee=s(Y);jF=n(ee,"LI",{});var D7e=s(jF);fpe=n(D7e,"STRONG",{});var $mt=s(fpe);ysr=r($mt,"albert"),$mt.forEach(t),wsr=r(D7e," \u2014 "),DO=n(D7e,"A",{href:!0});var Imt=s(DO);Asr=r(Imt,"TFAlbertForMaskedLM"),Imt.forEach(t),Lsr=r(D7e," (ALBERT model)"),D7e.forEach(t),Bsr=i(ee),NF=n(ee,"LI",{});var q7e=s(NF);mpe=n(q7e,"STRONG",{});var jmt=s(mpe);xsr=r(jmt,"bert"),jmt.forEach(t),ksr=r(q7e," \u2014 "),qO=n(q7e,"A",{href:!0});var Nmt=s(qO);Rsr=r(Nmt,"TFBertForMaskedLM"),Nmt.forEach(t),Ssr=r(q7e," (BERT model)"),q7e.forEach(t),Psr=i(ee),DF=n(ee,"LI",{});var O7e=s(DF);gpe=n(O7e,"STRONG",{});var Dmt=s(gpe);$sr=r(Dmt,"camembert"),Dmt.forEach(t),Isr=r(O7e," \u2014 "),OO=n(O7e,"A",{href:!0});var qmt=s(OO);jsr=r(qmt,"TFCamembertForMaskedLM"),qmt.forEach(t),Nsr=r(O7e," (CamemBERT model)"),O7e.forEach(t),Dsr=i(ee),qF=n(ee,"LI",{});var G7e=s(qF);hpe=n(G7e,"STRONG",{});var Omt=s(hpe);qsr=r(Omt,"convbert"),Omt.forEach(t),Osr=r(G7e," \u2014 "),GO=n(G7e,"A",{href:!0});var Gmt=s(GO);Gsr=r(Gmt,"TFConvBertForMaskedLM"),Gmt.forEach(t),Xsr=r(G7e," (ConvBERT model)"),G7e.forEach(t),Vsr=i(ee),OF=n(ee,"LI",{});var X7e=s(OF);ppe=n(X7e,"STRONG",{});var Xmt=s(ppe);zsr=r(Xmt,"deberta"),Xmt.forEach(t),Wsr=r(X7e," \u2014 "),XO=n(X7e,"A",{href:!0});var Vmt=s(XO);Qsr=r(Vmt,"TFDebertaForMaskedLM"),Vmt.forEach(t),Hsr=r(X7e," (DeBERTa model)"),X7e.forEach(t),Usr=i(ee),GF=n(ee,"LI",{});var V7e=s(GF);_pe=n(V7e,"STRONG",{});var zmt=s(_pe);Jsr=r(zmt,"deberta-v2"),zmt.forEach(t),Ysr=r(V7e," \u2014 "),VO=n(V7e,"A",{href:!0});var Wmt=s(VO);Ksr=r(Wmt,"TFDebertaV2ForMaskedLM"),Wmt.forEach(t),Zsr=r(V7e," (DeBERTa-v2 model)"),V7e.forEach(t),elr=i(ee),XF=n(ee,"LI",{});var z7e=s(XF);upe=n(z7e,"STRONG",{});var Qmt=s(upe);olr=r(Qmt,"distilbert"),Qmt.forEach(t),rlr=r(z7e," \u2014 "),zO=n(z7e,"A",{href:!0});var Hmt=s(zO);tlr=r(Hmt,"TFDistilBertForMaskedLM"),Hmt.forEach(t),alr=r(z7e," (DistilBERT model)"),z7e.forEach(t),nlr=i(ee),VF=n(ee,"LI",{});var W7e=s(VF);bpe=n(W7e,"STRONG",{});var Umt=s(bpe);slr=r(Umt,"electra"),Umt.forEach(t),llr=r(W7e," \u2014 "),WO=n(W7e,"A",{href:!0});var Jmt=s(WO);ilr=r(Jmt,"TFElectraForMaskedLM"),Jmt.forEach(t),dlr=r(W7e," (ELECTRA model)"),W7e.forEach(t),clr=i(ee),zF=n(ee,"LI",{});var Q7e=s(zF);vpe=n(Q7e,"STRONG",{});var Ymt=s(vpe);flr=r(Ymt,"flaubert"),Ymt.forEach(t),mlr=r(Q7e," \u2014 "),QO=n(Q7e,"A",{href:!0});var Kmt=s(QO);glr=r(Kmt,"TFFlaubertWithLMHeadModel"),Kmt.forEach(t),hlr=r(Q7e," (FlauBERT model)"),Q7e.forEach(t),plr=i(ee),WF=n(ee,"LI",{});var H7e=s(WF);Tpe=n(H7e,"STRONG",{});var Zmt=s(Tpe);_lr=r(Zmt,"funnel"),Zmt.forEach(t),ulr=r(H7e," \u2014 "),HO=n(H7e,"A",{href:!0});var egt=s(HO);blr=r(egt,"TFFunnelForMaskedLM"),egt.forEach(t),vlr=r(H7e," (Funnel Transformer model)"),H7e.forEach(t),Tlr=i(ee),QF=n(ee,"LI",{});var U7e=s(QF);Fpe=n(U7e,"STRONG",{});var ogt=s(Fpe);Flr=r(ogt,"layoutlm"),ogt.forEach(t),Clr=r(U7e," \u2014 "),UO=n(U7e,"A",{href:!0});var rgt=s(UO);Mlr=r(rgt,"TFLayoutLMForMaskedLM"),rgt.forEach(t),Elr=r(U7e," (LayoutLM model)"),U7e.forEach(t),ylr=i(ee),HF=n(ee,"LI",{});var J7e=s(HF);Cpe=n(J7e,"STRONG",{});var tgt=s(Cpe);wlr=r(tgt,"longformer"),tgt.forEach(t),Alr=r(J7e," \u2014 "),JO=n(J7e,"A",{href:!0});var agt=s(JO);Llr=r(agt,"TFLongformerForMaskedLM"),agt.forEach(t),Blr=r(J7e," (Longformer model)"),J7e.forEach(t),xlr=i(ee),UF=n(ee,"LI",{});var Y7e=s(UF);Mpe=n(Y7e,"STRONG",{});var ngt=s(Mpe);klr=r(ngt,"mobilebert"),ngt.forEach(t),Rlr=r(Y7e," \u2014 "),YO=n(Y7e,"A",{href:!0});var sgt=s(YO);Slr=r(sgt,"TFMobileBertForMaskedLM"),sgt.forEach(t),Plr=r(Y7e," (MobileBERT model)"),Y7e.forEach(t),$lr=i(ee),JF=n(ee,"LI",{});var K7e=s(JF);Epe=n(K7e,"STRONG",{});var lgt=s(Epe);Ilr=r(lgt,"mpnet"),lgt.forEach(t),jlr=r(K7e," \u2014 "),KO=n(K7e,"A",{href:!0});var igt=s(KO);Nlr=r(igt,"TFMPNetForMaskedLM"),igt.forEach(t),Dlr=r(K7e," (MPNet model)"),K7e.forEach(t),qlr=i(ee),YF=n(ee,"LI",{});var Z7e=s(YF);ype=n(Z7e,"STRONG",{});var dgt=s(ype);Olr=r(dgt,"rembert"),dgt.forEach(t),Glr=r(Z7e," \u2014 "),ZO=n(Z7e,"A",{href:!0});var cgt=s(ZO);Xlr=r(cgt,"TFRemBertForMaskedLM"),cgt.forEach(t),Vlr=r(Z7e," (RemBERT model)"),Z7e.forEach(t),zlr=i(ee),KF=n(ee,"LI",{});var e8e=s(KF);wpe=n(e8e,"STRONG",{});var fgt=s(wpe);Wlr=r(fgt,"roberta"),fgt.forEach(t),Qlr=r(e8e," \u2014 "),eG=n(e8e,"A",{href:!0});var mgt=s(eG);Hlr=r(mgt,"TFRobertaForMaskedLM"),mgt.forEach(t),Ulr=r(e8e," (RoBERTa model)"),e8e.forEach(t),Jlr=i(ee),ZF=n(ee,"LI",{});var o8e=s(ZF);Ape=n(o8e,"STRONG",{});var ggt=s(Ape);Ylr=r(ggt,"roformer"),ggt.forEach(t),Klr=r(o8e," \u2014 "),oG=n(o8e,"A",{href:!0});var hgt=s(oG);Zlr=r(hgt,"TFRoFormerForMaskedLM"),hgt.forEach(t),eir=r(o8e," (RoFormer model)"),o8e.forEach(t),oir=i(ee),eC=n(ee,"LI",{});var r8e=s(eC);Lpe=n(r8e,"STRONG",{});var pgt=s(Lpe);rir=r(pgt,"tapas"),pgt.forEach(t),tir=r(r8e," \u2014 "),rG=n(r8e,"A",{href:!0});var _gt=s(rG);air=r(_gt,"TFTapasForMaskedLM"),_gt.forEach(t),nir=r(r8e," (TAPAS model)"),r8e.forEach(t),sir=i(ee),oC=n(ee,"LI",{});var t8e=s(oC);Bpe=n(t8e,"STRONG",{});var ugt=s(Bpe);lir=r(ugt,"xlm"),ugt.forEach(t),iir=r(t8e," \u2014 "),tG=n(t8e,"A",{href:!0});var bgt=s(tG);dir=r(bgt,"TFXLMWithLMHeadModel"),bgt.forEach(t),cir=r(t8e," (XLM model)"),t8e.forEach(t),fir=i(ee),rC=n(ee,"LI",{});var a8e=s(rC);xpe=n(a8e,"STRONG",{});var vgt=s(xpe);mir=r(vgt,"xlm-roberta"),vgt.forEach(t),gir=r(a8e," \u2014 "),aG=n(a8e,"A",{href:!0});var Tgt=s(aG);hir=r(Tgt,"TFXLMRobertaForMaskedLM"),Tgt.forEach(t),pir=r(a8e," (XLM-RoBERTa model)"),a8e.forEach(t),ee.forEach(t),_ir=i(va),kpe=n(va,"P",{});var Fgt=s(kpe);uir=r(Fgt,"Examples:"),Fgt.forEach(t),bir=i(va),m(u0.$$.fragment,va),va.forEach(t),Ql.forEach(t),Zke=i(c),Lc=n(c,"H2",{class:!0});var fPe=s(Lc);tC=n(fPe,"A",{id:!0,class:!0,href:!0});var Cgt=s(tC);Rpe=n(Cgt,"SPAN",{});var Mgt=s(Rpe);m(b0.$$.fragment,Mgt),Mgt.forEach(t),Cgt.forEach(t),vir=i(fPe),Spe=n(fPe,"SPAN",{});var Egt=s(Spe);Tir=r(Egt,"TFAutoModelForSeq2SeqLM"),Egt.forEach(t),fPe.forEach(t),eRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(v0.$$.fragment,Ul),Fir=i(Ul),Bc=n(Ul,"P",{});var VW=s(Bc);Cir=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ppe=n(VW,"CODE",{});var ygt=s(Ppe);Mir=r(ygt,"from_pretrained()"),ygt.forEach(t),Eir=r(VW,"class method or the "),$pe=n(VW,"CODE",{});var wgt=s($pe);yir=r(wgt,"from_config()"),wgt.forEach(t),wir=r(VW,`class
method.`),VW.forEach(t),Air=i(Ul),T0=n(Ul,"P",{});var mPe=s(T0);Lir=r(mPe,"This class cannot be instantiated directly using "),Ipe=n(mPe,"CODE",{});var Agt=s(Ipe);Bir=r(Agt,"__init__()"),Agt.forEach(t),xir=r(mPe," (throws an error)."),mPe.forEach(t),kir=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(F0.$$.fragment,Jl),Rir=i(Jl),jpe=n(Jl,"P",{});var Lgt=s(jpe);Sir=r(Lgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lgt.forEach(t),Pir=i(Jl),xc=n(Jl,"P",{});var zW=s(xc);$ir=r(zW,`Note:
Loading a model from its configuration file does `),Npe=n(zW,"STRONG",{});var Bgt=s(Npe);Iir=r(Bgt,"not"),Bgt.forEach(t),jir=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=n(zW,"CODE",{});var xgt=s(Dpe);Nir=r(xgt,"from_pretrained()"),xgt.forEach(t),Dir=r(zW,"to load the model weights."),zW.forEach(t),qir=i(Jl),qpe=n(Jl,"P",{});var kgt=s(qpe);Oir=r(kgt,"Examples:"),kgt.forEach(t),Gir=i(Jl),m(C0.$$.fragment,Jl),Jl.forEach(t),Xir=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(M0.$$.fragment,Ta),Vir=i(Ta),Ope=n(Ta,"P",{});var Rgt=s(Ope);zir=r(Rgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rgt.forEach(t),Wir=i(Ta),Fn=n(Ta,"P",{});var $5=s(Fn);Qir=r($5,"The model class to instantiate is selected based on the "),Gpe=n($5,"CODE",{});var Sgt=s(Gpe);Hir=r(Sgt,"model_type"),Sgt.forEach(t),Uir=r($5,` property of the config object (either
passed as an argument or loaded from `),Xpe=n($5,"CODE",{});var Pgt=s(Xpe);Jir=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),Yir=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n($5,"CODE",{});var $gt=s(Vpe);Kir=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),Zir=r($5,":"),$5.forEach(t),edr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);aC=n(ye,"LI",{});var n8e=s(aC);zpe=n(n8e,"STRONG",{});var Igt=s(zpe);odr=r(Igt,"bart"),Igt.forEach(t),rdr=r(n8e," \u2014 "),nG=n(n8e,"A",{href:!0});var jgt=s(nG);tdr=r(jgt,"TFBartForConditionalGeneration"),jgt.forEach(t),adr=r(n8e," (BART model)"),n8e.forEach(t),ndr=i(ye),nC=n(ye,"LI",{});var s8e=s(nC);Wpe=n(s8e,"STRONG",{});var Ngt=s(Wpe);sdr=r(Ngt,"blenderbot"),Ngt.forEach(t),ldr=r(s8e," \u2014 "),sG=n(s8e,"A",{href:!0});var Dgt=s(sG);idr=r(Dgt,"TFBlenderbotForConditionalGeneration"),Dgt.forEach(t),ddr=r(s8e," (Blenderbot model)"),s8e.forEach(t),cdr=i(ye),sC=n(ye,"LI",{});var l8e=s(sC);Qpe=n(l8e,"STRONG",{});var qgt=s(Qpe);fdr=r(qgt,"blenderbot-small"),qgt.forEach(t),mdr=r(l8e," \u2014 "),lG=n(l8e,"A",{href:!0});var Ogt=s(lG);gdr=r(Ogt,"TFBlenderbotSmallForConditionalGeneration"),Ogt.forEach(t),hdr=r(l8e," (BlenderbotSmall model)"),l8e.forEach(t),pdr=i(ye),lC=n(ye,"LI",{});var i8e=s(lC);Hpe=n(i8e,"STRONG",{});var Ggt=s(Hpe);_dr=r(Ggt,"encoder-decoder"),Ggt.forEach(t),udr=r(i8e," \u2014 "),iG=n(i8e,"A",{href:!0});var Xgt=s(iG);bdr=r(Xgt,"TFEncoderDecoderModel"),Xgt.forEach(t),vdr=r(i8e," (Encoder decoder model)"),i8e.forEach(t),Tdr=i(ye),iC=n(ye,"LI",{});var d8e=s(iC);Upe=n(d8e,"STRONG",{});var Vgt=s(Upe);Fdr=r(Vgt,"led"),Vgt.forEach(t),Cdr=r(d8e," \u2014 "),dG=n(d8e,"A",{href:!0});var zgt=s(dG);Mdr=r(zgt,"TFLEDForConditionalGeneration"),zgt.forEach(t),Edr=r(d8e," (LED model)"),d8e.forEach(t),ydr=i(ye),dC=n(ye,"LI",{});var c8e=s(dC);Jpe=n(c8e,"STRONG",{});var Wgt=s(Jpe);wdr=r(Wgt,"marian"),Wgt.forEach(t),Adr=r(c8e," \u2014 "),cG=n(c8e,"A",{href:!0});var Qgt=s(cG);Ldr=r(Qgt,"TFMarianMTModel"),Qgt.forEach(t),Bdr=r(c8e," (Marian model)"),c8e.forEach(t),xdr=i(ye),cC=n(ye,"LI",{});var f8e=s(cC);Ype=n(f8e,"STRONG",{});var Hgt=s(Ype);kdr=r(Hgt,"mbart"),Hgt.forEach(t),Rdr=r(f8e," \u2014 "),fG=n(f8e,"A",{href:!0});var Ugt=s(fG);Sdr=r(Ugt,"TFMBartForConditionalGeneration"),Ugt.forEach(t),Pdr=r(f8e," (mBART model)"),f8e.forEach(t),$dr=i(ye),fC=n(ye,"LI",{});var m8e=s(fC);Kpe=n(m8e,"STRONG",{});var Jgt=s(Kpe);Idr=r(Jgt,"mt5"),Jgt.forEach(t),jdr=r(m8e," \u2014 "),mG=n(m8e,"A",{href:!0});var Ygt=s(mG);Ndr=r(Ygt,"TFMT5ForConditionalGeneration"),Ygt.forEach(t),Ddr=r(m8e," (mT5 model)"),m8e.forEach(t),qdr=i(ye),mC=n(ye,"LI",{});var g8e=s(mC);Zpe=n(g8e,"STRONG",{});var Kgt=s(Zpe);Odr=r(Kgt,"pegasus"),Kgt.forEach(t),Gdr=r(g8e," \u2014 "),gG=n(g8e,"A",{href:!0});var Zgt=s(gG);Xdr=r(Zgt,"TFPegasusForConditionalGeneration"),Zgt.forEach(t),Vdr=r(g8e," (Pegasus model)"),g8e.forEach(t),zdr=i(ye),gC=n(ye,"LI",{});var h8e=s(gC);e_e=n(h8e,"STRONG",{});var eht=s(e_e);Wdr=r(eht,"t5"),eht.forEach(t),Qdr=r(h8e," \u2014 "),hG=n(h8e,"A",{href:!0});var oht=s(hG);Hdr=r(oht,"TFT5ForConditionalGeneration"),oht.forEach(t),Udr=r(h8e," (T5 model)"),h8e.forEach(t),ye.forEach(t),Jdr=i(Ta),o_e=n(Ta,"P",{});var rht=s(o_e);Ydr=r(rht,"Examples:"),rht.forEach(t),Kdr=i(Ta),m(E0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),oRe=i(c),kc=n(c,"H2",{class:!0});var gPe=s(kc);hC=n(gPe,"A",{id:!0,class:!0,href:!0});var tht=s(hC);r_e=n(tht,"SPAN",{});var aht=s(r_e);m(y0.$$.fragment,aht),aht.forEach(t),tht.forEach(t),Zdr=i(gPe),t_e=n(gPe,"SPAN",{});var nht=s(t_e);ecr=r(nht,"TFAutoModelForSequenceClassification"),nht.forEach(t),gPe.forEach(t),rRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(w0.$$.fragment,Yl),ocr=i(Yl),Rc=n(Yl,"P",{});var WW=s(Rc);rcr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),a_e=n(WW,"CODE",{});var sht=s(a_e);tcr=r(sht,"from_pretrained()"),sht.forEach(t),acr=r(WW,"class method or the "),n_e=n(WW,"CODE",{});var lht=s(n_e);ncr=r(lht,"from_config()"),lht.forEach(t),scr=r(WW,`class
method.`),WW.forEach(t),lcr=i(Yl),A0=n(Yl,"P",{});var hPe=s(A0);icr=r(hPe,"This class cannot be instantiated directly using "),s_e=n(hPe,"CODE",{});var iht=s(s_e);dcr=r(iht,"__init__()"),iht.forEach(t),ccr=r(hPe," (throws an error)."),hPe.forEach(t),fcr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(L0.$$.fragment,Kl),mcr=i(Kl),l_e=n(Kl,"P",{});var dht=s(l_e);gcr=r(dht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dht.forEach(t),hcr=i(Kl),Sc=n(Kl,"P",{});var QW=s(Sc);pcr=r(QW,`Note:
Loading a model from its configuration file does `),i_e=n(QW,"STRONG",{});var cht=s(i_e);_cr=r(cht,"not"),cht.forEach(t),ucr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),d_e=n(QW,"CODE",{});var fht=s(d_e);bcr=r(fht,"from_pretrained()"),fht.forEach(t),vcr=r(QW,"to load the model weights."),QW.forEach(t),Tcr=i(Kl),c_e=n(Kl,"P",{});var mht=s(c_e);Fcr=r(mht,"Examples:"),mht.forEach(t),Ccr=i(Kl),m(B0.$$.fragment,Kl),Kl.forEach(t),Mcr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(x0.$$.fragment,Fa),Ecr=i(Fa),f_e=n(Fa,"P",{});var ght=s(f_e);ycr=r(ght,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ght.forEach(t),wcr=i(Fa),Cn=n(Fa,"P",{});var I5=s(Cn);Acr=r(I5,"The model class to instantiate is selected based on the "),m_e=n(I5,"CODE",{});var hht=s(m_e);Lcr=r(hht,"model_type"),hht.forEach(t),Bcr=r(I5,` property of the config object (either
passed as an argument or loaded from `),g_e=n(I5,"CODE",{});var pht=s(g_e);xcr=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),kcr=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(I5,"CODE",{});var _ht=s(h_e);Rcr=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),Scr=r(I5,":"),I5.forEach(t),Pcr=i(Fa),V=n(Fa,"UL",{});var W=s(V);pC=n(W,"LI",{});var p8e=s(pC);p_e=n(p8e,"STRONG",{});var uht=s(p_e);$cr=r(uht,"albert"),uht.forEach(t),Icr=r(p8e," \u2014 "),pG=n(p8e,"A",{href:!0});var bht=s(pG);jcr=r(bht,"TFAlbertForSequenceClassification"),bht.forEach(t),Ncr=r(p8e," (ALBERT model)"),p8e.forEach(t),Dcr=i(W),_C=n(W,"LI",{});var _8e=s(_C);__e=n(_8e,"STRONG",{});var vht=s(__e);qcr=r(vht,"bert"),vht.forEach(t),Ocr=r(_8e," \u2014 "),_G=n(_8e,"A",{href:!0});var Tht=s(_G);Gcr=r(Tht,"TFBertForSequenceClassification"),Tht.forEach(t),Xcr=r(_8e," (BERT model)"),_8e.forEach(t),Vcr=i(W),uC=n(W,"LI",{});var u8e=s(uC);u_e=n(u8e,"STRONG",{});var Fht=s(u_e);zcr=r(Fht,"camembert"),Fht.forEach(t),Wcr=r(u8e," \u2014 "),uG=n(u8e,"A",{href:!0});var Cht=s(uG);Qcr=r(Cht,"TFCamembertForSequenceClassification"),Cht.forEach(t),Hcr=r(u8e," (CamemBERT model)"),u8e.forEach(t),Ucr=i(W),bC=n(W,"LI",{});var b8e=s(bC);b_e=n(b8e,"STRONG",{});var Mht=s(b_e);Jcr=r(Mht,"convbert"),Mht.forEach(t),Ycr=r(b8e," \u2014 "),bG=n(b8e,"A",{href:!0});var Eht=s(bG);Kcr=r(Eht,"TFConvBertForSequenceClassification"),Eht.forEach(t),Zcr=r(b8e," (ConvBERT model)"),b8e.forEach(t),efr=i(W),vC=n(W,"LI",{});var v8e=s(vC);v_e=n(v8e,"STRONG",{});var yht=s(v_e);ofr=r(yht,"ctrl"),yht.forEach(t),rfr=r(v8e," \u2014 "),vG=n(v8e,"A",{href:!0});var wht=s(vG);tfr=r(wht,"TFCTRLForSequenceClassification"),wht.forEach(t),afr=r(v8e," (CTRL model)"),v8e.forEach(t),nfr=i(W),TC=n(W,"LI",{});var T8e=s(TC);T_e=n(T8e,"STRONG",{});var Aht=s(T_e);sfr=r(Aht,"deberta"),Aht.forEach(t),lfr=r(T8e," \u2014 "),TG=n(T8e,"A",{href:!0});var Lht=s(TG);ifr=r(Lht,"TFDebertaForSequenceClassification"),Lht.forEach(t),dfr=r(T8e," (DeBERTa model)"),T8e.forEach(t),cfr=i(W),FC=n(W,"LI",{});var F8e=s(FC);F_e=n(F8e,"STRONG",{});var Bht=s(F_e);ffr=r(Bht,"deberta-v2"),Bht.forEach(t),mfr=r(F8e," \u2014 "),FG=n(F8e,"A",{href:!0});var xht=s(FG);gfr=r(xht,"TFDebertaV2ForSequenceClassification"),xht.forEach(t),hfr=r(F8e," (DeBERTa-v2 model)"),F8e.forEach(t),pfr=i(W),CC=n(W,"LI",{});var C8e=s(CC);C_e=n(C8e,"STRONG",{});var kht=s(C_e);_fr=r(kht,"distilbert"),kht.forEach(t),ufr=r(C8e," \u2014 "),CG=n(C8e,"A",{href:!0});var Rht=s(CG);bfr=r(Rht,"TFDistilBertForSequenceClassification"),Rht.forEach(t),vfr=r(C8e," (DistilBERT model)"),C8e.forEach(t),Tfr=i(W),MC=n(W,"LI",{});var M8e=s(MC);M_e=n(M8e,"STRONG",{});var Sht=s(M_e);Ffr=r(Sht,"electra"),Sht.forEach(t),Cfr=r(M8e," \u2014 "),MG=n(M8e,"A",{href:!0});var Pht=s(MG);Mfr=r(Pht,"TFElectraForSequenceClassification"),Pht.forEach(t),Efr=r(M8e," (ELECTRA model)"),M8e.forEach(t),yfr=i(W),EC=n(W,"LI",{});var E8e=s(EC);E_e=n(E8e,"STRONG",{});var $ht=s(E_e);wfr=r($ht,"flaubert"),$ht.forEach(t),Afr=r(E8e," \u2014 "),EG=n(E8e,"A",{href:!0});var Iht=s(EG);Lfr=r(Iht,"TFFlaubertForSequenceClassification"),Iht.forEach(t),Bfr=r(E8e," (FlauBERT model)"),E8e.forEach(t),xfr=i(W),yC=n(W,"LI",{});var y8e=s(yC);y_e=n(y8e,"STRONG",{});var jht=s(y_e);kfr=r(jht,"funnel"),jht.forEach(t),Rfr=r(y8e," \u2014 "),yG=n(y8e,"A",{href:!0});var Nht=s(yG);Sfr=r(Nht,"TFFunnelForSequenceClassification"),Nht.forEach(t),Pfr=r(y8e," (Funnel Transformer model)"),y8e.forEach(t),$fr=i(W),wC=n(W,"LI",{});var w8e=s(wC);w_e=n(w8e,"STRONG",{});var Dht=s(w_e);Ifr=r(Dht,"gpt2"),Dht.forEach(t),jfr=r(w8e," \u2014 "),wG=n(w8e,"A",{href:!0});var qht=s(wG);Nfr=r(qht,"TFGPT2ForSequenceClassification"),qht.forEach(t),Dfr=r(w8e," (OpenAI GPT-2 model)"),w8e.forEach(t),qfr=i(W),AC=n(W,"LI",{});var A8e=s(AC);A_e=n(A8e,"STRONG",{});var Oht=s(A_e);Ofr=r(Oht,"layoutlm"),Oht.forEach(t),Gfr=r(A8e," \u2014 "),AG=n(A8e,"A",{href:!0});var Ght=s(AG);Xfr=r(Ght,"TFLayoutLMForSequenceClassification"),Ght.forEach(t),Vfr=r(A8e," (LayoutLM model)"),A8e.forEach(t),zfr=i(W),LC=n(W,"LI",{});var L8e=s(LC);L_e=n(L8e,"STRONG",{});var Xht=s(L_e);Wfr=r(Xht,"longformer"),Xht.forEach(t),Qfr=r(L8e," \u2014 "),LG=n(L8e,"A",{href:!0});var Vht=s(LG);Hfr=r(Vht,"TFLongformerForSequenceClassification"),Vht.forEach(t),Ufr=r(L8e," (Longformer model)"),L8e.forEach(t),Jfr=i(W),BC=n(W,"LI",{});var B8e=s(BC);B_e=n(B8e,"STRONG",{});var zht=s(B_e);Yfr=r(zht,"mobilebert"),zht.forEach(t),Kfr=r(B8e," \u2014 "),BG=n(B8e,"A",{href:!0});var Wht=s(BG);Zfr=r(Wht,"TFMobileBertForSequenceClassification"),Wht.forEach(t),emr=r(B8e," (MobileBERT model)"),B8e.forEach(t),omr=i(W),xC=n(W,"LI",{});var x8e=s(xC);x_e=n(x8e,"STRONG",{});var Qht=s(x_e);rmr=r(Qht,"mpnet"),Qht.forEach(t),tmr=r(x8e," \u2014 "),xG=n(x8e,"A",{href:!0});var Hht=s(xG);amr=r(Hht,"TFMPNetForSequenceClassification"),Hht.forEach(t),nmr=r(x8e," (MPNet model)"),x8e.forEach(t),smr=i(W),kC=n(W,"LI",{});var k8e=s(kC);k_e=n(k8e,"STRONG",{});var Uht=s(k_e);lmr=r(Uht,"openai-gpt"),Uht.forEach(t),imr=r(k8e," \u2014 "),kG=n(k8e,"A",{href:!0});var Jht=s(kG);dmr=r(Jht,"TFOpenAIGPTForSequenceClassification"),Jht.forEach(t),cmr=r(k8e," (OpenAI GPT model)"),k8e.forEach(t),fmr=i(W),RC=n(W,"LI",{});var R8e=s(RC);R_e=n(R8e,"STRONG",{});var Yht=s(R_e);mmr=r(Yht,"rembert"),Yht.forEach(t),gmr=r(R8e," \u2014 "),RG=n(R8e,"A",{href:!0});var Kht=s(RG);hmr=r(Kht,"TFRemBertForSequenceClassification"),Kht.forEach(t),pmr=r(R8e," (RemBERT model)"),R8e.forEach(t),_mr=i(W),SC=n(W,"LI",{});var S8e=s(SC);S_e=n(S8e,"STRONG",{});var Zht=s(S_e);umr=r(Zht,"roberta"),Zht.forEach(t),bmr=r(S8e," \u2014 "),SG=n(S8e,"A",{href:!0});var ept=s(SG);vmr=r(ept,"TFRobertaForSequenceClassification"),ept.forEach(t),Tmr=r(S8e," (RoBERTa model)"),S8e.forEach(t),Fmr=i(W),PC=n(W,"LI",{});var P8e=s(PC);P_e=n(P8e,"STRONG",{});var opt=s(P_e);Cmr=r(opt,"roformer"),opt.forEach(t),Mmr=r(P8e," \u2014 "),PG=n(P8e,"A",{href:!0});var rpt=s(PG);Emr=r(rpt,"TFRoFormerForSequenceClassification"),rpt.forEach(t),ymr=r(P8e," (RoFormer model)"),P8e.forEach(t),wmr=i(W),$C=n(W,"LI",{});var $8e=s($C);$_e=n($8e,"STRONG",{});var tpt=s($_e);Amr=r(tpt,"tapas"),tpt.forEach(t),Lmr=r($8e," \u2014 "),$G=n($8e,"A",{href:!0});var apt=s($G);Bmr=r(apt,"TFTapasForSequenceClassification"),apt.forEach(t),xmr=r($8e," (TAPAS model)"),$8e.forEach(t),kmr=i(W),IC=n(W,"LI",{});var I8e=s(IC);I_e=n(I8e,"STRONG",{});var npt=s(I_e);Rmr=r(npt,"transfo-xl"),npt.forEach(t),Smr=r(I8e," \u2014 "),IG=n(I8e,"A",{href:!0});var spt=s(IG);Pmr=r(spt,"TFTransfoXLForSequenceClassification"),spt.forEach(t),$mr=r(I8e," (Transformer-XL model)"),I8e.forEach(t),Imr=i(W),jC=n(W,"LI",{});var j8e=s(jC);j_e=n(j8e,"STRONG",{});var lpt=s(j_e);jmr=r(lpt,"xlm"),lpt.forEach(t),Nmr=r(j8e," \u2014 "),jG=n(j8e,"A",{href:!0});var ipt=s(jG);Dmr=r(ipt,"TFXLMForSequenceClassification"),ipt.forEach(t),qmr=r(j8e," (XLM model)"),j8e.forEach(t),Omr=i(W),NC=n(W,"LI",{});var N8e=s(NC);N_e=n(N8e,"STRONG",{});var dpt=s(N_e);Gmr=r(dpt,"xlm-roberta"),dpt.forEach(t),Xmr=r(N8e," \u2014 "),NG=n(N8e,"A",{href:!0});var cpt=s(NG);Vmr=r(cpt,"TFXLMRobertaForSequenceClassification"),cpt.forEach(t),zmr=r(N8e," (XLM-RoBERTa model)"),N8e.forEach(t),Wmr=i(W),DC=n(W,"LI",{});var D8e=s(DC);D_e=n(D8e,"STRONG",{});var fpt=s(D_e);Qmr=r(fpt,"xlnet"),fpt.forEach(t),Hmr=r(D8e," \u2014 "),DG=n(D8e,"A",{href:!0});var mpt=s(DG);Umr=r(mpt,"TFXLNetForSequenceClassification"),mpt.forEach(t),Jmr=r(D8e," (XLNet model)"),D8e.forEach(t),W.forEach(t),Ymr=i(Fa),q_e=n(Fa,"P",{});var gpt=s(q_e);Kmr=r(gpt,"Examples:"),gpt.forEach(t),Zmr=i(Fa),m(k0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),tRe=i(c),Pc=n(c,"H2",{class:!0});var pPe=s(Pc);qC=n(pPe,"A",{id:!0,class:!0,href:!0});var hpt=s(qC);O_e=n(hpt,"SPAN",{});var ppt=s(O_e);m(R0.$$.fragment,ppt),ppt.forEach(t),hpt.forEach(t),egr=i(pPe),G_e=n(pPe,"SPAN",{});var _pt=s(G_e);ogr=r(_pt,"TFAutoModelForMultipleChoice"),_pt.forEach(t),pPe.forEach(t),aRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(S0.$$.fragment,Zl),rgr=i(Zl),$c=n(Zl,"P",{});var HW=s($c);tgr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),X_e=n(HW,"CODE",{});var upt=s(X_e);agr=r(upt,"from_pretrained()"),upt.forEach(t),ngr=r(HW,"class method or the "),V_e=n(HW,"CODE",{});var bpt=s(V_e);sgr=r(bpt,"from_config()"),bpt.forEach(t),lgr=r(HW,`class
method.`),HW.forEach(t),igr=i(Zl),P0=n(Zl,"P",{});var _Pe=s(P0);dgr=r(_Pe,"This class cannot be instantiated directly using "),z_e=n(_Pe,"CODE",{});var vpt=s(z_e);cgr=r(vpt,"__init__()"),vpt.forEach(t),fgr=r(_Pe," (throws an error)."),_Pe.forEach(t),mgr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m($0.$$.fragment,ei),ggr=i(ei),W_e=n(ei,"P",{});var Tpt=s(W_e);hgr=r(Tpt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tpt.forEach(t),pgr=i(ei),Ic=n(ei,"P",{});var UW=s(Ic);_gr=r(UW,`Note:
Loading a model from its configuration file does `),Q_e=n(UW,"STRONG",{});var Fpt=s(Q_e);ugr=r(Fpt,"not"),Fpt.forEach(t),bgr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=n(UW,"CODE",{});var Cpt=s(H_e);vgr=r(Cpt,"from_pretrained()"),Cpt.forEach(t),Tgr=r(UW,"to load the model weights."),UW.forEach(t),Fgr=i(ei),U_e=n(ei,"P",{});var Mpt=s(U_e);Cgr=r(Mpt,"Examples:"),Mpt.forEach(t),Mgr=i(ei),m(I0.$$.fragment,ei),ei.forEach(t),Egr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(j0.$$.fragment,Ca),ygr=i(Ca),J_e=n(Ca,"P",{});var Ept=s(J_e);wgr=r(Ept,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ept.forEach(t),Agr=i(Ca),Mn=n(Ca,"P",{});var j5=s(Mn);Lgr=r(j5,"The model class to instantiate is selected based on the "),Y_e=n(j5,"CODE",{});var ypt=s(Y_e);Bgr=r(ypt,"model_type"),ypt.forEach(t),xgr=r(j5,` property of the config object (either
passed as an argument or loaded from `),K_e=n(j5,"CODE",{});var wpt=s(K_e);kgr=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),Rgr=r(j5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(j5,"CODE",{});var Apt=s(Z_e);Sgr=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),Pgr=r(j5,":"),j5.forEach(t),$gr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);OC=n(le,"LI",{});var q8e=s(OC);eue=n(q8e,"STRONG",{});var Lpt=s(eue);Igr=r(Lpt,"albert"),Lpt.forEach(t),jgr=r(q8e," \u2014 "),qG=n(q8e,"A",{href:!0});var Bpt=s(qG);Ngr=r(Bpt,"TFAlbertForMultipleChoice"),Bpt.forEach(t),Dgr=r(q8e," (ALBERT model)"),q8e.forEach(t),qgr=i(le),GC=n(le,"LI",{});var O8e=s(GC);oue=n(O8e,"STRONG",{});var xpt=s(oue);Ogr=r(xpt,"bert"),xpt.forEach(t),Ggr=r(O8e," \u2014 "),OG=n(O8e,"A",{href:!0});var kpt=s(OG);Xgr=r(kpt,"TFBertForMultipleChoice"),kpt.forEach(t),Vgr=r(O8e," (BERT model)"),O8e.forEach(t),zgr=i(le),XC=n(le,"LI",{});var G8e=s(XC);rue=n(G8e,"STRONG",{});var Rpt=s(rue);Wgr=r(Rpt,"camembert"),Rpt.forEach(t),Qgr=r(G8e," \u2014 "),GG=n(G8e,"A",{href:!0});var Spt=s(GG);Hgr=r(Spt,"TFCamembertForMultipleChoice"),Spt.forEach(t),Ugr=r(G8e," (CamemBERT model)"),G8e.forEach(t),Jgr=i(le),VC=n(le,"LI",{});var X8e=s(VC);tue=n(X8e,"STRONG",{});var Ppt=s(tue);Ygr=r(Ppt,"convbert"),Ppt.forEach(t),Kgr=r(X8e," \u2014 "),XG=n(X8e,"A",{href:!0});var $pt=s(XG);Zgr=r($pt,"TFConvBertForMultipleChoice"),$pt.forEach(t),ehr=r(X8e," (ConvBERT model)"),X8e.forEach(t),ohr=i(le),zC=n(le,"LI",{});var V8e=s(zC);aue=n(V8e,"STRONG",{});var Ipt=s(aue);rhr=r(Ipt,"distilbert"),Ipt.forEach(t),thr=r(V8e," \u2014 "),VG=n(V8e,"A",{href:!0});var jpt=s(VG);ahr=r(jpt,"TFDistilBertForMultipleChoice"),jpt.forEach(t),nhr=r(V8e," (DistilBERT model)"),V8e.forEach(t),shr=i(le),WC=n(le,"LI",{});var z8e=s(WC);nue=n(z8e,"STRONG",{});var Npt=s(nue);lhr=r(Npt,"electra"),Npt.forEach(t),ihr=r(z8e," \u2014 "),zG=n(z8e,"A",{href:!0});var Dpt=s(zG);dhr=r(Dpt,"TFElectraForMultipleChoice"),Dpt.forEach(t),chr=r(z8e," (ELECTRA model)"),z8e.forEach(t),fhr=i(le),QC=n(le,"LI",{});var W8e=s(QC);sue=n(W8e,"STRONG",{});var qpt=s(sue);mhr=r(qpt,"flaubert"),qpt.forEach(t),ghr=r(W8e," \u2014 "),WG=n(W8e,"A",{href:!0});var Opt=s(WG);hhr=r(Opt,"TFFlaubertForMultipleChoice"),Opt.forEach(t),phr=r(W8e," (FlauBERT model)"),W8e.forEach(t),_hr=i(le),HC=n(le,"LI",{});var Q8e=s(HC);lue=n(Q8e,"STRONG",{});var Gpt=s(lue);uhr=r(Gpt,"funnel"),Gpt.forEach(t),bhr=r(Q8e," \u2014 "),QG=n(Q8e,"A",{href:!0});var Xpt=s(QG);vhr=r(Xpt,"TFFunnelForMultipleChoice"),Xpt.forEach(t),Thr=r(Q8e," (Funnel Transformer model)"),Q8e.forEach(t),Fhr=i(le),UC=n(le,"LI",{});var H8e=s(UC);iue=n(H8e,"STRONG",{});var Vpt=s(iue);Chr=r(Vpt,"longformer"),Vpt.forEach(t),Mhr=r(H8e," \u2014 "),HG=n(H8e,"A",{href:!0});var zpt=s(HG);Ehr=r(zpt,"TFLongformerForMultipleChoice"),zpt.forEach(t),yhr=r(H8e," (Longformer model)"),H8e.forEach(t),whr=i(le),JC=n(le,"LI",{});var U8e=s(JC);due=n(U8e,"STRONG",{});var Wpt=s(due);Ahr=r(Wpt,"mobilebert"),Wpt.forEach(t),Lhr=r(U8e," \u2014 "),UG=n(U8e,"A",{href:!0});var Qpt=s(UG);Bhr=r(Qpt,"TFMobileBertForMultipleChoice"),Qpt.forEach(t),xhr=r(U8e," (MobileBERT model)"),U8e.forEach(t),khr=i(le),YC=n(le,"LI",{});var J8e=s(YC);cue=n(J8e,"STRONG",{});var Hpt=s(cue);Rhr=r(Hpt,"mpnet"),Hpt.forEach(t),Shr=r(J8e," \u2014 "),JG=n(J8e,"A",{href:!0});var Upt=s(JG);Phr=r(Upt,"TFMPNetForMultipleChoice"),Upt.forEach(t),$hr=r(J8e," (MPNet model)"),J8e.forEach(t),Ihr=i(le),KC=n(le,"LI",{});var Y8e=s(KC);fue=n(Y8e,"STRONG",{});var Jpt=s(fue);jhr=r(Jpt,"rembert"),Jpt.forEach(t),Nhr=r(Y8e," \u2014 "),YG=n(Y8e,"A",{href:!0});var Ypt=s(YG);Dhr=r(Ypt,"TFRemBertForMultipleChoice"),Ypt.forEach(t),qhr=r(Y8e," (RemBERT model)"),Y8e.forEach(t),Ohr=i(le),ZC=n(le,"LI",{});var K8e=s(ZC);mue=n(K8e,"STRONG",{});var Kpt=s(mue);Ghr=r(Kpt,"roberta"),Kpt.forEach(t),Xhr=r(K8e," \u2014 "),KG=n(K8e,"A",{href:!0});var Zpt=s(KG);Vhr=r(Zpt,"TFRobertaForMultipleChoice"),Zpt.forEach(t),zhr=r(K8e," (RoBERTa model)"),K8e.forEach(t),Whr=i(le),eM=n(le,"LI",{});var Z8e=s(eM);gue=n(Z8e,"STRONG",{});var e_t=s(gue);Qhr=r(e_t,"roformer"),e_t.forEach(t),Hhr=r(Z8e," \u2014 "),ZG=n(Z8e,"A",{href:!0});var o_t=s(ZG);Uhr=r(o_t,"TFRoFormerForMultipleChoice"),o_t.forEach(t),Jhr=r(Z8e," (RoFormer model)"),Z8e.forEach(t),Yhr=i(le),oM=n(le,"LI",{});var e9e=s(oM);hue=n(e9e,"STRONG",{});var r_t=s(hue);Khr=r(r_t,"xlm"),r_t.forEach(t),Zhr=r(e9e," \u2014 "),eX=n(e9e,"A",{href:!0});var t_t=s(eX);epr=r(t_t,"TFXLMForMultipleChoice"),t_t.forEach(t),opr=r(e9e," (XLM model)"),e9e.forEach(t),rpr=i(le),rM=n(le,"LI",{});var o9e=s(rM);pue=n(o9e,"STRONG",{});var a_t=s(pue);tpr=r(a_t,"xlm-roberta"),a_t.forEach(t),apr=r(o9e," \u2014 "),oX=n(o9e,"A",{href:!0});var n_t=s(oX);npr=r(n_t,"TFXLMRobertaForMultipleChoice"),n_t.forEach(t),spr=r(o9e," (XLM-RoBERTa model)"),o9e.forEach(t),lpr=i(le),tM=n(le,"LI",{});var r9e=s(tM);_ue=n(r9e,"STRONG",{});var s_t=s(_ue);ipr=r(s_t,"xlnet"),s_t.forEach(t),dpr=r(r9e," \u2014 "),rX=n(r9e,"A",{href:!0});var l_t=s(rX);cpr=r(l_t,"TFXLNetForMultipleChoice"),l_t.forEach(t),fpr=r(r9e," (XLNet model)"),r9e.forEach(t),le.forEach(t),mpr=i(Ca),uue=n(Ca,"P",{});var i_t=s(uue);gpr=r(i_t,"Examples:"),i_t.forEach(t),hpr=i(Ca),m(N0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),nRe=i(c),jc=n(c,"H2",{class:!0});var uPe=s(jc);aM=n(uPe,"A",{id:!0,class:!0,href:!0});var d_t=s(aM);bue=n(d_t,"SPAN",{});var c_t=s(bue);m(D0.$$.fragment,c_t),c_t.forEach(t),d_t.forEach(t),ppr=i(uPe),vue=n(uPe,"SPAN",{});var f_t=s(vue);_pr=r(f_t,"TFAutoModelForTableQuestionAnswering"),f_t.forEach(t),uPe.forEach(t),sRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(q0.$$.fragment,oi),upr=i(oi),Nc=n(oi,"P",{});var JW=s(Nc);bpr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tue=n(JW,"CODE",{});var m_t=s(Tue);vpr=r(m_t,"from_pretrained()"),m_t.forEach(t),Tpr=r(JW,"class method or the "),Fue=n(JW,"CODE",{});var g_t=s(Fue);Fpr=r(g_t,"from_config()"),g_t.forEach(t),Cpr=r(JW,`class
method.`),JW.forEach(t),Mpr=i(oi),O0=n(oi,"P",{});var bPe=s(O0);Epr=r(bPe,"This class cannot be instantiated directly using "),Cue=n(bPe,"CODE",{});var h_t=s(Cue);ypr=r(h_t,"__init__()"),h_t.forEach(t),wpr=r(bPe," (throws an error)."),bPe.forEach(t),Apr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(G0.$$.fragment,ri),Lpr=i(ri),Mue=n(ri,"P",{});var p_t=s(Mue);Bpr=r(p_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),p_t.forEach(t),xpr=i(ri),Dc=n(ri,"P",{});var YW=s(Dc);kpr=r(YW,`Note:
Loading a model from its configuration file does `),Eue=n(YW,"STRONG",{});var __t=s(Eue);Rpr=r(__t,"not"),__t.forEach(t),Spr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yue=n(YW,"CODE",{});var u_t=s(yue);Ppr=r(u_t,"from_pretrained()"),u_t.forEach(t),$pr=r(YW,"to load the model weights."),YW.forEach(t),Ipr=i(ri),wue=n(ri,"P",{});var b_t=s(wue);jpr=r(b_t,"Examples:"),b_t.forEach(t),Npr=i(ri),m(X0.$$.fragment,ri),ri.forEach(t),Dpr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(V0.$$.fragment,Ma),qpr=i(Ma),Aue=n(Ma,"P",{});var v_t=s(Aue);Opr=r(v_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v_t.forEach(t),Gpr=i(Ma),En=n(Ma,"P",{});var N5=s(En);Xpr=r(N5,"The model class to instantiate is selected based on the "),Lue=n(N5,"CODE",{});var T_t=s(Lue);Vpr=r(T_t,"model_type"),T_t.forEach(t),zpr=r(N5,` property of the config object (either
passed as an argument or loaded from `),Bue=n(N5,"CODE",{});var F_t=s(Bue);Wpr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),Qpr=r(N5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(N5,"CODE",{});var C_t=s(xue);Hpr=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),Upr=r(N5,":"),N5.forEach(t),Jpr=i(Ma),kue=n(Ma,"UL",{});var M_t=s(kue);nM=n(M_t,"LI",{});var t9e=s(nM);Rue=n(t9e,"STRONG",{});var E_t=s(Rue);Ypr=r(E_t,"tapas"),E_t.forEach(t),Kpr=r(t9e," \u2014 "),tX=n(t9e,"A",{href:!0});var y_t=s(tX);Zpr=r(y_t,"TFTapasForQuestionAnswering"),y_t.forEach(t),e_r=r(t9e," (TAPAS model)"),t9e.forEach(t),M_t.forEach(t),o_r=i(Ma),Sue=n(Ma,"P",{});var w_t=s(Sue);r_r=r(w_t,"Examples:"),w_t.forEach(t),t_r=i(Ma),m(z0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),lRe=i(c),qc=n(c,"H2",{class:!0});var vPe=s(qc);sM=n(vPe,"A",{id:!0,class:!0,href:!0});var A_t=s(sM);Pue=n(A_t,"SPAN",{});var L_t=s(Pue);m(W0.$$.fragment,L_t),L_t.forEach(t),A_t.forEach(t),a_r=i(vPe),$ue=n(vPe,"SPAN",{});var B_t=s($ue);n_r=r(B_t,"TFAutoModelForTokenClassification"),B_t.forEach(t),vPe.forEach(t),iRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(Q0.$$.fragment,ti),s_r=i(ti),Oc=n(ti,"P",{});var KW=s(Oc);l_r=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Iue=n(KW,"CODE",{});var x_t=s(Iue);i_r=r(x_t,"from_pretrained()"),x_t.forEach(t),d_r=r(KW,"class method or the "),jue=n(KW,"CODE",{});var k_t=s(jue);c_r=r(k_t,"from_config()"),k_t.forEach(t),f_r=r(KW,`class
method.`),KW.forEach(t),m_r=i(ti),H0=n(ti,"P",{});var TPe=s(H0);g_r=r(TPe,"This class cannot be instantiated directly using "),Nue=n(TPe,"CODE",{});var R_t=s(Nue);h_r=r(R_t,"__init__()"),R_t.forEach(t),p_r=r(TPe," (throws an error)."),TPe.forEach(t),__r=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(U0.$$.fragment,ai),u_r=i(ai),Due=n(ai,"P",{});var S_t=s(Due);b_r=r(S_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S_t.forEach(t),v_r=i(ai),Gc=n(ai,"P",{});var ZW=s(Gc);T_r=r(ZW,`Note:
Loading a model from its configuration file does `),que=n(ZW,"STRONG",{});var P_t=s(que);F_r=r(P_t,"not"),P_t.forEach(t),C_r=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oue=n(ZW,"CODE",{});var $_t=s(Oue);M_r=r($_t,"from_pretrained()"),$_t.forEach(t),E_r=r(ZW,"to load the model weights."),ZW.forEach(t),y_r=i(ai),Gue=n(ai,"P",{});var I_t=s(Gue);w_r=r(I_t,"Examples:"),I_t.forEach(t),A_r=i(ai),m(J0.$$.fragment,ai),ai.forEach(t),L_r=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(Y0.$$.fragment,Ea),B_r=i(Ea),Xue=n(Ea,"P",{});var j_t=s(Xue);x_r=r(j_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j_t.forEach(t),k_r=i(Ea),yn=n(Ea,"P",{});var D5=s(yn);R_r=r(D5,"The model class to instantiate is selected based on the "),Vue=n(D5,"CODE",{});var N_t=s(Vue);S_r=r(N_t,"model_type"),N_t.forEach(t),P_r=r(D5,` property of the config object (either
passed as an argument or loaded from `),zue=n(D5,"CODE",{});var D_t=s(zue);$_r=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),I_r=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(D5,"CODE",{});var q_t=s(Wue);j_r=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),N_r=r(D5,":"),D5.forEach(t),D_r=i(Ea),K=n(Ea,"UL",{});var oe=s(K);lM=n(oe,"LI",{});var a9e=s(lM);Que=n(a9e,"STRONG",{});var O_t=s(Que);q_r=r(O_t,"albert"),O_t.forEach(t),O_r=r(a9e," \u2014 "),aX=n(a9e,"A",{href:!0});var G_t=s(aX);G_r=r(G_t,"TFAlbertForTokenClassification"),G_t.forEach(t),X_r=r(a9e," (ALBERT model)"),a9e.forEach(t),V_r=i(oe),iM=n(oe,"LI",{});var n9e=s(iM);Hue=n(n9e,"STRONG",{});var X_t=s(Hue);z_r=r(X_t,"bert"),X_t.forEach(t),W_r=r(n9e," \u2014 "),nX=n(n9e,"A",{href:!0});var V_t=s(nX);Q_r=r(V_t,"TFBertForTokenClassification"),V_t.forEach(t),H_r=r(n9e," (BERT model)"),n9e.forEach(t),U_r=i(oe),dM=n(oe,"LI",{});var s9e=s(dM);Uue=n(s9e,"STRONG",{});var z_t=s(Uue);J_r=r(z_t,"camembert"),z_t.forEach(t),Y_r=r(s9e," \u2014 "),sX=n(s9e,"A",{href:!0});var W_t=s(sX);K_r=r(W_t,"TFCamembertForTokenClassification"),W_t.forEach(t),Z_r=r(s9e," (CamemBERT model)"),s9e.forEach(t),eur=i(oe),cM=n(oe,"LI",{});var l9e=s(cM);Jue=n(l9e,"STRONG",{});var Q_t=s(Jue);our=r(Q_t,"convbert"),Q_t.forEach(t),rur=r(l9e," \u2014 "),lX=n(l9e,"A",{href:!0});var H_t=s(lX);tur=r(H_t,"TFConvBertForTokenClassification"),H_t.forEach(t),aur=r(l9e," (ConvBERT model)"),l9e.forEach(t),nur=i(oe),fM=n(oe,"LI",{});var i9e=s(fM);Yue=n(i9e,"STRONG",{});var U_t=s(Yue);sur=r(U_t,"deberta"),U_t.forEach(t),lur=r(i9e," \u2014 "),iX=n(i9e,"A",{href:!0});var J_t=s(iX);iur=r(J_t,"TFDebertaForTokenClassification"),J_t.forEach(t),dur=r(i9e," (DeBERTa model)"),i9e.forEach(t),cur=i(oe),mM=n(oe,"LI",{});var d9e=s(mM);Kue=n(d9e,"STRONG",{});var Y_t=s(Kue);fur=r(Y_t,"deberta-v2"),Y_t.forEach(t),mur=r(d9e," \u2014 "),dX=n(d9e,"A",{href:!0});var K_t=s(dX);gur=r(K_t,"TFDebertaV2ForTokenClassification"),K_t.forEach(t),hur=r(d9e," (DeBERTa-v2 model)"),d9e.forEach(t),pur=i(oe),gM=n(oe,"LI",{});var c9e=s(gM);Zue=n(c9e,"STRONG",{});var Z_t=s(Zue);_ur=r(Z_t,"distilbert"),Z_t.forEach(t),uur=r(c9e," \u2014 "),cX=n(c9e,"A",{href:!0});var eut=s(cX);bur=r(eut,"TFDistilBertForTokenClassification"),eut.forEach(t),vur=r(c9e," (DistilBERT model)"),c9e.forEach(t),Tur=i(oe),hM=n(oe,"LI",{});var f9e=s(hM);ebe=n(f9e,"STRONG",{});var out=s(ebe);Fur=r(out,"electra"),out.forEach(t),Cur=r(f9e," \u2014 "),fX=n(f9e,"A",{href:!0});var rut=s(fX);Mur=r(rut,"TFElectraForTokenClassification"),rut.forEach(t),Eur=r(f9e," (ELECTRA model)"),f9e.forEach(t),yur=i(oe),pM=n(oe,"LI",{});var m9e=s(pM);obe=n(m9e,"STRONG",{});var tut=s(obe);wur=r(tut,"flaubert"),tut.forEach(t),Aur=r(m9e," \u2014 "),mX=n(m9e,"A",{href:!0});var aut=s(mX);Lur=r(aut,"TFFlaubertForTokenClassification"),aut.forEach(t),Bur=r(m9e," (FlauBERT model)"),m9e.forEach(t),xur=i(oe),_M=n(oe,"LI",{});var g9e=s(_M);rbe=n(g9e,"STRONG",{});var nut=s(rbe);kur=r(nut,"funnel"),nut.forEach(t),Rur=r(g9e," \u2014 "),gX=n(g9e,"A",{href:!0});var sut=s(gX);Sur=r(sut,"TFFunnelForTokenClassification"),sut.forEach(t),Pur=r(g9e," (Funnel Transformer model)"),g9e.forEach(t),$ur=i(oe),uM=n(oe,"LI",{});var h9e=s(uM);tbe=n(h9e,"STRONG",{});var lut=s(tbe);Iur=r(lut,"layoutlm"),lut.forEach(t),jur=r(h9e," \u2014 "),hX=n(h9e,"A",{href:!0});var iut=s(hX);Nur=r(iut,"TFLayoutLMForTokenClassification"),iut.forEach(t),Dur=r(h9e," (LayoutLM model)"),h9e.forEach(t),qur=i(oe),bM=n(oe,"LI",{});var p9e=s(bM);abe=n(p9e,"STRONG",{});var dut=s(abe);Our=r(dut,"longformer"),dut.forEach(t),Gur=r(p9e," \u2014 "),pX=n(p9e,"A",{href:!0});var cut=s(pX);Xur=r(cut,"TFLongformerForTokenClassification"),cut.forEach(t),Vur=r(p9e," (Longformer model)"),p9e.forEach(t),zur=i(oe),vM=n(oe,"LI",{});var _9e=s(vM);nbe=n(_9e,"STRONG",{});var fut=s(nbe);Wur=r(fut,"mobilebert"),fut.forEach(t),Qur=r(_9e," \u2014 "),_X=n(_9e,"A",{href:!0});var mut=s(_X);Hur=r(mut,"TFMobileBertForTokenClassification"),mut.forEach(t),Uur=r(_9e," (MobileBERT model)"),_9e.forEach(t),Jur=i(oe),TM=n(oe,"LI",{});var u9e=s(TM);sbe=n(u9e,"STRONG",{});var gut=s(sbe);Yur=r(gut,"mpnet"),gut.forEach(t),Kur=r(u9e," \u2014 "),uX=n(u9e,"A",{href:!0});var hut=s(uX);Zur=r(hut,"TFMPNetForTokenClassification"),hut.forEach(t),ebr=r(u9e," (MPNet model)"),u9e.forEach(t),obr=i(oe),FM=n(oe,"LI",{});var b9e=s(FM);lbe=n(b9e,"STRONG",{});var put=s(lbe);rbr=r(put,"rembert"),put.forEach(t),tbr=r(b9e," \u2014 "),bX=n(b9e,"A",{href:!0});var _ut=s(bX);abr=r(_ut,"TFRemBertForTokenClassification"),_ut.forEach(t),nbr=r(b9e," (RemBERT model)"),b9e.forEach(t),sbr=i(oe),CM=n(oe,"LI",{});var v9e=s(CM);ibe=n(v9e,"STRONG",{});var uut=s(ibe);lbr=r(uut,"roberta"),uut.forEach(t),ibr=r(v9e," \u2014 "),vX=n(v9e,"A",{href:!0});var but=s(vX);dbr=r(but,"TFRobertaForTokenClassification"),but.forEach(t),cbr=r(v9e," (RoBERTa model)"),v9e.forEach(t),fbr=i(oe),MM=n(oe,"LI",{});var T9e=s(MM);dbe=n(T9e,"STRONG",{});var vut=s(dbe);mbr=r(vut,"roformer"),vut.forEach(t),gbr=r(T9e," \u2014 "),TX=n(T9e,"A",{href:!0});var Tut=s(TX);hbr=r(Tut,"TFRoFormerForTokenClassification"),Tut.forEach(t),pbr=r(T9e," (RoFormer model)"),T9e.forEach(t),_br=i(oe),EM=n(oe,"LI",{});var F9e=s(EM);cbe=n(F9e,"STRONG",{});var Fut=s(cbe);ubr=r(Fut,"xlm"),Fut.forEach(t),bbr=r(F9e," \u2014 "),FX=n(F9e,"A",{href:!0});var Cut=s(FX);vbr=r(Cut,"TFXLMForTokenClassification"),Cut.forEach(t),Tbr=r(F9e," (XLM model)"),F9e.forEach(t),Fbr=i(oe),yM=n(oe,"LI",{});var C9e=s(yM);fbe=n(C9e,"STRONG",{});var Mut=s(fbe);Cbr=r(Mut,"xlm-roberta"),Mut.forEach(t),Mbr=r(C9e," \u2014 "),CX=n(C9e,"A",{href:!0});var Eut=s(CX);Ebr=r(Eut,"TFXLMRobertaForTokenClassification"),Eut.forEach(t),ybr=r(C9e," (XLM-RoBERTa model)"),C9e.forEach(t),wbr=i(oe),wM=n(oe,"LI",{});var M9e=s(wM);mbe=n(M9e,"STRONG",{});var yut=s(mbe);Abr=r(yut,"xlnet"),yut.forEach(t),Lbr=r(M9e," \u2014 "),MX=n(M9e,"A",{href:!0});var wut=s(MX);Bbr=r(wut,"TFXLNetForTokenClassification"),wut.forEach(t),xbr=r(M9e," (XLNet model)"),M9e.forEach(t),oe.forEach(t),kbr=i(Ea),gbe=n(Ea,"P",{});var Aut=s(gbe);Rbr=r(Aut,"Examples:"),Aut.forEach(t),Sbr=i(Ea),m(K0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),dRe=i(c),Xc=n(c,"H2",{class:!0});var FPe=s(Xc);AM=n(FPe,"A",{id:!0,class:!0,href:!0});var Lut=s(AM);hbe=n(Lut,"SPAN",{});var But=s(hbe);m(Z0.$$.fragment,But),But.forEach(t),Lut.forEach(t),Pbr=i(FPe),pbe=n(FPe,"SPAN",{});var xut=s(pbe);$br=r(xut,"TFAutoModelForQuestionAnswering"),xut.forEach(t),FPe.forEach(t),cRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(eL.$$.fragment,ni),Ibr=i(ni),Vc=n(ni,"P",{});var eQ=s(Vc);jbr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_be=n(eQ,"CODE",{});var kut=s(_be);Nbr=r(kut,"from_pretrained()"),kut.forEach(t),Dbr=r(eQ,"class method or the "),ube=n(eQ,"CODE",{});var Rut=s(ube);qbr=r(Rut,"from_config()"),Rut.forEach(t),Obr=r(eQ,`class
method.`),eQ.forEach(t),Gbr=i(ni),oL=n(ni,"P",{});var CPe=s(oL);Xbr=r(CPe,"This class cannot be instantiated directly using "),bbe=n(CPe,"CODE",{});var Sut=s(bbe);Vbr=r(Sut,"__init__()"),Sut.forEach(t),zbr=r(CPe," (throws an error)."),CPe.forEach(t),Wbr=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(rL.$$.fragment,si),Qbr=i(si),vbe=n(si,"P",{});var Put=s(vbe);Hbr=r(Put,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Put.forEach(t),Ubr=i(si),zc=n(si,"P",{});var oQ=s(zc);Jbr=r(oQ,`Note:
Loading a model from its configuration file does `),Tbe=n(oQ,"STRONG",{});var $ut=s(Tbe);Ybr=r($ut,"not"),$ut.forEach(t),Kbr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fbe=n(oQ,"CODE",{});var Iut=s(Fbe);Zbr=r(Iut,"from_pretrained()"),Iut.forEach(t),e3r=r(oQ,"to load the model weights."),oQ.forEach(t),o3r=i(si),Cbe=n(si,"P",{});var jut=s(Cbe);r3r=r(jut,"Examples:"),jut.forEach(t),t3r=i(si),m(tL.$$.fragment,si),si.forEach(t),a3r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(aL.$$.fragment,ya),n3r=i(ya),Mbe=n(ya,"P",{});var Nut=s(Mbe);s3r=r(Nut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nut.forEach(t),l3r=i(ya),wn=n(ya,"P",{});var q5=s(wn);i3r=r(q5,"The model class to instantiate is selected based on the "),Ebe=n(q5,"CODE",{});var Dut=s(Ebe);d3r=r(Dut,"model_type"),Dut.forEach(t),c3r=r(q5,` property of the config object (either
passed as an argument or loaded from `),ybe=n(q5,"CODE",{});var qut=s(ybe);f3r=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),m3r=r(q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(q5,"CODE",{});var Out=s(wbe);g3r=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),h3r=r(q5,":"),q5.forEach(t),p3r=i(ya),Z=n(ya,"UL",{});var te=s(Z);LM=n(te,"LI",{});var E9e=s(LM);Abe=n(E9e,"STRONG",{});var Gut=s(Abe);_3r=r(Gut,"albert"),Gut.forEach(t),u3r=r(E9e," \u2014 "),EX=n(E9e,"A",{href:!0});var Xut=s(EX);b3r=r(Xut,"TFAlbertForQuestionAnswering"),Xut.forEach(t),v3r=r(E9e," (ALBERT model)"),E9e.forEach(t),T3r=i(te),BM=n(te,"LI",{});var y9e=s(BM);Lbe=n(y9e,"STRONG",{});var Vut=s(Lbe);F3r=r(Vut,"bert"),Vut.forEach(t),C3r=r(y9e," \u2014 "),yX=n(y9e,"A",{href:!0});var zut=s(yX);M3r=r(zut,"TFBertForQuestionAnswering"),zut.forEach(t),E3r=r(y9e," (BERT model)"),y9e.forEach(t),y3r=i(te),xM=n(te,"LI",{});var w9e=s(xM);Bbe=n(w9e,"STRONG",{});var Wut=s(Bbe);w3r=r(Wut,"camembert"),Wut.forEach(t),A3r=r(w9e," \u2014 "),wX=n(w9e,"A",{href:!0});var Qut=s(wX);L3r=r(Qut,"TFCamembertForQuestionAnswering"),Qut.forEach(t),B3r=r(w9e," (CamemBERT model)"),w9e.forEach(t),x3r=i(te),kM=n(te,"LI",{});var A9e=s(kM);xbe=n(A9e,"STRONG",{});var Hut=s(xbe);k3r=r(Hut,"convbert"),Hut.forEach(t),R3r=r(A9e," \u2014 "),AX=n(A9e,"A",{href:!0});var Uut=s(AX);S3r=r(Uut,"TFConvBertForQuestionAnswering"),Uut.forEach(t),P3r=r(A9e," (ConvBERT model)"),A9e.forEach(t),$3r=i(te),RM=n(te,"LI",{});var L9e=s(RM);kbe=n(L9e,"STRONG",{});var Jut=s(kbe);I3r=r(Jut,"deberta"),Jut.forEach(t),j3r=r(L9e," \u2014 "),LX=n(L9e,"A",{href:!0});var Yut=s(LX);N3r=r(Yut,"TFDebertaForQuestionAnswering"),Yut.forEach(t),D3r=r(L9e," (DeBERTa model)"),L9e.forEach(t),q3r=i(te),SM=n(te,"LI",{});var B9e=s(SM);Rbe=n(B9e,"STRONG",{});var Kut=s(Rbe);O3r=r(Kut,"deberta-v2"),Kut.forEach(t),G3r=r(B9e," \u2014 "),BX=n(B9e,"A",{href:!0});var Zut=s(BX);X3r=r(Zut,"TFDebertaV2ForQuestionAnswering"),Zut.forEach(t),V3r=r(B9e," (DeBERTa-v2 model)"),B9e.forEach(t),z3r=i(te),PM=n(te,"LI",{});var x9e=s(PM);Sbe=n(x9e,"STRONG",{});var ebt=s(Sbe);W3r=r(ebt,"distilbert"),ebt.forEach(t),Q3r=r(x9e," \u2014 "),xX=n(x9e,"A",{href:!0});var obt=s(xX);H3r=r(obt,"TFDistilBertForQuestionAnswering"),obt.forEach(t),U3r=r(x9e," (DistilBERT model)"),x9e.forEach(t),J3r=i(te),$M=n(te,"LI",{});var k9e=s($M);Pbe=n(k9e,"STRONG",{});var rbt=s(Pbe);Y3r=r(rbt,"electra"),rbt.forEach(t),K3r=r(k9e," \u2014 "),kX=n(k9e,"A",{href:!0});var tbt=s(kX);Z3r=r(tbt,"TFElectraForQuestionAnswering"),tbt.forEach(t),e2r=r(k9e," (ELECTRA model)"),k9e.forEach(t),o2r=i(te),IM=n(te,"LI",{});var R9e=s(IM);$be=n(R9e,"STRONG",{});var abt=s($be);r2r=r(abt,"flaubert"),abt.forEach(t),t2r=r(R9e," \u2014 "),RX=n(R9e,"A",{href:!0});var nbt=s(RX);a2r=r(nbt,"TFFlaubertForQuestionAnsweringSimple"),nbt.forEach(t),n2r=r(R9e," (FlauBERT model)"),R9e.forEach(t),s2r=i(te),jM=n(te,"LI",{});var S9e=s(jM);Ibe=n(S9e,"STRONG",{});var sbt=s(Ibe);l2r=r(sbt,"funnel"),sbt.forEach(t),i2r=r(S9e," \u2014 "),SX=n(S9e,"A",{href:!0});var lbt=s(SX);d2r=r(lbt,"TFFunnelForQuestionAnswering"),lbt.forEach(t),c2r=r(S9e," (Funnel Transformer model)"),S9e.forEach(t),f2r=i(te),NM=n(te,"LI",{});var P9e=s(NM);jbe=n(P9e,"STRONG",{});var ibt=s(jbe);m2r=r(ibt,"longformer"),ibt.forEach(t),g2r=r(P9e," \u2014 "),PX=n(P9e,"A",{href:!0});var dbt=s(PX);h2r=r(dbt,"TFLongformerForQuestionAnswering"),dbt.forEach(t),p2r=r(P9e," (Longformer model)"),P9e.forEach(t),_2r=i(te),DM=n(te,"LI",{});var $9e=s(DM);Nbe=n($9e,"STRONG",{});var cbt=s(Nbe);u2r=r(cbt,"mobilebert"),cbt.forEach(t),b2r=r($9e," \u2014 "),$X=n($9e,"A",{href:!0});var fbt=s($X);v2r=r(fbt,"TFMobileBertForQuestionAnswering"),fbt.forEach(t),T2r=r($9e," (MobileBERT model)"),$9e.forEach(t),F2r=i(te),qM=n(te,"LI",{});var I9e=s(qM);Dbe=n(I9e,"STRONG",{});var mbt=s(Dbe);C2r=r(mbt,"mpnet"),mbt.forEach(t),M2r=r(I9e," \u2014 "),IX=n(I9e,"A",{href:!0});var gbt=s(IX);E2r=r(gbt,"TFMPNetForQuestionAnswering"),gbt.forEach(t),y2r=r(I9e," (MPNet model)"),I9e.forEach(t),w2r=i(te),OM=n(te,"LI",{});var j9e=s(OM);qbe=n(j9e,"STRONG",{});var hbt=s(qbe);A2r=r(hbt,"rembert"),hbt.forEach(t),L2r=r(j9e," \u2014 "),jX=n(j9e,"A",{href:!0});var pbt=s(jX);B2r=r(pbt,"TFRemBertForQuestionAnswering"),pbt.forEach(t),x2r=r(j9e," (RemBERT model)"),j9e.forEach(t),k2r=i(te),GM=n(te,"LI",{});var N9e=s(GM);Obe=n(N9e,"STRONG",{});var _bt=s(Obe);R2r=r(_bt,"roberta"),_bt.forEach(t),S2r=r(N9e," \u2014 "),NX=n(N9e,"A",{href:!0});var ubt=s(NX);P2r=r(ubt,"TFRobertaForQuestionAnswering"),ubt.forEach(t),$2r=r(N9e," (RoBERTa model)"),N9e.forEach(t),I2r=i(te),XM=n(te,"LI",{});var D9e=s(XM);Gbe=n(D9e,"STRONG",{});var bbt=s(Gbe);j2r=r(bbt,"roformer"),bbt.forEach(t),N2r=r(D9e," \u2014 "),DX=n(D9e,"A",{href:!0});var vbt=s(DX);D2r=r(vbt,"TFRoFormerForQuestionAnswering"),vbt.forEach(t),q2r=r(D9e," (RoFormer model)"),D9e.forEach(t),O2r=i(te),VM=n(te,"LI",{});var q9e=s(VM);Xbe=n(q9e,"STRONG",{});var Tbt=s(Xbe);G2r=r(Tbt,"xlm"),Tbt.forEach(t),X2r=r(q9e," \u2014 "),qX=n(q9e,"A",{href:!0});var Fbt=s(qX);V2r=r(Fbt,"TFXLMForQuestionAnsweringSimple"),Fbt.forEach(t),z2r=r(q9e," (XLM model)"),q9e.forEach(t),W2r=i(te),zM=n(te,"LI",{});var O9e=s(zM);Vbe=n(O9e,"STRONG",{});var Cbt=s(Vbe);Q2r=r(Cbt,"xlm-roberta"),Cbt.forEach(t),H2r=r(O9e," \u2014 "),OX=n(O9e,"A",{href:!0});var Mbt=s(OX);U2r=r(Mbt,"TFXLMRobertaForQuestionAnswering"),Mbt.forEach(t),J2r=r(O9e," (XLM-RoBERTa model)"),O9e.forEach(t),Y2r=i(te),WM=n(te,"LI",{});var G9e=s(WM);zbe=n(G9e,"STRONG",{});var Ebt=s(zbe);K2r=r(Ebt,"xlnet"),Ebt.forEach(t),Z2r=r(G9e," \u2014 "),GX=n(G9e,"A",{href:!0});var ybt=s(GX);evr=r(ybt,"TFXLNetForQuestionAnsweringSimple"),ybt.forEach(t),ovr=r(G9e," (XLNet model)"),G9e.forEach(t),te.forEach(t),rvr=i(ya),Wbe=n(ya,"P",{});var wbt=s(Wbe);tvr=r(wbt,"Examples:"),wbt.forEach(t),avr=i(ya),m(nL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),fRe=i(c),Wc=n(c,"H2",{class:!0});var MPe=s(Wc);QM=n(MPe,"A",{id:!0,class:!0,href:!0});var Abt=s(QM);Qbe=n(Abt,"SPAN",{});var Lbt=s(Qbe);m(sL.$$.fragment,Lbt),Lbt.forEach(t),Abt.forEach(t),nvr=i(MPe),Hbe=n(MPe,"SPAN",{});var Bbt=s(Hbe);svr=r(Bbt,"TFAutoModelForVision2Seq"),Bbt.forEach(t),MPe.forEach(t),mRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(lL.$$.fragment,li),lvr=i(li),Qc=n(li,"P",{});var rQ=s(Qc);ivr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ube=n(rQ,"CODE",{});var xbt=s(Ube);dvr=r(xbt,"from_pretrained()"),xbt.forEach(t),cvr=r(rQ,"class method or the "),Jbe=n(rQ,"CODE",{});var kbt=s(Jbe);fvr=r(kbt,"from_config()"),kbt.forEach(t),mvr=r(rQ,`class
method.`),rQ.forEach(t),gvr=i(li),iL=n(li,"P",{});var EPe=s(iL);hvr=r(EPe,"This class cannot be instantiated directly using "),Ybe=n(EPe,"CODE",{});var Rbt=s(Ybe);pvr=r(Rbt,"__init__()"),Rbt.forEach(t),_vr=r(EPe," (throws an error)."),EPe.forEach(t),uvr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(dL.$$.fragment,ii),bvr=i(ii),Kbe=n(ii,"P",{});var Sbt=s(Kbe);vvr=r(Sbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Sbt.forEach(t),Tvr=i(ii),Hc=n(ii,"P",{});var tQ=s(Hc);Fvr=r(tQ,`Note:
Loading a model from its configuration file does `),Zbe=n(tQ,"STRONG",{});var Pbt=s(Zbe);Cvr=r(Pbt,"not"),Pbt.forEach(t),Mvr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),e3e=n(tQ,"CODE",{});var $bt=s(e3e);Evr=r($bt,"from_pretrained()"),$bt.forEach(t),yvr=r(tQ,"to load the model weights."),tQ.forEach(t),wvr=i(ii),o3e=n(ii,"P",{});var Ibt=s(o3e);Avr=r(Ibt,"Examples:"),Ibt.forEach(t),Lvr=i(ii),m(cL.$$.fragment,ii),ii.forEach(t),Bvr=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(fL.$$.fragment,wa),xvr=i(wa),r3e=n(wa,"P",{});var jbt=s(r3e);kvr=r(jbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jbt.forEach(t),Rvr=i(wa),An=n(wa,"P",{});var O5=s(An);Svr=r(O5,"The model class to instantiate is selected based on the "),t3e=n(O5,"CODE",{});var Nbt=s(t3e);Pvr=r(Nbt,"model_type"),Nbt.forEach(t),$vr=r(O5,` property of the config object (either
passed as an argument or loaded from `),a3e=n(O5,"CODE",{});var Dbt=s(a3e);Ivr=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),jvr=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(O5,"CODE",{});var qbt=s(n3e);Nvr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),Dvr=r(O5,":"),O5.forEach(t),qvr=i(wa),s3e=n(wa,"UL",{});var Obt=s(s3e);HM=n(Obt,"LI",{});var X9e=s(HM);l3e=n(X9e,"STRONG",{});var Gbt=s(l3e);Ovr=r(Gbt,"vision-encoder-decoder"),Gbt.forEach(t),Gvr=r(X9e," \u2014 "),XX=n(X9e,"A",{href:!0});var Xbt=s(XX);Xvr=r(Xbt,"TFVisionEncoderDecoderModel"),Xbt.forEach(t),Vvr=r(X9e," (Vision Encoder decoder model)"),X9e.forEach(t),Obt.forEach(t),zvr=i(wa),i3e=n(wa,"P",{});var Vbt=s(i3e);Wvr=r(Vbt,"Examples:"),Vbt.forEach(t),Qvr=i(wa),m(mL.$$.fragment,wa),wa.forEach(t),li.forEach(t),gRe=i(c),Uc=n(c,"H2",{class:!0});var yPe=s(Uc);UM=n(yPe,"A",{id:!0,class:!0,href:!0});var zbt=s(UM);d3e=n(zbt,"SPAN",{});var Wbt=s(d3e);m(gL.$$.fragment,Wbt),Wbt.forEach(t),zbt.forEach(t),Hvr=i(yPe),c3e=n(yPe,"SPAN",{});var Qbt=s(c3e);Uvr=r(Qbt,"TFAutoModelForSpeechSeq2Seq"),Qbt.forEach(t),yPe.forEach(t),hRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(hL.$$.fragment,di),Jvr=i(di),Jc=n(di,"P",{});var aQ=s(Jc);Yvr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),f3e=n(aQ,"CODE",{});var Hbt=s(f3e);Kvr=r(Hbt,"from_pretrained()"),Hbt.forEach(t),Zvr=r(aQ,"class method or the "),m3e=n(aQ,"CODE",{});var Ubt=s(m3e);eTr=r(Ubt,"from_config()"),Ubt.forEach(t),oTr=r(aQ,`class
method.`),aQ.forEach(t),rTr=i(di),pL=n(di,"P",{});var wPe=s(pL);tTr=r(wPe,"This class cannot be instantiated directly using "),g3e=n(wPe,"CODE",{});var Jbt=s(g3e);aTr=r(Jbt,"__init__()"),Jbt.forEach(t),nTr=r(wPe," (throws an error)."),wPe.forEach(t),sTr=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(_L.$$.fragment,ci),lTr=i(ci),h3e=n(ci,"P",{});var Ybt=s(h3e);iTr=r(Ybt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ybt.forEach(t),dTr=i(ci),Yc=n(ci,"P",{});var nQ=s(Yc);cTr=r(nQ,`Note:
Loading a model from its configuration file does `),p3e=n(nQ,"STRONG",{});var Kbt=s(p3e);fTr=r(Kbt,"not"),Kbt.forEach(t),mTr=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_3e=n(nQ,"CODE",{});var Zbt=s(_3e);gTr=r(Zbt,"from_pretrained()"),Zbt.forEach(t),hTr=r(nQ,"to load the model weights."),nQ.forEach(t),pTr=i(ci),u3e=n(ci,"P",{});var e3t=s(u3e);_Tr=r(e3t,"Examples:"),e3t.forEach(t),uTr=i(ci),m(uL.$$.fragment,ci),ci.forEach(t),bTr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(bL.$$.fragment,Aa),vTr=i(Aa),b3e=n(Aa,"P",{});var o3t=s(b3e);TTr=r(o3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),o3t.forEach(t),FTr=i(Aa),Ln=n(Aa,"P",{});var G5=s(Ln);CTr=r(G5,"The model class to instantiate is selected based on the "),v3e=n(G5,"CODE",{});var r3t=s(v3e);MTr=r(r3t,"model_type"),r3t.forEach(t),ETr=r(G5,` property of the config object (either
passed as an argument or loaded from `),T3e=n(G5,"CODE",{});var t3t=s(T3e);yTr=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),wTr=r(G5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(G5,"CODE",{});var a3t=s(F3e);ATr=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),LTr=r(G5,":"),G5.forEach(t),BTr=i(Aa),C3e=n(Aa,"UL",{});var n3t=s(C3e);JM=n(n3t,"LI",{});var V9e=s(JM);M3e=n(V9e,"STRONG",{});var s3t=s(M3e);xTr=r(s3t,"speech_to_text"),s3t.forEach(t),kTr=r(V9e," \u2014 "),VX=n(V9e,"A",{href:!0});var l3t=s(VX);RTr=r(l3t,"TFSpeech2TextForConditionalGeneration"),l3t.forEach(t),STr=r(V9e," (Speech2Text model)"),V9e.forEach(t),n3t.forEach(t),PTr=i(Aa),E3e=n(Aa,"P",{});var i3t=s(E3e);$Tr=r(i3t,"Examples:"),i3t.forEach(t),ITr=i(Aa),m(vL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),pRe=i(c),Kc=n(c,"H2",{class:!0});var APe=s(Kc);YM=n(APe,"A",{id:!0,class:!0,href:!0});var d3t=s(YM);y3e=n(d3t,"SPAN",{});var c3t=s(y3e);m(TL.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),jTr=i(APe),w3e=n(APe,"SPAN",{});var f3t=s(w3e);NTr=r(f3t,"FlaxAutoModel"),f3t.forEach(t),APe.forEach(t),_Re=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(FL.$$.fragment,fi),DTr=i(fi),Zc=n(fi,"P",{});var sQ=s(Zc);qTr=r(sQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),A3e=n(sQ,"CODE",{});var m3t=s(A3e);OTr=r(m3t,"from_pretrained()"),m3t.forEach(t),GTr=r(sQ,"class method or the "),L3e=n(sQ,"CODE",{});var g3t=s(L3e);XTr=r(g3t,"from_config()"),g3t.forEach(t),VTr=r(sQ,`class
method.`),sQ.forEach(t),zTr=i(fi),CL=n(fi,"P",{});var LPe=s(CL);WTr=r(LPe,"This class cannot be instantiated directly using "),B3e=n(LPe,"CODE",{});var h3t=s(B3e);QTr=r(h3t,"__init__()"),h3t.forEach(t),HTr=r(LPe," (throws an error)."),LPe.forEach(t),UTr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(ML.$$.fragment,mi),JTr=i(mi),x3e=n(mi,"P",{});var p3t=s(x3e);YTr=r(p3t,"Instantiates one of the base model classes of the library from a configuration."),p3t.forEach(t),KTr=i(mi),ef=n(mi,"P",{});var lQ=s(ef);ZTr=r(lQ,`Note:
Loading a model from its configuration file does `),k3e=n(lQ,"STRONG",{});var _3t=s(k3e);e1r=r(_3t,"not"),_3t.forEach(t),o1r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),R3e=n(lQ,"CODE",{});var u3t=s(R3e);r1r=r(u3t,"from_pretrained()"),u3t.forEach(t),t1r=r(lQ,"to load the model weights."),lQ.forEach(t),a1r=i(mi),S3e=n(mi,"P",{});var b3t=s(S3e);n1r=r(b3t,"Examples:"),b3t.forEach(t),s1r=i(mi),m(EL.$$.fragment,mi),mi.forEach(t),l1r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(yL.$$.fragment,La),i1r=i(La),P3e=n(La,"P",{});var v3t=s(P3e);d1r=r(v3t,"Instantiate one of the base model classes of the library from a pretrained model."),v3t.forEach(t),c1r=i(La),Bn=n(La,"P",{});var X5=s(Bn);f1r=r(X5,"The model class to instantiate is selected based on the "),$3e=n(X5,"CODE",{});var T3t=s($3e);m1r=r(T3t,"model_type"),T3t.forEach(t),g1r=r(X5,` property of the config object (either
passed as an argument or loaded from `),I3e=n(X5,"CODE",{});var F3t=s(I3e);h1r=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),p1r=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(X5,"CODE",{});var C3t=s(j3e);_1r=r(C3t,"pretrained_model_name_or_path"),C3t.forEach(t),u1r=r(X5,":"),X5.forEach(t),b1r=i(La),z=n(La,"UL",{});var Q=s(z);KM=n(Q,"LI",{});var z9e=s(KM);N3e=n(z9e,"STRONG",{});var M3t=s(N3e);v1r=r(M3t,"albert"),M3t.forEach(t),T1r=r(z9e," \u2014 "),zX=n(z9e,"A",{href:!0});var E3t=s(zX);F1r=r(E3t,"FlaxAlbertModel"),E3t.forEach(t),C1r=r(z9e," (ALBERT model)"),z9e.forEach(t),M1r=i(Q),ZM=n(Q,"LI",{});var W9e=s(ZM);D3e=n(W9e,"STRONG",{});var y3t=s(D3e);E1r=r(y3t,"bart"),y3t.forEach(t),y1r=r(W9e," \u2014 "),WX=n(W9e,"A",{href:!0});var w3t=s(WX);w1r=r(w3t,"FlaxBartModel"),w3t.forEach(t),A1r=r(W9e," (BART model)"),W9e.forEach(t),L1r=i(Q),e4=n(Q,"LI",{});var Q9e=s(e4);q3e=n(Q9e,"STRONG",{});var A3t=s(q3e);B1r=r(A3t,"beit"),A3t.forEach(t),x1r=r(Q9e," \u2014 "),QX=n(Q9e,"A",{href:!0});var L3t=s(QX);k1r=r(L3t,"FlaxBeitModel"),L3t.forEach(t),R1r=r(Q9e," (BEiT model)"),Q9e.forEach(t),S1r=i(Q),o4=n(Q,"LI",{});var H9e=s(o4);O3e=n(H9e,"STRONG",{});var B3t=s(O3e);P1r=r(B3t,"bert"),B3t.forEach(t),$1r=r(H9e," \u2014 "),HX=n(H9e,"A",{href:!0});var x3t=s(HX);I1r=r(x3t,"FlaxBertModel"),x3t.forEach(t),j1r=r(H9e," (BERT model)"),H9e.forEach(t),N1r=i(Q),r4=n(Q,"LI",{});var U9e=s(r4);G3e=n(U9e,"STRONG",{});var k3t=s(G3e);D1r=r(k3t,"big_bird"),k3t.forEach(t),q1r=r(U9e," \u2014 "),UX=n(U9e,"A",{href:!0});var R3t=s(UX);O1r=r(R3t,"FlaxBigBirdModel"),R3t.forEach(t),G1r=r(U9e," (BigBird model)"),U9e.forEach(t),X1r=i(Q),t4=n(Q,"LI",{});var J9e=s(t4);X3e=n(J9e,"STRONG",{});var S3t=s(X3e);V1r=r(S3t,"blenderbot"),S3t.forEach(t),z1r=r(J9e," \u2014 "),JX=n(J9e,"A",{href:!0});var P3t=s(JX);W1r=r(P3t,"FlaxBlenderbotModel"),P3t.forEach(t),Q1r=r(J9e," (Blenderbot model)"),J9e.forEach(t),H1r=i(Q),a4=n(Q,"LI",{});var Y9e=s(a4);V3e=n(Y9e,"STRONG",{});var $3t=s(V3e);U1r=r($3t,"blenderbot-small"),$3t.forEach(t),J1r=r(Y9e," \u2014 "),YX=n(Y9e,"A",{href:!0});var I3t=s(YX);Y1r=r(I3t,"FlaxBlenderbotSmallModel"),I3t.forEach(t),K1r=r(Y9e," (BlenderbotSmall model)"),Y9e.forEach(t),Z1r=i(Q),n4=n(Q,"LI",{});var K9e=s(n4);z3e=n(K9e,"STRONG",{});var j3t=s(z3e);eFr=r(j3t,"clip"),j3t.forEach(t),oFr=r(K9e," \u2014 "),KX=n(K9e,"A",{href:!0});var N3t=s(KX);rFr=r(N3t,"FlaxCLIPModel"),N3t.forEach(t),tFr=r(K9e," (CLIP model)"),K9e.forEach(t),aFr=i(Q),s4=n(Q,"LI",{});var Z9e=s(s4);W3e=n(Z9e,"STRONG",{});var D3t=s(W3e);nFr=r(D3t,"distilbert"),D3t.forEach(t),sFr=r(Z9e," \u2014 "),ZX=n(Z9e,"A",{href:!0});var q3t=s(ZX);lFr=r(q3t,"FlaxDistilBertModel"),q3t.forEach(t),iFr=r(Z9e," (DistilBERT model)"),Z9e.forEach(t),dFr=i(Q),l4=n(Q,"LI",{});var eBe=s(l4);Q3e=n(eBe,"STRONG",{});var O3t=s(Q3e);cFr=r(O3t,"electra"),O3t.forEach(t),fFr=r(eBe," \u2014 "),eV=n(eBe,"A",{href:!0});var G3t=s(eV);mFr=r(G3t,"FlaxElectraModel"),G3t.forEach(t),gFr=r(eBe," (ELECTRA model)"),eBe.forEach(t),hFr=i(Q),i4=n(Q,"LI",{});var oBe=s(i4);H3e=n(oBe,"STRONG",{});var X3t=s(H3e);pFr=r(X3t,"gpt2"),X3t.forEach(t),_Fr=r(oBe," \u2014 "),oV=n(oBe,"A",{href:!0});var V3t=s(oV);uFr=r(V3t,"FlaxGPT2Model"),V3t.forEach(t),bFr=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),vFr=i(Q),d4=n(Q,"LI",{});var rBe=s(d4);U3e=n(rBe,"STRONG",{});var z3t=s(U3e);TFr=r(z3t,"gpt_neo"),z3t.forEach(t),FFr=r(rBe," \u2014 "),rV=n(rBe,"A",{href:!0});var W3t=s(rV);CFr=r(W3t,"FlaxGPTNeoModel"),W3t.forEach(t),MFr=r(rBe," (GPT Neo model)"),rBe.forEach(t),EFr=i(Q),c4=n(Q,"LI",{});var tBe=s(c4);J3e=n(tBe,"STRONG",{});var Q3t=s(J3e);yFr=r(Q3t,"gptj"),Q3t.forEach(t),wFr=r(tBe," \u2014 "),tV=n(tBe,"A",{href:!0});var H3t=s(tV);AFr=r(H3t,"FlaxGPTJModel"),H3t.forEach(t),LFr=r(tBe," (GPT-J model)"),tBe.forEach(t),BFr=i(Q),f4=n(Q,"LI",{});var aBe=s(f4);Y3e=n(aBe,"STRONG",{});var U3t=s(Y3e);xFr=r(U3t,"marian"),U3t.forEach(t),kFr=r(aBe," \u2014 "),aV=n(aBe,"A",{href:!0});var J3t=s(aV);RFr=r(J3t,"FlaxMarianModel"),J3t.forEach(t),SFr=r(aBe," (Marian model)"),aBe.forEach(t),PFr=i(Q),m4=n(Q,"LI",{});var nBe=s(m4);K3e=n(nBe,"STRONG",{});var Y3t=s(K3e);$Fr=r(Y3t,"mbart"),Y3t.forEach(t),IFr=r(nBe," \u2014 "),nV=n(nBe,"A",{href:!0});var K3t=s(nV);jFr=r(K3t,"FlaxMBartModel"),K3t.forEach(t),NFr=r(nBe," (mBART model)"),nBe.forEach(t),DFr=i(Q),g4=n(Q,"LI",{});var sBe=s(g4);Z3e=n(sBe,"STRONG",{});var Z3t=s(Z3e);qFr=r(Z3t,"mt5"),Z3t.forEach(t),OFr=r(sBe," \u2014 "),sV=n(sBe,"A",{href:!0});var e2t=s(sV);GFr=r(e2t,"FlaxMT5Model"),e2t.forEach(t),XFr=r(sBe," (mT5 model)"),sBe.forEach(t),VFr=i(Q),h4=n(Q,"LI",{});var lBe=s(h4);e2e=n(lBe,"STRONG",{});var o2t=s(e2e);zFr=r(o2t,"pegasus"),o2t.forEach(t),WFr=r(lBe," \u2014 "),lV=n(lBe,"A",{href:!0});var r2t=s(lV);QFr=r(r2t,"FlaxPegasusModel"),r2t.forEach(t),HFr=r(lBe," (Pegasus model)"),lBe.forEach(t),UFr=i(Q),p4=n(Q,"LI",{});var iBe=s(p4);o2e=n(iBe,"STRONG",{});var t2t=s(o2e);JFr=r(t2t,"roberta"),t2t.forEach(t),YFr=r(iBe," \u2014 "),iV=n(iBe,"A",{href:!0});var a2t=s(iV);KFr=r(a2t,"FlaxRobertaModel"),a2t.forEach(t),ZFr=r(iBe," (RoBERTa model)"),iBe.forEach(t),eCr=i(Q),_4=n(Q,"LI",{});var dBe=s(_4);r2e=n(dBe,"STRONG",{});var n2t=s(r2e);oCr=r(n2t,"roformer"),n2t.forEach(t),rCr=r(dBe," \u2014 "),dV=n(dBe,"A",{href:!0});var s2t=s(dV);tCr=r(s2t,"FlaxRoFormerModel"),s2t.forEach(t),aCr=r(dBe," (RoFormer model)"),dBe.forEach(t),nCr=i(Q),u4=n(Q,"LI",{});var cBe=s(u4);t2e=n(cBe,"STRONG",{});var l2t=s(t2e);sCr=r(l2t,"t5"),l2t.forEach(t),lCr=r(cBe," \u2014 "),cV=n(cBe,"A",{href:!0});var i2t=s(cV);iCr=r(i2t,"FlaxT5Model"),i2t.forEach(t),dCr=r(cBe," (T5 model)"),cBe.forEach(t),cCr=i(Q),b4=n(Q,"LI",{});var fBe=s(b4);a2e=n(fBe,"STRONG",{});var d2t=s(a2e);fCr=r(d2t,"vision-text-dual-encoder"),d2t.forEach(t),mCr=r(fBe," \u2014 "),fV=n(fBe,"A",{href:!0});var c2t=s(fV);gCr=r(c2t,"FlaxVisionTextDualEncoderModel"),c2t.forEach(t),hCr=r(fBe," (VisionTextDualEncoder model)"),fBe.forEach(t),pCr=i(Q),v4=n(Q,"LI",{});var mBe=s(v4);n2e=n(mBe,"STRONG",{});var f2t=s(n2e);_Cr=r(f2t,"vit"),f2t.forEach(t),uCr=r(mBe," \u2014 "),mV=n(mBe,"A",{href:!0});var m2t=s(mV);bCr=r(m2t,"FlaxViTModel"),m2t.forEach(t),vCr=r(mBe," (ViT model)"),mBe.forEach(t),TCr=i(Q),T4=n(Q,"LI",{});var gBe=s(T4);s2e=n(gBe,"STRONG",{});var g2t=s(s2e);FCr=r(g2t,"wav2vec2"),g2t.forEach(t),CCr=r(gBe," \u2014 "),gV=n(gBe,"A",{href:!0});var h2t=s(gV);MCr=r(h2t,"FlaxWav2Vec2Model"),h2t.forEach(t),ECr=r(gBe," (Wav2Vec2 model)"),gBe.forEach(t),yCr=i(Q),F4=n(Q,"LI",{});var hBe=s(F4);l2e=n(hBe,"STRONG",{});var p2t=s(l2e);wCr=r(p2t,"xglm"),p2t.forEach(t),ACr=r(hBe," \u2014 "),hV=n(hBe,"A",{href:!0});var _2t=s(hV);LCr=r(_2t,"FlaxXGLMModel"),_2t.forEach(t),BCr=r(hBe," (XGLM model)"),hBe.forEach(t),xCr=i(Q),C4=n(Q,"LI",{});var pBe=s(C4);i2e=n(pBe,"STRONG",{});var u2t=s(i2e);kCr=r(u2t,"xlm-roberta"),u2t.forEach(t),RCr=r(pBe," \u2014 "),pV=n(pBe,"A",{href:!0});var b2t=s(pV);SCr=r(b2t,"FlaxXLMRobertaModel"),b2t.forEach(t),PCr=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),Q.forEach(t),$Cr=i(La),d2e=n(La,"P",{});var v2t=s(d2e);ICr=r(v2t,"Examples:"),v2t.forEach(t),jCr=i(La),m(wL.$$.fragment,La),La.forEach(t),fi.forEach(t),uRe=i(c),of=n(c,"H2",{class:!0});var BPe=s(of);M4=n(BPe,"A",{id:!0,class:!0,href:!0});var T2t=s(M4);c2e=n(T2t,"SPAN",{});var F2t=s(c2e);m(AL.$$.fragment,F2t),F2t.forEach(t),T2t.forEach(t),NCr=i(BPe),f2e=n(BPe,"SPAN",{});var C2t=s(f2e);DCr=r(C2t,"FlaxAutoModelForCausalLM"),C2t.forEach(t),BPe.forEach(t),bRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(LL.$$.fragment,gi),qCr=i(gi),rf=n(gi,"P",{});var iQ=s(rf);OCr=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),m2e=n(iQ,"CODE",{});var M2t=s(m2e);GCr=r(M2t,"from_pretrained()"),M2t.forEach(t),XCr=r(iQ,"class method or the "),g2e=n(iQ,"CODE",{});var E2t=s(g2e);VCr=r(E2t,"from_config()"),E2t.forEach(t),zCr=r(iQ,`class
method.`),iQ.forEach(t),WCr=i(gi),BL=n(gi,"P",{});var xPe=s(BL);QCr=r(xPe,"This class cannot be instantiated directly using "),h2e=n(xPe,"CODE",{});var y2t=s(h2e);HCr=r(y2t,"__init__()"),y2t.forEach(t),UCr=r(xPe," (throws an error)."),xPe.forEach(t),JCr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(xL.$$.fragment,hi),YCr=i(hi),p2e=n(hi,"P",{});var w2t=s(p2e);KCr=r(w2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),w2t.forEach(t),ZCr=i(hi),tf=n(hi,"P",{});var dQ=s(tf);eMr=r(dQ,`Note:
Loading a model from its configuration file does `),_2e=n(dQ,"STRONG",{});var A2t=s(_2e);oMr=r(A2t,"not"),A2t.forEach(t),rMr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=n(dQ,"CODE",{});var L2t=s(u2e);tMr=r(L2t,"from_pretrained()"),L2t.forEach(t),aMr=r(dQ,"to load the model weights."),dQ.forEach(t),nMr=i(hi),b2e=n(hi,"P",{});var B2t=s(b2e);sMr=r(B2t,"Examples:"),B2t.forEach(t),lMr=i(hi),m(kL.$$.fragment,hi),hi.forEach(t),iMr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(RL.$$.fragment,Ba),dMr=i(Ba),v2e=n(Ba,"P",{});var x2t=s(v2e);cMr=r(x2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x2t.forEach(t),fMr=i(Ba),xn=n(Ba,"P",{});var V5=s(xn);mMr=r(V5,"The model class to instantiate is selected based on the "),T2e=n(V5,"CODE",{});var k2t=s(T2e);gMr=r(k2t,"model_type"),k2t.forEach(t),hMr=r(V5,` property of the config object (either
passed as an argument or loaded from `),F2e=n(V5,"CODE",{});var R2t=s(F2e);pMr=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),_Mr=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(V5,"CODE",{});var S2t=s(C2e);uMr=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),bMr=r(V5,":"),V5.forEach(t),vMr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);E4=n(pi,"LI",{});var _Be=s(E4);M2e=n(_Be,"STRONG",{});var P2t=s(M2e);TMr=r(P2t,"bart"),P2t.forEach(t),FMr=r(_Be," \u2014 "),_V=n(_Be,"A",{href:!0});var $2t=s(_V);CMr=r($2t,"FlaxBartForCausalLM"),$2t.forEach(t),MMr=r(_Be," (BART model)"),_Be.forEach(t),EMr=i(pi),y4=n(pi,"LI",{});var uBe=s(y4);E2e=n(uBe,"STRONG",{});var I2t=s(E2e);yMr=r(I2t,"gpt2"),I2t.forEach(t),wMr=r(uBe," \u2014 "),uV=n(uBe,"A",{href:!0});var j2t=s(uV);AMr=r(j2t,"FlaxGPT2LMHeadModel"),j2t.forEach(t),LMr=r(uBe," (OpenAI GPT-2 model)"),uBe.forEach(t),BMr=i(pi),w4=n(pi,"LI",{});var bBe=s(w4);y2e=n(bBe,"STRONG",{});var N2t=s(y2e);xMr=r(N2t,"gpt_neo"),N2t.forEach(t),kMr=r(bBe," \u2014 "),bV=n(bBe,"A",{href:!0});var D2t=s(bV);RMr=r(D2t,"FlaxGPTNeoForCausalLM"),D2t.forEach(t),SMr=r(bBe," (GPT Neo model)"),bBe.forEach(t),PMr=i(pi),A4=n(pi,"LI",{});var vBe=s(A4);w2e=n(vBe,"STRONG",{});var q2t=s(w2e);$Mr=r(q2t,"gptj"),q2t.forEach(t),IMr=r(vBe," \u2014 "),vV=n(vBe,"A",{href:!0});var O2t=s(vV);jMr=r(O2t,"FlaxGPTJForCausalLM"),O2t.forEach(t),NMr=r(vBe," (GPT-J model)"),vBe.forEach(t),DMr=i(pi),L4=n(pi,"LI",{});var TBe=s(L4);A2e=n(TBe,"STRONG",{});var G2t=s(A2e);qMr=r(G2t,"xglm"),G2t.forEach(t),OMr=r(TBe," \u2014 "),TV=n(TBe,"A",{href:!0});var X2t=s(TV);GMr=r(X2t,"FlaxXGLMForCausalLM"),X2t.forEach(t),XMr=r(TBe," (XGLM model)"),TBe.forEach(t),pi.forEach(t),VMr=i(Ba),L2e=n(Ba,"P",{});var V2t=s(L2e);zMr=r(V2t,"Examples:"),V2t.forEach(t),WMr=i(Ba),m(SL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),vRe=i(c),af=n(c,"H2",{class:!0});var kPe=s(af);B4=n(kPe,"A",{id:!0,class:!0,href:!0});var z2t=s(B4);B2e=n(z2t,"SPAN",{});var W2t=s(B2e);m(PL.$$.fragment,W2t),W2t.forEach(t),z2t.forEach(t),QMr=i(kPe),x2e=n(kPe,"SPAN",{});var Q2t=s(x2e);HMr=r(Q2t,"FlaxAutoModelForPreTraining"),Q2t.forEach(t),kPe.forEach(t),TRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m($L.$$.fragment,_i),UMr=i(_i),nf=n(_i,"P",{});var cQ=s(nf);JMr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),k2e=n(cQ,"CODE",{});var H2t=s(k2e);YMr=r(H2t,"from_pretrained()"),H2t.forEach(t),KMr=r(cQ,"class method or the "),R2e=n(cQ,"CODE",{});var U2t=s(R2e);ZMr=r(U2t,"from_config()"),U2t.forEach(t),e4r=r(cQ,`class
method.`),cQ.forEach(t),o4r=i(_i),IL=n(_i,"P",{});var RPe=s(IL);r4r=r(RPe,"This class cannot be instantiated directly using "),S2e=n(RPe,"CODE",{});var J2t=s(S2e);t4r=r(J2t,"__init__()"),J2t.forEach(t),a4r=r(RPe," (throws an error)."),RPe.forEach(t),n4r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(jL.$$.fragment,ui),s4r=i(ui),P2e=n(ui,"P",{});var Y2t=s(P2e);l4r=r(Y2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Y2t.forEach(t),i4r=i(ui),sf=n(ui,"P",{});var fQ=s(sf);d4r=r(fQ,`Note:
Loading a model from its configuration file does `),$2e=n(fQ,"STRONG",{});var K2t=s($2e);c4r=r(K2t,"not"),K2t.forEach(t),f4r=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),I2e=n(fQ,"CODE",{});var Z2t=s(I2e);m4r=r(Z2t,"from_pretrained()"),Z2t.forEach(t),g4r=r(fQ,"to load the model weights."),fQ.forEach(t),h4r=i(ui),j2e=n(ui,"P",{});var evt=s(j2e);p4r=r(evt,"Examples:"),evt.forEach(t),_4r=i(ui),m(NL.$$.fragment,ui),ui.forEach(t),u4r=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(DL.$$.fragment,xa),b4r=i(xa),N2e=n(xa,"P",{});var ovt=s(N2e);v4r=r(ovt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ovt.forEach(t),T4r=i(xa),kn=n(xa,"P",{});var z5=s(kn);F4r=r(z5,"The model class to instantiate is selected based on the "),D2e=n(z5,"CODE",{});var rvt=s(D2e);C4r=r(rvt,"model_type"),rvt.forEach(t),M4r=r(z5,` property of the config object (either
passed as an argument or loaded from `),q2e=n(z5,"CODE",{});var tvt=s(q2e);E4r=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),y4r=r(z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(z5,"CODE",{});var avt=s(O2e);w4r=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),A4r=r(z5,":"),z5.forEach(t),L4r=i(xa),ce=n(xa,"UL",{});var he=s(ce);x4=n(he,"LI",{});var FBe=s(x4);G2e=n(FBe,"STRONG",{});var nvt=s(G2e);B4r=r(nvt,"albert"),nvt.forEach(t),x4r=r(FBe," \u2014 "),FV=n(FBe,"A",{href:!0});var svt=s(FV);k4r=r(svt,"FlaxAlbertForPreTraining"),svt.forEach(t),R4r=r(FBe," (ALBERT model)"),FBe.forEach(t),S4r=i(he),k4=n(he,"LI",{});var CBe=s(k4);X2e=n(CBe,"STRONG",{});var lvt=s(X2e);P4r=r(lvt,"bart"),lvt.forEach(t),$4r=r(CBe," \u2014 "),CV=n(CBe,"A",{href:!0});var ivt=s(CV);I4r=r(ivt,"FlaxBartForConditionalGeneration"),ivt.forEach(t),j4r=r(CBe," (BART model)"),CBe.forEach(t),N4r=i(he),R4=n(he,"LI",{});var MBe=s(R4);V2e=n(MBe,"STRONG",{});var dvt=s(V2e);D4r=r(dvt,"bert"),dvt.forEach(t),q4r=r(MBe," \u2014 "),MV=n(MBe,"A",{href:!0});var cvt=s(MV);O4r=r(cvt,"FlaxBertForPreTraining"),cvt.forEach(t),G4r=r(MBe," (BERT model)"),MBe.forEach(t),X4r=i(he),S4=n(he,"LI",{});var EBe=s(S4);z2e=n(EBe,"STRONG",{});var fvt=s(z2e);V4r=r(fvt,"big_bird"),fvt.forEach(t),z4r=r(EBe," \u2014 "),EV=n(EBe,"A",{href:!0});var mvt=s(EV);W4r=r(mvt,"FlaxBigBirdForPreTraining"),mvt.forEach(t),Q4r=r(EBe," (BigBird model)"),EBe.forEach(t),H4r=i(he),P4=n(he,"LI",{});var yBe=s(P4);W2e=n(yBe,"STRONG",{});var gvt=s(W2e);U4r=r(gvt,"electra"),gvt.forEach(t),J4r=r(yBe," \u2014 "),yV=n(yBe,"A",{href:!0});var hvt=s(yV);Y4r=r(hvt,"FlaxElectraForPreTraining"),hvt.forEach(t),K4r=r(yBe," (ELECTRA model)"),yBe.forEach(t),Z4r=i(he),$4=n(he,"LI",{});var wBe=s($4);Q2e=n(wBe,"STRONG",{});var pvt=s(Q2e);eEr=r(pvt,"mbart"),pvt.forEach(t),oEr=r(wBe," \u2014 "),wV=n(wBe,"A",{href:!0});var _vt=s(wV);rEr=r(_vt,"FlaxMBartForConditionalGeneration"),_vt.forEach(t),tEr=r(wBe," (mBART model)"),wBe.forEach(t),aEr=i(he),I4=n(he,"LI",{});var ABe=s(I4);H2e=n(ABe,"STRONG",{});var uvt=s(H2e);nEr=r(uvt,"mt5"),uvt.forEach(t),sEr=r(ABe," \u2014 "),AV=n(ABe,"A",{href:!0});var bvt=s(AV);lEr=r(bvt,"FlaxMT5ForConditionalGeneration"),bvt.forEach(t),iEr=r(ABe," (mT5 model)"),ABe.forEach(t),dEr=i(he),j4=n(he,"LI",{});var LBe=s(j4);U2e=n(LBe,"STRONG",{});var vvt=s(U2e);cEr=r(vvt,"roberta"),vvt.forEach(t),fEr=r(LBe," \u2014 "),LV=n(LBe,"A",{href:!0});var Tvt=s(LV);mEr=r(Tvt,"FlaxRobertaForMaskedLM"),Tvt.forEach(t),gEr=r(LBe," (RoBERTa model)"),LBe.forEach(t),hEr=i(he),N4=n(he,"LI",{});var BBe=s(N4);J2e=n(BBe,"STRONG",{});var Fvt=s(J2e);pEr=r(Fvt,"roformer"),Fvt.forEach(t),_Er=r(BBe," \u2014 "),BV=n(BBe,"A",{href:!0});var Cvt=s(BV);uEr=r(Cvt,"FlaxRoFormerForMaskedLM"),Cvt.forEach(t),bEr=r(BBe," (RoFormer model)"),BBe.forEach(t),vEr=i(he),D4=n(he,"LI",{});var xBe=s(D4);Y2e=n(xBe,"STRONG",{});var Mvt=s(Y2e);TEr=r(Mvt,"t5"),Mvt.forEach(t),FEr=r(xBe," \u2014 "),xV=n(xBe,"A",{href:!0});var Evt=s(xV);CEr=r(Evt,"FlaxT5ForConditionalGeneration"),Evt.forEach(t),MEr=r(xBe," (T5 model)"),xBe.forEach(t),EEr=i(he),q4=n(he,"LI",{});var kBe=s(q4);K2e=n(kBe,"STRONG",{});var yvt=s(K2e);yEr=r(yvt,"wav2vec2"),yvt.forEach(t),wEr=r(kBe," \u2014 "),kV=n(kBe,"A",{href:!0});var wvt=s(kV);AEr=r(wvt,"FlaxWav2Vec2ForPreTraining"),wvt.forEach(t),LEr=r(kBe," (Wav2Vec2 model)"),kBe.forEach(t),BEr=i(he),O4=n(he,"LI",{});var RBe=s(O4);Z2e=n(RBe,"STRONG",{});var Avt=s(Z2e);xEr=r(Avt,"xlm-roberta"),Avt.forEach(t),kEr=r(RBe," \u2014 "),RV=n(RBe,"A",{href:!0});var Lvt=s(RV);REr=r(Lvt,"FlaxXLMRobertaForMaskedLM"),Lvt.forEach(t),SEr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),he.forEach(t),PEr=i(xa),eve=n(xa,"P",{});var Bvt=s(eve);$Er=r(Bvt,"Examples:"),Bvt.forEach(t),IEr=i(xa),m(qL.$$.fragment,xa),xa.forEach(t),_i.forEach(t),FRe=i(c),lf=n(c,"H2",{class:!0});var SPe=s(lf);G4=n(SPe,"A",{id:!0,class:!0,href:!0});var xvt=s(G4);ove=n(xvt,"SPAN",{});var kvt=s(ove);m(OL.$$.fragment,kvt),kvt.forEach(t),xvt.forEach(t),jEr=i(SPe),rve=n(SPe,"SPAN",{});var Rvt=s(rve);NEr=r(Rvt,"FlaxAutoModelForMaskedLM"),Rvt.forEach(t),SPe.forEach(t),CRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(GL.$$.fragment,bi),DEr=i(bi),df=n(bi,"P",{});var mQ=s(df);qEr=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tve=n(mQ,"CODE",{});var Svt=s(tve);OEr=r(Svt,"from_pretrained()"),Svt.forEach(t),GEr=r(mQ,"class method or the "),ave=n(mQ,"CODE",{});var Pvt=s(ave);XEr=r(Pvt,"from_config()"),Pvt.forEach(t),VEr=r(mQ,`class
method.`),mQ.forEach(t),zEr=i(bi),XL=n(bi,"P",{});var PPe=s(XL);WEr=r(PPe,"This class cannot be instantiated directly using "),nve=n(PPe,"CODE",{});var $vt=s(nve);QEr=r($vt,"__init__()"),$vt.forEach(t),HEr=r(PPe," (throws an error)."),PPe.forEach(t),UEr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(VL.$$.fragment,vi),JEr=i(vi),sve=n(vi,"P",{});var Ivt=s(sve);YEr=r(Ivt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ivt.forEach(t),KEr=i(vi),cf=n(vi,"P",{});var gQ=s(cf);ZEr=r(gQ,`Note:
Loading a model from its configuration file does `),lve=n(gQ,"STRONG",{});var jvt=s(lve);e5r=r(jvt,"not"),jvt.forEach(t),o5r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ive=n(gQ,"CODE",{});var Nvt=s(ive);r5r=r(Nvt,"from_pretrained()"),Nvt.forEach(t),t5r=r(gQ,"to load the model weights."),gQ.forEach(t),a5r=i(vi),dve=n(vi,"P",{});var Dvt=s(dve);n5r=r(Dvt,"Examples:"),Dvt.forEach(t),s5r=i(vi),m(zL.$$.fragment,vi),vi.forEach(t),l5r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(WL.$$.fragment,ka),i5r=i(ka),cve=n(ka,"P",{});var qvt=s(cve);d5r=r(qvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qvt.forEach(t),c5r=i(ka),Rn=n(ka,"P",{});var W5=s(Rn);f5r=r(W5,"The model class to instantiate is selected based on the "),fve=n(W5,"CODE",{});var Ovt=s(fve);m5r=r(Ovt,"model_type"),Ovt.forEach(t),g5r=r(W5,` property of the config object (either
passed as an argument or loaded from `),mve=n(W5,"CODE",{});var Gvt=s(mve);h5r=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),p5r=r(W5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(W5,"CODE",{});var Xvt=s(gve);_5r=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),u5r=r(W5,":"),W5.forEach(t),b5r=i(ka),be=n(ka,"UL",{});var we=s(be);X4=n(we,"LI",{});var SBe=s(X4);hve=n(SBe,"STRONG",{});var Vvt=s(hve);v5r=r(Vvt,"albert"),Vvt.forEach(t),T5r=r(SBe," \u2014 "),SV=n(SBe,"A",{href:!0});var zvt=s(SV);F5r=r(zvt,"FlaxAlbertForMaskedLM"),zvt.forEach(t),C5r=r(SBe," (ALBERT model)"),SBe.forEach(t),M5r=i(we),V4=n(we,"LI",{});var PBe=s(V4);pve=n(PBe,"STRONG",{});var Wvt=s(pve);E5r=r(Wvt,"bart"),Wvt.forEach(t),y5r=r(PBe," \u2014 "),PV=n(PBe,"A",{href:!0});var Qvt=s(PV);w5r=r(Qvt,"FlaxBartForConditionalGeneration"),Qvt.forEach(t),A5r=r(PBe," (BART model)"),PBe.forEach(t),L5r=i(we),z4=n(we,"LI",{});var $Be=s(z4);_ve=n($Be,"STRONG",{});var Hvt=s(_ve);B5r=r(Hvt,"bert"),Hvt.forEach(t),x5r=r($Be," \u2014 "),$V=n($Be,"A",{href:!0});var Uvt=s($V);k5r=r(Uvt,"FlaxBertForMaskedLM"),Uvt.forEach(t),R5r=r($Be," (BERT model)"),$Be.forEach(t),S5r=i(we),W4=n(we,"LI",{});var IBe=s(W4);uve=n(IBe,"STRONG",{});var Jvt=s(uve);P5r=r(Jvt,"big_bird"),Jvt.forEach(t),$5r=r(IBe," \u2014 "),IV=n(IBe,"A",{href:!0});var Yvt=s(IV);I5r=r(Yvt,"FlaxBigBirdForMaskedLM"),Yvt.forEach(t),j5r=r(IBe," (BigBird model)"),IBe.forEach(t),N5r=i(we),Q4=n(we,"LI",{});var jBe=s(Q4);bve=n(jBe,"STRONG",{});var Kvt=s(bve);D5r=r(Kvt,"distilbert"),Kvt.forEach(t),q5r=r(jBe," \u2014 "),jV=n(jBe,"A",{href:!0});var Zvt=s(jV);O5r=r(Zvt,"FlaxDistilBertForMaskedLM"),Zvt.forEach(t),G5r=r(jBe," (DistilBERT model)"),jBe.forEach(t),X5r=i(we),H4=n(we,"LI",{});var NBe=s(H4);vve=n(NBe,"STRONG",{});var eTt=s(vve);V5r=r(eTt,"electra"),eTt.forEach(t),z5r=r(NBe," \u2014 "),NV=n(NBe,"A",{href:!0});var oTt=s(NV);W5r=r(oTt,"FlaxElectraForMaskedLM"),oTt.forEach(t),Q5r=r(NBe," (ELECTRA model)"),NBe.forEach(t),H5r=i(we),U4=n(we,"LI",{});var DBe=s(U4);Tve=n(DBe,"STRONG",{});var rTt=s(Tve);U5r=r(rTt,"mbart"),rTt.forEach(t),J5r=r(DBe," \u2014 "),DV=n(DBe,"A",{href:!0});var tTt=s(DV);Y5r=r(tTt,"FlaxMBartForConditionalGeneration"),tTt.forEach(t),K5r=r(DBe," (mBART model)"),DBe.forEach(t),Z5r=i(we),J4=n(we,"LI",{});var qBe=s(J4);Fve=n(qBe,"STRONG",{});var aTt=s(Fve);eyr=r(aTt,"roberta"),aTt.forEach(t),oyr=r(qBe," \u2014 "),qV=n(qBe,"A",{href:!0});var nTt=s(qV);ryr=r(nTt,"FlaxRobertaForMaskedLM"),nTt.forEach(t),tyr=r(qBe," (RoBERTa model)"),qBe.forEach(t),ayr=i(we),Y4=n(we,"LI",{});var OBe=s(Y4);Cve=n(OBe,"STRONG",{});var sTt=s(Cve);nyr=r(sTt,"roformer"),sTt.forEach(t),syr=r(OBe," \u2014 "),OV=n(OBe,"A",{href:!0});var lTt=s(OV);lyr=r(lTt,"FlaxRoFormerForMaskedLM"),lTt.forEach(t),iyr=r(OBe," (RoFormer model)"),OBe.forEach(t),dyr=i(we),K4=n(we,"LI",{});var GBe=s(K4);Mve=n(GBe,"STRONG",{});var iTt=s(Mve);cyr=r(iTt,"xlm-roberta"),iTt.forEach(t),fyr=r(GBe," \u2014 "),GV=n(GBe,"A",{href:!0});var dTt=s(GV);myr=r(dTt,"FlaxXLMRobertaForMaskedLM"),dTt.forEach(t),gyr=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),we.forEach(t),hyr=i(ka),Eve=n(ka,"P",{});var cTt=s(Eve);pyr=r(cTt,"Examples:"),cTt.forEach(t),_yr=i(ka),m(QL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),MRe=i(c),ff=n(c,"H2",{class:!0});var $Pe=s(ff);Z4=n($Pe,"A",{id:!0,class:!0,href:!0});var fTt=s(Z4);yve=n(fTt,"SPAN",{});var mTt=s(yve);m(HL.$$.fragment,mTt),mTt.forEach(t),fTt.forEach(t),uyr=i($Pe),wve=n($Pe,"SPAN",{});var gTt=s(wve);byr=r(gTt,"FlaxAutoModelForSeq2SeqLM"),gTt.forEach(t),$Pe.forEach(t),ERe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(UL.$$.fragment,Ti),vyr=i(Ti),mf=n(Ti,"P",{});var hQ=s(mf);Tyr=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ave=n(hQ,"CODE",{});var hTt=s(Ave);Fyr=r(hTt,"from_pretrained()"),hTt.forEach(t),Cyr=r(hQ,"class method or the "),Lve=n(hQ,"CODE",{});var pTt=s(Lve);Myr=r(pTt,"from_config()"),pTt.forEach(t),Eyr=r(hQ,`class
method.`),hQ.forEach(t),yyr=i(Ti),JL=n(Ti,"P",{});var IPe=s(JL);wyr=r(IPe,"This class cannot be instantiated directly using "),Bve=n(IPe,"CODE",{});var _Tt=s(Bve);Ayr=r(_Tt,"__init__()"),_Tt.forEach(t),Lyr=r(IPe," (throws an error)."),IPe.forEach(t),Byr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(YL.$$.fragment,Fi),xyr=i(Fi),xve=n(Fi,"P",{});var uTt=s(xve);kyr=r(uTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uTt.forEach(t),Ryr=i(Fi),gf=n(Fi,"P",{});var pQ=s(gf);Syr=r(pQ,`Note:
Loading a model from its configuration file does `),kve=n(pQ,"STRONG",{});var bTt=s(kve);Pyr=r(bTt,"not"),bTt.forEach(t),$yr=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rve=n(pQ,"CODE",{});var vTt=s(Rve);Iyr=r(vTt,"from_pretrained()"),vTt.forEach(t),jyr=r(pQ,"to load the model weights."),pQ.forEach(t),Nyr=i(Fi),Sve=n(Fi,"P",{});var TTt=s(Sve);Dyr=r(TTt,"Examples:"),TTt.forEach(t),qyr=i(Fi),m(KL.$$.fragment,Fi),Fi.forEach(t),Oyr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(ZL.$$.fragment,Ra),Gyr=i(Ra),Pve=n(Ra,"P",{});var FTt=s(Pve);Xyr=r(FTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FTt.forEach(t),Vyr=i(Ra),Sn=n(Ra,"P",{});var Q5=s(Sn);zyr=r(Q5,"The model class to instantiate is selected based on the "),$ve=n(Q5,"CODE",{});var CTt=s($ve);Wyr=r(CTt,"model_type"),CTt.forEach(t),Qyr=r(Q5,` property of the config object (either
passed as an argument or loaded from `),Ive=n(Q5,"CODE",{});var MTt=s(Ive);Hyr=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),Uyr=r(Q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(Q5,"CODE",{});var ETt=s(jve);Jyr=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),Yyr=r(Q5,":"),Q5.forEach(t),Kyr=i(Ra),Ee=n(Ra,"UL",{});var lo=s(Ee);eE=n(lo,"LI",{});var XBe=s(eE);Nve=n(XBe,"STRONG",{});var yTt=s(Nve);Zyr=r(yTt,"bart"),yTt.forEach(t),ewr=r(XBe," \u2014 "),XV=n(XBe,"A",{href:!0});var wTt=s(XV);owr=r(wTt,"FlaxBartForConditionalGeneration"),wTt.forEach(t),rwr=r(XBe," (BART model)"),XBe.forEach(t),twr=i(lo),oE=n(lo,"LI",{});var VBe=s(oE);Dve=n(VBe,"STRONG",{});var ATt=s(Dve);awr=r(ATt,"blenderbot"),ATt.forEach(t),nwr=r(VBe," \u2014 "),VV=n(VBe,"A",{href:!0});var LTt=s(VV);swr=r(LTt,"FlaxBlenderbotForConditionalGeneration"),LTt.forEach(t),lwr=r(VBe," (Blenderbot model)"),VBe.forEach(t),iwr=i(lo),rE=n(lo,"LI",{});var zBe=s(rE);qve=n(zBe,"STRONG",{});var BTt=s(qve);dwr=r(BTt,"blenderbot-small"),BTt.forEach(t),cwr=r(zBe," \u2014 "),zV=n(zBe,"A",{href:!0});var xTt=s(zV);fwr=r(xTt,"FlaxBlenderbotSmallForConditionalGeneration"),xTt.forEach(t),mwr=r(zBe," (BlenderbotSmall model)"),zBe.forEach(t),gwr=i(lo),tE=n(lo,"LI",{});var WBe=s(tE);Ove=n(WBe,"STRONG",{});var kTt=s(Ove);hwr=r(kTt,"encoder-decoder"),kTt.forEach(t),pwr=r(WBe," \u2014 "),WV=n(WBe,"A",{href:!0});var RTt=s(WV);_wr=r(RTt,"FlaxEncoderDecoderModel"),RTt.forEach(t),uwr=r(WBe," (Encoder decoder model)"),WBe.forEach(t),bwr=i(lo),aE=n(lo,"LI",{});var QBe=s(aE);Gve=n(QBe,"STRONG",{});var STt=s(Gve);vwr=r(STt,"marian"),STt.forEach(t),Twr=r(QBe," \u2014 "),QV=n(QBe,"A",{href:!0});var PTt=s(QV);Fwr=r(PTt,"FlaxMarianMTModel"),PTt.forEach(t),Cwr=r(QBe," (Marian model)"),QBe.forEach(t),Mwr=i(lo),nE=n(lo,"LI",{});var HBe=s(nE);Xve=n(HBe,"STRONG",{});var $Tt=s(Xve);Ewr=r($Tt,"mbart"),$Tt.forEach(t),ywr=r(HBe," \u2014 "),HV=n(HBe,"A",{href:!0});var ITt=s(HV);wwr=r(ITt,"FlaxMBartForConditionalGeneration"),ITt.forEach(t),Awr=r(HBe," (mBART model)"),HBe.forEach(t),Lwr=i(lo),sE=n(lo,"LI",{});var UBe=s(sE);Vve=n(UBe,"STRONG",{});var jTt=s(Vve);Bwr=r(jTt,"mt5"),jTt.forEach(t),xwr=r(UBe," \u2014 "),UV=n(UBe,"A",{href:!0});var NTt=s(UV);kwr=r(NTt,"FlaxMT5ForConditionalGeneration"),NTt.forEach(t),Rwr=r(UBe," (mT5 model)"),UBe.forEach(t),Swr=i(lo),lE=n(lo,"LI",{});var JBe=s(lE);zve=n(JBe,"STRONG",{});var DTt=s(zve);Pwr=r(DTt,"pegasus"),DTt.forEach(t),$wr=r(JBe," \u2014 "),JV=n(JBe,"A",{href:!0});var qTt=s(JV);Iwr=r(qTt,"FlaxPegasusForConditionalGeneration"),qTt.forEach(t),jwr=r(JBe," (Pegasus model)"),JBe.forEach(t),Nwr=i(lo),iE=n(lo,"LI",{});var YBe=s(iE);Wve=n(YBe,"STRONG",{});var OTt=s(Wve);Dwr=r(OTt,"t5"),OTt.forEach(t),qwr=r(YBe," \u2014 "),YV=n(YBe,"A",{href:!0});var GTt=s(YV);Owr=r(GTt,"FlaxT5ForConditionalGeneration"),GTt.forEach(t),Gwr=r(YBe," (T5 model)"),YBe.forEach(t),lo.forEach(t),Xwr=i(Ra),Qve=n(Ra,"P",{});var XTt=s(Qve);Vwr=r(XTt,"Examples:"),XTt.forEach(t),zwr=i(Ra),m(e7.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),yRe=i(c),hf=n(c,"H2",{class:!0});var jPe=s(hf);dE=n(jPe,"A",{id:!0,class:!0,href:!0});var VTt=s(dE);Hve=n(VTt,"SPAN",{});var zTt=s(Hve);m(o7.$$.fragment,zTt),zTt.forEach(t),VTt.forEach(t),Wwr=i(jPe),Uve=n(jPe,"SPAN",{});var WTt=s(Uve);Qwr=r(WTt,"FlaxAutoModelForSequenceClassification"),WTt.forEach(t),jPe.forEach(t),wRe=i(c),jr=n(c,"DIV",{class:!0});var Ci=s(jr);m(r7.$$.fragment,Ci),Hwr=i(Ci),pf=n(Ci,"P",{});var _Q=s(pf);Uwr=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jve=n(_Q,"CODE",{});var QTt=s(Jve);Jwr=r(QTt,"from_pretrained()"),QTt.forEach(t),Ywr=r(_Q,"class method or the "),Yve=n(_Q,"CODE",{});var HTt=s(Yve);Kwr=r(HTt,"from_config()"),HTt.forEach(t),Zwr=r(_Q,`class
method.`),_Q.forEach(t),e6r=i(Ci),t7=n(Ci,"P",{});var NPe=s(t7);o6r=r(NPe,"This class cannot be instantiated directly using "),Kve=n(NPe,"CODE",{});var UTt=s(Kve);r6r=r(UTt,"__init__()"),UTt.forEach(t),t6r=r(NPe," (throws an error)."),NPe.forEach(t),a6r=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(a7.$$.fragment,Mi),n6r=i(Mi),Zve=n(Mi,"P",{});var JTt=s(Zve);s6r=r(JTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JTt.forEach(t),l6r=i(Mi),_f=n(Mi,"P",{});var uQ=s(_f);i6r=r(uQ,`Note:
Loading a model from its configuration file does `),eTe=n(uQ,"STRONG",{});var YTt=s(eTe);d6r=r(YTt,"not"),YTt.forEach(t),c6r=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oTe=n(uQ,"CODE",{});var KTt=s(oTe);f6r=r(KTt,"from_pretrained()"),KTt.forEach(t),m6r=r(uQ,"to load the model weights."),uQ.forEach(t),g6r=i(Mi),rTe=n(Mi,"P",{});var ZTt=s(rTe);h6r=r(ZTt,"Examples:"),ZTt.forEach(t),p6r=i(Mi),m(n7.$$.fragment,Mi),Mi.forEach(t),_6r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(s7.$$.fragment,Sa),u6r=i(Sa),tTe=n(Sa,"P",{});var e1t=s(tTe);b6r=r(e1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e1t.forEach(t),v6r=i(Sa),Pn=n(Sa,"P",{});var H5=s(Pn);T6r=r(H5,"The model class to instantiate is selected based on the "),aTe=n(H5,"CODE",{});var o1t=s(aTe);F6r=r(o1t,"model_type"),o1t.forEach(t),C6r=r(H5,` property of the config object (either
passed as an argument or loaded from `),nTe=n(H5,"CODE",{});var r1t=s(nTe);M6r=r(r1t,"pretrained_model_name_or_path"),r1t.forEach(t),E6r=r(H5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(H5,"CODE",{});var t1t=s(sTe);y6r=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),w6r=r(H5,":"),H5.forEach(t),A6r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);cE=n(Ae,"LI",{});var KBe=s(cE);lTe=n(KBe,"STRONG",{});var a1t=s(lTe);L6r=r(a1t,"albert"),a1t.forEach(t),B6r=r(KBe," \u2014 "),KV=n(KBe,"A",{href:!0});var n1t=s(KV);x6r=r(n1t,"FlaxAlbertForSequenceClassification"),n1t.forEach(t),k6r=r(KBe," (ALBERT model)"),KBe.forEach(t),R6r=i(Ae),fE=n(Ae,"LI",{});var ZBe=s(fE);iTe=n(ZBe,"STRONG",{});var s1t=s(iTe);S6r=r(s1t,"bart"),s1t.forEach(t),P6r=r(ZBe," \u2014 "),ZV=n(ZBe,"A",{href:!0});var l1t=s(ZV);$6r=r(l1t,"FlaxBartForSequenceClassification"),l1t.forEach(t),I6r=r(ZBe," (BART model)"),ZBe.forEach(t),j6r=i(Ae),mE=n(Ae,"LI",{});var exe=s(mE);dTe=n(exe,"STRONG",{});var i1t=s(dTe);N6r=r(i1t,"bert"),i1t.forEach(t),D6r=r(exe," \u2014 "),ez=n(exe,"A",{href:!0});var d1t=s(ez);q6r=r(d1t,"FlaxBertForSequenceClassification"),d1t.forEach(t),O6r=r(exe," (BERT model)"),exe.forEach(t),G6r=i(Ae),gE=n(Ae,"LI",{});var oxe=s(gE);cTe=n(oxe,"STRONG",{});var c1t=s(cTe);X6r=r(c1t,"big_bird"),c1t.forEach(t),V6r=r(oxe," \u2014 "),oz=n(oxe,"A",{href:!0});var f1t=s(oz);z6r=r(f1t,"FlaxBigBirdForSequenceClassification"),f1t.forEach(t),W6r=r(oxe," (BigBird model)"),oxe.forEach(t),Q6r=i(Ae),hE=n(Ae,"LI",{});var rxe=s(hE);fTe=n(rxe,"STRONG",{});var m1t=s(fTe);H6r=r(m1t,"distilbert"),m1t.forEach(t),U6r=r(rxe," \u2014 "),rz=n(rxe,"A",{href:!0});var g1t=s(rz);J6r=r(g1t,"FlaxDistilBertForSequenceClassification"),g1t.forEach(t),Y6r=r(rxe," (DistilBERT model)"),rxe.forEach(t),K6r=i(Ae),pE=n(Ae,"LI",{});var txe=s(pE);mTe=n(txe,"STRONG",{});var h1t=s(mTe);Z6r=r(h1t,"electra"),h1t.forEach(t),eAr=r(txe," \u2014 "),tz=n(txe,"A",{href:!0});var p1t=s(tz);oAr=r(p1t,"FlaxElectraForSequenceClassification"),p1t.forEach(t),rAr=r(txe," (ELECTRA model)"),txe.forEach(t),tAr=i(Ae),_E=n(Ae,"LI",{});var axe=s(_E);gTe=n(axe,"STRONG",{});var _1t=s(gTe);aAr=r(_1t,"mbart"),_1t.forEach(t),nAr=r(axe," \u2014 "),az=n(axe,"A",{href:!0});var u1t=s(az);sAr=r(u1t,"FlaxMBartForSequenceClassification"),u1t.forEach(t),lAr=r(axe," (mBART model)"),axe.forEach(t),iAr=i(Ae),uE=n(Ae,"LI",{});var nxe=s(uE);hTe=n(nxe,"STRONG",{});var b1t=s(hTe);dAr=r(b1t,"roberta"),b1t.forEach(t),cAr=r(nxe," \u2014 "),nz=n(nxe,"A",{href:!0});var v1t=s(nz);fAr=r(v1t,"FlaxRobertaForSequenceClassification"),v1t.forEach(t),mAr=r(nxe," (RoBERTa model)"),nxe.forEach(t),gAr=i(Ae),bE=n(Ae,"LI",{});var sxe=s(bE);pTe=n(sxe,"STRONG",{});var T1t=s(pTe);hAr=r(T1t,"roformer"),T1t.forEach(t),pAr=r(sxe," \u2014 "),sz=n(sxe,"A",{href:!0});var F1t=s(sz);_Ar=r(F1t,"FlaxRoFormerForSequenceClassification"),F1t.forEach(t),uAr=r(sxe," (RoFormer model)"),sxe.forEach(t),bAr=i(Ae),vE=n(Ae,"LI",{});var lxe=s(vE);_Te=n(lxe,"STRONG",{});var C1t=s(_Te);vAr=r(C1t,"xlm-roberta"),C1t.forEach(t),TAr=r(lxe," \u2014 "),lz=n(lxe,"A",{href:!0});var M1t=s(lz);FAr=r(M1t,"FlaxXLMRobertaForSequenceClassification"),M1t.forEach(t),CAr=r(lxe," (XLM-RoBERTa model)"),lxe.forEach(t),Ae.forEach(t),MAr=i(Sa),uTe=n(Sa,"P",{});var E1t=s(uTe);EAr=r(E1t,"Examples:"),E1t.forEach(t),yAr=i(Sa),m(l7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),ARe=i(c),uf=n(c,"H2",{class:!0});var DPe=s(uf);TE=n(DPe,"A",{id:!0,class:!0,href:!0});var y1t=s(TE);bTe=n(y1t,"SPAN",{});var w1t=s(bTe);m(i7.$$.fragment,w1t),w1t.forEach(t),y1t.forEach(t),wAr=i(DPe),vTe=n(DPe,"SPAN",{});var A1t=s(vTe);AAr=r(A1t,"FlaxAutoModelForQuestionAnswering"),A1t.forEach(t),DPe.forEach(t),LRe=i(c),Nr=n(c,"DIV",{class:!0});var Ei=s(Nr);m(d7.$$.fragment,Ei),LAr=i(Ei),bf=n(Ei,"P",{});var bQ=s(bf);BAr=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TTe=n(bQ,"CODE",{});var L1t=s(TTe);xAr=r(L1t,"from_pretrained()"),L1t.forEach(t),kAr=r(bQ,"class method or the "),FTe=n(bQ,"CODE",{});var B1t=s(FTe);RAr=r(B1t,"from_config()"),B1t.forEach(t),SAr=r(bQ,`class
method.`),bQ.forEach(t),PAr=i(Ei),c7=n(Ei,"P",{});var qPe=s(c7);$Ar=r(qPe,"This class cannot be instantiated directly using "),CTe=n(qPe,"CODE",{});var x1t=s(CTe);IAr=r(x1t,"__init__()"),x1t.forEach(t),jAr=r(qPe," (throws an error)."),qPe.forEach(t),NAr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(f7.$$.fragment,yi),DAr=i(yi),MTe=n(yi,"P",{});var k1t=s(MTe);qAr=r(k1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k1t.forEach(t),OAr=i(yi),vf=n(yi,"P",{});var vQ=s(vf);GAr=r(vQ,`Note:
Loading a model from its configuration file does `),ETe=n(vQ,"STRONG",{});var R1t=s(ETe);XAr=r(R1t,"not"),R1t.forEach(t),VAr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yTe=n(vQ,"CODE",{});var S1t=s(yTe);zAr=r(S1t,"from_pretrained()"),S1t.forEach(t),WAr=r(vQ,"to load the model weights."),vQ.forEach(t),QAr=i(yi),wTe=n(yi,"P",{});var P1t=s(wTe);HAr=r(P1t,"Examples:"),P1t.forEach(t),UAr=i(yi),m(m7.$$.fragment,yi),yi.forEach(t),JAr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(g7.$$.fragment,Pa),YAr=i(Pa),ATe=n(Pa,"P",{});var $1t=s(ATe);KAr=r($1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$1t.forEach(t),ZAr=i(Pa),$n=n(Pa,"P",{});var U5=s($n);e0r=r(U5,"The model class to instantiate is selected based on the "),LTe=n(U5,"CODE",{});var I1t=s(LTe);o0r=r(I1t,"model_type"),I1t.forEach(t),r0r=r(U5,` property of the config object (either
passed as an argument or loaded from `),BTe=n(U5,"CODE",{});var j1t=s(BTe);t0r=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),a0r=r(U5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(U5,"CODE",{});var N1t=s(xTe);n0r=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),s0r=r(U5,":"),U5.forEach(t),l0r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);FE=n(Le,"LI",{});var ixe=s(FE);kTe=n(ixe,"STRONG",{});var D1t=s(kTe);i0r=r(D1t,"albert"),D1t.forEach(t),d0r=r(ixe," \u2014 "),iz=n(ixe,"A",{href:!0});var q1t=s(iz);c0r=r(q1t,"FlaxAlbertForQuestionAnswering"),q1t.forEach(t),f0r=r(ixe," (ALBERT model)"),ixe.forEach(t),m0r=i(Le),CE=n(Le,"LI",{});var dxe=s(CE);RTe=n(dxe,"STRONG",{});var O1t=s(RTe);g0r=r(O1t,"bart"),O1t.forEach(t),h0r=r(dxe," \u2014 "),dz=n(dxe,"A",{href:!0});var G1t=s(dz);p0r=r(G1t,"FlaxBartForQuestionAnswering"),G1t.forEach(t),_0r=r(dxe," (BART model)"),dxe.forEach(t),u0r=i(Le),ME=n(Le,"LI",{});var cxe=s(ME);STe=n(cxe,"STRONG",{});var X1t=s(STe);b0r=r(X1t,"bert"),X1t.forEach(t),v0r=r(cxe," \u2014 "),cz=n(cxe,"A",{href:!0});var V1t=s(cz);T0r=r(V1t,"FlaxBertForQuestionAnswering"),V1t.forEach(t),F0r=r(cxe," (BERT model)"),cxe.forEach(t),C0r=i(Le),EE=n(Le,"LI",{});var fxe=s(EE);PTe=n(fxe,"STRONG",{});var z1t=s(PTe);M0r=r(z1t,"big_bird"),z1t.forEach(t),E0r=r(fxe," \u2014 "),fz=n(fxe,"A",{href:!0});var W1t=s(fz);y0r=r(W1t,"FlaxBigBirdForQuestionAnswering"),W1t.forEach(t),w0r=r(fxe," (BigBird model)"),fxe.forEach(t),A0r=i(Le),yE=n(Le,"LI",{});var mxe=s(yE);$Te=n(mxe,"STRONG",{});var Q1t=s($Te);L0r=r(Q1t,"distilbert"),Q1t.forEach(t),B0r=r(mxe," \u2014 "),mz=n(mxe,"A",{href:!0});var H1t=s(mz);x0r=r(H1t,"FlaxDistilBertForQuestionAnswering"),H1t.forEach(t),k0r=r(mxe," (DistilBERT model)"),mxe.forEach(t),R0r=i(Le),wE=n(Le,"LI",{});var gxe=s(wE);ITe=n(gxe,"STRONG",{});var U1t=s(ITe);S0r=r(U1t,"electra"),U1t.forEach(t),P0r=r(gxe," \u2014 "),gz=n(gxe,"A",{href:!0});var J1t=s(gz);$0r=r(J1t,"FlaxElectraForQuestionAnswering"),J1t.forEach(t),I0r=r(gxe," (ELECTRA model)"),gxe.forEach(t),j0r=i(Le),AE=n(Le,"LI",{});var hxe=s(AE);jTe=n(hxe,"STRONG",{});var Y1t=s(jTe);N0r=r(Y1t,"mbart"),Y1t.forEach(t),D0r=r(hxe," \u2014 "),hz=n(hxe,"A",{href:!0});var K1t=s(hz);q0r=r(K1t,"FlaxMBartForQuestionAnswering"),K1t.forEach(t),O0r=r(hxe," (mBART model)"),hxe.forEach(t),G0r=i(Le),LE=n(Le,"LI",{});var pxe=s(LE);NTe=n(pxe,"STRONG",{});var Z1t=s(NTe);X0r=r(Z1t,"roberta"),Z1t.forEach(t),V0r=r(pxe," \u2014 "),pz=n(pxe,"A",{href:!0});var eFt=s(pz);z0r=r(eFt,"FlaxRobertaForQuestionAnswering"),eFt.forEach(t),W0r=r(pxe," (RoBERTa model)"),pxe.forEach(t),Q0r=i(Le),BE=n(Le,"LI",{});var _xe=s(BE);DTe=n(_xe,"STRONG",{});var oFt=s(DTe);H0r=r(oFt,"roformer"),oFt.forEach(t),U0r=r(_xe," \u2014 "),_z=n(_xe,"A",{href:!0});var rFt=s(_z);J0r=r(rFt,"FlaxRoFormerForQuestionAnswering"),rFt.forEach(t),Y0r=r(_xe," (RoFormer model)"),_xe.forEach(t),K0r=i(Le),xE=n(Le,"LI",{});var uxe=s(xE);qTe=n(uxe,"STRONG",{});var tFt=s(qTe);Z0r=r(tFt,"xlm-roberta"),tFt.forEach(t),eLr=r(uxe," \u2014 "),uz=n(uxe,"A",{href:!0});var aFt=s(uz);oLr=r(aFt,"FlaxXLMRobertaForQuestionAnswering"),aFt.forEach(t),rLr=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),Le.forEach(t),tLr=i(Pa),OTe=n(Pa,"P",{});var nFt=s(OTe);aLr=r(nFt,"Examples:"),nFt.forEach(t),nLr=i(Pa),m(h7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),BRe=i(c),Tf=n(c,"H2",{class:!0});var OPe=s(Tf);kE=n(OPe,"A",{id:!0,class:!0,href:!0});var sFt=s(kE);GTe=n(sFt,"SPAN",{});var lFt=s(GTe);m(p7.$$.fragment,lFt),lFt.forEach(t),sFt.forEach(t),sLr=i(OPe),XTe=n(OPe,"SPAN",{});var iFt=s(XTe);lLr=r(iFt,"FlaxAutoModelForTokenClassification"),iFt.forEach(t),OPe.forEach(t),xRe=i(c),Dr=n(c,"DIV",{class:!0});var wi=s(Dr);m(_7.$$.fragment,wi),iLr=i(wi),Ff=n(wi,"P",{});var TQ=s(Ff);dLr=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VTe=n(TQ,"CODE",{});var dFt=s(VTe);cLr=r(dFt,"from_pretrained()"),dFt.forEach(t),fLr=r(TQ,"class method or the "),zTe=n(TQ,"CODE",{});var cFt=s(zTe);mLr=r(cFt,"from_config()"),cFt.forEach(t),gLr=r(TQ,`class
method.`),TQ.forEach(t),hLr=i(wi),u7=n(wi,"P",{});var GPe=s(u7);pLr=r(GPe,"This class cannot be instantiated directly using "),WTe=n(GPe,"CODE",{});var fFt=s(WTe);_Lr=r(fFt,"__init__()"),fFt.forEach(t),uLr=r(GPe," (throws an error)."),GPe.forEach(t),bLr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(b7.$$.fragment,Ai),vLr=i(Ai),QTe=n(Ai,"P",{});var mFt=s(QTe);TLr=r(mFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mFt.forEach(t),FLr=i(Ai),Cf=n(Ai,"P",{});var FQ=s(Cf);CLr=r(FQ,`Note:
Loading a model from its configuration file does `),HTe=n(FQ,"STRONG",{});var gFt=s(HTe);MLr=r(gFt,"not"),gFt.forEach(t),ELr=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UTe=n(FQ,"CODE",{});var hFt=s(UTe);yLr=r(hFt,"from_pretrained()"),hFt.forEach(t),wLr=r(FQ,"to load the model weights."),FQ.forEach(t),ALr=i(Ai),JTe=n(Ai,"P",{});var pFt=s(JTe);LLr=r(pFt,"Examples:"),pFt.forEach(t),BLr=i(Ai),m(v7.$$.fragment,Ai),Ai.forEach(t),xLr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(T7.$$.fragment,$a),kLr=i($a),YTe=n($a,"P",{});var _Ft=s(YTe);RLr=r(_Ft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Ft.forEach(t),SLr=i($a),In=n($a,"P",{});var J5=s(In);PLr=r(J5,"The model class to instantiate is selected based on the "),KTe=n(J5,"CODE",{});var uFt=s(KTe);$Lr=r(uFt,"model_type"),uFt.forEach(t),ILr=r(J5,` property of the config object (either
passed as an argument or loaded from `),ZTe=n(J5,"CODE",{});var bFt=s(ZTe);jLr=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),NLr=r(J5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(J5,"CODE",{});var vFt=s(e1e);DLr=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),qLr=r(J5,":"),J5.forEach(t),OLr=i($a),Se=n($a,"UL",{});var Go=s(Se);RE=n(Go,"LI",{});var bxe=s(RE);o1e=n(bxe,"STRONG",{});var TFt=s(o1e);GLr=r(TFt,"albert"),TFt.forEach(t),XLr=r(bxe," \u2014 "),bz=n(bxe,"A",{href:!0});var FFt=s(bz);VLr=r(FFt,"FlaxAlbertForTokenClassification"),FFt.forEach(t),zLr=r(bxe," (ALBERT model)"),bxe.forEach(t),WLr=i(Go),SE=n(Go,"LI",{});var vxe=s(SE);r1e=n(vxe,"STRONG",{});var CFt=s(r1e);QLr=r(CFt,"bert"),CFt.forEach(t),HLr=r(vxe," \u2014 "),vz=n(vxe,"A",{href:!0});var MFt=s(vz);ULr=r(MFt,"FlaxBertForTokenClassification"),MFt.forEach(t),JLr=r(vxe," (BERT model)"),vxe.forEach(t),YLr=i(Go),PE=n(Go,"LI",{});var Txe=s(PE);t1e=n(Txe,"STRONG",{});var EFt=s(t1e);KLr=r(EFt,"big_bird"),EFt.forEach(t),ZLr=r(Txe," \u2014 "),Tz=n(Txe,"A",{href:!0});var yFt=s(Tz);e7r=r(yFt,"FlaxBigBirdForTokenClassification"),yFt.forEach(t),o7r=r(Txe," (BigBird model)"),Txe.forEach(t),r7r=i(Go),$E=n(Go,"LI",{});var Fxe=s($E);a1e=n(Fxe,"STRONG",{});var wFt=s(a1e);t7r=r(wFt,"distilbert"),wFt.forEach(t),a7r=r(Fxe," \u2014 "),Fz=n(Fxe,"A",{href:!0});var AFt=s(Fz);n7r=r(AFt,"FlaxDistilBertForTokenClassification"),AFt.forEach(t),s7r=r(Fxe," (DistilBERT model)"),Fxe.forEach(t),l7r=i(Go),IE=n(Go,"LI",{});var Cxe=s(IE);n1e=n(Cxe,"STRONG",{});var LFt=s(n1e);i7r=r(LFt,"electra"),LFt.forEach(t),d7r=r(Cxe," \u2014 "),Cz=n(Cxe,"A",{href:!0});var BFt=s(Cz);c7r=r(BFt,"FlaxElectraForTokenClassification"),BFt.forEach(t),f7r=r(Cxe," (ELECTRA model)"),Cxe.forEach(t),m7r=i(Go),jE=n(Go,"LI",{});var Mxe=s(jE);s1e=n(Mxe,"STRONG",{});var xFt=s(s1e);g7r=r(xFt,"roberta"),xFt.forEach(t),h7r=r(Mxe," \u2014 "),Mz=n(Mxe,"A",{href:!0});var kFt=s(Mz);p7r=r(kFt,"FlaxRobertaForTokenClassification"),kFt.forEach(t),_7r=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),u7r=i(Go),NE=n(Go,"LI",{});var Exe=s(NE);l1e=n(Exe,"STRONG",{});var RFt=s(l1e);b7r=r(RFt,"roformer"),RFt.forEach(t),v7r=r(Exe," \u2014 "),Ez=n(Exe,"A",{href:!0});var SFt=s(Ez);T7r=r(SFt,"FlaxRoFormerForTokenClassification"),SFt.forEach(t),F7r=r(Exe," (RoFormer model)"),Exe.forEach(t),C7r=i(Go),DE=n(Go,"LI",{});var yxe=s(DE);i1e=n(yxe,"STRONG",{});var PFt=s(i1e);M7r=r(PFt,"xlm-roberta"),PFt.forEach(t),E7r=r(yxe," \u2014 "),yz=n(yxe,"A",{href:!0});var $Ft=s(yz);y7r=r($Ft,"FlaxXLMRobertaForTokenClassification"),$Ft.forEach(t),w7r=r(yxe," (XLM-RoBERTa model)"),yxe.forEach(t),Go.forEach(t),A7r=i($a),d1e=n($a,"P",{});var IFt=s(d1e);L7r=r(IFt,"Examples:"),IFt.forEach(t),B7r=i($a),m(F7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),kRe=i(c),Mf=n(c,"H2",{class:!0});var XPe=s(Mf);qE=n(XPe,"A",{id:!0,class:!0,href:!0});var jFt=s(qE);c1e=n(jFt,"SPAN",{});var NFt=s(c1e);m(C7.$$.fragment,NFt),NFt.forEach(t),jFt.forEach(t),x7r=i(XPe),f1e=n(XPe,"SPAN",{});var DFt=s(f1e);k7r=r(DFt,"FlaxAutoModelForMultipleChoice"),DFt.forEach(t),XPe.forEach(t),RRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(M7.$$.fragment,Li),R7r=i(Li),Ef=n(Li,"P",{});var CQ=s(Ef);S7r=r(CQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),m1e=n(CQ,"CODE",{});var qFt=s(m1e);P7r=r(qFt,"from_pretrained()"),qFt.forEach(t),$7r=r(CQ,"class method or the "),g1e=n(CQ,"CODE",{});var OFt=s(g1e);I7r=r(OFt,"from_config()"),OFt.forEach(t),j7r=r(CQ,`class
method.`),CQ.forEach(t),N7r=i(Li),E7=n(Li,"P",{});var VPe=s(E7);D7r=r(VPe,"This class cannot be instantiated directly using "),h1e=n(VPe,"CODE",{});var GFt=s(h1e);q7r=r(GFt,"__init__()"),GFt.forEach(t),O7r=r(VPe," (throws an error)."),VPe.forEach(t),G7r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(y7.$$.fragment,Bi),X7r=i(Bi),p1e=n(Bi,"P",{});var XFt=s(p1e);V7r=r(XFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XFt.forEach(t),z7r=i(Bi),yf=n(Bi,"P",{});var MQ=s(yf);W7r=r(MQ,`Note:
Loading a model from its configuration file does `),_1e=n(MQ,"STRONG",{});var VFt=s(_1e);Q7r=r(VFt,"not"),VFt.forEach(t),H7r=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=n(MQ,"CODE",{});var zFt=s(u1e);U7r=r(zFt,"from_pretrained()"),zFt.forEach(t),J7r=r(MQ,"to load the model weights."),MQ.forEach(t),Y7r=i(Bi),b1e=n(Bi,"P",{});var WFt=s(b1e);K7r=r(WFt,"Examples:"),WFt.forEach(t),Z7r=i(Bi),m(w7.$$.fragment,Bi),Bi.forEach(t),e8r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(A7.$$.fragment,Ia),o8r=i(Ia),v1e=n(Ia,"P",{});var QFt=s(v1e);r8r=r(QFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QFt.forEach(t),t8r=i(Ia),jn=n(Ia,"P",{});var Y5=s(jn);a8r=r(Y5,"The model class to instantiate is selected based on the "),T1e=n(Y5,"CODE",{});var HFt=s(T1e);n8r=r(HFt,"model_type"),HFt.forEach(t),s8r=r(Y5,` property of the config object (either
passed as an argument or loaded from `),F1e=n(Y5,"CODE",{});var UFt=s(F1e);l8r=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),i8r=r(Y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(Y5,"CODE",{});var JFt=s(C1e);d8r=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),c8r=r(Y5,":"),Y5.forEach(t),f8r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);OE=n(Xo,"LI",{});var wxe=s(OE);M1e=n(wxe,"STRONG",{});var YFt=s(M1e);m8r=r(YFt,"albert"),YFt.forEach(t),g8r=r(wxe," \u2014 "),wz=n(wxe,"A",{href:!0});var KFt=s(wz);h8r=r(KFt,"FlaxAlbertForMultipleChoice"),KFt.forEach(t),p8r=r(wxe," (ALBERT model)"),wxe.forEach(t),_8r=i(Xo),GE=n(Xo,"LI",{});var Axe=s(GE);E1e=n(Axe,"STRONG",{});var ZFt=s(E1e);u8r=r(ZFt,"bert"),ZFt.forEach(t),b8r=r(Axe," \u2014 "),Az=n(Axe,"A",{href:!0});var eCt=s(Az);v8r=r(eCt,"FlaxBertForMultipleChoice"),eCt.forEach(t),T8r=r(Axe," (BERT model)"),Axe.forEach(t),F8r=i(Xo),XE=n(Xo,"LI",{});var Lxe=s(XE);y1e=n(Lxe,"STRONG",{});var oCt=s(y1e);C8r=r(oCt,"big_bird"),oCt.forEach(t),M8r=r(Lxe," \u2014 "),Lz=n(Lxe,"A",{href:!0});var rCt=s(Lz);E8r=r(rCt,"FlaxBigBirdForMultipleChoice"),rCt.forEach(t),y8r=r(Lxe," (BigBird model)"),Lxe.forEach(t),w8r=i(Xo),VE=n(Xo,"LI",{});var Bxe=s(VE);w1e=n(Bxe,"STRONG",{});var tCt=s(w1e);A8r=r(tCt,"distilbert"),tCt.forEach(t),L8r=r(Bxe," \u2014 "),Bz=n(Bxe,"A",{href:!0});var aCt=s(Bz);B8r=r(aCt,"FlaxDistilBertForMultipleChoice"),aCt.forEach(t),x8r=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),k8r=i(Xo),zE=n(Xo,"LI",{});var xxe=s(zE);A1e=n(xxe,"STRONG",{});var nCt=s(A1e);R8r=r(nCt,"electra"),nCt.forEach(t),S8r=r(xxe," \u2014 "),xz=n(xxe,"A",{href:!0});var sCt=s(xz);P8r=r(sCt,"FlaxElectraForMultipleChoice"),sCt.forEach(t),$8r=r(xxe," (ELECTRA model)"),xxe.forEach(t),I8r=i(Xo),WE=n(Xo,"LI",{});var kxe=s(WE);L1e=n(kxe,"STRONG",{});var lCt=s(L1e);j8r=r(lCt,"roberta"),lCt.forEach(t),N8r=r(kxe," \u2014 "),kz=n(kxe,"A",{href:!0});var iCt=s(kz);D8r=r(iCt,"FlaxRobertaForMultipleChoice"),iCt.forEach(t),q8r=r(kxe," (RoBERTa model)"),kxe.forEach(t),O8r=i(Xo),QE=n(Xo,"LI",{});var Rxe=s(QE);B1e=n(Rxe,"STRONG",{});var dCt=s(B1e);G8r=r(dCt,"roformer"),dCt.forEach(t),X8r=r(Rxe," \u2014 "),Rz=n(Rxe,"A",{href:!0});var cCt=s(Rz);V8r=r(cCt,"FlaxRoFormerForMultipleChoice"),cCt.forEach(t),z8r=r(Rxe," (RoFormer model)"),Rxe.forEach(t),W8r=i(Xo),HE=n(Xo,"LI",{});var Sxe=s(HE);x1e=n(Sxe,"STRONG",{});var fCt=s(x1e);Q8r=r(fCt,"xlm-roberta"),fCt.forEach(t),H8r=r(Sxe," \u2014 "),Sz=n(Sxe,"A",{href:!0});var mCt=s(Sz);U8r=r(mCt,"FlaxXLMRobertaForMultipleChoice"),mCt.forEach(t),J8r=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),Xo.forEach(t),Y8r=i(Ia),k1e=n(Ia,"P",{});var gCt=s(k1e);K8r=r(gCt,"Examples:"),gCt.forEach(t),Z8r=i(Ia),m(L7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),SRe=i(c),wf=n(c,"H2",{class:!0});var zPe=s(wf);UE=n(zPe,"A",{id:!0,class:!0,href:!0});var hCt=s(UE);R1e=n(hCt,"SPAN",{});var pCt=s(R1e);m(B7.$$.fragment,pCt),pCt.forEach(t),hCt.forEach(t),e9r=i(zPe),S1e=n(zPe,"SPAN",{});var _Ct=s(S1e);o9r=r(_Ct,"FlaxAutoModelForNextSentencePrediction"),_Ct.forEach(t),zPe.forEach(t),PRe=i(c),Or=n(c,"DIV",{class:!0});var xi=s(Or);m(x7.$$.fragment,xi),r9r=i(xi),Af=n(xi,"P",{});var EQ=s(Af);t9r=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),P1e=n(EQ,"CODE",{});var uCt=s(P1e);a9r=r(uCt,"from_pretrained()"),uCt.forEach(t),n9r=r(EQ,"class method or the "),$1e=n(EQ,"CODE",{});var bCt=s($1e);s9r=r(bCt,"from_config()"),bCt.forEach(t),l9r=r(EQ,`class
method.`),EQ.forEach(t),i9r=i(xi),k7=n(xi,"P",{});var WPe=s(k7);d9r=r(WPe,"This class cannot be instantiated directly using "),I1e=n(WPe,"CODE",{});var vCt=s(I1e);c9r=r(vCt,"__init__()"),vCt.forEach(t),f9r=r(WPe," (throws an error)."),WPe.forEach(t),m9r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(R7.$$.fragment,ki),g9r=i(ki),j1e=n(ki,"P",{});var TCt=s(j1e);h9r=r(TCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TCt.forEach(t),p9r=i(ki),Lf=n(ki,"P",{});var yQ=s(Lf);_9r=r(yQ,`Note:
Loading a model from its configuration file does `),N1e=n(yQ,"STRONG",{});var FCt=s(N1e);u9r=r(FCt,"not"),FCt.forEach(t),b9r=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),D1e=n(yQ,"CODE",{});var CCt=s(D1e);v9r=r(CCt,"from_pretrained()"),CCt.forEach(t),T9r=r(yQ,"to load the model weights."),yQ.forEach(t),F9r=i(ki),q1e=n(ki,"P",{});var MCt=s(q1e);C9r=r(MCt,"Examples:"),MCt.forEach(t),M9r=i(ki),m(S7.$$.fragment,ki),ki.forEach(t),E9r=i(xi),Io=n(xi,"DIV",{class:!0});var ja=s(Io);m(P7.$$.fragment,ja),y9r=i(ja),O1e=n(ja,"P",{});var ECt=s(O1e);w9r=r(ECt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ECt.forEach(t),A9r=i(ja),Nn=n(ja,"P",{});var K5=s(Nn);L9r=r(K5,"The model class to instantiate is selected based on the "),G1e=n(K5,"CODE",{});var yCt=s(G1e);B9r=r(yCt,"model_type"),yCt.forEach(t),x9r=r(K5,` property of the config object (either
passed as an argument or loaded from `),X1e=n(K5,"CODE",{});var wCt=s(X1e);k9r=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),R9r=r(K5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(K5,"CODE",{});var ACt=s(V1e);S9r=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),P9r=r(K5,":"),K5.forEach(t),$9r=i(ja),z1e=n(ja,"UL",{});var LCt=s(z1e);JE=n(LCt,"LI",{});var Pxe=s(JE);W1e=n(Pxe,"STRONG",{});var BCt=s(W1e);I9r=r(BCt,"bert"),BCt.forEach(t),j9r=r(Pxe," \u2014 "),Pz=n(Pxe,"A",{href:!0});var xCt=s(Pz);N9r=r(xCt,"FlaxBertForNextSentencePrediction"),xCt.forEach(t),D9r=r(Pxe," (BERT model)"),Pxe.forEach(t),LCt.forEach(t),q9r=i(ja),Q1e=n(ja,"P",{});var kCt=s(Q1e);O9r=r(kCt,"Examples:"),kCt.forEach(t),G9r=i(ja),m($7.$$.fragment,ja),ja.forEach(t),xi.forEach(t),$Re=i(c),Bf=n(c,"H2",{class:!0});var QPe=s(Bf);YE=n(QPe,"A",{id:!0,class:!0,href:!0});var RCt=s(YE);H1e=n(RCt,"SPAN",{});var SCt=s(H1e);m(I7.$$.fragment,SCt),SCt.forEach(t),RCt.forEach(t),X9r=i(QPe),U1e=n(QPe,"SPAN",{});var PCt=s(U1e);V9r=r(PCt,"FlaxAutoModelForImageClassification"),PCt.forEach(t),QPe.forEach(t),IRe=i(c),Gr=n(c,"DIV",{class:!0});var Ri=s(Gr);m(j7.$$.fragment,Ri),z9r=i(Ri),xf=n(Ri,"P",{});var wQ=s(xf);W9r=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),J1e=n(wQ,"CODE",{});var $Ct=s(J1e);Q9r=r($Ct,"from_pretrained()"),$Ct.forEach(t),H9r=r(wQ,"class method or the "),Y1e=n(wQ,"CODE",{});var ICt=s(Y1e);U9r=r(ICt,"from_config()"),ICt.forEach(t),J9r=r(wQ,`class
method.`),wQ.forEach(t),Y9r=i(Ri),N7=n(Ri,"P",{});var HPe=s(N7);K9r=r(HPe,"This class cannot be instantiated directly using "),K1e=n(HPe,"CODE",{});var jCt=s(K1e);Z9r=r(jCt,"__init__()"),jCt.forEach(t),eBr=r(HPe," (throws an error)."),HPe.forEach(t),oBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(D7.$$.fragment,Si),rBr=i(Si),Z1e=n(Si,"P",{});var NCt=s(Z1e);tBr=r(NCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NCt.forEach(t),aBr=i(Si),kf=n(Si,"P",{});var AQ=s(kf);nBr=r(AQ,`Note:
Loading a model from its configuration file does `),eFe=n(AQ,"STRONG",{});var DCt=s(eFe);sBr=r(DCt,"not"),DCt.forEach(t),lBr=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oFe=n(AQ,"CODE",{});var qCt=s(oFe);iBr=r(qCt,"from_pretrained()"),qCt.forEach(t),dBr=r(AQ,"to load the model weights."),AQ.forEach(t),cBr=i(Si),rFe=n(Si,"P",{});var OCt=s(rFe);fBr=r(OCt,"Examples:"),OCt.forEach(t),mBr=i(Si),m(q7.$$.fragment,Si),Si.forEach(t),gBr=i(Ri),jo=n(Ri,"DIV",{class:!0});var Na=s(jo);m(O7.$$.fragment,Na),hBr=i(Na),tFe=n(Na,"P",{});var GCt=s(tFe);pBr=r(GCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GCt.forEach(t),_Br=i(Na),Dn=n(Na,"P",{});var Z5=s(Dn);uBr=r(Z5,"The model class to instantiate is selected based on the "),aFe=n(Z5,"CODE",{});var XCt=s(aFe);bBr=r(XCt,"model_type"),XCt.forEach(t),vBr=r(Z5,` property of the config object (either
passed as an argument or loaded from `),nFe=n(Z5,"CODE",{});var VCt=s(nFe);TBr=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),FBr=r(Z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=n(Z5,"CODE",{});var zCt=s(sFe);CBr=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),MBr=r(Z5,":"),Z5.forEach(t),EBr=i(Na),G7=n(Na,"UL",{});var UPe=s(G7);KE=n(UPe,"LI",{});var $xe=s(KE);lFe=n($xe,"STRONG",{});var WCt=s(lFe);yBr=r(WCt,"beit"),WCt.forEach(t),wBr=r($xe," \u2014 "),$z=n($xe,"A",{href:!0});var QCt=s($z);ABr=r(QCt,"FlaxBeitForImageClassification"),QCt.forEach(t),LBr=r($xe," (BEiT model)"),$xe.forEach(t),BBr=i(UPe),ZE=n(UPe,"LI",{});var Ixe=s(ZE);iFe=n(Ixe,"STRONG",{});var HCt=s(iFe);xBr=r(HCt,"vit"),HCt.forEach(t),kBr=r(Ixe," \u2014 "),Iz=n(Ixe,"A",{href:!0});var UCt=s(Iz);RBr=r(UCt,"FlaxViTForImageClassification"),UCt.forEach(t),SBr=r(Ixe," (ViT model)"),Ixe.forEach(t),UPe.forEach(t),PBr=i(Na),dFe=n(Na,"P",{});var JCt=s(dFe);$Br=r(JCt,"Examples:"),JCt.forEach(t),IBr=i(Na),m(X7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),jRe=i(c),Rf=n(c,"H2",{class:!0});var JPe=s(Rf);e5=n(JPe,"A",{id:!0,class:!0,href:!0});var YCt=s(e5);cFe=n(YCt,"SPAN",{});var KCt=s(cFe);m(V7.$$.fragment,KCt),KCt.forEach(t),YCt.forEach(t),jBr=i(JPe),fFe=n(JPe,"SPAN",{});var ZCt=s(fFe);NBr=r(ZCt,"FlaxAutoModelForVision2Seq"),ZCt.forEach(t),JPe.forEach(t),NRe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(z7.$$.fragment,Pi),DBr=i(Pi),Sf=n(Pi,"P",{});var LQ=s(Sf);qBr=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mFe=n(LQ,"CODE",{});var eMt=s(mFe);OBr=r(eMt,"from_pretrained()"),eMt.forEach(t),GBr=r(LQ,"class method or the "),gFe=n(LQ,"CODE",{});var oMt=s(gFe);XBr=r(oMt,"from_config()"),oMt.forEach(t),VBr=r(LQ,`class
method.`),LQ.forEach(t),zBr=i(Pi),W7=n(Pi,"P",{});var YPe=s(W7);WBr=r(YPe,"This class cannot be instantiated directly using "),hFe=n(YPe,"CODE",{});var rMt=s(hFe);QBr=r(rMt,"__init__()"),rMt.forEach(t),HBr=r(YPe," (throws an error)."),YPe.forEach(t),UBr=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);m(Q7.$$.fragment,$i),JBr=i($i),pFe=n($i,"P",{});var tMt=s(pFe);YBr=r(tMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tMt.forEach(t),KBr=i($i),Pf=n($i,"P",{});var BQ=s(Pf);ZBr=r(BQ,`Note:
Loading a model from its configuration file does `),_Fe=n(BQ,"STRONG",{});var aMt=s(_Fe);exr=r(aMt,"not"),aMt.forEach(t),oxr=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uFe=n(BQ,"CODE",{});var nMt=s(uFe);rxr=r(nMt,"from_pretrained()"),nMt.forEach(t),txr=r(BQ,"to load the model weights."),BQ.forEach(t),axr=i($i),bFe=n($i,"P",{});var sMt=s(bFe);nxr=r(sMt,"Examples:"),sMt.forEach(t),sxr=i($i),m(H7.$$.fragment,$i),$i.forEach(t),lxr=i(Pi),No=n(Pi,"DIV",{class:!0});var Da=s(No);m(U7.$$.fragment,Da),ixr=i(Da),vFe=n(Da,"P",{});var lMt=s(vFe);dxr=r(lMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lMt.forEach(t),cxr=i(Da),qn=n(Da,"P",{});var ey=s(qn);fxr=r(ey,"The model class to instantiate is selected based on the "),TFe=n(ey,"CODE",{});var iMt=s(TFe);mxr=r(iMt,"model_type"),iMt.forEach(t),gxr=r(ey,` property of the config object (either
passed as an argument or loaded from `),FFe=n(ey,"CODE",{});var dMt=s(FFe);hxr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),pxr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(ey,"CODE",{});var cMt=s(CFe);_xr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),uxr=r(ey,":"),ey.forEach(t),bxr=i(Da),MFe=n(Da,"UL",{});var fMt=s(MFe);o5=n(fMt,"LI",{});var jxe=s(o5);EFe=n(jxe,"STRONG",{});var mMt=s(EFe);vxr=r(mMt,"vision-encoder-decoder"),mMt.forEach(t),Txr=r(jxe," \u2014 "),jz=n(jxe,"A",{href:!0});var gMt=s(jz);Fxr=r(gMt,"FlaxVisionEncoderDecoderModel"),gMt.forEach(t),Cxr=r(jxe," (Vision Encoder decoder model)"),jxe.forEach(t),fMt.forEach(t),Mxr=i(Da),yFe=n(Da,"P",{});var hMt=s(yFe);Exr=r(hMt,"Examples:"),hMt.forEach(t),yxr=i(Da),m(J7.$$.fragment,Da),Da.forEach(t),Pi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(MMt)),d(pe,"id","auto-classes"),d(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pe,"href","#auto-classes"),d(de,"class","relative group"),d(On,"href","/docs/transformers/pr_3/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_3/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_3/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Gf,"id","transformers.AutoConfig"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(e9,"href","/docs/transformers/pr_3/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(o9,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertConfig"),d(r9,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartConfig"),d(t9,"href","/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitConfig"),d(a9,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertConfig"),d(n9,"href","/docs/transformers/pr_3/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(s9,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdConfig"),d(l9,"href","/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(i9,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(d9,"href","/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(c9,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertConfig"),d(f9,"href","/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineConfig"),d(m9,"href","/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPConfig"),d(g9,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertConfig"),d(h9,"href","/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextConfig"),d(p9,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLConfig"),d(_9,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(u9,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(b9,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaConfig"),d(v9,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(T9,"href","/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTConfig"),d(F9,"href","/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrConfig"),d(C9,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertConfig"),d(M9,"href","/docs/transformers/pr_3/en/model_doc/dpr#transformers.DPRConfig"),d(E9,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraConfig"),d(y9,"href","/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(w9,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertConfig"),d(A9,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetConfig"),d(L9,"href","/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTConfig"),d(B9,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelConfig"),d(x9,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Config"),d(k9,"href","/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(R9,"href","/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJConfig"),d(S9,"href","/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertConfig"),d(P9,"href","/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertConfig"),d($9,"href","/docs/transformers/pr_3/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(I9,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(j9,"href","/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(N9,"href","/docs/transformers/pr_3/en/model_doc/led#transformers.LEDConfig"),d(D9,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerConfig"),d(q9,"href","/docs/transformers/pr_3/en/model_doc/luke#transformers.LukeConfig"),d(O9,"href","/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertConfig"),d(G9,"href","/docs/transformers/pr_3/en/model_doc/m2m_100#transformers.M2M100Config"),d(X9,"href","/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianConfig"),d(V9,"href","/docs/transformers/pr_3/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(z9,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartConfig"),d(W9,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Q9,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(H9,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetConfig"),d(U9,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Config"),d(J9,"href","/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Y9,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(K9,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusConfig"),d(Z9,"href","/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverConfig"),d(eB,"href","/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartConfig"),d(oB,"href","/docs/transformers/pr_3/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(rB,"href","/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(tB,"href","/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(aB,"href","/docs/transformers/pr_3/en/model_doc/rag#transformers.RagConfig"),d(nB,"href","/docs/transformers/pr_3/en/model_doc/realm#transformers.RealmConfig"),d(sB,"href","/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerConfig"),d(lB,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertConfig"),d(iB,"href","/docs/transformers/pr_3/en/model_doc/resnet#transformers.ResNetConfig"),d(dB,"href","/docs/transformers/pr_3/en/model_doc/retribert#transformers.RetriBertConfig"),d(cB,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaConfig"),d(fB,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerConfig"),d(mB,"href","/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerConfig"),d(gB,"href","/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWConfig"),d(hB,"href","/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDConfig"),d(pB,"href","/docs/transformers/pr_3/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(_B,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(uB,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(bB,"href","/docs/transformers/pr_3/en/model_doc/splinter#transformers.SplinterConfig"),d(vB,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(TB,"href","/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinConfig"),d(FB,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Config"),d(CB,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasConfig"),d(MB,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(EB,"href","/docs/transformers/pr_3/en/model_doc/trocr#transformers.TrOCRConfig"),d(yB,"href","/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(wB,"href","/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(AB,"href","/docs/transformers/pr_3/en/model_doc/van#transformers.VanConfig"),d(LB,"href","/docs/transformers/pr_3/en/model_doc/vilt#transformers.ViltConfig"),d(BB,"href","/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(xB,"href","/docs/transformers/pr_3/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(kB,"href","/docs/transformers/pr_3/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(RB,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTConfig"),d(SB,"href","/docs/transformers/pr_3/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(PB,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d($B,"href","/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMConfig"),d(IB,"href","/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMConfig"),d(jB,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMConfig"),d(NB,"href","/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(DB,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(qB,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(OB,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetConfig"),d(GB,"href","/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(kg,"class","docstring"),d(Wo,"class","docstring"),d(Rg,"id","transformers.AutoTokenizer"),d(Rg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(XB,"href","/docs/transformers/pr_3/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(VB,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertTokenizer"),d(zB,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(WB,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartTokenizer"),d(QB,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartTokenizerFast"),d(HB,"href","/docs/transformers/pr_3/en/model_doc/barthez#transformers.BarthezTokenizer"),d(UB,"href","/docs/transformers/pr_3/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(JB,"href","/docs/transformers/pr_3/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(YB,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertTokenizer"),d(KB,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertTokenizerFast"),d(ZB,"href","/docs/transformers/pr_3/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(ex,"href","/docs/transformers/pr_3/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(ox,"href","/docs/transformers/pr_3/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(rx,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(tx,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(ax,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(nx,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(sx,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(lx,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(ix,"href","/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(dx,"href","/docs/transformers/pr_3/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(cx,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertTokenizer"),d(fx,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(mx,"href","/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineTokenizer"),d(gx,"href","/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPTokenizer"),d(hx,"href","/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(px,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(_x,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(ux,"href","/docs/transformers/pr_3/en/model_doc/cpm#transformers.CpmTokenizer"),d(bx,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(vx,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Tx,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Fx,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Cx,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Mx,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Ex,"href","/docs/transformers/pr_3/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(yx,"href","/docs/transformers/pr_3/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(wx,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraTokenizer"),d(Ax,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Lx,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Bx,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetTokenizer"),d(xx,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(kx,"href","/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Rx,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Sx,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Px,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d($x,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Ix,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(jx,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Nx,"href","/docs/transformers/pr_3/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Dx,"href","/docs/transformers/pr_3/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(qx,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Ox,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Gx,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Xx,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Vx,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(zx,"href","/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Wx,"href","/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Qx,"href","/docs/transformers/pr_3/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(Hx,"href","/docs/transformers/pr_3/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(Ux,"href","/docs/transformers/pr_3/en/model_doc/led#transformers.LEDTokenizer"),d(Jx,"href","/docs/transformers/pr_3/en/model_doc/led#transformers.LEDTokenizerFast"),d(Yx,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerTokenizer"),d(Kx,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(Zx,"href","/docs/transformers/pr_3/en/model_doc/luke#transformers.LukeTokenizer"),d(ek,"href","/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(ok,"href","/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(rk,"href","/docs/transformers/pr_3/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(tk,"href","/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianTokenizer"),d(ak,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartTokenizer"),d(nk,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(sk,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(lk,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(ik,"href","/docs/transformers/pr_3/en/model_doc/mluke#transformers.MLukeTokenizer"),d(dk,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(ck,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(fk,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(mk,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(gk,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.T5Tokenizer"),d(hk,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.T5TokenizerFast"),d(pk,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(_k,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(uk,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(bk,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(vk,"href","/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Tk,"href","/docs/transformers/pr_3/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Fk,"href","/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Ck,"href","/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Mk,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertTokenizer"),d(Ek,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertTokenizerFast"),d(yk,"href","/docs/transformers/pr_3/en/model_doc/rag#transformers.RagTokenizer"),d(wk,"href","/docs/transformers/pr_3/en/model_doc/realm#transformers.RealmTokenizer"),d(Ak,"href","/docs/transformers/pr_3/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Lk,"href","/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Bk,"href","/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(xk,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertTokenizer"),d(kk,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Rk,"href","/docs/transformers/pr_3/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Sk,"href","/docs/transformers/pr_3/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Pk,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaTokenizer"),d($k,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Ik,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(jk,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Nk,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Dk,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(qk,"href","/docs/transformers/pr_3/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Ok,"href","/docs/transformers/pr_3/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Gk,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Xk,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.T5Tokenizer"),d(zk,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Wk,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasTokenizer"),d(Qk,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(Hk,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Uk,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(Jk,"href","/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMTokenizer"),d(Yk,"href","/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(Kk,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMTokenizer"),d(Zk,"href","/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(eR,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(oR,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(rR,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(tR,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(ih,"class","docstring"),d(Qo,"class","docstring"),d(dh,"id","transformers.AutoFeatureExtractor"),d(dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(aR,"href","/docs/transformers/pr_3/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(nR,"href","/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(sR,"href","/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(lR,"href","/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(iR,"href","/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(dR,"href","/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(cR,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(fR,"href","/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(mR,"href","/docs/transformers/pr_3/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(gR,"href","/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(hR,"href","/docs/transformers/pr_3/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(pR,"href","/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(_R,"href","/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(uR,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(bR,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(vR,"href","/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(TR,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(FR,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(CR,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring"),d(Bh,"class","docstring"),d(Ho,"class","docstring"),d(xh,"id","transformers.AutoProcessor"),d(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(MR,"href","/docs/transformers/pr_3/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(ER,"href","/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPProcessor"),d(yR,"href","/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(wR,"href","/docs/transformers/pr_3/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(AR,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(LR,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(BR,"href","/docs/transformers/pr_3/en/model_doc/trocr#transformers.TrOCRProcessor"),d(xR,"href","/docs/transformers/pr_3/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(kR,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(je,"class","docstring"),d(qh,"class","docstring"),d(Uo,"class","docstring"),d(Oh,"id","transformers.AutoModel"),d(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(Vr,"class","docstring"),d(RR,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertModel"),d(SR,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartModel"),d(PR,"href","/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitModel"),d($R,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertModel"),d(IR,"href","/docs/transformers/pr_3/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(jR,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdModel"),d(NR,"href","/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(DR,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(qR,"href","/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(OR,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertModel"),d(GR,"href","/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineModel"),d(XR,"href","/docs/transformers/pr_3/en/model_doc/clip#transformers.CLIPModel"),d(VR,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertModel"),d(zR,"href","/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextModel"),d(WR,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLModel"),d(QR,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(HR,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(UR,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaModel"),d(JR,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(YR,"href","/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTModel"),d(KR,"href","/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrModel"),d(ZR,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertModel"),d(eS,"href","/docs/transformers/pr_3/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(oS,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraModel"),d(rS,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertModel"),d(tS,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetModel"),d(aS,"href","/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTModel"),d(nS,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelModel"),d(sS,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelBaseModel"),d(lS,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2Model"),d(iS,"href","/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(dS,"href","/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJModel"),d(cS,"href","/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertModel"),d(fS,"href","/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertModel"),d(mS,"href","/docs/transformers/pr_3/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(gS,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(hS,"href","/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(pS,"href","/docs/transformers/pr_3/en/model_doc/led#transformers.LEDModel"),d(_S,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerModel"),d(uS,"href","/docs/transformers/pr_3/en/model_doc/luke#transformers.LukeModel"),d(bS,"href","/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertModel"),d(vS,"href","/docs/transformers/pr_3/en/model_doc/m2m_100#transformers.M2M100Model"),d(TS,"href","/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianModel"),d(FS,"href","/docs/transformers/pr_3/en/model_doc/maskformer#transformers.MaskFormerModel"),d(CS,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartModel"),d(MS,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(ES,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertModel"),d(yS,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetModel"),d(wS,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5Model"),d(AS,"href","/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerModel"),d(LS,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(BS,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusModel"),d(xS,"href","/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverModel"),d(kS,"href","/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartModel"),d(RS,"href","/docs/transformers/pr_3/en/model_doc/poolformer#transformers.PoolFormerModel"),d(SS,"href","/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(PS,"href","/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertModel"),d($S,"href","/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerModel"),d(IS,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertModel"),d(jS,"href","/docs/transformers/pr_3/en/model_doc/resnet#transformers.ResNetModel"),d(NS,"href","/docs/transformers/pr_3/en/model_doc/retribert#transformers.RetriBertModel"),d(DS,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaModel"),d(qS,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerModel"),d(OS,"href","/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerModel"),d(GS,"href","/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWModel"),d(XS,"href","/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDModel"),d(VS,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(zS,"href","/docs/transformers/pr_3/en/model_doc/splinter#transformers.SplinterModel"),d(WS,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(QS,"href","/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinModel"),d(HS,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.T5Model"),d(US,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasModel"),d(JS,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(YS,"href","/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechModel"),d(KS,"href","/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(ZS,"href","/docs/transformers/pr_3/en/model_doc/van#transformers.VanModel"),d(eP,"href","/docs/transformers/pr_3/en/model_doc/vilt#transformers.ViltModel"),d(oP,"href","/docs/transformers/pr_3/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(rP,"href","/docs/transformers/pr_3/en/model_doc/visual_bert#transformers.VisualBertModel"),d(tP,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTModel"),d(aP,"href","/docs/transformers/pr_3/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(nP,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(sP,"href","/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMModel"),d(lP,"href","/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMModel"),d(iP,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMModel"),d(dP,"href","/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(cP,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(fP,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(mP,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetModel"),d(gP,"href","/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring"),d(Jo,"class","docstring"),d(M_,"id","transformers.AutoModelForPreTraining"),d(M_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(zr,"class","docstring"),d(hP,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForPreTraining"),d(pP,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(_P,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForPreTraining"),d(uP,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(bP,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(vP,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(TP,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(FP,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(CP,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(MP,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(EP,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForPreTraining"),d(yP,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(wP,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForPreTraining"),d(AP,"href","/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(LP,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(BP,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(xP,"href","/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(kP,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(RP,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(SP,"href","/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(PP,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d($P,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(IP,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(jP,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(NP,"href","/docs/transformers/pr_3/en/model_doc/retribert#transformers.RetriBertModel"),d(DP,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(qP,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(OP,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(GP,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(XP,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(VP,"href","/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(zP,"href","/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(WP,"href","/docs/transformers/pr_3/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(QP,"href","/docs/transformers/pr_3/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(HP,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(UP,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(JP,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(YP,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(KP,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(cu,"id","transformers.AutoModelForCausalLM"),d(cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Wr,"class","docstring"),d(ZP,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForCausalLM"),d(e$,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertLMHeadModel"),d(o$,"href","/docs/transformers/pr_3/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(r$,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(t$,"href","/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(a$,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(n$,"href","/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(s$,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(l$,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(i$,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(d$,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForCausalLM"),d(c$,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(f$,"href","/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(m$,"href","/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(g$,"href","/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianForCausalLM"),d(h$,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForCausalLM"),d(p$,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(_$,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(u$,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(b$,"href","/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(v$,"href","/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(T$,"href","/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(F$,"href","/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(C$,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(M$,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(E$,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(y$,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(w$,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(A$,"href","/docs/transformers/pr_3/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(L$,"href","/docs/transformers/pr_3/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(B$,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(x$,"href","/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(k$,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(R$,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(S$,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(qe,"class","docstring"),d(Ko,"class","docstring"),d(Qu,"id","transformers.AutoModelForMaskedLM"),d(Qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qu,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(Qr,"class","docstring"),d(P$,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForMaskedLM"),d($$,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(I$,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForMaskedLM"),d(j$,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(N$,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(D$,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(q$,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(O$,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(G$,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(X$,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(V$,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(z$,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(W$,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Q$,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(H$,"href","/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(U$,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(J$,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(Y$,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(K$,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(Z$,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(eI,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(oI,"href","/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(rI,"href","/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(tI,"href","/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(aI,"href","/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(nI,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(sI,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(lI,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(iI,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(dI,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(cI,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(fI,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(mI,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(gI,"href","/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Oe,"class","docstring"),d(Zo,"class","docstring"),d(xb,"id","transformers.AutoModelForSeq2SeqLM"),d(xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xb,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Hr,"class","docstring"),d(hI,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(_I,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(bI,"href","/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(vI,"href","/docs/transformers/pr_3/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(TI,"href","/docs/transformers/pr_3/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(FI,"href","/docs/transformers/pr_3/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(CI,"href","/docs/transformers/pr_3/en/model_doc/marian#transformers.MarianMTModel"),d(MI,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(EI,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(yI,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(wI,"href","/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(AI,"href","/docs/transformers/pr_3/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_3/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(Hb,"id","transformers.AutoModelForSequenceClassification"),d(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hb,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(xI,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(kI,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForSequenceClassification"),d(RI,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForSequenceClassification"),d(SI,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(PI,"href","/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d($I,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(II,"href","/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(jI,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(NI,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(DI,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(qI,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(OI,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(GI,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(XI,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(VI,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(zI,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(WI,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(QI,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(HI,"href","/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(UI,"href","/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(JI,"href","/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(YI,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(KI,"href","/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_3/en/model_doc/led#transformers.LEDForSequenceClassification"),d(ej,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(oj,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(rj,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(tj,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(aj,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(nj,"href","/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(sj,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(lj,"href","/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(ij,"href","/docs/transformers/pr_3/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(dj,"href","/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(cj,"href","/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(fj,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(mj,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(gj,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(hj,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(pj,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(_j,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(uj,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(bj,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(vj,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Tj,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Fj,"href","/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Xe,"class","docstring"),d(or,"class","docstring"),d(G3,"id","transformers.AutoModelForMultipleChoice"),d(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G3,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(Jr,"class","docstring"),d(Cj,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(Mj,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Ej,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(yj,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(wj,"href","/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Aj,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Lj,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Bj,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(xj,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(kj,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Rj,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(Sj,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Pj,"href","/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d($j,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(jj,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Nj,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(qj,"href","/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Oj,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Gj,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Xj,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Vj,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(zj,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Wj,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Qj,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Hj,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Uj,"href","/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(b2,"id","transformers.AutoModelForNextSentencePrediction"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(Yr,"class","docstring"),d(Jj,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Yj,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Kj,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Zj,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(eN,"href","/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring"),d(tr,"class","docstring"),d(y2,"id","transformers.AutoModelForTokenClassification"),d(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y2,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(Kr,"class","docstring"),d(oN,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(rN,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForTokenClassification"),d(tN,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(aN,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(nN,"href","/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineForTokenClassification"),d(sN,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(lN,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(iN,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(dN,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(cN,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(fN,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(mN,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(gN,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(hN,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(pN,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(_N,"href","/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(uN,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(bN,"href","/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(vN,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(TN,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(FN,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(CN,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(MN,"href","/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(EN,"href","/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(yN,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(wN,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(AN,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(LN,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(BN,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(xN,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(kN,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(RN,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(SN,"href","/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(We,"class","docstring"),d(ar,"class","docstring"),d(sv,"id","transformers.AutoModelForQuestionAnswering"),d(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sv,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Zr,"class","docstring"),d(PN,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d($N,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(IN,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(jN,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(NN,"href","/docs/transformers/pr_3/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(DN,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(qN,"href","/docs/transformers/pr_3/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(ON,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(GN,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(XN,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(VN,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(zN,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(WN,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(QN,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(HN,"href","/docs/transformers/pr_3/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(UN,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(JN,"href","/docs/transformers/pr_3/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(YN,"href","/docs/transformers/pr_3/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(KN,"href","/docs/transformers/pr_3/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(ZN,"href","/docs/transformers/pr_3/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_3/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_3/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_3/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_3/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_3/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_3/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_3/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(pD,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(bD,"href","/docs/transformers/pr_3/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(Qv,"id","transformers.AutoModelForTableQuestionAnswering"),d(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qv,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(et,"class","docstring"),d(vD,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring"),d(sr,"class","docstring"),d(Jv,"id","transformers.AutoModelForImageClassification"),d(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jv,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(ot,"class","docstring"),d(TD,"href","/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitForImageClassification"),d(FD,"href","/docs/transformers/pr_3/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(CD,"href","/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTForImageClassification"),d(MD,"href","/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(ED,"href","/docs/transformers/pr_3/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(yD,"href","/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(wD,"href","/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(AD,"href","/docs/transformers/pr_3/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(LD,"href","/docs/transformers/pr_3/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(BD,"href","/docs/transformers/pr_3/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(xD,"href","/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(kD,"href","/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinForImageClassification"),d(RD,"href","/docs/transformers/pr_3/en/model_doc/van#transformers.VanForImageClassification"),d(SD,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring"),d(lr,"class","docstring"),d(lT,"id","transformers.AutoModelForVision2Seq"),d(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lT,"href","#transformers.AutoModelForVision2Seq"),d(Sd,"class","relative group"),d(rt,"class","docstring"),d(PD,"href","/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring"),d(ir,"class","docstring"),d(cT,"id","transformers.AutoModelForAudioClassification"),d(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cT,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tt,"class","docstring"),d($D,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(ID,"href","/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(jD,"href","/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(ND,"href","/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(DD,"href","/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(qD,"href","/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(OD,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(GD,"href","/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring"),d(dr,"class","docstring"),d(TT,"id","transformers.AutoModelForAudioFrameClassification"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(at,"class","docstring"),d(XD,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(VD,"href","/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(zD,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(WD,"href","/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring"),d(cr,"class","docstring"),d(wT,"id","transformers.AutoModelForCTC"),d(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wT,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(QD,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(HD,"href","/docs/transformers/pr_3/en/model_doc/hubert#transformers.HubertForCTC"),d(UD,"href","/docs/transformers/pr_3/en/model_doc/sew#transformers.SEWForCTC"),d(JD,"href","/docs/transformers/pr_3/en/model_doc/sew-d#transformers.SEWDForCTC"),d(YD,"href","/docs/transformers/pr_3/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(KD,"href","/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(ZD,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(eq,"href","/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(IT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(st,"class","docstring"),d(oq,"href","/docs/transformers/pr_3/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(rq,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring"),d(mr,"class","docstring"),d(qT,"id","transformers.AutoModelForAudioXVector"),d(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qT,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(lt,"class","docstring"),d(tq,"href","/docs/transformers/pr_3/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(aq,"href","/docs/transformers/pr_3/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(nq,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(sq,"href","/docs/transformers/pr_3/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring"),d(gr,"class","docstring"),d(WT,"id","transformers.AutoModelForMaskedImageModeling"),d(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WT,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(it,"class","docstring"),d(lq,"href","/docs/transformers/pr_3/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(iq,"href","/docs/transformers/pr_3/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(dq,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring"),d(hr,"class","docstring"),d(YT,"id","transformers.AutoModelForObjectDetection"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dt,"class","docstring"),d(cq,"href","/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring"),d(pr,"class","docstring"),d(e1,"id","transformers.AutoModelForImageSegmentation"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(ct,"class","docstring"),d(fq,"href","/docs/transformers/pr_3/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(t1,"id","transformers.AutoModelForSemanticSegmentation"),d(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t1,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(ft,"class","docstring"),d(mq,"href","/docs/transformers/pr_3/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(gq,"href","/docs/transformers/pr_3/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring"),d(ur,"class","docstring"),d(l1,"id","transformers.AutoModelForInstanceSegmentation"),d(l1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l1,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(hq,"href","/docs/transformers/pr_3/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring"),d(br,"class","docstring"),d(c1,"id","transformers.TFAutoModel"),d(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c1,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(pq,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertModel"),d(_q,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.TFBartModel"),d(uq,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertModel"),d(bq,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(vq,"href","/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Tq,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertModel"),d(Fq,"href","/docs/transformers/pr_3/en/model_doc/clip#transformers.TFCLIPModel"),d(Cq,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertModel"),d(Mq,"href","/docs/transformers/pr_3/en/model_doc/convnext#transformers.TFConvNextModel"),d(Eq,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.TFCTRLModel"),d(yq,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaModel"),d(wq,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Aq,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Lq,"href","/docs/transformers/pr_3/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Bq,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraModel"),d(xq,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(kq,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelModel"),d(Rq,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Sq,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Pq,"href","/docs/transformers/pr_3/en/model_doc/hubert#transformers.TFHubertModel"),d($q,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Iq,"href","/docs/transformers/pr_3/en/model_doc/led#transformers.TFLEDModel"),d(jq,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerModel"),d(Nq,"href","/docs/transformers/pr_3/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Dq,"href","/docs/transformers/pr_3/en/model_doc/marian#transformers.TFMarianModel"),d(qq,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.TFMBartModel"),d(Oq,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Gq,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Xq,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.TFMT5Model"),d(Vq,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(zq,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.TFPegasusModel"),d(Wq,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertModel"),d(Qq,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaModel"),d(Hq,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerModel"),d(Uq,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(Jq,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.TFT5Model"),d(Yq,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasModel"),d(Kq,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(Zq,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.TFViTModel"),d(eO,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(oO,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMModel"),d(rO,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(tO,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(K1,"id","transformers.TFAutoModelForPreTraining"),d(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K1,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(aO,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(nO,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(sO,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForPreTraining"),d(lO,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(iO,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(dO,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(cO,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(fO,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(mO,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(gO,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(hO,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(pO,"href","/docs/transformers/pr_3/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(_O,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(uO,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(bO,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(vO,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(TO,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(FO,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(CO,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(MO,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(EO,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(yO,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(FF,"id","transformers.TFAutoModelForCausalLM"),d(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FF,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(wO,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(AO,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(LO,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(BO,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(xO,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(kO,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(RO,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(SO,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(PO,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d($O,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(IO,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(SF,"id","transformers.TFAutoModelForImageClassification"),d(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SF,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(jO,"href","/docs/transformers/pr_3/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(NO,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(IF,"id","transformers.TFAutoModelForMaskedLM"),d(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IF,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(DO,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(qO,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(OO,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(GO,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(XO,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(VO,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(zO,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(WO,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(QO,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(HO,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(UO,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(JO,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(YO,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(KO,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(ZO,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(eG,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(oG,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(rG,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(tG,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(aG,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(tC,"id","transformers.TFAutoModelForSeq2SeqLM"),d(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tC,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(nG,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(sG,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(lG,"href","/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(iG,"href","/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(dG,"href","/docs/transformers/pr_3/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(cG,"href","/docs/transformers/pr_3/en/model_doc/marian#transformers.TFMarianMTModel"),d(fG,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(mG,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(gG,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(hG,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(hC,"id","transformers.TFAutoModelForSequenceClassification"),d(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hC,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(pG,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(_G,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(uG,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(bG,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(vG,"href","/docs/transformers/pr_3/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(TG,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(FG,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(CG,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(MG,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(EG,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(yG,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(wG,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(AG,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(LG,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(BG,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(xG,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(kG,"href","/docs/transformers/pr_3/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(RG,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(SG,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(PG,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d($G,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(IG,"href","/docs/transformers/pr_3/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(jG,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(NG,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(DG,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(qC,"id","transformers.TFAutoModelForMultipleChoice"),d(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qC,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(qG,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(OG,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(GG,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(XG,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(VG,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(zG,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(WG,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(QG,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(HG,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(UG,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(JG,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(YG,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(KG,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(ZG,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(eX,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(oX,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(rX,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(aM,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(Ft,"class","docstring"),d(tX,"href","/docs/transformers/pr_3/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(sM,"id","transformers.TFAutoModelForTokenClassification"),d(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sM,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(aX,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(nX,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(sX,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(lX,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(iX,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(dX,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(cX,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(fX,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(mX,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(gX,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(hX,"href","/docs/transformers/pr_3/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(pX,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(_X,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(uX,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(bX,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(vX,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(TX,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(FX,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(CX,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(MX,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(AM,"id","transformers.TFAutoModelForQuestionAnswering"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(EX,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(yX,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(wX,"href","/docs/transformers/pr_3/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(AX,"href","/docs/transformers/pr_3/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(LX,"href","/docs/transformers/pr_3/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(BX,"href","/docs/transformers/pr_3/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(xX,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(kX,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(RX,"href","/docs/transformers/pr_3/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(SX,"href","/docs/transformers/pr_3/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(PX,"href","/docs/transformers/pr_3/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d($X,"href","/docs/transformers/pr_3/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(IX,"href","/docs/transformers/pr_3/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(jX,"href","/docs/transformers/pr_3/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(NX,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(DX,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(qX,"href","/docs/transformers/pr_3/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(OX,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(GX,"href","/docs/transformers/pr_3/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(QM,"id","transformers.TFAutoModelForVision2Seq"),d(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QM,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(XX,"href","/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(UM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(VX,"href","/docs/transformers/pr_3/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(YM,"id","transformers.FlaxAutoModel"),d(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(zX,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertModel"),d(WX,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartModel"),d(QX,"href","/docs/transformers/pr_3/en/model_doc/beit#transformers.FlaxBeitModel"),d(HX,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertModel"),d(UX,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(JX,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(YX,"href","/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(KX,"href","/docs/transformers/pr_3/en/model_doc/clip#transformers.FlaxCLIPModel"),d(ZX,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(eV,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraModel"),d(oV,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(rV,"href","/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(tV,"href","/docs/transformers/pr_3/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(aV,"href","/docs/transformers/pr_3/en/model_doc/marian#transformers.FlaxMarianModel"),d(nV,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartModel"),d(sV,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.FlaxMT5Model"),d(lV,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(iV,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(dV,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(cV,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.FlaxT5Model"),d(fV,"href","/docs/transformers/pr_3/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(mV,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.FlaxViTModel"),d(gV,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hV,"href","/docs/transformers/pr_3/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(pV,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(M4,"id","transformers.FlaxAutoModelForCausalLM"),d(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M4,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(_V,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(uV,"href","/docs/transformers/pr_3/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(bV,"href","/docs/transformers/pr_3/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(vV,"href","/docs/transformers/pr_3/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(TV,"href","/docs/transformers/pr_3/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(B4,"id","transformers.FlaxAutoModelForPreTraining"),d(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B4,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(FV,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(CV,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(MV,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(EV,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(yV,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(wV,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(LV,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(BV,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(xV,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(kV,"href","/docs/transformers/pr_3/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(RV,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(G4,"id","transformers.FlaxAutoModelForMaskedLM"),d(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(SV,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(PV,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d($V,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(IV,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(jV,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(NV,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(DV,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(qV,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(OV,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(GV,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(Z4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(XV,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(VV,"href","/docs/transformers/pr_3/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(zV,"href","/docs/transformers/pr_3/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(WV,"href","/docs/transformers/pr_3/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(QV,"href","/docs/transformers/pr_3/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(HV,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UV,"href","/docs/transformers/pr_3/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_3/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(YV,"href","/docs/transformers/pr_3/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(dE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(KV,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(ZV,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(ez,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(oz,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(rz,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(tz,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(az,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(nz,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(sz,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(lz,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(jr,"class","docstring"),d(TE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(iz,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(dz,"href","/docs/transformers/pr_3/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(cz,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(fz,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(mz,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(gz,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(hz,"href","/docs/transformers/pr_3/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(pz,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(_z,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(uz,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Nr,"class","docstring"),d(kE,"id","transformers.FlaxAutoModelForTokenClassification"),d(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(bz,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(vz,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Tz,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Fz,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Cz,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Mz,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Ez,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(yz,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Dr,"class","docstring"),d(qE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(wz,"href","/docs/transformers/pr_3/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_3/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_3/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_3/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(kz,"href","/docs/transformers/pr_3/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_3/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_3/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(UE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(Pz,"href","/docs/transformers/pr_3/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Or,"class","docstring"),d(YE,"id","transformers.FlaxAutoModelForImageClassification"),d(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YE,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d($z,"href","/docs/transformers/pr_3/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Iz,"href","/docs/transformers/pr_3/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(jo,"class","docstring"),d(Gr,"class","docstring"),d(e5,"id","transformers.FlaxAutoModelForVision2Seq"),d(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e5,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(jt,"class","docstring"),d(jz,"href","/docs/transformers/pr_3/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,J),b(c,$e,u),b(c,de,u),e(de,pe),e(pe,io),g(fe,io,null),e(de,Me),e(de,Vo),e(Vo,ji),b(c,If,u),b(c,fa,u),e(fa,Ni),e(fa,Di),e(Di,oy),e(fa,jf),b(c,Be,u),b(c,co,u),e(co,qi),e(co,On),e(On,ry),e(co,Gn),e(co,Xn),e(Xn,ty),e(co,Oi),e(co,Vn),e(Vn,ay),e(co,Gi),b(c,Nf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,H8),e(_e,Xi),e(Xi,U8),e(_e,J8),b(c,zo,u),b(c,Oa,u),e(Oa,Y8),e(Oa,Df),e(Df,K8),e(Oa,KPe),b(c,Nxe,u),b(c,Vi,u),e(Vi,qf),e(qf,xQ),g(ny,xQ,null),e(Vi,ZPe),e(Vi,kQ),e(kQ,e$e),b(c,Dxe,u),b(c,zn,u),e(zn,o$e),e(zn,RQ),e(RQ,r$e),e(zn,t$e),e(zn,SQ),e(SQ,a$e),e(zn,n$e),b(c,qxe,u),g(sy,c,u),b(c,Oxe,u),b(c,Z8,u),e(Z8,s$e),b(c,Gxe,u),g(Of,c,u),b(c,Xxe,u),b(c,zi,u),e(zi,Gf),e(Gf,PQ),g(ly,PQ,null),e(zi,l$e),e(zi,$Q),e($Q,i$e),b(c,Vxe,u),b(c,Wo,u),g(iy,Wo,null),e(Wo,d$e),e(Wo,dy),e(dy,c$e),e(dy,e9),e(e9,f$e),e(dy,m$e),e(Wo,g$e),e(Wo,cy),e(cy,h$e),e(cy,IQ),e(IQ,p$e),e(cy,_$e),e(Wo,u$e),e(Wo,mo),g(fy,mo,null),e(mo,b$e),e(mo,jQ),e(jQ,v$e),e(mo,T$e),e(mo,Wi),e(Wi,F$e),e(Wi,NQ),e(NQ,C$e),e(Wi,M$e),e(Wi,DQ),e(DQ,E$e),e(Wi,y$e),e(mo,w$e),e(mo,v),e(v,Xf),e(Xf,qQ),e(qQ,A$e),e(Xf,L$e),e(Xf,o9),e(o9,B$e),e(Xf,x$e),e(v,k$e),e(v,Vf),e(Vf,OQ),e(OQ,R$e),e(Vf,S$e),e(Vf,r9),e(r9,P$e),e(Vf,$$e),e(v,I$e),e(v,zf),e(zf,GQ),e(GQ,j$e),e(zf,N$e),e(zf,t9),e(t9,D$e),e(zf,q$e),e(v,O$e),e(v,Wf),e(Wf,XQ),e(XQ,G$e),e(Wf,X$e),e(Wf,a9),e(a9,V$e),e(Wf,z$e),e(v,W$e),e(v,Qf),e(Qf,VQ),e(VQ,Q$e),e(Qf,H$e),e(Qf,n9),e(n9,U$e),e(Qf,J$e),e(v,Y$e),e(v,Hf),e(Hf,zQ),e(zQ,K$e),e(Hf,Z$e),e(Hf,s9),e(s9,eIe),e(Hf,oIe),e(v,rIe),e(v,Uf),e(Uf,WQ),e(WQ,tIe),e(Uf,aIe),e(Uf,l9),e(l9,nIe),e(Uf,sIe),e(v,lIe),e(v,Jf),e(Jf,QQ),e(QQ,iIe),e(Jf,dIe),e(Jf,i9),e(i9,cIe),e(Jf,fIe),e(v,mIe),e(v,Yf),e(Yf,HQ),e(HQ,gIe),e(Yf,hIe),e(Yf,d9),e(d9,pIe),e(Yf,_Ie),e(v,uIe),e(v,Kf),e(Kf,UQ),e(UQ,bIe),e(Kf,vIe),e(Kf,c9),e(c9,TIe),e(Kf,FIe),e(v,CIe),e(v,Zf),e(Zf,JQ),e(JQ,MIe),e(Zf,EIe),e(Zf,f9),e(f9,yIe),e(Zf,wIe),e(v,AIe),e(v,em),e(em,YQ),e(YQ,LIe),e(em,BIe),e(em,m9),e(m9,xIe),e(em,kIe),e(v,RIe),e(v,om),e(om,KQ),e(KQ,SIe),e(om,PIe),e(om,g9),e(g9,$Ie),e(om,IIe),e(v,jIe),e(v,rm),e(rm,ZQ),e(ZQ,NIe),e(rm,DIe),e(rm,h9),e(h9,qIe),e(rm,OIe),e(v,GIe),e(v,tm),e(tm,eH),e(eH,XIe),e(tm,VIe),e(tm,p9),e(p9,zIe),e(tm,WIe),e(v,QIe),e(v,am),e(am,oH),e(oH,HIe),e(am,UIe),e(am,_9),e(_9,JIe),e(am,YIe),e(v,KIe),e(v,nm),e(nm,rH),e(rH,ZIe),e(nm,eje),e(nm,u9),e(u9,oje),e(nm,rje),e(v,tje),e(v,sm),e(sm,tH),e(tH,aje),e(sm,nje),e(sm,b9),e(b9,sje),e(sm,lje),e(v,ije),e(v,lm),e(lm,aH),e(aH,dje),e(lm,cje),e(lm,v9),e(v9,fje),e(lm,mje),e(v,gje),e(v,im),e(im,nH),e(nH,hje),e(im,pje),e(im,T9),e(T9,_je),e(im,uje),e(v,bje),e(v,dm),e(dm,sH),e(sH,vje),e(dm,Tje),e(dm,F9),e(F9,Fje),e(dm,Cje),e(v,Mje),e(v,cm),e(cm,lH),e(lH,Eje),e(cm,yje),e(cm,C9),e(C9,wje),e(cm,Aje),e(v,Lje),e(v,fm),e(fm,iH),e(iH,Bje),e(fm,xje),e(fm,M9),e(M9,kje),e(fm,Rje),e(v,Sje),e(v,mm),e(mm,dH),e(dH,Pje),e(mm,$je),e(mm,E9),e(E9,Ije),e(mm,jje),e(v,Nje),e(v,gm),e(gm,cH),e(cH,Dje),e(gm,qje),e(gm,y9),e(y9,Oje),e(gm,Gje),e(v,Xje),e(v,hm),e(hm,fH),e(fH,Vje),e(hm,zje),e(hm,w9),e(w9,Wje),e(hm,Qje),e(v,Hje),e(v,pm),e(pm,mH),e(mH,Uje),e(pm,Jje),e(pm,A9),e(A9,Yje),e(pm,Kje),e(v,Zje),e(v,_m),e(_m,gH),e(gH,eNe),e(_m,oNe),e(_m,L9),e(L9,rNe),e(_m,tNe),e(v,aNe),e(v,um),e(um,hH),e(hH,nNe),e(um,sNe),e(um,B9),e(B9,lNe),e(um,iNe),e(v,dNe),e(v,bm),e(bm,pH),e(pH,cNe),e(bm,fNe),e(bm,x9),e(x9,mNe),e(bm,gNe),e(v,hNe),e(v,vm),e(vm,_H),e(_H,pNe),e(vm,_Ne),e(vm,k9),e(k9,uNe),e(vm,bNe),e(v,vNe),e(v,Tm),e(Tm,uH),e(uH,TNe),e(Tm,FNe),e(Tm,R9),e(R9,CNe),e(Tm,MNe),e(v,ENe),e(v,Fm),e(Fm,bH),e(bH,yNe),e(Fm,wNe),e(Fm,S9),e(S9,ANe),e(Fm,LNe),e(v,BNe),e(v,Cm),e(Cm,vH),e(vH,xNe),e(Cm,kNe),e(Cm,P9),e(P9,RNe),e(Cm,SNe),e(v,PNe),e(v,Mm),e(Mm,TH),e(TH,$Ne),e(Mm,INe),e(Mm,$9),e($9,jNe),e(Mm,NNe),e(v,DNe),e(v,Em),e(Em,FH),e(FH,qNe),e(Em,ONe),e(Em,I9),e(I9,GNe),e(Em,XNe),e(v,VNe),e(v,ym),e(ym,CH),e(CH,zNe),e(ym,WNe),e(ym,j9),e(j9,QNe),e(ym,HNe),e(v,UNe),e(v,wm),e(wm,MH),e(MH,JNe),e(wm,YNe),e(wm,N9),e(N9,KNe),e(wm,ZNe),e(v,eDe),e(v,Am),e(Am,EH),e(EH,oDe),e(Am,rDe),e(Am,D9),e(D9,tDe),e(Am,aDe),e(v,nDe),e(v,Lm),e(Lm,yH),e(yH,sDe),e(Lm,lDe),e(Lm,q9),e(q9,iDe),e(Lm,dDe),e(v,cDe),e(v,Bm),e(Bm,wH),e(wH,fDe),e(Bm,mDe),e(Bm,O9),e(O9,gDe),e(Bm,hDe),e(v,pDe),e(v,xm),e(xm,AH),e(AH,_De),e(xm,uDe),e(xm,G9),e(G9,bDe),e(xm,vDe),e(v,TDe),e(v,km),e(km,LH),e(LH,FDe),e(km,CDe),e(km,X9),e(X9,MDe),e(km,EDe),e(v,yDe),e(v,Rm),e(Rm,BH),e(BH,wDe),e(Rm,ADe),e(Rm,V9),e(V9,LDe),e(Rm,BDe),e(v,xDe),e(v,Sm),e(Sm,xH),e(xH,kDe),e(Sm,RDe),e(Sm,z9),e(z9,SDe),e(Sm,PDe),e(v,$De),e(v,Pm),e(Pm,kH),e(kH,IDe),e(Pm,jDe),e(Pm,W9),e(W9,NDe),e(Pm,DDe),e(v,qDe),e(v,$m),e($m,RH),e(RH,ODe),e($m,GDe),e($m,Q9),e(Q9,XDe),e($m,VDe),e(v,zDe),e(v,Im),e(Im,SH),e(SH,WDe),e(Im,QDe),e(Im,H9),e(H9,HDe),e(Im,UDe),e(v,JDe),e(v,jm),e(jm,PH),e(PH,YDe),e(jm,KDe),e(jm,U9),e(U9,ZDe),e(jm,eqe),e(v,oqe),e(v,Nm),e(Nm,$H),e($H,rqe),e(Nm,tqe),e(Nm,J9),e(J9,aqe),e(Nm,nqe),e(v,sqe),e(v,Dm),e(Dm,IH),e(IH,lqe),e(Dm,iqe),e(Dm,Y9),e(Y9,dqe),e(Dm,cqe),e(v,fqe),e(v,qm),e(qm,jH),e(jH,mqe),e(qm,gqe),e(qm,K9),e(K9,hqe),e(qm,pqe),e(v,_qe),e(v,Om),e(Om,NH),e(NH,uqe),e(Om,bqe),e(Om,Z9),e(Z9,vqe),e(Om,Tqe),e(v,Fqe),e(v,Gm),e(Gm,DH),e(DH,Cqe),e(Gm,Mqe),e(Gm,eB),e(eB,Eqe),e(Gm,yqe),e(v,wqe),e(v,Xm),e(Xm,qH),e(qH,Aqe),e(Xm,Lqe),e(Xm,oB),e(oB,Bqe),e(Xm,xqe),e(v,kqe),e(v,Vm),e(Vm,OH),e(OH,Rqe),e(Vm,Sqe),e(Vm,rB),e(rB,Pqe),e(Vm,$qe),e(v,Iqe),e(v,zm),e(zm,GH),e(GH,jqe),e(zm,Nqe),e(zm,tB),e(tB,Dqe),e(zm,qqe),e(v,Oqe),e(v,Wm),e(Wm,XH),e(XH,Gqe),e(Wm,Xqe),e(Wm,aB),e(aB,Vqe),e(Wm,zqe),e(v,Wqe),e(v,Qm),e(Qm,VH),e(VH,Qqe),e(Qm,Hqe),e(Qm,nB),e(nB,Uqe),e(Qm,Jqe),e(v,Yqe),e(v,Hm),e(Hm,zH),e(zH,Kqe),e(Hm,Zqe),e(Hm,sB),e(sB,eOe),e(Hm,oOe),e(v,rOe),e(v,Um),e(Um,WH),e(WH,tOe),e(Um,aOe),e(Um,lB),e(lB,nOe),e(Um,sOe),e(v,lOe),e(v,Jm),e(Jm,QH),e(QH,iOe),e(Jm,dOe),e(Jm,iB),e(iB,cOe),e(Jm,fOe),e(v,mOe),e(v,Ym),e(Ym,HH),e(HH,gOe),e(Ym,hOe),e(Ym,dB),e(dB,pOe),e(Ym,_Oe),e(v,uOe),e(v,Km),e(Km,UH),e(UH,bOe),e(Km,vOe),e(Km,cB),e(cB,TOe),e(Km,FOe),e(v,COe),e(v,Zm),e(Zm,JH),e(JH,MOe),e(Zm,EOe),e(Zm,fB),e(fB,yOe),e(Zm,wOe),e(v,AOe),e(v,eg),e(eg,YH),e(YH,LOe),e(eg,BOe),e(eg,mB),e(mB,xOe),e(eg,kOe),e(v,ROe),e(v,og),e(og,KH),e(KH,SOe),e(og,POe),e(og,gB),e(gB,$Oe),e(og,IOe),e(v,jOe),e(v,rg),e(rg,ZH),e(ZH,NOe),e(rg,DOe),e(rg,hB),e(hB,qOe),e(rg,OOe),e(v,GOe),e(v,tg),e(tg,eU),e(eU,XOe),e(tg,VOe),e(tg,pB),e(pB,zOe),e(tg,WOe),e(v,QOe),e(v,ag),e(ag,oU),e(oU,HOe),e(ag,UOe),e(ag,_B),e(_B,JOe),e(ag,YOe),e(v,KOe),e(v,ng),e(ng,rU),e(rU,ZOe),e(ng,eGe),e(ng,uB),e(uB,oGe),e(ng,rGe),e(v,tGe),e(v,sg),e(sg,tU),e(tU,aGe),e(sg,nGe),e(sg,bB),e(bB,sGe),e(sg,lGe),e(v,iGe),e(v,lg),e(lg,aU),e(aU,dGe),e(lg,cGe),e(lg,vB),e(vB,fGe),e(lg,mGe),e(v,gGe),e(v,ig),e(ig,nU),e(nU,hGe),e(ig,pGe),e(ig,TB),e(TB,_Ge),e(ig,uGe),e(v,bGe),e(v,dg),e(dg,sU),e(sU,vGe),e(dg,TGe),e(dg,FB),e(FB,FGe),e(dg,CGe),e(v,MGe),e(v,cg),e(cg,lU),e(lU,EGe),e(cg,yGe),e(cg,CB),e(CB,wGe),e(cg,AGe),e(v,LGe),e(v,fg),e(fg,iU),e(iU,BGe),e(fg,xGe),e(fg,MB),e(MB,kGe),e(fg,RGe),e(v,SGe),e(v,mg),e(mg,dU),e(dU,PGe),e(mg,$Ge),e(mg,EB),e(EB,IGe),e(mg,jGe),e(v,NGe),e(v,gg),e(gg,cU),e(cU,DGe),e(gg,qGe),e(gg,yB),e(yB,OGe),e(gg,GGe),e(v,XGe),e(v,hg),e(hg,fU),e(fU,VGe),e(hg,zGe),e(hg,wB),e(wB,WGe),e(hg,QGe),e(v,HGe),e(v,pg),e(pg,mU),e(mU,UGe),e(pg,JGe),e(pg,AB),e(AB,YGe),e(pg,KGe),e(v,ZGe),e(v,_g),e(_g,gU),e(gU,eXe),e(_g,oXe),e(_g,LB),e(LB,rXe),e(_g,tXe),e(v,aXe),e(v,ug),e(ug,hU),e(hU,nXe),e(ug,sXe),e(ug,BB),e(BB,lXe),e(ug,iXe),e(v,dXe),e(v,bg),e(bg,pU),e(pU,cXe),e(bg,fXe),e(bg,xB),e(xB,mXe),e(bg,gXe),e(v,hXe),e(v,vg),e(vg,_U),e(_U,pXe),e(vg,_Xe),e(vg,kB),e(kB,uXe),e(vg,bXe),e(v,vXe),e(v,Tg),e(Tg,uU),e(uU,TXe),e(Tg,FXe),e(Tg,RB),e(RB,CXe),e(Tg,MXe),e(v,EXe),e(v,Fg),e(Fg,bU),e(bU,yXe),e(Fg,wXe),e(Fg,SB),e(SB,AXe),e(Fg,LXe),e(v,BXe),e(v,Cg),e(Cg,vU),e(vU,xXe),e(Cg,kXe),e(Cg,PB),e(PB,RXe),e(Cg,SXe),e(v,PXe),e(v,Mg),e(Mg,TU),e(TU,$Xe),e(Mg,IXe),e(Mg,$B),e($B,jXe),e(Mg,NXe),e(v,DXe),e(v,Eg),e(Eg,FU),e(FU,qXe),e(Eg,OXe),e(Eg,IB),e(IB,GXe),e(Eg,XXe),e(v,VXe),e(v,yg),e(yg,CU),e(CU,zXe),e(yg,WXe),e(yg,jB),e(jB,QXe),e(yg,HXe),e(v,UXe),e(v,wg),e(wg,MU),e(MU,JXe),e(wg,YXe),e(wg,NB),e(NB,KXe),e(wg,ZXe),e(v,eVe),e(v,Ag),e(Ag,EU),e(EU,oVe),e(Ag,rVe),e(Ag,DB),e(DB,tVe),e(Ag,aVe),e(v,nVe),e(v,Lg),e(Lg,yU),e(yU,sVe),e(Lg,lVe),e(Lg,qB),e(qB,iVe),e(Lg,dVe),e(v,cVe),e(v,Bg),e(Bg,wU),e(wU,fVe),e(Bg,mVe),e(Bg,OB),e(OB,gVe),e(Bg,hVe),e(v,pVe),e(v,xg),e(xg,AU),e(AU,_Ve),e(xg,uVe),e(xg,GB),e(GB,bVe),e(xg,vVe),e(mo,TVe),e(mo,LU),e(LU,FVe),e(mo,CVe),g(my,mo,null),e(Wo,MVe),e(Wo,kg),g(gy,kg,null),e(kg,EVe),e(kg,BU),e(BU,yVe),b(c,zxe,u),b(c,Qi,u),e(Qi,Rg),e(Rg,xU),g(hy,xU,null),e(Qi,wVe),e(Qi,kU),e(kU,AVe),b(c,Wxe,u),b(c,Qo,u),g(py,Qo,null),e(Qo,LVe),e(Qo,_y),e(_y,BVe),e(_y,XB),e(XB,xVe),e(_y,kVe),e(Qo,RVe),e(Qo,uy),e(uy,SVe),e(uy,RU),e(RU,PVe),e(uy,$Ve),e(Qo,IVe),e(Qo,go),g(by,go,null),e(go,jVe),e(go,SU),e(SU,NVe),e(go,DVe),e(go,Ga),e(Ga,qVe),e(Ga,PU),e(PU,OVe),e(Ga,GVe),e(Ga,$U),e($U,XVe),e(Ga,VVe),e(Ga,IU),e(IU,zVe),e(Ga,WVe),e(go,QVe),e(go,E),e(E,Wn),e(Wn,jU),e(jU,HVe),e(Wn,UVe),e(Wn,VB),e(VB,JVe),e(Wn,YVe),e(Wn,zB),e(zB,KVe),e(Wn,ZVe),e(E,eze),e(E,Qn),e(Qn,NU),e(NU,oze),e(Qn,rze),e(Qn,WB),e(WB,tze),e(Qn,aze),e(Qn,QB),e(QB,nze),e(Qn,sze),e(E,lze),e(E,Hn),e(Hn,DU),e(DU,ize),e(Hn,dze),e(Hn,HB),e(HB,cze),e(Hn,fze),e(Hn,UB),e(UB,mze),e(Hn,gze),e(E,hze),e(E,Sg),e(Sg,qU),e(qU,pze),e(Sg,_ze),e(Sg,JB),e(JB,uze),e(Sg,bze),e(E,vze),e(E,Un),e(Un,OU),e(OU,Tze),e(Un,Fze),e(Un,YB),e(YB,Cze),e(Un,Mze),e(Un,KB),e(KB,Eze),e(Un,yze),e(E,wze),e(E,Pg),e(Pg,GU),e(GU,Aze),e(Pg,Lze),e(Pg,ZB),e(ZB,Bze),e(Pg,xze),e(E,kze),e(E,$g),e($g,XU),e(XU,Rze),e($g,Sze),e($g,ex),e(ex,Pze),e($g,$ze),e(E,Ize),e(E,Ig),e(Ig,VU),e(VU,jze),e(Ig,Nze),e(Ig,ox),e(ox,Dze),e(Ig,qze),e(E,Oze),e(E,Jn),e(Jn,zU),e(zU,Gze),e(Jn,Xze),e(Jn,rx),e(rx,Vze),e(Jn,zze),e(Jn,tx),e(tx,Wze),e(Jn,Qze),e(E,Hze),e(E,Yn),e(Yn,WU),e(WU,Uze),e(Yn,Jze),e(Yn,ax),e(ax,Yze),e(Yn,Kze),e(Yn,nx),e(nx,Zze),e(Yn,eWe),e(E,oWe),e(E,Kn),e(Kn,QU),e(QU,rWe),e(Kn,tWe),e(Kn,sx),e(sx,aWe),e(Kn,nWe),e(Kn,lx),e(lx,sWe),e(Kn,lWe),e(E,iWe),e(E,jg),e(jg,HU),e(HU,dWe),e(jg,cWe),e(jg,ix),e(ix,fWe),e(jg,mWe),e(E,gWe),e(E,Ng),e(Ng,UU),e(UU,hWe),e(Ng,pWe),e(Ng,dx),e(dx,_We),e(Ng,uWe),e(E,bWe),e(E,Zn),e(Zn,JU),e(JU,vWe),e(Zn,TWe),e(Zn,cx),e(cx,FWe),e(Zn,CWe),e(Zn,fx),e(fx,MWe),e(Zn,EWe),e(E,yWe),e(E,Dg),e(Dg,YU),e(YU,wWe),e(Dg,AWe),e(Dg,mx),e(mx,LWe),e(Dg,BWe),e(E,xWe),e(E,es),e(es,KU),e(KU,kWe),e(es,RWe),e(es,gx),e(gx,SWe),e(es,PWe),e(es,hx),e(hx,$We),e(es,IWe),e(E,jWe),e(E,os),e(os,ZU),e(ZU,NWe),e(os,DWe),e(os,px),e(px,qWe),e(os,OWe),e(os,_x),e(_x,GWe),e(os,XWe),e(E,VWe),e(E,rs),e(rs,eJ),e(eJ,zWe),e(rs,WWe),e(rs,ux),e(ux,QWe),e(rs,HWe),e(rs,oJ),e(oJ,UWe),e(rs,JWe),e(E,YWe),e(E,qg),e(qg,rJ),e(rJ,KWe),e(qg,ZWe),e(qg,bx),e(bx,eQe),e(qg,oQe),e(E,rQe),e(E,ts),e(ts,tJ),e(tJ,tQe),e(ts,aQe),e(ts,vx),e(vx,nQe),e(ts,sQe),e(ts,Tx),e(Tx,lQe),e(ts,iQe),e(E,dQe),e(E,Og),e(Og,aJ),e(aJ,cQe),e(Og,fQe),e(Og,Fx),e(Fx,mQe),e(Og,gQe),e(E,hQe),e(E,as),e(as,nJ),e(nJ,pQe),e(as,_Qe),e(as,Cx),e(Cx,uQe),e(as,bQe),e(as,Mx),e(Mx,vQe),e(as,TQe),e(E,FQe),e(E,ns),e(ns,sJ),e(sJ,CQe),e(ns,MQe),e(ns,Ex),e(Ex,EQe),e(ns,yQe),e(ns,yx),e(yx,wQe),e(ns,AQe),e(E,LQe),e(E,ss),e(ss,lJ),e(lJ,BQe),e(ss,xQe),e(ss,wx),e(wx,kQe),e(ss,RQe),e(ss,Ax),e(Ax,SQe),e(ss,PQe),e(E,$Qe),e(E,Gg),e(Gg,iJ),e(iJ,IQe),e(Gg,jQe),e(Gg,Lx),e(Lx,NQe),e(Gg,DQe),e(E,qQe),e(E,ls),e(ls,dJ),e(dJ,OQe),e(ls,GQe),e(ls,Bx),e(Bx,XQe),e(ls,VQe),e(ls,xx),e(xx,zQe),e(ls,WQe),e(E,QQe),e(E,Xg),e(Xg,cJ),e(cJ,HQe),e(Xg,UQe),e(Xg,kx),e(kx,JQe),e(Xg,YQe),e(E,KQe),e(E,is),e(is,fJ),e(fJ,ZQe),e(is,eHe),e(is,Rx),e(Rx,oHe),e(is,rHe),e(is,Sx),e(Sx,tHe),e(is,aHe),e(E,nHe),e(E,ds),e(ds,mJ),e(mJ,sHe),e(ds,lHe),e(ds,Px),e(Px,iHe),e(ds,dHe),e(ds,$x),e($x,cHe),e(ds,fHe),e(E,mHe),e(E,cs),e(cs,gJ),e(gJ,gHe),e(cs,hHe),e(cs,Ix),e(Ix,pHe),e(cs,_He),e(cs,jx),e(jx,uHe),e(cs,bHe),e(E,vHe),e(E,fs),e(fs,hJ),e(hJ,THe),e(fs,FHe),e(fs,Nx),e(Nx,CHe),e(fs,MHe),e(fs,Dx),e(Dx,EHe),e(fs,yHe),e(E,wHe),e(E,Vg),e(Vg,pJ),e(pJ,AHe),e(Vg,LHe),e(Vg,qx),e(qx,BHe),e(Vg,xHe),e(E,kHe),e(E,ms),e(ms,_J),e(_J,RHe),e(ms,SHe),e(ms,Ox),e(Ox,PHe),e(ms,$He),e(ms,Gx),e(Gx,IHe),e(ms,jHe),e(E,NHe),e(E,gs),e(gs,uJ),e(uJ,DHe),e(gs,qHe),e(gs,Xx),e(Xx,OHe),e(gs,GHe),e(gs,Vx),e(Vx,XHe),e(gs,VHe),e(E,zHe),e(E,hs),e(hs,bJ),e(bJ,WHe),e(hs,QHe),e(hs,zx),e(zx,HHe),e(hs,UHe),e(hs,Wx),e(Wx,JHe),e(hs,YHe),e(E,KHe),e(E,ps),e(ps,vJ),e(vJ,ZHe),e(ps,eUe),e(ps,Qx),e(Qx,oUe),e(ps,rUe),e(ps,Hx),e(Hx,tUe),e(ps,aUe),e(E,nUe),e(E,_s),e(_s,TJ),e(TJ,sUe),e(_s,lUe),e(_s,Ux),e(Ux,iUe),e(_s,dUe),e(_s,Jx),e(Jx,cUe),e(_s,fUe),e(E,mUe),e(E,us),e(us,FJ),e(FJ,gUe),e(us,hUe),e(us,Yx),e(Yx,pUe),e(us,_Ue),e(us,Kx),e(Kx,uUe),e(us,bUe),e(E,vUe),e(E,zg),e(zg,CJ),e(CJ,TUe),e(zg,FUe),e(zg,Zx),e(Zx,CUe),e(zg,MUe),e(E,EUe),e(E,bs),e(bs,MJ),e(MJ,yUe),e(bs,wUe),e(bs,ek),e(ek,AUe),e(bs,LUe),e(bs,ok),e(ok,BUe),e(bs,xUe),e(E,kUe),e(E,Wg),e(Wg,EJ),e(EJ,RUe),e(Wg,SUe),e(Wg,rk),e(rk,PUe),e(Wg,$Ue),e(E,IUe),e(E,Qg),e(Qg,yJ),e(yJ,jUe),e(Qg,NUe),e(Qg,tk),e(tk,DUe),e(Qg,qUe),e(E,OUe),e(E,vs),e(vs,wJ),e(wJ,GUe),e(vs,XUe),e(vs,ak),e(ak,VUe),e(vs,zUe),e(vs,nk),e(nk,WUe),e(vs,QUe),e(E,HUe),e(E,Ts),e(Ts,AJ),e(AJ,UUe),e(Ts,JUe),e(Ts,sk),e(sk,YUe),e(Ts,KUe),e(Ts,lk),e(lk,ZUe),e(Ts,eJe),e(E,oJe),e(E,Hg),e(Hg,LJ),e(LJ,rJe),e(Hg,tJe),e(Hg,ik),e(ik,aJe),e(Hg,nJe),e(E,sJe),e(E,Fs),e(Fs,BJ),e(BJ,lJe),e(Fs,iJe),e(Fs,dk),e(dk,dJe),e(Fs,cJe),e(Fs,ck),e(ck,fJe),e(Fs,mJe),e(E,gJe),e(E,Cs),e(Cs,xJ),e(xJ,hJe),e(Cs,pJe),e(Cs,fk),e(fk,_Je),e(Cs,uJe),e(Cs,mk),e(mk,bJe),e(Cs,vJe),e(E,TJe),e(E,Ms),e(Ms,kJ),e(kJ,FJe),e(Ms,CJe),e(Ms,gk),e(gk,MJe),e(Ms,EJe),e(Ms,hk),e(hk,yJe),e(Ms,wJe),e(E,AJe),e(E,Es),e(Es,RJ),e(RJ,LJe),e(Es,BJe),e(Es,pk),e(pk,xJe),e(Es,kJe),e(Es,_k),e(_k,RJe),e(Es,SJe),e(E,PJe),e(E,ys),e(ys,SJ),e(SJ,$Je),e(ys,IJe),e(ys,uk),e(uk,jJe),e(ys,NJe),e(ys,bk),e(bk,DJe),e(ys,qJe),e(E,OJe),e(E,Ug),e(Ug,PJ),e(PJ,GJe),e(Ug,XJe),e(Ug,vk),e(vk,VJe),e(Ug,zJe),e(E,WJe),e(E,Jg),e(Jg,$J),e($J,QJe),e(Jg,HJe),e(Jg,Tk),e(Tk,UJe),e(Jg,JJe),e(E,YJe),e(E,Yg),e(Yg,IJ),e(IJ,KJe),e(Yg,ZJe),e(Yg,Fk),e(Fk,eYe),e(Yg,oYe),e(E,rYe),e(E,Kg),e(Kg,jJ),e(jJ,tYe),e(Kg,aYe),e(Kg,Ck),e(Ck,nYe),e(Kg,sYe),e(E,lYe),e(E,ws),e(ws,NJ),e(NJ,iYe),e(ws,dYe),e(ws,Mk),e(Mk,cYe),e(ws,fYe),e(ws,Ek),e(Ek,mYe),e(ws,gYe),e(E,hYe),e(E,Zg),e(Zg,DJ),e(DJ,pYe),e(Zg,_Ye),e(Zg,yk),e(yk,uYe),e(Zg,bYe),e(E,vYe),e(E,As),e(As,qJ),e(qJ,TYe),e(As,FYe),e(As,wk),e(wk,CYe),e(As,MYe),e(As,Ak),e(Ak,EYe),e(As,yYe),e(E,wYe),e(E,Ls),e(Ls,OJ),e(OJ,AYe),e(Ls,LYe),e(Ls,Lk),e(Lk,BYe),e(Ls,xYe),e(Ls,Bk),e(Bk,kYe),e(Ls,RYe),e(E,SYe),e(E,Bs),e(Bs,GJ),e(GJ,PYe),e(Bs,$Ye),e(Bs,xk),e(xk,IYe),e(Bs,jYe),e(Bs,kk),e(kk,NYe),e(Bs,DYe),e(E,qYe),e(E,xs),e(xs,XJ),e(XJ,OYe),e(xs,GYe),e(xs,Rk),e(Rk,XYe),e(xs,VYe),e(xs,Sk),e(Sk,zYe),e(xs,WYe),e(E,QYe),e(E,ks),e(ks,VJ),e(VJ,HYe),e(ks,UYe),e(ks,Pk),e(Pk,JYe),e(ks,YYe),e(ks,$k),e($k,KYe),e(ks,ZYe),e(E,eKe),e(E,Rs),e(Rs,zJ),e(zJ,oKe),e(Rs,rKe),e(Rs,Ik),e(Ik,tKe),e(Rs,aKe),e(Rs,jk),e(jk,nKe),e(Rs,sKe),e(E,lKe),e(E,eh),e(eh,WJ),e(WJ,iKe),e(eh,dKe),e(eh,Nk),e(Nk,cKe),e(eh,fKe),e(E,mKe),e(E,oh),e(oh,QJ),e(QJ,gKe),e(oh,hKe),e(oh,Dk),e(Dk,pKe),e(oh,_Ke),e(E,uKe),e(E,Ss),e(Ss,HJ),e(HJ,bKe),e(Ss,vKe),e(Ss,qk),e(qk,TKe),e(Ss,FKe),e(Ss,Ok),e(Ok,CKe),e(Ss,MKe),e(E,EKe),e(E,Ps),e(Ps,UJ),e(UJ,yKe),e(Ps,wKe),e(Ps,Gk),e(Gk,AKe),e(Ps,LKe),e(Ps,Xk),e(Xk,BKe),e(Ps,xKe),e(E,kKe),e(E,$s),e($s,JJ),e(JJ,RKe),e($s,SKe),e($s,Vk),e(Vk,PKe),e($s,$Ke),e($s,zk),e(zk,IKe),e($s,jKe),e(E,NKe),e(E,rh),e(rh,YJ),e(YJ,DKe),e(rh,qKe),e(rh,Wk),e(Wk,OKe),e(rh,GKe),e(E,XKe),e(E,th),e(th,KJ),e(KJ,VKe),e(th,zKe),e(th,Qk),e(Qk,WKe),e(th,QKe),e(E,HKe),e(E,ah),e(ah,ZJ),e(ZJ,UKe),e(ah,JKe),e(ah,Hk),e(Hk,YKe),e(ah,KKe),e(E,ZKe),e(E,nh),e(nh,eY),e(eY,eZe),e(nh,oZe),e(nh,Uk),e(Uk,rZe),e(nh,tZe),e(E,aZe),e(E,Is),e(Is,oY),e(oY,nZe),e(Is,sZe),e(Is,Jk),e(Jk,lZe),e(Is,iZe),e(Is,Yk),e(Yk,dZe),e(Is,cZe),e(E,fZe),e(E,sh),e(sh,rY),e(rY,mZe),e(sh,gZe),e(sh,Kk),e(Kk,hZe),e(sh,pZe),e(E,_Ze),e(E,lh),e(lh,tY),e(tY,uZe),e(lh,bZe),e(lh,Zk),e(Zk,vZe),e(lh,TZe),e(E,FZe),e(E,js),e(js,aY),e(aY,CZe),e(js,MZe),e(js,eR),e(eR,EZe),e(js,yZe),e(js,oR),e(oR,wZe),e(js,AZe),e(E,LZe),e(E,Ns),e(Ns,nY),e(nY,BZe),e(Ns,xZe),e(Ns,rR),e(rR,kZe),e(Ns,RZe),e(Ns,tR),e(tR,SZe),e(Ns,PZe),e(go,$Ze),e(go,sY),e(sY,IZe),e(go,jZe),g(vy,go,null),e(Qo,NZe),e(Qo,ih),g(Ty,ih,null),e(ih,DZe),e(ih,lY),e(lY,qZe),b(c,Qxe,u),b(c,Hi,u),e(Hi,dh),e(dh,iY),g(Fy,iY,null),e(Hi,OZe),e(Hi,dY),e(dY,GZe),b(c,Hxe,u),b(c,Ho,u),g(Cy,Ho,null),e(Ho,XZe),e(Ho,My),e(My,VZe),e(My,aR),e(aR,zZe),e(My,WZe),e(Ho,QZe),e(Ho,Ey),e(Ey,HZe),e(Ey,cY),e(cY,UZe),e(Ey,JZe),e(Ho,YZe),e(Ho,Ie),g(yy,Ie,null),e(Ie,KZe),e(Ie,fY),e(fY,ZZe),e(Ie,eeo),e(Ie,Xa),e(Xa,oeo),e(Xa,mY),e(mY,reo),e(Xa,teo),e(Xa,gY),e(gY,aeo),e(Xa,neo),e(Xa,hY),e(hY,seo),e(Xa,leo),e(Ie,ieo),e(Ie,re),e(re,ch),e(ch,pY),e(pY,deo),e(ch,ceo),e(ch,nR),e(nR,feo),e(ch,meo),e(re,geo),e(re,fh),e(fh,_Y),e(_Y,heo),e(fh,peo),e(fh,sR),e(sR,_eo),e(fh,ueo),e(re,beo),e(re,mh),e(mh,uY),e(uY,veo),e(mh,Teo),e(mh,lR),e(lR,Feo),e(mh,Ceo),e(re,Meo),e(re,gh),e(gh,bY),e(bY,Eeo),e(gh,yeo),e(gh,iR),e(iR,weo),e(gh,Aeo),e(re,Leo),e(re,hh),e(hh,vY),e(vY,Beo),e(hh,xeo),e(hh,dR),e(dR,keo),e(hh,Reo),e(re,Seo),e(re,ph),e(ph,TY),e(TY,Peo),e(ph,$eo),e(ph,cR),e(cR,Ieo),e(ph,jeo),e(re,Neo),e(re,_h),e(_h,FY),e(FY,Deo),e(_h,qeo),e(_h,fR),e(fR,Oeo),e(_h,Geo),e(re,Xeo),e(re,uh),e(uh,CY),e(CY,Veo),e(uh,zeo),e(uh,mR),e(mR,Weo),e(uh,Qeo),e(re,Heo),e(re,bh),e(bh,MY),e(MY,Ueo),e(bh,Jeo),e(bh,gR),e(gR,Yeo),e(bh,Keo),e(re,Zeo),e(re,vh),e(vh,EY),e(EY,eoo),e(vh,ooo),e(vh,hR),e(hR,roo),e(vh,too),e(re,aoo),e(re,Th),e(Th,yY),e(yY,noo),e(Th,soo),e(Th,pR),e(pR,loo),e(Th,ioo),e(re,doo),e(re,Fh),e(Fh,wY),e(wY,coo),e(Fh,foo),e(Fh,_R),e(_R,moo),e(Fh,goo),e(re,hoo),e(re,Ch),e(Ch,AY),e(AY,poo),e(Ch,_oo),e(Ch,uR),e(uR,uoo),e(Ch,boo),e(re,voo),e(re,Mh),e(Mh,LY),e(LY,Too),e(Mh,Foo),e(Mh,bR),e(bR,Coo),e(Mh,Moo),e(re,Eoo),e(re,Eh),e(Eh,BY),e(BY,yoo),e(Eh,woo),e(Eh,vR),e(vR,Aoo),e(Eh,Loo),e(re,Boo),e(re,yh),e(yh,xY),e(xY,xoo),e(yh,koo),e(yh,TR),e(TR,Roo),e(yh,Soo),e(re,Poo),e(re,wh),e(wh,kY),e(kY,$oo),e(wh,Ioo),e(wh,FR),e(FR,joo),e(wh,Noo),e(re,Doo),e(re,Ah),e(Ah,RY),e(RY,qoo),e(Ah,Ooo),e(Ah,CR),e(CR,Goo),e(Ah,Xoo),e(Ie,Voo),g(Lh,Ie,null),e(Ie,zoo),e(Ie,SY),e(SY,Woo),e(Ie,Qoo),g(wy,Ie,null),e(Ho,Hoo),e(Ho,Bh),g(Ay,Bh,null),e(Bh,Uoo),e(Bh,PY),e(PY,Joo),b(c,Uxe,u),b(c,Ui,u),e(Ui,xh),e(xh,$Y),g(Ly,$Y,null),e(Ui,Yoo),e(Ui,IY),e(IY,Koo),b(c,Jxe,u),b(c,Uo,u),g(By,Uo,null),e(Uo,Zoo),e(Uo,xy),e(xy,ero),e(xy,MR),e(MR,oro),e(xy,rro),e(Uo,tro),e(Uo,ky),e(ky,aro),e(ky,jY),e(jY,nro),e(ky,sro),e(Uo,lro),e(Uo,je),g(Ry,je,null),e(je,iro),e(je,NY),e(NY,dro),e(je,cro),e(je,Ji),e(Ji,fro),e(Ji,DY),e(DY,mro),e(Ji,gro),e(Ji,qY),e(qY,hro),e(Ji,pro),e(je,_ro),e(je,xe),e(xe,kh),e(kh,OY),e(OY,uro),e(kh,bro),e(kh,ER),e(ER,vro),e(kh,Tro),e(xe,Fro),e(xe,Rh),e(Rh,GY),e(GY,Cro),e(Rh,Mro),e(Rh,yR),e(yR,Ero),e(Rh,yro),e(xe,wro),e(xe,Sh),e(Sh,XY),e(XY,Aro),e(Sh,Lro),e(Sh,wR),e(wR,Bro),e(Sh,xro),e(xe,kro),e(xe,Ph),e(Ph,VY),e(VY,Rro),e(Ph,Sro),e(Ph,AR),e(AR,Pro),e(Ph,$ro),e(xe,Iro),e(xe,$h),e($h,zY),e(zY,jro),e($h,Nro),e($h,LR),e(LR,Dro),e($h,qro),e(xe,Oro),e(xe,Ih),e(Ih,WY),e(WY,Gro),e(Ih,Xro),e(Ih,BR),e(BR,Vro),e(Ih,zro),e(xe,Wro),e(xe,jh),e(jh,QY),e(QY,Qro),e(jh,Hro),e(jh,xR),e(xR,Uro),e(jh,Jro),e(xe,Yro),e(xe,Nh),e(Nh,HY),e(HY,Kro),e(Nh,Zro),e(Nh,kR),e(kR,eto),e(Nh,oto),e(je,rto),g(Dh,je,null),e(je,tto),e(je,UY),e(UY,ato),e(je,nto),g(Sy,je,null),e(Uo,sto),e(Uo,qh),g(Py,qh,null),e(qh,lto),e(qh,JY),e(JY,ito),b(c,Yxe,u),b(c,Yi,u),e(Yi,Oh),e(Oh,YY),g($y,YY,null),e(Yi,dto),e(Yi,KY),e(KY,cto),b(c,Kxe,u),b(c,Jo,u),g(Iy,Jo,null),e(Jo,fto),e(Jo,Ki),e(Ki,mto),e(Ki,ZY),e(ZY,gto),e(Ki,hto),e(Ki,eK),e(eK,pto),e(Ki,_to),e(Jo,uto),e(Jo,jy),e(jy,bto),e(jy,oK),e(oK,vto),e(jy,Tto),e(Jo,Fto),e(Jo,Vr),g(Ny,Vr,null),e(Vr,Cto),e(Vr,rK),e(rK,Mto),e(Vr,Eto),e(Vr,Zi),e(Zi,yto),e(Zi,tK),e(tK,wto),e(Zi,Ato),e(Zi,aK),e(aK,Lto),e(Zi,Bto),e(Vr,xto),e(Vr,nK),e(nK,kto),e(Vr,Rto),g(Dy,Vr,null),e(Jo,Sto),e(Jo,Ne),g(qy,Ne,null),e(Ne,Pto),e(Ne,sK),e(sK,$to),e(Ne,Ito),e(Ne,Va),e(Va,jto),e(Va,lK),e(lK,Nto),e(Va,Dto),e(Va,iK),e(iK,qto),e(Va,Oto),e(Va,dK),e(dK,Gto),e(Va,Xto),e(Ne,Vto),e(Ne,F),e(F,Gh),e(Gh,cK),e(cK,zto),e(Gh,Wto),e(Gh,RR),e(RR,Qto),e(Gh,Hto),e(F,Uto),e(F,Xh),e(Xh,fK),e(fK,Jto),e(Xh,Yto),e(Xh,SR),e(SR,Kto),e(Xh,Zto),e(F,eao),e(F,Vh),e(Vh,mK),e(mK,oao),e(Vh,rao),e(Vh,PR),e(PR,tao),e(Vh,aao),e(F,nao),e(F,zh),e(zh,gK),e(gK,sao),e(zh,lao),e(zh,$R),e($R,iao),e(zh,dao),e(F,cao),e(F,Wh),e(Wh,hK),e(hK,fao),e(Wh,mao),e(Wh,IR),e(IR,gao),e(Wh,hao),e(F,pao),e(F,Qh),e(Qh,pK),e(pK,_ao),e(Qh,uao),e(Qh,jR),e(jR,bao),e(Qh,vao),e(F,Tao),e(F,Hh),e(Hh,_K),e(_K,Fao),e(Hh,Cao),e(Hh,NR),e(NR,Mao),e(Hh,Eao),e(F,yao),e(F,Uh),e(Uh,uK),e(uK,wao),e(Uh,Aao),e(Uh,DR),e(DR,Lao),e(Uh,Bao),e(F,xao),e(F,Jh),e(Jh,bK),e(bK,kao),e(Jh,Rao),e(Jh,qR),e(qR,Sao),e(Jh,Pao),e(F,$ao),e(F,Yh),e(Yh,vK),e(vK,Iao),e(Yh,jao),e(Yh,OR),e(OR,Nao),e(Yh,Dao),e(F,qao),e(F,Kh),e(Kh,TK),e(TK,Oao),e(Kh,Gao),e(Kh,GR),e(GR,Xao),e(Kh,Vao),e(F,zao),e(F,Zh),e(Zh,FK),e(FK,Wao),e(Zh,Qao),e(Zh,XR),e(XR,Hao),e(Zh,Uao),e(F,Jao),e(F,ep),e(ep,CK),e(CK,Yao),e(ep,Kao),e(ep,VR),e(VR,Zao),e(ep,eno),e(F,ono),e(F,op),e(op,MK),e(MK,rno),e(op,tno),e(op,zR),e(zR,ano),e(op,nno),e(F,sno),e(F,rp),e(rp,EK),e(EK,lno),e(rp,ino),e(rp,WR),e(WR,dno),e(rp,cno),e(F,fno),e(F,tp),e(tp,yK),e(yK,mno),e(tp,gno),e(tp,QR),e(QR,hno),e(tp,pno),e(F,_no),e(F,ap),e(ap,wK),e(wK,uno),e(ap,bno),e(ap,HR),e(HR,vno),e(ap,Tno),e(F,Fno),e(F,np),e(np,AK),e(AK,Cno),e(np,Mno),e(np,UR),e(UR,Eno),e(np,yno),e(F,wno),e(F,sp),e(sp,LK),e(LK,Ano),e(sp,Lno),e(sp,JR),e(JR,Bno),e(sp,xno),e(F,kno),e(F,lp),e(lp,BK),e(BK,Rno),e(lp,Sno),e(lp,YR),e(YR,Pno),e(lp,$no),e(F,Ino),e(F,ip),e(ip,xK),e(xK,jno),e(ip,Nno),e(ip,KR),e(KR,Dno),e(ip,qno),e(F,Ono),e(F,dp),e(dp,kK),e(kK,Gno),e(dp,Xno),e(dp,ZR),e(ZR,Vno),e(dp,zno),e(F,Wno),e(F,cp),e(cp,RK),e(RK,Qno),e(cp,Hno),e(cp,eS),e(eS,Uno),e(cp,Jno),e(F,Yno),e(F,fp),e(fp,SK),e(SK,Kno),e(fp,Zno),e(fp,oS),e(oS,eso),e(fp,oso),e(F,rso),e(F,mp),e(mp,PK),e(PK,tso),e(mp,aso),e(mp,rS),e(rS,nso),e(mp,sso),e(F,lso),e(F,gp),e(gp,$K),e($K,iso),e(gp,dso),e(gp,tS),e(tS,cso),e(gp,fso),e(F,mso),e(F,hp),e(hp,IK),e(IK,gso),e(hp,hso),e(hp,aS),e(aS,pso),e(hp,_so),e(F,uso),e(F,Ds),e(Ds,jK),e(jK,bso),e(Ds,vso),e(Ds,nS),e(nS,Tso),e(Ds,Fso),e(Ds,sS),e(sS,Cso),e(Ds,Mso),e(F,Eso),e(F,pp),e(pp,NK),e(NK,yso),e(pp,wso),e(pp,lS),e(lS,Aso),e(pp,Lso),e(F,Bso),e(F,_p),e(_p,DK),e(DK,xso),e(_p,kso),e(_p,iS),e(iS,Rso),e(_p,Sso),e(F,Pso),e(F,up),e(up,qK),e(qK,$so),e(up,Iso),e(up,dS),e(dS,jso),e(up,Nso),e(F,Dso),e(F,bp),e(bp,OK),e(OK,qso),e(bp,Oso),e(bp,cS),e(cS,Gso),e(bp,Xso),e(F,Vso),e(F,vp),e(vp,GK),e(GK,zso),e(vp,Wso),e(vp,fS),e(fS,Qso),e(vp,Hso),e(F,Uso),e(F,Tp),e(Tp,XK),e(XK,Jso),e(Tp,Yso),e(Tp,mS),e(mS,Kso),e(Tp,Zso),e(F,elo),e(F,Fp),e(Fp,VK),e(VK,olo),e(Fp,rlo),e(Fp,gS),e(gS,tlo),e(Fp,alo),e(F,nlo),e(F,Cp),e(Cp,zK),e(zK,slo),e(Cp,llo),e(Cp,hS),e(hS,ilo),e(Cp,dlo),e(F,clo),e(F,Mp),e(Mp,WK),e(WK,flo),e(Mp,mlo),e(Mp,pS),e(pS,glo),e(Mp,hlo),e(F,plo),e(F,Ep),e(Ep,QK),e(QK,_lo),e(Ep,ulo),e(Ep,_S),e(_S,blo),e(Ep,vlo),e(F,Tlo),e(F,yp),e(yp,HK),e(HK,Flo),e(yp,Clo),e(yp,uS),e(uS,Mlo),e(yp,Elo),e(F,ylo),e(F,wp),e(wp,UK),e(UK,wlo),e(wp,Alo),e(wp,bS),e(bS,Llo),e(wp,Blo),e(F,xlo),e(F,Ap),e(Ap,JK),e(JK,klo),e(Ap,Rlo),e(Ap,vS),e(vS,Slo),e(Ap,Plo),e(F,$lo),e(F,Lp),e(Lp,YK),e(YK,Ilo),e(Lp,jlo),e(Lp,TS),e(TS,Nlo),e(Lp,Dlo),e(F,qlo),e(F,Bp),e(Bp,KK),e(KK,Olo),e(Bp,Glo),e(Bp,FS),e(FS,Xlo),e(Bp,Vlo),e(F,zlo),e(F,xp),e(xp,ZK),e(ZK,Wlo),e(xp,Qlo),e(xp,CS),e(CS,Hlo),e(xp,Ulo),e(F,Jlo),e(F,kp),e(kp,eZ),e(eZ,Ylo),e(kp,Klo),e(kp,MS),e(MS,Zlo),e(kp,eio),e(F,oio),e(F,Rp),e(Rp,oZ),e(oZ,rio),e(Rp,tio),e(Rp,ES),e(ES,aio),e(Rp,nio),e(F,sio),e(F,Sp),e(Sp,rZ),e(rZ,lio),e(Sp,iio),e(Sp,yS),e(yS,dio),e(Sp,cio),e(F,fio),e(F,Pp),e(Pp,tZ),e(tZ,mio),e(Pp,gio),e(Pp,wS),e(wS,hio),e(Pp,pio),e(F,_io),e(F,$p),e($p,aZ),e(aZ,uio),e($p,bio),e($p,AS),e(AS,vio),e($p,Tio),e(F,Fio),e(F,Ip),e(Ip,nZ),e(nZ,Cio),e(Ip,Mio),e(Ip,LS),e(LS,Eio),e(Ip,yio),e(F,wio),e(F,jp),e(jp,sZ),e(sZ,Aio),e(jp,Lio),e(jp,BS),e(BS,Bio),e(jp,xio),e(F,kio),e(F,Np),e(Np,lZ),e(lZ,Rio),e(Np,Sio),e(Np,xS),e(xS,Pio),e(Np,$io),e(F,Iio),e(F,Dp),e(Dp,iZ),e(iZ,jio),e(Dp,Nio),e(Dp,kS),e(kS,Dio),e(Dp,qio),e(F,Oio),e(F,qp),e(qp,dZ),e(dZ,Gio),e(qp,Xio),e(qp,RS),e(RS,Vio),e(qp,zio),e(F,Wio),e(F,Op),e(Op,cZ),e(cZ,Qio),e(Op,Hio),e(Op,SS),e(SS,Uio),e(Op,Jio),e(F,Yio),e(F,Gp),e(Gp,fZ),e(fZ,Kio),e(Gp,Zio),e(Gp,PS),e(PS,edo),e(Gp,odo),e(F,rdo),e(F,Xp),e(Xp,mZ),e(mZ,tdo),e(Xp,ado),e(Xp,$S),e($S,ndo),e(Xp,sdo),e(F,ldo),e(F,Vp),e(Vp,gZ),e(gZ,ido),e(Vp,ddo),e(Vp,IS),e(IS,cdo),e(Vp,fdo),e(F,mdo),e(F,zp),e(zp,hZ),e(hZ,gdo),e(zp,hdo),e(zp,jS),e(jS,pdo),e(zp,_do),e(F,udo),e(F,Wp),e(Wp,pZ),e(pZ,bdo),e(Wp,vdo),e(Wp,NS),e(NS,Tdo),e(Wp,Fdo),e(F,Cdo),e(F,Qp),e(Qp,_Z),e(_Z,Mdo),e(Qp,Edo),e(Qp,DS),e(DS,ydo),e(Qp,wdo),e(F,Ado),e(F,Hp),e(Hp,uZ),e(uZ,Ldo),e(Hp,Bdo),e(Hp,qS),e(qS,xdo),e(Hp,kdo),e(F,Rdo),e(F,Up),e(Up,bZ),e(bZ,Sdo),e(Up,Pdo),e(Up,OS),e(OS,$do),e(Up,Ido),e(F,jdo),e(F,Jp),e(Jp,vZ),e(vZ,Ndo),e(Jp,Ddo),e(Jp,GS),e(GS,qdo),e(Jp,Odo),e(F,Gdo),e(F,Yp),e(Yp,TZ),e(TZ,Xdo),e(Yp,Vdo),e(Yp,XS),e(XS,zdo),e(Yp,Wdo),e(F,Qdo),e(F,Kp),e(Kp,FZ),e(FZ,Hdo),e(Kp,Udo),e(Kp,VS),e(VS,Jdo),e(Kp,Ydo),e(F,Kdo),e(F,Zp),e(Zp,CZ),e(CZ,Zdo),e(Zp,eco),e(Zp,zS),e(zS,oco),e(Zp,rco),e(F,tco),e(F,e_),e(e_,MZ),e(MZ,aco),e(e_,nco),e(e_,WS),e(WS,sco),e(e_,lco),e(F,ico),e(F,o_),e(o_,EZ),e(EZ,dco),e(o_,cco),e(o_,QS),e(QS,fco),e(o_,mco),e(F,gco),e(F,r_),e(r_,yZ),e(yZ,hco),e(r_,pco),e(r_,HS),e(HS,_co),e(r_,uco),e(F,bco),e(F,t_),e(t_,wZ),e(wZ,vco),e(t_,Tco),e(t_,US),e(US,Fco),e(t_,Cco),e(F,Mco),e(F,a_),e(a_,AZ),e(AZ,Eco),e(a_,yco),e(a_,JS),e(JS,wco),e(a_,Aco),e(F,Lco),e(F,n_),e(n_,LZ),e(LZ,Bco),e(n_,xco),e(n_,YS),e(YS,kco),e(n_,Rco),e(F,Sco),e(F,s_),e(s_,BZ),e(BZ,Pco),e(s_,$co),e(s_,KS),e(KS,Ico),e(s_,jco),e(F,Nco),e(F,l_),e(l_,xZ),e(xZ,Dco),e(l_,qco),e(l_,ZS),e(ZS,Oco),e(l_,Gco),e(F,Xco),e(F,i_),e(i_,kZ),e(kZ,Vco),e(i_,zco),e(i_,eP),e(eP,Wco),e(i_,Qco),e(F,Hco),e(F,d_),e(d_,RZ),e(RZ,Uco),e(d_,Jco),e(d_,oP),e(oP,Yco),e(d_,Kco),e(F,Zco),e(F,c_),e(c_,SZ),e(SZ,efo),e(c_,ofo),e(c_,rP),e(rP,rfo),e(c_,tfo),e(F,afo),e(F,f_),e(f_,PZ),e(PZ,nfo),e(f_,sfo),e(f_,tP),e(tP,lfo),e(f_,ifo),e(F,dfo),e(F,m_),e(m_,$Z),e($Z,cfo),e(m_,ffo),e(m_,aP),e(aP,mfo),e(m_,gfo),e(F,hfo),e(F,g_),e(g_,IZ),e(IZ,pfo),e(g_,_fo),e(g_,nP),e(nP,ufo),e(g_,bfo),e(F,vfo),e(F,h_),e(h_,jZ),e(jZ,Tfo),e(h_,Ffo),e(h_,sP),e(sP,Cfo),e(h_,Mfo),e(F,Efo),e(F,p_),e(p_,NZ),e(NZ,yfo),e(p_,wfo),e(p_,lP),e(lP,Afo),e(p_,Lfo),e(F,Bfo),e(F,__),e(__,DZ),e(DZ,xfo),e(__,kfo),e(__,iP),e(iP,Rfo),e(__,Sfo),e(F,Pfo),e(F,u_),e(u_,qZ),e(qZ,$fo),e(u_,Ifo),e(u_,dP),e(dP,jfo),e(u_,Nfo),e(F,Dfo),e(F,b_),e(b_,OZ),e(OZ,qfo),e(b_,Ofo),e(b_,cP),e(cP,Gfo),e(b_,Xfo),e(F,Vfo),e(F,v_),e(v_,GZ),e(GZ,zfo),e(v_,Wfo),e(v_,fP),e(fP,Qfo),e(v_,Hfo),e(F,Ufo),e(F,T_),e(T_,XZ),e(XZ,Jfo),e(T_,Yfo),e(T_,mP),e(mP,Kfo),e(T_,Zfo),e(F,emo),e(F,F_),e(F_,VZ),e(VZ,omo),e(F_,rmo),e(F_,gP),e(gP,tmo),e(F_,amo),e(Ne,nmo),e(Ne,C_),e(C_,smo),e(C_,zZ),e(zZ,lmo),e(C_,imo),e(C_,WZ),e(WZ,dmo),e(Ne,cmo),e(Ne,QZ),e(QZ,fmo),e(Ne,mmo),g(Oy,Ne,null),b(c,Zxe,u),b(c,ed,u),e(ed,M_),e(M_,HZ),g(Gy,HZ,null),e(ed,gmo),e(ed,UZ),e(UZ,hmo),b(c,eke,u),b(c,Yo,u),g(Xy,Yo,null),e(Yo,pmo),e(Yo,od),e(od,_mo),e(od,JZ),e(JZ,umo),e(od,bmo),e(od,YZ),e(YZ,vmo),e(od,Tmo),e(Yo,Fmo),e(Yo,Vy),e(Vy,Cmo),e(Vy,KZ),e(KZ,Mmo),e(Vy,Emo),e(Yo,ymo),e(Yo,zr),g(zy,zr,null),e(zr,wmo),e(zr,ZZ),e(ZZ,Amo),e(zr,Lmo),e(zr,rd),e(rd,Bmo),e(rd,eee),e(eee,xmo),e(rd,kmo),e(rd,oee),e(oee,Rmo),e(rd,Smo),e(zr,Pmo),e(zr,ree),e(ree,$mo),e(zr,Imo),g(Wy,zr,null),e(Yo,jmo),e(Yo,De),g(Qy,De,null),e(De,Nmo),e(De,tee),e(tee,Dmo),e(De,qmo),e(De,za),e(za,Omo),e(za,aee),e(aee,Gmo),e(za,Xmo),e(za,nee),e(nee,Vmo),e(za,zmo),e(za,see),e(see,Wmo),e(za,Qmo),e(De,Hmo),e(De,k),e(k,E_),e(E_,lee),e(lee,Umo),e(E_,Jmo),e(E_,hP),e(hP,Ymo),e(E_,Kmo),e(k,Zmo),e(k,y_),e(y_,iee),e(iee,ego),e(y_,ogo),e(y_,pP),e(pP,rgo),e(y_,tgo),e(k,ago),e(k,w_),e(w_,dee),e(dee,ngo),e(w_,sgo),e(w_,_P),e(_P,lgo),e(w_,igo),e(k,dgo),e(k,A_),e(A_,cee),e(cee,cgo),e(A_,fgo),e(A_,uP),e(uP,mgo),e(A_,ggo),e(k,hgo),e(k,L_),e(L_,fee),e(fee,pgo),e(L_,_go),e(L_,bP),e(bP,ugo),e(L_,bgo),e(k,vgo),e(k,B_),e(B_,mee),e(mee,Tgo),e(B_,Fgo),e(B_,vP),e(vP,Cgo),e(B_,Mgo),e(k,Ego),e(k,x_),e(x_,gee),e(gee,ygo),e(x_,wgo),e(x_,TP),e(TP,Ago),e(x_,Lgo),e(k,Bgo),e(k,k_),e(k_,hee),e(hee,xgo),e(k_,kgo),e(k_,FP),e(FP,Rgo),e(k_,Sgo),e(k,Pgo),e(k,R_),e(R_,pee),e(pee,$go),e(R_,Igo),e(R_,CP),e(CP,jgo),e(R_,Ngo),e(k,Dgo),e(k,S_),e(S_,_ee),e(_ee,qgo),e(S_,Ogo),e(S_,MP),e(MP,Ggo),e(S_,Xgo),e(k,Vgo),e(k,P_),e(P_,uee),e(uee,zgo),e(P_,Wgo),e(P_,EP),e(EP,Qgo),e(P_,Hgo),e(k,Ugo),e(k,$_),e($_,bee),e(bee,Jgo),e($_,Ygo),e($_,yP),e(yP,Kgo),e($_,Zgo),e(k,eho),e(k,I_),e(I_,vee),e(vee,oho),e(I_,rho),e(I_,wP),e(wP,tho),e(I_,aho),e(k,nho),e(k,j_),e(j_,Tee),e(Tee,sho),e(j_,lho),e(j_,AP),e(AP,iho),e(j_,dho),e(k,cho),e(k,N_),e(N_,Fee),e(Fee,fho),e(N_,mho),e(N_,LP),e(LP,gho),e(N_,hho),e(k,pho),e(k,D_),e(D_,Cee),e(Cee,_ho),e(D_,uho),e(D_,BP),e(BP,bho),e(D_,vho),e(k,Tho),e(k,q_),e(q_,Mee),e(Mee,Fho),e(q_,Cho),e(q_,xP),e(xP,Mho),e(q_,Eho),e(k,yho),e(k,O_),e(O_,Eee),e(Eee,who),e(O_,Aho),e(O_,kP),e(kP,Lho),e(O_,Bho),e(k,xho),e(k,G_),e(G_,yee),e(yee,kho),e(G_,Rho),e(G_,RP),e(RP,Sho),e(G_,Pho),e(k,$ho),e(k,X_),e(X_,wee),e(wee,Iho),e(X_,jho),e(X_,SP),e(SP,Nho),e(X_,Dho),e(k,qho),e(k,V_),e(V_,Aee),e(Aee,Oho),e(V_,Gho),e(V_,PP),e(PP,Xho),e(V_,Vho),e(k,zho),e(k,z_),e(z_,Lee),e(Lee,Who),e(z_,Qho),e(z_,$P),e($P,Hho),e(z_,Uho),e(k,Jho),e(k,W_),e(W_,Bee),e(Bee,Yho),e(W_,Kho),e(W_,IP),e(IP,Zho),e(W_,epo),e(k,opo),e(k,Q_),e(Q_,xee),e(xee,rpo),e(Q_,tpo),e(Q_,jP),e(jP,apo),e(Q_,npo),e(k,spo),e(k,H_),e(H_,kee),e(kee,lpo),e(H_,ipo),e(H_,NP),e(NP,dpo),e(H_,cpo),e(k,fpo),e(k,U_),e(U_,Ree),e(Ree,mpo),e(U_,gpo),e(U_,DP),e(DP,hpo),e(U_,ppo),e(k,_po),e(k,J_),e(J_,See),e(See,upo),e(J_,bpo),e(J_,qP),e(qP,vpo),e(J_,Tpo),e(k,Fpo),e(k,Y_),e(Y_,Pee),e(Pee,Cpo),e(Y_,Mpo),e(Y_,OP),e(OP,Epo),e(Y_,ypo),e(k,wpo),e(k,K_),e(K_,$ee),e($ee,Apo),e(K_,Lpo),e(K_,GP),e(GP,Bpo),e(K_,xpo),e(k,kpo),e(k,Z_),e(Z_,Iee),e(Iee,Rpo),e(Z_,Spo),e(Z_,XP),e(XP,Ppo),e(Z_,$po),e(k,Ipo),e(k,eu),e(eu,jee),e(jee,jpo),e(eu,Npo),e(eu,VP),e(VP,Dpo),e(eu,qpo),e(k,Opo),e(k,ou),e(ou,Nee),e(Nee,Gpo),e(ou,Xpo),e(ou,zP),e(zP,Vpo),e(ou,zpo),e(k,Wpo),e(k,ru),e(ru,Dee),e(Dee,Qpo),e(ru,Hpo),e(ru,WP),e(WP,Upo),e(ru,Jpo),e(k,Ypo),e(k,tu),e(tu,qee),e(qee,Kpo),e(tu,Zpo),e(tu,QP),e(QP,e_o),e(tu,o_o),e(k,r_o),e(k,au),e(au,Oee),e(Oee,t_o),e(au,a_o),e(au,HP),e(HP,n_o),e(au,s_o),e(k,l_o),e(k,nu),e(nu,Gee),e(Gee,i_o),e(nu,d_o),e(nu,UP),e(UP,c_o),e(nu,f_o),e(k,m_o),e(k,su),e(su,Xee),e(Xee,g_o),e(su,h_o),e(su,JP),e(JP,p_o),e(su,__o),e(k,u_o),e(k,lu),e(lu,Vee),e(Vee,b_o),e(lu,v_o),e(lu,YP),e(YP,T_o),e(lu,F_o),e(k,C_o),e(k,iu),e(iu,zee),e(zee,M_o),e(iu,E_o),e(iu,KP),e(KP,y_o),e(iu,w_o),e(De,A_o),e(De,du),e(du,L_o),e(du,Wee),e(Wee,B_o),e(du,x_o),e(du,Qee),e(Qee,k_o),e(De,R_o),e(De,Hee),e(Hee,S_o),e(De,P_o),g(Hy,De,null),b(c,oke,u),b(c,td,u),e(td,cu),e(cu,Uee),g(Uy,Uee,null),e(td,$_o),e(td,Jee),e(Jee,I_o),b(c,rke,u),b(c,Ko,u),g(Jy,Ko,null),e(Ko,j_o),e(Ko,ad),e(ad,N_o),e(ad,Yee),e(Yee,D_o),e(ad,q_o),e(ad,Kee),e(Kee,O_o),e(ad,G_o),e(Ko,X_o),e(Ko,Yy),e(Yy,V_o),e(Yy,Zee),e(Zee,z_o),e(Yy,W_o),e(Ko,Q_o),e(Ko,Wr),g(Ky,Wr,null),e(Wr,H_o),e(Wr,eoe),e(eoe,U_o),e(Wr,J_o),e(Wr,nd),e(nd,Y_o),e(nd,ooe),e(ooe,K_o),e(nd,Z_o),e(nd,roe),e(roe,euo),e(nd,ouo),e(Wr,ruo),e(Wr,toe),e(toe,tuo),e(Wr,auo),g(Zy,Wr,null),e(Ko,nuo),e(Ko,qe),g(ew,qe,null),e(qe,suo),e(qe,aoe),e(aoe,luo),e(qe,iuo),e(qe,Wa),e(Wa,duo),e(Wa,noe),e(noe,cuo),e(Wa,fuo),e(Wa,soe),e(soe,muo),e(Wa,guo),e(Wa,loe),e(loe,huo),e(Wa,puo),e(qe,_uo),e(qe,$),e($,fu),e(fu,ioe),e(ioe,uuo),e(fu,buo),e(fu,ZP),e(ZP,vuo),e(fu,Tuo),e($,Fuo),e($,mu),e(mu,doe),e(doe,Cuo),e(mu,Muo),e(mu,e$),e(e$,Euo),e(mu,yuo),e($,wuo),e($,gu),e(gu,coe),e(coe,Auo),e(gu,Luo),e(gu,o$),e(o$,Buo),e(gu,xuo),e($,kuo),e($,hu),e(hu,foe),e(foe,Ruo),e(hu,Suo),e(hu,r$),e(r$,Puo),e(hu,$uo),e($,Iuo),e($,pu),e(pu,moe),e(moe,juo),e(pu,Nuo),e(pu,t$),e(t$,Duo),e(pu,quo),e($,Ouo),e($,_u),e(_u,goe),e(goe,Guo),e(_u,Xuo),e(_u,a$),e(a$,Vuo),e(_u,zuo),e($,Wuo),e($,uu),e(uu,hoe),e(hoe,Quo),e(uu,Huo),e(uu,n$),e(n$,Uuo),e(uu,Juo),e($,Yuo),e($,bu),e(bu,poe),e(poe,Kuo),e(bu,Zuo),e(bu,s$),e(s$,ebo),e(bu,obo),e($,rbo),e($,vu),e(vu,_oe),e(_oe,tbo),e(vu,abo),e(vu,l$),e(l$,nbo),e(vu,sbo),e($,lbo),e($,Tu),e(Tu,uoe),e(uoe,ibo),e(Tu,dbo),e(Tu,i$),e(i$,cbo),e(Tu,fbo),e($,mbo),e($,Fu),e(Fu,boe),e(boe,gbo),e(Fu,hbo),e(Fu,d$),e(d$,pbo),e(Fu,_bo),e($,ubo),e($,Cu),e(Cu,voe),e(voe,bbo),e(Cu,vbo),e(Cu,c$),e(c$,Tbo),e(Cu,Fbo),e($,Cbo),e($,Mu),e(Mu,Toe),e(Toe,Mbo),e(Mu,Ebo),e(Mu,f$),e(f$,ybo),e(Mu,wbo),e($,Abo),e($,Eu),e(Eu,Foe),e(Foe,Lbo),e(Eu,Bbo),e(Eu,m$),e(m$,xbo),e(Eu,kbo),e($,Rbo),e($,yu),e(yu,Coe),e(Coe,Sbo),e(yu,Pbo),e(yu,g$),e(g$,$bo),e(yu,Ibo),e($,jbo),e($,wu),e(wu,Moe),e(Moe,Nbo),e(wu,Dbo),e(wu,h$),e(h$,qbo),e(wu,Obo),e($,Gbo),e($,Au),e(Au,Eoe),e(Eoe,Xbo),e(Au,Vbo),e(Au,p$),e(p$,zbo),e(Au,Wbo),e($,Qbo),e($,Lu),e(Lu,yoe),e(yoe,Hbo),e(Lu,Ubo),e(Lu,_$),e(_$,Jbo),e(Lu,Ybo),e($,Kbo),e($,Bu),e(Bu,woe),e(woe,Zbo),e(Bu,e3o),e(Bu,u$),e(u$,o3o),e(Bu,r3o),e($,t3o),e($,xu),e(xu,Aoe),e(Aoe,a3o),e(xu,n3o),e(xu,b$),e(b$,s3o),e(xu,l3o),e($,i3o),e($,ku),e(ku,Loe),e(Loe,d3o),e(ku,c3o),e(ku,v$),e(v$,f3o),e(ku,m3o),e($,g3o),e($,Ru),e(Ru,Boe),e(Boe,h3o),e(Ru,p3o),e(Ru,T$),e(T$,_3o),e(Ru,u3o),e($,b3o),e($,Su),e(Su,xoe),e(xoe,v3o),e(Su,T3o),e(Su,F$),e(F$,F3o),e(Su,C3o),e($,M3o),e($,Pu),e(Pu,koe),e(koe,E3o),e(Pu,y3o),e(Pu,C$),e(C$,w3o),e(Pu,A3o),e($,L3o),e($,$u),e($u,Roe),e(Roe,B3o),e($u,x3o),e($u,M$),e(M$,k3o),e($u,R3o),e($,S3o),e($,Iu),e(Iu,Soe),e(Soe,P3o),e(Iu,$3o),e(Iu,E$),e(E$,I3o),e(Iu,j3o),e($,N3o),e($,ju),e(ju,Poe),e(Poe,D3o),e(ju,q3o),e(ju,y$),e(y$,O3o),e(ju,G3o),e($,X3o),e($,Nu),e(Nu,$oe),e($oe,V3o),e(Nu,z3o),e(Nu,w$),e(w$,W3o),e(Nu,Q3o),e($,H3o),e($,Du),e(Du,Ioe),e(Ioe,U3o),e(Du,J3o),e(Du,A$),e(A$,Y3o),e(Du,K3o),e($,Z3o),e($,qu),e(qu,joe),e(joe,e2o),e(qu,o2o),e(qu,L$),e(L$,r2o),e(qu,t2o),e($,a2o),e($,Ou),e(Ou,Noe),e(Noe,n2o),e(Ou,s2o),e(Ou,B$),e(B$,l2o),e(Ou,i2o),e($,d2o),e($,Gu),e(Gu,Doe),e(Doe,c2o),e(Gu,f2o),e(Gu,x$),e(x$,m2o),e(Gu,g2o),e($,h2o),e($,Xu),e(Xu,qoe),e(qoe,p2o),e(Xu,_2o),e(Xu,k$),e(k$,u2o),e(Xu,b2o),e($,v2o),e($,Vu),e(Vu,Ooe),e(Ooe,T2o),e(Vu,F2o),e(Vu,R$),e(R$,C2o),e(Vu,M2o),e($,E2o),e($,zu),e(zu,Goe),e(Goe,y2o),e(zu,w2o),e(zu,S$),e(S$,A2o),e(zu,L2o),e(qe,B2o),e(qe,Wu),e(Wu,x2o),e(Wu,Xoe),e(Xoe,k2o),e(Wu,R2o),e(Wu,Voe),e(Voe,S2o),e(qe,P2o),e(qe,zoe),e(zoe,$2o),e(qe,I2o),g(ow,qe,null),b(c,tke,u),b(c,sd,u),e(sd,Qu),e(Qu,Woe),g(rw,Woe,null),e(sd,j2o),e(sd,Qoe),e(Qoe,N2o),b(c,ake,u),b(c,Zo,u),g(tw,Zo,null),e(Zo,D2o),e(Zo,ld),e(ld,q2o),e(ld,Hoe),e(Hoe,O2o),e(ld,G2o),e(ld,Uoe),e(Uoe,X2o),e(ld,V2o),e(Zo,z2o),e(Zo,aw),e(aw,W2o),e(aw,Joe),e(Joe,Q2o),e(aw,H2o),e(Zo,U2o),e(Zo,Qr),g(nw,Qr,null),e(Qr,J2o),e(Qr,Yoe),e(Yoe,Y2o),e(Qr,K2o),e(Qr,id),e(id,Z2o),e(id,Koe),e(Koe,evo),e(id,ovo),e(id,Zoe),e(Zoe,rvo),e(id,tvo),e(Qr,avo),e(Qr,ere),e(ere,nvo),e(Qr,svo),g(sw,Qr,null),e(Zo,lvo),e(Zo,Oe),g(lw,Oe,null),e(Oe,ivo),e(Oe,ore),e(ore,dvo),e(Oe,cvo),e(Oe,Qa),e(Qa,fvo),e(Qa,rre),e(rre,mvo),e(Qa,gvo),e(Qa,tre),e(tre,hvo),e(Qa,pvo),e(Qa,are),e(are,_vo),e(Qa,uvo),e(Oe,bvo),e(Oe,I),e(I,Hu),e(Hu,nre),e(nre,vvo),e(Hu,Tvo),e(Hu,P$),e(P$,Fvo),e(Hu,Cvo),e(I,Mvo),e(I,Uu),e(Uu,sre),e(sre,Evo),e(Uu,yvo),e(Uu,$$),e($$,wvo),e(Uu,Avo),e(I,Lvo),e(I,Ju),e(Ju,lre),e(lre,Bvo),e(Ju,xvo),e(Ju,I$),e(I$,kvo),e(Ju,Rvo),e(I,Svo),e(I,Yu),e(Yu,ire),e(ire,Pvo),e(Yu,$vo),e(Yu,j$),e(j$,Ivo),e(Yu,jvo),e(I,Nvo),e(I,Ku),e(Ku,dre),e(dre,Dvo),e(Ku,qvo),e(Ku,N$),e(N$,Ovo),e(Ku,Gvo),e(I,Xvo),e(I,Zu),e(Zu,cre),e(cre,Vvo),e(Zu,zvo),e(Zu,D$),e(D$,Wvo),e(Zu,Qvo),e(I,Hvo),e(I,eb),e(eb,fre),e(fre,Uvo),e(eb,Jvo),e(eb,q$),e(q$,Yvo),e(eb,Kvo),e(I,Zvo),e(I,ob),e(ob,mre),e(mre,eTo),e(ob,oTo),e(ob,O$),e(O$,rTo),e(ob,tTo),e(I,aTo),e(I,rb),e(rb,gre),e(gre,nTo),e(rb,sTo),e(rb,G$),e(G$,lTo),e(rb,iTo),e(I,dTo),e(I,tb),e(tb,hre),e(hre,cTo),e(tb,fTo),e(tb,X$),e(X$,mTo),e(tb,gTo),e(I,hTo),e(I,ab),e(ab,pre),e(pre,pTo),e(ab,_To),e(ab,V$),e(V$,uTo),e(ab,bTo),e(I,vTo),e(I,nb),e(nb,_re),e(_re,TTo),e(nb,FTo),e(nb,z$),e(z$,CTo),e(nb,MTo),e(I,ETo),e(I,sb),e(sb,ure),e(ure,yTo),e(sb,wTo),e(sb,W$),e(W$,ATo),e(sb,LTo),e(I,BTo),e(I,lb),e(lb,bre),e(bre,xTo),e(lb,kTo),e(lb,Q$),e(Q$,RTo),e(lb,STo),e(I,PTo),e(I,ib),e(ib,vre),e(vre,$To),e(ib,ITo),e(ib,H$),e(H$,jTo),e(ib,NTo),e(I,DTo),e(I,db),e(db,Tre),e(Tre,qTo),e(db,OTo),e(db,U$),e(U$,GTo),e(db,XTo),e(I,VTo),e(I,cb),e(cb,Fre),e(Fre,zTo),e(cb,WTo),e(cb,J$),e(J$,QTo),e(cb,HTo),e(I,UTo),e(I,fb),e(fb,Cre),e(Cre,JTo),e(fb,YTo),e(fb,Y$),e(Y$,KTo),e(fb,ZTo),e(I,e1o),e(I,mb),e(mb,Mre),e(Mre,o1o),e(mb,r1o),e(mb,K$),e(K$,t1o),e(mb,a1o),e(I,n1o),e(I,gb),e(gb,Ere),e(Ere,s1o),e(gb,l1o),e(gb,Z$),e(Z$,i1o),e(gb,d1o),e(I,c1o),e(I,hb),e(hb,yre),e(yre,f1o),e(hb,m1o),e(hb,eI),e(eI,g1o),e(hb,h1o),e(I,p1o),e(I,pb),e(pb,wre),e(wre,_1o),e(pb,u1o),e(pb,oI),e(oI,b1o),e(pb,v1o),e(I,T1o),e(I,_b),e(_b,Are),e(Are,F1o),e(_b,C1o),e(_b,rI),e(rI,M1o),e(_b,E1o),e(I,y1o),e(I,ub),e(ub,Lre),e(Lre,w1o),e(ub,A1o),e(ub,tI),e(tI,L1o),e(ub,B1o),e(I,x1o),e(I,bb),e(bb,Bre),e(Bre,k1o),e(bb,R1o),e(bb,aI),e(aI,S1o),e(bb,P1o),e(I,$1o),e(I,vb),e(vb,xre),e(xre,I1o),e(vb,j1o),e(vb,nI),e(nI,N1o),e(vb,D1o),e(I,q1o),e(I,Tb),e(Tb,kre),e(kre,O1o),e(Tb,G1o),e(Tb,sI),e(sI,X1o),e(Tb,V1o),e(I,z1o),e(I,Fb),e(Fb,Rre),e(Rre,W1o),e(Fb,Q1o),e(Fb,lI),e(lI,H1o),e(Fb,U1o),e(I,J1o),e(I,Cb),e(Cb,Sre),e(Sre,Y1o),e(Cb,K1o),e(Cb,iI),e(iI,Z1o),e(Cb,eFo),e(I,oFo),e(I,Mb),e(Mb,Pre),e(Pre,rFo),e(Mb,tFo),e(Mb,dI),e(dI,aFo),e(Mb,nFo),e(I,sFo),e(I,Eb),e(Eb,$re),e($re,lFo),e(Eb,iFo),e(Eb,Ire),e(Ire,dFo),e(Eb,cFo),e(I,fFo),e(I,yb),e(yb,jre),e(jre,mFo),e(yb,gFo),e(yb,cI),e(cI,hFo),e(yb,pFo),e(I,_Fo),e(I,wb),e(wb,Nre),e(Nre,uFo),e(wb,bFo),e(wb,fI),e(fI,vFo),e(wb,TFo),e(I,FFo),e(I,Ab),e(Ab,Dre),e(Dre,CFo),e(Ab,MFo),e(Ab,mI),e(mI,EFo),e(Ab,yFo),e(I,wFo),e(I,Lb),e(Lb,qre),e(qre,AFo),e(Lb,LFo),e(Lb,gI),e(gI,BFo),e(Lb,xFo),e(Oe,kFo),e(Oe,Bb),e(Bb,RFo),e(Bb,Ore),e(Ore,SFo),e(Bb,PFo),e(Bb,Gre),e(Gre,$Fo),e(Oe,IFo),e(Oe,Xre),e(Xre,jFo),e(Oe,NFo),g(iw,Oe,null),b(c,nke,u),b(c,dd,u),e(dd,xb),e(xb,Vre),g(dw,Vre,null),e(dd,DFo),e(dd,zre),e(zre,qFo),b(c,ske,u),b(c,er,u),g(cw,er,null),e(er,OFo),e(er,cd),e(cd,GFo),e(cd,Wre),e(Wre,XFo),e(cd,VFo),e(cd,Qre),e(Qre,zFo),e(cd,WFo),e(er,QFo),e(er,fw),e(fw,HFo),e(fw,Hre),e(Hre,UFo),e(fw,JFo),e(er,YFo),e(er,Hr),g(mw,Hr,null),e(Hr,KFo),e(Hr,Ure),e(Ure,ZFo),e(Hr,eCo),e(Hr,fd),e(fd,oCo),e(fd,Jre),e(Jre,rCo),e(fd,tCo),e(fd,Yre),e(Yre,aCo),e(fd,nCo),e(Hr,sCo),e(Hr,Kre),e(Kre,lCo),e(Hr,iCo),g(gw,Hr,null),e(er,dCo),e(er,Ge),g(hw,Ge,null),e(Ge,cCo),e(Ge,Zre),e(Zre,fCo),e(Ge,mCo),e(Ge,Ha),e(Ha,gCo),e(Ha,ete),e(ete,hCo),e(Ha,pCo),e(Ha,ote),e(ote,_Co),e(Ha,uCo),e(Ha,rte),e(rte,bCo),e(Ha,vCo),e(Ge,TCo),e(Ge,se),e(se,kb),e(kb,tte),e(tte,FCo),e(kb,CCo),e(kb,hI),e(hI,MCo),e(kb,ECo),e(se,yCo),e(se,Rb),e(Rb,ate),e(ate,wCo),e(Rb,ACo),e(Rb,pI),e(pI,LCo),e(Rb,BCo),e(se,xCo),e(se,Sb),e(Sb,nte),e(nte,kCo),e(Sb,RCo),e(Sb,_I),e(_I,SCo),e(Sb,PCo),e(se,$Co),e(se,Pb),e(Pb,ste),e(ste,ICo),e(Pb,jCo),e(Pb,uI),e(uI,NCo),e(Pb,DCo),e(se,qCo),e(se,$b),e($b,lte),e(lte,OCo),e($b,GCo),e($b,bI),e(bI,XCo),e($b,VCo),e(se,zCo),e(se,Ib),e(Ib,ite),e(ite,WCo),e(Ib,QCo),e(Ib,vI),e(vI,HCo),e(Ib,UCo),e(se,JCo),e(se,jb),e(jb,dte),e(dte,YCo),e(jb,KCo),e(jb,TI),e(TI,ZCo),e(jb,eMo),e(se,oMo),e(se,Nb),e(Nb,cte),e(cte,rMo),e(Nb,tMo),e(Nb,FI),e(FI,aMo),e(Nb,nMo),e(se,sMo),e(se,Db),e(Db,fte),e(fte,lMo),e(Db,iMo),e(Db,CI),e(CI,dMo),e(Db,cMo),e(se,fMo),e(se,qb),e(qb,mte),e(mte,mMo),e(qb,gMo),e(qb,MI),e(MI,hMo),e(qb,pMo),e(se,_Mo),e(se,Ob),e(Ob,gte),e(gte,uMo),e(Ob,bMo),e(Ob,EI),e(EI,vMo),e(Ob,TMo),e(se,FMo),e(se,Gb),e(Gb,hte),e(hte,CMo),e(Gb,MMo),e(Gb,yI),e(yI,EMo),e(Gb,yMo),e(se,wMo),e(se,Xb),e(Xb,pte),e(pte,AMo),e(Xb,LMo),e(Xb,wI),e(wI,BMo),e(Xb,xMo),e(se,kMo),e(se,Vb),e(Vb,_te),e(_te,RMo),e(Vb,SMo),e(Vb,AI),e(AI,PMo),e(Vb,$Mo),e(se,IMo),e(se,zb),e(zb,ute),e(ute,jMo),e(zb,NMo),e(zb,LI),e(LI,DMo),e(zb,qMo),e(se,OMo),e(se,Wb),e(Wb,bte),e(bte,GMo),e(Wb,XMo),e(Wb,BI),e(BI,VMo),e(Wb,zMo),e(Ge,WMo),e(Ge,Qb),e(Qb,QMo),e(Qb,vte),e(vte,HMo),e(Qb,UMo),e(Qb,Tte),e(Tte,JMo),e(Ge,YMo),e(Ge,Fte),e(Fte,KMo),e(Ge,ZMo),g(pw,Ge,null),b(c,lke,u),b(c,md,u),e(md,Hb),e(Hb,Cte),g(_w,Cte,null),e(md,e4o),e(md,Mte),e(Mte,o4o),b(c,ike,u),b(c,or,u),g(uw,or,null),e(or,r4o),e(or,gd),e(gd,t4o),e(gd,Ete),e(Ete,a4o),e(gd,n4o),e(gd,yte),e(yte,s4o),e(gd,l4o),e(or,i4o),e(or,bw),e(bw,d4o),e(bw,wte),e(wte,c4o),e(bw,f4o),e(or,m4o),e(or,Ur),g(vw,Ur,null),e(Ur,g4o),e(Ur,Ate),e(Ate,h4o),e(Ur,p4o),e(Ur,hd),e(hd,_4o),e(hd,Lte),e(Lte,u4o),e(hd,b4o),e(hd,Bte),e(Bte,v4o),e(hd,T4o),e(Ur,F4o),e(Ur,xte),e(xte,C4o),e(Ur,M4o),g(Tw,Ur,null),e(or,E4o),e(or,Xe),g(Fw,Xe,null),e(Xe,y4o),e(Xe,kte),e(kte,w4o),e(Xe,A4o),e(Xe,Ua),e(Ua,L4o),e(Ua,Rte),e(Rte,B4o),e(Ua,x4o),e(Ua,Ste),e(Ste,k4o),e(Ua,R4o),e(Ua,Pte),e(Pte,S4o),e(Ua,P4o),e(Xe,$4o),e(Xe,A),e(A,Ub),e(Ub,$te),e($te,I4o),e(Ub,j4o),e(Ub,xI),e(xI,N4o),e(Ub,D4o),e(A,q4o),e(A,Jb),e(Jb,Ite),e(Ite,O4o),e(Jb,G4o),e(Jb,kI),e(kI,X4o),e(Jb,V4o),e(A,z4o),e(A,Yb),e(Yb,jte),e(jte,W4o),e(Yb,Q4o),e(Yb,RI),e(RI,H4o),e(Yb,U4o),e(A,J4o),e(A,Kb),e(Kb,Nte),e(Nte,Y4o),e(Kb,K4o),e(Kb,SI),e(SI,Z4o),e(Kb,eEo),e(A,oEo),e(A,Zb),e(Zb,Dte),e(Dte,rEo),e(Zb,tEo),e(Zb,PI),e(PI,aEo),e(Zb,nEo),e(A,sEo),e(A,e3),e(e3,qte),e(qte,lEo),e(e3,iEo),e(e3,$I),e($I,dEo),e(e3,cEo),e(A,fEo),e(A,o3),e(o3,Ote),e(Ote,mEo),e(o3,gEo),e(o3,II),e(II,hEo),e(o3,pEo),e(A,_Eo),e(A,r3),e(r3,Gte),e(Gte,uEo),e(r3,bEo),e(r3,jI),e(jI,vEo),e(r3,TEo),e(A,FEo),e(A,t3),e(t3,Xte),e(Xte,CEo),e(t3,MEo),e(t3,NI),e(NI,EEo),e(t3,yEo),e(A,wEo),e(A,a3),e(a3,Vte),e(Vte,AEo),e(a3,LEo),e(a3,DI),e(DI,BEo),e(a3,xEo),e(A,kEo),e(A,n3),e(n3,zte),e(zte,REo),e(n3,SEo),e(n3,qI),e(qI,PEo),e(n3,$Eo),e(A,IEo),e(A,s3),e(s3,Wte),e(Wte,jEo),e(s3,NEo),e(s3,OI),e(OI,DEo),e(s3,qEo),e(A,OEo),e(A,l3),e(l3,Qte),e(Qte,GEo),e(l3,XEo),e(l3,GI),e(GI,VEo),e(l3,zEo),e(A,WEo),e(A,i3),e(i3,Hte),e(Hte,QEo),e(i3,HEo),e(i3,XI),e(XI,UEo),e(i3,JEo),e(A,YEo),e(A,d3),e(d3,Ute),e(Ute,KEo),e(d3,ZEo),e(d3,VI),e(VI,e5o),e(d3,o5o),e(A,r5o),e(A,c3),e(c3,Jte),e(Jte,t5o),e(c3,a5o),e(c3,zI),e(zI,n5o),e(c3,s5o),e(A,l5o),e(A,f3),e(f3,Yte),e(Yte,i5o),e(f3,d5o),e(f3,WI),e(WI,c5o),e(f3,f5o),e(A,m5o),e(A,m3),e(m3,Kte),e(Kte,g5o),e(m3,h5o),e(m3,QI),e(QI,p5o),e(m3,_5o),e(A,u5o),e(A,g3),e(g3,Zte),e(Zte,b5o),e(g3,v5o),e(g3,HI),e(HI,T5o),e(g3,F5o),e(A,C5o),e(A,h3),e(h3,eae),e(eae,M5o),e(h3,E5o),e(h3,UI),e(UI,y5o),e(h3,w5o),e(A,A5o),e(A,p3),e(p3,oae),e(oae,L5o),e(p3,B5o),e(p3,JI),e(JI,x5o),e(p3,k5o),e(A,R5o),e(A,_3),e(_3,rae),e(rae,S5o),e(_3,P5o),e(_3,YI),e(YI,$5o),e(_3,I5o),e(A,j5o),e(A,u3),e(u3,tae),e(tae,N5o),e(u3,D5o),e(u3,KI),e(KI,q5o),e(u3,O5o),e(A,G5o),e(A,b3),e(b3,aae),e(aae,X5o),e(b3,V5o),e(b3,ZI),e(ZI,z5o),e(b3,W5o),e(A,Q5o),e(A,v3),e(v3,nae),e(nae,H5o),e(v3,U5o),e(v3,ej),e(ej,J5o),e(v3,Y5o),e(A,K5o),e(A,T3),e(T3,sae),e(sae,Z5o),e(T3,eyo),e(T3,oj),e(oj,oyo),e(T3,ryo),e(A,tyo),e(A,F3),e(F3,lae),e(lae,ayo),e(F3,nyo),e(F3,rj),e(rj,syo),e(F3,lyo),e(A,iyo),e(A,C3),e(C3,iae),e(iae,dyo),e(C3,cyo),e(C3,tj),e(tj,fyo),e(C3,myo),e(A,gyo),e(A,M3),e(M3,dae),e(dae,hyo),e(M3,pyo),e(M3,aj),e(aj,_yo),e(M3,uyo),e(A,byo),e(A,E3),e(E3,cae),e(cae,vyo),e(E3,Tyo),e(E3,nj),e(nj,Fyo),e(E3,Cyo),e(A,Myo),e(A,y3),e(y3,fae),e(fae,Eyo),e(y3,yyo),e(y3,sj),e(sj,wyo),e(y3,Ayo),e(A,Lyo),e(A,w3),e(w3,mae),e(mae,Byo),e(w3,xyo),e(w3,lj),e(lj,kyo),e(w3,Ryo),e(A,Syo),e(A,A3),e(A3,gae),e(gae,Pyo),e(A3,$yo),e(A3,ij),e(ij,Iyo),e(A3,jyo),e(A,Nyo),e(A,L3),e(L3,hae),e(hae,Dyo),e(L3,qyo),e(L3,dj),e(dj,Oyo),e(L3,Gyo),e(A,Xyo),e(A,B3),e(B3,pae),e(pae,Vyo),e(B3,zyo),e(B3,cj),e(cj,Wyo),e(B3,Qyo),e(A,Hyo),e(A,x3),e(x3,_ae),e(_ae,Uyo),e(x3,Jyo),e(x3,fj),e(fj,Yyo),e(x3,Kyo),e(A,Zyo),e(A,k3),e(k3,uae),e(uae,ewo),e(k3,owo),e(k3,mj),e(mj,rwo),e(k3,two),e(A,awo),e(A,R3),e(R3,bae),e(bae,nwo),e(R3,swo),e(R3,gj),e(gj,lwo),e(R3,iwo),e(A,dwo),e(A,S3),e(S3,vae),e(vae,cwo),e(S3,fwo),e(S3,hj),e(hj,mwo),e(S3,gwo),e(A,hwo),e(A,P3),e(P3,Tae),e(Tae,pwo),e(P3,_wo),e(P3,pj),e(pj,uwo),e(P3,bwo),e(A,vwo),e(A,$3),e($3,Fae),e(Fae,Two),e($3,Fwo),e($3,_j),e(_j,Cwo),e($3,Mwo),e(A,Ewo),e(A,I3),e(I3,Cae),e(Cae,ywo),e(I3,wwo),e(I3,uj),e(uj,Awo),e(I3,Lwo),e(A,Bwo),e(A,j3),e(j3,Mae),e(Mae,xwo),e(j3,kwo),e(j3,bj),e(bj,Rwo),e(j3,Swo),e(A,Pwo),e(A,N3),e(N3,Eae),e(Eae,$wo),e(N3,Iwo),e(N3,vj),e(vj,jwo),e(N3,Nwo),e(A,Dwo),e(A,D3),e(D3,yae),e(yae,qwo),e(D3,Owo),e(D3,Tj),e(Tj,Gwo),e(D3,Xwo),e(A,Vwo),e(A,q3),e(q3,wae),e(wae,zwo),e(q3,Wwo),e(q3,Fj),e(Fj,Qwo),e(q3,Hwo),e(Xe,Uwo),e(Xe,O3),e(O3,Jwo),e(O3,Aae),e(Aae,Ywo),e(O3,Kwo),e(O3,Lae),e(Lae,Zwo),e(Xe,e6o),e(Xe,Bae),e(Bae,o6o),e(Xe,r6o),g(Cw,Xe,null),b(c,dke,u),b(c,pd,u),e(pd,G3),e(G3,xae),g(Mw,xae,null),e(pd,t6o),e(pd,kae),e(kae,a6o),b(c,cke,u),b(c,rr,u),g(Ew,rr,null),e(rr,n6o),e(rr,_d),e(_d,s6o),e(_d,Rae),e(Rae,l6o),e(_d,i6o),e(_d,Sae),e(Sae,d6o),e(_d,c6o),e(rr,f6o),e(rr,yw),e(yw,m6o),e(yw,Pae),e(Pae,g6o),e(yw,h6o),e(rr,p6o),e(rr,Jr),g(ww,Jr,null),e(Jr,_6o),e(Jr,$ae),e($ae,u6o),e(Jr,b6o),e(Jr,ud),e(ud,v6o),e(ud,Iae),e(Iae,T6o),e(ud,F6o),e(ud,jae),e(jae,C6o),e(ud,M6o),e(Jr,E6o),e(Jr,Nae),e(Nae,y6o),e(Jr,w6o),g(Aw,Jr,null),e(rr,A6o),e(rr,Ve),g(Lw,Ve,null),e(Ve,L6o),e(Ve,Dae),e(Dae,B6o),e(Ve,x6o),e(Ve,Ja),e(Ja,k6o),e(Ja,qae),e(qae,R6o),e(Ja,S6o),e(Ja,Oae),e(Oae,P6o),e(Ja,$6o),e(Ja,Gae),e(Gae,I6o),e(Ja,j6o),e(Ve,N6o),e(Ve,O),e(O,X3),e(X3,Xae),e(Xae,D6o),e(X3,q6o),e(X3,Cj),e(Cj,O6o),e(X3,G6o),e(O,X6o),e(O,V3),e(V3,Vae),e(Vae,V6o),e(V3,z6o),e(V3,Mj),e(Mj,W6o),e(V3,Q6o),e(O,H6o),e(O,z3),e(z3,zae),e(zae,U6o),e(z3,J6o),e(z3,Ej),e(Ej,Y6o),e(z3,K6o),e(O,Z6o),e(O,W3),e(W3,Wae),e(Wae,eAo),e(W3,oAo),e(W3,yj),e(yj,rAo),e(W3,tAo),e(O,aAo),e(O,Q3),e(Q3,Qae),e(Qae,nAo),e(Q3,sAo),e(Q3,wj),e(wj,lAo),e(Q3,iAo),e(O,dAo),e(O,H3),e(H3,Hae),e(Hae,cAo),e(H3,fAo),e(H3,Aj),e(Aj,mAo),e(H3,gAo),e(O,hAo),e(O,U3),e(U3,Uae),e(Uae,pAo),e(U3,_Ao),e(U3,Lj),e(Lj,uAo),e(U3,bAo),e(O,vAo),e(O,J3),e(J3,Jae),e(Jae,TAo),e(J3,FAo),e(J3,Bj),e(Bj,CAo),e(J3,MAo),e(O,EAo),e(O,Y3),e(Y3,Yae),e(Yae,yAo),e(Y3,wAo),e(Y3,xj),e(xj,AAo),e(Y3,LAo),e(O,BAo),e(O,K3),e(K3,Kae),e(Kae,xAo),e(K3,kAo),e(K3,kj),e(kj,RAo),e(K3,SAo),e(O,PAo),e(O,Z3),e(Z3,Zae),e(Zae,$Ao),e(Z3,IAo),e(Z3,Rj),e(Rj,jAo),e(Z3,NAo),e(O,DAo),e(O,e2),e(e2,ene),e(ene,qAo),e(e2,OAo),e(e2,Sj),e(Sj,GAo),e(e2,XAo),e(O,VAo),e(O,o2),e(o2,one),e(one,zAo),e(o2,WAo),e(o2,Pj),e(Pj,QAo),e(o2,HAo),e(O,UAo),e(O,r2),e(r2,rne),e(rne,JAo),e(r2,YAo),e(r2,$j),e($j,KAo),e(r2,ZAo),e(O,e0o),e(O,t2),e(t2,tne),e(tne,o0o),e(t2,r0o),e(t2,Ij),e(Ij,t0o),e(t2,a0o),e(O,n0o),e(O,a2),e(a2,ane),e(ane,s0o),e(a2,l0o),e(a2,jj),e(jj,i0o),e(a2,d0o),e(O,c0o),e(O,n2),e(n2,nne),e(nne,f0o),e(n2,m0o),e(n2,Nj),e(Nj,g0o),e(n2,h0o),e(O,p0o),e(O,s2),e(s2,sne),e(sne,_0o),e(s2,u0o),e(s2,Dj),e(Dj,b0o),e(s2,v0o),e(O,T0o),e(O,l2),e(l2,lne),e(lne,F0o),e(l2,C0o),e(l2,qj),e(qj,M0o),e(l2,E0o),e(O,y0o),e(O,i2),e(i2,ine),e(ine,w0o),e(i2,A0o),e(i2,Oj),e(Oj,L0o),e(i2,B0o),e(O,x0o),e(O,d2),e(d2,dne),e(dne,k0o),e(d2,R0o),e(d2,Gj),e(Gj,S0o),e(d2,P0o),e(O,$0o),e(O,c2),e(c2,cne),e(cne,I0o),e(c2,j0o),e(c2,Xj),e(Xj,N0o),e(c2,D0o),e(O,q0o),e(O,f2),e(f2,fne),e(fne,O0o),e(f2,G0o),e(f2,Vj),e(Vj,X0o),e(f2,V0o),e(O,z0o),e(O,m2),e(m2,mne),e(mne,W0o),e(m2,Q0o),e(m2,zj),e(zj,H0o),e(m2,U0o),e(O,J0o),e(O,g2),e(g2,gne),e(gne,Y0o),e(g2,K0o),e(g2,Wj),e(Wj,Z0o),e(g2,eLo),e(O,oLo),e(O,h2),e(h2,hne),e(hne,rLo),e(h2,tLo),e(h2,Qj),e(Qj,aLo),e(h2,nLo),e(O,sLo),e(O,p2),e(p2,pne),e(pne,lLo),e(p2,iLo),e(p2,Hj),e(Hj,dLo),e(p2,cLo),e(O,fLo),e(O,_2),e(_2,_ne),e(_ne,mLo),e(_2,gLo),e(_2,Uj),e(Uj,hLo),e(_2,pLo),e(Ve,_Lo),e(Ve,u2),e(u2,uLo),e(u2,une),e(une,bLo),e(u2,vLo),e(u2,bne),e(bne,TLo),e(Ve,FLo),e(Ve,vne),e(vne,CLo),e(Ve,MLo),g(Bw,Ve,null),b(c,fke,u),b(c,bd,u),e(bd,b2),e(b2,Tne),g(xw,Tne,null),e(bd,ELo),e(bd,Fne),e(Fne,yLo),b(c,mke,u),b(c,tr,u),g(kw,tr,null),e(tr,wLo),e(tr,vd),e(vd,ALo),e(vd,Cne),e(Cne,LLo),e(vd,BLo),e(vd,Mne),e(Mne,xLo),e(vd,kLo),e(tr,RLo),e(tr,Rw),e(Rw,SLo),e(Rw,Ene),e(Ene,PLo),e(Rw,$Lo),e(tr,ILo),e(tr,Yr),g(Sw,Yr,null),e(Yr,jLo),e(Yr,yne),e(yne,NLo),e(Yr,DLo),e(Yr,Td),e(Td,qLo),e(Td,wne),e(wne,OLo),e(Td,GLo),e(Td,Ane),e(Ane,XLo),e(Td,VLo),e(Yr,zLo),e(Yr,Lne),e(Lne,WLo),e(Yr,QLo),g(Pw,Yr,null),e(tr,HLo),e(tr,ze),g($w,ze,null),e(ze,ULo),e(ze,Bne),e(Bne,JLo),e(ze,YLo),e(ze,Ya),e(Ya,KLo),e(Ya,xne),e(xne,ZLo),e(Ya,e7o),e(Ya,kne),e(kne,o7o),e(Ya,r7o),e(Ya,Rne),e(Rne,t7o),e(Ya,a7o),e(ze,n7o),e(ze,da),e(da,v2),e(v2,Sne),e(Sne,s7o),e(v2,l7o),e(v2,Jj),e(Jj,i7o),e(v2,d7o),e(da,c7o),e(da,T2),e(T2,Pne),e(Pne,f7o),e(T2,m7o),e(T2,Yj),e(Yj,g7o),e(T2,h7o),e(da,p7o),e(da,F2),e(F2,$ne),e($ne,_7o),e(F2,u7o),e(F2,Kj),e(Kj,b7o),e(F2,v7o),e(da,T7o),e(da,C2),e(C2,Ine),e(Ine,F7o),e(C2,C7o),e(C2,Zj),e(Zj,M7o),e(C2,E7o),e(da,y7o),e(da,M2),e(M2,jne),e(jne,w7o),e(M2,A7o),e(M2,eN),e(eN,L7o),e(M2,B7o),e(ze,x7o),e(ze,E2),e(E2,k7o),e(E2,Nne),e(Nne,R7o),e(E2,S7o),e(E2,Dne),e(Dne,P7o),e(ze,$7o),e(ze,qne),e(qne,I7o),e(ze,j7o),g(Iw,ze,null),b(c,gke,u),b(c,Fd,u),e(Fd,y2),e(y2,One),g(jw,One,null),e(Fd,N7o),e(Fd,Gne),e(Gne,D7o),b(c,hke,u),b(c,ar,u),g(Nw,ar,null),e(ar,q7o),e(ar,Cd),e(Cd,O7o),e(Cd,Xne),e(Xne,G7o),e(Cd,X7o),e(Cd,Vne),e(Vne,V7o),e(Cd,z7o),e(ar,W7o),e(ar,Dw),e(Dw,Q7o),e(Dw,zne),e(zne,H7o),e(Dw,U7o),e(ar,J7o),e(ar,Kr),g(qw,Kr,null),e(Kr,Y7o),e(Kr,Wne),e(Wne,K7o),e(Kr,Z7o),e(Kr,Md),e(Md,e8o),e(Md,Qne),e(Qne,o8o),e(Md,r8o),e(Md,Hne),e(Hne,t8o),e(Md,a8o),e(Kr,n8o),e(Kr,Une),e(Une,s8o),e(Kr,l8o),g(Ow,Kr,null),e(ar,i8o),e(ar,We),g(Gw,We,null),e(We,d8o),e(We,Jne),e(Jne,c8o),e(We,f8o),e(We,Ka),e(Ka,m8o),e(Ka,Yne),e(Yne,g8o),e(Ka,h8o),e(Ka,Kne),e(Kne,p8o),e(Ka,_8o),e(Ka,Zne),e(Zne,u8o),e(Ka,b8o),e(We,v8o),e(We,D),e(D,w2),e(w2,ese),e(ese,T8o),e(w2,F8o),e(w2,oN),e(oN,C8o),e(w2,M8o),e(D,E8o),e(D,A2),e(A2,ose),e(ose,y8o),e(A2,w8o),e(A2,rN),e(rN,A8o),e(A2,L8o),e(D,B8o),e(D,L2),e(L2,rse),e(rse,x8o),e(L2,k8o),e(L2,tN),e(tN,R8o),e(L2,S8o),e(D,P8o),e(D,B2),e(B2,tse),e(tse,$8o),e(B2,I8o),e(B2,aN),e(aN,j8o),e(B2,N8o),e(D,D8o),e(D,x2),e(x2,ase),e(ase,q8o),e(x2,O8o),e(x2,nN),e(nN,G8o),e(x2,X8o),e(D,V8o),e(D,k2),e(k2,nse),e(nse,z8o),e(k2,W8o),e(k2,sN),e(sN,Q8o),e(k2,H8o),e(D,U8o),e(D,R2),e(R2,sse),e(sse,J8o),e(R2,Y8o),e(R2,lN),e(lN,K8o),e(R2,Z8o),e(D,e9o),e(D,S2),e(S2,lse),e(lse,o9o),e(S2,r9o),e(S2,iN),e(iN,t9o),e(S2,a9o),e(D,n9o),e(D,P2),e(P2,ise),e(ise,s9o),e(P2,l9o),e(P2,dN),e(dN,i9o),e(P2,d9o),e(D,c9o),e(D,$2),e($2,dse),e(dse,f9o),e($2,m9o),e($2,cN),e(cN,g9o),e($2,h9o),e(D,p9o),e(D,I2),e(I2,cse),e(cse,_9o),e(I2,u9o),e(I2,fN),e(fN,b9o),e(I2,v9o),e(D,T9o),e(D,j2),e(j2,fse),e(fse,F9o),e(j2,C9o),e(j2,mN),e(mN,M9o),e(j2,E9o),e(D,y9o),e(D,N2),e(N2,mse),e(mse,w9o),e(N2,A9o),e(N2,gN),e(gN,L9o),e(N2,B9o),e(D,x9o),e(D,D2),e(D2,gse),e(gse,k9o),e(D2,R9o),e(D2,hN),e(hN,S9o),e(D2,P9o),e(D,$9o),e(D,q2),e(q2,hse),e(hse,I9o),e(q2,j9o),e(q2,pN),e(pN,N9o),e(q2,D9o),e(D,q9o),e(D,O2),e(O2,pse),e(pse,O9o),e(O2,G9o),e(O2,_N),e(_N,X9o),e(O2,V9o),e(D,z9o),e(D,G2),e(G2,_se),e(_se,W9o),e(G2,Q9o),e(G2,uN),e(uN,H9o),e(G2,U9o),e(D,J9o),e(D,X2),e(X2,use),e(use,Y9o),e(X2,K9o),e(X2,bN),e(bN,Z9o),e(X2,eBo),e(D,oBo),e(D,V2),e(V2,bse),e(bse,rBo),e(V2,tBo),e(V2,vN),e(vN,aBo),e(V2,nBo),e(D,sBo),e(D,z2),e(z2,vse),e(vse,lBo),e(z2,iBo),e(z2,TN),e(TN,dBo),e(z2,cBo),e(D,fBo),e(D,W2),e(W2,Tse),e(Tse,mBo),e(W2,gBo),e(W2,FN),e(FN,hBo),e(W2,pBo),e(D,_Bo),e(D,Q2),e(Q2,Fse),e(Fse,uBo),e(Q2,bBo),e(Q2,CN),e(CN,vBo),e(Q2,TBo),e(D,FBo),e(D,H2),e(H2,Cse),e(Cse,CBo),e(H2,MBo),e(H2,MN),e(MN,EBo),e(H2,yBo),e(D,wBo),e(D,U2),e(U2,Mse),e(Mse,ABo),e(U2,LBo),e(U2,EN),e(EN,BBo),e(U2,xBo),e(D,kBo),e(D,J2),e(J2,Ese),e(Ese,RBo),e(J2,SBo),e(J2,yN),e(yN,PBo),e(J2,$Bo),e(D,IBo),e(D,Y2),e(Y2,yse),e(yse,jBo),e(Y2,NBo),e(Y2,wN),e(wN,DBo),e(Y2,qBo),e(D,OBo),e(D,K2),e(K2,wse),e(wse,GBo),e(K2,XBo),e(K2,AN),e(AN,VBo),e(K2,zBo),e(D,WBo),e(D,Z2),e(Z2,Ase),e(Ase,QBo),e(Z2,HBo),e(Z2,LN),e(LN,UBo),e(Z2,JBo),e(D,YBo),e(D,ev),e(ev,Lse),e(Lse,KBo),e(ev,ZBo),e(ev,BN),e(BN,exo),e(ev,oxo),e(D,rxo),e(D,ov),e(ov,Bse),e(Bse,txo),e(ov,axo),e(ov,xN),e(xN,nxo),e(ov,sxo),e(D,lxo),e(D,rv),e(rv,xse),e(xse,ixo),e(rv,dxo),e(rv,kN),e(kN,cxo),e(rv,fxo),e(D,mxo),e(D,tv),e(tv,kse),e(kse,gxo),e(tv,hxo),e(tv,RN),e(RN,pxo),e(tv,_xo),e(D,uxo),e(D,av),e(av,Rse),e(Rse,bxo),e(av,vxo),e(av,SN),e(SN,Txo),e(av,Fxo),e(We,Cxo),e(We,nv),e(nv,Mxo),e(nv,Sse),e(Sse,Exo),e(nv,yxo),e(nv,Pse),e(Pse,wxo),e(We,Axo),e(We,$se),e($se,Lxo),e(We,Bxo),g(Xw,We,null),b(c,pke,u),b(c,Ed,u),e(Ed,sv),e(sv,Ise),g(Vw,Ise,null),e(Ed,xxo),e(Ed,jse),e(jse,kxo),b(c,_ke,u),b(c,nr,u),g(zw,nr,null),e(nr,Rxo),e(nr,yd),e(yd,Sxo),e(yd,Nse),e(Nse,Pxo),e(yd,$xo),e(yd,Dse),e(Dse,Ixo),e(yd,jxo),e(nr,Nxo),e(nr,Ww),e(Ww,Dxo),e(Ww,qse),e(qse,qxo),e(Ww,Oxo),e(nr,Gxo),e(nr,Zr),g(Qw,Zr,null),e(Zr,Xxo),e(Zr,Ose),e(Ose,Vxo),e(Zr,zxo),e(Zr,wd),e(wd,Wxo),e(wd,Gse),e(Gse,Qxo),e(wd,Hxo),e(wd,Xse),e(Xse,Uxo),e(wd,Jxo),e(Zr,Yxo),e(Zr,Vse),e(Vse,Kxo),e(Zr,Zxo),g(Hw,Zr,null),e(nr,eko),e(nr,Qe),g(Uw,Qe,null),e(Qe,oko),e(Qe,zse),e(zse,rko),e(Qe,tko),e(Qe,Za),e(Za,ako),e(Za,Wse),e(Wse,nko),e(Za,sko),e(Za,Qse),e(Qse,lko),e(Za,iko),e(Za,Hse),e(Hse,dko),e(Za,cko),e(Qe,fko),e(Qe,R),e(R,lv),e(lv,Use),e(Use,mko),e(lv,gko),e(lv,PN),e(PN,hko),e(lv,pko),e(R,_ko),e(R,iv),e(iv,Jse),e(Jse,uko),e(iv,bko),e(iv,$N),e($N,vko),e(iv,Tko),e(R,Fko),e(R,dv),e(dv,Yse),e(Yse,Cko),e(dv,Mko),e(dv,IN),e(IN,Eko),e(dv,yko),e(R,wko),e(R,cv),e(cv,Kse),e(Kse,Ako),e(cv,Lko),e(cv,jN),e(jN,Bko),e(cv,xko),e(R,kko),e(R,fv),e(fv,Zse),e(Zse,Rko),e(fv,Sko),e(fv,NN),e(NN,Pko),e(fv,$ko),e(R,Iko),e(R,mv),e(mv,ele),e(ele,jko),e(mv,Nko),e(mv,DN),e(DN,Dko),e(mv,qko),e(R,Oko),e(R,gv),e(gv,ole),e(ole,Gko),e(gv,Xko),e(gv,qN),e(qN,Vko),e(gv,zko),e(R,Wko),e(R,hv),e(hv,rle),e(rle,Qko),e(hv,Hko),e(hv,ON),e(ON,Uko),e(hv,Jko),e(R,Yko),e(R,pv),e(pv,tle),e(tle,Kko),e(pv,Zko),e(pv,GN),e(GN,eRo),e(pv,oRo),e(R,rRo),e(R,_v),e(_v,ale),e(ale,tRo),e(_v,aRo),e(_v,XN),e(XN,nRo),e(_v,sRo),e(R,lRo),e(R,uv),e(uv,nle),e(nle,iRo),e(uv,dRo),e(uv,VN),e(VN,cRo),e(uv,fRo),e(R,mRo),e(R,bv),e(bv,sle),e(sle,gRo),e(bv,hRo),e(bv,zN),e(zN,pRo),e(bv,_Ro),e(R,uRo),e(R,vv),e(vv,lle),e(lle,bRo),e(vv,vRo),e(vv,WN),e(WN,TRo),e(vv,FRo),e(R,CRo),e(R,Tv),e(Tv,ile),e(ile,MRo),e(Tv,ERo),e(Tv,QN),e(QN,yRo),e(Tv,wRo),e(R,ARo),e(R,Fv),e(Fv,dle),e(dle,LRo),e(Fv,BRo),e(Fv,HN),e(HN,xRo),e(Fv,kRo),e(R,RRo),e(R,Cv),e(Cv,cle),e(cle,SRo),e(Cv,PRo),e(Cv,UN),e(UN,$Ro),e(Cv,IRo),e(R,jRo),e(R,Mv),e(Mv,fle),e(fle,NRo),e(Mv,DRo),e(Mv,JN),e(JN,qRo),e(Mv,ORo),e(R,GRo),e(R,Ev),e(Ev,mle),e(mle,XRo),e(Ev,VRo),e(Ev,YN),e(YN,zRo),e(Ev,WRo),e(R,QRo),e(R,yv),e(yv,gle),e(gle,HRo),e(yv,URo),e(yv,KN),e(KN,JRo),e(yv,YRo),e(R,KRo),e(R,wv),e(wv,hle),e(hle,ZRo),e(wv,eSo),e(wv,ZN),e(ZN,oSo),e(wv,rSo),e(R,tSo),e(R,Av),e(Av,ple),e(ple,aSo),e(Av,nSo),e(Av,eD),e(eD,sSo),e(Av,lSo),e(R,iSo),e(R,Lv),e(Lv,_le),e(_le,dSo),e(Lv,cSo),e(Lv,oD),e(oD,fSo),e(Lv,mSo),e(R,gSo),e(R,Bv),e(Bv,ule),e(ule,hSo),e(Bv,pSo),e(Bv,rD),e(rD,_So),e(Bv,uSo),e(R,bSo),e(R,xv),e(xv,ble),e(ble,vSo),e(xv,TSo),e(xv,tD),e(tD,FSo),e(xv,CSo),e(R,MSo),e(R,kv),e(kv,vle),e(vle,ESo),e(kv,ySo),e(kv,aD),e(aD,wSo),e(kv,ASo),e(R,LSo),e(R,Rv),e(Rv,Tle),e(Tle,BSo),e(Rv,xSo),e(Rv,nD),e(nD,kSo),e(Rv,RSo),e(R,SSo),e(R,Sv),e(Sv,Fle),e(Fle,PSo),e(Sv,$So),e(Sv,sD),e(sD,ISo),e(Sv,jSo),e(R,NSo),e(R,Pv),e(Pv,Cle),e(Cle,DSo),e(Pv,qSo),e(Pv,lD),e(lD,OSo),e(Pv,GSo),e(R,XSo),e(R,$v),e($v,Mle),e(Mle,VSo),e($v,zSo),e($v,iD),e(iD,WSo),e($v,QSo),e(R,HSo),e(R,Iv),e(Iv,Ele),e(Ele,USo),e(Iv,JSo),e(Iv,dD),e(dD,YSo),e(Iv,KSo),e(R,ZSo),e(R,jv),e(jv,yle),e(yle,ePo),e(jv,oPo),e(jv,cD),e(cD,rPo),e(jv,tPo),e(R,aPo),e(R,Nv),e(Nv,wle),e(wle,nPo),e(Nv,sPo),e(Nv,fD),e(fD,lPo),e(Nv,iPo),e(R,dPo),e(R,Dv),e(Dv,Ale),e(Ale,cPo),e(Dv,fPo),e(Dv,mD),e(mD,mPo),e(Dv,gPo),e(R,hPo),e(R,qv),e(qv,Lle),e(Lle,pPo),e(qv,_Po),e(qv,gD),e(gD,uPo),e(qv,bPo),e(R,vPo),e(R,Ov),e(Ov,Ble),e(Ble,TPo),e(Ov,FPo),e(Ov,hD),e(hD,CPo),e(Ov,MPo),e(R,EPo),e(R,Gv),e(Gv,xle),e(xle,yPo),e(Gv,wPo),e(Gv,pD),e(pD,APo),e(Gv,LPo),e(R,BPo),e(R,Xv),e(Xv,kle),e(kle,xPo),e(Xv,kPo),e(Xv,_D),e(_D,RPo),e(Xv,SPo),e(R,PPo),e(R,Vv),e(Vv,Rle),e(Rle,$Po),e(Vv,IPo),e(Vv,uD),e(uD,jPo),e(Vv,NPo),e(R,DPo),e(R,zv),e(zv,Sle),e(Sle,qPo),e(zv,OPo),e(zv,bD),e(bD,GPo),e(zv,XPo),e(Qe,VPo),e(Qe,Wv),e(Wv,zPo),e(Wv,Ple),e(Ple,WPo),e(Wv,QPo),e(Wv,$le),e($le,HPo),e(Qe,UPo),e(Qe,Ile),e(Ile,JPo),e(Qe,YPo),g(Jw,Qe,null),b(c,uke,u),b(c,Ad,u),e(Ad,Qv),e(Qv,jle),g(Yw,jle,null),e(Ad,KPo),e(Ad,Nle),e(Nle,ZPo),b(c,bke,u),b(c,sr,u),g(Kw,sr,null),e(sr,e$o),e(sr,Ld),e(Ld,o$o),e(Ld,Dle),e(Dle,r$o),e(Ld,t$o),e(Ld,qle),e(qle,a$o),e(Ld,n$o),e(sr,s$o),e(sr,Zw),e(Zw,l$o),e(Zw,Ole),e(Ole,i$o),e(Zw,d$o),e(sr,c$o),e(sr,et),g(e6,et,null),e(et,f$o),e(et,Gle),e(Gle,m$o),e(et,g$o),e(et,Bd),e(Bd,h$o),e(Bd,Xle),e(Xle,p$o),e(Bd,_$o),e(Bd,Vle),e(Vle,u$o),e(Bd,b$o),e(et,v$o),e(et,zle),e(zle,T$o),e(et,F$o),g(o6,et,null),e(sr,C$o),e(sr,He),g(r6,He,null),e(He,M$o),e(He,Wle),e(Wle,E$o),e(He,y$o),e(He,en),e(en,w$o),e(en,Qle),e(Qle,A$o),e(en,L$o),e(en,Hle),e(Hle,B$o),e(en,x$o),e(en,Ule),e(Ule,k$o),e(en,R$o),e(He,S$o),e(He,Jle),e(Jle,Hv),e(Hv,Yle),e(Yle,P$o),e(Hv,$$o),e(Hv,vD),e(vD,I$o),e(Hv,j$o),e(He,N$o),e(He,Uv),e(Uv,D$o),e(Uv,Kle),e(Kle,q$o),e(Uv,O$o),e(Uv,Zle),e(Zle,G$o),e(He,X$o),e(He,eie),e(eie,V$o),e(He,z$o),g(t6,He,null),b(c,vke,u),b(c,xd,u),e(xd,Jv),e(Jv,oie),g(a6,oie,null),e(xd,W$o),e(xd,rie),e(rie,Q$o),b(c,Tke,u),b(c,lr,u),g(n6,lr,null),e(lr,H$o),e(lr,kd),e(kd,U$o),e(kd,tie),e(tie,J$o),e(kd,Y$o),e(kd,aie),e(aie,K$o),e(kd,Z$o),e(lr,eIo),e(lr,s6),e(s6,oIo),e(s6,nie),e(nie,rIo),e(s6,tIo),e(lr,aIo),e(lr,ot),g(l6,ot,null),e(ot,nIo),e(ot,sie),e(sie,sIo),e(ot,lIo),e(ot,Rd),e(Rd,iIo),e(Rd,lie),e(lie,dIo),e(Rd,cIo),e(Rd,iie),e(iie,fIo),e(Rd,mIo),e(ot,gIo),e(ot,die),e(die,hIo),e(ot,pIo),g(i6,ot,null),e(lr,_Io),e(lr,Ue),g(d6,Ue,null),e(Ue,uIo),e(Ue,cie),e(cie,bIo),e(Ue,vIo),e(Ue,on),e(on,TIo),e(on,fie),e(fie,FIo),e(on,CIo),e(on,mie),e(mie,MIo),e(on,EIo),e(on,gie),e(gie,yIo),e(on,wIo),e(Ue,AIo),e(Ue,me),e(me,Yv),e(Yv,hie),e(hie,LIo),e(Yv,BIo),e(Yv,TD),e(TD,xIo),e(Yv,kIo),e(me,RIo),e(me,Kv),e(Kv,pie),e(pie,SIo),e(Kv,PIo),e(Kv,FD),e(FD,$Io),e(Kv,IIo),e(me,jIo),e(me,qs),e(qs,_ie),e(_ie,NIo),e(qs,DIo),e(qs,CD),e(CD,qIo),e(qs,OIo),e(qs,MD),e(MD,GIo),e(qs,XIo),e(me,VIo),e(me,Zv),e(Zv,uie),e(uie,zIo),e(Zv,WIo),e(Zv,ED),e(ED,QIo),e(Zv,HIo),e(me,UIo),e(me,ma),e(ma,bie),e(bie,JIo),e(ma,YIo),e(ma,yD),e(yD,KIo),e(ma,ZIo),e(ma,wD),e(wD,ejo),e(ma,ojo),e(ma,AD),e(AD,rjo),e(ma,tjo),e(me,ajo),e(me,eT),e(eT,vie),e(vie,njo),e(eT,sjo),e(eT,LD),e(LD,ljo),e(eT,ijo),e(me,djo),e(me,oT),e(oT,Tie),e(Tie,cjo),e(oT,fjo),e(oT,BD),e(BD,mjo),e(oT,gjo),e(me,hjo),e(me,rT),e(rT,Fie),e(Fie,pjo),e(rT,_jo),e(rT,xD),e(xD,ujo),e(rT,bjo),e(me,vjo),e(me,tT),e(tT,Cie),e(Cie,Tjo),e(tT,Fjo),e(tT,kD),e(kD,Cjo),e(tT,Mjo),e(me,Ejo),e(me,aT),e(aT,Mie),e(Mie,yjo),e(aT,wjo),e(aT,RD),e(RD,Ajo),e(aT,Ljo),e(me,Bjo),e(me,nT),e(nT,Eie),e(Eie,xjo),e(nT,kjo),e(nT,SD),e(SD,Rjo),e(nT,Sjo),e(Ue,Pjo),e(Ue,sT),e(sT,$jo),e(sT,yie),e(yie,Ijo),e(sT,jjo),e(sT,wie),e(wie,Njo),e(Ue,Djo),e(Ue,Aie),e(Aie,qjo),e(Ue,Ojo),g(c6,Ue,null),b(c,Fke,u),b(c,Sd,u),e(Sd,lT),e(lT,Lie),g(f6,Lie,null),e(Sd,Gjo),e(Sd,Bie),e(Bie,Xjo),b(c,Cke,u),b(c,ir,u),g(m6,ir,null),e(ir,Vjo),e(ir,Pd),e(Pd,zjo),e(Pd,xie),e(xie,Wjo),e(Pd,Qjo),e(Pd,kie),e(kie,Hjo),e(Pd,Ujo),e(ir,Jjo),e(ir,g6),e(g6,Yjo),e(g6,Rie),e(Rie,Kjo),e(g6,Zjo),e(ir,eNo),e(ir,rt),g(h6,rt,null),e(rt,oNo),e(rt,Sie),e(Sie,rNo),e(rt,tNo),e(rt,$d),e($d,aNo),e($d,Pie),e(Pie,nNo),e($d,sNo),e($d,$ie),e($ie,lNo),e($d,iNo),e(rt,dNo),e(rt,Iie),e(Iie,cNo),e(rt,fNo),g(p6,rt,null),e(ir,mNo),e(ir,Je),g(_6,Je,null),e(Je,gNo),e(Je,jie),e(jie,hNo),e(Je,pNo),e(Je,rn),e(rn,_No),e(rn,Nie),e(Nie,uNo),e(rn,bNo),e(rn,Die),e(Die,vNo),e(rn,TNo),e(rn,qie),e(qie,FNo),e(rn,CNo),e(Je,MNo),e(Je,Oie),e(Oie,iT),e(iT,Gie),e(Gie,ENo),e(iT,yNo),e(iT,PD),e(PD,wNo),e(iT,ANo),e(Je,LNo),e(Je,dT),e(dT,BNo),e(dT,Xie),e(Xie,xNo),e(dT,kNo),e(dT,Vie),e(Vie,RNo),e(Je,SNo),e(Je,zie),e(zie,PNo),e(Je,$No),g(u6,Je,null),b(c,Mke,u),b(c,Id,u),e(Id,cT),e(cT,Wie),g(b6,Wie,null),e(Id,INo),e(Id,Qie),e(Qie,jNo),b(c,Eke,u),b(c,dr,u),g(v6,dr,null),e(dr,NNo),e(dr,jd),e(jd,DNo),e(jd,Hie),e(Hie,qNo),e(jd,ONo),e(jd,Uie),e(Uie,GNo),e(jd,XNo),e(dr,VNo),e(dr,T6),e(T6,zNo),e(T6,Jie),e(Jie,WNo),e(T6,QNo),e(dr,HNo),e(dr,tt),g(F6,tt,null),e(tt,UNo),e(tt,Yie),e(Yie,JNo),e(tt,YNo),e(tt,Nd),e(Nd,KNo),e(Nd,Kie),e(Kie,ZNo),e(Nd,eDo),e(Nd,Zie),e(Zie,oDo),e(Nd,rDo),e(tt,tDo),e(tt,ede),e(ede,aDo),e(tt,nDo),g(C6,tt,null),e(dr,sDo),e(dr,Ye),g(M6,Ye,null),e(Ye,lDo),e(Ye,ode),e(ode,iDo),e(Ye,dDo),e(Ye,tn),e(tn,cDo),e(tn,rde),e(rde,fDo),e(tn,mDo),e(tn,tde),e(tde,gDo),e(tn,hDo),e(tn,ade),e(ade,pDo),e(tn,_Do),e(Ye,uDo),e(Ye,ke),e(ke,fT),e(fT,nde),e(nde,bDo),e(fT,vDo),e(fT,$D),e($D,TDo),e(fT,FDo),e(ke,CDo),e(ke,mT),e(mT,sde),e(sde,MDo),e(mT,EDo),e(mT,ID),e(ID,yDo),e(mT,wDo),e(ke,ADo),e(ke,gT),e(gT,lde),e(lde,LDo),e(gT,BDo),e(gT,jD),e(jD,xDo),e(gT,kDo),e(ke,RDo),e(ke,hT),e(hT,ide),e(ide,SDo),e(hT,PDo),e(hT,ND),e(ND,$Do),e(hT,IDo),e(ke,jDo),e(ke,pT),e(pT,dde),e(dde,NDo),e(pT,DDo),e(pT,DD),e(DD,qDo),e(pT,ODo),e(ke,GDo),e(ke,_T),e(_T,cde),e(cde,XDo),e(_T,VDo),e(_T,qD),e(qD,zDo),e(_T,WDo),e(ke,QDo),e(ke,uT),e(uT,fde),e(fde,HDo),e(uT,UDo),e(uT,OD),e(OD,JDo),e(uT,YDo),e(ke,KDo),e(ke,bT),e(bT,mde),e(mde,ZDo),e(bT,eqo),e(bT,GD),e(GD,oqo),e(bT,rqo),e(Ye,tqo),e(Ye,vT),e(vT,aqo),e(vT,gde),e(gde,nqo),e(vT,sqo),e(vT,hde),e(hde,lqo),e(Ye,iqo),e(Ye,pde),e(pde,dqo),e(Ye,cqo),g(E6,Ye,null),b(c,yke,u),b(c,Dd,u),e(Dd,TT),e(TT,_de),g(y6,_de,null),e(Dd,fqo),e(Dd,ude),e(ude,mqo),b(c,wke,u),b(c,cr,u),g(w6,cr,null),e(cr,gqo),e(cr,qd),e(qd,hqo),e(qd,bde),e(bde,pqo),e(qd,_qo),e(qd,vde),e(vde,uqo),e(qd,bqo),e(cr,vqo),e(cr,A6),e(A6,Tqo),e(A6,Tde),e(Tde,Fqo),e(A6,Cqo),e(cr,Mqo),e(cr,at),g(L6,at,null),e(at,Eqo),e(at,Fde),e(Fde,yqo),e(at,wqo),e(at,Od),e(Od,Aqo),e(Od,Cde),e(Cde,Lqo),e(Od,Bqo),e(Od,Mde),e(Mde,xqo),e(Od,kqo),e(at,Rqo),e(at,Ede),e(Ede,Sqo),e(at,Pqo),g(B6,at,null),e(cr,$qo),e(cr,Ke),g(x6,Ke,null),e(Ke,Iqo),e(Ke,yde),e(yde,jqo),e(Ke,Nqo),e(Ke,an),e(an,Dqo),e(an,wde),e(wde,qqo),e(an,Oqo),e(an,Ade),e(Ade,Gqo),e(an,Xqo),e(an,Lde),e(Lde,Vqo),e(an,zqo),e(Ke,Wqo),e(Ke,nn),e(nn,FT),e(FT,Bde),e(Bde,Qqo),e(FT,Hqo),e(FT,XD),e(XD,Uqo),e(FT,Jqo),e(nn,Yqo),e(nn,CT),e(CT,xde),e(xde,Kqo),e(CT,Zqo),e(CT,VD),e(VD,eOo),e(CT,oOo),e(nn,rOo),e(nn,MT),e(MT,kde),e(kde,tOo),e(MT,aOo),e(MT,zD),e(zD,nOo),e(MT,sOo),e(nn,lOo),e(nn,ET),e(ET,Rde),e(Rde,iOo),e(ET,dOo),e(ET,WD),e(WD,cOo),e(ET,fOo),e(Ke,mOo),e(Ke,yT),e(yT,gOo),e(yT,Sde),e(Sde,hOo),e(yT,pOo),e(yT,Pde),e(Pde,_Oo),e(Ke,uOo),e(Ke,$de),e($de,bOo),e(Ke,vOo),g(k6,Ke,null),b(c,Ake,u),b(c,Gd,u),e(Gd,wT),e(wT,Ide),g(R6,Ide,null),e(Gd,TOo),e(Gd,jde),e(jde,FOo),b(c,Lke,u),b(c,fr,u),g(S6,fr,null),e(fr,COo),e(fr,Xd),e(Xd,MOo),e(Xd,Nde),e(Nde,EOo),e(Xd,yOo),e(Xd,Dde),e(Dde,wOo),e(Xd,AOo),e(fr,LOo),e(fr,P6),e(P6,BOo),e(P6,qde),e(qde,xOo),e(P6,kOo),e(fr,ROo),e(fr,nt),g($6,nt,null),e(nt,SOo),e(nt,Ode),e(Ode,POo),e(nt,$Oo),e(nt,Vd),e(Vd,IOo),e(Vd,Gde),e(Gde,jOo),e(Vd,NOo),e(Vd,Xde),e(Xde,DOo),e(Vd,qOo),e(nt,OOo),e(nt,Vde),e(Vde,GOo),e(nt,XOo),g(I6,nt,null),e(fr,VOo),e(fr,Ze),g(j6,Ze,null),e(Ze,zOo),e(Ze,zde),e(zde,WOo),e(Ze,QOo),e(Ze,sn),e(sn,HOo),e(sn,Wde),e(Wde,UOo),e(sn,JOo),e(sn,Qde),e(Qde,YOo),e(sn,KOo),e(sn,Hde),e(Hde,ZOo),e(sn,eGo),e(Ze,oGo),e(Ze,Re),e(Re,AT),e(AT,Ude),e(Ude,rGo),e(AT,tGo),e(AT,QD),e(QD,aGo),e(AT,nGo),e(Re,sGo),e(Re,LT),e(LT,Jde),e(Jde,lGo),e(LT,iGo),e(LT,HD),e(HD,dGo),e(LT,cGo),e(Re,fGo),e(Re,BT),e(BT,Yde),e(Yde,mGo),e(BT,gGo),e(BT,UD),e(UD,hGo),e(BT,pGo),e(Re,_Go),e(Re,xT),e(xT,Kde),e(Kde,uGo),e(xT,bGo),e(xT,JD),e(JD,vGo),e(xT,TGo),e(Re,FGo),e(Re,kT),e(kT,Zde),e(Zde,CGo),e(kT,MGo),e(kT,YD),e(YD,EGo),e(kT,yGo),e(Re,wGo),e(Re,RT),e(RT,ece),e(ece,AGo),e(RT,LGo),e(RT,KD),e(KD,BGo),e(RT,xGo),e(Re,kGo),e(Re,ST),e(ST,oce),e(oce,RGo),e(ST,SGo),e(ST,ZD),e(ZD,PGo),e(ST,$Go),e(Re,IGo),e(Re,PT),e(PT,rce),e(rce,jGo),e(PT,NGo),e(PT,eq),e(eq,DGo),e(PT,qGo),e(Ze,OGo),e(Ze,$T),e($T,GGo),e($T,tce),e(tce,XGo),e($T,VGo),e($T,ace),e(ace,zGo),e(Ze,WGo),e(Ze,nce),e(nce,QGo),e(Ze,HGo),g(N6,Ze,null),b(c,Bke,u),b(c,zd,u),e(zd,IT),e(IT,sce),g(D6,sce,null),e(zd,UGo),e(zd,lce),e(lce,JGo),b(c,xke,u),b(c,mr,u),g(q6,mr,null),e(mr,YGo),e(mr,Wd),e(Wd,KGo),e(Wd,ice),e(ice,ZGo),e(Wd,eXo),e(Wd,dce),e(dce,oXo),e(Wd,rXo),e(mr,tXo),e(mr,O6),e(O6,aXo),e(O6,cce),e(cce,nXo),e(O6,sXo),e(mr,lXo),e(mr,st),g(G6,st,null),e(st,iXo),e(st,fce),e(fce,dXo),e(st,cXo),e(st,Qd),e(Qd,fXo),e(Qd,mce),e(mce,mXo),e(Qd,gXo),e(Qd,gce),e(gce,hXo),e(Qd,pXo),e(st,_Xo),e(st,hce),e(hce,uXo),e(st,bXo),g(X6,st,null),e(mr,vXo),e(mr,eo),g(V6,eo,null),e(eo,TXo),e(eo,pce),e(pce,FXo),e(eo,CXo),e(eo,ln),e(ln,MXo),e(ln,_ce),e(_ce,EXo),e(ln,yXo),e(ln,uce),e(uce,wXo),e(ln,AXo),e(ln,bce),e(bce,LXo),e(ln,BXo),e(eo,xXo),e(eo,z6),e(z6,jT),e(jT,vce),e(vce,kXo),e(jT,RXo),e(jT,oq),e(oq,SXo),e(jT,PXo),e(z6,$Xo),e(z6,NT),e(NT,Tce),e(Tce,IXo),e(NT,jXo),e(NT,rq),e(rq,NXo),e(NT,DXo),e(eo,qXo),e(eo,DT),e(DT,OXo),e(DT,Fce),e(Fce,GXo),e(DT,XXo),e(DT,Cce),e(Cce,VXo),e(eo,zXo),e(eo,Mce),e(Mce,WXo),e(eo,QXo),g(W6,eo,null),b(c,kke,u),b(c,Hd,u),e(Hd,qT),e(qT,Ece),g(Q6,Ece,null),e(Hd,HXo),e(Hd,yce),e(yce,UXo),b(c,Rke,u),b(c,gr,u),g(H6,gr,null),e(gr,JXo),e(gr,Ud),e(Ud,YXo),e(Ud,wce),e(wce,KXo),e(Ud,ZXo),e(Ud,Ace),e(Ace,eVo),e(Ud,oVo),e(gr,rVo),e(gr,U6),e(U6,tVo),e(U6,Lce),e(Lce,aVo),e(U6,nVo),e(gr,sVo),e(gr,lt),g(J6,lt,null),e(lt,lVo),e(lt,Bce),e(Bce,iVo),e(lt,dVo),e(lt,Jd),e(Jd,cVo),e(Jd,xce),e(xce,fVo),e(Jd,mVo),e(Jd,kce),e(kce,gVo),e(Jd,hVo),e(lt,pVo),e(lt,Rce),e(Rce,_Vo),e(lt,uVo),g(Y6,lt,null),e(gr,bVo),e(gr,oo),g(K6,oo,null),e(oo,vVo),e(oo,Sce),e(Sce,TVo),e(oo,FVo),e(oo,dn),e(dn,CVo),e(dn,Pce),e(Pce,MVo),e(dn,EVo),e(dn,$ce),e($ce,yVo),e(dn,wVo),e(dn,Ice),e(Ice,AVo),e(dn,LVo),e(oo,BVo),e(oo,cn),e(cn,OT),e(OT,jce),e(jce,xVo),e(OT,kVo),e(OT,tq),e(tq,RVo),e(OT,SVo),e(cn,PVo),e(cn,GT),e(GT,Nce),e(Nce,$Vo),e(GT,IVo),e(GT,aq),e(aq,jVo),e(GT,NVo),e(cn,DVo),e(cn,XT),e(XT,Dce),e(Dce,qVo),e(XT,OVo),e(XT,nq),e(nq,GVo),e(XT,XVo),e(cn,VVo),e(cn,VT),e(VT,qce),e(qce,zVo),e(VT,WVo),e(VT,sq),e(sq,QVo),e(VT,HVo),e(oo,UVo),e(oo,zT),e(zT,JVo),e(zT,Oce),e(Oce,YVo),e(zT,KVo),e(zT,Gce),e(Gce,ZVo),e(oo,ezo),e(oo,Xce),e(Xce,ozo),e(oo,rzo),g(Z6,oo,null),b(c,Ske,u),b(c,Yd,u),e(Yd,WT),e(WT,Vce),g(eA,Vce,null),e(Yd,tzo),e(Yd,zce),e(zce,azo),b(c,Pke,u),b(c,hr,u),g(oA,hr,null),e(hr,nzo),e(hr,Kd),e(Kd,szo),e(Kd,Wce),e(Wce,lzo),e(Kd,izo),e(Kd,Qce),e(Qce,dzo),e(Kd,czo),e(hr,fzo),e(hr,rA),e(rA,mzo),e(rA,Hce),e(Hce,gzo),e(rA,hzo),e(hr,pzo),e(hr,it),g(tA,it,null),e(it,_zo),e(it,Uce),e(Uce,uzo),e(it,bzo),e(it,Zd),e(Zd,vzo),e(Zd,Jce),e(Jce,Tzo),e(Zd,Fzo),e(Zd,Yce),e(Yce,Czo),e(Zd,Mzo),e(it,Ezo),e(it,Kce),e(Kce,yzo),e(it,wzo),g(aA,it,null),e(hr,Azo),e(hr,ro),g(nA,ro,null),e(ro,Lzo),e(ro,Zce),e(Zce,Bzo),e(ro,xzo),e(ro,fn),e(fn,kzo),e(fn,efe),e(efe,Rzo),e(fn,Szo),e(fn,ofe),e(ofe,Pzo),e(fn,$zo),e(fn,rfe),e(rfe,Izo),e(fn,jzo),e(ro,Nzo),e(ro,ec),e(ec,QT),e(QT,tfe),e(tfe,Dzo),e(QT,qzo),e(QT,lq),e(lq,Ozo),e(QT,Gzo),e(ec,Xzo),e(ec,HT),e(HT,afe),e(afe,Vzo),e(HT,zzo),e(HT,iq),e(iq,Wzo),e(HT,Qzo),e(ec,Hzo),e(ec,UT),e(UT,nfe),e(nfe,Uzo),e(UT,Jzo),e(UT,dq),e(dq,Yzo),e(UT,Kzo),e(ro,Zzo),e(ro,JT),e(JT,eWo),e(JT,sfe),e(sfe,oWo),e(JT,rWo),e(JT,lfe),e(lfe,tWo),e(ro,aWo),e(ro,ife),e(ife,nWo),e(ro,sWo),g(sA,ro,null),b(c,$ke,u),b(c,oc,u),e(oc,YT),e(YT,dfe),g(lA,dfe,null),e(oc,lWo),e(oc,cfe),e(cfe,iWo),b(c,Ike,u),b(c,pr,u),g(iA,pr,null),e(pr,dWo),e(pr,rc),e(rc,cWo),e(rc,ffe),e(ffe,fWo),e(rc,mWo),e(rc,mfe),e(mfe,gWo),e(rc,hWo),e(pr,pWo),e(pr,dA),e(dA,_Wo),e(dA,gfe),e(gfe,uWo),e(dA,bWo),e(pr,vWo),e(pr,dt),g(cA,dt,null),e(dt,TWo),e(dt,hfe),e(hfe,FWo),e(dt,CWo),e(dt,tc),e(tc,MWo),e(tc,pfe),e(pfe,EWo),e(tc,yWo),e(tc,_fe),e(_fe,wWo),e(tc,AWo),e(dt,LWo),e(dt,ufe),e(ufe,BWo),e(dt,xWo),g(fA,dt,null),e(pr,kWo),e(pr,to),g(mA,to,null),e(to,RWo),e(to,bfe),e(bfe,SWo),e(to,PWo),e(to,mn),e(mn,$Wo),e(mn,vfe),e(vfe,IWo),e(mn,jWo),e(mn,Tfe),e(Tfe,NWo),e(mn,DWo),e(mn,Ffe),e(Ffe,qWo),e(mn,OWo),e(to,GWo),e(to,Cfe),e(Cfe,KT),e(KT,Mfe),e(Mfe,XWo),e(KT,VWo),e(KT,cq),e(cq,zWo),e(KT,WWo),e(to,QWo),e(to,ZT),e(ZT,HWo),e(ZT,Efe),e(Efe,UWo),e(ZT,JWo),e(ZT,yfe),e(yfe,YWo),e(to,KWo),e(to,wfe),e(wfe,ZWo),e(to,eQo),g(gA,to,null),b(c,jke,u),b(c,ac,u),e(ac,e1),e(e1,Afe),g(hA,Afe,null),e(ac,oQo),e(ac,Lfe),e(Lfe,rQo),b(c,Nke,u),b(c,_r,u),g(pA,_r,null),e(_r,tQo),e(_r,nc),e(nc,aQo),e(nc,Bfe),e(Bfe,nQo),e(nc,sQo),e(nc,xfe),e(xfe,lQo),e(nc,iQo),e(_r,dQo),e(_r,_A),e(_A,cQo),e(_A,kfe),e(kfe,fQo),e(_A,mQo),e(_r,gQo),e(_r,ct),g(uA,ct,null),e(ct,hQo),e(ct,Rfe),e(Rfe,pQo),e(ct,_Qo),e(ct,sc),e(sc,uQo),e(sc,Sfe),e(Sfe,bQo),e(sc,vQo),e(sc,Pfe),e(Pfe,TQo),e(sc,FQo),e(ct,CQo),e(ct,$fe),e($fe,MQo),e(ct,EQo),g(bA,ct,null),e(_r,yQo),e(_r,ao),g(vA,ao,null),e(ao,wQo),e(ao,Ife),e(Ife,AQo),e(ao,LQo),e(ao,gn),e(gn,BQo),e(gn,jfe),e(jfe,xQo),e(gn,kQo),e(gn,Nfe),e(Nfe,RQo),e(gn,SQo),e(gn,Dfe),e(Dfe,PQo),e(gn,$Qo),e(ao,IQo),e(ao,qfe),e(qfe,o1),e(o1,Ofe),e(Ofe,jQo),e(o1,NQo),e(o1,fq),e(fq,DQo),e(o1,qQo),e(ao,OQo),e(ao,r1),e(r1,GQo),e(r1,Gfe),e(Gfe,XQo),e(r1,VQo),e(r1,Xfe),e(Xfe,zQo),e(ao,WQo),e(ao,Vfe),e(Vfe,QQo),e(ao,HQo),g(TA,ao,null),b(c,Dke,u),b(c,lc,u),e(lc,t1),e(t1,zfe),g(FA,zfe,null),e(lc,UQo),e(lc,Wfe),e(Wfe,JQo),b(c,qke,u),b(c,ur,u),g(CA,ur,null),e(ur,YQo),e(ur,ic),e(ic,KQo),e(ic,Qfe),e(Qfe,ZQo),e(ic,eHo),e(ic,Hfe),e(Hfe,oHo),e(ic,rHo),e(ur,tHo),e(ur,MA),e(MA,aHo),e(MA,Ufe),e(Ufe,nHo),e(MA,sHo),e(ur,lHo),e(ur,ft),g(EA,ft,null),e(ft,iHo),e(ft,Jfe),e(Jfe,dHo),e(ft,cHo),e(ft,dc),e(dc,fHo),e(dc,Yfe),e(Yfe,mHo),e(dc,gHo),e(dc,Kfe),e(Kfe,hHo),e(dc,pHo),e(ft,_Ho),e(ft,Zfe),e(Zfe,uHo),e(ft,bHo),g(yA,ft,null),e(ur,vHo),e(ur,no),g(wA,no,null),e(no,THo),e(no,eme),e(eme,FHo),e(no,CHo),e(no,hn),e(hn,MHo),e(hn,ome),e(ome,EHo),e(hn,yHo),e(hn,rme),e(rme,wHo),e(hn,AHo),e(hn,tme),e(tme,LHo),e(hn,BHo),e(no,xHo),e(no,AA),e(AA,a1),e(a1,ame),e(ame,kHo),e(a1,RHo),e(a1,mq),e(mq,SHo),e(a1,PHo),e(AA,$Ho),e(AA,n1),e(n1,nme),e(nme,IHo),e(n1,jHo),e(n1,gq),e(gq,NHo),e(n1,DHo),e(no,qHo),e(no,s1),e(s1,OHo),e(s1,sme),e(sme,GHo),e(s1,XHo),e(s1,lme),e(lme,VHo),e(no,zHo),e(no,ime),e(ime,WHo),e(no,QHo),g(LA,no,null),b(c,Oke,u),b(c,cc,u),e(cc,l1),e(l1,dme),g(BA,dme,null),e(cc,HHo),e(cc,cme),e(cme,UHo),b(c,Gke,u),b(c,br,u),g(xA,br,null),e(br,JHo),e(br,fc),e(fc,YHo),e(fc,fme),e(fme,KHo),e(fc,ZHo),e(fc,mme),e(mme,eUo),e(fc,oUo),e(br,rUo),e(br,kA),e(kA,tUo),e(kA,gme),e(gme,aUo),e(kA,nUo),e(br,sUo),e(br,mt),g(RA,mt,null),e(mt,lUo),e(mt,hme),e(hme,iUo),e(mt,dUo),e(mt,mc),e(mc,cUo),e(mc,pme),e(pme,fUo),e(mc,mUo),e(mc,_me),e(_me,gUo),e(mc,hUo),e(mt,pUo),e(mt,ume),e(ume,_Uo),e(mt,uUo),g(SA,mt,null),e(br,bUo),e(br,so),g(PA,so,null),e(so,vUo),e(so,bme),e(bme,TUo),e(so,FUo),e(so,pn),e(pn,CUo),e(pn,vme),e(vme,MUo),e(pn,EUo),e(pn,Tme),e(Tme,yUo),e(pn,wUo),e(pn,Fme),e(Fme,AUo),e(pn,LUo),e(so,BUo),e(so,Cme),e(Cme,i1),e(i1,Mme),e(Mme,xUo),e(i1,kUo),e(i1,hq),e(hq,RUo),e(i1,SUo),e(so,PUo),e(so,d1),e(d1,$Uo),e(d1,Eme),e(Eme,IUo),e(d1,jUo),e(d1,yme),e(yme,NUo),e(so,DUo),e(so,wme),e(wme,qUo),e(so,OUo),g($A,so,null),b(c,Xke,u),b(c,gc,u),e(gc,c1),e(c1,Ame),g(IA,Ame,null),e(gc,GUo),e(gc,Lme),e(Lme,XUo),b(c,Vke,u),b(c,vr,u),g(jA,vr,null),e(vr,VUo),e(vr,hc),e(hc,zUo),e(hc,Bme),e(Bme,WUo),e(hc,QUo),e(hc,xme),e(xme,HUo),e(hc,UUo),e(vr,JUo),e(vr,NA),e(NA,YUo),e(NA,kme),e(kme,KUo),e(NA,ZUo),e(vr,eJo),e(vr,gt),g(DA,gt,null),e(gt,oJo),e(gt,Rme),e(Rme,rJo),e(gt,tJo),e(gt,pc),e(pc,aJo),e(pc,Sme),e(Sme,nJo),e(pc,sJo),e(pc,Pme),e(Pme,lJo),e(pc,iJo),e(gt,dJo),e(gt,$me),e($me,cJo),e(gt,fJo),g(qA,gt,null),e(vr,mJo),e(vr,ho),g(OA,ho,null),e(ho,gJo),e(ho,Ime),e(Ime,hJo),e(ho,pJo),e(ho,_n),e(_n,_Jo),e(_n,jme),e(jme,uJo),e(_n,bJo),e(_n,Nme),e(Nme,vJo),e(_n,TJo),e(_n,Dme),e(Dme,FJo),e(_n,CJo),e(ho,MJo),e(ho,B),e(B,f1),e(f1,qme),e(qme,EJo),e(f1,yJo),e(f1,pq),e(pq,wJo),e(f1,AJo),e(B,LJo),e(B,m1),e(m1,Ome),e(Ome,BJo),e(m1,xJo),e(m1,_q),e(_q,kJo),e(m1,RJo),e(B,SJo),e(B,g1),e(g1,Gme),e(Gme,PJo),e(g1,$Jo),e(g1,uq),e(uq,IJo),e(g1,jJo),e(B,NJo),e(B,h1),e(h1,Xme),e(Xme,DJo),e(h1,qJo),e(h1,bq),e(bq,OJo),e(h1,GJo),e(B,XJo),e(B,p1),e(p1,Vme),e(Vme,VJo),e(p1,zJo),e(p1,vq),e(vq,WJo),e(p1,QJo),e(B,HJo),e(B,_1),e(_1,zme),e(zme,UJo),e(_1,JJo),e(_1,Tq),e(Tq,YJo),e(_1,KJo),e(B,ZJo),e(B,u1),e(u1,Wme),e(Wme,eYo),e(u1,oYo),e(u1,Fq),e(Fq,rYo),e(u1,tYo),e(B,aYo),e(B,b1),e(b1,Qme),e(Qme,nYo),e(b1,sYo),e(b1,Cq),e(Cq,lYo),e(b1,iYo),e(B,dYo),e(B,v1),e(v1,Hme),e(Hme,cYo),e(v1,fYo),e(v1,Mq),e(Mq,mYo),e(v1,gYo),e(B,hYo),e(B,T1),e(T1,Ume),e(Ume,pYo),e(T1,_Yo),e(T1,Eq),e(Eq,uYo),e(T1,bYo),e(B,vYo),e(B,F1),e(F1,Jme),e(Jme,TYo),e(F1,FYo),e(F1,yq),e(yq,CYo),e(F1,MYo),e(B,EYo),e(B,C1),e(C1,Yme),e(Yme,yYo),e(C1,wYo),e(C1,wq),e(wq,AYo),e(C1,LYo),e(B,BYo),e(B,M1),e(M1,Kme),e(Kme,xYo),e(M1,kYo),e(M1,Aq),e(Aq,RYo),e(M1,SYo),e(B,PYo),e(B,E1),e(E1,Zme),e(Zme,$Yo),e(E1,IYo),e(E1,Lq),e(Lq,jYo),e(E1,NYo),e(B,DYo),e(B,y1),e(y1,ege),e(ege,qYo),e(y1,OYo),e(y1,Bq),e(Bq,GYo),e(y1,XYo),e(B,VYo),e(B,w1),e(w1,oge),e(oge,zYo),e(w1,WYo),e(w1,xq),e(xq,QYo),e(w1,HYo),e(B,UYo),e(B,Os),e(Os,rge),e(rge,JYo),e(Os,YYo),e(Os,kq),e(kq,KYo),e(Os,ZYo),e(Os,Rq),e(Rq,eKo),e(Os,oKo),e(B,rKo),e(B,A1),e(A1,tge),e(tge,tKo),e(A1,aKo),e(A1,Sq),e(Sq,nKo),e(A1,sKo),e(B,lKo),e(B,L1),e(L1,age),e(age,iKo),e(L1,dKo),e(L1,Pq),e(Pq,cKo),e(L1,fKo),e(B,mKo),e(B,B1),e(B1,nge),e(nge,gKo),e(B1,hKo),e(B1,$q),e($q,pKo),e(B1,_Ko),e(B,uKo),e(B,x1),e(x1,sge),e(sge,bKo),e(x1,vKo),e(x1,Iq),e(Iq,TKo),e(x1,FKo),e(B,CKo),e(B,k1),e(k1,lge),e(lge,MKo),e(k1,EKo),e(k1,jq),e(jq,yKo),e(k1,wKo),e(B,AKo),e(B,R1),e(R1,ige),e(ige,LKo),e(R1,BKo),e(R1,Nq),e(Nq,xKo),e(R1,kKo),e(B,RKo),e(B,S1),e(S1,dge),e(dge,SKo),e(S1,PKo),e(S1,Dq),e(Dq,$Ko),e(S1,IKo),e(B,jKo),e(B,P1),e(P1,cge),e(cge,NKo),e(P1,DKo),e(P1,qq),e(qq,qKo),e(P1,OKo),e(B,GKo),e(B,$1),e($1,fge),e(fge,XKo),e($1,VKo),e($1,Oq),e(Oq,zKo),e($1,WKo),e(B,QKo),e(B,I1),e(I1,mge),e(mge,HKo),e(I1,UKo),e(I1,Gq),e(Gq,JKo),e(I1,YKo),e(B,KKo),e(B,j1),e(j1,gge),e(gge,ZKo),e(j1,eZo),e(j1,Xq),e(Xq,oZo),e(j1,rZo),e(B,tZo),e(B,N1),e(N1,hge),e(hge,aZo),e(N1,nZo),e(N1,Vq),e(Vq,sZo),e(N1,lZo),e(B,iZo),e(B,D1),e(D1,pge),e(pge,dZo),e(D1,cZo),e(D1,zq),e(zq,fZo),e(D1,mZo),e(B,gZo),e(B,q1),e(q1,_ge),e(_ge,hZo),e(q1,pZo),e(q1,Wq),e(Wq,_Zo),e(q1,uZo),e(B,bZo),e(B,O1),e(O1,uge),e(uge,vZo),e(O1,TZo),e(O1,Qq),e(Qq,FZo),e(O1,CZo),e(B,MZo),e(B,G1),e(G1,bge),e(bge,EZo),e(G1,yZo),e(G1,Hq),e(Hq,wZo),e(G1,AZo),e(B,LZo),e(B,X1),e(X1,vge),e(vge,BZo),e(X1,xZo),e(X1,Uq),e(Uq,kZo),e(X1,RZo),e(B,SZo),e(B,V1),e(V1,Tge),e(Tge,PZo),e(V1,$Zo),e(V1,Jq),e(Jq,IZo),e(V1,jZo),e(B,NZo),e(B,z1),e(z1,Fge),e(Fge,DZo),e(z1,qZo),e(z1,Yq),e(Yq,OZo),e(z1,GZo),e(B,XZo),e(B,W1),e(W1,Cge),e(Cge,VZo),e(W1,zZo),e(W1,Kq),e(Kq,WZo),e(W1,QZo),e(B,HZo),e(B,Q1),e(Q1,Mge),e(Mge,UZo),e(Q1,JZo),e(Q1,Zq),e(Zq,YZo),e(Q1,KZo),e(B,ZZo),e(B,H1),e(H1,Ege),e(Ege,eer),e(H1,oer),e(H1,eO),e(eO,rer),e(H1,ter),e(B,aer),e(B,U1),e(U1,yge),e(yge,ner),e(U1,ser),e(U1,oO),e(oO,ler),e(U1,ier),e(B,der),e(B,J1),e(J1,wge),e(wge,cer),e(J1,fer),e(J1,rO),e(rO,mer),e(J1,ger),e(B,her),e(B,Y1),e(Y1,Age),e(Age,per),e(Y1,_er),e(Y1,tO),e(tO,uer),e(Y1,ber),e(ho,ver),e(ho,Lge),e(Lge,Ter),e(ho,Fer),g(GA,ho,null),b(c,zke,u),b(c,_c,u),e(_c,K1),e(K1,Bge),g(XA,Bge,null),e(_c,Cer),e(_c,xge),e(xge,Mer),b(c,Wke,u),b(c,Tr,u),g(VA,Tr,null),e(Tr,Eer),e(Tr,uc),e(uc,yer),e(uc,kge),e(kge,wer),e(uc,Aer),e(uc,Rge),e(Rge,Ler),e(uc,Ber),e(Tr,xer),e(Tr,zA),e(zA,ker),e(zA,Sge),e(Sge,Rer),e(zA,Ser),e(Tr,Per),e(Tr,ht),g(WA,ht,null),e(ht,$er),e(ht,Pge),e(Pge,Ier),e(ht,jer),e(ht,bc),e(bc,Ner),e(bc,$ge),e($ge,Der),e(bc,qer),e(bc,Ige),e(Ige,Oer),e(bc,Ger),e(ht,Xer),e(ht,jge),e(jge,Ver),e(ht,zer),g(QA,ht,null),e(Tr,Wer),e(Tr,po),g(HA,po,null),e(po,Qer),e(po,Nge),e(Nge,Her),e(po,Uer),e(po,un),e(un,Jer),e(un,Dge),e(Dge,Yer),e(un,Ker),e(un,qge),e(qge,Zer),e(un,eor),e(un,Oge),e(Oge,oor),e(un,ror),e(po,tor),e(po,H),e(H,Z1),e(Z1,Gge),e(Gge,aor),e(Z1,nor),e(Z1,aO),e(aO,sor),e(Z1,lor),e(H,ior),e(H,eF),e(eF,Xge),e(Xge,dor),e(eF,cor),e(eF,nO),e(nO,mor),e(eF,gor),e(H,hor),e(H,oF),e(oF,Vge),e(Vge,por),e(oF,_or),e(oF,sO),e(sO,uor),e(oF,bor),e(H,vor),e(H,rF),e(rF,zge),e(zge,Tor),e(rF,For),e(rF,lO),e(lO,Cor),e(rF,Mor),e(H,Eor),e(H,tF),e(tF,Wge),e(Wge,yor),e(tF,wor),e(tF,iO),e(iO,Aor),e(tF,Lor),e(H,Bor),e(H,aF),e(aF,Qge),e(Qge,xor),e(aF,kor),e(aF,dO),e(dO,Ror),e(aF,Sor),e(H,Por),e(H,nF),e(nF,Hge),e(Hge,$or),e(nF,Ior),e(nF,cO),e(cO,jor),e(nF,Nor),e(H,Dor),e(H,sF),e(sF,Uge),e(Uge,qor),e(sF,Oor),e(sF,fO),e(fO,Gor),e(sF,Xor),e(H,Vor),e(H,lF),e(lF,Jge),e(Jge,zor),e(lF,Wor),e(lF,mO),e(mO,Qor),e(lF,Hor),e(H,Uor),e(H,iF),e(iF,Yge),e(Yge,Jor),e(iF,Yor),e(iF,gO),e(gO,Kor),e(iF,Zor),e(H,err),e(H,dF),e(dF,Kge),e(Kge,orr),e(dF,rrr),e(dF,hO),e(hO,trr),e(dF,arr),e(H,nrr),e(H,cF),e(cF,Zge),e(Zge,srr),e(cF,lrr),e(cF,pO),e(pO,irr),e(cF,drr),e(H,crr),e(H,fF),e(fF,ehe),e(ehe,frr),e(fF,mrr),e(fF,_O),e(_O,grr),e(fF,hrr),e(H,prr),e(H,mF),e(mF,ohe),e(ohe,_rr),e(mF,urr),e(mF,uO),e(uO,brr),e(mF,vrr),e(H,Trr),e(H,gF),e(gF,rhe),e(rhe,Frr),e(gF,Crr),e(gF,bO),e(bO,Mrr),e(gF,Err),e(H,yrr),e(H,hF),e(hF,the),e(the,wrr),e(hF,Arr),e(hF,vO),e(vO,Lrr),e(hF,Brr),e(H,xrr),e(H,pF),e(pF,ahe),e(ahe,krr),e(pF,Rrr),e(pF,TO),e(TO,Srr),e(pF,Prr),e(H,$rr),e(H,_F),e(_F,nhe),e(nhe,Irr),e(_F,jrr),e(_F,FO),e(FO,Nrr),e(_F,Drr),e(H,qrr),e(H,uF),e(uF,she),e(she,Orr),e(uF,Grr),e(uF,CO),e(CO,Xrr),e(uF,Vrr),e(H,zrr),e(H,bF),e(bF,lhe),e(lhe,Wrr),e(bF,Qrr),e(bF,MO),e(MO,Hrr),e(bF,Urr),e(H,Jrr),e(H,vF),e(vF,ihe),e(ihe,Yrr),e(vF,Krr),e(vF,EO),e(EO,Zrr),e(vF,etr),e(H,otr),e(H,TF),e(TF,dhe),e(dhe,rtr),e(TF,ttr),e(TF,yO),e(yO,atr),e(TF,ntr),e(po,str),e(po,che),e(che,ltr),e(po,itr),g(UA,po,null),b(c,Qke,u),b(c,vc,u),e(vc,FF),e(FF,fhe),g(JA,fhe,null),e(vc,dtr),e(vc,mhe),e(mhe,ctr),b(c,Hke,u),b(c,Fr,u),g(YA,Fr,null),e(Fr,ftr),e(Fr,Tc),e(Tc,mtr),e(Tc,ghe),e(ghe,gtr),e(Tc,htr),e(Tc,hhe),e(hhe,ptr),e(Tc,_tr),e(Fr,utr),e(Fr,KA),e(KA,btr),e(KA,phe),e(phe,vtr),e(KA,Ttr),e(Fr,Ftr),e(Fr,pt),g(ZA,pt,null),e(pt,Ctr),e(pt,_he),e(_he,Mtr),e(pt,Etr),e(pt,Fc),e(Fc,ytr),e(Fc,uhe),e(uhe,wtr),e(Fc,Atr),e(Fc,bhe),e(bhe,Ltr),e(Fc,Btr),e(pt,xtr),e(pt,vhe),e(vhe,ktr),e(pt,Rtr),g(e0,pt,null),e(Fr,Str),e(Fr,_o),g(o0,_o,null),e(_o,Ptr),e(_o,The),e(The,$tr),e(_o,Itr),e(_o,bn),e(bn,jtr),e(bn,Fhe),e(Fhe,Ntr),e(bn,Dtr),e(bn,Che),e(Che,qtr),e(bn,Otr),e(bn,Mhe),e(Mhe,Gtr),e(bn,Xtr),e(_o,Vtr),e(_o,ge),e(ge,CF),e(CF,Ehe),e(Ehe,ztr),e(CF,Wtr),e(CF,wO),e(wO,Qtr),e(CF,Htr),e(ge,Utr),e(ge,MF),e(MF,yhe),e(yhe,Jtr),e(MF,Ytr),e(MF,AO),e(AO,Ktr),e(MF,Ztr),e(ge,ear),e(ge,EF),e(EF,whe),e(whe,oar),e(EF,rar),e(EF,LO),e(LO,tar),e(EF,aar),e(ge,nar),e(ge,yF),e(yF,Ahe),e(Ahe,sar),e(yF,lar),e(yF,BO),e(BO,iar),e(yF,dar),e(ge,car),e(ge,wF),e(wF,Lhe),e(Lhe,far),e(wF,mar),e(wF,xO),e(xO,gar),e(wF,har),e(ge,par),e(ge,AF),e(AF,Bhe),e(Bhe,_ar),e(AF,uar),e(AF,kO),e(kO,bar),e(AF,Tar),e(ge,Far),e(ge,LF),e(LF,xhe),e(xhe,Car),e(LF,Mar),e(LF,RO),e(RO,Ear),e(LF,yar),e(ge,war),e(ge,BF),e(BF,khe),e(khe,Aar),e(BF,Lar),e(BF,SO),e(SO,Bar),e(BF,xar),e(ge,kar),e(ge,xF),e(xF,Rhe),e(Rhe,Rar),e(xF,Sar),e(xF,PO),e(PO,Par),e(xF,$ar),e(ge,Iar),e(ge,kF),e(kF,She),e(She,jar),e(kF,Nar),e(kF,$O),e($O,Dar),e(kF,qar),e(ge,Oar),e(ge,RF),e(RF,Phe),e(Phe,Gar),e(RF,Xar),e(RF,IO),e(IO,Var),e(RF,zar),e(_o,War),e(_o,$he),e($he,Qar),e(_o,Har),g(r0,_o,null),b(c,Uke,u),b(c,Cc,u),e(Cc,SF),e(SF,Ihe),g(t0,Ihe,null),e(Cc,Uar),e(Cc,jhe),e(jhe,Jar),b(c,Jke,u),b(c,Cr,u),g(a0,Cr,null),e(Cr,Yar),e(Cr,Mc),e(Mc,Kar),e(Mc,Nhe),e(Nhe,Zar),e(Mc,enr),e(Mc,Dhe),e(Dhe,onr),e(Mc,rnr),e(Cr,tnr),e(Cr,n0),e(n0,anr),e(n0,qhe),e(qhe,nnr),e(n0,snr),e(Cr,lnr),e(Cr,_t),g(s0,_t,null),e(_t,inr),e(_t,Ohe),e(Ohe,dnr),e(_t,cnr),e(_t,Ec),e(Ec,fnr),e(Ec,Ghe),e(Ghe,mnr),e(Ec,gnr),e(Ec,Xhe),e(Xhe,hnr),e(Ec,pnr),e(_t,_nr),e(_t,Vhe),e(Vhe,unr),e(_t,bnr),g(l0,_t,null),e(Cr,vnr),e(Cr,uo),g(i0,uo,null),e(uo,Tnr),e(uo,zhe),e(zhe,Fnr),e(uo,Cnr),e(uo,vn),e(vn,Mnr),e(vn,Whe),e(Whe,Enr),e(vn,ynr),e(vn,Qhe),e(Qhe,wnr),e(vn,Anr),e(vn,Hhe),e(Hhe,Lnr),e(vn,Bnr),e(uo,xnr),e(uo,d0),e(d0,PF),e(PF,Uhe),e(Uhe,knr),e(PF,Rnr),e(PF,jO),e(jO,Snr),e(PF,Pnr),e(d0,$nr),e(d0,$F),e($F,Jhe),e(Jhe,Inr),e($F,jnr),e($F,NO),e(NO,Nnr),e($F,Dnr),e(uo,qnr),e(uo,Yhe),e(Yhe,Onr),e(uo,Gnr),g(c0,uo,null),b(c,Yke,u),b(c,yc,u),e(yc,IF),e(IF,Khe),g(f0,Khe,null),e(yc,Xnr),e(yc,Zhe),e(Zhe,Vnr),b(c,Kke,u),b(c,Mr,u),g(m0,Mr,null),e(Mr,znr),e(Mr,wc),e(wc,Wnr),e(wc,epe),e(epe,Qnr),e(wc,Hnr),e(wc,ope),e(ope,Unr),e(wc,Jnr),e(Mr,Ynr),e(Mr,g0),e(g0,Knr),e(g0,rpe),e(rpe,Znr),e(g0,esr),e(Mr,osr),e(Mr,ut),g(h0,ut,null),e(ut,rsr),e(ut,tpe),e(tpe,tsr),e(ut,asr),e(ut,Ac),e(Ac,nsr),e(Ac,ape),e(ape,ssr),e(Ac,lsr),e(Ac,npe),e(npe,isr),e(Ac,dsr),e(ut,csr),e(ut,spe),e(spe,fsr),e(ut,msr),g(p0,ut,null),e(Mr,gsr),e(Mr,bo),g(_0,bo,null),e(bo,hsr),e(bo,lpe),e(lpe,psr),e(bo,_sr),e(bo,Tn),e(Tn,usr),e(Tn,ipe),e(ipe,bsr),e(Tn,vsr),e(Tn,dpe),e(dpe,Tsr),e(Tn,Fsr),e(Tn,cpe),e(cpe,Csr),e(Tn,Msr),e(bo,Esr),e(bo,Y),e(Y,jF),e(jF,fpe),e(fpe,ysr),e(jF,wsr),e(jF,DO),e(DO,Asr),e(jF,Lsr),e(Y,Bsr),e(Y,NF),e(NF,mpe),e(mpe,xsr),e(NF,ksr),e(NF,qO),e(qO,Rsr),e(NF,Ssr),e(Y,Psr),e(Y,DF),e(DF,gpe),e(gpe,$sr),e(DF,Isr),e(DF,OO),e(OO,jsr),e(DF,Nsr),e(Y,Dsr),e(Y,qF),e(qF,hpe),e(hpe,qsr),e(qF,Osr),e(qF,GO),e(GO,Gsr),e(qF,Xsr),e(Y,Vsr),e(Y,OF),e(OF,ppe),e(ppe,zsr),e(OF,Wsr),e(OF,XO),e(XO,Qsr),e(OF,Hsr),e(Y,Usr),e(Y,GF),e(GF,_pe),e(_pe,Jsr),e(GF,Ysr),e(GF,VO),e(VO,Ksr),e(GF,Zsr),e(Y,elr),e(Y,XF),e(XF,upe),e(upe,olr),e(XF,rlr),e(XF,zO),e(zO,tlr),e(XF,alr),e(Y,nlr),e(Y,VF),e(VF,bpe),e(bpe,slr),e(VF,llr),e(VF,WO),e(WO,ilr),e(VF,dlr),e(Y,clr),e(Y,zF),e(zF,vpe),e(vpe,flr),e(zF,mlr),e(zF,QO),e(QO,glr),e(zF,hlr),e(Y,plr),e(Y,WF),e(WF,Tpe),e(Tpe,_lr),e(WF,ulr),e(WF,HO),e(HO,blr),e(WF,vlr),e(Y,Tlr),e(Y,QF),e(QF,Fpe),e(Fpe,Flr),e(QF,Clr),e(QF,UO),e(UO,Mlr),e(QF,Elr),e(Y,ylr),e(Y,HF),e(HF,Cpe),e(Cpe,wlr),e(HF,Alr),e(HF,JO),e(JO,Llr),e(HF,Blr),e(Y,xlr),e(Y,UF),e(UF,Mpe),e(Mpe,klr),e(UF,Rlr),e(UF,YO),e(YO,Slr),e(UF,Plr),e(Y,$lr),e(Y,JF),e(JF,Epe),e(Epe,Ilr),e(JF,jlr),e(JF,KO),e(KO,Nlr),e(JF,Dlr),e(Y,qlr),e(Y,YF),e(YF,ype),e(ype,Olr),e(YF,Glr),e(YF,ZO),e(ZO,Xlr),e(YF,Vlr),e(Y,zlr),e(Y,KF),e(KF,wpe),e(wpe,Wlr),e(KF,Qlr),e(KF,eG),e(eG,Hlr),e(KF,Ulr),e(Y,Jlr),e(Y,ZF),e(ZF,Ape),e(Ape,Ylr),e(ZF,Klr),e(ZF,oG),e(oG,Zlr),e(ZF,eir),e(Y,oir),e(Y,eC),e(eC,Lpe),e(Lpe,rir),e(eC,tir),e(eC,rG),e(rG,air),e(eC,nir),e(Y,sir),e(Y,oC),e(oC,Bpe),e(Bpe,lir),e(oC,iir),e(oC,tG),e(tG,dir),e(oC,cir),e(Y,fir),e(Y,rC),e(rC,xpe),e(xpe,mir),e(rC,gir),e(rC,aG),e(aG,hir),e(rC,pir),e(bo,_ir),e(bo,kpe),e(kpe,uir),e(bo,bir),g(u0,bo,null),b(c,Zke,u),b(c,Lc,u),e(Lc,tC),e(tC,Rpe),g(b0,Rpe,null),e(Lc,vir),e(Lc,Spe),e(Spe,Tir),b(c,eRe,u),b(c,Er,u),g(v0,Er,null),e(Er,Fir),e(Er,Bc),e(Bc,Cir),e(Bc,Ppe),e(Ppe,Mir),e(Bc,Eir),e(Bc,$pe),e($pe,yir),e(Bc,wir),e(Er,Air),e(Er,T0),e(T0,Lir),e(T0,Ipe),e(Ipe,Bir),e(T0,xir),e(Er,kir),e(Er,bt),g(F0,bt,null),e(bt,Rir),e(bt,jpe),e(jpe,Sir),e(bt,Pir),e(bt,xc),e(xc,$ir),e(xc,Npe),e(Npe,Iir),e(xc,jir),e(xc,Dpe),e(Dpe,Nir),e(xc,Dir),e(bt,qir),e(bt,qpe),e(qpe,Oir),e(bt,Gir),g(C0,bt,null),e(Er,Xir),e(Er,vo),g(M0,vo,null),e(vo,Vir),e(vo,Ope),e(Ope,zir),e(vo,Wir),e(vo,Fn),e(Fn,Qir),e(Fn,Gpe),e(Gpe,Hir),e(Fn,Uir),e(Fn,Xpe),e(Xpe,Jir),e(Fn,Yir),e(Fn,Vpe),e(Vpe,Kir),e(Fn,Zir),e(vo,edr),e(vo,ue),e(ue,aC),e(aC,zpe),e(zpe,odr),e(aC,rdr),e(aC,nG),e(nG,tdr),e(aC,adr),e(ue,ndr),e(ue,nC),e(nC,Wpe),e(Wpe,sdr),e(nC,ldr),e(nC,sG),e(sG,idr),e(nC,ddr),e(ue,cdr),e(ue,sC),e(sC,Qpe),e(Qpe,fdr),e(sC,mdr),e(sC,lG),e(lG,gdr),e(sC,hdr),e(ue,pdr),e(ue,lC),e(lC,Hpe),e(Hpe,_dr),e(lC,udr),e(lC,iG),e(iG,bdr),e(lC,vdr),e(ue,Tdr),e(ue,iC),e(iC,Upe),e(Upe,Fdr),e(iC,Cdr),e(iC,dG),e(dG,Mdr),e(iC,Edr),e(ue,ydr),e(ue,dC),e(dC,Jpe),e(Jpe,wdr),e(dC,Adr),e(dC,cG),e(cG,Ldr),e(dC,Bdr),e(ue,xdr),e(ue,cC),e(cC,Ype),e(Ype,kdr),e(cC,Rdr),e(cC,fG),e(fG,Sdr),e(cC,Pdr),e(ue,$dr),e(ue,fC),e(fC,Kpe),e(Kpe,Idr),e(fC,jdr),e(fC,mG),e(mG,Ndr),e(fC,Ddr),e(ue,qdr),e(ue,mC),e(mC,Zpe),e(Zpe,Odr),e(mC,Gdr),e(mC,gG),e(gG,Xdr),e(mC,Vdr),e(ue,zdr),e(ue,gC),e(gC,e_e),e(e_e,Wdr),e(gC,Qdr),e(gC,hG),e(hG,Hdr),e(gC,Udr),e(vo,Jdr),e(vo,o_e),e(o_e,Ydr),e(vo,Kdr),g(E0,vo,null),b(c,oRe,u),b(c,kc,u),e(kc,hC),e(hC,r_e),g(y0,r_e,null),e(kc,Zdr),e(kc,t_e),e(t_e,ecr),b(c,rRe,u),b(c,yr,u),g(w0,yr,null),e(yr,ocr),e(yr,Rc),e(Rc,rcr),e(Rc,a_e),e(a_e,tcr),e(Rc,acr),e(Rc,n_e),e(n_e,ncr),e(Rc,scr),e(yr,lcr),e(yr,A0),e(A0,icr),e(A0,s_e),e(s_e,dcr),e(A0,ccr),e(yr,fcr),e(yr,vt),g(L0,vt,null),e(vt,mcr),e(vt,l_e),e(l_e,gcr),e(vt,hcr),e(vt,Sc),e(Sc,pcr),e(Sc,i_e),e(i_e,_cr),e(Sc,ucr),e(Sc,d_e),e(d_e,bcr),e(Sc,vcr),e(vt,Tcr),e(vt,c_e),e(c_e,Fcr),e(vt,Ccr),g(B0,vt,null),e(yr,Mcr),e(yr,To),g(x0,To,null),e(To,Ecr),e(To,f_e),e(f_e,ycr),e(To,wcr),e(To,Cn),e(Cn,Acr),e(Cn,m_e),e(m_e,Lcr),e(Cn,Bcr),e(Cn,g_e),e(g_e,xcr),e(Cn,kcr),e(Cn,h_e),e(h_e,Rcr),e(Cn,Scr),e(To,Pcr),e(To,V),e(V,pC),e(pC,p_e),e(p_e,$cr),e(pC,Icr),e(pC,pG),e(pG,jcr),e(pC,Ncr),e(V,Dcr),e(V,_C),e(_C,__e),e(__e,qcr),e(_C,Ocr),e(_C,_G),e(_G,Gcr),e(_C,Xcr),e(V,Vcr),e(V,uC),e(uC,u_e),e(u_e,zcr),e(uC,Wcr),e(uC,uG),e(uG,Qcr),e(uC,Hcr),e(V,Ucr),e(V,bC),e(bC,b_e),e(b_e,Jcr),e(bC,Ycr),e(bC,bG),e(bG,Kcr),e(bC,Zcr),e(V,efr),e(V,vC),e(vC,v_e),e(v_e,ofr),e(vC,rfr),e(vC,vG),e(vG,tfr),e(vC,afr),e(V,nfr),e(V,TC),e(TC,T_e),e(T_e,sfr),e(TC,lfr),e(TC,TG),e(TG,ifr),e(TC,dfr),e(V,cfr),e(V,FC),e(FC,F_e),e(F_e,ffr),e(FC,mfr),e(FC,FG),e(FG,gfr),e(FC,hfr),e(V,pfr),e(V,CC),e(CC,C_e),e(C_e,_fr),e(CC,ufr),e(CC,CG),e(CG,bfr),e(CC,vfr),e(V,Tfr),e(V,MC),e(MC,M_e),e(M_e,Ffr),e(MC,Cfr),e(MC,MG),e(MG,Mfr),e(MC,Efr),e(V,yfr),e(V,EC),e(EC,E_e),e(E_e,wfr),e(EC,Afr),e(EC,EG),e(EG,Lfr),e(EC,Bfr),e(V,xfr),e(V,yC),e(yC,y_e),e(y_e,kfr),e(yC,Rfr),e(yC,yG),e(yG,Sfr),e(yC,Pfr),e(V,$fr),e(V,wC),e(wC,w_e),e(w_e,Ifr),e(wC,jfr),e(wC,wG),e(wG,Nfr),e(wC,Dfr),e(V,qfr),e(V,AC),e(AC,A_e),e(A_e,Ofr),e(AC,Gfr),e(AC,AG),e(AG,Xfr),e(AC,Vfr),e(V,zfr),e(V,LC),e(LC,L_e),e(L_e,Wfr),e(LC,Qfr),e(LC,LG),e(LG,Hfr),e(LC,Ufr),e(V,Jfr),e(V,BC),e(BC,B_e),e(B_e,Yfr),e(BC,Kfr),e(BC,BG),e(BG,Zfr),e(BC,emr),e(V,omr),e(V,xC),e(xC,x_e),e(x_e,rmr),e(xC,tmr),e(xC,xG),e(xG,amr),e(xC,nmr),e(V,smr),e(V,kC),e(kC,k_e),e(k_e,lmr),e(kC,imr),e(kC,kG),e(kG,dmr),e(kC,cmr),e(V,fmr),e(V,RC),e(RC,R_e),e(R_e,mmr),e(RC,gmr),e(RC,RG),e(RG,hmr),e(RC,pmr),e(V,_mr),e(V,SC),e(SC,S_e),e(S_e,umr),e(SC,bmr),e(SC,SG),e(SG,vmr),e(SC,Tmr),e(V,Fmr),e(V,PC),e(PC,P_e),e(P_e,Cmr),e(PC,Mmr),e(PC,PG),e(PG,Emr),e(PC,ymr),e(V,wmr),e(V,$C),e($C,$_e),e($_e,Amr),e($C,Lmr),e($C,$G),e($G,Bmr),e($C,xmr),e(V,kmr),e(V,IC),e(IC,I_e),e(I_e,Rmr),e(IC,Smr),e(IC,IG),e(IG,Pmr),e(IC,$mr),e(V,Imr),e(V,jC),e(jC,j_e),e(j_e,jmr),e(jC,Nmr),e(jC,jG),e(jG,Dmr),e(jC,qmr),e(V,Omr),e(V,NC),e(NC,N_e),e(N_e,Gmr),e(NC,Xmr),e(NC,NG),e(NG,Vmr),e(NC,zmr),e(V,Wmr),e(V,DC),e(DC,D_e),e(D_e,Qmr),e(DC,Hmr),e(DC,DG),e(DG,Umr),e(DC,Jmr),e(To,Ymr),e(To,q_e),e(q_e,Kmr),e(To,Zmr),g(k0,To,null),b(c,tRe,u),b(c,Pc,u),e(Pc,qC),e(qC,O_e),g(R0,O_e,null),e(Pc,egr),e(Pc,G_e),e(G_e,ogr),b(c,aRe,u),b(c,wr,u),g(S0,wr,null),e(wr,rgr),e(wr,$c),e($c,tgr),e($c,X_e),e(X_e,agr),e($c,ngr),e($c,V_e),e(V_e,sgr),e($c,lgr),e(wr,igr),e(wr,P0),e(P0,dgr),e(P0,z_e),e(z_e,cgr),e(P0,fgr),e(wr,mgr),e(wr,Tt),g($0,Tt,null),e(Tt,ggr),e(Tt,W_e),e(W_e,hgr),e(Tt,pgr),e(Tt,Ic),e(Ic,_gr),e(Ic,Q_e),e(Q_e,ugr),e(Ic,bgr),e(Ic,H_e),e(H_e,vgr),e(Ic,Tgr),e(Tt,Fgr),e(Tt,U_e),e(U_e,Cgr),e(Tt,Mgr),g(I0,Tt,null),e(wr,Egr),e(wr,Fo),g(j0,Fo,null),e(Fo,ygr),e(Fo,J_e),e(J_e,wgr),e(Fo,Agr),e(Fo,Mn),e(Mn,Lgr),e(Mn,Y_e),e(Y_e,Bgr),e(Mn,xgr),e(Mn,K_e),e(K_e,kgr),e(Mn,Rgr),e(Mn,Z_e),e(Z_e,Sgr),e(Mn,Pgr),e(Fo,$gr),e(Fo,ae),e(ae,OC),e(OC,eue),e(eue,Igr),e(OC,jgr),e(OC,qG),e(qG,Ngr),e(OC,Dgr),e(ae,qgr),e(ae,GC),e(GC,oue),e(oue,Ogr),e(GC,Ggr),e(GC,OG),e(OG,Xgr),e(GC,Vgr),e(ae,zgr),e(ae,XC),e(XC,rue),e(rue,Wgr),e(XC,Qgr),e(XC,GG),e(GG,Hgr),e(XC,Ugr),e(ae,Jgr),e(ae,VC),e(VC,tue),e(tue,Ygr),e(VC,Kgr),e(VC,XG),e(XG,Zgr),e(VC,ehr),e(ae,ohr),e(ae,zC),e(zC,aue),e(aue,rhr),e(zC,thr),e(zC,VG),e(VG,ahr),e(zC,nhr),e(ae,shr),e(ae,WC),e(WC,nue),e(nue,lhr),e(WC,ihr),e(WC,zG),e(zG,dhr),e(WC,chr),e(ae,fhr),e(ae,QC),e(QC,sue),e(sue,mhr),e(QC,ghr),e(QC,WG),e(WG,hhr),e(QC,phr),e(ae,_hr),e(ae,HC),e(HC,lue),e(lue,uhr),e(HC,bhr),e(HC,QG),e(QG,vhr),e(HC,Thr),e(ae,Fhr),e(ae,UC),e(UC,iue),e(iue,Chr),e(UC,Mhr),e(UC,HG),e(HG,Ehr),e(UC,yhr),e(ae,whr),e(ae,JC),e(JC,due),e(due,Ahr),e(JC,Lhr),e(JC,UG),e(UG,Bhr),e(JC,xhr),e(ae,khr),e(ae,YC),e(YC,cue),e(cue,Rhr),e(YC,Shr),e(YC,JG),e(JG,Phr),e(YC,$hr),e(ae,Ihr),e(ae,KC),e(KC,fue),e(fue,jhr),e(KC,Nhr),e(KC,YG),e(YG,Dhr),e(KC,qhr),e(ae,Ohr),e(ae,ZC),e(ZC,mue),e(mue,Ghr),e(ZC,Xhr),e(ZC,KG),e(KG,Vhr),e(ZC,zhr),e(ae,Whr),e(ae,eM),e(eM,gue),e(gue,Qhr),e(eM,Hhr),e(eM,ZG),e(ZG,Uhr),e(eM,Jhr),e(ae,Yhr),e(ae,oM),e(oM,hue),e(hue,Khr),e(oM,Zhr),e(oM,eX),e(eX,epr),e(oM,opr),e(ae,rpr),e(ae,rM),e(rM,pue),e(pue,tpr),e(rM,apr),e(rM,oX),e(oX,npr),e(rM,spr),e(ae,lpr),e(ae,tM),e(tM,_ue),e(_ue,ipr),e(tM,dpr),e(tM,rX),e(rX,cpr),e(tM,fpr),e(Fo,mpr),e(Fo,uue),e(uue,gpr),e(Fo,hpr),g(N0,Fo,null),b(c,nRe,u),b(c,jc,u),e(jc,aM),e(aM,bue),g(D0,bue,null),e(jc,ppr),e(jc,vue),e(vue,_pr),b(c,sRe,u),b(c,Ar,u),g(q0,Ar,null),e(Ar,upr),e(Ar,Nc),e(Nc,bpr),e(Nc,Tue),e(Tue,vpr),e(Nc,Tpr),e(Nc,Fue),e(Fue,Fpr),e(Nc,Cpr),e(Ar,Mpr),e(Ar,O0),e(O0,Epr),e(O0,Cue),e(Cue,ypr),e(O0,wpr),e(Ar,Apr),e(Ar,Ft),g(G0,Ft,null),e(Ft,Lpr),e(Ft,Mue),e(Mue,Bpr),e(Ft,xpr),e(Ft,Dc),e(Dc,kpr),e(Dc,Eue),e(Eue,Rpr),e(Dc,Spr),e(Dc,yue),e(yue,Ppr),e(Dc,$pr),e(Ft,Ipr),e(Ft,wue),e(wue,jpr),e(Ft,Npr),g(X0,Ft,null),e(Ar,Dpr),e(Ar,Co),g(V0,Co,null),e(Co,qpr),e(Co,Aue),e(Aue,Opr),e(Co,Gpr),e(Co,En),e(En,Xpr),e(En,Lue),e(Lue,Vpr),e(En,zpr),e(En,Bue),e(Bue,Wpr),e(En,Qpr),e(En,xue),e(xue,Hpr),e(En,Upr),e(Co,Jpr),e(Co,kue),e(kue,nM),e(nM,Rue),e(Rue,Ypr),e(nM,Kpr),e(nM,tX),e(tX,Zpr),e(nM,e_r),e(Co,o_r),e(Co,Sue),e(Sue,r_r),e(Co,t_r),g(z0,Co,null),b(c,lRe,u),b(c,qc,u),e(qc,sM),e(sM,Pue),g(W0,Pue,null),e(qc,a_r),e(qc,$ue),e($ue,n_r),b(c,iRe,u),b(c,Lr,u),g(Q0,Lr,null),e(Lr,s_r),e(Lr,Oc),e(Oc,l_r),e(Oc,Iue),e(Iue,i_r),e(Oc,d_r),e(Oc,jue),e(jue,c_r),e(Oc,f_r),e(Lr,m_r),e(Lr,H0),e(H0,g_r),e(H0,Nue),e(Nue,h_r),e(H0,p_r),e(Lr,__r),e(Lr,Ct),g(U0,Ct,null),e(Ct,u_r),e(Ct,Due),e(Due,b_r),e(Ct,v_r),e(Ct,Gc),e(Gc,T_r),e(Gc,que),e(que,F_r),e(Gc,C_r),e(Gc,Oue),e(Oue,M_r),e(Gc,E_r),e(Ct,y_r),e(Ct,Gue),e(Gue,w_r),e(Ct,A_r),g(J0,Ct,null),e(Lr,L_r),e(Lr,Mo),g(Y0,Mo,null),e(Mo,B_r),e(Mo,Xue),e(Xue,x_r),e(Mo,k_r),e(Mo,yn),e(yn,R_r),e(yn,Vue),e(Vue,S_r),e(yn,P_r),e(yn,zue),e(zue,$_r),e(yn,I_r),e(yn,Wue),e(Wue,j_r),e(yn,N_r),e(Mo,D_r),e(Mo,K),e(K,lM),e(lM,Que),e(Que,q_r),e(lM,O_r),e(lM,aX),e(aX,G_r),e(lM,X_r),e(K,V_r),e(K,iM),e(iM,Hue),e(Hue,z_r),e(iM,W_r),e(iM,nX),e(nX,Q_r),e(iM,H_r),e(K,U_r),e(K,dM),e(dM,Uue),e(Uue,J_r),e(dM,Y_r),e(dM,sX),e(sX,K_r),e(dM,Z_r),e(K,eur),e(K,cM),e(cM,Jue),e(Jue,our),e(cM,rur),e(cM,lX),e(lX,tur),e(cM,aur),e(K,nur),e(K,fM),e(fM,Yue),e(Yue,sur),e(fM,lur),e(fM,iX),e(iX,iur),e(fM,dur),e(K,cur),e(K,mM),e(mM,Kue),e(Kue,fur),e(mM,mur),e(mM,dX),e(dX,gur),e(mM,hur),e(K,pur),e(K,gM),e(gM,Zue),e(Zue,_ur),e(gM,uur),e(gM,cX),e(cX,bur),e(gM,vur),e(K,Tur),e(K,hM),e(hM,ebe),e(ebe,Fur),e(hM,Cur),e(hM,fX),e(fX,Mur),e(hM,Eur),e(K,yur),e(K,pM),e(pM,obe),e(obe,wur),e(pM,Aur),e(pM,mX),e(mX,Lur),e(pM,Bur),e(K,xur),e(K,_M),e(_M,rbe),e(rbe,kur),e(_M,Rur),e(_M,gX),e(gX,Sur),e(_M,Pur),e(K,$ur),e(K,uM),e(uM,tbe),e(tbe,Iur),e(uM,jur),e(uM,hX),e(hX,Nur),e(uM,Dur),e(K,qur),e(K,bM),e(bM,abe),e(abe,Our),e(bM,Gur),e(bM,pX),e(pX,Xur),e(bM,Vur),e(K,zur),e(K,vM),e(vM,nbe),e(nbe,Wur),e(vM,Qur),e(vM,_X),e(_X,Hur),e(vM,Uur),e(K,Jur),e(K,TM),e(TM,sbe),e(sbe,Yur),e(TM,Kur),e(TM,uX),e(uX,Zur),e(TM,ebr),e(K,obr),e(K,FM),e(FM,lbe),e(lbe,rbr),e(FM,tbr),e(FM,bX),e(bX,abr),e(FM,nbr),e(K,sbr),e(K,CM),e(CM,ibe),e(ibe,lbr),e(CM,ibr),e(CM,vX),e(vX,dbr),e(CM,cbr),e(K,fbr),e(K,MM),e(MM,dbe),e(dbe,mbr),e(MM,gbr),e(MM,TX),e(TX,hbr),e(MM,pbr),e(K,_br),e(K,EM),e(EM,cbe),e(cbe,ubr),e(EM,bbr),e(EM,FX),e(FX,vbr),e(EM,Tbr),e(K,Fbr),e(K,yM),e(yM,fbe),e(fbe,Cbr),e(yM,Mbr),e(yM,CX),e(CX,Ebr),e(yM,ybr),e(K,wbr),e(K,wM),e(wM,mbe),e(mbe,Abr),e(wM,Lbr),e(wM,MX),e(MX,Bbr),e(wM,xbr),e(Mo,kbr),e(Mo,gbe),e(gbe,Rbr),e(Mo,Sbr),g(K0,Mo,null),b(c,dRe,u),b(c,Xc,u),e(Xc,AM),e(AM,hbe),g(Z0,hbe,null),e(Xc,Pbr),e(Xc,pbe),e(pbe,$br),b(c,cRe,u),b(c,Br,u),g(eL,Br,null),e(Br,Ibr),e(Br,Vc),e(Vc,jbr),e(Vc,_be),e(_be,Nbr),e(Vc,Dbr),e(Vc,ube),e(ube,qbr),e(Vc,Obr),e(Br,Gbr),e(Br,oL),e(oL,Xbr),e(oL,bbe),e(bbe,Vbr),e(oL,zbr),e(Br,Wbr),e(Br,Mt),g(rL,Mt,null),e(Mt,Qbr),e(Mt,vbe),e(vbe,Hbr),e(Mt,Ubr),e(Mt,zc),e(zc,Jbr),e(zc,Tbe),e(Tbe,Ybr),e(zc,Kbr),e(zc,Fbe),e(Fbe,Zbr),e(zc,e3r),e(Mt,o3r),e(Mt,Cbe),e(Cbe,r3r),e(Mt,t3r),g(tL,Mt,null),e(Br,a3r),e(Br,Eo),g(aL,Eo,null),e(Eo,n3r),e(Eo,Mbe),e(Mbe,s3r),e(Eo,l3r),e(Eo,wn),e(wn,i3r),e(wn,Ebe),e(Ebe,d3r),e(wn,c3r),e(wn,ybe),e(ybe,f3r),e(wn,m3r),e(wn,wbe),e(wbe,g3r),e(wn,h3r),e(Eo,p3r),e(Eo,Z),e(Z,LM),e(LM,Abe),e(Abe,_3r),e(LM,u3r),e(LM,EX),e(EX,b3r),e(LM,v3r),e(Z,T3r),e(Z,BM),e(BM,Lbe),e(Lbe,F3r),e(BM,C3r),e(BM,yX),e(yX,M3r),e(BM,E3r),e(Z,y3r),e(Z,xM),e(xM,Bbe),e(Bbe,w3r),e(xM,A3r),e(xM,wX),e(wX,L3r),e(xM,B3r),e(Z,x3r),e(Z,kM),e(kM,xbe),e(xbe,k3r),e(kM,R3r),e(kM,AX),e(AX,S3r),e(kM,P3r),e(Z,$3r),e(Z,RM),e(RM,kbe),e(kbe,I3r),e(RM,j3r),e(RM,LX),e(LX,N3r),e(RM,D3r),e(Z,q3r),e(Z,SM),e(SM,Rbe),e(Rbe,O3r),e(SM,G3r),e(SM,BX),e(BX,X3r),e(SM,V3r),e(Z,z3r),e(Z,PM),e(PM,Sbe),e(Sbe,W3r),e(PM,Q3r),e(PM,xX),e(xX,H3r),e(PM,U3r),e(Z,J3r),e(Z,$M),e($M,Pbe),e(Pbe,Y3r),e($M,K3r),e($M,kX),e(kX,Z3r),e($M,e2r),e(Z,o2r),e(Z,IM),e(IM,$be),e($be,r2r),e(IM,t2r),e(IM,RX),e(RX,a2r),e(IM,n2r),e(Z,s2r),e(Z,jM),e(jM,Ibe),e(Ibe,l2r),e(jM,i2r),e(jM,SX),e(SX,d2r),e(jM,c2r),e(Z,f2r),e(Z,NM),e(NM,jbe),e(jbe,m2r),e(NM,g2r),e(NM,PX),e(PX,h2r),e(NM,p2r),e(Z,_2r),e(Z,DM),e(DM,Nbe),e(Nbe,u2r),e(DM,b2r),e(DM,$X),e($X,v2r),e(DM,T2r),e(Z,F2r),e(Z,qM),e(qM,Dbe),e(Dbe,C2r),e(qM,M2r),e(qM,IX),e(IX,E2r),e(qM,y2r),e(Z,w2r),e(Z,OM),e(OM,qbe),e(qbe,A2r),e(OM,L2r),e(OM,jX),e(jX,B2r),e(OM,x2r),e(Z,k2r),e(Z,GM),e(GM,Obe),e(Obe,R2r),e(GM,S2r),e(GM,NX),e(NX,P2r),e(GM,$2r),e(Z,I2r),e(Z,XM),e(XM,Gbe),e(Gbe,j2r),e(XM,N2r),e(XM,DX),e(DX,D2r),e(XM,q2r),e(Z,O2r),e(Z,VM),e(VM,Xbe),e(Xbe,G2r),e(VM,X2r),e(VM,qX),e(qX,V2r),e(VM,z2r),e(Z,W2r),e(Z,zM),e(zM,Vbe),e(Vbe,Q2r),e(zM,H2r),e(zM,OX),e(OX,U2r),e(zM,J2r),e(Z,Y2r),e(Z,WM),e(WM,zbe),e(zbe,K2r),e(WM,Z2r),e(WM,GX),e(GX,evr),e(WM,ovr),e(Eo,rvr),e(Eo,Wbe),e(Wbe,tvr),e(Eo,avr),g(nL,Eo,null),b(c,fRe,u),b(c,Wc,u),e(Wc,QM),e(QM,Qbe),g(sL,Qbe,null),e(Wc,nvr),e(Wc,Hbe),e(Hbe,svr),b(c,mRe,u),b(c,xr,u),g(lL,xr,null),e(xr,lvr),e(xr,Qc),e(Qc,ivr),e(Qc,Ube),e(Ube,dvr),e(Qc,cvr),e(Qc,Jbe),e(Jbe,fvr),e(Qc,mvr),e(xr,gvr),e(xr,iL),e(iL,hvr),e(iL,Ybe),e(Ybe,pvr),e(iL,_vr),e(xr,uvr),e(xr,Et),g(dL,Et,null),e(Et,bvr),e(Et,Kbe),e(Kbe,vvr),e(Et,Tvr),e(Et,Hc),e(Hc,Fvr),e(Hc,Zbe),e(Zbe,Cvr),e(Hc,Mvr),e(Hc,e3e),e(e3e,Evr),e(Hc,yvr),e(Et,wvr),e(Et,o3e),e(o3e,Avr),e(Et,Lvr),g(cL,Et,null),e(xr,Bvr),e(xr,yo),g(fL,yo,null),e(yo,xvr),e(yo,r3e),e(r3e,kvr),e(yo,Rvr),e(yo,An),e(An,Svr),e(An,t3e),e(t3e,Pvr),e(An,$vr),e(An,a3e),e(a3e,Ivr),e(An,jvr),e(An,n3e),e(n3e,Nvr),e(An,Dvr),e(yo,qvr),e(yo,s3e),e(s3e,HM),e(HM,l3e),e(l3e,Ovr),e(HM,Gvr),e(HM,XX),e(XX,Xvr),e(HM,Vvr),e(yo,zvr),e(yo,i3e),e(i3e,Wvr),e(yo,Qvr),g(mL,yo,null),b(c,gRe,u),b(c,Uc,u),e(Uc,UM),e(UM,d3e),g(gL,d3e,null),e(Uc,Hvr),e(Uc,c3e),e(c3e,Uvr),b(c,hRe,u),b(c,kr,u),g(hL,kr,null),e(kr,Jvr),e(kr,Jc),e(Jc,Yvr),e(Jc,f3e),e(f3e,Kvr),e(Jc,Zvr),e(Jc,m3e),e(m3e,eTr),e(Jc,oTr),e(kr,rTr),e(kr,pL),e(pL,tTr),e(pL,g3e),e(g3e,aTr),e(pL,nTr),e(kr,sTr),e(kr,yt),g(_L,yt,null),e(yt,lTr),e(yt,h3e),e(h3e,iTr),e(yt,dTr),e(yt,Yc),e(Yc,cTr),e(Yc,p3e),e(p3e,fTr),e(Yc,mTr),e(Yc,_3e),e(_3e,gTr),e(Yc,hTr),e(yt,pTr),e(yt,u3e),e(u3e,_Tr),e(yt,uTr),g(uL,yt,null),e(kr,bTr),e(kr,wo),g(bL,wo,null),e(wo,vTr),e(wo,b3e),e(b3e,TTr),e(wo,FTr),e(wo,Ln),e(Ln,CTr),e(Ln,v3e),e(v3e,MTr),e(Ln,ETr),e(Ln,T3e),e(T3e,yTr),e(Ln,wTr),e(Ln,F3e),e(F3e,ATr),e(Ln,LTr),e(wo,BTr),e(wo,C3e),e(C3e,JM),e(JM,M3e),e(M3e,xTr),e(JM,kTr),e(JM,VX),e(VX,RTr),e(JM,STr),e(wo,PTr),e(wo,E3e),e(E3e,$Tr),e(wo,ITr),g(vL,wo,null),b(c,pRe,u),b(c,Kc,u),e(Kc,YM),e(YM,y3e),g(TL,y3e,null),e(Kc,jTr),e(Kc,w3e),e(w3e,NTr),b(c,_Re,u),b(c,Rr,u),g(FL,Rr,null),e(Rr,DTr),e(Rr,Zc),e(Zc,qTr),e(Zc,A3e),e(A3e,OTr),e(Zc,GTr),e(Zc,L3e),e(L3e,XTr),e(Zc,VTr),e(Rr,zTr),e(Rr,CL),e(CL,WTr),e(CL,B3e),e(B3e,QTr),e(CL,HTr),e(Rr,UTr),e(Rr,wt),g(ML,wt,null),e(wt,JTr),e(wt,x3e),e(x3e,YTr),e(wt,KTr),e(wt,ef),e(ef,ZTr),e(ef,k3e),e(k3e,e1r),e(ef,o1r),e(ef,R3e),e(R3e,r1r),e(ef,t1r),e(wt,a1r),e(wt,S3e),e(S3e,n1r),e(wt,s1r),g(EL,wt,null),e(Rr,l1r),e(Rr,Ao),g(yL,Ao,null),e(Ao,i1r),e(Ao,P3e),e(P3e,d1r),e(Ao,c1r),e(Ao,Bn),e(Bn,f1r),e(Bn,$3e),e($3e,m1r),e(Bn,g1r),e(Bn,I3e),e(I3e,h1r),e(Bn,p1r),e(Bn,j3e),e(j3e,_1r),e(Bn,u1r),e(Ao,b1r),e(Ao,z),e(z,KM),e(KM,N3e),e(N3e,v1r),e(KM,T1r),e(KM,zX),e(zX,F1r),e(KM,C1r),e(z,M1r),e(z,ZM),e(ZM,D3e),e(D3e,E1r),e(ZM,y1r),e(ZM,WX),e(WX,w1r),e(ZM,A1r),e(z,L1r),e(z,e4),e(e4,q3e),e(q3e,B1r),e(e4,x1r),e(e4,QX),e(QX,k1r),e(e4,R1r),e(z,S1r),e(z,o4),e(o4,O3e),e(O3e,P1r),e(o4,$1r),e(o4,HX),e(HX,I1r),e(o4,j1r),e(z,N1r),e(z,r4),e(r4,G3e),e(G3e,D1r),e(r4,q1r),e(r4,UX),e(UX,O1r),e(r4,G1r),e(z,X1r),e(z,t4),e(t4,X3e),e(X3e,V1r),e(t4,z1r),e(t4,JX),e(JX,W1r),e(t4,Q1r),e(z,H1r),e(z,a4),e(a4,V3e),e(V3e,U1r),e(a4,J1r),e(a4,YX),e(YX,Y1r),e(a4,K1r),e(z,Z1r),e(z,n4),e(n4,z3e),e(z3e,eFr),e(n4,oFr),e(n4,KX),e(KX,rFr),e(n4,tFr),e(z,aFr),e(z,s4),e(s4,W3e),e(W3e,nFr),e(s4,sFr),e(s4,ZX),e(ZX,lFr),e(s4,iFr),e(z,dFr),e(z,l4),e(l4,Q3e),e(Q3e,cFr),e(l4,fFr),e(l4,eV),e(eV,mFr),e(l4,gFr),e(z,hFr),e(z,i4),e(i4,H3e),e(H3e,pFr),e(i4,_Fr),e(i4,oV),e(oV,uFr),e(i4,bFr),e(z,vFr),e(z,d4),e(d4,U3e),e(U3e,TFr),e(d4,FFr),e(d4,rV),e(rV,CFr),e(d4,MFr),e(z,EFr),e(z,c4),e(c4,J3e),e(J3e,yFr),e(c4,wFr),e(c4,tV),e(tV,AFr),e(c4,LFr),e(z,BFr),e(z,f4),e(f4,Y3e),e(Y3e,xFr),e(f4,kFr),e(f4,aV),e(aV,RFr),e(f4,SFr),e(z,PFr),e(z,m4),e(m4,K3e),e(K3e,$Fr),e(m4,IFr),e(m4,nV),e(nV,jFr),e(m4,NFr),e(z,DFr),e(z,g4),e(g4,Z3e),e(Z3e,qFr),e(g4,OFr),e(g4,sV),e(sV,GFr),e(g4,XFr),e(z,VFr),e(z,h4),e(h4,e2e),e(e2e,zFr),e(h4,WFr),e(h4,lV),e(lV,QFr),e(h4,HFr),e(z,UFr),e(z,p4),e(p4,o2e),e(o2e,JFr),e(p4,YFr),e(p4,iV),e(iV,KFr),e(p4,ZFr),e(z,eCr),e(z,_4),e(_4,r2e),e(r2e,oCr),e(_4,rCr),e(_4,dV),e(dV,tCr),e(_4,aCr),e(z,nCr),e(z,u4),e(u4,t2e),e(t2e,sCr),e(u4,lCr),e(u4,cV),e(cV,iCr),e(u4,dCr),e(z,cCr),e(z,b4),e(b4,a2e),e(a2e,fCr),e(b4,mCr),e(b4,fV),e(fV,gCr),e(b4,hCr),e(z,pCr),e(z,v4),e(v4,n2e),e(n2e,_Cr),e(v4,uCr),e(v4,mV),e(mV,bCr),e(v4,vCr),e(z,TCr),e(z,T4),e(T4,s2e),e(s2e,FCr),e(T4,CCr),e(T4,gV),e(gV,MCr),e(T4,ECr),e(z,yCr),e(z,F4),e(F4,l2e),e(l2e,wCr),e(F4,ACr),e(F4,hV),e(hV,LCr),e(F4,BCr),e(z,xCr),e(z,C4),e(C4,i2e),e(i2e,kCr),e(C4,RCr),e(C4,pV),e(pV,SCr),e(C4,PCr),e(Ao,$Cr),e(Ao,d2e),e(d2e,ICr),e(Ao,jCr),g(wL,Ao,null),b(c,uRe,u),b(c,of,u),e(of,M4),e(M4,c2e),g(AL,c2e,null),e(of,NCr),e(of,f2e),e(f2e,DCr),b(c,bRe,u),b(c,Sr,u),g(LL,Sr,null),e(Sr,qCr),e(Sr,rf),e(rf,OCr),e(rf,m2e),e(m2e,GCr),e(rf,XCr),e(rf,g2e),e(g2e,VCr),e(rf,zCr),e(Sr,WCr),e(Sr,BL),e(BL,QCr),e(BL,h2e),e(h2e,HCr),e(BL,UCr),e(Sr,JCr),e(Sr,At),g(xL,At,null),e(At,YCr),e(At,p2e),e(p2e,KCr),e(At,ZCr),e(At,tf),e(tf,eMr),e(tf,_2e),e(_2e,oMr),e(tf,rMr),e(tf,u2e),e(u2e,tMr),e(tf,aMr),e(At,nMr),e(At,b2e),e(b2e,sMr),e(At,lMr),g(kL,At,null),e(Sr,iMr),e(Sr,Lo),g(RL,Lo,null),e(Lo,dMr),e(Lo,v2e),e(v2e,cMr),e(Lo,fMr),e(Lo,xn),e(xn,mMr),e(xn,T2e),e(T2e,gMr),e(xn,hMr),e(xn,F2e),e(F2e,pMr),e(xn,_Mr),e(xn,C2e),e(C2e,uMr),e(xn,bMr),e(Lo,vMr),e(Lo,ca),e(ca,E4),e(E4,M2e),e(M2e,TMr),e(E4,FMr),e(E4,_V),e(_V,CMr),e(E4,MMr),e(ca,EMr),e(ca,y4),e(y4,E2e),e(E2e,yMr),e(y4,wMr),e(y4,uV),e(uV,AMr),e(y4,LMr),e(ca,BMr),e(ca,w4),e(w4,y2e),e(y2e,xMr),e(w4,kMr),e(w4,bV),e(bV,RMr),e(w4,SMr),e(ca,PMr),e(ca,A4),e(A4,w2e),e(w2e,$Mr),e(A4,IMr),e(A4,vV),e(vV,jMr),e(A4,NMr),e(ca,DMr),e(ca,L4),e(L4,A2e),e(A2e,qMr),e(L4,OMr),e(L4,TV),e(TV,GMr),e(L4,XMr),e(Lo,VMr),e(Lo,L2e),e(L2e,zMr),e(Lo,WMr),g(SL,Lo,null),b(c,vRe,u),b(c,af,u),e(af,B4),e(B4,B2e),g(PL,B2e,null),e(af,QMr),e(af,x2e),e(x2e,HMr),b(c,TRe,u),b(c,Pr,u),g($L,Pr,null),e(Pr,UMr),e(Pr,nf),e(nf,JMr),e(nf,k2e),e(k2e,YMr),e(nf,KMr),e(nf,R2e),e(R2e,ZMr),e(nf,e4r),e(Pr,o4r),e(Pr,IL),e(IL,r4r),e(IL,S2e),e(S2e,t4r),e(IL,a4r),e(Pr,n4r),e(Pr,Lt),g(jL,Lt,null),e(Lt,s4r),e(Lt,P2e),e(P2e,l4r),e(Lt,i4r),e(Lt,sf),e(sf,d4r),e(sf,$2e),e($2e,c4r),e(sf,f4r),e(sf,I2e),e(I2e,m4r),e(sf,g4r),e(Lt,h4r),e(Lt,j2e),e(j2e,p4r),e(Lt,_4r),g(NL,Lt,null),e(Pr,u4r),e(Pr,Bo),g(DL,Bo,null),e(Bo,b4r),e(Bo,N2e),e(N2e,v4r),e(Bo,T4r),e(Bo,kn),e(kn,F4r),e(kn,D2e),e(D2e,C4r),e(kn,M4r),e(kn,q2e),e(q2e,E4r),e(kn,y4r),e(kn,O2e),e(O2e,w4r),e(kn,A4r),e(Bo,L4r),e(Bo,ce),e(ce,x4),e(x4,G2e),e(G2e,B4r),e(x4,x4r),e(x4,FV),e(FV,k4r),e(x4,R4r),e(ce,S4r),e(ce,k4),e(k4,X2e),e(X2e,P4r),e(k4,$4r),e(k4,CV),e(CV,I4r),e(k4,j4r),e(ce,N4r),e(ce,R4),e(R4,V2e),e(V2e,D4r),e(R4,q4r),e(R4,MV),e(MV,O4r),e(R4,G4r),e(ce,X4r),e(ce,S4),e(S4,z2e),e(z2e,V4r),e(S4,z4r),e(S4,EV),e(EV,W4r),e(S4,Q4r),e(ce,H4r),e(ce,P4),e(P4,W2e),e(W2e,U4r),e(P4,J4r),e(P4,yV),e(yV,Y4r),e(P4,K4r),e(ce,Z4r),e(ce,$4),e($4,Q2e),e(Q2e,eEr),e($4,oEr),e($4,wV),e(wV,rEr),e($4,tEr),e(ce,aEr),e(ce,I4),e(I4,H2e),e(H2e,nEr),e(I4,sEr),e(I4,AV),e(AV,lEr),e(I4,iEr),e(ce,dEr),e(ce,j4),e(j4,U2e),e(U2e,cEr),e(j4,fEr),e(j4,LV),e(LV,mEr),e(j4,gEr),e(ce,hEr),e(ce,N4),e(N4,J2e),e(J2e,pEr),e(N4,_Er),e(N4,BV),e(BV,uEr),e(N4,bEr),e(ce,vEr),e(ce,D4),e(D4,Y2e),e(Y2e,TEr),e(D4,FEr),e(D4,xV),e(xV,CEr),e(D4,MEr),e(ce,EEr),e(ce,q4),e(q4,K2e),e(K2e,yEr),e(q4,wEr),e(q4,kV),e(kV,AEr),e(q4,LEr),e(ce,BEr),e(ce,O4),e(O4,Z2e),e(Z2e,xEr),e(O4,kEr),e(O4,RV),e(RV,REr),e(O4,SEr),e(Bo,PEr),e(Bo,eve),e(eve,$Er),e(Bo,IEr),g(qL,Bo,null),b(c,FRe,u),b(c,lf,u),e(lf,G4),e(G4,ove),g(OL,ove,null),e(lf,jEr),e(lf,rve),e(rve,NEr),b(c,CRe,u),b(c,$r,u),g(GL,$r,null),e($r,DEr),e($r,df),e(df,qEr),e(df,tve),e(tve,OEr),e(df,GEr),e(df,ave),e(ave,XEr),e(df,VEr),e($r,zEr),e($r,XL),e(XL,WEr),e(XL,nve),e(nve,QEr),e(XL,HEr),e($r,UEr),e($r,Bt),g(VL,Bt,null),e(Bt,JEr),e(Bt,sve),e(sve,YEr),e(Bt,KEr),e(Bt,cf),e(cf,ZEr),e(cf,lve),e(lve,e5r),e(cf,o5r),e(cf,ive),e(ive,r5r),e(cf,t5r),e(Bt,a5r),e(Bt,dve),e(dve,n5r),e(Bt,s5r),g(zL,Bt,null),e($r,l5r),e($r,xo),g(WL,xo,null),e(xo,i5r),e(xo,cve),e(cve,d5r),e(xo,c5r),e(xo,Rn),e(Rn,f5r),e(Rn,fve),e(fve,m5r),e(Rn,g5r),e(Rn,mve),e(mve,h5r),e(Rn,p5r),e(Rn,gve),e(gve,_5r),e(Rn,u5r),e(xo,b5r),e(xo,be),e(be,X4),e(X4,hve),e(hve,v5r),e(X4,T5r),e(X4,SV),e(SV,F5r),e(X4,C5r),e(be,M5r),e(be,V4),e(V4,pve),e(pve,E5r),e(V4,y5r),e(V4,PV),e(PV,w5r),e(V4,A5r),e(be,L5r),e(be,z4),e(z4,_ve),e(_ve,B5r),e(z4,x5r),e(z4,$V),e($V,k5r),e(z4,R5r),e(be,S5r),e(be,W4),e(W4,uve),e(uve,P5r),e(W4,$5r),e(W4,IV),e(IV,I5r),e(W4,j5r),e(be,N5r),e(be,Q4),e(Q4,bve),e(bve,D5r),e(Q4,q5r),e(Q4,jV),e(jV,O5r),e(Q4,G5r),e(be,X5r),e(be,H4),e(H4,vve),e(vve,V5r),e(H4,z5r),e(H4,NV),e(NV,W5r),e(H4,Q5r),e(be,H5r),e(be,U4),e(U4,Tve),e(Tve,U5r),e(U4,J5r),e(U4,DV),e(DV,Y5r),e(U4,K5r),e(be,Z5r),e(be,J4),e(J4,Fve),e(Fve,eyr),e(J4,oyr),e(J4,qV),e(qV,ryr),e(J4,tyr),e(be,ayr),e(be,Y4),e(Y4,Cve),e(Cve,nyr),e(Y4,syr),e(Y4,OV),e(OV,lyr),e(Y4,iyr),e(be,dyr),e(be,K4),e(K4,Mve),e(Mve,cyr),e(K4,fyr),e(K4,GV),e(GV,myr),e(K4,gyr),e(xo,hyr),e(xo,Eve),e(Eve,pyr),e(xo,_yr),g(QL,xo,null),b(c,MRe,u),b(c,ff,u),e(ff,Z4),e(Z4,yve),g(HL,yve,null),e(ff,uyr),e(ff,wve),e(wve,byr),b(c,ERe,u),b(c,Ir,u),g(UL,Ir,null),e(Ir,vyr),e(Ir,mf),e(mf,Tyr),e(mf,Ave),e(Ave,Fyr),e(mf,Cyr),e(mf,Lve),e(Lve,Myr),e(mf,Eyr),e(Ir,yyr),e(Ir,JL),e(JL,wyr),e(JL,Bve),e(Bve,Ayr),e(JL,Lyr),e(Ir,Byr),e(Ir,xt),g(YL,xt,null),e(xt,xyr),e(xt,xve),e(xve,kyr),e(xt,Ryr),e(xt,gf),e(gf,Syr),e(gf,kve),e(kve,Pyr),e(gf,$yr),e(gf,Rve),e(Rve,Iyr),e(gf,jyr),e(xt,Nyr),e(xt,Sve),e(Sve,Dyr),e(xt,qyr),g(KL,xt,null),e(Ir,Oyr),e(Ir,ko),g(ZL,ko,null),e(ko,Gyr),e(ko,Pve),e(Pve,Xyr),e(ko,Vyr),e(ko,Sn),e(Sn,zyr),e(Sn,$ve),e($ve,Wyr),e(Sn,Qyr),e(Sn,Ive),e(Ive,Hyr),e(Sn,Uyr),e(Sn,jve),e(jve,Jyr),e(Sn,Yyr),e(ko,Kyr),e(ko,Ee),e(Ee,eE),e(eE,Nve),e(Nve,Zyr),e(eE,ewr),e(eE,XV),e(XV,owr),e(eE,rwr),e(Ee,twr),e(Ee,oE),e(oE,Dve),e(Dve,awr),e(oE,nwr),e(oE,VV),e(VV,swr),e(oE,lwr),e(Ee,iwr),e(Ee,rE),e(rE,qve),e(qve,dwr),e(rE,cwr),e(rE,zV),e(zV,fwr),e(rE,mwr),e(Ee,gwr),e(Ee,tE),e(tE,Ove),e(Ove,hwr),e(tE,pwr),e(tE,WV),e(WV,_wr),e(tE,uwr),e(Ee,bwr),e(Ee,aE),e(aE,Gve),e(Gve,vwr),e(aE,Twr),e(aE,QV),e(QV,Fwr),e(aE,Cwr),e(Ee,Mwr),e(Ee,nE),e(nE,Xve),e(Xve,Ewr),e(nE,ywr),e(nE,HV),e(HV,wwr),e(nE,Awr),e(Ee,Lwr),e(Ee,sE),e(sE,Vve),e(Vve,Bwr),e(sE,xwr),e(sE,UV),e(UV,kwr),e(sE,Rwr),e(Ee,Swr),e(Ee,lE),e(lE,zve),e(zve,Pwr),e(lE,$wr),e(lE,JV),e(JV,Iwr),e(lE,jwr),e(Ee,Nwr),e(Ee,iE),e(iE,Wve),e(Wve,Dwr),e(iE,qwr),e(iE,YV),e(YV,Owr),e(iE,Gwr),e(ko,Xwr),e(ko,Qve),e(Qve,Vwr),e(ko,zwr),g(e7,ko,null),b(c,yRe,u),b(c,hf,u),e(hf,dE),e(dE,Hve),g(o7,Hve,null),e(hf,Wwr),e(hf,Uve),e(Uve,Qwr),b(c,wRe,u),b(c,jr,u),g(r7,jr,null),e(jr,Hwr),e(jr,pf),e(pf,Uwr),e(pf,Jve),e(Jve,Jwr),e(pf,Ywr),e(pf,Yve),e(Yve,Kwr),e(pf,Zwr),e(jr,e6r),e(jr,t7),e(t7,o6r),e(t7,Kve),e(Kve,r6r),e(t7,t6r),e(jr,a6r),e(jr,kt),g(a7,kt,null),e(kt,n6r),e(kt,Zve),e(Zve,s6r),e(kt,l6r),e(kt,_f),e(_f,i6r),e(_f,eTe),e(eTe,d6r),e(_f,c6r),e(_f,oTe),e(oTe,f6r),e(_f,m6r),e(kt,g6r),e(kt,rTe),e(rTe,h6r),e(kt,p6r),g(n7,kt,null),e(jr,_6r),e(jr,Ro),g(s7,Ro,null),e(Ro,u6r),e(Ro,tTe),e(tTe,b6r),e(Ro,v6r),e(Ro,Pn),e(Pn,T6r),e(Pn,aTe),e(aTe,F6r),e(Pn,C6r),e(Pn,nTe),e(nTe,M6r),e(Pn,E6r),e(Pn,sTe),e(sTe,y6r),e(Pn,w6r),e(Ro,A6r),e(Ro,ve),e(ve,cE),e(cE,lTe),e(lTe,L6r),e(cE,B6r),e(cE,KV),e(KV,x6r),e(cE,k6r),e(ve,R6r),e(ve,fE),e(fE,iTe),e(iTe,S6r),e(fE,P6r),e(fE,ZV),e(ZV,$6r),e(fE,I6r),e(ve,j6r),e(ve,mE),e(mE,dTe),e(dTe,N6r),e(mE,D6r),e(mE,ez),e(ez,q6r),e(mE,O6r),e(ve,G6r),e(ve,gE),e(gE,cTe),e(cTe,X6r),e(gE,V6r),e(gE,oz),e(oz,z6r),e(gE,W6r),e(ve,Q6r),e(ve,hE),e(hE,fTe),e(fTe,H6r),e(hE,U6r),e(hE,rz),e(rz,J6r),e(hE,Y6r),e(ve,K6r),e(ve,pE),e(pE,mTe),e(mTe,Z6r),e(pE,eAr),e(pE,tz),e(tz,oAr),e(pE,rAr),e(ve,tAr),e(ve,_E),e(_E,gTe),e(gTe,aAr),e(_E,nAr),e(_E,az),e(az,sAr),e(_E,lAr),e(ve,iAr),e(ve,uE),e(uE,hTe),e(hTe,dAr),e(uE,cAr),e(uE,nz),e(nz,fAr),e(uE,mAr),e(ve,gAr),e(ve,bE),e(bE,pTe),e(pTe,hAr),e(bE,pAr),e(bE,sz),e(sz,_Ar),e(bE,uAr),e(ve,bAr),e(ve,vE),e(vE,_Te),e(_Te,vAr),e(vE,TAr),e(vE,lz),e(lz,FAr),e(vE,CAr),e(Ro,MAr),e(Ro,uTe),e(uTe,EAr),e(Ro,yAr),g(l7,Ro,null),b(c,ARe,u),b(c,uf,u),e(uf,TE),e(TE,bTe),g(i7,bTe,null),e(uf,wAr),e(uf,vTe),e(vTe,AAr),b(c,LRe,u),b(c,Nr,u),g(d7,Nr,null),e(Nr,LAr),e(Nr,bf),e(bf,BAr),e(bf,TTe),e(TTe,xAr),e(bf,kAr),e(bf,FTe),e(FTe,RAr),e(bf,SAr),e(Nr,PAr),e(Nr,c7),e(c7,$Ar),e(c7,CTe),e(CTe,IAr),e(c7,jAr),e(Nr,NAr),e(Nr,Rt),g(f7,Rt,null),e(Rt,DAr),e(Rt,MTe),e(MTe,qAr),e(Rt,OAr),e(Rt,vf),e(vf,GAr),e(vf,ETe),e(ETe,XAr),e(vf,VAr),e(vf,yTe),e(yTe,zAr),e(vf,WAr),e(Rt,QAr),e(Rt,wTe),e(wTe,HAr),e(Rt,UAr),g(m7,Rt,null),e(Nr,JAr),e(Nr,So),g(g7,So,null),e(So,YAr),e(So,ATe),e(ATe,KAr),e(So,ZAr),e(So,$n),e($n,e0r),e($n,LTe),e(LTe,o0r),e($n,r0r),e($n,BTe),e(BTe,t0r),e($n,a0r),e($n,xTe),e(xTe,n0r),e($n,s0r),e(So,l0r),e(So,Te),e(Te,FE),e(FE,kTe),e(kTe,i0r),e(FE,d0r),e(FE,iz),e(iz,c0r),e(FE,f0r),e(Te,m0r),e(Te,CE),e(CE,RTe),e(RTe,g0r),e(CE,h0r),e(CE,dz),e(dz,p0r),e(CE,_0r),e(Te,u0r),e(Te,ME),e(ME,STe),e(STe,b0r),e(ME,v0r),e(ME,cz),e(cz,T0r),e(ME,F0r),e(Te,C0r),e(Te,EE),e(EE,PTe),e(PTe,M0r),e(EE,E0r),e(EE,fz),e(fz,y0r),e(EE,w0r),e(Te,A0r),e(Te,yE),e(yE,$Te),e($Te,L0r),e(yE,B0r),e(yE,mz),e(mz,x0r),e(yE,k0r),e(Te,R0r),e(Te,wE),e(wE,ITe),e(ITe,S0r),e(wE,P0r),e(wE,gz),e(gz,$0r),e(wE,I0r),e(Te,j0r),e(Te,AE),e(AE,jTe),e(jTe,N0r),e(AE,D0r),e(AE,hz),e(hz,q0r),e(AE,O0r),e(Te,G0r),e(Te,LE),e(LE,NTe),e(NTe,X0r),e(LE,V0r),e(LE,pz),e(pz,z0r),e(LE,W0r),e(Te,Q0r),e(Te,BE),e(BE,DTe),e(DTe,H0r),e(BE,U0r),e(BE,_z),e(_z,J0r),e(BE,Y0r),e(Te,K0r),e(Te,xE),e(xE,qTe),e(qTe,Z0r),e(xE,eLr),e(xE,uz),e(uz,oLr),e(xE,rLr),e(So,tLr),e(So,OTe),e(OTe,aLr),e(So,nLr),g(h7,So,null),b(c,BRe,u),b(c,Tf,u),e(Tf,kE),e(kE,GTe),g(p7,GTe,null),e(Tf,sLr),e(Tf,XTe),e(XTe,lLr),b(c,xRe,u),b(c,Dr,u),g(_7,Dr,null),e(Dr,iLr),e(Dr,Ff),e(Ff,dLr),e(Ff,VTe),e(VTe,cLr),e(Ff,fLr),e(Ff,zTe),e(zTe,mLr),e(Ff,gLr),e(Dr,hLr),e(Dr,u7),e(u7,pLr),e(u7,WTe),e(WTe,_Lr),e(u7,uLr),e(Dr,bLr),e(Dr,St),g(b7,St,null),e(St,vLr),e(St,QTe),e(QTe,TLr),e(St,FLr),e(St,Cf),e(Cf,CLr),e(Cf,HTe),e(HTe,MLr),e(Cf,ELr),e(Cf,UTe),e(UTe,yLr),e(Cf,wLr),e(St,ALr),e(St,JTe),e(JTe,LLr),e(St,BLr),g(v7,St,null),e(Dr,xLr),e(Dr,Po),g(T7,Po,null),e(Po,kLr),e(Po,YTe),e(YTe,RLr),e(Po,SLr),e(Po,In),e(In,PLr),e(In,KTe),e(KTe,$Lr),e(In,ILr),e(In,ZTe),e(ZTe,jLr),e(In,NLr),e(In,e1e),e(e1e,DLr),e(In,qLr),e(Po,OLr),e(Po,Se),e(Se,RE),e(RE,o1e),e(o1e,GLr),e(RE,XLr),e(RE,bz),e(bz,VLr),e(RE,zLr),e(Se,WLr),e(Se,SE),e(SE,r1e),e(r1e,QLr),e(SE,HLr),e(SE,vz),e(vz,ULr),e(SE,JLr),e(Se,YLr),e(Se,PE),e(PE,t1e),e(t1e,KLr),e(PE,ZLr),e(PE,Tz),e(Tz,e7r),e(PE,o7r),e(Se,r7r),e(Se,$E),e($E,a1e),e(a1e,t7r),e($E,a7r),e($E,Fz),e(Fz,n7r),e($E,s7r),e(Se,l7r),e(Se,IE),e(IE,n1e),e(n1e,i7r),e(IE,d7r),e(IE,Cz),e(Cz,c7r),e(IE,f7r),e(Se,m7r),e(Se,jE),e(jE,s1e),e(s1e,g7r),e(jE,h7r),e(jE,Mz),e(Mz,p7r),e(jE,_7r),e(Se,u7r),e(Se,NE),e(NE,l1e),e(l1e,b7r),e(NE,v7r),e(NE,Ez),e(Ez,T7r),e(NE,F7r),e(Se,C7r),e(Se,DE),e(DE,i1e),e(i1e,M7r),e(DE,E7r),e(DE,yz),e(yz,y7r),e(DE,w7r),e(Po,A7r),e(Po,d1e),e(d1e,L7r),e(Po,B7r),g(F7,Po,null),b(c,kRe,u),b(c,Mf,u),e(Mf,qE),e(qE,c1e),g(C7,c1e,null),e(Mf,x7r),e(Mf,f1e),e(f1e,k7r),b(c,RRe,u),b(c,qr,u),g(M7,qr,null),e(qr,R7r),e(qr,Ef),e(Ef,S7r),e(Ef,m1e),e(m1e,P7r),e(Ef,$7r),e(Ef,g1e),e(g1e,I7r),e(Ef,j7r),e(qr,N7r),e(qr,E7),e(E7,D7r),e(E7,h1e),e(h1e,q7r),e(E7,O7r),e(qr,G7r),e(qr,Pt),g(y7,Pt,null),e(Pt,X7r),e(Pt,p1e),e(p1e,V7r),e(Pt,z7r),e(Pt,yf),e(yf,W7r),e(yf,_1e),e(_1e,Q7r),e(yf,H7r),e(yf,u1e),e(u1e,U7r),e(yf,J7r),e(Pt,Y7r),e(Pt,b1e),e(b1e,K7r),e(Pt,Z7r),g(w7,Pt,null),e(qr,e8r),e(qr,$o),g(A7,$o,null),e($o,o8r),e($o,v1e),e(v1e,r8r),e($o,t8r),e($o,jn),e(jn,a8r),e(jn,T1e),e(T1e,n8r),e(jn,s8r),e(jn,F1e),e(F1e,l8r),e(jn,i8r),e(jn,C1e),e(C1e,d8r),e(jn,c8r),e($o,f8r),e($o,Pe),e(Pe,OE),e(OE,M1e),e(M1e,m8r),e(OE,g8r),e(OE,wz),e(wz,h8r),e(OE,p8r),e(Pe,_8r),e(Pe,GE),e(GE,E1e),e(E1e,u8r),e(GE,b8r),e(GE,Az),e(Az,v8r),e(GE,T8r),e(Pe,F8r),e(Pe,XE),e(XE,y1e),e(y1e,C8r),e(XE,M8r),e(XE,Lz),e(Lz,E8r),e(XE,y8r),e(Pe,w8r),e(Pe,VE),e(VE,w1e),e(w1e,A8r),e(VE,L8r),e(VE,Bz),e(Bz,B8r),e(VE,x8r),e(Pe,k8r),e(Pe,zE),e(zE,A1e),e(A1e,R8r),e(zE,S8r),e(zE,xz),e(xz,P8r),e(zE,$8r),e(Pe,I8r),e(Pe,WE),e(WE,L1e),e(L1e,j8r),e(WE,N8r),e(WE,kz),e(kz,D8r),e(WE,q8r),e(Pe,O8r),e(Pe,QE),e(QE,B1e),e(B1e,G8r),e(QE,X8r),e(QE,Rz),e(Rz,V8r),e(QE,z8r),e(Pe,W8r),e(Pe,HE),e(HE,x1e),e(x1e,Q8r),e(HE,H8r),e(HE,Sz),e(Sz,U8r),e(HE,J8r),e($o,Y8r),e($o,k1e),e(k1e,K8r),e($o,Z8r),g(L7,$o,null),b(c,SRe,u),b(c,wf,u),e(wf,UE),e(UE,R1e),g(B7,R1e,null),e(wf,e9r),e(wf,S1e),e(S1e,o9r),b(c,PRe,u),b(c,Or,u),g(x7,Or,null),e(Or,r9r),e(Or,Af),e(Af,t9r),e(Af,P1e),e(P1e,a9r),e(Af,n9r),e(Af,$1e),e($1e,s9r),e(Af,l9r),e(Or,i9r),e(Or,k7),e(k7,d9r),e(k7,I1e),e(I1e,c9r),e(k7,f9r),e(Or,m9r),e(Or,$t),g(R7,$t,null),e($t,g9r),e($t,j1e),e(j1e,h9r),e($t,p9r),e($t,Lf),e(Lf,_9r),e(Lf,N1e),e(N1e,u9r),e(Lf,b9r),e(Lf,D1e),e(D1e,v9r),e(Lf,T9r),e($t,F9r),e($t,q1e),e(q1e,C9r),e($t,M9r),g(S7,$t,null),e(Or,E9r),e(Or,Io),g(P7,Io,null),e(Io,y9r),e(Io,O1e),e(O1e,w9r),e(Io,A9r),e(Io,Nn),e(Nn,L9r),e(Nn,G1e),e(G1e,B9r),e(Nn,x9r),e(Nn,X1e),e(X1e,k9r),e(Nn,R9r),e(Nn,V1e),e(V1e,S9r),e(Nn,P9r),e(Io,$9r),e(Io,z1e),e(z1e,JE),e(JE,W1e),e(W1e,I9r),e(JE,j9r),e(JE,Pz),e(Pz,N9r),e(JE,D9r),e(Io,q9r),e(Io,Q1e),e(Q1e,O9r),e(Io,G9r),g($7,Io,null),b(c,$Re,u),b(c,Bf,u),e(Bf,YE),e(YE,H1e),g(I7,H1e,null),e(Bf,X9r),e(Bf,U1e),e(U1e,V9r),b(c,IRe,u),b(c,Gr,u),g(j7,Gr,null),e(Gr,z9r),e(Gr,xf),e(xf,W9r),e(xf,J1e),e(J1e,Q9r),e(xf,H9r),e(xf,Y1e),e(Y1e,U9r),e(xf,J9r),e(Gr,Y9r),e(Gr,N7),e(N7,K9r),e(N7,K1e),e(K1e,Z9r),e(N7,eBr),e(Gr,oBr),e(Gr,It),g(D7,It,null),e(It,rBr),e(It,Z1e),e(Z1e,tBr),e(It,aBr),e(It,kf),e(kf,nBr),e(kf,eFe),e(eFe,sBr),e(kf,lBr),e(kf,oFe),e(oFe,iBr),e(kf,dBr),e(It,cBr),e(It,rFe),e(rFe,fBr),e(It,mBr),g(q7,It,null),e(Gr,gBr),e(Gr,jo),g(O7,jo,null),e(jo,hBr),e(jo,tFe),e(tFe,pBr),e(jo,_Br),e(jo,Dn),e(Dn,uBr),e(Dn,aFe),e(aFe,bBr),e(Dn,vBr),e(Dn,nFe),e(nFe,TBr),e(Dn,FBr),e(Dn,sFe),e(sFe,CBr),e(Dn,MBr),e(jo,EBr),e(jo,G7),e(G7,KE),e(KE,lFe),e(lFe,yBr),e(KE,wBr),e(KE,$z),e($z,ABr),e(KE,LBr),e(G7,BBr),e(G7,ZE),e(ZE,iFe),e(iFe,xBr),e(ZE,kBr),e(ZE,Iz),e(Iz,RBr),e(ZE,SBr),e(jo,PBr),e(jo,dFe),e(dFe,$Br),e(jo,IBr),g(X7,jo,null),b(c,jRe,u),b(c,Rf,u),e(Rf,e5),e(e5,cFe),g(V7,cFe,null),e(Rf,jBr),e(Rf,fFe),e(fFe,NBr),b(c,NRe,u),b(c,Xr,u),g(z7,Xr,null),e(Xr,DBr),e(Xr,Sf),e(Sf,qBr),e(Sf,mFe),e(mFe,OBr),e(Sf,GBr),e(Sf,gFe),e(gFe,XBr),e(Sf,VBr),e(Xr,zBr),e(Xr,W7),e(W7,WBr),e(W7,hFe),e(hFe,QBr),e(W7,HBr),e(Xr,UBr),e(Xr,jt),g(Q7,jt,null),e(jt,JBr),e(jt,pFe),e(pFe,YBr),e(jt,KBr),e(jt,Pf),e(Pf,ZBr),e(Pf,_Fe),e(_Fe,exr),e(Pf,oxr),e(Pf,uFe),e(uFe,rxr),e(Pf,txr),e(jt,axr),e(jt,bFe),e(bFe,nxr),e(jt,sxr),g(H7,jt,null),e(Xr,lxr),e(Xr,No),g(U7,No,null),e(No,ixr),e(No,vFe),e(vFe,dxr),e(No,cxr),e(No,qn),e(qn,fxr),e(qn,TFe),e(TFe,mxr),e(qn,gxr),e(qn,FFe),e(FFe,hxr),e(qn,pxr),e(qn,CFe),e(CFe,_xr),e(qn,uxr),e(No,bxr),e(No,MFe),e(MFe,o5),e(o5,EFe),e(EFe,vxr),e(o5,Txr),e(o5,jz),e(jz,Fxr),e(o5,Cxr),e(No,Mxr),e(No,yFe),e(yFe,Exr),e(No,yxr),g(J7,No,null),DRe=!0},p(c,[u]){const Y7={};u&2&&(Y7.$$scope={dirty:u,ctx:c}),Of.$set(Y7);const wFe={};u&2&&(wFe.$$scope={dirty:u,ctx:c}),Lh.$set(wFe);const AFe={};u&2&&(AFe.$$scope={dirty:u,ctx:c}),Dh.$set(AFe)},i(c){DRe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(Of.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(yy.$$.fragment,c),h(Lh.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(Ry.$$.fragment,c),h(Dh.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(qy.$$.fragment,c),h(Oy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(jw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Ow.$$.fragment,c),h(Gw.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(j6.$$.fragment,c),h(N6.$$.fragment,c),h(D6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(qA.$$.fragment,c),h(OA.$$.fragment,c),h(GA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(j0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(jL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(qL.$$.fragment,c),h(OL.$$.fragment,c),h(GL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(v7.$$.fragment,c),h(T7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(y7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(R7.$$.fragment,c),h(S7.$$.fragment,c),h(P7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(j7.$$.fragment,c),h(D7.$$.fragment,c),h(q7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(V7.$$.fragment,c),h(z7.$$.fragment,c),h(Q7.$$.fragment,c),h(H7.$$.fragment,c),h(U7.$$.fragment,c),h(J7.$$.fragment,c),DRe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(Of.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(yy.$$.fragment,c),p(Lh.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(Ry.$$.fragment,c),p(Dh.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(qy.$$.fragment,c),p(Oy.$$.fragment,c),p(Gy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(jw.$$.fragment,c),p(Nw.$$.fragment,c),p(qw.$$.fragment,c),p(Ow.$$.fragment,c),p(Gw.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(F6.$$.fragment,c),p(C6.$$.fragment,c),p(M6.$$.fragment,c),p(E6.$$.fragment,c),p(y6.$$.fragment,c),p(w6.$$.fragment,c),p(L6.$$.fragment,c),p(B6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(R6.$$.fragment,c),p(S6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(j6.$$.fragment,c),p(N6.$$.fragment,c),p(D6.$$.fragment,c),p(q6.$$.fragment,c),p(G6.$$.fragment,c),p(X6.$$.fragment,c),p(V6.$$.fragment,c),p(W6.$$.fragment,c),p(Q6.$$.fragment,c),p(H6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(qA.$$.fragment,c),p(OA.$$.fragment,c),p(GA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(j0.$$.fragment,c),p(N0.$$.fragment,c),p(D0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(jL.$$.fragment,c),p(NL.$$.fragment,c),p(DL.$$.fragment,c),p(qL.$$.fragment,c),p(OL.$$.fragment,c),p(GL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(b7.$$.fragment,c),p(v7.$$.fragment,c),p(T7.$$.fragment,c),p(F7.$$.fragment,c),p(C7.$$.fragment,c),p(M7.$$.fragment,c),p(y7.$$.fragment,c),p(w7.$$.fragment,c),p(A7.$$.fragment,c),p(L7.$$.fragment,c),p(B7.$$.fragment,c),p(x7.$$.fragment,c),p(R7.$$.fragment,c),p(S7.$$.fragment,c),p(P7.$$.fragment,c),p($7.$$.fragment,c),p(I7.$$.fragment,c),p(j7.$$.fragment,c),p(D7.$$.fragment,c),p(q7.$$.fragment,c),p(O7.$$.fragment,c),p(X7.$$.fragment,c),p(V7.$$.fragment,c),p(z7.$$.fragment,c),p(Q7.$$.fragment,c),p(H7.$$.fragment,c),p(U7.$$.fragment,c),p(J7.$$.fragment,c),DRe=!1},d(c){t(J),c&&t($e),c&&t(de),_(fe),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(Nf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Oa),c&&t(Nxe),c&&t(Vi),_(ny),c&&t(Dxe),c&&t(zn),c&&t(qxe),_(sy,c),c&&t(Oxe),c&&t(Z8),c&&t(Gxe),_(Of,c),c&&t(Xxe),c&&t(zi),_(ly),c&&t(Vxe),c&&t(Wo),_(iy),_(fy),_(my),_(gy),c&&t(zxe),c&&t(Qi),_(hy),c&&t(Wxe),c&&t(Qo),_(py),_(by),_(vy),_(Ty),c&&t(Qxe),c&&t(Hi),_(Fy),c&&t(Hxe),c&&t(Ho),_(Cy),_(yy),_(Lh),_(wy),_(Ay),c&&t(Uxe),c&&t(Ui),_(Ly),c&&t(Jxe),c&&t(Uo),_(By),_(Ry),_(Dh),_(Sy),_(Py),c&&t(Yxe),c&&t(Yi),_($y),c&&t(Kxe),c&&t(Jo),_(Iy),_(Ny),_(Dy),_(qy),_(Oy),c&&t(Zxe),c&&t(ed),_(Gy),c&&t(eke),c&&t(Yo),_(Xy),_(zy),_(Wy),_(Qy),_(Hy),c&&t(oke),c&&t(td),_(Uy),c&&t(rke),c&&t(Ko),_(Jy),_(Ky),_(Zy),_(ew),_(ow),c&&t(tke),c&&t(sd),_(rw),c&&t(ake),c&&t(Zo),_(tw),_(nw),_(sw),_(lw),_(iw),c&&t(nke),c&&t(dd),_(dw),c&&t(ske),c&&t(er),_(cw),_(mw),_(gw),_(hw),_(pw),c&&t(lke),c&&t(md),_(_w),c&&t(ike),c&&t(or),_(uw),_(vw),_(Tw),_(Fw),_(Cw),c&&t(dke),c&&t(pd),_(Mw),c&&t(cke),c&&t(rr),_(Ew),_(ww),_(Aw),_(Lw),_(Bw),c&&t(fke),c&&t(bd),_(xw),c&&t(mke),c&&t(tr),_(kw),_(Sw),_(Pw),_($w),_(Iw),c&&t(gke),c&&t(Fd),_(jw),c&&t(hke),c&&t(ar),_(Nw),_(qw),_(Ow),_(Gw),_(Xw),c&&t(pke),c&&t(Ed),_(Vw),c&&t(_ke),c&&t(nr),_(zw),_(Qw),_(Hw),_(Uw),_(Jw),c&&t(uke),c&&t(Ad),_(Yw),c&&t(bke),c&&t(sr),_(Kw),_(e6),_(o6),_(r6),_(t6),c&&t(vke),c&&t(xd),_(a6),c&&t(Tke),c&&t(lr),_(n6),_(l6),_(i6),_(d6),_(c6),c&&t(Fke),c&&t(Sd),_(f6),c&&t(Cke),c&&t(ir),_(m6),_(h6),_(p6),_(_6),_(u6),c&&t(Mke),c&&t(Id),_(b6),c&&t(Eke),c&&t(dr),_(v6),_(F6),_(C6),_(M6),_(E6),c&&t(yke),c&&t(Dd),_(y6),c&&t(wke),c&&t(cr),_(w6),_(L6),_(B6),_(x6),_(k6),c&&t(Ake),c&&t(Gd),_(R6),c&&t(Lke),c&&t(fr),_(S6),_($6),_(I6),_(j6),_(N6),c&&t(Bke),c&&t(zd),_(D6),c&&t(xke),c&&t(mr),_(q6),_(G6),_(X6),_(V6),_(W6),c&&t(kke),c&&t(Hd),_(Q6),c&&t(Rke),c&&t(gr),_(H6),_(J6),_(Y6),_(K6),_(Z6),c&&t(Ske),c&&t(Yd),_(eA),c&&t(Pke),c&&t(hr),_(oA),_(tA),_(aA),_(nA),_(sA),c&&t($ke),c&&t(oc),_(lA),c&&t(Ike),c&&t(pr),_(iA),_(cA),_(fA),_(mA),_(gA),c&&t(jke),c&&t(ac),_(hA),c&&t(Nke),c&&t(_r),_(pA),_(uA),_(bA),_(vA),_(TA),c&&t(Dke),c&&t(lc),_(FA),c&&t(qke),c&&t(ur),_(CA),_(EA),_(yA),_(wA),_(LA),c&&t(Oke),c&&t(cc),_(BA),c&&t(Gke),c&&t(br),_(xA),_(RA),_(SA),_(PA),_($A),c&&t(Xke),c&&t(gc),_(IA),c&&t(Vke),c&&t(vr),_(jA),_(DA),_(qA),_(OA),_(GA),c&&t(zke),c&&t(_c),_(XA),c&&t(Wke),c&&t(Tr),_(VA),_(WA),_(QA),_(HA),_(UA),c&&t(Qke),c&&t(vc),_(JA),c&&t(Hke),c&&t(Fr),_(YA),_(ZA),_(e0),_(o0),_(r0),c&&t(Uke),c&&t(Cc),_(t0),c&&t(Jke),c&&t(Cr),_(a0),_(s0),_(l0),_(i0),_(c0),c&&t(Yke),c&&t(yc),_(f0),c&&t(Kke),c&&t(Mr),_(m0),_(h0),_(p0),_(_0),_(u0),c&&t(Zke),c&&t(Lc),_(b0),c&&t(eRe),c&&t(Er),_(v0),_(F0),_(C0),_(M0),_(E0),c&&t(oRe),c&&t(kc),_(y0),c&&t(rRe),c&&t(yr),_(w0),_(L0),_(B0),_(x0),_(k0),c&&t(tRe),c&&t(Pc),_(R0),c&&t(aRe),c&&t(wr),_(S0),_($0),_(I0),_(j0),_(N0),c&&t(nRe),c&&t(jc),_(D0),c&&t(sRe),c&&t(Ar),_(q0),_(G0),_(X0),_(V0),_(z0),c&&t(lRe),c&&t(qc),_(W0),c&&t(iRe),c&&t(Lr),_(Q0),_(U0),_(J0),_(Y0),_(K0),c&&t(dRe),c&&t(Xc),_(Z0),c&&t(cRe),c&&t(Br),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(fRe),c&&t(Wc),_(sL),c&&t(mRe),c&&t(xr),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(gRe),c&&t(Uc),_(gL),c&&t(hRe),c&&t(kr),_(hL),_(_L),_(uL),_(bL),_(vL),c&&t(pRe),c&&t(Kc),_(TL),c&&t(_Re),c&&t(Rr),_(FL),_(ML),_(EL),_(yL),_(wL),c&&t(uRe),c&&t(of),_(AL),c&&t(bRe),c&&t(Sr),_(LL),_(xL),_(kL),_(RL),_(SL),c&&t(vRe),c&&t(af),_(PL),c&&t(TRe),c&&t(Pr),_($L),_(jL),_(NL),_(DL),_(qL),c&&t(FRe),c&&t(lf),_(OL),c&&t(CRe),c&&t($r),_(GL),_(VL),_(zL),_(WL),_(QL),c&&t(MRe),c&&t(ff),_(HL),c&&t(ERe),c&&t(Ir),_(UL),_(YL),_(KL),_(ZL),_(e7),c&&t(yRe),c&&t(hf),_(o7),c&&t(wRe),c&&t(jr),_(r7),_(a7),_(n7),_(s7),_(l7),c&&t(ARe),c&&t(uf),_(i7),c&&t(LRe),c&&t(Nr),_(d7),_(f7),_(m7),_(g7),_(h7),c&&t(BRe),c&&t(Tf),_(p7),c&&t(xRe),c&&t(Dr),_(_7),_(b7),_(v7),_(T7),_(F7),c&&t(kRe),c&&t(Mf),_(C7),c&&t(RRe),c&&t(qr),_(M7),_(y7),_(w7),_(A7),_(L7),c&&t(SRe),c&&t(wf),_(B7),c&&t(PRe),c&&t(Or),_(x7),_(R7),_(S7),_(P7),_($7),c&&t($Re),c&&t(Bf),_(I7),c&&t(IRe),c&&t(Gr),_(j7),_(D7),_(q7),_(O7),_(X7),c&&t(jRe),c&&t(Rf),_(V7),c&&t(NRe),c&&t(Xr),_(z7),_(Q7),_(H7),_(U7),_(J7)}}}const MMt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function EMt(Ii,J,$e){let{fw:de}=J;return Ii.$$set=pe=>{"fw"in pe&&$e(0,de=pe.fw)},[de]}class xMt extends pMt{constructor(J){super();_Mt(this,J,EMt,CMt,uMt,{fw:0})}}export{xMt as default,MMt as metadata};
