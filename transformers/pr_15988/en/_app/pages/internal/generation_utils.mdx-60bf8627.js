import{S as kk,i as wk,s as Lk,e as o,k as c,w as m,t as a,M as xk,c as n,d as r,m as l,a as s,x as h,h as i,b as d,F as t,g as f,y as g,L as Ek,q as u,o as _,B as v}from"../../chunks/vendor-4833417e.js";import{D as b}from"../../chunks/Docstring-7b52c3d4.js";import{C as p$}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as qe}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function Pk(yf){let Be,qn,N,H,Oi,Zt,kf,qi,wf,Jl,y,Lf,Bn,xf,Ef,Bi,Pf,Ff,Ii,Df,zf,Ci,Sf,Of,Ai,qf,Bf,Ni,If,Cf,Wi,Af,Ql,In,Nf,Zl,Ge,ft,Vi,er,Wf,Mi,Vf,ed,W,Mf,Cn,Gf,jf,An,Hf,Rf,Nn,Kf,Uf,td,Wn,Yf,rd,tr,od,Ie,Xf,Gi,Jf,Qf,Vn,Zf,em,nd,V,Mn,ji,tm,rm,om,Gn,Hi,nm,sm,am,jn,Ri,im,cm,lm,Hn,Ki,dm,pm,sd,k,fm,Ui,mm,hm,Yi,gm,um,Xi,_m,vm,Ji,bm,$m,Qi,Tm,ym,Zi,km,wm,ad,F,Lm,ec,xm,Em,tc,Pm,Fm,rc,Dm,zm,oc,Sm,Om,id,D,qm,nc,Bm,Im,sc,Cm,Am,ac,Nm,Wm,ic,Vm,Mm,cd,rr,ld,mt,Gm,cc,jm,Hm,dd,z,Rm,lc,Km,Um,dc,Ym,Xm,pc,Jm,Qm,fc,Zm,eh,pd,Rn,th,fd,je,ht,mc,or,rh,hc,oh,md,He,nr,nh,gc,sh,hd,Re,sr,ah,uc,ih,gd,R,ar,ch,_c,lh,dh,gt,ir,ph,vc,fh,ud,Ke,ut,bc,cr,mh,$c,hh,_d,Ue,lr,gh,Tc,uh,vd,Ye,dr,_h,yc,vh,bd,K,pr,bh,kc,$h,Th,_t,fr,yh,wc,kh,$d,Xe,vt,Lc,mr,wh,xc,Lh,Td,Je,hr,xh,Ec,Eh,yd,Qe,gr,Ph,Pc,Fh,kd,Ze,bt,Fc,ur,Dh,Dc,zh,wd,et,_r,Sh,zc,Oh,Ld,tt,vr,qh,Sc,Bh,xd,rt,$t,Oc,br,Ih,qc,Ch,Ed,Tt,Ah,Kn,Nh,Wh,Pd,U,$r,Vh,Bc,Mh,Gh,yt,Tr,jh,Ic,Hh,Fd,Y,yr,Rh,w,Kh,Un,Uh,Yh,Yn,Xh,Jh,Cc,Qh,Zh,Ac,Nc,eg,tg,Xn,rg,og,Jn,ng,sg,ag,Qn,kr,Dd,X,wr,ig,Wc,cg,lg,kt,Lr,dg,Vc,pg,zd,J,xr,fg,Zn,es,mg,hg,gg,ts,Er,Sd,Q,Pr,ug,rs,os,_g,vg,bg,ns,Fr,Od,Z,Dr,$g,ss,as,Tg,yg,kg,is,zr,qd,ee,Sr,wg,cs,ls,Lg,xg,Eg,ds,Or,Bd,te,qr,Pg,ps,fs,Fg,Dg,zg,ms,Br,Id,re,Ir,Sg,wt,hs,Og,qg,Cr,Bg,Ig,Cg,gs,Ar,Cd,oe,Nr,Ag,us,_s,Ng,Wg,Vg,vs,Wr,Ad,ne,Vr,Mg,Lt,bs,Gg,jg,Mr,Hg,Rg,Kg,$s,Gr,Nd,se,jr,Ug,Ce,Ts,Yg,Xg,Mc,Jg,Qg,Hr,Zg,eu,tu,ys,Rr,Wd,ae,Kr,ru,ks,ws,ou,nu,su,Ls,Ur,Vd,ie,Yr,au,xt,xs,iu,cu,Gc,lu,du,pu,Es,Xr,Md,ce,Jr,fu,M,Ps,mu,hu,jc,gu,uu,Hc,_u,vu,Rc,bu,$u,Tu,Fs,Qr,Gd,le,Zr,yu,Kc,ku,wu,Et,eo,Lu,Uc,xu,jd,de,to,Eu,B,Pu,Ds,Fu,Du,Yc,zu,Su,Xc,Jc,Ou,qu,zs,Bu,Iu,Cu,Ss,ro,Hd,pe,oo,Au,Qc,Nu,Wu,Pt,no,Vu,Zc,Mu,Rd,fe,so,Gu,Os,qs,ju,Hu,Ru,Bs,ao,Kd,me,io,Ku,Is,Cs,Uu,Yu,Xu,As,co,Ud,he,lo,Ju,Ns,Ws,Qu,Zu,e_,Vs,po,Yd,ge,fo,t_,Ms,Gs,r_,o_,n_,js,mo,Xd,ue,ho,s_,Hs,Rs,a_,i_,c_,Ks,go,Jd,_e,uo,l_,Ft,Us,d_,p_,_o,f_,m_,h_,Ys,vo,Qd,ve,bo,g_,Xs,Js,u_,__,v_,Qs,$o,Zd,be,To,b_,el,$_,T_,Dt,yo,y_,tl,k_,ep,$e,ko,w_,L,L_,Zs,x_,E_,ea,P_,F_,rl,D_,z_,ol,nl,S_,O_,ta,q_,B_,ra,I_,C_,A_,oa,wo,tp,Te,Lo,N_,sl,W_,V_,zt,xo,M_,al,G_,rp,ye,Eo,j_,na,sa,H_,R_,K_,aa,Po,op,ke,Fo,U_,ia,ca,Y_,X_,J_,la,Do,np,we,zo,Q_,da,pa,Z_,ev,tv,fa,So,sp,Le,Oo,rv,ma,ha,ov,nv,sv,ga,qo,ap,xe,Bo,av,St,ua,iv,cv,il,lv,dv,pv,_a,Io,ip,Ee,Co,fv,va,ba,mv,hv,gv,$a,Ao,cp,ot,Ot,cl,No,uv,ll,_v,lp,qt,vv,Ta,bv,$v,dp,Pe,Wo,Tv,dl,yv,kv,ya,Vo,pp,nt,Mo,wv,ka,Go,fp,Fe,jo,Lv,Ho,xv,pl,Ev,Pv,Fv,wa,Ro,mp,De,Ko,Dv,Uo,zv,fl,Sv,Ov,qv,La,Yo,hp,st,Bt,ml,Xo,Bv,hl,Iv,gp,It,Cv,xa,Av,Nv,up,$,Jo,Wv,gl,Vv,Mv,ul,Gv,jv,Qo,Hv,_l,Rv,Kv,Ct,Zo,Uv,vl,Yv,Xv,At,en,Jv,bl,Qv,Zv,Nt,tn,eb,$l,tb,rb,Wt,rn,ob,on,nb,Tl,sb,ab,ib,Vt,nn,cb,yl,lb,db,Mt,sn,pb,kl,fb,mb,Ae,an,hb,cn,gb,wl,ub,_b,vb,Ll,bb,_p,at,ln,$b,Ea,Pa,Tb,yb,vp,it,dn,kb,pn,wb,Fa,Lb,xb,bp,I,fn,Eb,xl,Pb,Fb,E,mn,Db,El,zb,Sb,ct,Ob,Pl,qb,Bb,Fl,Ib,Cb,Ab,Dl,zl,Nb,Wb,ze,Vb,Sl,Mb,Gb,Ol,jb,Hb,ql,Rb,Kb,Ub,Bl,Yb,Xb,Gt,hn,Jb,Il,Qb,$p,lt,jt,Cl,gn,Zb,Al,e1,Tp,C,un,t1,Ht,r1,Nl,o1,n1,Wl,s1,a1,Da,_n,i1,za,vn,yp,x,bn,c1,Sa,Oa,l1,d1,p1,$n,f1,Tn,m1,h1,g1,qa,u1,yn,_1,v1,Ba,kn,b1,Ia,wn,kp,A,Ln,$1,Ca,Aa,T1,y1,k1,Na,xn,w1,Wa,En,wp,dt,Rt,Vl,Pn,L1,Ml,x1,Lp,Se,Fn,E1,Gl,P1,F1,Va,D1,Dn,z1,xp,Oe,zn,S1,jl,O1,q1,Ma,B1,Sn,I1,Ep;return Zt=new qe({}),er=new qe({}),tr=new p$({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),rr=new p$({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),or=new qe({}),nr=new b({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_utils.py#L61",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),sr=new b({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_utils.py#L89",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),ar=new b({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_utils.py#L45",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),ir=new b({props:{name:"replace",anchor:"None",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/flax/struct.py#L120"}}),cr=new qe({}),lr=new b({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_utils.py#L131",parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),dr=new b({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_utils.py#L160",parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),pr=new b({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_utils.py#L59",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),fr=new b({props:{name:"replace",anchor:"None",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/flax/struct.py#L120"}}),mr=new qe({}),hr=new b({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_utils.py#L203",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),gr=new b({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_utils.py#L238",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),ur=new qe({}),_r=new b({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_utils.py#L289",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),vr=new b({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_utils.py#L324",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),br=new qe({}),$r=new b({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L51"}}),Tr=new b({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L54",parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),yr=new b({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L73"}}),kr=new b({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L80",parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),wr=new b({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L62"}}),Lr=new b({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L65",parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),xr=new b({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L96",parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Er=new b({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L117"}}),Pr=new b({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L124",parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),Fr=new b({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L139"}}),Dr=new b({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L144",parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}]}}),zr=new b({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L160"}}),Sr=new b({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L170",parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Or=new b({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L193"}}),qr=new b({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L212",parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Br=new b({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L233"}}),Ir=new b({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L309",parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}]}}),Ar=new b({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L324"}}),Nr=new b({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L376",parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Wr=new b({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L418"}}),Vr=new b({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L504"}}),Gr=new b({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L521"}}),jr=new b({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L530",parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),Rr=new b({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L561"}}),Kr=new b({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L590",parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),Ur=new b({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L602"}}),Yr=new b({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L611",parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),Xr=new b({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L626"}}),Jr=new b({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L635"}}),Qr=new b({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_logits_process.py#L642"}}),Zr=new b({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L50"}}),eo=new b({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L53",parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),to=new b({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L72"}}),ro=new b({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L79",parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),oo=new b({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L61"}}),no=new b({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L64",parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),so=new b({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L95",parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),ao=new b({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L110"}}),io=new b({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L144",parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),co=new b({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L166"}}),lo=new b({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L115",parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),po=new b({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L136"}}),fo=new b({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L198",parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),mo=new b({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L219"}}),ho=new b({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L271",parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),go=new b({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L334"}}),uo=new b({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L354",parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}]}}),vo=new b({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L392"}}),bo=new b({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L233",parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}]}}),$o=new b({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_logits_process.py#L262"}}),To=new b({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L50"}}),yo=new b({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L53",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),ko=new b({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L72"}}),wo=new b({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L79",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Lo=new b({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L61"}}),xo=new b({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L64",parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Eo=new b({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L95",parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),Po=new b({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L110"}}),Fo=new b({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L115",parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Do=new b({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L137"}}),zo=new b({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L156",parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),So=new b({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L177"}}),Oo=new b({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L192",parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),qo=new b({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L204"}}),Bo=new b({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L216",parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),Io=new b({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L231"}}),Co=new b({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L243",parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Ao=new b({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_flax_logits_process.py#L264"}}),No=new qe({}),Wo=new b({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_stopping_criteria.py#L33"}}),Vo=new b({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_stopping_criteria.py#L36",parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Mo=new b({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_stopping_criteria.py#L110"}}),Go=new b({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_stopping_criteria.py#L111",parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),jo=new b({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_stopping_criteria.py#L41",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}]}}),Ro=new b({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_stopping_criteria.py#L54",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Ko=new b({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_stopping_criteria.py#L88",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}]}}),Yo=new b({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_stopping_criteria.py#L105",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15988/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Xo=new qe({}),Jo=new b({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L5"}}),Qo=new p$({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),Zo=new b({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L48",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),en=new b({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L113",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),tn=new b({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L60"}}),rn=new b({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L104"}}),nn=new b({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L94"}}),sn=new b({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L24"}}),an=new b({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L69",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.</p>
<p>Whether this constraint has been completely fulfilled by this token being generated.</p>
<p>Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>reset (<code>bool</code>)</p>
`}}),ln=new b({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L129",parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}]}}),dn=new b({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L260",parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}]}}),fn=new b({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L349",parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/pr_15988/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}]}}),mn=new b({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L381"}}),hn=new b({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_constraints.py#L416"}}),gn=new qe({}),un=new b({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_search.py#L88"}}),_n=new b({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_search.py#L94",parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_15988/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),vn=new b({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_search.py#L106",parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_15988/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`}}),bn=new b({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_search.py#L120",parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),kn=new b({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_search.py#L206"}}),wn=new b({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_search.py#L291"}}),Ln=new b({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_search.py#L356",parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/pr_15988/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),xn=new b({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_search.py#L450",parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_15988/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_15988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),En=new b({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_beam_search.py#L725"}}),Pn=new qe({}),Fn=new b({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_utils.py#L3218",parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),zn=new b({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_15988/src/transformers/generation_tf_utils.py#L2270",parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),{c(){Be=o("meta"),qn=c(),N=o("h1"),H=o("a"),Oi=o("span"),m(Zt.$$.fragment),kf=c(),qi=o("span"),wf=a("Utilities for Generation"),Jl=c(),y=o("p"),Lf=a("This page lists all the utility functions used by "),Bn=o("a"),xf=a("generate()"),Ef=a(`,
`),Bi=o("code"),Pf=a("greedy_search()"),Ff=c(),Ii=o("code"),Df=a("sample()"),zf=c(),Ci=o("code"),Sf=a("beam_search()"),Of=c(),Ai=o("code"),qf=a("beam_sample()"),Bf=c(),Ni=o("code"),If=a("group_beam_search()"),Cf=a(` and
`),Wi=o("code"),Af=a("constrained_beam_search()"),Ql=c(),In=o("p"),Nf=a("Most of those are only useful if you are studying the code of the generate methods in the library."),Zl=c(),Ge=o("h2"),ft=o("a"),Vi=o("span"),m(er.$$.fragment),Wf=c(),Mi=o("span"),Vf=a("Generate Outputs"),ed=c(),W=o("p"),Mf=a("The output of "),Cn=o("a"),Gf=a("generate()"),jf=a(` is an instance of a subclass of
`),An=o("a"),Hf=a("ModelOutput"),Rf=a(`. This output is a data structure containing all the information returned
by `),Nn=o("a"),Kf=a("generate()"),Uf=a(", but that can also be used as tuple or dictionary."),td=c(),Wn=o("p"),Yf=a("Here\u2019s an example:"),rd=c(),m(tr.$$.fragment),od=c(),Ie=o("p"),Xf=a("The "),Gi=o("code"),Jf=a("generation_output"),Qf=a(" object is a "),Vn=o("a"),Zf=a("GreedySearchDecoderOnlyOutput"),em=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),nd=c(),V=o("ul"),Mn=o("li"),ji=o("code"),tm=a("sequences"),rm=a(": the generated sequences of tokens"),om=c(),Gn=o("li"),Hi=o("code"),nm=a("scores"),sm=a(" (optional): the prediction scores of the language modelling head, for each generation step"),am=c(),jn=o("li"),Ri=o("code"),im=a("hidden_states"),cm=a(" (optional): the hidden states of the model, for each generation step"),lm=c(),Hn=o("li"),Ki=o("code"),dm=a("attentions"),pm=a(" (optional): the attention weights of the model, for each generation step"),sd=c(),k=o("p"),fm=a("Here we have the "),Ui=o("code"),mm=a("scores"),hm=a(" since we passed along "),Yi=o("code"),gm=a("output_scores=True"),um=a(", but we don\u2019t have "),Xi=o("code"),_m=a("hidden_states"),vm=a(` and
`),Ji=o("code"),bm=a("attentions"),$m=a(" because we didn\u2019t pass "),Qi=o("code"),Tm=a("output_hidden_states=True"),ym=a(" or "),Zi=o("code"),km=a("output_attentions=True"),wm=a("."),ad=c(),F=o("p"),Lm=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),ec=o("code"),xm=a("None"),Em=a(". Here for instance "),tc=o("code"),Pm=a("generation_output.scores"),Fm=a(` are all the generated prediction scores of the
language modeling head, and `),rc=o("code"),Dm=a("generation_output.attentions"),zm=a(" is "),oc=o("code"),Sm=a("None"),Om=a("."),id=c(),D=o("p"),qm=a("When using our "),nc=o("code"),Bm=a("generation_output"),Im=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),sc=o("code"),Cm=a("None"),Am=a(` values.
Here, for instance, it has two elements, `),ac=o("code"),Nm=a("loss"),Wm=a(" then "),ic=o("code"),Vm=a("logits"),Mm=a(", so"),cd=c(),m(rr.$$.fragment),ld=c(),mt=o("p"),Gm=a("will return the tuple "),cc=o("code"),jm=a("(generation_output.sequences, generation_output.scores)"),Hm=a(" for instance."),dd=c(),z=o("p"),Rm=a("When using our "),lc=o("code"),Km=a("generation_output"),Um=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),dc=o("code"),Ym=a("None"),Xm=a(`
values. Here, for instance, it has two keys that are `),pc=o("code"),Jm=a("sequences"),Qm=a(" and "),fc=o("code"),Zm=a("scores"),eh=a("."),pd=c(),Rn=o("p"),th=a("We document here all output types."),fd=c(),je=o("h3"),ht=o("a"),mc=o("span"),m(or.$$.fragment),rh=c(),hc=o("span"),oh=a("GreedySearchOutput"),md=c(),He=o("div"),m(nr.$$.fragment),nh=c(),gc=o("p"),sh=a("Base class for outputs of decoder-only generation models using greedy search."),hd=c(),Re=o("div"),m(sr.$$.fragment),ah=c(),uc=o("p"),ih=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),gd=c(),R=o("div"),m(ar.$$.fragment),ch=c(),_c=o("p"),lh=a("Flax Base class for outputs of decoder-only generation models using greedy search."),dh=c(),gt=o("div"),m(ir.$$.fragment),ph=c(),vc=o("p"),fh=a("\u201CReturns a new object replacing the specified fields with new values."),ud=c(),Ke=o("h3"),ut=o("a"),bc=o("span"),m(cr.$$.fragment),mh=c(),$c=o("span"),hh=a("SampleOutput"),_d=c(),Ue=o("div"),m(lr.$$.fragment),gh=c(),Tc=o("p"),uh=a("Base class for outputs of decoder-only generation models using sampling."),vd=c(),Ye=o("div"),m(dr.$$.fragment),_h=c(),yc=o("p"),vh=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),bd=c(),K=o("div"),m(pr.$$.fragment),bh=c(),kc=o("p"),$h=a("Flax Base class for outputs of decoder-only generation models using sampling."),Th=c(),_t=o("div"),m(fr.$$.fragment),yh=c(),wc=o("p"),kh=a("\u201CReturns a new object replacing the specified fields with new values."),$d=c(),Xe=o("h3"),vt=o("a"),Lc=o("span"),m(mr.$$.fragment),wh=c(),xc=o("span"),Lh=a("BeamSearchOutput"),Td=c(),Je=o("div"),m(hr.$$.fragment),xh=c(),Ec=o("p"),Eh=a("Base class for outputs of decoder-only generation models using beam search."),yd=c(),Qe=o("div"),m(gr.$$.fragment),Ph=c(),Pc=o("p"),Fh=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),kd=c(),Ze=o("h3"),bt=o("a"),Fc=o("span"),m(ur.$$.fragment),Dh=c(),Dc=o("span"),zh=a("BeamSampleOutput"),wd=c(),et=o("div"),m(_r.$$.fragment),Sh=c(),zc=o("p"),Oh=a("Base class for outputs of decoder-only generation models using beam sample."),Ld=c(),tt=o("div"),m(vr.$$.fragment),qh=c(),Sc=o("p"),Bh=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),xd=c(),rt=o("h2"),$t=o("a"),Oc=o("span"),m(br.$$.fragment),Ih=c(),qc=o("span"),Ch=a("LogitsProcessor"),Ed=c(),Tt=o("p"),Ah=a("A "),Kn=o("a"),Nh=a("LogitsProcessor"),Wh=a(` can be used to modify the prediction scores of a language model head for
generation.`),Pd=c(),U=o("div"),m($r.$$.fragment),Vh=c(),Bc=o("p"),Mh=a("Abstract base class for all logit processors that can be applied during generation."),Gh=c(),yt=o("div"),m(Tr.$$.fragment),jh=c(),Ic=o("p"),Hh=a("Torch method for processing logits."),Fd=c(),Y=o("div"),m(yr.$$.fragment),Rh=c(),w=o("p"),Kh=a("This class can be used to create a list of "),Un=o("a"),Uh=a("LogitsProcessor"),Yh=a(" or "),Yn=o("a"),Xh=a("LogitsWarper"),Jh=a(` to subsequently process a
`),Cc=o("code"),Qh=a("scores"),Zh=a(" input tensor. This class inherits from list and adds a specific "),Ac=o("em"),Nc=o("strong"),eg=a("call"),tg=a(` method to apply each
`),Xn=o("a"),rg=a("LogitsProcessor"),og=a(" or "),Jn=o("a"),ng=a("LogitsWarper"),sg=a(" to the inputs."),ag=c(),Qn=o("div"),m(kr.$$.fragment),Dd=c(),X=o("div"),m(wr.$$.fragment),ig=c(),Wc=o("p"),cg=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),lg=c(),kt=o("div"),m(Lr.$$.fragment),dg=c(),Vc=o("p"),pg=a("Torch method for warping logits."),zd=c(),J=o("div"),m(xr.$$.fragment),fg=c(),Zn=o("p"),es=o("a"),mg=a("LogitsProcessor"),hg=a(" enforcing a min-length by setting EOS probability to 0."),gg=c(),ts=o("div"),m(Er.$$.fragment),Sd=c(),Q=o("div"),m(Pr.$$.fragment),ug=c(),rs=o("p"),os=o("a"),_g=a("LogitsWarper"),vg=a(" for temperature (exponential scaling output probability distribution)."),bg=c(),ns=o("div"),m(Fr.$$.fragment),Od=c(),Z=o("div"),m(Dr.$$.fragment),$g=c(),ss=o("p"),as=o("a"),Tg=a("LogitsProcessor"),yg=a(" enforcing an exponential penalty on repeated sequences."),kg=c(),is=o("div"),m(zr.$$.fragment),qd=c(),ee=o("div"),m(Sr.$$.fragment),wg=c(),cs=o("p"),ls=o("a"),Lg=a("LogitsWarper"),xg=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Eg=c(),ds=o("div"),m(Or.$$.fragment),Bd=c(),te=o("div"),m(qr.$$.fragment),Pg=c(),ps=o("p"),fs=o("a"),Fg=a("LogitsWarper"),Dg=a(" that performs top-k, i.e. restricting to the k highest probability elements."),zg=c(),ms=o("div"),m(Br.$$.fragment),Id=c(),re=o("div"),m(Ir.$$.fragment),Sg=c(),wt=o("p"),hs=o("a"),Og=a("LogitsProcessor"),qg=a(` that enforces no repetition of n-grams. See
`),Cr=o("a"),Bg=a("Fairseq"),Ig=a("."),Cg=c(),gs=o("div"),m(Ar.$$.fragment),Cd=c(),oe=o("div"),m(Nr.$$.fragment),Ag=c(),us=o("p"),_s=o("a"),Ng=a("LogitsProcessor"),Wg=a(" that enforces that specified sequences will never be sampled."),Vg=c(),vs=o("div"),m(Wr.$$.fragment),Ad=c(),ne=o("div"),m(Vr.$$.fragment),Mg=c(),Lt=o("p"),bs=o("a"),Gg=a("LogitsProcessor"),jg=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Mr=o("a"),Hg=a("Autoregressive Entity Retrieval"),Rg=a(" for more information."),Kg=c(),$s=o("div"),m(Gr.$$.fragment),Nd=c(),se=o("div"),m(jr.$$.fragment),Ug=c(),Ce=o("p"),Ts=o("a"),Yg=a("LogitsProcessor"),Xg=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Mc=o("code"),Jg=a("PreTrainedModel.group_beam_search()"),Qg=a(" See "),Hr=o("a"),Zg=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),eu=a(" for more details."),tu=c(),ys=o("div"),m(Rr.$$.fragment),Wd=c(),ae=o("div"),m(Kr.$$.fragment),ru=c(),ks=o("p"),ws=o("a"),ou=a("LogitsProcessor"),nu=a(" that enforces the specified token as the first generated token."),su=c(),Ls=o("div"),m(Ur.$$.fragment),Vd=c(),ie=o("div"),m(Yr.$$.fragment),au=c(),xt=o("p"),xs=o("a"),iu=a("LogitsProcessor"),cu=a(" that enforces the specified token as the last generated token when "),Gc=o("code"),lu=a("max_length"),du=a(" is reached."),pu=c(),Es=o("div"),m(Xr.$$.fragment),Md=c(),ce=o("div"),m(Jr.$$.fragment),fu=c(),M=o("p"),Ps=o("a"),mu=a("LogitsProcessor"),hu=a(" that removes all "),jc=o("code"),gu=a("nan"),uu=a(" and "),Hc=o("code"),_u=a("inf"),vu=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Rc=o("code"),bu=a("max_length"),$u=a(` is
reached.`),Tu=c(),Fs=o("div"),m(Qr.$$.fragment),Gd=c(),le=o("div"),m(Zr.$$.fragment),yu=c(),Kc=o("p"),ku=a("Abstract base class for all logit processors that can be applied during generation."),wu=c(),Et=o("div"),m(eo.$$.fragment),Lu=c(),Uc=o("p"),xu=a("TF method for processing logits."),jd=c(),de=o("div"),m(to.$$.fragment),Eu=c(),B=o("p"),Pu=a("This class can be used to create a list of "),Ds=o("a"),Fu=a("TFLogitsProcessor"),Du=a(" to subsequently process a "),Yc=o("code"),zu=a("scores"),Su=a(` input tensor.
This class inherits from list and adds a specific `),Xc=o("em"),Jc=o("strong"),Ou=a("call"),qu=a(" method to apply each "),zs=o("a"),Bu=a("TFLogitsProcessor"),Iu=a(` to the
inputs.`),Cu=c(),Ss=o("div"),m(ro.$$.fragment),Hd=c(),pe=o("div"),m(oo.$$.fragment),Au=c(),Qc=o("p"),Nu=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Wu=c(),Pt=o("div"),m(no.$$.fragment),Vu=c(),Zc=o("p"),Mu=a("TF method for warping logits."),Rd=c(),fe=o("div"),m(so.$$.fragment),Gu=c(),Os=o("p"),qs=o("a"),ju=a("TFLogitsWarper"),Hu=a(" for temperature (exponential scaling output probability distribution)."),Ru=c(),Bs=o("div"),m(ao.$$.fragment),Kd=c(),me=o("div"),m(io.$$.fragment),Ku=c(),Is=o("p"),Cs=o("a"),Uu=a("TFLogitsWarper"),Yu=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),Xu=c(),As=o("div"),m(co.$$.fragment),Ud=c(),he=o("div"),m(lo.$$.fragment),Ju=c(),Ns=o("p"),Ws=o("a"),Qu=a("TFLogitsWarper"),Zu=a(" that performs top-k, i.e. restricting to the k highest probability elements."),e_=c(),Vs=o("div"),m(po.$$.fragment),Yd=c(),ge=o("div"),m(fo.$$.fragment),t_=c(),Ms=o("p"),Gs=o("a"),r_=a("TFLogitsProcessor"),o_=a(" enforcing a min-length by setting EOS probability to 0."),n_=c(),js=o("div"),m(mo.$$.fragment),Xd=c(),ue=o("div"),m(ho.$$.fragment),s_=c(),Hs=o("p"),Rs=o("a"),a_=a("TFLogitsProcessor"),i_=a(" that enforces that specified sequences will never be sampled."),c_=c(),Ks=o("div"),m(go.$$.fragment),Jd=c(),_e=o("div"),m(uo.$$.fragment),l_=c(),Ft=o("p"),Us=o("a"),d_=a("TFLogitsProcessor"),p_=a(` that enforces no repetition of n-grams. See
`),_o=o("a"),f_=a("Fairseq"),m_=a("."),h_=c(),Ys=o("div"),m(vo.$$.fragment),Qd=c(),ve=o("div"),m(bo.$$.fragment),g_=c(),Xs=o("p"),Js=o("a"),u_=a("TFLogitsProcessor"),__=a(" enforcing an exponential penalty on repeated sequences."),v_=c(),Qs=o("div"),m($o.$$.fragment),Zd=c(),be=o("div"),m(To.$$.fragment),b_=c(),el=o("p"),$_=a("Abstract base class for all logit processors that can be applied during generation."),T_=c(),Dt=o("div"),m(yo.$$.fragment),y_=c(),tl=o("p"),k_=a("Flax method for processing logits."),ep=c(),$e=o("div"),m(ko.$$.fragment),w_=c(),L=o("p"),L_=a("This class can be used to create a list of "),Zs=o("a"),x_=a("FlaxLogitsProcessor"),E_=a(" or "),ea=o("a"),P_=a("FlaxLogitsWarper"),F_=a(` to subsequently process
a `),rl=o("code"),D_=a("scores"),z_=a(" input tensor. This class inherits from list and adds a specific "),ol=o("em"),nl=o("strong"),S_=a("call"),O_=a(` method to apply each
`),ta=o("a"),q_=a("FlaxLogitsProcessor"),B_=a(" or "),ra=o("a"),I_=a("FlaxLogitsWarper"),C_=a(" to the inputs."),A_=c(),oa=o("div"),m(wo.$$.fragment),tp=c(),Te=o("div"),m(Lo.$$.fragment),N_=c(),sl=o("p"),W_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),V_=c(),zt=o("div"),m(xo.$$.fragment),M_=c(),al=o("p"),G_=a("Flax method for warping logits."),rp=c(),ye=o("div"),m(Eo.$$.fragment),j_=c(),na=o("p"),sa=o("a"),H_=a("FlaxLogitsWarper"),R_=a(" for temperature (exponential scaling output probability distribution)."),K_=c(),aa=o("div"),m(Po.$$.fragment),op=c(),ke=o("div"),m(Fo.$$.fragment),U_=c(),ia=o("p"),ca=o("a"),Y_=a("FlaxLogitsWarper"),X_=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),J_=c(),la=o("div"),m(Do.$$.fragment),np=c(),we=o("div"),m(zo.$$.fragment),Q_=c(),da=o("p"),pa=o("a"),Z_=a("FlaxLogitsWarper"),ev=a(" that performs top-k, i.e. restricting to the k highest probability elements."),tv=c(),fa=o("div"),m(So.$$.fragment),sp=c(),Le=o("div"),m(Oo.$$.fragment),rv=c(),ma=o("p"),ha=o("a"),ov=a("FlaxLogitsProcessor"),nv=a(" that enforces the specified token as the first generated token."),sv=c(),ga=o("div"),m(qo.$$.fragment),ap=c(),xe=o("div"),m(Bo.$$.fragment),av=c(),St=o("p"),ua=o("a"),iv=a("FlaxLogitsProcessor"),cv=a(" that enforces the specified token as the last generated token when "),il=o("code"),lv=a("max_length"),dv=a(" is reached."),pv=c(),_a=o("div"),m(Io.$$.fragment),ip=c(),Ee=o("div"),m(Co.$$.fragment),fv=c(),va=o("p"),ba=o("a"),mv=a("FlaxLogitsProcessor"),hv=a(" enforcing a min-length by setting EOS probability to 0."),gv=c(),$a=o("div"),m(Ao.$$.fragment),cp=c(),ot=o("h2"),Ot=o("a"),cl=o("span"),m(No.$$.fragment),uv=c(),ll=o("span"),_v=a("StoppingCriteria"),lp=c(),qt=o("p"),vv=a("A "),Ta=o("a"),bv=a("StoppingCriteria"),$v=a(" can be used to change when to stop generation (other than EOS token)."),dp=c(),Pe=o("div"),m(Wo.$$.fragment),Tv=c(),dl=o("p"),yv=a("Abstract base class for all stopping criteria that can be applied during generation."),kv=c(),ya=o("div"),m(Vo.$$.fragment),pp=c(),nt=o("div"),m(Mo.$$.fragment),wv=c(),ka=o("div"),m(Go.$$.fragment),fp=c(),Fe=o("div"),m(jo.$$.fragment),Lv=c(),Ho=o("p"),xv=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),pl=o("code"),Ev=a("max_length"),Pv=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Fv=c(),wa=o("div"),m(Ro.$$.fragment),mp=c(),De=o("div"),m(Ko.$$.fragment),Dv=c(),Uo=o("p"),zv=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),fl=o("code"),Sv=a("initial_time"),Ov=a("."),qv=c(),La=o("div"),m(Yo.$$.fragment),hp=c(),st=o("h2"),Bt=o("a"),ml=o("span"),m(Xo.$$.fragment),Bv=c(),hl=o("span"),Iv=a("Constraints"),gp=c(),It=o("p"),Cv=a("A "),xa=o("a"),Av=a("Constraint"),Nv=a(" can be used to force the generation to include specific tokens or sequences in the output."),up=c(),$=o("div"),m(Jo.$$.fragment),Wv=c(),gl=o("p"),Vv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Mv=c(),ul=o("p"),Gv=a("All classes that inherit Constraint must follow the requirement that"),jv=c(),m(Qo.$$.fragment),Hv=c(),_l=o("p"),Rv=a("will always terminate (halt)."),Kv=c(),Ct=o("div"),m(Zo.$$.fragment),Uv=c(),vl=o("p"),Yv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),Xv=c(),At=o("div"),m(en.$$.fragment),Jv=c(),bl=o("p"),Qv=a("Creates a new instance of this constraint."),Zv=c(),Nt=o("div"),m(tn.$$.fragment),eb=c(),$l=o("p"),tb=a("Reads in a token and returns whether it creates progress."),rb=c(),Wt=o("div"),m(rn.$$.fragment),ob=c(),on=o("p"),nb=a("Returns the number of remaining steps of "),Tl=o("code"),sb=a("advance()"),ab=a(" in order to complete this constraint."),ib=c(),Vt=o("div"),m(nn.$$.fragment),cb=c(),yl=o("p"),lb=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),db=c(),Mt=o("div"),m(sn.$$.fragment),pb=c(),kl=o("p"),fb=a("Tests whether this constraint has been properly defined."),mb=c(),Ae=o("div"),m(an.$$.fragment),hb=c(),cn=o("p"),gb=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),wl=o("code"),ub=a("does_advance(self, token_id: int)"),_b=a("."),vb=c(),Ll=o("p"),bb=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),_p=c(),at=o("div"),m(ln.$$.fragment),$b=c(),Ea=o("p"),Pa=o("a"),Tb=a("Constraint"),yb=a(" enforcing that an ordered sequence of tokens is included in the output."),vp=c(),it=o("div"),m(dn.$$.fragment),kb=c(),pn=o("p"),wb=a("A special "),Fa=o("a"),Lb=a("Constraint"),xb=a(" that is fulfilled by fulfilling just one of several constraints."),bp=c(),I=o("div"),m(fn.$$.fragment),Eb=c(),xl=o("p"),Pb=a("A class for beam scorers to track its progress through a list of constraints."),Fb=c(),E=o("div"),m(mn.$$.fragment),Db=c(),El=o("p"),zb=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),Sb=c(),ct=o("p"),Ob=a("Given constraints "),Pl=o("code"),qb=a("c_i = {t_ij | j == # of tokens}"),Bb=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),Fl=o("code"),Ib=a("c_i"),Cb=a(", we return:"),Ab=c(),Dl=o("p"),zl=o("code"),Nb=a("[t_k1 for k in indices of unfulfilled constraints]"),Wb=c(),ze=o("p"),Vb=a(`If we are in the middle of a constraint, then we return:
`),Sl=o("code"),Mb=a("[t_ij]"),Gb=a(", where "),Ol=o("code"),jb=a("i"),Hb=a(" is the index of the inprogress constraint, "),ql=o("code"),Rb=a("j"),Kb=a(" is the next step for the constraint."),Ub=c(),Bl=o("p"),Yb=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),Xb=c(),Gt=o("div"),m(hn.$$.fragment),Jb=c(),Il=o("p"),Qb=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),$p=c(),lt=o("h2"),jt=o("a"),Cl=o("span"),m(gn.$$.fragment),Zb=c(),Al=o("span"),e1=a("BeamSearch"),Tp=c(),C=o("div"),m(un.$$.fragment),t1=c(),Ht=o("p"),r1=a("Abstract base class for all beam scorers that are used for "),Nl=o("code"),o1=a("beam_search()"),n1=a(`and
`),Wl=o("code"),s1=a("beam_sample()"),a1=c(),Da=o("div"),m(_n.$$.fragment),i1=c(),za=o("div"),m(vn.$$.fragment),yp=c(),x=o("div"),m(bn.$$.fragment),c1=c(),Sa=o("p"),Oa=o("a"),l1=a("BeamScorer"),d1=a(" implementing standard beam search decoding."),p1=c(),$n=o("p"),f1=a("Adapted in part from "),Tn=o("a"),m1=a(`Facebook\u2019s XLM beam search
code`),h1=a("."),g1=c(),qa=o("p"),u1=a("Reference for the diverse beam search algorithm and implementation "),yn=o("a"),_1=a(`Ashwin Kalyan\u2019s DBS
implementation`),v1=c(),Ba=o("div"),m(kn.$$.fragment),b1=c(),Ia=o("div"),m(wn.$$.fragment),kp=c(),A=o("div"),m(Ln.$$.fragment),$1=c(),Ca=o("p"),Aa=o("a"),T1=a("BeamScorer"),y1=a(" implementing constrained beam search decoding."),k1=c(),Na=o("div"),m(xn.$$.fragment),w1=c(),Wa=o("div"),m(En.$$.fragment),wp=c(),dt=o("h2"),Rt=o("a"),Vl=o("span"),m(Pn.$$.fragment),L1=c(),Ml=o("span"),x1=a("Utilities"),Lp=c(),Se=o("div"),m(Fn.$$.fragment),E1=c(),Gl=o("p"),P1=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),F1=c(),Va=o("p"),D1=a("From: "),Dn=o("a"),z1=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),xp=c(),Oe=o("div"),m(zn.$$.fragment),S1=c(),jl=o("p"),O1=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),q1=c(),Ma=o("p"),B1=a("From: "),Sn=o("a"),I1=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const p=xk('[data-svelte="svelte-1phssyn"]',document.head);Be=n(p,"META",{name:!0,content:!0}),p.forEach(r),qn=l(e),N=n(e,"H1",{class:!0});var Pp=s(N);H=n(Pp,"A",{id:!0,class:!0,href:!0});var f$=s(H);Oi=n(f$,"SPAN",{});var m$=s(Oi);h(Zt.$$.fragment,m$),m$.forEach(r),f$.forEach(r),kf=l(Pp),qi=n(Pp,"SPAN",{});var h$=s(qi);wf=i(h$,"Utilities for Generation"),h$.forEach(r),Pp.forEach(r),Jl=l(e),y=n(e,"P",{});var P=s(y);Lf=i(P,"This page lists all the utility functions used by "),Bn=n(P,"A",{href:!0});var g$=s(Bn);xf=i(g$,"generate()"),g$.forEach(r),Ef=i(P,`,
`),Bi=n(P,"CODE",{});var u$=s(Bi);Pf=i(u$,"greedy_search()"),u$.forEach(r),Ff=l(P),Ii=n(P,"CODE",{});var _$=s(Ii);Df=i(_$,"sample()"),_$.forEach(r),zf=l(P),Ci=n(P,"CODE",{});var v$=s(Ci);Sf=i(v$,"beam_search()"),v$.forEach(r),Of=l(P),Ai=n(P,"CODE",{});var b$=s(Ai);qf=i(b$,"beam_sample()"),b$.forEach(r),Bf=l(P),Ni=n(P,"CODE",{});var $$=s(Ni);If=i($$,"group_beam_search()"),$$.forEach(r),Cf=i(P,` and
`),Wi=n(P,"CODE",{});var T$=s(Wi);Af=i(T$,"constrained_beam_search()"),T$.forEach(r),P.forEach(r),Ql=l(e),In=n(e,"P",{});var y$=s(In);Nf=i(y$,"Most of those are only useful if you are studying the code of the generate methods in the library."),y$.forEach(r),Zl=l(e),Ge=n(e,"H2",{class:!0});var Fp=s(Ge);ft=n(Fp,"A",{id:!0,class:!0,href:!0});var k$=s(ft);Vi=n(k$,"SPAN",{});var w$=s(Vi);h(er.$$.fragment,w$),w$.forEach(r),k$.forEach(r),Wf=l(Fp),Mi=n(Fp,"SPAN",{});var L$=s(Mi);Vf=i(L$,"Generate Outputs"),L$.forEach(r),Fp.forEach(r),ed=l(e),W=n(e,"P",{});var Kt=s(W);Mf=i(Kt,"The output of "),Cn=n(Kt,"A",{href:!0});var x$=s(Cn);Gf=i(x$,"generate()"),x$.forEach(r),jf=i(Kt,` is an instance of a subclass of
`),An=n(Kt,"A",{href:!0});var E$=s(An);Hf=i(E$,"ModelOutput"),E$.forEach(r),Rf=i(Kt,`. This output is a data structure containing all the information returned
by `),Nn=n(Kt,"A",{href:!0});var P$=s(Nn);Kf=i(P$,"generate()"),P$.forEach(r),Uf=i(Kt,", but that can also be used as tuple or dictionary."),Kt.forEach(r),td=l(e),Wn=n(e,"P",{});var F$=s(Wn);Yf=i(F$,"Here\u2019s an example:"),F$.forEach(r),rd=l(e),h(tr.$$.fragment,e),od=l(e),Ie=n(e,"P",{});var Ga=s(Ie);Xf=i(Ga,"The "),Gi=n(Ga,"CODE",{});var D$=s(Gi);Jf=i(D$,"generation_output"),D$.forEach(r),Qf=i(Ga," object is a "),Vn=n(Ga,"A",{href:!0});var z$=s(Vn);Zf=i(z$,"GreedySearchDecoderOnlyOutput"),z$.forEach(r),em=i(Ga,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Ga.forEach(r),nd=l(e),V=n(e,"UL",{});var Ut=s(V);Mn=n(Ut,"LI",{});var C1=s(Mn);ji=n(C1,"CODE",{});var S$=s(ji);tm=i(S$,"sequences"),S$.forEach(r),rm=i(C1,": the generated sequences of tokens"),C1.forEach(r),om=l(Ut),Gn=n(Ut,"LI",{});var A1=s(Gn);Hi=n(A1,"CODE",{});var O$=s(Hi);nm=i(O$,"scores"),O$.forEach(r),sm=i(A1," (optional): the prediction scores of the language modelling head, for each generation step"),A1.forEach(r),am=l(Ut),jn=n(Ut,"LI",{});var N1=s(jn);Ri=n(N1,"CODE",{});var q$=s(Ri);im=i(q$,"hidden_states"),q$.forEach(r),cm=i(N1," (optional): the hidden states of the model, for each generation step"),N1.forEach(r),lm=l(Ut),Hn=n(Ut,"LI",{});var W1=s(Hn);Ki=n(W1,"CODE",{});var B$=s(Ki);dm=i(B$,"attentions"),B$.forEach(r),pm=i(W1," (optional): the attention weights of the model, for each generation step"),W1.forEach(r),Ut.forEach(r),sd=l(e),k=n(e,"P",{});var S=s(k);fm=i(S,"Here we have the "),Ui=n(S,"CODE",{});var I$=s(Ui);mm=i(I$,"scores"),I$.forEach(r),hm=i(S," since we passed along "),Yi=n(S,"CODE",{});var C$=s(Yi);gm=i(C$,"output_scores=True"),C$.forEach(r),um=i(S,", but we don\u2019t have "),Xi=n(S,"CODE",{});var A$=s(Xi);_m=i(A$,"hidden_states"),A$.forEach(r),vm=i(S,` and
`),Ji=n(S,"CODE",{});var N$=s(Ji);bm=i(N$,"attentions"),N$.forEach(r),$m=i(S," because we didn\u2019t pass "),Qi=n(S,"CODE",{});var W$=s(Qi);Tm=i(W$,"output_hidden_states=True"),W$.forEach(r),ym=i(S," or "),Zi=n(S,"CODE",{});var V$=s(Zi);km=i(V$,"output_attentions=True"),V$.forEach(r),wm=i(S,"."),S.forEach(r),ad=l(e),F=n(e,"P",{});var Ne=s(F);Lm=i(Ne,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),ec=n(Ne,"CODE",{});var M$=s(ec);xm=i(M$,"None"),M$.forEach(r),Em=i(Ne,". Here for instance "),tc=n(Ne,"CODE",{});var G$=s(tc);Pm=i(G$,"generation_output.scores"),G$.forEach(r),Fm=i(Ne,` are all the generated prediction scores of the
language modeling head, and `),rc=n(Ne,"CODE",{});var j$=s(rc);Dm=i(j$,"generation_output.attentions"),j$.forEach(r),zm=i(Ne," is "),oc=n(Ne,"CODE",{});var H$=s(oc);Sm=i(H$,"None"),H$.forEach(r),Om=i(Ne,"."),Ne.forEach(r),id=l(e),D=n(e,"P",{});var We=s(D);qm=i(We,"When using our "),nc=n(We,"CODE",{});var R$=s(nc);Bm=i(R$,"generation_output"),R$.forEach(r),Im=i(We," object as a tuple, it only keeps the attributes that don\u2019t have "),sc=n(We,"CODE",{});var K$=s(sc);Cm=i(K$,"None"),K$.forEach(r),Am=i(We,` values.
Here, for instance, it has two elements, `),ac=n(We,"CODE",{});var U$=s(ac);Nm=i(U$,"loss"),U$.forEach(r),Wm=i(We," then "),ic=n(We,"CODE",{});var Y$=s(ic);Vm=i(Y$,"logits"),Y$.forEach(r),Mm=i(We,", so"),We.forEach(r),cd=l(e),h(rr.$$.fragment,e),ld=l(e),mt=n(e,"P",{});var Dp=s(mt);Gm=i(Dp,"will return the tuple "),cc=n(Dp,"CODE",{});var X$=s(cc);jm=i(X$,"(generation_output.sequences, generation_output.scores)"),X$.forEach(r),Hm=i(Dp," for instance."),Dp.forEach(r),dd=l(e),z=n(e,"P",{});var Ve=s(z);Rm=i(Ve,"When using our "),lc=n(Ve,"CODE",{});var J$=s(lc);Km=i(J$,"generation_output"),J$.forEach(r),Um=i(Ve," object as a dictionary, it only keeps the attributes that don\u2019t have "),dc=n(Ve,"CODE",{});var Q$=s(dc);Ym=i(Q$,"None"),Q$.forEach(r),Xm=i(Ve,`
values. Here, for instance, it has two keys that are `),pc=n(Ve,"CODE",{});var Z$=s(pc);Jm=i(Z$,"sequences"),Z$.forEach(r),Qm=i(Ve," and "),fc=n(Ve,"CODE",{});var eT=s(fc);Zm=i(eT,"scores"),eT.forEach(r),eh=i(Ve,"."),Ve.forEach(r),pd=l(e),Rn=n(e,"P",{});var tT=s(Rn);th=i(tT,"We document here all output types."),tT.forEach(r),fd=l(e),je=n(e,"H3",{class:!0});var zp=s(je);ht=n(zp,"A",{id:!0,class:!0,href:!0});var rT=s(ht);mc=n(rT,"SPAN",{});var oT=s(mc);h(or.$$.fragment,oT),oT.forEach(r),rT.forEach(r),rh=l(zp),hc=n(zp,"SPAN",{});var nT=s(hc);oh=i(nT,"GreedySearchOutput"),nT.forEach(r),zp.forEach(r),md=l(e),He=n(e,"DIV",{class:!0});var Sp=s(He);h(nr.$$.fragment,Sp),nh=l(Sp),gc=n(Sp,"P",{});var sT=s(gc);sh=i(sT,"Base class for outputs of decoder-only generation models using greedy search."),sT.forEach(r),Sp.forEach(r),hd=l(e),Re=n(e,"DIV",{class:!0});var Op=s(Re);h(sr.$$.fragment,Op),ah=l(Op),uc=n(Op,"P",{});var aT=s(uc);ih=i(aT,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),aT.forEach(r),Op.forEach(r),gd=l(e),R=n(e,"DIV",{class:!0});var ja=s(R);h(ar.$$.fragment,ja),ch=l(ja),_c=n(ja,"P",{});var iT=s(_c);lh=i(iT,"Flax Base class for outputs of decoder-only generation models using greedy search."),iT.forEach(r),dh=l(ja),gt=n(ja,"DIV",{class:!0});var qp=s(gt);h(ir.$$.fragment,qp),ph=l(qp),vc=n(qp,"P",{});var cT=s(vc);fh=i(cT,"\u201CReturns a new object replacing the specified fields with new values."),cT.forEach(r),qp.forEach(r),ja.forEach(r),ud=l(e),Ke=n(e,"H3",{class:!0});var Bp=s(Ke);ut=n(Bp,"A",{id:!0,class:!0,href:!0});var lT=s(ut);bc=n(lT,"SPAN",{});var dT=s(bc);h(cr.$$.fragment,dT),dT.forEach(r),lT.forEach(r),mh=l(Bp),$c=n(Bp,"SPAN",{});var pT=s($c);hh=i(pT,"SampleOutput"),pT.forEach(r),Bp.forEach(r),_d=l(e),Ue=n(e,"DIV",{class:!0});var Ip=s(Ue);h(lr.$$.fragment,Ip),gh=l(Ip),Tc=n(Ip,"P",{});var fT=s(Tc);uh=i(fT,"Base class for outputs of decoder-only generation models using sampling."),fT.forEach(r),Ip.forEach(r),vd=l(e),Ye=n(e,"DIV",{class:!0});var Cp=s(Ye);h(dr.$$.fragment,Cp),_h=l(Cp),yc=n(Cp,"P",{});var mT=s(yc);vh=i(mT,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),mT.forEach(r),Cp.forEach(r),bd=l(e),K=n(e,"DIV",{class:!0});var Ha=s(K);h(pr.$$.fragment,Ha),bh=l(Ha),kc=n(Ha,"P",{});var hT=s(kc);$h=i(hT,"Flax Base class for outputs of decoder-only generation models using sampling."),hT.forEach(r),Th=l(Ha),_t=n(Ha,"DIV",{class:!0});var Ap=s(_t);h(fr.$$.fragment,Ap),yh=l(Ap),wc=n(Ap,"P",{});var gT=s(wc);kh=i(gT,"\u201CReturns a new object replacing the specified fields with new values."),gT.forEach(r),Ap.forEach(r),Ha.forEach(r),$d=l(e),Xe=n(e,"H3",{class:!0});var Np=s(Xe);vt=n(Np,"A",{id:!0,class:!0,href:!0});var uT=s(vt);Lc=n(uT,"SPAN",{});var _T=s(Lc);h(mr.$$.fragment,_T),_T.forEach(r),uT.forEach(r),wh=l(Np),xc=n(Np,"SPAN",{});var vT=s(xc);Lh=i(vT,"BeamSearchOutput"),vT.forEach(r),Np.forEach(r),Td=l(e),Je=n(e,"DIV",{class:!0});var Wp=s(Je);h(hr.$$.fragment,Wp),xh=l(Wp),Ec=n(Wp,"P",{});var bT=s(Ec);Eh=i(bT,"Base class for outputs of decoder-only generation models using beam search."),bT.forEach(r),Wp.forEach(r),yd=l(e),Qe=n(e,"DIV",{class:!0});var Vp=s(Qe);h(gr.$$.fragment,Vp),Ph=l(Vp),Pc=n(Vp,"P",{});var $T=s(Pc);Fh=i($T,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),$T.forEach(r),Vp.forEach(r),kd=l(e),Ze=n(e,"H3",{class:!0});var Mp=s(Ze);bt=n(Mp,"A",{id:!0,class:!0,href:!0});var TT=s(bt);Fc=n(TT,"SPAN",{});var yT=s(Fc);h(ur.$$.fragment,yT),yT.forEach(r),TT.forEach(r),Dh=l(Mp),Dc=n(Mp,"SPAN",{});var kT=s(Dc);zh=i(kT,"BeamSampleOutput"),kT.forEach(r),Mp.forEach(r),wd=l(e),et=n(e,"DIV",{class:!0});var Gp=s(et);h(_r.$$.fragment,Gp),Sh=l(Gp),zc=n(Gp,"P",{});var wT=s(zc);Oh=i(wT,"Base class for outputs of decoder-only generation models using beam sample."),wT.forEach(r),Gp.forEach(r),Ld=l(e),tt=n(e,"DIV",{class:!0});var jp=s(tt);h(vr.$$.fragment,jp),qh=l(jp),Sc=n(jp,"P",{});var LT=s(Sc);Bh=i(LT,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),LT.forEach(r),jp.forEach(r),xd=l(e),rt=n(e,"H2",{class:!0});var Hp=s(rt);$t=n(Hp,"A",{id:!0,class:!0,href:!0});var xT=s($t);Oc=n(xT,"SPAN",{});var ET=s(Oc);h(br.$$.fragment,ET),ET.forEach(r),xT.forEach(r),Ih=l(Hp),qc=n(Hp,"SPAN",{});var PT=s(qc);Ch=i(PT,"LogitsProcessor"),PT.forEach(r),Hp.forEach(r),Ed=l(e),Tt=n(e,"P",{});var Rp=s(Tt);Ah=i(Rp,"A "),Kn=n(Rp,"A",{href:!0});var FT=s(Kn);Nh=i(FT,"LogitsProcessor"),FT.forEach(r),Wh=i(Rp,` can be used to modify the prediction scores of a language model head for
generation.`),Rp.forEach(r),Pd=l(e),U=n(e,"DIV",{class:!0});var Ra=s(U);h($r.$$.fragment,Ra),Vh=l(Ra),Bc=n(Ra,"P",{});var DT=s(Bc);Mh=i(DT,"Abstract base class for all logit processors that can be applied during generation."),DT.forEach(r),Gh=l(Ra),yt=n(Ra,"DIV",{class:!0});var Kp=s(yt);h(Tr.$$.fragment,Kp),jh=l(Kp),Ic=n(Kp,"P",{});var zT=s(Ic);Hh=i(zT,"Torch method for processing logits."),zT.forEach(r),Kp.forEach(r),Ra.forEach(r),Fd=l(e),Y=n(e,"DIV",{class:!0});var Ka=s(Y);h(yr.$$.fragment,Ka),Rh=l(Ka),w=n(Ka,"P",{});var O=s(w);Kh=i(O,"This class can be used to create a list of "),Un=n(O,"A",{href:!0});var ST=s(Un);Uh=i(ST,"LogitsProcessor"),ST.forEach(r),Yh=i(O," or "),Yn=n(O,"A",{href:!0});var OT=s(Yn);Xh=i(OT,"LogitsWarper"),OT.forEach(r),Jh=i(O,` to subsequently process a
`),Cc=n(O,"CODE",{});var qT=s(Cc);Qh=i(qT,"scores"),qT.forEach(r),Zh=i(O," input tensor. This class inherits from list and adds a specific "),Ac=n(O,"EM",{});var BT=s(Ac);Nc=n(BT,"STRONG",{});var IT=s(Nc);eg=i(IT,"call"),IT.forEach(r),BT.forEach(r),tg=i(O,` method to apply each
`),Xn=n(O,"A",{href:!0});var CT=s(Xn);rg=i(CT,"LogitsProcessor"),CT.forEach(r),og=i(O," or "),Jn=n(O,"A",{href:!0});var AT=s(Jn);ng=i(AT,"LogitsWarper"),AT.forEach(r),sg=i(O," to the inputs."),O.forEach(r),ag=l(Ka),Qn=n(Ka,"DIV",{class:!0});var NT=s(Qn);h(kr.$$.fragment,NT),NT.forEach(r),Ka.forEach(r),Dd=l(e),X=n(e,"DIV",{class:!0});var Ua=s(X);h(wr.$$.fragment,Ua),ig=l(Ua),Wc=n(Ua,"P",{});var WT=s(Wc);cg=i(WT,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),WT.forEach(r),lg=l(Ua),kt=n(Ua,"DIV",{class:!0});var Up=s(kt);h(Lr.$$.fragment,Up),dg=l(Up),Vc=n(Up,"P",{});var VT=s(Vc);pg=i(VT,"Torch method for warping logits."),VT.forEach(r),Up.forEach(r),Ua.forEach(r),zd=l(e),J=n(e,"DIV",{class:!0});var Ya=s(J);h(xr.$$.fragment,Ya),fg=l(Ya),Zn=n(Ya,"P",{});var V1=s(Zn);es=n(V1,"A",{href:!0});var MT=s(es);mg=i(MT,"LogitsProcessor"),MT.forEach(r),hg=i(V1," enforcing a min-length by setting EOS probability to 0."),V1.forEach(r),gg=l(Ya),ts=n(Ya,"DIV",{class:!0});var GT=s(ts);h(Er.$$.fragment,GT),GT.forEach(r),Ya.forEach(r),Sd=l(e),Q=n(e,"DIV",{class:!0});var Xa=s(Q);h(Pr.$$.fragment,Xa),ug=l(Xa),rs=n(Xa,"P",{});var M1=s(rs);os=n(M1,"A",{href:!0});var jT=s(os);_g=i(jT,"LogitsWarper"),jT.forEach(r),vg=i(M1," for temperature (exponential scaling output probability distribution)."),M1.forEach(r),bg=l(Xa),ns=n(Xa,"DIV",{class:!0});var HT=s(ns);h(Fr.$$.fragment,HT),HT.forEach(r),Xa.forEach(r),Od=l(e),Z=n(e,"DIV",{class:!0});var Ja=s(Z);h(Dr.$$.fragment,Ja),$g=l(Ja),ss=n(Ja,"P",{});var G1=s(ss);as=n(G1,"A",{href:!0});var RT=s(as);Tg=i(RT,"LogitsProcessor"),RT.forEach(r),yg=i(G1," enforcing an exponential penalty on repeated sequences."),G1.forEach(r),kg=l(Ja),is=n(Ja,"DIV",{class:!0});var KT=s(is);h(zr.$$.fragment,KT),KT.forEach(r),Ja.forEach(r),qd=l(e),ee=n(e,"DIV",{class:!0});var Qa=s(ee);h(Sr.$$.fragment,Qa),wg=l(Qa),cs=n(Qa,"P",{});var j1=s(cs);ls=n(j1,"A",{href:!0});var UT=s(ls);Lg=i(UT,"LogitsWarper"),UT.forEach(r),xg=i(j1," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),j1.forEach(r),Eg=l(Qa),ds=n(Qa,"DIV",{class:!0});var YT=s(ds);h(Or.$$.fragment,YT),YT.forEach(r),Qa.forEach(r),Bd=l(e),te=n(e,"DIV",{class:!0});var Za=s(te);h(qr.$$.fragment,Za),Pg=l(Za),ps=n(Za,"P",{});var H1=s(ps);fs=n(H1,"A",{href:!0});var XT=s(fs);Fg=i(XT,"LogitsWarper"),XT.forEach(r),Dg=i(H1," that performs top-k, i.e. restricting to the k highest probability elements."),H1.forEach(r),zg=l(Za),ms=n(Za,"DIV",{class:!0});var JT=s(ms);h(Br.$$.fragment,JT),JT.forEach(r),Za.forEach(r),Id=l(e),re=n(e,"DIV",{class:!0});var ei=s(re);h(Ir.$$.fragment,ei),Sg=l(ei),wt=n(ei,"P",{});var Hl=s(wt);hs=n(Hl,"A",{href:!0});var QT=s(hs);Og=i(QT,"LogitsProcessor"),QT.forEach(r),qg=i(Hl,` that enforces no repetition of n-grams. See
`),Cr=n(Hl,"A",{href:!0,rel:!0});var ZT=s(Cr);Bg=i(ZT,"Fairseq"),ZT.forEach(r),Ig=i(Hl,"."),Hl.forEach(r),Cg=l(ei),gs=n(ei,"DIV",{class:!0});var ey=s(gs);h(Ar.$$.fragment,ey),ey.forEach(r),ei.forEach(r),Cd=l(e),oe=n(e,"DIV",{class:!0});var ti=s(oe);h(Nr.$$.fragment,ti),Ag=l(ti),us=n(ti,"P",{});var R1=s(us);_s=n(R1,"A",{href:!0});var ty=s(_s);Ng=i(ty,"LogitsProcessor"),ty.forEach(r),Wg=i(R1," that enforces that specified sequences will never be sampled."),R1.forEach(r),Vg=l(ti),vs=n(ti,"DIV",{class:!0});var ry=s(vs);h(Wr.$$.fragment,ry),ry.forEach(r),ti.forEach(r),Ad=l(e),ne=n(e,"DIV",{class:!0});var ri=s(ne);h(Vr.$$.fragment,ri),Mg=l(ri),Lt=n(ri,"P",{});var Rl=s(Lt);bs=n(Rl,"A",{href:!0});var oy=s(bs);Gg=i(oy,"LogitsProcessor"),oy.forEach(r),jg=i(Rl,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Mr=n(Rl,"A",{href:!0,rel:!0});var ny=s(Mr);Hg=i(ny,"Autoregressive Entity Retrieval"),ny.forEach(r),Rg=i(Rl," for more information."),Rl.forEach(r),Kg=l(ri),$s=n(ri,"DIV",{class:!0});var sy=s($s);h(Gr.$$.fragment,sy),sy.forEach(r),ri.forEach(r),Nd=l(e),se=n(e,"DIV",{class:!0});var oi=s(se);h(jr.$$.fragment,oi),Ug=l(oi),Ce=n(oi,"P",{});var On=s(Ce);Ts=n(On,"A",{href:!0});var ay=s(Ts);Yg=i(ay,"LogitsProcessor"),ay.forEach(r),Xg=i(On,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Mc=n(On,"CODE",{});var iy=s(Mc);Jg=i(iy,"PreTrainedModel.group_beam_search()"),iy.forEach(r),Qg=i(On," See "),Hr=n(On,"A",{href:!0,rel:!0});var cy=s(Hr);Zg=i(cy,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),cy.forEach(r),eu=i(On," for more details."),On.forEach(r),tu=l(oi),ys=n(oi,"DIV",{class:!0});var ly=s(ys);h(Rr.$$.fragment,ly),ly.forEach(r),oi.forEach(r),Wd=l(e),ae=n(e,"DIV",{class:!0});var ni=s(ae);h(Kr.$$.fragment,ni),ru=l(ni),ks=n(ni,"P",{});var K1=s(ks);ws=n(K1,"A",{href:!0});var dy=s(ws);ou=i(dy,"LogitsProcessor"),dy.forEach(r),nu=i(K1," that enforces the specified token as the first generated token."),K1.forEach(r),su=l(ni),Ls=n(ni,"DIV",{class:!0});var py=s(Ls);h(Ur.$$.fragment,py),py.forEach(r),ni.forEach(r),Vd=l(e),ie=n(e,"DIV",{class:!0});var si=s(ie);h(Yr.$$.fragment,si),au=l(si),xt=n(si,"P",{});var Kl=s(xt);xs=n(Kl,"A",{href:!0});var fy=s(xs);iu=i(fy,"LogitsProcessor"),fy.forEach(r),cu=i(Kl," that enforces the specified token as the last generated token when "),Gc=n(Kl,"CODE",{});var my=s(Gc);lu=i(my,"max_length"),my.forEach(r),du=i(Kl," is reached."),Kl.forEach(r),pu=l(si),Es=n(si,"DIV",{class:!0});var hy=s(Es);h(Xr.$$.fragment,hy),hy.forEach(r),si.forEach(r),Md=l(e),ce=n(e,"DIV",{class:!0});var ai=s(ce);h(Jr.$$.fragment,ai),fu=l(ai),M=n(ai,"P",{});var pt=s(M);Ps=n(pt,"A",{href:!0});var gy=s(Ps);mu=i(gy,"LogitsProcessor"),gy.forEach(r),hu=i(pt," that removes all "),jc=n(pt,"CODE",{});var uy=s(jc);gu=i(uy,"nan"),uy.forEach(r),uu=i(pt," and "),Hc=n(pt,"CODE",{});var _y=s(Hc);_u=i(_y,"inf"),_y.forEach(r),vu=i(pt,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Rc=n(pt,"CODE",{});var vy=s(Rc);bu=i(vy,"max_length"),vy.forEach(r),$u=i(pt,` is
reached.`),pt.forEach(r),Tu=l(ai),Fs=n(ai,"DIV",{class:!0});var by=s(Fs);h(Qr.$$.fragment,by),by.forEach(r),ai.forEach(r),Gd=l(e),le=n(e,"DIV",{class:!0});var ii=s(le);h(Zr.$$.fragment,ii),yu=l(ii),Kc=n(ii,"P",{});var $y=s(Kc);ku=i($y,"Abstract base class for all logit processors that can be applied during generation."),$y.forEach(r),wu=l(ii),Et=n(ii,"DIV",{class:!0});var Yp=s(Et);h(eo.$$.fragment,Yp),Lu=l(Yp),Uc=n(Yp,"P",{});var Ty=s(Uc);xu=i(Ty,"TF method for processing logits."),Ty.forEach(r),Yp.forEach(r),ii.forEach(r),jd=l(e),de=n(e,"DIV",{class:!0});var ci=s(de);h(to.$$.fragment,ci),Eu=l(ci),B=n(ci,"P",{});var Me=s(B);Pu=i(Me,"This class can be used to create a list of "),Ds=n(Me,"A",{href:!0});var yy=s(Ds);Fu=i(yy,"TFLogitsProcessor"),yy.forEach(r),Du=i(Me," to subsequently process a "),Yc=n(Me,"CODE",{});var ky=s(Yc);zu=i(ky,"scores"),ky.forEach(r),Su=i(Me,` input tensor.
This class inherits from list and adds a specific `),Xc=n(Me,"EM",{});var wy=s(Xc);Jc=n(wy,"STRONG",{});var Ly=s(Jc);Ou=i(Ly,"call"),Ly.forEach(r),wy.forEach(r),qu=i(Me," method to apply each "),zs=n(Me,"A",{href:!0});var xy=s(zs);Bu=i(xy,"TFLogitsProcessor"),xy.forEach(r),Iu=i(Me,` to the
inputs.`),Me.forEach(r),Cu=l(ci),Ss=n(ci,"DIV",{class:!0});var Ey=s(Ss);h(ro.$$.fragment,Ey),Ey.forEach(r),ci.forEach(r),Hd=l(e),pe=n(e,"DIV",{class:!0});var li=s(pe);h(oo.$$.fragment,li),Au=l(li),Qc=n(li,"P",{});var Py=s(Qc);Nu=i(Py,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Py.forEach(r),Wu=l(li),Pt=n(li,"DIV",{class:!0});var Xp=s(Pt);h(no.$$.fragment,Xp),Vu=l(Xp),Zc=n(Xp,"P",{});var Fy=s(Zc);Mu=i(Fy,"TF method for warping logits."),Fy.forEach(r),Xp.forEach(r),li.forEach(r),Rd=l(e),fe=n(e,"DIV",{class:!0});var di=s(fe);h(so.$$.fragment,di),Gu=l(di),Os=n(di,"P",{});var U1=s(Os);qs=n(U1,"A",{href:!0});var Dy=s(qs);ju=i(Dy,"TFLogitsWarper"),Dy.forEach(r),Hu=i(U1," for temperature (exponential scaling output probability distribution)."),U1.forEach(r),Ru=l(di),Bs=n(di,"DIV",{class:!0});var zy=s(Bs);h(ao.$$.fragment,zy),zy.forEach(r),di.forEach(r),Kd=l(e),me=n(e,"DIV",{class:!0});var pi=s(me);h(io.$$.fragment,pi),Ku=l(pi),Is=n(pi,"P",{});var Y1=s(Is);Cs=n(Y1,"A",{href:!0});var Sy=s(Cs);Uu=i(Sy,"TFLogitsWarper"),Sy.forEach(r),Yu=i(Y1," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),Y1.forEach(r),Xu=l(pi),As=n(pi,"DIV",{class:!0});var Oy=s(As);h(co.$$.fragment,Oy),Oy.forEach(r),pi.forEach(r),Ud=l(e),he=n(e,"DIV",{class:!0});var fi=s(he);h(lo.$$.fragment,fi),Ju=l(fi),Ns=n(fi,"P",{});var X1=s(Ns);Ws=n(X1,"A",{href:!0});var qy=s(Ws);Qu=i(qy,"TFLogitsWarper"),qy.forEach(r),Zu=i(X1," that performs top-k, i.e. restricting to the k highest probability elements."),X1.forEach(r),e_=l(fi),Vs=n(fi,"DIV",{class:!0});var By=s(Vs);h(po.$$.fragment,By),By.forEach(r),fi.forEach(r),Yd=l(e),ge=n(e,"DIV",{class:!0});var mi=s(ge);h(fo.$$.fragment,mi),t_=l(mi),Ms=n(mi,"P",{});var J1=s(Ms);Gs=n(J1,"A",{href:!0});var Iy=s(Gs);r_=i(Iy,"TFLogitsProcessor"),Iy.forEach(r),o_=i(J1," enforcing a min-length by setting EOS probability to 0."),J1.forEach(r),n_=l(mi),js=n(mi,"DIV",{class:!0});var Cy=s(js);h(mo.$$.fragment,Cy),Cy.forEach(r),mi.forEach(r),Xd=l(e),ue=n(e,"DIV",{class:!0});var hi=s(ue);h(ho.$$.fragment,hi),s_=l(hi),Hs=n(hi,"P",{});var Q1=s(Hs);Rs=n(Q1,"A",{href:!0});var Ay=s(Rs);a_=i(Ay,"TFLogitsProcessor"),Ay.forEach(r),i_=i(Q1," that enforces that specified sequences will never be sampled."),Q1.forEach(r),c_=l(hi),Ks=n(hi,"DIV",{class:!0});var Ny=s(Ks);h(go.$$.fragment,Ny),Ny.forEach(r),hi.forEach(r),Jd=l(e),_e=n(e,"DIV",{class:!0});var gi=s(_e);h(uo.$$.fragment,gi),l_=l(gi),Ft=n(gi,"P",{});var Ul=s(Ft);Us=n(Ul,"A",{href:!0});var Wy=s(Us);d_=i(Wy,"TFLogitsProcessor"),Wy.forEach(r),p_=i(Ul,` that enforces no repetition of n-grams. See
`),_o=n(Ul,"A",{href:!0,rel:!0});var Vy=s(_o);f_=i(Vy,"Fairseq"),Vy.forEach(r),m_=i(Ul,"."),Ul.forEach(r),h_=l(gi),Ys=n(gi,"DIV",{class:!0});var My=s(Ys);h(vo.$$.fragment,My),My.forEach(r),gi.forEach(r),Qd=l(e),ve=n(e,"DIV",{class:!0});var ui=s(ve);h(bo.$$.fragment,ui),g_=l(ui),Xs=n(ui,"P",{});var Z1=s(Xs);Js=n(Z1,"A",{href:!0});var Gy=s(Js);u_=i(Gy,"TFLogitsProcessor"),Gy.forEach(r),__=i(Z1," enforcing an exponential penalty on repeated sequences."),Z1.forEach(r),v_=l(ui),Qs=n(ui,"DIV",{class:!0});var jy=s(Qs);h($o.$$.fragment,jy),jy.forEach(r),ui.forEach(r),Zd=l(e),be=n(e,"DIV",{class:!0});var _i=s(be);h(To.$$.fragment,_i),b_=l(_i),el=n(_i,"P",{});var Hy=s(el);$_=i(Hy,"Abstract base class for all logit processors that can be applied during generation."),Hy.forEach(r),T_=l(_i),Dt=n(_i,"DIV",{class:!0});var Jp=s(Dt);h(yo.$$.fragment,Jp),y_=l(Jp),tl=n(Jp,"P",{});var Ry=s(tl);k_=i(Ry,"Flax method for processing logits."),Ry.forEach(r),Jp.forEach(r),_i.forEach(r),ep=l(e),$e=n(e,"DIV",{class:!0});var vi=s($e);h(ko.$$.fragment,vi),w_=l(vi),L=n(vi,"P",{});var q=s(L);L_=i(q,"This class can be used to create a list of "),Zs=n(q,"A",{href:!0});var Ky=s(Zs);x_=i(Ky,"FlaxLogitsProcessor"),Ky.forEach(r),E_=i(q," or "),ea=n(q,"A",{href:!0});var Uy=s(ea);P_=i(Uy,"FlaxLogitsWarper"),Uy.forEach(r),F_=i(q,` to subsequently process
a `),rl=n(q,"CODE",{});var Yy=s(rl);D_=i(Yy,"scores"),Yy.forEach(r),z_=i(q," input tensor. This class inherits from list and adds a specific "),ol=n(q,"EM",{});var Xy=s(ol);nl=n(Xy,"STRONG",{});var Jy=s(nl);S_=i(Jy,"call"),Jy.forEach(r),Xy.forEach(r),O_=i(q,` method to apply each
`),ta=n(q,"A",{href:!0});var Qy=s(ta);q_=i(Qy,"FlaxLogitsProcessor"),Qy.forEach(r),B_=i(q," or "),ra=n(q,"A",{href:!0});var Zy=s(ra);I_=i(Zy,"FlaxLogitsWarper"),Zy.forEach(r),C_=i(q," to the inputs."),q.forEach(r),A_=l(vi),oa=n(vi,"DIV",{class:!0});var e2=s(oa);h(wo.$$.fragment,e2),e2.forEach(r),vi.forEach(r),tp=l(e),Te=n(e,"DIV",{class:!0});var bi=s(Te);h(Lo.$$.fragment,bi),N_=l(bi),sl=n(bi,"P",{});var t2=s(sl);W_=i(t2,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),t2.forEach(r),V_=l(bi),zt=n(bi,"DIV",{class:!0});var Qp=s(zt);h(xo.$$.fragment,Qp),M_=l(Qp),al=n(Qp,"P",{});var r2=s(al);G_=i(r2,"Flax method for warping logits."),r2.forEach(r),Qp.forEach(r),bi.forEach(r),rp=l(e),ye=n(e,"DIV",{class:!0});var $i=s(ye);h(Eo.$$.fragment,$i),j_=l($i),na=n($i,"P",{});var e$=s(na);sa=n(e$,"A",{href:!0});var o2=s(sa);H_=i(o2,"FlaxLogitsWarper"),o2.forEach(r),R_=i(e$," for temperature (exponential scaling output probability distribution)."),e$.forEach(r),K_=l($i),aa=n($i,"DIV",{class:!0});var n2=s(aa);h(Po.$$.fragment,n2),n2.forEach(r),$i.forEach(r),op=l(e),ke=n(e,"DIV",{class:!0});var Ti=s(ke);h(Fo.$$.fragment,Ti),U_=l(Ti),ia=n(Ti,"P",{});var t$=s(ia);ca=n(t$,"A",{href:!0});var s2=s(ca);Y_=i(s2,"FlaxLogitsWarper"),s2.forEach(r),X_=i(t$," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),t$.forEach(r),J_=l(Ti),la=n(Ti,"DIV",{class:!0});var a2=s(la);h(Do.$$.fragment,a2),a2.forEach(r),Ti.forEach(r),np=l(e),we=n(e,"DIV",{class:!0});var yi=s(we);h(zo.$$.fragment,yi),Q_=l(yi),da=n(yi,"P",{});var r$=s(da);pa=n(r$,"A",{href:!0});var i2=s(pa);Z_=i(i2,"FlaxLogitsWarper"),i2.forEach(r),ev=i(r$," that performs top-k, i.e. restricting to the k highest probability elements."),r$.forEach(r),tv=l(yi),fa=n(yi,"DIV",{class:!0});var c2=s(fa);h(So.$$.fragment,c2),c2.forEach(r),yi.forEach(r),sp=l(e),Le=n(e,"DIV",{class:!0});var ki=s(Le);h(Oo.$$.fragment,ki),rv=l(ki),ma=n(ki,"P",{});var o$=s(ma);ha=n(o$,"A",{href:!0});var l2=s(ha);ov=i(l2,"FlaxLogitsProcessor"),l2.forEach(r),nv=i(o$," that enforces the specified token as the first generated token."),o$.forEach(r),sv=l(ki),ga=n(ki,"DIV",{class:!0});var d2=s(ga);h(qo.$$.fragment,d2),d2.forEach(r),ki.forEach(r),ap=l(e),xe=n(e,"DIV",{class:!0});var wi=s(xe);h(Bo.$$.fragment,wi),av=l(wi),St=n(wi,"P",{});var Yl=s(St);ua=n(Yl,"A",{href:!0});var p2=s(ua);iv=i(p2,"FlaxLogitsProcessor"),p2.forEach(r),cv=i(Yl," that enforces the specified token as the last generated token when "),il=n(Yl,"CODE",{});var f2=s(il);lv=i(f2,"max_length"),f2.forEach(r),dv=i(Yl," is reached."),Yl.forEach(r),pv=l(wi),_a=n(wi,"DIV",{class:!0});var m2=s(_a);h(Io.$$.fragment,m2),m2.forEach(r),wi.forEach(r),ip=l(e),Ee=n(e,"DIV",{class:!0});var Li=s(Ee);h(Co.$$.fragment,Li),fv=l(Li),va=n(Li,"P",{});var n$=s(va);ba=n(n$,"A",{href:!0});var h2=s(ba);mv=i(h2,"FlaxLogitsProcessor"),h2.forEach(r),hv=i(n$," enforcing a min-length by setting EOS probability to 0."),n$.forEach(r),gv=l(Li),$a=n(Li,"DIV",{class:!0});var g2=s($a);h(Ao.$$.fragment,g2),g2.forEach(r),Li.forEach(r),cp=l(e),ot=n(e,"H2",{class:!0});var Zp=s(ot);Ot=n(Zp,"A",{id:!0,class:!0,href:!0});var u2=s(Ot);cl=n(u2,"SPAN",{});var _2=s(cl);h(No.$$.fragment,_2),_2.forEach(r),u2.forEach(r),uv=l(Zp),ll=n(Zp,"SPAN",{});var v2=s(ll);_v=i(v2,"StoppingCriteria"),v2.forEach(r),Zp.forEach(r),lp=l(e),qt=n(e,"P",{});var ef=s(qt);vv=i(ef,"A "),Ta=n(ef,"A",{href:!0});var b2=s(Ta);bv=i(b2,"StoppingCriteria"),b2.forEach(r),$v=i(ef," can be used to change when to stop generation (other than EOS token)."),ef.forEach(r),dp=l(e),Pe=n(e,"DIV",{class:!0});var xi=s(Pe);h(Wo.$$.fragment,xi),Tv=l(xi),dl=n(xi,"P",{});var $2=s(dl);yv=i($2,"Abstract base class for all stopping criteria that can be applied during generation."),$2.forEach(r),kv=l(xi),ya=n(xi,"DIV",{class:!0});var T2=s(ya);h(Vo.$$.fragment,T2),T2.forEach(r),xi.forEach(r),pp=l(e),nt=n(e,"DIV",{class:!0});var tf=s(nt);h(Mo.$$.fragment,tf),wv=l(tf),ka=n(tf,"DIV",{class:!0});var y2=s(ka);h(Go.$$.fragment,y2),y2.forEach(r),tf.forEach(r),fp=l(e),Fe=n(e,"DIV",{class:!0});var Ei=s(Fe);h(jo.$$.fragment,Ei),Lv=l(Ei),Ho=n(Ei,"P",{});var rf=s(Ho);xv=i(rf,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),pl=n(rf,"CODE",{});var k2=s(pl);Ev=i(k2,"max_length"),k2.forEach(r),Pv=i(rf,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),rf.forEach(r),Fv=l(Ei),wa=n(Ei,"DIV",{class:!0});var w2=s(wa);h(Ro.$$.fragment,w2),w2.forEach(r),Ei.forEach(r),mp=l(e),De=n(e,"DIV",{class:!0});var Pi=s(De);h(Ko.$$.fragment,Pi),Dv=l(Pi),Uo=n(Pi,"P",{});var of=s(Uo);zv=i(of,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),fl=n(of,"CODE",{});var L2=s(fl);Sv=i(L2,"initial_time"),L2.forEach(r),Ov=i(of,"."),of.forEach(r),qv=l(Pi),La=n(Pi,"DIV",{class:!0});var x2=s(La);h(Yo.$$.fragment,x2),x2.forEach(r),Pi.forEach(r),hp=l(e),st=n(e,"H2",{class:!0});var nf=s(st);Bt=n(nf,"A",{id:!0,class:!0,href:!0});var E2=s(Bt);ml=n(E2,"SPAN",{});var P2=s(ml);h(Xo.$$.fragment,P2),P2.forEach(r),E2.forEach(r),Bv=l(nf),hl=n(nf,"SPAN",{});var F2=s(hl);Iv=i(F2,"Constraints"),F2.forEach(r),nf.forEach(r),gp=l(e),It=n(e,"P",{});var sf=s(It);Cv=i(sf,"A "),xa=n(sf,"A",{href:!0});var D2=s(xa);Av=i(D2,"Constraint"),D2.forEach(r),Nv=i(sf," can be used to force the generation to include specific tokens or sequences in the output."),sf.forEach(r),up=l(e),$=n(e,"DIV",{class:!0});var T=s($);h(Jo.$$.fragment,T),Wv=l(T),gl=n(T,"P",{});var z2=s(gl);Vv=i(z2,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),z2.forEach(r),Mv=l(T),ul=n(T,"P",{});var S2=s(ul);Gv=i(S2,"All classes that inherit Constraint must follow the requirement that"),S2.forEach(r),jv=l(T),h(Qo.$$.fragment,T),Hv=l(T),_l=n(T,"P",{});var O2=s(_l);Rv=i(O2,"will always terminate (halt)."),O2.forEach(r),Kv=l(T),Ct=n(T,"DIV",{class:!0});var af=s(Ct);h(Zo.$$.fragment,af),Uv=l(af),vl=n(af,"P",{});var q2=s(vl);Yv=i(q2,"When called, returns the token that would take this constraint one step closer to being fulfilled."),q2.forEach(r),af.forEach(r),Xv=l(T),At=n(T,"DIV",{class:!0});var cf=s(At);h(en.$$.fragment,cf),Jv=l(cf),bl=n(cf,"P",{});var B2=s(bl);Qv=i(B2,"Creates a new instance of this constraint."),B2.forEach(r),cf.forEach(r),Zv=l(T),Nt=n(T,"DIV",{class:!0});var lf=s(Nt);h(tn.$$.fragment,lf),eb=l(lf),$l=n(lf,"P",{});var I2=s($l);tb=i(I2,"Reads in a token and returns whether it creates progress."),I2.forEach(r),lf.forEach(r),rb=l(T),Wt=n(T,"DIV",{class:!0});var df=s(Wt);h(rn.$$.fragment,df),ob=l(df),on=n(df,"P",{});var pf=s(on);nb=i(pf,"Returns the number of remaining steps of "),Tl=n(pf,"CODE",{});var C2=s(Tl);sb=i(C2,"advance()"),C2.forEach(r),ab=i(pf," in order to complete this constraint."),pf.forEach(r),df.forEach(r),ib=l(T),Vt=n(T,"DIV",{class:!0});var ff=s(Vt);h(nn.$$.fragment,ff),cb=l(ff),yl=n(ff,"P",{});var A2=s(yl);lb=i(A2,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),A2.forEach(r),ff.forEach(r),db=l(T),Mt=n(T,"DIV",{class:!0});var mf=s(Mt);h(sn.$$.fragment,mf),pb=l(mf),kl=n(mf,"P",{});var N2=s(kl);fb=i(N2,"Tests whether this constraint has been properly defined."),N2.forEach(r),mf.forEach(r),mb=l(T),Ae=n(T,"DIV",{class:!0});var Fi=s(Ae);h(an.$$.fragment,Fi),hb=l(Fi),cn=n(Fi,"P",{});var hf=s(cn);gb=i(hf,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),wl=n(hf,"CODE",{});var W2=s(wl);ub=i(W2,"does_advance(self, token_id: int)"),W2.forEach(r),_b=i(hf,"."),hf.forEach(r),vb=l(Fi),Ll=n(Fi,"P",{});var V2=s(Ll);bb=i(V2,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),V2.forEach(r),Fi.forEach(r),T.forEach(r),_p=l(e),at=n(e,"DIV",{class:!0});var gf=s(at);h(ln.$$.fragment,gf),$b=l(gf),Ea=n(gf,"P",{});var s$=s(Ea);Pa=n(s$,"A",{href:!0});var M2=s(Pa);Tb=i(M2,"Constraint"),M2.forEach(r),yb=i(s$," enforcing that an ordered sequence of tokens is included in the output."),s$.forEach(r),gf.forEach(r),vp=l(e),it=n(e,"DIV",{class:!0});var uf=s(it);h(dn.$$.fragment,uf),kb=l(uf),pn=n(uf,"P",{});var _f=s(pn);wb=i(_f,"A special "),Fa=n(_f,"A",{href:!0});var G2=s(Fa);Lb=i(G2,"Constraint"),G2.forEach(r),xb=i(_f," that is fulfilled by fulfilling just one of several constraints."),_f.forEach(r),uf.forEach(r),bp=l(e),I=n(e,"DIV",{class:!0});var Yt=s(I);h(fn.$$.fragment,Yt),Eb=l(Yt),xl=n(Yt,"P",{});var j2=s(xl);Pb=i(j2,"A class for beam scorers to track its progress through a list of constraints."),j2.forEach(r),Fb=l(Yt),E=n(Yt,"DIV",{class:!0});var G=s(E);h(mn.$$.fragment,G),Db=l(G),El=n(G,"P",{});var H2=s(El);zb=i(H2,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),H2.forEach(r),Sb=l(G),ct=n(G,"P",{});var Di=s(ct);Ob=i(Di,"Given constraints "),Pl=n(Di,"CODE",{});var R2=s(Pl);qb=i(R2,"c_i = {t_ij | j == # of tokens}"),R2.forEach(r),Bb=i(Di,`, If we\u2019re not in the middle of progressing through a
specific constraint `),Fl=n(Di,"CODE",{});var K2=s(Fl);Ib=i(K2,"c_i"),K2.forEach(r),Cb=i(Di,", we return:"),Di.forEach(r),Ab=l(G),Dl=n(G,"P",{});var U2=s(Dl);zl=n(U2,"CODE",{});var Y2=s(zl);Nb=i(Y2,"[t_k1 for k in indices of unfulfilled constraints]"),Y2.forEach(r),U2.forEach(r),Wb=l(G),ze=n(G,"P",{});var Xt=s(ze);Vb=i(Xt,`If we are in the middle of a constraint, then we return:
`),Sl=n(Xt,"CODE",{});var X2=s(Sl);Mb=i(X2,"[t_ij]"),X2.forEach(r),Gb=i(Xt,", where "),Ol=n(Xt,"CODE",{});var J2=s(Ol);jb=i(J2,"i"),J2.forEach(r),Hb=i(Xt," is the index of the inprogress constraint, "),ql=n(Xt,"CODE",{});var Q2=s(ql);Rb=i(Q2,"j"),Q2.forEach(r),Kb=i(Xt," is the next step for the constraint."),Xt.forEach(r),Ub=l(G),Bl=n(G,"P",{});var Z2=s(Bl);Yb=i(Z2,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),Z2.forEach(r),G.forEach(r),Xb=l(Yt),Gt=n(Yt,"DIV",{class:!0});var vf=s(Gt);h(hn.$$.fragment,vf),Jb=l(vf),Il=n(vf,"P",{});var ek=s(Il);Qb=i(ek,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),ek.forEach(r),vf.forEach(r),Yt.forEach(r),$p=l(e),lt=n(e,"H2",{class:!0});var bf=s(lt);jt=n(bf,"A",{id:!0,class:!0,href:!0});var tk=s(jt);Cl=n(tk,"SPAN",{});var rk=s(Cl);h(gn.$$.fragment,rk),rk.forEach(r),tk.forEach(r),Zb=l(bf),Al=n(bf,"SPAN",{});var ok=s(Al);e1=i(ok,"BeamSearch"),ok.forEach(r),bf.forEach(r),Tp=l(e),C=n(e,"DIV",{class:!0});var Jt=s(C);h(un.$$.fragment,Jt),t1=l(Jt),Ht=n(Jt,"P",{});var Xl=s(Ht);r1=i(Xl,"Abstract base class for all beam scorers that are used for "),Nl=n(Xl,"CODE",{});var nk=s(Nl);o1=i(nk,"beam_search()"),nk.forEach(r),n1=i(Xl,`and
`),Wl=n(Xl,"CODE",{});var sk=s(Wl);s1=i(sk,"beam_sample()"),sk.forEach(r),Xl.forEach(r),a1=l(Jt),Da=n(Jt,"DIV",{class:!0});var ak=s(Da);h(_n.$$.fragment,ak),ak.forEach(r),i1=l(Jt),za=n(Jt,"DIV",{class:!0});var ik=s(za);h(vn.$$.fragment,ik),ik.forEach(r),Jt.forEach(r),yp=l(e),x=n(e,"DIV",{class:!0});var j=s(x);h(bn.$$.fragment,j),c1=l(j),Sa=n(j,"P",{});var a$=s(Sa);Oa=n(a$,"A",{href:!0});var ck=s(Oa);l1=i(ck,"BeamScorer"),ck.forEach(r),d1=i(a$," implementing standard beam search decoding."),a$.forEach(r),p1=l(j),$n=n(j,"P",{});var $f=s($n);f1=i($f,"Adapted in part from "),Tn=n($f,"A",{href:!0,rel:!0});var lk=s(Tn);m1=i(lk,`Facebook\u2019s XLM beam search
code`),lk.forEach(r),h1=i($f,"."),$f.forEach(r),g1=l(j),qa=n(j,"P",{});var i$=s(qa);u1=i(i$,"Reference for the diverse beam search algorithm and implementation "),yn=n(i$,"A",{href:!0,rel:!0});var dk=s(yn);_1=i(dk,`Ashwin Kalyan\u2019s DBS
implementation`),dk.forEach(r),i$.forEach(r),v1=l(j),Ba=n(j,"DIV",{class:!0});var pk=s(Ba);h(kn.$$.fragment,pk),pk.forEach(r),b1=l(j),Ia=n(j,"DIV",{class:!0});var fk=s(Ia);h(wn.$$.fragment,fk),fk.forEach(r),j.forEach(r),kp=l(e),A=n(e,"DIV",{class:!0});var Qt=s(A);h(Ln.$$.fragment,Qt),$1=l(Qt),Ca=n(Qt,"P",{});var c$=s(Ca);Aa=n(c$,"A",{href:!0});var mk=s(Aa);T1=i(mk,"BeamScorer"),mk.forEach(r),y1=i(c$," implementing constrained beam search decoding."),c$.forEach(r),k1=l(Qt),Na=n(Qt,"DIV",{class:!0});var hk=s(Na);h(xn.$$.fragment,hk),hk.forEach(r),w1=l(Qt),Wa=n(Qt,"DIV",{class:!0});var gk=s(Wa);h(En.$$.fragment,gk),gk.forEach(r),Qt.forEach(r),wp=l(e),dt=n(e,"H2",{class:!0});var Tf=s(dt);Rt=n(Tf,"A",{id:!0,class:!0,href:!0});var uk=s(Rt);Vl=n(uk,"SPAN",{});var _k=s(Vl);h(Pn.$$.fragment,_k),_k.forEach(r),uk.forEach(r),L1=l(Tf),Ml=n(Tf,"SPAN",{});var vk=s(Ml);x1=i(vk,"Utilities"),vk.forEach(r),Tf.forEach(r),Lp=l(e),Se=n(e,"DIV",{class:!0});var zi=s(Se);h(Fn.$$.fragment,zi),E1=l(zi),Gl=n(zi,"P",{});var bk=s(Gl);P1=i(bk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),bk.forEach(r),F1=l(zi),Va=n(zi,"P",{});var l$=s(Va);D1=i(l$,"From: "),Dn=n(l$,"A",{href:!0,rel:!0});var $k=s(Dn);z1=i($k,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),$k.forEach(r),l$.forEach(r),zi.forEach(r),xp=l(e),Oe=n(e,"DIV",{class:!0});var Si=s(Oe);h(zn.$$.fragment,Si),S1=l(Si),jl=n(Si,"P",{});var Tk=s(jl);O1=i(Tk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),Tk.forEach(r),q1=l(Si),Ma=n(Si,"P",{});var d$=s(Ma);B1=i(d$,"From: "),Sn=n(d$,"A",{href:!0,rel:!0});var yk=s(Sn);I1=i(yk,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),yk.forEach(r),d$.forEach(r),Si.forEach(r),this.h()},h(){d(Be,"name","hf:doc:metadata"),d(Be,"content",JSON.stringify(Fk)),d(H,"id","utilities-for-generation"),d(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H,"href","#utilities-for-generation"),d(N,"class","relative group"),d(Bn,"href","/docs/transformers/pr_15988/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(ft,"id","generate-outputs"),d(ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ft,"href","#generate-outputs"),d(Ge,"class","relative group"),d(Cn,"href","/docs/transformers/pr_15988/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(An,"href","/docs/transformers/pr_15988/en/main_classes/output#transformers.file_utils.ModelOutput"),d(Nn,"href","/docs/transformers/pr_15988/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Vn,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(ht,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ht,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(je,"class","relative group"),d(He,"class","docstring"),d(Re,"class","docstring"),d(gt,"class","docstring"),d(R,"class","docstring"),d(ut,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ut,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Ke,"class","relative group"),d(Ue,"class","docstring"),d(Ye,"class","docstring"),d(_t,"class","docstring"),d(K,"class","docstring"),d(vt,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(Xe,"class","relative group"),d(Je,"class","docstring"),d(Qe,"class","docstring"),d(bt,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bt,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(Ze,"class","relative group"),d(et,"class","docstring"),d(tt,"class","docstring"),d($t,"id","transformers.LogitsProcessor"),d($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($t,"href","#transformers.LogitsProcessor"),d(rt,"class","relative group"),d(Kn,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(yt,"class","docstring"),d(U,"class","docstring"),d(Un,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(Yn,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsWarper"),d(Xn,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(Jn,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsWarper"),d(Qn,"class","docstring"),d(Y,"class","docstring"),d(kt,"class","docstring"),d(X,"class","docstring"),d(es,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(ts,"class","docstring"),d(J,"class","docstring"),d(os,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsWarper"),d(ns,"class","docstring"),d(Q,"class","docstring"),d(as,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(is,"class","docstring"),d(Z,"class","docstring"),d(ls,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsWarper"),d(ds,"class","docstring"),d(ee,"class","docstring"),d(fs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsWarper"),d(ms,"class","docstring"),d(te,"class","docstring"),d(hs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(Cr,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Cr,"rel","nofollow"),d(gs,"class","docstring"),d(re,"class","docstring"),d(_s,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(vs,"class","docstring"),d(oe,"class","docstring"),d(bs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(Mr,"href","https://arxiv.org/abs/2010.00904"),d(Mr,"rel","nofollow"),d($s,"class","docstring"),d(ne,"class","docstring"),d(Ts,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(Hr,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(Hr,"rel","nofollow"),d(ys,"class","docstring"),d(se,"class","docstring"),d(ws,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ls,"class","docstring"),d(ae,"class","docstring"),d(xs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(Es,"class","docstring"),d(ie,"class","docstring"),d(Ps,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.LogitsProcessor"),d(Fs,"class","docstring"),d(ce,"class","docstring"),d(Et,"class","docstring"),d(le,"class","docstring"),d(Ds,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(zs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Ss,"class","docstring"),d(de,"class","docstring"),d(Pt,"class","docstring"),d(pe,"class","docstring"),d(qs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Bs,"class","docstring"),d(fe,"class","docstring"),d(Cs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.TFLogitsWarper"),d(As,"class","docstring"),d(me,"class","docstring"),d(Ws,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Vs,"class","docstring"),d(he,"class","docstring"),d(Gs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(js,"class","docstring"),d(ge,"class","docstring"),d(Rs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Ks,"class","docstring"),d(ue,"class","docstring"),d(Us,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(_o,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(_o,"rel","nofollow"),d(Ys,"class","docstring"),d(_e,"class","docstring"),d(Js,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Qs,"class","docstring"),d(ve,"class","docstring"),d(Dt,"class","docstring"),d(be,"class","docstring"),d(Zs,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ea,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ta,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ra,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(oa,"class","docstring"),d($e,"class","docstring"),d(zt,"class","docstring"),d(Te,"class","docstring"),d(sa,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(aa,"class","docstring"),d(ye,"class","docstring"),d(ca,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(la,"class","docstring"),d(ke,"class","docstring"),d(pa,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(fa,"class","docstring"),d(we,"class","docstring"),d(ha,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ga,"class","docstring"),d(Le,"class","docstring"),d(ua,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(_a,"class","docstring"),d(xe,"class","docstring"),d(ba,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d($a,"class","docstring"),d(Ee,"class","docstring"),d(Ot,"id","transformers.StoppingCriteria"),d(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ot,"href","#transformers.StoppingCriteria"),d(ot,"class","relative group"),d(Ta,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.StoppingCriteria"),d(ya,"class","docstring"),d(Pe,"class","docstring"),d(ka,"class","docstring"),d(nt,"class","docstring"),d(wa,"class","docstring"),d(Fe,"class","docstring"),d(La,"class","docstring"),d(De,"class","docstring"),d(Bt,"id","transformers.Constraint"),d(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bt,"href","#transformers.Constraint"),d(st,"class","relative group"),d(xa,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.Constraint"),d(Ct,"class","docstring"),d(At,"class","docstring"),d(Nt,"class","docstring"),d(Wt,"class","docstring"),d(Vt,"class","docstring"),d(Mt,"class","docstring"),d(Ae,"class","docstring"),d($,"class","docstring"),d(Pa,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.Constraint"),d(at,"class","docstring"),d(Fa,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.Constraint"),d(it,"class","docstring"),d(E,"class","docstring"),d(Gt,"class","docstring"),d(I,"class","docstring"),d(jt,"id","transformers.BeamScorer"),d(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jt,"href","#transformers.BeamScorer"),d(lt,"class","relative group"),d(Da,"class","docstring"),d(za,"class","docstring"),d(C,"class","docstring"),d(Oa,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.BeamScorer"),d(Tn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(Tn,"rel","nofollow"),d(yn,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(yn,"rel","nofollow"),d(Ba,"class","docstring"),d(Ia,"class","docstring"),d(x,"class","docstring"),d(Aa,"href","/docs/transformers/pr_15988/en/internal/generation_utils#transformers.BeamScorer"),d(Na,"class","docstring"),d(Wa,"class","docstring"),d(A,"class","docstring"),d(Rt,"id","transformers.top_k_top_p_filtering"),d(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rt,"href","#transformers.top_k_top_p_filtering"),d(dt,"class","relative group"),d(Dn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Dn,"rel","nofollow"),d(Se,"class","docstring"),d(Sn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Sn,"rel","nofollow"),d(Oe,"class","docstring")},m(e,p){t(document.head,Be),f(e,qn,p),f(e,N,p),t(N,H),t(H,Oi),g(Zt,Oi,null),t(N,kf),t(N,qi),t(qi,wf),f(e,Jl,p),f(e,y,p),t(y,Lf),t(y,Bn),t(Bn,xf),t(y,Ef),t(y,Bi),t(Bi,Pf),t(y,Ff),t(y,Ii),t(Ii,Df),t(y,zf),t(y,Ci),t(Ci,Sf),t(y,Of),t(y,Ai),t(Ai,qf),t(y,Bf),t(y,Ni),t(Ni,If),t(y,Cf),t(y,Wi),t(Wi,Af),f(e,Ql,p),f(e,In,p),t(In,Nf),f(e,Zl,p),f(e,Ge,p),t(Ge,ft),t(ft,Vi),g(er,Vi,null),t(Ge,Wf),t(Ge,Mi),t(Mi,Vf),f(e,ed,p),f(e,W,p),t(W,Mf),t(W,Cn),t(Cn,Gf),t(W,jf),t(W,An),t(An,Hf),t(W,Rf),t(W,Nn),t(Nn,Kf),t(W,Uf),f(e,td,p),f(e,Wn,p),t(Wn,Yf),f(e,rd,p),g(tr,e,p),f(e,od,p),f(e,Ie,p),t(Ie,Xf),t(Ie,Gi),t(Gi,Jf),t(Ie,Qf),t(Ie,Vn),t(Vn,Zf),t(Ie,em),f(e,nd,p),f(e,V,p),t(V,Mn),t(Mn,ji),t(ji,tm),t(Mn,rm),t(V,om),t(V,Gn),t(Gn,Hi),t(Hi,nm),t(Gn,sm),t(V,am),t(V,jn),t(jn,Ri),t(Ri,im),t(jn,cm),t(V,lm),t(V,Hn),t(Hn,Ki),t(Ki,dm),t(Hn,pm),f(e,sd,p),f(e,k,p),t(k,fm),t(k,Ui),t(Ui,mm),t(k,hm),t(k,Yi),t(Yi,gm),t(k,um),t(k,Xi),t(Xi,_m),t(k,vm),t(k,Ji),t(Ji,bm),t(k,$m),t(k,Qi),t(Qi,Tm),t(k,ym),t(k,Zi),t(Zi,km),t(k,wm),f(e,ad,p),f(e,F,p),t(F,Lm),t(F,ec),t(ec,xm),t(F,Em),t(F,tc),t(tc,Pm),t(F,Fm),t(F,rc),t(rc,Dm),t(F,zm),t(F,oc),t(oc,Sm),t(F,Om),f(e,id,p),f(e,D,p),t(D,qm),t(D,nc),t(nc,Bm),t(D,Im),t(D,sc),t(sc,Cm),t(D,Am),t(D,ac),t(ac,Nm),t(D,Wm),t(D,ic),t(ic,Vm),t(D,Mm),f(e,cd,p),g(rr,e,p),f(e,ld,p),f(e,mt,p),t(mt,Gm),t(mt,cc),t(cc,jm),t(mt,Hm),f(e,dd,p),f(e,z,p),t(z,Rm),t(z,lc),t(lc,Km),t(z,Um),t(z,dc),t(dc,Ym),t(z,Xm),t(z,pc),t(pc,Jm),t(z,Qm),t(z,fc),t(fc,Zm),t(z,eh),f(e,pd,p),f(e,Rn,p),t(Rn,th),f(e,fd,p),f(e,je,p),t(je,ht),t(ht,mc),g(or,mc,null),t(je,rh),t(je,hc),t(hc,oh),f(e,md,p),f(e,He,p),g(nr,He,null),t(He,nh),t(He,gc),t(gc,sh),f(e,hd,p),f(e,Re,p),g(sr,Re,null),t(Re,ah),t(Re,uc),t(uc,ih),f(e,gd,p),f(e,R,p),g(ar,R,null),t(R,ch),t(R,_c),t(_c,lh),t(R,dh),t(R,gt),g(ir,gt,null),t(gt,ph),t(gt,vc),t(vc,fh),f(e,ud,p),f(e,Ke,p),t(Ke,ut),t(ut,bc),g(cr,bc,null),t(Ke,mh),t(Ke,$c),t($c,hh),f(e,_d,p),f(e,Ue,p),g(lr,Ue,null),t(Ue,gh),t(Ue,Tc),t(Tc,uh),f(e,vd,p),f(e,Ye,p),g(dr,Ye,null),t(Ye,_h),t(Ye,yc),t(yc,vh),f(e,bd,p),f(e,K,p),g(pr,K,null),t(K,bh),t(K,kc),t(kc,$h),t(K,Th),t(K,_t),g(fr,_t,null),t(_t,yh),t(_t,wc),t(wc,kh),f(e,$d,p),f(e,Xe,p),t(Xe,vt),t(vt,Lc),g(mr,Lc,null),t(Xe,wh),t(Xe,xc),t(xc,Lh),f(e,Td,p),f(e,Je,p),g(hr,Je,null),t(Je,xh),t(Je,Ec),t(Ec,Eh),f(e,yd,p),f(e,Qe,p),g(gr,Qe,null),t(Qe,Ph),t(Qe,Pc),t(Pc,Fh),f(e,kd,p),f(e,Ze,p),t(Ze,bt),t(bt,Fc),g(ur,Fc,null),t(Ze,Dh),t(Ze,Dc),t(Dc,zh),f(e,wd,p),f(e,et,p),g(_r,et,null),t(et,Sh),t(et,zc),t(zc,Oh),f(e,Ld,p),f(e,tt,p),g(vr,tt,null),t(tt,qh),t(tt,Sc),t(Sc,Bh),f(e,xd,p),f(e,rt,p),t(rt,$t),t($t,Oc),g(br,Oc,null),t(rt,Ih),t(rt,qc),t(qc,Ch),f(e,Ed,p),f(e,Tt,p),t(Tt,Ah),t(Tt,Kn),t(Kn,Nh),t(Tt,Wh),f(e,Pd,p),f(e,U,p),g($r,U,null),t(U,Vh),t(U,Bc),t(Bc,Mh),t(U,Gh),t(U,yt),g(Tr,yt,null),t(yt,jh),t(yt,Ic),t(Ic,Hh),f(e,Fd,p),f(e,Y,p),g(yr,Y,null),t(Y,Rh),t(Y,w),t(w,Kh),t(w,Un),t(Un,Uh),t(w,Yh),t(w,Yn),t(Yn,Xh),t(w,Jh),t(w,Cc),t(Cc,Qh),t(w,Zh),t(w,Ac),t(Ac,Nc),t(Nc,eg),t(w,tg),t(w,Xn),t(Xn,rg),t(w,og),t(w,Jn),t(Jn,ng),t(w,sg),t(Y,ag),t(Y,Qn),g(kr,Qn,null),f(e,Dd,p),f(e,X,p),g(wr,X,null),t(X,ig),t(X,Wc),t(Wc,cg),t(X,lg),t(X,kt),g(Lr,kt,null),t(kt,dg),t(kt,Vc),t(Vc,pg),f(e,zd,p),f(e,J,p),g(xr,J,null),t(J,fg),t(J,Zn),t(Zn,es),t(es,mg),t(Zn,hg),t(J,gg),t(J,ts),g(Er,ts,null),f(e,Sd,p),f(e,Q,p),g(Pr,Q,null),t(Q,ug),t(Q,rs),t(rs,os),t(os,_g),t(rs,vg),t(Q,bg),t(Q,ns),g(Fr,ns,null),f(e,Od,p),f(e,Z,p),g(Dr,Z,null),t(Z,$g),t(Z,ss),t(ss,as),t(as,Tg),t(ss,yg),t(Z,kg),t(Z,is),g(zr,is,null),f(e,qd,p),f(e,ee,p),g(Sr,ee,null),t(ee,wg),t(ee,cs),t(cs,ls),t(ls,Lg),t(cs,xg),t(ee,Eg),t(ee,ds),g(Or,ds,null),f(e,Bd,p),f(e,te,p),g(qr,te,null),t(te,Pg),t(te,ps),t(ps,fs),t(fs,Fg),t(ps,Dg),t(te,zg),t(te,ms),g(Br,ms,null),f(e,Id,p),f(e,re,p),g(Ir,re,null),t(re,Sg),t(re,wt),t(wt,hs),t(hs,Og),t(wt,qg),t(wt,Cr),t(Cr,Bg),t(wt,Ig),t(re,Cg),t(re,gs),g(Ar,gs,null),f(e,Cd,p),f(e,oe,p),g(Nr,oe,null),t(oe,Ag),t(oe,us),t(us,_s),t(_s,Ng),t(us,Wg),t(oe,Vg),t(oe,vs),g(Wr,vs,null),f(e,Ad,p),f(e,ne,p),g(Vr,ne,null),t(ne,Mg),t(ne,Lt),t(Lt,bs),t(bs,Gg),t(Lt,jg),t(Lt,Mr),t(Mr,Hg),t(Lt,Rg),t(ne,Kg),t(ne,$s),g(Gr,$s,null),f(e,Nd,p),f(e,se,p),g(jr,se,null),t(se,Ug),t(se,Ce),t(Ce,Ts),t(Ts,Yg),t(Ce,Xg),t(Ce,Mc),t(Mc,Jg),t(Ce,Qg),t(Ce,Hr),t(Hr,Zg),t(Ce,eu),t(se,tu),t(se,ys),g(Rr,ys,null),f(e,Wd,p),f(e,ae,p),g(Kr,ae,null),t(ae,ru),t(ae,ks),t(ks,ws),t(ws,ou),t(ks,nu),t(ae,su),t(ae,Ls),g(Ur,Ls,null),f(e,Vd,p),f(e,ie,p),g(Yr,ie,null),t(ie,au),t(ie,xt),t(xt,xs),t(xs,iu),t(xt,cu),t(xt,Gc),t(Gc,lu),t(xt,du),t(ie,pu),t(ie,Es),g(Xr,Es,null),f(e,Md,p),f(e,ce,p),g(Jr,ce,null),t(ce,fu),t(ce,M),t(M,Ps),t(Ps,mu),t(M,hu),t(M,jc),t(jc,gu),t(M,uu),t(M,Hc),t(Hc,_u),t(M,vu),t(M,Rc),t(Rc,bu),t(M,$u),t(ce,Tu),t(ce,Fs),g(Qr,Fs,null),f(e,Gd,p),f(e,le,p),g(Zr,le,null),t(le,yu),t(le,Kc),t(Kc,ku),t(le,wu),t(le,Et),g(eo,Et,null),t(Et,Lu),t(Et,Uc),t(Uc,xu),f(e,jd,p),f(e,de,p),g(to,de,null),t(de,Eu),t(de,B),t(B,Pu),t(B,Ds),t(Ds,Fu),t(B,Du),t(B,Yc),t(Yc,zu),t(B,Su),t(B,Xc),t(Xc,Jc),t(Jc,Ou),t(B,qu),t(B,zs),t(zs,Bu),t(B,Iu),t(de,Cu),t(de,Ss),g(ro,Ss,null),f(e,Hd,p),f(e,pe,p),g(oo,pe,null),t(pe,Au),t(pe,Qc),t(Qc,Nu),t(pe,Wu),t(pe,Pt),g(no,Pt,null),t(Pt,Vu),t(Pt,Zc),t(Zc,Mu),f(e,Rd,p),f(e,fe,p),g(so,fe,null),t(fe,Gu),t(fe,Os),t(Os,qs),t(qs,ju),t(Os,Hu),t(fe,Ru),t(fe,Bs),g(ao,Bs,null),f(e,Kd,p),f(e,me,p),g(io,me,null),t(me,Ku),t(me,Is),t(Is,Cs),t(Cs,Uu),t(Is,Yu),t(me,Xu),t(me,As),g(co,As,null),f(e,Ud,p),f(e,he,p),g(lo,he,null),t(he,Ju),t(he,Ns),t(Ns,Ws),t(Ws,Qu),t(Ns,Zu),t(he,e_),t(he,Vs),g(po,Vs,null),f(e,Yd,p),f(e,ge,p),g(fo,ge,null),t(ge,t_),t(ge,Ms),t(Ms,Gs),t(Gs,r_),t(Ms,o_),t(ge,n_),t(ge,js),g(mo,js,null),f(e,Xd,p),f(e,ue,p),g(ho,ue,null),t(ue,s_),t(ue,Hs),t(Hs,Rs),t(Rs,a_),t(Hs,i_),t(ue,c_),t(ue,Ks),g(go,Ks,null),f(e,Jd,p),f(e,_e,p),g(uo,_e,null),t(_e,l_),t(_e,Ft),t(Ft,Us),t(Us,d_),t(Ft,p_),t(Ft,_o),t(_o,f_),t(Ft,m_),t(_e,h_),t(_e,Ys),g(vo,Ys,null),f(e,Qd,p),f(e,ve,p),g(bo,ve,null),t(ve,g_),t(ve,Xs),t(Xs,Js),t(Js,u_),t(Xs,__),t(ve,v_),t(ve,Qs),g($o,Qs,null),f(e,Zd,p),f(e,be,p),g(To,be,null),t(be,b_),t(be,el),t(el,$_),t(be,T_),t(be,Dt),g(yo,Dt,null),t(Dt,y_),t(Dt,tl),t(tl,k_),f(e,ep,p),f(e,$e,p),g(ko,$e,null),t($e,w_),t($e,L),t(L,L_),t(L,Zs),t(Zs,x_),t(L,E_),t(L,ea),t(ea,P_),t(L,F_),t(L,rl),t(rl,D_),t(L,z_),t(L,ol),t(ol,nl),t(nl,S_),t(L,O_),t(L,ta),t(ta,q_),t(L,B_),t(L,ra),t(ra,I_),t(L,C_),t($e,A_),t($e,oa),g(wo,oa,null),f(e,tp,p),f(e,Te,p),g(Lo,Te,null),t(Te,N_),t(Te,sl),t(sl,W_),t(Te,V_),t(Te,zt),g(xo,zt,null),t(zt,M_),t(zt,al),t(al,G_),f(e,rp,p),f(e,ye,p),g(Eo,ye,null),t(ye,j_),t(ye,na),t(na,sa),t(sa,H_),t(na,R_),t(ye,K_),t(ye,aa),g(Po,aa,null),f(e,op,p),f(e,ke,p),g(Fo,ke,null),t(ke,U_),t(ke,ia),t(ia,ca),t(ca,Y_),t(ia,X_),t(ke,J_),t(ke,la),g(Do,la,null),f(e,np,p),f(e,we,p),g(zo,we,null),t(we,Q_),t(we,da),t(da,pa),t(pa,Z_),t(da,ev),t(we,tv),t(we,fa),g(So,fa,null),f(e,sp,p),f(e,Le,p),g(Oo,Le,null),t(Le,rv),t(Le,ma),t(ma,ha),t(ha,ov),t(ma,nv),t(Le,sv),t(Le,ga),g(qo,ga,null),f(e,ap,p),f(e,xe,p),g(Bo,xe,null),t(xe,av),t(xe,St),t(St,ua),t(ua,iv),t(St,cv),t(St,il),t(il,lv),t(St,dv),t(xe,pv),t(xe,_a),g(Io,_a,null),f(e,ip,p),f(e,Ee,p),g(Co,Ee,null),t(Ee,fv),t(Ee,va),t(va,ba),t(ba,mv),t(va,hv),t(Ee,gv),t(Ee,$a),g(Ao,$a,null),f(e,cp,p),f(e,ot,p),t(ot,Ot),t(Ot,cl),g(No,cl,null),t(ot,uv),t(ot,ll),t(ll,_v),f(e,lp,p),f(e,qt,p),t(qt,vv),t(qt,Ta),t(Ta,bv),t(qt,$v),f(e,dp,p),f(e,Pe,p),g(Wo,Pe,null),t(Pe,Tv),t(Pe,dl),t(dl,yv),t(Pe,kv),t(Pe,ya),g(Vo,ya,null),f(e,pp,p),f(e,nt,p),g(Mo,nt,null),t(nt,wv),t(nt,ka),g(Go,ka,null),f(e,fp,p),f(e,Fe,p),g(jo,Fe,null),t(Fe,Lv),t(Fe,Ho),t(Ho,xv),t(Ho,pl),t(pl,Ev),t(Ho,Pv),t(Fe,Fv),t(Fe,wa),g(Ro,wa,null),f(e,mp,p),f(e,De,p),g(Ko,De,null),t(De,Dv),t(De,Uo),t(Uo,zv),t(Uo,fl),t(fl,Sv),t(Uo,Ov),t(De,qv),t(De,La),g(Yo,La,null),f(e,hp,p),f(e,st,p),t(st,Bt),t(Bt,ml),g(Xo,ml,null),t(st,Bv),t(st,hl),t(hl,Iv),f(e,gp,p),f(e,It,p),t(It,Cv),t(It,xa),t(xa,Av),t(It,Nv),f(e,up,p),f(e,$,p),g(Jo,$,null),t($,Wv),t($,gl),t(gl,Vv),t($,Mv),t($,ul),t(ul,Gv),t($,jv),g(Qo,$,null),t($,Hv),t($,_l),t(_l,Rv),t($,Kv),t($,Ct),g(Zo,Ct,null),t(Ct,Uv),t(Ct,vl),t(vl,Yv),t($,Xv),t($,At),g(en,At,null),t(At,Jv),t(At,bl),t(bl,Qv),t($,Zv),t($,Nt),g(tn,Nt,null),t(Nt,eb),t(Nt,$l),t($l,tb),t($,rb),t($,Wt),g(rn,Wt,null),t(Wt,ob),t(Wt,on),t(on,nb),t(on,Tl),t(Tl,sb),t(on,ab),t($,ib),t($,Vt),g(nn,Vt,null),t(Vt,cb),t(Vt,yl),t(yl,lb),t($,db),t($,Mt),g(sn,Mt,null),t(Mt,pb),t(Mt,kl),t(kl,fb),t($,mb),t($,Ae),g(an,Ae,null),t(Ae,hb),t(Ae,cn),t(cn,gb),t(cn,wl),t(wl,ub),t(cn,_b),t(Ae,vb),t(Ae,Ll),t(Ll,bb),f(e,_p,p),f(e,at,p),g(ln,at,null),t(at,$b),t(at,Ea),t(Ea,Pa),t(Pa,Tb),t(Ea,yb),f(e,vp,p),f(e,it,p),g(dn,it,null),t(it,kb),t(it,pn),t(pn,wb),t(pn,Fa),t(Fa,Lb),t(pn,xb),f(e,bp,p),f(e,I,p),g(fn,I,null),t(I,Eb),t(I,xl),t(xl,Pb),t(I,Fb),t(I,E),g(mn,E,null),t(E,Db),t(E,El),t(El,zb),t(E,Sb),t(E,ct),t(ct,Ob),t(ct,Pl),t(Pl,qb),t(ct,Bb),t(ct,Fl),t(Fl,Ib),t(ct,Cb),t(E,Ab),t(E,Dl),t(Dl,zl),t(zl,Nb),t(E,Wb),t(E,ze),t(ze,Vb),t(ze,Sl),t(Sl,Mb),t(ze,Gb),t(ze,Ol),t(Ol,jb),t(ze,Hb),t(ze,ql),t(ql,Rb),t(ze,Kb),t(E,Ub),t(E,Bl),t(Bl,Yb),t(I,Xb),t(I,Gt),g(hn,Gt,null),t(Gt,Jb),t(Gt,Il),t(Il,Qb),f(e,$p,p),f(e,lt,p),t(lt,jt),t(jt,Cl),g(gn,Cl,null),t(lt,Zb),t(lt,Al),t(Al,e1),f(e,Tp,p),f(e,C,p),g(un,C,null),t(C,t1),t(C,Ht),t(Ht,r1),t(Ht,Nl),t(Nl,o1),t(Ht,n1),t(Ht,Wl),t(Wl,s1),t(C,a1),t(C,Da),g(_n,Da,null),t(C,i1),t(C,za),g(vn,za,null),f(e,yp,p),f(e,x,p),g(bn,x,null),t(x,c1),t(x,Sa),t(Sa,Oa),t(Oa,l1),t(Sa,d1),t(x,p1),t(x,$n),t($n,f1),t($n,Tn),t(Tn,m1),t($n,h1),t(x,g1),t(x,qa),t(qa,u1),t(qa,yn),t(yn,_1),t(x,v1),t(x,Ba),g(kn,Ba,null),t(x,b1),t(x,Ia),g(wn,Ia,null),f(e,kp,p),f(e,A,p),g(Ln,A,null),t(A,$1),t(A,Ca),t(Ca,Aa),t(Aa,T1),t(Ca,y1),t(A,k1),t(A,Na),g(xn,Na,null),t(A,w1),t(A,Wa),g(En,Wa,null),f(e,wp,p),f(e,dt,p),t(dt,Rt),t(Rt,Vl),g(Pn,Vl,null),t(dt,L1),t(dt,Ml),t(Ml,x1),f(e,Lp,p),f(e,Se,p),g(Fn,Se,null),t(Se,E1),t(Se,Gl),t(Gl,P1),t(Se,F1),t(Se,Va),t(Va,D1),t(Va,Dn),t(Dn,z1),f(e,xp,p),f(e,Oe,p),g(zn,Oe,null),t(Oe,S1),t(Oe,jl),t(jl,O1),t(Oe,q1),t(Oe,Ma),t(Ma,B1),t(Ma,Sn),t(Sn,I1),Ep=!0},p:Ek,i(e){Ep||(u(Zt.$$.fragment,e),u(er.$$.fragment,e),u(tr.$$.fragment,e),u(rr.$$.fragment,e),u(or.$$.fragment,e),u(nr.$$.fragment,e),u(sr.$$.fragment,e),u(ar.$$.fragment,e),u(ir.$$.fragment,e),u(cr.$$.fragment,e),u(lr.$$.fragment,e),u(dr.$$.fragment,e),u(pr.$$.fragment,e),u(fr.$$.fragment,e),u(mr.$$.fragment,e),u(hr.$$.fragment,e),u(gr.$$.fragment,e),u(ur.$$.fragment,e),u(_r.$$.fragment,e),u(vr.$$.fragment,e),u(br.$$.fragment,e),u($r.$$.fragment,e),u(Tr.$$.fragment,e),u(yr.$$.fragment,e),u(kr.$$.fragment,e),u(wr.$$.fragment,e),u(Lr.$$.fragment,e),u(xr.$$.fragment,e),u(Er.$$.fragment,e),u(Pr.$$.fragment,e),u(Fr.$$.fragment,e),u(Dr.$$.fragment,e),u(zr.$$.fragment,e),u(Sr.$$.fragment,e),u(Or.$$.fragment,e),u(qr.$$.fragment,e),u(Br.$$.fragment,e),u(Ir.$$.fragment,e),u(Ar.$$.fragment,e),u(Nr.$$.fragment,e),u(Wr.$$.fragment,e),u(Vr.$$.fragment,e),u(Gr.$$.fragment,e),u(jr.$$.fragment,e),u(Rr.$$.fragment,e),u(Kr.$$.fragment,e),u(Ur.$$.fragment,e),u(Yr.$$.fragment,e),u(Xr.$$.fragment,e),u(Jr.$$.fragment,e),u(Qr.$$.fragment,e),u(Zr.$$.fragment,e),u(eo.$$.fragment,e),u(to.$$.fragment,e),u(ro.$$.fragment,e),u(oo.$$.fragment,e),u(no.$$.fragment,e),u(so.$$.fragment,e),u(ao.$$.fragment,e),u(io.$$.fragment,e),u(co.$$.fragment,e),u(lo.$$.fragment,e),u(po.$$.fragment,e),u(fo.$$.fragment,e),u(mo.$$.fragment,e),u(ho.$$.fragment,e),u(go.$$.fragment,e),u(uo.$$.fragment,e),u(vo.$$.fragment,e),u(bo.$$.fragment,e),u($o.$$.fragment,e),u(To.$$.fragment,e),u(yo.$$.fragment,e),u(ko.$$.fragment,e),u(wo.$$.fragment,e),u(Lo.$$.fragment,e),u(xo.$$.fragment,e),u(Eo.$$.fragment,e),u(Po.$$.fragment,e),u(Fo.$$.fragment,e),u(Do.$$.fragment,e),u(zo.$$.fragment,e),u(So.$$.fragment,e),u(Oo.$$.fragment,e),u(qo.$$.fragment,e),u(Bo.$$.fragment,e),u(Io.$$.fragment,e),u(Co.$$.fragment,e),u(Ao.$$.fragment,e),u(No.$$.fragment,e),u(Wo.$$.fragment,e),u(Vo.$$.fragment,e),u(Mo.$$.fragment,e),u(Go.$$.fragment,e),u(jo.$$.fragment,e),u(Ro.$$.fragment,e),u(Ko.$$.fragment,e),u(Yo.$$.fragment,e),u(Xo.$$.fragment,e),u(Jo.$$.fragment,e),u(Qo.$$.fragment,e),u(Zo.$$.fragment,e),u(en.$$.fragment,e),u(tn.$$.fragment,e),u(rn.$$.fragment,e),u(nn.$$.fragment,e),u(sn.$$.fragment,e),u(an.$$.fragment,e),u(ln.$$.fragment,e),u(dn.$$.fragment,e),u(fn.$$.fragment,e),u(mn.$$.fragment,e),u(hn.$$.fragment,e),u(gn.$$.fragment,e),u(un.$$.fragment,e),u(_n.$$.fragment,e),u(vn.$$.fragment,e),u(bn.$$.fragment,e),u(kn.$$.fragment,e),u(wn.$$.fragment,e),u(Ln.$$.fragment,e),u(xn.$$.fragment,e),u(En.$$.fragment,e),u(Pn.$$.fragment,e),u(Fn.$$.fragment,e),u(zn.$$.fragment,e),Ep=!0)},o(e){_(Zt.$$.fragment,e),_(er.$$.fragment,e),_(tr.$$.fragment,e),_(rr.$$.fragment,e),_(or.$$.fragment,e),_(nr.$$.fragment,e),_(sr.$$.fragment,e),_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(cr.$$.fragment,e),_(lr.$$.fragment,e),_(dr.$$.fragment,e),_(pr.$$.fragment,e),_(fr.$$.fragment,e),_(mr.$$.fragment,e),_(hr.$$.fragment,e),_(gr.$$.fragment,e),_(ur.$$.fragment,e),_(_r.$$.fragment,e),_(vr.$$.fragment,e),_(br.$$.fragment,e),_($r.$$.fragment,e),_(Tr.$$.fragment,e),_(yr.$$.fragment,e),_(kr.$$.fragment,e),_(wr.$$.fragment,e),_(Lr.$$.fragment,e),_(xr.$$.fragment,e),_(Er.$$.fragment,e),_(Pr.$$.fragment,e),_(Fr.$$.fragment,e),_(Dr.$$.fragment,e),_(zr.$$.fragment,e),_(Sr.$$.fragment,e),_(Or.$$.fragment,e),_(qr.$$.fragment,e),_(Br.$$.fragment,e),_(Ir.$$.fragment,e),_(Ar.$$.fragment,e),_(Nr.$$.fragment,e),_(Wr.$$.fragment,e),_(Vr.$$.fragment,e),_(Gr.$$.fragment,e),_(jr.$$.fragment,e),_(Rr.$$.fragment,e),_(Kr.$$.fragment,e),_(Ur.$$.fragment,e),_(Yr.$$.fragment,e),_(Xr.$$.fragment,e),_(Jr.$$.fragment,e),_(Qr.$$.fragment,e),_(Zr.$$.fragment,e),_(eo.$$.fragment,e),_(to.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(po.$$.fragment,e),_(fo.$$.fragment,e),_(mo.$$.fragment,e),_(ho.$$.fragment,e),_(go.$$.fragment,e),_(uo.$$.fragment,e),_(vo.$$.fragment,e),_(bo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(wo.$$.fragment,e),_(Lo.$$.fragment,e),_(xo.$$.fragment,e),_(Eo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(zo.$$.fragment,e),_(So.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Co.$$.fragment,e),_(Ao.$$.fragment,e),_(No.$$.fragment,e),_(Wo.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ro.$$.fragment,e),_(Ko.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(en.$$.fragment,e),_(tn.$$.fragment,e),_(rn.$$.fragment,e),_(nn.$$.fragment,e),_(sn.$$.fragment,e),_(an.$$.fragment,e),_(ln.$$.fragment,e),_(dn.$$.fragment,e),_(fn.$$.fragment,e),_(mn.$$.fragment,e),_(hn.$$.fragment,e),_(gn.$$.fragment,e),_(un.$$.fragment,e),_(_n.$$.fragment,e),_(vn.$$.fragment,e),_(bn.$$.fragment,e),_(kn.$$.fragment,e),_(wn.$$.fragment,e),_(Ln.$$.fragment,e),_(xn.$$.fragment,e),_(En.$$.fragment,e),_(Pn.$$.fragment,e),_(Fn.$$.fragment,e),_(zn.$$.fragment,e),Ep=!1},d(e){r(Be),e&&r(qn),e&&r(N),v(Zt),e&&r(Jl),e&&r(y),e&&r(Ql),e&&r(In),e&&r(Zl),e&&r(Ge),v(er),e&&r(ed),e&&r(W),e&&r(td),e&&r(Wn),e&&r(rd),v(tr,e),e&&r(od),e&&r(Ie),e&&r(nd),e&&r(V),e&&r(sd),e&&r(k),e&&r(ad),e&&r(F),e&&r(id),e&&r(D),e&&r(cd),v(rr,e),e&&r(ld),e&&r(mt),e&&r(dd),e&&r(z),e&&r(pd),e&&r(Rn),e&&r(fd),e&&r(je),v(or),e&&r(md),e&&r(He),v(nr),e&&r(hd),e&&r(Re),v(sr),e&&r(gd),e&&r(R),v(ar),v(ir),e&&r(ud),e&&r(Ke),v(cr),e&&r(_d),e&&r(Ue),v(lr),e&&r(vd),e&&r(Ye),v(dr),e&&r(bd),e&&r(K),v(pr),v(fr),e&&r($d),e&&r(Xe),v(mr),e&&r(Td),e&&r(Je),v(hr),e&&r(yd),e&&r(Qe),v(gr),e&&r(kd),e&&r(Ze),v(ur),e&&r(wd),e&&r(et),v(_r),e&&r(Ld),e&&r(tt),v(vr),e&&r(xd),e&&r(rt),v(br),e&&r(Ed),e&&r(Tt),e&&r(Pd),e&&r(U),v($r),v(Tr),e&&r(Fd),e&&r(Y),v(yr),v(kr),e&&r(Dd),e&&r(X),v(wr),v(Lr),e&&r(zd),e&&r(J),v(xr),v(Er),e&&r(Sd),e&&r(Q),v(Pr),v(Fr),e&&r(Od),e&&r(Z),v(Dr),v(zr),e&&r(qd),e&&r(ee),v(Sr),v(Or),e&&r(Bd),e&&r(te),v(qr),v(Br),e&&r(Id),e&&r(re),v(Ir),v(Ar),e&&r(Cd),e&&r(oe),v(Nr),v(Wr),e&&r(Ad),e&&r(ne),v(Vr),v(Gr),e&&r(Nd),e&&r(se),v(jr),v(Rr),e&&r(Wd),e&&r(ae),v(Kr),v(Ur),e&&r(Vd),e&&r(ie),v(Yr),v(Xr),e&&r(Md),e&&r(ce),v(Jr),v(Qr),e&&r(Gd),e&&r(le),v(Zr),v(eo),e&&r(jd),e&&r(de),v(to),v(ro),e&&r(Hd),e&&r(pe),v(oo),v(no),e&&r(Rd),e&&r(fe),v(so),v(ao),e&&r(Kd),e&&r(me),v(io),v(co),e&&r(Ud),e&&r(he),v(lo),v(po),e&&r(Yd),e&&r(ge),v(fo),v(mo),e&&r(Xd),e&&r(ue),v(ho),v(go),e&&r(Jd),e&&r(_e),v(uo),v(vo),e&&r(Qd),e&&r(ve),v(bo),v($o),e&&r(Zd),e&&r(be),v(To),v(yo),e&&r(ep),e&&r($e),v(ko),v(wo),e&&r(tp),e&&r(Te),v(Lo),v(xo),e&&r(rp),e&&r(ye),v(Eo),v(Po),e&&r(op),e&&r(ke),v(Fo),v(Do),e&&r(np),e&&r(we),v(zo),v(So),e&&r(sp),e&&r(Le),v(Oo),v(qo),e&&r(ap),e&&r(xe),v(Bo),v(Io),e&&r(ip),e&&r(Ee),v(Co),v(Ao),e&&r(cp),e&&r(ot),v(No),e&&r(lp),e&&r(qt),e&&r(dp),e&&r(Pe),v(Wo),v(Vo),e&&r(pp),e&&r(nt),v(Mo),v(Go),e&&r(fp),e&&r(Fe),v(jo),v(Ro),e&&r(mp),e&&r(De),v(Ko),v(Yo),e&&r(hp),e&&r(st),v(Xo),e&&r(gp),e&&r(It),e&&r(up),e&&r($),v(Jo),v(Qo),v(Zo),v(en),v(tn),v(rn),v(nn),v(sn),v(an),e&&r(_p),e&&r(at),v(ln),e&&r(vp),e&&r(it),v(dn),e&&r(bp),e&&r(I),v(fn),v(mn),v(hn),e&&r($p),e&&r(lt),v(gn),e&&r(Tp),e&&r(C),v(un),v(_n),v(vn),e&&r(yp),e&&r(x),v(bn),v(kn),v(wn),e&&r(kp),e&&r(A),v(Ln),v(xn),v(En),e&&r(wp),e&&r(dt),v(Pn),e&&r(Lp),e&&r(Se),v(Fn),e&&r(xp),e&&r(Oe),v(zn)}}}const Fk={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function Dk(yf,Be,qn){let{fw:N}=Be;return yf.$$set=H=>{"fw"in H&&qn(0,N=H.fw)},[N]}class Ik extends kk{constructor(Be){super();wk(this,Be,Dk,Pk,Lk,{fw:0})}}export{Ik as default,Fk as metadata};
