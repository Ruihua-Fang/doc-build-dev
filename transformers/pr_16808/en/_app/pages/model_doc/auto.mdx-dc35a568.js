import{S as k5t,i as S5t,s as R5t,e as a,k as l,w as f,t as o,M as B5t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as P5t}from"../../chunks/vendor-6b77c823.js";import{T as ZBr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-17b815d9.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function $5t(If){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,E5,Nf,xe,co,ji,Gn,C5,On,Vn,w5,Di,Xn,A5,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),ge=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),E5=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),C5=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),w5=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),A5=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),de=n(ue,"CODE",{});var px=s(de);Ce=r(px,"NewModelConfig"),px.forEach(t),lo=r(ue," is a subclass of "),ge=n(ue,"CODE",{});var Oi=s(ge);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(ue,`, make sure its
`),Ii=n(ue,"CODE",{});var _x=s(Ii);qf=r(_x,"model_type"),_x.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),qi=n(ue,"CODE",{});var ux=s(qi);Ni=r(ux,'"new-model"'),ux.forEach(t),E5=r(ue,")."),ue.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),C5=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var bx=s(On);Vn=r(bx,"PreTrainedModel"),bx.forEach(t),w5=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),A5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var Fx=s(Gi);jf=r(Fx,"NewModelConfig"),Fx.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,ge),e(ge,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,E5),b(fo,Nf,ue),b(fo,xe,ue),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,C5),e(xe,On),e(On,Vn),e(xe,w5),e(xe,Di),e(Di,Xn),e(xe,A5),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function I5t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function q5t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function N5t(If){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,qf,fa,qi,Ni,E5,Nf,xe,co,ji,Gn,C5,On,Vn,w5,Di,Xn,A5,Gi,jf,Da,fo,ue,px,Oi,_x,ux,zo,Ga,bx,Df,Fx,LIe,pRe,Vi,Gf,oY,y5,xIe,rY,kIe,_Re,zn,SIe,tY,RIe,BIe,aY,PIe,$Ie,uRe,L5,bRe,vx,IIe,FRe,Of,vRe,Xi,Vf,nY,x5,qIe,sY,NIe,TRe,Qo,k5,jIe,S5,DIe,Tx,GIe,OIe,VIe,R5,XIe,lY,zIe,QIe,WIe,mo,B5,HIe,iY,UIe,JIe,zi,YIe,dY,KIe,ZIe,cY,eqe,oqe,rqe,F,Xf,fY,tqe,aqe,Mx,nqe,sqe,lqe,zf,mY,iqe,dqe,Ex,cqe,fqe,mqe,Qf,gY,gqe,hqe,Cx,pqe,_qe,uqe,Wf,hY,bqe,Fqe,wx,vqe,Tqe,Mqe,Hf,pY,Eqe,Cqe,Ax,wqe,Aqe,yqe,Uf,_Y,Lqe,xqe,yx,kqe,Sqe,Rqe,Jf,uY,Bqe,Pqe,Lx,$qe,Iqe,qqe,Yf,bY,Nqe,jqe,xx,Dqe,Gqe,Oqe,Kf,FY,Vqe,Xqe,kx,zqe,Qqe,Wqe,Zf,vY,Hqe,Uqe,Sx,Jqe,Yqe,Kqe,em,TY,Zqe,eNe,Rx,oNe,rNe,tNe,om,MY,aNe,nNe,Bx,sNe,lNe,iNe,rm,EY,dNe,cNe,Px,fNe,mNe,gNe,tm,CY,hNe,pNe,$x,_Ne,uNe,bNe,am,wY,FNe,vNe,Ix,TNe,MNe,ENe,nm,AY,CNe,wNe,qx,ANe,yNe,LNe,sm,yY,xNe,kNe,Nx,SNe,RNe,BNe,lm,LY,PNe,$Ne,jx,INe,qNe,NNe,im,xY,jNe,DNe,Dx,GNe,ONe,VNe,dm,kY,XNe,zNe,Gx,QNe,WNe,HNe,cm,SY,UNe,JNe,Ox,YNe,KNe,ZNe,fm,RY,eje,oje,Vx,rje,tje,aje,mm,BY,nje,sje,Xx,lje,ije,dje,gm,PY,cje,fje,zx,mje,gje,hje,hm,$Y,pje,_je,Qx,uje,bje,Fje,pm,IY,vje,Tje,Wx,Mje,Eje,Cje,_m,qY,wje,Aje,Hx,yje,Lje,xje,um,NY,kje,Sje,Ux,Rje,Bje,Pje,bm,jY,$je,Ije,Jx,qje,Nje,jje,Fm,DY,Dje,Gje,Yx,Oje,Vje,Xje,vm,GY,zje,Qje,Kx,Wje,Hje,Uje,Tm,OY,Jje,Yje,Zx,Kje,Zje,eDe,Mm,VY,oDe,rDe,e9,tDe,aDe,nDe,Em,XY,sDe,lDe,o9,iDe,dDe,cDe,Cm,zY,fDe,mDe,r9,gDe,hDe,pDe,wm,QY,_De,uDe,t9,bDe,FDe,vDe,Am,WY,TDe,MDe,a9,EDe,CDe,wDe,ym,HY,ADe,yDe,n9,LDe,xDe,kDe,Lm,UY,SDe,RDe,s9,BDe,PDe,$De,xm,JY,IDe,qDe,l9,NDe,jDe,DDe,km,YY,GDe,ODe,i9,VDe,XDe,zDe,Sm,KY,QDe,WDe,d9,HDe,UDe,JDe,Rm,ZY,YDe,KDe,c9,ZDe,eGe,oGe,Bm,eK,rGe,tGe,f9,aGe,nGe,sGe,Pm,oK,lGe,iGe,m9,dGe,cGe,fGe,$m,rK,mGe,gGe,g9,hGe,pGe,_Ge,Im,tK,uGe,bGe,h9,FGe,vGe,TGe,qm,aK,MGe,EGe,p9,CGe,wGe,AGe,Nm,nK,yGe,LGe,_9,xGe,kGe,SGe,jm,sK,RGe,BGe,u9,PGe,$Ge,IGe,Dm,lK,qGe,NGe,b9,jGe,DGe,GGe,Gm,iK,OGe,VGe,F9,XGe,zGe,QGe,Om,dK,WGe,HGe,v9,UGe,JGe,YGe,Vm,cK,KGe,ZGe,T9,eOe,oOe,rOe,Xm,fK,tOe,aOe,M9,nOe,sOe,lOe,zm,mK,iOe,dOe,E9,cOe,fOe,mOe,Qm,gK,gOe,hOe,C9,pOe,_Oe,uOe,Wm,hK,bOe,FOe,w9,vOe,TOe,MOe,Hm,pK,EOe,COe,A9,wOe,AOe,yOe,Um,_K,LOe,xOe,y9,kOe,SOe,ROe,Jm,uK,BOe,POe,L9,$Oe,IOe,qOe,Ym,bK,NOe,jOe,x9,DOe,GOe,OOe,Km,FK,VOe,XOe,k9,zOe,QOe,WOe,Zm,vK,HOe,UOe,S9,JOe,YOe,KOe,eg,TK,ZOe,eVe,R9,oVe,rVe,tVe,og,MK,aVe,nVe,B9,sVe,lVe,iVe,rg,EK,dVe,cVe,P9,fVe,mVe,gVe,tg,CK,hVe,pVe,$9,_Ve,uVe,bVe,ag,wK,FVe,vVe,I9,TVe,MVe,EVe,ng,AK,CVe,wVe,q9,AVe,yVe,LVe,sg,yK,xVe,kVe,N9,SVe,RVe,BVe,lg,LK,PVe,$Ve,j9,IVe,qVe,NVe,ig,xK,jVe,DVe,D9,GVe,OVe,VVe,dg,kK,XVe,zVe,G9,QVe,WVe,HVe,cg,SK,UVe,JVe,O9,YVe,KVe,ZVe,fg,RK,eXe,oXe,V9,rXe,tXe,aXe,mg,BK,nXe,sXe,X9,lXe,iXe,dXe,gg,PK,cXe,fXe,z9,mXe,gXe,hXe,hg,$K,pXe,_Xe,Q9,uXe,bXe,FXe,pg,IK,vXe,TXe,W9,MXe,EXe,CXe,_g,qK,wXe,AXe,H9,yXe,LXe,xXe,ug,NK,kXe,SXe,U9,RXe,BXe,PXe,bg,jK,$Xe,IXe,J9,qXe,NXe,jXe,Fg,DK,DXe,GXe,Y9,OXe,VXe,XXe,vg,GK,zXe,QXe,K9,WXe,HXe,UXe,Tg,OK,JXe,YXe,Z9,KXe,ZXe,eze,Mg,VK,oze,rze,ek,tze,aze,nze,Eg,XK,sze,lze,ok,ize,dze,cze,Cg,zK,fze,mze,rk,gze,hze,pze,wg,QK,_ze,uze,tk,bze,Fze,vze,Ag,WK,Tze,Mze,ak,Eze,Cze,wze,yg,HK,Aze,yze,nk,Lze,xze,kze,Lg,UK,Sze,Rze,sk,Bze,Pze,$ze,xg,JK,Ize,qze,lk,Nze,jze,Dze,kg,YK,Gze,Oze,ik,Vze,Xze,zze,Sg,KK,Qze,Wze,dk,Hze,Uze,Jze,Rg,ZK,Yze,Kze,ck,Zze,eQe,oQe,Bg,eZ,rQe,tQe,fk,aQe,nQe,sQe,Pg,oZ,lQe,iQe,mk,dQe,cQe,fQe,$g,rZ,mQe,gQe,gk,hQe,pQe,_Qe,Ig,tZ,uQe,bQe,hk,FQe,vQe,TQe,aZ,MQe,EQe,P5,CQe,qg,$5,wQe,nZ,AQe,MRe,Qi,Ng,sZ,I5,yQe,lZ,LQe,ERe,Wo,q5,xQe,N5,kQe,pk,SQe,RQe,BQe,j5,PQe,iZ,$Qe,IQe,qQe,go,D5,NQe,dZ,jQe,DQe,Oa,GQe,cZ,OQe,VQe,fZ,XQe,zQe,mZ,QQe,WQe,HQe,E,Qn,gZ,UQe,JQe,_k,YQe,KQe,uk,ZQe,eWe,oWe,Wn,hZ,rWe,tWe,bk,aWe,nWe,Fk,sWe,lWe,iWe,Hn,pZ,dWe,cWe,vk,fWe,mWe,Tk,gWe,hWe,pWe,jg,_Z,_We,uWe,Mk,bWe,FWe,vWe,Un,uZ,TWe,MWe,Ek,EWe,CWe,Ck,wWe,AWe,yWe,Dg,bZ,LWe,xWe,wk,kWe,SWe,RWe,Gg,FZ,BWe,PWe,Ak,$We,IWe,qWe,Og,vZ,NWe,jWe,yk,DWe,GWe,OWe,Jn,TZ,VWe,XWe,Lk,zWe,QWe,xk,WWe,HWe,UWe,Yn,MZ,JWe,YWe,kk,KWe,ZWe,Sk,eHe,oHe,rHe,Kn,EZ,tHe,aHe,Rk,nHe,sHe,Bk,lHe,iHe,dHe,Vg,CZ,cHe,fHe,Pk,mHe,gHe,hHe,Xg,wZ,pHe,_He,$k,uHe,bHe,FHe,Zn,AZ,vHe,THe,Ik,MHe,EHe,qk,CHe,wHe,AHe,zg,yZ,yHe,LHe,Nk,xHe,kHe,SHe,es,LZ,RHe,BHe,jk,PHe,$He,Dk,IHe,qHe,NHe,os,xZ,jHe,DHe,Gk,GHe,OHe,Ok,VHe,XHe,zHe,rs,kZ,QHe,WHe,Vk,HHe,UHe,SZ,JHe,YHe,KHe,Qg,RZ,ZHe,eUe,Xk,oUe,rUe,tUe,ts,BZ,aUe,nUe,zk,sUe,lUe,Qk,iUe,dUe,cUe,Wg,PZ,fUe,mUe,Wk,gUe,hUe,pUe,as,$Z,_Ue,uUe,Hk,bUe,FUe,Uk,vUe,TUe,MUe,ns,IZ,EUe,CUe,Jk,wUe,AUe,Yk,yUe,LUe,xUe,ss,qZ,kUe,SUe,Kk,RUe,BUe,Zk,PUe,$Ue,IUe,Hg,NZ,qUe,NUe,eS,jUe,DUe,GUe,ls,jZ,OUe,VUe,oS,XUe,zUe,rS,QUe,WUe,HUe,Ug,DZ,UUe,JUe,tS,YUe,KUe,ZUe,is,GZ,eJe,oJe,aS,rJe,tJe,nS,aJe,nJe,sJe,ds,OZ,lJe,iJe,sS,dJe,cJe,lS,fJe,mJe,gJe,cs,VZ,hJe,pJe,iS,_Je,uJe,dS,bJe,FJe,vJe,fs,XZ,TJe,MJe,cS,EJe,CJe,fS,wJe,AJe,yJe,Jg,zZ,LJe,xJe,mS,kJe,SJe,RJe,ms,QZ,BJe,PJe,gS,$Je,IJe,hS,qJe,NJe,jJe,gs,WZ,DJe,GJe,pS,OJe,VJe,_S,XJe,zJe,QJe,hs,HZ,WJe,HJe,uS,UJe,JJe,bS,YJe,KJe,ZJe,ps,UZ,eYe,oYe,FS,rYe,tYe,vS,aYe,nYe,sYe,_s,JZ,lYe,iYe,TS,dYe,cYe,MS,fYe,mYe,gYe,us,YZ,hYe,pYe,ES,_Ye,uYe,CS,bYe,FYe,vYe,Yg,KZ,TYe,MYe,wS,EYe,CYe,wYe,bs,ZZ,AYe,yYe,AS,LYe,xYe,yS,kYe,SYe,RYe,Kg,eee,BYe,PYe,LS,$Ye,IYe,qYe,Zg,oee,NYe,jYe,xS,DYe,GYe,OYe,Fs,ree,VYe,XYe,kS,zYe,QYe,SS,WYe,HYe,UYe,vs,tee,JYe,YYe,RS,KYe,ZYe,BS,eKe,oKe,rKe,eh,aee,tKe,aKe,PS,nKe,sKe,lKe,Ts,nee,iKe,dKe,$S,cKe,fKe,IS,mKe,gKe,hKe,Ms,see,pKe,_Ke,qS,uKe,bKe,NS,FKe,vKe,TKe,Es,lee,MKe,EKe,jS,CKe,wKe,DS,AKe,yKe,LKe,Cs,iee,xKe,kKe,GS,SKe,RKe,OS,BKe,PKe,$Ke,ws,dee,IKe,qKe,VS,NKe,jKe,XS,DKe,GKe,OKe,oh,cee,VKe,XKe,zS,zKe,QKe,WKe,rh,fee,HKe,UKe,QS,JKe,YKe,KKe,th,mee,ZKe,eZe,WS,oZe,rZe,tZe,ah,gee,aZe,nZe,HS,sZe,lZe,iZe,As,hee,dZe,cZe,US,fZe,mZe,JS,gZe,hZe,pZe,nh,pee,_Ze,uZe,YS,bZe,FZe,vZe,ys,_ee,TZe,MZe,KS,EZe,CZe,ZS,wZe,AZe,yZe,Ls,uee,LZe,xZe,eR,kZe,SZe,oR,RZe,BZe,PZe,xs,bee,$Ze,IZe,rR,qZe,NZe,tR,jZe,DZe,GZe,ks,Fee,OZe,VZe,aR,XZe,zZe,nR,QZe,WZe,HZe,Ss,vee,UZe,JZe,sR,YZe,KZe,lR,ZZe,eeo,oeo,Rs,Tee,reo,teo,iR,aeo,neo,dR,seo,leo,ieo,sh,Mee,deo,ceo,cR,feo,meo,geo,lh,Eee,heo,peo,fR,_eo,ueo,beo,Bs,Cee,Feo,veo,mR,Teo,Meo,gR,Eeo,Ceo,weo,Ps,wee,Aeo,yeo,hR,Leo,xeo,pR,keo,Seo,Reo,$s,Aee,Beo,Peo,_R,$eo,Ieo,uR,qeo,Neo,jeo,ih,yee,Deo,Geo,bR,Oeo,Veo,Xeo,dh,Lee,zeo,Qeo,FR,Weo,Heo,Ueo,ch,xee,Jeo,Yeo,vR,Keo,Zeo,eoo,fh,kee,ooo,roo,TR,too,aoo,noo,mh,See,soo,loo,MR,ioo,doo,coo,Is,Ree,foo,moo,ER,goo,hoo,CR,poo,_oo,uoo,gh,Bee,boo,Foo,wR,voo,Too,Moo,hh,Pee,Eoo,Coo,AR,woo,Aoo,yoo,qs,$ee,Loo,xoo,yR,koo,Soo,LR,Roo,Boo,Poo,Ns,Iee,$oo,Ioo,xR,qoo,Noo,kR,joo,Doo,Goo,qee,Ooo,Voo,G5,Xoo,ph,O5,zoo,Nee,Qoo,CRe,Wi,_h,jee,V5,Woo,Dee,Hoo,wRe,Ho,X5,Uoo,z5,Joo,SR,Yoo,Koo,Zoo,Q5,ero,Gee,oro,rro,tro,$e,W5,aro,Oee,nro,sro,Va,lro,Vee,iro,dro,Xee,cro,fro,zee,mro,gro,hro,ee,uh,Qee,pro,_ro,RR,uro,bro,Fro,bh,Wee,vro,Tro,BR,Mro,Ero,Cro,Fh,Hee,wro,Aro,PR,yro,Lro,xro,vh,Uee,kro,Sro,$R,Rro,Bro,Pro,Th,Jee,$ro,Iro,IR,qro,Nro,jro,Mh,Yee,Dro,Gro,qR,Oro,Vro,Xro,Eh,Kee,zro,Qro,NR,Wro,Hro,Uro,Ch,Zee,Jro,Yro,jR,Kro,Zro,eto,wh,eoe,oto,rto,DR,tto,ato,nto,Ah,ooe,sto,lto,GR,ito,dto,cto,yh,roe,fto,mto,OR,gto,hto,pto,Lh,toe,_to,uto,VR,bto,Fto,vto,xh,aoe,Tto,Mto,XR,Eto,Cto,wto,kh,noe,Ato,yto,zR,Lto,xto,kto,Sh,soe,Sto,Rto,QR,Bto,Pto,$to,Rh,loe,Ito,qto,WR,Nto,jto,Dto,Bh,ioe,Gto,Oto,HR,Vto,Xto,zto,Ph,doe,Qto,Wto,UR,Hto,Uto,Jto,$h,coe,Yto,Kto,JR,Zto,eao,oao,Ih,rao,foe,tao,aao,H5,nao,qh,U5,sao,moe,lao,ARe,Hi,Nh,goe,J5,iao,hoe,dao,yRe,Uo,Y5,cao,K5,fao,YR,mao,gao,hao,Z5,pao,poe,_ao,uao,bao,Ie,e3,Fao,_oe,vao,Tao,Ui,Mao,uoe,Eao,Cao,boe,wao,Aao,yao,ke,jh,Foe,Lao,xao,KR,kao,Sao,Rao,Dh,voe,Bao,Pao,ZR,$ao,Iao,qao,Gh,Toe,Nao,jao,eB,Dao,Gao,Oao,Oh,Moe,Vao,Xao,oB,zao,Qao,Wao,Vh,Eoe,Hao,Uao,rB,Jao,Yao,Kao,Xh,Coe,Zao,eno,tB,ono,rno,tno,zh,woe,ano,nno,aB,sno,lno,ino,Qh,Aoe,dno,cno,nB,fno,mno,gno,Wh,hno,yoe,pno,_no,o3,uno,Hh,r3,bno,Loe,Fno,LRe,Ji,Uh,xoe,t3,vno,koe,Tno,xRe,Jo,a3,Mno,Yi,Eno,sB,Cno,wno,lB,Ano,yno,Lno,n3,xno,Soe,kno,Sno,Rno,Xr,s3,Bno,Roe,Pno,$no,Ki,Ino,Boe,qno,Nno,iB,jno,Dno,Gno,Poe,Ono,Vno,l3,Xno,qe,i3,zno,$oe,Qno,Wno,Xa,Hno,Ioe,Uno,Jno,qoe,Yno,Kno,Noe,Zno,eso,oso,T,Jh,joe,rso,tso,dB,aso,nso,sso,Yh,Doe,lso,iso,cB,dso,cso,fso,Kh,Goe,mso,gso,fB,hso,pso,_so,Zh,Ooe,uso,bso,mB,Fso,vso,Tso,ep,Voe,Mso,Eso,gB,Cso,wso,Aso,op,Xoe,yso,Lso,hB,xso,kso,Sso,rp,zoe,Rso,Bso,pB,Pso,$so,Iso,tp,Qoe,qso,Nso,_B,jso,Dso,Gso,ap,Woe,Oso,Vso,uB,Xso,zso,Qso,np,Hoe,Wso,Hso,bB,Uso,Jso,Yso,sp,Uoe,Kso,Zso,FB,elo,olo,rlo,lp,Joe,tlo,alo,vB,nlo,slo,llo,ip,Yoe,ilo,dlo,TB,clo,flo,mlo,dp,Koe,glo,hlo,MB,plo,_lo,ulo,cp,Zoe,blo,Flo,EB,vlo,Tlo,Mlo,fp,ere,Elo,Clo,CB,wlo,Alo,ylo,mp,ore,Llo,xlo,wB,klo,Slo,Rlo,gp,rre,Blo,Plo,AB,$lo,Ilo,qlo,hp,tre,Nlo,jlo,yB,Dlo,Glo,Olo,pp,are,Vlo,Xlo,LB,zlo,Qlo,Wlo,_p,nre,Hlo,Ulo,xB,Jlo,Ylo,Klo,up,sre,Zlo,eio,kB,oio,rio,tio,bp,lre,aio,nio,SB,sio,lio,iio,Fp,ire,dio,cio,RB,fio,mio,gio,vp,dre,hio,pio,BB,_io,uio,bio,Tp,cre,Fio,vio,PB,Tio,Mio,Eio,Mp,fre,Cio,wio,$B,Aio,yio,Lio,Ep,mre,xio,kio,IB,Sio,Rio,Bio,Cp,gre,Pio,$io,qB,Iio,qio,Nio,js,hre,jio,Dio,NB,Gio,Oio,jB,Vio,Xio,zio,wp,pre,Qio,Wio,DB,Hio,Uio,Jio,Ap,_re,Yio,Kio,GB,Zio,edo,odo,yp,ure,rdo,tdo,OB,ado,ndo,sdo,Lp,bre,ldo,ido,VB,ddo,cdo,fdo,xp,Fre,mdo,gdo,XB,hdo,pdo,_do,kp,vre,udo,bdo,zB,Fdo,vdo,Tdo,Sp,Tre,Mdo,Edo,QB,Cdo,wdo,Ado,Rp,Mre,ydo,Ldo,WB,xdo,kdo,Sdo,Bp,Ere,Rdo,Bdo,HB,Pdo,$do,Ido,Pp,Cre,qdo,Ndo,UB,jdo,Ddo,Gdo,$p,wre,Odo,Vdo,JB,Xdo,zdo,Qdo,Ip,Are,Wdo,Hdo,YB,Udo,Jdo,Ydo,qp,yre,Kdo,Zdo,KB,eco,oco,rco,Np,Lre,tco,aco,ZB,nco,sco,lco,jp,xre,ico,dco,eP,cco,fco,mco,Dp,kre,gco,hco,oP,pco,_co,uco,Gp,Sre,bco,Fco,rP,vco,Tco,Mco,Op,Rre,Eco,Cco,tP,wco,Aco,yco,Vp,Bre,Lco,xco,aP,kco,Sco,Rco,Xp,Pre,Bco,Pco,nP,$co,Ico,qco,zp,$re,Nco,jco,sP,Dco,Gco,Oco,Qp,Ire,Vco,Xco,lP,zco,Qco,Wco,Wp,qre,Hco,Uco,iP,Jco,Yco,Kco,Hp,Nre,Zco,efo,dP,ofo,rfo,tfo,Up,jre,afo,nfo,cP,sfo,lfo,ifo,Jp,Dre,dfo,cfo,fP,ffo,mfo,gfo,Yp,Gre,hfo,pfo,mP,_fo,ufo,bfo,Kp,Ore,Ffo,vfo,gP,Tfo,Mfo,Efo,Zp,Vre,Cfo,wfo,hP,Afo,yfo,Lfo,e_,Xre,xfo,kfo,pP,Sfo,Rfo,Bfo,o_,zre,Pfo,$fo,_P,Ifo,qfo,Nfo,r_,Qre,jfo,Dfo,uP,Gfo,Ofo,Vfo,t_,Wre,Xfo,zfo,bP,Qfo,Wfo,Hfo,a_,Hre,Ufo,Jfo,FP,Yfo,Kfo,Zfo,n_,Ure,emo,omo,vP,rmo,tmo,amo,s_,Jre,nmo,smo,TP,lmo,imo,dmo,l_,Yre,cmo,fmo,MP,mmo,gmo,hmo,i_,Kre,pmo,_mo,EP,umo,bmo,Fmo,d_,Zre,vmo,Tmo,CP,Mmo,Emo,Cmo,c_,ete,wmo,Amo,wP,ymo,Lmo,xmo,f_,ote,kmo,Smo,AP,Rmo,Bmo,Pmo,m_,rte,$mo,Imo,yP,qmo,Nmo,jmo,g_,tte,Dmo,Gmo,LP,Omo,Vmo,Xmo,h_,ate,zmo,Qmo,xP,Wmo,Hmo,Umo,p_,nte,Jmo,Ymo,kP,Kmo,Zmo,ego,__,ste,ogo,rgo,SP,tgo,ago,ngo,u_,lte,sgo,lgo,RP,igo,dgo,cgo,b_,ite,fgo,mgo,BP,ggo,hgo,pgo,F_,dte,_go,ugo,PP,bgo,Fgo,vgo,v_,cte,Tgo,Mgo,$P,Ego,Cgo,wgo,T_,fte,Ago,ygo,IP,Lgo,xgo,kgo,M_,mte,Sgo,Rgo,qP,Bgo,Pgo,$go,E_,gte,Igo,qgo,NP,Ngo,jgo,Dgo,C_,hte,Ggo,Ogo,jP,Vgo,Xgo,zgo,w_,pte,Qgo,Wgo,DP,Hgo,Ugo,Jgo,A_,_te,Ygo,Kgo,GP,Zgo,eho,oho,y_,ute,rho,tho,OP,aho,nho,sho,L_,bte,lho,iho,VP,dho,cho,fho,x_,Fte,mho,gho,XP,hho,pho,_ho,k_,vte,uho,bho,zP,Fho,vho,Tho,S_,Tte,Mho,Eho,QP,Cho,who,Aho,R_,Mte,yho,Lho,WP,xho,kho,Sho,B_,Ete,Rho,Bho,HP,Pho,$ho,Iho,P_,qho,Cte,Nho,jho,wte,Dho,Gho,Ate,Oho,Vho,d3,kRe,Zi,$_,yte,c3,Xho,Lte,zho,SRe,Yo,f3,Qho,ed,Who,UP,Hho,Uho,JP,Jho,Yho,Kho,m3,Zho,xte,epo,opo,rpo,zr,g3,tpo,kte,apo,npo,od,spo,Ste,lpo,ipo,YP,dpo,cpo,fpo,Rte,mpo,gpo,h3,hpo,Ne,p3,ppo,Bte,_po,upo,za,bpo,Pte,Fpo,vpo,$te,Tpo,Mpo,Ite,Epo,Cpo,wpo,S,I_,qte,Apo,ypo,KP,Lpo,xpo,kpo,q_,Nte,Spo,Rpo,ZP,Bpo,Ppo,$po,N_,jte,Ipo,qpo,e$,Npo,jpo,Dpo,j_,Dte,Gpo,Opo,o$,Vpo,Xpo,zpo,D_,Gte,Qpo,Wpo,r$,Hpo,Upo,Jpo,G_,Ote,Ypo,Kpo,t$,Zpo,e_o,o_o,O_,Vte,r_o,t_o,a$,a_o,n_o,s_o,V_,Xte,l_o,i_o,n$,d_o,c_o,f_o,X_,zte,m_o,g_o,s$,h_o,p_o,__o,z_,Qte,u_o,b_o,l$,F_o,v_o,T_o,Q_,Wte,M_o,E_o,i$,C_o,w_o,A_o,W_,Hte,y_o,L_o,d$,x_o,k_o,S_o,H_,Ute,R_o,B_o,c$,P_o,$_o,I_o,U_,Jte,q_o,N_o,f$,j_o,D_o,G_o,J_,Yte,O_o,V_o,m$,X_o,z_o,Q_o,Y_,Kte,W_o,H_o,g$,U_o,J_o,Y_o,K_,Zte,K_o,Z_o,h$,euo,ouo,ruo,Z_,eae,tuo,auo,p$,nuo,suo,luo,eu,oae,iuo,duo,_$,cuo,fuo,muo,ou,rae,guo,huo,u$,puo,_uo,uuo,ru,tae,buo,Fuo,b$,vuo,Tuo,Muo,tu,aae,Euo,Cuo,F$,wuo,Auo,yuo,au,nae,Luo,xuo,v$,kuo,Suo,Ruo,nu,sae,Buo,Puo,T$,$uo,Iuo,quo,su,lae,Nuo,juo,M$,Duo,Guo,Ouo,lu,iae,Vuo,Xuo,E$,zuo,Quo,Wuo,iu,dae,Huo,Uuo,C$,Juo,Yuo,Kuo,du,cae,Zuo,e1o,w$,o1o,r1o,t1o,cu,fae,a1o,n1o,A$,s1o,l1o,i1o,fu,mae,d1o,c1o,y$,f1o,m1o,g1o,mu,gae,h1o,p1o,L$,_1o,u1o,b1o,gu,hae,F1o,v1o,x$,T1o,M1o,E1o,hu,pae,C1o,w1o,k$,A1o,y1o,L1o,pu,_ae,x1o,k1o,S$,S1o,R1o,B1o,_u,uae,P1o,$1o,R$,I1o,q1o,N1o,uu,bae,j1o,D1o,B$,G1o,O1o,V1o,bu,Fae,X1o,z1o,P$,Q1o,W1o,H1o,Fu,vae,U1o,J1o,$$,Y1o,K1o,Z1o,vu,Tae,e8o,o8o,I$,r8o,t8o,a8o,Tu,n8o,Mae,s8o,l8o,Eae,i8o,d8o,Cae,c8o,f8o,_3,RRe,rd,Mu,wae,u3,m8o,Aae,g8o,BRe,Ko,b3,h8o,td,p8o,q$,_8o,u8o,N$,b8o,F8o,v8o,F3,T8o,yae,M8o,E8o,C8o,Qr,v3,w8o,Lae,A8o,y8o,ad,L8o,xae,x8o,k8o,j$,S8o,R8o,B8o,kae,P8o,$8o,T3,I8o,je,M3,q8o,Sae,N8o,j8o,Qa,D8o,Rae,G8o,O8o,Bae,V8o,X8o,Pae,z8o,Q8o,W8o,$,Eu,$ae,H8o,U8o,D$,J8o,Y8o,K8o,Cu,Iae,Z8o,ebo,G$,obo,rbo,tbo,wu,qae,abo,nbo,O$,sbo,lbo,ibo,Au,Nae,dbo,cbo,V$,fbo,mbo,gbo,yu,jae,hbo,pbo,X$,_bo,ubo,bbo,Lu,Dae,Fbo,vbo,z$,Tbo,Mbo,Ebo,xu,Gae,Cbo,wbo,Q$,Abo,ybo,Lbo,ku,Oae,xbo,kbo,W$,Sbo,Rbo,Bbo,Su,Vae,Pbo,$bo,H$,Ibo,qbo,Nbo,Ru,Xae,jbo,Dbo,U$,Gbo,Obo,Vbo,Bu,zae,Xbo,zbo,J$,Qbo,Wbo,Hbo,Pu,Qae,Ubo,Jbo,Y$,Ybo,Kbo,Zbo,$u,Wae,e2o,o2o,K$,r2o,t2o,a2o,Iu,Hae,n2o,s2o,Z$,l2o,i2o,d2o,qu,Uae,c2o,f2o,eI,m2o,g2o,h2o,Nu,Jae,p2o,_2o,oI,u2o,b2o,F2o,ju,Yae,v2o,T2o,rI,M2o,E2o,C2o,Du,Kae,w2o,A2o,tI,y2o,L2o,x2o,Gu,Zae,k2o,S2o,aI,R2o,B2o,P2o,Ou,ene,$2o,I2o,nI,q2o,N2o,j2o,Vu,one,D2o,G2o,sI,O2o,V2o,X2o,Xu,rne,z2o,Q2o,lI,W2o,H2o,U2o,zu,tne,J2o,Y2o,iI,K2o,Z2o,e6o,Qu,ane,o6o,r6o,dI,t6o,a6o,n6o,Wu,nne,s6o,l6o,cI,i6o,d6o,c6o,Hu,sne,f6o,m6o,fI,g6o,h6o,p6o,Uu,lne,_6o,u6o,mI,b6o,F6o,v6o,Ju,ine,T6o,M6o,gI,E6o,C6o,w6o,Yu,dne,A6o,y6o,hI,L6o,x6o,k6o,Ku,cne,S6o,R6o,pI,B6o,P6o,$6o,Zu,fne,I6o,q6o,_I,N6o,j6o,D6o,e1,mne,G6o,O6o,uI,V6o,X6o,z6o,o1,gne,Q6o,W6o,bI,H6o,U6o,J6o,r1,hne,Y6o,K6o,FI,Z6o,eFo,oFo,t1,pne,rFo,tFo,vI,aFo,nFo,sFo,a1,lFo,_ne,iFo,dFo,une,cFo,fFo,bne,mFo,gFo,E3,PRe,nd,n1,Fne,C3,hFo,vne,pFo,$Re,Zo,w3,_Fo,sd,uFo,TI,bFo,FFo,MI,vFo,TFo,MFo,A3,EFo,Tne,CFo,wFo,AFo,Wr,y3,yFo,Mne,LFo,xFo,ld,kFo,Ene,SFo,RFo,EI,BFo,PFo,$Fo,Cne,IFo,qFo,L3,NFo,De,x3,jFo,wne,DFo,GFo,Wa,OFo,Ane,VFo,XFo,yne,zFo,QFo,Lne,WFo,HFo,UFo,I,s1,xne,JFo,YFo,CI,KFo,ZFo,evo,l1,kne,ovo,rvo,wI,tvo,avo,nvo,i1,Sne,svo,lvo,AI,ivo,dvo,cvo,d1,Rne,fvo,mvo,yI,gvo,hvo,pvo,c1,Bne,_vo,uvo,LI,bvo,Fvo,vvo,f1,Pne,Tvo,Mvo,xI,Evo,Cvo,wvo,m1,$ne,Avo,yvo,kI,Lvo,xvo,kvo,g1,Ine,Svo,Rvo,SI,Bvo,Pvo,$vo,h1,qne,Ivo,qvo,RI,Nvo,jvo,Dvo,p1,Nne,Gvo,Ovo,BI,Vvo,Xvo,zvo,_1,jne,Qvo,Wvo,PI,Hvo,Uvo,Jvo,u1,Dne,Yvo,Kvo,$I,Zvo,e0o,o0o,b1,Gne,r0o,t0o,II,a0o,n0o,s0o,F1,One,l0o,i0o,qI,d0o,c0o,f0o,v1,Vne,m0o,g0o,NI,h0o,p0o,_0o,T1,Xne,u0o,b0o,jI,F0o,v0o,T0o,M1,zne,M0o,E0o,DI,C0o,w0o,A0o,E1,Qne,y0o,L0o,GI,x0o,k0o,S0o,C1,Wne,R0o,B0o,OI,P0o,$0o,I0o,w1,Hne,q0o,N0o,VI,j0o,D0o,G0o,A1,Une,O0o,V0o,XI,X0o,z0o,Q0o,y1,Jne,W0o,H0o,zI,U0o,J0o,Y0o,L1,Yne,K0o,Z0o,QI,eTo,oTo,rTo,x1,Kne,tTo,aTo,WI,nTo,sTo,lTo,k1,Zne,iTo,dTo,HI,cTo,fTo,mTo,S1,ese,gTo,hTo,UI,pTo,_To,uTo,R1,ose,bTo,FTo,JI,vTo,TTo,MTo,B1,rse,ETo,CTo,YI,wTo,ATo,yTo,P1,tse,LTo,xTo,KI,kTo,STo,RTo,$1,ase,BTo,PTo,ZI,$To,ITo,qTo,I1,nse,NTo,jTo,sse,DTo,GTo,OTo,q1,lse,VTo,XTo,eq,zTo,QTo,WTo,N1,ise,HTo,UTo,oq,JTo,YTo,KTo,j1,dse,ZTo,eMo,rq,oMo,rMo,tMo,D1,cse,aMo,nMo,tq,sMo,lMo,iMo,G1,dMo,fse,cMo,fMo,mse,mMo,gMo,gse,hMo,pMo,k3,IRe,id,O1,hse,S3,_Mo,pse,uMo,qRe,er,R3,bMo,dd,FMo,aq,vMo,TMo,nq,MMo,EMo,CMo,B3,wMo,_se,AMo,yMo,LMo,Hr,P3,xMo,use,kMo,SMo,cd,RMo,bse,BMo,PMo,sq,$Mo,IMo,qMo,Fse,NMo,jMo,$3,DMo,Ge,I3,GMo,vse,OMo,VMo,Ha,XMo,Tse,zMo,QMo,Mse,WMo,HMo,Ese,UMo,JMo,YMo,ne,V1,Cse,KMo,ZMo,lq,e4o,o4o,r4o,X1,wse,t4o,a4o,iq,n4o,s4o,l4o,z1,Ase,i4o,d4o,dq,c4o,f4o,m4o,Q1,yse,g4o,h4o,cq,p4o,_4o,u4o,W1,Lse,b4o,F4o,fq,v4o,T4o,M4o,H1,xse,E4o,C4o,mq,w4o,A4o,y4o,U1,kse,L4o,x4o,gq,k4o,S4o,R4o,J1,Sse,B4o,P4o,hq,$4o,I4o,q4o,Y1,Rse,N4o,j4o,pq,D4o,G4o,O4o,K1,Bse,V4o,X4o,_q,z4o,Q4o,W4o,Z1,Pse,H4o,U4o,uq,J4o,Y4o,K4o,e8,$se,Z4o,eEo,bq,oEo,rEo,tEo,o8,Ise,aEo,nEo,Fq,sEo,lEo,iEo,r8,qse,dEo,cEo,vq,fEo,mEo,gEo,t8,Nse,hEo,pEo,Tq,_Eo,uEo,bEo,a8,jse,FEo,vEo,Mq,TEo,MEo,EEo,n8,Dse,CEo,wEo,Eq,AEo,yEo,LEo,s8,xEo,Gse,kEo,SEo,Ose,REo,BEo,Vse,PEo,$Eo,q3,NRe,fd,l8,Xse,N3,IEo,zse,qEo,jRe,or,j3,NEo,md,jEo,Cq,DEo,GEo,wq,OEo,VEo,XEo,D3,zEo,Qse,QEo,WEo,HEo,Ur,G3,UEo,Wse,JEo,YEo,gd,KEo,Hse,ZEo,e5o,Aq,o5o,r5o,t5o,Use,a5o,n5o,O3,s5o,Oe,V3,l5o,Jse,i5o,d5o,Ua,c5o,Yse,f5o,m5o,Kse,g5o,h5o,Zse,p5o,_5o,u5o,y,i8,ele,b5o,F5o,yq,v5o,T5o,M5o,d8,ole,E5o,C5o,Lq,w5o,A5o,y5o,c8,rle,L5o,x5o,xq,k5o,S5o,R5o,f8,tle,B5o,P5o,kq,$5o,I5o,q5o,m8,ale,N5o,j5o,Sq,D5o,G5o,O5o,g8,nle,V5o,X5o,Rq,z5o,Q5o,W5o,h8,sle,H5o,U5o,Bq,J5o,Y5o,K5o,p8,lle,Z5o,e3o,Pq,o3o,r3o,t3o,_8,ile,a3o,n3o,$q,s3o,l3o,i3o,u8,dle,d3o,c3o,Iq,f3o,m3o,g3o,b8,cle,h3o,p3o,qq,_3o,u3o,b3o,F8,fle,F3o,v3o,Nq,T3o,M3o,E3o,v8,mle,C3o,w3o,jq,A3o,y3o,L3o,T8,gle,x3o,k3o,Dq,S3o,R3o,B3o,M8,hle,P3o,$3o,Gq,I3o,q3o,N3o,E8,ple,j3o,D3o,Oq,G3o,O3o,V3o,C8,_le,X3o,z3o,Vq,Q3o,W3o,H3o,w8,ule,U3o,J3o,Xq,Y3o,K3o,Z3o,A8,ble,eCo,oCo,zq,rCo,tCo,aCo,y8,Fle,nCo,sCo,Qq,lCo,iCo,dCo,L8,vle,cCo,fCo,Wq,mCo,gCo,hCo,x8,Tle,pCo,_Co,Hq,uCo,bCo,FCo,k8,Mle,vCo,TCo,Uq,MCo,ECo,CCo,S8,Ele,wCo,ACo,Jq,yCo,LCo,xCo,R8,Cle,kCo,SCo,Yq,RCo,BCo,PCo,B8,wle,$Co,ICo,Kq,qCo,NCo,jCo,P8,Ale,DCo,GCo,Zq,OCo,VCo,XCo,$8,yle,zCo,QCo,eN,WCo,HCo,UCo,I8,Lle,JCo,YCo,oN,KCo,ZCo,ewo,q8,xle,owo,rwo,rN,two,awo,nwo,N8,kle,swo,lwo,tN,iwo,dwo,cwo,j8,Sle,fwo,mwo,aN,gwo,hwo,pwo,D8,Rle,_wo,uwo,nN,bwo,Fwo,vwo,G8,Ble,Two,Mwo,sN,Ewo,Cwo,wwo,O8,Ple,Awo,ywo,lN,Lwo,xwo,kwo,V8,$le,Swo,Rwo,iN,Bwo,Pwo,$wo,X8,Ile,Iwo,qwo,dN,Nwo,jwo,Dwo,z8,qle,Gwo,Owo,cN,Vwo,Xwo,zwo,Q8,Nle,Qwo,Wwo,fN,Hwo,Uwo,Jwo,W8,jle,Ywo,Kwo,mN,Zwo,eAo,oAo,H8,Dle,rAo,tAo,gN,aAo,nAo,sAo,U8,Gle,lAo,iAo,hN,dAo,cAo,fAo,J8,Ole,mAo,gAo,pN,hAo,pAo,_Ao,Y8,Vle,uAo,bAo,_N,FAo,vAo,TAo,K8,Xle,MAo,EAo,uN,CAo,wAo,AAo,Z8,zle,yAo,LAo,bN,xAo,kAo,SAo,eb,Qle,RAo,BAo,FN,PAo,$Ao,IAo,ob,qAo,Wle,NAo,jAo,Hle,DAo,GAo,Ule,OAo,VAo,X3,DRe,hd,rb,Jle,z3,XAo,Yle,zAo,GRe,rr,Q3,QAo,pd,WAo,vN,HAo,UAo,TN,JAo,YAo,KAo,W3,ZAo,Kle,eyo,oyo,ryo,Jr,H3,tyo,Zle,ayo,nyo,_d,syo,eie,lyo,iyo,MN,dyo,cyo,fyo,oie,myo,gyo,U3,hyo,Ve,J3,pyo,rie,_yo,uyo,Ja,byo,tie,Fyo,vyo,aie,Tyo,Myo,nie,Eyo,Cyo,wyo,G,tb,sie,Ayo,yyo,EN,Lyo,xyo,kyo,ab,lie,Syo,Ryo,CN,Byo,Pyo,$yo,nb,iie,Iyo,qyo,wN,Nyo,jyo,Dyo,sb,die,Gyo,Oyo,AN,Vyo,Xyo,zyo,lb,cie,Qyo,Wyo,yN,Hyo,Uyo,Jyo,ib,fie,Yyo,Kyo,LN,Zyo,eLo,oLo,db,mie,rLo,tLo,xN,aLo,nLo,sLo,cb,gie,lLo,iLo,kN,dLo,cLo,fLo,fb,hie,mLo,gLo,SN,hLo,pLo,_Lo,mb,pie,uLo,bLo,RN,FLo,vLo,TLo,gb,_ie,MLo,ELo,BN,CLo,wLo,ALo,hb,uie,yLo,LLo,PN,xLo,kLo,SLo,pb,bie,RLo,BLo,$N,PLo,$Lo,ILo,_b,Fie,qLo,NLo,IN,jLo,DLo,GLo,ub,vie,OLo,VLo,qN,XLo,zLo,QLo,bb,Tie,WLo,HLo,NN,ULo,JLo,YLo,Fb,Mie,KLo,ZLo,jN,e7o,o7o,r7o,vb,Eie,t7o,a7o,DN,n7o,s7o,l7o,Tb,Cie,i7o,d7o,GN,c7o,f7o,m7o,Mb,wie,g7o,h7o,ON,p7o,_7o,u7o,Eb,Aie,b7o,F7o,VN,v7o,T7o,M7o,Cb,yie,E7o,C7o,XN,w7o,A7o,y7o,wb,Lie,L7o,x7o,zN,k7o,S7o,R7o,Ab,xie,B7o,P7o,QN,$7o,I7o,q7o,yb,kie,N7o,j7o,WN,D7o,G7o,O7o,Lb,Sie,V7o,X7o,HN,z7o,Q7o,W7o,xb,Rie,H7o,U7o,UN,J7o,Y7o,K7o,kb,Bie,Z7o,exo,JN,oxo,rxo,txo,Sb,axo,Pie,nxo,sxo,$ie,lxo,ixo,Iie,dxo,cxo,Y3,ORe,ud,Rb,qie,K3,fxo,Nie,mxo,VRe,tr,Z3,gxo,bd,hxo,YN,pxo,_xo,KN,uxo,bxo,Fxo,eC,vxo,jie,Txo,Mxo,Exo,Yr,oC,Cxo,Die,wxo,Axo,Fd,yxo,Gie,Lxo,xxo,ZN,kxo,Sxo,Rxo,Oie,Bxo,Pxo,rC,$xo,Xe,tC,Ixo,Vie,qxo,Nxo,Ya,jxo,Xie,Dxo,Gxo,zie,Oxo,Vxo,Qie,Xxo,zxo,Qxo,da,Bb,Wie,Wxo,Hxo,ej,Uxo,Jxo,Yxo,Pb,Hie,Kxo,Zxo,oj,e9o,o9o,r9o,$b,Uie,t9o,a9o,rj,n9o,s9o,l9o,Ib,Jie,i9o,d9o,tj,c9o,f9o,m9o,qb,Yie,g9o,h9o,aj,p9o,_9o,u9o,Nb,b9o,Kie,F9o,v9o,Zie,T9o,M9o,ede,E9o,C9o,aC,XRe,vd,jb,ode,nC,w9o,rde,A9o,zRe,ar,sC,y9o,Td,L9o,nj,x9o,k9o,sj,S9o,R9o,B9o,lC,P9o,tde,$9o,I9o,q9o,Kr,iC,N9o,ade,j9o,D9o,Md,G9o,nde,O9o,V9o,lj,X9o,z9o,Q9o,sde,W9o,H9o,dC,U9o,ze,cC,J9o,lde,Y9o,K9o,Ka,Z9o,ide,eko,oko,dde,rko,tko,cde,ako,nko,sko,j,Db,fde,lko,iko,ij,dko,cko,fko,Gb,mde,mko,gko,dj,hko,pko,_ko,Ob,gde,uko,bko,cj,Fko,vko,Tko,Vb,hde,Mko,Eko,fj,Cko,wko,Ako,Xb,pde,yko,Lko,mj,xko,kko,Sko,zb,_de,Rko,Bko,gj,Pko,$ko,Iko,Qb,ude,qko,Nko,hj,jko,Dko,Gko,Wb,bde,Oko,Vko,pj,Xko,zko,Qko,Hb,Fde,Wko,Hko,_j,Uko,Jko,Yko,Ub,vde,Kko,Zko,uj,eSo,oSo,rSo,Jb,Tde,tSo,aSo,bj,nSo,sSo,lSo,Yb,Mde,iSo,dSo,Fj,cSo,fSo,mSo,Kb,Ede,gSo,hSo,vj,pSo,_So,uSo,Zb,Cde,bSo,FSo,Tj,vSo,TSo,MSo,e2,wde,ESo,CSo,Mj,wSo,ASo,ySo,o2,Ade,LSo,xSo,Ej,kSo,SSo,RSo,r2,yde,BSo,PSo,Cj,$So,ISo,qSo,t2,Lde,NSo,jSo,wj,DSo,GSo,OSo,a2,xde,VSo,XSo,Aj,zSo,QSo,WSo,n2,kde,HSo,USo,yj,JSo,YSo,KSo,s2,Sde,ZSo,eRo,Lj,oRo,rRo,tRo,l2,Rde,aRo,nRo,xj,sRo,lRo,iRo,i2,Bde,dRo,cRo,kj,fRo,mRo,gRo,d2,Pde,hRo,pRo,Sj,_Ro,uRo,bRo,c2,$de,FRo,vRo,Rj,TRo,MRo,ERo,f2,Ide,CRo,wRo,Bj,ARo,yRo,LRo,m2,qde,xRo,kRo,Pj,SRo,RRo,BRo,g2,Nde,PRo,$Ro,$j,IRo,qRo,NRo,h2,jde,jRo,DRo,Ij,GRo,ORo,VRo,p2,Dde,XRo,zRo,qj,QRo,WRo,HRo,_2,Gde,URo,JRo,Nj,YRo,KRo,ZRo,u2,Ode,eBo,oBo,jj,rBo,tBo,aBo,b2,Vde,nBo,sBo,Dj,lBo,iBo,dBo,F2,cBo,Xde,fBo,mBo,zde,gBo,hBo,Qde,pBo,_Bo,fC,QRe,Ed,v2,Wde,mC,uBo,Hde,bBo,WRe,nr,gC,FBo,Cd,vBo,Gj,TBo,MBo,Oj,EBo,CBo,wBo,hC,ABo,Ude,yBo,LBo,xBo,Zr,pC,kBo,Jde,SBo,RBo,wd,BBo,Yde,PBo,$Bo,Vj,IBo,qBo,NBo,Kde,jBo,DBo,_C,GBo,Qe,uC,OBo,Zde,VBo,XBo,Za,zBo,ece,QBo,WBo,oce,HBo,UBo,rce,JBo,YBo,KBo,R,T2,tce,ZBo,ePo,Xj,oPo,rPo,tPo,M2,ace,aPo,nPo,zj,sPo,lPo,iPo,E2,nce,dPo,cPo,Qj,fPo,mPo,gPo,C2,sce,hPo,pPo,Wj,_Po,uPo,bPo,w2,lce,FPo,vPo,Hj,TPo,MPo,EPo,A2,ice,CPo,wPo,Uj,APo,yPo,LPo,y2,dce,xPo,kPo,Jj,SPo,RPo,BPo,L2,cce,PPo,$Po,Yj,IPo,qPo,NPo,x2,fce,jPo,DPo,Kj,GPo,OPo,VPo,k2,mce,XPo,zPo,Zj,QPo,WPo,HPo,S2,gce,UPo,JPo,eD,YPo,KPo,ZPo,R2,hce,e$o,o$o,oD,r$o,t$o,a$o,B2,pce,n$o,s$o,rD,l$o,i$o,d$o,P2,_ce,c$o,f$o,tD,m$o,g$o,h$o,$2,uce,p$o,_$o,aD,u$o,b$o,F$o,I2,bce,v$o,T$o,nD,M$o,E$o,C$o,q2,Fce,w$o,A$o,sD,y$o,L$o,x$o,N2,vce,k$o,S$o,lD,R$o,B$o,P$o,j2,Tce,$$o,I$o,iD,q$o,N$o,j$o,D2,Mce,D$o,G$o,dD,O$o,V$o,X$o,G2,Ece,z$o,Q$o,cD,W$o,H$o,U$o,O2,Cce,J$o,Y$o,fD,K$o,Z$o,eIo,V2,wce,oIo,rIo,mD,tIo,aIo,nIo,X2,Ace,sIo,lIo,gD,iIo,dIo,cIo,z2,yce,fIo,mIo,hD,gIo,hIo,pIo,Q2,Lce,_Io,uIo,pD,bIo,FIo,vIo,W2,xce,TIo,MIo,_D,EIo,CIo,wIo,H2,kce,AIo,yIo,uD,LIo,xIo,kIo,U2,Sce,SIo,RIo,bD,BIo,PIo,$Io,J2,Rce,IIo,qIo,FD,NIo,jIo,DIo,Y2,Bce,GIo,OIo,vD,VIo,XIo,zIo,K2,Pce,QIo,WIo,TD,HIo,UIo,JIo,Z2,$ce,YIo,KIo,MD,ZIo,eqo,oqo,e6,Ice,rqo,tqo,ED,aqo,nqo,sqo,o6,qce,lqo,iqo,CD,dqo,cqo,fqo,r6,Nce,mqo,gqo,wD,hqo,pqo,_qo,t6,jce,uqo,bqo,AD,Fqo,vqo,Tqo,a6,Dce,Mqo,Eqo,yD,Cqo,wqo,Aqo,n6,Gce,yqo,Lqo,LD,xqo,kqo,Sqo,s6,Rqo,Oce,Bqo,Pqo,Vce,$qo,Iqo,Xce,qqo,Nqo,bC,HRe,Ad,l6,zce,FC,jqo,Qce,Dqo,URe,sr,vC,Gqo,yd,Oqo,xD,Vqo,Xqo,kD,zqo,Qqo,Wqo,TC,Hqo,Wce,Uqo,Jqo,Yqo,et,MC,Kqo,Hce,Zqo,eNo,Ld,oNo,Uce,rNo,tNo,SD,aNo,nNo,sNo,Jce,lNo,iNo,EC,dNo,We,CC,cNo,Yce,fNo,mNo,en,gNo,Kce,hNo,pNo,Zce,_No,uNo,efe,bNo,FNo,vNo,ofe,i6,rfe,TNo,MNo,RD,ENo,CNo,wNo,d6,ANo,tfe,yNo,LNo,afe,xNo,kNo,nfe,SNo,RNo,wC,JRe,xd,c6,sfe,AC,BNo,lfe,PNo,YRe,lr,yC,$No,kd,INo,BD,qNo,NNo,PD,jNo,DNo,GNo,LC,ONo,ife,VNo,XNo,zNo,ot,xC,QNo,dfe,WNo,HNo,Sd,UNo,cfe,JNo,YNo,$D,KNo,ZNo,ejo,ffe,ojo,rjo,kC,tjo,He,SC,ajo,mfe,njo,sjo,on,ljo,gfe,ijo,djo,hfe,cjo,fjo,pfe,mjo,gjo,hjo,ce,f6,_fe,pjo,_jo,ID,ujo,bjo,Fjo,m6,ufe,vjo,Tjo,qD,Mjo,Ejo,Cjo,Ds,bfe,wjo,Ajo,ND,yjo,Ljo,jD,xjo,kjo,Sjo,g6,Ffe,Rjo,Bjo,DD,Pjo,$jo,Ijo,ma,vfe,qjo,Njo,GD,jjo,Djo,OD,Gjo,Ojo,VD,Vjo,Xjo,zjo,h6,Tfe,Qjo,Wjo,XD,Hjo,Ujo,Jjo,p6,Mfe,Yjo,Kjo,zD,Zjo,eDo,oDo,_6,Efe,rDo,tDo,QD,aDo,nDo,sDo,u6,Cfe,lDo,iDo,WD,dDo,cDo,fDo,b6,wfe,mDo,gDo,HD,hDo,pDo,_Do,F6,Afe,uDo,bDo,UD,FDo,vDo,TDo,v6,yfe,MDo,EDo,JD,CDo,wDo,ADo,T6,yDo,Lfe,LDo,xDo,xfe,kDo,SDo,kfe,RDo,BDo,RC,KRe,Rd,M6,Sfe,BC,PDo,Rfe,$Do,ZRe,ir,PC,IDo,Bd,qDo,YD,NDo,jDo,KD,DDo,GDo,ODo,$C,VDo,Bfe,XDo,zDo,QDo,rt,IC,WDo,Pfe,HDo,UDo,Pd,JDo,$fe,YDo,KDo,ZD,ZDo,eGo,oGo,Ife,rGo,tGo,qC,aGo,Ue,NC,nGo,qfe,sGo,lGo,rn,iGo,Nfe,dGo,cGo,jfe,fGo,mGo,Dfe,gGo,hGo,pGo,Gfe,E6,Ofe,_Go,uGo,eG,bGo,FGo,vGo,C6,TGo,Vfe,MGo,EGo,Xfe,CGo,wGo,zfe,AGo,yGo,jC,eBe,$d,w6,Qfe,DC,LGo,Wfe,xGo,oBe,dr,GC,kGo,Id,SGo,oG,RGo,BGo,rG,PGo,$Go,IGo,OC,qGo,Hfe,NGo,jGo,DGo,tt,VC,GGo,Ufe,OGo,VGo,qd,XGo,Jfe,zGo,QGo,tG,WGo,HGo,UGo,Yfe,JGo,YGo,XC,KGo,Je,zC,ZGo,Kfe,eOo,oOo,tn,rOo,Zfe,tOo,aOo,eme,nOo,sOo,ome,lOo,iOo,dOo,Se,A6,rme,cOo,fOo,aG,mOo,gOo,hOo,y6,tme,pOo,_Oo,nG,uOo,bOo,FOo,L6,ame,vOo,TOo,sG,MOo,EOo,COo,x6,nme,wOo,AOo,lG,yOo,LOo,xOo,k6,sme,kOo,SOo,iG,ROo,BOo,POo,S6,lme,$Oo,IOo,dG,qOo,NOo,jOo,R6,ime,DOo,GOo,cG,OOo,VOo,XOo,B6,dme,zOo,QOo,fG,WOo,HOo,UOo,P6,JOo,cme,YOo,KOo,fme,ZOo,eVo,mme,oVo,rVo,QC,rBe,Nd,$6,gme,WC,tVo,hme,aVo,tBe,cr,HC,nVo,jd,sVo,mG,lVo,iVo,gG,dVo,cVo,fVo,UC,mVo,pme,gVo,hVo,pVo,at,JC,_Vo,_me,uVo,bVo,Dd,FVo,ume,vVo,TVo,hG,MVo,EVo,CVo,bme,wVo,AVo,YC,yVo,Ye,KC,LVo,Fme,xVo,kVo,an,SVo,vme,RVo,BVo,Tme,PVo,$Vo,Mme,IVo,qVo,NVo,nn,I6,Eme,jVo,DVo,pG,GVo,OVo,VVo,q6,Cme,XVo,zVo,_G,QVo,WVo,HVo,N6,wme,UVo,JVo,uG,YVo,KVo,ZVo,j6,Ame,eXo,oXo,bG,rXo,tXo,aXo,D6,nXo,yme,sXo,lXo,Lme,iXo,dXo,xme,cXo,fXo,ZC,aBe,Gd,G6,kme,ew,mXo,Sme,gXo,nBe,fr,ow,hXo,Od,pXo,FG,_Xo,uXo,vG,bXo,FXo,vXo,rw,TXo,Rme,MXo,EXo,CXo,nt,tw,wXo,Bme,AXo,yXo,Vd,LXo,Pme,xXo,kXo,TG,SXo,RXo,BXo,$me,PXo,$Xo,aw,IXo,Ke,nw,qXo,Ime,NXo,jXo,sn,DXo,qme,GXo,OXo,Nme,VXo,XXo,jme,zXo,QXo,WXo,Re,O6,Dme,HXo,UXo,MG,JXo,YXo,KXo,V6,Gme,ZXo,ezo,EG,ozo,rzo,tzo,X6,Ome,azo,nzo,CG,szo,lzo,izo,z6,Vme,dzo,czo,wG,fzo,mzo,gzo,Q6,Xme,hzo,pzo,AG,_zo,uzo,bzo,W6,zme,Fzo,vzo,yG,Tzo,Mzo,Ezo,H6,Qme,Czo,wzo,LG,Azo,yzo,Lzo,U6,Wme,xzo,kzo,xG,Szo,Rzo,Bzo,J6,Pzo,Hme,$zo,Izo,Ume,qzo,Nzo,Jme,jzo,Dzo,sw,sBe,Xd,Y6,Yme,lw,Gzo,Kme,Ozo,lBe,mr,iw,Vzo,zd,Xzo,kG,zzo,Qzo,SG,Wzo,Hzo,Uzo,dw,Jzo,Zme,Yzo,Kzo,Zzo,st,cw,eQo,ege,oQo,rQo,Qd,tQo,oge,aQo,nQo,RG,sQo,lQo,iQo,rge,dQo,cQo,fw,fQo,Ze,mw,mQo,tge,gQo,hQo,ln,pQo,age,_Qo,uQo,nge,bQo,FQo,sge,vQo,TQo,MQo,gw,K6,lge,EQo,CQo,BG,wQo,AQo,yQo,Z6,ige,LQo,xQo,PG,kQo,SQo,RQo,eF,BQo,dge,PQo,$Qo,cge,IQo,qQo,fge,NQo,jQo,hw,iBe,Wd,oF,mge,pw,DQo,gge,GQo,dBe,gr,_w,OQo,Hd,VQo,$G,XQo,zQo,IG,QQo,WQo,HQo,uw,UQo,hge,JQo,YQo,KQo,lt,bw,ZQo,pge,eWo,oWo,Ud,rWo,_ge,tWo,aWo,qG,nWo,sWo,lWo,uge,iWo,dWo,Fw,cWo,eo,vw,fWo,bge,mWo,gWo,dn,hWo,Fge,pWo,_Wo,vge,uWo,bWo,Tge,FWo,vWo,TWo,cn,rF,Mge,MWo,EWo,NG,CWo,wWo,AWo,tF,Ege,yWo,LWo,jG,xWo,kWo,SWo,aF,Cge,RWo,BWo,DG,PWo,$Wo,IWo,nF,wge,qWo,NWo,GG,jWo,DWo,GWo,sF,OWo,Age,VWo,XWo,yge,zWo,QWo,Lge,WWo,HWo,Tw,cBe,Jd,lF,xge,Mw,UWo,kge,JWo,fBe,hr,Ew,YWo,Yd,KWo,OG,ZWo,eHo,VG,oHo,rHo,tHo,Cw,aHo,Sge,nHo,sHo,lHo,it,ww,iHo,Rge,dHo,cHo,Kd,fHo,Bge,mHo,gHo,XG,hHo,pHo,_Ho,Pge,uHo,bHo,Aw,FHo,oo,yw,vHo,$ge,THo,MHo,fn,EHo,Ige,CHo,wHo,qge,AHo,yHo,Nge,LHo,xHo,kHo,Zd,iF,jge,SHo,RHo,zG,BHo,PHo,$Ho,dF,Dge,IHo,qHo,QG,NHo,jHo,DHo,cF,Gge,GHo,OHo,WG,VHo,XHo,zHo,fF,QHo,Oge,WHo,HHo,Vge,UHo,JHo,Xge,YHo,KHo,Lw,mBe,ec,mF,zge,xw,ZHo,Qge,eUo,gBe,pr,kw,oUo,oc,rUo,HG,tUo,aUo,UG,nUo,sUo,lUo,Sw,iUo,Wge,dUo,cUo,fUo,dt,Rw,mUo,Hge,gUo,hUo,rc,pUo,Uge,_Uo,uUo,JG,bUo,FUo,vUo,Jge,TUo,MUo,Bw,EUo,ro,Pw,CUo,Yge,wUo,AUo,mn,yUo,Kge,LUo,xUo,Zge,kUo,SUo,ehe,RUo,BUo,PUo,ohe,gF,rhe,$Uo,IUo,YG,qUo,NUo,jUo,hF,DUo,the,GUo,OUo,ahe,VUo,XUo,nhe,zUo,QUo,$w,hBe,tc,pF,she,Iw,WUo,lhe,HUo,pBe,_r,qw,UUo,ac,JUo,KG,YUo,KUo,ZG,ZUo,eJo,oJo,Nw,rJo,ihe,tJo,aJo,nJo,ct,jw,sJo,dhe,lJo,iJo,nc,dJo,che,cJo,fJo,eO,mJo,gJo,hJo,fhe,pJo,_Jo,Dw,uJo,to,Gw,bJo,mhe,FJo,vJo,gn,TJo,ghe,MJo,EJo,hhe,CJo,wJo,phe,AJo,yJo,LJo,_he,_F,uhe,xJo,kJo,oO,SJo,RJo,BJo,uF,PJo,bhe,$Jo,IJo,Fhe,qJo,NJo,vhe,jJo,DJo,Ow,_Be,sc,bF,The,Vw,GJo,Mhe,OJo,uBe,ur,Xw,VJo,lc,XJo,rO,zJo,QJo,tO,WJo,HJo,UJo,zw,JJo,Ehe,YJo,KJo,ZJo,ft,Qw,eYo,Che,oYo,rYo,ic,tYo,whe,aYo,nYo,aO,sYo,lYo,iYo,Ahe,dYo,cYo,Ww,fYo,ao,Hw,mYo,yhe,gYo,hYo,hn,pYo,Lhe,_Yo,uYo,xhe,bYo,FYo,khe,vYo,TYo,MYo,dc,FF,She,EYo,CYo,nO,wYo,AYo,yYo,vF,Rhe,LYo,xYo,sO,kYo,SYo,RYo,TF,Bhe,BYo,PYo,lO,$Yo,IYo,qYo,MF,NYo,Phe,jYo,DYo,$he,GYo,OYo,Ihe,VYo,XYo,Uw,bBe,cc,EF,qhe,Jw,zYo,Nhe,QYo,FBe,br,Yw,WYo,fc,HYo,iO,UYo,JYo,dO,YYo,KYo,ZYo,Kw,eKo,jhe,oKo,rKo,tKo,mt,Zw,aKo,Dhe,nKo,sKo,mc,lKo,Ghe,iKo,dKo,cO,cKo,fKo,mKo,Ohe,gKo,hKo,eA,pKo,no,oA,_Ko,Vhe,uKo,bKo,pn,FKo,Xhe,vKo,TKo,zhe,MKo,EKo,Qhe,CKo,wKo,AKo,Whe,CF,Hhe,yKo,LKo,fO,xKo,kKo,SKo,wF,RKo,Uhe,BKo,PKo,Jhe,$Ko,IKo,Yhe,qKo,NKo,rA,vBe,gc,AF,Khe,tA,jKo,Zhe,DKo,TBe,Fr,aA,GKo,hc,OKo,mO,VKo,XKo,gO,zKo,QKo,WKo,nA,HKo,epe,UKo,JKo,YKo,gt,sA,KKo,ope,ZKo,eZo,pc,oZo,rpe,rZo,tZo,hO,aZo,nZo,sZo,tpe,lZo,iZo,lA,dZo,ho,iA,cZo,ape,fZo,mZo,_n,gZo,npe,hZo,pZo,spe,_Zo,uZo,lpe,bZo,FZo,vZo,x,yF,ipe,TZo,MZo,pO,EZo,CZo,wZo,LF,dpe,AZo,yZo,_O,LZo,xZo,kZo,xF,cpe,SZo,RZo,uO,BZo,PZo,$Zo,kF,fpe,IZo,qZo,bO,NZo,jZo,DZo,SF,mpe,GZo,OZo,FO,VZo,XZo,zZo,RF,gpe,QZo,WZo,vO,HZo,UZo,JZo,BF,hpe,YZo,KZo,TO,ZZo,eer,oer,PF,ppe,rer,ter,MO,aer,ner,ser,$F,_pe,ler,ier,EO,der,cer,fer,IF,upe,mer,ger,CO,her,per,_er,qF,bpe,uer,ber,wO,Fer,ver,Ter,NF,Fpe,Mer,Eer,AO,Cer,wer,Aer,jF,vpe,yer,Ler,yO,xer,ker,Ser,DF,Tpe,Rer,Ber,LO,Per,$er,Ier,GF,Mpe,qer,Ner,xO,jer,Der,Ger,OF,Epe,Oer,Ver,kO,Xer,zer,Qer,Gs,Cpe,Wer,Her,SO,Uer,Jer,RO,Yer,Ker,Zer,VF,wpe,eor,oor,BO,ror,tor,aor,XF,Ape,nor,sor,PO,lor,ior,dor,zF,ype,cor,mor,$O,gor,hor,por,QF,Lpe,_or,uor,IO,bor,For,vor,WF,xpe,Tor,Mor,qO,Eor,Cor,wor,HF,kpe,Aor,yor,NO,Lor,xor,kor,UF,Spe,Sor,Ror,jO,Bor,Por,$or,JF,Rpe,Ior,qor,DO,Nor,jor,Dor,YF,Bpe,Gor,Oor,GO,Vor,Xor,zor,KF,Ppe,Qor,Wor,OO,Hor,Uor,Jor,ZF,$pe,Yor,Kor,VO,Zor,err,orr,ev,Ipe,rrr,trr,XO,arr,nrr,srr,ov,qpe,lrr,irr,zO,drr,crr,frr,rv,Npe,mrr,grr,QO,hrr,prr,_rr,tv,jpe,urr,brr,WO,Frr,vrr,Trr,av,Dpe,Mrr,Err,HO,Crr,wrr,Arr,nv,Gpe,yrr,Lrr,UO,xrr,krr,Srr,sv,Ope,Rrr,Brr,JO,Prr,$rr,Irr,lv,Vpe,qrr,Nrr,YO,jrr,Drr,Grr,iv,Xpe,Orr,Vrr,KO,Xrr,zrr,Qrr,dv,zpe,Wrr,Hrr,ZO,Urr,Jrr,Yrr,cv,Qpe,Krr,Zrr,eV,etr,otr,rtr,fv,Wpe,ttr,atr,oV,ntr,str,ltr,mv,Hpe,itr,dtr,rV,ctr,ftr,mtr,gv,Upe,gtr,htr,tV,ptr,_tr,utr,hv,Jpe,btr,Ftr,aV,vtr,Ttr,Mtr,pv,Ype,Etr,Ctr,nV,wtr,Atr,ytr,Kpe,Ltr,xtr,dA,MBe,_c,_v,Zpe,cA,ktr,e_e,Str,EBe,vr,fA,Rtr,uc,Btr,sV,Ptr,$tr,lV,Itr,qtr,Ntr,mA,jtr,o_e,Dtr,Gtr,Otr,ht,gA,Vtr,r_e,Xtr,ztr,bc,Qtr,t_e,Wtr,Htr,iV,Utr,Jtr,Ytr,a_e,Ktr,Ztr,hA,ear,po,pA,oar,n_e,rar,tar,un,aar,s_e,nar,sar,l_e,lar,iar,i_e,dar,car,far,H,uv,d_e,mar,gar,dV,har,par,_ar,bv,c_e,uar,bar,cV,Far,Tar,Mar,Fv,f_e,Ear,Car,fV,war,Aar,yar,vv,m_e,Lar,xar,mV,kar,Sar,Rar,Tv,g_e,Bar,Par,gV,$ar,Iar,qar,Mv,h_e,Nar,jar,hV,Dar,Gar,Oar,Ev,p_e,Var,Xar,pV,zar,Qar,War,Cv,__e,Har,Uar,_V,Jar,Yar,Kar,wv,u_e,Zar,enr,uV,onr,rnr,tnr,Av,b_e,anr,nnr,bV,snr,lnr,inr,yv,F_e,dnr,cnr,FV,fnr,mnr,gnr,Lv,v_e,hnr,pnr,vV,_nr,unr,bnr,xv,T_e,Fnr,vnr,TV,Tnr,Mnr,Enr,kv,M_e,Cnr,wnr,MV,Anr,ynr,Lnr,Sv,E_e,xnr,knr,EV,Snr,Rnr,Bnr,Rv,C_e,Pnr,$nr,CV,Inr,qnr,Nnr,Bv,w_e,jnr,Dnr,wV,Gnr,Onr,Vnr,Pv,A_e,Xnr,znr,AV,Qnr,Wnr,Hnr,$v,y_e,Unr,Jnr,yV,Ynr,Knr,Znr,Iv,L_e,esr,osr,LV,rsr,tsr,asr,qv,x_e,nsr,ssr,xV,lsr,isr,dsr,Nv,k_e,csr,fsr,kV,msr,gsr,hsr,jv,S_e,psr,_sr,SV,usr,bsr,Fsr,R_e,vsr,Tsr,_A,CBe,Fc,Dv,B_e,uA,Msr,P_e,Esr,wBe,Tr,bA,Csr,vc,wsr,RV,Asr,ysr,BV,Lsr,xsr,ksr,FA,Ssr,$_e,Rsr,Bsr,Psr,pt,vA,$sr,I_e,Isr,qsr,Tc,Nsr,q_e,jsr,Dsr,PV,Gsr,Osr,Vsr,N_e,Xsr,zsr,TA,Qsr,_o,MA,Wsr,j_e,Hsr,Usr,bn,Jsr,D_e,Ysr,Ksr,G_e,Zsr,elr,O_e,olr,rlr,tlr,fe,Gv,V_e,alr,nlr,$V,slr,llr,ilr,Ov,X_e,dlr,clr,IV,flr,mlr,glr,Vv,z_e,hlr,plr,qV,_lr,ulr,blr,Xv,Q_e,Flr,vlr,NV,Tlr,Mlr,Elr,zv,W_e,Clr,wlr,jV,Alr,ylr,Llr,Qv,H_e,xlr,klr,DV,Slr,Rlr,Blr,Wv,U_e,Plr,$lr,GV,Ilr,qlr,Nlr,Hv,J_e,jlr,Dlr,OV,Glr,Olr,Vlr,Uv,Y_e,Xlr,zlr,VV,Qlr,Wlr,Hlr,Jv,K_e,Ulr,Jlr,XV,Ylr,Klr,Zlr,Yv,Z_e,eir,oir,zV,rir,tir,air,Kv,eue,nir,sir,QV,lir,iir,dir,oue,cir,fir,EA,ABe,Mc,Zv,rue,CA,mir,tue,gir,yBe,Mr,wA,hir,Ec,pir,WV,_ir,uir,HV,bir,Fir,vir,AA,Tir,aue,Mir,Eir,Cir,_t,yA,wir,nue,Air,yir,Cc,Lir,sue,xir,kir,UV,Sir,Rir,Bir,lue,Pir,$ir,LA,Iir,uo,xA,qir,iue,Nir,jir,Fn,Dir,due,Gir,Oir,cue,Vir,Xir,fue,zir,Qir,Wir,kA,e0,mue,Hir,Uir,JV,Jir,Yir,Kir,o0,gue,Zir,edr,YV,odr,rdr,tdr,hue,adr,ndr,SA,LBe,wc,r0,pue,RA,sdr,_ue,ldr,xBe,Er,BA,idr,Ac,ddr,KV,cdr,fdr,ZV,mdr,gdr,hdr,PA,pdr,uue,_dr,udr,bdr,ut,$A,Fdr,bue,vdr,Tdr,yc,Mdr,Fue,Edr,Cdr,eX,wdr,Adr,ydr,vue,Ldr,xdr,IA,kdr,bo,qA,Sdr,Tue,Rdr,Bdr,vn,Pdr,Mue,$dr,Idr,Eue,qdr,Ndr,Cue,jdr,Ddr,Gdr,J,t0,wue,Odr,Vdr,oX,Xdr,zdr,Qdr,a0,Aue,Wdr,Hdr,rX,Udr,Jdr,Ydr,n0,yue,Kdr,Zdr,tX,ecr,ocr,rcr,s0,Lue,tcr,acr,aX,ncr,scr,lcr,l0,xue,icr,dcr,nX,ccr,fcr,mcr,i0,kue,gcr,hcr,sX,pcr,_cr,ucr,d0,Sue,bcr,Fcr,lX,vcr,Tcr,Mcr,c0,Rue,Ecr,Ccr,iX,wcr,Acr,ycr,f0,Bue,Lcr,xcr,dX,kcr,Scr,Rcr,m0,Pue,Bcr,Pcr,cX,$cr,Icr,qcr,g0,$ue,Ncr,jcr,fX,Dcr,Gcr,Ocr,h0,Iue,Vcr,Xcr,mX,zcr,Qcr,Wcr,p0,que,Hcr,Ucr,gX,Jcr,Ycr,Kcr,_0,Nue,Zcr,efr,hX,ofr,rfr,tfr,u0,jue,afr,nfr,pX,sfr,lfr,ifr,b0,Due,dfr,cfr,_X,ffr,mfr,gfr,F0,Gue,hfr,pfr,uX,_fr,ufr,bfr,v0,Oue,Ffr,vfr,bX,Tfr,Mfr,Efr,T0,Vue,Cfr,wfr,FX,Afr,yfr,Lfr,M0,Xue,xfr,kfr,vX,Sfr,Rfr,Bfr,zue,Pfr,$fr,NA,kBe,Lc,E0,Que,jA,Ifr,Wue,qfr,SBe,Cr,DA,Nfr,xc,jfr,TX,Dfr,Gfr,MX,Ofr,Vfr,Xfr,GA,zfr,Hue,Qfr,Wfr,Hfr,bt,OA,Ufr,Uue,Jfr,Yfr,kc,Kfr,Jue,Zfr,emr,EX,omr,rmr,tmr,Yue,amr,nmr,VA,smr,Fo,XA,lmr,Kue,imr,dmr,Tn,cmr,Zue,fmr,mmr,e1e,gmr,hmr,o1e,pmr,_mr,umr,be,C0,r1e,bmr,Fmr,CX,vmr,Tmr,Mmr,w0,t1e,Emr,Cmr,wX,wmr,Amr,ymr,A0,a1e,Lmr,xmr,AX,kmr,Smr,Rmr,y0,n1e,Bmr,Pmr,yX,$mr,Imr,qmr,L0,s1e,Nmr,jmr,LX,Dmr,Gmr,Omr,x0,l1e,Vmr,Xmr,xX,zmr,Qmr,Wmr,k0,i1e,Hmr,Umr,kX,Jmr,Ymr,Kmr,S0,d1e,Zmr,egr,SX,ogr,rgr,tgr,R0,c1e,agr,ngr,RX,sgr,lgr,igr,B0,f1e,dgr,cgr,BX,fgr,mgr,ggr,m1e,hgr,pgr,zA,RBe,Sc,P0,g1e,QA,_gr,h1e,ugr,BBe,wr,WA,bgr,Rc,Fgr,PX,vgr,Tgr,$X,Mgr,Egr,Cgr,HA,wgr,p1e,Agr,ygr,Lgr,Ft,UA,xgr,_1e,kgr,Sgr,Bc,Rgr,u1e,Bgr,Pgr,IX,$gr,Igr,qgr,b1e,Ngr,jgr,JA,Dgr,vo,YA,Ggr,F1e,Ogr,Vgr,Mn,Xgr,v1e,zgr,Qgr,T1e,Wgr,Hgr,M1e,Ugr,Jgr,Ygr,V,$0,E1e,Kgr,Zgr,qX,ehr,ohr,rhr,I0,C1e,thr,ahr,NX,nhr,shr,lhr,q0,w1e,ihr,dhr,jX,chr,fhr,mhr,N0,A1e,ghr,hhr,DX,phr,_hr,uhr,j0,y1e,bhr,Fhr,GX,vhr,Thr,Mhr,D0,L1e,Ehr,Chr,OX,whr,Ahr,yhr,G0,x1e,Lhr,xhr,VX,khr,Shr,Rhr,O0,k1e,Bhr,Phr,XX,$hr,Ihr,qhr,V0,S1e,Nhr,jhr,zX,Dhr,Ghr,Ohr,X0,R1e,Vhr,Xhr,QX,zhr,Qhr,Whr,z0,B1e,Hhr,Uhr,WX,Jhr,Yhr,Khr,Q0,P1e,Zhr,epr,HX,opr,rpr,tpr,W0,$1e,apr,npr,UX,spr,lpr,ipr,H0,I1e,dpr,cpr,JX,fpr,mpr,gpr,U0,q1e,hpr,ppr,YX,_pr,upr,bpr,J0,N1e,Fpr,vpr,KX,Tpr,Mpr,Epr,Y0,j1e,Cpr,wpr,ZX,Apr,ypr,Lpr,K0,D1e,xpr,kpr,ez,Spr,Rpr,Bpr,Z0,G1e,Ppr,$pr,oz,Ipr,qpr,Npr,eT,O1e,jpr,Dpr,rz,Gpr,Opr,Vpr,oT,V1e,Xpr,zpr,tz,Qpr,Wpr,Hpr,rT,X1e,Upr,Jpr,az,Ypr,Kpr,Zpr,tT,z1e,e_r,o_r,nz,r_r,t_r,a_r,aT,Q1e,n_r,s_r,sz,l_r,i_r,d_r,nT,W1e,c_r,f_r,lz,m_r,g_r,h_r,sT,H1e,p_r,__r,iz,u_r,b_r,F_r,U1e,v_r,T_r,KA,PBe,Pc,lT,J1e,ZA,M_r,Y1e,E_r,$Be,Ar,ey,C_r,$c,w_r,dz,A_r,y_r,cz,L_r,x_r,k_r,oy,S_r,K1e,R_r,B_r,P_r,vt,ry,$_r,Z1e,I_r,q_r,Ic,N_r,e8e,j_r,D_r,fz,G_r,O_r,V_r,o8e,X_r,z_r,ty,Q_r,To,ay,W_r,r8e,H_r,U_r,En,J_r,t8e,Y_r,K_r,a8e,Z_r,eur,n8e,our,rur,tur,se,iT,s8e,aur,nur,mz,sur,lur,iur,dT,l8e,dur,cur,gz,fur,mur,gur,cT,i8e,hur,pur,hz,_ur,uur,bur,fT,d8e,Fur,vur,pz,Tur,Mur,Eur,mT,c8e,Cur,wur,_z,Aur,yur,Lur,gT,f8e,xur,kur,uz,Sur,Rur,Bur,hT,m8e,Pur,$ur,bz,Iur,qur,Nur,pT,g8e,jur,Dur,Fz,Gur,Our,Vur,_T,h8e,Xur,zur,vz,Qur,Wur,Hur,uT,p8e,Uur,Jur,Tz,Yur,Kur,Zur,bT,_8e,e1r,o1r,Mz,r1r,t1r,a1r,FT,u8e,n1r,s1r,Ez,l1r,i1r,d1r,vT,b8e,c1r,f1r,Cz,m1r,g1r,h1r,TT,F8e,p1r,_1r,wz,u1r,b1r,F1r,MT,v8e,v1r,T1r,Az,M1r,E1r,C1r,ET,T8e,w1r,A1r,yz,y1r,L1r,x1r,CT,M8e,k1r,S1r,Lz,R1r,B1r,P1r,E8e,$1r,I1r,ny,IBe,qc,wT,C8e,sy,q1r,w8e,N1r,qBe,yr,ly,j1r,Nc,D1r,xz,G1r,O1r,kz,V1r,X1r,z1r,iy,Q1r,A8e,W1r,H1r,U1r,Tt,dy,J1r,y8e,Y1r,K1r,jc,Z1r,L8e,e8r,o8r,Sz,r8r,t8r,a8r,x8e,n8r,s8r,cy,l8r,Mo,fy,i8r,k8e,d8r,c8r,Cn,f8r,S8e,m8r,g8r,R8e,h8r,p8r,B8e,_8r,u8r,b8r,P8e,AT,$8e,F8r,v8r,Rz,T8r,M8r,E8r,I8e,C8r,w8r,my,NBe,Dc,yT,q8e,gy,A8r,N8e,y8r,jBe,Lr,hy,L8r,Gc,x8r,Bz,k8r,S8r,Pz,R8r,B8r,P8r,py,$8r,j8e,I8r,q8r,N8r,Mt,_y,j8r,D8e,D8r,G8r,Oc,O8r,G8e,V8r,X8r,$z,z8r,Q8r,W8r,O8e,H8r,U8r,uy,J8r,Eo,by,Y8r,V8e,K8r,Z8r,wn,ebr,X8e,obr,rbr,z8e,tbr,abr,Q8e,nbr,sbr,lbr,Y,LT,W8e,ibr,dbr,Iz,cbr,fbr,mbr,xT,H8e,gbr,hbr,qz,pbr,_br,ubr,kT,U8e,bbr,Fbr,Nz,vbr,Tbr,Mbr,ST,J8e,Ebr,Cbr,jz,wbr,Abr,ybr,RT,Y8e,Lbr,xbr,Dz,kbr,Sbr,Rbr,BT,K8e,Bbr,Pbr,Gz,$br,Ibr,qbr,PT,Z8e,Nbr,jbr,Oz,Dbr,Gbr,Obr,$T,ebe,Vbr,Xbr,Vz,zbr,Qbr,Wbr,IT,obe,Hbr,Ubr,Xz,Jbr,Ybr,Kbr,qT,rbe,Zbr,e2r,zz,o2r,r2r,t2r,NT,tbe,a2r,n2r,Qz,s2r,l2r,i2r,jT,abe,d2r,c2r,Wz,f2r,m2r,g2r,DT,nbe,h2r,p2r,Hz,_2r,u2r,b2r,GT,sbe,F2r,v2r,Uz,T2r,M2r,E2r,OT,lbe,C2r,w2r,Jz,A2r,y2r,L2r,VT,ibe,x2r,k2r,Yz,S2r,R2r,B2r,XT,dbe,P2r,$2r,Kz,I2r,q2r,N2r,zT,cbe,j2r,D2r,Zz,G2r,O2r,V2r,QT,fbe,X2r,z2r,eQ,Q2r,W2r,H2r,WT,mbe,U2r,J2r,oQ,Y2r,K2r,Z2r,gbe,e6r,o6r,Fy,DBe,Vc,HT,hbe,vy,r6r,pbe,t6r,GBe,xr,Ty,a6r,Xc,n6r,rQ,s6r,l6r,tQ,i6r,d6r,c6r,My,f6r,_be,m6r,g6r,h6r,Et,Ey,p6r,ube,_6r,u6r,zc,b6r,bbe,F6r,v6r,aQ,T6r,M6r,E6r,Fbe,C6r,w6r,Cy,A6r,Co,wy,y6r,vbe,L6r,x6r,An,k6r,Tbe,S6r,R6r,Mbe,B6r,P6r,Ebe,$6r,I6r,q6r,K,UT,Cbe,N6r,j6r,nQ,D6r,G6r,O6r,JT,wbe,V6r,X6r,sQ,z6r,Q6r,W6r,YT,Abe,H6r,U6r,lQ,J6r,Y6r,K6r,KT,ybe,Z6r,eFr,iQ,oFr,rFr,tFr,ZT,Lbe,aFr,nFr,dQ,sFr,lFr,iFr,eM,xbe,dFr,cFr,cQ,fFr,mFr,gFr,oM,kbe,hFr,pFr,fQ,_Fr,uFr,bFr,rM,Sbe,FFr,vFr,mQ,TFr,MFr,EFr,tM,Rbe,CFr,wFr,gQ,AFr,yFr,LFr,aM,Bbe,xFr,kFr,hQ,SFr,RFr,BFr,nM,Pbe,PFr,$Fr,pQ,IFr,qFr,NFr,sM,$be,jFr,DFr,_Q,GFr,OFr,VFr,lM,Ibe,XFr,zFr,uQ,QFr,WFr,HFr,iM,qbe,UFr,JFr,bQ,YFr,KFr,ZFr,dM,Nbe,evr,ovr,FQ,rvr,tvr,avr,cM,jbe,nvr,svr,vQ,lvr,ivr,dvr,fM,Dbe,cvr,fvr,TQ,mvr,gvr,hvr,mM,Gbe,pvr,_vr,MQ,uvr,bvr,Fvr,gM,Obe,vvr,Tvr,EQ,Mvr,Evr,Cvr,hM,Vbe,wvr,Avr,CQ,yvr,Lvr,xvr,Xbe,kvr,Svr,Ay,OBe,Qc,pM,zbe,yy,Rvr,Qbe,Bvr,VBe,kr,Ly,Pvr,Wc,$vr,wQ,Ivr,qvr,AQ,Nvr,jvr,Dvr,xy,Gvr,Wbe,Ovr,Vvr,Xvr,Ct,ky,zvr,Hbe,Qvr,Wvr,Hc,Hvr,Ube,Uvr,Jvr,yQ,Yvr,Kvr,Zvr,Jbe,e0r,o0r,Sy,r0r,wo,Ry,t0r,Ybe,a0r,n0r,yn,s0r,Kbe,l0r,i0r,Zbe,d0r,c0r,e2e,f0r,m0r,g0r,o2e,_M,r2e,h0r,p0r,LQ,_0r,u0r,b0r,t2e,F0r,v0r,By,XBe,Uc,uM,a2e,Py,T0r,n2e,M0r,zBe,Sr,$y,E0r,Jc,C0r,xQ,w0r,A0r,kQ,y0r,L0r,x0r,Iy,k0r,s2e,S0r,R0r,B0r,wt,qy,P0r,l2e,$0r,I0r,Yc,q0r,i2e,N0r,j0r,SQ,D0r,G0r,O0r,d2e,V0r,X0r,Ny,z0r,Ao,jy,Q0r,c2e,W0r,H0r,Ln,U0r,f2e,J0r,Y0r,m2e,K0r,Z0r,g2e,eTr,oTr,rTr,h2e,bM,p2e,tTr,aTr,RQ,nTr,sTr,lTr,_2e,iTr,dTr,Dy,QBe,Kc,FM,u2e,Gy,cTr,b2e,fTr,WBe,Rr,Oy,mTr,Zc,gTr,BQ,hTr,pTr,PQ,_Tr,uTr,bTr,Vy,FTr,F2e,vTr,TTr,MTr,At,Xy,ETr,v2e,CTr,wTr,ef,ATr,T2e,yTr,LTr,$Q,xTr,kTr,STr,M2e,RTr,BTr,zy,PTr,yo,Qy,$Tr,E2e,ITr,qTr,xn,NTr,C2e,jTr,DTr,w2e,GTr,OTr,A2e,VTr,XTr,zTr,z,vM,y2e,QTr,WTr,IQ,HTr,UTr,JTr,TM,L2e,YTr,KTr,qQ,ZTr,eMr,oMr,MM,x2e,rMr,tMr,NQ,aMr,nMr,sMr,EM,k2e,lMr,iMr,jQ,dMr,cMr,fMr,CM,S2e,mMr,gMr,DQ,hMr,pMr,_Mr,wM,R2e,uMr,bMr,GQ,FMr,vMr,TMr,AM,B2e,MMr,EMr,OQ,CMr,wMr,AMr,yM,P2e,yMr,LMr,VQ,xMr,kMr,SMr,LM,$2e,RMr,BMr,XQ,PMr,$Mr,IMr,xM,I2e,qMr,NMr,zQ,jMr,DMr,GMr,kM,q2e,OMr,VMr,QQ,XMr,zMr,QMr,SM,N2e,WMr,HMr,WQ,UMr,JMr,YMr,RM,j2e,KMr,ZMr,HQ,e4r,o4r,r4r,BM,D2e,t4r,a4r,UQ,n4r,s4r,l4r,PM,G2e,i4r,d4r,JQ,c4r,f4r,m4r,$M,O2e,g4r,h4r,YQ,p4r,_4r,u4r,IM,V2e,b4r,F4r,KQ,v4r,T4r,M4r,qM,X2e,E4r,C4r,ZQ,w4r,A4r,y4r,NM,z2e,L4r,x4r,eW,k4r,S4r,R4r,jM,Q2e,B4r,P4r,oW,$4r,I4r,q4r,DM,W2e,N4r,j4r,rW,D4r,G4r,O4r,GM,H2e,V4r,X4r,tW,z4r,Q4r,W4r,OM,U2e,H4r,U4r,aW,J4r,Y4r,K4r,VM,J2e,Z4r,eEr,nW,oEr,rEr,tEr,XM,Y2e,aEr,nEr,sW,sEr,lEr,iEr,K2e,dEr,cEr,Wy,HBe,of,zM,Z2e,Hy,fEr,e6e,mEr,UBe,Br,Uy,gEr,rf,hEr,lW,pEr,_Er,iW,uEr,bEr,FEr,Jy,vEr,o6e,TEr,MEr,EEr,yt,Yy,CEr,r6e,wEr,AEr,tf,yEr,t6e,LEr,xEr,dW,kEr,SEr,REr,a6e,BEr,PEr,Ky,$Er,Lo,Zy,IEr,n6e,qEr,NEr,kn,jEr,s6e,DEr,GEr,l6e,OEr,VEr,i6e,XEr,zEr,QEr,ca,QM,d6e,WEr,HEr,cW,UEr,JEr,YEr,WM,c6e,KEr,ZEr,fW,e5r,o5r,r5r,HM,f6e,t5r,a5r,mW,n5r,s5r,l5r,UM,m6e,i5r,d5r,gW,c5r,f5r,m5r,JM,g6e,g5r,h5r,hW,p5r,_5r,u5r,h6e,b5r,F5r,eL,JBe,af,YM,p6e,oL,v5r,_6e,T5r,YBe,Pr,rL,M5r,nf,E5r,pW,C5r,w5r,_W,A5r,y5r,L5r,tL,x5r,u6e,k5r,S5r,R5r,Lt,aL,B5r,b6e,P5r,$5r,sf,I5r,F6e,q5r,N5r,uW,j5r,D5r,G5r,v6e,O5r,V5r,nL,X5r,xo,sL,z5r,T6e,Q5r,W5r,Sn,H5r,M6e,U5r,J5r,E6e,Y5r,K5r,C6e,Z5r,e3r,o3r,me,KM,w6e,r3r,t3r,bW,a3r,n3r,s3r,ZM,A6e,l3r,i3r,FW,d3r,c3r,f3r,e4,y6e,m3r,g3r,vW,h3r,p3r,_3r,o4,L6e,u3r,b3r,TW,F3r,v3r,T3r,r4,x6e,M3r,E3r,MW,C3r,w3r,A3r,t4,k6e,y3r,L3r,EW,x3r,k3r,S3r,a4,S6e,R3r,B3r,CW,P3r,$3r,I3r,n4,R6e,q3r,N3r,wW,j3r,D3r,G3r,s4,B6e,O3r,V3r,AW,X3r,z3r,Q3r,l4,P6e,W3r,H3r,yW,U3r,J3r,Y3r,i4,$6e,K3r,Z3r,LW,eCr,oCr,rCr,d4,I6e,tCr,aCr,xW,nCr,sCr,lCr,q6e,iCr,dCr,lL,KBe,lf,c4,N6e,iL,cCr,j6e,fCr,ZBe,$r,dL,mCr,df,gCr,kW,hCr,pCr,SW,_Cr,uCr,bCr,cL,FCr,D6e,vCr,TCr,MCr,xt,fL,ECr,G6e,CCr,wCr,cf,ACr,O6e,yCr,LCr,RW,xCr,kCr,SCr,V6e,RCr,BCr,mL,PCr,ko,gL,$Cr,X6e,ICr,qCr,Rn,NCr,z6e,jCr,DCr,Q6e,GCr,OCr,W6e,VCr,XCr,zCr,Fe,f4,H6e,QCr,WCr,BW,HCr,UCr,JCr,m4,U6e,YCr,KCr,PW,ZCr,ewr,owr,g4,J6e,rwr,twr,$W,awr,nwr,swr,h4,Y6e,lwr,iwr,IW,dwr,cwr,fwr,p4,K6e,mwr,gwr,qW,hwr,pwr,_wr,_4,Z6e,uwr,bwr,NW,Fwr,vwr,Twr,u4,eFe,Mwr,Ewr,jW,Cwr,wwr,Awr,b4,oFe,ywr,Lwr,DW,xwr,kwr,Swr,F4,rFe,Rwr,Bwr,GW,Pwr,$wr,Iwr,v4,tFe,qwr,Nwr,OW,jwr,Dwr,Gwr,aFe,Owr,Vwr,hL,ePe,ff,T4,nFe,pL,Xwr,sFe,zwr,oPe,Ir,_L,Qwr,mf,Wwr,VW,Hwr,Uwr,XW,Jwr,Ywr,Kwr,uL,Zwr,lFe,eAr,oAr,rAr,kt,bL,tAr,iFe,aAr,nAr,gf,sAr,dFe,lAr,iAr,zW,dAr,cAr,fAr,cFe,mAr,gAr,FL,hAr,So,vL,pAr,fFe,_Ar,uAr,Bn,bAr,mFe,FAr,vAr,gFe,TAr,MAr,hFe,EAr,CAr,wAr,Ee,M4,pFe,AAr,yAr,QW,LAr,xAr,kAr,E4,_Fe,SAr,RAr,WW,BAr,PAr,$Ar,C4,uFe,IAr,qAr,HW,NAr,jAr,DAr,w4,bFe,GAr,OAr,UW,VAr,XAr,zAr,A4,FFe,QAr,WAr,JW,HAr,UAr,JAr,y4,vFe,YAr,KAr,YW,ZAr,eyr,oyr,L4,TFe,ryr,tyr,KW,ayr,nyr,syr,x4,MFe,lyr,iyr,ZW,dyr,cyr,fyr,k4,EFe,myr,gyr,eH,hyr,pyr,_yr,CFe,uyr,byr,TL,rPe,hf,S4,wFe,ML,Fyr,AFe,vyr,tPe,qr,EL,Tyr,pf,Myr,oH,Eyr,Cyr,rH,wyr,Ayr,yyr,CL,Lyr,yFe,xyr,kyr,Syr,St,wL,Ryr,LFe,Byr,Pyr,_f,$yr,xFe,Iyr,qyr,tH,Nyr,jyr,Dyr,kFe,Gyr,Oyr,AL,Vyr,Ro,yL,Xyr,SFe,zyr,Qyr,Pn,Wyr,RFe,Hyr,Uyr,BFe,Jyr,Yyr,PFe,Kyr,Zyr,eLr,ve,R4,$Fe,oLr,rLr,aH,tLr,aLr,nLr,B4,IFe,sLr,lLr,nH,iLr,dLr,cLr,P4,qFe,fLr,mLr,sH,gLr,hLr,pLr,$4,NFe,_Lr,uLr,lH,bLr,FLr,vLr,I4,jFe,TLr,MLr,iH,ELr,CLr,wLr,q4,DFe,ALr,yLr,dH,LLr,xLr,kLr,N4,GFe,SLr,RLr,cH,BLr,PLr,$Lr,j4,OFe,ILr,qLr,fH,NLr,jLr,DLr,D4,VFe,GLr,OLr,mH,VLr,XLr,zLr,G4,XFe,QLr,WLr,gH,HLr,ULr,JLr,zFe,YLr,KLr,LL,aPe,uf,O4,QFe,xL,ZLr,WFe,e7r,nPe,Nr,kL,o7r,bf,r7r,hH,t7r,a7r,pH,n7r,s7r,l7r,SL,i7r,HFe,d7r,c7r,f7r,Rt,RL,m7r,UFe,g7r,h7r,Ff,p7r,JFe,_7r,u7r,_H,b7r,F7r,v7r,YFe,T7r,M7r,BL,E7r,Bo,PL,C7r,KFe,w7r,A7r,$n,y7r,ZFe,L7r,x7r,eve,k7r,S7r,ove,R7r,B7r,P7r,Te,V4,rve,$7r,I7r,uH,q7r,N7r,j7r,X4,tve,D7r,G7r,bH,O7r,V7r,X7r,z4,ave,z7r,Q7r,FH,W7r,H7r,U7r,Q4,nve,J7r,Y7r,vH,K7r,Z7r,exr,W4,sve,oxr,rxr,TH,txr,axr,nxr,H4,lve,sxr,lxr,MH,ixr,dxr,cxr,U4,ive,fxr,mxr,EH,gxr,hxr,pxr,J4,dve,_xr,uxr,CH,bxr,Fxr,vxr,Y4,cve,Txr,Mxr,wH,Exr,Cxr,wxr,K4,fve,Axr,yxr,AH,Lxr,xxr,kxr,mve,Sxr,Rxr,$L,sPe,vf,Z4,gve,IL,Bxr,hve,Pxr,lPe,jr,qL,$xr,Tf,Ixr,yH,qxr,Nxr,LH,jxr,Dxr,Gxr,NL,Oxr,pve,Vxr,Xxr,zxr,Bt,jL,Qxr,_ve,Wxr,Hxr,Mf,Uxr,uve,Jxr,Yxr,xH,Kxr,Zxr,e9r,bve,o9r,r9r,DL,t9r,Po,GL,a9r,Fve,n9r,s9r,In,l9r,vve,i9r,d9r,Tve,c9r,f9r,Mve,m9r,g9r,h9r,Be,eE,Eve,p9r,_9r,kH,u9r,b9r,F9r,oE,Cve,v9r,T9r,SH,M9r,E9r,C9r,rE,wve,w9r,A9r,RH,y9r,L9r,x9r,tE,Ave,k9r,S9r,BH,R9r,B9r,P9r,aE,yve,$9r,I9r,PH,q9r,N9r,j9r,nE,Lve,D9r,G9r,$H,O9r,V9r,X9r,sE,xve,z9r,Q9r,IH,W9r,H9r,U9r,lE,kve,J9r,Y9r,qH,K9r,Z9r,ekr,Sve,okr,rkr,OL,iPe,Ef,iE,Rve,VL,tkr,Bve,akr,dPe,Dr,XL,nkr,Cf,skr,NH,lkr,ikr,jH,dkr,ckr,fkr,zL,mkr,Pve,gkr,hkr,pkr,Pt,QL,_kr,$ve,ukr,bkr,wf,Fkr,Ive,vkr,Tkr,DH,Mkr,Ekr,Ckr,qve,wkr,Akr,WL,ykr,$o,HL,Lkr,Nve,xkr,kkr,qn,Skr,jve,Rkr,Bkr,Dve,Pkr,$kr,Gve,Ikr,qkr,Nkr,Pe,dE,Ove,jkr,Dkr,GH,Gkr,Okr,Vkr,cE,Vve,Xkr,zkr,OH,Qkr,Wkr,Hkr,fE,Xve,Ukr,Jkr,VH,Ykr,Kkr,Zkr,mE,zve,eSr,oSr,XH,rSr,tSr,aSr,gE,Qve,nSr,sSr,zH,lSr,iSr,dSr,hE,Wve,cSr,fSr,QH,mSr,gSr,hSr,pE,Hve,pSr,_Sr,WH,uSr,bSr,FSr,_E,Uve,vSr,TSr,HH,MSr,ESr,CSr,Jve,wSr,ASr,UL,cPe,Af,uE,Yve,JL,ySr,Kve,LSr,fPe,Gr,YL,xSr,yf,kSr,UH,SSr,RSr,JH,BSr,PSr,$Sr,KL,ISr,Zve,qSr,NSr,jSr,$t,ZL,DSr,e0e,GSr,OSr,Lf,VSr,o0e,XSr,zSr,YH,QSr,WSr,HSr,r0e,USr,JSr,e7,YSr,Io,o7,KSr,t0e,ZSr,eRr,Nn,oRr,a0e,rRr,tRr,n0e,aRr,nRr,s0e,sRr,lRr,iRr,l0e,bE,i0e,dRr,cRr,KH,fRr,mRr,gRr,d0e,hRr,pRr,r7,mPe,xf,FE,c0e,t7,_Rr,f0e,uRr,gPe,Or,a7,bRr,kf,FRr,ZH,vRr,TRr,eU,MRr,ERr,CRr,n7,wRr,m0e,ARr,yRr,LRr,It,s7,xRr,g0e,kRr,SRr,Sf,RRr,h0e,BRr,PRr,oU,$Rr,IRr,qRr,p0e,NRr,jRr,l7,DRr,qo,i7,GRr,_0e,ORr,VRr,jn,XRr,u0e,zRr,QRr,b0e,WRr,HRr,F0e,URr,JRr,YRr,d7,vE,v0e,KRr,ZRr,rU,eBr,oBr,rBr,TE,T0e,tBr,aBr,tU,nBr,sBr,lBr,M0e,iBr,dBr,c7,hPe,Rf,ME,E0e,f7,cBr,C0e,fBr,pPe,Vr,m7,mBr,Bf,gBr,aU,hBr,pBr,nU,_Br,uBr,bBr,g7,FBr,w0e,vBr,TBr,MBr,qt,h7,EBr,A0e,CBr,wBr,Pf,ABr,y0e,yBr,LBr,sU,xBr,kBr,SBr,L0e,RBr,BBr,p7,PBr,No,_7,$Br,x0e,IBr,qBr,Dn,NBr,k0e,jBr,DBr,S0e,GBr,OBr,R0e,VBr,XBr,zBr,B0e,EE,P0e,QBr,WBr,lU,HBr,UBr,JBr,$0e,YBr,KBr,u7,_Pe;return ge=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),y5=new X({}),L5=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new ZBr({props:{warning:!0,$$slots:{default:[$5t]},$$scope:{ctx:If}}}),x5=new X({}),k5=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/configuration_auto.py#L552"}}),B5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/configuration_auto.py#L575"}}),P5=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),$5=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/configuration_auto.py#L697"}}),I5=new X({}),q5=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/tokenization_auto.py#L352"}}),D5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16808/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/tokenization_auto.py#L366"}}),G5=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),O5=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/tokenization_auto.py#L562"}}),V5=new X({}),X5=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),W5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16808/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),Ih=new ZBr({props:{$$slots:{default:[I5t]},$$scope:{ctx:If}}}),H5=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),U5=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),J5=new X({}),Y5=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/processing_auto.py#L70"}}),e3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/processing_auto.py#L84"}}),Wh=new ZBr({props:{$$slots:{default:[q5t]},$$scope:{ctx:If}}}),o3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),r3=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/processing_auto.py#L237"}}),t3=new X({}),a3=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L711"}}),s3=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),l3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),i3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c3=new X({}),f3=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L718"}}),g3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),p3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u3=new X({}),b3=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L733"}}),v3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),M3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C3=new X({}),w3=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L740"}}),y3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),x3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S3=new X({}),R3=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L747"}}),P3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),I3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N3=new X({}),j3=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L756"}}),G3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),V3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z3=new X({}),Q3=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L790"}}),H3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),J3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K3=new X({}),Z3=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L797"}}),oC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),tC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nC=new X({}),sC=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L783"}}),iC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),cC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mC=new X({}),gC=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L765"}}),pC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),uC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FC=new X({}),vC=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L772"}}),MC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),CC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AC=new X({}),yC=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L806"}}),xC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),SC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BC=new X({}),PC=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L845"}}),IC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),NC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DC=new X({}),GC=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L852"}}),VC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),zC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WC=new X({}),HC=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L875"}}),JC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),KC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ew=new X({}),ow=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L859"}}),tw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),nw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new X({}),iw=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L866"}}),cw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),mw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new X({}),_w=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L884"}}),bw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),vw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),Tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new X({}),Ew=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L891"}}),ww=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),yw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new X({}),kw=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L838"}}),Rw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Pw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new X({}),qw=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L813"}}),jw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Gw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new X({}),Xw=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L820"}}),Qw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Hw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new X({}),Yw=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_auto.py#L829"}}),Zw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),oA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),sA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),iA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),dA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new X({}),fA=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),gA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),pA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),_A=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new X({}),bA=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),vA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),TA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),MA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),wA=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),yA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),xA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new X({}),BA=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),$A=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),IA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),qA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),OA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),VA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),XA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),zA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),WA=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),UA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),JA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),YA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),ey=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),ry=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),ay=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),dy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),fy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),my=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),_y=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),by=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vy=new X({}),Ty=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Ey=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),Cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),wy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),Ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new X({}),Ly=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),ky=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Ry=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),qy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),Ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),jy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),Dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new X({}),Oy=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Xy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Qy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),Wy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Yy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),Ky=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Zy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),eL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oL=new X({}),rL=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),aL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),nL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),sL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),lL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iL=new X({}),dL=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),fL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),mL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),gL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),hL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pL=new X({}),_L=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),bL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),FL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),vL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),TL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ML=new X({}),EL=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),wL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),AL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),yL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),LL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xL=new X({}),kL=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),RL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),BL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),PL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),$L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IL=new X({}),qL=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),jL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),DL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),GL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),OL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VL=new X({}),XL=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),QL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),WL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),HL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),UL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JL=new X({}),YL=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),ZL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),o7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t7=new X({}),a7=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),s7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),i7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),c7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f7=new X({}),m7=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),h7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),_7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16808/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16808/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16808/src/transformers/models/auto/auto_factory.py#L417"}}),u7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(ge.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),E5=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),C5=o("AutoConfig"),On=o(", "),Vn=a("a"),w5=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),A5=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),px=o("will create a model that is an instance of "),Oi=a("a"),_x=o("BertModel"),ux=o("."),zo=l(),Ga=a("p"),bx=o("There is one class of "),Df=a("code"),Fx=o("AutoModel"),LIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pRe=l(),Vi=a("h2"),Gf=a("a"),oY=a("span"),f(y5.$$.fragment),xIe=l(),rY=a("span"),kIe=o("Extending the Auto Classes"),_Re=l(),zn=a("p"),SIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tY=a("code"),RIe=o("NewModel"),BIe=o(", make sure you have a "),aY=a("code"),PIe=o("NewModelConfig"),$Ie=o(` then you can add those to the auto
classes like this:`),uRe=l(),f(L5.$$.fragment),bRe=l(),vx=a("p"),IIe=o("You will then be able to use the auto classes like you would usually do!"),FRe=l(),f(Of.$$.fragment),vRe=l(),Xi=a("h2"),Vf=a("a"),nY=a("span"),f(x5.$$.fragment),qIe=l(),sY=a("span"),NIe=o("AutoConfig"),TRe=l(),Qo=a("div"),f(k5.$$.fragment),jIe=l(),S5=a("p"),DIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Tx=a("a"),GIe=o("from_pretrained()"),OIe=o(" class method."),VIe=l(),R5=a("p"),XIe=o("This class cannot be instantiated directly using "),lY=a("code"),zIe=o("__init__()"),QIe=o(" (throws an error)."),WIe=l(),mo=a("div"),f(B5.$$.fragment),HIe=l(),iY=a("p"),UIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),JIe=l(),zi=a("p"),YIe=o("The configuration class to instantiate is selected based on the "),dY=a("code"),KIe=o("model_type"),ZIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cY=a("code"),eqe=o("pretrained_model_name_or_path"),oqe=o(":"),rqe=l(),F=a("ul"),Xf=a("li"),fY=a("strong"),tqe=o("albert"),aqe=o(" \u2014 "),Mx=a("a"),nqe=o("AlbertConfig"),sqe=o(" (ALBERT model)"),lqe=l(),zf=a("li"),mY=a("strong"),iqe=o("bart"),dqe=o(" \u2014 "),Ex=a("a"),cqe=o("BartConfig"),fqe=o(" (BART model)"),mqe=l(),Qf=a("li"),gY=a("strong"),gqe=o("beit"),hqe=o(" \u2014 "),Cx=a("a"),pqe=o("BeitConfig"),_qe=o(" (BEiT model)"),uqe=l(),Wf=a("li"),hY=a("strong"),bqe=o("bert"),Fqe=o(" \u2014 "),wx=a("a"),vqe=o("BertConfig"),Tqe=o(" (BERT model)"),Mqe=l(),Hf=a("li"),pY=a("strong"),Eqe=o("bert-generation"),Cqe=o(" \u2014 "),Ax=a("a"),wqe=o("BertGenerationConfig"),Aqe=o(" (Bert Generation model)"),yqe=l(),Uf=a("li"),_Y=a("strong"),Lqe=o("big_bird"),xqe=o(" \u2014 "),yx=a("a"),kqe=o("BigBirdConfig"),Sqe=o(" (BigBird model)"),Rqe=l(),Jf=a("li"),uY=a("strong"),Bqe=o("bigbird_pegasus"),Pqe=o(" \u2014 "),Lx=a("a"),$qe=o("BigBirdPegasusConfig"),Iqe=o(" (BigBirdPegasus model)"),qqe=l(),Yf=a("li"),bY=a("strong"),Nqe=o("blenderbot"),jqe=o(" \u2014 "),xx=a("a"),Dqe=o("BlenderbotConfig"),Gqe=o(" (Blenderbot model)"),Oqe=l(),Kf=a("li"),FY=a("strong"),Vqe=o("blenderbot-small"),Xqe=o(" \u2014 "),kx=a("a"),zqe=o("BlenderbotSmallConfig"),Qqe=o(" (BlenderbotSmall model)"),Wqe=l(),Zf=a("li"),vY=a("strong"),Hqe=o("camembert"),Uqe=o(" \u2014 "),Sx=a("a"),Jqe=o("CamembertConfig"),Yqe=o(" (CamemBERT model)"),Kqe=l(),em=a("li"),TY=a("strong"),Zqe=o("canine"),eNe=o(" \u2014 "),Rx=a("a"),oNe=o("CanineConfig"),rNe=o(" (Canine model)"),tNe=l(),om=a("li"),MY=a("strong"),aNe=o("clip"),nNe=o(" \u2014 "),Bx=a("a"),sNe=o("CLIPConfig"),lNe=o(" (CLIP model)"),iNe=l(),rm=a("li"),EY=a("strong"),dNe=o("convbert"),cNe=o(" \u2014 "),Px=a("a"),fNe=o("ConvBertConfig"),mNe=o(" (ConvBERT model)"),gNe=l(),tm=a("li"),CY=a("strong"),hNe=o("convnext"),pNe=o(" \u2014 "),$x=a("a"),_Ne=o("ConvNextConfig"),uNe=o(" (ConvNext model)"),bNe=l(),am=a("li"),wY=a("strong"),FNe=o("ctrl"),vNe=o(" \u2014 "),Ix=a("a"),TNe=o("CTRLConfig"),MNe=o(" (CTRL model)"),ENe=l(),nm=a("li"),AY=a("strong"),CNe=o("data2vec-audio"),wNe=o(" \u2014 "),qx=a("a"),ANe=o("Data2VecAudioConfig"),yNe=o(" (Data2VecAudio model)"),LNe=l(),sm=a("li"),yY=a("strong"),xNe=o("data2vec-text"),kNe=o(" \u2014 "),Nx=a("a"),SNe=o("Data2VecTextConfig"),RNe=o(" (Data2VecText model)"),BNe=l(),lm=a("li"),LY=a("strong"),PNe=o("deberta"),$Ne=o(" \u2014 "),jx=a("a"),INe=o("DebertaConfig"),qNe=o(" (DeBERTa model)"),NNe=l(),im=a("li"),xY=a("strong"),jNe=o("deberta-v2"),DNe=o(" \u2014 "),Dx=a("a"),GNe=o("DebertaV2Config"),ONe=o(" (DeBERTa-v2 model)"),VNe=l(),dm=a("li"),kY=a("strong"),XNe=o("decision_transformer"),zNe=o(" \u2014 "),Gx=a("a"),QNe=o("DecisionTransformerConfig"),WNe=o(" (Decision Transformer model)"),HNe=l(),cm=a("li"),SY=a("strong"),UNe=o("deit"),JNe=o(" \u2014 "),Ox=a("a"),YNe=o("DeiTConfig"),KNe=o(" (DeiT model)"),ZNe=l(),fm=a("li"),RY=a("strong"),eje=o("detr"),oje=o(" \u2014 "),Vx=a("a"),rje=o("DetrConfig"),tje=o(" (DETR model)"),aje=l(),mm=a("li"),BY=a("strong"),nje=o("distilbert"),sje=o(" \u2014 "),Xx=a("a"),lje=o("DistilBertConfig"),ije=o(" (DistilBERT model)"),dje=l(),gm=a("li"),PY=a("strong"),cje=o("dpr"),fje=o(" \u2014 "),zx=a("a"),mje=o("DPRConfig"),gje=o(" (DPR model)"),hje=l(),hm=a("li"),$Y=a("strong"),pje=o("dpt"),_je=o(" \u2014 "),Qx=a("a"),uje=o("DPTConfig"),bje=o(" (DPT model)"),Fje=l(),pm=a("li"),IY=a("strong"),vje=o("electra"),Tje=o(" \u2014 "),Wx=a("a"),Mje=o("ElectraConfig"),Eje=o(" (ELECTRA model)"),Cje=l(),_m=a("li"),qY=a("strong"),wje=o("encoder-decoder"),Aje=o(" \u2014 "),Hx=a("a"),yje=o("EncoderDecoderConfig"),Lje=o(" (Encoder decoder model)"),xje=l(),um=a("li"),NY=a("strong"),kje=o("flaubert"),Sje=o(" \u2014 "),Ux=a("a"),Rje=o("FlaubertConfig"),Bje=o(" (FlauBERT model)"),Pje=l(),bm=a("li"),jY=a("strong"),$je=o("fnet"),Ije=o(" \u2014 "),Jx=a("a"),qje=o("FNetConfig"),Nje=o(" (FNet model)"),jje=l(),Fm=a("li"),DY=a("strong"),Dje=o("fsmt"),Gje=o(" \u2014 "),Yx=a("a"),Oje=o("FSMTConfig"),Vje=o(" (FairSeq Machine-Translation model)"),Xje=l(),vm=a("li"),GY=a("strong"),zje=o("funnel"),Qje=o(" \u2014 "),Kx=a("a"),Wje=o("FunnelConfig"),Hje=o(" (Funnel Transformer model)"),Uje=l(),Tm=a("li"),OY=a("strong"),Jje=o("glpn"),Yje=o(" \u2014 "),Zx=a("a"),Kje=o("GLPNConfig"),Zje=o(" (GLPN model)"),eDe=l(),Mm=a("li"),VY=a("strong"),oDe=o("gpt2"),rDe=o(" \u2014 "),e9=a("a"),tDe=o("GPT2Config"),aDe=o(" (OpenAI GPT-2 model)"),nDe=l(),Em=a("li"),XY=a("strong"),sDe=o("gpt_neo"),lDe=o(" \u2014 "),o9=a("a"),iDe=o("GPTNeoConfig"),dDe=o(" (GPT Neo model)"),cDe=l(),Cm=a("li"),zY=a("strong"),fDe=o("gptj"),mDe=o(" \u2014 "),r9=a("a"),gDe=o("GPTJConfig"),hDe=o(" (GPT-J model)"),pDe=l(),wm=a("li"),QY=a("strong"),_De=o("hubert"),uDe=o(" \u2014 "),t9=a("a"),bDe=o("HubertConfig"),FDe=o(" (Hubert model)"),vDe=l(),Am=a("li"),WY=a("strong"),TDe=o("ibert"),MDe=o(" \u2014 "),a9=a("a"),EDe=o("IBertConfig"),CDe=o(" (I-BERT model)"),wDe=l(),ym=a("li"),HY=a("strong"),ADe=o("imagegpt"),yDe=o(" \u2014 "),n9=a("a"),LDe=o("ImageGPTConfig"),xDe=o(" (ImageGPT model)"),kDe=l(),Lm=a("li"),UY=a("strong"),SDe=o("layoutlm"),RDe=o(" \u2014 "),s9=a("a"),BDe=o("LayoutLMConfig"),PDe=o(" (LayoutLM model)"),$De=l(),xm=a("li"),JY=a("strong"),IDe=o("layoutlmv2"),qDe=o(" \u2014 "),l9=a("a"),NDe=o("LayoutLMv2Config"),jDe=o(" (LayoutLMv2 model)"),DDe=l(),km=a("li"),YY=a("strong"),GDe=o("led"),ODe=o(" \u2014 "),i9=a("a"),VDe=o("LEDConfig"),XDe=o(" (LED model)"),zDe=l(),Sm=a("li"),KY=a("strong"),QDe=o("longformer"),WDe=o(" \u2014 "),d9=a("a"),HDe=o("LongformerConfig"),UDe=o(" (Longformer model)"),JDe=l(),Rm=a("li"),ZY=a("strong"),YDe=o("luke"),KDe=o(" \u2014 "),c9=a("a"),ZDe=o("LukeConfig"),eGe=o(" (LUKE model)"),oGe=l(),Bm=a("li"),eK=a("strong"),rGe=o("lxmert"),tGe=o(" \u2014 "),f9=a("a"),aGe=o("LxmertConfig"),nGe=o(" (LXMERT model)"),sGe=l(),Pm=a("li"),oK=a("strong"),lGe=o("m2m_100"),iGe=o(" \u2014 "),m9=a("a"),dGe=o("M2M100Config"),cGe=o(" (M2M100 model)"),fGe=l(),$m=a("li"),rK=a("strong"),mGe=o("marian"),gGe=o(" \u2014 "),g9=a("a"),hGe=o("MarianConfig"),pGe=o(" (Marian model)"),_Ge=l(),Im=a("li"),tK=a("strong"),uGe=o("maskformer"),bGe=o(" \u2014 "),h9=a("a"),FGe=o("MaskFormerConfig"),vGe=o(" (MaskFormer model)"),TGe=l(),qm=a("li"),aK=a("strong"),MGe=o("mbart"),EGe=o(" \u2014 "),p9=a("a"),CGe=o("MBartConfig"),wGe=o(" (mBART model)"),AGe=l(),Nm=a("li"),nK=a("strong"),yGe=o("megatron-bert"),LGe=o(" \u2014 "),_9=a("a"),xGe=o("MegatronBertConfig"),kGe=o(" (MegatronBert model)"),SGe=l(),jm=a("li"),sK=a("strong"),RGe=o("mobilebert"),BGe=o(" \u2014 "),u9=a("a"),PGe=o("MobileBertConfig"),$Ge=o(" (MobileBERT model)"),IGe=l(),Dm=a("li"),lK=a("strong"),qGe=o("mpnet"),NGe=o(" \u2014 "),b9=a("a"),jGe=o("MPNetConfig"),DGe=o(" (MPNet model)"),GGe=l(),Gm=a("li"),iK=a("strong"),OGe=o("mt5"),VGe=o(" \u2014 "),F9=a("a"),XGe=o("MT5Config"),zGe=o(" (mT5 model)"),QGe=l(),Om=a("li"),dK=a("strong"),WGe=o("nystromformer"),HGe=o(" \u2014 "),v9=a("a"),UGe=o("NystromformerConfig"),JGe=o(" (Nystromformer model)"),YGe=l(),Vm=a("li"),cK=a("strong"),KGe=o("openai-gpt"),ZGe=o(" \u2014 "),T9=a("a"),eOe=o("OpenAIGPTConfig"),oOe=o(" (OpenAI GPT model)"),rOe=l(),Xm=a("li"),fK=a("strong"),tOe=o("pegasus"),aOe=o(" \u2014 "),M9=a("a"),nOe=o("PegasusConfig"),sOe=o(" (Pegasus model)"),lOe=l(),zm=a("li"),mK=a("strong"),iOe=o("perceiver"),dOe=o(" \u2014 "),E9=a("a"),cOe=o("PerceiverConfig"),fOe=o(" (Perceiver model)"),mOe=l(),Qm=a("li"),gK=a("strong"),gOe=o("plbart"),hOe=o(" \u2014 "),C9=a("a"),pOe=o("PLBartConfig"),_Oe=o(" (PLBart model)"),uOe=l(),Wm=a("li"),hK=a("strong"),bOe=o("poolformer"),FOe=o(" \u2014 "),w9=a("a"),vOe=o("PoolFormerConfig"),TOe=o(" (PoolFormer model)"),MOe=l(),Hm=a("li"),pK=a("strong"),EOe=o("prophetnet"),COe=o(" \u2014 "),A9=a("a"),wOe=o("ProphetNetConfig"),AOe=o(" (ProphetNet model)"),yOe=l(),Um=a("li"),_K=a("strong"),LOe=o("qdqbert"),xOe=o(" \u2014 "),y9=a("a"),kOe=o("QDQBertConfig"),SOe=o(" (QDQBert model)"),ROe=l(),Jm=a("li"),uK=a("strong"),BOe=o("rag"),POe=o(" \u2014 "),L9=a("a"),$Oe=o("RagConfig"),IOe=o(" (RAG model)"),qOe=l(),Ym=a("li"),bK=a("strong"),NOe=o("realm"),jOe=o(" \u2014 "),x9=a("a"),DOe=o("RealmConfig"),GOe=o(" (Realm model)"),OOe=l(),Km=a("li"),FK=a("strong"),VOe=o("reformer"),XOe=o(" \u2014 "),k9=a("a"),zOe=o("ReformerConfig"),QOe=o(" (Reformer model)"),WOe=l(),Zm=a("li"),vK=a("strong"),HOe=o("regnet"),UOe=o(" \u2014 "),S9=a("a"),JOe=o("RegNetConfig"),YOe=o(" (RegNet model)"),KOe=l(),eg=a("li"),TK=a("strong"),ZOe=o("rembert"),eVe=o(" \u2014 "),R9=a("a"),oVe=o("RemBertConfig"),rVe=o(" (RemBERT model)"),tVe=l(),og=a("li"),MK=a("strong"),aVe=o("resnet"),nVe=o(" \u2014 "),B9=a("a"),sVe=o("ResNetConfig"),lVe=o(" (ResNet model)"),iVe=l(),rg=a("li"),EK=a("strong"),dVe=o("retribert"),cVe=o(" \u2014 "),P9=a("a"),fVe=o("RetriBertConfig"),mVe=o(" (RetriBERT model)"),gVe=l(),tg=a("li"),CK=a("strong"),hVe=o("roberta"),pVe=o(" \u2014 "),$9=a("a"),_Ve=o("RobertaConfig"),uVe=o(" (RoBERTa model)"),bVe=l(),ag=a("li"),wK=a("strong"),FVe=o("roformer"),vVe=o(" \u2014 "),I9=a("a"),TVe=o("RoFormerConfig"),MVe=o(" (RoFormer model)"),EVe=l(),ng=a("li"),AK=a("strong"),CVe=o("segformer"),wVe=o(" \u2014 "),q9=a("a"),AVe=o("SegformerConfig"),yVe=o(" (SegFormer model)"),LVe=l(),sg=a("li"),yK=a("strong"),xVe=o("sew"),kVe=o(" \u2014 "),N9=a("a"),SVe=o("SEWConfig"),RVe=o(" (SEW model)"),BVe=l(),lg=a("li"),LK=a("strong"),PVe=o("sew-d"),$Ve=o(" \u2014 "),j9=a("a"),IVe=o("SEWDConfig"),qVe=o(" (SEW-D model)"),NVe=l(),ig=a("li"),xK=a("strong"),jVe=o("speech-encoder-decoder"),DVe=o(" \u2014 "),D9=a("a"),GVe=o("SpeechEncoderDecoderConfig"),OVe=o(" (Speech Encoder decoder model)"),VVe=l(),dg=a("li"),kK=a("strong"),XVe=o("speech_to_text"),zVe=o(" \u2014 "),G9=a("a"),QVe=o("Speech2TextConfig"),WVe=o(" (Speech2Text model)"),HVe=l(),cg=a("li"),SK=a("strong"),UVe=o("speech_to_text_2"),JVe=o(" \u2014 "),O9=a("a"),YVe=o("Speech2Text2Config"),KVe=o(" (Speech2Text2 model)"),ZVe=l(),fg=a("li"),RK=a("strong"),eXe=o("splinter"),oXe=o(" \u2014 "),V9=a("a"),rXe=o("SplinterConfig"),tXe=o(" (Splinter model)"),aXe=l(),mg=a("li"),BK=a("strong"),nXe=o("squeezebert"),sXe=o(" \u2014 "),X9=a("a"),lXe=o("SqueezeBertConfig"),iXe=o(" (SqueezeBERT model)"),dXe=l(),gg=a("li"),PK=a("strong"),cXe=o("swin"),fXe=o(" \u2014 "),z9=a("a"),mXe=o("SwinConfig"),gXe=o(" (Swin model)"),hXe=l(),hg=a("li"),$K=a("strong"),pXe=o("t5"),_Xe=o(" \u2014 "),Q9=a("a"),uXe=o("T5Config"),bXe=o(" (T5 model)"),FXe=l(),pg=a("li"),IK=a("strong"),vXe=o("tapas"),TXe=o(" \u2014 "),W9=a("a"),MXe=o("TapasConfig"),EXe=o(" (TAPAS model)"),CXe=l(),_g=a("li"),qK=a("strong"),wXe=o("tapex"),AXe=o(" \u2014 "),H9=a("a"),yXe=o("BartConfig"),LXe=o(" (TAPEX model)"),xXe=l(),ug=a("li"),NK=a("strong"),kXe=o("transfo-xl"),SXe=o(" \u2014 "),U9=a("a"),RXe=o("TransfoXLConfig"),BXe=o(" (Transformer-XL model)"),PXe=l(),bg=a("li"),jK=a("strong"),$Xe=o("trocr"),IXe=o(" \u2014 "),J9=a("a"),qXe=o("TrOCRConfig"),NXe=o(" (TrOCR model)"),jXe=l(),Fg=a("li"),DK=a("strong"),DXe=o("unispeech"),GXe=o(" \u2014 "),Y9=a("a"),OXe=o("UniSpeechConfig"),VXe=o(" (UniSpeech model)"),XXe=l(),vg=a("li"),GK=a("strong"),zXe=o("unispeech-sat"),QXe=o(" \u2014 "),K9=a("a"),WXe=o("UniSpeechSatConfig"),HXe=o(" (UniSpeechSat model)"),UXe=l(),Tg=a("li"),OK=a("strong"),JXe=o("van"),YXe=o(" \u2014 "),Z9=a("a"),KXe=o("VanConfig"),ZXe=o(" (VAN model)"),eze=l(),Mg=a("li"),VK=a("strong"),oze=o("vilt"),rze=o(" \u2014 "),ek=a("a"),tze=o("ViltConfig"),aze=o(" (ViLT model)"),nze=l(),Eg=a("li"),XK=a("strong"),sze=o("vision-encoder-decoder"),lze=o(" \u2014 "),ok=a("a"),ize=o("VisionEncoderDecoderConfig"),dze=o(" (Vision Encoder decoder model)"),cze=l(),Cg=a("li"),zK=a("strong"),fze=o("vision-text-dual-encoder"),mze=o(" \u2014 "),rk=a("a"),gze=o("VisionTextDualEncoderConfig"),hze=o(" (VisionTextDualEncoder model)"),pze=l(),wg=a("li"),QK=a("strong"),_ze=o("visual_bert"),uze=o(" \u2014 "),tk=a("a"),bze=o("VisualBertConfig"),Fze=o(" (VisualBert model)"),vze=l(),Ag=a("li"),WK=a("strong"),Tze=o("vit"),Mze=o(" \u2014 "),ak=a("a"),Eze=o("ViTConfig"),Cze=o(" (ViT model)"),wze=l(),yg=a("li"),HK=a("strong"),Aze=o("vit_mae"),yze=o(" \u2014 "),nk=a("a"),Lze=o("ViTMAEConfig"),xze=o(" (ViTMAE model)"),kze=l(),Lg=a("li"),UK=a("strong"),Sze=o("wav2vec2"),Rze=o(" \u2014 "),sk=a("a"),Bze=o("Wav2Vec2Config"),Pze=o(" (Wav2Vec2 model)"),$ze=l(),xg=a("li"),JK=a("strong"),Ize=o("wavlm"),qze=o(" \u2014 "),lk=a("a"),Nze=o("WavLMConfig"),jze=o(" (WavLM model)"),Dze=l(),kg=a("li"),YK=a("strong"),Gze=o("xglm"),Oze=o(" \u2014 "),ik=a("a"),Vze=o("XGLMConfig"),Xze=o(" (XGLM model)"),zze=l(),Sg=a("li"),KK=a("strong"),Qze=o("xlm"),Wze=o(" \u2014 "),dk=a("a"),Hze=o("XLMConfig"),Uze=o(" (XLM model)"),Jze=l(),Rg=a("li"),ZK=a("strong"),Yze=o("xlm-prophetnet"),Kze=o(" \u2014 "),ck=a("a"),Zze=o("XLMProphetNetConfig"),eQe=o(" (XLMProphetNet model)"),oQe=l(),Bg=a("li"),eZ=a("strong"),rQe=o("xlm-roberta"),tQe=o(" \u2014 "),fk=a("a"),aQe=o("XLMRobertaConfig"),nQe=o(" (XLM-RoBERTa model)"),sQe=l(),Pg=a("li"),oZ=a("strong"),lQe=o("xlm-roberta-xl"),iQe=o(" \u2014 "),mk=a("a"),dQe=o("XLMRobertaXLConfig"),cQe=o(" (XLM-RoBERTa-XL model)"),fQe=l(),$g=a("li"),rZ=a("strong"),mQe=o("xlnet"),gQe=o(" \u2014 "),gk=a("a"),hQe=o("XLNetConfig"),pQe=o(" (XLNet model)"),_Qe=l(),Ig=a("li"),tZ=a("strong"),uQe=o("yoso"),bQe=o(" \u2014 "),hk=a("a"),FQe=o("YosoConfig"),vQe=o(" (YOSO model)"),TQe=l(),aZ=a("p"),MQe=o("Examples:"),EQe=l(),f(P5.$$.fragment),CQe=l(),qg=a("div"),f($5.$$.fragment),wQe=l(),nZ=a("p"),AQe=o("Register a new configuration for this class."),MRe=l(),Qi=a("h2"),Ng=a("a"),sZ=a("span"),f(I5.$$.fragment),yQe=l(),lZ=a("span"),LQe=o("AutoTokenizer"),ERe=l(),Wo=a("div"),f(q5.$$.fragment),xQe=l(),N5=a("p"),kQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pk=a("a"),SQe=o("AutoTokenizer.from_pretrained()"),RQe=o(" class method."),BQe=l(),j5=a("p"),PQe=o("This class cannot be instantiated directly using "),iZ=a("code"),$Qe=o("__init__()"),IQe=o(" (throws an error)."),qQe=l(),go=a("div"),f(D5.$$.fragment),NQe=l(),dZ=a("p"),jQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),DQe=l(),Oa=a("p"),GQe=o("The tokenizer class to instantiate is selected based on the "),cZ=a("code"),OQe=o("model_type"),VQe=o(` property of the config object (either
passed as an argument or loaded from `),fZ=a("code"),XQe=o("pretrained_model_name_or_path"),zQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mZ=a("code"),QQe=o("pretrained_model_name_or_path"),WQe=o(":"),HQe=l(),E=a("ul"),Qn=a("li"),gZ=a("strong"),UQe=o("albert"),JQe=o(" \u2014 "),_k=a("a"),YQe=o("AlbertTokenizer"),KQe=o(" or "),uk=a("a"),ZQe=o("AlbertTokenizerFast"),eWe=o(" (ALBERT model)"),oWe=l(),Wn=a("li"),hZ=a("strong"),rWe=o("bart"),tWe=o(" \u2014 "),bk=a("a"),aWe=o("BartTokenizer"),nWe=o(" or "),Fk=a("a"),sWe=o("BartTokenizerFast"),lWe=o(" (BART model)"),iWe=l(),Hn=a("li"),pZ=a("strong"),dWe=o("barthez"),cWe=o(" \u2014 "),vk=a("a"),fWe=o("BarthezTokenizer"),mWe=o(" or "),Tk=a("a"),gWe=o("BarthezTokenizerFast"),hWe=o(" (BARThez model)"),pWe=l(),jg=a("li"),_Z=a("strong"),_We=o("bartpho"),uWe=o(" \u2014 "),Mk=a("a"),bWe=o("BartphoTokenizer"),FWe=o(" (BARTpho model)"),vWe=l(),Un=a("li"),uZ=a("strong"),TWe=o("bert"),MWe=o(" \u2014 "),Ek=a("a"),EWe=o("BertTokenizer"),CWe=o(" or "),Ck=a("a"),wWe=o("BertTokenizerFast"),AWe=o(" (BERT model)"),yWe=l(),Dg=a("li"),bZ=a("strong"),LWe=o("bert-generation"),xWe=o(" \u2014 "),wk=a("a"),kWe=o("BertGenerationTokenizer"),SWe=o(" (Bert Generation model)"),RWe=l(),Gg=a("li"),FZ=a("strong"),BWe=o("bert-japanese"),PWe=o(" \u2014 "),Ak=a("a"),$We=o("BertJapaneseTokenizer"),IWe=o(" (BertJapanese model)"),qWe=l(),Og=a("li"),vZ=a("strong"),NWe=o("bertweet"),jWe=o(" \u2014 "),yk=a("a"),DWe=o("BertweetTokenizer"),GWe=o(" (Bertweet model)"),OWe=l(),Jn=a("li"),TZ=a("strong"),VWe=o("big_bird"),XWe=o(" \u2014 "),Lk=a("a"),zWe=o("BigBirdTokenizer"),QWe=o(" or "),xk=a("a"),WWe=o("BigBirdTokenizerFast"),HWe=o(" (BigBird model)"),UWe=l(),Yn=a("li"),MZ=a("strong"),JWe=o("bigbird_pegasus"),YWe=o(" \u2014 "),kk=a("a"),KWe=o("PegasusTokenizer"),ZWe=o(" or "),Sk=a("a"),eHe=o("PegasusTokenizerFast"),oHe=o(" (BigBirdPegasus model)"),rHe=l(),Kn=a("li"),EZ=a("strong"),tHe=o("blenderbot"),aHe=o(" \u2014 "),Rk=a("a"),nHe=o("BlenderbotTokenizer"),sHe=o(" or "),Bk=a("a"),lHe=o("BlenderbotTokenizerFast"),iHe=o(" (Blenderbot model)"),dHe=l(),Vg=a("li"),CZ=a("strong"),cHe=o("blenderbot-small"),fHe=o(" \u2014 "),Pk=a("a"),mHe=o("BlenderbotSmallTokenizer"),gHe=o(" (BlenderbotSmall model)"),hHe=l(),Xg=a("li"),wZ=a("strong"),pHe=o("byt5"),_He=o(" \u2014 "),$k=a("a"),uHe=o("ByT5Tokenizer"),bHe=o(" (ByT5 model)"),FHe=l(),Zn=a("li"),AZ=a("strong"),vHe=o("camembert"),THe=o(" \u2014 "),Ik=a("a"),MHe=o("CamembertTokenizer"),EHe=o(" or "),qk=a("a"),CHe=o("CamembertTokenizerFast"),wHe=o(" (CamemBERT model)"),AHe=l(),zg=a("li"),yZ=a("strong"),yHe=o("canine"),LHe=o(" \u2014 "),Nk=a("a"),xHe=o("CanineTokenizer"),kHe=o(" (Canine model)"),SHe=l(),es=a("li"),LZ=a("strong"),RHe=o("clip"),BHe=o(" \u2014 "),jk=a("a"),PHe=o("CLIPTokenizer"),$He=o(" or "),Dk=a("a"),IHe=o("CLIPTokenizerFast"),qHe=o(" (CLIP model)"),NHe=l(),os=a("li"),xZ=a("strong"),jHe=o("convbert"),DHe=o(" \u2014 "),Gk=a("a"),GHe=o("ConvBertTokenizer"),OHe=o(" or "),Ok=a("a"),VHe=o("ConvBertTokenizerFast"),XHe=o(" (ConvBERT model)"),zHe=l(),rs=a("li"),kZ=a("strong"),QHe=o("cpm"),WHe=o(" \u2014 "),Vk=a("a"),HHe=o("CpmTokenizer"),UHe=o(" or "),SZ=a("code"),JHe=o("CpmTokenizerFast"),YHe=o(" (CPM model)"),KHe=l(),Qg=a("li"),RZ=a("strong"),ZHe=o("ctrl"),eUe=o(" \u2014 "),Xk=a("a"),oUe=o("CTRLTokenizer"),rUe=o(" (CTRL model)"),tUe=l(),ts=a("li"),BZ=a("strong"),aUe=o("deberta"),nUe=o(" \u2014 "),zk=a("a"),sUe=o("DebertaTokenizer"),lUe=o(" or "),Qk=a("a"),iUe=o("DebertaTokenizerFast"),dUe=o(" (DeBERTa model)"),cUe=l(),Wg=a("li"),PZ=a("strong"),fUe=o("deberta-v2"),mUe=o(" \u2014 "),Wk=a("a"),gUe=o("DebertaV2Tokenizer"),hUe=o(" (DeBERTa-v2 model)"),pUe=l(),as=a("li"),$Z=a("strong"),_Ue=o("distilbert"),uUe=o(" \u2014 "),Hk=a("a"),bUe=o("DistilBertTokenizer"),FUe=o(" or "),Uk=a("a"),vUe=o("DistilBertTokenizerFast"),TUe=o(" (DistilBERT model)"),MUe=l(),ns=a("li"),IZ=a("strong"),EUe=o("dpr"),CUe=o(" \u2014 "),Jk=a("a"),wUe=o("DPRQuestionEncoderTokenizer"),AUe=o(" or "),Yk=a("a"),yUe=o("DPRQuestionEncoderTokenizerFast"),LUe=o(" (DPR model)"),xUe=l(),ss=a("li"),qZ=a("strong"),kUe=o("electra"),SUe=o(" \u2014 "),Kk=a("a"),RUe=o("ElectraTokenizer"),BUe=o(" or "),Zk=a("a"),PUe=o("ElectraTokenizerFast"),$Ue=o(" (ELECTRA model)"),IUe=l(),Hg=a("li"),NZ=a("strong"),qUe=o("flaubert"),NUe=o(" \u2014 "),eS=a("a"),jUe=o("FlaubertTokenizer"),DUe=o(" (FlauBERT model)"),GUe=l(),ls=a("li"),jZ=a("strong"),OUe=o("fnet"),VUe=o(" \u2014 "),oS=a("a"),XUe=o("FNetTokenizer"),zUe=o(" or "),rS=a("a"),QUe=o("FNetTokenizerFast"),WUe=o(" (FNet model)"),HUe=l(),Ug=a("li"),DZ=a("strong"),UUe=o("fsmt"),JUe=o(" \u2014 "),tS=a("a"),YUe=o("FSMTTokenizer"),KUe=o(" (FairSeq Machine-Translation model)"),ZUe=l(),is=a("li"),GZ=a("strong"),eJe=o("funnel"),oJe=o(" \u2014 "),aS=a("a"),rJe=o("FunnelTokenizer"),tJe=o(" or "),nS=a("a"),aJe=o("FunnelTokenizerFast"),nJe=o(" (Funnel Transformer model)"),sJe=l(),ds=a("li"),OZ=a("strong"),lJe=o("gpt2"),iJe=o(" \u2014 "),sS=a("a"),dJe=o("GPT2Tokenizer"),cJe=o(" or "),lS=a("a"),fJe=o("GPT2TokenizerFast"),mJe=o(" (OpenAI GPT-2 model)"),gJe=l(),cs=a("li"),VZ=a("strong"),hJe=o("gpt_neo"),pJe=o(" \u2014 "),iS=a("a"),_Je=o("GPT2Tokenizer"),uJe=o(" or "),dS=a("a"),bJe=o("GPT2TokenizerFast"),FJe=o(" (GPT Neo model)"),vJe=l(),fs=a("li"),XZ=a("strong"),TJe=o("herbert"),MJe=o(" \u2014 "),cS=a("a"),EJe=o("HerbertTokenizer"),CJe=o(" or "),fS=a("a"),wJe=o("HerbertTokenizerFast"),AJe=o(" (HerBERT model)"),yJe=l(),Jg=a("li"),zZ=a("strong"),LJe=o("hubert"),xJe=o(" \u2014 "),mS=a("a"),kJe=o("Wav2Vec2CTCTokenizer"),SJe=o(" (Hubert model)"),RJe=l(),ms=a("li"),QZ=a("strong"),BJe=o("ibert"),PJe=o(" \u2014 "),gS=a("a"),$Je=o("RobertaTokenizer"),IJe=o(" or "),hS=a("a"),qJe=o("RobertaTokenizerFast"),NJe=o(" (I-BERT model)"),jJe=l(),gs=a("li"),WZ=a("strong"),DJe=o("layoutlm"),GJe=o(" \u2014 "),pS=a("a"),OJe=o("LayoutLMTokenizer"),VJe=o(" or "),_S=a("a"),XJe=o("LayoutLMTokenizerFast"),zJe=o(" (LayoutLM model)"),QJe=l(),hs=a("li"),HZ=a("strong"),WJe=o("layoutlmv2"),HJe=o(" \u2014 "),uS=a("a"),UJe=o("LayoutLMv2Tokenizer"),JJe=o(" or "),bS=a("a"),YJe=o("LayoutLMv2TokenizerFast"),KJe=o(" (LayoutLMv2 model)"),ZJe=l(),ps=a("li"),UZ=a("strong"),eYe=o("layoutxlm"),oYe=o(" \u2014 "),FS=a("a"),rYe=o("LayoutXLMTokenizer"),tYe=o(" or "),vS=a("a"),aYe=o("LayoutXLMTokenizerFast"),nYe=o(" (LayoutXLM model)"),sYe=l(),_s=a("li"),JZ=a("strong"),lYe=o("led"),iYe=o(" \u2014 "),TS=a("a"),dYe=o("LEDTokenizer"),cYe=o(" or "),MS=a("a"),fYe=o("LEDTokenizerFast"),mYe=o(" (LED model)"),gYe=l(),us=a("li"),YZ=a("strong"),hYe=o("longformer"),pYe=o(" \u2014 "),ES=a("a"),_Ye=o("LongformerTokenizer"),uYe=o(" or "),CS=a("a"),bYe=o("LongformerTokenizerFast"),FYe=o(" (Longformer model)"),vYe=l(),Yg=a("li"),KZ=a("strong"),TYe=o("luke"),MYe=o(" \u2014 "),wS=a("a"),EYe=o("LukeTokenizer"),CYe=o(" (LUKE model)"),wYe=l(),bs=a("li"),ZZ=a("strong"),AYe=o("lxmert"),yYe=o(" \u2014 "),AS=a("a"),LYe=o("LxmertTokenizer"),xYe=o(" or "),yS=a("a"),kYe=o("LxmertTokenizerFast"),SYe=o(" (LXMERT model)"),RYe=l(),Kg=a("li"),eee=a("strong"),BYe=o("m2m_100"),PYe=o(" \u2014 "),LS=a("a"),$Ye=o("M2M100Tokenizer"),IYe=o(" (M2M100 model)"),qYe=l(),Zg=a("li"),oee=a("strong"),NYe=o("marian"),jYe=o(" \u2014 "),xS=a("a"),DYe=o("MarianTokenizer"),GYe=o(" (Marian model)"),OYe=l(),Fs=a("li"),ree=a("strong"),VYe=o("mbart"),XYe=o(" \u2014 "),kS=a("a"),zYe=o("MBartTokenizer"),QYe=o(" or "),SS=a("a"),WYe=o("MBartTokenizerFast"),HYe=o(" (mBART model)"),UYe=l(),vs=a("li"),tee=a("strong"),JYe=o("mbart50"),YYe=o(" \u2014 "),RS=a("a"),KYe=o("MBart50Tokenizer"),ZYe=o(" or "),BS=a("a"),eKe=o("MBart50TokenizerFast"),oKe=o(" (mBART-50 model)"),rKe=l(),eh=a("li"),aee=a("strong"),tKe=o("mluke"),aKe=o(" \u2014 "),PS=a("a"),nKe=o("MLukeTokenizer"),sKe=o(" (mLUKE model)"),lKe=l(),Ts=a("li"),nee=a("strong"),iKe=o("mobilebert"),dKe=o(" \u2014 "),$S=a("a"),cKe=o("MobileBertTokenizer"),fKe=o(" or "),IS=a("a"),mKe=o("MobileBertTokenizerFast"),gKe=o(" (MobileBERT model)"),hKe=l(),Ms=a("li"),see=a("strong"),pKe=o("mpnet"),_Ke=o(" \u2014 "),qS=a("a"),uKe=o("MPNetTokenizer"),bKe=o(" or "),NS=a("a"),FKe=o("MPNetTokenizerFast"),vKe=o(" (MPNet model)"),TKe=l(),Es=a("li"),lee=a("strong"),MKe=o("mt5"),EKe=o(" \u2014 "),jS=a("a"),CKe=o("MT5Tokenizer"),wKe=o(" or "),DS=a("a"),AKe=o("MT5TokenizerFast"),yKe=o(" (mT5 model)"),LKe=l(),Cs=a("li"),iee=a("strong"),xKe=o("openai-gpt"),kKe=o(" \u2014 "),GS=a("a"),SKe=o("OpenAIGPTTokenizer"),RKe=o(" or "),OS=a("a"),BKe=o("OpenAIGPTTokenizerFast"),PKe=o(" (OpenAI GPT model)"),$Ke=l(),ws=a("li"),dee=a("strong"),IKe=o("pegasus"),qKe=o(" \u2014 "),VS=a("a"),NKe=o("PegasusTokenizer"),jKe=o(" or "),XS=a("a"),DKe=o("PegasusTokenizerFast"),GKe=o(" (Pegasus model)"),OKe=l(),oh=a("li"),cee=a("strong"),VKe=o("perceiver"),XKe=o(" \u2014 "),zS=a("a"),zKe=o("PerceiverTokenizer"),QKe=o(" (Perceiver model)"),WKe=l(),rh=a("li"),fee=a("strong"),HKe=o("phobert"),UKe=o(" \u2014 "),QS=a("a"),JKe=o("PhobertTokenizer"),YKe=o(" (PhoBERT model)"),KKe=l(),th=a("li"),mee=a("strong"),ZKe=o("plbart"),eZe=o(" \u2014 "),WS=a("a"),oZe=o("PLBartTokenizer"),rZe=o(" (PLBart model)"),tZe=l(),ah=a("li"),gee=a("strong"),aZe=o("prophetnet"),nZe=o(" \u2014 "),HS=a("a"),sZe=o("ProphetNetTokenizer"),lZe=o(" (ProphetNet model)"),iZe=l(),As=a("li"),hee=a("strong"),dZe=o("qdqbert"),cZe=o(" \u2014 "),US=a("a"),fZe=o("BertTokenizer"),mZe=o(" or "),JS=a("a"),gZe=o("BertTokenizerFast"),hZe=o(" (QDQBert model)"),pZe=l(),nh=a("li"),pee=a("strong"),_Ze=o("rag"),uZe=o(" \u2014 "),YS=a("a"),bZe=o("RagTokenizer"),FZe=o(" (RAG model)"),vZe=l(),ys=a("li"),_ee=a("strong"),TZe=o("realm"),MZe=o(" \u2014 "),KS=a("a"),EZe=o("RealmTokenizer"),CZe=o(" or "),ZS=a("a"),wZe=o("RealmTokenizerFast"),AZe=o(" (Realm model)"),yZe=l(),Ls=a("li"),uee=a("strong"),LZe=o("reformer"),xZe=o(" \u2014 "),eR=a("a"),kZe=o("ReformerTokenizer"),SZe=o(" or "),oR=a("a"),RZe=o("ReformerTokenizerFast"),BZe=o(" (Reformer model)"),PZe=l(),xs=a("li"),bee=a("strong"),$Ze=o("rembert"),IZe=o(" \u2014 "),rR=a("a"),qZe=o("RemBertTokenizer"),NZe=o(" or "),tR=a("a"),jZe=o("RemBertTokenizerFast"),DZe=o(" (RemBERT model)"),GZe=l(),ks=a("li"),Fee=a("strong"),OZe=o("retribert"),VZe=o(" \u2014 "),aR=a("a"),XZe=o("RetriBertTokenizer"),zZe=o(" or "),nR=a("a"),QZe=o("RetriBertTokenizerFast"),WZe=o(" (RetriBERT model)"),HZe=l(),Ss=a("li"),vee=a("strong"),UZe=o("roberta"),JZe=o(" \u2014 "),sR=a("a"),YZe=o("RobertaTokenizer"),KZe=o(" or "),lR=a("a"),ZZe=o("RobertaTokenizerFast"),eeo=o(" (RoBERTa model)"),oeo=l(),Rs=a("li"),Tee=a("strong"),reo=o("roformer"),teo=o(" \u2014 "),iR=a("a"),aeo=o("RoFormerTokenizer"),neo=o(" or "),dR=a("a"),seo=o("RoFormerTokenizerFast"),leo=o(" (RoFormer model)"),ieo=l(),sh=a("li"),Mee=a("strong"),deo=o("speech_to_text"),ceo=o(" \u2014 "),cR=a("a"),feo=o("Speech2TextTokenizer"),meo=o(" (Speech2Text model)"),geo=l(),lh=a("li"),Eee=a("strong"),heo=o("speech_to_text_2"),peo=o(" \u2014 "),fR=a("a"),_eo=o("Speech2Text2Tokenizer"),ueo=o(" (Speech2Text2 model)"),beo=l(),Bs=a("li"),Cee=a("strong"),Feo=o("splinter"),veo=o(" \u2014 "),mR=a("a"),Teo=o("SplinterTokenizer"),Meo=o(" or "),gR=a("a"),Eeo=o("SplinterTokenizerFast"),Ceo=o(" (Splinter model)"),weo=l(),Ps=a("li"),wee=a("strong"),Aeo=o("squeezebert"),yeo=o(" \u2014 "),hR=a("a"),Leo=o("SqueezeBertTokenizer"),xeo=o(" or "),pR=a("a"),keo=o("SqueezeBertTokenizerFast"),Seo=o(" (SqueezeBERT model)"),Reo=l(),$s=a("li"),Aee=a("strong"),Beo=o("t5"),Peo=o(" \u2014 "),_R=a("a"),$eo=o("T5Tokenizer"),Ieo=o(" or "),uR=a("a"),qeo=o("T5TokenizerFast"),Neo=o(" (T5 model)"),jeo=l(),ih=a("li"),yee=a("strong"),Deo=o("tapas"),Geo=o(" \u2014 "),bR=a("a"),Oeo=o("TapasTokenizer"),Veo=o(" (TAPAS model)"),Xeo=l(),dh=a("li"),Lee=a("strong"),zeo=o("tapex"),Qeo=o(" \u2014 "),FR=a("a"),Weo=o("TapexTokenizer"),Heo=o(" (TAPEX model)"),Ueo=l(),ch=a("li"),xee=a("strong"),Jeo=o("transfo-xl"),Yeo=o(" \u2014 "),vR=a("a"),Keo=o("TransfoXLTokenizer"),Zeo=o(" (Transformer-XL model)"),eoo=l(),fh=a("li"),kee=a("strong"),ooo=o("wav2vec2"),roo=o(" \u2014 "),TR=a("a"),too=o("Wav2Vec2CTCTokenizer"),aoo=o(" (Wav2Vec2 model)"),noo=l(),mh=a("li"),See=a("strong"),soo=o("wav2vec2_phoneme"),loo=o(" \u2014 "),MR=a("a"),ioo=o("Wav2Vec2PhonemeCTCTokenizer"),doo=o(" (Wav2Vec2Phoneme model)"),coo=l(),Is=a("li"),Ree=a("strong"),foo=o("xglm"),moo=o(" \u2014 "),ER=a("a"),goo=o("XGLMTokenizer"),hoo=o(" or "),CR=a("a"),poo=o("XGLMTokenizerFast"),_oo=o(" (XGLM model)"),uoo=l(),gh=a("li"),Bee=a("strong"),boo=o("xlm"),Foo=o(" \u2014 "),wR=a("a"),voo=o("XLMTokenizer"),Too=o(" (XLM model)"),Moo=l(),hh=a("li"),Pee=a("strong"),Eoo=o("xlm-prophetnet"),Coo=o(" \u2014 "),AR=a("a"),woo=o("XLMProphetNetTokenizer"),Aoo=o(" (XLMProphetNet model)"),yoo=l(),qs=a("li"),$ee=a("strong"),Loo=o("xlm-roberta"),xoo=o(" \u2014 "),yR=a("a"),koo=o("XLMRobertaTokenizer"),Soo=o(" or "),LR=a("a"),Roo=o("XLMRobertaTokenizerFast"),Boo=o(" (XLM-RoBERTa model)"),Poo=l(),Ns=a("li"),Iee=a("strong"),$oo=o("xlnet"),Ioo=o(" \u2014 "),xR=a("a"),qoo=o("XLNetTokenizer"),Noo=o(" or "),kR=a("a"),joo=o("XLNetTokenizerFast"),Doo=o(" (XLNet model)"),Goo=l(),qee=a("p"),Ooo=o("Examples:"),Voo=l(),f(G5.$$.fragment),Xoo=l(),ph=a("div"),f(O5.$$.fragment),zoo=l(),Nee=a("p"),Qoo=o("Register a new tokenizer in this mapping."),CRe=l(),Wi=a("h2"),_h=a("a"),jee=a("span"),f(V5.$$.fragment),Woo=l(),Dee=a("span"),Hoo=o("AutoFeatureExtractor"),wRe=l(),Ho=a("div"),f(X5.$$.fragment),Uoo=l(),z5=a("p"),Joo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SR=a("a"),Yoo=o("AutoFeatureExtractor.from_pretrained()"),Koo=o(" class method."),Zoo=l(),Q5=a("p"),ero=o("This class cannot be instantiated directly using "),Gee=a("code"),oro=o("__init__()"),rro=o(" (throws an error)."),tro=l(),$e=a("div"),f(W5.$$.fragment),aro=l(),Oee=a("p"),nro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),sro=l(),Va=a("p"),lro=o("The feature extractor class to instantiate is selected based on the "),Vee=a("code"),iro=o("model_type"),dro=o(` property of the config object
(either passed as an argument or loaded from `),Xee=a("code"),cro=o("pretrained_model_name_or_path"),fro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zee=a("code"),mro=o("pretrained_model_name_or_path"),gro=o(":"),hro=l(),ee=a("ul"),uh=a("li"),Qee=a("strong"),pro=o("beit"),_ro=o(" \u2014 "),RR=a("a"),uro=o("BeitFeatureExtractor"),bro=o(" (BEiT model)"),Fro=l(),bh=a("li"),Wee=a("strong"),vro=o("clip"),Tro=o(" \u2014 "),BR=a("a"),Mro=o("CLIPFeatureExtractor"),Ero=o(" (CLIP model)"),Cro=l(),Fh=a("li"),Hee=a("strong"),wro=o("convnext"),Aro=o(" \u2014 "),PR=a("a"),yro=o("ConvNextFeatureExtractor"),Lro=o(" (ConvNext model)"),xro=l(),vh=a("li"),Uee=a("strong"),kro=o("deit"),Sro=o(" \u2014 "),$R=a("a"),Rro=o("DeiTFeatureExtractor"),Bro=o(" (DeiT model)"),Pro=l(),Th=a("li"),Jee=a("strong"),$ro=o("detr"),Iro=o(" \u2014 "),IR=a("a"),qro=o("DetrFeatureExtractor"),Nro=o(" (DETR model)"),jro=l(),Mh=a("li"),Yee=a("strong"),Dro=o("hubert"),Gro=o(" \u2014 "),qR=a("a"),Oro=o("Wav2Vec2FeatureExtractor"),Vro=o(" (Hubert model)"),Xro=l(),Eh=a("li"),Kee=a("strong"),zro=o("layoutlmv2"),Qro=o(" \u2014 "),NR=a("a"),Wro=o("LayoutLMv2FeatureExtractor"),Hro=o(" (LayoutLMv2 model)"),Uro=l(),Ch=a("li"),Zee=a("strong"),Jro=o("maskformer"),Yro=o(" \u2014 "),jR=a("a"),Kro=o("MaskFormerFeatureExtractor"),Zro=o(" (MaskFormer model)"),eto=l(),wh=a("li"),eoe=a("strong"),oto=o("perceiver"),rto=o(" \u2014 "),DR=a("a"),tto=o("PerceiverFeatureExtractor"),ato=o(" (Perceiver model)"),nto=l(),Ah=a("li"),ooe=a("strong"),sto=o("poolformer"),lto=o(" \u2014 "),GR=a("a"),ito=o("PoolFormerFeatureExtractor"),dto=o(" (PoolFormer model)"),cto=l(),yh=a("li"),roe=a("strong"),fto=o("regnet"),mto=o(" \u2014 "),OR=a("a"),gto=o("ConvNextFeatureExtractor"),hto=o(" (RegNet model)"),pto=l(),Lh=a("li"),toe=a("strong"),_to=o("resnet"),uto=o(" \u2014 "),VR=a("a"),bto=o("ConvNextFeatureExtractor"),Fto=o(" (ResNet model)"),vto=l(),xh=a("li"),aoe=a("strong"),Tto=o("segformer"),Mto=o(" \u2014 "),XR=a("a"),Eto=o("SegformerFeatureExtractor"),Cto=o(" (SegFormer model)"),wto=l(),kh=a("li"),noe=a("strong"),Ato=o("speech_to_text"),yto=o(" \u2014 "),zR=a("a"),Lto=o("Speech2TextFeatureExtractor"),xto=o(" (Speech2Text model)"),kto=l(),Sh=a("li"),soe=a("strong"),Sto=o("swin"),Rto=o(" \u2014 "),QR=a("a"),Bto=o("ViTFeatureExtractor"),Pto=o(" (Swin model)"),$to=l(),Rh=a("li"),loe=a("strong"),Ito=o("van"),qto=o(" \u2014 "),WR=a("a"),Nto=o("ConvNextFeatureExtractor"),jto=o(" (VAN model)"),Dto=l(),Bh=a("li"),ioe=a("strong"),Gto=o("vit"),Oto=o(" \u2014 "),HR=a("a"),Vto=o("ViTFeatureExtractor"),Xto=o(" (ViT model)"),zto=l(),Ph=a("li"),doe=a("strong"),Qto=o("vit_mae"),Wto=o(" \u2014 "),UR=a("a"),Hto=o("ViTFeatureExtractor"),Uto=o(" (ViTMAE model)"),Jto=l(),$h=a("li"),coe=a("strong"),Yto=o("wav2vec2"),Kto=o(" \u2014 "),JR=a("a"),Zto=o("Wav2Vec2FeatureExtractor"),eao=o(" (Wav2Vec2 model)"),oao=l(),f(Ih.$$.fragment),rao=l(),foe=a("p"),tao=o("Examples:"),aao=l(),f(H5.$$.fragment),nao=l(),qh=a("div"),f(U5.$$.fragment),sao=l(),moe=a("p"),lao=o("Register a new feature extractor for this class."),ARe=l(),Hi=a("h2"),Nh=a("a"),goe=a("span"),f(J5.$$.fragment),iao=l(),hoe=a("span"),dao=o("AutoProcessor"),yRe=l(),Uo=a("div"),f(Y5.$$.fragment),cao=l(),K5=a("p"),fao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YR=a("a"),mao=o("AutoProcessor.from_pretrained()"),gao=o(" class method."),hao=l(),Z5=a("p"),pao=o("This class cannot be instantiated directly using "),poe=a("code"),_ao=o("__init__()"),uao=o(" (throws an error)."),bao=l(),Ie=a("div"),f(e3.$$.fragment),Fao=l(),_oe=a("p"),vao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Tao=l(),Ui=a("p"),Mao=o("The processor class to instantiate is selected based on the "),uoe=a("code"),Eao=o("model_type"),Cao=o(` property of the config object (either
passed as an argument or loaded from `),boe=a("code"),wao=o("pretrained_model_name_or_path"),Aao=o(" if possible):"),yao=l(),ke=a("ul"),jh=a("li"),Foe=a("strong"),Lao=o("clip"),xao=o(" \u2014 "),KR=a("a"),kao=o("CLIPProcessor"),Sao=o(" (CLIP model)"),Rao=l(),Dh=a("li"),voe=a("strong"),Bao=o("layoutlmv2"),Pao=o(" \u2014 "),ZR=a("a"),$ao=o("LayoutLMv2Processor"),Iao=o(" (LayoutLMv2 model)"),qao=l(),Gh=a("li"),Toe=a("strong"),Nao=o("layoutxlm"),jao=o(" \u2014 "),eB=a("a"),Dao=o("LayoutXLMProcessor"),Gao=o(" (LayoutXLM model)"),Oao=l(),Oh=a("li"),Moe=a("strong"),Vao=o("speech_to_text"),Xao=o(" \u2014 "),oB=a("a"),zao=o("Speech2TextProcessor"),Qao=o(" (Speech2Text model)"),Wao=l(),Vh=a("li"),Eoe=a("strong"),Hao=o("speech_to_text_2"),Uao=o(" \u2014 "),rB=a("a"),Jao=o("Speech2Text2Processor"),Yao=o(" (Speech2Text2 model)"),Kao=l(),Xh=a("li"),Coe=a("strong"),Zao=o("trocr"),eno=o(" \u2014 "),tB=a("a"),ono=o("TrOCRProcessor"),rno=o(" (TrOCR model)"),tno=l(),zh=a("li"),woe=a("strong"),ano=o("vision-text-dual-encoder"),nno=o(" \u2014 "),aB=a("a"),sno=o("VisionTextDualEncoderProcessor"),lno=o(" (VisionTextDualEncoder model)"),ino=l(),Qh=a("li"),Aoe=a("strong"),dno=o("wav2vec2"),cno=o(" \u2014 "),nB=a("a"),fno=o("Wav2Vec2Processor"),mno=o(" (Wav2Vec2 model)"),gno=l(),f(Wh.$$.fragment),hno=l(),yoe=a("p"),pno=o("Examples:"),_no=l(),f(o3.$$.fragment),uno=l(),Hh=a("div"),f(r3.$$.fragment),bno=l(),Loe=a("p"),Fno=o("Register a new processor for this class."),LRe=l(),Ji=a("h2"),Uh=a("a"),xoe=a("span"),f(t3.$$.fragment),vno=l(),koe=a("span"),Tno=o("AutoModel"),xRe=l(),Jo=a("div"),f(a3.$$.fragment),Mno=l(),Yi=a("p"),Eno=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sB=a("a"),Cno=o("from_pretrained()"),wno=o(" class method or the "),lB=a("a"),Ano=o("from_config()"),yno=o(` class
method.`),Lno=l(),n3=a("p"),xno=o("This class cannot be instantiated directly using "),Soe=a("code"),kno=o("__init__()"),Sno=o(" (throws an error)."),Rno=l(),Xr=a("div"),f(s3.$$.fragment),Bno=l(),Roe=a("p"),Pno=o("Instantiates one of the base model classes of the library from a configuration."),$no=l(),Ki=a("p"),Ino=o(`Note:
Loading a model from its configuration file does `),Boe=a("strong"),qno=o("not"),Nno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iB=a("a"),jno=o("from_pretrained()"),Dno=o(" to load the model weights."),Gno=l(),Poe=a("p"),Ono=o("Examples:"),Vno=l(),f(l3.$$.fragment),Xno=l(),qe=a("div"),f(i3.$$.fragment),zno=l(),$oe=a("p"),Qno=o("Instantiate one of the base model classes of the library from a pretrained model."),Wno=l(),Xa=a("p"),Hno=o("The model class to instantiate is selected based on the "),Ioe=a("code"),Uno=o("model_type"),Jno=o(` property of the config object (either
passed as an argument or loaded from `),qoe=a("code"),Yno=o("pretrained_model_name_or_path"),Kno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Noe=a("code"),Zno=o("pretrained_model_name_or_path"),eso=o(":"),oso=l(),T=a("ul"),Jh=a("li"),joe=a("strong"),rso=o("albert"),tso=o(" \u2014 "),dB=a("a"),aso=o("AlbertModel"),nso=o(" (ALBERT model)"),sso=l(),Yh=a("li"),Doe=a("strong"),lso=o("bart"),iso=o(" \u2014 "),cB=a("a"),dso=o("BartModel"),cso=o(" (BART model)"),fso=l(),Kh=a("li"),Goe=a("strong"),mso=o("beit"),gso=o(" \u2014 "),fB=a("a"),hso=o("BeitModel"),pso=o(" (BEiT model)"),_so=l(),Zh=a("li"),Ooe=a("strong"),uso=o("bert"),bso=o(" \u2014 "),mB=a("a"),Fso=o("BertModel"),vso=o(" (BERT model)"),Tso=l(),ep=a("li"),Voe=a("strong"),Mso=o("bert-generation"),Eso=o(" \u2014 "),gB=a("a"),Cso=o("BertGenerationEncoder"),wso=o(" (Bert Generation model)"),Aso=l(),op=a("li"),Xoe=a("strong"),yso=o("big_bird"),Lso=o(" \u2014 "),hB=a("a"),xso=o("BigBirdModel"),kso=o(" (BigBird model)"),Sso=l(),rp=a("li"),zoe=a("strong"),Rso=o("bigbird_pegasus"),Bso=o(" \u2014 "),pB=a("a"),Pso=o("BigBirdPegasusModel"),$so=o(" (BigBirdPegasus model)"),Iso=l(),tp=a("li"),Qoe=a("strong"),qso=o("blenderbot"),Nso=o(" \u2014 "),_B=a("a"),jso=o("BlenderbotModel"),Dso=o(" (Blenderbot model)"),Gso=l(),ap=a("li"),Woe=a("strong"),Oso=o("blenderbot-small"),Vso=o(" \u2014 "),uB=a("a"),Xso=o("BlenderbotSmallModel"),zso=o(" (BlenderbotSmall model)"),Qso=l(),np=a("li"),Hoe=a("strong"),Wso=o("camembert"),Hso=o(" \u2014 "),bB=a("a"),Uso=o("CamembertModel"),Jso=o(" (CamemBERT model)"),Yso=l(),sp=a("li"),Uoe=a("strong"),Kso=o("canine"),Zso=o(" \u2014 "),FB=a("a"),elo=o("CanineModel"),olo=o(" (Canine model)"),rlo=l(),lp=a("li"),Joe=a("strong"),tlo=o("clip"),alo=o(" \u2014 "),vB=a("a"),nlo=o("CLIPModel"),slo=o(" (CLIP model)"),llo=l(),ip=a("li"),Yoe=a("strong"),ilo=o("convbert"),dlo=o(" \u2014 "),TB=a("a"),clo=o("ConvBertModel"),flo=o(" (ConvBERT model)"),mlo=l(),dp=a("li"),Koe=a("strong"),glo=o("convnext"),hlo=o(" \u2014 "),MB=a("a"),plo=o("ConvNextModel"),_lo=o(" (ConvNext model)"),ulo=l(),cp=a("li"),Zoe=a("strong"),blo=o("ctrl"),Flo=o(" \u2014 "),EB=a("a"),vlo=o("CTRLModel"),Tlo=o(" (CTRL model)"),Mlo=l(),fp=a("li"),ere=a("strong"),Elo=o("data2vec-audio"),Clo=o(" \u2014 "),CB=a("a"),wlo=o("Data2VecAudioModel"),Alo=o(" (Data2VecAudio model)"),ylo=l(),mp=a("li"),ore=a("strong"),Llo=o("data2vec-text"),xlo=o(" \u2014 "),wB=a("a"),klo=o("Data2VecTextModel"),Slo=o(" (Data2VecText model)"),Rlo=l(),gp=a("li"),rre=a("strong"),Blo=o("deberta"),Plo=o(" \u2014 "),AB=a("a"),$lo=o("DebertaModel"),Ilo=o(" (DeBERTa model)"),qlo=l(),hp=a("li"),tre=a("strong"),Nlo=o("deberta-v2"),jlo=o(" \u2014 "),yB=a("a"),Dlo=o("DebertaV2Model"),Glo=o(" (DeBERTa-v2 model)"),Olo=l(),pp=a("li"),are=a("strong"),Vlo=o("decision_transformer"),Xlo=o(" \u2014 "),LB=a("a"),zlo=o("DecisionTransformerModel"),Qlo=o(" (Decision Transformer model)"),Wlo=l(),_p=a("li"),nre=a("strong"),Hlo=o("deit"),Ulo=o(" \u2014 "),xB=a("a"),Jlo=o("DeiTModel"),Ylo=o(" (DeiT model)"),Klo=l(),up=a("li"),sre=a("strong"),Zlo=o("detr"),eio=o(" \u2014 "),kB=a("a"),oio=o("DetrModel"),rio=o(" (DETR model)"),tio=l(),bp=a("li"),lre=a("strong"),aio=o("distilbert"),nio=o(" \u2014 "),SB=a("a"),sio=o("DistilBertModel"),lio=o(" (DistilBERT model)"),iio=l(),Fp=a("li"),ire=a("strong"),dio=o("dpr"),cio=o(" \u2014 "),RB=a("a"),fio=o("DPRQuestionEncoder"),mio=o(" (DPR model)"),gio=l(),vp=a("li"),dre=a("strong"),hio=o("dpt"),pio=o(" \u2014 "),BB=a("a"),_io=o("DPTModel"),uio=o(" (DPT model)"),bio=l(),Tp=a("li"),cre=a("strong"),Fio=o("electra"),vio=o(" \u2014 "),PB=a("a"),Tio=o("ElectraModel"),Mio=o(" (ELECTRA model)"),Eio=l(),Mp=a("li"),fre=a("strong"),Cio=o("flaubert"),wio=o(" \u2014 "),$B=a("a"),Aio=o("FlaubertModel"),yio=o(" (FlauBERT model)"),Lio=l(),Ep=a("li"),mre=a("strong"),xio=o("fnet"),kio=o(" \u2014 "),IB=a("a"),Sio=o("FNetModel"),Rio=o(" (FNet model)"),Bio=l(),Cp=a("li"),gre=a("strong"),Pio=o("fsmt"),$io=o(" \u2014 "),qB=a("a"),Iio=o("FSMTModel"),qio=o(" (FairSeq Machine-Translation model)"),Nio=l(),js=a("li"),hre=a("strong"),jio=o("funnel"),Dio=o(" \u2014 "),NB=a("a"),Gio=o("FunnelModel"),Oio=o(" or "),jB=a("a"),Vio=o("FunnelBaseModel"),Xio=o(" (Funnel Transformer model)"),zio=l(),wp=a("li"),pre=a("strong"),Qio=o("glpn"),Wio=o(" \u2014 "),DB=a("a"),Hio=o("GLPNModel"),Uio=o(" (GLPN model)"),Jio=l(),Ap=a("li"),_re=a("strong"),Yio=o("gpt2"),Kio=o(" \u2014 "),GB=a("a"),Zio=o("GPT2Model"),edo=o(" (OpenAI GPT-2 model)"),odo=l(),yp=a("li"),ure=a("strong"),rdo=o("gpt_neo"),tdo=o(" \u2014 "),OB=a("a"),ado=o("GPTNeoModel"),ndo=o(" (GPT Neo model)"),sdo=l(),Lp=a("li"),bre=a("strong"),ldo=o("gptj"),ido=o(" \u2014 "),VB=a("a"),ddo=o("GPTJModel"),cdo=o(" (GPT-J model)"),fdo=l(),xp=a("li"),Fre=a("strong"),mdo=o("hubert"),gdo=o(" \u2014 "),XB=a("a"),hdo=o("HubertModel"),pdo=o(" (Hubert model)"),_do=l(),kp=a("li"),vre=a("strong"),udo=o("ibert"),bdo=o(" \u2014 "),zB=a("a"),Fdo=o("IBertModel"),vdo=o(" (I-BERT model)"),Tdo=l(),Sp=a("li"),Tre=a("strong"),Mdo=o("imagegpt"),Edo=o(" \u2014 "),QB=a("a"),Cdo=o("ImageGPTModel"),wdo=o(" (ImageGPT model)"),Ado=l(),Rp=a("li"),Mre=a("strong"),ydo=o("layoutlm"),Ldo=o(" \u2014 "),WB=a("a"),xdo=o("LayoutLMModel"),kdo=o(" (LayoutLM model)"),Sdo=l(),Bp=a("li"),Ere=a("strong"),Rdo=o("layoutlmv2"),Bdo=o(" \u2014 "),HB=a("a"),Pdo=o("LayoutLMv2Model"),$do=o(" (LayoutLMv2 model)"),Ido=l(),Pp=a("li"),Cre=a("strong"),qdo=o("led"),Ndo=o(" \u2014 "),UB=a("a"),jdo=o("LEDModel"),Ddo=o(" (LED model)"),Gdo=l(),$p=a("li"),wre=a("strong"),Odo=o("longformer"),Vdo=o(" \u2014 "),JB=a("a"),Xdo=o("LongformerModel"),zdo=o(" (Longformer model)"),Qdo=l(),Ip=a("li"),Are=a("strong"),Wdo=o("luke"),Hdo=o(" \u2014 "),YB=a("a"),Udo=o("LukeModel"),Jdo=o(" (LUKE model)"),Ydo=l(),qp=a("li"),yre=a("strong"),Kdo=o("lxmert"),Zdo=o(" \u2014 "),KB=a("a"),eco=o("LxmertModel"),oco=o(" (LXMERT model)"),rco=l(),Np=a("li"),Lre=a("strong"),tco=o("m2m_100"),aco=o(" \u2014 "),ZB=a("a"),nco=o("M2M100Model"),sco=o(" (M2M100 model)"),lco=l(),jp=a("li"),xre=a("strong"),ico=o("marian"),dco=o(" \u2014 "),eP=a("a"),cco=o("MarianModel"),fco=o(" (Marian model)"),mco=l(),Dp=a("li"),kre=a("strong"),gco=o("maskformer"),hco=o(" \u2014 "),oP=a("a"),pco=o("MaskFormerModel"),_co=o(" (MaskFormer model)"),uco=l(),Gp=a("li"),Sre=a("strong"),bco=o("mbart"),Fco=o(" \u2014 "),rP=a("a"),vco=o("MBartModel"),Tco=o(" (mBART model)"),Mco=l(),Op=a("li"),Rre=a("strong"),Eco=o("megatron-bert"),Cco=o(" \u2014 "),tP=a("a"),wco=o("MegatronBertModel"),Aco=o(" (MegatronBert model)"),yco=l(),Vp=a("li"),Bre=a("strong"),Lco=o("mobilebert"),xco=o(" \u2014 "),aP=a("a"),kco=o("MobileBertModel"),Sco=o(" (MobileBERT model)"),Rco=l(),Xp=a("li"),Pre=a("strong"),Bco=o("mpnet"),Pco=o(" \u2014 "),nP=a("a"),$co=o("MPNetModel"),Ico=o(" (MPNet model)"),qco=l(),zp=a("li"),$re=a("strong"),Nco=o("mt5"),jco=o(" \u2014 "),sP=a("a"),Dco=o("MT5Model"),Gco=o(" (mT5 model)"),Oco=l(),Qp=a("li"),Ire=a("strong"),Vco=o("nystromformer"),Xco=o(" \u2014 "),lP=a("a"),zco=o("NystromformerModel"),Qco=o(" (Nystromformer model)"),Wco=l(),Wp=a("li"),qre=a("strong"),Hco=o("openai-gpt"),Uco=o(" \u2014 "),iP=a("a"),Jco=o("OpenAIGPTModel"),Yco=o(" (OpenAI GPT model)"),Kco=l(),Hp=a("li"),Nre=a("strong"),Zco=o("pegasus"),efo=o(" \u2014 "),dP=a("a"),ofo=o("PegasusModel"),rfo=o(" (Pegasus model)"),tfo=l(),Up=a("li"),jre=a("strong"),afo=o("perceiver"),nfo=o(" \u2014 "),cP=a("a"),sfo=o("PerceiverModel"),lfo=o(" (Perceiver model)"),ifo=l(),Jp=a("li"),Dre=a("strong"),dfo=o("plbart"),cfo=o(" \u2014 "),fP=a("a"),ffo=o("PLBartModel"),mfo=o(" (PLBart model)"),gfo=l(),Yp=a("li"),Gre=a("strong"),hfo=o("poolformer"),pfo=o(" \u2014 "),mP=a("a"),_fo=o("PoolFormerModel"),ufo=o(" (PoolFormer model)"),bfo=l(),Kp=a("li"),Ore=a("strong"),Ffo=o("prophetnet"),vfo=o(" \u2014 "),gP=a("a"),Tfo=o("ProphetNetModel"),Mfo=o(" (ProphetNet model)"),Efo=l(),Zp=a("li"),Vre=a("strong"),Cfo=o("qdqbert"),wfo=o(" \u2014 "),hP=a("a"),Afo=o("QDQBertModel"),yfo=o(" (QDQBert model)"),Lfo=l(),e_=a("li"),Xre=a("strong"),xfo=o("reformer"),kfo=o(" \u2014 "),pP=a("a"),Sfo=o("ReformerModel"),Rfo=o(" (Reformer model)"),Bfo=l(),o_=a("li"),zre=a("strong"),Pfo=o("regnet"),$fo=o(" \u2014 "),_P=a("a"),Ifo=o("RegNetModel"),qfo=o(" (RegNet model)"),Nfo=l(),r_=a("li"),Qre=a("strong"),jfo=o("rembert"),Dfo=o(" \u2014 "),uP=a("a"),Gfo=o("RemBertModel"),Ofo=o(" (RemBERT model)"),Vfo=l(),t_=a("li"),Wre=a("strong"),Xfo=o("resnet"),zfo=o(" \u2014 "),bP=a("a"),Qfo=o("ResNetModel"),Wfo=o(" (ResNet model)"),Hfo=l(),a_=a("li"),Hre=a("strong"),Ufo=o("retribert"),Jfo=o(" \u2014 "),FP=a("a"),Yfo=o("RetriBertModel"),Kfo=o(" (RetriBERT model)"),Zfo=l(),n_=a("li"),Ure=a("strong"),emo=o("roberta"),omo=o(" \u2014 "),vP=a("a"),rmo=o("RobertaModel"),tmo=o(" (RoBERTa model)"),amo=l(),s_=a("li"),Jre=a("strong"),nmo=o("roformer"),smo=o(" \u2014 "),TP=a("a"),lmo=o("RoFormerModel"),imo=o(" (RoFormer model)"),dmo=l(),l_=a("li"),Yre=a("strong"),cmo=o("segformer"),fmo=o(" \u2014 "),MP=a("a"),mmo=o("SegformerModel"),gmo=o(" (SegFormer model)"),hmo=l(),i_=a("li"),Kre=a("strong"),pmo=o("sew"),_mo=o(" \u2014 "),EP=a("a"),umo=o("SEWModel"),bmo=o(" (SEW model)"),Fmo=l(),d_=a("li"),Zre=a("strong"),vmo=o("sew-d"),Tmo=o(" \u2014 "),CP=a("a"),Mmo=o("SEWDModel"),Emo=o(" (SEW-D model)"),Cmo=l(),c_=a("li"),ete=a("strong"),wmo=o("speech_to_text"),Amo=o(" \u2014 "),wP=a("a"),ymo=o("Speech2TextModel"),Lmo=o(" (Speech2Text model)"),xmo=l(),f_=a("li"),ote=a("strong"),kmo=o("splinter"),Smo=o(" \u2014 "),AP=a("a"),Rmo=o("SplinterModel"),Bmo=o(" (Splinter model)"),Pmo=l(),m_=a("li"),rte=a("strong"),$mo=o("squeezebert"),Imo=o(" \u2014 "),yP=a("a"),qmo=o("SqueezeBertModel"),Nmo=o(" (SqueezeBERT model)"),jmo=l(),g_=a("li"),tte=a("strong"),Dmo=o("swin"),Gmo=o(" \u2014 "),LP=a("a"),Omo=o("SwinModel"),Vmo=o(" (Swin model)"),Xmo=l(),h_=a("li"),ate=a("strong"),zmo=o("t5"),Qmo=o(" \u2014 "),xP=a("a"),Wmo=o("T5Model"),Hmo=o(" (T5 model)"),Umo=l(),p_=a("li"),nte=a("strong"),Jmo=o("tapas"),Ymo=o(" \u2014 "),kP=a("a"),Kmo=o("TapasModel"),Zmo=o(" (TAPAS model)"),ego=l(),__=a("li"),ste=a("strong"),ogo=o("transfo-xl"),rgo=o(" \u2014 "),SP=a("a"),tgo=o("TransfoXLModel"),ago=o(" (Transformer-XL model)"),ngo=l(),u_=a("li"),lte=a("strong"),sgo=o("unispeech"),lgo=o(" \u2014 "),RP=a("a"),igo=o("UniSpeechModel"),dgo=o(" (UniSpeech model)"),cgo=l(),b_=a("li"),ite=a("strong"),fgo=o("unispeech-sat"),mgo=o(" \u2014 "),BP=a("a"),ggo=o("UniSpeechSatModel"),hgo=o(" (UniSpeechSat model)"),pgo=l(),F_=a("li"),dte=a("strong"),_go=o("van"),ugo=o(" \u2014 "),PP=a("a"),bgo=o("VanModel"),Fgo=o(" (VAN model)"),vgo=l(),v_=a("li"),cte=a("strong"),Tgo=o("vilt"),Mgo=o(" \u2014 "),$P=a("a"),Ego=o("ViltModel"),Cgo=o(" (ViLT model)"),wgo=l(),T_=a("li"),fte=a("strong"),Ago=o("vision-text-dual-encoder"),ygo=o(" \u2014 "),IP=a("a"),Lgo=o("VisionTextDualEncoderModel"),xgo=o(" (VisionTextDualEncoder model)"),kgo=l(),M_=a("li"),mte=a("strong"),Sgo=o("visual_bert"),Rgo=o(" \u2014 "),qP=a("a"),Bgo=o("VisualBertModel"),Pgo=o(" (VisualBert model)"),$go=l(),E_=a("li"),gte=a("strong"),Igo=o("vit"),qgo=o(" \u2014 "),NP=a("a"),Ngo=o("ViTModel"),jgo=o(" (ViT model)"),Dgo=l(),C_=a("li"),hte=a("strong"),Ggo=o("vit_mae"),Ogo=o(" \u2014 "),jP=a("a"),Vgo=o("ViTMAEModel"),Xgo=o(" (ViTMAE model)"),zgo=l(),w_=a("li"),pte=a("strong"),Qgo=o("wav2vec2"),Wgo=o(" \u2014 "),DP=a("a"),Hgo=o("Wav2Vec2Model"),Ugo=o(" (Wav2Vec2 model)"),Jgo=l(),A_=a("li"),_te=a("strong"),Ygo=o("wavlm"),Kgo=o(" \u2014 "),GP=a("a"),Zgo=o("WavLMModel"),eho=o(" (WavLM model)"),oho=l(),y_=a("li"),ute=a("strong"),rho=o("xglm"),tho=o(" \u2014 "),OP=a("a"),aho=o("XGLMModel"),nho=o(" (XGLM model)"),sho=l(),L_=a("li"),bte=a("strong"),lho=o("xlm"),iho=o(" \u2014 "),VP=a("a"),dho=o("XLMModel"),cho=o(" (XLM model)"),fho=l(),x_=a("li"),Fte=a("strong"),mho=o("xlm-prophetnet"),gho=o(" \u2014 "),XP=a("a"),hho=o("XLMProphetNetModel"),pho=o(" (XLMProphetNet model)"),_ho=l(),k_=a("li"),vte=a("strong"),uho=o("xlm-roberta"),bho=o(" \u2014 "),zP=a("a"),Fho=o("XLMRobertaModel"),vho=o(" (XLM-RoBERTa model)"),Tho=l(),S_=a("li"),Tte=a("strong"),Mho=o("xlm-roberta-xl"),Eho=o(" \u2014 "),QP=a("a"),Cho=o("XLMRobertaXLModel"),who=o(" (XLM-RoBERTa-XL model)"),Aho=l(),R_=a("li"),Mte=a("strong"),yho=o("xlnet"),Lho=o(" \u2014 "),WP=a("a"),xho=o("XLNetModel"),kho=o(" (XLNet model)"),Sho=l(),B_=a("li"),Ete=a("strong"),Rho=o("yoso"),Bho=o(" \u2014 "),HP=a("a"),Pho=o("YosoModel"),$ho=o(" (YOSO model)"),Iho=l(),P_=a("p"),qho=o("The model is set in evaluation mode by default using "),Cte=a("code"),Nho=o("model.eval()"),jho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wte=a("code"),Dho=o("model.train()"),Gho=l(),Ate=a("p"),Oho=o("Examples:"),Vho=l(),f(d3.$$.fragment),kRe=l(),Zi=a("h2"),$_=a("a"),yte=a("span"),f(c3.$$.fragment),Xho=l(),Lte=a("span"),zho=o("AutoModelForPreTraining"),SRe=l(),Yo=a("div"),f(f3.$$.fragment),Qho=l(),ed=a("p"),Who=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UP=a("a"),Hho=o("from_pretrained()"),Uho=o(" class method or the "),JP=a("a"),Jho=o("from_config()"),Yho=o(` class
method.`),Kho=l(),m3=a("p"),Zho=o("This class cannot be instantiated directly using "),xte=a("code"),epo=o("__init__()"),opo=o(" (throws an error)."),rpo=l(),zr=a("div"),f(g3.$$.fragment),tpo=l(),kte=a("p"),apo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),npo=l(),od=a("p"),spo=o(`Note:
Loading a model from its configuration file does `),Ste=a("strong"),lpo=o("not"),ipo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YP=a("a"),dpo=o("from_pretrained()"),cpo=o(" to load the model weights."),fpo=l(),Rte=a("p"),mpo=o("Examples:"),gpo=l(),f(h3.$$.fragment),hpo=l(),Ne=a("div"),f(p3.$$.fragment),ppo=l(),Bte=a("p"),_po=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),upo=l(),za=a("p"),bpo=o("The model class to instantiate is selected based on the "),Pte=a("code"),Fpo=o("model_type"),vpo=o(` property of the config object (either
passed as an argument or loaded from `),$te=a("code"),Tpo=o("pretrained_model_name_or_path"),Mpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ite=a("code"),Epo=o("pretrained_model_name_or_path"),Cpo=o(":"),wpo=l(),S=a("ul"),I_=a("li"),qte=a("strong"),Apo=o("albert"),ypo=o(" \u2014 "),KP=a("a"),Lpo=o("AlbertForPreTraining"),xpo=o(" (ALBERT model)"),kpo=l(),q_=a("li"),Nte=a("strong"),Spo=o("bart"),Rpo=o(" \u2014 "),ZP=a("a"),Bpo=o("BartForConditionalGeneration"),Ppo=o(" (BART model)"),$po=l(),N_=a("li"),jte=a("strong"),Ipo=o("bert"),qpo=o(" \u2014 "),e$=a("a"),Npo=o("BertForPreTraining"),jpo=o(" (BERT model)"),Dpo=l(),j_=a("li"),Dte=a("strong"),Gpo=o("big_bird"),Opo=o(" \u2014 "),o$=a("a"),Vpo=o("BigBirdForPreTraining"),Xpo=o(" (BigBird model)"),zpo=l(),D_=a("li"),Gte=a("strong"),Qpo=o("camembert"),Wpo=o(" \u2014 "),r$=a("a"),Hpo=o("CamembertForMaskedLM"),Upo=o(" (CamemBERT model)"),Jpo=l(),G_=a("li"),Ote=a("strong"),Ypo=o("ctrl"),Kpo=o(" \u2014 "),t$=a("a"),Zpo=o("CTRLLMHeadModel"),e_o=o(" (CTRL model)"),o_o=l(),O_=a("li"),Vte=a("strong"),r_o=o("data2vec-text"),t_o=o(" \u2014 "),a$=a("a"),a_o=o("Data2VecTextForMaskedLM"),n_o=o(" (Data2VecText model)"),s_o=l(),V_=a("li"),Xte=a("strong"),l_o=o("deberta"),i_o=o(" \u2014 "),n$=a("a"),d_o=o("DebertaForMaskedLM"),c_o=o(" (DeBERTa model)"),f_o=l(),X_=a("li"),zte=a("strong"),m_o=o("deberta-v2"),g_o=o(" \u2014 "),s$=a("a"),h_o=o("DebertaV2ForMaskedLM"),p_o=o(" (DeBERTa-v2 model)"),__o=l(),z_=a("li"),Qte=a("strong"),u_o=o("distilbert"),b_o=o(" \u2014 "),l$=a("a"),F_o=o("DistilBertForMaskedLM"),v_o=o(" (DistilBERT model)"),T_o=l(),Q_=a("li"),Wte=a("strong"),M_o=o("electra"),E_o=o(" \u2014 "),i$=a("a"),C_o=o("ElectraForPreTraining"),w_o=o(" (ELECTRA model)"),A_o=l(),W_=a("li"),Hte=a("strong"),y_o=o("flaubert"),L_o=o(" \u2014 "),d$=a("a"),x_o=o("FlaubertWithLMHeadModel"),k_o=o(" (FlauBERT model)"),S_o=l(),H_=a("li"),Ute=a("strong"),R_o=o("fnet"),B_o=o(" \u2014 "),c$=a("a"),P_o=o("FNetForPreTraining"),$_o=o(" (FNet model)"),I_o=l(),U_=a("li"),Jte=a("strong"),q_o=o("fsmt"),N_o=o(" \u2014 "),f$=a("a"),j_o=o("FSMTForConditionalGeneration"),D_o=o(" (FairSeq Machine-Translation model)"),G_o=l(),J_=a("li"),Yte=a("strong"),O_o=o("funnel"),V_o=o(" \u2014 "),m$=a("a"),X_o=o("FunnelForPreTraining"),z_o=o(" (Funnel Transformer model)"),Q_o=l(),Y_=a("li"),Kte=a("strong"),W_o=o("gpt2"),H_o=o(" \u2014 "),g$=a("a"),U_o=o("GPT2LMHeadModel"),J_o=o(" (OpenAI GPT-2 model)"),Y_o=l(),K_=a("li"),Zte=a("strong"),K_o=o("ibert"),Z_o=o(" \u2014 "),h$=a("a"),euo=o("IBertForMaskedLM"),ouo=o(" (I-BERT model)"),ruo=l(),Z_=a("li"),eae=a("strong"),tuo=o("layoutlm"),auo=o(" \u2014 "),p$=a("a"),nuo=o("LayoutLMForMaskedLM"),suo=o(" (LayoutLM model)"),luo=l(),eu=a("li"),oae=a("strong"),iuo=o("longformer"),duo=o(" \u2014 "),_$=a("a"),cuo=o("LongformerForMaskedLM"),fuo=o(" (Longformer model)"),muo=l(),ou=a("li"),rae=a("strong"),guo=o("lxmert"),huo=o(" \u2014 "),u$=a("a"),puo=o("LxmertForPreTraining"),_uo=o(" (LXMERT model)"),uuo=l(),ru=a("li"),tae=a("strong"),buo=o("megatron-bert"),Fuo=o(" \u2014 "),b$=a("a"),vuo=o("MegatronBertForPreTraining"),Tuo=o(" (MegatronBert model)"),Muo=l(),tu=a("li"),aae=a("strong"),Euo=o("mobilebert"),Cuo=o(" \u2014 "),F$=a("a"),wuo=o("MobileBertForPreTraining"),Auo=o(" (MobileBERT model)"),yuo=l(),au=a("li"),nae=a("strong"),Luo=o("mpnet"),xuo=o(" \u2014 "),v$=a("a"),kuo=o("MPNetForMaskedLM"),Suo=o(" (MPNet model)"),Ruo=l(),nu=a("li"),sae=a("strong"),Buo=o("openai-gpt"),Puo=o(" \u2014 "),T$=a("a"),$uo=o("OpenAIGPTLMHeadModel"),Iuo=o(" (OpenAI GPT model)"),quo=l(),su=a("li"),lae=a("strong"),Nuo=o("retribert"),juo=o(" \u2014 "),M$=a("a"),Duo=o("RetriBertModel"),Guo=o(" (RetriBERT model)"),Ouo=l(),lu=a("li"),iae=a("strong"),Vuo=o("roberta"),Xuo=o(" \u2014 "),E$=a("a"),zuo=o("RobertaForMaskedLM"),Quo=o(" (RoBERTa model)"),Wuo=l(),iu=a("li"),dae=a("strong"),Huo=o("squeezebert"),Uuo=o(" \u2014 "),C$=a("a"),Juo=o("SqueezeBertForMaskedLM"),Yuo=o(" (SqueezeBERT model)"),Kuo=l(),du=a("li"),cae=a("strong"),Zuo=o("t5"),e1o=o(" \u2014 "),w$=a("a"),o1o=o("T5ForConditionalGeneration"),r1o=o(" (T5 model)"),t1o=l(),cu=a("li"),fae=a("strong"),a1o=o("tapas"),n1o=o(" \u2014 "),A$=a("a"),s1o=o("TapasForMaskedLM"),l1o=o(" (TAPAS model)"),i1o=l(),fu=a("li"),mae=a("strong"),d1o=o("transfo-xl"),c1o=o(" \u2014 "),y$=a("a"),f1o=o("TransfoXLLMHeadModel"),m1o=o(" (Transformer-XL model)"),g1o=l(),mu=a("li"),gae=a("strong"),h1o=o("unispeech"),p1o=o(" \u2014 "),L$=a("a"),_1o=o("UniSpeechForPreTraining"),u1o=o(" (UniSpeech model)"),b1o=l(),gu=a("li"),hae=a("strong"),F1o=o("unispeech-sat"),v1o=o(" \u2014 "),x$=a("a"),T1o=o("UniSpeechSatForPreTraining"),M1o=o(" (UniSpeechSat model)"),E1o=l(),hu=a("li"),pae=a("strong"),C1o=o("visual_bert"),w1o=o(" \u2014 "),k$=a("a"),A1o=o("VisualBertForPreTraining"),y1o=o(" (VisualBert model)"),L1o=l(),pu=a("li"),_ae=a("strong"),x1o=o("vit_mae"),k1o=o(" \u2014 "),S$=a("a"),S1o=o("ViTMAEForPreTraining"),R1o=o(" (ViTMAE model)"),B1o=l(),_u=a("li"),uae=a("strong"),P1o=o("wav2vec2"),$1o=o(" \u2014 "),R$=a("a"),I1o=o("Wav2Vec2ForPreTraining"),q1o=o(" (Wav2Vec2 model)"),N1o=l(),uu=a("li"),bae=a("strong"),j1o=o("xlm"),D1o=o(" \u2014 "),B$=a("a"),G1o=o("XLMWithLMHeadModel"),O1o=o(" (XLM model)"),V1o=l(),bu=a("li"),Fae=a("strong"),X1o=o("xlm-roberta"),z1o=o(" \u2014 "),P$=a("a"),Q1o=o("XLMRobertaForMaskedLM"),W1o=o(" (XLM-RoBERTa model)"),H1o=l(),Fu=a("li"),vae=a("strong"),U1o=o("xlm-roberta-xl"),J1o=o(" \u2014 "),$$=a("a"),Y1o=o("XLMRobertaXLForMaskedLM"),K1o=o(" (XLM-RoBERTa-XL model)"),Z1o=l(),vu=a("li"),Tae=a("strong"),e8o=o("xlnet"),o8o=o(" \u2014 "),I$=a("a"),r8o=o("XLNetLMHeadModel"),t8o=o(" (XLNet model)"),a8o=l(),Tu=a("p"),n8o=o("The model is set in evaluation mode by default using "),Mae=a("code"),s8o=o("model.eval()"),l8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=a("code"),i8o=o("model.train()"),d8o=l(),Cae=a("p"),c8o=o("Examples:"),f8o=l(),f(_3.$$.fragment),RRe=l(),rd=a("h2"),Mu=a("a"),wae=a("span"),f(u3.$$.fragment),m8o=l(),Aae=a("span"),g8o=o("AutoModelForCausalLM"),BRe=l(),Ko=a("div"),f(b3.$$.fragment),h8o=l(),td=a("p"),p8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),q$=a("a"),_8o=o("from_pretrained()"),u8o=o(" class method or the "),N$=a("a"),b8o=o("from_config()"),F8o=o(` class
method.`),v8o=l(),F3=a("p"),T8o=o("This class cannot be instantiated directly using "),yae=a("code"),M8o=o("__init__()"),E8o=o(" (throws an error)."),C8o=l(),Qr=a("div"),f(v3.$$.fragment),w8o=l(),Lae=a("p"),A8o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y8o=l(),ad=a("p"),L8o=o(`Note:
Loading a model from its configuration file does `),xae=a("strong"),x8o=o("not"),k8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),j$=a("a"),S8o=o("from_pretrained()"),R8o=o(" to load the model weights."),B8o=l(),kae=a("p"),P8o=o("Examples:"),$8o=l(),f(T3.$$.fragment),I8o=l(),je=a("div"),f(M3.$$.fragment),q8o=l(),Sae=a("p"),N8o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j8o=l(),Qa=a("p"),D8o=o("The model class to instantiate is selected based on the "),Rae=a("code"),G8o=o("model_type"),O8o=o(` property of the config object (either
passed as an argument or loaded from `),Bae=a("code"),V8o=o("pretrained_model_name_or_path"),X8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pae=a("code"),z8o=o("pretrained_model_name_or_path"),Q8o=o(":"),W8o=l(),$=a("ul"),Eu=a("li"),$ae=a("strong"),H8o=o("bart"),U8o=o(" \u2014 "),D$=a("a"),J8o=o("BartForCausalLM"),Y8o=o(" (BART model)"),K8o=l(),Cu=a("li"),Iae=a("strong"),Z8o=o("bert"),ebo=o(" \u2014 "),G$=a("a"),obo=o("BertLMHeadModel"),rbo=o(" (BERT model)"),tbo=l(),wu=a("li"),qae=a("strong"),abo=o("bert-generation"),nbo=o(" \u2014 "),O$=a("a"),sbo=o("BertGenerationDecoder"),lbo=o(" (Bert Generation model)"),ibo=l(),Au=a("li"),Nae=a("strong"),dbo=o("big_bird"),cbo=o(" \u2014 "),V$=a("a"),fbo=o("BigBirdForCausalLM"),mbo=o(" (BigBird model)"),gbo=l(),yu=a("li"),jae=a("strong"),hbo=o("bigbird_pegasus"),pbo=o(" \u2014 "),X$=a("a"),_bo=o("BigBirdPegasusForCausalLM"),ubo=o(" (BigBirdPegasus model)"),bbo=l(),Lu=a("li"),Dae=a("strong"),Fbo=o("blenderbot"),vbo=o(" \u2014 "),z$=a("a"),Tbo=o("BlenderbotForCausalLM"),Mbo=o(" (Blenderbot model)"),Ebo=l(),xu=a("li"),Gae=a("strong"),Cbo=o("blenderbot-small"),wbo=o(" \u2014 "),Q$=a("a"),Abo=o("BlenderbotSmallForCausalLM"),ybo=o(" (BlenderbotSmall model)"),Lbo=l(),ku=a("li"),Oae=a("strong"),xbo=o("camembert"),kbo=o(" \u2014 "),W$=a("a"),Sbo=o("CamembertForCausalLM"),Rbo=o(" (CamemBERT model)"),Bbo=l(),Su=a("li"),Vae=a("strong"),Pbo=o("ctrl"),$bo=o(" \u2014 "),H$=a("a"),Ibo=o("CTRLLMHeadModel"),qbo=o(" (CTRL model)"),Nbo=l(),Ru=a("li"),Xae=a("strong"),jbo=o("data2vec-text"),Dbo=o(" \u2014 "),U$=a("a"),Gbo=o("Data2VecTextForCausalLM"),Obo=o(" (Data2VecText model)"),Vbo=l(),Bu=a("li"),zae=a("strong"),Xbo=o("electra"),zbo=o(" \u2014 "),J$=a("a"),Qbo=o("ElectraForCausalLM"),Wbo=o(" (ELECTRA model)"),Hbo=l(),Pu=a("li"),Qae=a("strong"),Ubo=o("gpt2"),Jbo=o(" \u2014 "),Y$=a("a"),Ybo=o("GPT2LMHeadModel"),Kbo=o(" (OpenAI GPT-2 model)"),Zbo=l(),$u=a("li"),Wae=a("strong"),e2o=o("gpt_neo"),o2o=o(" \u2014 "),K$=a("a"),r2o=o("GPTNeoForCausalLM"),t2o=o(" (GPT Neo model)"),a2o=l(),Iu=a("li"),Hae=a("strong"),n2o=o("gptj"),s2o=o(" \u2014 "),Z$=a("a"),l2o=o("GPTJForCausalLM"),i2o=o(" (GPT-J model)"),d2o=l(),qu=a("li"),Uae=a("strong"),c2o=o("marian"),f2o=o(" \u2014 "),eI=a("a"),m2o=o("MarianForCausalLM"),g2o=o(" (Marian model)"),h2o=l(),Nu=a("li"),Jae=a("strong"),p2o=o("mbart"),_2o=o(" \u2014 "),oI=a("a"),u2o=o("MBartForCausalLM"),b2o=o(" (mBART model)"),F2o=l(),ju=a("li"),Yae=a("strong"),v2o=o("megatron-bert"),T2o=o(" \u2014 "),rI=a("a"),M2o=o("MegatronBertForCausalLM"),E2o=o(" (MegatronBert model)"),C2o=l(),Du=a("li"),Kae=a("strong"),w2o=o("openai-gpt"),A2o=o(" \u2014 "),tI=a("a"),y2o=o("OpenAIGPTLMHeadModel"),L2o=o(" (OpenAI GPT model)"),x2o=l(),Gu=a("li"),Zae=a("strong"),k2o=o("pegasus"),S2o=o(" \u2014 "),aI=a("a"),R2o=o("PegasusForCausalLM"),B2o=o(" (Pegasus model)"),P2o=l(),Ou=a("li"),ene=a("strong"),$2o=o("plbart"),I2o=o(" \u2014 "),nI=a("a"),q2o=o("PLBartForCausalLM"),N2o=o(" (PLBart model)"),j2o=l(),Vu=a("li"),one=a("strong"),D2o=o("prophetnet"),G2o=o(" \u2014 "),sI=a("a"),O2o=o("ProphetNetForCausalLM"),V2o=o(" (ProphetNet model)"),X2o=l(),Xu=a("li"),rne=a("strong"),z2o=o("qdqbert"),Q2o=o(" \u2014 "),lI=a("a"),W2o=o("QDQBertLMHeadModel"),H2o=o(" (QDQBert model)"),U2o=l(),zu=a("li"),tne=a("strong"),J2o=o("reformer"),Y2o=o(" \u2014 "),iI=a("a"),K2o=o("ReformerModelWithLMHead"),Z2o=o(" (Reformer model)"),e6o=l(),Qu=a("li"),ane=a("strong"),o6o=o("rembert"),r6o=o(" \u2014 "),dI=a("a"),t6o=o("RemBertForCausalLM"),a6o=o(" (RemBERT model)"),n6o=l(),Wu=a("li"),nne=a("strong"),s6o=o("roberta"),l6o=o(" \u2014 "),cI=a("a"),i6o=o("RobertaForCausalLM"),d6o=o(" (RoBERTa model)"),c6o=l(),Hu=a("li"),sne=a("strong"),f6o=o("roformer"),m6o=o(" \u2014 "),fI=a("a"),g6o=o("RoFormerForCausalLM"),h6o=o(" (RoFormer model)"),p6o=l(),Uu=a("li"),lne=a("strong"),_6o=o("speech_to_text_2"),u6o=o(" \u2014 "),mI=a("a"),b6o=o("Speech2Text2ForCausalLM"),F6o=o(" (Speech2Text2 model)"),v6o=l(),Ju=a("li"),ine=a("strong"),T6o=o("transfo-xl"),M6o=o(" \u2014 "),gI=a("a"),E6o=o("TransfoXLLMHeadModel"),C6o=o(" (Transformer-XL model)"),w6o=l(),Yu=a("li"),dne=a("strong"),A6o=o("trocr"),y6o=o(" \u2014 "),hI=a("a"),L6o=o("TrOCRForCausalLM"),x6o=o(" (TrOCR model)"),k6o=l(),Ku=a("li"),cne=a("strong"),S6o=o("xglm"),R6o=o(" \u2014 "),pI=a("a"),B6o=o("XGLMForCausalLM"),P6o=o(" (XGLM model)"),$6o=l(),Zu=a("li"),fne=a("strong"),I6o=o("xlm"),q6o=o(" \u2014 "),_I=a("a"),N6o=o("XLMWithLMHeadModel"),j6o=o(" (XLM model)"),D6o=l(),e1=a("li"),mne=a("strong"),G6o=o("xlm-prophetnet"),O6o=o(" \u2014 "),uI=a("a"),V6o=o("XLMProphetNetForCausalLM"),X6o=o(" (XLMProphetNet model)"),z6o=l(),o1=a("li"),gne=a("strong"),Q6o=o("xlm-roberta"),W6o=o(" \u2014 "),bI=a("a"),H6o=o("XLMRobertaForCausalLM"),U6o=o(" (XLM-RoBERTa model)"),J6o=l(),r1=a("li"),hne=a("strong"),Y6o=o("xlm-roberta-xl"),K6o=o(" \u2014 "),FI=a("a"),Z6o=o("XLMRobertaXLForCausalLM"),eFo=o(" (XLM-RoBERTa-XL model)"),oFo=l(),t1=a("li"),pne=a("strong"),rFo=o("xlnet"),tFo=o(" \u2014 "),vI=a("a"),aFo=o("XLNetLMHeadModel"),nFo=o(" (XLNet model)"),sFo=l(),a1=a("p"),lFo=o("The model is set in evaluation mode by default using "),_ne=a("code"),iFo=o("model.eval()"),dFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=a("code"),cFo=o("model.train()"),fFo=l(),bne=a("p"),mFo=o("Examples:"),gFo=l(),f(E3.$$.fragment),PRe=l(),nd=a("h2"),n1=a("a"),Fne=a("span"),f(C3.$$.fragment),hFo=l(),vne=a("span"),pFo=o("AutoModelForMaskedLM"),$Re=l(),Zo=a("div"),f(w3.$$.fragment),_Fo=l(),sd=a("p"),uFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TI=a("a"),bFo=o("from_pretrained()"),FFo=o(" class method or the "),MI=a("a"),vFo=o("from_config()"),TFo=o(` class
method.`),MFo=l(),A3=a("p"),EFo=o("This class cannot be instantiated directly using "),Tne=a("code"),CFo=o("__init__()"),wFo=o(" (throws an error)."),AFo=l(),Wr=a("div"),f(y3.$$.fragment),yFo=l(),Mne=a("p"),LFo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xFo=l(),ld=a("p"),kFo=o(`Note:
Loading a model from its configuration file does `),Ene=a("strong"),SFo=o("not"),RFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EI=a("a"),BFo=o("from_pretrained()"),PFo=o(" to load the model weights."),$Fo=l(),Cne=a("p"),IFo=o("Examples:"),qFo=l(),f(L3.$$.fragment),NFo=l(),De=a("div"),f(x3.$$.fragment),jFo=l(),wne=a("p"),DFo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),GFo=l(),Wa=a("p"),OFo=o("The model class to instantiate is selected based on the "),Ane=a("code"),VFo=o("model_type"),XFo=o(` property of the config object (either
passed as an argument or loaded from `),yne=a("code"),zFo=o("pretrained_model_name_or_path"),QFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lne=a("code"),WFo=o("pretrained_model_name_or_path"),HFo=o(":"),UFo=l(),I=a("ul"),s1=a("li"),xne=a("strong"),JFo=o("albert"),YFo=o(" \u2014 "),CI=a("a"),KFo=o("AlbertForMaskedLM"),ZFo=o(" (ALBERT model)"),evo=l(),l1=a("li"),kne=a("strong"),ovo=o("bart"),rvo=o(" \u2014 "),wI=a("a"),tvo=o("BartForConditionalGeneration"),avo=o(" (BART model)"),nvo=l(),i1=a("li"),Sne=a("strong"),svo=o("bert"),lvo=o(" \u2014 "),AI=a("a"),ivo=o("BertForMaskedLM"),dvo=o(" (BERT model)"),cvo=l(),d1=a("li"),Rne=a("strong"),fvo=o("big_bird"),mvo=o(" \u2014 "),yI=a("a"),gvo=o("BigBirdForMaskedLM"),hvo=o(" (BigBird model)"),pvo=l(),c1=a("li"),Bne=a("strong"),_vo=o("camembert"),uvo=o(" \u2014 "),LI=a("a"),bvo=o("CamembertForMaskedLM"),Fvo=o(" (CamemBERT model)"),vvo=l(),f1=a("li"),Pne=a("strong"),Tvo=o("convbert"),Mvo=o(" \u2014 "),xI=a("a"),Evo=o("ConvBertForMaskedLM"),Cvo=o(" (ConvBERT model)"),wvo=l(),m1=a("li"),$ne=a("strong"),Avo=o("data2vec-text"),yvo=o(" \u2014 "),kI=a("a"),Lvo=o("Data2VecTextForMaskedLM"),xvo=o(" (Data2VecText model)"),kvo=l(),g1=a("li"),Ine=a("strong"),Svo=o("deberta"),Rvo=o(" \u2014 "),SI=a("a"),Bvo=o("DebertaForMaskedLM"),Pvo=o(" (DeBERTa model)"),$vo=l(),h1=a("li"),qne=a("strong"),Ivo=o("deberta-v2"),qvo=o(" \u2014 "),RI=a("a"),Nvo=o("DebertaV2ForMaskedLM"),jvo=o(" (DeBERTa-v2 model)"),Dvo=l(),p1=a("li"),Nne=a("strong"),Gvo=o("distilbert"),Ovo=o(" \u2014 "),BI=a("a"),Vvo=o("DistilBertForMaskedLM"),Xvo=o(" (DistilBERT model)"),zvo=l(),_1=a("li"),jne=a("strong"),Qvo=o("electra"),Wvo=o(" \u2014 "),PI=a("a"),Hvo=o("ElectraForMaskedLM"),Uvo=o(" (ELECTRA model)"),Jvo=l(),u1=a("li"),Dne=a("strong"),Yvo=o("flaubert"),Kvo=o(" \u2014 "),$I=a("a"),Zvo=o("FlaubertWithLMHeadModel"),e0o=o(" (FlauBERT model)"),o0o=l(),b1=a("li"),Gne=a("strong"),r0o=o("fnet"),t0o=o(" \u2014 "),II=a("a"),a0o=o("FNetForMaskedLM"),n0o=o(" (FNet model)"),s0o=l(),F1=a("li"),One=a("strong"),l0o=o("funnel"),i0o=o(" \u2014 "),qI=a("a"),d0o=o("FunnelForMaskedLM"),c0o=o(" (Funnel Transformer model)"),f0o=l(),v1=a("li"),Vne=a("strong"),m0o=o("ibert"),g0o=o(" \u2014 "),NI=a("a"),h0o=o("IBertForMaskedLM"),p0o=o(" (I-BERT model)"),_0o=l(),T1=a("li"),Xne=a("strong"),u0o=o("layoutlm"),b0o=o(" \u2014 "),jI=a("a"),F0o=o("LayoutLMForMaskedLM"),v0o=o(" (LayoutLM model)"),T0o=l(),M1=a("li"),zne=a("strong"),M0o=o("longformer"),E0o=o(" \u2014 "),DI=a("a"),C0o=o("LongformerForMaskedLM"),w0o=o(" (Longformer model)"),A0o=l(),E1=a("li"),Qne=a("strong"),y0o=o("mbart"),L0o=o(" \u2014 "),GI=a("a"),x0o=o("MBartForConditionalGeneration"),k0o=o(" (mBART model)"),S0o=l(),C1=a("li"),Wne=a("strong"),R0o=o("megatron-bert"),B0o=o(" \u2014 "),OI=a("a"),P0o=o("MegatronBertForMaskedLM"),$0o=o(" (MegatronBert model)"),I0o=l(),w1=a("li"),Hne=a("strong"),q0o=o("mobilebert"),N0o=o(" \u2014 "),VI=a("a"),j0o=o("MobileBertForMaskedLM"),D0o=o(" (MobileBERT model)"),G0o=l(),A1=a("li"),Une=a("strong"),O0o=o("mpnet"),V0o=o(" \u2014 "),XI=a("a"),X0o=o("MPNetForMaskedLM"),z0o=o(" (MPNet model)"),Q0o=l(),y1=a("li"),Jne=a("strong"),W0o=o("nystromformer"),H0o=o(" \u2014 "),zI=a("a"),U0o=o("NystromformerForMaskedLM"),J0o=o(" (Nystromformer model)"),Y0o=l(),L1=a("li"),Yne=a("strong"),K0o=o("perceiver"),Z0o=o(" \u2014 "),QI=a("a"),eTo=o("PerceiverForMaskedLM"),oTo=o(" (Perceiver model)"),rTo=l(),x1=a("li"),Kne=a("strong"),tTo=o("qdqbert"),aTo=o(" \u2014 "),WI=a("a"),nTo=o("QDQBertForMaskedLM"),sTo=o(" (QDQBert model)"),lTo=l(),k1=a("li"),Zne=a("strong"),iTo=o("reformer"),dTo=o(" \u2014 "),HI=a("a"),cTo=o("ReformerForMaskedLM"),fTo=o(" (Reformer model)"),mTo=l(),S1=a("li"),ese=a("strong"),gTo=o("rembert"),hTo=o(" \u2014 "),UI=a("a"),pTo=o("RemBertForMaskedLM"),_To=o(" (RemBERT model)"),uTo=l(),R1=a("li"),ose=a("strong"),bTo=o("roberta"),FTo=o(" \u2014 "),JI=a("a"),vTo=o("RobertaForMaskedLM"),TTo=o(" (RoBERTa model)"),MTo=l(),B1=a("li"),rse=a("strong"),ETo=o("roformer"),CTo=o(" \u2014 "),YI=a("a"),wTo=o("RoFormerForMaskedLM"),ATo=o(" (RoFormer model)"),yTo=l(),P1=a("li"),tse=a("strong"),LTo=o("squeezebert"),xTo=o(" \u2014 "),KI=a("a"),kTo=o("SqueezeBertForMaskedLM"),STo=o(" (SqueezeBERT model)"),RTo=l(),$1=a("li"),ase=a("strong"),BTo=o("tapas"),PTo=o(" \u2014 "),ZI=a("a"),$To=o("TapasForMaskedLM"),ITo=o(" (TAPAS model)"),qTo=l(),I1=a("li"),nse=a("strong"),NTo=o("wav2vec2"),jTo=o(" \u2014 "),sse=a("code"),DTo=o("Wav2Vec2ForMaskedLM"),GTo=o(" (Wav2Vec2 model)"),OTo=l(),q1=a("li"),lse=a("strong"),VTo=o("xlm"),XTo=o(" \u2014 "),eq=a("a"),zTo=o("XLMWithLMHeadModel"),QTo=o(" (XLM model)"),WTo=l(),N1=a("li"),ise=a("strong"),HTo=o("xlm-roberta"),UTo=o(" \u2014 "),oq=a("a"),JTo=o("XLMRobertaForMaskedLM"),YTo=o(" (XLM-RoBERTa model)"),KTo=l(),j1=a("li"),dse=a("strong"),ZTo=o("xlm-roberta-xl"),eMo=o(" \u2014 "),rq=a("a"),oMo=o("XLMRobertaXLForMaskedLM"),rMo=o(" (XLM-RoBERTa-XL model)"),tMo=l(),D1=a("li"),cse=a("strong"),aMo=o("yoso"),nMo=o(" \u2014 "),tq=a("a"),sMo=o("YosoForMaskedLM"),lMo=o(" (YOSO model)"),iMo=l(),G1=a("p"),dMo=o("The model is set in evaluation mode by default using "),fse=a("code"),cMo=o("model.eval()"),fMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=a("code"),mMo=o("model.train()"),gMo=l(),gse=a("p"),hMo=o("Examples:"),pMo=l(),f(k3.$$.fragment),IRe=l(),id=a("h2"),O1=a("a"),hse=a("span"),f(S3.$$.fragment),_Mo=l(),pse=a("span"),uMo=o("AutoModelForSeq2SeqLM"),qRe=l(),er=a("div"),f(R3.$$.fragment),bMo=l(),dd=a("p"),FMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aq=a("a"),vMo=o("from_pretrained()"),TMo=o(" class method or the "),nq=a("a"),MMo=o("from_config()"),EMo=o(` class
method.`),CMo=l(),B3=a("p"),wMo=o("This class cannot be instantiated directly using "),_se=a("code"),AMo=o("__init__()"),yMo=o(" (throws an error)."),LMo=l(),Hr=a("div"),f(P3.$$.fragment),xMo=l(),use=a("p"),kMo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SMo=l(),cd=a("p"),RMo=o(`Note:
Loading a model from its configuration file does `),bse=a("strong"),BMo=o("not"),PMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sq=a("a"),$Mo=o("from_pretrained()"),IMo=o(" to load the model weights."),qMo=l(),Fse=a("p"),NMo=o("Examples:"),jMo=l(),f($3.$$.fragment),DMo=l(),Ge=a("div"),f(I3.$$.fragment),GMo=l(),vse=a("p"),OMo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VMo=l(),Ha=a("p"),XMo=o("The model class to instantiate is selected based on the "),Tse=a("code"),zMo=o("model_type"),QMo=o(` property of the config object (either
passed as an argument or loaded from `),Mse=a("code"),WMo=o("pretrained_model_name_or_path"),HMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=a("code"),UMo=o("pretrained_model_name_or_path"),JMo=o(":"),YMo=l(),ne=a("ul"),V1=a("li"),Cse=a("strong"),KMo=o("bart"),ZMo=o(" \u2014 "),lq=a("a"),e4o=o("BartForConditionalGeneration"),o4o=o(" (BART model)"),r4o=l(),X1=a("li"),wse=a("strong"),t4o=o("bigbird_pegasus"),a4o=o(" \u2014 "),iq=a("a"),n4o=o("BigBirdPegasusForConditionalGeneration"),s4o=o(" (BigBirdPegasus model)"),l4o=l(),z1=a("li"),Ase=a("strong"),i4o=o("blenderbot"),d4o=o(" \u2014 "),dq=a("a"),c4o=o("BlenderbotForConditionalGeneration"),f4o=o(" (Blenderbot model)"),m4o=l(),Q1=a("li"),yse=a("strong"),g4o=o("blenderbot-small"),h4o=o(" \u2014 "),cq=a("a"),p4o=o("BlenderbotSmallForConditionalGeneration"),_4o=o(" (BlenderbotSmall model)"),u4o=l(),W1=a("li"),Lse=a("strong"),b4o=o("encoder-decoder"),F4o=o(" \u2014 "),fq=a("a"),v4o=o("EncoderDecoderModel"),T4o=o(" (Encoder decoder model)"),M4o=l(),H1=a("li"),xse=a("strong"),E4o=o("fsmt"),C4o=o(" \u2014 "),mq=a("a"),w4o=o("FSMTForConditionalGeneration"),A4o=o(" (FairSeq Machine-Translation model)"),y4o=l(),U1=a("li"),kse=a("strong"),L4o=o("led"),x4o=o(" \u2014 "),gq=a("a"),k4o=o("LEDForConditionalGeneration"),S4o=o(" (LED model)"),R4o=l(),J1=a("li"),Sse=a("strong"),B4o=o("m2m_100"),P4o=o(" \u2014 "),hq=a("a"),$4o=o("M2M100ForConditionalGeneration"),I4o=o(" (M2M100 model)"),q4o=l(),Y1=a("li"),Rse=a("strong"),N4o=o("marian"),j4o=o(" \u2014 "),pq=a("a"),D4o=o("MarianMTModel"),G4o=o(" (Marian model)"),O4o=l(),K1=a("li"),Bse=a("strong"),V4o=o("mbart"),X4o=o(" \u2014 "),_q=a("a"),z4o=o("MBartForConditionalGeneration"),Q4o=o(" (mBART model)"),W4o=l(),Z1=a("li"),Pse=a("strong"),H4o=o("mt5"),U4o=o(" \u2014 "),uq=a("a"),J4o=o("MT5ForConditionalGeneration"),Y4o=o(" (mT5 model)"),K4o=l(),e8=a("li"),$se=a("strong"),Z4o=o("pegasus"),eEo=o(" \u2014 "),bq=a("a"),oEo=o("PegasusForConditionalGeneration"),rEo=o(" (Pegasus model)"),tEo=l(),o8=a("li"),Ise=a("strong"),aEo=o("plbart"),nEo=o(" \u2014 "),Fq=a("a"),sEo=o("PLBartForConditionalGeneration"),lEo=o(" (PLBart model)"),iEo=l(),r8=a("li"),qse=a("strong"),dEo=o("prophetnet"),cEo=o(" \u2014 "),vq=a("a"),fEo=o("ProphetNetForConditionalGeneration"),mEo=o(" (ProphetNet model)"),gEo=l(),t8=a("li"),Nse=a("strong"),hEo=o("t5"),pEo=o(" \u2014 "),Tq=a("a"),_Eo=o("T5ForConditionalGeneration"),uEo=o(" (T5 model)"),bEo=l(),a8=a("li"),jse=a("strong"),FEo=o("tapex"),vEo=o(" \u2014 "),Mq=a("a"),TEo=o("BartForConditionalGeneration"),MEo=o(" (TAPEX model)"),EEo=l(),n8=a("li"),Dse=a("strong"),CEo=o("xlm-prophetnet"),wEo=o(" \u2014 "),Eq=a("a"),AEo=o("XLMProphetNetForConditionalGeneration"),yEo=o(" (XLMProphetNet model)"),LEo=l(),s8=a("p"),xEo=o("The model is set in evaluation mode by default using "),Gse=a("code"),kEo=o("model.eval()"),SEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=a("code"),REo=o("model.train()"),BEo=l(),Vse=a("p"),PEo=o("Examples:"),$Eo=l(),f(q3.$$.fragment),NRe=l(),fd=a("h2"),l8=a("a"),Xse=a("span"),f(N3.$$.fragment),IEo=l(),zse=a("span"),qEo=o("AutoModelForSequenceClassification"),jRe=l(),or=a("div"),f(j3.$$.fragment),NEo=l(),md=a("p"),jEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cq=a("a"),DEo=o("from_pretrained()"),GEo=o(" class method or the "),wq=a("a"),OEo=o("from_config()"),VEo=o(` class
method.`),XEo=l(),D3=a("p"),zEo=o("This class cannot be instantiated directly using "),Qse=a("code"),QEo=o("__init__()"),WEo=o(" (throws an error)."),HEo=l(),Ur=a("div"),f(G3.$$.fragment),UEo=l(),Wse=a("p"),JEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YEo=l(),gd=a("p"),KEo=o(`Note:
Loading a model from its configuration file does `),Hse=a("strong"),ZEo=o("not"),e5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=a("a"),o5o=o("from_pretrained()"),r5o=o(" to load the model weights."),t5o=l(),Use=a("p"),a5o=o("Examples:"),n5o=l(),f(O3.$$.fragment),s5o=l(),Oe=a("div"),f(V3.$$.fragment),l5o=l(),Jse=a("p"),i5o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d5o=l(),Ua=a("p"),c5o=o("The model class to instantiate is selected based on the "),Yse=a("code"),f5o=o("model_type"),m5o=o(` property of the config object (either
passed as an argument or loaded from `),Kse=a("code"),g5o=o("pretrained_model_name_or_path"),h5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zse=a("code"),p5o=o("pretrained_model_name_or_path"),_5o=o(":"),u5o=l(),y=a("ul"),i8=a("li"),ele=a("strong"),b5o=o("albert"),F5o=o(" \u2014 "),yq=a("a"),v5o=o("AlbertForSequenceClassification"),T5o=o(" (ALBERT model)"),M5o=l(),d8=a("li"),ole=a("strong"),E5o=o("bart"),C5o=o(" \u2014 "),Lq=a("a"),w5o=o("BartForSequenceClassification"),A5o=o(" (BART model)"),y5o=l(),c8=a("li"),rle=a("strong"),L5o=o("bert"),x5o=o(" \u2014 "),xq=a("a"),k5o=o("BertForSequenceClassification"),S5o=o(" (BERT model)"),R5o=l(),f8=a("li"),tle=a("strong"),B5o=o("big_bird"),P5o=o(" \u2014 "),kq=a("a"),$5o=o("BigBirdForSequenceClassification"),I5o=o(" (BigBird model)"),q5o=l(),m8=a("li"),ale=a("strong"),N5o=o("bigbird_pegasus"),j5o=o(" \u2014 "),Sq=a("a"),D5o=o("BigBirdPegasusForSequenceClassification"),G5o=o(" (BigBirdPegasus model)"),O5o=l(),g8=a("li"),nle=a("strong"),V5o=o("camembert"),X5o=o(" \u2014 "),Rq=a("a"),z5o=o("CamembertForSequenceClassification"),Q5o=o(" (CamemBERT model)"),W5o=l(),h8=a("li"),sle=a("strong"),H5o=o("canine"),U5o=o(" \u2014 "),Bq=a("a"),J5o=o("CanineForSequenceClassification"),Y5o=o(" (Canine model)"),K5o=l(),p8=a("li"),lle=a("strong"),Z5o=o("convbert"),e3o=o(" \u2014 "),Pq=a("a"),o3o=o("ConvBertForSequenceClassification"),r3o=o(" (ConvBERT model)"),t3o=l(),_8=a("li"),ile=a("strong"),a3o=o("ctrl"),n3o=o(" \u2014 "),$q=a("a"),s3o=o("CTRLForSequenceClassification"),l3o=o(" (CTRL model)"),i3o=l(),u8=a("li"),dle=a("strong"),d3o=o("data2vec-text"),c3o=o(" \u2014 "),Iq=a("a"),f3o=o("Data2VecTextForSequenceClassification"),m3o=o(" (Data2VecText model)"),g3o=l(),b8=a("li"),cle=a("strong"),h3o=o("deberta"),p3o=o(" \u2014 "),qq=a("a"),_3o=o("DebertaForSequenceClassification"),u3o=o(" (DeBERTa model)"),b3o=l(),F8=a("li"),fle=a("strong"),F3o=o("deberta-v2"),v3o=o(" \u2014 "),Nq=a("a"),T3o=o("DebertaV2ForSequenceClassification"),M3o=o(" (DeBERTa-v2 model)"),E3o=l(),v8=a("li"),mle=a("strong"),C3o=o("distilbert"),w3o=o(" \u2014 "),jq=a("a"),A3o=o("DistilBertForSequenceClassification"),y3o=o(" (DistilBERT model)"),L3o=l(),T8=a("li"),gle=a("strong"),x3o=o("electra"),k3o=o(" \u2014 "),Dq=a("a"),S3o=o("ElectraForSequenceClassification"),R3o=o(" (ELECTRA model)"),B3o=l(),M8=a("li"),hle=a("strong"),P3o=o("flaubert"),$3o=o(" \u2014 "),Gq=a("a"),I3o=o("FlaubertForSequenceClassification"),q3o=o(" (FlauBERT model)"),N3o=l(),E8=a("li"),ple=a("strong"),j3o=o("fnet"),D3o=o(" \u2014 "),Oq=a("a"),G3o=o("FNetForSequenceClassification"),O3o=o(" (FNet model)"),V3o=l(),C8=a("li"),_le=a("strong"),X3o=o("funnel"),z3o=o(" \u2014 "),Vq=a("a"),Q3o=o("FunnelForSequenceClassification"),W3o=o(" (Funnel Transformer model)"),H3o=l(),w8=a("li"),ule=a("strong"),U3o=o("gpt2"),J3o=o(" \u2014 "),Xq=a("a"),Y3o=o("GPT2ForSequenceClassification"),K3o=o(" (OpenAI GPT-2 model)"),Z3o=l(),A8=a("li"),ble=a("strong"),eCo=o("gpt_neo"),oCo=o(" \u2014 "),zq=a("a"),rCo=o("GPTNeoForSequenceClassification"),tCo=o(" (GPT Neo model)"),aCo=l(),y8=a("li"),Fle=a("strong"),nCo=o("gptj"),sCo=o(" \u2014 "),Qq=a("a"),lCo=o("GPTJForSequenceClassification"),iCo=o(" (GPT-J model)"),dCo=l(),L8=a("li"),vle=a("strong"),cCo=o("ibert"),fCo=o(" \u2014 "),Wq=a("a"),mCo=o("IBertForSequenceClassification"),gCo=o(" (I-BERT model)"),hCo=l(),x8=a("li"),Tle=a("strong"),pCo=o("layoutlm"),_Co=o(" \u2014 "),Hq=a("a"),uCo=o("LayoutLMForSequenceClassification"),bCo=o(" (LayoutLM model)"),FCo=l(),k8=a("li"),Mle=a("strong"),vCo=o("layoutlmv2"),TCo=o(" \u2014 "),Uq=a("a"),MCo=o("LayoutLMv2ForSequenceClassification"),ECo=o(" (LayoutLMv2 model)"),CCo=l(),S8=a("li"),Ele=a("strong"),wCo=o("led"),ACo=o(" \u2014 "),Jq=a("a"),yCo=o("LEDForSequenceClassification"),LCo=o(" (LED model)"),xCo=l(),R8=a("li"),Cle=a("strong"),kCo=o("longformer"),SCo=o(" \u2014 "),Yq=a("a"),RCo=o("LongformerForSequenceClassification"),BCo=o(" (Longformer model)"),PCo=l(),B8=a("li"),wle=a("strong"),$Co=o("mbart"),ICo=o(" \u2014 "),Kq=a("a"),qCo=o("MBartForSequenceClassification"),NCo=o(" (mBART model)"),jCo=l(),P8=a("li"),Ale=a("strong"),DCo=o("megatron-bert"),GCo=o(" \u2014 "),Zq=a("a"),OCo=o("MegatronBertForSequenceClassification"),VCo=o(" (MegatronBert model)"),XCo=l(),$8=a("li"),yle=a("strong"),zCo=o("mobilebert"),QCo=o(" \u2014 "),eN=a("a"),WCo=o("MobileBertForSequenceClassification"),HCo=o(" (MobileBERT model)"),UCo=l(),I8=a("li"),Lle=a("strong"),JCo=o("mpnet"),YCo=o(" \u2014 "),oN=a("a"),KCo=o("MPNetForSequenceClassification"),ZCo=o(" (MPNet model)"),ewo=l(),q8=a("li"),xle=a("strong"),owo=o("nystromformer"),rwo=o(" \u2014 "),rN=a("a"),two=o("NystromformerForSequenceClassification"),awo=o(" (Nystromformer model)"),nwo=l(),N8=a("li"),kle=a("strong"),swo=o("openai-gpt"),lwo=o(" \u2014 "),tN=a("a"),iwo=o("OpenAIGPTForSequenceClassification"),dwo=o(" (OpenAI GPT model)"),cwo=l(),j8=a("li"),Sle=a("strong"),fwo=o("perceiver"),mwo=o(" \u2014 "),aN=a("a"),gwo=o("PerceiverForSequenceClassification"),hwo=o(" (Perceiver model)"),pwo=l(),D8=a("li"),Rle=a("strong"),_wo=o("plbart"),uwo=o(" \u2014 "),nN=a("a"),bwo=o("PLBartForSequenceClassification"),Fwo=o(" (PLBart model)"),vwo=l(),G8=a("li"),Ble=a("strong"),Two=o("qdqbert"),Mwo=o(" \u2014 "),sN=a("a"),Ewo=o("QDQBertForSequenceClassification"),Cwo=o(" (QDQBert model)"),wwo=l(),O8=a("li"),Ple=a("strong"),Awo=o("reformer"),ywo=o(" \u2014 "),lN=a("a"),Lwo=o("ReformerForSequenceClassification"),xwo=o(" (Reformer model)"),kwo=l(),V8=a("li"),$le=a("strong"),Swo=o("rembert"),Rwo=o(" \u2014 "),iN=a("a"),Bwo=o("RemBertForSequenceClassification"),Pwo=o(" (RemBERT model)"),$wo=l(),X8=a("li"),Ile=a("strong"),Iwo=o("roberta"),qwo=o(" \u2014 "),dN=a("a"),Nwo=o("RobertaForSequenceClassification"),jwo=o(" (RoBERTa model)"),Dwo=l(),z8=a("li"),qle=a("strong"),Gwo=o("roformer"),Owo=o(" \u2014 "),cN=a("a"),Vwo=o("RoFormerForSequenceClassification"),Xwo=o(" (RoFormer model)"),zwo=l(),Q8=a("li"),Nle=a("strong"),Qwo=o("squeezebert"),Wwo=o(" \u2014 "),fN=a("a"),Hwo=o("SqueezeBertForSequenceClassification"),Uwo=o(" (SqueezeBERT model)"),Jwo=l(),W8=a("li"),jle=a("strong"),Ywo=o("tapas"),Kwo=o(" \u2014 "),mN=a("a"),Zwo=o("TapasForSequenceClassification"),eAo=o(" (TAPAS model)"),oAo=l(),H8=a("li"),Dle=a("strong"),rAo=o("tapex"),tAo=o(" \u2014 "),gN=a("a"),aAo=o("BartForSequenceClassification"),nAo=o(" (TAPEX model)"),sAo=l(),U8=a("li"),Gle=a("strong"),lAo=o("transfo-xl"),iAo=o(" \u2014 "),hN=a("a"),dAo=o("TransfoXLForSequenceClassification"),cAo=o(" (Transformer-XL model)"),fAo=l(),J8=a("li"),Ole=a("strong"),mAo=o("xlm"),gAo=o(" \u2014 "),pN=a("a"),hAo=o("XLMForSequenceClassification"),pAo=o(" (XLM model)"),_Ao=l(),Y8=a("li"),Vle=a("strong"),uAo=o("xlm-roberta"),bAo=o(" \u2014 "),_N=a("a"),FAo=o("XLMRobertaForSequenceClassification"),vAo=o(" (XLM-RoBERTa model)"),TAo=l(),K8=a("li"),Xle=a("strong"),MAo=o("xlm-roberta-xl"),EAo=o(" \u2014 "),uN=a("a"),CAo=o("XLMRobertaXLForSequenceClassification"),wAo=o(" (XLM-RoBERTa-XL model)"),AAo=l(),Z8=a("li"),zle=a("strong"),yAo=o("xlnet"),LAo=o(" \u2014 "),bN=a("a"),xAo=o("XLNetForSequenceClassification"),kAo=o(" (XLNet model)"),SAo=l(),eb=a("li"),Qle=a("strong"),RAo=o("yoso"),BAo=o(" \u2014 "),FN=a("a"),PAo=o("YosoForSequenceClassification"),$Ao=o(" (YOSO model)"),IAo=l(),ob=a("p"),qAo=o("The model is set in evaluation mode by default using "),Wle=a("code"),NAo=o("model.eval()"),jAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=a("code"),DAo=o("model.train()"),GAo=l(),Ule=a("p"),OAo=o("Examples:"),VAo=l(),f(X3.$$.fragment),DRe=l(),hd=a("h2"),rb=a("a"),Jle=a("span"),f(z3.$$.fragment),XAo=l(),Yle=a("span"),zAo=o("AutoModelForMultipleChoice"),GRe=l(),rr=a("div"),f(Q3.$$.fragment),QAo=l(),pd=a("p"),WAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vN=a("a"),HAo=o("from_pretrained()"),UAo=o(" class method or the "),TN=a("a"),JAo=o("from_config()"),YAo=o(` class
method.`),KAo=l(),W3=a("p"),ZAo=o("This class cannot be instantiated directly using "),Kle=a("code"),eyo=o("__init__()"),oyo=o(" (throws an error)."),ryo=l(),Jr=a("div"),f(H3.$$.fragment),tyo=l(),Zle=a("p"),ayo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nyo=l(),_d=a("p"),syo=o(`Note:
Loading a model from its configuration file does `),eie=a("strong"),lyo=o("not"),iyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=a("a"),dyo=o("from_pretrained()"),cyo=o(" to load the model weights."),fyo=l(),oie=a("p"),myo=o("Examples:"),gyo=l(),f(U3.$$.fragment),hyo=l(),Ve=a("div"),f(J3.$$.fragment),pyo=l(),rie=a("p"),_yo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uyo=l(),Ja=a("p"),byo=o("The model class to instantiate is selected based on the "),tie=a("code"),Fyo=o("model_type"),vyo=o(` property of the config object (either
passed as an argument or loaded from `),aie=a("code"),Tyo=o("pretrained_model_name_or_path"),Myo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nie=a("code"),Eyo=o("pretrained_model_name_or_path"),Cyo=o(":"),wyo=l(),G=a("ul"),tb=a("li"),sie=a("strong"),Ayo=o("albert"),yyo=o(" \u2014 "),EN=a("a"),Lyo=o("AlbertForMultipleChoice"),xyo=o(" (ALBERT model)"),kyo=l(),ab=a("li"),lie=a("strong"),Syo=o("bert"),Ryo=o(" \u2014 "),CN=a("a"),Byo=o("BertForMultipleChoice"),Pyo=o(" (BERT model)"),$yo=l(),nb=a("li"),iie=a("strong"),Iyo=o("big_bird"),qyo=o(" \u2014 "),wN=a("a"),Nyo=o("BigBirdForMultipleChoice"),jyo=o(" (BigBird model)"),Dyo=l(),sb=a("li"),die=a("strong"),Gyo=o("camembert"),Oyo=o(" \u2014 "),AN=a("a"),Vyo=o("CamembertForMultipleChoice"),Xyo=o(" (CamemBERT model)"),zyo=l(),lb=a("li"),cie=a("strong"),Qyo=o("canine"),Wyo=o(" \u2014 "),yN=a("a"),Hyo=o("CanineForMultipleChoice"),Uyo=o(" (Canine model)"),Jyo=l(),ib=a("li"),fie=a("strong"),Yyo=o("convbert"),Kyo=o(" \u2014 "),LN=a("a"),Zyo=o("ConvBertForMultipleChoice"),eLo=o(" (ConvBERT model)"),oLo=l(),db=a("li"),mie=a("strong"),rLo=o("data2vec-text"),tLo=o(" \u2014 "),xN=a("a"),aLo=o("Data2VecTextForMultipleChoice"),nLo=o(" (Data2VecText model)"),sLo=l(),cb=a("li"),gie=a("strong"),lLo=o("distilbert"),iLo=o(" \u2014 "),kN=a("a"),dLo=o("DistilBertForMultipleChoice"),cLo=o(" (DistilBERT model)"),fLo=l(),fb=a("li"),hie=a("strong"),mLo=o("electra"),gLo=o(" \u2014 "),SN=a("a"),hLo=o("ElectraForMultipleChoice"),pLo=o(" (ELECTRA model)"),_Lo=l(),mb=a("li"),pie=a("strong"),uLo=o("flaubert"),bLo=o(" \u2014 "),RN=a("a"),FLo=o("FlaubertForMultipleChoice"),vLo=o(" (FlauBERT model)"),TLo=l(),gb=a("li"),_ie=a("strong"),MLo=o("fnet"),ELo=o(" \u2014 "),BN=a("a"),CLo=o("FNetForMultipleChoice"),wLo=o(" (FNet model)"),ALo=l(),hb=a("li"),uie=a("strong"),yLo=o("funnel"),LLo=o(" \u2014 "),PN=a("a"),xLo=o("FunnelForMultipleChoice"),kLo=o(" (Funnel Transformer model)"),SLo=l(),pb=a("li"),bie=a("strong"),RLo=o("ibert"),BLo=o(" \u2014 "),$N=a("a"),PLo=o("IBertForMultipleChoice"),$Lo=o(" (I-BERT model)"),ILo=l(),_b=a("li"),Fie=a("strong"),qLo=o("longformer"),NLo=o(" \u2014 "),IN=a("a"),jLo=o("LongformerForMultipleChoice"),DLo=o(" (Longformer model)"),GLo=l(),ub=a("li"),vie=a("strong"),OLo=o("megatron-bert"),VLo=o(" \u2014 "),qN=a("a"),XLo=o("MegatronBertForMultipleChoice"),zLo=o(" (MegatronBert model)"),QLo=l(),bb=a("li"),Tie=a("strong"),WLo=o("mobilebert"),HLo=o(" \u2014 "),NN=a("a"),ULo=o("MobileBertForMultipleChoice"),JLo=o(" (MobileBERT model)"),YLo=l(),Fb=a("li"),Mie=a("strong"),KLo=o("mpnet"),ZLo=o(" \u2014 "),jN=a("a"),e7o=o("MPNetForMultipleChoice"),o7o=o(" (MPNet model)"),r7o=l(),vb=a("li"),Eie=a("strong"),t7o=o("nystromformer"),a7o=o(" \u2014 "),DN=a("a"),n7o=o("NystromformerForMultipleChoice"),s7o=o(" (Nystromformer model)"),l7o=l(),Tb=a("li"),Cie=a("strong"),i7o=o("qdqbert"),d7o=o(" \u2014 "),GN=a("a"),c7o=o("QDQBertForMultipleChoice"),f7o=o(" (QDQBert model)"),m7o=l(),Mb=a("li"),wie=a("strong"),g7o=o("rembert"),h7o=o(" \u2014 "),ON=a("a"),p7o=o("RemBertForMultipleChoice"),_7o=o(" (RemBERT model)"),u7o=l(),Eb=a("li"),Aie=a("strong"),b7o=o("roberta"),F7o=o(" \u2014 "),VN=a("a"),v7o=o("RobertaForMultipleChoice"),T7o=o(" (RoBERTa model)"),M7o=l(),Cb=a("li"),yie=a("strong"),E7o=o("roformer"),C7o=o(" \u2014 "),XN=a("a"),w7o=o("RoFormerForMultipleChoice"),A7o=o(" (RoFormer model)"),y7o=l(),wb=a("li"),Lie=a("strong"),L7o=o("squeezebert"),x7o=o(" \u2014 "),zN=a("a"),k7o=o("SqueezeBertForMultipleChoice"),S7o=o(" (SqueezeBERT model)"),R7o=l(),Ab=a("li"),xie=a("strong"),B7o=o("xlm"),P7o=o(" \u2014 "),QN=a("a"),$7o=o("XLMForMultipleChoice"),I7o=o(" (XLM model)"),q7o=l(),yb=a("li"),kie=a("strong"),N7o=o("xlm-roberta"),j7o=o(" \u2014 "),WN=a("a"),D7o=o("XLMRobertaForMultipleChoice"),G7o=o(" (XLM-RoBERTa model)"),O7o=l(),Lb=a("li"),Sie=a("strong"),V7o=o("xlm-roberta-xl"),X7o=o(" \u2014 "),HN=a("a"),z7o=o("XLMRobertaXLForMultipleChoice"),Q7o=o(" (XLM-RoBERTa-XL model)"),W7o=l(),xb=a("li"),Rie=a("strong"),H7o=o("xlnet"),U7o=o(" \u2014 "),UN=a("a"),J7o=o("XLNetForMultipleChoice"),Y7o=o(" (XLNet model)"),K7o=l(),kb=a("li"),Bie=a("strong"),Z7o=o("yoso"),exo=o(" \u2014 "),JN=a("a"),oxo=o("YosoForMultipleChoice"),rxo=o(" (YOSO model)"),txo=l(),Sb=a("p"),axo=o("The model is set in evaluation mode by default using "),Pie=a("code"),nxo=o("model.eval()"),sxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=a("code"),lxo=o("model.train()"),ixo=l(),Iie=a("p"),dxo=o("Examples:"),cxo=l(),f(Y3.$$.fragment),ORe=l(),ud=a("h2"),Rb=a("a"),qie=a("span"),f(K3.$$.fragment),fxo=l(),Nie=a("span"),mxo=o("AutoModelForNextSentencePrediction"),VRe=l(),tr=a("div"),f(Z3.$$.fragment),gxo=l(),bd=a("p"),hxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YN=a("a"),pxo=o("from_pretrained()"),_xo=o(" class method or the "),KN=a("a"),uxo=o("from_config()"),bxo=o(` class
method.`),Fxo=l(),eC=a("p"),vxo=o("This class cannot be instantiated directly using "),jie=a("code"),Txo=o("__init__()"),Mxo=o(" (throws an error)."),Exo=l(),Yr=a("div"),f(oC.$$.fragment),Cxo=l(),Die=a("p"),wxo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Axo=l(),Fd=a("p"),yxo=o(`Note:
Loading a model from its configuration file does `),Gie=a("strong"),Lxo=o("not"),xxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=a("a"),kxo=o("from_pretrained()"),Sxo=o(" to load the model weights."),Rxo=l(),Oie=a("p"),Bxo=o("Examples:"),Pxo=l(),f(rC.$$.fragment),$xo=l(),Xe=a("div"),f(tC.$$.fragment),Ixo=l(),Vie=a("p"),qxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nxo=l(),Ya=a("p"),jxo=o("The model class to instantiate is selected based on the "),Xie=a("code"),Dxo=o("model_type"),Gxo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),Oxo=o("pretrained_model_name_or_path"),Vxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=a("code"),Xxo=o("pretrained_model_name_or_path"),zxo=o(":"),Qxo=l(),da=a("ul"),Bb=a("li"),Wie=a("strong"),Wxo=o("bert"),Hxo=o(" \u2014 "),ej=a("a"),Uxo=o("BertForNextSentencePrediction"),Jxo=o(" (BERT model)"),Yxo=l(),Pb=a("li"),Hie=a("strong"),Kxo=o("fnet"),Zxo=o(" \u2014 "),oj=a("a"),e9o=o("FNetForNextSentencePrediction"),o9o=o(" (FNet model)"),r9o=l(),$b=a("li"),Uie=a("strong"),t9o=o("megatron-bert"),a9o=o(" \u2014 "),rj=a("a"),n9o=o("MegatronBertForNextSentencePrediction"),s9o=o(" (MegatronBert model)"),l9o=l(),Ib=a("li"),Jie=a("strong"),i9o=o("mobilebert"),d9o=o(" \u2014 "),tj=a("a"),c9o=o("MobileBertForNextSentencePrediction"),f9o=o(" (MobileBERT model)"),m9o=l(),qb=a("li"),Yie=a("strong"),g9o=o("qdqbert"),h9o=o(" \u2014 "),aj=a("a"),p9o=o("QDQBertForNextSentencePrediction"),_9o=o(" (QDQBert model)"),u9o=l(),Nb=a("p"),b9o=o("The model is set in evaluation mode by default using "),Kie=a("code"),F9o=o("model.eval()"),v9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zie=a("code"),T9o=o("model.train()"),M9o=l(),ede=a("p"),E9o=o("Examples:"),C9o=l(),f(aC.$$.fragment),XRe=l(),vd=a("h2"),jb=a("a"),ode=a("span"),f(nC.$$.fragment),w9o=l(),rde=a("span"),A9o=o("AutoModelForTokenClassification"),zRe=l(),ar=a("div"),f(sC.$$.fragment),y9o=l(),Td=a("p"),L9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nj=a("a"),x9o=o("from_pretrained()"),k9o=o(" class method or the "),sj=a("a"),S9o=o("from_config()"),R9o=o(` class
method.`),B9o=l(),lC=a("p"),P9o=o("This class cannot be instantiated directly using "),tde=a("code"),$9o=o("__init__()"),I9o=o(" (throws an error)."),q9o=l(),Kr=a("div"),f(iC.$$.fragment),N9o=l(),ade=a("p"),j9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),D9o=l(),Md=a("p"),G9o=o(`Note:
Loading a model from its configuration file does `),nde=a("strong"),O9o=o("not"),V9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=a("a"),X9o=o("from_pretrained()"),z9o=o(" to load the model weights."),Q9o=l(),sde=a("p"),W9o=o("Examples:"),H9o=l(),f(dC.$$.fragment),U9o=l(),ze=a("div"),f(cC.$$.fragment),J9o=l(),lde=a("p"),Y9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),K9o=l(),Ka=a("p"),Z9o=o("The model class to instantiate is selected based on the "),ide=a("code"),eko=o("model_type"),oko=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),rko=o("pretrained_model_name_or_path"),tko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),ako=o("pretrained_model_name_or_path"),nko=o(":"),sko=l(),j=a("ul"),Db=a("li"),fde=a("strong"),lko=o("albert"),iko=o(" \u2014 "),ij=a("a"),dko=o("AlbertForTokenClassification"),cko=o(" (ALBERT model)"),fko=l(),Gb=a("li"),mde=a("strong"),mko=o("bert"),gko=o(" \u2014 "),dj=a("a"),hko=o("BertForTokenClassification"),pko=o(" (BERT model)"),_ko=l(),Ob=a("li"),gde=a("strong"),uko=o("big_bird"),bko=o(" \u2014 "),cj=a("a"),Fko=o("BigBirdForTokenClassification"),vko=o(" (BigBird model)"),Tko=l(),Vb=a("li"),hde=a("strong"),Mko=o("camembert"),Eko=o(" \u2014 "),fj=a("a"),Cko=o("CamembertForTokenClassification"),wko=o(" (CamemBERT model)"),Ako=l(),Xb=a("li"),pde=a("strong"),yko=o("canine"),Lko=o(" \u2014 "),mj=a("a"),xko=o("CanineForTokenClassification"),kko=o(" (Canine model)"),Sko=l(),zb=a("li"),_de=a("strong"),Rko=o("convbert"),Bko=o(" \u2014 "),gj=a("a"),Pko=o("ConvBertForTokenClassification"),$ko=o(" (ConvBERT model)"),Iko=l(),Qb=a("li"),ude=a("strong"),qko=o("data2vec-text"),Nko=o(" \u2014 "),hj=a("a"),jko=o("Data2VecTextForTokenClassification"),Dko=o(" (Data2VecText model)"),Gko=l(),Wb=a("li"),bde=a("strong"),Oko=o("deberta"),Vko=o(" \u2014 "),pj=a("a"),Xko=o("DebertaForTokenClassification"),zko=o(" (DeBERTa model)"),Qko=l(),Hb=a("li"),Fde=a("strong"),Wko=o("deberta-v2"),Hko=o(" \u2014 "),_j=a("a"),Uko=o("DebertaV2ForTokenClassification"),Jko=o(" (DeBERTa-v2 model)"),Yko=l(),Ub=a("li"),vde=a("strong"),Kko=o("distilbert"),Zko=o(" \u2014 "),uj=a("a"),eSo=o("DistilBertForTokenClassification"),oSo=o(" (DistilBERT model)"),rSo=l(),Jb=a("li"),Tde=a("strong"),tSo=o("electra"),aSo=o(" \u2014 "),bj=a("a"),nSo=o("ElectraForTokenClassification"),sSo=o(" (ELECTRA model)"),lSo=l(),Yb=a("li"),Mde=a("strong"),iSo=o("flaubert"),dSo=o(" \u2014 "),Fj=a("a"),cSo=o("FlaubertForTokenClassification"),fSo=o(" (FlauBERT model)"),mSo=l(),Kb=a("li"),Ede=a("strong"),gSo=o("fnet"),hSo=o(" \u2014 "),vj=a("a"),pSo=o("FNetForTokenClassification"),_So=o(" (FNet model)"),uSo=l(),Zb=a("li"),Cde=a("strong"),bSo=o("funnel"),FSo=o(" \u2014 "),Tj=a("a"),vSo=o("FunnelForTokenClassification"),TSo=o(" (Funnel Transformer model)"),MSo=l(),e2=a("li"),wde=a("strong"),ESo=o("gpt2"),CSo=o(" \u2014 "),Mj=a("a"),wSo=o("GPT2ForTokenClassification"),ASo=o(" (OpenAI GPT-2 model)"),ySo=l(),o2=a("li"),Ade=a("strong"),LSo=o("ibert"),xSo=o(" \u2014 "),Ej=a("a"),kSo=o("IBertForTokenClassification"),SSo=o(" (I-BERT model)"),RSo=l(),r2=a("li"),yde=a("strong"),BSo=o("layoutlm"),PSo=o(" \u2014 "),Cj=a("a"),$So=o("LayoutLMForTokenClassification"),ISo=o(" (LayoutLM model)"),qSo=l(),t2=a("li"),Lde=a("strong"),NSo=o("layoutlmv2"),jSo=o(" \u2014 "),wj=a("a"),DSo=o("LayoutLMv2ForTokenClassification"),GSo=o(" (LayoutLMv2 model)"),OSo=l(),a2=a("li"),xde=a("strong"),VSo=o("longformer"),XSo=o(" \u2014 "),Aj=a("a"),zSo=o("LongformerForTokenClassification"),QSo=o(" (Longformer model)"),WSo=l(),n2=a("li"),kde=a("strong"),HSo=o("megatron-bert"),USo=o(" \u2014 "),yj=a("a"),JSo=o("MegatronBertForTokenClassification"),YSo=o(" (MegatronBert model)"),KSo=l(),s2=a("li"),Sde=a("strong"),ZSo=o("mobilebert"),eRo=o(" \u2014 "),Lj=a("a"),oRo=o("MobileBertForTokenClassification"),rRo=o(" (MobileBERT model)"),tRo=l(),l2=a("li"),Rde=a("strong"),aRo=o("mpnet"),nRo=o(" \u2014 "),xj=a("a"),sRo=o("MPNetForTokenClassification"),lRo=o(" (MPNet model)"),iRo=l(),i2=a("li"),Bde=a("strong"),dRo=o("nystromformer"),cRo=o(" \u2014 "),kj=a("a"),fRo=o("NystromformerForTokenClassification"),mRo=o(" (Nystromformer model)"),gRo=l(),d2=a("li"),Pde=a("strong"),hRo=o("qdqbert"),pRo=o(" \u2014 "),Sj=a("a"),_Ro=o("QDQBertForTokenClassification"),uRo=o(" (QDQBert model)"),bRo=l(),c2=a("li"),$de=a("strong"),FRo=o("rembert"),vRo=o(" \u2014 "),Rj=a("a"),TRo=o("RemBertForTokenClassification"),MRo=o(" (RemBERT model)"),ERo=l(),f2=a("li"),Ide=a("strong"),CRo=o("roberta"),wRo=o(" \u2014 "),Bj=a("a"),ARo=o("RobertaForTokenClassification"),yRo=o(" (RoBERTa model)"),LRo=l(),m2=a("li"),qde=a("strong"),xRo=o("roformer"),kRo=o(" \u2014 "),Pj=a("a"),SRo=o("RoFormerForTokenClassification"),RRo=o(" (RoFormer model)"),BRo=l(),g2=a("li"),Nde=a("strong"),PRo=o("squeezebert"),$Ro=o(" \u2014 "),$j=a("a"),IRo=o("SqueezeBertForTokenClassification"),qRo=o(" (SqueezeBERT model)"),NRo=l(),h2=a("li"),jde=a("strong"),jRo=o("xlm"),DRo=o(" \u2014 "),Ij=a("a"),GRo=o("XLMForTokenClassification"),ORo=o(" (XLM model)"),VRo=l(),p2=a("li"),Dde=a("strong"),XRo=o("xlm-roberta"),zRo=o(" \u2014 "),qj=a("a"),QRo=o("XLMRobertaForTokenClassification"),WRo=o(" (XLM-RoBERTa model)"),HRo=l(),_2=a("li"),Gde=a("strong"),URo=o("xlm-roberta-xl"),JRo=o(" \u2014 "),Nj=a("a"),YRo=o("XLMRobertaXLForTokenClassification"),KRo=o(" (XLM-RoBERTa-XL model)"),ZRo=l(),u2=a("li"),Ode=a("strong"),eBo=o("xlnet"),oBo=o(" \u2014 "),jj=a("a"),rBo=o("XLNetForTokenClassification"),tBo=o(" (XLNet model)"),aBo=l(),b2=a("li"),Vde=a("strong"),nBo=o("yoso"),sBo=o(" \u2014 "),Dj=a("a"),lBo=o("YosoForTokenClassification"),iBo=o(" (YOSO model)"),dBo=l(),F2=a("p"),cBo=o("The model is set in evaluation mode by default using "),Xde=a("code"),fBo=o("model.eval()"),mBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=a("code"),gBo=o("model.train()"),hBo=l(),Qde=a("p"),pBo=o("Examples:"),_Bo=l(),f(fC.$$.fragment),QRe=l(),Ed=a("h2"),v2=a("a"),Wde=a("span"),f(mC.$$.fragment),uBo=l(),Hde=a("span"),bBo=o("AutoModelForQuestionAnswering"),WRe=l(),nr=a("div"),f(gC.$$.fragment),FBo=l(),Cd=a("p"),vBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gj=a("a"),TBo=o("from_pretrained()"),MBo=o(" class method or the "),Oj=a("a"),EBo=o("from_config()"),CBo=o(` class
method.`),wBo=l(),hC=a("p"),ABo=o("This class cannot be instantiated directly using "),Ude=a("code"),yBo=o("__init__()"),LBo=o(" (throws an error)."),xBo=l(),Zr=a("div"),f(pC.$$.fragment),kBo=l(),Jde=a("p"),SBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RBo=l(),wd=a("p"),BBo=o(`Note:
Loading a model from its configuration file does `),Yde=a("strong"),PBo=o("not"),$Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),IBo=o("from_pretrained()"),qBo=o(" to load the model weights."),NBo=l(),Kde=a("p"),jBo=o("Examples:"),DBo=l(),f(_C.$$.fragment),GBo=l(),Qe=a("div"),f(uC.$$.fragment),OBo=l(),Zde=a("p"),VBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XBo=l(),Za=a("p"),zBo=o("The model class to instantiate is selected based on the "),ece=a("code"),QBo=o("model_type"),WBo=o(` property of the config object (either
passed as an argument or loaded from `),oce=a("code"),HBo=o("pretrained_model_name_or_path"),UBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(":"),KBo=l(),R=a("ul"),T2=a("li"),tce=a("strong"),ZBo=o("albert"),ePo=o(" \u2014 "),Xj=a("a"),oPo=o("AlbertForQuestionAnswering"),rPo=o(" (ALBERT model)"),tPo=l(),M2=a("li"),ace=a("strong"),aPo=o("bart"),nPo=o(" \u2014 "),zj=a("a"),sPo=o("BartForQuestionAnswering"),lPo=o(" (BART model)"),iPo=l(),E2=a("li"),nce=a("strong"),dPo=o("bert"),cPo=o(" \u2014 "),Qj=a("a"),fPo=o("BertForQuestionAnswering"),mPo=o(" (BERT model)"),gPo=l(),C2=a("li"),sce=a("strong"),hPo=o("big_bird"),pPo=o(" \u2014 "),Wj=a("a"),_Po=o("BigBirdForQuestionAnswering"),uPo=o(" (BigBird model)"),bPo=l(),w2=a("li"),lce=a("strong"),FPo=o("bigbird_pegasus"),vPo=o(" \u2014 "),Hj=a("a"),TPo=o("BigBirdPegasusForQuestionAnswering"),MPo=o(" (BigBirdPegasus model)"),EPo=l(),A2=a("li"),ice=a("strong"),CPo=o("camembert"),wPo=o(" \u2014 "),Uj=a("a"),APo=o("CamembertForQuestionAnswering"),yPo=o(" (CamemBERT model)"),LPo=l(),y2=a("li"),dce=a("strong"),xPo=o("canine"),kPo=o(" \u2014 "),Jj=a("a"),SPo=o("CanineForQuestionAnswering"),RPo=o(" (Canine model)"),BPo=l(),L2=a("li"),cce=a("strong"),PPo=o("convbert"),$Po=o(" \u2014 "),Yj=a("a"),IPo=o("ConvBertForQuestionAnswering"),qPo=o(" (ConvBERT model)"),NPo=l(),x2=a("li"),fce=a("strong"),jPo=o("data2vec-text"),DPo=o(" \u2014 "),Kj=a("a"),GPo=o("Data2VecTextForQuestionAnswering"),OPo=o(" (Data2VecText model)"),VPo=l(),k2=a("li"),mce=a("strong"),XPo=o("deberta"),zPo=o(" \u2014 "),Zj=a("a"),QPo=o("DebertaForQuestionAnswering"),WPo=o(" (DeBERTa model)"),HPo=l(),S2=a("li"),gce=a("strong"),UPo=o("deberta-v2"),JPo=o(" \u2014 "),eD=a("a"),YPo=o("DebertaV2ForQuestionAnswering"),KPo=o(" (DeBERTa-v2 model)"),ZPo=l(),R2=a("li"),hce=a("strong"),e$o=o("distilbert"),o$o=o(" \u2014 "),oD=a("a"),r$o=o("DistilBertForQuestionAnswering"),t$o=o(" (DistilBERT model)"),a$o=l(),B2=a("li"),pce=a("strong"),n$o=o("electra"),s$o=o(" \u2014 "),rD=a("a"),l$o=o("ElectraForQuestionAnswering"),i$o=o(" (ELECTRA model)"),d$o=l(),P2=a("li"),_ce=a("strong"),c$o=o("flaubert"),f$o=o(" \u2014 "),tD=a("a"),m$o=o("FlaubertForQuestionAnsweringSimple"),g$o=o(" (FlauBERT model)"),h$o=l(),$2=a("li"),uce=a("strong"),p$o=o("fnet"),_$o=o(" \u2014 "),aD=a("a"),u$o=o("FNetForQuestionAnswering"),b$o=o(" (FNet model)"),F$o=l(),I2=a("li"),bce=a("strong"),v$o=o("funnel"),T$o=o(" \u2014 "),nD=a("a"),M$o=o("FunnelForQuestionAnswering"),E$o=o(" (Funnel Transformer model)"),C$o=l(),q2=a("li"),Fce=a("strong"),w$o=o("gptj"),A$o=o(" \u2014 "),sD=a("a"),y$o=o("GPTJForQuestionAnswering"),L$o=o(" (GPT-J model)"),x$o=l(),N2=a("li"),vce=a("strong"),k$o=o("ibert"),S$o=o(" \u2014 "),lD=a("a"),R$o=o("IBertForQuestionAnswering"),B$o=o(" (I-BERT model)"),P$o=l(),j2=a("li"),Tce=a("strong"),$$o=o("layoutlmv2"),I$o=o(" \u2014 "),iD=a("a"),q$o=o("LayoutLMv2ForQuestionAnswering"),N$o=o(" (LayoutLMv2 model)"),j$o=l(),D2=a("li"),Mce=a("strong"),D$o=o("led"),G$o=o(" \u2014 "),dD=a("a"),O$o=o("LEDForQuestionAnswering"),V$o=o(" (LED model)"),X$o=l(),G2=a("li"),Ece=a("strong"),z$o=o("longformer"),Q$o=o(" \u2014 "),cD=a("a"),W$o=o("LongformerForQuestionAnswering"),H$o=o(" (Longformer model)"),U$o=l(),O2=a("li"),Cce=a("strong"),J$o=o("lxmert"),Y$o=o(" \u2014 "),fD=a("a"),K$o=o("LxmertForQuestionAnswering"),Z$o=o(" (LXMERT model)"),eIo=l(),V2=a("li"),wce=a("strong"),oIo=o("mbart"),rIo=o(" \u2014 "),mD=a("a"),tIo=o("MBartForQuestionAnswering"),aIo=o(" (mBART model)"),nIo=l(),X2=a("li"),Ace=a("strong"),sIo=o("megatron-bert"),lIo=o(" \u2014 "),gD=a("a"),iIo=o("MegatronBertForQuestionAnswering"),dIo=o(" (MegatronBert model)"),cIo=l(),z2=a("li"),yce=a("strong"),fIo=o("mobilebert"),mIo=o(" \u2014 "),hD=a("a"),gIo=o("MobileBertForQuestionAnswering"),hIo=o(" (MobileBERT model)"),pIo=l(),Q2=a("li"),Lce=a("strong"),_Io=o("mpnet"),uIo=o(" \u2014 "),pD=a("a"),bIo=o("MPNetForQuestionAnswering"),FIo=o(" (MPNet model)"),vIo=l(),W2=a("li"),xce=a("strong"),TIo=o("nystromformer"),MIo=o(" \u2014 "),_D=a("a"),EIo=o("NystromformerForQuestionAnswering"),CIo=o(" (Nystromformer model)"),wIo=l(),H2=a("li"),kce=a("strong"),AIo=o("qdqbert"),yIo=o(" \u2014 "),uD=a("a"),LIo=o("QDQBertForQuestionAnswering"),xIo=o(" (QDQBert model)"),kIo=l(),U2=a("li"),Sce=a("strong"),SIo=o("reformer"),RIo=o(" \u2014 "),bD=a("a"),BIo=o("ReformerForQuestionAnswering"),PIo=o(" (Reformer model)"),$Io=l(),J2=a("li"),Rce=a("strong"),IIo=o("rembert"),qIo=o(" \u2014 "),FD=a("a"),NIo=o("RemBertForQuestionAnswering"),jIo=o(" (RemBERT model)"),DIo=l(),Y2=a("li"),Bce=a("strong"),GIo=o("roberta"),OIo=o(" \u2014 "),vD=a("a"),VIo=o("RobertaForQuestionAnswering"),XIo=o(" (RoBERTa model)"),zIo=l(),K2=a("li"),Pce=a("strong"),QIo=o("roformer"),WIo=o(" \u2014 "),TD=a("a"),HIo=o("RoFormerForQuestionAnswering"),UIo=o(" (RoFormer model)"),JIo=l(),Z2=a("li"),$ce=a("strong"),YIo=o("splinter"),KIo=o(" \u2014 "),MD=a("a"),ZIo=o("SplinterForQuestionAnswering"),eqo=o(" (Splinter model)"),oqo=l(),e6=a("li"),Ice=a("strong"),rqo=o("squeezebert"),tqo=o(" \u2014 "),ED=a("a"),aqo=o("SqueezeBertForQuestionAnswering"),nqo=o(" (SqueezeBERT model)"),sqo=l(),o6=a("li"),qce=a("strong"),lqo=o("xlm"),iqo=o(" \u2014 "),CD=a("a"),dqo=o("XLMForQuestionAnsweringSimple"),cqo=o(" (XLM model)"),fqo=l(),r6=a("li"),Nce=a("strong"),mqo=o("xlm-roberta"),gqo=o(" \u2014 "),wD=a("a"),hqo=o("XLMRobertaForQuestionAnswering"),pqo=o(" (XLM-RoBERTa model)"),_qo=l(),t6=a("li"),jce=a("strong"),uqo=o("xlm-roberta-xl"),bqo=o(" \u2014 "),AD=a("a"),Fqo=o("XLMRobertaXLForQuestionAnswering"),vqo=o(" (XLM-RoBERTa-XL model)"),Tqo=l(),a6=a("li"),Dce=a("strong"),Mqo=o("xlnet"),Eqo=o(" \u2014 "),yD=a("a"),Cqo=o("XLNetForQuestionAnsweringSimple"),wqo=o(" (XLNet model)"),Aqo=l(),n6=a("li"),Gce=a("strong"),yqo=o("yoso"),Lqo=o(" \u2014 "),LD=a("a"),xqo=o("YosoForQuestionAnswering"),kqo=o(" (YOSO model)"),Sqo=l(),s6=a("p"),Rqo=o("The model is set in evaluation mode by default using "),Oce=a("code"),Bqo=o("model.eval()"),Pqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=a("code"),$qo=o("model.train()"),Iqo=l(),Xce=a("p"),qqo=o("Examples:"),Nqo=l(),f(bC.$$.fragment),HRe=l(),Ad=a("h2"),l6=a("a"),zce=a("span"),f(FC.$$.fragment),jqo=l(),Qce=a("span"),Dqo=o("AutoModelForTableQuestionAnswering"),URe=l(),sr=a("div"),f(vC.$$.fragment),Gqo=l(),yd=a("p"),Oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xD=a("a"),Vqo=o("from_pretrained()"),Xqo=o(" class method or the "),kD=a("a"),zqo=o("from_config()"),Qqo=o(` class
method.`),Wqo=l(),TC=a("p"),Hqo=o("This class cannot be instantiated directly using "),Wce=a("code"),Uqo=o("__init__()"),Jqo=o(" (throws an error)."),Yqo=l(),et=a("div"),f(MC.$$.fragment),Kqo=l(),Hce=a("p"),Zqo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),eNo=l(),Ld=a("p"),oNo=o(`Note:
Loading a model from its configuration file does `),Uce=a("strong"),rNo=o("not"),tNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=a("a"),aNo=o("from_pretrained()"),nNo=o(" to load the model weights."),sNo=l(),Jce=a("p"),lNo=o("Examples:"),iNo=l(),f(EC.$$.fragment),dNo=l(),We=a("div"),f(CC.$$.fragment),cNo=l(),Yce=a("p"),fNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mNo=l(),en=a("p"),gNo=o("The model class to instantiate is selected based on the "),Kce=a("code"),hNo=o("model_type"),pNo=o(` property of the config object (either
passed as an argument or loaded from `),Zce=a("code"),_No=o("pretrained_model_name_or_path"),uNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=a("code"),bNo=o("pretrained_model_name_or_path"),FNo=o(":"),vNo=l(),ofe=a("ul"),i6=a("li"),rfe=a("strong"),TNo=o("tapas"),MNo=o(" \u2014 "),RD=a("a"),ENo=o("TapasForQuestionAnswering"),CNo=o(" (TAPAS model)"),wNo=l(),d6=a("p"),ANo=o("The model is set in evaluation mode by default using "),tfe=a("code"),yNo=o("model.eval()"),LNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),xNo=o("model.train()"),kNo=l(),nfe=a("p"),SNo=o("Examples:"),RNo=l(),f(wC.$$.fragment),JRe=l(),xd=a("h2"),c6=a("a"),sfe=a("span"),f(AC.$$.fragment),BNo=l(),lfe=a("span"),PNo=o("AutoModelForImageClassification"),YRe=l(),lr=a("div"),f(yC.$$.fragment),$No=l(),kd=a("p"),INo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BD=a("a"),qNo=o("from_pretrained()"),NNo=o(" class method or the "),PD=a("a"),jNo=o("from_config()"),DNo=o(` class
method.`),GNo=l(),LC=a("p"),ONo=o("This class cannot be instantiated directly using "),ife=a("code"),VNo=o("__init__()"),XNo=o(" (throws an error)."),zNo=l(),ot=a("div"),f(xC.$$.fragment),QNo=l(),dfe=a("p"),WNo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HNo=l(),Sd=a("p"),UNo=o(`Note:
Loading a model from its configuration file does `),cfe=a("strong"),JNo=o("not"),YNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=a("a"),KNo=o("from_pretrained()"),ZNo=o(" to load the model weights."),ejo=l(),ffe=a("p"),ojo=o("Examples:"),rjo=l(),f(kC.$$.fragment),tjo=l(),He=a("div"),f(SC.$$.fragment),ajo=l(),mfe=a("p"),njo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sjo=l(),on=a("p"),ljo=o("The model class to instantiate is selected based on the "),gfe=a("code"),ijo=o("model_type"),djo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),cjo=o("pretrained_model_name_or_path"),fjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),mjo=o("pretrained_model_name_or_path"),gjo=o(":"),hjo=l(),ce=a("ul"),f6=a("li"),_fe=a("strong"),pjo=o("beit"),_jo=o(" \u2014 "),ID=a("a"),ujo=o("BeitForImageClassification"),bjo=o(" (BEiT model)"),Fjo=l(),m6=a("li"),ufe=a("strong"),vjo=o("convnext"),Tjo=o(" \u2014 "),qD=a("a"),Mjo=o("ConvNextForImageClassification"),Ejo=o(" (ConvNext model)"),Cjo=l(),Ds=a("li"),bfe=a("strong"),wjo=o("deit"),Ajo=o(" \u2014 "),ND=a("a"),yjo=o("DeiTForImageClassification"),Ljo=o(" or "),jD=a("a"),xjo=o("DeiTForImageClassificationWithTeacher"),kjo=o(" (DeiT model)"),Sjo=l(),g6=a("li"),Ffe=a("strong"),Rjo=o("imagegpt"),Bjo=o(" \u2014 "),DD=a("a"),Pjo=o("ImageGPTForImageClassification"),$jo=o(" (ImageGPT model)"),Ijo=l(),ma=a("li"),vfe=a("strong"),qjo=o("perceiver"),Njo=o(" \u2014 "),GD=a("a"),jjo=o("PerceiverForImageClassificationLearned"),Djo=o(" or "),OD=a("a"),Gjo=o("PerceiverForImageClassificationFourier"),Ojo=o(" or "),VD=a("a"),Vjo=o("PerceiverForImageClassificationConvProcessing"),Xjo=o(" (Perceiver model)"),zjo=l(),h6=a("li"),Tfe=a("strong"),Qjo=o("poolformer"),Wjo=o(" \u2014 "),XD=a("a"),Hjo=o("PoolFormerForImageClassification"),Ujo=o(" (PoolFormer model)"),Jjo=l(),p6=a("li"),Mfe=a("strong"),Yjo=o("regnet"),Kjo=o(" \u2014 "),zD=a("a"),Zjo=o("RegNetForImageClassification"),eDo=o(" (RegNet model)"),oDo=l(),_6=a("li"),Efe=a("strong"),rDo=o("resnet"),tDo=o(" \u2014 "),QD=a("a"),aDo=o("ResNetForImageClassification"),nDo=o(" (ResNet model)"),sDo=l(),u6=a("li"),Cfe=a("strong"),lDo=o("segformer"),iDo=o(" \u2014 "),WD=a("a"),dDo=o("SegformerForImageClassification"),cDo=o(" (SegFormer model)"),fDo=l(),b6=a("li"),wfe=a("strong"),mDo=o("swin"),gDo=o(" \u2014 "),HD=a("a"),hDo=o("SwinForImageClassification"),pDo=o(" (Swin model)"),_Do=l(),F6=a("li"),Afe=a("strong"),uDo=o("van"),bDo=o(" \u2014 "),UD=a("a"),FDo=o("VanForImageClassification"),vDo=o(" (VAN model)"),TDo=l(),v6=a("li"),yfe=a("strong"),MDo=o("vit"),EDo=o(" \u2014 "),JD=a("a"),CDo=o("ViTForImageClassification"),wDo=o(" (ViT model)"),ADo=l(),T6=a("p"),yDo=o("The model is set in evaluation mode by default using "),Lfe=a("code"),LDo=o("model.eval()"),xDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),kDo=o("model.train()"),SDo=l(),kfe=a("p"),RDo=o("Examples:"),BDo=l(),f(RC.$$.fragment),KRe=l(),Rd=a("h2"),M6=a("a"),Sfe=a("span"),f(BC.$$.fragment),PDo=l(),Rfe=a("span"),$Do=o("AutoModelForVision2Seq"),ZRe=l(),ir=a("div"),f(PC.$$.fragment),IDo=l(),Bd=a("p"),qDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YD=a("a"),NDo=o("from_pretrained()"),jDo=o(" class method or the "),KD=a("a"),DDo=o("from_config()"),GDo=o(` class
method.`),ODo=l(),$C=a("p"),VDo=o("This class cannot be instantiated directly using "),Bfe=a("code"),XDo=o("__init__()"),zDo=o(" (throws an error)."),QDo=l(),rt=a("div"),f(IC.$$.fragment),WDo=l(),Pfe=a("p"),HDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UDo=l(),Pd=a("p"),JDo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),YDo=o("not"),KDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),ZDo=o("from_pretrained()"),eGo=o(" to load the model weights."),oGo=l(),Ife=a("p"),rGo=o("Examples:"),tGo=l(),f(qC.$$.fragment),aGo=l(),Ue=a("div"),f(NC.$$.fragment),nGo=l(),qfe=a("p"),sGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lGo=l(),rn=a("p"),iGo=o("The model class to instantiate is selected based on the "),Nfe=a("code"),dGo=o("model_type"),cGo=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),fGo=o("pretrained_model_name_or_path"),mGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),gGo=o("pretrained_model_name_or_path"),hGo=o(":"),pGo=l(),Gfe=a("ul"),E6=a("li"),Ofe=a("strong"),_Go=o("vision-encoder-decoder"),uGo=o(" \u2014 "),eG=a("a"),bGo=o("VisionEncoderDecoderModel"),FGo=o(" (Vision Encoder decoder model)"),vGo=l(),C6=a("p"),TGo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),MGo=o("model.eval()"),EGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),CGo=o("model.train()"),wGo=l(),zfe=a("p"),AGo=o("Examples:"),yGo=l(),f(jC.$$.fragment),eBe=l(),$d=a("h2"),w6=a("a"),Qfe=a("span"),f(DC.$$.fragment),LGo=l(),Wfe=a("span"),xGo=o("AutoModelForAudioClassification"),oBe=l(),dr=a("div"),f(GC.$$.fragment),kGo=l(),Id=a("p"),SGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oG=a("a"),RGo=o("from_pretrained()"),BGo=o(" class method or the "),rG=a("a"),PGo=o("from_config()"),$Go=o(` class
method.`),IGo=l(),OC=a("p"),qGo=o("This class cannot be instantiated directly using "),Hfe=a("code"),NGo=o("__init__()"),jGo=o(" (throws an error)."),DGo=l(),tt=a("div"),f(VC.$$.fragment),GGo=l(),Ufe=a("p"),OGo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VGo=l(),qd=a("p"),XGo=o(`Note:
Loading a model from its configuration file does `),Jfe=a("strong"),zGo=o("not"),QGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),WGo=o("from_pretrained()"),HGo=o(" to load the model weights."),UGo=l(),Yfe=a("p"),JGo=o("Examples:"),YGo=l(),f(XC.$$.fragment),KGo=l(),Je=a("div"),f(zC.$$.fragment),ZGo=l(),Kfe=a("p"),eOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),oOo=l(),tn=a("p"),rOo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),tOo=o("model_type"),aOo=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),nOo=o("pretrained_model_name_or_path"),sOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),lOo=o("pretrained_model_name_or_path"),iOo=o(":"),dOo=l(),Se=a("ul"),A6=a("li"),rme=a("strong"),cOo=o("data2vec-audio"),fOo=o(" \u2014 "),aG=a("a"),mOo=o("Data2VecAudioForSequenceClassification"),gOo=o(" (Data2VecAudio model)"),hOo=l(),y6=a("li"),tme=a("strong"),pOo=o("hubert"),_Oo=o(" \u2014 "),nG=a("a"),uOo=o("HubertForSequenceClassification"),bOo=o(" (Hubert model)"),FOo=l(),L6=a("li"),ame=a("strong"),vOo=o("sew"),TOo=o(" \u2014 "),sG=a("a"),MOo=o("SEWForSequenceClassification"),EOo=o(" (SEW model)"),COo=l(),x6=a("li"),nme=a("strong"),wOo=o("sew-d"),AOo=o(" \u2014 "),lG=a("a"),yOo=o("SEWDForSequenceClassification"),LOo=o(" (SEW-D model)"),xOo=l(),k6=a("li"),sme=a("strong"),kOo=o("unispeech"),SOo=o(" \u2014 "),iG=a("a"),ROo=o("UniSpeechForSequenceClassification"),BOo=o(" (UniSpeech model)"),POo=l(),S6=a("li"),lme=a("strong"),$Oo=o("unispeech-sat"),IOo=o(" \u2014 "),dG=a("a"),qOo=o("UniSpeechSatForSequenceClassification"),NOo=o(" (UniSpeechSat model)"),jOo=l(),R6=a("li"),ime=a("strong"),DOo=o("wav2vec2"),GOo=o(" \u2014 "),cG=a("a"),OOo=o("Wav2Vec2ForSequenceClassification"),VOo=o(" (Wav2Vec2 model)"),XOo=l(),B6=a("li"),dme=a("strong"),zOo=o("wavlm"),QOo=o(" \u2014 "),fG=a("a"),WOo=o("WavLMForSequenceClassification"),HOo=o(" (WavLM model)"),UOo=l(),P6=a("p"),JOo=o("The model is set in evaluation mode by default using "),cme=a("code"),YOo=o("model.eval()"),KOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),ZOo=o("model.train()"),eVo=l(),mme=a("p"),oVo=o("Examples:"),rVo=l(),f(QC.$$.fragment),rBe=l(),Nd=a("h2"),$6=a("a"),gme=a("span"),f(WC.$$.fragment),tVo=l(),hme=a("span"),aVo=o("AutoModelForAudioFrameClassification"),tBe=l(),cr=a("div"),f(HC.$$.fragment),nVo=l(),jd=a("p"),sVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mG=a("a"),lVo=o("from_pretrained()"),iVo=o(" class method or the "),gG=a("a"),dVo=o("from_config()"),cVo=o(` class
method.`),fVo=l(),UC=a("p"),mVo=o("This class cannot be instantiated directly using "),pme=a("code"),gVo=o("__init__()"),hVo=o(" (throws an error)."),pVo=l(),at=a("div"),f(JC.$$.fragment),_Vo=l(),_me=a("p"),uVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bVo=l(),Dd=a("p"),FVo=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),vVo=o("not"),TVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=a("a"),MVo=o("from_pretrained()"),EVo=o(" to load the model weights."),CVo=l(),bme=a("p"),wVo=o("Examples:"),AVo=l(),f(YC.$$.fragment),yVo=l(),Ye=a("div"),f(KC.$$.fragment),LVo=l(),Fme=a("p"),xVo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kVo=l(),an=a("p"),SVo=o("The model class to instantiate is selected based on the "),vme=a("code"),RVo=o("model_type"),BVo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),PVo=o("pretrained_model_name_or_path"),$Vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),IVo=o("pretrained_model_name_or_path"),qVo=o(":"),NVo=l(),nn=a("ul"),I6=a("li"),Eme=a("strong"),jVo=o("data2vec-audio"),DVo=o(" \u2014 "),pG=a("a"),GVo=o("Data2VecAudioForAudioFrameClassification"),OVo=o(" (Data2VecAudio model)"),VVo=l(),q6=a("li"),Cme=a("strong"),XVo=o("unispeech-sat"),zVo=o(" \u2014 "),_G=a("a"),QVo=o("UniSpeechSatForAudioFrameClassification"),WVo=o(" (UniSpeechSat model)"),HVo=l(),N6=a("li"),wme=a("strong"),UVo=o("wav2vec2"),JVo=o(" \u2014 "),uG=a("a"),YVo=o("Wav2Vec2ForAudioFrameClassification"),KVo=o(" (Wav2Vec2 model)"),ZVo=l(),j6=a("li"),Ame=a("strong"),eXo=o("wavlm"),oXo=o(" \u2014 "),bG=a("a"),rXo=o("WavLMForAudioFrameClassification"),tXo=o(" (WavLM model)"),aXo=l(),D6=a("p"),nXo=o("The model is set in evaluation mode by default using "),yme=a("code"),sXo=o("model.eval()"),lXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),iXo=o("model.train()"),dXo=l(),xme=a("p"),cXo=o("Examples:"),fXo=l(),f(ZC.$$.fragment),aBe=l(),Gd=a("h2"),G6=a("a"),kme=a("span"),f(ew.$$.fragment),mXo=l(),Sme=a("span"),gXo=o("AutoModelForCTC"),nBe=l(),fr=a("div"),f(ow.$$.fragment),hXo=l(),Od=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FG=a("a"),_Xo=o("from_pretrained()"),uXo=o(" class method or the "),vG=a("a"),bXo=o("from_config()"),FXo=o(` class
method.`),vXo=l(),rw=a("p"),TXo=o("This class cannot be instantiated directly using "),Rme=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),CXo=l(),nt=a("div"),f(tw.$$.fragment),wXo=l(),Bme=a("p"),AXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yXo=l(),Vd=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),Pme=a("strong"),xXo=o("not"),kXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),SXo=o("from_pretrained()"),RXo=o(" to load the model weights."),BXo=l(),$me=a("p"),PXo=o("Examples:"),$Xo=l(),f(aw.$$.fragment),IXo=l(),Ke=a("div"),f(nw.$$.fragment),qXo=l(),Ime=a("p"),NXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jXo=l(),sn=a("p"),DXo=o("The model class to instantiate is selected based on the "),qme=a("code"),GXo=o("model_type"),OXo=o(` property of the config object (either
passed as an argument or loaded from `),Nme=a("code"),VXo=o("pretrained_model_name_or_path"),XXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=a("code"),zXo=o("pretrained_model_name_or_path"),QXo=o(":"),WXo=l(),Re=a("ul"),O6=a("li"),Dme=a("strong"),HXo=o("data2vec-audio"),UXo=o(" \u2014 "),MG=a("a"),JXo=o("Data2VecAudioForCTC"),YXo=o(" (Data2VecAudio model)"),KXo=l(),V6=a("li"),Gme=a("strong"),ZXo=o("hubert"),ezo=o(" \u2014 "),EG=a("a"),ozo=o("HubertForCTC"),rzo=o(" (Hubert model)"),tzo=l(),X6=a("li"),Ome=a("strong"),azo=o("sew"),nzo=o(" \u2014 "),CG=a("a"),szo=o("SEWForCTC"),lzo=o(" (SEW model)"),izo=l(),z6=a("li"),Vme=a("strong"),dzo=o("sew-d"),czo=o(" \u2014 "),wG=a("a"),fzo=o("SEWDForCTC"),mzo=o(" (SEW-D model)"),gzo=l(),Q6=a("li"),Xme=a("strong"),hzo=o("unispeech"),pzo=o(" \u2014 "),AG=a("a"),_zo=o("UniSpeechForCTC"),uzo=o(" (UniSpeech model)"),bzo=l(),W6=a("li"),zme=a("strong"),Fzo=o("unispeech-sat"),vzo=o(" \u2014 "),yG=a("a"),Tzo=o("UniSpeechSatForCTC"),Mzo=o(" (UniSpeechSat model)"),Ezo=l(),H6=a("li"),Qme=a("strong"),Czo=o("wav2vec2"),wzo=o(" \u2014 "),LG=a("a"),Azo=o("Wav2Vec2ForCTC"),yzo=o(" (Wav2Vec2 model)"),Lzo=l(),U6=a("li"),Wme=a("strong"),xzo=o("wavlm"),kzo=o(" \u2014 "),xG=a("a"),Szo=o("WavLMForCTC"),Rzo=o(" (WavLM model)"),Bzo=l(),J6=a("p"),Pzo=o("The model is set in evaluation mode by default using "),Hme=a("code"),$zo=o("model.eval()"),Izo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),qzo=o("model.train()"),Nzo=l(),Jme=a("p"),jzo=o("Examples:"),Dzo=l(),f(sw.$$.fragment),sBe=l(),Xd=a("h2"),Y6=a("a"),Yme=a("span"),f(lw.$$.fragment),Gzo=l(),Kme=a("span"),Ozo=o("AutoModelForSpeechSeq2Seq"),lBe=l(),mr=a("div"),f(iw.$$.fragment),Vzo=l(),zd=a("p"),Xzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kG=a("a"),zzo=o("from_pretrained()"),Qzo=o(" class method or the "),SG=a("a"),Wzo=o("from_config()"),Hzo=o(` class
method.`),Uzo=l(),dw=a("p"),Jzo=o("This class cannot be instantiated directly using "),Zme=a("code"),Yzo=o("__init__()"),Kzo=o(" (throws an error)."),Zzo=l(),st=a("div"),f(cw.$$.fragment),eQo=l(),ege=a("p"),oQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rQo=l(),Qd=a("p"),tQo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),aQo=o("not"),nQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=a("a"),sQo=o("from_pretrained()"),lQo=o(" to load the model weights."),iQo=l(),rge=a("p"),dQo=o("Examples:"),cQo=l(),f(fw.$$.fragment),fQo=l(),Ze=a("div"),f(mw.$$.fragment),mQo=l(),tge=a("p"),gQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hQo=l(),ln=a("p"),pQo=o("The model class to instantiate is selected based on the "),age=a("code"),_Qo=o("model_type"),uQo=o(` property of the config object (either
passed as an argument or loaded from `),nge=a("code"),bQo=o("pretrained_model_name_or_path"),FQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=a("code"),vQo=o("pretrained_model_name_or_path"),TQo=o(":"),MQo=l(),gw=a("ul"),K6=a("li"),lge=a("strong"),EQo=o("speech-encoder-decoder"),CQo=o(" \u2014 "),BG=a("a"),wQo=o("SpeechEncoderDecoderModel"),AQo=o(" (Speech Encoder decoder model)"),yQo=l(),Z6=a("li"),ige=a("strong"),LQo=o("speech_to_text"),xQo=o(" \u2014 "),PG=a("a"),kQo=o("Speech2TextForConditionalGeneration"),SQo=o(" (Speech2Text model)"),RQo=l(),eF=a("p"),BQo=o("The model is set in evaluation mode by default using "),dge=a("code"),PQo=o("model.eval()"),$Qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=a("code"),IQo=o("model.train()"),qQo=l(),fge=a("p"),NQo=o("Examples:"),jQo=l(),f(hw.$$.fragment),iBe=l(),Wd=a("h2"),oF=a("a"),mge=a("span"),f(pw.$$.fragment),DQo=l(),gge=a("span"),GQo=o("AutoModelForAudioXVector"),dBe=l(),gr=a("div"),f(_w.$$.fragment),OQo=l(),Hd=a("p"),VQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$G=a("a"),XQo=o("from_pretrained()"),zQo=o(" class method or the "),IG=a("a"),QQo=o("from_config()"),WQo=o(` class
method.`),HQo=l(),uw=a("p"),UQo=o("This class cannot be instantiated directly using "),hge=a("code"),JQo=o("__init__()"),YQo=o(" (throws an error)."),KQo=l(),lt=a("div"),f(bw.$$.fragment),ZQo=l(),pge=a("p"),eWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oWo=l(),Ud=a("p"),rWo=o(`Note:
Loading a model from its configuration file does `),_ge=a("strong"),tWo=o("not"),aWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),nWo=o("from_pretrained()"),sWo=o(" to load the model weights."),lWo=l(),uge=a("p"),iWo=o("Examples:"),dWo=l(),f(Fw.$$.fragment),cWo=l(),eo=a("div"),f(vw.$$.fragment),fWo=l(),bge=a("p"),mWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gWo=l(),dn=a("p"),hWo=o("The model class to instantiate is selected based on the "),Fge=a("code"),pWo=o("model_type"),_Wo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),uWo=o("pretrained_model_name_or_path"),bWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=a("code"),FWo=o("pretrained_model_name_or_path"),vWo=o(":"),TWo=l(),cn=a("ul"),rF=a("li"),Mge=a("strong"),MWo=o("data2vec-audio"),EWo=o(" \u2014 "),NG=a("a"),CWo=o("Data2VecAudioForXVector"),wWo=o(" (Data2VecAudio model)"),AWo=l(),tF=a("li"),Ege=a("strong"),yWo=o("unispeech-sat"),LWo=o(" \u2014 "),jG=a("a"),xWo=o("UniSpeechSatForXVector"),kWo=o(" (UniSpeechSat model)"),SWo=l(),aF=a("li"),Cge=a("strong"),RWo=o("wav2vec2"),BWo=o(" \u2014 "),DG=a("a"),PWo=o("Wav2Vec2ForXVector"),$Wo=o(" (Wav2Vec2 model)"),IWo=l(),nF=a("li"),wge=a("strong"),qWo=o("wavlm"),NWo=o(" \u2014 "),GG=a("a"),jWo=o("WavLMForXVector"),DWo=o(" (WavLM model)"),GWo=l(),sF=a("p"),OWo=o("The model is set in evaluation mode by default using "),Age=a("code"),VWo=o("model.eval()"),XWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=a("code"),zWo=o("model.train()"),QWo=l(),Lge=a("p"),WWo=o("Examples:"),HWo=l(),f(Tw.$$.fragment),cBe=l(),Jd=a("h2"),lF=a("a"),xge=a("span"),f(Mw.$$.fragment),UWo=l(),kge=a("span"),JWo=o("AutoModelForMaskedImageModeling"),fBe=l(),hr=a("div"),f(Ew.$$.fragment),YWo=l(),Yd=a("p"),KWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OG=a("a"),ZWo=o("from_pretrained()"),eHo=o(" class method or the "),VG=a("a"),oHo=o("from_config()"),rHo=o(` class
method.`),tHo=l(),Cw=a("p"),aHo=o("This class cannot be instantiated directly using "),Sge=a("code"),nHo=o("__init__()"),sHo=o(" (throws an error)."),lHo=l(),it=a("div"),f(ww.$$.fragment),iHo=l(),Rge=a("p"),dHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cHo=l(),Kd=a("p"),fHo=o(`Note:
Loading a model from its configuration file does `),Bge=a("strong"),mHo=o("not"),gHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),hHo=o("from_pretrained()"),pHo=o(" to load the model weights."),_Ho=l(),Pge=a("p"),uHo=o("Examples:"),bHo=l(),f(Aw.$$.fragment),FHo=l(),oo=a("div"),f(yw.$$.fragment),vHo=l(),$ge=a("p"),THo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),MHo=l(),fn=a("p"),EHo=o("The model class to instantiate is selected based on the "),Ige=a("code"),CHo=o("model_type"),wHo=o(` property of the config object (either
passed as an argument or loaded from `),qge=a("code"),AHo=o("pretrained_model_name_or_path"),yHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=a("code"),LHo=o("pretrained_model_name_or_path"),xHo=o(":"),kHo=l(),Zd=a("ul"),iF=a("li"),jge=a("strong"),SHo=o("deit"),RHo=o(" \u2014 "),zG=a("a"),BHo=o("DeiTForMaskedImageModeling"),PHo=o(" (DeiT model)"),$Ho=l(),dF=a("li"),Dge=a("strong"),IHo=o("swin"),qHo=o(" \u2014 "),QG=a("a"),NHo=o("SwinForMaskedImageModeling"),jHo=o(" (Swin model)"),DHo=l(),cF=a("li"),Gge=a("strong"),GHo=o("vit"),OHo=o(" \u2014 "),WG=a("a"),VHo=o("ViTForMaskedImageModeling"),XHo=o(" (ViT model)"),zHo=l(),fF=a("p"),QHo=o("The model is set in evaluation mode by default using "),Oge=a("code"),WHo=o("model.eval()"),HHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),UHo=o("model.train()"),JHo=l(),Xge=a("p"),YHo=o("Examples:"),KHo=l(),f(Lw.$$.fragment),mBe=l(),ec=a("h2"),mF=a("a"),zge=a("span"),f(xw.$$.fragment),ZHo=l(),Qge=a("span"),eUo=o("AutoModelForObjectDetection"),gBe=l(),pr=a("div"),f(kw.$$.fragment),oUo=l(),oc=a("p"),rUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HG=a("a"),tUo=o("from_pretrained()"),aUo=o(" class method or the "),UG=a("a"),nUo=o("from_config()"),sUo=o(` class
method.`),lUo=l(),Sw=a("p"),iUo=o("This class cannot be instantiated directly using "),Wge=a("code"),dUo=o("__init__()"),cUo=o(" (throws an error)."),fUo=l(),dt=a("div"),f(Rw.$$.fragment),mUo=l(),Hge=a("p"),gUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),hUo=l(),rc=a("p"),pUo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),_Uo=o("not"),uUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),bUo=o("from_pretrained()"),FUo=o(" to load the model weights."),vUo=l(),Jge=a("p"),TUo=o("Examples:"),MUo=l(),f(Bw.$$.fragment),EUo=l(),ro=a("div"),f(Pw.$$.fragment),CUo=l(),Yge=a("p"),wUo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),AUo=l(),mn=a("p"),yUo=o("The model class to instantiate is selected based on the "),Kge=a("code"),LUo=o("model_type"),xUo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),kUo=o("pretrained_model_name_or_path"),SUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),RUo=o("pretrained_model_name_or_path"),BUo=o(":"),PUo=l(),ohe=a("ul"),gF=a("li"),rhe=a("strong"),$Uo=o("detr"),IUo=o(" \u2014 "),YG=a("a"),qUo=o("DetrForObjectDetection"),NUo=o(" (DETR model)"),jUo=l(),hF=a("p"),DUo=o("The model is set in evaluation mode by default using "),the=a("code"),GUo=o("model.eval()"),OUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),VUo=o("model.train()"),XUo=l(),nhe=a("p"),zUo=o("Examples:"),QUo=l(),f($w.$$.fragment),hBe=l(),tc=a("h2"),pF=a("a"),she=a("span"),f(Iw.$$.fragment),WUo=l(),lhe=a("span"),HUo=o("AutoModelForImageSegmentation"),pBe=l(),_r=a("div"),f(qw.$$.fragment),UUo=l(),ac=a("p"),JUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),KG=a("a"),YUo=o("from_pretrained()"),KUo=o(" class method or the "),ZG=a("a"),ZUo=o("from_config()"),eJo=o(` class
method.`),oJo=l(),Nw=a("p"),rJo=o("This class cannot be instantiated directly using "),ihe=a("code"),tJo=o("__init__()"),aJo=o(" (throws an error)."),nJo=l(),ct=a("div"),f(jw.$$.fragment),sJo=l(),dhe=a("p"),lJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),iJo=l(),nc=a("p"),dJo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),cJo=o("not"),fJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),mJo=o("from_pretrained()"),gJo=o(" to load the model weights."),hJo=l(),fhe=a("p"),pJo=o("Examples:"),_Jo=l(),f(Dw.$$.fragment),uJo=l(),to=a("div"),f(Gw.$$.fragment),bJo=l(),mhe=a("p"),FJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),vJo=l(),gn=a("p"),TJo=o("The model class to instantiate is selected based on the "),ghe=a("code"),MJo=o("model_type"),EJo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),CJo=o("pretrained_model_name_or_path"),wJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),AJo=o("pretrained_model_name_or_path"),yJo=o(":"),LJo=l(),_he=a("ul"),_F=a("li"),uhe=a("strong"),xJo=o("detr"),kJo=o(" \u2014 "),oO=a("a"),SJo=o("DetrForSegmentation"),RJo=o(" (DETR model)"),BJo=l(),uF=a("p"),PJo=o("The model is set in evaluation mode by default using "),bhe=a("code"),$Jo=o("model.eval()"),IJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=a("code"),qJo=o("model.train()"),NJo=l(),vhe=a("p"),jJo=o("Examples:"),DJo=l(),f(Ow.$$.fragment),_Be=l(),sc=a("h2"),bF=a("a"),The=a("span"),f(Vw.$$.fragment),GJo=l(),Mhe=a("span"),OJo=o("AutoModelForSemanticSegmentation"),uBe=l(),ur=a("div"),f(Xw.$$.fragment),VJo=l(),lc=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rO=a("a"),zJo=o("from_pretrained()"),QJo=o(" class method or the "),tO=a("a"),WJo=o("from_config()"),HJo=o(` class
method.`),UJo=l(),zw=a("p"),JJo=o("This class cannot be instantiated directly using "),Ehe=a("code"),YJo=o("__init__()"),KJo=o(" (throws an error)."),ZJo=l(),ft=a("div"),f(Qw.$$.fragment),eYo=l(),Che=a("p"),oYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),rYo=l(),ic=a("p"),tYo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),aYo=o("not"),nYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),sYo=o("from_pretrained()"),lYo=o(" to load the model weights."),iYo=l(),Ahe=a("p"),dYo=o("Examples:"),cYo=l(),f(Ww.$$.fragment),fYo=l(),ao=a("div"),f(Hw.$$.fragment),mYo=l(),yhe=a("p"),gYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hYo=l(),hn=a("p"),pYo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),_Yo=o("model_type"),uYo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),bYo=o("pretrained_model_name_or_path"),FYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),vYo=o("pretrained_model_name_or_path"),TYo=o(":"),MYo=l(),dc=a("ul"),FF=a("li"),She=a("strong"),EYo=o("beit"),CYo=o(" \u2014 "),nO=a("a"),wYo=o("BeitForSemanticSegmentation"),AYo=o(" (BEiT model)"),yYo=l(),vF=a("li"),Rhe=a("strong"),LYo=o("dpt"),xYo=o(" \u2014 "),sO=a("a"),kYo=o("DPTForSemanticSegmentation"),SYo=o(" (DPT model)"),RYo=l(),TF=a("li"),Bhe=a("strong"),BYo=o("segformer"),PYo=o(" \u2014 "),lO=a("a"),$Yo=o("SegformerForSemanticSegmentation"),IYo=o(" (SegFormer model)"),qYo=l(),MF=a("p"),NYo=o("The model is set in evaluation mode by default using "),Phe=a("code"),jYo=o("model.eval()"),DYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=a("code"),GYo=o("model.train()"),OYo=l(),Ihe=a("p"),VYo=o("Examples:"),XYo=l(),f(Uw.$$.fragment),bBe=l(),cc=a("h2"),EF=a("a"),qhe=a("span"),f(Jw.$$.fragment),zYo=l(),Nhe=a("span"),QYo=o("AutoModelForInstanceSegmentation"),FBe=l(),br=a("div"),f(Yw.$$.fragment),WYo=l(),fc=a("p"),HYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iO=a("a"),UYo=o("from_pretrained()"),JYo=o(" class method or the "),dO=a("a"),YYo=o("from_config()"),KYo=o(` class
method.`),ZYo=l(),Kw=a("p"),eKo=o("This class cannot be instantiated directly using "),jhe=a("code"),oKo=o("__init__()"),rKo=o(" (throws an error)."),tKo=l(),mt=a("div"),f(Zw.$$.fragment),aKo=l(),Dhe=a("p"),nKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),sKo=l(),mc=a("p"),lKo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),iKo=o("not"),dKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),cKo=o("from_pretrained()"),fKo=o(" to load the model weights."),mKo=l(),Ohe=a("p"),gKo=o("Examples:"),hKo=l(),f(eA.$$.fragment),pKo=l(),no=a("div"),f(oA.$$.fragment),_Ko=l(),Vhe=a("p"),uKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bKo=l(),pn=a("p"),FKo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),vKo=o("model_type"),TKo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),MKo=o("pretrained_model_name_or_path"),EKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(":"),AKo=l(),Whe=a("ul"),CF=a("li"),Hhe=a("strong"),yKo=o("maskformer"),LKo=o(" \u2014 "),fO=a("a"),xKo=o("MaskFormerForInstanceSegmentation"),kKo=o(" (MaskFormer model)"),SKo=l(),wF=a("p"),RKo=o("The model is set in evaluation mode by default using "),Uhe=a("code"),BKo=o("model.eval()"),PKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jhe=a("code"),$Ko=o("model.train()"),IKo=l(),Yhe=a("p"),qKo=o("Examples:"),NKo=l(),f(rA.$$.fragment),vBe=l(),gc=a("h2"),AF=a("a"),Khe=a("span"),f(tA.$$.fragment),jKo=l(),Zhe=a("span"),DKo=o("TFAutoModel"),TBe=l(),Fr=a("div"),f(aA.$$.fragment),GKo=l(),hc=a("p"),OKo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mO=a("a"),VKo=o("from_pretrained()"),XKo=o(" class method or the "),gO=a("a"),zKo=o("from_config()"),QKo=o(` class
method.`),WKo=l(),nA=a("p"),HKo=o("This class cannot be instantiated directly using "),epe=a("code"),UKo=o("__init__()"),JKo=o(" (throws an error)."),YKo=l(),gt=a("div"),f(sA.$$.fragment),KKo=l(),ope=a("p"),ZKo=o("Instantiates one of the base model classes of the library from a configuration."),eZo=l(),pc=a("p"),oZo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),rZo=o("not"),tZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),aZo=o("from_pretrained()"),nZo=o(" to load the model weights."),sZo=l(),tpe=a("p"),lZo=o("Examples:"),iZo=l(),f(lA.$$.fragment),dZo=l(),ho=a("div"),f(iA.$$.fragment),cZo=l(),ape=a("p"),fZo=o("Instantiate one of the base model classes of the library from a pretrained model."),mZo=l(),_n=a("p"),gZo=o("The model class to instantiate is selected based on the "),npe=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),_Zo=o("pretrained_model_name_or_path"),uZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),bZo=o("pretrained_model_name_or_path"),FZo=o(":"),vZo=l(),x=a("ul"),yF=a("li"),ipe=a("strong"),TZo=o("albert"),MZo=o(" \u2014 "),pO=a("a"),EZo=o("TFAlbertModel"),CZo=o(" (ALBERT model)"),wZo=l(),LF=a("li"),dpe=a("strong"),AZo=o("bart"),yZo=o(" \u2014 "),_O=a("a"),LZo=o("TFBartModel"),xZo=o(" (BART model)"),kZo=l(),xF=a("li"),cpe=a("strong"),SZo=o("bert"),RZo=o(" \u2014 "),uO=a("a"),BZo=o("TFBertModel"),PZo=o(" (BERT model)"),$Zo=l(),kF=a("li"),fpe=a("strong"),IZo=o("blenderbot"),qZo=o(" \u2014 "),bO=a("a"),NZo=o("TFBlenderbotModel"),jZo=o(" (Blenderbot model)"),DZo=l(),SF=a("li"),mpe=a("strong"),GZo=o("blenderbot-small"),OZo=o(" \u2014 "),FO=a("a"),VZo=o("TFBlenderbotSmallModel"),XZo=o(" (BlenderbotSmall model)"),zZo=l(),RF=a("li"),gpe=a("strong"),QZo=o("camembert"),WZo=o(" \u2014 "),vO=a("a"),HZo=o("TFCamembertModel"),UZo=o(" (CamemBERT model)"),JZo=l(),BF=a("li"),hpe=a("strong"),YZo=o("clip"),KZo=o(" \u2014 "),TO=a("a"),ZZo=o("TFCLIPModel"),eer=o(" (CLIP model)"),oer=l(),PF=a("li"),ppe=a("strong"),rer=o("convbert"),ter=o(" \u2014 "),MO=a("a"),aer=o("TFConvBertModel"),ner=o(" (ConvBERT model)"),ser=l(),$F=a("li"),_pe=a("strong"),ler=o("convnext"),ier=o(" \u2014 "),EO=a("a"),der=o("TFConvNextModel"),cer=o(" (ConvNext model)"),fer=l(),IF=a("li"),upe=a("strong"),mer=o("ctrl"),ger=o(" \u2014 "),CO=a("a"),her=o("TFCTRLModel"),per=o(" (CTRL model)"),_er=l(),qF=a("li"),bpe=a("strong"),uer=o("deberta"),ber=o(" \u2014 "),wO=a("a"),Fer=o("TFDebertaModel"),ver=o(" (DeBERTa model)"),Ter=l(),NF=a("li"),Fpe=a("strong"),Mer=o("deberta-v2"),Eer=o(" \u2014 "),AO=a("a"),Cer=o("TFDebertaV2Model"),wer=o(" (DeBERTa-v2 model)"),Aer=l(),jF=a("li"),vpe=a("strong"),yer=o("distilbert"),Ler=o(" \u2014 "),yO=a("a"),xer=o("TFDistilBertModel"),ker=o(" (DistilBERT model)"),Ser=l(),DF=a("li"),Tpe=a("strong"),Rer=o("dpr"),Ber=o(" \u2014 "),LO=a("a"),Per=o("TFDPRQuestionEncoder"),$er=o(" (DPR model)"),Ier=l(),GF=a("li"),Mpe=a("strong"),qer=o("electra"),Ner=o(" \u2014 "),xO=a("a"),jer=o("TFElectraModel"),Der=o(" (ELECTRA model)"),Ger=l(),OF=a("li"),Epe=a("strong"),Oer=o("flaubert"),Ver=o(" \u2014 "),kO=a("a"),Xer=o("TFFlaubertModel"),zer=o(" (FlauBERT model)"),Qer=l(),Gs=a("li"),Cpe=a("strong"),Wer=o("funnel"),Her=o(" \u2014 "),SO=a("a"),Uer=o("TFFunnelModel"),Jer=o(" or "),RO=a("a"),Yer=o("TFFunnelBaseModel"),Ker=o(" (Funnel Transformer model)"),Zer=l(),VF=a("li"),wpe=a("strong"),eor=o("gpt2"),oor=o(" \u2014 "),BO=a("a"),ror=o("TFGPT2Model"),tor=o(" (OpenAI GPT-2 model)"),aor=l(),XF=a("li"),Ape=a("strong"),nor=o("gptj"),sor=o(" \u2014 "),PO=a("a"),lor=o("TFGPTJModel"),ior=o(" (GPT-J model)"),dor=l(),zF=a("li"),ype=a("strong"),cor=o("hubert"),mor=o(" \u2014 "),$O=a("a"),gor=o("TFHubertModel"),hor=o(" (Hubert model)"),por=l(),QF=a("li"),Lpe=a("strong"),_or=o("layoutlm"),uor=o(" \u2014 "),IO=a("a"),bor=o("TFLayoutLMModel"),For=o(" (LayoutLM model)"),vor=l(),WF=a("li"),xpe=a("strong"),Tor=o("led"),Mor=o(" \u2014 "),qO=a("a"),Eor=o("TFLEDModel"),Cor=o(" (LED model)"),wor=l(),HF=a("li"),kpe=a("strong"),Aor=o("longformer"),yor=o(" \u2014 "),NO=a("a"),Lor=o("TFLongformerModel"),xor=o(" (Longformer model)"),kor=l(),UF=a("li"),Spe=a("strong"),Sor=o("lxmert"),Ror=o(" \u2014 "),jO=a("a"),Bor=o("TFLxmertModel"),Por=o(" (LXMERT model)"),$or=l(),JF=a("li"),Rpe=a("strong"),Ior=o("marian"),qor=o(" \u2014 "),DO=a("a"),Nor=o("TFMarianModel"),jor=o(" (Marian model)"),Dor=l(),YF=a("li"),Bpe=a("strong"),Gor=o("mbart"),Oor=o(" \u2014 "),GO=a("a"),Vor=o("TFMBartModel"),Xor=o(" (mBART model)"),zor=l(),KF=a("li"),Ppe=a("strong"),Qor=o("mobilebert"),Wor=o(" \u2014 "),OO=a("a"),Hor=o("TFMobileBertModel"),Uor=o(" (MobileBERT model)"),Jor=l(),ZF=a("li"),$pe=a("strong"),Yor=o("mpnet"),Kor=o(" \u2014 "),VO=a("a"),Zor=o("TFMPNetModel"),err=o(" (MPNet model)"),orr=l(),ev=a("li"),Ipe=a("strong"),rrr=o("mt5"),trr=o(" \u2014 "),XO=a("a"),arr=o("TFMT5Model"),nrr=o(" (mT5 model)"),srr=l(),ov=a("li"),qpe=a("strong"),lrr=o("openai-gpt"),irr=o(" \u2014 "),zO=a("a"),drr=o("TFOpenAIGPTModel"),crr=o(" (OpenAI GPT model)"),frr=l(),rv=a("li"),Npe=a("strong"),mrr=o("pegasus"),grr=o(" \u2014 "),QO=a("a"),hrr=o("TFPegasusModel"),prr=o(" (Pegasus model)"),_rr=l(),tv=a("li"),jpe=a("strong"),urr=o("rembert"),brr=o(" \u2014 "),WO=a("a"),Frr=o("TFRemBertModel"),vrr=o(" (RemBERT model)"),Trr=l(),av=a("li"),Dpe=a("strong"),Mrr=o("roberta"),Err=o(" \u2014 "),HO=a("a"),Crr=o("TFRobertaModel"),wrr=o(" (RoBERTa model)"),Arr=l(),nv=a("li"),Gpe=a("strong"),yrr=o("roformer"),Lrr=o(" \u2014 "),UO=a("a"),xrr=o("TFRoFormerModel"),krr=o(" (RoFormer model)"),Srr=l(),sv=a("li"),Ope=a("strong"),Rrr=o("speech_to_text"),Brr=o(" \u2014 "),JO=a("a"),Prr=o("TFSpeech2TextModel"),$rr=o(" (Speech2Text model)"),Irr=l(),lv=a("li"),Vpe=a("strong"),qrr=o("t5"),Nrr=o(" \u2014 "),YO=a("a"),jrr=o("TFT5Model"),Drr=o(" (T5 model)"),Grr=l(),iv=a("li"),Xpe=a("strong"),Orr=o("tapas"),Vrr=o(" \u2014 "),KO=a("a"),Xrr=o("TFTapasModel"),zrr=o(" (TAPAS model)"),Qrr=l(),dv=a("li"),zpe=a("strong"),Wrr=o("transfo-xl"),Hrr=o(" \u2014 "),ZO=a("a"),Urr=o("TFTransfoXLModel"),Jrr=o(" (Transformer-XL model)"),Yrr=l(),cv=a("li"),Qpe=a("strong"),Krr=o("vit"),Zrr=o(" \u2014 "),eV=a("a"),etr=o("TFViTModel"),otr=o(" (ViT model)"),rtr=l(),fv=a("li"),Wpe=a("strong"),ttr=o("vit_mae"),atr=o(" \u2014 "),oV=a("a"),ntr=o("TFViTMAEModel"),str=o(" (ViTMAE model)"),ltr=l(),mv=a("li"),Hpe=a("strong"),itr=o("wav2vec2"),dtr=o(" \u2014 "),rV=a("a"),ctr=o("TFWav2Vec2Model"),ftr=o(" (Wav2Vec2 model)"),mtr=l(),gv=a("li"),Upe=a("strong"),gtr=o("xlm"),htr=o(" \u2014 "),tV=a("a"),ptr=o("TFXLMModel"),_tr=o(" (XLM model)"),utr=l(),hv=a("li"),Jpe=a("strong"),btr=o("xlm-roberta"),Ftr=o(" \u2014 "),aV=a("a"),vtr=o("TFXLMRobertaModel"),Ttr=o(" (XLM-RoBERTa model)"),Mtr=l(),pv=a("li"),Ype=a("strong"),Etr=o("xlnet"),Ctr=o(" \u2014 "),nV=a("a"),wtr=o("TFXLNetModel"),Atr=o(" (XLNet model)"),ytr=l(),Kpe=a("p"),Ltr=o("Examples:"),xtr=l(),f(dA.$$.fragment),MBe=l(),_c=a("h2"),_v=a("a"),Zpe=a("span"),f(cA.$$.fragment),ktr=l(),e_e=a("span"),Str=o("TFAutoModelForPreTraining"),EBe=l(),vr=a("div"),f(fA.$$.fragment),Rtr=l(),uc=a("p"),Btr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sV=a("a"),Ptr=o("from_pretrained()"),$tr=o(" class method or the "),lV=a("a"),Itr=o("from_config()"),qtr=o(` class
method.`),Ntr=l(),mA=a("p"),jtr=o("This class cannot be instantiated directly using "),o_e=a("code"),Dtr=o("__init__()"),Gtr=o(" (throws an error)."),Otr=l(),ht=a("div"),f(gA.$$.fragment),Vtr=l(),r_e=a("p"),Xtr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ztr=l(),bc=a("p"),Qtr=o(`Note:
Loading a model from its configuration file does `),t_e=a("strong"),Wtr=o("not"),Htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),Utr=o("from_pretrained()"),Jtr=o(" to load the model weights."),Ytr=l(),a_e=a("p"),Ktr=o("Examples:"),Ztr=l(),f(hA.$$.fragment),ear=l(),po=a("div"),f(pA.$$.fragment),oar=l(),n_e=a("p"),rar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tar=l(),un=a("p"),aar=o("The model class to instantiate is selected based on the "),s_e=a("code"),nar=o("model_type"),sar=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),lar=o("pretrained_model_name_or_path"),iar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),dar=o("pretrained_model_name_or_path"),car=o(":"),far=l(),H=a("ul"),uv=a("li"),d_e=a("strong"),mar=o("albert"),gar=o(" \u2014 "),dV=a("a"),har=o("TFAlbertForPreTraining"),par=o(" (ALBERT model)"),_ar=l(),bv=a("li"),c_e=a("strong"),uar=o("bart"),bar=o(" \u2014 "),cV=a("a"),Far=o("TFBartForConditionalGeneration"),Tar=o(" (BART model)"),Mar=l(),Fv=a("li"),f_e=a("strong"),Ear=o("bert"),Car=o(" \u2014 "),fV=a("a"),war=o("TFBertForPreTraining"),Aar=o(" (BERT model)"),yar=l(),vv=a("li"),m_e=a("strong"),Lar=o("camembert"),xar=o(" \u2014 "),mV=a("a"),kar=o("TFCamembertForMaskedLM"),Sar=o(" (CamemBERT model)"),Rar=l(),Tv=a("li"),g_e=a("strong"),Bar=o("ctrl"),Par=o(" \u2014 "),gV=a("a"),$ar=o("TFCTRLLMHeadModel"),Iar=o(" (CTRL model)"),qar=l(),Mv=a("li"),h_e=a("strong"),Nar=o("distilbert"),jar=o(" \u2014 "),hV=a("a"),Dar=o("TFDistilBertForMaskedLM"),Gar=o(" (DistilBERT model)"),Oar=l(),Ev=a("li"),p_e=a("strong"),Var=o("electra"),Xar=o(" \u2014 "),pV=a("a"),zar=o("TFElectraForPreTraining"),Qar=o(" (ELECTRA model)"),War=l(),Cv=a("li"),__e=a("strong"),Har=o("flaubert"),Uar=o(" \u2014 "),_V=a("a"),Jar=o("TFFlaubertWithLMHeadModel"),Yar=o(" (FlauBERT model)"),Kar=l(),wv=a("li"),u_e=a("strong"),Zar=o("funnel"),enr=o(" \u2014 "),uV=a("a"),onr=o("TFFunnelForPreTraining"),rnr=o(" (Funnel Transformer model)"),tnr=l(),Av=a("li"),b_e=a("strong"),anr=o("gpt2"),nnr=o(" \u2014 "),bV=a("a"),snr=o("TFGPT2LMHeadModel"),lnr=o(" (OpenAI GPT-2 model)"),inr=l(),yv=a("li"),F_e=a("strong"),dnr=o("layoutlm"),cnr=o(" \u2014 "),FV=a("a"),fnr=o("TFLayoutLMForMaskedLM"),mnr=o(" (LayoutLM model)"),gnr=l(),Lv=a("li"),v_e=a("strong"),hnr=o("lxmert"),pnr=o(" \u2014 "),vV=a("a"),_nr=o("TFLxmertForPreTraining"),unr=o(" (LXMERT model)"),bnr=l(),xv=a("li"),T_e=a("strong"),Fnr=o("mobilebert"),vnr=o(" \u2014 "),TV=a("a"),Tnr=o("TFMobileBertForPreTraining"),Mnr=o(" (MobileBERT model)"),Enr=l(),kv=a("li"),M_e=a("strong"),Cnr=o("mpnet"),wnr=o(" \u2014 "),MV=a("a"),Anr=o("TFMPNetForMaskedLM"),ynr=o(" (MPNet model)"),Lnr=l(),Sv=a("li"),E_e=a("strong"),xnr=o("openai-gpt"),knr=o(" \u2014 "),EV=a("a"),Snr=o("TFOpenAIGPTLMHeadModel"),Rnr=o(" (OpenAI GPT model)"),Bnr=l(),Rv=a("li"),C_e=a("strong"),Pnr=o("roberta"),$nr=o(" \u2014 "),CV=a("a"),Inr=o("TFRobertaForMaskedLM"),qnr=o(" (RoBERTa model)"),Nnr=l(),Bv=a("li"),w_e=a("strong"),jnr=o("t5"),Dnr=o(" \u2014 "),wV=a("a"),Gnr=o("TFT5ForConditionalGeneration"),Onr=o(" (T5 model)"),Vnr=l(),Pv=a("li"),A_e=a("strong"),Xnr=o("tapas"),znr=o(" \u2014 "),AV=a("a"),Qnr=o("TFTapasForMaskedLM"),Wnr=o(" (TAPAS model)"),Hnr=l(),$v=a("li"),y_e=a("strong"),Unr=o("transfo-xl"),Jnr=o(" \u2014 "),yV=a("a"),Ynr=o("TFTransfoXLLMHeadModel"),Knr=o(" (Transformer-XL model)"),Znr=l(),Iv=a("li"),L_e=a("strong"),esr=o("vit_mae"),osr=o(" \u2014 "),LV=a("a"),rsr=o("TFViTMAEForPreTraining"),tsr=o(" (ViTMAE model)"),asr=l(),qv=a("li"),x_e=a("strong"),nsr=o("xlm"),ssr=o(" \u2014 "),xV=a("a"),lsr=o("TFXLMWithLMHeadModel"),isr=o(" (XLM model)"),dsr=l(),Nv=a("li"),k_e=a("strong"),csr=o("xlm-roberta"),fsr=o(" \u2014 "),kV=a("a"),msr=o("TFXLMRobertaForMaskedLM"),gsr=o(" (XLM-RoBERTa model)"),hsr=l(),jv=a("li"),S_e=a("strong"),psr=o("xlnet"),_sr=o(" \u2014 "),SV=a("a"),usr=o("TFXLNetLMHeadModel"),bsr=o(" (XLNet model)"),Fsr=l(),R_e=a("p"),vsr=o("Examples:"),Tsr=l(),f(_A.$$.fragment),CBe=l(),Fc=a("h2"),Dv=a("a"),B_e=a("span"),f(uA.$$.fragment),Msr=l(),P_e=a("span"),Esr=o("TFAutoModelForCausalLM"),wBe=l(),Tr=a("div"),f(bA.$$.fragment),Csr=l(),vc=a("p"),wsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RV=a("a"),Asr=o("from_pretrained()"),ysr=o(" class method or the "),BV=a("a"),Lsr=o("from_config()"),xsr=o(` class
method.`),ksr=l(),FA=a("p"),Ssr=o("This class cannot be instantiated directly using "),$_e=a("code"),Rsr=o("__init__()"),Bsr=o(" (throws an error)."),Psr=l(),pt=a("div"),f(vA.$$.fragment),$sr=l(),I_e=a("p"),Isr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qsr=l(),Tc=a("p"),Nsr=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),jsr=o("not"),Dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),Gsr=o("from_pretrained()"),Osr=o(" to load the model weights."),Vsr=l(),N_e=a("p"),Xsr=o("Examples:"),zsr=l(),f(TA.$$.fragment),Qsr=l(),_o=a("div"),f(MA.$$.fragment),Wsr=l(),j_e=a("p"),Hsr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Usr=l(),bn=a("p"),Jsr=o("The model class to instantiate is selected based on the "),D_e=a("code"),Ysr=o("model_type"),Ksr=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),Zsr=o("pretrained_model_name_or_path"),elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),olr=o("pretrained_model_name_or_path"),rlr=o(":"),tlr=l(),fe=a("ul"),Gv=a("li"),V_e=a("strong"),alr=o("bert"),nlr=o(" \u2014 "),$V=a("a"),slr=o("TFBertLMHeadModel"),llr=o(" (BERT model)"),ilr=l(),Ov=a("li"),X_e=a("strong"),dlr=o("camembert"),clr=o(" \u2014 "),IV=a("a"),flr=o("TFCamembertForCausalLM"),mlr=o(" (CamemBERT model)"),glr=l(),Vv=a("li"),z_e=a("strong"),hlr=o("ctrl"),plr=o(" \u2014 "),qV=a("a"),_lr=o("TFCTRLLMHeadModel"),ulr=o(" (CTRL model)"),blr=l(),Xv=a("li"),Q_e=a("strong"),Flr=o("gpt2"),vlr=o(" \u2014 "),NV=a("a"),Tlr=o("TFGPT2LMHeadModel"),Mlr=o(" (OpenAI GPT-2 model)"),Elr=l(),zv=a("li"),W_e=a("strong"),Clr=o("gptj"),wlr=o(" \u2014 "),jV=a("a"),Alr=o("TFGPTJForCausalLM"),ylr=o(" (GPT-J model)"),Llr=l(),Qv=a("li"),H_e=a("strong"),xlr=o("openai-gpt"),klr=o(" \u2014 "),DV=a("a"),Slr=o("TFOpenAIGPTLMHeadModel"),Rlr=o(" (OpenAI GPT model)"),Blr=l(),Wv=a("li"),U_e=a("strong"),Plr=o("rembert"),$lr=o(" \u2014 "),GV=a("a"),Ilr=o("TFRemBertForCausalLM"),qlr=o(" (RemBERT model)"),Nlr=l(),Hv=a("li"),J_e=a("strong"),jlr=o("roberta"),Dlr=o(" \u2014 "),OV=a("a"),Glr=o("TFRobertaForCausalLM"),Olr=o(" (RoBERTa model)"),Vlr=l(),Uv=a("li"),Y_e=a("strong"),Xlr=o("roformer"),zlr=o(" \u2014 "),VV=a("a"),Qlr=o("TFRoFormerForCausalLM"),Wlr=o(" (RoFormer model)"),Hlr=l(),Jv=a("li"),K_e=a("strong"),Ulr=o("transfo-xl"),Jlr=o(" \u2014 "),XV=a("a"),Ylr=o("TFTransfoXLLMHeadModel"),Klr=o(" (Transformer-XL model)"),Zlr=l(),Yv=a("li"),Z_e=a("strong"),eir=o("xlm"),oir=o(" \u2014 "),zV=a("a"),rir=o("TFXLMWithLMHeadModel"),tir=o(" (XLM model)"),air=l(),Kv=a("li"),eue=a("strong"),nir=o("xlnet"),sir=o(" \u2014 "),QV=a("a"),lir=o("TFXLNetLMHeadModel"),iir=o(" (XLNet model)"),dir=l(),oue=a("p"),cir=o("Examples:"),fir=l(),f(EA.$$.fragment),ABe=l(),Mc=a("h2"),Zv=a("a"),rue=a("span"),f(CA.$$.fragment),mir=l(),tue=a("span"),gir=o("TFAutoModelForImageClassification"),yBe=l(),Mr=a("div"),f(wA.$$.fragment),hir=l(),Ec=a("p"),pir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=a("a"),_ir=o("from_pretrained()"),uir=o(" class method or the "),HV=a("a"),bir=o("from_config()"),Fir=o(` class
method.`),vir=l(),AA=a("p"),Tir=o("This class cannot be instantiated directly using "),aue=a("code"),Mir=o("__init__()"),Eir=o(" (throws an error)."),Cir=l(),_t=a("div"),f(yA.$$.fragment),wir=l(),nue=a("p"),Air=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yir=l(),Cc=a("p"),Lir=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),xir=o("not"),kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),Sir=o("from_pretrained()"),Rir=o(" to load the model weights."),Bir=l(),lue=a("p"),Pir=o("Examples:"),$ir=l(),f(LA.$$.fragment),Iir=l(),uo=a("div"),f(xA.$$.fragment),qir=l(),iue=a("p"),Nir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jir=l(),Fn=a("p"),Dir=o("The model class to instantiate is selected based on the "),due=a("code"),Gir=o("model_type"),Oir=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),Vir=o("pretrained_model_name_or_path"),Xir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),zir=o("pretrained_model_name_or_path"),Qir=o(":"),Wir=l(),kA=a("ul"),e0=a("li"),mue=a("strong"),Hir=o("convnext"),Uir=o(" \u2014 "),JV=a("a"),Jir=o("TFConvNextForImageClassification"),Yir=o(" (ConvNext model)"),Kir=l(),o0=a("li"),gue=a("strong"),Zir=o("vit"),edr=o(" \u2014 "),YV=a("a"),odr=o("TFViTForImageClassification"),rdr=o(" (ViT model)"),tdr=l(),hue=a("p"),adr=o("Examples:"),ndr=l(),f(SA.$$.fragment),LBe=l(),wc=a("h2"),r0=a("a"),pue=a("span"),f(RA.$$.fragment),sdr=l(),_ue=a("span"),ldr=o("TFAutoModelForMaskedLM"),xBe=l(),Er=a("div"),f(BA.$$.fragment),idr=l(),Ac=a("p"),ddr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KV=a("a"),cdr=o("from_pretrained()"),fdr=o(" class method or the "),ZV=a("a"),mdr=o("from_config()"),gdr=o(` class
method.`),hdr=l(),PA=a("p"),pdr=o("This class cannot be instantiated directly using "),uue=a("code"),_dr=o("__init__()"),udr=o(" (throws an error)."),bdr=l(),ut=a("div"),f($A.$$.fragment),Fdr=l(),bue=a("p"),vdr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tdr=l(),yc=a("p"),Mdr=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),Edr=o("not"),Cdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),wdr=o("from_pretrained()"),Adr=o(" to load the model weights."),ydr=l(),vue=a("p"),Ldr=o("Examples:"),xdr=l(),f(IA.$$.fragment),kdr=l(),bo=a("div"),f(qA.$$.fragment),Sdr=l(),Tue=a("p"),Rdr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bdr=l(),vn=a("p"),Pdr=o("The model class to instantiate is selected based on the "),Mue=a("code"),$dr=o("model_type"),Idr=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),qdr=o("pretrained_model_name_or_path"),Ndr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),jdr=o("pretrained_model_name_or_path"),Ddr=o(":"),Gdr=l(),J=a("ul"),t0=a("li"),wue=a("strong"),Odr=o("albert"),Vdr=o(" \u2014 "),oX=a("a"),Xdr=o("TFAlbertForMaskedLM"),zdr=o(" (ALBERT model)"),Qdr=l(),a0=a("li"),Aue=a("strong"),Wdr=o("bert"),Hdr=o(" \u2014 "),rX=a("a"),Udr=o("TFBertForMaskedLM"),Jdr=o(" (BERT model)"),Ydr=l(),n0=a("li"),yue=a("strong"),Kdr=o("camembert"),Zdr=o(" \u2014 "),tX=a("a"),ecr=o("TFCamembertForMaskedLM"),ocr=o(" (CamemBERT model)"),rcr=l(),s0=a("li"),Lue=a("strong"),tcr=o("convbert"),acr=o(" \u2014 "),aX=a("a"),ncr=o("TFConvBertForMaskedLM"),scr=o(" (ConvBERT model)"),lcr=l(),l0=a("li"),xue=a("strong"),icr=o("deberta"),dcr=o(" \u2014 "),nX=a("a"),ccr=o("TFDebertaForMaskedLM"),fcr=o(" (DeBERTa model)"),mcr=l(),i0=a("li"),kue=a("strong"),gcr=o("deberta-v2"),hcr=o(" \u2014 "),sX=a("a"),pcr=o("TFDebertaV2ForMaskedLM"),_cr=o(" (DeBERTa-v2 model)"),ucr=l(),d0=a("li"),Sue=a("strong"),bcr=o("distilbert"),Fcr=o(" \u2014 "),lX=a("a"),vcr=o("TFDistilBertForMaskedLM"),Tcr=o(" (DistilBERT model)"),Mcr=l(),c0=a("li"),Rue=a("strong"),Ecr=o("electra"),Ccr=o(" \u2014 "),iX=a("a"),wcr=o("TFElectraForMaskedLM"),Acr=o(" (ELECTRA model)"),ycr=l(),f0=a("li"),Bue=a("strong"),Lcr=o("flaubert"),xcr=o(" \u2014 "),dX=a("a"),kcr=o("TFFlaubertWithLMHeadModel"),Scr=o(" (FlauBERT model)"),Rcr=l(),m0=a("li"),Pue=a("strong"),Bcr=o("funnel"),Pcr=o(" \u2014 "),cX=a("a"),$cr=o("TFFunnelForMaskedLM"),Icr=o(" (Funnel Transformer model)"),qcr=l(),g0=a("li"),$ue=a("strong"),Ncr=o("layoutlm"),jcr=o(" \u2014 "),fX=a("a"),Dcr=o("TFLayoutLMForMaskedLM"),Gcr=o(" (LayoutLM model)"),Ocr=l(),h0=a("li"),Iue=a("strong"),Vcr=o("longformer"),Xcr=o(" \u2014 "),mX=a("a"),zcr=o("TFLongformerForMaskedLM"),Qcr=o(" (Longformer model)"),Wcr=l(),p0=a("li"),que=a("strong"),Hcr=o("mobilebert"),Ucr=o(" \u2014 "),gX=a("a"),Jcr=o("TFMobileBertForMaskedLM"),Ycr=o(" (MobileBERT model)"),Kcr=l(),_0=a("li"),Nue=a("strong"),Zcr=o("mpnet"),efr=o(" \u2014 "),hX=a("a"),ofr=o("TFMPNetForMaskedLM"),rfr=o(" (MPNet model)"),tfr=l(),u0=a("li"),jue=a("strong"),afr=o("rembert"),nfr=o(" \u2014 "),pX=a("a"),sfr=o("TFRemBertForMaskedLM"),lfr=o(" (RemBERT model)"),ifr=l(),b0=a("li"),Due=a("strong"),dfr=o("roberta"),cfr=o(" \u2014 "),_X=a("a"),ffr=o("TFRobertaForMaskedLM"),mfr=o(" (RoBERTa model)"),gfr=l(),F0=a("li"),Gue=a("strong"),hfr=o("roformer"),pfr=o(" \u2014 "),uX=a("a"),_fr=o("TFRoFormerForMaskedLM"),ufr=o(" (RoFormer model)"),bfr=l(),v0=a("li"),Oue=a("strong"),Ffr=o("tapas"),vfr=o(" \u2014 "),bX=a("a"),Tfr=o("TFTapasForMaskedLM"),Mfr=o(" (TAPAS model)"),Efr=l(),T0=a("li"),Vue=a("strong"),Cfr=o("xlm"),wfr=o(" \u2014 "),FX=a("a"),Afr=o("TFXLMWithLMHeadModel"),yfr=o(" (XLM model)"),Lfr=l(),M0=a("li"),Xue=a("strong"),xfr=o("xlm-roberta"),kfr=o(" \u2014 "),vX=a("a"),Sfr=o("TFXLMRobertaForMaskedLM"),Rfr=o(" (XLM-RoBERTa model)"),Bfr=l(),zue=a("p"),Pfr=o("Examples:"),$fr=l(),f(NA.$$.fragment),kBe=l(),Lc=a("h2"),E0=a("a"),Que=a("span"),f(jA.$$.fragment),Ifr=l(),Wue=a("span"),qfr=o("TFAutoModelForSeq2SeqLM"),SBe=l(),Cr=a("div"),f(DA.$$.fragment),Nfr=l(),xc=a("p"),jfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TX=a("a"),Dfr=o("from_pretrained()"),Gfr=o(" class method or the "),MX=a("a"),Ofr=o("from_config()"),Vfr=o(` class
method.`),Xfr=l(),GA=a("p"),zfr=o("This class cannot be instantiated directly using "),Hue=a("code"),Qfr=o("__init__()"),Wfr=o(" (throws an error)."),Hfr=l(),bt=a("div"),f(OA.$$.fragment),Ufr=l(),Uue=a("p"),Jfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Yfr=l(),kc=a("p"),Kfr=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Zfr=o("not"),emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),omr=o("from_pretrained()"),rmr=o(" to load the model weights."),tmr=l(),Yue=a("p"),amr=o("Examples:"),nmr=l(),f(VA.$$.fragment),smr=l(),Fo=a("div"),f(XA.$$.fragment),lmr=l(),Kue=a("p"),imr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dmr=l(),Tn=a("p"),cmr=o("The model class to instantiate is selected based on the "),Zue=a("code"),fmr=o("model_type"),mmr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),pmr=o("pretrained_model_name_or_path"),_mr=o(":"),umr=l(),be=a("ul"),C0=a("li"),r1e=a("strong"),bmr=o("bart"),Fmr=o(" \u2014 "),CX=a("a"),vmr=o("TFBartForConditionalGeneration"),Tmr=o(" (BART model)"),Mmr=l(),w0=a("li"),t1e=a("strong"),Emr=o("blenderbot"),Cmr=o(" \u2014 "),wX=a("a"),wmr=o("TFBlenderbotForConditionalGeneration"),Amr=o(" (Blenderbot model)"),ymr=l(),A0=a("li"),a1e=a("strong"),Lmr=o("blenderbot-small"),xmr=o(" \u2014 "),AX=a("a"),kmr=o("TFBlenderbotSmallForConditionalGeneration"),Smr=o(" (BlenderbotSmall model)"),Rmr=l(),y0=a("li"),n1e=a("strong"),Bmr=o("encoder-decoder"),Pmr=o(" \u2014 "),yX=a("a"),$mr=o("TFEncoderDecoderModel"),Imr=o(" (Encoder decoder model)"),qmr=l(),L0=a("li"),s1e=a("strong"),Nmr=o("led"),jmr=o(" \u2014 "),LX=a("a"),Dmr=o("TFLEDForConditionalGeneration"),Gmr=o(" (LED model)"),Omr=l(),x0=a("li"),l1e=a("strong"),Vmr=o("marian"),Xmr=o(" \u2014 "),xX=a("a"),zmr=o("TFMarianMTModel"),Qmr=o(" (Marian model)"),Wmr=l(),k0=a("li"),i1e=a("strong"),Hmr=o("mbart"),Umr=o(" \u2014 "),kX=a("a"),Jmr=o("TFMBartForConditionalGeneration"),Ymr=o(" (mBART model)"),Kmr=l(),S0=a("li"),d1e=a("strong"),Zmr=o("mt5"),egr=o(" \u2014 "),SX=a("a"),ogr=o("TFMT5ForConditionalGeneration"),rgr=o(" (mT5 model)"),tgr=l(),R0=a("li"),c1e=a("strong"),agr=o("pegasus"),ngr=o(" \u2014 "),RX=a("a"),sgr=o("TFPegasusForConditionalGeneration"),lgr=o(" (Pegasus model)"),igr=l(),B0=a("li"),f1e=a("strong"),dgr=o("t5"),cgr=o(" \u2014 "),BX=a("a"),fgr=o("TFT5ForConditionalGeneration"),mgr=o(" (T5 model)"),ggr=l(),m1e=a("p"),hgr=o("Examples:"),pgr=l(),f(zA.$$.fragment),RBe=l(),Sc=a("h2"),P0=a("a"),g1e=a("span"),f(QA.$$.fragment),_gr=l(),h1e=a("span"),ugr=o("TFAutoModelForSequenceClassification"),BBe=l(),wr=a("div"),f(WA.$$.fragment),bgr=l(),Rc=a("p"),Fgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PX=a("a"),vgr=o("from_pretrained()"),Tgr=o(" class method or the "),$X=a("a"),Mgr=o("from_config()"),Egr=o(` class
method.`),Cgr=l(),HA=a("p"),wgr=o("This class cannot be instantiated directly using "),p1e=a("code"),Agr=o("__init__()"),ygr=o(" (throws an error)."),Lgr=l(),Ft=a("div"),f(UA.$$.fragment),xgr=l(),_1e=a("p"),kgr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sgr=l(),Bc=a("p"),Rgr=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),Bgr=o("not"),Pgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),$gr=o("from_pretrained()"),Igr=o(" to load the model weights."),qgr=l(),b1e=a("p"),Ngr=o("Examples:"),jgr=l(),f(JA.$$.fragment),Dgr=l(),vo=a("div"),f(YA.$$.fragment),Ggr=l(),F1e=a("p"),Ogr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vgr=l(),Mn=a("p"),Xgr=o("The model class to instantiate is selected based on the "),v1e=a("code"),zgr=o("model_type"),Qgr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),Wgr=o("pretrained_model_name_or_path"),Hgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(":"),Ygr=l(),V=a("ul"),$0=a("li"),E1e=a("strong"),Kgr=o("albert"),Zgr=o(" \u2014 "),qX=a("a"),ehr=o("TFAlbertForSequenceClassification"),ohr=o(" (ALBERT model)"),rhr=l(),I0=a("li"),C1e=a("strong"),thr=o("bert"),ahr=o(" \u2014 "),NX=a("a"),nhr=o("TFBertForSequenceClassification"),shr=o(" (BERT model)"),lhr=l(),q0=a("li"),w1e=a("strong"),ihr=o("camembert"),dhr=o(" \u2014 "),jX=a("a"),chr=o("TFCamembertForSequenceClassification"),fhr=o(" (CamemBERT model)"),mhr=l(),N0=a("li"),A1e=a("strong"),ghr=o("convbert"),hhr=o(" \u2014 "),DX=a("a"),phr=o("TFConvBertForSequenceClassification"),_hr=o(" (ConvBERT model)"),uhr=l(),j0=a("li"),y1e=a("strong"),bhr=o("ctrl"),Fhr=o(" \u2014 "),GX=a("a"),vhr=o("TFCTRLForSequenceClassification"),Thr=o(" (CTRL model)"),Mhr=l(),D0=a("li"),L1e=a("strong"),Ehr=o("deberta"),Chr=o(" \u2014 "),OX=a("a"),whr=o("TFDebertaForSequenceClassification"),Ahr=o(" (DeBERTa model)"),yhr=l(),G0=a("li"),x1e=a("strong"),Lhr=o("deberta-v2"),xhr=o(" \u2014 "),VX=a("a"),khr=o("TFDebertaV2ForSequenceClassification"),Shr=o(" (DeBERTa-v2 model)"),Rhr=l(),O0=a("li"),k1e=a("strong"),Bhr=o("distilbert"),Phr=o(" \u2014 "),XX=a("a"),$hr=o("TFDistilBertForSequenceClassification"),Ihr=o(" (DistilBERT model)"),qhr=l(),V0=a("li"),S1e=a("strong"),Nhr=o("electra"),jhr=o(" \u2014 "),zX=a("a"),Dhr=o("TFElectraForSequenceClassification"),Ghr=o(" (ELECTRA model)"),Ohr=l(),X0=a("li"),R1e=a("strong"),Vhr=o("flaubert"),Xhr=o(" \u2014 "),QX=a("a"),zhr=o("TFFlaubertForSequenceClassification"),Qhr=o(" (FlauBERT model)"),Whr=l(),z0=a("li"),B1e=a("strong"),Hhr=o("funnel"),Uhr=o(" \u2014 "),WX=a("a"),Jhr=o("TFFunnelForSequenceClassification"),Yhr=o(" (Funnel Transformer model)"),Khr=l(),Q0=a("li"),P1e=a("strong"),Zhr=o("gpt2"),epr=o(" \u2014 "),HX=a("a"),opr=o("TFGPT2ForSequenceClassification"),rpr=o(" (OpenAI GPT-2 model)"),tpr=l(),W0=a("li"),$1e=a("strong"),apr=o("gptj"),npr=o(" \u2014 "),UX=a("a"),spr=o("TFGPTJForSequenceClassification"),lpr=o(" (GPT-J model)"),ipr=l(),H0=a("li"),I1e=a("strong"),dpr=o("layoutlm"),cpr=o(" \u2014 "),JX=a("a"),fpr=o("TFLayoutLMForSequenceClassification"),mpr=o(" (LayoutLM model)"),gpr=l(),U0=a("li"),q1e=a("strong"),hpr=o("longformer"),ppr=o(" \u2014 "),YX=a("a"),_pr=o("TFLongformerForSequenceClassification"),upr=o(" (Longformer model)"),bpr=l(),J0=a("li"),N1e=a("strong"),Fpr=o("mobilebert"),vpr=o(" \u2014 "),KX=a("a"),Tpr=o("TFMobileBertForSequenceClassification"),Mpr=o(" (MobileBERT model)"),Epr=l(),Y0=a("li"),j1e=a("strong"),Cpr=o("mpnet"),wpr=o(" \u2014 "),ZX=a("a"),Apr=o("TFMPNetForSequenceClassification"),ypr=o(" (MPNet model)"),Lpr=l(),K0=a("li"),D1e=a("strong"),xpr=o("openai-gpt"),kpr=o(" \u2014 "),ez=a("a"),Spr=o("TFOpenAIGPTForSequenceClassification"),Rpr=o(" (OpenAI GPT model)"),Bpr=l(),Z0=a("li"),G1e=a("strong"),Ppr=o("rembert"),$pr=o(" \u2014 "),oz=a("a"),Ipr=o("TFRemBertForSequenceClassification"),qpr=o(" (RemBERT model)"),Npr=l(),eT=a("li"),O1e=a("strong"),jpr=o("roberta"),Dpr=o(" \u2014 "),rz=a("a"),Gpr=o("TFRobertaForSequenceClassification"),Opr=o(" (RoBERTa model)"),Vpr=l(),oT=a("li"),V1e=a("strong"),Xpr=o("roformer"),zpr=o(" \u2014 "),tz=a("a"),Qpr=o("TFRoFormerForSequenceClassification"),Wpr=o(" (RoFormer model)"),Hpr=l(),rT=a("li"),X1e=a("strong"),Upr=o("tapas"),Jpr=o(" \u2014 "),az=a("a"),Ypr=o("TFTapasForSequenceClassification"),Kpr=o(" (TAPAS model)"),Zpr=l(),tT=a("li"),z1e=a("strong"),e_r=o("transfo-xl"),o_r=o(" \u2014 "),nz=a("a"),r_r=o("TFTransfoXLForSequenceClassification"),t_r=o(" (Transformer-XL model)"),a_r=l(),aT=a("li"),Q1e=a("strong"),n_r=o("xlm"),s_r=o(" \u2014 "),sz=a("a"),l_r=o("TFXLMForSequenceClassification"),i_r=o(" (XLM model)"),d_r=l(),nT=a("li"),W1e=a("strong"),c_r=o("xlm-roberta"),f_r=o(" \u2014 "),lz=a("a"),m_r=o("TFXLMRobertaForSequenceClassification"),g_r=o(" (XLM-RoBERTa model)"),h_r=l(),sT=a("li"),H1e=a("strong"),p_r=o("xlnet"),__r=o(" \u2014 "),iz=a("a"),u_r=o("TFXLNetForSequenceClassification"),b_r=o(" (XLNet model)"),F_r=l(),U1e=a("p"),v_r=o("Examples:"),T_r=l(),f(KA.$$.fragment),PBe=l(),Pc=a("h2"),lT=a("a"),J1e=a("span"),f(ZA.$$.fragment),M_r=l(),Y1e=a("span"),E_r=o("TFAutoModelForMultipleChoice"),$Be=l(),Ar=a("div"),f(ey.$$.fragment),C_r=l(),$c=a("p"),w_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=a("a"),A_r=o("from_pretrained()"),y_r=o(" class method or the "),cz=a("a"),L_r=o("from_config()"),x_r=o(` class
method.`),k_r=l(),oy=a("p"),S_r=o("This class cannot be instantiated directly using "),K1e=a("code"),R_r=o("__init__()"),B_r=o(" (throws an error)."),P_r=l(),vt=a("div"),f(ry.$$.fragment),$_r=l(),Z1e=a("p"),I_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),q_r=l(),Ic=a("p"),N_r=o(`Note:
Loading a model from its configuration file does `),e8e=a("strong"),j_r=o("not"),D_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),G_r=o("from_pretrained()"),O_r=o(" to load the model weights."),V_r=l(),o8e=a("p"),X_r=o("Examples:"),z_r=l(),f(ty.$$.fragment),Q_r=l(),To=a("div"),f(ay.$$.fragment),W_r=l(),r8e=a("p"),H_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U_r=l(),En=a("p"),J_r=o("The model class to instantiate is selected based on the "),t8e=a("code"),Y_r=o("model_type"),K_r=o(` property of the config object (either
passed as an argument or loaded from `),a8e=a("code"),Z_r=o("pretrained_model_name_or_path"),eur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n8e=a("code"),our=o("pretrained_model_name_or_path"),rur=o(":"),tur=l(),se=a("ul"),iT=a("li"),s8e=a("strong"),aur=o("albert"),nur=o(" \u2014 "),mz=a("a"),sur=o("TFAlbertForMultipleChoice"),lur=o(" (ALBERT model)"),iur=l(),dT=a("li"),l8e=a("strong"),dur=o("bert"),cur=o(" \u2014 "),gz=a("a"),fur=o("TFBertForMultipleChoice"),mur=o(" (BERT model)"),gur=l(),cT=a("li"),i8e=a("strong"),hur=o("camembert"),pur=o(" \u2014 "),hz=a("a"),_ur=o("TFCamembertForMultipleChoice"),uur=o(" (CamemBERT model)"),bur=l(),fT=a("li"),d8e=a("strong"),Fur=o("convbert"),vur=o(" \u2014 "),pz=a("a"),Tur=o("TFConvBertForMultipleChoice"),Mur=o(" (ConvBERT model)"),Eur=l(),mT=a("li"),c8e=a("strong"),Cur=o("distilbert"),wur=o(" \u2014 "),_z=a("a"),Aur=o("TFDistilBertForMultipleChoice"),yur=o(" (DistilBERT model)"),Lur=l(),gT=a("li"),f8e=a("strong"),xur=o("electra"),kur=o(" \u2014 "),uz=a("a"),Sur=o("TFElectraForMultipleChoice"),Rur=o(" (ELECTRA model)"),Bur=l(),hT=a("li"),m8e=a("strong"),Pur=o("flaubert"),$ur=o(" \u2014 "),bz=a("a"),Iur=o("TFFlaubertForMultipleChoice"),qur=o(" (FlauBERT model)"),Nur=l(),pT=a("li"),g8e=a("strong"),jur=o("funnel"),Dur=o(" \u2014 "),Fz=a("a"),Gur=o("TFFunnelForMultipleChoice"),Our=o(" (Funnel Transformer model)"),Vur=l(),_T=a("li"),h8e=a("strong"),Xur=o("longformer"),zur=o(" \u2014 "),vz=a("a"),Qur=o("TFLongformerForMultipleChoice"),Wur=o(" (Longformer model)"),Hur=l(),uT=a("li"),p8e=a("strong"),Uur=o("mobilebert"),Jur=o(" \u2014 "),Tz=a("a"),Yur=o("TFMobileBertForMultipleChoice"),Kur=o(" (MobileBERT model)"),Zur=l(),bT=a("li"),_8e=a("strong"),e1r=o("mpnet"),o1r=o(" \u2014 "),Mz=a("a"),r1r=o("TFMPNetForMultipleChoice"),t1r=o(" (MPNet model)"),a1r=l(),FT=a("li"),u8e=a("strong"),n1r=o("rembert"),s1r=o(" \u2014 "),Ez=a("a"),l1r=o("TFRemBertForMultipleChoice"),i1r=o(" (RemBERT model)"),d1r=l(),vT=a("li"),b8e=a("strong"),c1r=o("roberta"),f1r=o(" \u2014 "),Cz=a("a"),m1r=o("TFRobertaForMultipleChoice"),g1r=o(" (RoBERTa model)"),h1r=l(),TT=a("li"),F8e=a("strong"),p1r=o("roformer"),_1r=o(" \u2014 "),wz=a("a"),u1r=o("TFRoFormerForMultipleChoice"),b1r=o(" (RoFormer model)"),F1r=l(),MT=a("li"),v8e=a("strong"),v1r=o("xlm"),T1r=o(" \u2014 "),Az=a("a"),M1r=o("TFXLMForMultipleChoice"),E1r=o(" (XLM model)"),C1r=l(),ET=a("li"),T8e=a("strong"),w1r=o("xlm-roberta"),A1r=o(" \u2014 "),yz=a("a"),y1r=o("TFXLMRobertaForMultipleChoice"),L1r=o(" (XLM-RoBERTa model)"),x1r=l(),CT=a("li"),M8e=a("strong"),k1r=o("xlnet"),S1r=o(" \u2014 "),Lz=a("a"),R1r=o("TFXLNetForMultipleChoice"),B1r=o(" (XLNet model)"),P1r=l(),E8e=a("p"),$1r=o("Examples:"),I1r=l(),f(ny.$$.fragment),IBe=l(),qc=a("h2"),wT=a("a"),C8e=a("span"),f(sy.$$.fragment),q1r=l(),w8e=a("span"),N1r=o("TFAutoModelForTableQuestionAnswering"),qBe=l(),yr=a("div"),f(ly.$$.fragment),j1r=l(),Nc=a("p"),D1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xz=a("a"),G1r=o("from_pretrained()"),O1r=o(" class method or the "),kz=a("a"),V1r=o("from_config()"),X1r=o(` class
method.`),z1r=l(),iy=a("p"),Q1r=o("This class cannot be instantiated directly using "),A8e=a("code"),W1r=o("__init__()"),H1r=o(" (throws an error)."),U1r=l(),Tt=a("div"),f(dy.$$.fragment),J1r=l(),y8e=a("p"),Y1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),K1r=l(),jc=a("p"),Z1r=o(`Note:
Loading a model from its configuration file does `),L8e=a("strong"),e8r=o("not"),o8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),r8r=o("from_pretrained()"),t8r=o(" to load the model weights."),a8r=l(),x8e=a("p"),n8r=o("Examples:"),s8r=l(),f(cy.$$.fragment),l8r=l(),Mo=a("div"),f(fy.$$.fragment),i8r=l(),k8e=a("p"),d8r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),c8r=l(),Cn=a("p"),f8r=o("The model class to instantiate is selected based on the "),S8e=a("code"),m8r=o("model_type"),g8r=o(` property of the config object (either
passed as an argument or loaded from `),R8e=a("code"),h8r=o("pretrained_model_name_or_path"),p8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B8e=a("code"),_8r=o("pretrained_model_name_or_path"),u8r=o(":"),b8r=l(),P8e=a("ul"),AT=a("li"),$8e=a("strong"),F8r=o("tapas"),v8r=o(" \u2014 "),Rz=a("a"),T8r=o("TFTapasForQuestionAnswering"),M8r=o(" (TAPAS model)"),E8r=l(),I8e=a("p"),C8r=o("Examples:"),w8r=l(),f(my.$$.fragment),NBe=l(),Dc=a("h2"),yT=a("a"),q8e=a("span"),f(gy.$$.fragment),A8r=l(),N8e=a("span"),y8r=o("TFAutoModelForTokenClassification"),jBe=l(),Lr=a("div"),f(hy.$$.fragment),L8r=l(),Gc=a("p"),x8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=a("a"),k8r=o("from_pretrained()"),S8r=o(" class method or the "),Pz=a("a"),R8r=o("from_config()"),B8r=o(` class
method.`),P8r=l(),py=a("p"),$8r=o("This class cannot be instantiated directly using "),j8e=a("code"),I8r=o("__init__()"),q8r=o(" (throws an error)."),N8r=l(),Mt=a("div"),f(_y.$$.fragment),j8r=l(),D8e=a("p"),D8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G8r=l(),Oc=a("p"),O8r=o(`Note:
Loading a model from its configuration file does `),G8e=a("strong"),V8r=o("not"),X8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),z8r=o("from_pretrained()"),Q8r=o(" to load the model weights."),W8r=l(),O8e=a("p"),H8r=o("Examples:"),U8r=l(),f(uy.$$.fragment),J8r=l(),Eo=a("div"),f(by.$$.fragment),Y8r=l(),V8e=a("p"),K8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z8r=l(),wn=a("p"),ebr=o("The model class to instantiate is selected based on the "),X8e=a("code"),obr=o("model_type"),rbr=o(` property of the config object (either
passed as an argument or loaded from `),z8e=a("code"),tbr=o("pretrained_model_name_or_path"),abr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q8e=a("code"),nbr=o("pretrained_model_name_or_path"),sbr=o(":"),lbr=l(),Y=a("ul"),LT=a("li"),W8e=a("strong"),ibr=o("albert"),dbr=o(" \u2014 "),Iz=a("a"),cbr=o("TFAlbertForTokenClassification"),fbr=o(" (ALBERT model)"),mbr=l(),xT=a("li"),H8e=a("strong"),gbr=o("bert"),hbr=o(" \u2014 "),qz=a("a"),pbr=o("TFBertForTokenClassification"),_br=o(" (BERT model)"),ubr=l(),kT=a("li"),U8e=a("strong"),bbr=o("camembert"),Fbr=o(" \u2014 "),Nz=a("a"),vbr=o("TFCamembertForTokenClassification"),Tbr=o(" (CamemBERT model)"),Mbr=l(),ST=a("li"),J8e=a("strong"),Ebr=o("convbert"),Cbr=o(" \u2014 "),jz=a("a"),wbr=o("TFConvBertForTokenClassification"),Abr=o(" (ConvBERT model)"),ybr=l(),RT=a("li"),Y8e=a("strong"),Lbr=o("deberta"),xbr=o(" \u2014 "),Dz=a("a"),kbr=o("TFDebertaForTokenClassification"),Sbr=o(" (DeBERTa model)"),Rbr=l(),BT=a("li"),K8e=a("strong"),Bbr=o("deberta-v2"),Pbr=o(" \u2014 "),Gz=a("a"),$br=o("TFDebertaV2ForTokenClassification"),Ibr=o(" (DeBERTa-v2 model)"),qbr=l(),PT=a("li"),Z8e=a("strong"),Nbr=o("distilbert"),jbr=o(" \u2014 "),Oz=a("a"),Dbr=o("TFDistilBertForTokenClassification"),Gbr=o(" (DistilBERT model)"),Obr=l(),$T=a("li"),ebe=a("strong"),Vbr=o("electra"),Xbr=o(" \u2014 "),Vz=a("a"),zbr=o("TFElectraForTokenClassification"),Qbr=o(" (ELECTRA model)"),Wbr=l(),IT=a("li"),obe=a("strong"),Hbr=o("flaubert"),Ubr=o(" \u2014 "),Xz=a("a"),Jbr=o("TFFlaubertForTokenClassification"),Ybr=o(" (FlauBERT model)"),Kbr=l(),qT=a("li"),rbe=a("strong"),Zbr=o("funnel"),e2r=o(" \u2014 "),zz=a("a"),o2r=o("TFFunnelForTokenClassification"),r2r=o(" (Funnel Transformer model)"),t2r=l(),NT=a("li"),tbe=a("strong"),a2r=o("layoutlm"),n2r=o(" \u2014 "),Qz=a("a"),s2r=o("TFLayoutLMForTokenClassification"),l2r=o(" (LayoutLM model)"),i2r=l(),jT=a("li"),abe=a("strong"),d2r=o("longformer"),c2r=o(" \u2014 "),Wz=a("a"),f2r=o("TFLongformerForTokenClassification"),m2r=o(" (Longformer model)"),g2r=l(),DT=a("li"),nbe=a("strong"),h2r=o("mobilebert"),p2r=o(" \u2014 "),Hz=a("a"),_2r=o("TFMobileBertForTokenClassification"),u2r=o(" (MobileBERT model)"),b2r=l(),GT=a("li"),sbe=a("strong"),F2r=o("mpnet"),v2r=o(" \u2014 "),Uz=a("a"),T2r=o("TFMPNetForTokenClassification"),M2r=o(" (MPNet model)"),E2r=l(),OT=a("li"),lbe=a("strong"),C2r=o("rembert"),w2r=o(" \u2014 "),Jz=a("a"),A2r=o("TFRemBertForTokenClassification"),y2r=o(" (RemBERT model)"),L2r=l(),VT=a("li"),ibe=a("strong"),x2r=o("roberta"),k2r=o(" \u2014 "),Yz=a("a"),S2r=o("TFRobertaForTokenClassification"),R2r=o(" (RoBERTa model)"),B2r=l(),XT=a("li"),dbe=a("strong"),P2r=o("roformer"),$2r=o(" \u2014 "),Kz=a("a"),I2r=o("TFRoFormerForTokenClassification"),q2r=o(" (RoFormer model)"),N2r=l(),zT=a("li"),cbe=a("strong"),j2r=o("xlm"),D2r=o(" \u2014 "),Zz=a("a"),G2r=o("TFXLMForTokenClassification"),O2r=o(" (XLM model)"),V2r=l(),QT=a("li"),fbe=a("strong"),X2r=o("xlm-roberta"),z2r=o(" \u2014 "),eQ=a("a"),Q2r=o("TFXLMRobertaForTokenClassification"),W2r=o(" (XLM-RoBERTa model)"),H2r=l(),WT=a("li"),mbe=a("strong"),U2r=o("xlnet"),J2r=o(" \u2014 "),oQ=a("a"),Y2r=o("TFXLNetForTokenClassification"),K2r=o(" (XLNet model)"),Z2r=l(),gbe=a("p"),e6r=o("Examples:"),o6r=l(),f(Fy.$$.fragment),DBe=l(),Vc=a("h2"),HT=a("a"),hbe=a("span"),f(vy.$$.fragment),r6r=l(),pbe=a("span"),t6r=o("TFAutoModelForQuestionAnswering"),GBe=l(),xr=a("div"),f(Ty.$$.fragment),a6r=l(),Xc=a("p"),n6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rQ=a("a"),s6r=o("from_pretrained()"),l6r=o(" class method or the "),tQ=a("a"),i6r=o("from_config()"),d6r=o(` class
method.`),c6r=l(),My=a("p"),f6r=o("This class cannot be instantiated directly using "),_be=a("code"),m6r=o("__init__()"),g6r=o(" (throws an error)."),h6r=l(),Et=a("div"),f(Ey.$$.fragment),p6r=l(),ube=a("p"),_6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),u6r=l(),zc=a("p"),b6r=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),F6r=o("not"),v6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),T6r=o("from_pretrained()"),M6r=o(" to load the model weights."),E6r=l(),Fbe=a("p"),C6r=o("Examples:"),w6r=l(),f(Cy.$$.fragment),A6r=l(),Co=a("div"),f(wy.$$.fragment),y6r=l(),vbe=a("p"),L6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x6r=l(),An=a("p"),k6r=o("The model class to instantiate is selected based on the "),Tbe=a("code"),S6r=o("model_type"),R6r=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),B6r=o("pretrained_model_name_or_path"),P6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),$6r=o("pretrained_model_name_or_path"),I6r=o(":"),q6r=l(),K=a("ul"),UT=a("li"),Cbe=a("strong"),N6r=o("albert"),j6r=o(" \u2014 "),nQ=a("a"),D6r=o("TFAlbertForQuestionAnswering"),G6r=o(" (ALBERT model)"),O6r=l(),JT=a("li"),wbe=a("strong"),V6r=o("bert"),X6r=o(" \u2014 "),sQ=a("a"),z6r=o("TFBertForQuestionAnswering"),Q6r=o(" (BERT model)"),W6r=l(),YT=a("li"),Abe=a("strong"),H6r=o("camembert"),U6r=o(" \u2014 "),lQ=a("a"),J6r=o("TFCamembertForQuestionAnswering"),Y6r=o(" (CamemBERT model)"),K6r=l(),KT=a("li"),ybe=a("strong"),Z6r=o("convbert"),eFr=o(" \u2014 "),iQ=a("a"),oFr=o("TFConvBertForQuestionAnswering"),rFr=o(" (ConvBERT model)"),tFr=l(),ZT=a("li"),Lbe=a("strong"),aFr=o("deberta"),nFr=o(" \u2014 "),dQ=a("a"),sFr=o("TFDebertaForQuestionAnswering"),lFr=o(" (DeBERTa model)"),iFr=l(),eM=a("li"),xbe=a("strong"),dFr=o("deberta-v2"),cFr=o(" \u2014 "),cQ=a("a"),fFr=o("TFDebertaV2ForQuestionAnswering"),mFr=o(" (DeBERTa-v2 model)"),gFr=l(),oM=a("li"),kbe=a("strong"),hFr=o("distilbert"),pFr=o(" \u2014 "),fQ=a("a"),_Fr=o("TFDistilBertForQuestionAnswering"),uFr=o(" (DistilBERT model)"),bFr=l(),rM=a("li"),Sbe=a("strong"),FFr=o("electra"),vFr=o(" \u2014 "),mQ=a("a"),TFr=o("TFElectraForQuestionAnswering"),MFr=o(" (ELECTRA model)"),EFr=l(),tM=a("li"),Rbe=a("strong"),CFr=o("flaubert"),wFr=o(" \u2014 "),gQ=a("a"),AFr=o("TFFlaubertForQuestionAnsweringSimple"),yFr=o(" (FlauBERT model)"),LFr=l(),aM=a("li"),Bbe=a("strong"),xFr=o("funnel"),kFr=o(" \u2014 "),hQ=a("a"),SFr=o("TFFunnelForQuestionAnswering"),RFr=o(" (Funnel Transformer model)"),BFr=l(),nM=a("li"),Pbe=a("strong"),PFr=o("gptj"),$Fr=o(" \u2014 "),pQ=a("a"),IFr=o("TFGPTJForQuestionAnswering"),qFr=o(" (GPT-J model)"),NFr=l(),sM=a("li"),$be=a("strong"),jFr=o("longformer"),DFr=o(" \u2014 "),_Q=a("a"),GFr=o("TFLongformerForQuestionAnswering"),OFr=o(" (Longformer model)"),VFr=l(),lM=a("li"),Ibe=a("strong"),XFr=o("mobilebert"),zFr=o(" \u2014 "),uQ=a("a"),QFr=o("TFMobileBertForQuestionAnswering"),WFr=o(" (MobileBERT model)"),HFr=l(),iM=a("li"),qbe=a("strong"),UFr=o("mpnet"),JFr=o(" \u2014 "),bQ=a("a"),YFr=o("TFMPNetForQuestionAnswering"),KFr=o(" (MPNet model)"),ZFr=l(),dM=a("li"),Nbe=a("strong"),evr=o("rembert"),ovr=o(" \u2014 "),FQ=a("a"),rvr=o("TFRemBertForQuestionAnswering"),tvr=o(" (RemBERT model)"),avr=l(),cM=a("li"),jbe=a("strong"),nvr=o("roberta"),svr=o(" \u2014 "),vQ=a("a"),lvr=o("TFRobertaForQuestionAnswering"),ivr=o(" (RoBERTa model)"),dvr=l(),fM=a("li"),Dbe=a("strong"),cvr=o("roformer"),fvr=o(" \u2014 "),TQ=a("a"),mvr=o("TFRoFormerForQuestionAnswering"),gvr=o(" (RoFormer model)"),hvr=l(),mM=a("li"),Gbe=a("strong"),pvr=o("xlm"),_vr=o(" \u2014 "),MQ=a("a"),uvr=o("TFXLMForQuestionAnsweringSimple"),bvr=o(" (XLM model)"),Fvr=l(),gM=a("li"),Obe=a("strong"),vvr=o("xlm-roberta"),Tvr=o(" \u2014 "),EQ=a("a"),Mvr=o("TFXLMRobertaForQuestionAnswering"),Evr=o(" (XLM-RoBERTa model)"),Cvr=l(),hM=a("li"),Vbe=a("strong"),wvr=o("xlnet"),Avr=o(" \u2014 "),CQ=a("a"),yvr=o("TFXLNetForQuestionAnsweringSimple"),Lvr=o(" (XLNet model)"),xvr=l(),Xbe=a("p"),kvr=o("Examples:"),Svr=l(),f(Ay.$$.fragment),OBe=l(),Qc=a("h2"),pM=a("a"),zbe=a("span"),f(yy.$$.fragment),Rvr=l(),Qbe=a("span"),Bvr=o("TFAutoModelForVision2Seq"),VBe=l(),kr=a("div"),f(Ly.$$.fragment),Pvr=l(),Wc=a("p"),$vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wQ=a("a"),Ivr=o("from_pretrained()"),qvr=o(" class method or the "),AQ=a("a"),Nvr=o("from_config()"),jvr=o(` class
method.`),Dvr=l(),xy=a("p"),Gvr=o("This class cannot be instantiated directly using "),Wbe=a("code"),Ovr=o("__init__()"),Vvr=o(" (throws an error)."),Xvr=l(),Ct=a("div"),f(ky.$$.fragment),zvr=l(),Hbe=a("p"),Qvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wvr=l(),Hc=a("p"),Hvr=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),Uvr=o("not"),Jvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" to load the model weights."),Zvr=l(),Jbe=a("p"),e0r=o("Examples:"),o0r=l(),f(Sy.$$.fragment),r0r=l(),wo=a("div"),f(Ry.$$.fragment),t0r=l(),Ybe=a("p"),a0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),n0r=l(),yn=a("p"),s0r=o("The model class to instantiate is selected based on the "),Kbe=a("code"),l0r=o("model_type"),i0r=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),d0r=o("pretrained_model_name_or_path"),c0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),f0r=o("pretrained_model_name_or_path"),m0r=o(":"),g0r=l(),o2e=a("ul"),_M=a("li"),r2e=a("strong"),h0r=o("vision-encoder-decoder"),p0r=o(" \u2014 "),LQ=a("a"),_0r=o("TFVisionEncoderDecoderModel"),u0r=o(" (Vision Encoder decoder model)"),b0r=l(),t2e=a("p"),F0r=o("Examples:"),v0r=l(),f(By.$$.fragment),XBe=l(),Uc=a("h2"),uM=a("a"),a2e=a("span"),f(Py.$$.fragment),T0r=l(),n2e=a("span"),M0r=o("TFAutoModelForSpeechSeq2Seq"),zBe=l(),Sr=a("div"),f($y.$$.fragment),E0r=l(),Jc=a("p"),C0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xQ=a("a"),w0r=o("from_pretrained()"),A0r=o(" class method or the "),kQ=a("a"),y0r=o("from_config()"),L0r=o(` class
method.`),x0r=l(),Iy=a("p"),k0r=o("This class cannot be instantiated directly using "),s2e=a("code"),S0r=o("__init__()"),R0r=o(" (throws an error)."),B0r=l(),wt=a("div"),f(qy.$$.fragment),P0r=l(),l2e=a("p"),$0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I0r=l(),Yc=a("p"),q0r=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),N0r=o("not"),j0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),D0r=o("from_pretrained()"),G0r=o(" to load the model weights."),O0r=l(),d2e=a("p"),V0r=o("Examples:"),X0r=l(),f(Ny.$$.fragment),z0r=l(),Ao=a("div"),f(jy.$$.fragment),Q0r=l(),c2e=a("p"),W0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),H0r=l(),Ln=a("p"),U0r=o("The model class to instantiate is selected based on the "),f2e=a("code"),J0r=o("model_type"),Y0r=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),K0r=o("pretrained_model_name_or_path"),Z0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(":"),rTr=l(),h2e=a("ul"),bM=a("li"),p2e=a("strong"),tTr=o("speech_to_text"),aTr=o(" \u2014 "),RQ=a("a"),nTr=o("TFSpeech2TextForConditionalGeneration"),sTr=o(" (Speech2Text model)"),lTr=l(),_2e=a("p"),iTr=o("Examples:"),dTr=l(),f(Dy.$$.fragment),QBe=l(),Kc=a("h2"),FM=a("a"),u2e=a("span"),f(Gy.$$.fragment),cTr=l(),b2e=a("span"),fTr=o("FlaxAutoModel"),WBe=l(),Rr=a("div"),f(Oy.$$.fragment),mTr=l(),Zc=a("p"),gTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BQ=a("a"),hTr=o("from_pretrained()"),pTr=o(" class method or the "),PQ=a("a"),_Tr=o("from_config()"),uTr=o(` class
method.`),bTr=l(),Vy=a("p"),FTr=o("This class cannot be instantiated directly using "),F2e=a("code"),vTr=o("__init__()"),TTr=o(" (throws an error)."),MTr=l(),At=a("div"),f(Xy.$$.fragment),ETr=l(),v2e=a("p"),CTr=o("Instantiates one of the base model classes of the library from a configuration."),wTr=l(),ef=a("p"),ATr=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),yTr=o("not"),LTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),xTr=o("from_pretrained()"),kTr=o(" to load the model weights."),STr=l(),M2e=a("p"),RTr=o("Examples:"),BTr=l(),f(zy.$$.fragment),PTr=l(),yo=a("div"),f(Qy.$$.fragment),$Tr=l(),E2e=a("p"),ITr=o("Instantiate one of the base model classes of the library from a pretrained model."),qTr=l(),xn=a("p"),NTr=o("The model class to instantiate is selected based on the "),C2e=a("code"),jTr=o("model_type"),DTr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),GTr=o("pretrained_model_name_or_path"),OTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),VTr=o("pretrained_model_name_or_path"),XTr=o(":"),zTr=l(),z=a("ul"),vM=a("li"),y2e=a("strong"),QTr=o("albert"),WTr=o(" \u2014 "),IQ=a("a"),HTr=o("FlaxAlbertModel"),UTr=o(" (ALBERT model)"),JTr=l(),TM=a("li"),L2e=a("strong"),YTr=o("bart"),KTr=o(" \u2014 "),qQ=a("a"),ZTr=o("FlaxBartModel"),eMr=o(" (BART model)"),oMr=l(),MM=a("li"),x2e=a("strong"),rMr=o("beit"),tMr=o(" \u2014 "),NQ=a("a"),aMr=o("FlaxBeitModel"),nMr=o(" (BEiT model)"),sMr=l(),EM=a("li"),k2e=a("strong"),lMr=o("bert"),iMr=o(" \u2014 "),jQ=a("a"),dMr=o("FlaxBertModel"),cMr=o(" (BERT model)"),fMr=l(),CM=a("li"),S2e=a("strong"),mMr=o("big_bird"),gMr=o(" \u2014 "),DQ=a("a"),hMr=o("FlaxBigBirdModel"),pMr=o(" (BigBird model)"),_Mr=l(),wM=a("li"),R2e=a("strong"),uMr=o("blenderbot"),bMr=o(" \u2014 "),GQ=a("a"),FMr=o("FlaxBlenderbotModel"),vMr=o(" (Blenderbot model)"),TMr=l(),AM=a("li"),B2e=a("strong"),MMr=o("blenderbot-small"),EMr=o(" \u2014 "),OQ=a("a"),CMr=o("FlaxBlenderbotSmallModel"),wMr=o(" (BlenderbotSmall model)"),AMr=l(),yM=a("li"),P2e=a("strong"),yMr=o("clip"),LMr=o(" \u2014 "),VQ=a("a"),xMr=o("FlaxCLIPModel"),kMr=o(" (CLIP model)"),SMr=l(),LM=a("li"),$2e=a("strong"),RMr=o("distilbert"),BMr=o(" \u2014 "),XQ=a("a"),PMr=o("FlaxDistilBertModel"),$Mr=o(" (DistilBERT model)"),IMr=l(),xM=a("li"),I2e=a("strong"),qMr=o("electra"),NMr=o(" \u2014 "),zQ=a("a"),jMr=o("FlaxElectraModel"),DMr=o(" (ELECTRA model)"),GMr=l(),kM=a("li"),q2e=a("strong"),OMr=o("gpt2"),VMr=o(" \u2014 "),QQ=a("a"),XMr=o("FlaxGPT2Model"),zMr=o(" (OpenAI GPT-2 model)"),QMr=l(),SM=a("li"),N2e=a("strong"),WMr=o("gpt_neo"),HMr=o(" \u2014 "),WQ=a("a"),UMr=o("FlaxGPTNeoModel"),JMr=o(" (GPT Neo model)"),YMr=l(),RM=a("li"),j2e=a("strong"),KMr=o("gptj"),ZMr=o(" \u2014 "),HQ=a("a"),e4r=o("FlaxGPTJModel"),o4r=o(" (GPT-J model)"),r4r=l(),BM=a("li"),D2e=a("strong"),t4r=o("marian"),a4r=o(" \u2014 "),UQ=a("a"),n4r=o("FlaxMarianModel"),s4r=o(" (Marian model)"),l4r=l(),PM=a("li"),G2e=a("strong"),i4r=o("mbart"),d4r=o(" \u2014 "),JQ=a("a"),c4r=o("FlaxMBartModel"),f4r=o(" (mBART model)"),m4r=l(),$M=a("li"),O2e=a("strong"),g4r=o("mt5"),h4r=o(" \u2014 "),YQ=a("a"),p4r=o("FlaxMT5Model"),_4r=o(" (mT5 model)"),u4r=l(),IM=a("li"),V2e=a("strong"),b4r=o("pegasus"),F4r=o(" \u2014 "),KQ=a("a"),v4r=o("FlaxPegasusModel"),T4r=o(" (Pegasus model)"),M4r=l(),qM=a("li"),X2e=a("strong"),E4r=o("roberta"),C4r=o(" \u2014 "),ZQ=a("a"),w4r=o("FlaxRobertaModel"),A4r=o(" (RoBERTa model)"),y4r=l(),NM=a("li"),z2e=a("strong"),L4r=o("roformer"),x4r=o(" \u2014 "),eW=a("a"),k4r=o("FlaxRoFormerModel"),S4r=o(" (RoFormer model)"),R4r=l(),jM=a("li"),Q2e=a("strong"),B4r=o("t5"),P4r=o(" \u2014 "),oW=a("a"),$4r=o("FlaxT5Model"),I4r=o(" (T5 model)"),q4r=l(),DM=a("li"),W2e=a("strong"),N4r=o("vision-text-dual-encoder"),j4r=o(" \u2014 "),rW=a("a"),D4r=o("FlaxVisionTextDualEncoderModel"),G4r=o(" (VisionTextDualEncoder model)"),O4r=l(),GM=a("li"),H2e=a("strong"),V4r=o("vit"),X4r=o(" \u2014 "),tW=a("a"),z4r=o("FlaxViTModel"),Q4r=o(" (ViT model)"),W4r=l(),OM=a("li"),U2e=a("strong"),H4r=o("wav2vec2"),U4r=o(" \u2014 "),aW=a("a"),J4r=o("FlaxWav2Vec2Model"),Y4r=o(" (Wav2Vec2 model)"),K4r=l(),VM=a("li"),J2e=a("strong"),Z4r=o("xglm"),eEr=o(" \u2014 "),nW=a("a"),oEr=o("FlaxXGLMModel"),rEr=o(" (XGLM model)"),tEr=l(),XM=a("li"),Y2e=a("strong"),aEr=o("xlm-roberta"),nEr=o(" \u2014 "),sW=a("a"),sEr=o("FlaxXLMRobertaModel"),lEr=o(" (XLM-RoBERTa model)"),iEr=l(),K2e=a("p"),dEr=o("Examples:"),cEr=l(),f(Wy.$$.fragment),HBe=l(),of=a("h2"),zM=a("a"),Z2e=a("span"),f(Hy.$$.fragment),fEr=l(),e6e=a("span"),mEr=o("FlaxAutoModelForCausalLM"),UBe=l(),Br=a("div"),f(Uy.$$.fragment),gEr=l(),rf=a("p"),hEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lW=a("a"),pEr=o("from_pretrained()"),_Er=o(" class method or the "),iW=a("a"),uEr=o("from_config()"),bEr=o(` class
method.`),FEr=l(),Jy=a("p"),vEr=o("This class cannot be instantiated directly using "),o6e=a("code"),TEr=o("__init__()"),MEr=o(" (throws an error)."),EEr=l(),yt=a("div"),f(Yy.$$.fragment),CEr=l(),r6e=a("p"),wEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AEr=l(),tf=a("p"),yEr=o(`Note:
Loading a model from its configuration file does `),t6e=a("strong"),LEr=o("not"),xEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),kEr=o("from_pretrained()"),SEr=o(" to load the model weights."),REr=l(),a6e=a("p"),BEr=o("Examples:"),PEr=l(),f(Ky.$$.fragment),$Er=l(),Lo=a("div"),f(Zy.$$.fragment),IEr=l(),n6e=a("p"),qEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NEr=l(),kn=a("p"),jEr=o("The model class to instantiate is selected based on the "),s6e=a("code"),DEr=o("model_type"),GEr=o(` property of the config object (either
passed as an argument or loaded from `),l6e=a("code"),OEr=o("pretrained_model_name_or_path"),VEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=a("code"),XEr=o("pretrained_model_name_or_path"),zEr=o(":"),QEr=l(),ca=a("ul"),QM=a("li"),d6e=a("strong"),WEr=o("bart"),HEr=o(" \u2014 "),cW=a("a"),UEr=o("FlaxBartForCausalLM"),JEr=o(" (BART model)"),YEr=l(),WM=a("li"),c6e=a("strong"),KEr=o("gpt2"),ZEr=o(" \u2014 "),fW=a("a"),e5r=o("FlaxGPT2LMHeadModel"),o5r=o(" (OpenAI GPT-2 model)"),r5r=l(),HM=a("li"),f6e=a("strong"),t5r=o("gpt_neo"),a5r=o(" \u2014 "),mW=a("a"),n5r=o("FlaxGPTNeoForCausalLM"),s5r=o(" (GPT Neo model)"),l5r=l(),UM=a("li"),m6e=a("strong"),i5r=o("gptj"),d5r=o(" \u2014 "),gW=a("a"),c5r=o("FlaxGPTJForCausalLM"),f5r=o(" (GPT-J model)"),m5r=l(),JM=a("li"),g6e=a("strong"),g5r=o("xglm"),h5r=o(" \u2014 "),hW=a("a"),p5r=o("FlaxXGLMForCausalLM"),_5r=o(" (XGLM model)"),u5r=l(),h6e=a("p"),b5r=o("Examples:"),F5r=l(),f(eL.$$.fragment),JBe=l(),af=a("h2"),YM=a("a"),p6e=a("span"),f(oL.$$.fragment),v5r=l(),_6e=a("span"),T5r=o("FlaxAutoModelForPreTraining"),YBe=l(),Pr=a("div"),f(rL.$$.fragment),M5r=l(),nf=a("p"),E5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=a("a"),C5r=o("from_pretrained()"),w5r=o(" class method or the "),_W=a("a"),A5r=o("from_config()"),y5r=o(` class
method.`),L5r=l(),tL=a("p"),x5r=o("This class cannot be instantiated directly using "),u6e=a("code"),k5r=o("__init__()"),S5r=o(" (throws an error)."),R5r=l(),Lt=a("div"),f(aL.$$.fragment),B5r=l(),b6e=a("p"),P5r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$5r=l(),sf=a("p"),I5r=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),q5r=o("not"),N5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),j5r=o("from_pretrained()"),D5r=o(" to load the model weights."),G5r=l(),v6e=a("p"),O5r=o("Examples:"),V5r=l(),f(nL.$$.fragment),X5r=l(),xo=a("div"),f(sL.$$.fragment),z5r=l(),T6e=a("p"),Q5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W5r=l(),Sn=a("p"),H5r=o("The model class to instantiate is selected based on the "),M6e=a("code"),U5r=o("model_type"),J5r=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),Y5r=o("pretrained_model_name_or_path"),K5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),Z5r=o("pretrained_model_name_or_path"),e3r=o(":"),o3r=l(),me=a("ul"),KM=a("li"),w6e=a("strong"),r3r=o("albert"),t3r=o(" \u2014 "),bW=a("a"),a3r=o("FlaxAlbertForPreTraining"),n3r=o(" (ALBERT model)"),s3r=l(),ZM=a("li"),A6e=a("strong"),l3r=o("bart"),i3r=o(" \u2014 "),FW=a("a"),d3r=o("FlaxBartForConditionalGeneration"),c3r=o(" (BART model)"),f3r=l(),e4=a("li"),y6e=a("strong"),m3r=o("bert"),g3r=o(" \u2014 "),vW=a("a"),h3r=o("FlaxBertForPreTraining"),p3r=o(" (BERT model)"),_3r=l(),o4=a("li"),L6e=a("strong"),u3r=o("big_bird"),b3r=o(" \u2014 "),TW=a("a"),F3r=o("FlaxBigBirdForPreTraining"),v3r=o(" (BigBird model)"),T3r=l(),r4=a("li"),x6e=a("strong"),M3r=o("electra"),E3r=o(" \u2014 "),MW=a("a"),C3r=o("FlaxElectraForPreTraining"),w3r=o(" (ELECTRA model)"),A3r=l(),t4=a("li"),k6e=a("strong"),y3r=o("mbart"),L3r=o(" \u2014 "),EW=a("a"),x3r=o("FlaxMBartForConditionalGeneration"),k3r=o(" (mBART model)"),S3r=l(),a4=a("li"),S6e=a("strong"),R3r=o("mt5"),B3r=o(" \u2014 "),CW=a("a"),P3r=o("FlaxMT5ForConditionalGeneration"),$3r=o(" (mT5 model)"),I3r=l(),n4=a("li"),R6e=a("strong"),q3r=o("roberta"),N3r=o(" \u2014 "),wW=a("a"),j3r=o("FlaxRobertaForMaskedLM"),D3r=o(" (RoBERTa model)"),G3r=l(),s4=a("li"),B6e=a("strong"),O3r=o("roformer"),V3r=o(" \u2014 "),AW=a("a"),X3r=o("FlaxRoFormerForMaskedLM"),z3r=o(" (RoFormer model)"),Q3r=l(),l4=a("li"),P6e=a("strong"),W3r=o("t5"),H3r=o(" \u2014 "),yW=a("a"),U3r=o("FlaxT5ForConditionalGeneration"),J3r=o(" (T5 model)"),Y3r=l(),i4=a("li"),$6e=a("strong"),K3r=o("wav2vec2"),Z3r=o(" \u2014 "),LW=a("a"),eCr=o("FlaxWav2Vec2ForPreTraining"),oCr=o(" (Wav2Vec2 model)"),rCr=l(),d4=a("li"),I6e=a("strong"),tCr=o("xlm-roberta"),aCr=o(" \u2014 "),xW=a("a"),nCr=o("FlaxXLMRobertaForMaskedLM"),sCr=o(" (XLM-RoBERTa model)"),lCr=l(),q6e=a("p"),iCr=o("Examples:"),dCr=l(),f(lL.$$.fragment),KBe=l(),lf=a("h2"),c4=a("a"),N6e=a("span"),f(iL.$$.fragment),cCr=l(),j6e=a("span"),fCr=o("FlaxAutoModelForMaskedLM"),ZBe=l(),$r=a("div"),f(dL.$$.fragment),mCr=l(),df=a("p"),gCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kW=a("a"),hCr=o("from_pretrained()"),pCr=o(" class method or the "),SW=a("a"),_Cr=o("from_config()"),uCr=o(` class
method.`),bCr=l(),cL=a("p"),FCr=o("This class cannot be instantiated directly using "),D6e=a("code"),vCr=o("__init__()"),TCr=o(" (throws an error)."),MCr=l(),xt=a("div"),f(fL.$$.fragment),ECr=l(),G6e=a("p"),CCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wCr=l(),cf=a("p"),ACr=o(`Note:
Loading a model from its configuration file does `),O6e=a("strong"),yCr=o("not"),LCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),xCr=o("from_pretrained()"),kCr=o(" to load the model weights."),SCr=l(),V6e=a("p"),RCr=o("Examples:"),BCr=l(),f(mL.$$.fragment),PCr=l(),ko=a("div"),f(gL.$$.fragment),$Cr=l(),X6e=a("p"),ICr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qCr=l(),Rn=a("p"),NCr=o("The model class to instantiate is selected based on the "),z6e=a("code"),jCr=o("model_type"),DCr=o(` property of the config object (either
passed as an argument or loaded from `),Q6e=a("code"),GCr=o("pretrained_model_name_or_path"),OCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=a("code"),VCr=o("pretrained_model_name_or_path"),XCr=o(":"),zCr=l(),Fe=a("ul"),f4=a("li"),H6e=a("strong"),QCr=o("albert"),WCr=o(" \u2014 "),BW=a("a"),HCr=o("FlaxAlbertForMaskedLM"),UCr=o(" (ALBERT model)"),JCr=l(),m4=a("li"),U6e=a("strong"),YCr=o("bart"),KCr=o(" \u2014 "),PW=a("a"),ZCr=o("FlaxBartForConditionalGeneration"),ewr=o(" (BART model)"),owr=l(),g4=a("li"),J6e=a("strong"),rwr=o("bert"),twr=o(" \u2014 "),$W=a("a"),awr=o("FlaxBertForMaskedLM"),nwr=o(" (BERT model)"),swr=l(),h4=a("li"),Y6e=a("strong"),lwr=o("big_bird"),iwr=o(" \u2014 "),IW=a("a"),dwr=o("FlaxBigBirdForMaskedLM"),cwr=o(" (BigBird model)"),fwr=l(),p4=a("li"),K6e=a("strong"),mwr=o("distilbert"),gwr=o(" \u2014 "),qW=a("a"),hwr=o("FlaxDistilBertForMaskedLM"),pwr=o(" (DistilBERT model)"),_wr=l(),_4=a("li"),Z6e=a("strong"),uwr=o("electra"),bwr=o(" \u2014 "),NW=a("a"),Fwr=o("FlaxElectraForMaskedLM"),vwr=o(" (ELECTRA model)"),Twr=l(),u4=a("li"),eFe=a("strong"),Mwr=o("mbart"),Ewr=o(" \u2014 "),jW=a("a"),Cwr=o("FlaxMBartForConditionalGeneration"),wwr=o(" (mBART model)"),Awr=l(),b4=a("li"),oFe=a("strong"),ywr=o("roberta"),Lwr=o(" \u2014 "),DW=a("a"),xwr=o("FlaxRobertaForMaskedLM"),kwr=o(" (RoBERTa model)"),Swr=l(),F4=a("li"),rFe=a("strong"),Rwr=o("roformer"),Bwr=o(" \u2014 "),GW=a("a"),Pwr=o("FlaxRoFormerForMaskedLM"),$wr=o(" (RoFormer model)"),Iwr=l(),v4=a("li"),tFe=a("strong"),qwr=o("xlm-roberta"),Nwr=o(" \u2014 "),OW=a("a"),jwr=o("FlaxXLMRobertaForMaskedLM"),Dwr=o(" (XLM-RoBERTa model)"),Gwr=l(),aFe=a("p"),Owr=o("Examples:"),Vwr=l(),f(hL.$$.fragment),ePe=l(),ff=a("h2"),T4=a("a"),nFe=a("span"),f(pL.$$.fragment),Xwr=l(),sFe=a("span"),zwr=o("FlaxAutoModelForSeq2SeqLM"),oPe=l(),Ir=a("div"),f(_L.$$.fragment),Qwr=l(),mf=a("p"),Wwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VW=a("a"),Hwr=o("from_pretrained()"),Uwr=o(" class method or the "),XW=a("a"),Jwr=o("from_config()"),Ywr=o(` class
method.`),Kwr=l(),uL=a("p"),Zwr=o("This class cannot be instantiated directly using "),lFe=a("code"),eAr=o("__init__()"),oAr=o(" (throws an error)."),rAr=l(),kt=a("div"),f(bL.$$.fragment),tAr=l(),iFe=a("p"),aAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nAr=l(),gf=a("p"),sAr=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),lAr=o("not"),iAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),dAr=o("from_pretrained()"),cAr=o(" to load the model weights."),fAr=l(),cFe=a("p"),mAr=o("Examples:"),gAr=l(),f(FL.$$.fragment),hAr=l(),So=a("div"),f(vL.$$.fragment),pAr=l(),fFe=a("p"),_Ar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uAr=l(),Bn=a("p"),bAr=o("The model class to instantiate is selected based on the "),mFe=a("code"),FAr=o("model_type"),vAr=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),TAr=o("pretrained_model_name_or_path"),MAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),EAr=o("pretrained_model_name_or_path"),CAr=o(":"),wAr=l(),Ee=a("ul"),M4=a("li"),pFe=a("strong"),AAr=o("bart"),yAr=o(" \u2014 "),QW=a("a"),LAr=o("FlaxBartForConditionalGeneration"),xAr=o(" (BART model)"),kAr=l(),E4=a("li"),_Fe=a("strong"),SAr=o("blenderbot"),RAr=o(" \u2014 "),WW=a("a"),BAr=o("FlaxBlenderbotForConditionalGeneration"),PAr=o(" (Blenderbot model)"),$Ar=l(),C4=a("li"),uFe=a("strong"),IAr=o("blenderbot-small"),qAr=o(" \u2014 "),HW=a("a"),NAr=o("FlaxBlenderbotSmallForConditionalGeneration"),jAr=o(" (BlenderbotSmall model)"),DAr=l(),w4=a("li"),bFe=a("strong"),GAr=o("encoder-decoder"),OAr=o(" \u2014 "),UW=a("a"),VAr=o("FlaxEncoderDecoderModel"),XAr=o(" (Encoder decoder model)"),zAr=l(),A4=a("li"),FFe=a("strong"),QAr=o("marian"),WAr=o(" \u2014 "),JW=a("a"),HAr=o("FlaxMarianMTModel"),UAr=o(" (Marian model)"),JAr=l(),y4=a("li"),vFe=a("strong"),YAr=o("mbart"),KAr=o(" \u2014 "),YW=a("a"),ZAr=o("FlaxMBartForConditionalGeneration"),eyr=o(" (mBART model)"),oyr=l(),L4=a("li"),TFe=a("strong"),ryr=o("mt5"),tyr=o(" \u2014 "),KW=a("a"),ayr=o("FlaxMT5ForConditionalGeneration"),nyr=o(" (mT5 model)"),syr=l(),x4=a("li"),MFe=a("strong"),lyr=o("pegasus"),iyr=o(" \u2014 "),ZW=a("a"),dyr=o("FlaxPegasusForConditionalGeneration"),cyr=o(" (Pegasus model)"),fyr=l(),k4=a("li"),EFe=a("strong"),myr=o("t5"),gyr=o(" \u2014 "),eH=a("a"),hyr=o("FlaxT5ForConditionalGeneration"),pyr=o(" (T5 model)"),_yr=l(),CFe=a("p"),uyr=o("Examples:"),byr=l(),f(TL.$$.fragment),rPe=l(),hf=a("h2"),S4=a("a"),wFe=a("span"),f(ML.$$.fragment),Fyr=l(),AFe=a("span"),vyr=o("FlaxAutoModelForSequenceClassification"),tPe=l(),qr=a("div"),f(EL.$$.fragment),Tyr=l(),pf=a("p"),Myr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oH=a("a"),Eyr=o("from_pretrained()"),Cyr=o(" class method or the "),rH=a("a"),wyr=o("from_config()"),Ayr=o(` class
method.`),yyr=l(),CL=a("p"),Lyr=o("This class cannot be instantiated directly using "),yFe=a("code"),xyr=o("__init__()"),kyr=o(" (throws an error)."),Syr=l(),St=a("div"),f(wL.$$.fragment),Ryr=l(),LFe=a("p"),Byr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Pyr=l(),_f=a("p"),$yr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),Iyr=o("not"),qyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),Nyr=o("from_pretrained()"),jyr=o(" to load the model weights."),Dyr=l(),kFe=a("p"),Gyr=o("Examples:"),Oyr=l(),f(AL.$$.fragment),Vyr=l(),Ro=a("div"),f(yL.$$.fragment),Xyr=l(),SFe=a("p"),zyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qyr=l(),Pn=a("p"),Wyr=o("The model class to instantiate is selected based on the "),RFe=a("code"),Hyr=o("model_type"),Uyr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),Kyr=o("pretrained_model_name_or_path"),Zyr=o(":"),eLr=l(),ve=a("ul"),R4=a("li"),$Fe=a("strong"),oLr=o("albert"),rLr=o(" \u2014 "),aH=a("a"),tLr=o("FlaxAlbertForSequenceClassification"),aLr=o(" (ALBERT model)"),nLr=l(),B4=a("li"),IFe=a("strong"),sLr=o("bart"),lLr=o(" \u2014 "),nH=a("a"),iLr=o("FlaxBartForSequenceClassification"),dLr=o(" (BART model)"),cLr=l(),P4=a("li"),qFe=a("strong"),fLr=o("bert"),mLr=o(" \u2014 "),sH=a("a"),gLr=o("FlaxBertForSequenceClassification"),hLr=o(" (BERT model)"),pLr=l(),$4=a("li"),NFe=a("strong"),_Lr=o("big_bird"),uLr=o(" \u2014 "),lH=a("a"),bLr=o("FlaxBigBirdForSequenceClassification"),FLr=o(" (BigBird model)"),vLr=l(),I4=a("li"),jFe=a("strong"),TLr=o("distilbert"),MLr=o(" \u2014 "),iH=a("a"),ELr=o("FlaxDistilBertForSequenceClassification"),CLr=o(" (DistilBERT model)"),wLr=l(),q4=a("li"),DFe=a("strong"),ALr=o("electra"),yLr=o(" \u2014 "),dH=a("a"),LLr=o("FlaxElectraForSequenceClassification"),xLr=o(" (ELECTRA model)"),kLr=l(),N4=a("li"),GFe=a("strong"),SLr=o("mbart"),RLr=o(" \u2014 "),cH=a("a"),BLr=o("FlaxMBartForSequenceClassification"),PLr=o(" (mBART model)"),$Lr=l(),j4=a("li"),OFe=a("strong"),ILr=o("roberta"),qLr=o(" \u2014 "),fH=a("a"),NLr=o("FlaxRobertaForSequenceClassification"),jLr=o(" (RoBERTa model)"),DLr=l(),D4=a("li"),VFe=a("strong"),GLr=o("roformer"),OLr=o(" \u2014 "),mH=a("a"),VLr=o("FlaxRoFormerForSequenceClassification"),XLr=o(" (RoFormer model)"),zLr=l(),G4=a("li"),XFe=a("strong"),QLr=o("xlm-roberta"),WLr=o(" \u2014 "),gH=a("a"),HLr=o("FlaxXLMRobertaForSequenceClassification"),ULr=o(" (XLM-RoBERTa model)"),JLr=l(),zFe=a("p"),YLr=o("Examples:"),KLr=l(),f(LL.$$.fragment),aPe=l(),uf=a("h2"),O4=a("a"),QFe=a("span"),f(xL.$$.fragment),ZLr=l(),WFe=a("span"),e7r=o("FlaxAutoModelForQuestionAnswering"),nPe=l(),Nr=a("div"),f(kL.$$.fragment),o7r=l(),bf=a("p"),r7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hH=a("a"),t7r=o("from_pretrained()"),a7r=o(" class method or the "),pH=a("a"),n7r=o("from_config()"),s7r=o(` class
method.`),l7r=l(),SL=a("p"),i7r=o("This class cannot be instantiated directly using "),HFe=a("code"),d7r=o("__init__()"),c7r=o(" (throws an error)."),f7r=l(),Rt=a("div"),f(RL.$$.fragment),m7r=l(),UFe=a("p"),g7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h7r=l(),Ff=a("p"),p7r=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),_7r=o("not"),u7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),b7r=o("from_pretrained()"),F7r=o(" to load the model weights."),v7r=l(),YFe=a("p"),T7r=o("Examples:"),M7r=l(),f(BL.$$.fragment),E7r=l(),Bo=a("div"),f(PL.$$.fragment),C7r=l(),KFe=a("p"),w7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A7r=l(),$n=a("p"),y7r=o("The model class to instantiate is selected based on the "),ZFe=a("code"),L7r=o("model_type"),x7r=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),k7r=o("pretrained_model_name_or_path"),S7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),R7r=o("pretrained_model_name_or_path"),B7r=o(":"),P7r=l(),Te=a("ul"),V4=a("li"),rve=a("strong"),$7r=o("albert"),I7r=o(" \u2014 "),uH=a("a"),q7r=o("FlaxAlbertForQuestionAnswering"),N7r=o(" (ALBERT model)"),j7r=l(),X4=a("li"),tve=a("strong"),D7r=o("bart"),G7r=o(" \u2014 "),bH=a("a"),O7r=o("FlaxBartForQuestionAnswering"),V7r=o(" (BART model)"),X7r=l(),z4=a("li"),ave=a("strong"),z7r=o("bert"),Q7r=o(" \u2014 "),FH=a("a"),W7r=o("FlaxBertForQuestionAnswering"),H7r=o(" (BERT model)"),U7r=l(),Q4=a("li"),nve=a("strong"),J7r=o("big_bird"),Y7r=o(" \u2014 "),vH=a("a"),K7r=o("FlaxBigBirdForQuestionAnswering"),Z7r=o(" (BigBird model)"),exr=l(),W4=a("li"),sve=a("strong"),oxr=o("distilbert"),rxr=o(" \u2014 "),TH=a("a"),txr=o("FlaxDistilBertForQuestionAnswering"),axr=o(" (DistilBERT model)"),nxr=l(),H4=a("li"),lve=a("strong"),sxr=o("electra"),lxr=o(" \u2014 "),MH=a("a"),ixr=o("FlaxElectraForQuestionAnswering"),dxr=o(" (ELECTRA model)"),cxr=l(),U4=a("li"),ive=a("strong"),fxr=o("mbart"),mxr=o(" \u2014 "),EH=a("a"),gxr=o("FlaxMBartForQuestionAnswering"),hxr=o(" (mBART model)"),pxr=l(),J4=a("li"),dve=a("strong"),_xr=o("roberta"),uxr=o(" \u2014 "),CH=a("a"),bxr=o("FlaxRobertaForQuestionAnswering"),Fxr=o(" (RoBERTa model)"),vxr=l(),Y4=a("li"),cve=a("strong"),Txr=o("roformer"),Mxr=o(" \u2014 "),wH=a("a"),Exr=o("FlaxRoFormerForQuestionAnswering"),Cxr=o(" (RoFormer model)"),wxr=l(),K4=a("li"),fve=a("strong"),Axr=o("xlm-roberta"),yxr=o(" \u2014 "),AH=a("a"),Lxr=o("FlaxXLMRobertaForQuestionAnswering"),xxr=o(" (XLM-RoBERTa model)"),kxr=l(),mve=a("p"),Sxr=o("Examples:"),Rxr=l(),f($L.$$.fragment),sPe=l(),vf=a("h2"),Z4=a("a"),gve=a("span"),f(IL.$$.fragment),Bxr=l(),hve=a("span"),Pxr=o("FlaxAutoModelForTokenClassification"),lPe=l(),jr=a("div"),f(qL.$$.fragment),$xr=l(),Tf=a("p"),Ixr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=a("a"),qxr=o("from_pretrained()"),Nxr=o(" class method or the "),LH=a("a"),jxr=o("from_config()"),Dxr=o(` class
method.`),Gxr=l(),NL=a("p"),Oxr=o("This class cannot be instantiated directly using "),pve=a("code"),Vxr=o("__init__()"),Xxr=o(" (throws an error)."),zxr=l(),Bt=a("div"),f(jL.$$.fragment),Qxr=l(),_ve=a("p"),Wxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hxr=l(),Mf=a("p"),Uxr=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),Jxr=o("not"),Yxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),Kxr=o("from_pretrained()"),Zxr=o(" to load the model weights."),e9r=l(),bve=a("p"),o9r=o("Examples:"),r9r=l(),f(DL.$$.fragment),t9r=l(),Po=a("div"),f(GL.$$.fragment),a9r=l(),Fve=a("p"),n9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s9r=l(),In=a("p"),l9r=o("The model class to instantiate is selected based on the "),vve=a("code"),i9r=o("model_type"),d9r=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),c9r=o("pretrained_model_name_or_path"),f9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),m9r=o("pretrained_model_name_or_path"),g9r=o(":"),h9r=l(),Be=a("ul"),eE=a("li"),Eve=a("strong"),p9r=o("albert"),_9r=o(" \u2014 "),kH=a("a"),u9r=o("FlaxAlbertForTokenClassification"),b9r=o(" (ALBERT model)"),F9r=l(),oE=a("li"),Cve=a("strong"),v9r=o("bert"),T9r=o(" \u2014 "),SH=a("a"),M9r=o("FlaxBertForTokenClassification"),E9r=o(" (BERT model)"),C9r=l(),rE=a("li"),wve=a("strong"),w9r=o("big_bird"),A9r=o(" \u2014 "),RH=a("a"),y9r=o("FlaxBigBirdForTokenClassification"),L9r=o(" (BigBird model)"),x9r=l(),tE=a("li"),Ave=a("strong"),k9r=o("distilbert"),S9r=o(" \u2014 "),BH=a("a"),R9r=o("FlaxDistilBertForTokenClassification"),B9r=o(" (DistilBERT model)"),P9r=l(),aE=a("li"),yve=a("strong"),$9r=o("electra"),I9r=o(" \u2014 "),PH=a("a"),q9r=o("FlaxElectraForTokenClassification"),N9r=o(" (ELECTRA model)"),j9r=l(),nE=a("li"),Lve=a("strong"),D9r=o("roberta"),G9r=o(" \u2014 "),$H=a("a"),O9r=o("FlaxRobertaForTokenClassification"),V9r=o(" (RoBERTa model)"),X9r=l(),sE=a("li"),xve=a("strong"),z9r=o("roformer"),Q9r=o(" \u2014 "),IH=a("a"),W9r=o("FlaxRoFormerForTokenClassification"),H9r=o(" (RoFormer model)"),U9r=l(),lE=a("li"),kve=a("strong"),J9r=o("xlm-roberta"),Y9r=o(" \u2014 "),qH=a("a"),K9r=o("FlaxXLMRobertaForTokenClassification"),Z9r=o(" (XLM-RoBERTa model)"),ekr=l(),Sve=a("p"),okr=o("Examples:"),rkr=l(),f(OL.$$.fragment),iPe=l(),Ef=a("h2"),iE=a("a"),Rve=a("span"),f(VL.$$.fragment),tkr=l(),Bve=a("span"),akr=o("FlaxAutoModelForMultipleChoice"),dPe=l(),Dr=a("div"),f(XL.$$.fragment),nkr=l(),Cf=a("p"),skr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=a("a"),lkr=o("from_pretrained()"),ikr=o(" class method or the "),jH=a("a"),dkr=o("from_config()"),ckr=o(` class
method.`),fkr=l(),zL=a("p"),mkr=o("This class cannot be instantiated directly using "),Pve=a("code"),gkr=o("__init__()"),hkr=o(" (throws an error)."),pkr=l(),Pt=a("div"),f(QL.$$.fragment),_kr=l(),$ve=a("p"),ukr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bkr=l(),wf=a("p"),Fkr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),vkr=o("not"),Tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" to load the model weights."),Ckr=l(),qve=a("p"),wkr=o("Examples:"),Akr=l(),f(WL.$$.fragment),ykr=l(),$o=a("div"),f(HL.$$.fragment),Lkr=l(),Nve=a("p"),xkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kkr=l(),qn=a("p"),Skr=o("The model class to instantiate is selected based on the "),jve=a("code"),Rkr=o("model_type"),Bkr=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),Pkr=o("pretrained_model_name_or_path"),$kr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),Ikr=o("pretrained_model_name_or_path"),qkr=o(":"),Nkr=l(),Pe=a("ul"),dE=a("li"),Ove=a("strong"),jkr=o("albert"),Dkr=o(" \u2014 "),GH=a("a"),Gkr=o("FlaxAlbertForMultipleChoice"),Okr=o(" (ALBERT model)"),Vkr=l(),cE=a("li"),Vve=a("strong"),Xkr=o("bert"),zkr=o(" \u2014 "),OH=a("a"),Qkr=o("FlaxBertForMultipleChoice"),Wkr=o(" (BERT model)"),Hkr=l(),fE=a("li"),Xve=a("strong"),Ukr=o("big_bird"),Jkr=o(" \u2014 "),VH=a("a"),Ykr=o("FlaxBigBirdForMultipleChoice"),Kkr=o(" (BigBird model)"),Zkr=l(),mE=a("li"),zve=a("strong"),eSr=o("distilbert"),oSr=o(" \u2014 "),XH=a("a"),rSr=o("FlaxDistilBertForMultipleChoice"),tSr=o(" (DistilBERT model)"),aSr=l(),gE=a("li"),Qve=a("strong"),nSr=o("electra"),sSr=o(" \u2014 "),zH=a("a"),lSr=o("FlaxElectraForMultipleChoice"),iSr=o(" (ELECTRA model)"),dSr=l(),hE=a("li"),Wve=a("strong"),cSr=o("roberta"),fSr=o(" \u2014 "),QH=a("a"),mSr=o("FlaxRobertaForMultipleChoice"),gSr=o(" (RoBERTa model)"),hSr=l(),pE=a("li"),Hve=a("strong"),pSr=o("roformer"),_Sr=o(" \u2014 "),WH=a("a"),uSr=o("FlaxRoFormerForMultipleChoice"),bSr=o(" (RoFormer model)"),FSr=l(),_E=a("li"),Uve=a("strong"),vSr=o("xlm-roberta"),TSr=o(" \u2014 "),HH=a("a"),MSr=o("FlaxXLMRobertaForMultipleChoice"),ESr=o(" (XLM-RoBERTa model)"),CSr=l(),Jve=a("p"),wSr=o("Examples:"),ASr=l(),f(UL.$$.fragment),cPe=l(),Af=a("h2"),uE=a("a"),Yve=a("span"),f(JL.$$.fragment),ySr=l(),Kve=a("span"),LSr=o("FlaxAutoModelForNextSentencePrediction"),fPe=l(),Gr=a("div"),f(YL.$$.fragment),xSr=l(),yf=a("p"),kSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UH=a("a"),SSr=o("from_pretrained()"),RSr=o(" class method or the "),JH=a("a"),BSr=o("from_config()"),PSr=o(` class
method.`),$Sr=l(),KL=a("p"),ISr=o("This class cannot be instantiated directly using "),Zve=a("code"),qSr=o("__init__()"),NSr=o(" (throws an error)."),jSr=l(),$t=a("div"),f(ZL.$$.fragment),DSr=l(),e0e=a("p"),GSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OSr=l(),Lf=a("p"),VSr=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),XSr=o("not"),zSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),QSr=o("from_pretrained()"),WSr=o(" to load the model weights."),HSr=l(),r0e=a("p"),USr=o("Examples:"),JSr=l(),f(e7.$$.fragment),YSr=l(),Io=a("div"),f(o7.$$.fragment),KSr=l(),t0e=a("p"),ZSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eRr=l(),Nn=a("p"),oRr=o("The model class to instantiate is selected based on the "),a0e=a("code"),rRr=o("model_type"),tRr=o(` property of the config object (either
passed as an argument or loaded from `),n0e=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=a("code"),sRr=o("pretrained_model_name_or_path"),lRr=o(":"),iRr=l(),l0e=a("ul"),bE=a("li"),i0e=a("strong"),dRr=o("bert"),cRr=o(" \u2014 "),KH=a("a"),fRr=o("FlaxBertForNextSentencePrediction"),mRr=o(" (BERT model)"),gRr=l(),d0e=a("p"),hRr=o("Examples:"),pRr=l(),f(r7.$$.fragment),mPe=l(),xf=a("h2"),FE=a("a"),c0e=a("span"),f(t7.$$.fragment),_Rr=l(),f0e=a("span"),uRr=o("FlaxAutoModelForImageClassification"),gPe=l(),Or=a("div"),f(a7.$$.fragment),bRr=l(),kf=a("p"),FRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZH=a("a"),vRr=o("from_pretrained()"),TRr=o(" class method or the "),eU=a("a"),MRr=o("from_config()"),ERr=o(` class
method.`),CRr=l(),n7=a("p"),wRr=o("This class cannot be instantiated directly using "),m0e=a("code"),ARr=o("__init__()"),yRr=o(" (throws an error)."),LRr=l(),It=a("div"),f(s7.$$.fragment),xRr=l(),g0e=a("p"),kRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SRr=l(),Sf=a("p"),RRr=o(`Note:
Loading a model from its configuration file does `),h0e=a("strong"),BRr=o("not"),PRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),$Rr=o("from_pretrained()"),IRr=o(" to load the model weights."),qRr=l(),p0e=a("p"),NRr=o("Examples:"),jRr=l(),f(l7.$$.fragment),DRr=l(),qo=a("div"),f(i7.$$.fragment),GRr=l(),_0e=a("p"),ORr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VRr=l(),jn=a("p"),XRr=o("The model class to instantiate is selected based on the "),u0e=a("code"),zRr=o("model_type"),QRr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),WRr=o("pretrained_model_name_or_path"),HRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(":"),YRr=l(),d7=a("ul"),vE=a("li"),v0e=a("strong"),KRr=o("beit"),ZRr=o(" \u2014 "),rU=a("a"),eBr=o("FlaxBeitForImageClassification"),oBr=o(" (BEiT model)"),rBr=l(),TE=a("li"),T0e=a("strong"),tBr=o("vit"),aBr=o(" \u2014 "),tU=a("a"),nBr=o("FlaxViTForImageClassification"),sBr=o(" (ViT model)"),lBr=l(),M0e=a("p"),iBr=o("Examples:"),dBr=l(),f(c7.$$.fragment),hPe=l(),Rf=a("h2"),ME=a("a"),E0e=a("span"),f(f7.$$.fragment),cBr=l(),C0e=a("span"),fBr=o("FlaxAutoModelForVision2Seq"),pPe=l(),Vr=a("div"),f(m7.$$.fragment),mBr=l(),Bf=a("p"),gBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=a("a"),hBr=o("from_pretrained()"),pBr=o(" class method or the "),nU=a("a"),_Br=o("from_config()"),uBr=o(` class
method.`),bBr=l(),g7=a("p"),FBr=o("This class cannot be instantiated directly using "),w0e=a("code"),vBr=o("__init__()"),TBr=o(" (throws an error)."),MBr=l(),qt=a("div"),f(h7.$$.fragment),EBr=l(),A0e=a("p"),CBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wBr=l(),Pf=a("p"),ABr=o(`Note:
Loading a model from its configuration file does `),y0e=a("strong"),yBr=o("not"),LBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),xBr=o("from_pretrained()"),kBr=o(" to load the model weights."),SBr=l(),L0e=a("p"),RBr=o("Examples:"),BBr=l(),f(p7.$$.fragment),PBr=l(),No=a("div"),f(_7.$$.fragment),$Br=l(),x0e=a("p"),IBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qBr=l(),Dn=a("p"),NBr=o("The model class to instantiate is selected based on the "),k0e=a("code"),jBr=o("model_type"),DBr=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),GBr=o("pretrained_model_name_or_path"),OBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=a("code"),VBr=o("pretrained_model_name_or_path"),XBr=o(":"),zBr=l(),B0e=a("ul"),EE=a("li"),P0e=a("strong"),QBr=o("vision-encoder-decoder"),WBr=o(" \u2014 "),lU=a("a"),HBr=o("FlaxVisionEncoderDecoderModel"),UBr=o(" (Vision Encoder decoder model)"),JBr=l(),$0e=a("p"),YBr=o("Examples:"),KBr=l(),f(u7.$$.fragment),this.h()},l(c){const u=B5t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var b7=s(de);Ce=n(b7,"A",{id:!0,class:!0,href:!0});var I0e=s(Ce);lo=n(I0e,"SPAN",{});var q0e=s(lo);m(ge.$$.fragment,q0e),q0e.forEach(t),I0e.forEach(t),Me=i(b7),Xo=n(b7,"SPAN",{});var ePr=s(Xo);Ii=r(ePr,"Auto Classes"),ePr.forEach(t),b7.forEach(t),qf=i(c),fa=n(c,"P",{});var uPe=s(fa);qi=r(uPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(uPe,"CODE",{});var oPr=s(Ni);E5=r(oPr,"from_pretrained()"),oPr.forEach(t),Nf=r(uPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),uPe.forEach(t),xe=i(c),co=n(c,"P",{});var CE=s(co);ji=r(CE,"Instantiating one of "),Gn=n(CE,"A",{href:!0});var rPr=s(Gn);C5=r(rPr,"AutoConfig"),rPr.forEach(t),On=r(CE,", "),Vn=n(CE,"A",{href:!0});var tPr=s(Vn);w5=r(tPr,"AutoModel"),tPr.forEach(t),Di=r(CE,`, and
`),Xn=n(CE,"A",{href:!0});var aPr=s(Xn);A5=r(aPr,"AutoTokenizer"),aPr.forEach(t),Gi=r(CE," will directly create a class of the relevant architecture. For instance"),CE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var bPe=s(ue);px=r(bPe,"will create a model that is an instance of "),Oi=n(bPe,"A",{href:!0});var nPr=s(Oi);_x=r(nPr,"BertModel"),nPr.forEach(t),ux=r(bPe,"."),bPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var FPe=s(Ga);bx=r(FPe,"There is one class of "),Df=n(FPe,"CODE",{});var sPr=s(Df);Fx=r(sPr,"AutoModel"),sPr.forEach(t),LIe=r(FPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),FPe.forEach(t),pRe=i(c),Vi=n(c,"H2",{class:!0});var vPe=s(Vi);Gf=n(vPe,"A",{id:!0,class:!0,href:!0});var lPr=s(Gf);oY=n(lPr,"SPAN",{});var iPr=s(oY);m(y5.$$.fragment,iPr),iPr.forEach(t),lPr.forEach(t),xIe=i(vPe),rY=n(vPe,"SPAN",{});var dPr=s(rY);kIe=r(dPr,"Extending the Auto Classes"),dPr.forEach(t),vPe.forEach(t),_Re=i(c),zn=n(c,"P",{});var iU=s(zn);SIe=r(iU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tY=n(iU,"CODE",{});var cPr=s(tY);RIe=r(cPr,"NewModel"),cPr.forEach(t),BIe=r(iU,", make sure you have a "),aY=n(iU,"CODE",{});var fPr=s(aY);PIe=r(fPr,"NewModelConfig"),fPr.forEach(t),$Ie=r(iU,` then you can add those to the auto
classes like this:`),iU.forEach(t),uRe=i(c),m(L5.$$.fragment,c),bRe=i(c),vx=n(c,"P",{});var mPr=s(vx);IIe=r(mPr,"You will then be able to use the auto classes like you would usually do!"),mPr.forEach(t),FRe=i(c),m(Of.$$.fragment,c),vRe=i(c),Xi=n(c,"H2",{class:!0});var TPe=s(Xi);Vf=n(TPe,"A",{id:!0,class:!0,href:!0});var gPr=s(Vf);nY=n(gPr,"SPAN",{});var hPr=s(nY);m(x5.$$.fragment,hPr),hPr.forEach(t),gPr.forEach(t),qIe=i(TPe),sY=n(TPe,"SPAN",{});var pPr=s(sY);NIe=r(pPr,"AutoConfig"),pPr.forEach(t),TPe.forEach(t),TRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(k5.$$.fragment,Os),jIe=i(Os),S5=n(Os,"P",{});var MPe=s(S5);DIe=r(MPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Tx=n(MPe,"A",{href:!0});var _Pr=s(Tx);GIe=r(_Pr,"from_pretrained()"),_Pr.forEach(t),OIe=r(MPe," class method."),MPe.forEach(t),VIe=i(Os),R5=n(Os,"P",{});var EPe=s(R5);XIe=r(EPe,"This class cannot be instantiated directly using "),lY=n(EPe,"CODE",{});var uPr=s(lY);zIe=r(uPr,"__init__()"),uPr.forEach(t),QIe=r(EPe," (throws an error)."),EPe.forEach(t),WIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(B5.$$.fragment,ga),HIe=i(ga),iY=n(ga,"P",{});var bPr=s(iY);UIe=r(bPr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),bPr.forEach(t),JIe=i(ga),zi=n(ga,"P",{});var dU=s(zi);YIe=r(dU,"The configuration class to instantiate is selected based on the "),dY=n(dU,"CODE",{});var FPr=s(dY);KIe=r(FPr,"model_type"),FPr.forEach(t),ZIe=r(dU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cY=n(dU,"CODE",{});var vPr=s(cY);eqe=r(vPr,"pretrained_model_name_or_path"),vPr.forEach(t),oqe=r(dU,":"),dU.forEach(t),rqe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var N0e=s(Xf);fY=n(N0e,"STRONG",{});var TPr=s(fY);tqe=r(TPr,"albert"),TPr.forEach(t),aqe=r(N0e," \u2014 "),Mx=n(N0e,"A",{href:!0});var MPr=s(Mx);nqe=r(MPr,"AlbertConfig"),MPr.forEach(t),sqe=r(N0e," (ALBERT model)"),N0e.forEach(t),lqe=i(v),zf=n(v,"LI",{});var j0e=s(zf);mY=n(j0e,"STRONG",{});var EPr=s(mY);iqe=r(EPr,"bart"),EPr.forEach(t),dqe=r(j0e," \u2014 "),Ex=n(j0e,"A",{href:!0});var CPr=s(Ex);cqe=r(CPr,"BartConfig"),CPr.forEach(t),fqe=r(j0e," (BART model)"),j0e.forEach(t),mqe=i(v),Qf=n(v,"LI",{});var D0e=s(Qf);gY=n(D0e,"STRONG",{});var wPr=s(gY);gqe=r(wPr,"beit"),wPr.forEach(t),hqe=r(D0e," \u2014 "),Cx=n(D0e,"A",{href:!0});var APr=s(Cx);pqe=r(APr,"BeitConfig"),APr.forEach(t),_qe=r(D0e," (BEiT model)"),D0e.forEach(t),uqe=i(v),Wf=n(v,"LI",{});var G0e=s(Wf);hY=n(G0e,"STRONG",{});var yPr=s(hY);bqe=r(yPr,"bert"),yPr.forEach(t),Fqe=r(G0e," \u2014 "),wx=n(G0e,"A",{href:!0});var LPr=s(wx);vqe=r(LPr,"BertConfig"),LPr.forEach(t),Tqe=r(G0e," (BERT model)"),G0e.forEach(t),Mqe=i(v),Hf=n(v,"LI",{});var O0e=s(Hf);pY=n(O0e,"STRONG",{});var xPr=s(pY);Eqe=r(xPr,"bert-generation"),xPr.forEach(t),Cqe=r(O0e," \u2014 "),Ax=n(O0e,"A",{href:!0});var kPr=s(Ax);wqe=r(kPr,"BertGenerationConfig"),kPr.forEach(t),Aqe=r(O0e," (Bert Generation model)"),O0e.forEach(t),yqe=i(v),Uf=n(v,"LI",{});var V0e=s(Uf);_Y=n(V0e,"STRONG",{});var SPr=s(_Y);Lqe=r(SPr,"big_bird"),SPr.forEach(t),xqe=r(V0e," \u2014 "),yx=n(V0e,"A",{href:!0});var RPr=s(yx);kqe=r(RPr,"BigBirdConfig"),RPr.forEach(t),Sqe=r(V0e," (BigBird model)"),V0e.forEach(t),Rqe=i(v),Jf=n(v,"LI",{});var X0e=s(Jf);uY=n(X0e,"STRONG",{});var BPr=s(uY);Bqe=r(BPr,"bigbird_pegasus"),BPr.forEach(t),Pqe=r(X0e," \u2014 "),Lx=n(X0e,"A",{href:!0});var PPr=s(Lx);$qe=r(PPr,"BigBirdPegasusConfig"),PPr.forEach(t),Iqe=r(X0e," (BigBirdPegasus model)"),X0e.forEach(t),qqe=i(v),Yf=n(v,"LI",{});var z0e=s(Yf);bY=n(z0e,"STRONG",{});var $Pr=s(bY);Nqe=r($Pr,"blenderbot"),$Pr.forEach(t),jqe=r(z0e," \u2014 "),xx=n(z0e,"A",{href:!0});var IPr=s(xx);Dqe=r(IPr,"BlenderbotConfig"),IPr.forEach(t),Gqe=r(z0e," (Blenderbot model)"),z0e.forEach(t),Oqe=i(v),Kf=n(v,"LI",{});var Q0e=s(Kf);FY=n(Q0e,"STRONG",{});var qPr=s(FY);Vqe=r(qPr,"blenderbot-small"),qPr.forEach(t),Xqe=r(Q0e," \u2014 "),kx=n(Q0e,"A",{href:!0});var NPr=s(kx);zqe=r(NPr,"BlenderbotSmallConfig"),NPr.forEach(t),Qqe=r(Q0e," (BlenderbotSmall model)"),Q0e.forEach(t),Wqe=i(v),Zf=n(v,"LI",{});var W0e=s(Zf);vY=n(W0e,"STRONG",{});var jPr=s(vY);Hqe=r(jPr,"camembert"),jPr.forEach(t),Uqe=r(W0e," \u2014 "),Sx=n(W0e,"A",{href:!0});var DPr=s(Sx);Jqe=r(DPr,"CamembertConfig"),DPr.forEach(t),Yqe=r(W0e," (CamemBERT model)"),W0e.forEach(t),Kqe=i(v),em=n(v,"LI",{});var H0e=s(em);TY=n(H0e,"STRONG",{});var GPr=s(TY);Zqe=r(GPr,"canine"),GPr.forEach(t),eNe=r(H0e," \u2014 "),Rx=n(H0e,"A",{href:!0});var OPr=s(Rx);oNe=r(OPr,"CanineConfig"),OPr.forEach(t),rNe=r(H0e," (Canine model)"),H0e.forEach(t),tNe=i(v),om=n(v,"LI",{});var U0e=s(om);MY=n(U0e,"STRONG",{});var VPr=s(MY);aNe=r(VPr,"clip"),VPr.forEach(t),nNe=r(U0e," \u2014 "),Bx=n(U0e,"A",{href:!0});var XPr=s(Bx);sNe=r(XPr,"CLIPConfig"),XPr.forEach(t),lNe=r(U0e," (CLIP model)"),U0e.forEach(t),iNe=i(v),rm=n(v,"LI",{});var J0e=s(rm);EY=n(J0e,"STRONG",{});var zPr=s(EY);dNe=r(zPr,"convbert"),zPr.forEach(t),cNe=r(J0e," \u2014 "),Px=n(J0e,"A",{href:!0});var QPr=s(Px);fNe=r(QPr,"ConvBertConfig"),QPr.forEach(t),mNe=r(J0e," (ConvBERT model)"),J0e.forEach(t),gNe=i(v),tm=n(v,"LI",{});var Y0e=s(tm);CY=n(Y0e,"STRONG",{});var WPr=s(CY);hNe=r(WPr,"convnext"),WPr.forEach(t),pNe=r(Y0e," \u2014 "),$x=n(Y0e,"A",{href:!0});var HPr=s($x);_Ne=r(HPr,"ConvNextConfig"),HPr.forEach(t),uNe=r(Y0e," (ConvNext model)"),Y0e.forEach(t),bNe=i(v),am=n(v,"LI",{});var K0e=s(am);wY=n(K0e,"STRONG",{});var UPr=s(wY);FNe=r(UPr,"ctrl"),UPr.forEach(t),vNe=r(K0e," \u2014 "),Ix=n(K0e,"A",{href:!0});var JPr=s(Ix);TNe=r(JPr,"CTRLConfig"),JPr.forEach(t),MNe=r(K0e," (CTRL model)"),K0e.forEach(t),ENe=i(v),nm=n(v,"LI",{});var Z0e=s(nm);AY=n(Z0e,"STRONG",{});var YPr=s(AY);CNe=r(YPr,"data2vec-audio"),YPr.forEach(t),wNe=r(Z0e," \u2014 "),qx=n(Z0e,"A",{href:!0});var KPr=s(qx);ANe=r(KPr,"Data2VecAudioConfig"),KPr.forEach(t),yNe=r(Z0e," (Data2VecAudio model)"),Z0e.forEach(t),LNe=i(v),sm=n(v,"LI",{});var eTe=s(sm);yY=n(eTe,"STRONG",{});var ZPr=s(yY);xNe=r(ZPr,"data2vec-text"),ZPr.forEach(t),kNe=r(eTe," \u2014 "),Nx=n(eTe,"A",{href:!0});var e$r=s(Nx);SNe=r(e$r,"Data2VecTextConfig"),e$r.forEach(t),RNe=r(eTe," (Data2VecText model)"),eTe.forEach(t),BNe=i(v),lm=n(v,"LI",{});var oTe=s(lm);LY=n(oTe,"STRONG",{});var o$r=s(LY);PNe=r(o$r,"deberta"),o$r.forEach(t),$Ne=r(oTe," \u2014 "),jx=n(oTe,"A",{href:!0});var r$r=s(jx);INe=r(r$r,"DebertaConfig"),r$r.forEach(t),qNe=r(oTe," (DeBERTa model)"),oTe.forEach(t),NNe=i(v),im=n(v,"LI",{});var rTe=s(im);xY=n(rTe,"STRONG",{});var t$r=s(xY);jNe=r(t$r,"deberta-v2"),t$r.forEach(t),DNe=r(rTe," \u2014 "),Dx=n(rTe,"A",{href:!0});var a$r=s(Dx);GNe=r(a$r,"DebertaV2Config"),a$r.forEach(t),ONe=r(rTe," (DeBERTa-v2 model)"),rTe.forEach(t),VNe=i(v),dm=n(v,"LI",{});var tTe=s(dm);kY=n(tTe,"STRONG",{});var n$r=s(kY);XNe=r(n$r,"decision_transformer"),n$r.forEach(t),zNe=r(tTe," \u2014 "),Gx=n(tTe,"A",{href:!0});var s$r=s(Gx);QNe=r(s$r,"DecisionTransformerConfig"),s$r.forEach(t),WNe=r(tTe," (Decision Transformer model)"),tTe.forEach(t),HNe=i(v),cm=n(v,"LI",{});var aTe=s(cm);SY=n(aTe,"STRONG",{});var l$r=s(SY);UNe=r(l$r,"deit"),l$r.forEach(t),JNe=r(aTe," \u2014 "),Ox=n(aTe,"A",{href:!0});var i$r=s(Ox);YNe=r(i$r,"DeiTConfig"),i$r.forEach(t),KNe=r(aTe," (DeiT model)"),aTe.forEach(t),ZNe=i(v),fm=n(v,"LI",{});var nTe=s(fm);RY=n(nTe,"STRONG",{});var d$r=s(RY);eje=r(d$r,"detr"),d$r.forEach(t),oje=r(nTe," \u2014 "),Vx=n(nTe,"A",{href:!0});var c$r=s(Vx);rje=r(c$r,"DetrConfig"),c$r.forEach(t),tje=r(nTe," (DETR model)"),nTe.forEach(t),aje=i(v),mm=n(v,"LI",{});var sTe=s(mm);BY=n(sTe,"STRONG",{});var f$r=s(BY);nje=r(f$r,"distilbert"),f$r.forEach(t),sje=r(sTe," \u2014 "),Xx=n(sTe,"A",{href:!0});var m$r=s(Xx);lje=r(m$r,"DistilBertConfig"),m$r.forEach(t),ije=r(sTe," (DistilBERT model)"),sTe.forEach(t),dje=i(v),gm=n(v,"LI",{});var lTe=s(gm);PY=n(lTe,"STRONG",{});var g$r=s(PY);cje=r(g$r,"dpr"),g$r.forEach(t),fje=r(lTe," \u2014 "),zx=n(lTe,"A",{href:!0});var h$r=s(zx);mje=r(h$r,"DPRConfig"),h$r.forEach(t),gje=r(lTe," (DPR model)"),lTe.forEach(t),hje=i(v),hm=n(v,"LI",{});var iTe=s(hm);$Y=n(iTe,"STRONG",{});var p$r=s($Y);pje=r(p$r,"dpt"),p$r.forEach(t),_je=r(iTe," \u2014 "),Qx=n(iTe,"A",{href:!0});var _$r=s(Qx);uje=r(_$r,"DPTConfig"),_$r.forEach(t),bje=r(iTe," (DPT model)"),iTe.forEach(t),Fje=i(v),pm=n(v,"LI",{});var dTe=s(pm);IY=n(dTe,"STRONG",{});var u$r=s(IY);vje=r(u$r,"electra"),u$r.forEach(t),Tje=r(dTe," \u2014 "),Wx=n(dTe,"A",{href:!0});var b$r=s(Wx);Mje=r(b$r,"ElectraConfig"),b$r.forEach(t),Eje=r(dTe," (ELECTRA model)"),dTe.forEach(t),Cje=i(v),_m=n(v,"LI",{});var cTe=s(_m);qY=n(cTe,"STRONG",{});var F$r=s(qY);wje=r(F$r,"encoder-decoder"),F$r.forEach(t),Aje=r(cTe," \u2014 "),Hx=n(cTe,"A",{href:!0});var v$r=s(Hx);yje=r(v$r,"EncoderDecoderConfig"),v$r.forEach(t),Lje=r(cTe," (Encoder decoder model)"),cTe.forEach(t),xje=i(v),um=n(v,"LI",{});var fTe=s(um);NY=n(fTe,"STRONG",{});var T$r=s(NY);kje=r(T$r,"flaubert"),T$r.forEach(t),Sje=r(fTe," \u2014 "),Ux=n(fTe,"A",{href:!0});var M$r=s(Ux);Rje=r(M$r,"FlaubertConfig"),M$r.forEach(t),Bje=r(fTe," (FlauBERT model)"),fTe.forEach(t),Pje=i(v),bm=n(v,"LI",{});var mTe=s(bm);jY=n(mTe,"STRONG",{});var E$r=s(jY);$je=r(E$r,"fnet"),E$r.forEach(t),Ije=r(mTe," \u2014 "),Jx=n(mTe,"A",{href:!0});var C$r=s(Jx);qje=r(C$r,"FNetConfig"),C$r.forEach(t),Nje=r(mTe," (FNet model)"),mTe.forEach(t),jje=i(v),Fm=n(v,"LI",{});var gTe=s(Fm);DY=n(gTe,"STRONG",{});var w$r=s(DY);Dje=r(w$r,"fsmt"),w$r.forEach(t),Gje=r(gTe," \u2014 "),Yx=n(gTe,"A",{href:!0});var A$r=s(Yx);Oje=r(A$r,"FSMTConfig"),A$r.forEach(t),Vje=r(gTe," (FairSeq Machine-Translation model)"),gTe.forEach(t),Xje=i(v),vm=n(v,"LI",{});var hTe=s(vm);GY=n(hTe,"STRONG",{});var y$r=s(GY);zje=r(y$r,"funnel"),y$r.forEach(t),Qje=r(hTe," \u2014 "),Kx=n(hTe,"A",{href:!0});var L$r=s(Kx);Wje=r(L$r,"FunnelConfig"),L$r.forEach(t),Hje=r(hTe," (Funnel Transformer model)"),hTe.forEach(t),Uje=i(v),Tm=n(v,"LI",{});var pTe=s(Tm);OY=n(pTe,"STRONG",{});var x$r=s(OY);Jje=r(x$r,"glpn"),x$r.forEach(t),Yje=r(pTe," \u2014 "),Zx=n(pTe,"A",{href:!0});var k$r=s(Zx);Kje=r(k$r,"GLPNConfig"),k$r.forEach(t),Zje=r(pTe," (GLPN model)"),pTe.forEach(t),eDe=i(v),Mm=n(v,"LI",{});var _Te=s(Mm);VY=n(_Te,"STRONG",{});var S$r=s(VY);oDe=r(S$r,"gpt2"),S$r.forEach(t),rDe=r(_Te," \u2014 "),e9=n(_Te,"A",{href:!0});var R$r=s(e9);tDe=r(R$r,"GPT2Config"),R$r.forEach(t),aDe=r(_Te," (OpenAI GPT-2 model)"),_Te.forEach(t),nDe=i(v),Em=n(v,"LI",{});var uTe=s(Em);XY=n(uTe,"STRONG",{});var B$r=s(XY);sDe=r(B$r,"gpt_neo"),B$r.forEach(t),lDe=r(uTe," \u2014 "),o9=n(uTe,"A",{href:!0});var P$r=s(o9);iDe=r(P$r,"GPTNeoConfig"),P$r.forEach(t),dDe=r(uTe," (GPT Neo model)"),uTe.forEach(t),cDe=i(v),Cm=n(v,"LI",{});var bTe=s(Cm);zY=n(bTe,"STRONG",{});var $$r=s(zY);fDe=r($$r,"gptj"),$$r.forEach(t),mDe=r(bTe," \u2014 "),r9=n(bTe,"A",{href:!0});var I$r=s(r9);gDe=r(I$r,"GPTJConfig"),I$r.forEach(t),hDe=r(bTe," (GPT-J model)"),bTe.forEach(t),pDe=i(v),wm=n(v,"LI",{});var FTe=s(wm);QY=n(FTe,"STRONG",{});var q$r=s(QY);_De=r(q$r,"hubert"),q$r.forEach(t),uDe=r(FTe," \u2014 "),t9=n(FTe,"A",{href:!0});var N$r=s(t9);bDe=r(N$r,"HubertConfig"),N$r.forEach(t),FDe=r(FTe," (Hubert model)"),FTe.forEach(t),vDe=i(v),Am=n(v,"LI",{});var vTe=s(Am);WY=n(vTe,"STRONG",{});var j$r=s(WY);TDe=r(j$r,"ibert"),j$r.forEach(t),MDe=r(vTe," \u2014 "),a9=n(vTe,"A",{href:!0});var D$r=s(a9);EDe=r(D$r,"IBertConfig"),D$r.forEach(t),CDe=r(vTe," (I-BERT model)"),vTe.forEach(t),wDe=i(v),ym=n(v,"LI",{});var TTe=s(ym);HY=n(TTe,"STRONG",{});var G$r=s(HY);ADe=r(G$r,"imagegpt"),G$r.forEach(t),yDe=r(TTe," \u2014 "),n9=n(TTe,"A",{href:!0});var O$r=s(n9);LDe=r(O$r,"ImageGPTConfig"),O$r.forEach(t),xDe=r(TTe," (ImageGPT model)"),TTe.forEach(t),kDe=i(v),Lm=n(v,"LI",{});var MTe=s(Lm);UY=n(MTe,"STRONG",{});var V$r=s(UY);SDe=r(V$r,"layoutlm"),V$r.forEach(t),RDe=r(MTe," \u2014 "),s9=n(MTe,"A",{href:!0});var X$r=s(s9);BDe=r(X$r,"LayoutLMConfig"),X$r.forEach(t),PDe=r(MTe," (LayoutLM model)"),MTe.forEach(t),$De=i(v),xm=n(v,"LI",{});var ETe=s(xm);JY=n(ETe,"STRONG",{});var z$r=s(JY);IDe=r(z$r,"layoutlmv2"),z$r.forEach(t),qDe=r(ETe," \u2014 "),l9=n(ETe,"A",{href:!0});var Q$r=s(l9);NDe=r(Q$r,"LayoutLMv2Config"),Q$r.forEach(t),jDe=r(ETe," (LayoutLMv2 model)"),ETe.forEach(t),DDe=i(v),km=n(v,"LI",{});var CTe=s(km);YY=n(CTe,"STRONG",{});var W$r=s(YY);GDe=r(W$r,"led"),W$r.forEach(t),ODe=r(CTe," \u2014 "),i9=n(CTe,"A",{href:!0});var H$r=s(i9);VDe=r(H$r,"LEDConfig"),H$r.forEach(t),XDe=r(CTe," (LED model)"),CTe.forEach(t),zDe=i(v),Sm=n(v,"LI",{});var wTe=s(Sm);KY=n(wTe,"STRONG",{});var U$r=s(KY);QDe=r(U$r,"longformer"),U$r.forEach(t),WDe=r(wTe," \u2014 "),d9=n(wTe,"A",{href:!0});var J$r=s(d9);HDe=r(J$r,"LongformerConfig"),J$r.forEach(t),UDe=r(wTe," (Longformer model)"),wTe.forEach(t),JDe=i(v),Rm=n(v,"LI",{});var ATe=s(Rm);ZY=n(ATe,"STRONG",{});var Y$r=s(ZY);YDe=r(Y$r,"luke"),Y$r.forEach(t),KDe=r(ATe," \u2014 "),c9=n(ATe,"A",{href:!0});var K$r=s(c9);ZDe=r(K$r,"LukeConfig"),K$r.forEach(t),eGe=r(ATe," (LUKE model)"),ATe.forEach(t),oGe=i(v),Bm=n(v,"LI",{});var yTe=s(Bm);eK=n(yTe,"STRONG",{});var Z$r=s(eK);rGe=r(Z$r,"lxmert"),Z$r.forEach(t),tGe=r(yTe," \u2014 "),f9=n(yTe,"A",{href:!0});var eIr=s(f9);aGe=r(eIr,"LxmertConfig"),eIr.forEach(t),nGe=r(yTe," (LXMERT model)"),yTe.forEach(t),sGe=i(v),Pm=n(v,"LI",{});var LTe=s(Pm);oK=n(LTe,"STRONG",{});var oIr=s(oK);lGe=r(oIr,"m2m_100"),oIr.forEach(t),iGe=r(LTe," \u2014 "),m9=n(LTe,"A",{href:!0});var rIr=s(m9);dGe=r(rIr,"M2M100Config"),rIr.forEach(t),cGe=r(LTe," (M2M100 model)"),LTe.forEach(t),fGe=i(v),$m=n(v,"LI",{});var xTe=s($m);rK=n(xTe,"STRONG",{});var tIr=s(rK);mGe=r(tIr,"marian"),tIr.forEach(t),gGe=r(xTe," \u2014 "),g9=n(xTe,"A",{href:!0});var aIr=s(g9);hGe=r(aIr,"MarianConfig"),aIr.forEach(t),pGe=r(xTe," (Marian model)"),xTe.forEach(t),_Ge=i(v),Im=n(v,"LI",{});var kTe=s(Im);tK=n(kTe,"STRONG",{});var nIr=s(tK);uGe=r(nIr,"maskformer"),nIr.forEach(t),bGe=r(kTe," \u2014 "),h9=n(kTe,"A",{href:!0});var sIr=s(h9);FGe=r(sIr,"MaskFormerConfig"),sIr.forEach(t),vGe=r(kTe," (MaskFormer model)"),kTe.forEach(t),TGe=i(v),qm=n(v,"LI",{});var STe=s(qm);aK=n(STe,"STRONG",{});var lIr=s(aK);MGe=r(lIr,"mbart"),lIr.forEach(t),EGe=r(STe," \u2014 "),p9=n(STe,"A",{href:!0});var iIr=s(p9);CGe=r(iIr,"MBartConfig"),iIr.forEach(t),wGe=r(STe," (mBART model)"),STe.forEach(t),AGe=i(v),Nm=n(v,"LI",{});var RTe=s(Nm);nK=n(RTe,"STRONG",{});var dIr=s(nK);yGe=r(dIr,"megatron-bert"),dIr.forEach(t),LGe=r(RTe," \u2014 "),_9=n(RTe,"A",{href:!0});var cIr=s(_9);xGe=r(cIr,"MegatronBertConfig"),cIr.forEach(t),kGe=r(RTe," (MegatronBert model)"),RTe.forEach(t),SGe=i(v),jm=n(v,"LI",{});var BTe=s(jm);sK=n(BTe,"STRONG",{});var fIr=s(sK);RGe=r(fIr,"mobilebert"),fIr.forEach(t),BGe=r(BTe," \u2014 "),u9=n(BTe,"A",{href:!0});var mIr=s(u9);PGe=r(mIr,"MobileBertConfig"),mIr.forEach(t),$Ge=r(BTe," (MobileBERT model)"),BTe.forEach(t),IGe=i(v),Dm=n(v,"LI",{});var PTe=s(Dm);lK=n(PTe,"STRONG",{});var gIr=s(lK);qGe=r(gIr,"mpnet"),gIr.forEach(t),NGe=r(PTe," \u2014 "),b9=n(PTe,"A",{href:!0});var hIr=s(b9);jGe=r(hIr,"MPNetConfig"),hIr.forEach(t),DGe=r(PTe," (MPNet model)"),PTe.forEach(t),GGe=i(v),Gm=n(v,"LI",{});var $Te=s(Gm);iK=n($Te,"STRONG",{});var pIr=s(iK);OGe=r(pIr,"mt5"),pIr.forEach(t),VGe=r($Te," \u2014 "),F9=n($Te,"A",{href:!0});var _Ir=s(F9);XGe=r(_Ir,"MT5Config"),_Ir.forEach(t),zGe=r($Te," (mT5 model)"),$Te.forEach(t),QGe=i(v),Om=n(v,"LI",{});var ITe=s(Om);dK=n(ITe,"STRONG",{});var uIr=s(dK);WGe=r(uIr,"nystromformer"),uIr.forEach(t),HGe=r(ITe," \u2014 "),v9=n(ITe,"A",{href:!0});var bIr=s(v9);UGe=r(bIr,"NystromformerConfig"),bIr.forEach(t),JGe=r(ITe," (Nystromformer model)"),ITe.forEach(t),YGe=i(v),Vm=n(v,"LI",{});var qTe=s(Vm);cK=n(qTe,"STRONG",{});var FIr=s(cK);KGe=r(FIr,"openai-gpt"),FIr.forEach(t),ZGe=r(qTe," \u2014 "),T9=n(qTe,"A",{href:!0});var vIr=s(T9);eOe=r(vIr,"OpenAIGPTConfig"),vIr.forEach(t),oOe=r(qTe," (OpenAI GPT model)"),qTe.forEach(t),rOe=i(v),Xm=n(v,"LI",{});var NTe=s(Xm);fK=n(NTe,"STRONG",{});var TIr=s(fK);tOe=r(TIr,"pegasus"),TIr.forEach(t),aOe=r(NTe," \u2014 "),M9=n(NTe,"A",{href:!0});var MIr=s(M9);nOe=r(MIr,"PegasusConfig"),MIr.forEach(t),sOe=r(NTe," (Pegasus model)"),NTe.forEach(t),lOe=i(v),zm=n(v,"LI",{});var jTe=s(zm);mK=n(jTe,"STRONG",{});var EIr=s(mK);iOe=r(EIr,"perceiver"),EIr.forEach(t),dOe=r(jTe," \u2014 "),E9=n(jTe,"A",{href:!0});var CIr=s(E9);cOe=r(CIr,"PerceiverConfig"),CIr.forEach(t),fOe=r(jTe," (Perceiver model)"),jTe.forEach(t),mOe=i(v),Qm=n(v,"LI",{});var DTe=s(Qm);gK=n(DTe,"STRONG",{});var wIr=s(gK);gOe=r(wIr,"plbart"),wIr.forEach(t),hOe=r(DTe," \u2014 "),C9=n(DTe,"A",{href:!0});var AIr=s(C9);pOe=r(AIr,"PLBartConfig"),AIr.forEach(t),_Oe=r(DTe," (PLBart model)"),DTe.forEach(t),uOe=i(v),Wm=n(v,"LI",{});var GTe=s(Wm);hK=n(GTe,"STRONG",{});var yIr=s(hK);bOe=r(yIr,"poolformer"),yIr.forEach(t),FOe=r(GTe," \u2014 "),w9=n(GTe,"A",{href:!0});var LIr=s(w9);vOe=r(LIr,"PoolFormerConfig"),LIr.forEach(t),TOe=r(GTe," (PoolFormer model)"),GTe.forEach(t),MOe=i(v),Hm=n(v,"LI",{});var OTe=s(Hm);pK=n(OTe,"STRONG",{});var xIr=s(pK);EOe=r(xIr,"prophetnet"),xIr.forEach(t),COe=r(OTe," \u2014 "),A9=n(OTe,"A",{href:!0});var kIr=s(A9);wOe=r(kIr,"ProphetNetConfig"),kIr.forEach(t),AOe=r(OTe," (ProphetNet model)"),OTe.forEach(t),yOe=i(v),Um=n(v,"LI",{});var VTe=s(Um);_K=n(VTe,"STRONG",{});var SIr=s(_K);LOe=r(SIr,"qdqbert"),SIr.forEach(t),xOe=r(VTe," \u2014 "),y9=n(VTe,"A",{href:!0});var RIr=s(y9);kOe=r(RIr,"QDQBertConfig"),RIr.forEach(t),SOe=r(VTe," (QDQBert model)"),VTe.forEach(t),ROe=i(v),Jm=n(v,"LI",{});var XTe=s(Jm);uK=n(XTe,"STRONG",{});var BIr=s(uK);BOe=r(BIr,"rag"),BIr.forEach(t),POe=r(XTe," \u2014 "),L9=n(XTe,"A",{href:!0});var PIr=s(L9);$Oe=r(PIr,"RagConfig"),PIr.forEach(t),IOe=r(XTe," (RAG model)"),XTe.forEach(t),qOe=i(v),Ym=n(v,"LI",{});var zTe=s(Ym);bK=n(zTe,"STRONG",{});var $Ir=s(bK);NOe=r($Ir,"realm"),$Ir.forEach(t),jOe=r(zTe," \u2014 "),x9=n(zTe,"A",{href:!0});var IIr=s(x9);DOe=r(IIr,"RealmConfig"),IIr.forEach(t),GOe=r(zTe," (Realm model)"),zTe.forEach(t),OOe=i(v),Km=n(v,"LI",{});var QTe=s(Km);FK=n(QTe,"STRONG",{});var qIr=s(FK);VOe=r(qIr,"reformer"),qIr.forEach(t),XOe=r(QTe," \u2014 "),k9=n(QTe,"A",{href:!0});var NIr=s(k9);zOe=r(NIr,"ReformerConfig"),NIr.forEach(t),QOe=r(QTe," (Reformer model)"),QTe.forEach(t),WOe=i(v),Zm=n(v,"LI",{});var WTe=s(Zm);vK=n(WTe,"STRONG",{});var jIr=s(vK);HOe=r(jIr,"regnet"),jIr.forEach(t),UOe=r(WTe," \u2014 "),S9=n(WTe,"A",{href:!0});var DIr=s(S9);JOe=r(DIr,"RegNetConfig"),DIr.forEach(t),YOe=r(WTe," (RegNet model)"),WTe.forEach(t),KOe=i(v),eg=n(v,"LI",{});var HTe=s(eg);TK=n(HTe,"STRONG",{});var GIr=s(TK);ZOe=r(GIr,"rembert"),GIr.forEach(t),eVe=r(HTe," \u2014 "),R9=n(HTe,"A",{href:!0});var OIr=s(R9);oVe=r(OIr,"RemBertConfig"),OIr.forEach(t),rVe=r(HTe," (RemBERT model)"),HTe.forEach(t),tVe=i(v),og=n(v,"LI",{});var UTe=s(og);MK=n(UTe,"STRONG",{});var VIr=s(MK);aVe=r(VIr,"resnet"),VIr.forEach(t),nVe=r(UTe," \u2014 "),B9=n(UTe,"A",{href:!0});var XIr=s(B9);sVe=r(XIr,"ResNetConfig"),XIr.forEach(t),lVe=r(UTe," (ResNet model)"),UTe.forEach(t),iVe=i(v),rg=n(v,"LI",{});var JTe=s(rg);EK=n(JTe,"STRONG",{});var zIr=s(EK);dVe=r(zIr,"retribert"),zIr.forEach(t),cVe=r(JTe," \u2014 "),P9=n(JTe,"A",{href:!0});var QIr=s(P9);fVe=r(QIr,"RetriBertConfig"),QIr.forEach(t),mVe=r(JTe," (RetriBERT model)"),JTe.forEach(t),gVe=i(v),tg=n(v,"LI",{});var YTe=s(tg);CK=n(YTe,"STRONG",{});var WIr=s(CK);hVe=r(WIr,"roberta"),WIr.forEach(t),pVe=r(YTe," \u2014 "),$9=n(YTe,"A",{href:!0});var HIr=s($9);_Ve=r(HIr,"RobertaConfig"),HIr.forEach(t),uVe=r(YTe," (RoBERTa model)"),YTe.forEach(t),bVe=i(v),ag=n(v,"LI",{});var KTe=s(ag);wK=n(KTe,"STRONG",{});var UIr=s(wK);FVe=r(UIr,"roformer"),UIr.forEach(t),vVe=r(KTe," \u2014 "),I9=n(KTe,"A",{href:!0});var JIr=s(I9);TVe=r(JIr,"RoFormerConfig"),JIr.forEach(t),MVe=r(KTe," (RoFormer model)"),KTe.forEach(t),EVe=i(v),ng=n(v,"LI",{});var ZTe=s(ng);AK=n(ZTe,"STRONG",{});var YIr=s(AK);CVe=r(YIr,"segformer"),YIr.forEach(t),wVe=r(ZTe," \u2014 "),q9=n(ZTe,"A",{href:!0});var KIr=s(q9);AVe=r(KIr,"SegformerConfig"),KIr.forEach(t),yVe=r(ZTe," (SegFormer model)"),ZTe.forEach(t),LVe=i(v),sg=n(v,"LI",{});var eMe=s(sg);yK=n(eMe,"STRONG",{});var ZIr=s(yK);xVe=r(ZIr,"sew"),ZIr.forEach(t),kVe=r(eMe," \u2014 "),N9=n(eMe,"A",{href:!0});var eqr=s(N9);SVe=r(eqr,"SEWConfig"),eqr.forEach(t),RVe=r(eMe," (SEW model)"),eMe.forEach(t),BVe=i(v),lg=n(v,"LI",{});var oMe=s(lg);LK=n(oMe,"STRONG",{});var oqr=s(LK);PVe=r(oqr,"sew-d"),oqr.forEach(t),$Ve=r(oMe," \u2014 "),j9=n(oMe,"A",{href:!0});var rqr=s(j9);IVe=r(rqr,"SEWDConfig"),rqr.forEach(t),qVe=r(oMe," (SEW-D model)"),oMe.forEach(t),NVe=i(v),ig=n(v,"LI",{});var rMe=s(ig);xK=n(rMe,"STRONG",{});var tqr=s(xK);jVe=r(tqr,"speech-encoder-decoder"),tqr.forEach(t),DVe=r(rMe," \u2014 "),D9=n(rMe,"A",{href:!0});var aqr=s(D9);GVe=r(aqr,"SpeechEncoderDecoderConfig"),aqr.forEach(t),OVe=r(rMe," (Speech Encoder decoder model)"),rMe.forEach(t),VVe=i(v),dg=n(v,"LI",{});var tMe=s(dg);kK=n(tMe,"STRONG",{});var nqr=s(kK);XVe=r(nqr,"speech_to_text"),nqr.forEach(t),zVe=r(tMe," \u2014 "),G9=n(tMe,"A",{href:!0});var sqr=s(G9);QVe=r(sqr,"Speech2TextConfig"),sqr.forEach(t),WVe=r(tMe," (Speech2Text model)"),tMe.forEach(t),HVe=i(v),cg=n(v,"LI",{});var aMe=s(cg);SK=n(aMe,"STRONG",{});var lqr=s(SK);UVe=r(lqr,"speech_to_text_2"),lqr.forEach(t),JVe=r(aMe," \u2014 "),O9=n(aMe,"A",{href:!0});var iqr=s(O9);YVe=r(iqr,"Speech2Text2Config"),iqr.forEach(t),KVe=r(aMe," (Speech2Text2 model)"),aMe.forEach(t),ZVe=i(v),fg=n(v,"LI",{});var nMe=s(fg);RK=n(nMe,"STRONG",{});var dqr=s(RK);eXe=r(dqr,"splinter"),dqr.forEach(t),oXe=r(nMe," \u2014 "),V9=n(nMe,"A",{href:!0});var cqr=s(V9);rXe=r(cqr,"SplinterConfig"),cqr.forEach(t),tXe=r(nMe," (Splinter model)"),nMe.forEach(t),aXe=i(v),mg=n(v,"LI",{});var sMe=s(mg);BK=n(sMe,"STRONG",{});var fqr=s(BK);nXe=r(fqr,"squeezebert"),fqr.forEach(t),sXe=r(sMe," \u2014 "),X9=n(sMe,"A",{href:!0});var mqr=s(X9);lXe=r(mqr,"SqueezeBertConfig"),mqr.forEach(t),iXe=r(sMe," (SqueezeBERT model)"),sMe.forEach(t),dXe=i(v),gg=n(v,"LI",{});var lMe=s(gg);PK=n(lMe,"STRONG",{});var gqr=s(PK);cXe=r(gqr,"swin"),gqr.forEach(t),fXe=r(lMe," \u2014 "),z9=n(lMe,"A",{href:!0});var hqr=s(z9);mXe=r(hqr,"SwinConfig"),hqr.forEach(t),gXe=r(lMe," (Swin model)"),lMe.forEach(t),hXe=i(v),hg=n(v,"LI",{});var iMe=s(hg);$K=n(iMe,"STRONG",{});var pqr=s($K);pXe=r(pqr,"t5"),pqr.forEach(t),_Xe=r(iMe," \u2014 "),Q9=n(iMe,"A",{href:!0});var _qr=s(Q9);uXe=r(_qr,"T5Config"),_qr.forEach(t),bXe=r(iMe," (T5 model)"),iMe.forEach(t),FXe=i(v),pg=n(v,"LI",{});var dMe=s(pg);IK=n(dMe,"STRONG",{});var uqr=s(IK);vXe=r(uqr,"tapas"),uqr.forEach(t),TXe=r(dMe," \u2014 "),W9=n(dMe,"A",{href:!0});var bqr=s(W9);MXe=r(bqr,"TapasConfig"),bqr.forEach(t),EXe=r(dMe," (TAPAS model)"),dMe.forEach(t),CXe=i(v),_g=n(v,"LI",{});var cMe=s(_g);qK=n(cMe,"STRONG",{});var Fqr=s(qK);wXe=r(Fqr,"tapex"),Fqr.forEach(t),AXe=r(cMe," \u2014 "),H9=n(cMe,"A",{href:!0});var vqr=s(H9);yXe=r(vqr,"BartConfig"),vqr.forEach(t),LXe=r(cMe," (TAPEX model)"),cMe.forEach(t),xXe=i(v),ug=n(v,"LI",{});var fMe=s(ug);NK=n(fMe,"STRONG",{});var Tqr=s(NK);kXe=r(Tqr,"transfo-xl"),Tqr.forEach(t),SXe=r(fMe," \u2014 "),U9=n(fMe,"A",{href:!0});var Mqr=s(U9);RXe=r(Mqr,"TransfoXLConfig"),Mqr.forEach(t),BXe=r(fMe," (Transformer-XL model)"),fMe.forEach(t),PXe=i(v),bg=n(v,"LI",{});var mMe=s(bg);jK=n(mMe,"STRONG",{});var Eqr=s(jK);$Xe=r(Eqr,"trocr"),Eqr.forEach(t),IXe=r(mMe," \u2014 "),J9=n(mMe,"A",{href:!0});var Cqr=s(J9);qXe=r(Cqr,"TrOCRConfig"),Cqr.forEach(t),NXe=r(mMe," (TrOCR model)"),mMe.forEach(t),jXe=i(v),Fg=n(v,"LI",{});var gMe=s(Fg);DK=n(gMe,"STRONG",{});var wqr=s(DK);DXe=r(wqr,"unispeech"),wqr.forEach(t),GXe=r(gMe," \u2014 "),Y9=n(gMe,"A",{href:!0});var Aqr=s(Y9);OXe=r(Aqr,"UniSpeechConfig"),Aqr.forEach(t),VXe=r(gMe," (UniSpeech model)"),gMe.forEach(t),XXe=i(v),vg=n(v,"LI",{});var hMe=s(vg);GK=n(hMe,"STRONG",{});var yqr=s(GK);zXe=r(yqr,"unispeech-sat"),yqr.forEach(t),QXe=r(hMe," \u2014 "),K9=n(hMe,"A",{href:!0});var Lqr=s(K9);WXe=r(Lqr,"UniSpeechSatConfig"),Lqr.forEach(t),HXe=r(hMe," (UniSpeechSat model)"),hMe.forEach(t),UXe=i(v),Tg=n(v,"LI",{});var pMe=s(Tg);OK=n(pMe,"STRONG",{});var xqr=s(OK);JXe=r(xqr,"van"),xqr.forEach(t),YXe=r(pMe," \u2014 "),Z9=n(pMe,"A",{href:!0});var kqr=s(Z9);KXe=r(kqr,"VanConfig"),kqr.forEach(t),ZXe=r(pMe," (VAN model)"),pMe.forEach(t),eze=i(v),Mg=n(v,"LI",{});var _Me=s(Mg);VK=n(_Me,"STRONG",{});var Sqr=s(VK);oze=r(Sqr,"vilt"),Sqr.forEach(t),rze=r(_Me," \u2014 "),ek=n(_Me,"A",{href:!0});var Rqr=s(ek);tze=r(Rqr,"ViltConfig"),Rqr.forEach(t),aze=r(_Me," (ViLT model)"),_Me.forEach(t),nze=i(v),Eg=n(v,"LI",{});var uMe=s(Eg);XK=n(uMe,"STRONG",{});var Bqr=s(XK);sze=r(Bqr,"vision-encoder-decoder"),Bqr.forEach(t),lze=r(uMe," \u2014 "),ok=n(uMe,"A",{href:!0});var Pqr=s(ok);ize=r(Pqr,"VisionEncoderDecoderConfig"),Pqr.forEach(t),dze=r(uMe," (Vision Encoder decoder model)"),uMe.forEach(t),cze=i(v),Cg=n(v,"LI",{});var bMe=s(Cg);zK=n(bMe,"STRONG",{});var $qr=s(zK);fze=r($qr,"vision-text-dual-encoder"),$qr.forEach(t),mze=r(bMe," \u2014 "),rk=n(bMe,"A",{href:!0});var Iqr=s(rk);gze=r(Iqr,"VisionTextDualEncoderConfig"),Iqr.forEach(t),hze=r(bMe," (VisionTextDualEncoder model)"),bMe.forEach(t),pze=i(v),wg=n(v,"LI",{});var FMe=s(wg);QK=n(FMe,"STRONG",{});var qqr=s(QK);_ze=r(qqr,"visual_bert"),qqr.forEach(t),uze=r(FMe," \u2014 "),tk=n(FMe,"A",{href:!0});var Nqr=s(tk);bze=r(Nqr,"VisualBertConfig"),Nqr.forEach(t),Fze=r(FMe," (VisualBert model)"),FMe.forEach(t),vze=i(v),Ag=n(v,"LI",{});var vMe=s(Ag);WK=n(vMe,"STRONG",{});var jqr=s(WK);Tze=r(jqr,"vit"),jqr.forEach(t),Mze=r(vMe," \u2014 "),ak=n(vMe,"A",{href:!0});var Dqr=s(ak);Eze=r(Dqr,"ViTConfig"),Dqr.forEach(t),Cze=r(vMe," (ViT model)"),vMe.forEach(t),wze=i(v),yg=n(v,"LI",{});var TMe=s(yg);HK=n(TMe,"STRONG",{});var Gqr=s(HK);Aze=r(Gqr,"vit_mae"),Gqr.forEach(t),yze=r(TMe," \u2014 "),nk=n(TMe,"A",{href:!0});var Oqr=s(nk);Lze=r(Oqr,"ViTMAEConfig"),Oqr.forEach(t),xze=r(TMe," (ViTMAE model)"),TMe.forEach(t),kze=i(v),Lg=n(v,"LI",{});var MMe=s(Lg);UK=n(MMe,"STRONG",{});var Vqr=s(UK);Sze=r(Vqr,"wav2vec2"),Vqr.forEach(t),Rze=r(MMe," \u2014 "),sk=n(MMe,"A",{href:!0});var Xqr=s(sk);Bze=r(Xqr,"Wav2Vec2Config"),Xqr.forEach(t),Pze=r(MMe," (Wav2Vec2 model)"),MMe.forEach(t),$ze=i(v),xg=n(v,"LI",{});var EMe=s(xg);JK=n(EMe,"STRONG",{});var zqr=s(JK);Ize=r(zqr,"wavlm"),zqr.forEach(t),qze=r(EMe," \u2014 "),lk=n(EMe,"A",{href:!0});var Qqr=s(lk);Nze=r(Qqr,"WavLMConfig"),Qqr.forEach(t),jze=r(EMe," (WavLM model)"),EMe.forEach(t),Dze=i(v),kg=n(v,"LI",{});var CMe=s(kg);YK=n(CMe,"STRONG",{});var Wqr=s(YK);Gze=r(Wqr,"xglm"),Wqr.forEach(t),Oze=r(CMe," \u2014 "),ik=n(CMe,"A",{href:!0});var Hqr=s(ik);Vze=r(Hqr,"XGLMConfig"),Hqr.forEach(t),Xze=r(CMe," (XGLM model)"),CMe.forEach(t),zze=i(v),Sg=n(v,"LI",{});var wMe=s(Sg);KK=n(wMe,"STRONG",{});var Uqr=s(KK);Qze=r(Uqr,"xlm"),Uqr.forEach(t),Wze=r(wMe," \u2014 "),dk=n(wMe,"A",{href:!0});var Jqr=s(dk);Hze=r(Jqr,"XLMConfig"),Jqr.forEach(t),Uze=r(wMe," (XLM model)"),wMe.forEach(t),Jze=i(v),Rg=n(v,"LI",{});var AMe=s(Rg);ZK=n(AMe,"STRONG",{});var Yqr=s(ZK);Yze=r(Yqr,"xlm-prophetnet"),Yqr.forEach(t),Kze=r(AMe," \u2014 "),ck=n(AMe,"A",{href:!0});var Kqr=s(ck);Zze=r(Kqr,"XLMProphetNetConfig"),Kqr.forEach(t),eQe=r(AMe," (XLMProphetNet model)"),AMe.forEach(t),oQe=i(v),Bg=n(v,"LI",{});var yMe=s(Bg);eZ=n(yMe,"STRONG",{});var Zqr=s(eZ);rQe=r(Zqr,"xlm-roberta"),Zqr.forEach(t),tQe=r(yMe," \u2014 "),fk=n(yMe,"A",{href:!0});var eNr=s(fk);aQe=r(eNr,"XLMRobertaConfig"),eNr.forEach(t),nQe=r(yMe," (XLM-RoBERTa model)"),yMe.forEach(t),sQe=i(v),Pg=n(v,"LI",{});var LMe=s(Pg);oZ=n(LMe,"STRONG",{});var oNr=s(oZ);lQe=r(oNr,"xlm-roberta-xl"),oNr.forEach(t),iQe=r(LMe," \u2014 "),mk=n(LMe,"A",{href:!0});var rNr=s(mk);dQe=r(rNr,"XLMRobertaXLConfig"),rNr.forEach(t),cQe=r(LMe," (XLM-RoBERTa-XL model)"),LMe.forEach(t),fQe=i(v),$g=n(v,"LI",{});var xMe=s($g);rZ=n(xMe,"STRONG",{});var tNr=s(rZ);mQe=r(tNr,"xlnet"),tNr.forEach(t),gQe=r(xMe," \u2014 "),gk=n(xMe,"A",{href:!0});var aNr=s(gk);hQe=r(aNr,"XLNetConfig"),aNr.forEach(t),pQe=r(xMe," (XLNet model)"),xMe.forEach(t),_Qe=i(v),Ig=n(v,"LI",{});var kMe=s(Ig);tZ=n(kMe,"STRONG",{});var nNr=s(tZ);uQe=r(nNr,"yoso"),nNr.forEach(t),bQe=r(kMe," \u2014 "),hk=n(kMe,"A",{href:!0});var sNr=s(hk);FQe=r(sNr,"YosoConfig"),sNr.forEach(t),vQe=r(kMe," (YOSO model)"),kMe.forEach(t),v.forEach(t),TQe=i(ga),aZ=n(ga,"P",{});var lNr=s(aZ);MQe=r(lNr,"Examples:"),lNr.forEach(t),EQe=i(ga),m(P5.$$.fragment,ga),ga.forEach(t),CQe=i(Os),qg=n(Os,"DIV",{class:!0});var CPe=s(qg);m($5.$$.fragment,CPe),wQe=i(CPe),nZ=n(CPe,"P",{});var iNr=s(nZ);AQe=r(iNr,"Register a new configuration for this class."),iNr.forEach(t),CPe.forEach(t),Os.forEach(t),MRe=i(c),Qi=n(c,"H2",{class:!0});var wPe=s(Qi);Ng=n(wPe,"A",{id:!0,class:!0,href:!0});var dNr=s(Ng);sZ=n(dNr,"SPAN",{});var cNr=s(sZ);m(I5.$$.fragment,cNr),cNr.forEach(t),dNr.forEach(t),yQe=i(wPe),lZ=n(wPe,"SPAN",{});var fNr=s(lZ);LQe=r(fNr,"AutoTokenizer"),fNr.forEach(t),wPe.forEach(t),ERe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(q5.$$.fragment,Vs),xQe=i(Vs),N5=n(Vs,"P",{});var APe=s(N5);kQe=r(APe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pk=n(APe,"A",{href:!0});var mNr=s(pk);SQe=r(mNr,"AutoTokenizer.from_pretrained()"),mNr.forEach(t),RQe=r(APe," class method."),APe.forEach(t),BQe=i(Vs),j5=n(Vs,"P",{});var yPe=s(j5);PQe=r(yPe,"This class cannot be instantiated directly using "),iZ=n(yPe,"CODE",{});var gNr=s(iZ);$Qe=r(gNr,"__init__()"),gNr.forEach(t),IQe=r(yPe," (throws an error)."),yPe.forEach(t),qQe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(D5.$$.fragment,ha),NQe=i(ha),dZ=n(ha,"P",{});var hNr=s(dZ);jQe=r(hNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hNr.forEach(t),DQe=i(ha),Oa=n(ha,"P",{});var wE=s(Oa);GQe=r(wE,"The tokenizer class to instantiate is selected based on the "),cZ=n(wE,"CODE",{});var pNr=s(cZ);OQe=r(pNr,"model_type"),pNr.forEach(t),VQe=r(wE,` property of the config object (either
passed as an argument or loaded from `),fZ=n(wE,"CODE",{});var _Nr=s(fZ);XQe=r(_Nr,"pretrained_model_name_or_path"),_Nr.forEach(t),zQe=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mZ=n(wE,"CODE",{});var uNr=s(mZ);QQe=r(uNr,"pretrained_model_name_or_path"),uNr.forEach(t),WQe=r(wE,":"),wE.forEach(t),HQe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var F7=s(Qn);gZ=n(F7,"STRONG",{});var bNr=s(gZ);UQe=r(bNr,"albert"),bNr.forEach(t),JQe=r(F7," \u2014 "),_k=n(F7,"A",{href:!0});var FNr=s(_k);YQe=r(FNr,"AlbertTokenizer"),FNr.forEach(t),KQe=r(F7," or "),uk=n(F7,"A",{href:!0});var vNr=s(uk);ZQe=r(vNr,"AlbertTokenizerFast"),vNr.forEach(t),eWe=r(F7," (ALBERT model)"),F7.forEach(t),oWe=i(w),Wn=n(w,"LI",{});var v7=s(Wn);hZ=n(v7,"STRONG",{});var TNr=s(hZ);rWe=r(TNr,"bart"),TNr.forEach(t),tWe=r(v7," \u2014 "),bk=n(v7,"A",{href:!0});var MNr=s(bk);aWe=r(MNr,"BartTokenizer"),MNr.forEach(t),nWe=r(v7," or "),Fk=n(v7,"A",{href:!0});var ENr=s(Fk);sWe=r(ENr,"BartTokenizerFast"),ENr.forEach(t),lWe=r(v7," (BART model)"),v7.forEach(t),iWe=i(w),Hn=n(w,"LI",{});var T7=s(Hn);pZ=n(T7,"STRONG",{});var CNr=s(pZ);dWe=r(CNr,"barthez"),CNr.forEach(t),cWe=r(T7," \u2014 "),vk=n(T7,"A",{href:!0});var wNr=s(vk);fWe=r(wNr,"BarthezTokenizer"),wNr.forEach(t),mWe=r(T7," or "),Tk=n(T7,"A",{href:!0});var ANr=s(Tk);gWe=r(ANr,"BarthezTokenizerFast"),ANr.forEach(t),hWe=r(T7," (BARThez model)"),T7.forEach(t),pWe=i(w),jg=n(w,"LI",{});var SMe=s(jg);_Z=n(SMe,"STRONG",{});var yNr=s(_Z);_We=r(yNr,"bartpho"),yNr.forEach(t),uWe=r(SMe," \u2014 "),Mk=n(SMe,"A",{href:!0});var LNr=s(Mk);bWe=r(LNr,"BartphoTokenizer"),LNr.forEach(t),FWe=r(SMe," (BARTpho model)"),SMe.forEach(t),vWe=i(w),Un=n(w,"LI",{});var M7=s(Un);uZ=n(M7,"STRONG",{});var xNr=s(uZ);TWe=r(xNr,"bert"),xNr.forEach(t),MWe=r(M7," \u2014 "),Ek=n(M7,"A",{href:!0});var kNr=s(Ek);EWe=r(kNr,"BertTokenizer"),kNr.forEach(t),CWe=r(M7," or "),Ck=n(M7,"A",{href:!0});var SNr=s(Ck);wWe=r(SNr,"BertTokenizerFast"),SNr.forEach(t),AWe=r(M7," (BERT model)"),M7.forEach(t),yWe=i(w),Dg=n(w,"LI",{});var RMe=s(Dg);bZ=n(RMe,"STRONG",{});var RNr=s(bZ);LWe=r(RNr,"bert-generation"),RNr.forEach(t),xWe=r(RMe," \u2014 "),wk=n(RMe,"A",{href:!0});var BNr=s(wk);kWe=r(BNr,"BertGenerationTokenizer"),BNr.forEach(t),SWe=r(RMe," (Bert Generation model)"),RMe.forEach(t),RWe=i(w),Gg=n(w,"LI",{});var BMe=s(Gg);FZ=n(BMe,"STRONG",{});var PNr=s(FZ);BWe=r(PNr,"bert-japanese"),PNr.forEach(t),PWe=r(BMe," \u2014 "),Ak=n(BMe,"A",{href:!0});var $Nr=s(Ak);$We=r($Nr,"BertJapaneseTokenizer"),$Nr.forEach(t),IWe=r(BMe," (BertJapanese model)"),BMe.forEach(t),qWe=i(w),Og=n(w,"LI",{});var PMe=s(Og);vZ=n(PMe,"STRONG",{});var INr=s(vZ);NWe=r(INr,"bertweet"),INr.forEach(t),jWe=r(PMe," \u2014 "),yk=n(PMe,"A",{href:!0});var qNr=s(yk);DWe=r(qNr,"BertweetTokenizer"),qNr.forEach(t),GWe=r(PMe," (Bertweet model)"),PMe.forEach(t),OWe=i(w),Jn=n(w,"LI",{});var E7=s(Jn);TZ=n(E7,"STRONG",{});var NNr=s(TZ);VWe=r(NNr,"big_bird"),NNr.forEach(t),XWe=r(E7," \u2014 "),Lk=n(E7,"A",{href:!0});var jNr=s(Lk);zWe=r(jNr,"BigBirdTokenizer"),jNr.forEach(t),QWe=r(E7," or "),xk=n(E7,"A",{href:!0});var DNr=s(xk);WWe=r(DNr,"BigBirdTokenizerFast"),DNr.forEach(t),HWe=r(E7," (BigBird model)"),E7.forEach(t),UWe=i(w),Yn=n(w,"LI",{});var C7=s(Yn);MZ=n(C7,"STRONG",{});var GNr=s(MZ);JWe=r(GNr,"bigbird_pegasus"),GNr.forEach(t),YWe=r(C7," \u2014 "),kk=n(C7,"A",{href:!0});var ONr=s(kk);KWe=r(ONr,"PegasusTokenizer"),ONr.forEach(t),ZWe=r(C7," or "),Sk=n(C7,"A",{href:!0});var VNr=s(Sk);eHe=r(VNr,"PegasusTokenizerFast"),VNr.forEach(t),oHe=r(C7," (BigBirdPegasus model)"),C7.forEach(t),rHe=i(w),Kn=n(w,"LI",{});var w7=s(Kn);EZ=n(w7,"STRONG",{});var XNr=s(EZ);tHe=r(XNr,"blenderbot"),XNr.forEach(t),aHe=r(w7," \u2014 "),Rk=n(w7,"A",{href:!0});var zNr=s(Rk);nHe=r(zNr,"BlenderbotTokenizer"),zNr.forEach(t),sHe=r(w7," or "),Bk=n(w7,"A",{href:!0});var QNr=s(Bk);lHe=r(QNr,"BlenderbotTokenizerFast"),QNr.forEach(t),iHe=r(w7," (Blenderbot model)"),w7.forEach(t),dHe=i(w),Vg=n(w,"LI",{});var $Me=s(Vg);CZ=n($Me,"STRONG",{});var WNr=s(CZ);cHe=r(WNr,"blenderbot-small"),WNr.forEach(t),fHe=r($Me," \u2014 "),Pk=n($Me,"A",{href:!0});var HNr=s(Pk);mHe=r(HNr,"BlenderbotSmallTokenizer"),HNr.forEach(t),gHe=r($Me," (BlenderbotSmall model)"),$Me.forEach(t),hHe=i(w),Xg=n(w,"LI",{});var IMe=s(Xg);wZ=n(IMe,"STRONG",{});var UNr=s(wZ);pHe=r(UNr,"byt5"),UNr.forEach(t),_He=r(IMe," \u2014 "),$k=n(IMe,"A",{href:!0});var JNr=s($k);uHe=r(JNr,"ByT5Tokenizer"),JNr.forEach(t),bHe=r(IMe," (ByT5 model)"),IMe.forEach(t),FHe=i(w),Zn=n(w,"LI",{});var A7=s(Zn);AZ=n(A7,"STRONG",{});var YNr=s(AZ);vHe=r(YNr,"camembert"),YNr.forEach(t),THe=r(A7," \u2014 "),Ik=n(A7,"A",{href:!0});var KNr=s(Ik);MHe=r(KNr,"CamembertTokenizer"),KNr.forEach(t),EHe=r(A7," or "),qk=n(A7,"A",{href:!0});var ZNr=s(qk);CHe=r(ZNr,"CamembertTokenizerFast"),ZNr.forEach(t),wHe=r(A7," (CamemBERT model)"),A7.forEach(t),AHe=i(w),zg=n(w,"LI",{});var qMe=s(zg);yZ=n(qMe,"STRONG",{});var ejr=s(yZ);yHe=r(ejr,"canine"),ejr.forEach(t),LHe=r(qMe," \u2014 "),Nk=n(qMe,"A",{href:!0});var ojr=s(Nk);xHe=r(ojr,"CanineTokenizer"),ojr.forEach(t),kHe=r(qMe," (Canine model)"),qMe.forEach(t),SHe=i(w),es=n(w,"LI",{});var y7=s(es);LZ=n(y7,"STRONG",{});var rjr=s(LZ);RHe=r(rjr,"clip"),rjr.forEach(t),BHe=r(y7," \u2014 "),jk=n(y7,"A",{href:!0});var tjr=s(jk);PHe=r(tjr,"CLIPTokenizer"),tjr.forEach(t),$He=r(y7," or "),Dk=n(y7,"A",{href:!0});var ajr=s(Dk);IHe=r(ajr,"CLIPTokenizerFast"),ajr.forEach(t),qHe=r(y7," (CLIP model)"),y7.forEach(t),NHe=i(w),os=n(w,"LI",{});var L7=s(os);xZ=n(L7,"STRONG",{});var njr=s(xZ);jHe=r(njr,"convbert"),njr.forEach(t),DHe=r(L7," \u2014 "),Gk=n(L7,"A",{href:!0});var sjr=s(Gk);GHe=r(sjr,"ConvBertTokenizer"),sjr.forEach(t),OHe=r(L7," or "),Ok=n(L7,"A",{href:!0});var ljr=s(Ok);VHe=r(ljr,"ConvBertTokenizerFast"),ljr.forEach(t),XHe=r(L7," (ConvBERT model)"),L7.forEach(t),zHe=i(w),rs=n(w,"LI",{});var x7=s(rs);kZ=n(x7,"STRONG",{});var ijr=s(kZ);QHe=r(ijr,"cpm"),ijr.forEach(t),WHe=r(x7," \u2014 "),Vk=n(x7,"A",{href:!0});var djr=s(Vk);HHe=r(djr,"CpmTokenizer"),djr.forEach(t),UHe=r(x7," or "),SZ=n(x7,"CODE",{});var cjr=s(SZ);JHe=r(cjr,"CpmTokenizerFast"),cjr.forEach(t),YHe=r(x7," (CPM model)"),x7.forEach(t),KHe=i(w),Qg=n(w,"LI",{});var NMe=s(Qg);RZ=n(NMe,"STRONG",{});var fjr=s(RZ);ZHe=r(fjr,"ctrl"),fjr.forEach(t),eUe=r(NMe," \u2014 "),Xk=n(NMe,"A",{href:!0});var mjr=s(Xk);oUe=r(mjr,"CTRLTokenizer"),mjr.forEach(t),rUe=r(NMe," (CTRL model)"),NMe.forEach(t),tUe=i(w),ts=n(w,"LI",{});var k7=s(ts);BZ=n(k7,"STRONG",{});var gjr=s(BZ);aUe=r(gjr,"deberta"),gjr.forEach(t),nUe=r(k7," \u2014 "),zk=n(k7,"A",{href:!0});var hjr=s(zk);sUe=r(hjr,"DebertaTokenizer"),hjr.forEach(t),lUe=r(k7," or "),Qk=n(k7,"A",{href:!0});var pjr=s(Qk);iUe=r(pjr,"DebertaTokenizerFast"),pjr.forEach(t),dUe=r(k7," (DeBERTa model)"),k7.forEach(t),cUe=i(w),Wg=n(w,"LI",{});var jMe=s(Wg);PZ=n(jMe,"STRONG",{});var _jr=s(PZ);fUe=r(_jr,"deberta-v2"),_jr.forEach(t),mUe=r(jMe," \u2014 "),Wk=n(jMe,"A",{href:!0});var ujr=s(Wk);gUe=r(ujr,"DebertaV2Tokenizer"),ujr.forEach(t),hUe=r(jMe," (DeBERTa-v2 model)"),jMe.forEach(t),pUe=i(w),as=n(w,"LI",{});var S7=s(as);$Z=n(S7,"STRONG",{});var bjr=s($Z);_Ue=r(bjr,"distilbert"),bjr.forEach(t),uUe=r(S7," \u2014 "),Hk=n(S7,"A",{href:!0});var Fjr=s(Hk);bUe=r(Fjr,"DistilBertTokenizer"),Fjr.forEach(t),FUe=r(S7," or "),Uk=n(S7,"A",{href:!0});var vjr=s(Uk);vUe=r(vjr,"DistilBertTokenizerFast"),vjr.forEach(t),TUe=r(S7," (DistilBERT model)"),S7.forEach(t),MUe=i(w),ns=n(w,"LI",{});var R7=s(ns);IZ=n(R7,"STRONG",{});var Tjr=s(IZ);EUe=r(Tjr,"dpr"),Tjr.forEach(t),CUe=r(R7," \u2014 "),Jk=n(R7,"A",{href:!0});var Mjr=s(Jk);wUe=r(Mjr,"DPRQuestionEncoderTokenizer"),Mjr.forEach(t),AUe=r(R7," or "),Yk=n(R7,"A",{href:!0});var Ejr=s(Yk);yUe=r(Ejr,"DPRQuestionEncoderTokenizerFast"),Ejr.forEach(t),LUe=r(R7," (DPR model)"),R7.forEach(t),xUe=i(w),ss=n(w,"LI",{});var B7=s(ss);qZ=n(B7,"STRONG",{});var Cjr=s(qZ);kUe=r(Cjr,"electra"),Cjr.forEach(t),SUe=r(B7," \u2014 "),Kk=n(B7,"A",{href:!0});var wjr=s(Kk);RUe=r(wjr,"ElectraTokenizer"),wjr.forEach(t),BUe=r(B7," or "),Zk=n(B7,"A",{href:!0});var Ajr=s(Zk);PUe=r(Ajr,"ElectraTokenizerFast"),Ajr.forEach(t),$Ue=r(B7," (ELECTRA model)"),B7.forEach(t),IUe=i(w),Hg=n(w,"LI",{});var DMe=s(Hg);NZ=n(DMe,"STRONG",{});var yjr=s(NZ);qUe=r(yjr,"flaubert"),yjr.forEach(t),NUe=r(DMe," \u2014 "),eS=n(DMe,"A",{href:!0});var Ljr=s(eS);jUe=r(Ljr,"FlaubertTokenizer"),Ljr.forEach(t),DUe=r(DMe," (FlauBERT model)"),DMe.forEach(t),GUe=i(w),ls=n(w,"LI",{});var P7=s(ls);jZ=n(P7,"STRONG",{});var xjr=s(jZ);OUe=r(xjr,"fnet"),xjr.forEach(t),VUe=r(P7," \u2014 "),oS=n(P7,"A",{href:!0});var kjr=s(oS);XUe=r(kjr,"FNetTokenizer"),kjr.forEach(t),zUe=r(P7," or "),rS=n(P7,"A",{href:!0});var Sjr=s(rS);QUe=r(Sjr,"FNetTokenizerFast"),Sjr.forEach(t),WUe=r(P7," (FNet model)"),P7.forEach(t),HUe=i(w),Ug=n(w,"LI",{});var GMe=s(Ug);DZ=n(GMe,"STRONG",{});var Rjr=s(DZ);UUe=r(Rjr,"fsmt"),Rjr.forEach(t),JUe=r(GMe," \u2014 "),tS=n(GMe,"A",{href:!0});var Bjr=s(tS);YUe=r(Bjr,"FSMTTokenizer"),Bjr.forEach(t),KUe=r(GMe," (FairSeq Machine-Translation model)"),GMe.forEach(t),ZUe=i(w),is=n(w,"LI",{});var $7=s(is);GZ=n($7,"STRONG",{});var Pjr=s(GZ);eJe=r(Pjr,"funnel"),Pjr.forEach(t),oJe=r($7," \u2014 "),aS=n($7,"A",{href:!0});var $jr=s(aS);rJe=r($jr,"FunnelTokenizer"),$jr.forEach(t),tJe=r($7," or "),nS=n($7,"A",{href:!0});var Ijr=s(nS);aJe=r(Ijr,"FunnelTokenizerFast"),Ijr.forEach(t),nJe=r($7," (Funnel Transformer model)"),$7.forEach(t),sJe=i(w),ds=n(w,"LI",{});var I7=s(ds);OZ=n(I7,"STRONG",{});var qjr=s(OZ);lJe=r(qjr,"gpt2"),qjr.forEach(t),iJe=r(I7," \u2014 "),sS=n(I7,"A",{href:!0});var Njr=s(sS);dJe=r(Njr,"GPT2Tokenizer"),Njr.forEach(t),cJe=r(I7," or "),lS=n(I7,"A",{href:!0});var jjr=s(lS);fJe=r(jjr,"GPT2TokenizerFast"),jjr.forEach(t),mJe=r(I7," (OpenAI GPT-2 model)"),I7.forEach(t),gJe=i(w),cs=n(w,"LI",{});var q7=s(cs);VZ=n(q7,"STRONG",{});var Djr=s(VZ);hJe=r(Djr,"gpt_neo"),Djr.forEach(t),pJe=r(q7," \u2014 "),iS=n(q7,"A",{href:!0});var Gjr=s(iS);_Je=r(Gjr,"GPT2Tokenizer"),Gjr.forEach(t),uJe=r(q7," or "),dS=n(q7,"A",{href:!0});var Ojr=s(dS);bJe=r(Ojr,"GPT2TokenizerFast"),Ojr.forEach(t),FJe=r(q7," (GPT Neo model)"),q7.forEach(t),vJe=i(w),fs=n(w,"LI",{});var N7=s(fs);XZ=n(N7,"STRONG",{});var Vjr=s(XZ);TJe=r(Vjr,"herbert"),Vjr.forEach(t),MJe=r(N7," \u2014 "),cS=n(N7,"A",{href:!0});var Xjr=s(cS);EJe=r(Xjr,"HerbertTokenizer"),Xjr.forEach(t),CJe=r(N7," or "),fS=n(N7,"A",{href:!0});var zjr=s(fS);wJe=r(zjr,"HerbertTokenizerFast"),zjr.forEach(t),AJe=r(N7," (HerBERT model)"),N7.forEach(t),yJe=i(w),Jg=n(w,"LI",{});var OMe=s(Jg);zZ=n(OMe,"STRONG",{});var Qjr=s(zZ);LJe=r(Qjr,"hubert"),Qjr.forEach(t),xJe=r(OMe," \u2014 "),mS=n(OMe,"A",{href:!0});var Wjr=s(mS);kJe=r(Wjr,"Wav2Vec2CTCTokenizer"),Wjr.forEach(t),SJe=r(OMe," (Hubert model)"),OMe.forEach(t),RJe=i(w),ms=n(w,"LI",{});var j7=s(ms);QZ=n(j7,"STRONG",{});var Hjr=s(QZ);BJe=r(Hjr,"ibert"),Hjr.forEach(t),PJe=r(j7," \u2014 "),gS=n(j7,"A",{href:!0});var Ujr=s(gS);$Je=r(Ujr,"RobertaTokenizer"),Ujr.forEach(t),IJe=r(j7," or "),hS=n(j7,"A",{href:!0});var Jjr=s(hS);qJe=r(Jjr,"RobertaTokenizerFast"),Jjr.forEach(t),NJe=r(j7," (I-BERT model)"),j7.forEach(t),jJe=i(w),gs=n(w,"LI",{});var D7=s(gs);WZ=n(D7,"STRONG",{});var Yjr=s(WZ);DJe=r(Yjr,"layoutlm"),Yjr.forEach(t),GJe=r(D7," \u2014 "),pS=n(D7,"A",{href:!0});var Kjr=s(pS);OJe=r(Kjr,"LayoutLMTokenizer"),Kjr.forEach(t),VJe=r(D7," or "),_S=n(D7,"A",{href:!0});var Zjr=s(_S);XJe=r(Zjr,"LayoutLMTokenizerFast"),Zjr.forEach(t),zJe=r(D7," (LayoutLM model)"),D7.forEach(t),QJe=i(w),hs=n(w,"LI",{});var G7=s(hs);HZ=n(G7,"STRONG",{});var eDr=s(HZ);WJe=r(eDr,"layoutlmv2"),eDr.forEach(t),HJe=r(G7," \u2014 "),uS=n(G7,"A",{href:!0});var oDr=s(uS);UJe=r(oDr,"LayoutLMv2Tokenizer"),oDr.forEach(t),JJe=r(G7," or "),bS=n(G7,"A",{href:!0});var rDr=s(bS);YJe=r(rDr,"LayoutLMv2TokenizerFast"),rDr.forEach(t),KJe=r(G7," (LayoutLMv2 model)"),G7.forEach(t),ZJe=i(w),ps=n(w,"LI",{});var O7=s(ps);UZ=n(O7,"STRONG",{});var tDr=s(UZ);eYe=r(tDr,"layoutxlm"),tDr.forEach(t),oYe=r(O7," \u2014 "),FS=n(O7,"A",{href:!0});var aDr=s(FS);rYe=r(aDr,"LayoutXLMTokenizer"),aDr.forEach(t),tYe=r(O7," or "),vS=n(O7,"A",{href:!0});var nDr=s(vS);aYe=r(nDr,"LayoutXLMTokenizerFast"),nDr.forEach(t),nYe=r(O7," (LayoutXLM model)"),O7.forEach(t),sYe=i(w),_s=n(w,"LI",{});var V7=s(_s);JZ=n(V7,"STRONG",{});var sDr=s(JZ);lYe=r(sDr,"led"),sDr.forEach(t),iYe=r(V7," \u2014 "),TS=n(V7,"A",{href:!0});var lDr=s(TS);dYe=r(lDr,"LEDTokenizer"),lDr.forEach(t),cYe=r(V7," or "),MS=n(V7,"A",{href:!0});var iDr=s(MS);fYe=r(iDr,"LEDTokenizerFast"),iDr.forEach(t),mYe=r(V7," (LED model)"),V7.forEach(t),gYe=i(w),us=n(w,"LI",{});var X7=s(us);YZ=n(X7,"STRONG",{});var dDr=s(YZ);hYe=r(dDr,"longformer"),dDr.forEach(t),pYe=r(X7," \u2014 "),ES=n(X7,"A",{href:!0});var cDr=s(ES);_Ye=r(cDr,"LongformerTokenizer"),cDr.forEach(t),uYe=r(X7," or "),CS=n(X7,"A",{href:!0});var fDr=s(CS);bYe=r(fDr,"LongformerTokenizerFast"),fDr.forEach(t),FYe=r(X7," (Longformer model)"),X7.forEach(t),vYe=i(w),Yg=n(w,"LI",{});var VMe=s(Yg);KZ=n(VMe,"STRONG",{});var mDr=s(KZ);TYe=r(mDr,"luke"),mDr.forEach(t),MYe=r(VMe," \u2014 "),wS=n(VMe,"A",{href:!0});var gDr=s(wS);EYe=r(gDr,"LukeTokenizer"),gDr.forEach(t),CYe=r(VMe," (LUKE model)"),VMe.forEach(t),wYe=i(w),bs=n(w,"LI",{});var z7=s(bs);ZZ=n(z7,"STRONG",{});var hDr=s(ZZ);AYe=r(hDr,"lxmert"),hDr.forEach(t),yYe=r(z7," \u2014 "),AS=n(z7,"A",{href:!0});var pDr=s(AS);LYe=r(pDr,"LxmertTokenizer"),pDr.forEach(t),xYe=r(z7," or "),yS=n(z7,"A",{href:!0});var _Dr=s(yS);kYe=r(_Dr,"LxmertTokenizerFast"),_Dr.forEach(t),SYe=r(z7," (LXMERT model)"),z7.forEach(t),RYe=i(w),Kg=n(w,"LI",{});var XMe=s(Kg);eee=n(XMe,"STRONG",{});var uDr=s(eee);BYe=r(uDr,"m2m_100"),uDr.forEach(t),PYe=r(XMe," \u2014 "),LS=n(XMe,"A",{href:!0});var bDr=s(LS);$Ye=r(bDr,"M2M100Tokenizer"),bDr.forEach(t),IYe=r(XMe," (M2M100 model)"),XMe.forEach(t),qYe=i(w),Zg=n(w,"LI",{});var zMe=s(Zg);oee=n(zMe,"STRONG",{});var FDr=s(oee);NYe=r(FDr,"marian"),FDr.forEach(t),jYe=r(zMe," \u2014 "),xS=n(zMe,"A",{href:!0});var vDr=s(xS);DYe=r(vDr,"MarianTokenizer"),vDr.forEach(t),GYe=r(zMe," (Marian model)"),zMe.forEach(t),OYe=i(w),Fs=n(w,"LI",{});var Q7=s(Fs);ree=n(Q7,"STRONG",{});var TDr=s(ree);VYe=r(TDr,"mbart"),TDr.forEach(t),XYe=r(Q7," \u2014 "),kS=n(Q7,"A",{href:!0});var MDr=s(kS);zYe=r(MDr,"MBartTokenizer"),MDr.forEach(t),QYe=r(Q7," or "),SS=n(Q7,"A",{href:!0});var EDr=s(SS);WYe=r(EDr,"MBartTokenizerFast"),EDr.forEach(t),HYe=r(Q7," (mBART model)"),Q7.forEach(t),UYe=i(w),vs=n(w,"LI",{});var W7=s(vs);tee=n(W7,"STRONG",{});var CDr=s(tee);JYe=r(CDr,"mbart50"),CDr.forEach(t),YYe=r(W7," \u2014 "),RS=n(W7,"A",{href:!0});var wDr=s(RS);KYe=r(wDr,"MBart50Tokenizer"),wDr.forEach(t),ZYe=r(W7," or "),BS=n(W7,"A",{href:!0});var ADr=s(BS);eKe=r(ADr,"MBart50TokenizerFast"),ADr.forEach(t),oKe=r(W7," (mBART-50 model)"),W7.forEach(t),rKe=i(w),eh=n(w,"LI",{});var QMe=s(eh);aee=n(QMe,"STRONG",{});var yDr=s(aee);tKe=r(yDr,"mluke"),yDr.forEach(t),aKe=r(QMe," \u2014 "),PS=n(QMe,"A",{href:!0});var LDr=s(PS);nKe=r(LDr,"MLukeTokenizer"),LDr.forEach(t),sKe=r(QMe," (mLUKE model)"),QMe.forEach(t),lKe=i(w),Ts=n(w,"LI",{});var H7=s(Ts);nee=n(H7,"STRONG",{});var xDr=s(nee);iKe=r(xDr,"mobilebert"),xDr.forEach(t),dKe=r(H7," \u2014 "),$S=n(H7,"A",{href:!0});var kDr=s($S);cKe=r(kDr,"MobileBertTokenizer"),kDr.forEach(t),fKe=r(H7," or "),IS=n(H7,"A",{href:!0});var SDr=s(IS);mKe=r(SDr,"MobileBertTokenizerFast"),SDr.forEach(t),gKe=r(H7," (MobileBERT model)"),H7.forEach(t),hKe=i(w),Ms=n(w,"LI",{});var U7=s(Ms);see=n(U7,"STRONG",{});var RDr=s(see);pKe=r(RDr,"mpnet"),RDr.forEach(t),_Ke=r(U7," \u2014 "),qS=n(U7,"A",{href:!0});var BDr=s(qS);uKe=r(BDr,"MPNetTokenizer"),BDr.forEach(t),bKe=r(U7," or "),NS=n(U7,"A",{href:!0});var PDr=s(NS);FKe=r(PDr,"MPNetTokenizerFast"),PDr.forEach(t),vKe=r(U7," (MPNet model)"),U7.forEach(t),TKe=i(w),Es=n(w,"LI",{});var J7=s(Es);lee=n(J7,"STRONG",{});var $Dr=s(lee);MKe=r($Dr,"mt5"),$Dr.forEach(t),EKe=r(J7," \u2014 "),jS=n(J7,"A",{href:!0});var IDr=s(jS);CKe=r(IDr,"MT5Tokenizer"),IDr.forEach(t),wKe=r(J7," or "),DS=n(J7,"A",{href:!0});var qDr=s(DS);AKe=r(qDr,"MT5TokenizerFast"),qDr.forEach(t),yKe=r(J7," (mT5 model)"),J7.forEach(t),LKe=i(w),Cs=n(w,"LI",{});var Y7=s(Cs);iee=n(Y7,"STRONG",{});var NDr=s(iee);xKe=r(NDr,"openai-gpt"),NDr.forEach(t),kKe=r(Y7," \u2014 "),GS=n(Y7,"A",{href:!0});var jDr=s(GS);SKe=r(jDr,"OpenAIGPTTokenizer"),jDr.forEach(t),RKe=r(Y7," or "),OS=n(Y7,"A",{href:!0});var DDr=s(OS);BKe=r(DDr,"OpenAIGPTTokenizerFast"),DDr.forEach(t),PKe=r(Y7," (OpenAI GPT model)"),Y7.forEach(t),$Ke=i(w),ws=n(w,"LI",{});var K7=s(ws);dee=n(K7,"STRONG",{});var GDr=s(dee);IKe=r(GDr,"pegasus"),GDr.forEach(t),qKe=r(K7," \u2014 "),VS=n(K7,"A",{href:!0});var ODr=s(VS);NKe=r(ODr,"PegasusTokenizer"),ODr.forEach(t),jKe=r(K7," or "),XS=n(K7,"A",{href:!0});var VDr=s(XS);DKe=r(VDr,"PegasusTokenizerFast"),VDr.forEach(t),GKe=r(K7," (Pegasus model)"),K7.forEach(t),OKe=i(w),oh=n(w,"LI",{});var WMe=s(oh);cee=n(WMe,"STRONG",{});var XDr=s(cee);VKe=r(XDr,"perceiver"),XDr.forEach(t),XKe=r(WMe," \u2014 "),zS=n(WMe,"A",{href:!0});var zDr=s(zS);zKe=r(zDr,"PerceiverTokenizer"),zDr.forEach(t),QKe=r(WMe," (Perceiver model)"),WMe.forEach(t),WKe=i(w),rh=n(w,"LI",{});var HMe=s(rh);fee=n(HMe,"STRONG",{});var QDr=s(fee);HKe=r(QDr,"phobert"),QDr.forEach(t),UKe=r(HMe," \u2014 "),QS=n(HMe,"A",{href:!0});var WDr=s(QS);JKe=r(WDr,"PhobertTokenizer"),WDr.forEach(t),YKe=r(HMe," (PhoBERT model)"),HMe.forEach(t),KKe=i(w),th=n(w,"LI",{});var UMe=s(th);mee=n(UMe,"STRONG",{});var HDr=s(mee);ZKe=r(HDr,"plbart"),HDr.forEach(t),eZe=r(UMe," \u2014 "),WS=n(UMe,"A",{href:!0});var UDr=s(WS);oZe=r(UDr,"PLBartTokenizer"),UDr.forEach(t),rZe=r(UMe," (PLBart model)"),UMe.forEach(t),tZe=i(w),ah=n(w,"LI",{});var JMe=s(ah);gee=n(JMe,"STRONG",{});var JDr=s(gee);aZe=r(JDr,"prophetnet"),JDr.forEach(t),nZe=r(JMe," \u2014 "),HS=n(JMe,"A",{href:!0});var YDr=s(HS);sZe=r(YDr,"ProphetNetTokenizer"),YDr.forEach(t),lZe=r(JMe," (ProphetNet model)"),JMe.forEach(t),iZe=i(w),As=n(w,"LI",{});var Z7=s(As);hee=n(Z7,"STRONG",{});var KDr=s(hee);dZe=r(KDr,"qdqbert"),KDr.forEach(t),cZe=r(Z7," \u2014 "),US=n(Z7,"A",{href:!0});var ZDr=s(US);fZe=r(ZDr,"BertTokenizer"),ZDr.forEach(t),mZe=r(Z7," or "),JS=n(Z7,"A",{href:!0});var eGr=s(JS);gZe=r(eGr,"BertTokenizerFast"),eGr.forEach(t),hZe=r(Z7," (QDQBert model)"),Z7.forEach(t),pZe=i(w),nh=n(w,"LI",{});var YMe=s(nh);pee=n(YMe,"STRONG",{});var oGr=s(pee);_Ze=r(oGr,"rag"),oGr.forEach(t),uZe=r(YMe," \u2014 "),YS=n(YMe,"A",{href:!0});var rGr=s(YS);bZe=r(rGr,"RagTokenizer"),rGr.forEach(t),FZe=r(YMe," (RAG model)"),YMe.forEach(t),vZe=i(w),ys=n(w,"LI",{});var ex=s(ys);_ee=n(ex,"STRONG",{});var tGr=s(_ee);TZe=r(tGr,"realm"),tGr.forEach(t),MZe=r(ex," \u2014 "),KS=n(ex,"A",{href:!0});var aGr=s(KS);EZe=r(aGr,"RealmTokenizer"),aGr.forEach(t),CZe=r(ex," or "),ZS=n(ex,"A",{href:!0});var nGr=s(ZS);wZe=r(nGr,"RealmTokenizerFast"),nGr.forEach(t),AZe=r(ex," (Realm model)"),ex.forEach(t),yZe=i(w),Ls=n(w,"LI",{});var ox=s(Ls);uee=n(ox,"STRONG",{});var sGr=s(uee);LZe=r(sGr,"reformer"),sGr.forEach(t),xZe=r(ox," \u2014 "),eR=n(ox,"A",{href:!0});var lGr=s(eR);kZe=r(lGr,"ReformerTokenizer"),lGr.forEach(t),SZe=r(ox," or "),oR=n(ox,"A",{href:!0});var iGr=s(oR);RZe=r(iGr,"ReformerTokenizerFast"),iGr.forEach(t),BZe=r(ox," (Reformer model)"),ox.forEach(t),PZe=i(w),xs=n(w,"LI",{});var rx=s(xs);bee=n(rx,"STRONG",{});var dGr=s(bee);$Ze=r(dGr,"rembert"),dGr.forEach(t),IZe=r(rx," \u2014 "),rR=n(rx,"A",{href:!0});var cGr=s(rR);qZe=r(cGr,"RemBertTokenizer"),cGr.forEach(t),NZe=r(rx," or "),tR=n(rx,"A",{href:!0});var fGr=s(tR);jZe=r(fGr,"RemBertTokenizerFast"),fGr.forEach(t),DZe=r(rx," (RemBERT model)"),rx.forEach(t),GZe=i(w),ks=n(w,"LI",{});var tx=s(ks);Fee=n(tx,"STRONG",{});var mGr=s(Fee);OZe=r(mGr,"retribert"),mGr.forEach(t),VZe=r(tx," \u2014 "),aR=n(tx,"A",{href:!0});var gGr=s(aR);XZe=r(gGr,"RetriBertTokenizer"),gGr.forEach(t),zZe=r(tx," or "),nR=n(tx,"A",{href:!0});var hGr=s(nR);QZe=r(hGr,"RetriBertTokenizerFast"),hGr.forEach(t),WZe=r(tx," (RetriBERT model)"),tx.forEach(t),HZe=i(w),Ss=n(w,"LI",{});var ax=s(Ss);vee=n(ax,"STRONG",{});var pGr=s(vee);UZe=r(pGr,"roberta"),pGr.forEach(t),JZe=r(ax," \u2014 "),sR=n(ax,"A",{href:!0});var _Gr=s(sR);YZe=r(_Gr,"RobertaTokenizer"),_Gr.forEach(t),KZe=r(ax," or "),lR=n(ax,"A",{href:!0});var uGr=s(lR);ZZe=r(uGr,"RobertaTokenizerFast"),uGr.forEach(t),eeo=r(ax," (RoBERTa model)"),ax.forEach(t),oeo=i(w),Rs=n(w,"LI",{});var nx=s(Rs);Tee=n(nx,"STRONG",{});var bGr=s(Tee);reo=r(bGr,"roformer"),bGr.forEach(t),teo=r(nx," \u2014 "),iR=n(nx,"A",{href:!0});var FGr=s(iR);aeo=r(FGr,"RoFormerTokenizer"),FGr.forEach(t),neo=r(nx," or "),dR=n(nx,"A",{href:!0});var vGr=s(dR);seo=r(vGr,"RoFormerTokenizerFast"),vGr.forEach(t),leo=r(nx," (RoFormer model)"),nx.forEach(t),ieo=i(w),sh=n(w,"LI",{});var KMe=s(sh);Mee=n(KMe,"STRONG",{});var TGr=s(Mee);deo=r(TGr,"speech_to_text"),TGr.forEach(t),ceo=r(KMe," \u2014 "),cR=n(KMe,"A",{href:!0});var MGr=s(cR);feo=r(MGr,"Speech2TextTokenizer"),MGr.forEach(t),meo=r(KMe," (Speech2Text model)"),KMe.forEach(t),geo=i(w),lh=n(w,"LI",{});var ZMe=s(lh);Eee=n(ZMe,"STRONG",{});var EGr=s(Eee);heo=r(EGr,"speech_to_text_2"),EGr.forEach(t),peo=r(ZMe," \u2014 "),fR=n(ZMe,"A",{href:!0});var CGr=s(fR);_eo=r(CGr,"Speech2Text2Tokenizer"),CGr.forEach(t),ueo=r(ZMe," (Speech2Text2 model)"),ZMe.forEach(t),beo=i(w),Bs=n(w,"LI",{});var sx=s(Bs);Cee=n(sx,"STRONG",{});var wGr=s(Cee);Feo=r(wGr,"splinter"),wGr.forEach(t),veo=r(sx," \u2014 "),mR=n(sx,"A",{href:!0});var AGr=s(mR);Teo=r(AGr,"SplinterTokenizer"),AGr.forEach(t),Meo=r(sx," or "),gR=n(sx,"A",{href:!0});var yGr=s(gR);Eeo=r(yGr,"SplinterTokenizerFast"),yGr.forEach(t),Ceo=r(sx," (Splinter model)"),sx.forEach(t),weo=i(w),Ps=n(w,"LI",{});var lx=s(Ps);wee=n(lx,"STRONG",{});var LGr=s(wee);Aeo=r(LGr,"squeezebert"),LGr.forEach(t),yeo=r(lx," \u2014 "),hR=n(lx,"A",{href:!0});var xGr=s(hR);Leo=r(xGr,"SqueezeBertTokenizer"),xGr.forEach(t),xeo=r(lx," or "),pR=n(lx,"A",{href:!0});var kGr=s(pR);keo=r(kGr,"SqueezeBertTokenizerFast"),kGr.forEach(t),Seo=r(lx," (SqueezeBERT model)"),lx.forEach(t),Reo=i(w),$s=n(w,"LI",{});var ix=s($s);Aee=n(ix,"STRONG",{});var SGr=s(Aee);Beo=r(SGr,"t5"),SGr.forEach(t),Peo=r(ix," \u2014 "),_R=n(ix,"A",{href:!0});var RGr=s(_R);$eo=r(RGr,"T5Tokenizer"),RGr.forEach(t),Ieo=r(ix," or "),uR=n(ix,"A",{href:!0});var BGr=s(uR);qeo=r(BGr,"T5TokenizerFast"),BGr.forEach(t),Neo=r(ix," (T5 model)"),ix.forEach(t),jeo=i(w),ih=n(w,"LI",{});var e4e=s(ih);yee=n(e4e,"STRONG",{});var PGr=s(yee);Deo=r(PGr,"tapas"),PGr.forEach(t),Geo=r(e4e," \u2014 "),bR=n(e4e,"A",{href:!0});var $Gr=s(bR);Oeo=r($Gr,"TapasTokenizer"),$Gr.forEach(t),Veo=r(e4e," (TAPAS model)"),e4e.forEach(t),Xeo=i(w),dh=n(w,"LI",{});var o4e=s(dh);Lee=n(o4e,"STRONG",{});var IGr=s(Lee);zeo=r(IGr,"tapex"),IGr.forEach(t),Qeo=r(o4e," \u2014 "),FR=n(o4e,"A",{href:!0});var qGr=s(FR);Weo=r(qGr,"TapexTokenizer"),qGr.forEach(t),Heo=r(o4e," (TAPEX model)"),o4e.forEach(t),Ueo=i(w),ch=n(w,"LI",{});var r4e=s(ch);xee=n(r4e,"STRONG",{});var NGr=s(xee);Jeo=r(NGr,"transfo-xl"),NGr.forEach(t),Yeo=r(r4e," \u2014 "),vR=n(r4e,"A",{href:!0});var jGr=s(vR);Keo=r(jGr,"TransfoXLTokenizer"),jGr.forEach(t),Zeo=r(r4e," (Transformer-XL model)"),r4e.forEach(t),eoo=i(w),fh=n(w,"LI",{});var t4e=s(fh);kee=n(t4e,"STRONG",{});var DGr=s(kee);ooo=r(DGr,"wav2vec2"),DGr.forEach(t),roo=r(t4e," \u2014 "),TR=n(t4e,"A",{href:!0});var GGr=s(TR);too=r(GGr,"Wav2Vec2CTCTokenizer"),GGr.forEach(t),aoo=r(t4e," (Wav2Vec2 model)"),t4e.forEach(t),noo=i(w),mh=n(w,"LI",{});var a4e=s(mh);See=n(a4e,"STRONG",{});var OGr=s(See);soo=r(OGr,"wav2vec2_phoneme"),OGr.forEach(t),loo=r(a4e," \u2014 "),MR=n(a4e,"A",{href:!0});var VGr=s(MR);ioo=r(VGr,"Wav2Vec2PhonemeCTCTokenizer"),VGr.forEach(t),doo=r(a4e," (Wav2Vec2Phoneme model)"),a4e.forEach(t),coo=i(w),Is=n(w,"LI",{});var dx=s(Is);Ree=n(dx,"STRONG",{});var XGr=s(Ree);foo=r(XGr,"xglm"),XGr.forEach(t),moo=r(dx," \u2014 "),ER=n(dx,"A",{href:!0});var zGr=s(ER);goo=r(zGr,"XGLMTokenizer"),zGr.forEach(t),hoo=r(dx," or "),CR=n(dx,"A",{href:!0});var QGr=s(CR);poo=r(QGr,"XGLMTokenizerFast"),QGr.forEach(t),_oo=r(dx," (XGLM model)"),dx.forEach(t),uoo=i(w),gh=n(w,"LI",{});var n4e=s(gh);Bee=n(n4e,"STRONG",{});var WGr=s(Bee);boo=r(WGr,"xlm"),WGr.forEach(t),Foo=r(n4e," \u2014 "),wR=n(n4e,"A",{href:!0});var HGr=s(wR);voo=r(HGr,"XLMTokenizer"),HGr.forEach(t),Too=r(n4e," (XLM model)"),n4e.forEach(t),Moo=i(w),hh=n(w,"LI",{});var s4e=s(hh);Pee=n(s4e,"STRONG",{});var UGr=s(Pee);Eoo=r(UGr,"xlm-prophetnet"),UGr.forEach(t),Coo=r(s4e," \u2014 "),AR=n(s4e,"A",{href:!0});var JGr=s(AR);woo=r(JGr,"XLMProphetNetTokenizer"),JGr.forEach(t),Aoo=r(s4e," (XLMProphetNet model)"),s4e.forEach(t),yoo=i(w),qs=n(w,"LI",{});var cx=s(qs);$ee=n(cx,"STRONG",{});var YGr=s($ee);Loo=r(YGr,"xlm-roberta"),YGr.forEach(t),xoo=r(cx," \u2014 "),yR=n(cx,"A",{href:!0});var KGr=s(yR);koo=r(KGr,"XLMRobertaTokenizer"),KGr.forEach(t),Soo=r(cx," or "),LR=n(cx,"A",{href:!0});var ZGr=s(LR);Roo=r(ZGr,"XLMRobertaTokenizerFast"),ZGr.forEach(t),Boo=r(cx," (XLM-RoBERTa model)"),cx.forEach(t),Poo=i(w),Ns=n(w,"LI",{});var fx=s(Ns);Iee=n(fx,"STRONG",{});var eOr=s(Iee);$oo=r(eOr,"xlnet"),eOr.forEach(t),Ioo=r(fx," \u2014 "),xR=n(fx,"A",{href:!0});var oOr=s(xR);qoo=r(oOr,"XLNetTokenizer"),oOr.forEach(t),Noo=r(fx," or "),kR=n(fx,"A",{href:!0});var rOr=s(kR);joo=r(rOr,"XLNetTokenizerFast"),rOr.forEach(t),Doo=r(fx," (XLNet model)"),fx.forEach(t),w.forEach(t),Goo=i(ha),qee=n(ha,"P",{});var tOr=s(qee);Ooo=r(tOr,"Examples:"),tOr.forEach(t),Voo=i(ha),m(G5.$$.fragment,ha),ha.forEach(t),Xoo=i(Vs),ph=n(Vs,"DIV",{class:!0});var LPe=s(ph);m(O5.$$.fragment,LPe),zoo=i(LPe),Nee=n(LPe,"P",{});var aOr=s(Nee);Qoo=r(aOr,"Register a new tokenizer in this mapping."),aOr.forEach(t),LPe.forEach(t),Vs.forEach(t),CRe=i(c),Wi=n(c,"H2",{class:!0});var xPe=s(Wi);_h=n(xPe,"A",{id:!0,class:!0,href:!0});var nOr=s(_h);jee=n(nOr,"SPAN",{});var sOr=s(jee);m(V5.$$.fragment,sOr),sOr.forEach(t),nOr.forEach(t),Woo=i(xPe),Dee=n(xPe,"SPAN",{});var lOr=s(Dee);Hoo=r(lOr,"AutoFeatureExtractor"),lOr.forEach(t),xPe.forEach(t),wRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(X5.$$.fragment,Xs),Uoo=i(Xs),z5=n(Xs,"P",{});var kPe=s(z5);Joo=r(kPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SR=n(kPe,"A",{href:!0});var iOr=s(SR);Yoo=r(iOr,"AutoFeatureExtractor.from_pretrained()"),iOr.forEach(t),Koo=r(kPe," class method."),kPe.forEach(t),Zoo=i(Xs),Q5=n(Xs,"P",{});var SPe=s(Q5);ero=r(SPe,"This class cannot be instantiated directly using "),Gee=n(SPe,"CODE",{});var dOr=s(Gee);oro=r(dOr,"__init__()"),dOr.forEach(t),rro=r(SPe," (throws an error)."),SPe.forEach(t),tro=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(W5.$$.fragment,Nt),aro=i(Nt),Oee=n(Nt,"P",{});var cOr=s(Oee);nro=r(cOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cOr.forEach(t),sro=i(Nt),Va=n(Nt,"P",{});var AE=s(Va);lro=r(AE,"The feature extractor class to instantiate is selected based on the "),Vee=n(AE,"CODE",{});var fOr=s(Vee);iro=r(fOr,"model_type"),fOr.forEach(t),dro=r(AE,` property of the config object
(either passed as an argument or loaded from `),Xee=n(AE,"CODE",{});var mOr=s(Xee);cro=r(mOr,"pretrained_model_name_or_path"),mOr.forEach(t),fro=r(AE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zee=n(AE,"CODE",{});var gOr=s(zee);mro=r(gOr,"pretrained_model_name_or_path"),gOr.forEach(t),gro=r(AE,":"),AE.forEach(t),hro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);uh=n(ae,"LI",{});var l4e=s(uh);Qee=n(l4e,"STRONG",{});var hOr=s(Qee);pro=r(hOr,"beit"),hOr.forEach(t),_ro=r(l4e," \u2014 "),RR=n(l4e,"A",{href:!0});var pOr=s(RR);uro=r(pOr,"BeitFeatureExtractor"),pOr.forEach(t),bro=r(l4e," (BEiT model)"),l4e.forEach(t),Fro=i(ae),bh=n(ae,"LI",{});var i4e=s(bh);Wee=n(i4e,"STRONG",{});var _Or=s(Wee);vro=r(_Or,"clip"),_Or.forEach(t),Tro=r(i4e," \u2014 "),BR=n(i4e,"A",{href:!0});var uOr=s(BR);Mro=r(uOr,"CLIPFeatureExtractor"),uOr.forEach(t),Ero=r(i4e," (CLIP model)"),i4e.forEach(t),Cro=i(ae),Fh=n(ae,"LI",{});var d4e=s(Fh);Hee=n(d4e,"STRONG",{});var bOr=s(Hee);wro=r(bOr,"convnext"),bOr.forEach(t),Aro=r(d4e," \u2014 "),PR=n(d4e,"A",{href:!0});var FOr=s(PR);yro=r(FOr,"ConvNextFeatureExtractor"),FOr.forEach(t),Lro=r(d4e," (ConvNext model)"),d4e.forEach(t),xro=i(ae),vh=n(ae,"LI",{});var c4e=s(vh);Uee=n(c4e,"STRONG",{});var vOr=s(Uee);kro=r(vOr,"deit"),vOr.forEach(t),Sro=r(c4e," \u2014 "),$R=n(c4e,"A",{href:!0});var TOr=s($R);Rro=r(TOr,"DeiTFeatureExtractor"),TOr.forEach(t),Bro=r(c4e," (DeiT model)"),c4e.forEach(t),Pro=i(ae),Th=n(ae,"LI",{});var f4e=s(Th);Jee=n(f4e,"STRONG",{});var MOr=s(Jee);$ro=r(MOr,"detr"),MOr.forEach(t),Iro=r(f4e," \u2014 "),IR=n(f4e,"A",{href:!0});var EOr=s(IR);qro=r(EOr,"DetrFeatureExtractor"),EOr.forEach(t),Nro=r(f4e," (DETR model)"),f4e.forEach(t),jro=i(ae),Mh=n(ae,"LI",{});var m4e=s(Mh);Yee=n(m4e,"STRONG",{});var COr=s(Yee);Dro=r(COr,"hubert"),COr.forEach(t),Gro=r(m4e," \u2014 "),qR=n(m4e,"A",{href:!0});var wOr=s(qR);Oro=r(wOr,"Wav2Vec2FeatureExtractor"),wOr.forEach(t),Vro=r(m4e," (Hubert model)"),m4e.forEach(t),Xro=i(ae),Eh=n(ae,"LI",{});var g4e=s(Eh);Kee=n(g4e,"STRONG",{});var AOr=s(Kee);zro=r(AOr,"layoutlmv2"),AOr.forEach(t),Qro=r(g4e," \u2014 "),NR=n(g4e,"A",{href:!0});var yOr=s(NR);Wro=r(yOr,"LayoutLMv2FeatureExtractor"),yOr.forEach(t),Hro=r(g4e," (LayoutLMv2 model)"),g4e.forEach(t),Uro=i(ae),Ch=n(ae,"LI",{});var h4e=s(Ch);Zee=n(h4e,"STRONG",{});var LOr=s(Zee);Jro=r(LOr,"maskformer"),LOr.forEach(t),Yro=r(h4e," \u2014 "),jR=n(h4e,"A",{href:!0});var xOr=s(jR);Kro=r(xOr,"MaskFormerFeatureExtractor"),xOr.forEach(t),Zro=r(h4e," (MaskFormer model)"),h4e.forEach(t),eto=i(ae),wh=n(ae,"LI",{});var p4e=s(wh);eoe=n(p4e,"STRONG",{});var kOr=s(eoe);oto=r(kOr,"perceiver"),kOr.forEach(t),rto=r(p4e," \u2014 "),DR=n(p4e,"A",{href:!0});var SOr=s(DR);tto=r(SOr,"PerceiverFeatureExtractor"),SOr.forEach(t),ato=r(p4e," (Perceiver model)"),p4e.forEach(t),nto=i(ae),Ah=n(ae,"LI",{});var _4e=s(Ah);ooe=n(_4e,"STRONG",{});var ROr=s(ooe);sto=r(ROr,"poolformer"),ROr.forEach(t),lto=r(_4e," \u2014 "),GR=n(_4e,"A",{href:!0});var BOr=s(GR);ito=r(BOr,"PoolFormerFeatureExtractor"),BOr.forEach(t),dto=r(_4e," (PoolFormer model)"),_4e.forEach(t),cto=i(ae),yh=n(ae,"LI",{});var u4e=s(yh);roe=n(u4e,"STRONG",{});var POr=s(roe);fto=r(POr,"regnet"),POr.forEach(t),mto=r(u4e," \u2014 "),OR=n(u4e,"A",{href:!0});var $Or=s(OR);gto=r($Or,"ConvNextFeatureExtractor"),$Or.forEach(t),hto=r(u4e," (RegNet model)"),u4e.forEach(t),pto=i(ae),Lh=n(ae,"LI",{});var b4e=s(Lh);toe=n(b4e,"STRONG",{});var IOr=s(toe);_to=r(IOr,"resnet"),IOr.forEach(t),uto=r(b4e," \u2014 "),VR=n(b4e,"A",{href:!0});var qOr=s(VR);bto=r(qOr,"ConvNextFeatureExtractor"),qOr.forEach(t),Fto=r(b4e," (ResNet model)"),b4e.forEach(t),vto=i(ae),xh=n(ae,"LI",{});var F4e=s(xh);aoe=n(F4e,"STRONG",{});var NOr=s(aoe);Tto=r(NOr,"segformer"),NOr.forEach(t),Mto=r(F4e," \u2014 "),XR=n(F4e,"A",{href:!0});var jOr=s(XR);Eto=r(jOr,"SegformerFeatureExtractor"),jOr.forEach(t),Cto=r(F4e," (SegFormer model)"),F4e.forEach(t),wto=i(ae),kh=n(ae,"LI",{});var v4e=s(kh);noe=n(v4e,"STRONG",{});var DOr=s(noe);Ato=r(DOr,"speech_to_text"),DOr.forEach(t),yto=r(v4e," \u2014 "),zR=n(v4e,"A",{href:!0});var GOr=s(zR);Lto=r(GOr,"Speech2TextFeatureExtractor"),GOr.forEach(t),xto=r(v4e," (Speech2Text model)"),v4e.forEach(t),kto=i(ae),Sh=n(ae,"LI",{});var T4e=s(Sh);soe=n(T4e,"STRONG",{});var OOr=s(soe);Sto=r(OOr,"swin"),OOr.forEach(t),Rto=r(T4e," \u2014 "),QR=n(T4e,"A",{href:!0});var VOr=s(QR);Bto=r(VOr,"ViTFeatureExtractor"),VOr.forEach(t),Pto=r(T4e," (Swin model)"),T4e.forEach(t),$to=i(ae),Rh=n(ae,"LI",{});var M4e=s(Rh);loe=n(M4e,"STRONG",{});var XOr=s(loe);Ito=r(XOr,"van"),XOr.forEach(t),qto=r(M4e," \u2014 "),WR=n(M4e,"A",{href:!0});var zOr=s(WR);Nto=r(zOr,"ConvNextFeatureExtractor"),zOr.forEach(t),jto=r(M4e," (VAN model)"),M4e.forEach(t),Dto=i(ae),Bh=n(ae,"LI",{});var E4e=s(Bh);ioe=n(E4e,"STRONG",{});var QOr=s(ioe);Gto=r(QOr,"vit"),QOr.forEach(t),Oto=r(E4e," \u2014 "),HR=n(E4e,"A",{href:!0});var WOr=s(HR);Vto=r(WOr,"ViTFeatureExtractor"),WOr.forEach(t),Xto=r(E4e," (ViT model)"),E4e.forEach(t),zto=i(ae),Ph=n(ae,"LI",{});var C4e=s(Ph);doe=n(C4e,"STRONG",{});var HOr=s(doe);Qto=r(HOr,"vit_mae"),HOr.forEach(t),Wto=r(C4e," \u2014 "),UR=n(C4e,"A",{href:!0});var UOr=s(UR);Hto=r(UOr,"ViTFeatureExtractor"),UOr.forEach(t),Uto=r(C4e," (ViTMAE model)"),C4e.forEach(t),Jto=i(ae),$h=n(ae,"LI",{});var w4e=s($h);coe=n(w4e,"STRONG",{});var JOr=s(coe);Yto=r(JOr,"wav2vec2"),JOr.forEach(t),Kto=r(w4e," \u2014 "),JR=n(w4e,"A",{href:!0});var YOr=s(JR);Zto=r(YOr,"Wav2Vec2FeatureExtractor"),YOr.forEach(t),eao=r(w4e," (Wav2Vec2 model)"),w4e.forEach(t),ae.forEach(t),oao=i(Nt),m(Ih.$$.fragment,Nt),rao=i(Nt),foe=n(Nt,"P",{});var KOr=s(foe);tao=r(KOr,"Examples:"),KOr.forEach(t),aao=i(Nt),m(H5.$$.fragment,Nt),Nt.forEach(t),nao=i(Xs),qh=n(Xs,"DIV",{class:!0});var RPe=s(qh);m(U5.$$.fragment,RPe),sao=i(RPe),moe=n(RPe,"P",{});var ZOr=s(moe);lao=r(ZOr,"Register a new feature extractor for this class."),ZOr.forEach(t),RPe.forEach(t),Xs.forEach(t),ARe=i(c),Hi=n(c,"H2",{class:!0});var BPe=s(Hi);Nh=n(BPe,"A",{id:!0,class:!0,href:!0});var eVr=s(Nh);goe=n(eVr,"SPAN",{});var oVr=s(goe);m(J5.$$.fragment,oVr),oVr.forEach(t),eVr.forEach(t),iao=i(BPe),hoe=n(BPe,"SPAN",{});var rVr=s(hoe);dao=r(rVr,"AutoProcessor"),rVr.forEach(t),BPe.forEach(t),yRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(Y5.$$.fragment,zs),cao=i(zs),K5=n(zs,"P",{});var PPe=s(K5);fao=r(PPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YR=n(PPe,"A",{href:!0});var tVr=s(YR);mao=r(tVr,"AutoProcessor.from_pretrained()"),tVr.forEach(t),gao=r(PPe," class method."),PPe.forEach(t),hao=i(zs),Z5=n(zs,"P",{});var $Pe=s(Z5);pao=r($Pe,"This class cannot be instantiated directly using "),poe=n($Pe,"CODE",{});var aVr=s(poe);_ao=r(aVr,"__init__()"),aVr.forEach(t),uao=r($Pe," (throws an error)."),$Pe.forEach(t),bao=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(e3.$$.fragment,jt),Fao=i(jt),_oe=n(jt,"P",{});var nVr=s(_oe);vao=r(nVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nVr.forEach(t),Tao=i(jt),Ui=n(jt,"P",{});var cU=s(Ui);Mao=r(cU,"The processor class to instantiate is selected based on the "),uoe=n(cU,"CODE",{});var sVr=s(uoe);Eao=r(sVr,"model_type"),sVr.forEach(t),Cao=r(cU,` property of the config object (either
passed as an argument or loaded from `),boe=n(cU,"CODE",{});var lVr=s(boe);wao=r(lVr,"pretrained_model_name_or_path"),lVr.forEach(t),Aao=r(cU," if possible):"),cU.forEach(t),yao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);jh=n(jo,"LI",{});var A4e=s(jh);Foe=n(A4e,"STRONG",{});var iVr=s(Foe);Lao=r(iVr,"clip"),iVr.forEach(t),xao=r(A4e," \u2014 "),KR=n(A4e,"A",{href:!0});var dVr=s(KR);kao=r(dVr,"CLIPProcessor"),dVr.forEach(t),Sao=r(A4e," (CLIP model)"),A4e.forEach(t),Rao=i(jo),Dh=n(jo,"LI",{});var y4e=s(Dh);voe=n(y4e,"STRONG",{});var cVr=s(voe);Bao=r(cVr,"layoutlmv2"),cVr.forEach(t),Pao=r(y4e," \u2014 "),ZR=n(y4e,"A",{href:!0});var fVr=s(ZR);$ao=r(fVr,"LayoutLMv2Processor"),fVr.forEach(t),Iao=r(y4e," (LayoutLMv2 model)"),y4e.forEach(t),qao=i(jo),Gh=n(jo,"LI",{});var L4e=s(Gh);Toe=n(L4e,"STRONG",{});var mVr=s(Toe);Nao=r(mVr,"layoutxlm"),mVr.forEach(t),jao=r(L4e," \u2014 "),eB=n(L4e,"A",{href:!0});var gVr=s(eB);Dao=r(gVr,"LayoutXLMProcessor"),gVr.forEach(t),Gao=r(L4e," (LayoutXLM model)"),L4e.forEach(t),Oao=i(jo),Oh=n(jo,"LI",{});var x4e=s(Oh);Moe=n(x4e,"STRONG",{});var hVr=s(Moe);Vao=r(hVr,"speech_to_text"),hVr.forEach(t),Xao=r(x4e," \u2014 "),oB=n(x4e,"A",{href:!0});var pVr=s(oB);zao=r(pVr,"Speech2TextProcessor"),pVr.forEach(t),Qao=r(x4e," (Speech2Text model)"),x4e.forEach(t),Wao=i(jo),Vh=n(jo,"LI",{});var k4e=s(Vh);Eoe=n(k4e,"STRONG",{});var _Vr=s(Eoe);Hao=r(_Vr,"speech_to_text_2"),_Vr.forEach(t),Uao=r(k4e," \u2014 "),rB=n(k4e,"A",{href:!0});var uVr=s(rB);Jao=r(uVr,"Speech2Text2Processor"),uVr.forEach(t),Yao=r(k4e," (Speech2Text2 model)"),k4e.forEach(t),Kao=i(jo),Xh=n(jo,"LI",{});var S4e=s(Xh);Coe=n(S4e,"STRONG",{});var bVr=s(Coe);Zao=r(bVr,"trocr"),bVr.forEach(t),eno=r(S4e," \u2014 "),tB=n(S4e,"A",{href:!0});var FVr=s(tB);ono=r(FVr,"TrOCRProcessor"),FVr.forEach(t),rno=r(S4e," (TrOCR model)"),S4e.forEach(t),tno=i(jo),zh=n(jo,"LI",{});var R4e=s(zh);woe=n(R4e,"STRONG",{});var vVr=s(woe);ano=r(vVr,"vision-text-dual-encoder"),vVr.forEach(t),nno=r(R4e," \u2014 "),aB=n(R4e,"A",{href:!0});var TVr=s(aB);sno=r(TVr,"VisionTextDualEncoderProcessor"),TVr.forEach(t),lno=r(R4e," (VisionTextDualEncoder model)"),R4e.forEach(t),ino=i(jo),Qh=n(jo,"LI",{});var B4e=s(Qh);Aoe=n(B4e,"STRONG",{});var MVr=s(Aoe);dno=r(MVr,"wav2vec2"),MVr.forEach(t),cno=r(B4e," \u2014 "),nB=n(B4e,"A",{href:!0});var EVr=s(nB);fno=r(EVr,"Wav2Vec2Processor"),EVr.forEach(t),mno=r(B4e," (Wav2Vec2 model)"),B4e.forEach(t),jo.forEach(t),gno=i(jt),m(Wh.$$.fragment,jt),hno=i(jt),yoe=n(jt,"P",{});var CVr=s(yoe);pno=r(CVr,"Examples:"),CVr.forEach(t),_no=i(jt),m(o3.$$.fragment,jt),jt.forEach(t),uno=i(zs),Hh=n(zs,"DIV",{class:!0});var IPe=s(Hh);m(r3.$$.fragment,IPe),bno=i(IPe),Loe=n(IPe,"P",{});var wVr=s(Loe);Fno=r(wVr,"Register a new processor for this class."),wVr.forEach(t),IPe.forEach(t),zs.forEach(t),LRe=i(c),Ji=n(c,"H2",{class:!0});var qPe=s(Ji);Uh=n(qPe,"A",{id:!0,class:!0,href:!0});var AVr=s(Uh);xoe=n(AVr,"SPAN",{});var yVr=s(xoe);m(t3.$$.fragment,yVr),yVr.forEach(t),AVr.forEach(t),vno=i(qPe),koe=n(qPe,"SPAN",{});var LVr=s(koe);Tno=r(LVr,"AutoModel"),LVr.forEach(t),qPe.forEach(t),xRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(a3.$$.fragment,Qs),Mno=i(Qs),Yi=n(Qs,"P",{});var fU=s(Yi);Eno=r(fU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sB=n(fU,"A",{href:!0});var xVr=s(sB);Cno=r(xVr,"from_pretrained()"),xVr.forEach(t),wno=r(fU," class method or the "),lB=n(fU,"A",{href:!0});var kVr=s(lB);Ano=r(kVr,"from_config()"),kVr.forEach(t),yno=r(fU,` class
method.`),fU.forEach(t),Lno=i(Qs),n3=n(Qs,"P",{});var NPe=s(n3);xno=r(NPe,"This class cannot be instantiated directly using "),Soe=n(NPe,"CODE",{});var SVr=s(Soe);kno=r(SVr,"__init__()"),SVr.forEach(t),Sno=r(NPe," (throws an error)."),NPe.forEach(t),Rno=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(s3.$$.fragment,Ws),Bno=i(Ws),Roe=n(Ws,"P",{});var RVr=s(Roe);Pno=r(RVr,"Instantiates one of the base model classes of the library from a configuration."),RVr.forEach(t),$no=i(Ws),Ki=n(Ws,"P",{});var mU=s(Ki);Ino=r(mU,`Note:
Loading a model from its configuration file does `),Boe=n(mU,"STRONG",{});var BVr=s(Boe);qno=r(BVr,"not"),BVr.forEach(t),Nno=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),iB=n(mU,"A",{href:!0});var PVr=s(iB);jno=r(PVr,"from_pretrained()"),PVr.forEach(t),Dno=r(mU," to load the model weights."),mU.forEach(t),Gno=i(Ws),Poe=n(Ws,"P",{});var $Vr=s(Poe);Ono=r($Vr,"Examples:"),$Vr.forEach(t),Vno=i(Ws),m(l3.$$.fragment,Ws),Ws.forEach(t),Xno=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(i3.$$.fragment,Dt),zno=i(Dt),$oe=n(Dt,"P",{});var IVr=s($oe);Qno=r(IVr,"Instantiate one of the base model classes of the library from a pretrained model."),IVr.forEach(t),Wno=i(Dt),Xa=n(Dt,"P",{});var yE=s(Xa);Hno=r(yE,"The model class to instantiate is selected based on the "),Ioe=n(yE,"CODE",{});var qVr=s(Ioe);Uno=r(qVr,"model_type"),qVr.forEach(t),Jno=r(yE,` property of the config object (either
passed as an argument or loaded from `),qoe=n(yE,"CODE",{});var NVr=s(qoe);Yno=r(NVr,"pretrained_model_name_or_path"),NVr.forEach(t),Kno=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Noe=n(yE,"CODE",{});var jVr=s(Noe);Zno=r(jVr,"pretrained_model_name_or_path"),jVr.forEach(t),eso=r(yE,":"),yE.forEach(t),oso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Jh=n(M,"LI",{});var P4e=s(Jh);joe=n(P4e,"STRONG",{});var DVr=s(joe);rso=r(DVr,"albert"),DVr.forEach(t),tso=r(P4e," \u2014 "),dB=n(P4e,"A",{href:!0});var GVr=s(dB);aso=r(GVr,"AlbertModel"),GVr.forEach(t),nso=r(P4e," (ALBERT model)"),P4e.forEach(t),sso=i(M),Yh=n(M,"LI",{});var $4e=s(Yh);Doe=n($4e,"STRONG",{});var OVr=s(Doe);lso=r(OVr,"bart"),OVr.forEach(t),iso=r($4e," \u2014 "),cB=n($4e,"A",{href:!0});var VVr=s(cB);dso=r(VVr,"BartModel"),VVr.forEach(t),cso=r($4e," (BART model)"),$4e.forEach(t),fso=i(M),Kh=n(M,"LI",{});var I4e=s(Kh);Goe=n(I4e,"STRONG",{});var XVr=s(Goe);mso=r(XVr,"beit"),XVr.forEach(t),gso=r(I4e," \u2014 "),fB=n(I4e,"A",{href:!0});var zVr=s(fB);hso=r(zVr,"BeitModel"),zVr.forEach(t),pso=r(I4e," (BEiT model)"),I4e.forEach(t),_so=i(M),Zh=n(M,"LI",{});var q4e=s(Zh);Ooe=n(q4e,"STRONG",{});var QVr=s(Ooe);uso=r(QVr,"bert"),QVr.forEach(t),bso=r(q4e," \u2014 "),mB=n(q4e,"A",{href:!0});var WVr=s(mB);Fso=r(WVr,"BertModel"),WVr.forEach(t),vso=r(q4e," (BERT model)"),q4e.forEach(t),Tso=i(M),ep=n(M,"LI",{});var N4e=s(ep);Voe=n(N4e,"STRONG",{});var HVr=s(Voe);Mso=r(HVr,"bert-generation"),HVr.forEach(t),Eso=r(N4e," \u2014 "),gB=n(N4e,"A",{href:!0});var UVr=s(gB);Cso=r(UVr,"BertGenerationEncoder"),UVr.forEach(t),wso=r(N4e," (Bert Generation model)"),N4e.forEach(t),Aso=i(M),op=n(M,"LI",{});var j4e=s(op);Xoe=n(j4e,"STRONG",{});var JVr=s(Xoe);yso=r(JVr,"big_bird"),JVr.forEach(t),Lso=r(j4e," \u2014 "),hB=n(j4e,"A",{href:!0});var YVr=s(hB);xso=r(YVr,"BigBirdModel"),YVr.forEach(t),kso=r(j4e," (BigBird model)"),j4e.forEach(t),Sso=i(M),rp=n(M,"LI",{});var D4e=s(rp);zoe=n(D4e,"STRONG",{});var KVr=s(zoe);Rso=r(KVr,"bigbird_pegasus"),KVr.forEach(t),Bso=r(D4e," \u2014 "),pB=n(D4e,"A",{href:!0});var ZVr=s(pB);Pso=r(ZVr,"BigBirdPegasusModel"),ZVr.forEach(t),$so=r(D4e," (BigBirdPegasus model)"),D4e.forEach(t),Iso=i(M),tp=n(M,"LI",{});var G4e=s(tp);Qoe=n(G4e,"STRONG",{});var eXr=s(Qoe);qso=r(eXr,"blenderbot"),eXr.forEach(t),Nso=r(G4e," \u2014 "),_B=n(G4e,"A",{href:!0});var oXr=s(_B);jso=r(oXr,"BlenderbotModel"),oXr.forEach(t),Dso=r(G4e," (Blenderbot model)"),G4e.forEach(t),Gso=i(M),ap=n(M,"LI",{});var O4e=s(ap);Woe=n(O4e,"STRONG",{});var rXr=s(Woe);Oso=r(rXr,"blenderbot-small"),rXr.forEach(t),Vso=r(O4e," \u2014 "),uB=n(O4e,"A",{href:!0});var tXr=s(uB);Xso=r(tXr,"BlenderbotSmallModel"),tXr.forEach(t),zso=r(O4e," (BlenderbotSmall model)"),O4e.forEach(t),Qso=i(M),np=n(M,"LI",{});var V4e=s(np);Hoe=n(V4e,"STRONG",{});var aXr=s(Hoe);Wso=r(aXr,"camembert"),aXr.forEach(t),Hso=r(V4e," \u2014 "),bB=n(V4e,"A",{href:!0});var nXr=s(bB);Uso=r(nXr,"CamembertModel"),nXr.forEach(t),Jso=r(V4e," (CamemBERT model)"),V4e.forEach(t),Yso=i(M),sp=n(M,"LI",{});var X4e=s(sp);Uoe=n(X4e,"STRONG",{});var sXr=s(Uoe);Kso=r(sXr,"canine"),sXr.forEach(t),Zso=r(X4e," \u2014 "),FB=n(X4e,"A",{href:!0});var lXr=s(FB);elo=r(lXr,"CanineModel"),lXr.forEach(t),olo=r(X4e," (Canine model)"),X4e.forEach(t),rlo=i(M),lp=n(M,"LI",{});var z4e=s(lp);Joe=n(z4e,"STRONG",{});var iXr=s(Joe);tlo=r(iXr,"clip"),iXr.forEach(t),alo=r(z4e," \u2014 "),vB=n(z4e,"A",{href:!0});var dXr=s(vB);nlo=r(dXr,"CLIPModel"),dXr.forEach(t),slo=r(z4e," (CLIP model)"),z4e.forEach(t),llo=i(M),ip=n(M,"LI",{});var Q4e=s(ip);Yoe=n(Q4e,"STRONG",{});var cXr=s(Yoe);ilo=r(cXr,"convbert"),cXr.forEach(t),dlo=r(Q4e," \u2014 "),TB=n(Q4e,"A",{href:!0});var fXr=s(TB);clo=r(fXr,"ConvBertModel"),fXr.forEach(t),flo=r(Q4e," (ConvBERT model)"),Q4e.forEach(t),mlo=i(M),dp=n(M,"LI",{});var W4e=s(dp);Koe=n(W4e,"STRONG",{});var mXr=s(Koe);glo=r(mXr,"convnext"),mXr.forEach(t),hlo=r(W4e," \u2014 "),MB=n(W4e,"A",{href:!0});var gXr=s(MB);plo=r(gXr,"ConvNextModel"),gXr.forEach(t),_lo=r(W4e," (ConvNext model)"),W4e.forEach(t),ulo=i(M),cp=n(M,"LI",{});var H4e=s(cp);Zoe=n(H4e,"STRONG",{});var hXr=s(Zoe);blo=r(hXr,"ctrl"),hXr.forEach(t),Flo=r(H4e," \u2014 "),EB=n(H4e,"A",{href:!0});var pXr=s(EB);vlo=r(pXr,"CTRLModel"),pXr.forEach(t),Tlo=r(H4e," (CTRL model)"),H4e.forEach(t),Mlo=i(M),fp=n(M,"LI",{});var U4e=s(fp);ere=n(U4e,"STRONG",{});var _Xr=s(ere);Elo=r(_Xr,"data2vec-audio"),_Xr.forEach(t),Clo=r(U4e," \u2014 "),CB=n(U4e,"A",{href:!0});var uXr=s(CB);wlo=r(uXr,"Data2VecAudioModel"),uXr.forEach(t),Alo=r(U4e," (Data2VecAudio model)"),U4e.forEach(t),ylo=i(M),mp=n(M,"LI",{});var J4e=s(mp);ore=n(J4e,"STRONG",{});var bXr=s(ore);Llo=r(bXr,"data2vec-text"),bXr.forEach(t),xlo=r(J4e," \u2014 "),wB=n(J4e,"A",{href:!0});var FXr=s(wB);klo=r(FXr,"Data2VecTextModel"),FXr.forEach(t),Slo=r(J4e," (Data2VecText model)"),J4e.forEach(t),Rlo=i(M),gp=n(M,"LI",{});var Y4e=s(gp);rre=n(Y4e,"STRONG",{});var vXr=s(rre);Blo=r(vXr,"deberta"),vXr.forEach(t),Plo=r(Y4e," \u2014 "),AB=n(Y4e,"A",{href:!0});var TXr=s(AB);$lo=r(TXr,"DebertaModel"),TXr.forEach(t),Ilo=r(Y4e," (DeBERTa model)"),Y4e.forEach(t),qlo=i(M),hp=n(M,"LI",{});var K4e=s(hp);tre=n(K4e,"STRONG",{});var MXr=s(tre);Nlo=r(MXr,"deberta-v2"),MXr.forEach(t),jlo=r(K4e," \u2014 "),yB=n(K4e,"A",{href:!0});var EXr=s(yB);Dlo=r(EXr,"DebertaV2Model"),EXr.forEach(t),Glo=r(K4e," (DeBERTa-v2 model)"),K4e.forEach(t),Olo=i(M),pp=n(M,"LI",{});var Z4e=s(pp);are=n(Z4e,"STRONG",{});var CXr=s(are);Vlo=r(CXr,"decision_transformer"),CXr.forEach(t),Xlo=r(Z4e," \u2014 "),LB=n(Z4e,"A",{href:!0});var wXr=s(LB);zlo=r(wXr,"DecisionTransformerModel"),wXr.forEach(t),Qlo=r(Z4e," (Decision Transformer model)"),Z4e.forEach(t),Wlo=i(M),_p=n(M,"LI",{});var eEe=s(_p);nre=n(eEe,"STRONG",{});var AXr=s(nre);Hlo=r(AXr,"deit"),AXr.forEach(t),Ulo=r(eEe," \u2014 "),xB=n(eEe,"A",{href:!0});var yXr=s(xB);Jlo=r(yXr,"DeiTModel"),yXr.forEach(t),Ylo=r(eEe," (DeiT model)"),eEe.forEach(t),Klo=i(M),up=n(M,"LI",{});var oEe=s(up);sre=n(oEe,"STRONG",{});var LXr=s(sre);Zlo=r(LXr,"detr"),LXr.forEach(t),eio=r(oEe," \u2014 "),kB=n(oEe,"A",{href:!0});var xXr=s(kB);oio=r(xXr,"DetrModel"),xXr.forEach(t),rio=r(oEe," (DETR model)"),oEe.forEach(t),tio=i(M),bp=n(M,"LI",{});var rEe=s(bp);lre=n(rEe,"STRONG",{});var kXr=s(lre);aio=r(kXr,"distilbert"),kXr.forEach(t),nio=r(rEe," \u2014 "),SB=n(rEe,"A",{href:!0});var SXr=s(SB);sio=r(SXr,"DistilBertModel"),SXr.forEach(t),lio=r(rEe," (DistilBERT model)"),rEe.forEach(t),iio=i(M),Fp=n(M,"LI",{});var tEe=s(Fp);ire=n(tEe,"STRONG",{});var RXr=s(ire);dio=r(RXr,"dpr"),RXr.forEach(t),cio=r(tEe," \u2014 "),RB=n(tEe,"A",{href:!0});var BXr=s(RB);fio=r(BXr,"DPRQuestionEncoder"),BXr.forEach(t),mio=r(tEe," (DPR model)"),tEe.forEach(t),gio=i(M),vp=n(M,"LI",{});var aEe=s(vp);dre=n(aEe,"STRONG",{});var PXr=s(dre);hio=r(PXr,"dpt"),PXr.forEach(t),pio=r(aEe," \u2014 "),BB=n(aEe,"A",{href:!0});var $Xr=s(BB);_io=r($Xr,"DPTModel"),$Xr.forEach(t),uio=r(aEe," (DPT model)"),aEe.forEach(t),bio=i(M),Tp=n(M,"LI",{});var nEe=s(Tp);cre=n(nEe,"STRONG",{});var IXr=s(cre);Fio=r(IXr,"electra"),IXr.forEach(t),vio=r(nEe," \u2014 "),PB=n(nEe,"A",{href:!0});var qXr=s(PB);Tio=r(qXr,"ElectraModel"),qXr.forEach(t),Mio=r(nEe," (ELECTRA model)"),nEe.forEach(t),Eio=i(M),Mp=n(M,"LI",{});var sEe=s(Mp);fre=n(sEe,"STRONG",{});var NXr=s(fre);Cio=r(NXr,"flaubert"),NXr.forEach(t),wio=r(sEe," \u2014 "),$B=n(sEe,"A",{href:!0});var jXr=s($B);Aio=r(jXr,"FlaubertModel"),jXr.forEach(t),yio=r(sEe," (FlauBERT model)"),sEe.forEach(t),Lio=i(M),Ep=n(M,"LI",{});var lEe=s(Ep);mre=n(lEe,"STRONG",{});var DXr=s(mre);xio=r(DXr,"fnet"),DXr.forEach(t),kio=r(lEe," \u2014 "),IB=n(lEe,"A",{href:!0});var GXr=s(IB);Sio=r(GXr,"FNetModel"),GXr.forEach(t),Rio=r(lEe," (FNet model)"),lEe.forEach(t),Bio=i(M),Cp=n(M,"LI",{});var iEe=s(Cp);gre=n(iEe,"STRONG",{});var OXr=s(gre);Pio=r(OXr,"fsmt"),OXr.forEach(t),$io=r(iEe," \u2014 "),qB=n(iEe,"A",{href:!0});var VXr=s(qB);Iio=r(VXr,"FSMTModel"),VXr.forEach(t),qio=r(iEe," (FairSeq Machine-Translation model)"),iEe.forEach(t),Nio=i(M),js=n(M,"LI",{});var mx=s(js);hre=n(mx,"STRONG",{});var XXr=s(hre);jio=r(XXr,"funnel"),XXr.forEach(t),Dio=r(mx," \u2014 "),NB=n(mx,"A",{href:!0});var zXr=s(NB);Gio=r(zXr,"FunnelModel"),zXr.forEach(t),Oio=r(mx," or "),jB=n(mx,"A",{href:!0});var QXr=s(jB);Vio=r(QXr,"FunnelBaseModel"),QXr.forEach(t),Xio=r(mx," (Funnel Transformer model)"),mx.forEach(t),zio=i(M),wp=n(M,"LI",{});var dEe=s(wp);pre=n(dEe,"STRONG",{});var WXr=s(pre);Qio=r(WXr,"glpn"),WXr.forEach(t),Wio=r(dEe," \u2014 "),DB=n(dEe,"A",{href:!0});var HXr=s(DB);Hio=r(HXr,"GLPNModel"),HXr.forEach(t),Uio=r(dEe," (GLPN model)"),dEe.forEach(t),Jio=i(M),Ap=n(M,"LI",{});var cEe=s(Ap);_re=n(cEe,"STRONG",{});var UXr=s(_re);Yio=r(UXr,"gpt2"),UXr.forEach(t),Kio=r(cEe," \u2014 "),GB=n(cEe,"A",{href:!0});var JXr=s(GB);Zio=r(JXr,"GPT2Model"),JXr.forEach(t),edo=r(cEe," (OpenAI GPT-2 model)"),cEe.forEach(t),odo=i(M),yp=n(M,"LI",{});var fEe=s(yp);ure=n(fEe,"STRONG",{});var YXr=s(ure);rdo=r(YXr,"gpt_neo"),YXr.forEach(t),tdo=r(fEe," \u2014 "),OB=n(fEe,"A",{href:!0});var KXr=s(OB);ado=r(KXr,"GPTNeoModel"),KXr.forEach(t),ndo=r(fEe," (GPT Neo model)"),fEe.forEach(t),sdo=i(M),Lp=n(M,"LI",{});var mEe=s(Lp);bre=n(mEe,"STRONG",{});var ZXr=s(bre);ldo=r(ZXr,"gptj"),ZXr.forEach(t),ido=r(mEe," \u2014 "),VB=n(mEe,"A",{href:!0});var ezr=s(VB);ddo=r(ezr,"GPTJModel"),ezr.forEach(t),cdo=r(mEe," (GPT-J model)"),mEe.forEach(t),fdo=i(M),xp=n(M,"LI",{});var gEe=s(xp);Fre=n(gEe,"STRONG",{});var ozr=s(Fre);mdo=r(ozr,"hubert"),ozr.forEach(t),gdo=r(gEe," \u2014 "),XB=n(gEe,"A",{href:!0});var rzr=s(XB);hdo=r(rzr,"HubertModel"),rzr.forEach(t),pdo=r(gEe," (Hubert model)"),gEe.forEach(t),_do=i(M),kp=n(M,"LI",{});var hEe=s(kp);vre=n(hEe,"STRONG",{});var tzr=s(vre);udo=r(tzr,"ibert"),tzr.forEach(t),bdo=r(hEe," \u2014 "),zB=n(hEe,"A",{href:!0});var azr=s(zB);Fdo=r(azr,"IBertModel"),azr.forEach(t),vdo=r(hEe," (I-BERT model)"),hEe.forEach(t),Tdo=i(M),Sp=n(M,"LI",{});var pEe=s(Sp);Tre=n(pEe,"STRONG",{});var nzr=s(Tre);Mdo=r(nzr,"imagegpt"),nzr.forEach(t),Edo=r(pEe," \u2014 "),QB=n(pEe,"A",{href:!0});var szr=s(QB);Cdo=r(szr,"ImageGPTModel"),szr.forEach(t),wdo=r(pEe," (ImageGPT model)"),pEe.forEach(t),Ado=i(M),Rp=n(M,"LI",{});var _Ee=s(Rp);Mre=n(_Ee,"STRONG",{});var lzr=s(Mre);ydo=r(lzr,"layoutlm"),lzr.forEach(t),Ldo=r(_Ee," \u2014 "),WB=n(_Ee,"A",{href:!0});var izr=s(WB);xdo=r(izr,"LayoutLMModel"),izr.forEach(t),kdo=r(_Ee," (LayoutLM model)"),_Ee.forEach(t),Sdo=i(M),Bp=n(M,"LI",{});var uEe=s(Bp);Ere=n(uEe,"STRONG",{});var dzr=s(Ere);Rdo=r(dzr,"layoutlmv2"),dzr.forEach(t),Bdo=r(uEe," \u2014 "),HB=n(uEe,"A",{href:!0});var czr=s(HB);Pdo=r(czr,"LayoutLMv2Model"),czr.forEach(t),$do=r(uEe," (LayoutLMv2 model)"),uEe.forEach(t),Ido=i(M),Pp=n(M,"LI",{});var bEe=s(Pp);Cre=n(bEe,"STRONG",{});var fzr=s(Cre);qdo=r(fzr,"led"),fzr.forEach(t),Ndo=r(bEe," \u2014 "),UB=n(bEe,"A",{href:!0});var mzr=s(UB);jdo=r(mzr,"LEDModel"),mzr.forEach(t),Ddo=r(bEe," (LED model)"),bEe.forEach(t),Gdo=i(M),$p=n(M,"LI",{});var FEe=s($p);wre=n(FEe,"STRONG",{});var gzr=s(wre);Odo=r(gzr,"longformer"),gzr.forEach(t),Vdo=r(FEe," \u2014 "),JB=n(FEe,"A",{href:!0});var hzr=s(JB);Xdo=r(hzr,"LongformerModel"),hzr.forEach(t),zdo=r(FEe," (Longformer model)"),FEe.forEach(t),Qdo=i(M),Ip=n(M,"LI",{});var vEe=s(Ip);Are=n(vEe,"STRONG",{});var pzr=s(Are);Wdo=r(pzr,"luke"),pzr.forEach(t),Hdo=r(vEe," \u2014 "),YB=n(vEe,"A",{href:!0});var _zr=s(YB);Udo=r(_zr,"LukeModel"),_zr.forEach(t),Jdo=r(vEe," (LUKE model)"),vEe.forEach(t),Ydo=i(M),qp=n(M,"LI",{});var TEe=s(qp);yre=n(TEe,"STRONG",{});var uzr=s(yre);Kdo=r(uzr,"lxmert"),uzr.forEach(t),Zdo=r(TEe," \u2014 "),KB=n(TEe,"A",{href:!0});var bzr=s(KB);eco=r(bzr,"LxmertModel"),bzr.forEach(t),oco=r(TEe," (LXMERT model)"),TEe.forEach(t),rco=i(M),Np=n(M,"LI",{});var MEe=s(Np);Lre=n(MEe,"STRONG",{});var Fzr=s(Lre);tco=r(Fzr,"m2m_100"),Fzr.forEach(t),aco=r(MEe," \u2014 "),ZB=n(MEe,"A",{href:!0});var vzr=s(ZB);nco=r(vzr,"M2M100Model"),vzr.forEach(t),sco=r(MEe," (M2M100 model)"),MEe.forEach(t),lco=i(M),jp=n(M,"LI",{});var EEe=s(jp);xre=n(EEe,"STRONG",{});var Tzr=s(xre);ico=r(Tzr,"marian"),Tzr.forEach(t),dco=r(EEe," \u2014 "),eP=n(EEe,"A",{href:!0});var Mzr=s(eP);cco=r(Mzr,"MarianModel"),Mzr.forEach(t),fco=r(EEe," (Marian model)"),EEe.forEach(t),mco=i(M),Dp=n(M,"LI",{});var CEe=s(Dp);kre=n(CEe,"STRONG",{});var Ezr=s(kre);gco=r(Ezr,"maskformer"),Ezr.forEach(t),hco=r(CEe," \u2014 "),oP=n(CEe,"A",{href:!0});var Czr=s(oP);pco=r(Czr,"MaskFormerModel"),Czr.forEach(t),_co=r(CEe," (MaskFormer model)"),CEe.forEach(t),uco=i(M),Gp=n(M,"LI",{});var wEe=s(Gp);Sre=n(wEe,"STRONG",{});var wzr=s(Sre);bco=r(wzr,"mbart"),wzr.forEach(t),Fco=r(wEe," \u2014 "),rP=n(wEe,"A",{href:!0});var Azr=s(rP);vco=r(Azr,"MBartModel"),Azr.forEach(t),Tco=r(wEe," (mBART model)"),wEe.forEach(t),Mco=i(M),Op=n(M,"LI",{});var AEe=s(Op);Rre=n(AEe,"STRONG",{});var yzr=s(Rre);Eco=r(yzr,"megatron-bert"),yzr.forEach(t),Cco=r(AEe," \u2014 "),tP=n(AEe,"A",{href:!0});var Lzr=s(tP);wco=r(Lzr,"MegatronBertModel"),Lzr.forEach(t),Aco=r(AEe," (MegatronBert model)"),AEe.forEach(t),yco=i(M),Vp=n(M,"LI",{});var yEe=s(Vp);Bre=n(yEe,"STRONG",{});var xzr=s(Bre);Lco=r(xzr,"mobilebert"),xzr.forEach(t),xco=r(yEe," \u2014 "),aP=n(yEe,"A",{href:!0});var kzr=s(aP);kco=r(kzr,"MobileBertModel"),kzr.forEach(t),Sco=r(yEe," (MobileBERT model)"),yEe.forEach(t),Rco=i(M),Xp=n(M,"LI",{});var LEe=s(Xp);Pre=n(LEe,"STRONG",{});var Szr=s(Pre);Bco=r(Szr,"mpnet"),Szr.forEach(t),Pco=r(LEe," \u2014 "),nP=n(LEe,"A",{href:!0});var Rzr=s(nP);$co=r(Rzr,"MPNetModel"),Rzr.forEach(t),Ico=r(LEe," (MPNet model)"),LEe.forEach(t),qco=i(M),zp=n(M,"LI",{});var xEe=s(zp);$re=n(xEe,"STRONG",{});var Bzr=s($re);Nco=r(Bzr,"mt5"),Bzr.forEach(t),jco=r(xEe," \u2014 "),sP=n(xEe,"A",{href:!0});var Pzr=s(sP);Dco=r(Pzr,"MT5Model"),Pzr.forEach(t),Gco=r(xEe," (mT5 model)"),xEe.forEach(t),Oco=i(M),Qp=n(M,"LI",{});var kEe=s(Qp);Ire=n(kEe,"STRONG",{});var $zr=s(Ire);Vco=r($zr,"nystromformer"),$zr.forEach(t),Xco=r(kEe," \u2014 "),lP=n(kEe,"A",{href:!0});var Izr=s(lP);zco=r(Izr,"NystromformerModel"),Izr.forEach(t),Qco=r(kEe," (Nystromformer model)"),kEe.forEach(t),Wco=i(M),Wp=n(M,"LI",{});var SEe=s(Wp);qre=n(SEe,"STRONG",{});var qzr=s(qre);Hco=r(qzr,"openai-gpt"),qzr.forEach(t),Uco=r(SEe," \u2014 "),iP=n(SEe,"A",{href:!0});var Nzr=s(iP);Jco=r(Nzr,"OpenAIGPTModel"),Nzr.forEach(t),Yco=r(SEe," (OpenAI GPT model)"),SEe.forEach(t),Kco=i(M),Hp=n(M,"LI",{});var REe=s(Hp);Nre=n(REe,"STRONG",{});var jzr=s(Nre);Zco=r(jzr,"pegasus"),jzr.forEach(t),efo=r(REe," \u2014 "),dP=n(REe,"A",{href:!0});var Dzr=s(dP);ofo=r(Dzr,"PegasusModel"),Dzr.forEach(t),rfo=r(REe," (Pegasus model)"),REe.forEach(t),tfo=i(M),Up=n(M,"LI",{});var BEe=s(Up);jre=n(BEe,"STRONG",{});var Gzr=s(jre);afo=r(Gzr,"perceiver"),Gzr.forEach(t),nfo=r(BEe," \u2014 "),cP=n(BEe,"A",{href:!0});var Ozr=s(cP);sfo=r(Ozr,"PerceiverModel"),Ozr.forEach(t),lfo=r(BEe," (Perceiver model)"),BEe.forEach(t),ifo=i(M),Jp=n(M,"LI",{});var PEe=s(Jp);Dre=n(PEe,"STRONG",{});var Vzr=s(Dre);dfo=r(Vzr,"plbart"),Vzr.forEach(t),cfo=r(PEe," \u2014 "),fP=n(PEe,"A",{href:!0});var Xzr=s(fP);ffo=r(Xzr,"PLBartModel"),Xzr.forEach(t),mfo=r(PEe," (PLBart model)"),PEe.forEach(t),gfo=i(M),Yp=n(M,"LI",{});var $Ee=s(Yp);Gre=n($Ee,"STRONG",{});var zzr=s(Gre);hfo=r(zzr,"poolformer"),zzr.forEach(t),pfo=r($Ee," \u2014 "),mP=n($Ee,"A",{href:!0});var Qzr=s(mP);_fo=r(Qzr,"PoolFormerModel"),Qzr.forEach(t),ufo=r($Ee," (PoolFormer model)"),$Ee.forEach(t),bfo=i(M),Kp=n(M,"LI",{});var IEe=s(Kp);Ore=n(IEe,"STRONG",{});var Wzr=s(Ore);Ffo=r(Wzr,"prophetnet"),Wzr.forEach(t),vfo=r(IEe," \u2014 "),gP=n(IEe,"A",{href:!0});var Hzr=s(gP);Tfo=r(Hzr,"ProphetNetModel"),Hzr.forEach(t),Mfo=r(IEe," (ProphetNet model)"),IEe.forEach(t),Efo=i(M),Zp=n(M,"LI",{});var qEe=s(Zp);Vre=n(qEe,"STRONG",{});var Uzr=s(Vre);Cfo=r(Uzr,"qdqbert"),Uzr.forEach(t),wfo=r(qEe," \u2014 "),hP=n(qEe,"A",{href:!0});var Jzr=s(hP);Afo=r(Jzr,"QDQBertModel"),Jzr.forEach(t),yfo=r(qEe," (QDQBert model)"),qEe.forEach(t),Lfo=i(M),e_=n(M,"LI",{});var NEe=s(e_);Xre=n(NEe,"STRONG",{});var Yzr=s(Xre);xfo=r(Yzr,"reformer"),Yzr.forEach(t),kfo=r(NEe," \u2014 "),pP=n(NEe,"A",{href:!0});var Kzr=s(pP);Sfo=r(Kzr,"ReformerModel"),Kzr.forEach(t),Rfo=r(NEe," (Reformer model)"),NEe.forEach(t),Bfo=i(M),o_=n(M,"LI",{});var jEe=s(o_);zre=n(jEe,"STRONG",{});var Zzr=s(zre);Pfo=r(Zzr,"regnet"),Zzr.forEach(t),$fo=r(jEe," \u2014 "),_P=n(jEe,"A",{href:!0});var eQr=s(_P);Ifo=r(eQr,"RegNetModel"),eQr.forEach(t),qfo=r(jEe," (RegNet model)"),jEe.forEach(t),Nfo=i(M),r_=n(M,"LI",{});var DEe=s(r_);Qre=n(DEe,"STRONG",{});var oQr=s(Qre);jfo=r(oQr,"rembert"),oQr.forEach(t),Dfo=r(DEe," \u2014 "),uP=n(DEe,"A",{href:!0});var rQr=s(uP);Gfo=r(rQr,"RemBertModel"),rQr.forEach(t),Ofo=r(DEe," (RemBERT model)"),DEe.forEach(t),Vfo=i(M),t_=n(M,"LI",{});var GEe=s(t_);Wre=n(GEe,"STRONG",{});var tQr=s(Wre);Xfo=r(tQr,"resnet"),tQr.forEach(t),zfo=r(GEe," \u2014 "),bP=n(GEe,"A",{href:!0});var aQr=s(bP);Qfo=r(aQr,"ResNetModel"),aQr.forEach(t),Wfo=r(GEe," (ResNet model)"),GEe.forEach(t),Hfo=i(M),a_=n(M,"LI",{});var OEe=s(a_);Hre=n(OEe,"STRONG",{});var nQr=s(Hre);Ufo=r(nQr,"retribert"),nQr.forEach(t),Jfo=r(OEe," \u2014 "),FP=n(OEe,"A",{href:!0});var sQr=s(FP);Yfo=r(sQr,"RetriBertModel"),sQr.forEach(t),Kfo=r(OEe," (RetriBERT model)"),OEe.forEach(t),Zfo=i(M),n_=n(M,"LI",{});var VEe=s(n_);Ure=n(VEe,"STRONG",{});var lQr=s(Ure);emo=r(lQr,"roberta"),lQr.forEach(t),omo=r(VEe," \u2014 "),vP=n(VEe,"A",{href:!0});var iQr=s(vP);rmo=r(iQr,"RobertaModel"),iQr.forEach(t),tmo=r(VEe," (RoBERTa model)"),VEe.forEach(t),amo=i(M),s_=n(M,"LI",{});var XEe=s(s_);Jre=n(XEe,"STRONG",{});var dQr=s(Jre);nmo=r(dQr,"roformer"),dQr.forEach(t),smo=r(XEe," \u2014 "),TP=n(XEe,"A",{href:!0});var cQr=s(TP);lmo=r(cQr,"RoFormerModel"),cQr.forEach(t),imo=r(XEe," (RoFormer model)"),XEe.forEach(t),dmo=i(M),l_=n(M,"LI",{});var zEe=s(l_);Yre=n(zEe,"STRONG",{});var fQr=s(Yre);cmo=r(fQr,"segformer"),fQr.forEach(t),fmo=r(zEe," \u2014 "),MP=n(zEe,"A",{href:!0});var mQr=s(MP);mmo=r(mQr,"SegformerModel"),mQr.forEach(t),gmo=r(zEe," (SegFormer model)"),zEe.forEach(t),hmo=i(M),i_=n(M,"LI",{});var QEe=s(i_);Kre=n(QEe,"STRONG",{});var gQr=s(Kre);pmo=r(gQr,"sew"),gQr.forEach(t),_mo=r(QEe," \u2014 "),EP=n(QEe,"A",{href:!0});var hQr=s(EP);umo=r(hQr,"SEWModel"),hQr.forEach(t),bmo=r(QEe," (SEW model)"),QEe.forEach(t),Fmo=i(M),d_=n(M,"LI",{});var WEe=s(d_);Zre=n(WEe,"STRONG",{});var pQr=s(Zre);vmo=r(pQr,"sew-d"),pQr.forEach(t),Tmo=r(WEe," \u2014 "),CP=n(WEe,"A",{href:!0});var _Qr=s(CP);Mmo=r(_Qr,"SEWDModel"),_Qr.forEach(t),Emo=r(WEe," (SEW-D model)"),WEe.forEach(t),Cmo=i(M),c_=n(M,"LI",{});var HEe=s(c_);ete=n(HEe,"STRONG",{});var uQr=s(ete);wmo=r(uQr,"speech_to_text"),uQr.forEach(t),Amo=r(HEe," \u2014 "),wP=n(HEe,"A",{href:!0});var bQr=s(wP);ymo=r(bQr,"Speech2TextModel"),bQr.forEach(t),Lmo=r(HEe," (Speech2Text model)"),HEe.forEach(t),xmo=i(M),f_=n(M,"LI",{});var UEe=s(f_);ote=n(UEe,"STRONG",{});var FQr=s(ote);kmo=r(FQr,"splinter"),FQr.forEach(t),Smo=r(UEe," \u2014 "),AP=n(UEe,"A",{href:!0});var vQr=s(AP);Rmo=r(vQr,"SplinterModel"),vQr.forEach(t),Bmo=r(UEe," (Splinter model)"),UEe.forEach(t),Pmo=i(M),m_=n(M,"LI",{});var JEe=s(m_);rte=n(JEe,"STRONG",{});var TQr=s(rte);$mo=r(TQr,"squeezebert"),TQr.forEach(t),Imo=r(JEe," \u2014 "),yP=n(JEe,"A",{href:!0});var MQr=s(yP);qmo=r(MQr,"SqueezeBertModel"),MQr.forEach(t),Nmo=r(JEe," (SqueezeBERT model)"),JEe.forEach(t),jmo=i(M),g_=n(M,"LI",{});var YEe=s(g_);tte=n(YEe,"STRONG",{});var EQr=s(tte);Dmo=r(EQr,"swin"),EQr.forEach(t),Gmo=r(YEe," \u2014 "),LP=n(YEe,"A",{href:!0});var CQr=s(LP);Omo=r(CQr,"SwinModel"),CQr.forEach(t),Vmo=r(YEe," (Swin model)"),YEe.forEach(t),Xmo=i(M),h_=n(M,"LI",{});var KEe=s(h_);ate=n(KEe,"STRONG",{});var wQr=s(ate);zmo=r(wQr,"t5"),wQr.forEach(t),Qmo=r(KEe," \u2014 "),xP=n(KEe,"A",{href:!0});var AQr=s(xP);Wmo=r(AQr,"T5Model"),AQr.forEach(t),Hmo=r(KEe," (T5 model)"),KEe.forEach(t),Umo=i(M),p_=n(M,"LI",{});var ZEe=s(p_);nte=n(ZEe,"STRONG",{});var yQr=s(nte);Jmo=r(yQr,"tapas"),yQr.forEach(t),Ymo=r(ZEe," \u2014 "),kP=n(ZEe,"A",{href:!0});var LQr=s(kP);Kmo=r(LQr,"TapasModel"),LQr.forEach(t),Zmo=r(ZEe," (TAPAS model)"),ZEe.forEach(t),ego=i(M),__=n(M,"LI",{});var e5e=s(__);ste=n(e5e,"STRONG",{});var xQr=s(ste);ogo=r(xQr,"transfo-xl"),xQr.forEach(t),rgo=r(e5e," \u2014 "),SP=n(e5e,"A",{href:!0});var kQr=s(SP);tgo=r(kQr,"TransfoXLModel"),kQr.forEach(t),ago=r(e5e," (Transformer-XL model)"),e5e.forEach(t),ngo=i(M),u_=n(M,"LI",{});var o5e=s(u_);lte=n(o5e,"STRONG",{});var SQr=s(lte);sgo=r(SQr,"unispeech"),SQr.forEach(t),lgo=r(o5e," \u2014 "),RP=n(o5e,"A",{href:!0});var RQr=s(RP);igo=r(RQr,"UniSpeechModel"),RQr.forEach(t),dgo=r(o5e," (UniSpeech model)"),o5e.forEach(t),cgo=i(M),b_=n(M,"LI",{});var r5e=s(b_);ite=n(r5e,"STRONG",{});var BQr=s(ite);fgo=r(BQr,"unispeech-sat"),BQr.forEach(t),mgo=r(r5e," \u2014 "),BP=n(r5e,"A",{href:!0});var PQr=s(BP);ggo=r(PQr,"UniSpeechSatModel"),PQr.forEach(t),hgo=r(r5e," (UniSpeechSat model)"),r5e.forEach(t),pgo=i(M),F_=n(M,"LI",{});var t5e=s(F_);dte=n(t5e,"STRONG",{});var $Qr=s(dte);_go=r($Qr,"van"),$Qr.forEach(t),ugo=r(t5e," \u2014 "),PP=n(t5e,"A",{href:!0});var IQr=s(PP);bgo=r(IQr,"VanModel"),IQr.forEach(t),Fgo=r(t5e," (VAN model)"),t5e.forEach(t),vgo=i(M),v_=n(M,"LI",{});var a5e=s(v_);cte=n(a5e,"STRONG",{});var qQr=s(cte);Tgo=r(qQr,"vilt"),qQr.forEach(t),Mgo=r(a5e," \u2014 "),$P=n(a5e,"A",{href:!0});var NQr=s($P);Ego=r(NQr,"ViltModel"),NQr.forEach(t),Cgo=r(a5e," (ViLT model)"),a5e.forEach(t),wgo=i(M),T_=n(M,"LI",{});var n5e=s(T_);fte=n(n5e,"STRONG",{});var jQr=s(fte);Ago=r(jQr,"vision-text-dual-encoder"),jQr.forEach(t),ygo=r(n5e," \u2014 "),IP=n(n5e,"A",{href:!0});var DQr=s(IP);Lgo=r(DQr,"VisionTextDualEncoderModel"),DQr.forEach(t),xgo=r(n5e," (VisionTextDualEncoder model)"),n5e.forEach(t),kgo=i(M),M_=n(M,"LI",{});var s5e=s(M_);mte=n(s5e,"STRONG",{});var GQr=s(mte);Sgo=r(GQr,"visual_bert"),GQr.forEach(t),Rgo=r(s5e," \u2014 "),qP=n(s5e,"A",{href:!0});var OQr=s(qP);Bgo=r(OQr,"VisualBertModel"),OQr.forEach(t),Pgo=r(s5e," (VisualBert model)"),s5e.forEach(t),$go=i(M),E_=n(M,"LI",{});var l5e=s(E_);gte=n(l5e,"STRONG",{});var VQr=s(gte);Igo=r(VQr,"vit"),VQr.forEach(t),qgo=r(l5e," \u2014 "),NP=n(l5e,"A",{href:!0});var XQr=s(NP);Ngo=r(XQr,"ViTModel"),XQr.forEach(t),jgo=r(l5e," (ViT model)"),l5e.forEach(t),Dgo=i(M),C_=n(M,"LI",{});var i5e=s(C_);hte=n(i5e,"STRONG",{});var zQr=s(hte);Ggo=r(zQr,"vit_mae"),zQr.forEach(t),Ogo=r(i5e," \u2014 "),jP=n(i5e,"A",{href:!0});var QQr=s(jP);Vgo=r(QQr,"ViTMAEModel"),QQr.forEach(t),Xgo=r(i5e," (ViTMAE model)"),i5e.forEach(t),zgo=i(M),w_=n(M,"LI",{});var d5e=s(w_);pte=n(d5e,"STRONG",{});var WQr=s(pte);Qgo=r(WQr,"wav2vec2"),WQr.forEach(t),Wgo=r(d5e," \u2014 "),DP=n(d5e,"A",{href:!0});var HQr=s(DP);Hgo=r(HQr,"Wav2Vec2Model"),HQr.forEach(t),Ugo=r(d5e," (Wav2Vec2 model)"),d5e.forEach(t),Jgo=i(M),A_=n(M,"LI",{});var c5e=s(A_);_te=n(c5e,"STRONG",{});var UQr=s(_te);Ygo=r(UQr,"wavlm"),UQr.forEach(t),Kgo=r(c5e," \u2014 "),GP=n(c5e,"A",{href:!0});var JQr=s(GP);Zgo=r(JQr,"WavLMModel"),JQr.forEach(t),eho=r(c5e," (WavLM model)"),c5e.forEach(t),oho=i(M),y_=n(M,"LI",{});var f5e=s(y_);ute=n(f5e,"STRONG",{});var YQr=s(ute);rho=r(YQr,"xglm"),YQr.forEach(t),tho=r(f5e," \u2014 "),OP=n(f5e,"A",{href:!0});var KQr=s(OP);aho=r(KQr,"XGLMModel"),KQr.forEach(t),nho=r(f5e," (XGLM model)"),f5e.forEach(t),sho=i(M),L_=n(M,"LI",{});var m5e=s(L_);bte=n(m5e,"STRONG",{});var ZQr=s(bte);lho=r(ZQr,"xlm"),ZQr.forEach(t),iho=r(m5e," \u2014 "),VP=n(m5e,"A",{href:!0});var eWr=s(VP);dho=r(eWr,"XLMModel"),eWr.forEach(t),cho=r(m5e," (XLM model)"),m5e.forEach(t),fho=i(M),x_=n(M,"LI",{});var g5e=s(x_);Fte=n(g5e,"STRONG",{});var oWr=s(Fte);mho=r(oWr,"xlm-prophetnet"),oWr.forEach(t),gho=r(g5e," \u2014 "),XP=n(g5e,"A",{href:!0});var rWr=s(XP);hho=r(rWr,"XLMProphetNetModel"),rWr.forEach(t),pho=r(g5e," (XLMProphetNet model)"),g5e.forEach(t),_ho=i(M),k_=n(M,"LI",{});var h5e=s(k_);vte=n(h5e,"STRONG",{});var tWr=s(vte);uho=r(tWr,"xlm-roberta"),tWr.forEach(t),bho=r(h5e," \u2014 "),zP=n(h5e,"A",{href:!0});var aWr=s(zP);Fho=r(aWr,"XLMRobertaModel"),aWr.forEach(t),vho=r(h5e," (XLM-RoBERTa model)"),h5e.forEach(t),Tho=i(M),S_=n(M,"LI",{});var p5e=s(S_);Tte=n(p5e,"STRONG",{});var nWr=s(Tte);Mho=r(nWr,"xlm-roberta-xl"),nWr.forEach(t),Eho=r(p5e," \u2014 "),QP=n(p5e,"A",{href:!0});var sWr=s(QP);Cho=r(sWr,"XLMRobertaXLModel"),sWr.forEach(t),who=r(p5e," (XLM-RoBERTa-XL model)"),p5e.forEach(t),Aho=i(M),R_=n(M,"LI",{});var _5e=s(R_);Mte=n(_5e,"STRONG",{});var lWr=s(Mte);yho=r(lWr,"xlnet"),lWr.forEach(t),Lho=r(_5e," \u2014 "),WP=n(_5e,"A",{href:!0});var iWr=s(WP);xho=r(iWr,"XLNetModel"),iWr.forEach(t),kho=r(_5e," (XLNet model)"),_5e.forEach(t),Sho=i(M),B_=n(M,"LI",{});var u5e=s(B_);Ete=n(u5e,"STRONG",{});var dWr=s(Ete);Rho=r(dWr,"yoso"),dWr.forEach(t),Bho=r(u5e," \u2014 "),HP=n(u5e,"A",{href:!0});var cWr=s(HP);Pho=r(cWr,"YosoModel"),cWr.forEach(t),$ho=r(u5e," (YOSO model)"),u5e.forEach(t),M.forEach(t),Iho=i(Dt),P_=n(Dt,"P",{});var b5e=s(P_);qho=r(b5e,"The model is set in evaluation mode by default using "),Cte=n(b5e,"CODE",{});var fWr=s(Cte);Nho=r(fWr,"model.eval()"),fWr.forEach(t),jho=r(b5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wte=n(b5e,"CODE",{});var mWr=s(wte);Dho=r(mWr,"model.train()"),mWr.forEach(t),b5e.forEach(t),Gho=i(Dt),Ate=n(Dt,"P",{});var gWr=s(Ate);Oho=r(gWr,"Examples:"),gWr.forEach(t),Vho=i(Dt),m(d3.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),kRe=i(c),Zi=n(c,"H2",{class:!0});var jPe=s(Zi);$_=n(jPe,"A",{id:!0,class:!0,href:!0});var hWr=s($_);yte=n(hWr,"SPAN",{});var pWr=s(yte);m(c3.$$.fragment,pWr),pWr.forEach(t),hWr.forEach(t),Xho=i(jPe),Lte=n(jPe,"SPAN",{});var _Wr=s(Lte);zho=r(_Wr,"AutoModelForPreTraining"),_Wr.forEach(t),jPe.forEach(t),SRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(f3.$$.fragment,Hs),Qho=i(Hs),ed=n(Hs,"P",{});var gU=s(ed);Who=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UP=n(gU,"A",{href:!0});var uWr=s(UP);Hho=r(uWr,"from_pretrained()"),uWr.forEach(t),Uho=r(gU," class method or the "),JP=n(gU,"A",{href:!0});var bWr=s(JP);Jho=r(bWr,"from_config()"),bWr.forEach(t),Yho=r(gU,` class
method.`),gU.forEach(t),Kho=i(Hs),m3=n(Hs,"P",{});var DPe=s(m3);Zho=r(DPe,"This class cannot be instantiated directly using "),xte=n(DPe,"CODE",{});var FWr=s(xte);epo=r(FWr,"__init__()"),FWr.forEach(t),opo=r(DPe," (throws an error)."),DPe.forEach(t),rpo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(g3.$$.fragment,Us),tpo=i(Us),kte=n(Us,"P",{});var vWr=s(kte);apo=r(vWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vWr.forEach(t),npo=i(Us),od=n(Us,"P",{});var hU=s(od);spo=r(hU,`Note:
Loading a model from its configuration file does `),Ste=n(hU,"STRONG",{});var TWr=s(Ste);lpo=r(TWr,"not"),TWr.forEach(t),ipo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),YP=n(hU,"A",{href:!0});var MWr=s(YP);dpo=r(MWr,"from_pretrained()"),MWr.forEach(t),cpo=r(hU," to load the model weights."),hU.forEach(t),fpo=i(Us),Rte=n(Us,"P",{});var EWr=s(Rte);mpo=r(EWr,"Examples:"),EWr.forEach(t),gpo=i(Us),m(h3.$$.fragment,Us),Us.forEach(t),hpo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(p3.$$.fragment,Gt),ppo=i(Gt),Bte=n(Gt,"P",{});var CWr=s(Bte);_po=r(CWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CWr.forEach(t),upo=i(Gt),za=n(Gt,"P",{});var LE=s(za);bpo=r(LE,"The model class to instantiate is selected based on the "),Pte=n(LE,"CODE",{});var wWr=s(Pte);Fpo=r(wWr,"model_type"),wWr.forEach(t),vpo=r(LE,` property of the config object (either
passed as an argument or loaded from `),$te=n(LE,"CODE",{});var AWr=s($te);Tpo=r(AWr,"pretrained_model_name_or_path"),AWr.forEach(t),Mpo=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ite=n(LE,"CODE",{});var yWr=s(Ite);Epo=r(yWr,"pretrained_model_name_or_path"),yWr.forEach(t),Cpo=r(LE,":"),LE.forEach(t),wpo=i(Gt),S=n(Gt,"UL",{});var B=s(S);I_=n(B,"LI",{});var F5e=s(I_);qte=n(F5e,"STRONG",{});var LWr=s(qte);Apo=r(LWr,"albert"),LWr.forEach(t),ypo=r(F5e," \u2014 "),KP=n(F5e,"A",{href:!0});var xWr=s(KP);Lpo=r(xWr,"AlbertForPreTraining"),xWr.forEach(t),xpo=r(F5e," (ALBERT model)"),F5e.forEach(t),kpo=i(B),q_=n(B,"LI",{});var v5e=s(q_);Nte=n(v5e,"STRONG",{});var kWr=s(Nte);Spo=r(kWr,"bart"),kWr.forEach(t),Rpo=r(v5e," \u2014 "),ZP=n(v5e,"A",{href:!0});var SWr=s(ZP);Bpo=r(SWr,"BartForConditionalGeneration"),SWr.forEach(t),Ppo=r(v5e," (BART model)"),v5e.forEach(t),$po=i(B),N_=n(B,"LI",{});var T5e=s(N_);jte=n(T5e,"STRONG",{});var RWr=s(jte);Ipo=r(RWr,"bert"),RWr.forEach(t),qpo=r(T5e," \u2014 "),e$=n(T5e,"A",{href:!0});var BWr=s(e$);Npo=r(BWr,"BertForPreTraining"),BWr.forEach(t),jpo=r(T5e," (BERT model)"),T5e.forEach(t),Dpo=i(B),j_=n(B,"LI",{});var M5e=s(j_);Dte=n(M5e,"STRONG",{});var PWr=s(Dte);Gpo=r(PWr,"big_bird"),PWr.forEach(t),Opo=r(M5e," \u2014 "),o$=n(M5e,"A",{href:!0});var $Wr=s(o$);Vpo=r($Wr,"BigBirdForPreTraining"),$Wr.forEach(t),Xpo=r(M5e," (BigBird model)"),M5e.forEach(t),zpo=i(B),D_=n(B,"LI",{});var E5e=s(D_);Gte=n(E5e,"STRONG",{});var IWr=s(Gte);Qpo=r(IWr,"camembert"),IWr.forEach(t),Wpo=r(E5e," \u2014 "),r$=n(E5e,"A",{href:!0});var qWr=s(r$);Hpo=r(qWr,"CamembertForMaskedLM"),qWr.forEach(t),Upo=r(E5e," (CamemBERT model)"),E5e.forEach(t),Jpo=i(B),G_=n(B,"LI",{});var C5e=s(G_);Ote=n(C5e,"STRONG",{});var NWr=s(Ote);Ypo=r(NWr,"ctrl"),NWr.forEach(t),Kpo=r(C5e," \u2014 "),t$=n(C5e,"A",{href:!0});var jWr=s(t$);Zpo=r(jWr,"CTRLLMHeadModel"),jWr.forEach(t),e_o=r(C5e," (CTRL model)"),C5e.forEach(t),o_o=i(B),O_=n(B,"LI",{});var w5e=s(O_);Vte=n(w5e,"STRONG",{});var DWr=s(Vte);r_o=r(DWr,"data2vec-text"),DWr.forEach(t),t_o=r(w5e," \u2014 "),a$=n(w5e,"A",{href:!0});var GWr=s(a$);a_o=r(GWr,"Data2VecTextForMaskedLM"),GWr.forEach(t),n_o=r(w5e," (Data2VecText model)"),w5e.forEach(t),s_o=i(B),V_=n(B,"LI",{});var A5e=s(V_);Xte=n(A5e,"STRONG",{});var OWr=s(Xte);l_o=r(OWr,"deberta"),OWr.forEach(t),i_o=r(A5e," \u2014 "),n$=n(A5e,"A",{href:!0});var VWr=s(n$);d_o=r(VWr,"DebertaForMaskedLM"),VWr.forEach(t),c_o=r(A5e," (DeBERTa model)"),A5e.forEach(t),f_o=i(B),X_=n(B,"LI",{});var y5e=s(X_);zte=n(y5e,"STRONG",{});var XWr=s(zte);m_o=r(XWr,"deberta-v2"),XWr.forEach(t),g_o=r(y5e," \u2014 "),s$=n(y5e,"A",{href:!0});var zWr=s(s$);h_o=r(zWr,"DebertaV2ForMaskedLM"),zWr.forEach(t),p_o=r(y5e," (DeBERTa-v2 model)"),y5e.forEach(t),__o=i(B),z_=n(B,"LI",{});var L5e=s(z_);Qte=n(L5e,"STRONG",{});var QWr=s(Qte);u_o=r(QWr,"distilbert"),QWr.forEach(t),b_o=r(L5e," \u2014 "),l$=n(L5e,"A",{href:!0});var WWr=s(l$);F_o=r(WWr,"DistilBertForMaskedLM"),WWr.forEach(t),v_o=r(L5e," (DistilBERT model)"),L5e.forEach(t),T_o=i(B),Q_=n(B,"LI",{});var x5e=s(Q_);Wte=n(x5e,"STRONG",{});var HWr=s(Wte);M_o=r(HWr,"electra"),HWr.forEach(t),E_o=r(x5e," \u2014 "),i$=n(x5e,"A",{href:!0});var UWr=s(i$);C_o=r(UWr,"ElectraForPreTraining"),UWr.forEach(t),w_o=r(x5e," (ELECTRA model)"),x5e.forEach(t),A_o=i(B),W_=n(B,"LI",{});var k5e=s(W_);Hte=n(k5e,"STRONG",{});var JWr=s(Hte);y_o=r(JWr,"flaubert"),JWr.forEach(t),L_o=r(k5e," \u2014 "),d$=n(k5e,"A",{href:!0});var YWr=s(d$);x_o=r(YWr,"FlaubertWithLMHeadModel"),YWr.forEach(t),k_o=r(k5e," (FlauBERT model)"),k5e.forEach(t),S_o=i(B),H_=n(B,"LI",{});var S5e=s(H_);Ute=n(S5e,"STRONG",{});var KWr=s(Ute);R_o=r(KWr,"fnet"),KWr.forEach(t),B_o=r(S5e," \u2014 "),c$=n(S5e,"A",{href:!0});var ZWr=s(c$);P_o=r(ZWr,"FNetForPreTraining"),ZWr.forEach(t),$_o=r(S5e," (FNet model)"),S5e.forEach(t),I_o=i(B),U_=n(B,"LI",{});var R5e=s(U_);Jte=n(R5e,"STRONG",{});var eHr=s(Jte);q_o=r(eHr,"fsmt"),eHr.forEach(t),N_o=r(R5e," \u2014 "),f$=n(R5e,"A",{href:!0});var oHr=s(f$);j_o=r(oHr,"FSMTForConditionalGeneration"),oHr.forEach(t),D_o=r(R5e," (FairSeq Machine-Translation model)"),R5e.forEach(t),G_o=i(B),J_=n(B,"LI",{});var B5e=s(J_);Yte=n(B5e,"STRONG",{});var rHr=s(Yte);O_o=r(rHr,"funnel"),rHr.forEach(t),V_o=r(B5e," \u2014 "),m$=n(B5e,"A",{href:!0});var tHr=s(m$);X_o=r(tHr,"FunnelForPreTraining"),tHr.forEach(t),z_o=r(B5e," (Funnel Transformer model)"),B5e.forEach(t),Q_o=i(B),Y_=n(B,"LI",{});var P5e=s(Y_);Kte=n(P5e,"STRONG",{});var aHr=s(Kte);W_o=r(aHr,"gpt2"),aHr.forEach(t),H_o=r(P5e," \u2014 "),g$=n(P5e,"A",{href:!0});var nHr=s(g$);U_o=r(nHr,"GPT2LMHeadModel"),nHr.forEach(t),J_o=r(P5e," (OpenAI GPT-2 model)"),P5e.forEach(t),Y_o=i(B),K_=n(B,"LI",{});var $5e=s(K_);Zte=n($5e,"STRONG",{});var sHr=s(Zte);K_o=r(sHr,"ibert"),sHr.forEach(t),Z_o=r($5e," \u2014 "),h$=n($5e,"A",{href:!0});var lHr=s(h$);euo=r(lHr,"IBertForMaskedLM"),lHr.forEach(t),ouo=r($5e," (I-BERT model)"),$5e.forEach(t),ruo=i(B),Z_=n(B,"LI",{});var I5e=s(Z_);eae=n(I5e,"STRONG",{});var iHr=s(eae);tuo=r(iHr,"layoutlm"),iHr.forEach(t),auo=r(I5e," \u2014 "),p$=n(I5e,"A",{href:!0});var dHr=s(p$);nuo=r(dHr,"LayoutLMForMaskedLM"),dHr.forEach(t),suo=r(I5e," (LayoutLM model)"),I5e.forEach(t),luo=i(B),eu=n(B,"LI",{});var q5e=s(eu);oae=n(q5e,"STRONG",{});var cHr=s(oae);iuo=r(cHr,"longformer"),cHr.forEach(t),duo=r(q5e," \u2014 "),_$=n(q5e,"A",{href:!0});var fHr=s(_$);cuo=r(fHr,"LongformerForMaskedLM"),fHr.forEach(t),fuo=r(q5e," (Longformer model)"),q5e.forEach(t),muo=i(B),ou=n(B,"LI",{});var N5e=s(ou);rae=n(N5e,"STRONG",{});var mHr=s(rae);guo=r(mHr,"lxmert"),mHr.forEach(t),huo=r(N5e," \u2014 "),u$=n(N5e,"A",{href:!0});var gHr=s(u$);puo=r(gHr,"LxmertForPreTraining"),gHr.forEach(t),_uo=r(N5e," (LXMERT model)"),N5e.forEach(t),uuo=i(B),ru=n(B,"LI",{});var j5e=s(ru);tae=n(j5e,"STRONG",{});var hHr=s(tae);buo=r(hHr,"megatron-bert"),hHr.forEach(t),Fuo=r(j5e," \u2014 "),b$=n(j5e,"A",{href:!0});var pHr=s(b$);vuo=r(pHr,"MegatronBertForPreTraining"),pHr.forEach(t),Tuo=r(j5e," (MegatronBert model)"),j5e.forEach(t),Muo=i(B),tu=n(B,"LI",{});var D5e=s(tu);aae=n(D5e,"STRONG",{});var _Hr=s(aae);Euo=r(_Hr,"mobilebert"),_Hr.forEach(t),Cuo=r(D5e," \u2014 "),F$=n(D5e,"A",{href:!0});var uHr=s(F$);wuo=r(uHr,"MobileBertForPreTraining"),uHr.forEach(t),Auo=r(D5e," (MobileBERT model)"),D5e.forEach(t),yuo=i(B),au=n(B,"LI",{});var G5e=s(au);nae=n(G5e,"STRONG",{});var bHr=s(nae);Luo=r(bHr,"mpnet"),bHr.forEach(t),xuo=r(G5e," \u2014 "),v$=n(G5e,"A",{href:!0});var FHr=s(v$);kuo=r(FHr,"MPNetForMaskedLM"),FHr.forEach(t),Suo=r(G5e," (MPNet model)"),G5e.forEach(t),Ruo=i(B),nu=n(B,"LI",{});var O5e=s(nu);sae=n(O5e,"STRONG",{});var vHr=s(sae);Buo=r(vHr,"openai-gpt"),vHr.forEach(t),Puo=r(O5e," \u2014 "),T$=n(O5e,"A",{href:!0});var THr=s(T$);$uo=r(THr,"OpenAIGPTLMHeadModel"),THr.forEach(t),Iuo=r(O5e," (OpenAI GPT model)"),O5e.forEach(t),quo=i(B),su=n(B,"LI",{});var V5e=s(su);lae=n(V5e,"STRONG",{});var MHr=s(lae);Nuo=r(MHr,"retribert"),MHr.forEach(t),juo=r(V5e," \u2014 "),M$=n(V5e,"A",{href:!0});var EHr=s(M$);Duo=r(EHr,"RetriBertModel"),EHr.forEach(t),Guo=r(V5e," (RetriBERT model)"),V5e.forEach(t),Ouo=i(B),lu=n(B,"LI",{});var X5e=s(lu);iae=n(X5e,"STRONG",{});var CHr=s(iae);Vuo=r(CHr,"roberta"),CHr.forEach(t),Xuo=r(X5e," \u2014 "),E$=n(X5e,"A",{href:!0});var wHr=s(E$);zuo=r(wHr,"RobertaForMaskedLM"),wHr.forEach(t),Quo=r(X5e," (RoBERTa model)"),X5e.forEach(t),Wuo=i(B),iu=n(B,"LI",{});var z5e=s(iu);dae=n(z5e,"STRONG",{});var AHr=s(dae);Huo=r(AHr,"squeezebert"),AHr.forEach(t),Uuo=r(z5e," \u2014 "),C$=n(z5e,"A",{href:!0});var yHr=s(C$);Juo=r(yHr,"SqueezeBertForMaskedLM"),yHr.forEach(t),Yuo=r(z5e," (SqueezeBERT model)"),z5e.forEach(t),Kuo=i(B),du=n(B,"LI",{});var Q5e=s(du);cae=n(Q5e,"STRONG",{});var LHr=s(cae);Zuo=r(LHr,"t5"),LHr.forEach(t),e1o=r(Q5e," \u2014 "),w$=n(Q5e,"A",{href:!0});var xHr=s(w$);o1o=r(xHr,"T5ForConditionalGeneration"),xHr.forEach(t),r1o=r(Q5e," (T5 model)"),Q5e.forEach(t),t1o=i(B),cu=n(B,"LI",{});var W5e=s(cu);fae=n(W5e,"STRONG",{});var kHr=s(fae);a1o=r(kHr,"tapas"),kHr.forEach(t),n1o=r(W5e," \u2014 "),A$=n(W5e,"A",{href:!0});var SHr=s(A$);s1o=r(SHr,"TapasForMaskedLM"),SHr.forEach(t),l1o=r(W5e," (TAPAS model)"),W5e.forEach(t),i1o=i(B),fu=n(B,"LI",{});var H5e=s(fu);mae=n(H5e,"STRONG",{});var RHr=s(mae);d1o=r(RHr,"transfo-xl"),RHr.forEach(t),c1o=r(H5e," \u2014 "),y$=n(H5e,"A",{href:!0});var BHr=s(y$);f1o=r(BHr,"TransfoXLLMHeadModel"),BHr.forEach(t),m1o=r(H5e," (Transformer-XL model)"),H5e.forEach(t),g1o=i(B),mu=n(B,"LI",{});var U5e=s(mu);gae=n(U5e,"STRONG",{});var PHr=s(gae);h1o=r(PHr,"unispeech"),PHr.forEach(t),p1o=r(U5e," \u2014 "),L$=n(U5e,"A",{href:!0});var $Hr=s(L$);_1o=r($Hr,"UniSpeechForPreTraining"),$Hr.forEach(t),u1o=r(U5e," (UniSpeech model)"),U5e.forEach(t),b1o=i(B),gu=n(B,"LI",{});var J5e=s(gu);hae=n(J5e,"STRONG",{});var IHr=s(hae);F1o=r(IHr,"unispeech-sat"),IHr.forEach(t),v1o=r(J5e," \u2014 "),x$=n(J5e,"A",{href:!0});var qHr=s(x$);T1o=r(qHr,"UniSpeechSatForPreTraining"),qHr.forEach(t),M1o=r(J5e," (UniSpeechSat model)"),J5e.forEach(t),E1o=i(B),hu=n(B,"LI",{});var Y5e=s(hu);pae=n(Y5e,"STRONG",{});var NHr=s(pae);C1o=r(NHr,"visual_bert"),NHr.forEach(t),w1o=r(Y5e," \u2014 "),k$=n(Y5e,"A",{href:!0});var jHr=s(k$);A1o=r(jHr,"VisualBertForPreTraining"),jHr.forEach(t),y1o=r(Y5e," (VisualBert model)"),Y5e.forEach(t),L1o=i(B),pu=n(B,"LI",{});var K5e=s(pu);_ae=n(K5e,"STRONG",{});var DHr=s(_ae);x1o=r(DHr,"vit_mae"),DHr.forEach(t),k1o=r(K5e," \u2014 "),S$=n(K5e,"A",{href:!0});var GHr=s(S$);S1o=r(GHr,"ViTMAEForPreTraining"),GHr.forEach(t),R1o=r(K5e," (ViTMAE model)"),K5e.forEach(t),B1o=i(B),_u=n(B,"LI",{});var Z5e=s(_u);uae=n(Z5e,"STRONG",{});var OHr=s(uae);P1o=r(OHr,"wav2vec2"),OHr.forEach(t),$1o=r(Z5e," \u2014 "),R$=n(Z5e,"A",{href:!0});var VHr=s(R$);I1o=r(VHr,"Wav2Vec2ForPreTraining"),VHr.forEach(t),q1o=r(Z5e," (Wav2Vec2 model)"),Z5e.forEach(t),N1o=i(B),uu=n(B,"LI",{});var e3e=s(uu);bae=n(e3e,"STRONG",{});var XHr=s(bae);j1o=r(XHr,"xlm"),XHr.forEach(t),D1o=r(e3e," \u2014 "),B$=n(e3e,"A",{href:!0});var zHr=s(B$);G1o=r(zHr,"XLMWithLMHeadModel"),zHr.forEach(t),O1o=r(e3e," (XLM model)"),e3e.forEach(t),V1o=i(B),bu=n(B,"LI",{});var o3e=s(bu);Fae=n(o3e,"STRONG",{});var QHr=s(Fae);X1o=r(QHr,"xlm-roberta"),QHr.forEach(t),z1o=r(o3e," \u2014 "),P$=n(o3e,"A",{href:!0});var WHr=s(P$);Q1o=r(WHr,"XLMRobertaForMaskedLM"),WHr.forEach(t),W1o=r(o3e," (XLM-RoBERTa model)"),o3e.forEach(t),H1o=i(B),Fu=n(B,"LI",{});var r3e=s(Fu);vae=n(r3e,"STRONG",{});var HHr=s(vae);U1o=r(HHr,"xlm-roberta-xl"),HHr.forEach(t),J1o=r(r3e," \u2014 "),$$=n(r3e,"A",{href:!0});var UHr=s($$);Y1o=r(UHr,"XLMRobertaXLForMaskedLM"),UHr.forEach(t),K1o=r(r3e," (XLM-RoBERTa-XL model)"),r3e.forEach(t),Z1o=i(B),vu=n(B,"LI",{});var t3e=s(vu);Tae=n(t3e,"STRONG",{});var JHr=s(Tae);e8o=r(JHr,"xlnet"),JHr.forEach(t),o8o=r(t3e," \u2014 "),I$=n(t3e,"A",{href:!0});var YHr=s(I$);r8o=r(YHr,"XLNetLMHeadModel"),YHr.forEach(t),t8o=r(t3e," (XLNet model)"),t3e.forEach(t),B.forEach(t),a8o=i(Gt),Tu=n(Gt,"P",{});var a3e=s(Tu);n8o=r(a3e,"The model is set in evaluation mode by default using "),Mae=n(a3e,"CODE",{});var KHr=s(Mae);s8o=r(KHr,"model.eval()"),KHr.forEach(t),l8o=r(a3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=n(a3e,"CODE",{});var ZHr=s(Eae);i8o=r(ZHr,"model.train()"),ZHr.forEach(t),a3e.forEach(t),d8o=i(Gt),Cae=n(Gt,"P",{});var eUr=s(Cae);c8o=r(eUr,"Examples:"),eUr.forEach(t),f8o=i(Gt),m(_3.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),RRe=i(c),rd=n(c,"H2",{class:!0});var GPe=s(rd);Mu=n(GPe,"A",{id:!0,class:!0,href:!0});var oUr=s(Mu);wae=n(oUr,"SPAN",{});var rUr=s(wae);m(u3.$$.fragment,rUr),rUr.forEach(t),oUr.forEach(t),m8o=i(GPe),Aae=n(GPe,"SPAN",{});var tUr=s(Aae);g8o=r(tUr,"AutoModelForCausalLM"),tUr.forEach(t),GPe.forEach(t),BRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(b3.$$.fragment,Js),h8o=i(Js),td=n(Js,"P",{});var pU=s(td);p8o=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),q$=n(pU,"A",{href:!0});var aUr=s(q$);_8o=r(aUr,"from_pretrained()"),aUr.forEach(t),u8o=r(pU," class method or the "),N$=n(pU,"A",{href:!0});var nUr=s(N$);b8o=r(nUr,"from_config()"),nUr.forEach(t),F8o=r(pU,` class
method.`),pU.forEach(t),v8o=i(Js),F3=n(Js,"P",{});var OPe=s(F3);T8o=r(OPe,"This class cannot be instantiated directly using "),yae=n(OPe,"CODE",{});var sUr=s(yae);M8o=r(sUr,"__init__()"),sUr.forEach(t),E8o=r(OPe," (throws an error)."),OPe.forEach(t),C8o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(v3.$$.fragment,Ys),w8o=i(Ys),Lae=n(Ys,"P",{});var lUr=s(Lae);A8o=r(lUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lUr.forEach(t),y8o=i(Ys),ad=n(Ys,"P",{});var _U=s(ad);L8o=r(_U,`Note:
Loading a model from its configuration file does `),xae=n(_U,"STRONG",{});var iUr=s(xae);x8o=r(iUr,"not"),iUr.forEach(t),k8o=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),j$=n(_U,"A",{href:!0});var dUr=s(j$);S8o=r(dUr,"from_pretrained()"),dUr.forEach(t),R8o=r(_U," to load the model weights."),_U.forEach(t),B8o=i(Ys),kae=n(Ys,"P",{});var cUr=s(kae);P8o=r(cUr,"Examples:"),cUr.forEach(t),$8o=i(Ys),m(T3.$$.fragment,Ys),Ys.forEach(t),I8o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(M3.$$.fragment,Ot),q8o=i(Ot),Sae=n(Ot,"P",{});var fUr=s(Sae);N8o=r(fUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fUr.forEach(t),j8o=i(Ot),Qa=n(Ot,"P",{});var xE=s(Qa);D8o=r(xE,"The model class to instantiate is selected based on the "),Rae=n(xE,"CODE",{});var mUr=s(Rae);G8o=r(mUr,"model_type"),mUr.forEach(t),O8o=r(xE,` property of the config object (either
passed as an argument or loaded from `),Bae=n(xE,"CODE",{});var gUr=s(Bae);V8o=r(gUr,"pretrained_model_name_or_path"),gUr.forEach(t),X8o=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pae=n(xE,"CODE",{});var hUr=s(Pae);z8o=r(hUr,"pretrained_model_name_or_path"),hUr.forEach(t),Q8o=r(xE,":"),xE.forEach(t),W8o=i(Ot),$=n(Ot,"UL",{});var q=s($);Eu=n(q,"LI",{});var n3e=s(Eu);$ae=n(n3e,"STRONG",{});var pUr=s($ae);H8o=r(pUr,"bart"),pUr.forEach(t),U8o=r(n3e," \u2014 "),D$=n(n3e,"A",{href:!0});var _Ur=s(D$);J8o=r(_Ur,"BartForCausalLM"),_Ur.forEach(t),Y8o=r(n3e," (BART model)"),n3e.forEach(t),K8o=i(q),Cu=n(q,"LI",{});var s3e=s(Cu);Iae=n(s3e,"STRONG",{});var uUr=s(Iae);Z8o=r(uUr,"bert"),uUr.forEach(t),ebo=r(s3e," \u2014 "),G$=n(s3e,"A",{href:!0});var bUr=s(G$);obo=r(bUr,"BertLMHeadModel"),bUr.forEach(t),rbo=r(s3e," (BERT model)"),s3e.forEach(t),tbo=i(q),wu=n(q,"LI",{});var l3e=s(wu);qae=n(l3e,"STRONG",{});var FUr=s(qae);abo=r(FUr,"bert-generation"),FUr.forEach(t),nbo=r(l3e," \u2014 "),O$=n(l3e,"A",{href:!0});var vUr=s(O$);sbo=r(vUr,"BertGenerationDecoder"),vUr.forEach(t),lbo=r(l3e," (Bert Generation model)"),l3e.forEach(t),ibo=i(q),Au=n(q,"LI",{});var i3e=s(Au);Nae=n(i3e,"STRONG",{});var TUr=s(Nae);dbo=r(TUr,"big_bird"),TUr.forEach(t),cbo=r(i3e," \u2014 "),V$=n(i3e,"A",{href:!0});var MUr=s(V$);fbo=r(MUr,"BigBirdForCausalLM"),MUr.forEach(t),mbo=r(i3e," (BigBird model)"),i3e.forEach(t),gbo=i(q),yu=n(q,"LI",{});var d3e=s(yu);jae=n(d3e,"STRONG",{});var EUr=s(jae);hbo=r(EUr,"bigbird_pegasus"),EUr.forEach(t),pbo=r(d3e," \u2014 "),X$=n(d3e,"A",{href:!0});var CUr=s(X$);_bo=r(CUr,"BigBirdPegasusForCausalLM"),CUr.forEach(t),ubo=r(d3e," (BigBirdPegasus model)"),d3e.forEach(t),bbo=i(q),Lu=n(q,"LI",{});var c3e=s(Lu);Dae=n(c3e,"STRONG",{});var wUr=s(Dae);Fbo=r(wUr,"blenderbot"),wUr.forEach(t),vbo=r(c3e," \u2014 "),z$=n(c3e,"A",{href:!0});var AUr=s(z$);Tbo=r(AUr,"BlenderbotForCausalLM"),AUr.forEach(t),Mbo=r(c3e," (Blenderbot model)"),c3e.forEach(t),Ebo=i(q),xu=n(q,"LI",{});var f3e=s(xu);Gae=n(f3e,"STRONG",{});var yUr=s(Gae);Cbo=r(yUr,"blenderbot-small"),yUr.forEach(t),wbo=r(f3e," \u2014 "),Q$=n(f3e,"A",{href:!0});var LUr=s(Q$);Abo=r(LUr,"BlenderbotSmallForCausalLM"),LUr.forEach(t),ybo=r(f3e," (BlenderbotSmall model)"),f3e.forEach(t),Lbo=i(q),ku=n(q,"LI",{});var m3e=s(ku);Oae=n(m3e,"STRONG",{});var xUr=s(Oae);xbo=r(xUr,"camembert"),xUr.forEach(t),kbo=r(m3e," \u2014 "),W$=n(m3e,"A",{href:!0});var kUr=s(W$);Sbo=r(kUr,"CamembertForCausalLM"),kUr.forEach(t),Rbo=r(m3e," (CamemBERT model)"),m3e.forEach(t),Bbo=i(q),Su=n(q,"LI",{});var g3e=s(Su);Vae=n(g3e,"STRONG",{});var SUr=s(Vae);Pbo=r(SUr,"ctrl"),SUr.forEach(t),$bo=r(g3e," \u2014 "),H$=n(g3e,"A",{href:!0});var RUr=s(H$);Ibo=r(RUr,"CTRLLMHeadModel"),RUr.forEach(t),qbo=r(g3e," (CTRL model)"),g3e.forEach(t),Nbo=i(q),Ru=n(q,"LI",{});var h3e=s(Ru);Xae=n(h3e,"STRONG",{});var BUr=s(Xae);jbo=r(BUr,"data2vec-text"),BUr.forEach(t),Dbo=r(h3e," \u2014 "),U$=n(h3e,"A",{href:!0});var PUr=s(U$);Gbo=r(PUr,"Data2VecTextForCausalLM"),PUr.forEach(t),Obo=r(h3e," (Data2VecText model)"),h3e.forEach(t),Vbo=i(q),Bu=n(q,"LI",{});var p3e=s(Bu);zae=n(p3e,"STRONG",{});var $Ur=s(zae);Xbo=r($Ur,"electra"),$Ur.forEach(t),zbo=r(p3e," \u2014 "),J$=n(p3e,"A",{href:!0});var IUr=s(J$);Qbo=r(IUr,"ElectraForCausalLM"),IUr.forEach(t),Wbo=r(p3e," (ELECTRA model)"),p3e.forEach(t),Hbo=i(q),Pu=n(q,"LI",{});var _3e=s(Pu);Qae=n(_3e,"STRONG",{});var qUr=s(Qae);Ubo=r(qUr,"gpt2"),qUr.forEach(t),Jbo=r(_3e," \u2014 "),Y$=n(_3e,"A",{href:!0});var NUr=s(Y$);Ybo=r(NUr,"GPT2LMHeadModel"),NUr.forEach(t),Kbo=r(_3e," (OpenAI GPT-2 model)"),_3e.forEach(t),Zbo=i(q),$u=n(q,"LI",{});var u3e=s($u);Wae=n(u3e,"STRONG",{});var jUr=s(Wae);e2o=r(jUr,"gpt_neo"),jUr.forEach(t),o2o=r(u3e," \u2014 "),K$=n(u3e,"A",{href:!0});var DUr=s(K$);r2o=r(DUr,"GPTNeoForCausalLM"),DUr.forEach(t),t2o=r(u3e," (GPT Neo model)"),u3e.forEach(t),a2o=i(q),Iu=n(q,"LI",{});var b3e=s(Iu);Hae=n(b3e,"STRONG",{});var GUr=s(Hae);n2o=r(GUr,"gptj"),GUr.forEach(t),s2o=r(b3e," \u2014 "),Z$=n(b3e,"A",{href:!0});var OUr=s(Z$);l2o=r(OUr,"GPTJForCausalLM"),OUr.forEach(t),i2o=r(b3e," (GPT-J model)"),b3e.forEach(t),d2o=i(q),qu=n(q,"LI",{});var F3e=s(qu);Uae=n(F3e,"STRONG",{});var VUr=s(Uae);c2o=r(VUr,"marian"),VUr.forEach(t),f2o=r(F3e," \u2014 "),eI=n(F3e,"A",{href:!0});var XUr=s(eI);m2o=r(XUr,"MarianForCausalLM"),XUr.forEach(t),g2o=r(F3e," (Marian model)"),F3e.forEach(t),h2o=i(q),Nu=n(q,"LI",{});var v3e=s(Nu);Jae=n(v3e,"STRONG",{});var zUr=s(Jae);p2o=r(zUr,"mbart"),zUr.forEach(t),_2o=r(v3e," \u2014 "),oI=n(v3e,"A",{href:!0});var QUr=s(oI);u2o=r(QUr,"MBartForCausalLM"),QUr.forEach(t),b2o=r(v3e," (mBART model)"),v3e.forEach(t),F2o=i(q),ju=n(q,"LI",{});var T3e=s(ju);Yae=n(T3e,"STRONG",{});var WUr=s(Yae);v2o=r(WUr,"megatron-bert"),WUr.forEach(t),T2o=r(T3e," \u2014 "),rI=n(T3e,"A",{href:!0});var HUr=s(rI);M2o=r(HUr,"MegatronBertForCausalLM"),HUr.forEach(t),E2o=r(T3e," (MegatronBert model)"),T3e.forEach(t),C2o=i(q),Du=n(q,"LI",{});var M3e=s(Du);Kae=n(M3e,"STRONG",{});var UUr=s(Kae);w2o=r(UUr,"openai-gpt"),UUr.forEach(t),A2o=r(M3e," \u2014 "),tI=n(M3e,"A",{href:!0});var JUr=s(tI);y2o=r(JUr,"OpenAIGPTLMHeadModel"),JUr.forEach(t),L2o=r(M3e," (OpenAI GPT model)"),M3e.forEach(t),x2o=i(q),Gu=n(q,"LI",{});var E3e=s(Gu);Zae=n(E3e,"STRONG",{});var YUr=s(Zae);k2o=r(YUr,"pegasus"),YUr.forEach(t),S2o=r(E3e," \u2014 "),aI=n(E3e,"A",{href:!0});var KUr=s(aI);R2o=r(KUr,"PegasusForCausalLM"),KUr.forEach(t),B2o=r(E3e," (Pegasus model)"),E3e.forEach(t),P2o=i(q),Ou=n(q,"LI",{});var C3e=s(Ou);ene=n(C3e,"STRONG",{});var ZUr=s(ene);$2o=r(ZUr,"plbart"),ZUr.forEach(t),I2o=r(C3e," \u2014 "),nI=n(C3e,"A",{href:!0});var eJr=s(nI);q2o=r(eJr,"PLBartForCausalLM"),eJr.forEach(t),N2o=r(C3e," (PLBart model)"),C3e.forEach(t),j2o=i(q),Vu=n(q,"LI",{});var w3e=s(Vu);one=n(w3e,"STRONG",{});var oJr=s(one);D2o=r(oJr,"prophetnet"),oJr.forEach(t),G2o=r(w3e," \u2014 "),sI=n(w3e,"A",{href:!0});var rJr=s(sI);O2o=r(rJr,"ProphetNetForCausalLM"),rJr.forEach(t),V2o=r(w3e," (ProphetNet model)"),w3e.forEach(t),X2o=i(q),Xu=n(q,"LI",{});var A3e=s(Xu);rne=n(A3e,"STRONG",{});var tJr=s(rne);z2o=r(tJr,"qdqbert"),tJr.forEach(t),Q2o=r(A3e," \u2014 "),lI=n(A3e,"A",{href:!0});var aJr=s(lI);W2o=r(aJr,"QDQBertLMHeadModel"),aJr.forEach(t),H2o=r(A3e," (QDQBert model)"),A3e.forEach(t),U2o=i(q),zu=n(q,"LI",{});var y3e=s(zu);tne=n(y3e,"STRONG",{});var nJr=s(tne);J2o=r(nJr,"reformer"),nJr.forEach(t),Y2o=r(y3e," \u2014 "),iI=n(y3e,"A",{href:!0});var sJr=s(iI);K2o=r(sJr,"ReformerModelWithLMHead"),sJr.forEach(t),Z2o=r(y3e," (Reformer model)"),y3e.forEach(t),e6o=i(q),Qu=n(q,"LI",{});var L3e=s(Qu);ane=n(L3e,"STRONG",{});var lJr=s(ane);o6o=r(lJr,"rembert"),lJr.forEach(t),r6o=r(L3e," \u2014 "),dI=n(L3e,"A",{href:!0});var iJr=s(dI);t6o=r(iJr,"RemBertForCausalLM"),iJr.forEach(t),a6o=r(L3e," (RemBERT model)"),L3e.forEach(t),n6o=i(q),Wu=n(q,"LI",{});var x3e=s(Wu);nne=n(x3e,"STRONG",{});var dJr=s(nne);s6o=r(dJr,"roberta"),dJr.forEach(t),l6o=r(x3e," \u2014 "),cI=n(x3e,"A",{href:!0});var cJr=s(cI);i6o=r(cJr,"RobertaForCausalLM"),cJr.forEach(t),d6o=r(x3e," (RoBERTa model)"),x3e.forEach(t),c6o=i(q),Hu=n(q,"LI",{});var k3e=s(Hu);sne=n(k3e,"STRONG",{});var fJr=s(sne);f6o=r(fJr,"roformer"),fJr.forEach(t),m6o=r(k3e," \u2014 "),fI=n(k3e,"A",{href:!0});var mJr=s(fI);g6o=r(mJr,"RoFormerForCausalLM"),mJr.forEach(t),h6o=r(k3e," (RoFormer model)"),k3e.forEach(t),p6o=i(q),Uu=n(q,"LI",{});var S3e=s(Uu);lne=n(S3e,"STRONG",{});var gJr=s(lne);_6o=r(gJr,"speech_to_text_2"),gJr.forEach(t),u6o=r(S3e," \u2014 "),mI=n(S3e,"A",{href:!0});var hJr=s(mI);b6o=r(hJr,"Speech2Text2ForCausalLM"),hJr.forEach(t),F6o=r(S3e," (Speech2Text2 model)"),S3e.forEach(t),v6o=i(q),Ju=n(q,"LI",{});var R3e=s(Ju);ine=n(R3e,"STRONG",{});var pJr=s(ine);T6o=r(pJr,"transfo-xl"),pJr.forEach(t),M6o=r(R3e," \u2014 "),gI=n(R3e,"A",{href:!0});var _Jr=s(gI);E6o=r(_Jr,"TransfoXLLMHeadModel"),_Jr.forEach(t),C6o=r(R3e," (Transformer-XL model)"),R3e.forEach(t),w6o=i(q),Yu=n(q,"LI",{});var B3e=s(Yu);dne=n(B3e,"STRONG",{});var uJr=s(dne);A6o=r(uJr,"trocr"),uJr.forEach(t),y6o=r(B3e," \u2014 "),hI=n(B3e,"A",{href:!0});var bJr=s(hI);L6o=r(bJr,"TrOCRForCausalLM"),bJr.forEach(t),x6o=r(B3e," (TrOCR model)"),B3e.forEach(t),k6o=i(q),Ku=n(q,"LI",{});var P3e=s(Ku);cne=n(P3e,"STRONG",{});var FJr=s(cne);S6o=r(FJr,"xglm"),FJr.forEach(t),R6o=r(P3e," \u2014 "),pI=n(P3e,"A",{href:!0});var vJr=s(pI);B6o=r(vJr,"XGLMForCausalLM"),vJr.forEach(t),P6o=r(P3e," (XGLM model)"),P3e.forEach(t),$6o=i(q),Zu=n(q,"LI",{});var $3e=s(Zu);fne=n($3e,"STRONG",{});var TJr=s(fne);I6o=r(TJr,"xlm"),TJr.forEach(t),q6o=r($3e," \u2014 "),_I=n($3e,"A",{href:!0});var MJr=s(_I);N6o=r(MJr,"XLMWithLMHeadModel"),MJr.forEach(t),j6o=r($3e," (XLM model)"),$3e.forEach(t),D6o=i(q),e1=n(q,"LI",{});var I3e=s(e1);mne=n(I3e,"STRONG",{});var EJr=s(mne);G6o=r(EJr,"xlm-prophetnet"),EJr.forEach(t),O6o=r(I3e," \u2014 "),uI=n(I3e,"A",{href:!0});var CJr=s(uI);V6o=r(CJr,"XLMProphetNetForCausalLM"),CJr.forEach(t),X6o=r(I3e," (XLMProphetNet model)"),I3e.forEach(t),z6o=i(q),o1=n(q,"LI",{});var q3e=s(o1);gne=n(q3e,"STRONG",{});var wJr=s(gne);Q6o=r(wJr,"xlm-roberta"),wJr.forEach(t),W6o=r(q3e," \u2014 "),bI=n(q3e,"A",{href:!0});var AJr=s(bI);H6o=r(AJr,"XLMRobertaForCausalLM"),AJr.forEach(t),U6o=r(q3e," (XLM-RoBERTa model)"),q3e.forEach(t),J6o=i(q),r1=n(q,"LI",{});var N3e=s(r1);hne=n(N3e,"STRONG",{});var yJr=s(hne);Y6o=r(yJr,"xlm-roberta-xl"),yJr.forEach(t),K6o=r(N3e," \u2014 "),FI=n(N3e,"A",{href:!0});var LJr=s(FI);Z6o=r(LJr,"XLMRobertaXLForCausalLM"),LJr.forEach(t),eFo=r(N3e," (XLM-RoBERTa-XL model)"),N3e.forEach(t),oFo=i(q),t1=n(q,"LI",{});var j3e=s(t1);pne=n(j3e,"STRONG",{});var xJr=s(pne);rFo=r(xJr,"xlnet"),xJr.forEach(t),tFo=r(j3e," \u2014 "),vI=n(j3e,"A",{href:!0});var kJr=s(vI);aFo=r(kJr,"XLNetLMHeadModel"),kJr.forEach(t),nFo=r(j3e," (XLNet model)"),j3e.forEach(t),q.forEach(t),sFo=i(Ot),a1=n(Ot,"P",{});var D3e=s(a1);lFo=r(D3e,"The model is set in evaluation mode by default using "),_ne=n(D3e,"CODE",{});var SJr=s(_ne);iFo=r(SJr,"model.eval()"),SJr.forEach(t),dFo=r(D3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=n(D3e,"CODE",{});var RJr=s(une);cFo=r(RJr,"model.train()"),RJr.forEach(t),D3e.forEach(t),fFo=i(Ot),bne=n(Ot,"P",{});var BJr=s(bne);mFo=r(BJr,"Examples:"),BJr.forEach(t),gFo=i(Ot),m(E3.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),PRe=i(c),nd=n(c,"H2",{class:!0});var VPe=s(nd);n1=n(VPe,"A",{id:!0,class:!0,href:!0});var PJr=s(n1);Fne=n(PJr,"SPAN",{});var $Jr=s(Fne);m(C3.$$.fragment,$Jr),$Jr.forEach(t),PJr.forEach(t),hFo=i(VPe),vne=n(VPe,"SPAN",{});var IJr=s(vne);pFo=r(IJr,"AutoModelForMaskedLM"),IJr.forEach(t),VPe.forEach(t),$Re=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(w3.$$.fragment,Ks),_Fo=i(Ks),sd=n(Ks,"P",{});var uU=s(sd);uFo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TI=n(uU,"A",{href:!0});var qJr=s(TI);bFo=r(qJr,"from_pretrained()"),qJr.forEach(t),FFo=r(uU," class method or the "),MI=n(uU,"A",{href:!0});var NJr=s(MI);vFo=r(NJr,"from_config()"),NJr.forEach(t),TFo=r(uU,` class
method.`),uU.forEach(t),MFo=i(Ks),A3=n(Ks,"P",{});var XPe=s(A3);EFo=r(XPe,"This class cannot be instantiated directly using "),Tne=n(XPe,"CODE",{});var jJr=s(Tne);CFo=r(jJr,"__init__()"),jJr.forEach(t),wFo=r(XPe," (throws an error)."),XPe.forEach(t),AFo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(y3.$$.fragment,Zs),yFo=i(Zs),Mne=n(Zs,"P",{});var DJr=s(Mne);LFo=r(DJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DJr.forEach(t),xFo=i(Zs),ld=n(Zs,"P",{});var bU=s(ld);kFo=r(bU,`Note:
Loading a model from its configuration file does `),Ene=n(bU,"STRONG",{});var GJr=s(Ene);SFo=r(GJr,"not"),GJr.forEach(t),RFo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),EI=n(bU,"A",{href:!0});var OJr=s(EI);BFo=r(OJr,"from_pretrained()"),OJr.forEach(t),PFo=r(bU," to load the model weights."),bU.forEach(t),$Fo=i(Zs),Cne=n(Zs,"P",{});var VJr=s(Cne);IFo=r(VJr,"Examples:"),VJr.forEach(t),qFo=i(Zs),m(L3.$$.fragment,Zs),Zs.forEach(t),NFo=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(x3.$$.fragment,Vt),jFo=i(Vt),wne=n(Vt,"P",{});var XJr=s(wne);DFo=r(XJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XJr.forEach(t),GFo=i(Vt),Wa=n(Vt,"P",{});var kE=s(Wa);OFo=r(kE,"The model class to instantiate is selected based on the "),Ane=n(kE,"CODE",{});var zJr=s(Ane);VFo=r(zJr,"model_type"),zJr.forEach(t),XFo=r(kE,` property of the config object (either
passed as an argument or loaded from `),yne=n(kE,"CODE",{});var QJr=s(yne);zFo=r(QJr,"pretrained_model_name_or_path"),QJr.forEach(t),QFo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lne=n(kE,"CODE",{});var WJr=s(Lne);WFo=r(WJr,"pretrained_model_name_or_path"),WJr.forEach(t),HFo=r(kE,":"),kE.forEach(t),UFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);s1=n(N,"LI",{});var G3e=s(s1);xne=n(G3e,"STRONG",{});var HJr=s(xne);JFo=r(HJr,"albert"),HJr.forEach(t),YFo=r(G3e," \u2014 "),CI=n(G3e,"A",{href:!0});var UJr=s(CI);KFo=r(UJr,"AlbertForMaskedLM"),UJr.forEach(t),ZFo=r(G3e," (ALBERT model)"),G3e.forEach(t),evo=i(N),l1=n(N,"LI",{});var O3e=s(l1);kne=n(O3e,"STRONG",{});var JJr=s(kne);ovo=r(JJr,"bart"),JJr.forEach(t),rvo=r(O3e," \u2014 "),wI=n(O3e,"A",{href:!0});var YJr=s(wI);tvo=r(YJr,"BartForConditionalGeneration"),YJr.forEach(t),avo=r(O3e," (BART model)"),O3e.forEach(t),nvo=i(N),i1=n(N,"LI",{});var V3e=s(i1);Sne=n(V3e,"STRONG",{});var KJr=s(Sne);svo=r(KJr,"bert"),KJr.forEach(t),lvo=r(V3e," \u2014 "),AI=n(V3e,"A",{href:!0});var ZJr=s(AI);ivo=r(ZJr,"BertForMaskedLM"),ZJr.forEach(t),dvo=r(V3e," (BERT model)"),V3e.forEach(t),cvo=i(N),d1=n(N,"LI",{});var X3e=s(d1);Rne=n(X3e,"STRONG",{});var eYr=s(Rne);fvo=r(eYr,"big_bird"),eYr.forEach(t),mvo=r(X3e," \u2014 "),yI=n(X3e,"A",{href:!0});var oYr=s(yI);gvo=r(oYr,"BigBirdForMaskedLM"),oYr.forEach(t),hvo=r(X3e," (BigBird model)"),X3e.forEach(t),pvo=i(N),c1=n(N,"LI",{});var z3e=s(c1);Bne=n(z3e,"STRONG",{});var rYr=s(Bne);_vo=r(rYr,"camembert"),rYr.forEach(t),uvo=r(z3e," \u2014 "),LI=n(z3e,"A",{href:!0});var tYr=s(LI);bvo=r(tYr,"CamembertForMaskedLM"),tYr.forEach(t),Fvo=r(z3e," (CamemBERT model)"),z3e.forEach(t),vvo=i(N),f1=n(N,"LI",{});var Q3e=s(f1);Pne=n(Q3e,"STRONG",{});var aYr=s(Pne);Tvo=r(aYr,"convbert"),aYr.forEach(t),Mvo=r(Q3e," \u2014 "),xI=n(Q3e,"A",{href:!0});var nYr=s(xI);Evo=r(nYr,"ConvBertForMaskedLM"),nYr.forEach(t),Cvo=r(Q3e," (ConvBERT model)"),Q3e.forEach(t),wvo=i(N),m1=n(N,"LI",{});var W3e=s(m1);$ne=n(W3e,"STRONG",{});var sYr=s($ne);Avo=r(sYr,"data2vec-text"),sYr.forEach(t),yvo=r(W3e," \u2014 "),kI=n(W3e,"A",{href:!0});var lYr=s(kI);Lvo=r(lYr,"Data2VecTextForMaskedLM"),lYr.forEach(t),xvo=r(W3e," (Data2VecText model)"),W3e.forEach(t),kvo=i(N),g1=n(N,"LI",{});var H3e=s(g1);Ine=n(H3e,"STRONG",{});var iYr=s(Ine);Svo=r(iYr,"deberta"),iYr.forEach(t),Rvo=r(H3e," \u2014 "),SI=n(H3e,"A",{href:!0});var dYr=s(SI);Bvo=r(dYr,"DebertaForMaskedLM"),dYr.forEach(t),Pvo=r(H3e," (DeBERTa model)"),H3e.forEach(t),$vo=i(N),h1=n(N,"LI",{});var U3e=s(h1);qne=n(U3e,"STRONG",{});var cYr=s(qne);Ivo=r(cYr,"deberta-v2"),cYr.forEach(t),qvo=r(U3e," \u2014 "),RI=n(U3e,"A",{href:!0});var fYr=s(RI);Nvo=r(fYr,"DebertaV2ForMaskedLM"),fYr.forEach(t),jvo=r(U3e," (DeBERTa-v2 model)"),U3e.forEach(t),Dvo=i(N),p1=n(N,"LI",{});var J3e=s(p1);Nne=n(J3e,"STRONG",{});var mYr=s(Nne);Gvo=r(mYr,"distilbert"),mYr.forEach(t),Ovo=r(J3e," \u2014 "),BI=n(J3e,"A",{href:!0});var gYr=s(BI);Vvo=r(gYr,"DistilBertForMaskedLM"),gYr.forEach(t),Xvo=r(J3e," (DistilBERT model)"),J3e.forEach(t),zvo=i(N),_1=n(N,"LI",{});var Y3e=s(_1);jne=n(Y3e,"STRONG",{});var hYr=s(jne);Qvo=r(hYr,"electra"),hYr.forEach(t),Wvo=r(Y3e," \u2014 "),PI=n(Y3e,"A",{href:!0});var pYr=s(PI);Hvo=r(pYr,"ElectraForMaskedLM"),pYr.forEach(t),Uvo=r(Y3e," (ELECTRA model)"),Y3e.forEach(t),Jvo=i(N),u1=n(N,"LI",{});var K3e=s(u1);Dne=n(K3e,"STRONG",{});var _Yr=s(Dne);Yvo=r(_Yr,"flaubert"),_Yr.forEach(t),Kvo=r(K3e," \u2014 "),$I=n(K3e,"A",{href:!0});var uYr=s($I);Zvo=r(uYr,"FlaubertWithLMHeadModel"),uYr.forEach(t),e0o=r(K3e," (FlauBERT model)"),K3e.forEach(t),o0o=i(N),b1=n(N,"LI",{});var Z3e=s(b1);Gne=n(Z3e,"STRONG",{});var bYr=s(Gne);r0o=r(bYr,"fnet"),bYr.forEach(t),t0o=r(Z3e," \u2014 "),II=n(Z3e,"A",{href:!0});var FYr=s(II);a0o=r(FYr,"FNetForMaskedLM"),FYr.forEach(t),n0o=r(Z3e," (FNet model)"),Z3e.forEach(t),s0o=i(N),F1=n(N,"LI",{});var eCe=s(F1);One=n(eCe,"STRONG",{});var vYr=s(One);l0o=r(vYr,"funnel"),vYr.forEach(t),i0o=r(eCe," \u2014 "),qI=n(eCe,"A",{href:!0});var TYr=s(qI);d0o=r(TYr,"FunnelForMaskedLM"),TYr.forEach(t),c0o=r(eCe," (Funnel Transformer model)"),eCe.forEach(t),f0o=i(N),v1=n(N,"LI",{});var oCe=s(v1);Vne=n(oCe,"STRONG",{});var MYr=s(Vne);m0o=r(MYr,"ibert"),MYr.forEach(t),g0o=r(oCe," \u2014 "),NI=n(oCe,"A",{href:!0});var EYr=s(NI);h0o=r(EYr,"IBertForMaskedLM"),EYr.forEach(t),p0o=r(oCe," (I-BERT model)"),oCe.forEach(t),_0o=i(N),T1=n(N,"LI",{});var rCe=s(T1);Xne=n(rCe,"STRONG",{});var CYr=s(Xne);u0o=r(CYr,"layoutlm"),CYr.forEach(t),b0o=r(rCe," \u2014 "),jI=n(rCe,"A",{href:!0});var wYr=s(jI);F0o=r(wYr,"LayoutLMForMaskedLM"),wYr.forEach(t),v0o=r(rCe," (LayoutLM model)"),rCe.forEach(t),T0o=i(N),M1=n(N,"LI",{});var tCe=s(M1);zne=n(tCe,"STRONG",{});var AYr=s(zne);M0o=r(AYr,"longformer"),AYr.forEach(t),E0o=r(tCe," \u2014 "),DI=n(tCe,"A",{href:!0});var yYr=s(DI);C0o=r(yYr,"LongformerForMaskedLM"),yYr.forEach(t),w0o=r(tCe," (Longformer model)"),tCe.forEach(t),A0o=i(N),E1=n(N,"LI",{});var aCe=s(E1);Qne=n(aCe,"STRONG",{});var LYr=s(Qne);y0o=r(LYr,"mbart"),LYr.forEach(t),L0o=r(aCe," \u2014 "),GI=n(aCe,"A",{href:!0});var xYr=s(GI);x0o=r(xYr,"MBartForConditionalGeneration"),xYr.forEach(t),k0o=r(aCe," (mBART model)"),aCe.forEach(t),S0o=i(N),C1=n(N,"LI",{});var nCe=s(C1);Wne=n(nCe,"STRONG",{});var kYr=s(Wne);R0o=r(kYr,"megatron-bert"),kYr.forEach(t),B0o=r(nCe," \u2014 "),OI=n(nCe,"A",{href:!0});var SYr=s(OI);P0o=r(SYr,"MegatronBertForMaskedLM"),SYr.forEach(t),$0o=r(nCe," (MegatronBert model)"),nCe.forEach(t),I0o=i(N),w1=n(N,"LI",{});var sCe=s(w1);Hne=n(sCe,"STRONG",{});var RYr=s(Hne);q0o=r(RYr,"mobilebert"),RYr.forEach(t),N0o=r(sCe," \u2014 "),VI=n(sCe,"A",{href:!0});var BYr=s(VI);j0o=r(BYr,"MobileBertForMaskedLM"),BYr.forEach(t),D0o=r(sCe," (MobileBERT model)"),sCe.forEach(t),G0o=i(N),A1=n(N,"LI",{});var lCe=s(A1);Une=n(lCe,"STRONG",{});var PYr=s(Une);O0o=r(PYr,"mpnet"),PYr.forEach(t),V0o=r(lCe," \u2014 "),XI=n(lCe,"A",{href:!0});var $Yr=s(XI);X0o=r($Yr,"MPNetForMaskedLM"),$Yr.forEach(t),z0o=r(lCe," (MPNet model)"),lCe.forEach(t),Q0o=i(N),y1=n(N,"LI",{});var iCe=s(y1);Jne=n(iCe,"STRONG",{});var IYr=s(Jne);W0o=r(IYr,"nystromformer"),IYr.forEach(t),H0o=r(iCe," \u2014 "),zI=n(iCe,"A",{href:!0});var qYr=s(zI);U0o=r(qYr,"NystromformerForMaskedLM"),qYr.forEach(t),J0o=r(iCe," (Nystromformer model)"),iCe.forEach(t),Y0o=i(N),L1=n(N,"LI",{});var dCe=s(L1);Yne=n(dCe,"STRONG",{});var NYr=s(Yne);K0o=r(NYr,"perceiver"),NYr.forEach(t),Z0o=r(dCe," \u2014 "),QI=n(dCe,"A",{href:!0});var jYr=s(QI);eTo=r(jYr,"PerceiverForMaskedLM"),jYr.forEach(t),oTo=r(dCe," (Perceiver model)"),dCe.forEach(t),rTo=i(N),x1=n(N,"LI",{});var cCe=s(x1);Kne=n(cCe,"STRONG",{});var DYr=s(Kne);tTo=r(DYr,"qdqbert"),DYr.forEach(t),aTo=r(cCe," \u2014 "),WI=n(cCe,"A",{href:!0});var GYr=s(WI);nTo=r(GYr,"QDQBertForMaskedLM"),GYr.forEach(t),sTo=r(cCe," (QDQBert model)"),cCe.forEach(t),lTo=i(N),k1=n(N,"LI",{});var fCe=s(k1);Zne=n(fCe,"STRONG",{});var OYr=s(Zne);iTo=r(OYr,"reformer"),OYr.forEach(t),dTo=r(fCe," \u2014 "),HI=n(fCe,"A",{href:!0});var VYr=s(HI);cTo=r(VYr,"ReformerForMaskedLM"),VYr.forEach(t),fTo=r(fCe," (Reformer model)"),fCe.forEach(t),mTo=i(N),S1=n(N,"LI",{});var mCe=s(S1);ese=n(mCe,"STRONG",{});var XYr=s(ese);gTo=r(XYr,"rembert"),XYr.forEach(t),hTo=r(mCe," \u2014 "),UI=n(mCe,"A",{href:!0});var zYr=s(UI);pTo=r(zYr,"RemBertForMaskedLM"),zYr.forEach(t),_To=r(mCe," (RemBERT model)"),mCe.forEach(t),uTo=i(N),R1=n(N,"LI",{});var gCe=s(R1);ose=n(gCe,"STRONG",{});var QYr=s(ose);bTo=r(QYr,"roberta"),QYr.forEach(t),FTo=r(gCe," \u2014 "),JI=n(gCe,"A",{href:!0});var WYr=s(JI);vTo=r(WYr,"RobertaForMaskedLM"),WYr.forEach(t),TTo=r(gCe," (RoBERTa model)"),gCe.forEach(t),MTo=i(N),B1=n(N,"LI",{});var hCe=s(B1);rse=n(hCe,"STRONG",{});var HYr=s(rse);ETo=r(HYr,"roformer"),HYr.forEach(t),CTo=r(hCe," \u2014 "),YI=n(hCe,"A",{href:!0});var UYr=s(YI);wTo=r(UYr,"RoFormerForMaskedLM"),UYr.forEach(t),ATo=r(hCe," (RoFormer model)"),hCe.forEach(t),yTo=i(N),P1=n(N,"LI",{});var pCe=s(P1);tse=n(pCe,"STRONG",{});var JYr=s(tse);LTo=r(JYr,"squeezebert"),JYr.forEach(t),xTo=r(pCe," \u2014 "),KI=n(pCe,"A",{href:!0});var YYr=s(KI);kTo=r(YYr,"SqueezeBertForMaskedLM"),YYr.forEach(t),STo=r(pCe," (SqueezeBERT model)"),pCe.forEach(t),RTo=i(N),$1=n(N,"LI",{});var _Ce=s($1);ase=n(_Ce,"STRONG",{});var KYr=s(ase);BTo=r(KYr,"tapas"),KYr.forEach(t),PTo=r(_Ce," \u2014 "),ZI=n(_Ce,"A",{href:!0});var ZYr=s(ZI);$To=r(ZYr,"TapasForMaskedLM"),ZYr.forEach(t),ITo=r(_Ce," (TAPAS model)"),_Ce.forEach(t),qTo=i(N),I1=n(N,"LI",{});var uCe=s(I1);nse=n(uCe,"STRONG",{});var eKr=s(nse);NTo=r(eKr,"wav2vec2"),eKr.forEach(t),jTo=r(uCe," \u2014 "),sse=n(uCe,"CODE",{});var oKr=s(sse);DTo=r(oKr,"Wav2Vec2ForMaskedLM"),oKr.forEach(t),GTo=r(uCe," (Wav2Vec2 model)"),uCe.forEach(t),OTo=i(N),q1=n(N,"LI",{});var bCe=s(q1);lse=n(bCe,"STRONG",{});var rKr=s(lse);VTo=r(rKr,"xlm"),rKr.forEach(t),XTo=r(bCe," \u2014 "),eq=n(bCe,"A",{href:!0});var tKr=s(eq);zTo=r(tKr,"XLMWithLMHeadModel"),tKr.forEach(t),QTo=r(bCe," (XLM model)"),bCe.forEach(t),WTo=i(N),N1=n(N,"LI",{});var FCe=s(N1);ise=n(FCe,"STRONG",{});var aKr=s(ise);HTo=r(aKr,"xlm-roberta"),aKr.forEach(t),UTo=r(FCe," \u2014 "),oq=n(FCe,"A",{href:!0});var nKr=s(oq);JTo=r(nKr,"XLMRobertaForMaskedLM"),nKr.forEach(t),YTo=r(FCe," (XLM-RoBERTa model)"),FCe.forEach(t),KTo=i(N),j1=n(N,"LI",{});var vCe=s(j1);dse=n(vCe,"STRONG",{});var sKr=s(dse);ZTo=r(sKr,"xlm-roberta-xl"),sKr.forEach(t),eMo=r(vCe," \u2014 "),rq=n(vCe,"A",{href:!0});var lKr=s(rq);oMo=r(lKr,"XLMRobertaXLForMaskedLM"),lKr.forEach(t),rMo=r(vCe," (XLM-RoBERTa-XL model)"),vCe.forEach(t),tMo=i(N),D1=n(N,"LI",{});var TCe=s(D1);cse=n(TCe,"STRONG",{});var iKr=s(cse);aMo=r(iKr,"yoso"),iKr.forEach(t),nMo=r(TCe," \u2014 "),tq=n(TCe,"A",{href:!0});var dKr=s(tq);sMo=r(dKr,"YosoForMaskedLM"),dKr.forEach(t),lMo=r(TCe," (YOSO model)"),TCe.forEach(t),N.forEach(t),iMo=i(Vt),G1=n(Vt,"P",{});var MCe=s(G1);dMo=r(MCe,"The model is set in evaluation mode by default using "),fse=n(MCe,"CODE",{});var cKr=s(fse);cMo=r(cKr,"model.eval()"),cKr.forEach(t),fMo=r(MCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=n(MCe,"CODE",{});var fKr=s(mse);mMo=r(fKr,"model.train()"),fKr.forEach(t),MCe.forEach(t),gMo=i(Vt),gse=n(Vt,"P",{});var mKr=s(gse);hMo=r(mKr,"Examples:"),mKr.forEach(t),pMo=i(Vt),m(k3.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),IRe=i(c),id=n(c,"H2",{class:!0});var zPe=s(id);O1=n(zPe,"A",{id:!0,class:!0,href:!0});var gKr=s(O1);hse=n(gKr,"SPAN",{});var hKr=s(hse);m(S3.$$.fragment,hKr),hKr.forEach(t),gKr.forEach(t),_Mo=i(zPe),pse=n(zPe,"SPAN",{});var pKr=s(pse);uMo=r(pKr,"AutoModelForSeq2SeqLM"),pKr.forEach(t),zPe.forEach(t),qRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(R3.$$.fragment,el),bMo=i(el),dd=n(el,"P",{});var FU=s(dd);FMo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aq=n(FU,"A",{href:!0});var _Kr=s(aq);vMo=r(_Kr,"from_pretrained()"),_Kr.forEach(t),TMo=r(FU," class method or the "),nq=n(FU,"A",{href:!0});var uKr=s(nq);MMo=r(uKr,"from_config()"),uKr.forEach(t),EMo=r(FU,` class
method.`),FU.forEach(t),CMo=i(el),B3=n(el,"P",{});var QPe=s(B3);wMo=r(QPe,"This class cannot be instantiated directly using "),_se=n(QPe,"CODE",{});var bKr=s(_se);AMo=r(bKr,"__init__()"),bKr.forEach(t),yMo=r(QPe," (throws an error)."),QPe.forEach(t),LMo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(P3.$$.fragment,ol),xMo=i(ol),use=n(ol,"P",{});var FKr=s(use);kMo=r(FKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FKr.forEach(t),SMo=i(ol),cd=n(ol,"P",{});var vU=s(cd);RMo=r(vU,`Note:
Loading a model from its configuration file does `),bse=n(vU,"STRONG",{});var vKr=s(bse);BMo=r(vKr,"not"),vKr.forEach(t),PMo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sq=n(vU,"A",{href:!0});var TKr=s(sq);$Mo=r(TKr,"from_pretrained()"),TKr.forEach(t),IMo=r(vU," to load the model weights."),vU.forEach(t),qMo=i(ol),Fse=n(ol,"P",{});var MKr=s(Fse);NMo=r(MKr,"Examples:"),MKr.forEach(t),jMo=i(ol),m($3.$$.fragment,ol),ol.forEach(t),DMo=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(I3.$$.fragment,Xt),GMo=i(Xt),vse=n(Xt,"P",{});var EKr=s(vse);OMo=r(EKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EKr.forEach(t),VMo=i(Xt),Ha=n(Xt,"P",{});var SE=s(Ha);XMo=r(SE,"The model class to instantiate is selected based on the "),Tse=n(SE,"CODE",{});var CKr=s(Tse);zMo=r(CKr,"model_type"),CKr.forEach(t),QMo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Mse=n(SE,"CODE",{});var wKr=s(Mse);WMo=r(wKr,"pretrained_model_name_or_path"),wKr.forEach(t),HMo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=n(SE,"CODE",{});var AKr=s(Ese);UMo=r(AKr,"pretrained_model_name_or_path"),AKr.forEach(t),JMo=r(SE,":"),SE.forEach(t),YMo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);V1=n(le,"LI",{});var ECe=s(V1);Cse=n(ECe,"STRONG",{});var yKr=s(Cse);KMo=r(yKr,"bart"),yKr.forEach(t),ZMo=r(ECe," \u2014 "),lq=n(ECe,"A",{href:!0});var LKr=s(lq);e4o=r(LKr,"BartForConditionalGeneration"),LKr.forEach(t),o4o=r(ECe," (BART model)"),ECe.forEach(t),r4o=i(le),X1=n(le,"LI",{});var CCe=s(X1);wse=n(CCe,"STRONG",{});var xKr=s(wse);t4o=r(xKr,"bigbird_pegasus"),xKr.forEach(t),a4o=r(CCe," \u2014 "),iq=n(CCe,"A",{href:!0});var kKr=s(iq);n4o=r(kKr,"BigBirdPegasusForConditionalGeneration"),kKr.forEach(t),s4o=r(CCe," (BigBirdPegasus model)"),CCe.forEach(t),l4o=i(le),z1=n(le,"LI",{});var wCe=s(z1);Ase=n(wCe,"STRONG",{});var SKr=s(Ase);i4o=r(SKr,"blenderbot"),SKr.forEach(t),d4o=r(wCe," \u2014 "),dq=n(wCe,"A",{href:!0});var RKr=s(dq);c4o=r(RKr,"BlenderbotForConditionalGeneration"),RKr.forEach(t),f4o=r(wCe," (Blenderbot model)"),wCe.forEach(t),m4o=i(le),Q1=n(le,"LI",{});var ACe=s(Q1);yse=n(ACe,"STRONG",{});var BKr=s(yse);g4o=r(BKr,"blenderbot-small"),BKr.forEach(t),h4o=r(ACe," \u2014 "),cq=n(ACe,"A",{href:!0});var PKr=s(cq);p4o=r(PKr,"BlenderbotSmallForConditionalGeneration"),PKr.forEach(t),_4o=r(ACe," (BlenderbotSmall model)"),ACe.forEach(t),u4o=i(le),W1=n(le,"LI",{});var yCe=s(W1);Lse=n(yCe,"STRONG",{});var $Kr=s(Lse);b4o=r($Kr,"encoder-decoder"),$Kr.forEach(t),F4o=r(yCe," \u2014 "),fq=n(yCe,"A",{href:!0});var IKr=s(fq);v4o=r(IKr,"EncoderDecoderModel"),IKr.forEach(t),T4o=r(yCe," (Encoder decoder model)"),yCe.forEach(t),M4o=i(le),H1=n(le,"LI",{});var LCe=s(H1);xse=n(LCe,"STRONG",{});var qKr=s(xse);E4o=r(qKr,"fsmt"),qKr.forEach(t),C4o=r(LCe," \u2014 "),mq=n(LCe,"A",{href:!0});var NKr=s(mq);w4o=r(NKr,"FSMTForConditionalGeneration"),NKr.forEach(t),A4o=r(LCe," (FairSeq Machine-Translation model)"),LCe.forEach(t),y4o=i(le),U1=n(le,"LI",{});var xCe=s(U1);kse=n(xCe,"STRONG",{});var jKr=s(kse);L4o=r(jKr,"led"),jKr.forEach(t),x4o=r(xCe," \u2014 "),gq=n(xCe,"A",{href:!0});var DKr=s(gq);k4o=r(DKr,"LEDForConditionalGeneration"),DKr.forEach(t),S4o=r(xCe," (LED model)"),xCe.forEach(t),R4o=i(le),J1=n(le,"LI",{});var kCe=s(J1);Sse=n(kCe,"STRONG",{});var GKr=s(Sse);B4o=r(GKr,"m2m_100"),GKr.forEach(t),P4o=r(kCe," \u2014 "),hq=n(kCe,"A",{href:!0});var OKr=s(hq);$4o=r(OKr,"M2M100ForConditionalGeneration"),OKr.forEach(t),I4o=r(kCe," (M2M100 model)"),kCe.forEach(t),q4o=i(le),Y1=n(le,"LI",{});var SCe=s(Y1);Rse=n(SCe,"STRONG",{});var VKr=s(Rse);N4o=r(VKr,"marian"),VKr.forEach(t),j4o=r(SCe," \u2014 "),pq=n(SCe,"A",{href:!0});var XKr=s(pq);D4o=r(XKr,"MarianMTModel"),XKr.forEach(t),G4o=r(SCe," (Marian model)"),SCe.forEach(t),O4o=i(le),K1=n(le,"LI",{});var RCe=s(K1);Bse=n(RCe,"STRONG",{});var zKr=s(Bse);V4o=r(zKr,"mbart"),zKr.forEach(t),X4o=r(RCe," \u2014 "),_q=n(RCe,"A",{href:!0});var QKr=s(_q);z4o=r(QKr,"MBartForConditionalGeneration"),QKr.forEach(t),Q4o=r(RCe," (mBART model)"),RCe.forEach(t),W4o=i(le),Z1=n(le,"LI",{});var BCe=s(Z1);Pse=n(BCe,"STRONG",{});var WKr=s(Pse);H4o=r(WKr,"mt5"),WKr.forEach(t),U4o=r(BCe," \u2014 "),uq=n(BCe,"A",{href:!0});var HKr=s(uq);J4o=r(HKr,"MT5ForConditionalGeneration"),HKr.forEach(t),Y4o=r(BCe," (mT5 model)"),BCe.forEach(t),K4o=i(le),e8=n(le,"LI",{});var PCe=s(e8);$se=n(PCe,"STRONG",{});var UKr=s($se);Z4o=r(UKr,"pegasus"),UKr.forEach(t),eEo=r(PCe," \u2014 "),bq=n(PCe,"A",{href:!0});var JKr=s(bq);oEo=r(JKr,"PegasusForConditionalGeneration"),JKr.forEach(t),rEo=r(PCe," (Pegasus model)"),PCe.forEach(t),tEo=i(le),o8=n(le,"LI",{});var $Ce=s(o8);Ise=n($Ce,"STRONG",{});var YKr=s(Ise);aEo=r(YKr,"plbart"),YKr.forEach(t),nEo=r($Ce," \u2014 "),Fq=n($Ce,"A",{href:!0});var KKr=s(Fq);sEo=r(KKr,"PLBartForConditionalGeneration"),KKr.forEach(t),lEo=r($Ce," (PLBart model)"),$Ce.forEach(t),iEo=i(le),r8=n(le,"LI",{});var ICe=s(r8);qse=n(ICe,"STRONG",{});var ZKr=s(qse);dEo=r(ZKr,"prophetnet"),ZKr.forEach(t),cEo=r(ICe," \u2014 "),vq=n(ICe,"A",{href:!0});var eZr=s(vq);fEo=r(eZr,"ProphetNetForConditionalGeneration"),eZr.forEach(t),mEo=r(ICe," (ProphetNet model)"),ICe.forEach(t),gEo=i(le),t8=n(le,"LI",{});var qCe=s(t8);Nse=n(qCe,"STRONG",{});var oZr=s(Nse);hEo=r(oZr,"t5"),oZr.forEach(t),pEo=r(qCe," \u2014 "),Tq=n(qCe,"A",{href:!0});var rZr=s(Tq);_Eo=r(rZr,"T5ForConditionalGeneration"),rZr.forEach(t),uEo=r(qCe," (T5 model)"),qCe.forEach(t),bEo=i(le),a8=n(le,"LI",{});var NCe=s(a8);jse=n(NCe,"STRONG",{});var tZr=s(jse);FEo=r(tZr,"tapex"),tZr.forEach(t),vEo=r(NCe," \u2014 "),Mq=n(NCe,"A",{href:!0});var aZr=s(Mq);TEo=r(aZr,"BartForConditionalGeneration"),aZr.forEach(t),MEo=r(NCe," (TAPEX model)"),NCe.forEach(t),EEo=i(le),n8=n(le,"LI",{});var jCe=s(n8);Dse=n(jCe,"STRONG",{});var nZr=s(Dse);CEo=r(nZr,"xlm-prophetnet"),nZr.forEach(t),wEo=r(jCe," \u2014 "),Eq=n(jCe,"A",{href:!0});var sZr=s(Eq);AEo=r(sZr,"XLMProphetNetForConditionalGeneration"),sZr.forEach(t),yEo=r(jCe," (XLMProphetNet model)"),jCe.forEach(t),le.forEach(t),LEo=i(Xt),s8=n(Xt,"P",{});var DCe=s(s8);xEo=r(DCe,"The model is set in evaluation mode by default using "),Gse=n(DCe,"CODE",{});var lZr=s(Gse);kEo=r(lZr,"model.eval()"),lZr.forEach(t),SEo=r(DCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=n(DCe,"CODE",{});var iZr=s(Ose);REo=r(iZr,"model.train()"),iZr.forEach(t),DCe.forEach(t),BEo=i(Xt),Vse=n(Xt,"P",{});var dZr=s(Vse);PEo=r(dZr,"Examples:"),dZr.forEach(t),$Eo=i(Xt),m(q3.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),NRe=i(c),fd=n(c,"H2",{class:!0});var WPe=s(fd);l8=n(WPe,"A",{id:!0,class:!0,href:!0});var cZr=s(l8);Xse=n(cZr,"SPAN",{});var fZr=s(Xse);m(N3.$$.fragment,fZr),fZr.forEach(t),cZr.forEach(t),IEo=i(WPe),zse=n(WPe,"SPAN",{});var mZr=s(zse);qEo=r(mZr,"AutoModelForSequenceClassification"),mZr.forEach(t),WPe.forEach(t),jRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(j3.$$.fragment,rl),NEo=i(rl),md=n(rl,"P",{});var TU=s(md);jEo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cq=n(TU,"A",{href:!0});var gZr=s(Cq);DEo=r(gZr,"from_pretrained()"),gZr.forEach(t),GEo=r(TU," class method or the "),wq=n(TU,"A",{href:!0});var hZr=s(wq);OEo=r(hZr,"from_config()"),hZr.forEach(t),VEo=r(TU,` class
method.`),TU.forEach(t),XEo=i(rl),D3=n(rl,"P",{});var HPe=s(D3);zEo=r(HPe,"This class cannot be instantiated directly using "),Qse=n(HPe,"CODE",{});var pZr=s(Qse);QEo=r(pZr,"__init__()"),pZr.forEach(t),WEo=r(HPe," (throws an error)."),HPe.forEach(t),HEo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(G3.$$.fragment,tl),UEo=i(tl),Wse=n(tl,"P",{});var _Zr=s(Wse);JEo=r(_Zr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Zr.forEach(t),YEo=i(tl),gd=n(tl,"P",{});var MU=s(gd);KEo=r(MU,`Note:
Loading a model from its configuration file does `),Hse=n(MU,"STRONG",{});var uZr=s(Hse);ZEo=r(uZr,"not"),uZr.forEach(t),e5o=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=n(MU,"A",{href:!0});var bZr=s(Aq);o5o=r(bZr,"from_pretrained()"),bZr.forEach(t),r5o=r(MU," to load the model weights."),MU.forEach(t),t5o=i(tl),Use=n(tl,"P",{});var FZr=s(Use);a5o=r(FZr,"Examples:"),FZr.forEach(t),n5o=i(tl),m(O3.$$.fragment,tl),tl.forEach(t),s5o=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(V3.$$.fragment,zt),l5o=i(zt),Jse=n(zt,"P",{});var vZr=s(Jse);i5o=r(vZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vZr.forEach(t),d5o=i(zt),Ua=n(zt,"P",{});var RE=s(Ua);c5o=r(RE,"The model class to instantiate is selected based on the "),Yse=n(RE,"CODE",{});var TZr=s(Yse);f5o=r(TZr,"model_type"),TZr.forEach(t),m5o=r(RE,` property of the config object (either
passed as an argument or loaded from `),Kse=n(RE,"CODE",{});var MZr=s(Kse);g5o=r(MZr,"pretrained_model_name_or_path"),MZr.forEach(t),h5o=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zse=n(RE,"CODE",{});var EZr=s(Zse);p5o=r(EZr,"pretrained_model_name_or_path"),EZr.forEach(t),_5o=r(RE,":"),RE.forEach(t),u5o=i(zt),y=n(zt,"UL",{});var L=s(y);i8=n(L,"LI",{});var GCe=s(i8);ele=n(GCe,"STRONG",{});var CZr=s(ele);b5o=r(CZr,"albert"),CZr.forEach(t),F5o=r(GCe," \u2014 "),yq=n(GCe,"A",{href:!0});var wZr=s(yq);v5o=r(wZr,"AlbertForSequenceClassification"),wZr.forEach(t),T5o=r(GCe," (ALBERT model)"),GCe.forEach(t),M5o=i(L),d8=n(L,"LI",{});var OCe=s(d8);ole=n(OCe,"STRONG",{});var AZr=s(ole);E5o=r(AZr,"bart"),AZr.forEach(t),C5o=r(OCe," \u2014 "),Lq=n(OCe,"A",{href:!0});var yZr=s(Lq);w5o=r(yZr,"BartForSequenceClassification"),yZr.forEach(t),A5o=r(OCe," (BART model)"),OCe.forEach(t),y5o=i(L),c8=n(L,"LI",{});var VCe=s(c8);rle=n(VCe,"STRONG",{});var LZr=s(rle);L5o=r(LZr,"bert"),LZr.forEach(t),x5o=r(VCe," \u2014 "),xq=n(VCe,"A",{href:!0});var xZr=s(xq);k5o=r(xZr,"BertForSequenceClassification"),xZr.forEach(t),S5o=r(VCe," (BERT model)"),VCe.forEach(t),R5o=i(L),f8=n(L,"LI",{});var XCe=s(f8);tle=n(XCe,"STRONG",{});var kZr=s(tle);B5o=r(kZr,"big_bird"),kZr.forEach(t),P5o=r(XCe," \u2014 "),kq=n(XCe,"A",{href:!0});var SZr=s(kq);$5o=r(SZr,"BigBirdForSequenceClassification"),SZr.forEach(t),I5o=r(XCe," (BigBird model)"),XCe.forEach(t),q5o=i(L),m8=n(L,"LI",{});var zCe=s(m8);ale=n(zCe,"STRONG",{});var RZr=s(ale);N5o=r(RZr,"bigbird_pegasus"),RZr.forEach(t),j5o=r(zCe," \u2014 "),Sq=n(zCe,"A",{href:!0});var BZr=s(Sq);D5o=r(BZr,"BigBirdPegasusForSequenceClassification"),BZr.forEach(t),G5o=r(zCe," (BigBirdPegasus model)"),zCe.forEach(t),O5o=i(L),g8=n(L,"LI",{});var QCe=s(g8);nle=n(QCe,"STRONG",{});var PZr=s(nle);V5o=r(PZr,"camembert"),PZr.forEach(t),X5o=r(QCe," \u2014 "),Rq=n(QCe,"A",{href:!0});var $Zr=s(Rq);z5o=r($Zr,"CamembertForSequenceClassification"),$Zr.forEach(t),Q5o=r(QCe," (CamemBERT model)"),QCe.forEach(t),W5o=i(L),h8=n(L,"LI",{});var WCe=s(h8);sle=n(WCe,"STRONG",{});var IZr=s(sle);H5o=r(IZr,"canine"),IZr.forEach(t),U5o=r(WCe," \u2014 "),Bq=n(WCe,"A",{href:!0});var qZr=s(Bq);J5o=r(qZr,"CanineForSequenceClassification"),qZr.forEach(t),Y5o=r(WCe," (Canine model)"),WCe.forEach(t),K5o=i(L),p8=n(L,"LI",{});var HCe=s(p8);lle=n(HCe,"STRONG",{});var NZr=s(lle);Z5o=r(NZr,"convbert"),NZr.forEach(t),e3o=r(HCe," \u2014 "),Pq=n(HCe,"A",{href:!0});var jZr=s(Pq);o3o=r(jZr,"ConvBertForSequenceClassification"),jZr.forEach(t),r3o=r(HCe," (ConvBERT model)"),HCe.forEach(t),t3o=i(L),_8=n(L,"LI",{});var UCe=s(_8);ile=n(UCe,"STRONG",{});var DZr=s(ile);a3o=r(DZr,"ctrl"),DZr.forEach(t),n3o=r(UCe," \u2014 "),$q=n(UCe,"A",{href:!0});var GZr=s($q);s3o=r(GZr,"CTRLForSequenceClassification"),GZr.forEach(t),l3o=r(UCe," (CTRL model)"),UCe.forEach(t),i3o=i(L),u8=n(L,"LI",{});var JCe=s(u8);dle=n(JCe,"STRONG",{});var OZr=s(dle);d3o=r(OZr,"data2vec-text"),OZr.forEach(t),c3o=r(JCe," \u2014 "),Iq=n(JCe,"A",{href:!0});var VZr=s(Iq);f3o=r(VZr,"Data2VecTextForSequenceClassification"),VZr.forEach(t),m3o=r(JCe," (Data2VecText model)"),JCe.forEach(t),g3o=i(L),b8=n(L,"LI",{});var YCe=s(b8);cle=n(YCe,"STRONG",{});var XZr=s(cle);h3o=r(XZr,"deberta"),XZr.forEach(t),p3o=r(YCe," \u2014 "),qq=n(YCe,"A",{href:!0});var zZr=s(qq);_3o=r(zZr,"DebertaForSequenceClassification"),zZr.forEach(t),u3o=r(YCe," (DeBERTa model)"),YCe.forEach(t),b3o=i(L),F8=n(L,"LI",{});var KCe=s(F8);fle=n(KCe,"STRONG",{});var QZr=s(fle);F3o=r(QZr,"deberta-v2"),QZr.forEach(t),v3o=r(KCe," \u2014 "),Nq=n(KCe,"A",{href:!0});var WZr=s(Nq);T3o=r(WZr,"DebertaV2ForSequenceClassification"),WZr.forEach(t),M3o=r(KCe," (DeBERTa-v2 model)"),KCe.forEach(t),E3o=i(L),v8=n(L,"LI",{});var ZCe=s(v8);mle=n(ZCe,"STRONG",{});var HZr=s(mle);C3o=r(HZr,"distilbert"),HZr.forEach(t),w3o=r(ZCe," \u2014 "),jq=n(ZCe,"A",{href:!0});var UZr=s(jq);A3o=r(UZr,"DistilBertForSequenceClassification"),UZr.forEach(t),y3o=r(ZCe," (DistilBERT model)"),ZCe.forEach(t),L3o=i(L),T8=n(L,"LI",{});var ewe=s(T8);gle=n(ewe,"STRONG",{});var JZr=s(gle);x3o=r(JZr,"electra"),JZr.forEach(t),k3o=r(ewe," \u2014 "),Dq=n(ewe,"A",{href:!0});var YZr=s(Dq);S3o=r(YZr,"ElectraForSequenceClassification"),YZr.forEach(t),R3o=r(ewe," (ELECTRA model)"),ewe.forEach(t),B3o=i(L),M8=n(L,"LI",{});var owe=s(M8);hle=n(owe,"STRONG",{});var KZr=s(hle);P3o=r(KZr,"flaubert"),KZr.forEach(t),$3o=r(owe," \u2014 "),Gq=n(owe,"A",{href:!0});var ZZr=s(Gq);I3o=r(ZZr,"FlaubertForSequenceClassification"),ZZr.forEach(t),q3o=r(owe," (FlauBERT model)"),owe.forEach(t),N3o=i(L),E8=n(L,"LI",{});var rwe=s(E8);ple=n(rwe,"STRONG",{});var eet=s(ple);j3o=r(eet,"fnet"),eet.forEach(t),D3o=r(rwe," \u2014 "),Oq=n(rwe,"A",{href:!0});var oet=s(Oq);G3o=r(oet,"FNetForSequenceClassification"),oet.forEach(t),O3o=r(rwe," (FNet model)"),rwe.forEach(t),V3o=i(L),C8=n(L,"LI",{});var twe=s(C8);_le=n(twe,"STRONG",{});var ret=s(_le);X3o=r(ret,"funnel"),ret.forEach(t),z3o=r(twe," \u2014 "),Vq=n(twe,"A",{href:!0});var tet=s(Vq);Q3o=r(tet,"FunnelForSequenceClassification"),tet.forEach(t),W3o=r(twe," (Funnel Transformer model)"),twe.forEach(t),H3o=i(L),w8=n(L,"LI",{});var awe=s(w8);ule=n(awe,"STRONG",{});var aet=s(ule);U3o=r(aet,"gpt2"),aet.forEach(t),J3o=r(awe," \u2014 "),Xq=n(awe,"A",{href:!0});var net=s(Xq);Y3o=r(net,"GPT2ForSequenceClassification"),net.forEach(t),K3o=r(awe," (OpenAI GPT-2 model)"),awe.forEach(t),Z3o=i(L),A8=n(L,"LI",{});var nwe=s(A8);ble=n(nwe,"STRONG",{});var set=s(ble);eCo=r(set,"gpt_neo"),set.forEach(t),oCo=r(nwe," \u2014 "),zq=n(nwe,"A",{href:!0});var iet=s(zq);rCo=r(iet,"GPTNeoForSequenceClassification"),iet.forEach(t),tCo=r(nwe," (GPT Neo model)"),nwe.forEach(t),aCo=i(L),y8=n(L,"LI",{});var swe=s(y8);Fle=n(swe,"STRONG",{});var det=s(Fle);nCo=r(det,"gptj"),det.forEach(t),sCo=r(swe," \u2014 "),Qq=n(swe,"A",{href:!0});var cet=s(Qq);lCo=r(cet,"GPTJForSequenceClassification"),cet.forEach(t),iCo=r(swe," (GPT-J model)"),swe.forEach(t),dCo=i(L),L8=n(L,"LI",{});var lwe=s(L8);vle=n(lwe,"STRONG",{});var fet=s(vle);cCo=r(fet,"ibert"),fet.forEach(t),fCo=r(lwe," \u2014 "),Wq=n(lwe,"A",{href:!0});var met=s(Wq);mCo=r(met,"IBertForSequenceClassification"),met.forEach(t),gCo=r(lwe," (I-BERT model)"),lwe.forEach(t),hCo=i(L),x8=n(L,"LI",{});var iwe=s(x8);Tle=n(iwe,"STRONG",{});var get=s(Tle);pCo=r(get,"layoutlm"),get.forEach(t),_Co=r(iwe," \u2014 "),Hq=n(iwe,"A",{href:!0});var het=s(Hq);uCo=r(het,"LayoutLMForSequenceClassification"),het.forEach(t),bCo=r(iwe," (LayoutLM model)"),iwe.forEach(t),FCo=i(L),k8=n(L,"LI",{});var dwe=s(k8);Mle=n(dwe,"STRONG",{});var pet=s(Mle);vCo=r(pet,"layoutlmv2"),pet.forEach(t),TCo=r(dwe," \u2014 "),Uq=n(dwe,"A",{href:!0});var _et=s(Uq);MCo=r(_et,"LayoutLMv2ForSequenceClassification"),_et.forEach(t),ECo=r(dwe," (LayoutLMv2 model)"),dwe.forEach(t),CCo=i(L),S8=n(L,"LI",{});var cwe=s(S8);Ele=n(cwe,"STRONG",{});var uet=s(Ele);wCo=r(uet,"led"),uet.forEach(t),ACo=r(cwe," \u2014 "),Jq=n(cwe,"A",{href:!0});var bet=s(Jq);yCo=r(bet,"LEDForSequenceClassification"),bet.forEach(t),LCo=r(cwe," (LED model)"),cwe.forEach(t),xCo=i(L),R8=n(L,"LI",{});var fwe=s(R8);Cle=n(fwe,"STRONG",{});var Fet=s(Cle);kCo=r(Fet,"longformer"),Fet.forEach(t),SCo=r(fwe," \u2014 "),Yq=n(fwe,"A",{href:!0});var vet=s(Yq);RCo=r(vet,"LongformerForSequenceClassification"),vet.forEach(t),BCo=r(fwe," (Longformer model)"),fwe.forEach(t),PCo=i(L),B8=n(L,"LI",{});var mwe=s(B8);wle=n(mwe,"STRONG",{});var Tet=s(wle);$Co=r(Tet,"mbart"),Tet.forEach(t),ICo=r(mwe," \u2014 "),Kq=n(mwe,"A",{href:!0});var Met=s(Kq);qCo=r(Met,"MBartForSequenceClassification"),Met.forEach(t),NCo=r(mwe," (mBART model)"),mwe.forEach(t),jCo=i(L),P8=n(L,"LI",{});var gwe=s(P8);Ale=n(gwe,"STRONG",{});var Eet=s(Ale);DCo=r(Eet,"megatron-bert"),Eet.forEach(t),GCo=r(gwe," \u2014 "),Zq=n(gwe,"A",{href:!0});var Cet=s(Zq);OCo=r(Cet,"MegatronBertForSequenceClassification"),Cet.forEach(t),VCo=r(gwe," (MegatronBert model)"),gwe.forEach(t),XCo=i(L),$8=n(L,"LI",{});var hwe=s($8);yle=n(hwe,"STRONG",{});var wet=s(yle);zCo=r(wet,"mobilebert"),wet.forEach(t),QCo=r(hwe," \u2014 "),eN=n(hwe,"A",{href:!0});var Aet=s(eN);WCo=r(Aet,"MobileBertForSequenceClassification"),Aet.forEach(t),HCo=r(hwe," (MobileBERT model)"),hwe.forEach(t),UCo=i(L),I8=n(L,"LI",{});var pwe=s(I8);Lle=n(pwe,"STRONG",{});var yet=s(Lle);JCo=r(yet,"mpnet"),yet.forEach(t),YCo=r(pwe," \u2014 "),oN=n(pwe,"A",{href:!0});var Let=s(oN);KCo=r(Let,"MPNetForSequenceClassification"),Let.forEach(t),ZCo=r(pwe," (MPNet model)"),pwe.forEach(t),ewo=i(L),q8=n(L,"LI",{});var _we=s(q8);xle=n(_we,"STRONG",{});var xet=s(xle);owo=r(xet,"nystromformer"),xet.forEach(t),rwo=r(_we," \u2014 "),rN=n(_we,"A",{href:!0});var ket=s(rN);two=r(ket,"NystromformerForSequenceClassification"),ket.forEach(t),awo=r(_we," (Nystromformer model)"),_we.forEach(t),nwo=i(L),N8=n(L,"LI",{});var uwe=s(N8);kle=n(uwe,"STRONG",{});var Set=s(kle);swo=r(Set,"openai-gpt"),Set.forEach(t),lwo=r(uwe," \u2014 "),tN=n(uwe,"A",{href:!0});var Ret=s(tN);iwo=r(Ret,"OpenAIGPTForSequenceClassification"),Ret.forEach(t),dwo=r(uwe," (OpenAI GPT model)"),uwe.forEach(t),cwo=i(L),j8=n(L,"LI",{});var bwe=s(j8);Sle=n(bwe,"STRONG",{});var Bet=s(Sle);fwo=r(Bet,"perceiver"),Bet.forEach(t),mwo=r(bwe," \u2014 "),aN=n(bwe,"A",{href:!0});var Pet=s(aN);gwo=r(Pet,"PerceiverForSequenceClassification"),Pet.forEach(t),hwo=r(bwe," (Perceiver model)"),bwe.forEach(t),pwo=i(L),D8=n(L,"LI",{});var Fwe=s(D8);Rle=n(Fwe,"STRONG",{});var $et=s(Rle);_wo=r($et,"plbart"),$et.forEach(t),uwo=r(Fwe," \u2014 "),nN=n(Fwe,"A",{href:!0});var Iet=s(nN);bwo=r(Iet,"PLBartForSequenceClassification"),Iet.forEach(t),Fwo=r(Fwe," (PLBart model)"),Fwe.forEach(t),vwo=i(L),G8=n(L,"LI",{});var vwe=s(G8);Ble=n(vwe,"STRONG",{});var qet=s(Ble);Two=r(qet,"qdqbert"),qet.forEach(t),Mwo=r(vwe," \u2014 "),sN=n(vwe,"A",{href:!0});var Net=s(sN);Ewo=r(Net,"QDQBertForSequenceClassification"),Net.forEach(t),Cwo=r(vwe," (QDQBert model)"),vwe.forEach(t),wwo=i(L),O8=n(L,"LI",{});var Twe=s(O8);Ple=n(Twe,"STRONG",{});var jet=s(Ple);Awo=r(jet,"reformer"),jet.forEach(t),ywo=r(Twe," \u2014 "),lN=n(Twe,"A",{href:!0});var Det=s(lN);Lwo=r(Det,"ReformerForSequenceClassification"),Det.forEach(t),xwo=r(Twe," (Reformer model)"),Twe.forEach(t),kwo=i(L),V8=n(L,"LI",{});var Mwe=s(V8);$le=n(Mwe,"STRONG",{});var Get=s($le);Swo=r(Get,"rembert"),Get.forEach(t),Rwo=r(Mwe," \u2014 "),iN=n(Mwe,"A",{href:!0});var Oet=s(iN);Bwo=r(Oet,"RemBertForSequenceClassification"),Oet.forEach(t),Pwo=r(Mwe," (RemBERT model)"),Mwe.forEach(t),$wo=i(L),X8=n(L,"LI",{});var Ewe=s(X8);Ile=n(Ewe,"STRONG",{});var Vet=s(Ile);Iwo=r(Vet,"roberta"),Vet.forEach(t),qwo=r(Ewe," \u2014 "),dN=n(Ewe,"A",{href:!0});var Xet=s(dN);Nwo=r(Xet,"RobertaForSequenceClassification"),Xet.forEach(t),jwo=r(Ewe," (RoBERTa model)"),Ewe.forEach(t),Dwo=i(L),z8=n(L,"LI",{});var Cwe=s(z8);qle=n(Cwe,"STRONG",{});var zet=s(qle);Gwo=r(zet,"roformer"),zet.forEach(t),Owo=r(Cwe," \u2014 "),cN=n(Cwe,"A",{href:!0});var Qet=s(cN);Vwo=r(Qet,"RoFormerForSequenceClassification"),Qet.forEach(t),Xwo=r(Cwe," (RoFormer model)"),Cwe.forEach(t),zwo=i(L),Q8=n(L,"LI",{});var wwe=s(Q8);Nle=n(wwe,"STRONG",{});var Wet=s(Nle);Qwo=r(Wet,"squeezebert"),Wet.forEach(t),Wwo=r(wwe," \u2014 "),fN=n(wwe,"A",{href:!0});var Het=s(fN);Hwo=r(Het,"SqueezeBertForSequenceClassification"),Het.forEach(t),Uwo=r(wwe," (SqueezeBERT model)"),wwe.forEach(t),Jwo=i(L),W8=n(L,"LI",{});var Awe=s(W8);jle=n(Awe,"STRONG",{});var Uet=s(jle);Ywo=r(Uet,"tapas"),Uet.forEach(t),Kwo=r(Awe," \u2014 "),mN=n(Awe,"A",{href:!0});var Jet=s(mN);Zwo=r(Jet,"TapasForSequenceClassification"),Jet.forEach(t),eAo=r(Awe," (TAPAS model)"),Awe.forEach(t),oAo=i(L),H8=n(L,"LI",{});var ywe=s(H8);Dle=n(ywe,"STRONG",{});var Yet=s(Dle);rAo=r(Yet,"tapex"),Yet.forEach(t),tAo=r(ywe," \u2014 "),gN=n(ywe,"A",{href:!0});var Ket=s(gN);aAo=r(Ket,"BartForSequenceClassification"),Ket.forEach(t),nAo=r(ywe," (TAPEX model)"),ywe.forEach(t),sAo=i(L),U8=n(L,"LI",{});var Lwe=s(U8);Gle=n(Lwe,"STRONG",{});var Zet=s(Gle);lAo=r(Zet,"transfo-xl"),Zet.forEach(t),iAo=r(Lwe," \u2014 "),hN=n(Lwe,"A",{href:!0});var eot=s(hN);dAo=r(eot,"TransfoXLForSequenceClassification"),eot.forEach(t),cAo=r(Lwe," (Transformer-XL model)"),Lwe.forEach(t),fAo=i(L),J8=n(L,"LI",{});var xwe=s(J8);Ole=n(xwe,"STRONG",{});var oot=s(Ole);mAo=r(oot,"xlm"),oot.forEach(t),gAo=r(xwe," \u2014 "),pN=n(xwe,"A",{href:!0});var rot=s(pN);hAo=r(rot,"XLMForSequenceClassification"),rot.forEach(t),pAo=r(xwe," (XLM model)"),xwe.forEach(t),_Ao=i(L),Y8=n(L,"LI",{});var kwe=s(Y8);Vle=n(kwe,"STRONG",{});var tot=s(Vle);uAo=r(tot,"xlm-roberta"),tot.forEach(t),bAo=r(kwe," \u2014 "),_N=n(kwe,"A",{href:!0});var aot=s(_N);FAo=r(aot,"XLMRobertaForSequenceClassification"),aot.forEach(t),vAo=r(kwe," (XLM-RoBERTa model)"),kwe.forEach(t),TAo=i(L),K8=n(L,"LI",{});var Swe=s(K8);Xle=n(Swe,"STRONG",{});var not=s(Xle);MAo=r(not,"xlm-roberta-xl"),not.forEach(t),EAo=r(Swe," \u2014 "),uN=n(Swe,"A",{href:!0});var sot=s(uN);CAo=r(sot,"XLMRobertaXLForSequenceClassification"),sot.forEach(t),wAo=r(Swe," (XLM-RoBERTa-XL model)"),Swe.forEach(t),AAo=i(L),Z8=n(L,"LI",{});var Rwe=s(Z8);zle=n(Rwe,"STRONG",{});var lot=s(zle);yAo=r(lot,"xlnet"),lot.forEach(t),LAo=r(Rwe," \u2014 "),bN=n(Rwe,"A",{href:!0});var iot=s(bN);xAo=r(iot,"XLNetForSequenceClassification"),iot.forEach(t),kAo=r(Rwe," (XLNet model)"),Rwe.forEach(t),SAo=i(L),eb=n(L,"LI",{});var Bwe=s(eb);Qle=n(Bwe,"STRONG",{});var dot=s(Qle);RAo=r(dot,"yoso"),dot.forEach(t),BAo=r(Bwe," \u2014 "),FN=n(Bwe,"A",{href:!0});var cot=s(FN);PAo=r(cot,"YosoForSequenceClassification"),cot.forEach(t),$Ao=r(Bwe," (YOSO model)"),Bwe.forEach(t),L.forEach(t),IAo=i(zt),ob=n(zt,"P",{});var Pwe=s(ob);qAo=r(Pwe,"The model is set in evaluation mode by default using "),Wle=n(Pwe,"CODE",{});var fot=s(Wle);NAo=r(fot,"model.eval()"),fot.forEach(t),jAo=r(Pwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=n(Pwe,"CODE",{});var mot=s(Hle);DAo=r(mot,"model.train()"),mot.forEach(t),Pwe.forEach(t),GAo=i(zt),Ule=n(zt,"P",{});var got=s(Ule);OAo=r(got,"Examples:"),got.forEach(t),VAo=i(zt),m(X3.$$.fragment,zt),zt.forEach(t),rl.forEach(t),DRe=i(c),hd=n(c,"H2",{class:!0});var UPe=s(hd);rb=n(UPe,"A",{id:!0,class:!0,href:!0});var hot=s(rb);Jle=n(hot,"SPAN",{});var pot=s(Jle);m(z3.$$.fragment,pot),pot.forEach(t),hot.forEach(t),XAo=i(UPe),Yle=n(UPe,"SPAN",{});var _ot=s(Yle);zAo=r(_ot,"AutoModelForMultipleChoice"),_ot.forEach(t),UPe.forEach(t),GRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Q3.$$.fragment,al),QAo=i(al),pd=n(al,"P",{});var EU=s(pd);WAo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vN=n(EU,"A",{href:!0});var uot=s(vN);HAo=r(uot,"from_pretrained()"),uot.forEach(t),UAo=r(EU," class method or the "),TN=n(EU,"A",{href:!0});var bot=s(TN);JAo=r(bot,"from_config()"),bot.forEach(t),YAo=r(EU,` class
method.`),EU.forEach(t),KAo=i(al),W3=n(al,"P",{});var JPe=s(W3);ZAo=r(JPe,"This class cannot be instantiated directly using "),Kle=n(JPe,"CODE",{});var Fot=s(Kle);eyo=r(Fot,"__init__()"),Fot.forEach(t),oyo=r(JPe," (throws an error)."),JPe.forEach(t),ryo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(H3.$$.fragment,nl),tyo=i(nl),Zle=n(nl,"P",{});var vot=s(Zle);ayo=r(vot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vot.forEach(t),nyo=i(nl),_d=n(nl,"P",{});var CU=s(_d);syo=r(CU,`Note:
Loading a model from its configuration file does `),eie=n(CU,"STRONG",{});var Tot=s(eie);lyo=r(Tot,"not"),Tot.forEach(t),iyo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=n(CU,"A",{href:!0});var Mot=s(MN);dyo=r(Mot,"from_pretrained()"),Mot.forEach(t),cyo=r(CU," to load the model weights."),CU.forEach(t),fyo=i(nl),oie=n(nl,"P",{});var Eot=s(oie);myo=r(Eot,"Examples:"),Eot.forEach(t),gyo=i(nl),m(U3.$$.fragment,nl),nl.forEach(t),hyo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(J3.$$.fragment,Qt),pyo=i(Qt),rie=n(Qt,"P",{});var Cot=s(rie);_yo=r(Cot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cot.forEach(t),uyo=i(Qt),Ja=n(Qt,"P",{});var BE=s(Ja);byo=r(BE,"The model class to instantiate is selected based on the "),tie=n(BE,"CODE",{});var wot=s(tie);Fyo=r(wot,"model_type"),wot.forEach(t),vyo=r(BE,` property of the config object (either
passed as an argument or loaded from `),aie=n(BE,"CODE",{});var Aot=s(aie);Tyo=r(Aot,"pretrained_model_name_or_path"),Aot.forEach(t),Myo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nie=n(BE,"CODE",{});var yot=s(nie);Eyo=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),Cyo=r(BE,":"),BE.forEach(t),wyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);tb=n(O,"LI",{});var $we=s(tb);sie=n($we,"STRONG",{});var Lot=s(sie);Ayo=r(Lot,"albert"),Lot.forEach(t),yyo=r($we," \u2014 "),EN=n($we,"A",{href:!0});var xot=s(EN);Lyo=r(xot,"AlbertForMultipleChoice"),xot.forEach(t),xyo=r($we," (ALBERT model)"),$we.forEach(t),kyo=i(O),ab=n(O,"LI",{});var Iwe=s(ab);lie=n(Iwe,"STRONG",{});var kot=s(lie);Syo=r(kot,"bert"),kot.forEach(t),Ryo=r(Iwe," \u2014 "),CN=n(Iwe,"A",{href:!0});var Sot=s(CN);Byo=r(Sot,"BertForMultipleChoice"),Sot.forEach(t),Pyo=r(Iwe," (BERT model)"),Iwe.forEach(t),$yo=i(O),nb=n(O,"LI",{});var qwe=s(nb);iie=n(qwe,"STRONG",{});var Rot=s(iie);Iyo=r(Rot,"big_bird"),Rot.forEach(t),qyo=r(qwe," \u2014 "),wN=n(qwe,"A",{href:!0});var Bot=s(wN);Nyo=r(Bot,"BigBirdForMultipleChoice"),Bot.forEach(t),jyo=r(qwe," (BigBird model)"),qwe.forEach(t),Dyo=i(O),sb=n(O,"LI",{});var Nwe=s(sb);die=n(Nwe,"STRONG",{});var Pot=s(die);Gyo=r(Pot,"camembert"),Pot.forEach(t),Oyo=r(Nwe," \u2014 "),AN=n(Nwe,"A",{href:!0});var $ot=s(AN);Vyo=r($ot,"CamembertForMultipleChoice"),$ot.forEach(t),Xyo=r(Nwe," (CamemBERT model)"),Nwe.forEach(t),zyo=i(O),lb=n(O,"LI",{});var jwe=s(lb);cie=n(jwe,"STRONG",{});var Iot=s(cie);Qyo=r(Iot,"canine"),Iot.forEach(t),Wyo=r(jwe," \u2014 "),yN=n(jwe,"A",{href:!0});var qot=s(yN);Hyo=r(qot,"CanineForMultipleChoice"),qot.forEach(t),Uyo=r(jwe," (Canine model)"),jwe.forEach(t),Jyo=i(O),ib=n(O,"LI",{});var Dwe=s(ib);fie=n(Dwe,"STRONG",{});var Not=s(fie);Yyo=r(Not,"convbert"),Not.forEach(t),Kyo=r(Dwe," \u2014 "),LN=n(Dwe,"A",{href:!0});var jot=s(LN);Zyo=r(jot,"ConvBertForMultipleChoice"),jot.forEach(t),eLo=r(Dwe," (ConvBERT model)"),Dwe.forEach(t),oLo=i(O),db=n(O,"LI",{});var Gwe=s(db);mie=n(Gwe,"STRONG",{});var Dot=s(mie);rLo=r(Dot,"data2vec-text"),Dot.forEach(t),tLo=r(Gwe," \u2014 "),xN=n(Gwe,"A",{href:!0});var Got=s(xN);aLo=r(Got,"Data2VecTextForMultipleChoice"),Got.forEach(t),nLo=r(Gwe," (Data2VecText model)"),Gwe.forEach(t),sLo=i(O),cb=n(O,"LI",{});var Owe=s(cb);gie=n(Owe,"STRONG",{});var Oot=s(gie);lLo=r(Oot,"distilbert"),Oot.forEach(t),iLo=r(Owe," \u2014 "),kN=n(Owe,"A",{href:!0});var Vot=s(kN);dLo=r(Vot,"DistilBertForMultipleChoice"),Vot.forEach(t),cLo=r(Owe," (DistilBERT model)"),Owe.forEach(t),fLo=i(O),fb=n(O,"LI",{});var Vwe=s(fb);hie=n(Vwe,"STRONG",{});var Xot=s(hie);mLo=r(Xot,"electra"),Xot.forEach(t),gLo=r(Vwe," \u2014 "),SN=n(Vwe,"A",{href:!0});var zot=s(SN);hLo=r(zot,"ElectraForMultipleChoice"),zot.forEach(t),pLo=r(Vwe," (ELECTRA model)"),Vwe.forEach(t),_Lo=i(O),mb=n(O,"LI",{});var Xwe=s(mb);pie=n(Xwe,"STRONG",{});var Qot=s(pie);uLo=r(Qot,"flaubert"),Qot.forEach(t),bLo=r(Xwe," \u2014 "),RN=n(Xwe,"A",{href:!0});var Wot=s(RN);FLo=r(Wot,"FlaubertForMultipleChoice"),Wot.forEach(t),vLo=r(Xwe," (FlauBERT model)"),Xwe.forEach(t),TLo=i(O),gb=n(O,"LI",{});var zwe=s(gb);_ie=n(zwe,"STRONG",{});var Hot=s(_ie);MLo=r(Hot,"fnet"),Hot.forEach(t),ELo=r(zwe," \u2014 "),BN=n(zwe,"A",{href:!0});var Uot=s(BN);CLo=r(Uot,"FNetForMultipleChoice"),Uot.forEach(t),wLo=r(zwe," (FNet model)"),zwe.forEach(t),ALo=i(O),hb=n(O,"LI",{});var Qwe=s(hb);uie=n(Qwe,"STRONG",{});var Jot=s(uie);yLo=r(Jot,"funnel"),Jot.forEach(t),LLo=r(Qwe," \u2014 "),PN=n(Qwe,"A",{href:!0});var Yot=s(PN);xLo=r(Yot,"FunnelForMultipleChoice"),Yot.forEach(t),kLo=r(Qwe," (Funnel Transformer model)"),Qwe.forEach(t),SLo=i(O),pb=n(O,"LI",{});var Wwe=s(pb);bie=n(Wwe,"STRONG",{});var Kot=s(bie);RLo=r(Kot,"ibert"),Kot.forEach(t),BLo=r(Wwe," \u2014 "),$N=n(Wwe,"A",{href:!0});var Zot=s($N);PLo=r(Zot,"IBertForMultipleChoice"),Zot.forEach(t),$Lo=r(Wwe," (I-BERT model)"),Wwe.forEach(t),ILo=i(O),_b=n(O,"LI",{});var Hwe=s(_b);Fie=n(Hwe,"STRONG",{});var ert=s(Fie);qLo=r(ert,"longformer"),ert.forEach(t),NLo=r(Hwe," \u2014 "),IN=n(Hwe,"A",{href:!0});var ort=s(IN);jLo=r(ort,"LongformerForMultipleChoice"),ort.forEach(t),DLo=r(Hwe," (Longformer model)"),Hwe.forEach(t),GLo=i(O),ub=n(O,"LI",{});var Uwe=s(ub);vie=n(Uwe,"STRONG",{});var rrt=s(vie);OLo=r(rrt,"megatron-bert"),rrt.forEach(t),VLo=r(Uwe," \u2014 "),qN=n(Uwe,"A",{href:!0});var trt=s(qN);XLo=r(trt,"MegatronBertForMultipleChoice"),trt.forEach(t),zLo=r(Uwe," (MegatronBert model)"),Uwe.forEach(t),QLo=i(O),bb=n(O,"LI",{});var Jwe=s(bb);Tie=n(Jwe,"STRONG",{});var art=s(Tie);WLo=r(art,"mobilebert"),art.forEach(t),HLo=r(Jwe," \u2014 "),NN=n(Jwe,"A",{href:!0});var nrt=s(NN);ULo=r(nrt,"MobileBertForMultipleChoice"),nrt.forEach(t),JLo=r(Jwe," (MobileBERT model)"),Jwe.forEach(t),YLo=i(O),Fb=n(O,"LI",{});var Ywe=s(Fb);Mie=n(Ywe,"STRONG",{});var srt=s(Mie);KLo=r(srt,"mpnet"),srt.forEach(t),ZLo=r(Ywe," \u2014 "),jN=n(Ywe,"A",{href:!0});var lrt=s(jN);e7o=r(lrt,"MPNetForMultipleChoice"),lrt.forEach(t),o7o=r(Ywe," (MPNet model)"),Ywe.forEach(t),r7o=i(O),vb=n(O,"LI",{});var Kwe=s(vb);Eie=n(Kwe,"STRONG",{});var irt=s(Eie);t7o=r(irt,"nystromformer"),irt.forEach(t),a7o=r(Kwe," \u2014 "),DN=n(Kwe,"A",{href:!0});var drt=s(DN);n7o=r(drt,"NystromformerForMultipleChoice"),drt.forEach(t),s7o=r(Kwe," (Nystromformer model)"),Kwe.forEach(t),l7o=i(O),Tb=n(O,"LI",{});var Zwe=s(Tb);Cie=n(Zwe,"STRONG",{});var crt=s(Cie);i7o=r(crt,"qdqbert"),crt.forEach(t),d7o=r(Zwe," \u2014 "),GN=n(Zwe,"A",{href:!0});var frt=s(GN);c7o=r(frt,"QDQBertForMultipleChoice"),frt.forEach(t),f7o=r(Zwe," (QDQBert model)"),Zwe.forEach(t),m7o=i(O),Mb=n(O,"LI",{});var eAe=s(Mb);wie=n(eAe,"STRONG",{});var mrt=s(wie);g7o=r(mrt,"rembert"),mrt.forEach(t),h7o=r(eAe," \u2014 "),ON=n(eAe,"A",{href:!0});var grt=s(ON);p7o=r(grt,"RemBertForMultipleChoice"),grt.forEach(t),_7o=r(eAe," (RemBERT model)"),eAe.forEach(t),u7o=i(O),Eb=n(O,"LI",{});var oAe=s(Eb);Aie=n(oAe,"STRONG",{});var hrt=s(Aie);b7o=r(hrt,"roberta"),hrt.forEach(t),F7o=r(oAe," \u2014 "),VN=n(oAe,"A",{href:!0});var prt=s(VN);v7o=r(prt,"RobertaForMultipleChoice"),prt.forEach(t),T7o=r(oAe," (RoBERTa model)"),oAe.forEach(t),M7o=i(O),Cb=n(O,"LI",{});var rAe=s(Cb);yie=n(rAe,"STRONG",{});var _rt=s(yie);E7o=r(_rt,"roformer"),_rt.forEach(t),C7o=r(rAe," \u2014 "),XN=n(rAe,"A",{href:!0});var urt=s(XN);w7o=r(urt,"RoFormerForMultipleChoice"),urt.forEach(t),A7o=r(rAe," (RoFormer model)"),rAe.forEach(t),y7o=i(O),wb=n(O,"LI",{});var tAe=s(wb);Lie=n(tAe,"STRONG",{});var brt=s(Lie);L7o=r(brt,"squeezebert"),brt.forEach(t),x7o=r(tAe," \u2014 "),zN=n(tAe,"A",{href:!0});var Frt=s(zN);k7o=r(Frt,"SqueezeBertForMultipleChoice"),Frt.forEach(t),S7o=r(tAe," (SqueezeBERT model)"),tAe.forEach(t),R7o=i(O),Ab=n(O,"LI",{});var aAe=s(Ab);xie=n(aAe,"STRONG",{});var vrt=s(xie);B7o=r(vrt,"xlm"),vrt.forEach(t),P7o=r(aAe," \u2014 "),QN=n(aAe,"A",{href:!0});var Trt=s(QN);$7o=r(Trt,"XLMForMultipleChoice"),Trt.forEach(t),I7o=r(aAe," (XLM model)"),aAe.forEach(t),q7o=i(O),yb=n(O,"LI",{});var nAe=s(yb);kie=n(nAe,"STRONG",{});var Mrt=s(kie);N7o=r(Mrt,"xlm-roberta"),Mrt.forEach(t),j7o=r(nAe," \u2014 "),WN=n(nAe,"A",{href:!0});var Ert=s(WN);D7o=r(Ert,"XLMRobertaForMultipleChoice"),Ert.forEach(t),G7o=r(nAe," (XLM-RoBERTa model)"),nAe.forEach(t),O7o=i(O),Lb=n(O,"LI",{});var sAe=s(Lb);Sie=n(sAe,"STRONG",{});var Crt=s(Sie);V7o=r(Crt,"xlm-roberta-xl"),Crt.forEach(t),X7o=r(sAe," \u2014 "),HN=n(sAe,"A",{href:!0});var wrt=s(HN);z7o=r(wrt,"XLMRobertaXLForMultipleChoice"),wrt.forEach(t),Q7o=r(sAe," (XLM-RoBERTa-XL model)"),sAe.forEach(t),W7o=i(O),xb=n(O,"LI",{});var lAe=s(xb);Rie=n(lAe,"STRONG",{});var Art=s(Rie);H7o=r(Art,"xlnet"),Art.forEach(t),U7o=r(lAe," \u2014 "),UN=n(lAe,"A",{href:!0});var yrt=s(UN);J7o=r(yrt,"XLNetForMultipleChoice"),yrt.forEach(t),Y7o=r(lAe," (XLNet model)"),lAe.forEach(t),K7o=i(O),kb=n(O,"LI",{});var iAe=s(kb);Bie=n(iAe,"STRONG",{});var Lrt=s(Bie);Z7o=r(Lrt,"yoso"),Lrt.forEach(t),exo=r(iAe," \u2014 "),JN=n(iAe,"A",{href:!0});var xrt=s(JN);oxo=r(xrt,"YosoForMultipleChoice"),xrt.forEach(t),rxo=r(iAe," (YOSO model)"),iAe.forEach(t),O.forEach(t),txo=i(Qt),Sb=n(Qt,"P",{});var dAe=s(Sb);axo=r(dAe,"The model is set in evaluation mode by default using "),Pie=n(dAe,"CODE",{});var krt=s(Pie);nxo=r(krt,"model.eval()"),krt.forEach(t),sxo=r(dAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=n(dAe,"CODE",{});var Srt=s($ie);lxo=r(Srt,"model.train()"),Srt.forEach(t),dAe.forEach(t),ixo=i(Qt),Iie=n(Qt,"P",{});var Rrt=s(Iie);dxo=r(Rrt,"Examples:"),Rrt.forEach(t),cxo=i(Qt),m(Y3.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),ORe=i(c),ud=n(c,"H2",{class:!0});var YPe=s(ud);Rb=n(YPe,"A",{id:!0,class:!0,href:!0});var Brt=s(Rb);qie=n(Brt,"SPAN",{});var Prt=s(qie);m(K3.$$.fragment,Prt),Prt.forEach(t),Brt.forEach(t),fxo=i(YPe),Nie=n(YPe,"SPAN",{});var $rt=s(Nie);mxo=r($rt,"AutoModelForNextSentencePrediction"),$rt.forEach(t),YPe.forEach(t),VRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(Z3.$$.fragment,sl),gxo=i(sl),bd=n(sl,"P",{});var wU=s(bd);hxo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YN=n(wU,"A",{href:!0});var Irt=s(YN);pxo=r(Irt,"from_pretrained()"),Irt.forEach(t),_xo=r(wU," class method or the "),KN=n(wU,"A",{href:!0});var qrt=s(KN);uxo=r(qrt,"from_config()"),qrt.forEach(t),bxo=r(wU,` class
method.`),wU.forEach(t),Fxo=i(sl),eC=n(sl,"P",{});var KPe=s(eC);vxo=r(KPe,"This class cannot be instantiated directly using "),jie=n(KPe,"CODE",{});var Nrt=s(jie);Txo=r(Nrt,"__init__()"),Nrt.forEach(t),Mxo=r(KPe," (throws an error)."),KPe.forEach(t),Exo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(oC.$$.fragment,ll),Cxo=i(ll),Die=n(ll,"P",{});var jrt=s(Die);wxo=r(jrt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jrt.forEach(t),Axo=i(ll),Fd=n(ll,"P",{});var AU=s(Fd);yxo=r(AU,`Note:
Loading a model from its configuration file does `),Gie=n(AU,"STRONG",{});var Drt=s(Gie);Lxo=r(Drt,"not"),Drt.forEach(t),xxo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=n(AU,"A",{href:!0});var Grt=s(ZN);kxo=r(Grt,"from_pretrained()"),Grt.forEach(t),Sxo=r(AU," to load the model weights."),AU.forEach(t),Rxo=i(ll),Oie=n(ll,"P",{});var Ort=s(Oie);Bxo=r(Ort,"Examples:"),Ort.forEach(t),Pxo=i(ll),m(rC.$$.fragment,ll),ll.forEach(t),$xo=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(tC.$$.fragment,Wt),Ixo=i(Wt),Vie=n(Wt,"P",{});var Vrt=s(Vie);qxo=r(Vrt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vrt.forEach(t),Nxo=i(Wt),Ya=n(Wt,"P",{});var PE=s(Ya);jxo=r(PE,"The model class to instantiate is selected based on the "),Xie=n(PE,"CODE",{});var Xrt=s(Xie);Dxo=r(Xrt,"model_type"),Xrt.forEach(t),Gxo=r(PE,` property of the config object (either
passed as an argument or loaded from `),zie=n(PE,"CODE",{});var zrt=s(zie);Oxo=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),Vxo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=n(PE,"CODE",{});var Qrt=s(Qie);Xxo=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),zxo=r(PE,":"),PE.forEach(t),Qxo=i(Wt),da=n(Wt,"UL",{});var il=s(da);Bb=n(il,"LI",{});var cAe=s(Bb);Wie=n(cAe,"STRONG",{});var Wrt=s(Wie);Wxo=r(Wrt,"bert"),Wrt.forEach(t),Hxo=r(cAe," \u2014 "),ej=n(cAe,"A",{href:!0});var Hrt=s(ej);Uxo=r(Hrt,"BertForNextSentencePrediction"),Hrt.forEach(t),Jxo=r(cAe," (BERT model)"),cAe.forEach(t),Yxo=i(il),Pb=n(il,"LI",{});var fAe=s(Pb);Hie=n(fAe,"STRONG",{});var Urt=s(Hie);Kxo=r(Urt,"fnet"),Urt.forEach(t),Zxo=r(fAe," \u2014 "),oj=n(fAe,"A",{href:!0});var Jrt=s(oj);e9o=r(Jrt,"FNetForNextSentencePrediction"),Jrt.forEach(t),o9o=r(fAe," (FNet model)"),fAe.forEach(t),r9o=i(il),$b=n(il,"LI",{});var mAe=s($b);Uie=n(mAe,"STRONG",{});var Yrt=s(Uie);t9o=r(Yrt,"megatron-bert"),Yrt.forEach(t),a9o=r(mAe," \u2014 "),rj=n(mAe,"A",{href:!0});var Krt=s(rj);n9o=r(Krt,"MegatronBertForNextSentencePrediction"),Krt.forEach(t),s9o=r(mAe," (MegatronBert model)"),mAe.forEach(t),l9o=i(il),Ib=n(il,"LI",{});var gAe=s(Ib);Jie=n(gAe,"STRONG",{});var Zrt=s(Jie);i9o=r(Zrt,"mobilebert"),Zrt.forEach(t),d9o=r(gAe," \u2014 "),tj=n(gAe,"A",{href:!0});var ett=s(tj);c9o=r(ett,"MobileBertForNextSentencePrediction"),ett.forEach(t),f9o=r(gAe," (MobileBERT model)"),gAe.forEach(t),m9o=i(il),qb=n(il,"LI",{});var hAe=s(qb);Yie=n(hAe,"STRONG",{});var ott=s(Yie);g9o=r(ott,"qdqbert"),ott.forEach(t),h9o=r(hAe," \u2014 "),aj=n(hAe,"A",{href:!0});var rtt=s(aj);p9o=r(rtt,"QDQBertForNextSentencePrediction"),rtt.forEach(t),_9o=r(hAe," (QDQBert model)"),hAe.forEach(t),il.forEach(t),u9o=i(Wt),Nb=n(Wt,"P",{});var pAe=s(Nb);b9o=r(pAe,"The model is set in evaluation mode by default using "),Kie=n(pAe,"CODE",{});var ttt=s(Kie);F9o=r(ttt,"model.eval()"),ttt.forEach(t),v9o=r(pAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zie=n(pAe,"CODE",{});var att=s(Zie);T9o=r(att,"model.train()"),att.forEach(t),pAe.forEach(t),M9o=i(Wt),ede=n(Wt,"P",{});var ntt=s(ede);E9o=r(ntt,"Examples:"),ntt.forEach(t),C9o=i(Wt),m(aC.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),XRe=i(c),vd=n(c,"H2",{class:!0});var ZPe=s(vd);jb=n(ZPe,"A",{id:!0,class:!0,href:!0});var stt=s(jb);ode=n(stt,"SPAN",{});var ltt=s(ode);m(nC.$$.fragment,ltt),ltt.forEach(t),stt.forEach(t),w9o=i(ZPe),rde=n(ZPe,"SPAN",{});var itt=s(rde);A9o=r(itt,"AutoModelForTokenClassification"),itt.forEach(t),ZPe.forEach(t),zRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(sC.$$.fragment,dl),y9o=i(dl),Td=n(dl,"P",{});var yU=s(Td);L9o=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nj=n(yU,"A",{href:!0});var dtt=s(nj);x9o=r(dtt,"from_pretrained()"),dtt.forEach(t),k9o=r(yU," class method or the "),sj=n(yU,"A",{href:!0});var ctt=s(sj);S9o=r(ctt,"from_config()"),ctt.forEach(t),R9o=r(yU,` class
method.`),yU.forEach(t),B9o=i(dl),lC=n(dl,"P",{});var e$e=s(lC);P9o=r(e$e,"This class cannot be instantiated directly using "),tde=n(e$e,"CODE",{});var ftt=s(tde);$9o=r(ftt,"__init__()"),ftt.forEach(t),I9o=r(e$e," (throws an error)."),e$e.forEach(t),q9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(iC.$$.fragment,cl),N9o=i(cl),ade=n(cl,"P",{});var mtt=s(ade);j9o=r(mtt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mtt.forEach(t),D9o=i(cl),Md=n(cl,"P",{});var LU=s(Md);G9o=r(LU,`Note:
Loading a model from its configuration file does `),nde=n(LU,"STRONG",{});var gtt=s(nde);O9o=r(gtt,"not"),gtt.forEach(t),V9o=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=n(LU,"A",{href:!0});var htt=s(lj);X9o=r(htt,"from_pretrained()"),htt.forEach(t),z9o=r(LU," to load the model weights."),LU.forEach(t),Q9o=i(cl),sde=n(cl,"P",{});var ptt=s(sde);W9o=r(ptt,"Examples:"),ptt.forEach(t),H9o=i(cl),m(dC.$$.fragment,cl),cl.forEach(t),U9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(cC.$$.fragment,Ht),J9o=i(Ht),lde=n(Ht,"P",{});var _tt=s(lde);Y9o=r(_tt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_tt.forEach(t),K9o=i(Ht),Ka=n(Ht,"P",{});var $E=s(Ka);Z9o=r($E,"The model class to instantiate is selected based on the "),ide=n($E,"CODE",{});var utt=s(ide);eko=r(utt,"model_type"),utt.forEach(t),oko=r($E,` property of the config object (either
passed as an argument or loaded from `),dde=n($E,"CODE",{});var btt=s(dde);rko=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),tko=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n($E,"CODE",{});var Ftt=s(cde);ako=r(Ftt,"pretrained_model_name_or_path"),Ftt.forEach(t),nko=r($E,":"),$E.forEach(t),sko=i(Ht),j=n(Ht,"UL",{});var D=s(j);Db=n(D,"LI",{});var _Ae=s(Db);fde=n(_Ae,"STRONG",{});var vtt=s(fde);lko=r(vtt,"albert"),vtt.forEach(t),iko=r(_Ae," \u2014 "),ij=n(_Ae,"A",{href:!0});var Ttt=s(ij);dko=r(Ttt,"AlbertForTokenClassification"),Ttt.forEach(t),cko=r(_Ae," (ALBERT model)"),_Ae.forEach(t),fko=i(D),Gb=n(D,"LI",{});var uAe=s(Gb);mde=n(uAe,"STRONG",{});var Mtt=s(mde);mko=r(Mtt,"bert"),Mtt.forEach(t),gko=r(uAe," \u2014 "),dj=n(uAe,"A",{href:!0});var Ett=s(dj);hko=r(Ett,"BertForTokenClassification"),Ett.forEach(t),pko=r(uAe," (BERT model)"),uAe.forEach(t),_ko=i(D),Ob=n(D,"LI",{});var bAe=s(Ob);gde=n(bAe,"STRONG",{});var Ctt=s(gde);uko=r(Ctt,"big_bird"),Ctt.forEach(t),bko=r(bAe," \u2014 "),cj=n(bAe,"A",{href:!0});var wtt=s(cj);Fko=r(wtt,"BigBirdForTokenClassification"),wtt.forEach(t),vko=r(bAe," (BigBird model)"),bAe.forEach(t),Tko=i(D),Vb=n(D,"LI",{});var FAe=s(Vb);hde=n(FAe,"STRONG",{});var Att=s(hde);Mko=r(Att,"camembert"),Att.forEach(t),Eko=r(FAe," \u2014 "),fj=n(FAe,"A",{href:!0});var ytt=s(fj);Cko=r(ytt,"CamembertForTokenClassification"),ytt.forEach(t),wko=r(FAe," (CamemBERT model)"),FAe.forEach(t),Ako=i(D),Xb=n(D,"LI",{});var vAe=s(Xb);pde=n(vAe,"STRONG",{});var Ltt=s(pde);yko=r(Ltt,"canine"),Ltt.forEach(t),Lko=r(vAe," \u2014 "),mj=n(vAe,"A",{href:!0});var xtt=s(mj);xko=r(xtt,"CanineForTokenClassification"),xtt.forEach(t),kko=r(vAe," (Canine model)"),vAe.forEach(t),Sko=i(D),zb=n(D,"LI",{});var TAe=s(zb);_de=n(TAe,"STRONG",{});var ktt=s(_de);Rko=r(ktt,"convbert"),ktt.forEach(t),Bko=r(TAe," \u2014 "),gj=n(TAe,"A",{href:!0});var Stt=s(gj);Pko=r(Stt,"ConvBertForTokenClassification"),Stt.forEach(t),$ko=r(TAe," (ConvBERT model)"),TAe.forEach(t),Iko=i(D),Qb=n(D,"LI",{});var MAe=s(Qb);ude=n(MAe,"STRONG",{});var Rtt=s(ude);qko=r(Rtt,"data2vec-text"),Rtt.forEach(t),Nko=r(MAe," \u2014 "),hj=n(MAe,"A",{href:!0});var Btt=s(hj);jko=r(Btt,"Data2VecTextForTokenClassification"),Btt.forEach(t),Dko=r(MAe," (Data2VecText model)"),MAe.forEach(t),Gko=i(D),Wb=n(D,"LI",{});var EAe=s(Wb);bde=n(EAe,"STRONG",{});var Ptt=s(bde);Oko=r(Ptt,"deberta"),Ptt.forEach(t),Vko=r(EAe," \u2014 "),pj=n(EAe,"A",{href:!0});var $tt=s(pj);Xko=r($tt,"DebertaForTokenClassification"),$tt.forEach(t),zko=r(EAe," (DeBERTa model)"),EAe.forEach(t),Qko=i(D),Hb=n(D,"LI",{});var CAe=s(Hb);Fde=n(CAe,"STRONG",{});var Itt=s(Fde);Wko=r(Itt,"deberta-v2"),Itt.forEach(t),Hko=r(CAe," \u2014 "),_j=n(CAe,"A",{href:!0});var qtt=s(_j);Uko=r(qtt,"DebertaV2ForTokenClassification"),qtt.forEach(t),Jko=r(CAe," (DeBERTa-v2 model)"),CAe.forEach(t),Yko=i(D),Ub=n(D,"LI",{});var wAe=s(Ub);vde=n(wAe,"STRONG",{});var Ntt=s(vde);Kko=r(Ntt,"distilbert"),Ntt.forEach(t),Zko=r(wAe," \u2014 "),uj=n(wAe,"A",{href:!0});var jtt=s(uj);eSo=r(jtt,"DistilBertForTokenClassification"),jtt.forEach(t),oSo=r(wAe," (DistilBERT model)"),wAe.forEach(t),rSo=i(D),Jb=n(D,"LI",{});var AAe=s(Jb);Tde=n(AAe,"STRONG",{});var Dtt=s(Tde);tSo=r(Dtt,"electra"),Dtt.forEach(t),aSo=r(AAe," \u2014 "),bj=n(AAe,"A",{href:!0});var Gtt=s(bj);nSo=r(Gtt,"ElectraForTokenClassification"),Gtt.forEach(t),sSo=r(AAe," (ELECTRA model)"),AAe.forEach(t),lSo=i(D),Yb=n(D,"LI",{});var yAe=s(Yb);Mde=n(yAe,"STRONG",{});var Ott=s(Mde);iSo=r(Ott,"flaubert"),Ott.forEach(t),dSo=r(yAe," \u2014 "),Fj=n(yAe,"A",{href:!0});var Vtt=s(Fj);cSo=r(Vtt,"FlaubertForTokenClassification"),Vtt.forEach(t),fSo=r(yAe," (FlauBERT model)"),yAe.forEach(t),mSo=i(D),Kb=n(D,"LI",{});var LAe=s(Kb);Ede=n(LAe,"STRONG",{});var Xtt=s(Ede);gSo=r(Xtt,"fnet"),Xtt.forEach(t),hSo=r(LAe," \u2014 "),vj=n(LAe,"A",{href:!0});var ztt=s(vj);pSo=r(ztt,"FNetForTokenClassification"),ztt.forEach(t),_So=r(LAe," (FNet model)"),LAe.forEach(t),uSo=i(D),Zb=n(D,"LI",{});var xAe=s(Zb);Cde=n(xAe,"STRONG",{});var Qtt=s(Cde);bSo=r(Qtt,"funnel"),Qtt.forEach(t),FSo=r(xAe," \u2014 "),Tj=n(xAe,"A",{href:!0});var Wtt=s(Tj);vSo=r(Wtt,"FunnelForTokenClassification"),Wtt.forEach(t),TSo=r(xAe," (Funnel Transformer model)"),xAe.forEach(t),MSo=i(D),e2=n(D,"LI",{});var kAe=s(e2);wde=n(kAe,"STRONG",{});var Htt=s(wde);ESo=r(Htt,"gpt2"),Htt.forEach(t),CSo=r(kAe," \u2014 "),Mj=n(kAe,"A",{href:!0});var Utt=s(Mj);wSo=r(Utt,"GPT2ForTokenClassification"),Utt.forEach(t),ASo=r(kAe," (OpenAI GPT-2 model)"),kAe.forEach(t),ySo=i(D),o2=n(D,"LI",{});var SAe=s(o2);Ade=n(SAe,"STRONG",{});var Jtt=s(Ade);LSo=r(Jtt,"ibert"),Jtt.forEach(t),xSo=r(SAe," \u2014 "),Ej=n(SAe,"A",{href:!0});var Ytt=s(Ej);kSo=r(Ytt,"IBertForTokenClassification"),Ytt.forEach(t),SSo=r(SAe," (I-BERT model)"),SAe.forEach(t),RSo=i(D),r2=n(D,"LI",{});var RAe=s(r2);yde=n(RAe,"STRONG",{});var Ktt=s(yde);BSo=r(Ktt,"layoutlm"),Ktt.forEach(t),PSo=r(RAe," \u2014 "),Cj=n(RAe,"A",{href:!0});var Ztt=s(Cj);$So=r(Ztt,"LayoutLMForTokenClassification"),Ztt.forEach(t),ISo=r(RAe," (LayoutLM model)"),RAe.forEach(t),qSo=i(D),t2=n(D,"LI",{});var BAe=s(t2);Lde=n(BAe,"STRONG",{});var eat=s(Lde);NSo=r(eat,"layoutlmv2"),eat.forEach(t),jSo=r(BAe," \u2014 "),wj=n(BAe,"A",{href:!0});var oat=s(wj);DSo=r(oat,"LayoutLMv2ForTokenClassification"),oat.forEach(t),GSo=r(BAe," (LayoutLMv2 model)"),BAe.forEach(t),OSo=i(D),a2=n(D,"LI",{});var PAe=s(a2);xde=n(PAe,"STRONG",{});var rat=s(xde);VSo=r(rat,"longformer"),rat.forEach(t),XSo=r(PAe," \u2014 "),Aj=n(PAe,"A",{href:!0});var tat=s(Aj);zSo=r(tat,"LongformerForTokenClassification"),tat.forEach(t),QSo=r(PAe," (Longformer model)"),PAe.forEach(t),WSo=i(D),n2=n(D,"LI",{});var $Ae=s(n2);kde=n($Ae,"STRONG",{});var aat=s(kde);HSo=r(aat,"megatron-bert"),aat.forEach(t),USo=r($Ae," \u2014 "),yj=n($Ae,"A",{href:!0});var nat=s(yj);JSo=r(nat,"MegatronBertForTokenClassification"),nat.forEach(t),YSo=r($Ae," (MegatronBert model)"),$Ae.forEach(t),KSo=i(D),s2=n(D,"LI",{});var IAe=s(s2);Sde=n(IAe,"STRONG",{});var sat=s(Sde);ZSo=r(sat,"mobilebert"),sat.forEach(t),eRo=r(IAe," \u2014 "),Lj=n(IAe,"A",{href:!0});var lat=s(Lj);oRo=r(lat,"MobileBertForTokenClassification"),lat.forEach(t),rRo=r(IAe," (MobileBERT model)"),IAe.forEach(t),tRo=i(D),l2=n(D,"LI",{});var qAe=s(l2);Rde=n(qAe,"STRONG",{});var iat=s(Rde);aRo=r(iat,"mpnet"),iat.forEach(t),nRo=r(qAe," \u2014 "),xj=n(qAe,"A",{href:!0});var dat=s(xj);sRo=r(dat,"MPNetForTokenClassification"),dat.forEach(t),lRo=r(qAe," (MPNet model)"),qAe.forEach(t),iRo=i(D),i2=n(D,"LI",{});var NAe=s(i2);Bde=n(NAe,"STRONG",{});var cat=s(Bde);dRo=r(cat,"nystromformer"),cat.forEach(t),cRo=r(NAe," \u2014 "),kj=n(NAe,"A",{href:!0});var fat=s(kj);fRo=r(fat,"NystromformerForTokenClassification"),fat.forEach(t),mRo=r(NAe," (Nystromformer model)"),NAe.forEach(t),gRo=i(D),d2=n(D,"LI",{});var jAe=s(d2);Pde=n(jAe,"STRONG",{});var mat=s(Pde);hRo=r(mat,"qdqbert"),mat.forEach(t),pRo=r(jAe," \u2014 "),Sj=n(jAe,"A",{href:!0});var gat=s(Sj);_Ro=r(gat,"QDQBertForTokenClassification"),gat.forEach(t),uRo=r(jAe," (QDQBert model)"),jAe.forEach(t),bRo=i(D),c2=n(D,"LI",{});var DAe=s(c2);$de=n(DAe,"STRONG",{});var hat=s($de);FRo=r(hat,"rembert"),hat.forEach(t),vRo=r(DAe," \u2014 "),Rj=n(DAe,"A",{href:!0});var pat=s(Rj);TRo=r(pat,"RemBertForTokenClassification"),pat.forEach(t),MRo=r(DAe," (RemBERT model)"),DAe.forEach(t),ERo=i(D),f2=n(D,"LI",{});var GAe=s(f2);Ide=n(GAe,"STRONG",{});var _at=s(Ide);CRo=r(_at,"roberta"),_at.forEach(t),wRo=r(GAe," \u2014 "),Bj=n(GAe,"A",{href:!0});var uat=s(Bj);ARo=r(uat,"RobertaForTokenClassification"),uat.forEach(t),yRo=r(GAe," (RoBERTa model)"),GAe.forEach(t),LRo=i(D),m2=n(D,"LI",{});var OAe=s(m2);qde=n(OAe,"STRONG",{});var bat=s(qde);xRo=r(bat,"roformer"),bat.forEach(t),kRo=r(OAe," \u2014 "),Pj=n(OAe,"A",{href:!0});var Fat=s(Pj);SRo=r(Fat,"RoFormerForTokenClassification"),Fat.forEach(t),RRo=r(OAe," (RoFormer model)"),OAe.forEach(t),BRo=i(D),g2=n(D,"LI",{});var VAe=s(g2);Nde=n(VAe,"STRONG",{});var vat=s(Nde);PRo=r(vat,"squeezebert"),vat.forEach(t),$Ro=r(VAe," \u2014 "),$j=n(VAe,"A",{href:!0});var Tat=s($j);IRo=r(Tat,"SqueezeBertForTokenClassification"),Tat.forEach(t),qRo=r(VAe," (SqueezeBERT model)"),VAe.forEach(t),NRo=i(D),h2=n(D,"LI",{});var XAe=s(h2);jde=n(XAe,"STRONG",{});var Mat=s(jde);jRo=r(Mat,"xlm"),Mat.forEach(t),DRo=r(XAe," \u2014 "),Ij=n(XAe,"A",{href:!0});var Eat=s(Ij);GRo=r(Eat,"XLMForTokenClassification"),Eat.forEach(t),ORo=r(XAe," (XLM model)"),XAe.forEach(t),VRo=i(D),p2=n(D,"LI",{});var zAe=s(p2);Dde=n(zAe,"STRONG",{});var Cat=s(Dde);XRo=r(Cat,"xlm-roberta"),Cat.forEach(t),zRo=r(zAe," \u2014 "),qj=n(zAe,"A",{href:!0});var wat=s(qj);QRo=r(wat,"XLMRobertaForTokenClassification"),wat.forEach(t),WRo=r(zAe," (XLM-RoBERTa model)"),zAe.forEach(t),HRo=i(D),_2=n(D,"LI",{});var QAe=s(_2);Gde=n(QAe,"STRONG",{});var Aat=s(Gde);URo=r(Aat,"xlm-roberta-xl"),Aat.forEach(t),JRo=r(QAe," \u2014 "),Nj=n(QAe,"A",{href:!0});var yat=s(Nj);YRo=r(yat,"XLMRobertaXLForTokenClassification"),yat.forEach(t),KRo=r(QAe," (XLM-RoBERTa-XL model)"),QAe.forEach(t),ZRo=i(D),u2=n(D,"LI",{});var WAe=s(u2);Ode=n(WAe,"STRONG",{});var Lat=s(Ode);eBo=r(Lat,"xlnet"),Lat.forEach(t),oBo=r(WAe," \u2014 "),jj=n(WAe,"A",{href:!0});var xat=s(jj);rBo=r(xat,"XLNetForTokenClassification"),xat.forEach(t),tBo=r(WAe," (XLNet model)"),WAe.forEach(t),aBo=i(D),b2=n(D,"LI",{});var HAe=s(b2);Vde=n(HAe,"STRONG",{});var kat=s(Vde);nBo=r(kat,"yoso"),kat.forEach(t),sBo=r(HAe," \u2014 "),Dj=n(HAe,"A",{href:!0});var Sat=s(Dj);lBo=r(Sat,"YosoForTokenClassification"),Sat.forEach(t),iBo=r(HAe," (YOSO model)"),HAe.forEach(t),D.forEach(t),dBo=i(Ht),F2=n(Ht,"P",{});var UAe=s(F2);cBo=r(UAe,"The model is set in evaluation mode by default using "),Xde=n(UAe,"CODE",{});var Rat=s(Xde);fBo=r(Rat,"model.eval()"),Rat.forEach(t),mBo=r(UAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=n(UAe,"CODE",{});var Bat=s(zde);gBo=r(Bat,"model.train()"),Bat.forEach(t),UAe.forEach(t),hBo=i(Ht),Qde=n(Ht,"P",{});var Pat=s(Qde);pBo=r(Pat,"Examples:"),Pat.forEach(t),_Bo=i(Ht),m(fC.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),QRe=i(c),Ed=n(c,"H2",{class:!0});var o$e=s(Ed);v2=n(o$e,"A",{id:!0,class:!0,href:!0});var $at=s(v2);Wde=n($at,"SPAN",{});var Iat=s(Wde);m(mC.$$.fragment,Iat),Iat.forEach(t),$at.forEach(t),uBo=i(o$e),Hde=n(o$e,"SPAN",{});var qat=s(Hde);bBo=r(qat,"AutoModelForQuestionAnswering"),qat.forEach(t),o$e.forEach(t),WRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(gC.$$.fragment,fl),FBo=i(fl),Cd=n(fl,"P",{});var xU=s(Cd);vBo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gj=n(xU,"A",{href:!0});var Nat=s(Gj);TBo=r(Nat,"from_pretrained()"),Nat.forEach(t),MBo=r(xU," class method or the "),Oj=n(xU,"A",{href:!0});var jat=s(Oj);EBo=r(jat,"from_config()"),jat.forEach(t),CBo=r(xU,` class
method.`),xU.forEach(t),wBo=i(fl),hC=n(fl,"P",{});var r$e=s(hC);ABo=r(r$e,"This class cannot be instantiated directly using "),Ude=n(r$e,"CODE",{});var Dat=s(Ude);yBo=r(Dat,"__init__()"),Dat.forEach(t),LBo=r(r$e," (throws an error)."),r$e.forEach(t),xBo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(pC.$$.fragment,ml),kBo=i(ml),Jde=n(ml,"P",{});var Gat=s(Jde);SBo=r(Gat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gat.forEach(t),RBo=i(ml),wd=n(ml,"P",{});var kU=s(wd);BBo=r(kU,`Note:
Loading a model from its configuration file does `),Yde=n(kU,"STRONG",{});var Oat=s(Yde);PBo=r(Oat,"not"),Oat.forEach(t),$Bo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(kU,"A",{href:!0});var Vat=s(Vj);IBo=r(Vat,"from_pretrained()"),Vat.forEach(t),qBo=r(kU," to load the model weights."),kU.forEach(t),NBo=i(ml),Kde=n(ml,"P",{});var Xat=s(Kde);jBo=r(Xat,"Examples:"),Xat.forEach(t),DBo=i(ml),m(_C.$$.fragment,ml),ml.forEach(t),GBo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(uC.$$.fragment,Ut),OBo=i(Ut),Zde=n(Ut,"P",{});var zat=s(Zde);VBo=r(zat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zat.forEach(t),XBo=i(Ut),Za=n(Ut,"P",{});var IE=s(Za);zBo=r(IE,"The model class to instantiate is selected based on the "),ece=n(IE,"CODE",{});var Qat=s(ece);QBo=r(Qat,"model_type"),Qat.forEach(t),WBo=r(IE,` property of the config object (either
passed as an argument or loaded from `),oce=n(IE,"CODE",{});var Wat=s(oce);HBo=r(Wat,"pretrained_model_name_or_path"),Wat.forEach(t),UBo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=n(IE,"CODE",{});var Hat=s(rce);JBo=r(Hat,"pretrained_model_name_or_path"),Hat.forEach(t),YBo=r(IE,":"),IE.forEach(t),KBo=i(Ut),R=n(Ut,"UL",{});var P=s(R);T2=n(P,"LI",{});var JAe=s(T2);tce=n(JAe,"STRONG",{});var Uat=s(tce);ZBo=r(Uat,"albert"),Uat.forEach(t),ePo=r(JAe," \u2014 "),Xj=n(JAe,"A",{href:!0});var Jat=s(Xj);oPo=r(Jat,"AlbertForQuestionAnswering"),Jat.forEach(t),rPo=r(JAe," (ALBERT model)"),JAe.forEach(t),tPo=i(P),M2=n(P,"LI",{});var YAe=s(M2);ace=n(YAe,"STRONG",{});var Yat=s(ace);aPo=r(Yat,"bart"),Yat.forEach(t),nPo=r(YAe," \u2014 "),zj=n(YAe,"A",{href:!0});var Kat=s(zj);sPo=r(Kat,"BartForQuestionAnswering"),Kat.forEach(t),lPo=r(YAe," (BART model)"),YAe.forEach(t),iPo=i(P),E2=n(P,"LI",{});var KAe=s(E2);nce=n(KAe,"STRONG",{});var Zat=s(nce);dPo=r(Zat,"bert"),Zat.forEach(t),cPo=r(KAe," \u2014 "),Qj=n(KAe,"A",{href:!0});var ent=s(Qj);fPo=r(ent,"BertForQuestionAnswering"),ent.forEach(t),mPo=r(KAe," (BERT model)"),KAe.forEach(t),gPo=i(P),C2=n(P,"LI",{});var ZAe=s(C2);sce=n(ZAe,"STRONG",{});var ont=s(sce);hPo=r(ont,"big_bird"),ont.forEach(t),pPo=r(ZAe," \u2014 "),Wj=n(ZAe,"A",{href:!0});var rnt=s(Wj);_Po=r(rnt,"BigBirdForQuestionAnswering"),rnt.forEach(t),uPo=r(ZAe," (BigBird model)"),ZAe.forEach(t),bPo=i(P),w2=n(P,"LI",{});var eye=s(w2);lce=n(eye,"STRONG",{});var tnt=s(lce);FPo=r(tnt,"bigbird_pegasus"),tnt.forEach(t),vPo=r(eye," \u2014 "),Hj=n(eye,"A",{href:!0});var ant=s(Hj);TPo=r(ant,"BigBirdPegasusForQuestionAnswering"),ant.forEach(t),MPo=r(eye," (BigBirdPegasus model)"),eye.forEach(t),EPo=i(P),A2=n(P,"LI",{});var oye=s(A2);ice=n(oye,"STRONG",{});var nnt=s(ice);CPo=r(nnt,"camembert"),nnt.forEach(t),wPo=r(oye," \u2014 "),Uj=n(oye,"A",{href:!0});var snt=s(Uj);APo=r(snt,"CamembertForQuestionAnswering"),snt.forEach(t),yPo=r(oye," (CamemBERT model)"),oye.forEach(t),LPo=i(P),y2=n(P,"LI",{});var rye=s(y2);dce=n(rye,"STRONG",{});var lnt=s(dce);xPo=r(lnt,"canine"),lnt.forEach(t),kPo=r(rye," \u2014 "),Jj=n(rye,"A",{href:!0});var int=s(Jj);SPo=r(int,"CanineForQuestionAnswering"),int.forEach(t),RPo=r(rye," (Canine model)"),rye.forEach(t),BPo=i(P),L2=n(P,"LI",{});var tye=s(L2);cce=n(tye,"STRONG",{});var dnt=s(cce);PPo=r(dnt,"convbert"),dnt.forEach(t),$Po=r(tye," \u2014 "),Yj=n(tye,"A",{href:!0});var cnt=s(Yj);IPo=r(cnt,"ConvBertForQuestionAnswering"),cnt.forEach(t),qPo=r(tye," (ConvBERT model)"),tye.forEach(t),NPo=i(P),x2=n(P,"LI",{});var aye=s(x2);fce=n(aye,"STRONG",{});var fnt=s(fce);jPo=r(fnt,"data2vec-text"),fnt.forEach(t),DPo=r(aye," \u2014 "),Kj=n(aye,"A",{href:!0});var mnt=s(Kj);GPo=r(mnt,"Data2VecTextForQuestionAnswering"),mnt.forEach(t),OPo=r(aye," (Data2VecText model)"),aye.forEach(t),VPo=i(P),k2=n(P,"LI",{});var nye=s(k2);mce=n(nye,"STRONG",{});var gnt=s(mce);XPo=r(gnt,"deberta"),gnt.forEach(t),zPo=r(nye," \u2014 "),Zj=n(nye,"A",{href:!0});var hnt=s(Zj);QPo=r(hnt,"DebertaForQuestionAnswering"),hnt.forEach(t),WPo=r(nye," (DeBERTa model)"),nye.forEach(t),HPo=i(P),S2=n(P,"LI",{});var sye=s(S2);gce=n(sye,"STRONG",{});var pnt=s(gce);UPo=r(pnt,"deberta-v2"),pnt.forEach(t),JPo=r(sye," \u2014 "),eD=n(sye,"A",{href:!0});var _nt=s(eD);YPo=r(_nt,"DebertaV2ForQuestionAnswering"),_nt.forEach(t),KPo=r(sye," (DeBERTa-v2 model)"),sye.forEach(t),ZPo=i(P),R2=n(P,"LI",{});var lye=s(R2);hce=n(lye,"STRONG",{});var unt=s(hce);e$o=r(unt,"distilbert"),unt.forEach(t),o$o=r(lye," \u2014 "),oD=n(lye,"A",{href:!0});var bnt=s(oD);r$o=r(bnt,"DistilBertForQuestionAnswering"),bnt.forEach(t),t$o=r(lye," (DistilBERT model)"),lye.forEach(t),a$o=i(P),B2=n(P,"LI",{});var iye=s(B2);pce=n(iye,"STRONG",{});var Fnt=s(pce);n$o=r(Fnt,"electra"),Fnt.forEach(t),s$o=r(iye," \u2014 "),rD=n(iye,"A",{href:!0});var vnt=s(rD);l$o=r(vnt,"ElectraForQuestionAnswering"),vnt.forEach(t),i$o=r(iye," (ELECTRA model)"),iye.forEach(t),d$o=i(P),P2=n(P,"LI",{});var dye=s(P2);_ce=n(dye,"STRONG",{});var Tnt=s(_ce);c$o=r(Tnt,"flaubert"),Tnt.forEach(t),f$o=r(dye," \u2014 "),tD=n(dye,"A",{href:!0});var Mnt=s(tD);m$o=r(Mnt,"FlaubertForQuestionAnsweringSimple"),Mnt.forEach(t),g$o=r(dye," (FlauBERT model)"),dye.forEach(t),h$o=i(P),$2=n(P,"LI",{});var cye=s($2);uce=n(cye,"STRONG",{});var Ent=s(uce);p$o=r(Ent,"fnet"),Ent.forEach(t),_$o=r(cye," \u2014 "),aD=n(cye,"A",{href:!0});var Cnt=s(aD);u$o=r(Cnt,"FNetForQuestionAnswering"),Cnt.forEach(t),b$o=r(cye," (FNet model)"),cye.forEach(t),F$o=i(P),I2=n(P,"LI",{});var fye=s(I2);bce=n(fye,"STRONG",{});var wnt=s(bce);v$o=r(wnt,"funnel"),wnt.forEach(t),T$o=r(fye," \u2014 "),nD=n(fye,"A",{href:!0});var Ant=s(nD);M$o=r(Ant,"FunnelForQuestionAnswering"),Ant.forEach(t),E$o=r(fye," (Funnel Transformer model)"),fye.forEach(t),C$o=i(P),q2=n(P,"LI",{});var mye=s(q2);Fce=n(mye,"STRONG",{});var ynt=s(Fce);w$o=r(ynt,"gptj"),ynt.forEach(t),A$o=r(mye," \u2014 "),sD=n(mye,"A",{href:!0});var Lnt=s(sD);y$o=r(Lnt,"GPTJForQuestionAnswering"),Lnt.forEach(t),L$o=r(mye," (GPT-J model)"),mye.forEach(t),x$o=i(P),N2=n(P,"LI",{});var gye=s(N2);vce=n(gye,"STRONG",{});var xnt=s(vce);k$o=r(xnt,"ibert"),xnt.forEach(t),S$o=r(gye," \u2014 "),lD=n(gye,"A",{href:!0});var knt=s(lD);R$o=r(knt,"IBertForQuestionAnswering"),knt.forEach(t),B$o=r(gye," (I-BERT model)"),gye.forEach(t),P$o=i(P),j2=n(P,"LI",{});var hye=s(j2);Tce=n(hye,"STRONG",{});var Snt=s(Tce);$$o=r(Snt,"layoutlmv2"),Snt.forEach(t),I$o=r(hye," \u2014 "),iD=n(hye,"A",{href:!0});var Rnt=s(iD);q$o=r(Rnt,"LayoutLMv2ForQuestionAnswering"),Rnt.forEach(t),N$o=r(hye," (LayoutLMv2 model)"),hye.forEach(t),j$o=i(P),D2=n(P,"LI",{});var pye=s(D2);Mce=n(pye,"STRONG",{});var Bnt=s(Mce);D$o=r(Bnt,"led"),Bnt.forEach(t),G$o=r(pye," \u2014 "),dD=n(pye,"A",{href:!0});var Pnt=s(dD);O$o=r(Pnt,"LEDForQuestionAnswering"),Pnt.forEach(t),V$o=r(pye," (LED model)"),pye.forEach(t),X$o=i(P),G2=n(P,"LI",{});var _ye=s(G2);Ece=n(_ye,"STRONG",{});var $nt=s(Ece);z$o=r($nt,"longformer"),$nt.forEach(t),Q$o=r(_ye," \u2014 "),cD=n(_ye,"A",{href:!0});var Int=s(cD);W$o=r(Int,"LongformerForQuestionAnswering"),Int.forEach(t),H$o=r(_ye," (Longformer model)"),_ye.forEach(t),U$o=i(P),O2=n(P,"LI",{});var uye=s(O2);Cce=n(uye,"STRONG",{});var qnt=s(Cce);J$o=r(qnt,"lxmert"),qnt.forEach(t),Y$o=r(uye," \u2014 "),fD=n(uye,"A",{href:!0});var Nnt=s(fD);K$o=r(Nnt,"LxmertForQuestionAnswering"),Nnt.forEach(t),Z$o=r(uye," (LXMERT model)"),uye.forEach(t),eIo=i(P),V2=n(P,"LI",{});var bye=s(V2);wce=n(bye,"STRONG",{});var jnt=s(wce);oIo=r(jnt,"mbart"),jnt.forEach(t),rIo=r(bye," \u2014 "),mD=n(bye,"A",{href:!0});var Dnt=s(mD);tIo=r(Dnt,"MBartForQuestionAnswering"),Dnt.forEach(t),aIo=r(bye," (mBART model)"),bye.forEach(t),nIo=i(P),X2=n(P,"LI",{});var Fye=s(X2);Ace=n(Fye,"STRONG",{});var Gnt=s(Ace);sIo=r(Gnt,"megatron-bert"),Gnt.forEach(t),lIo=r(Fye," \u2014 "),gD=n(Fye,"A",{href:!0});var Ont=s(gD);iIo=r(Ont,"MegatronBertForQuestionAnswering"),Ont.forEach(t),dIo=r(Fye," (MegatronBert model)"),Fye.forEach(t),cIo=i(P),z2=n(P,"LI",{});var vye=s(z2);yce=n(vye,"STRONG",{});var Vnt=s(yce);fIo=r(Vnt,"mobilebert"),Vnt.forEach(t),mIo=r(vye," \u2014 "),hD=n(vye,"A",{href:!0});var Xnt=s(hD);gIo=r(Xnt,"MobileBertForQuestionAnswering"),Xnt.forEach(t),hIo=r(vye," (MobileBERT model)"),vye.forEach(t),pIo=i(P),Q2=n(P,"LI",{});var Tye=s(Q2);Lce=n(Tye,"STRONG",{});var znt=s(Lce);_Io=r(znt,"mpnet"),znt.forEach(t),uIo=r(Tye," \u2014 "),pD=n(Tye,"A",{href:!0});var Qnt=s(pD);bIo=r(Qnt,"MPNetForQuestionAnswering"),Qnt.forEach(t),FIo=r(Tye," (MPNet model)"),Tye.forEach(t),vIo=i(P),W2=n(P,"LI",{});var Mye=s(W2);xce=n(Mye,"STRONG",{});var Wnt=s(xce);TIo=r(Wnt,"nystromformer"),Wnt.forEach(t),MIo=r(Mye," \u2014 "),_D=n(Mye,"A",{href:!0});var Hnt=s(_D);EIo=r(Hnt,"NystromformerForQuestionAnswering"),Hnt.forEach(t),CIo=r(Mye," (Nystromformer model)"),Mye.forEach(t),wIo=i(P),H2=n(P,"LI",{});var Eye=s(H2);kce=n(Eye,"STRONG",{});var Unt=s(kce);AIo=r(Unt,"qdqbert"),Unt.forEach(t),yIo=r(Eye," \u2014 "),uD=n(Eye,"A",{href:!0});var Jnt=s(uD);LIo=r(Jnt,"QDQBertForQuestionAnswering"),Jnt.forEach(t),xIo=r(Eye," (QDQBert model)"),Eye.forEach(t),kIo=i(P),U2=n(P,"LI",{});var Cye=s(U2);Sce=n(Cye,"STRONG",{});var Ynt=s(Sce);SIo=r(Ynt,"reformer"),Ynt.forEach(t),RIo=r(Cye," \u2014 "),bD=n(Cye,"A",{href:!0});var Knt=s(bD);BIo=r(Knt,"ReformerForQuestionAnswering"),Knt.forEach(t),PIo=r(Cye," (Reformer model)"),Cye.forEach(t),$Io=i(P),J2=n(P,"LI",{});var wye=s(J2);Rce=n(wye,"STRONG",{});var Znt=s(Rce);IIo=r(Znt,"rembert"),Znt.forEach(t),qIo=r(wye," \u2014 "),FD=n(wye,"A",{href:!0});var est=s(FD);NIo=r(est,"RemBertForQuestionAnswering"),est.forEach(t),jIo=r(wye," (RemBERT model)"),wye.forEach(t),DIo=i(P),Y2=n(P,"LI",{});var Aye=s(Y2);Bce=n(Aye,"STRONG",{});var ost=s(Bce);GIo=r(ost,"roberta"),ost.forEach(t),OIo=r(Aye," \u2014 "),vD=n(Aye,"A",{href:!0});var rst=s(vD);VIo=r(rst,"RobertaForQuestionAnswering"),rst.forEach(t),XIo=r(Aye," (RoBERTa model)"),Aye.forEach(t),zIo=i(P),K2=n(P,"LI",{});var yye=s(K2);Pce=n(yye,"STRONG",{});var tst=s(Pce);QIo=r(tst,"roformer"),tst.forEach(t),WIo=r(yye," \u2014 "),TD=n(yye,"A",{href:!0});var ast=s(TD);HIo=r(ast,"RoFormerForQuestionAnswering"),ast.forEach(t),UIo=r(yye," (RoFormer model)"),yye.forEach(t),JIo=i(P),Z2=n(P,"LI",{});var Lye=s(Z2);$ce=n(Lye,"STRONG",{});var nst=s($ce);YIo=r(nst,"splinter"),nst.forEach(t),KIo=r(Lye," \u2014 "),MD=n(Lye,"A",{href:!0});var sst=s(MD);ZIo=r(sst,"SplinterForQuestionAnswering"),sst.forEach(t),eqo=r(Lye," (Splinter model)"),Lye.forEach(t),oqo=i(P),e6=n(P,"LI",{});var xye=s(e6);Ice=n(xye,"STRONG",{});var lst=s(Ice);rqo=r(lst,"squeezebert"),lst.forEach(t),tqo=r(xye," \u2014 "),ED=n(xye,"A",{href:!0});var ist=s(ED);aqo=r(ist,"SqueezeBertForQuestionAnswering"),ist.forEach(t),nqo=r(xye," (SqueezeBERT model)"),xye.forEach(t),sqo=i(P),o6=n(P,"LI",{});var kye=s(o6);qce=n(kye,"STRONG",{});var dst=s(qce);lqo=r(dst,"xlm"),dst.forEach(t),iqo=r(kye," \u2014 "),CD=n(kye,"A",{href:!0});var cst=s(CD);dqo=r(cst,"XLMForQuestionAnsweringSimple"),cst.forEach(t),cqo=r(kye," (XLM model)"),kye.forEach(t),fqo=i(P),r6=n(P,"LI",{});var Sye=s(r6);Nce=n(Sye,"STRONG",{});var fst=s(Nce);mqo=r(fst,"xlm-roberta"),fst.forEach(t),gqo=r(Sye," \u2014 "),wD=n(Sye,"A",{href:!0});var mst=s(wD);hqo=r(mst,"XLMRobertaForQuestionAnswering"),mst.forEach(t),pqo=r(Sye," (XLM-RoBERTa model)"),Sye.forEach(t),_qo=i(P),t6=n(P,"LI",{});var Rye=s(t6);jce=n(Rye,"STRONG",{});var gst=s(jce);uqo=r(gst,"xlm-roberta-xl"),gst.forEach(t),bqo=r(Rye," \u2014 "),AD=n(Rye,"A",{href:!0});var hst=s(AD);Fqo=r(hst,"XLMRobertaXLForQuestionAnswering"),hst.forEach(t),vqo=r(Rye," (XLM-RoBERTa-XL model)"),Rye.forEach(t),Tqo=i(P),a6=n(P,"LI",{});var Bye=s(a6);Dce=n(Bye,"STRONG",{});var pst=s(Dce);Mqo=r(pst,"xlnet"),pst.forEach(t),Eqo=r(Bye," \u2014 "),yD=n(Bye,"A",{href:!0});var _st=s(yD);Cqo=r(_st,"XLNetForQuestionAnsweringSimple"),_st.forEach(t),wqo=r(Bye," (XLNet model)"),Bye.forEach(t),Aqo=i(P),n6=n(P,"LI",{});var Pye=s(n6);Gce=n(Pye,"STRONG",{});var ust=s(Gce);yqo=r(ust,"yoso"),ust.forEach(t),Lqo=r(Pye," \u2014 "),LD=n(Pye,"A",{href:!0});var bst=s(LD);xqo=r(bst,"YosoForQuestionAnswering"),bst.forEach(t),kqo=r(Pye," (YOSO model)"),Pye.forEach(t),P.forEach(t),Sqo=i(Ut),s6=n(Ut,"P",{});var $ye=s(s6);Rqo=r($ye,"The model is set in evaluation mode by default using "),Oce=n($ye,"CODE",{});var Fst=s(Oce);Bqo=r(Fst,"model.eval()"),Fst.forEach(t),Pqo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=n($ye,"CODE",{});var vst=s(Vce);$qo=r(vst,"model.train()"),vst.forEach(t),$ye.forEach(t),Iqo=i(Ut),Xce=n(Ut,"P",{});var Tst=s(Xce);qqo=r(Tst,"Examples:"),Tst.forEach(t),Nqo=i(Ut),m(bC.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),HRe=i(c),Ad=n(c,"H2",{class:!0});var t$e=s(Ad);l6=n(t$e,"A",{id:!0,class:!0,href:!0});var Mst=s(l6);zce=n(Mst,"SPAN",{});var Est=s(zce);m(FC.$$.fragment,Est),Est.forEach(t),Mst.forEach(t),jqo=i(t$e),Qce=n(t$e,"SPAN",{});var Cst=s(Qce);Dqo=r(Cst,"AutoModelForTableQuestionAnswering"),Cst.forEach(t),t$e.forEach(t),URe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(vC.$$.fragment,gl),Gqo=i(gl),yd=n(gl,"P",{});var SU=s(yd);Oqo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xD=n(SU,"A",{href:!0});var wst=s(xD);Vqo=r(wst,"from_pretrained()"),wst.forEach(t),Xqo=r(SU," class method or the "),kD=n(SU,"A",{href:!0});var Ast=s(kD);zqo=r(Ast,"from_config()"),Ast.forEach(t),Qqo=r(SU,` class
method.`),SU.forEach(t),Wqo=i(gl),TC=n(gl,"P",{});var a$e=s(TC);Hqo=r(a$e,"This class cannot be instantiated directly using "),Wce=n(a$e,"CODE",{});var yst=s(Wce);Uqo=r(yst,"__init__()"),yst.forEach(t),Jqo=r(a$e," (throws an error)."),a$e.forEach(t),Yqo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(MC.$$.fragment,hl),Kqo=i(hl),Hce=n(hl,"P",{});var Lst=s(Hce);Zqo=r(Lst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lst.forEach(t),eNo=i(hl),Ld=n(hl,"P",{});var RU=s(Ld);oNo=r(RU,`Note:
Loading a model from its configuration file does `),Uce=n(RU,"STRONG",{});var xst=s(Uce);rNo=r(xst,"not"),xst.forEach(t),tNo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=n(RU,"A",{href:!0});var kst=s(SD);aNo=r(kst,"from_pretrained()"),kst.forEach(t),nNo=r(RU," to load the model weights."),RU.forEach(t),sNo=i(hl),Jce=n(hl,"P",{});var Sst=s(Jce);lNo=r(Sst,"Examples:"),Sst.forEach(t),iNo=i(hl),m(EC.$$.fragment,hl),hl.forEach(t),dNo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(CC.$$.fragment,Jt),cNo=i(Jt),Yce=n(Jt,"P",{});var Rst=s(Yce);fNo=r(Rst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Rst.forEach(t),mNo=i(Jt),en=n(Jt,"P",{});var qE=s(en);gNo=r(qE,"The model class to instantiate is selected based on the "),Kce=n(qE,"CODE",{});var Bst=s(Kce);hNo=r(Bst,"model_type"),Bst.forEach(t),pNo=r(qE,` property of the config object (either
passed as an argument or loaded from `),Zce=n(qE,"CODE",{});var Pst=s(Zce);_No=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),uNo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=n(qE,"CODE",{});var $st=s(efe);bNo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),FNo=r(qE,":"),qE.forEach(t),vNo=i(Jt),ofe=n(Jt,"UL",{});var Ist=s(ofe);i6=n(Ist,"LI",{});var Iye=s(i6);rfe=n(Iye,"STRONG",{});var qst=s(rfe);TNo=r(qst,"tapas"),qst.forEach(t),MNo=r(Iye," \u2014 "),RD=n(Iye,"A",{href:!0});var Nst=s(RD);ENo=r(Nst,"TapasForQuestionAnswering"),Nst.forEach(t),CNo=r(Iye," (TAPAS model)"),Iye.forEach(t),Ist.forEach(t),wNo=i(Jt),d6=n(Jt,"P",{});var qye=s(d6);ANo=r(qye,"The model is set in evaluation mode by default using "),tfe=n(qye,"CODE",{});var jst=s(tfe);yNo=r(jst,"model.eval()"),jst.forEach(t),LNo=r(qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(qye,"CODE",{});var Dst=s(afe);xNo=r(Dst,"model.train()"),Dst.forEach(t),qye.forEach(t),kNo=i(Jt),nfe=n(Jt,"P",{});var Gst=s(nfe);SNo=r(Gst,"Examples:"),Gst.forEach(t),RNo=i(Jt),m(wC.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),JRe=i(c),xd=n(c,"H2",{class:!0});var n$e=s(xd);c6=n(n$e,"A",{id:!0,class:!0,href:!0});var Ost=s(c6);sfe=n(Ost,"SPAN",{});var Vst=s(sfe);m(AC.$$.fragment,Vst),Vst.forEach(t),Ost.forEach(t),BNo=i(n$e),lfe=n(n$e,"SPAN",{});var Xst=s(lfe);PNo=r(Xst,"AutoModelForImageClassification"),Xst.forEach(t),n$e.forEach(t),YRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(yC.$$.fragment,pl),$No=i(pl),kd=n(pl,"P",{});var BU=s(kd);INo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BD=n(BU,"A",{href:!0});var zst=s(BD);qNo=r(zst,"from_pretrained()"),zst.forEach(t),NNo=r(BU," class method or the "),PD=n(BU,"A",{href:!0});var Qst=s(PD);jNo=r(Qst,"from_config()"),Qst.forEach(t),DNo=r(BU,` class
method.`),BU.forEach(t),GNo=i(pl),LC=n(pl,"P",{});var s$e=s(LC);ONo=r(s$e,"This class cannot be instantiated directly using "),ife=n(s$e,"CODE",{});var Wst=s(ife);VNo=r(Wst,"__init__()"),Wst.forEach(t),XNo=r(s$e," (throws an error)."),s$e.forEach(t),zNo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(xC.$$.fragment,_l),QNo=i(_l),dfe=n(_l,"P",{});var Hst=s(dfe);WNo=r(Hst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hst.forEach(t),HNo=i(_l),Sd=n(_l,"P",{});var PU=s(Sd);UNo=r(PU,`Note:
Loading a model from its configuration file does `),cfe=n(PU,"STRONG",{});var Ust=s(cfe);JNo=r(Ust,"not"),Ust.forEach(t),YNo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$D=n(PU,"A",{href:!0});var Jst=s($D);KNo=r(Jst,"from_pretrained()"),Jst.forEach(t),ZNo=r(PU," to load the model weights."),PU.forEach(t),ejo=i(_l),ffe=n(_l,"P",{});var Yst=s(ffe);ojo=r(Yst,"Examples:"),Yst.forEach(t),rjo=i(_l),m(kC.$$.fragment,_l),_l.forEach(t),tjo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(SC.$$.fragment,Yt),ajo=i(Yt),mfe=n(Yt,"P",{});var Kst=s(mfe);njo=r(Kst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kst.forEach(t),sjo=i(Yt),on=n(Yt,"P",{});var NE=s(on);ljo=r(NE,"The model class to instantiate is selected based on the "),gfe=n(NE,"CODE",{});var Zst=s(gfe);ijo=r(Zst,"model_type"),Zst.forEach(t),djo=r(NE,` property of the config object (either
passed as an argument or loaded from `),hfe=n(NE,"CODE",{});var elt=s(hfe);cjo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),fjo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(NE,"CODE",{});var olt=s(pfe);mjo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),gjo=r(NE,":"),NE.forEach(t),hjo=i(Yt),ce=n(Yt,"UL",{});var he=s(ce);f6=n(he,"LI",{});var Nye=s(f6);_fe=n(Nye,"STRONG",{});var rlt=s(_fe);pjo=r(rlt,"beit"),rlt.forEach(t),_jo=r(Nye," \u2014 "),ID=n(Nye,"A",{href:!0});var tlt=s(ID);ujo=r(tlt,"BeitForImageClassification"),tlt.forEach(t),bjo=r(Nye," (BEiT model)"),Nye.forEach(t),Fjo=i(he),m6=n(he,"LI",{});var jye=s(m6);ufe=n(jye,"STRONG",{});var alt=s(ufe);vjo=r(alt,"convnext"),alt.forEach(t),Tjo=r(jye," \u2014 "),qD=n(jye,"A",{href:!0});var nlt=s(qD);Mjo=r(nlt,"ConvNextForImageClassification"),nlt.forEach(t),Ejo=r(jye," (ConvNext model)"),jye.forEach(t),Cjo=i(he),Ds=n(he,"LI",{});var gx=s(Ds);bfe=n(gx,"STRONG",{});var slt=s(bfe);wjo=r(slt,"deit"),slt.forEach(t),Ajo=r(gx," \u2014 "),ND=n(gx,"A",{href:!0});var llt=s(ND);yjo=r(llt,"DeiTForImageClassification"),llt.forEach(t),Ljo=r(gx," or "),jD=n(gx,"A",{href:!0});var ilt=s(jD);xjo=r(ilt,"DeiTForImageClassificationWithTeacher"),ilt.forEach(t),kjo=r(gx," (DeiT model)"),gx.forEach(t),Sjo=i(he),g6=n(he,"LI",{});var Dye=s(g6);Ffe=n(Dye,"STRONG",{});var dlt=s(Ffe);Rjo=r(dlt,"imagegpt"),dlt.forEach(t),Bjo=r(Dye," \u2014 "),DD=n(Dye,"A",{href:!0});var clt=s(DD);Pjo=r(clt,"ImageGPTForImageClassification"),clt.forEach(t),$jo=r(Dye," (ImageGPT model)"),Dye.forEach(t),Ijo=i(he),ma=n(he,"LI",{});var $f=s(ma);vfe=n($f,"STRONG",{});var flt=s(vfe);qjo=r(flt,"perceiver"),flt.forEach(t),Njo=r($f," \u2014 "),GD=n($f,"A",{href:!0});var mlt=s(GD);jjo=r(mlt,"PerceiverForImageClassificationLearned"),mlt.forEach(t),Djo=r($f," or "),OD=n($f,"A",{href:!0});var glt=s(OD);Gjo=r(glt,"PerceiverForImageClassificationFourier"),glt.forEach(t),Ojo=r($f," or "),VD=n($f,"A",{href:!0});var hlt=s(VD);Vjo=r(hlt,"PerceiverForImageClassificationConvProcessing"),hlt.forEach(t),Xjo=r($f," (Perceiver model)"),$f.forEach(t),zjo=i(he),h6=n(he,"LI",{});var Gye=s(h6);Tfe=n(Gye,"STRONG",{});var plt=s(Tfe);Qjo=r(plt,"poolformer"),plt.forEach(t),Wjo=r(Gye," \u2014 "),XD=n(Gye,"A",{href:!0});var _lt=s(XD);Hjo=r(_lt,"PoolFormerForImageClassification"),_lt.forEach(t),Ujo=r(Gye," (PoolFormer model)"),Gye.forEach(t),Jjo=i(he),p6=n(he,"LI",{});var Oye=s(p6);Mfe=n(Oye,"STRONG",{});var ult=s(Mfe);Yjo=r(ult,"regnet"),ult.forEach(t),Kjo=r(Oye," \u2014 "),zD=n(Oye,"A",{href:!0});var blt=s(zD);Zjo=r(blt,"RegNetForImageClassification"),blt.forEach(t),eDo=r(Oye," (RegNet model)"),Oye.forEach(t),oDo=i(he),_6=n(he,"LI",{});var Vye=s(_6);Efe=n(Vye,"STRONG",{});var Flt=s(Efe);rDo=r(Flt,"resnet"),Flt.forEach(t),tDo=r(Vye," \u2014 "),QD=n(Vye,"A",{href:!0});var vlt=s(QD);aDo=r(vlt,"ResNetForImageClassification"),vlt.forEach(t),nDo=r(Vye," (ResNet model)"),Vye.forEach(t),sDo=i(he),u6=n(he,"LI",{});var Xye=s(u6);Cfe=n(Xye,"STRONG",{});var Tlt=s(Cfe);lDo=r(Tlt,"segformer"),Tlt.forEach(t),iDo=r(Xye," \u2014 "),WD=n(Xye,"A",{href:!0});var Mlt=s(WD);dDo=r(Mlt,"SegformerForImageClassification"),Mlt.forEach(t),cDo=r(Xye," (SegFormer model)"),Xye.forEach(t),fDo=i(he),b6=n(he,"LI",{});var zye=s(b6);wfe=n(zye,"STRONG",{});var Elt=s(wfe);mDo=r(Elt,"swin"),Elt.forEach(t),gDo=r(zye," \u2014 "),HD=n(zye,"A",{href:!0});var Clt=s(HD);hDo=r(Clt,"SwinForImageClassification"),Clt.forEach(t),pDo=r(zye," (Swin model)"),zye.forEach(t),_Do=i(he),F6=n(he,"LI",{});var Qye=s(F6);Afe=n(Qye,"STRONG",{});var wlt=s(Afe);uDo=r(wlt,"van"),wlt.forEach(t),bDo=r(Qye," \u2014 "),UD=n(Qye,"A",{href:!0});var Alt=s(UD);FDo=r(Alt,"VanForImageClassification"),Alt.forEach(t),vDo=r(Qye," (VAN model)"),Qye.forEach(t),TDo=i(he),v6=n(he,"LI",{});var Wye=s(v6);yfe=n(Wye,"STRONG",{});var ylt=s(yfe);MDo=r(ylt,"vit"),ylt.forEach(t),EDo=r(Wye," \u2014 "),JD=n(Wye,"A",{href:!0});var Llt=s(JD);CDo=r(Llt,"ViTForImageClassification"),Llt.forEach(t),wDo=r(Wye," (ViT model)"),Wye.forEach(t),he.forEach(t),ADo=i(Yt),T6=n(Yt,"P",{});var Hye=s(T6);yDo=r(Hye,"The model is set in evaluation mode by default using "),Lfe=n(Hye,"CODE",{});var xlt=s(Lfe);LDo=r(xlt,"model.eval()"),xlt.forEach(t),xDo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(Hye,"CODE",{});var klt=s(xfe);kDo=r(klt,"model.train()"),klt.forEach(t),Hye.forEach(t),SDo=i(Yt),kfe=n(Yt,"P",{});var Slt=s(kfe);RDo=r(Slt,"Examples:"),Slt.forEach(t),BDo=i(Yt),m(RC.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),KRe=i(c),Rd=n(c,"H2",{class:!0});var l$e=s(Rd);M6=n(l$e,"A",{id:!0,class:!0,href:!0});var Rlt=s(M6);Sfe=n(Rlt,"SPAN",{});var Blt=s(Sfe);m(BC.$$.fragment,Blt),Blt.forEach(t),Rlt.forEach(t),PDo=i(l$e),Rfe=n(l$e,"SPAN",{});var Plt=s(Rfe);$Do=r(Plt,"AutoModelForVision2Seq"),Plt.forEach(t),l$e.forEach(t),ZRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(PC.$$.fragment,ul),IDo=i(ul),Bd=n(ul,"P",{});var $U=s(Bd);qDo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YD=n($U,"A",{href:!0});var $lt=s(YD);NDo=r($lt,"from_pretrained()"),$lt.forEach(t),jDo=r($U," class method or the "),KD=n($U,"A",{href:!0});var Ilt=s(KD);DDo=r(Ilt,"from_config()"),Ilt.forEach(t),GDo=r($U,` class
method.`),$U.forEach(t),ODo=i(ul),$C=n(ul,"P",{});var i$e=s($C);VDo=r(i$e,"This class cannot be instantiated directly using "),Bfe=n(i$e,"CODE",{});var qlt=s(Bfe);XDo=r(qlt,"__init__()"),qlt.forEach(t),zDo=r(i$e," (throws an error)."),i$e.forEach(t),QDo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(IC.$$.fragment,bl),WDo=i(bl),Pfe=n(bl,"P",{});var Nlt=s(Pfe);HDo=r(Nlt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Nlt.forEach(t),UDo=i(bl),Pd=n(bl,"P",{});var IU=s(Pd);JDo=r(IU,`Note:
Loading a model from its configuration file does `),$fe=n(IU,"STRONG",{});var jlt=s($fe);YDo=r(jlt,"not"),jlt.forEach(t),KDo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(IU,"A",{href:!0});var Dlt=s(ZD);ZDo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),eGo=r(IU," to load the model weights."),IU.forEach(t),oGo=i(bl),Ife=n(bl,"P",{});var Glt=s(Ife);rGo=r(Glt,"Examples:"),Glt.forEach(t),tGo=i(bl),m(qC.$$.fragment,bl),bl.forEach(t),aGo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(NC.$$.fragment,Kt),nGo=i(Kt),qfe=n(Kt,"P",{});var Olt=s(qfe);sGo=r(Olt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Olt.forEach(t),lGo=i(Kt),rn=n(Kt,"P",{});var jE=s(rn);iGo=r(jE,"The model class to instantiate is selected based on the "),Nfe=n(jE,"CODE",{});var Vlt=s(Nfe);dGo=r(Vlt,"model_type"),Vlt.forEach(t),cGo=r(jE,` property of the config object (either
passed as an argument or loaded from `),jfe=n(jE,"CODE",{});var Xlt=s(jfe);fGo=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),mGo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(jE,"CODE",{});var zlt=s(Dfe);gGo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),hGo=r(jE,":"),jE.forEach(t),pGo=i(Kt),Gfe=n(Kt,"UL",{});var Qlt=s(Gfe);E6=n(Qlt,"LI",{});var Uye=s(E6);Ofe=n(Uye,"STRONG",{});var Wlt=s(Ofe);_Go=r(Wlt,"vision-encoder-decoder"),Wlt.forEach(t),uGo=r(Uye," \u2014 "),eG=n(Uye,"A",{href:!0});var Hlt=s(eG);bGo=r(Hlt,"VisionEncoderDecoderModel"),Hlt.forEach(t),FGo=r(Uye," (Vision Encoder decoder model)"),Uye.forEach(t),Qlt.forEach(t),vGo=i(Kt),C6=n(Kt,"P",{});var Jye=s(C6);TGo=r(Jye,"The model is set in evaluation mode by default using "),Vfe=n(Jye,"CODE",{});var Ult=s(Vfe);MGo=r(Ult,"model.eval()"),Ult.forEach(t),EGo=r(Jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(Jye,"CODE",{});var Jlt=s(Xfe);CGo=r(Jlt,"model.train()"),Jlt.forEach(t),Jye.forEach(t),wGo=i(Kt),zfe=n(Kt,"P",{});var Ylt=s(zfe);AGo=r(Ylt,"Examples:"),Ylt.forEach(t),yGo=i(Kt),m(jC.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),eBe=i(c),$d=n(c,"H2",{class:!0});var d$e=s($d);w6=n(d$e,"A",{id:!0,class:!0,href:!0});var Klt=s(w6);Qfe=n(Klt,"SPAN",{});var Zlt=s(Qfe);m(DC.$$.fragment,Zlt),Zlt.forEach(t),Klt.forEach(t),LGo=i(d$e),Wfe=n(d$e,"SPAN",{});var eit=s(Wfe);xGo=r(eit,"AutoModelForAudioClassification"),eit.forEach(t),d$e.forEach(t),oBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(GC.$$.fragment,Fl),kGo=i(Fl),Id=n(Fl,"P",{});var qU=s(Id);SGo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oG=n(qU,"A",{href:!0});var oit=s(oG);RGo=r(oit,"from_pretrained()"),oit.forEach(t),BGo=r(qU," class method or the "),rG=n(qU,"A",{href:!0});var rit=s(rG);PGo=r(rit,"from_config()"),rit.forEach(t),$Go=r(qU,` class
method.`),qU.forEach(t),IGo=i(Fl),OC=n(Fl,"P",{});var c$e=s(OC);qGo=r(c$e,"This class cannot be instantiated directly using "),Hfe=n(c$e,"CODE",{});var tit=s(Hfe);NGo=r(tit,"__init__()"),tit.forEach(t),jGo=r(c$e," (throws an error)."),c$e.forEach(t),DGo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(VC.$$.fragment,vl),GGo=i(vl),Ufe=n(vl,"P",{});var ait=s(Ufe);OGo=r(ait,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ait.forEach(t),VGo=i(vl),qd=n(vl,"P",{});var NU=s(qd);XGo=r(NU,`Note:
Loading a model from its configuration file does `),Jfe=n(NU,"STRONG",{});var nit=s(Jfe);zGo=r(nit,"not"),nit.forEach(t),QGo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(NU,"A",{href:!0});var sit=s(tG);WGo=r(sit,"from_pretrained()"),sit.forEach(t),HGo=r(NU," to load the model weights."),NU.forEach(t),UGo=i(vl),Yfe=n(vl,"P",{});var lit=s(Yfe);JGo=r(lit,"Examples:"),lit.forEach(t),YGo=i(vl),m(XC.$$.fragment,vl),vl.forEach(t),KGo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(zC.$$.fragment,Zt),ZGo=i(Zt),Kfe=n(Zt,"P",{});var iit=s(Kfe);eOo=r(iit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),iit.forEach(t),oOo=i(Zt),tn=n(Zt,"P",{});var DE=s(tn);rOo=r(DE,"The model class to instantiate is selected based on the "),Zfe=n(DE,"CODE",{});var dit=s(Zfe);tOo=r(dit,"model_type"),dit.forEach(t),aOo=r(DE,` property of the config object (either
passed as an argument or loaded from `),eme=n(DE,"CODE",{});var cit=s(eme);nOo=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),sOo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(DE,"CODE",{});var fit=s(ome);lOo=r(fit,"pretrained_model_name_or_path"),fit.forEach(t),iOo=r(DE,":"),DE.forEach(t),dOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);A6=n(Do,"LI",{});var Yye=s(A6);rme=n(Yye,"STRONG",{});var mit=s(rme);cOo=r(mit,"data2vec-audio"),mit.forEach(t),fOo=r(Yye," \u2014 "),aG=n(Yye,"A",{href:!0});var git=s(aG);mOo=r(git,"Data2VecAudioForSequenceClassification"),git.forEach(t),gOo=r(Yye," (Data2VecAudio model)"),Yye.forEach(t),hOo=i(Do),y6=n(Do,"LI",{});var Kye=s(y6);tme=n(Kye,"STRONG",{});var hit=s(tme);pOo=r(hit,"hubert"),hit.forEach(t),_Oo=r(Kye," \u2014 "),nG=n(Kye,"A",{href:!0});var pit=s(nG);uOo=r(pit,"HubertForSequenceClassification"),pit.forEach(t),bOo=r(Kye," (Hubert model)"),Kye.forEach(t),FOo=i(Do),L6=n(Do,"LI",{});var Zye=s(L6);ame=n(Zye,"STRONG",{});var _it=s(ame);vOo=r(_it,"sew"),_it.forEach(t),TOo=r(Zye," \u2014 "),sG=n(Zye,"A",{href:!0});var uit=s(sG);MOo=r(uit,"SEWForSequenceClassification"),uit.forEach(t),EOo=r(Zye," (SEW model)"),Zye.forEach(t),COo=i(Do),x6=n(Do,"LI",{});var eLe=s(x6);nme=n(eLe,"STRONG",{});var bit=s(nme);wOo=r(bit,"sew-d"),bit.forEach(t),AOo=r(eLe," \u2014 "),lG=n(eLe,"A",{href:!0});var Fit=s(lG);yOo=r(Fit,"SEWDForSequenceClassification"),Fit.forEach(t),LOo=r(eLe," (SEW-D model)"),eLe.forEach(t),xOo=i(Do),k6=n(Do,"LI",{});var oLe=s(k6);sme=n(oLe,"STRONG",{});var vit=s(sme);kOo=r(vit,"unispeech"),vit.forEach(t),SOo=r(oLe," \u2014 "),iG=n(oLe,"A",{href:!0});var Tit=s(iG);ROo=r(Tit,"UniSpeechForSequenceClassification"),Tit.forEach(t),BOo=r(oLe," (UniSpeech model)"),oLe.forEach(t),POo=i(Do),S6=n(Do,"LI",{});var rLe=s(S6);lme=n(rLe,"STRONG",{});var Mit=s(lme);$Oo=r(Mit,"unispeech-sat"),Mit.forEach(t),IOo=r(rLe," \u2014 "),dG=n(rLe,"A",{href:!0});var Eit=s(dG);qOo=r(Eit,"UniSpeechSatForSequenceClassification"),Eit.forEach(t),NOo=r(rLe," (UniSpeechSat model)"),rLe.forEach(t),jOo=i(Do),R6=n(Do,"LI",{});var tLe=s(R6);ime=n(tLe,"STRONG",{});var Cit=s(ime);DOo=r(Cit,"wav2vec2"),Cit.forEach(t),GOo=r(tLe," \u2014 "),cG=n(tLe,"A",{href:!0});var wit=s(cG);OOo=r(wit,"Wav2Vec2ForSequenceClassification"),wit.forEach(t),VOo=r(tLe," (Wav2Vec2 model)"),tLe.forEach(t),XOo=i(Do),B6=n(Do,"LI",{});var aLe=s(B6);dme=n(aLe,"STRONG",{});var Ait=s(dme);zOo=r(Ait,"wavlm"),Ait.forEach(t),QOo=r(aLe," \u2014 "),fG=n(aLe,"A",{href:!0});var yit=s(fG);WOo=r(yit,"WavLMForSequenceClassification"),yit.forEach(t),HOo=r(aLe," (WavLM model)"),aLe.forEach(t),Do.forEach(t),UOo=i(Zt),P6=n(Zt,"P",{});var nLe=s(P6);JOo=r(nLe,"The model is set in evaluation mode by default using "),cme=n(nLe,"CODE",{});var Lit=s(cme);YOo=r(Lit,"model.eval()"),Lit.forEach(t),KOo=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(nLe,"CODE",{});var xit=s(fme);ZOo=r(xit,"model.train()"),xit.forEach(t),nLe.forEach(t),eVo=i(Zt),mme=n(Zt,"P",{});var kit=s(mme);oVo=r(kit,"Examples:"),kit.forEach(t),rVo=i(Zt),m(QC.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),rBe=i(c),Nd=n(c,"H2",{class:!0});var f$e=s(Nd);$6=n(f$e,"A",{id:!0,class:!0,href:!0});var Sit=s($6);gme=n(Sit,"SPAN",{});var Rit=s(gme);m(WC.$$.fragment,Rit),Rit.forEach(t),Sit.forEach(t),tVo=i(f$e),hme=n(f$e,"SPAN",{});var Bit=s(hme);aVo=r(Bit,"AutoModelForAudioFrameClassification"),Bit.forEach(t),f$e.forEach(t),tBe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(HC.$$.fragment,Tl),nVo=i(Tl),jd=n(Tl,"P",{});var jU=s(jd);sVo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mG=n(jU,"A",{href:!0});var Pit=s(mG);lVo=r(Pit,"from_pretrained()"),Pit.forEach(t),iVo=r(jU," class method or the "),gG=n(jU,"A",{href:!0});var $it=s(gG);dVo=r($it,"from_config()"),$it.forEach(t),cVo=r(jU,` class
method.`),jU.forEach(t),fVo=i(Tl),UC=n(Tl,"P",{});var m$e=s(UC);mVo=r(m$e,"This class cannot be instantiated directly using "),pme=n(m$e,"CODE",{});var Iit=s(pme);gVo=r(Iit,"__init__()"),Iit.forEach(t),hVo=r(m$e," (throws an error)."),m$e.forEach(t),pVo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(JC.$$.fragment,Ml),_Vo=i(Ml),_me=n(Ml,"P",{});var qit=s(_me);uVo=r(qit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qit.forEach(t),bVo=i(Ml),Dd=n(Ml,"P",{});var DU=s(Dd);FVo=r(DU,`Note:
Loading a model from its configuration file does `),ume=n(DU,"STRONG",{});var Nit=s(ume);vVo=r(Nit,"not"),Nit.forEach(t),TVo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hG=n(DU,"A",{href:!0});var jit=s(hG);MVo=r(jit,"from_pretrained()"),jit.forEach(t),EVo=r(DU," to load the model weights."),DU.forEach(t),CVo=i(Ml),bme=n(Ml,"P",{});var Dit=s(bme);wVo=r(Dit,"Examples:"),Dit.forEach(t),AVo=i(Ml),m(YC.$$.fragment,Ml),Ml.forEach(t),yVo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(KC.$$.fragment,ea),LVo=i(ea),Fme=n(ea,"P",{});var Git=s(Fme);xVo=r(Git,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Git.forEach(t),kVo=i(ea),an=n(ea,"P",{});var GE=s(an);SVo=r(GE,"The model class to instantiate is selected based on the "),vme=n(GE,"CODE",{});var Oit=s(vme);RVo=r(Oit,"model_type"),Oit.forEach(t),BVo=r(GE,` property of the config object (either
passed as an argument or loaded from `),Tme=n(GE,"CODE",{});var Vit=s(Tme);PVo=r(Vit,"pretrained_model_name_or_path"),Vit.forEach(t),$Vo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(GE,"CODE",{});var Xit=s(Mme);IVo=r(Xit,"pretrained_model_name_or_path"),Xit.forEach(t),qVo=r(GE,":"),GE.forEach(t),NVo=i(ea),nn=n(ea,"UL",{});var OE=s(nn);I6=n(OE,"LI",{});var sLe=s(I6);Eme=n(sLe,"STRONG",{});var zit=s(Eme);jVo=r(zit,"data2vec-audio"),zit.forEach(t),DVo=r(sLe," \u2014 "),pG=n(sLe,"A",{href:!0});var Qit=s(pG);GVo=r(Qit,"Data2VecAudioForAudioFrameClassification"),Qit.forEach(t),OVo=r(sLe," (Data2VecAudio model)"),sLe.forEach(t),VVo=i(OE),q6=n(OE,"LI",{});var lLe=s(q6);Cme=n(lLe,"STRONG",{});var Wit=s(Cme);XVo=r(Wit,"unispeech-sat"),Wit.forEach(t),zVo=r(lLe," \u2014 "),_G=n(lLe,"A",{href:!0});var Hit=s(_G);QVo=r(Hit,"UniSpeechSatForAudioFrameClassification"),Hit.forEach(t),WVo=r(lLe," (UniSpeechSat model)"),lLe.forEach(t),HVo=i(OE),N6=n(OE,"LI",{});var iLe=s(N6);wme=n(iLe,"STRONG",{});var Uit=s(wme);UVo=r(Uit,"wav2vec2"),Uit.forEach(t),JVo=r(iLe," \u2014 "),uG=n(iLe,"A",{href:!0});var Jit=s(uG);YVo=r(Jit,"Wav2Vec2ForAudioFrameClassification"),Jit.forEach(t),KVo=r(iLe," (Wav2Vec2 model)"),iLe.forEach(t),ZVo=i(OE),j6=n(OE,"LI",{});var dLe=s(j6);Ame=n(dLe,"STRONG",{});var Yit=s(Ame);eXo=r(Yit,"wavlm"),Yit.forEach(t),oXo=r(dLe," \u2014 "),bG=n(dLe,"A",{href:!0});var Kit=s(bG);rXo=r(Kit,"WavLMForAudioFrameClassification"),Kit.forEach(t),tXo=r(dLe," (WavLM model)"),dLe.forEach(t),OE.forEach(t),aXo=i(ea),D6=n(ea,"P",{});var cLe=s(D6);nXo=r(cLe,"The model is set in evaluation mode by default using "),yme=n(cLe,"CODE",{});var Zit=s(yme);sXo=r(Zit,"model.eval()"),Zit.forEach(t),lXo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(cLe,"CODE",{});var edt=s(Lme);iXo=r(edt,"model.train()"),edt.forEach(t),cLe.forEach(t),dXo=i(ea),xme=n(ea,"P",{});var odt=s(xme);cXo=r(odt,"Examples:"),odt.forEach(t),fXo=i(ea),m(ZC.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),aBe=i(c),Gd=n(c,"H2",{class:!0});var g$e=s(Gd);G6=n(g$e,"A",{id:!0,class:!0,href:!0});var rdt=s(G6);kme=n(rdt,"SPAN",{});var tdt=s(kme);m(ew.$$.fragment,tdt),tdt.forEach(t),rdt.forEach(t),mXo=i(g$e),Sme=n(g$e,"SPAN",{});var adt=s(Sme);gXo=r(adt,"AutoModelForCTC"),adt.forEach(t),g$e.forEach(t),nBe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(ow.$$.fragment,El),hXo=i(El),Od=n(El,"P",{});var GU=s(Od);pXo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FG=n(GU,"A",{href:!0});var ndt=s(FG);_Xo=r(ndt,"from_pretrained()"),ndt.forEach(t),uXo=r(GU," class method or the "),vG=n(GU,"A",{href:!0});var sdt=s(vG);bXo=r(sdt,"from_config()"),sdt.forEach(t),FXo=r(GU,` class
method.`),GU.forEach(t),vXo=i(El),rw=n(El,"P",{});var h$e=s(rw);TXo=r(h$e,"This class cannot be instantiated directly using "),Rme=n(h$e,"CODE",{});var ldt=s(Rme);MXo=r(ldt,"__init__()"),ldt.forEach(t),EXo=r(h$e," (throws an error)."),h$e.forEach(t),CXo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(tw.$$.fragment,Cl),wXo=i(Cl),Bme=n(Cl,"P",{});var idt=s(Bme);AXo=r(idt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),idt.forEach(t),yXo=i(Cl),Vd=n(Cl,"P",{});var OU=s(Vd);LXo=r(OU,`Note:
Loading a model from its configuration file does `),Pme=n(OU,"STRONG",{});var ddt=s(Pme);xXo=r(ddt,"not"),ddt.forEach(t),kXo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(OU,"A",{href:!0});var cdt=s(TG);SXo=r(cdt,"from_pretrained()"),cdt.forEach(t),RXo=r(OU," to load the model weights."),OU.forEach(t),BXo=i(Cl),$me=n(Cl,"P",{});var fdt=s($me);PXo=r(fdt,"Examples:"),fdt.forEach(t),$Xo=i(Cl),m(aw.$$.fragment,Cl),Cl.forEach(t),IXo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(nw.$$.fragment,oa),qXo=i(oa),Ime=n(oa,"P",{});var mdt=s(Ime);NXo=r(mdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mdt.forEach(t),jXo=i(oa),sn=n(oa,"P",{});var VE=s(sn);DXo=r(VE,"The model class to instantiate is selected based on the "),qme=n(VE,"CODE",{});var gdt=s(qme);GXo=r(gdt,"model_type"),gdt.forEach(t),OXo=r(VE,` property of the config object (either
passed as an argument or loaded from `),Nme=n(VE,"CODE",{});var hdt=s(Nme);VXo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),XXo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=n(VE,"CODE",{});var pdt=s(jme);zXo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),QXo=r(VE,":"),VE.forEach(t),WXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);O6=n(Go,"LI",{});var fLe=s(O6);Dme=n(fLe,"STRONG",{});var _dt=s(Dme);HXo=r(_dt,"data2vec-audio"),_dt.forEach(t),UXo=r(fLe," \u2014 "),MG=n(fLe,"A",{href:!0});var udt=s(MG);JXo=r(udt,"Data2VecAudioForCTC"),udt.forEach(t),YXo=r(fLe," (Data2VecAudio model)"),fLe.forEach(t),KXo=i(Go),V6=n(Go,"LI",{});var mLe=s(V6);Gme=n(mLe,"STRONG",{});var bdt=s(Gme);ZXo=r(bdt,"hubert"),bdt.forEach(t),ezo=r(mLe," \u2014 "),EG=n(mLe,"A",{href:!0});var Fdt=s(EG);ozo=r(Fdt,"HubertForCTC"),Fdt.forEach(t),rzo=r(mLe," (Hubert model)"),mLe.forEach(t),tzo=i(Go),X6=n(Go,"LI",{});var gLe=s(X6);Ome=n(gLe,"STRONG",{});var vdt=s(Ome);azo=r(vdt,"sew"),vdt.forEach(t),nzo=r(gLe," \u2014 "),CG=n(gLe,"A",{href:!0});var Tdt=s(CG);szo=r(Tdt,"SEWForCTC"),Tdt.forEach(t),lzo=r(gLe," (SEW model)"),gLe.forEach(t),izo=i(Go),z6=n(Go,"LI",{});var hLe=s(z6);Vme=n(hLe,"STRONG",{});var Mdt=s(Vme);dzo=r(Mdt,"sew-d"),Mdt.forEach(t),czo=r(hLe," \u2014 "),wG=n(hLe,"A",{href:!0});var Edt=s(wG);fzo=r(Edt,"SEWDForCTC"),Edt.forEach(t),mzo=r(hLe," (SEW-D model)"),hLe.forEach(t),gzo=i(Go),Q6=n(Go,"LI",{});var pLe=s(Q6);Xme=n(pLe,"STRONG",{});var Cdt=s(Xme);hzo=r(Cdt,"unispeech"),Cdt.forEach(t),pzo=r(pLe," \u2014 "),AG=n(pLe,"A",{href:!0});var wdt=s(AG);_zo=r(wdt,"UniSpeechForCTC"),wdt.forEach(t),uzo=r(pLe," (UniSpeech model)"),pLe.forEach(t),bzo=i(Go),W6=n(Go,"LI",{});var _Le=s(W6);zme=n(_Le,"STRONG",{});var Adt=s(zme);Fzo=r(Adt,"unispeech-sat"),Adt.forEach(t),vzo=r(_Le," \u2014 "),yG=n(_Le,"A",{href:!0});var ydt=s(yG);Tzo=r(ydt,"UniSpeechSatForCTC"),ydt.forEach(t),Mzo=r(_Le," (UniSpeechSat model)"),_Le.forEach(t),Ezo=i(Go),H6=n(Go,"LI",{});var uLe=s(H6);Qme=n(uLe,"STRONG",{});var Ldt=s(Qme);Czo=r(Ldt,"wav2vec2"),Ldt.forEach(t),wzo=r(uLe," \u2014 "),LG=n(uLe,"A",{href:!0});var xdt=s(LG);Azo=r(xdt,"Wav2Vec2ForCTC"),xdt.forEach(t),yzo=r(uLe," (Wav2Vec2 model)"),uLe.forEach(t),Lzo=i(Go),U6=n(Go,"LI",{});var bLe=s(U6);Wme=n(bLe,"STRONG",{});var kdt=s(Wme);xzo=r(kdt,"wavlm"),kdt.forEach(t),kzo=r(bLe," \u2014 "),xG=n(bLe,"A",{href:!0});var Sdt=s(xG);Szo=r(Sdt,"WavLMForCTC"),Sdt.forEach(t),Rzo=r(bLe," (WavLM model)"),bLe.forEach(t),Go.forEach(t),Bzo=i(oa),J6=n(oa,"P",{});var FLe=s(J6);Pzo=r(FLe,"The model is set in evaluation mode by default using "),Hme=n(FLe,"CODE",{});var Rdt=s(Hme);$zo=r(Rdt,"model.eval()"),Rdt.forEach(t),Izo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(FLe,"CODE",{});var Bdt=s(Ume);qzo=r(Bdt,"model.train()"),Bdt.forEach(t),FLe.forEach(t),Nzo=i(oa),Jme=n(oa,"P",{});var Pdt=s(Jme);jzo=r(Pdt,"Examples:"),Pdt.forEach(t),Dzo=i(oa),m(sw.$$.fragment,oa),oa.forEach(t),El.forEach(t),sBe=i(c),Xd=n(c,"H2",{class:!0});var p$e=s(Xd);Y6=n(p$e,"A",{id:!0,class:!0,href:!0});var $dt=s(Y6);Yme=n($dt,"SPAN",{});var Idt=s(Yme);m(lw.$$.fragment,Idt),Idt.forEach(t),$dt.forEach(t),Gzo=i(p$e),Kme=n(p$e,"SPAN",{});var qdt=s(Kme);Ozo=r(qdt,"AutoModelForSpeechSeq2Seq"),qdt.forEach(t),p$e.forEach(t),lBe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(iw.$$.fragment,wl),Vzo=i(wl),zd=n(wl,"P",{});var VU=s(zd);Xzo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kG=n(VU,"A",{href:!0});var Ndt=s(kG);zzo=r(Ndt,"from_pretrained()"),Ndt.forEach(t),Qzo=r(VU," class method or the "),SG=n(VU,"A",{href:!0});var jdt=s(SG);Wzo=r(jdt,"from_config()"),jdt.forEach(t),Hzo=r(VU,` class
method.`),VU.forEach(t),Uzo=i(wl),dw=n(wl,"P",{});var _$e=s(dw);Jzo=r(_$e,"This class cannot be instantiated directly using "),Zme=n(_$e,"CODE",{});var Ddt=s(Zme);Yzo=r(Ddt,"__init__()"),Ddt.forEach(t),Kzo=r(_$e," (throws an error)."),_$e.forEach(t),Zzo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(cw.$$.fragment,Al),eQo=i(Al),ege=n(Al,"P",{});var Gdt=s(ege);oQo=r(Gdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gdt.forEach(t),rQo=i(Al),Qd=n(Al,"P",{});var XU=s(Qd);tQo=r(XU,`Note:
Loading a model from its configuration file does `),oge=n(XU,"STRONG",{});var Odt=s(oge);aQo=r(Odt,"not"),Odt.forEach(t),nQo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=n(XU,"A",{href:!0});var Vdt=s(RG);sQo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),lQo=r(XU," to load the model weights."),XU.forEach(t),iQo=i(Al),rge=n(Al,"P",{});var Xdt=s(rge);dQo=r(Xdt,"Examples:"),Xdt.forEach(t),cQo=i(Al),m(fw.$$.fragment,Al),Al.forEach(t),fQo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(mw.$$.fragment,ra),mQo=i(ra),tge=n(ra,"P",{});var zdt=s(tge);gQo=r(zdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zdt.forEach(t),hQo=i(ra),ln=n(ra,"P",{});var XE=s(ln);pQo=r(XE,"The model class to instantiate is selected based on the "),age=n(XE,"CODE",{});var Qdt=s(age);_Qo=r(Qdt,"model_type"),Qdt.forEach(t),uQo=r(XE,` property of the config object (either
passed as an argument or loaded from `),nge=n(XE,"CODE",{});var Wdt=s(nge);bQo=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),FQo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=n(XE,"CODE",{});var Hdt=s(sge);vQo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),TQo=r(XE,":"),XE.forEach(t),MQo=i(ra),gw=n(ra,"UL",{});var u$e=s(gw);K6=n(u$e,"LI",{});var vLe=s(K6);lge=n(vLe,"STRONG",{});var Udt=s(lge);EQo=r(Udt,"speech-encoder-decoder"),Udt.forEach(t),CQo=r(vLe," \u2014 "),BG=n(vLe,"A",{href:!0});var Jdt=s(BG);wQo=r(Jdt,"SpeechEncoderDecoderModel"),Jdt.forEach(t),AQo=r(vLe," (Speech Encoder decoder model)"),vLe.forEach(t),yQo=i(u$e),Z6=n(u$e,"LI",{});var TLe=s(Z6);ige=n(TLe,"STRONG",{});var Ydt=s(ige);LQo=r(Ydt,"speech_to_text"),Ydt.forEach(t),xQo=r(TLe," \u2014 "),PG=n(TLe,"A",{href:!0});var Kdt=s(PG);kQo=r(Kdt,"Speech2TextForConditionalGeneration"),Kdt.forEach(t),SQo=r(TLe," (Speech2Text model)"),TLe.forEach(t),u$e.forEach(t),RQo=i(ra),eF=n(ra,"P",{});var MLe=s(eF);BQo=r(MLe,"The model is set in evaluation mode by default using "),dge=n(MLe,"CODE",{});var Zdt=s(dge);PQo=r(Zdt,"model.eval()"),Zdt.forEach(t),$Qo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=n(MLe,"CODE",{});var ect=s(cge);IQo=r(ect,"model.train()"),ect.forEach(t),MLe.forEach(t),qQo=i(ra),fge=n(ra,"P",{});var oct=s(fge);NQo=r(oct,"Examples:"),oct.forEach(t),jQo=i(ra),m(hw.$$.fragment,ra),ra.forEach(t),wl.forEach(t),iBe=i(c),Wd=n(c,"H2",{class:!0});var b$e=s(Wd);oF=n(b$e,"A",{id:!0,class:!0,href:!0});var rct=s(oF);mge=n(rct,"SPAN",{});var tct=s(mge);m(pw.$$.fragment,tct),tct.forEach(t),rct.forEach(t),DQo=i(b$e),gge=n(b$e,"SPAN",{});var act=s(gge);GQo=r(act,"AutoModelForAudioXVector"),act.forEach(t),b$e.forEach(t),dBe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(_w.$$.fragment,yl),OQo=i(yl),Hd=n(yl,"P",{});var zU=s(Hd);VQo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$G=n(zU,"A",{href:!0});var nct=s($G);XQo=r(nct,"from_pretrained()"),nct.forEach(t),zQo=r(zU," class method or the "),IG=n(zU,"A",{href:!0});var sct=s(IG);QQo=r(sct,"from_config()"),sct.forEach(t),WQo=r(zU,` class
method.`),zU.forEach(t),HQo=i(yl),uw=n(yl,"P",{});var F$e=s(uw);UQo=r(F$e,"This class cannot be instantiated directly using "),hge=n(F$e,"CODE",{});var lct=s(hge);JQo=r(lct,"__init__()"),lct.forEach(t),YQo=r(F$e," (throws an error)."),F$e.forEach(t),KQo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(bw.$$.fragment,Ll),ZQo=i(Ll),pge=n(Ll,"P",{});var ict=s(pge);eWo=r(ict,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ict.forEach(t),oWo=i(Ll),Ud=n(Ll,"P",{});var QU=s(Ud);rWo=r(QU,`Note:
Loading a model from its configuration file does `),_ge=n(QU,"STRONG",{});var dct=s(_ge);tWo=r(dct,"not"),dct.forEach(t),aWo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(QU,"A",{href:!0});var cct=s(qG);nWo=r(cct,"from_pretrained()"),cct.forEach(t),sWo=r(QU," to load the model weights."),QU.forEach(t),lWo=i(Ll),uge=n(Ll,"P",{});var fct=s(uge);iWo=r(fct,"Examples:"),fct.forEach(t),dWo=i(Ll),m(Fw.$$.fragment,Ll),Ll.forEach(t),cWo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(vw.$$.fragment,ta),fWo=i(ta),bge=n(ta,"P",{});var mct=s(bge);mWo=r(mct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mct.forEach(t),gWo=i(ta),dn=n(ta,"P",{});var zE=s(dn);hWo=r(zE,"The model class to instantiate is selected based on the "),Fge=n(zE,"CODE",{});var gct=s(Fge);pWo=r(gct,"model_type"),gct.forEach(t),_Wo=r(zE,` property of the config object (either
passed as an argument or loaded from `),vge=n(zE,"CODE",{});var hct=s(vge);uWo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),bWo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=n(zE,"CODE",{});var pct=s(Tge);FWo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),vWo=r(zE,":"),zE.forEach(t),TWo=i(ta),cn=n(ta,"UL",{});var QE=s(cn);rF=n(QE,"LI",{});var ELe=s(rF);Mge=n(ELe,"STRONG",{});var _ct=s(Mge);MWo=r(_ct,"data2vec-audio"),_ct.forEach(t),EWo=r(ELe," \u2014 "),NG=n(ELe,"A",{href:!0});var uct=s(NG);CWo=r(uct,"Data2VecAudioForXVector"),uct.forEach(t),wWo=r(ELe," (Data2VecAudio model)"),ELe.forEach(t),AWo=i(QE),tF=n(QE,"LI",{});var CLe=s(tF);Ege=n(CLe,"STRONG",{});var bct=s(Ege);yWo=r(bct,"unispeech-sat"),bct.forEach(t),LWo=r(CLe," \u2014 "),jG=n(CLe,"A",{href:!0});var Fct=s(jG);xWo=r(Fct,"UniSpeechSatForXVector"),Fct.forEach(t),kWo=r(CLe," (UniSpeechSat model)"),CLe.forEach(t),SWo=i(QE),aF=n(QE,"LI",{});var wLe=s(aF);Cge=n(wLe,"STRONG",{});var vct=s(Cge);RWo=r(vct,"wav2vec2"),vct.forEach(t),BWo=r(wLe," \u2014 "),DG=n(wLe,"A",{href:!0});var Tct=s(DG);PWo=r(Tct,"Wav2Vec2ForXVector"),Tct.forEach(t),$Wo=r(wLe," (Wav2Vec2 model)"),wLe.forEach(t),IWo=i(QE),nF=n(QE,"LI",{});var ALe=s(nF);wge=n(ALe,"STRONG",{});var Mct=s(wge);qWo=r(Mct,"wavlm"),Mct.forEach(t),NWo=r(ALe," \u2014 "),GG=n(ALe,"A",{href:!0});var Ect=s(GG);jWo=r(Ect,"WavLMForXVector"),Ect.forEach(t),DWo=r(ALe," (WavLM model)"),ALe.forEach(t),QE.forEach(t),GWo=i(ta),sF=n(ta,"P",{});var yLe=s(sF);OWo=r(yLe,"The model is set in evaluation mode by default using "),Age=n(yLe,"CODE",{});var Cct=s(Age);VWo=r(Cct,"model.eval()"),Cct.forEach(t),XWo=r(yLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=n(yLe,"CODE",{});var wct=s(yge);zWo=r(wct,"model.train()"),wct.forEach(t),yLe.forEach(t),QWo=i(ta),Lge=n(ta,"P",{});var Act=s(Lge);WWo=r(Act,"Examples:"),Act.forEach(t),HWo=i(ta),m(Tw.$$.fragment,ta),ta.forEach(t),yl.forEach(t),cBe=i(c),Jd=n(c,"H2",{class:!0});var v$e=s(Jd);lF=n(v$e,"A",{id:!0,class:!0,href:!0});var yct=s(lF);xge=n(yct,"SPAN",{});var Lct=s(xge);m(Mw.$$.fragment,Lct),Lct.forEach(t),yct.forEach(t),UWo=i(v$e),kge=n(v$e,"SPAN",{});var xct=s(kge);JWo=r(xct,"AutoModelForMaskedImageModeling"),xct.forEach(t),v$e.forEach(t),fBe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(Ew.$$.fragment,xl),YWo=i(xl),Yd=n(xl,"P",{});var WU=s(Yd);KWo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OG=n(WU,"A",{href:!0});var kct=s(OG);ZWo=r(kct,"from_pretrained()"),kct.forEach(t),eHo=r(WU," class method or the "),VG=n(WU,"A",{href:!0});var Sct=s(VG);oHo=r(Sct,"from_config()"),Sct.forEach(t),rHo=r(WU,` class
method.`),WU.forEach(t),tHo=i(xl),Cw=n(xl,"P",{});var T$e=s(Cw);aHo=r(T$e,"This class cannot be instantiated directly using "),Sge=n(T$e,"CODE",{});var Rct=s(Sge);nHo=r(Rct,"__init__()"),Rct.forEach(t),sHo=r(T$e," (throws an error)."),T$e.forEach(t),lHo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(ww.$$.fragment,kl),iHo=i(kl),Rge=n(kl,"P",{});var Bct=s(Rge);dHo=r(Bct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Bct.forEach(t),cHo=i(kl),Kd=n(kl,"P",{});var HU=s(Kd);fHo=r(HU,`Note:
Loading a model from its configuration file does `),Bge=n(HU,"STRONG",{});var Pct=s(Bge);mHo=r(Pct,"not"),Pct.forEach(t),gHo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(HU,"A",{href:!0});var $ct=s(XG);hHo=r($ct,"from_pretrained()"),$ct.forEach(t),pHo=r(HU," to load the model weights."),HU.forEach(t),_Ho=i(kl),Pge=n(kl,"P",{});var Ict=s(Pge);uHo=r(Ict,"Examples:"),Ict.forEach(t),bHo=i(kl),m(Aw.$$.fragment,kl),kl.forEach(t),FHo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(yw.$$.fragment,aa),vHo=i(aa),$ge=n(aa,"P",{});var qct=s($ge);THo=r(qct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qct.forEach(t),MHo=i(aa),fn=n(aa,"P",{});var WE=s(fn);EHo=r(WE,"The model class to instantiate is selected based on the "),Ige=n(WE,"CODE",{});var Nct=s(Ige);CHo=r(Nct,"model_type"),Nct.forEach(t),wHo=r(WE,` property of the config object (either
passed as an argument or loaded from `),qge=n(WE,"CODE",{});var jct=s(qge);AHo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),yHo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=n(WE,"CODE",{});var Dct=s(Nge);LHo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),xHo=r(WE,":"),WE.forEach(t),kHo=i(aa),Zd=n(aa,"UL",{});var UU=s(Zd);iF=n(UU,"LI",{});var LLe=s(iF);jge=n(LLe,"STRONG",{});var Gct=s(jge);SHo=r(Gct,"deit"),Gct.forEach(t),RHo=r(LLe," \u2014 "),zG=n(LLe,"A",{href:!0});var Oct=s(zG);BHo=r(Oct,"DeiTForMaskedImageModeling"),Oct.forEach(t),PHo=r(LLe," (DeiT model)"),LLe.forEach(t),$Ho=i(UU),dF=n(UU,"LI",{});var xLe=s(dF);Dge=n(xLe,"STRONG",{});var Vct=s(Dge);IHo=r(Vct,"swin"),Vct.forEach(t),qHo=r(xLe," \u2014 "),QG=n(xLe,"A",{href:!0});var Xct=s(QG);NHo=r(Xct,"SwinForMaskedImageModeling"),Xct.forEach(t),jHo=r(xLe," (Swin model)"),xLe.forEach(t),DHo=i(UU),cF=n(UU,"LI",{});var kLe=s(cF);Gge=n(kLe,"STRONG",{});var zct=s(Gge);GHo=r(zct,"vit"),zct.forEach(t),OHo=r(kLe," \u2014 "),WG=n(kLe,"A",{href:!0});var Qct=s(WG);VHo=r(Qct,"ViTForMaskedImageModeling"),Qct.forEach(t),XHo=r(kLe," (ViT model)"),kLe.forEach(t),UU.forEach(t),zHo=i(aa),fF=n(aa,"P",{});var SLe=s(fF);QHo=r(SLe,"The model is set in evaluation mode by default using "),Oge=n(SLe,"CODE",{});var Wct=s(Oge);WHo=r(Wct,"model.eval()"),Wct.forEach(t),HHo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(SLe,"CODE",{});var Hct=s(Vge);UHo=r(Hct,"model.train()"),Hct.forEach(t),SLe.forEach(t),JHo=i(aa),Xge=n(aa,"P",{});var Uct=s(Xge);YHo=r(Uct,"Examples:"),Uct.forEach(t),KHo=i(aa),m(Lw.$$.fragment,aa),aa.forEach(t),xl.forEach(t),mBe=i(c),ec=n(c,"H2",{class:!0});var M$e=s(ec);mF=n(M$e,"A",{id:!0,class:!0,href:!0});var Jct=s(mF);zge=n(Jct,"SPAN",{});var Yct=s(zge);m(xw.$$.fragment,Yct),Yct.forEach(t),Jct.forEach(t),ZHo=i(M$e),Qge=n(M$e,"SPAN",{});var Kct=s(Qge);eUo=r(Kct,"AutoModelForObjectDetection"),Kct.forEach(t),M$e.forEach(t),gBe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(kw.$$.fragment,Sl),oUo=i(Sl),oc=n(Sl,"P",{});var JU=s(oc);rUo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HG=n(JU,"A",{href:!0});var Zct=s(HG);tUo=r(Zct,"from_pretrained()"),Zct.forEach(t),aUo=r(JU," class method or the "),UG=n(JU,"A",{href:!0});var eft=s(UG);nUo=r(eft,"from_config()"),eft.forEach(t),sUo=r(JU,` class
method.`),JU.forEach(t),lUo=i(Sl),Sw=n(Sl,"P",{});var E$e=s(Sw);iUo=r(E$e,"This class cannot be instantiated directly using "),Wge=n(E$e,"CODE",{});var oft=s(Wge);dUo=r(oft,"__init__()"),oft.forEach(t),cUo=r(E$e," (throws an error)."),E$e.forEach(t),fUo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(Rw.$$.fragment,Rl),mUo=i(Rl),Hge=n(Rl,"P",{});var rft=s(Hge);gUo=r(rft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rft.forEach(t),hUo=i(Rl),rc=n(Rl,"P",{});var YU=s(rc);pUo=r(YU,`Note:
Loading a model from its configuration file does `),Uge=n(YU,"STRONG",{});var tft=s(Uge);_Uo=r(tft,"not"),tft.forEach(t),uUo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(YU,"A",{href:!0});var aft=s(JG);bUo=r(aft,"from_pretrained()"),aft.forEach(t),FUo=r(YU," to load the model weights."),YU.forEach(t),vUo=i(Rl),Jge=n(Rl,"P",{});var nft=s(Jge);TUo=r(nft,"Examples:"),nft.forEach(t),MUo=i(Rl),m(Bw.$$.fragment,Rl),Rl.forEach(t),EUo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(Pw.$$.fragment,na),CUo=i(na),Yge=n(na,"P",{});var sft=s(Yge);wUo=r(sft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sft.forEach(t),AUo=i(na),mn=n(na,"P",{});var HE=s(mn);yUo=r(HE,"The model class to instantiate is selected based on the "),Kge=n(HE,"CODE",{});var lft=s(Kge);LUo=r(lft,"model_type"),lft.forEach(t),xUo=r(HE,` property of the config object (either
passed as an argument or loaded from `),Zge=n(HE,"CODE",{});var ift=s(Zge);kUo=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),SUo=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(HE,"CODE",{});var dft=s(ehe);RUo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),BUo=r(HE,":"),HE.forEach(t),PUo=i(na),ohe=n(na,"UL",{});var cft=s(ohe);gF=n(cft,"LI",{});var RLe=s(gF);rhe=n(RLe,"STRONG",{});var fft=s(rhe);$Uo=r(fft,"detr"),fft.forEach(t),IUo=r(RLe," \u2014 "),YG=n(RLe,"A",{href:!0});var mft=s(YG);qUo=r(mft,"DetrForObjectDetection"),mft.forEach(t),NUo=r(RLe," (DETR model)"),RLe.forEach(t),cft.forEach(t),jUo=i(na),hF=n(na,"P",{});var BLe=s(hF);DUo=r(BLe,"The model is set in evaluation mode by default using "),the=n(BLe,"CODE",{});var gft=s(the);GUo=r(gft,"model.eval()"),gft.forEach(t),OUo=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(BLe,"CODE",{});var hft=s(ahe);VUo=r(hft,"model.train()"),hft.forEach(t),BLe.forEach(t),XUo=i(na),nhe=n(na,"P",{});var pft=s(nhe);zUo=r(pft,"Examples:"),pft.forEach(t),QUo=i(na),m($w.$$.fragment,na),na.forEach(t),Sl.forEach(t),hBe=i(c),tc=n(c,"H2",{class:!0});var C$e=s(tc);pF=n(C$e,"A",{id:!0,class:!0,href:!0});var _ft=s(pF);she=n(_ft,"SPAN",{});var uft=s(she);m(Iw.$$.fragment,uft),uft.forEach(t),_ft.forEach(t),WUo=i(C$e),lhe=n(C$e,"SPAN",{});var bft=s(lhe);HUo=r(bft,"AutoModelForImageSegmentation"),bft.forEach(t),C$e.forEach(t),pBe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(qw.$$.fragment,Bl),UUo=i(Bl),ac=n(Bl,"P",{});var KU=s(ac);JUo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),KG=n(KU,"A",{href:!0});var Fft=s(KG);YUo=r(Fft,"from_pretrained()"),Fft.forEach(t),KUo=r(KU," class method or the "),ZG=n(KU,"A",{href:!0});var vft=s(ZG);ZUo=r(vft,"from_config()"),vft.forEach(t),eJo=r(KU,` class
method.`),KU.forEach(t),oJo=i(Bl),Nw=n(Bl,"P",{});var w$e=s(Nw);rJo=r(w$e,"This class cannot be instantiated directly using "),ihe=n(w$e,"CODE",{});var Tft=s(ihe);tJo=r(Tft,"__init__()"),Tft.forEach(t),aJo=r(w$e," (throws an error)."),w$e.forEach(t),nJo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(jw.$$.fragment,Pl),sJo=i(Pl),dhe=n(Pl,"P",{});var Mft=s(dhe);lJo=r(Mft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Mft.forEach(t),iJo=i(Pl),nc=n(Pl,"P",{});var ZU=s(nc);dJo=r(ZU,`Note:
Loading a model from its configuration file does `),che=n(ZU,"STRONG",{});var Eft=s(che);cJo=r(Eft,"not"),Eft.forEach(t),fJo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(ZU,"A",{href:!0});var Cft=s(eO);mJo=r(Cft,"from_pretrained()"),Cft.forEach(t),gJo=r(ZU," to load the model weights."),ZU.forEach(t),hJo=i(Pl),fhe=n(Pl,"P",{});var wft=s(fhe);pJo=r(wft,"Examples:"),wft.forEach(t),_Jo=i(Pl),m(Dw.$$.fragment,Pl),Pl.forEach(t),uJo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(Gw.$$.fragment,sa),bJo=i(sa),mhe=n(sa,"P",{});var Aft=s(mhe);FJo=r(Aft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Aft.forEach(t),vJo=i(sa),gn=n(sa,"P",{});var UE=s(gn);TJo=r(UE,"The model class to instantiate is selected based on the "),ghe=n(UE,"CODE",{});var yft=s(ghe);MJo=r(yft,"model_type"),yft.forEach(t),EJo=r(UE,` property of the config object (either
passed as an argument or loaded from `),hhe=n(UE,"CODE",{});var Lft=s(hhe);CJo=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),wJo=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(UE,"CODE",{});var xft=s(phe);AJo=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),yJo=r(UE,":"),UE.forEach(t),LJo=i(sa),_he=n(sa,"UL",{});var kft=s(_he);_F=n(kft,"LI",{});var PLe=s(_F);uhe=n(PLe,"STRONG",{});var Sft=s(uhe);xJo=r(Sft,"detr"),Sft.forEach(t),kJo=r(PLe," \u2014 "),oO=n(PLe,"A",{href:!0});var Rft=s(oO);SJo=r(Rft,"DetrForSegmentation"),Rft.forEach(t),RJo=r(PLe," (DETR model)"),PLe.forEach(t),kft.forEach(t),BJo=i(sa),uF=n(sa,"P",{});var $Le=s(uF);PJo=r($Le,"The model is set in evaluation mode by default using "),bhe=n($Le,"CODE",{});var Bft=s(bhe);$Jo=r(Bft,"model.eval()"),Bft.forEach(t),IJo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=n($Le,"CODE",{});var Pft=s(Fhe);qJo=r(Pft,"model.train()"),Pft.forEach(t),$Le.forEach(t),NJo=i(sa),vhe=n(sa,"P",{});var $ft=s(vhe);jJo=r($ft,"Examples:"),$ft.forEach(t),DJo=i(sa),m(Ow.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),_Be=i(c),sc=n(c,"H2",{class:!0});var A$e=s(sc);bF=n(A$e,"A",{id:!0,class:!0,href:!0});var Ift=s(bF);The=n(Ift,"SPAN",{});var qft=s(The);m(Vw.$$.fragment,qft),qft.forEach(t),Ift.forEach(t),GJo=i(A$e),Mhe=n(A$e,"SPAN",{});var Nft=s(Mhe);OJo=r(Nft,"AutoModelForSemanticSegmentation"),Nft.forEach(t),A$e.forEach(t),uBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(Xw.$$.fragment,$l),VJo=i($l),lc=n($l,"P",{});var eJ=s(lc);XJo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rO=n(eJ,"A",{href:!0});var jft=s(rO);zJo=r(jft,"from_pretrained()"),jft.forEach(t),QJo=r(eJ," class method or the "),tO=n(eJ,"A",{href:!0});var Dft=s(tO);WJo=r(Dft,"from_config()"),Dft.forEach(t),HJo=r(eJ,` class
method.`),eJ.forEach(t),UJo=i($l),zw=n($l,"P",{});var y$e=s(zw);JJo=r(y$e,"This class cannot be instantiated directly using "),Ehe=n(y$e,"CODE",{});var Gft=s(Ehe);YJo=r(Gft,"__init__()"),Gft.forEach(t),KJo=r(y$e," (throws an error)."),y$e.forEach(t),ZJo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(Qw.$$.fragment,Il),eYo=i(Il),Che=n(Il,"P",{});var Oft=s(Che);oYo=r(Oft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Oft.forEach(t),rYo=i(Il),ic=n(Il,"P",{});var oJ=s(ic);tYo=r(oJ,`Note:
Loading a model from its configuration file does `),whe=n(oJ,"STRONG",{});var Vft=s(whe);aYo=r(Vft,"not"),Vft.forEach(t),nYo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(oJ,"A",{href:!0});var Xft=s(aO);sYo=r(Xft,"from_pretrained()"),Xft.forEach(t),lYo=r(oJ," to load the model weights."),oJ.forEach(t),iYo=i(Il),Ahe=n(Il,"P",{});var zft=s(Ahe);dYo=r(zft,"Examples:"),zft.forEach(t),cYo=i(Il),m(Ww.$$.fragment,Il),Il.forEach(t),fYo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(Hw.$$.fragment,la),mYo=i(la),yhe=n(la,"P",{});var Qft=s(yhe);gYo=r(Qft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qft.forEach(t),hYo=i(la),hn=n(la,"P",{});var JE=s(hn);pYo=r(JE,"The model class to instantiate is selected based on the "),Lhe=n(JE,"CODE",{});var Wft=s(Lhe);_Yo=r(Wft,"model_type"),Wft.forEach(t),uYo=r(JE,` property of the config object (either
passed as an argument or loaded from `),xhe=n(JE,"CODE",{});var Hft=s(xhe);bYo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),FYo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(JE,"CODE",{});var Uft=s(khe);vYo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),TYo=r(JE,":"),JE.forEach(t),MYo=i(la),dc=n(la,"UL",{});var rJ=s(dc);FF=n(rJ,"LI",{});var ILe=s(FF);She=n(ILe,"STRONG",{});var Jft=s(She);EYo=r(Jft,"beit"),Jft.forEach(t),CYo=r(ILe," \u2014 "),nO=n(ILe,"A",{href:!0});var Yft=s(nO);wYo=r(Yft,"BeitForSemanticSegmentation"),Yft.forEach(t),AYo=r(ILe," (BEiT model)"),ILe.forEach(t),yYo=i(rJ),vF=n(rJ,"LI",{});var qLe=s(vF);Rhe=n(qLe,"STRONG",{});var Kft=s(Rhe);LYo=r(Kft,"dpt"),Kft.forEach(t),xYo=r(qLe," \u2014 "),sO=n(qLe,"A",{href:!0});var Zft=s(sO);kYo=r(Zft,"DPTForSemanticSegmentation"),Zft.forEach(t),SYo=r(qLe," (DPT model)"),qLe.forEach(t),RYo=i(rJ),TF=n(rJ,"LI",{});var NLe=s(TF);Bhe=n(NLe,"STRONG",{});var emt=s(Bhe);BYo=r(emt,"segformer"),emt.forEach(t),PYo=r(NLe," \u2014 "),lO=n(NLe,"A",{href:!0});var omt=s(lO);$Yo=r(omt,"SegformerForSemanticSegmentation"),omt.forEach(t),IYo=r(NLe," (SegFormer model)"),NLe.forEach(t),rJ.forEach(t),qYo=i(la),MF=n(la,"P",{});var jLe=s(MF);NYo=r(jLe,"The model is set in evaluation mode by default using "),Phe=n(jLe,"CODE",{});var rmt=s(Phe);jYo=r(rmt,"model.eval()"),rmt.forEach(t),DYo=r(jLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=n(jLe,"CODE",{});var tmt=s($he);GYo=r(tmt,"model.train()"),tmt.forEach(t),jLe.forEach(t),OYo=i(la),Ihe=n(la,"P",{});var amt=s(Ihe);VYo=r(amt,"Examples:"),amt.forEach(t),XYo=i(la),m(Uw.$$.fragment,la),la.forEach(t),$l.forEach(t),bBe=i(c),cc=n(c,"H2",{class:!0});var L$e=s(cc);EF=n(L$e,"A",{id:!0,class:!0,href:!0});var nmt=s(EF);qhe=n(nmt,"SPAN",{});var smt=s(qhe);m(Jw.$$.fragment,smt),smt.forEach(t),nmt.forEach(t),zYo=i(L$e),Nhe=n(L$e,"SPAN",{});var lmt=s(Nhe);QYo=r(lmt,"AutoModelForInstanceSegmentation"),lmt.forEach(t),L$e.forEach(t),FBe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(Yw.$$.fragment,ql),WYo=i(ql),fc=n(ql,"P",{});var tJ=s(fc);HYo=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iO=n(tJ,"A",{href:!0});var imt=s(iO);UYo=r(imt,"from_pretrained()"),imt.forEach(t),JYo=r(tJ," class method or the "),dO=n(tJ,"A",{href:!0});var dmt=s(dO);YYo=r(dmt,"from_config()"),dmt.forEach(t),KYo=r(tJ,` class
method.`),tJ.forEach(t),ZYo=i(ql),Kw=n(ql,"P",{});var x$e=s(Kw);eKo=r(x$e,"This class cannot be instantiated directly using "),jhe=n(x$e,"CODE",{});var cmt=s(jhe);oKo=r(cmt,"__init__()"),cmt.forEach(t),rKo=r(x$e," (throws an error)."),x$e.forEach(t),tKo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(Zw.$$.fragment,Nl),aKo=i(Nl),Dhe=n(Nl,"P",{});var fmt=s(Dhe);nKo=r(fmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fmt.forEach(t),sKo=i(Nl),mc=n(Nl,"P",{});var aJ=s(mc);lKo=r(aJ,`Note:
Loading a model from its configuration file does `),Ghe=n(aJ,"STRONG",{});var mmt=s(Ghe);iKo=r(mmt,"not"),mmt.forEach(t),dKo=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(aJ,"A",{href:!0});var gmt=s(cO);cKo=r(gmt,"from_pretrained()"),gmt.forEach(t),fKo=r(aJ," to load the model weights."),aJ.forEach(t),mKo=i(Nl),Ohe=n(Nl,"P",{});var hmt=s(Ohe);gKo=r(hmt,"Examples:"),hmt.forEach(t),hKo=i(Nl),m(eA.$$.fragment,Nl),Nl.forEach(t),pKo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(oA.$$.fragment,ia),_Ko=i(ia),Vhe=n(ia,"P",{});var pmt=s(Vhe);uKo=r(pmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pmt.forEach(t),bKo=i(ia),pn=n(ia,"P",{});var YE=s(pn);FKo=r(YE,"The model class to instantiate is selected based on the "),Xhe=n(YE,"CODE",{});var _mt=s(Xhe);vKo=r(_mt,"model_type"),_mt.forEach(t),TKo=r(YE,` property of the config object (either
passed as an argument or loaded from `),zhe=n(YE,"CODE",{});var umt=s(zhe);MKo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),EKo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(YE,"CODE",{});var bmt=s(Qhe);CKo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),wKo=r(YE,":"),YE.forEach(t),AKo=i(ia),Whe=n(ia,"UL",{});var Fmt=s(Whe);CF=n(Fmt,"LI",{});var DLe=s(CF);Hhe=n(DLe,"STRONG",{});var vmt=s(Hhe);yKo=r(vmt,"maskformer"),vmt.forEach(t),LKo=r(DLe," \u2014 "),fO=n(DLe,"A",{href:!0});var Tmt=s(fO);xKo=r(Tmt,"MaskFormerForInstanceSegmentation"),Tmt.forEach(t),kKo=r(DLe," (MaskFormer model)"),DLe.forEach(t),Fmt.forEach(t),SKo=i(ia),wF=n(ia,"P",{});var GLe=s(wF);RKo=r(GLe,"The model is set in evaluation mode by default using "),Uhe=n(GLe,"CODE",{});var Mmt=s(Uhe);BKo=r(Mmt,"model.eval()"),Mmt.forEach(t),PKo=r(GLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jhe=n(GLe,"CODE",{});var Emt=s(Jhe);$Ko=r(Emt,"model.train()"),Emt.forEach(t),GLe.forEach(t),IKo=i(ia),Yhe=n(ia,"P",{});var Cmt=s(Yhe);qKo=r(Cmt,"Examples:"),Cmt.forEach(t),NKo=i(ia),m(rA.$$.fragment,ia),ia.forEach(t),ql.forEach(t),vBe=i(c),gc=n(c,"H2",{class:!0});var k$e=s(gc);AF=n(k$e,"A",{id:!0,class:!0,href:!0});var wmt=s(AF);Khe=n(wmt,"SPAN",{});var Amt=s(Khe);m(tA.$$.fragment,Amt),Amt.forEach(t),wmt.forEach(t),jKo=i(k$e),Zhe=n(k$e,"SPAN",{});var ymt=s(Zhe);DKo=r(ymt,"TFAutoModel"),ymt.forEach(t),k$e.forEach(t),TBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(aA.$$.fragment,jl),GKo=i(jl),hc=n(jl,"P",{});var nJ=s(hc);OKo=r(nJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mO=n(nJ,"A",{href:!0});var Lmt=s(mO);VKo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),XKo=r(nJ," class method or the "),gO=n(nJ,"A",{href:!0});var xmt=s(gO);zKo=r(xmt,"from_config()"),xmt.forEach(t),QKo=r(nJ,` class
method.`),nJ.forEach(t),WKo=i(jl),nA=n(jl,"P",{});var S$e=s(nA);HKo=r(S$e,"This class cannot be instantiated directly using "),epe=n(S$e,"CODE",{});var kmt=s(epe);UKo=r(kmt,"__init__()"),kmt.forEach(t),JKo=r(S$e," (throws an error)."),S$e.forEach(t),YKo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(sA.$$.fragment,Dl),KKo=i(Dl),ope=n(Dl,"P",{});var Smt=s(ope);ZKo=r(Smt,"Instantiates one of the base model classes of the library from a configuration."),Smt.forEach(t),eZo=i(Dl),pc=n(Dl,"P",{});var sJ=s(pc);oZo=r(sJ,`Note:
Loading a model from its configuration file does `),rpe=n(sJ,"STRONG",{});var Rmt=s(rpe);rZo=r(Rmt,"not"),Rmt.forEach(t),tZo=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(sJ,"A",{href:!0});var Bmt=s(hO);aZo=r(Bmt,"from_pretrained()"),Bmt.forEach(t),nZo=r(sJ," to load the model weights."),sJ.forEach(t),sZo=i(Dl),tpe=n(Dl,"P",{});var Pmt=s(tpe);lZo=r(Pmt,"Examples:"),Pmt.forEach(t),iZo=i(Dl),m(lA.$$.fragment,Dl),Dl.forEach(t),dZo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(iA.$$.fragment,pa),cZo=i(pa),ape=n(pa,"P",{});var $mt=s(ape);fZo=r($mt,"Instantiate one of the base model classes of the library from a pretrained model."),$mt.forEach(t),mZo=i(pa),_n=n(pa,"P",{});var KE=s(_n);gZo=r(KE,"The model class to instantiate is selected based on the "),npe=n(KE,"CODE",{});var Imt=s(npe);hZo=r(Imt,"model_type"),Imt.forEach(t),pZo=r(KE,` property of the config object (either
passed as an argument or loaded from `),spe=n(KE,"CODE",{});var qmt=s(spe);_Zo=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),uZo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(KE,"CODE",{});var Nmt=s(lpe);bZo=r(Nmt,"pretrained_model_name_or_path"),Nmt.forEach(t),FZo=r(KE,":"),KE.forEach(t),vZo=i(pa),x=n(pa,"UL",{});var k=s(x);yF=n(k,"LI",{});var OLe=s(yF);ipe=n(OLe,"STRONG",{});var jmt=s(ipe);TZo=r(jmt,"albert"),jmt.forEach(t),MZo=r(OLe," \u2014 "),pO=n(OLe,"A",{href:!0});var Dmt=s(pO);EZo=r(Dmt,"TFAlbertModel"),Dmt.forEach(t),CZo=r(OLe," (ALBERT model)"),OLe.forEach(t),wZo=i(k),LF=n(k,"LI",{});var VLe=s(LF);dpe=n(VLe,"STRONG",{});var Gmt=s(dpe);AZo=r(Gmt,"bart"),Gmt.forEach(t),yZo=r(VLe," \u2014 "),_O=n(VLe,"A",{href:!0});var Omt=s(_O);LZo=r(Omt,"TFBartModel"),Omt.forEach(t),xZo=r(VLe," (BART model)"),VLe.forEach(t),kZo=i(k),xF=n(k,"LI",{});var XLe=s(xF);cpe=n(XLe,"STRONG",{});var Vmt=s(cpe);SZo=r(Vmt,"bert"),Vmt.forEach(t),RZo=r(XLe," \u2014 "),uO=n(XLe,"A",{href:!0});var Xmt=s(uO);BZo=r(Xmt,"TFBertModel"),Xmt.forEach(t),PZo=r(XLe," (BERT model)"),XLe.forEach(t),$Zo=i(k),kF=n(k,"LI",{});var zLe=s(kF);fpe=n(zLe,"STRONG",{});var zmt=s(fpe);IZo=r(zmt,"blenderbot"),zmt.forEach(t),qZo=r(zLe," \u2014 "),bO=n(zLe,"A",{href:!0});var Qmt=s(bO);NZo=r(Qmt,"TFBlenderbotModel"),Qmt.forEach(t),jZo=r(zLe," (Blenderbot model)"),zLe.forEach(t),DZo=i(k),SF=n(k,"LI",{});var QLe=s(SF);mpe=n(QLe,"STRONG",{});var Wmt=s(mpe);GZo=r(Wmt,"blenderbot-small"),Wmt.forEach(t),OZo=r(QLe," \u2014 "),FO=n(QLe,"A",{href:!0});var Hmt=s(FO);VZo=r(Hmt,"TFBlenderbotSmallModel"),Hmt.forEach(t),XZo=r(QLe," (BlenderbotSmall model)"),QLe.forEach(t),zZo=i(k),RF=n(k,"LI",{});var WLe=s(RF);gpe=n(WLe,"STRONG",{});var Umt=s(gpe);QZo=r(Umt,"camembert"),Umt.forEach(t),WZo=r(WLe," \u2014 "),vO=n(WLe,"A",{href:!0});var Jmt=s(vO);HZo=r(Jmt,"TFCamembertModel"),Jmt.forEach(t),UZo=r(WLe," (CamemBERT model)"),WLe.forEach(t),JZo=i(k),BF=n(k,"LI",{});var HLe=s(BF);hpe=n(HLe,"STRONG",{});var Ymt=s(hpe);YZo=r(Ymt,"clip"),Ymt.forEach(t),KZo=r(HLe," \u2014 "),TO=n(HLe,"A",{href:!0});var Kmt=s(TO);ZZo=r(Kmt,"TFCLIPModel"),Kmt.forEach(t),eer=r(HLe," (CLIP model)"),HLe.forEach(t),oer=i(k),PF=n(k,"LI",{});var ULe=s(PF);ppe=n(ULe,"STRONG",{});var Zmt=s(ppe);rer=r(Zmt,"convbert"),Zmt.forEach(t),ter=r(ULe," \u2014 "),MO=n(ULe,"A",{href:!0});var egt=s(MO);aer=r(egt,"TFConvBertModel"),egt.forEach(t),ner=r(ULe," (ConvBERT model)"),ULe.forEach(t),ser=i(k),$F=n(k,"LI",{});var JLe=s($F);_pe=n(JLe,"STRONG",{});var ogt=s(_pe);ler=r(ogt,"convnext"),ogt.forEach(t),ier=r(JLe," \u2014 "),EO=n(JLe,"A",{href:!0});var rgt=s(EO);der=r(rgt,"TFConvNextModel"),rgt.forEach(t),cer=r(JLe," (ConvNext model)"),JLe.forEach(t),fer=i(k),IF=n(k,"LI",{});var YLe=s(IF);upe=n(YLe,"STRONG",{});var tgt=s(upe);mer=r(tgt,"ctrl"),tgt.forEach(t),ger=r(YLe," \u2014 "),CO=n(YLe,"A",{href:!0});var agt=s(CO);her=r(agt,"TFCTRLModel"),agt.forEach(t),per=r(YLe," (CTRL model)"),YLe.forEach(t),_er=i(k),qF=n(k,"LI",{});var KLe=s(qF);bpe=n(KLe,"STRONG",{});var ngt=s(bpe);uer=r(ngt,"deberta"),ngt.forEach(t),ber=r(KLe," \u2014 "),wO=n(KLe,"A",{href:!0});var sgt=s(wO);Fer=r(sgt,"TFDebertaModel"),sgt.forEach(t),ver=r(KLe," (DeBERTa model)"),KLe.forEach(t),Ter=i(k),NF=n(k,"LI",{});var ZLe=s(NF);Fpe=n(ZLe,"STRONG",{});var lgt=s(Fpe);Mer=r(lgt,"deberta-v2"),lgt.forEach(t),Eer=r(ZLe," \u2014 "),AO=n(ZLe,"A",{href:!0});var igt=s(AO);Cer=r(igt,"TFDebertaV2Model"),igt.forEach(t),wer=r(ZLe," (DeBERTa-v2 model)"),ZLe.forEach(t),Aer=i(k),jF=n(k,"LI",{});var e7e=s(jF);vpe=n(e7e,"STRONG",{});var dgt=s(vpe);yer=r(dgt,"distilbert"),dgt.forEach(t),Ler=r(e7e," \u2014 "),yO=n(e7e,"A",{href:!0});var cgt=s(yO);xer=r(cgt,"TFDistilBertModel"),cgt.forEach(t),ker=r(e7e," (DistilBERT model)"),e7e.forEach(t),Ser=i(k),DF=n(k,"LI",{});var o7e=s(DF);Tpe=n(o7e,"STRONG",{});var fgt=s(Tpe);Rer=r(fgt,"dpr"),fgt.forEach(t),Ber=r(o7e," \u2014 "),LO=n(o7e,"A",{href:!0});var mgt=s(LO);Per=r(mgt,"TFDPRQuestionEncoder"),mgt.forEach(t),$er=r(o7e," (DPR model)"),o7e.forEach(t),Ier=i(k),GF=n(k,"LI",{});var r7e=s(GF);Mpe=n(r7e,"STRONG",{});var ggt=s(Mpe);qer=r(ggt,"electra"),ggt.forEach(t),Ner=r(r7e," \u2014 "),xO=n(r7e,"A",{href:!0});var hgt=s(xO);jer=r(hgt,"TFElectraModel"),hgt.forEach(t),Der=r(r7e," (ELECTRA model)"),r7e.forEach(t),Ger=i(k),OF=n(k,"LI",{});var t7e=s(OF);Epe=n(t7e,"STRONG",{});var pgt=s(Epe);Oer=r(pgt,"flaubert"),pgt.forEach(t),Ver=r(t7e," \u2014 "),kO=n(t7e,"A",{href:!0});var _gt=s(kO);Xer=r(_gt,"TFFlaubertModel"),_gt.forEach(t),zer=r(t7e," (FlauBERT model)"),t7e.forEach(t),Qer=i(k),Gs=n(k,"LI",{});var hx=s(Gs);Cpe=n(hx,"STRONG",{});var ugt=s(Cpe);Wer=r(ugt,"funnel"),ugt.forEach(t),Her=r(hx," \u2014 "),SO=n(hx,"A",{href:!0});var bgt=s(SO);Uer=r(bgt,"TFFunnelModel"),bgt.forEach(t),Jer=r(hx," or "),RO=n(hx,"A",{href:!0});var Fgt=s(RO);Yer=r(Fgt,"TFFunnelBaseModel"),Fgt.forEach(t),Ker=r(hx," (Funnel Transformer model)"),hx.forEach(t),Zer=i(k),VF=n(k,"LI",{});var a7e=s(VF);wpe=n(a7e,"STRONG",{});var vgt=s(wpe);eor=r(vgt,"gpt2"),vgt.forEach(t),oor=r(a7e," \u2014 "),BO=n(a7e,"A",{href:!0});var Tgt=s(BO);ror=r(Tgt,"TFGPT2Model"),Tgt.forEach(t),tor=r(a7e," (OpenAI GPT-2 model)"),a7e.forEach(t),aor=i(k),XF=n(k,"LI",{});var n7e=s(XF);Ape=n(n7e,"STRONG",{});var Mgt=s(Ape);nor=r(Mgt,"gptj"),Mgt.forEach(t),sor=r(n7e," \u2014 "),PO=n(n7e,"A",{href:!0});var Egt=s(PO);lor=r(Egt,"TFGPTJModel"),Egt.forEach(t),ior=r(n7e," (GPT-J model)"),n7e.forEach(t),dor=i(k),zF=n(k,"LI",{});var s7e=s(zF);ype=n(s7e,"STRONG",{});var Cgt=s(ype);cor=r(Cgt,"hubert"),Cgt.forEach(t),mor=r(s7e," \u2014 "),$O=n(s7e,"A",{href:!0});var wgt=s($O);gor=r(wgt,"TFHubertModel"),wgt.forEach(t),hor=r(s7e," (Hubert model)"),s7e.forEach(t),por=i(k),QF=n(k,"LI",{});var l7e=s(QF);Lpe=n(l7e,"STRONG",{});var Agt=s(Lpe);_or=r(Agt,"layoutlm"),Agt.forEach(t),uor=r(l7e," \u2014 "),IO=n(l7e,"A",{href:!0});var ygt=s(IO);bor=r(ygt,"TFLayoutLMModel"),ygt.forEach(t),For=r(l7e," (LayoutLM model)"),l7e.forEach(t),vor=i(k),WF=n(k,"LI",{});var i7e=s(WF);xpe=n(i7e,"STRONG",{});var Lgt=s(xpe);Tor=r(Lgt,"led"),Lgt.forEach(t),Mor=r(i7e," \u2014 "),qO=n(i7e,"A",{href:!0});var xgt=s(qO);Eor=r(xgt,"TFLEDModel"),xgt.forEach(t),Cor=r(i7e," (LED model)"),i7e.forEach(t),wor=i(k),HF=n(k,"LI",{});var d7e=s(HF);kpe=n(d7e,"STRONG",{});var kgt=s(kpe);Aor=r(kgt,"longformer"),kgt.forEach(t),yor=r(d7e," \u2014 "),NO=n(d7e,"A",{href:!0});var Sgt=s(NO);Lor=r(Sgt,"TFLongformerModel"),Sgt.forEach(t),xor=r(d7e," (Longformer model)"),d7e.forEach(t),kor=i(k),UF=n(k,"LI",{});var c7e=s(UF);Spe=n(c7e,"STRONG",{});var Rgt=s(Spe);Sor=r(Rgt,"lxmert"),Rgt.forEach(t),Ror=r(c7e," \u2014 "),jO=n(c7e,"A",{href:!0});var Bgt=s(jO);Bor=r(Bgt,"TFLxmertModel"),Bgt.forEach(t),Por=r(c7e," (LXMERT model)"),c7e.forEach(t),$or=i(k),JF=n(k,"LI",{});var f7e=s(JF);Rpe=n(f7e,"STRONG",{});var Pgt=s(Rpe);Ior=r(Pgt,"marian"),Pgt.forEach(t),qor=r(f7e," \u2014 "),DO=n(f7e,"A",{href:!0});var $gt=s(DO);Nor=r($gt,"TFMarianModel"),$gt.forEach(t),jor=r(f7e," (Marian model)"),f7e.forEach(t),Dor=i(k),YF=n(k,"LI",{});var m7e=s(YF);Bpe=n(m7e,"STRONG",{});var Igt=s(Bpe);Gor=r(Igt,"mbart"),Igt.forEach(t),Oor=r(m7e," \u2014 "),GO=n(m7e,"A",{href:!0});var qgt=s(GO);Vor=r(qgt,"TFMBartModel"),qgt.forEach(t),Xor=r(m7e," (mBART model)"),m7e.forEach(t),zor=i(k),KF=n(k,"LI",{});var g7e=s(KF);Ppe=n(g7e,"STRONG",{});var Ngt=s(Ppe);Qor=r(Ngt,"mobilebert"),Ngt.forEach(t),Wor=r(g7e," \u2014 "),OO=n(g7e,"A",{href:!0});var jgt=s(OO);Hor=r(jgt,"TFMobileBertModel"),jgt.forEach(t),Uor=r(g7e," (MobileBERT model)"),g7e.forEach(t),Jor=i(k),ZF=n(k,"LI",{});var h7e=s(ZF);$pe=n(h7e,"STRONG",{});var Dgt=s($pe);Yor=r(Dgt,"mpnet"),Dgt.forEach(t),Kor=r(h7e," \u2014 "),VO=n(h7e,"A",{href:!0});var Ggt=s(VO);Zor=r(Ggt,"TFMPNetModel"),Ggt.forEach(t),err=r(h7e," (MPNet model)"),h7e.forEach(t),orr=i(k),ev=n(k,"LI",{});var p7e=s(ev);Ipe=n(p7e,"STRONG",{});var Ogt=s(Ipe);rrr=r(Ogt,"mt5"),Ogt.forEach(t),trr=r(p7e," \u2014 "),XO=n(p7e,"A",{href:!0});var Vgt=s(XO);arr=r(Vgt,"TFMT5Model"),Vgt.forEach(t),nrr=r(p7e," (mT5 model)"),p7e.forEach(t),srr=i(k),ov=n(k,"LI",{});var _7e=s(ov);qpe=n(_7e,"STRONG",{});var Xgt=s(qpe);lrr=r(Xgt,"openai-gpt"),Xgt.forEach(t),irr=r(_7e," \u2014 "),zO=n(_7e,"A",{href:!0});var zgt=s(zO);drr=r(zgt,"TFOpenAIGPTModel"),zgt.forEach(t),crr=r(_7e," (OpenAI GPT model)"),_7e.forEach(t),frr=i(k),rv=n(k,"LI",{});var u7e=s(rv);Npe=n(u7e,"STRONG",{});var Qgt=s(Npe);mrr=r(Qgt,"pegasus"),Qgt.forEach(t),grr=r(u7e," \u2014 "),QO=n(u7e,"A",{href:!0});var Wgt=s(QO);hrr=r(Wgt,"TFPegasusModel"),Wgt.forEach(t),prr=r(u7e," (Pegasus model)"),u7e.forEach(t),_rr=i(k),tv=n(k,"LI",{});var b7e=s(tv);jpe=n(b7e,"STRONG",{});var Hgt=s(jpe);urr=r(Hgt,"rembert"),Hgt.forEach(t),brr=r(b7e," \u2014 "),WO=n(b7e,"A",{href:!0});var Ugt=s(WO);Frr=r(Ugt,"TFRemBertModel"),Ugt.forEach(t),vrr=r(b7e," (RemBERT model)"),b7e.forEach(t),Trr=i(k),av=n(k,"LI",{});var F7e=s(av);Dpe=n(F7e,"STRONG",{});var Jgt=s(Dpe);Mrr=r(Jgt,"roberta"),Jgt.forEach(t),Err=r(F7e," \u2014 "),HO=n(F7e,"A",{href:!0});var Ygt=s(HO);Crr=r(Ygt,"TFRobertaModel"),Ygt.forEach(t),wrr=r(F7e," (RoBERTa model)"),F7e.forEach(t),Arr=i(k),nv=n(k,"LI",{});var v7e=s(nv);Gpe=n(v7e,"STRONG",{});var Kgt=s(Gpe);yrr=r(Kgt,"roformer"),Kgt.forEach(t),Lrr=r(v7e," \u2014 "),UO=n(v7e,"A",{href:!0});var Zgt=s(UO);xrr=r(Zgt,"TFRoFormerModel"),Zgt.forEach(t),krr=r(v7e," (RoFormer model)"),v7e.forEach(t),Srr=i(k),sv=n(k,"LI",{});var T7e=s(sv);Ope=n(T7e,"STRONG",{});var eht=s(Ope);Rrr=r(eht,"speech_to_text"),eht.forEach(t),Brr=r(T7e," \u2014 "),JO=n(T7e,"A",{href:!0});var oht=s(JO);Prr=r(oht,"TFSpeech2TextModel"),oht.forEach(t),$rr=r(T7e," (Speech2Text model)"),T7e.forEach(t),Irr=i(k),lv=n(k,"LI",{});var M7e=s(lv);Vpe=n(M7e,"STRONG",{});var rht=s(Vpe);qrr=r(rht,"t5"),rht.forEach(t),Nrr=r(M7e," \u2014 "),YO=n(M7e,"A",{href:!0});var tht=s(YO);jrr=r(tht,"TFT5Model"),tht.forEach(t),Drr=r(M7e," (T5 model)"),M7e.forEach(t),Grr=i(k),iv=n(k,"LI",{});var E7e=s(iv);Xpe=n(E7e,"STRONG",{});var aht=s(Xpe);Orr=r(aht,"tapas"),aht.forEach(t),Vrr=r(E7e," \u2014 "),KO=n(E7e,"A",{href:!0});var nht=s(KO);Xrr=r(nht,"TFTapasModel"),nht.forEach(t),zrr=r(E7e," (TAPAS model)"),E7e.forEach(t),Qrr=i(k),dv=n(k,"LI",{});var C7e=s(dv);zpe=n(C7e,"STRONG",{});var sht=s(zpe);Wrr=r(sht,"transfo-xl"),sht.forEach(t),Hrr=r(C7e," \u2014 "),ZO=n(C7e,"A",{href:!0});var lht=s(ZO);Urr=r(lht,"TFTransfoXLModel"),lht.forEach(t),Jrr=r(C7e," (Transformer-XL model)"),C7e.forEach(t),Yrr=i(k),cv=n(k,"LI",{});var w7e=s(cv);Qpe=n(w7e,"STRONG",{});var iht=s(Qpe);Krr=r(iht,"vit"),iht.forEach(t),Zrr=r(w7e," \u2014 "),eV=n(w7e,"A",{href:!0});var dht=s(eV);etr=r(dht,"TFViTModel"),dht.forEach(t),otr=r(w7e," (ViT model)"),w7e.forEach(t),rtr=i(k),fv=n(k,"LI",{});var A7e=s(fv);Wpe=n(A7e,"STRONG",{});var cht=s(Wpe);ttr=r(cht,"vit_mae"),cht.forEach(t),atr=r(A7e," \u2014 "),oV=n(A7e,"A",{href:!0});var fht=s(oV);ntr=r(fht,"TFViTMAEModel"),fht.forEach(t),str=r(A7e," (ViTMAE model)"),A7e.forEach(t),ltr=i(k),mv=n(k,"LI",{});var y7e=s(mv);Hpe=n(y7e,"STRONG",{});var mht=s(Hpe);itr=r(mht,"wav2vec2"),mht.forEach(t),dtr=r(y7e," \u2014 "),rV=n(y7e,"A",{href:!0});var ght=s(rV);ctr=r(ght,"TFWav2Vec2Model"),ght.forEach(t),ftr=r(y7e," (Wav2Vec2 model)"),y7e.forEach(t),mtr=i(k),gv=n(k,"LI",{});var L7e=s(gv);Upe=n(L7e,"STRONG",{});var hht=s(Upe);gtr=r(hht,"xlm"),hht.forEach(t),htr=r(L7e," \u2014 "),tV=n(L7e,"A",{href:!0});var pht=s(tV);ptr=r(pht,"TFXLMModel"),pht.forEach(t),_tr=r(L7e," (XLM model)"),L7e.forEach(t),utr=i(k),hv=n(k,"LI",{});var x7e=s(hv);Jpe=n(x7e,"STRONG",{});var _ht=s(Jpe);btr=r(_ht,"xlm-roberta"),_ht.forEach(t),Ftr=r(x7e," \u2014 "),aV=n(x7e,"A",{href:!0});var uht=s(aV);vtr=r(uht,"TFXLMRobertaModel"),uht.forEach(t),Ttr=r(x7e," (XLM-RoBERTa model)"),x7e.forEach(t),Mtr=i(k),pv=n(k,"LI",{});var k7e=s(pv);Ype=n(k7e,"STRONG",{});var bht=s(Ype);Etr=r(bht,"xlnet"),bht.forEach(t),Ctr=r(k7e," \u2014 "),nV=n(k7e,"A",{href:!0});var Fht=s(nV);wtr=r(Fht,"TFXLNetModel"),Fht.forEach(t),Atr=r(k7e," (XLNet model)"),k7e.forEach(t),k.forEach(t),ytr=i(pa),Kpe=n(pa,"P",{});var vht=s(Kpe);Ltr=r(vht,"Examples:"),vht.forEach(t),xtr=i(pa),m(dA.$$.fragment,pa),pa.forEach(t),jl.forEach(t),MBe=i(c),_c=n(c,"H2",{class:!0});var R$e=s(_c);_v=n(R$e,"A",{id:!0,class:!0,href:!0});var Tht=s(_v);Zpe=n(Tht,"SPAN",{});var Mht=s(Zpe);m(cA.$$.fragment,Mht),Mht.forEach(t),Tht.forEach(t),ktr=i(R$e),e_e=n(R$e,"SPAN",{});var Eht=s(e_e);Str=r(Eht,"TFAutoModelForPreTraining"),Eht.forEach(t),R$e.forEach(t),EBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(fA.$$.fragment,Gl),Rtr=i(Gl),uc=n(Gl,"P",{});var lJ=s(uc);Btr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sV=n(lJ,"A",{href:!0});var Cht=s(sV);Ptr=r(Cht,"from_pretrained()"),Cht.forEach(t),$tr=r(lJ," class method or the "),lV=n(lJ,"A",{href:!0});var wht=s(lV);Itr=r(wht,"from_config()"),wht.forEach(t),qtr=r(lJ,` class
method.`),lJ.forEach(t),Ntr=i(Gl),mA=n(Gl,"P",{});var B$e=s(mA);jtr=r(B$e,"This class cannot be instantiated directly using "),o_e=n(B$e,"CODE",{});var Aht=s(o_e);Dtr=r(Aht,"__init__()"),Aht.forEach(t),Gtr=r(B$e," (throws an error)."),B$e.forEach(t),Otr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(gA.$$.fragment,Ol),Vtr=i(Ol),r_e=n(Ol,"P",{});var yht=s(r_e);Xtr=r(yht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yht.forEach(t),ztr=i(Ol),bc=n(Ol,"P",{});var iJ=s(bc);Qtr=r(iJ,`Note:
Loading a model from its configuration file does `),t_e=n(iJ,"STRONG",{});var Lht=s(t_e);Wtr=r(Lht,"not"),Lht.forEach(t),Htr=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(iJ,"A",{href:!0});var xht=s(iV);Utr=r(xht,"from_pretrained()"),xht.forEach(t),Jtr=r(iJ," to load the model weights."),iJ.forEach(t),Ytr=i(Ol),a_e=n(Ol,"P",{});var kht=s(a_e);Ktr=r(kht,"Examples:"),kht.forEach(t),Ztr=i(Ol),m(hA.$$.fragment,Ol),Ol.forEach(t),ear=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(pA.$$.fragment,_a),oar=i(_a),n_e=n(_a,"P",{});var Sht=s(n_e);rar=r(Sht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sht.forEach(t),tar=i(_a),un=n(_a,"P",{});var ZE=s(un);aar=r(ZE,"The model class to instantiate is selected based on the "),s_e=n(ZE,"CODE",{});var Rht=s(s_e);nar=r(Rht,"model_type"),Rht.forEach(t),sar=r(ZE,` property of the config object (either
passed as an argument or loaded from `),l_e=n(ZE,"CODE",{});var Bht=s(l_e);lar=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),iar=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(ZE,"CODE",{});var Pht=s(i_e);dar=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),car=r(ZE,":"),ZE.forEach(t),far=i(_a),H=n(_a,"UL",{});var U=s(H);uv=n(U,"LI",{});var S7e=s(uv);d_e=n(S7e,"STRONG",{});var $ht=s(d_e);mar=r($ht,"albert"),$ht.forEach(t),gar=r(S7e," \u2014 "),dV=n(S7e,"A",{href:!0});var Iht=s(dV);har=r(Iht,"TFAlbertForPreTraining"),Iht.forEach(t),par=r(S7e," (ALBERT model)"),S7e.forEach(t),_ar=i(U),bv=n(U,"LI",{});var R7e=s(bv);c_e=n(R7e,"STRONG",{});var qht=s(c_e);uar=r(qht,"bart"),qht.forEach(t),bar=r(R7e," \u2014 "),cV=n(R7e,"A",{href:!0});var Nht=s(cV);Far=r(Nht,"TFBartForConditionalGeneration"),Nht.forEach(t),Tar=r(R7e," (BART model)"),R7e.forEach(t),Mar=i(U),Fv=n(U,"LI",{});var B7e=s(Fv);f_e=n(B7e,"STRONG",{});var jht=s(f_e);Ear=r(jht,"bert"),jht.forEach(t),Car=r(B7e," \u2014 "),fV=n(B7e,"A",{href:!0});var Dht=s(fV);war=r(Dht,"TFBertForPreTraining"),Dht.forEach(t),Aar=r(B7e," (BERT model)"),B7e.forEach(t),yar=i(U),vv=n(U,"LI",{});var P7e=s(vv);m_e=n(P7e,"STRONG",{});var Ght=s(m_e);Lar=r(Ght,"camembert"),Ght.forEach(t),xar=r(P7e," \u2014 "),mV=n(P7e,"A",{href:!0});var Oht=s(mV);kar=r(Oht,"TFCamembertForMaskedLM"),Oht.forEach(t),Sar=r(P7e," (CamemBERT model)"),P7e.forEach(t),Rar=i(U),Tv=n(U,"LI",{});var $7e=s(Tv);g_e=n($7e,"STRONG",{});var Vht=s(g_e);Bar=r(Vht,"ctrl"),Vht.forEach(t),Par=r($7e," \u2014 "),gV=n($7e,"A",{href:!0});var Xht=s(gV);$ar=r(Xht,"TFCTRLLMHeadModel"),Xht.forEach(t),Iar=r($7e," (CTRL model)"),$7e.forEach(t),qar=i(U),Mv=n(U,"LI",{});var I7e=s(Mv);h_e=n(I7e,"STRONG",{});var zht=s(h_e);Nar=r(zht,"distilbert"),zht.forEach(t),jar=r(I7e," \u2014 "),hV=n(I7e,"A",{href:!0});var Qht=s(hV);Dar=r(Qht,"TFDistilBertForMaskedLM"),Qht.forEach(t),Gar=r(I7e," (DistilBERT model)"),I7e.forEach(t),Oar=i(U),Ev=n(U,"LI",{});var q7e=s(Ev);p_e=n(q7e,"STRONG",{});var Wht=s(p_e);Var=r(Wht,"electra"),Wht.forEach(t),Xar=r(q7e," \u2014 "),pV=n(q7e,"A",{href:!0});var Hht=s(pV);zar=r(Hht,"TFElectraForPreTraining"),Hht.forEach(t),Qar=r(q7e," (ELECTRA model)"),q7e.forEach(t),War=i(U),Cv=n(U,"LI",{});var N7e=s(Cv);__e=n(N7e,"STRONG",{});var Uht=s(__e);Har=r(Uht,"flaubert"),Uht.forEach(t),Uar=r(N7e," \u2014 "),_V=n(N7e,"A",{href:!0});var Jht=s(_V);Jar=r(Jht,"TFFlaubertWithLMHeadModel"),Jht.forEach(t),Yar=r(N7e," (FlauBERT model)"),N7e.forEach(t),Kar=i(U),wv=n(U,"LI",{});var j7e=s(wv);u_e=n(j7e,"STRONG",{});var Yht=s(u_e);Zar=r(Yht,"funnel"),Yht.forEach(t),enr=r(j7e," \u2014 "),uV=n(j7e,"A",{href:!0});var Kht=s(uV);onr=r(Kht,"TFFunnelForPreTraining"),Kht.forEach(t),rnr=r(j7e," (Funnel Transformer model)"),j7e.forEach(t),tnr=i(U),Av=n(U,"LI",{});var D7e=s(Av);b_e=n(D7e,"STRONG",{});var Zht=s(b_e);anr=r(Zht,"gpt2"),Zht.forEach(t),nnr=r(D7e," \u2014 "),bV=n(D7e,"A",{href:!0});var ept=s(bV);snr=r(ept,"TFGPT2LMHeadModel"),ept.forEach(t),lnr=r(D7e," (OpenAI GPT-2 model)"),D7e.forEach(t),inr=i(U),yv=n(U,"LI",{});var G7e=s(yv);F_e=n(G7e,"STRONG",{});var opt=s(F_e);dnr=r(opt,"layoutlm"),opt.forEach(t),cnr=r(G7e," \u2014 "),FV=n(G7e,"A",{href:!0});var rpt=s(FV);fnr=r(rpt,"TFLayoutLMForMaskedLM"),rpt.forEach(t),mnr=r(G7e," (LayoutLM model)"),G7e.forEach(t),gnr=i(U),Lv=n(U,"LI",{});var O7e=s(Lv);v_e=n(O7e,"STRONG",{});var tpt=s(v_e);hnr=r(tpt,"lxmert"),tpt.forEach(t),pnr=r(O7e," \u2014 "),vV=n(O7e,"A",{href:!0});var apt=s(vV);_nr=r(apt,"TFLxmertForPreTraining"),apt.forEach(t),unr=r(O7e," (LXMERT model)"),O7e.forEach(t),bnr=i(U),xv=n(U,"LI",{});var V7e=s(xv);T_e=n(V7e,"STRONG",{});var npt=s(T_e);Fnr=r(npt,"mobilebert"),npt.forEach(t),vnr=r(V7e," \u2014 "),TV=n(V7e,"A",{href:!0});var spt=s(TV);Tnr=r(spt,"TFMobileBertForPreTraining"),spt.forEach(t),Mnr=r(V7e," (MobileBERT model)"),V7e.forEach(t),Enr=i(U),kv=n(U,"LI",{});var X7e=s(kv);M_e=n(X7e,"STRONG",{});var lpt=s(M_e);Cnr=r(lpt,"mpnet"),lpt.forEach(t),wnr=r(X7e," \u2014 "),MV=n(X7e,"A",{href:!0});var ipt=s(MV);Anr=r(ipt,"TFMPNetForMaskedLM"),ipt.forEach(t),ynr=r(X7e," (MPNet model)"),X7e.forEach(t),Lnr=i(U),Sv=n(U,"LI",{});var z7e=s(Sv);E_e=n(z7e,"STRONG",{});var dpt=s(E_e);xnr=r(dpt,"openai-gpt"),dpt.forEach(t),knr=r(z7e," \u2014 "),EV=n(z7e,"A",{href:!0});var cpt=s(EV);Snr=r(cpt,"TFOpenAIGPTLMHeadModel"),cpt.forEach(t),Rnr=r(z7e," (OpenAI GPT model)"),z7e.forEach(t),Bnr=i(U),Rv=n(U,"LI",{});var Q7e=s(Rv);C_e=n(Q7e,"STRONG",{});var fpt=s(C_e);Pnr=r(fpt,"roberta"),fpt.forEach(t),$nr=r(Q7e," \u2014 "),CV=n(Q7e,"A",{href:!0});var mpt=s(CV);Inr=r(mpt,"TFRobertaForMaskedLM"),mpt.forEach(t),qnr=r(Q7e," (RoBERTa model)"),Q7e.forEach(t),Nnr=i(U),Bv=n(U,"LI",{});var W7e=s(Bv);w_e=n(W7e,"STRONG",{});var gpt=s(w_e);jnr=r(gpt,"t5"),gpt.forEach(t),Dnr=r(W7e," \u2014 "),wV=n(W7e,"A",{href:!0});var hpt=s(wV);Gnr=r(hpt,"TFT5ForConditionalGeneration"),hpt.forEach(t),Onr=r(W7e," (T5 model)"),W7e.forEach(t),Vnr=i(U),Pv=n(U,"LI",{});var H7e=s(Pv);A_e=n(H7e,"STRONG",{});var ppt=s(A_e);Xnr=r(ppt,"tapas"),ppt.forEach(t),znr=r(H7e," \u2014 "),AV=n(H7e,"A",{href:!0});var _pt=s(AV);Qnr=r(_pt,"TFTapasForMaskedLM"),_pt.forEach(t),Wnr=r(H7e," (TAPAS model)"),H7e.forEach(t),Hnr=i(U),$v=n(U,"LI",{});var U7e=s($v);y_e=n(U7e,"STRONG",{});var upt=s(y_e);Unr=r(upt,"transfo-xl"),upt.forEach(t),Jnr=r(U7e," \u2014 "),yV=n(U7e,"A",{href:!0});var bpt=s(yV);Ynr=r(bpt,"TFTransfoXLLMHeadModel"),bpt.forEach(t),Knr=r(U7e," (Transformer-XL model)"),U7e.forEach(t),Znr=i(U),Iv=n(U,"LI",{});var J7e=s(Iv);L_e=n(J7e,"STRONG",{});var Fpt=s(L_e);esr=r(Fpt,"vit_mae"),Fpt.forEach(t),osr=r(J7e," \u2014 "),LV=n(J7e,"A",{href:!0});var vpt=s(LV);rsr=r(vpt,"TFViTMAEForPreTraining"),vpt.forEach(t),tsr=r(J7e," (ViTMAE model)"),J7e.forEach(t),asr=i(U),qv=n(U,"LI",{});var Y7e=s(qv);x_e=n(Y7e,"STRONG",{});var Tpt=s(x_e);nsr=r(Tpt,"xlm"),Tpt.forEach(t),ssr=r(Y7e," \u2014 "),xV=n(Y7e,"A",{href:!0});var Mpt=s(xV);lsr=r(Mpt,"TFXLMWithLMHeadModel"),Mpt.forEach(t),isr=r(Y7e," (XLM model)"),Y7e.forEach(t),dsr=i(U),Nv=n(U,"LI",{});var K7e=s(Nv);k_e=n(K7e,"STRONG",{});var Ept=s(k_e);csr=r(Ept,"xlm-roberta"),Ept.forEach(t),fsr=r(K7e," \u2014 "),kV=n(K7e,"A",{href:!0});var Cpt=s(kV);msr=r(Cpt,"TFXLMRobertaForMaskedLM"),Cpt.forEach(t),gsr=r(K7e," (XLM-RoBERTa model)"),K7e.forEach(t),hsr=i(U),jv=n(U,"LI",{});var Z7e=s(jv);S_e=n(Z7e,"STRONG",{});var wpt=s(S_e);psr=r(wpt,"xlnet"),wpt.forEach(t),_sr=r(Z7e," \u2014 "),SV=n(Z7e,"A",{href:!0});var Apt=s(SV);usr=r(Apt,"TFXLNetLMHeadModel"),Apt.forEach(t),bsr=r(Z7e," (XLNet model)"),Z7e.forEach(t),U.forEach(t),Fsr=i(_a),R_e=n(_a,"P",{});var ypt=s(R_e);vsr=r(ypt,"Examples:"),ypt.forEach(t),Tsr=i(_a),m(_A.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),CBe=i(c),Fc=n(c,"H2",{class:!0});var P$e=s(Fc);Dv=n(P$e,"A",{id:!0,class:!0,href:!0});var Lpt=s(Dv);B_e=n(Lpt,"SPAN",{});var xpt=s(B_e);m(uA.$$.fragment,xpt),xpt.forEach(t),Lpt.forEach(t),Msr=i(P$e),P_e=n(P$e,"SPAN",{});var kpt=s(P_e);Esr=r(kpt,"TFAutoModelForCausalLM"),kpt.forEach(t),P$e.forEach(t),wBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(bA.$$.fragment,Vl),Csr=i(Vl),vc=n(Vl,"P",{});var dJ=s(vc);wsr=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RV=n(dJ,"A",{href:!0});var Spt=s(RV);Asr=r(Spt,"from_pretrained()"),Spt.forEach(t),ysr=r(dJ," class method or the "),BV=n(dJ,"A",{href:!0});var Rpt=s(BV);Lsr=r(Rpt,"from_config()"),Rpt.forEach(t),xsr=r(dJ,` class
method.`),dJ.forEach(t),ksr=i(Vl),FA=n(Vl,"P",{});var $$e=s(FA);Ssr=r($$e,"This class cannot be instantiated directly using "),$_e=n($$e,"CODE",{});var Bpt=s($_e);Rsr=r(Bpt,"__init__()"),Bpt.forEach(t),Bsr=r($$e," (throws an error)."),$$e.forEach(t),Psr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(vA.$$.fragment,Xl),$sr=i(Xl),I_e=n(Xl,"P",{});var Ppt=s(I_e);Isr=r(Ppt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ppt.forEach(t),qsr=i(Xl),Tc=n(Xl,"P",{});var cJ=s(Tc);Nsr=r(cJ,`Note:
Loading a model from its configuration file does `),q_e=n(cJ,"STRONG",{});var $pt=s(q_e);jsr=r($pt,"not"),$pt.forEach(t),Dsr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(cJ,"A",{href:!0});var Ipt=s(PV);Gsr=r(Ipt,"from_pretrained()"),Ipt.forEach(t),Osr=r(cJ," to load the model weights."),cJ.forEach(t),Vsr=i(Xl),N_e=n(Xl,"P",{});var qpt=s(N_e);Xsr=r(qpt,"Examples:"),qpt.forEach(t),zsr=i(Xl),m(TA.$$.fragment,Xl),Xl.forEach(t),Qsr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(MA.$$.fragment,ua),Wsr=i(ua),j_e=n(ua,"P",{});var Npt=s(j_e);Hsr=r(Npt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Npt.forEach(t),Usr=i(ua),bn=n(ua,"P",{});var e5=s(bn);Jsr=r(e5,"The model class to instantiate is selected based on the "),D_e=n(e5,"CODE",{});var jpt=s(D_e);Ysr=r(jpt,"model_type"),jpt.forEach(t),Ksr=r(e5,` property of the config object (either
passed as an argument or loaded from `),G_e=n(e5,"CODE",{});var Dpt=s(G_e);Zsr=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),elr=r(e5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(e5,"CODE",{});var Gpt=s(O_e);olr=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),rlr=r(e5,":"),e5.forEach(t),tlr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);Gv=n(pe,"LI",{});var exe=s(Gv);V_e=n(exe,"STRONG",{});var Opt=s(V_e);alr=r(Opt,"bert"),Opt.forEach(t),nlr=r(exe," \u2014 "),$V=n(exe,"A",{href:!0});var Vpt=s($V);slr=r(Vpt,"TFBertLMHeadModel"),Vpt.forEach(t),llr=r(exe," (BERT model)"),exe.forEach(t),ilr=i(pe),Ov=n(pe,"LI",{});var oxe=s(Ov);X_e=n(oxe,"STRONG",{});var Xpt=s(X_e);dlr=r(Xpt,"camembert"),Xpt.forEach(t),clr=r(oxe," \u2014 "),IV=n(oxe,"A",{href:!0});var zpt=s(IV);flr=r(zpt,"TFCamembertForCausalLM"),zpt.forEach(t),mlr=r(oxe," (CamemBERT model)"),oxe.forEach(t),glr=i(pe),Vv=n(pe,"LI",{});var rxe=s(Vv);z_e=n(rxe,"STRONG",{});var Qpt=s(z_e);hlr=r(Qpt,"ctrl"),Qpt.forEach(t),plr=r(rxe," \u2014 "),qV=n(rxe,"A",{href:!0});var Wpt=s(qV);_lr=r(Wpt,"TFCTRLLMHeadModel"),Wpt.forEach(t),ulr=r(rxe," (CTRL model)"),rxe.forEach(t),blr=i(pe),Xv=n(pe,"LI",{});var txe=s(Xv);Q_e=n(txe,"STRONG",{});var Hpt=s(Q_e);Flr=r(Hpt,"gpt2"),Hpt.forEach(t),vlr=r(txe," \u2014 "),NV=n(txe,"A",{href:!0});var Upt=s(NV);Tlr=r(Upt,"TFGPT2LMHeadModel"),Upt.forEach(t),Mlr=r(txe," (OpenAI GPT-2 model)"),txe.forEach(t),Elr=i(pe),zv=n(pe,"LI",{});var axe=s(zv);W_e=n(axe,"STRONG",{});var Jpt=s(W_e);Clr=r(Jpt,"gptj"),Jpt.forEach(t),wlr=r(axe," \u2014 "),jV=n(axe,"A",{href:!0});var Ypt=s(jV);Alr=r(Ypt,"TFGPTJForCausalLM"),Ypt.forEach(t),ylr=r(axe," (GPT-J model)"),axe.forEach(t),Llr=i(pe),Qv=n(pe,"LI",{});var nxe=s(Qv);H_e=n(nxe,"STRONG",{});var Kpt=s(H_e);xlr=r(Kpt,"openai-gpt"),Kpt.forEach(t),klr=r(nxe," \u2014 "),DV=n(nxe,"A",{href:!0});var Zpt=s(DV);Slr=r(Zpt,"TFOpenAIGPTLMHeadModel"),Zpt.forEach(t),Rlr=r(nxe," (OpenAI GPT model)"),nxe.forEach(t),Blr=i(pe),Wv=n(pe,"LI",{});var sxe=s(Wv);U_e=n(sxe,"STRONG",{});var e_t=s(U_e);Plr=r(e_t,"rembert"),e_t.forEach(t),$lr=r(sxe," \u2014 "),GV=n(sxe,"A",{href:!0});var o_t=s(GV);Ilr=r(o_t,"TFRemBertForCausalLM"),o_t.forEach(t),qlr=r(sxe," (RemBERT model)"),sxe.forEach(t),Nlr=i(pe),Hv=n(pe,"LI",{});var lxe=s(Hv);J_e=n(lxe,"STRONG",{});var r_t=s(J_e);jlr=r(r_t,"roberta"),r_t.forEach(t),Dlr=r(lxe," \u2014 "),OV=n(lxe,"A",{href:!0});var t_t=s(OV);Glr=r(t_t,"TFRobertaForCausalLM"),t_t.forEach(t),Olr=r(lxe," (RoBERTa model)"),lxe.forEach(t),Vlr=i(pe),Uv=n(pe,"LI",{});var ixe=s(Uv);Y_e=n(ixe,"STRONG",{});var a_t=s(Y_e);Xlr=r(a_t,"roformer"),a_t.forEach(t),zlr=r(ixe," \u2014 "),VV=n(ixe,"A",{href:!0});var n_t=s(VV);Qlr=r(n_t,"TFRoFormerForCausalLM"),n_t.forEach(t),Wlr=r(ixe," (RoFormer model)"),ixe.forEach(t),Hlr=i(pe),Jv=n(pe,"LI",{});var dxe=s(Jv);K_e=n(dxe,"STRONG",{});var s_t=s(K_e);Ulr=r(s_t,"transfo-xl"),s_t.forEach(t),Jlr=r(dxe," \u2014 "),XV=n(dxe,"A",{href:!0});var l_t=s(XV);Ylr=r(l_t,"TFTransfoXLLMHeadModel"),l_t.forEach(t),Klr=r(dxe," (Transformer-XL model)"),dxe.forEach(t),Zlr=i(pe),Yv=n(pe,"LI",{});var cxe=s(Yv);Z_e=n(cxe,"STRONG",{});var i_t=s(Z_e);eir=r(i_t,"xlm"),i_t.forEach(t),oir=r(cxe," \u2014 "),zV=n(cxe,"A",{href:!0});var d_t=s(zV);rir=r(d_t,"TFXLMWithLMHeadModel"),d_t.forEach(t),tir=r(cxe," (XLM model)"),cxe.forEach(t),air=i(pe),Kv=n(pe,"LI",{});var fxe=s(Kv);eue=n(fxe,"STRONG",{});var c_t=s(eue);nir=r(c_t,"xlnet"),c_t.forEach(t),sir=r(fxe," \u2014 "),QV=n(fxe,"A",{href:!0});var f_t=s(QV);lir=r(f_t,"TFXLNetLMHeadModel"),f_t.forEach(t),iir=r(fxe," (XLNet model)"),fxe.forEach(t),pe.forEach(t),dir=i(ua),oue=n(ua,"P",{});var m_t=s(oue);cir=r(m_t,"Examples:"),m_t.forEach(t),fir=i(ua),m(EA.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),ABe=i(c),Mc=n(c,"H2",{class:!0});var I$e=s(Mc);Zv=n(I$e,"A",{id:!0,class:!0,href:!0});var g_t=s(Zv);rue=n(g_t,"SPAN",{});var h_t=s(rue);m(CA.$$.fragment,h_t),h_t.forEach(t),g_t.forEach(t),mir=i(I$e),tue=n(I$e,"SPAN",{});var p_t=s(tue);gir=r(p_t,"TFAutoModelForImageClassification"),p_t.forEach(t),I$e.forEach(t),yBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(wA.$$.fragment,zl),hir=i(zl),Ec=n(zl,"P",{});var fJ=s(Ec);pir=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WV=n(fJ,"A",{href:!0});var __t=s(WV);_ir=r(__t,"from_pretrained()"),__t.forEach(t),uir=r(fJ," class method or the "),HV=n(fJ,"A",{href:!0});var u_t=s(HV);bir=r(u_t,"from_config()"),u_t.forEach(t),Fir=r(fJ,` class
method.`),fJ.forEach(t),vir=i(zl),AA=n(zl,"P",{});var q$e=s(AA);Tir=r(q$e,"This class cannot be instantiated directly using "),aue=n(q$e,"CODE",{});var b_t=s(aue);Mir=r(b_t,"__init__()"),b_t.forEach(t),Eir=r(q$e," (throws an error)."),q$e.forEach(t),Cir=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(yA.$$.fragment,Ql),wir=i(Ql),nue=n(Ql,"P",{});var F_t=s(nue);Air=r(F_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F_t.forEach(t),yir=i(Ql),Cc=n(Ql,"P",{});var mJ=s(Cc);Lir=r(mJ,`Note:
Loading a model from its configuration file does `),sue=n(mJ,"STRONG",{});var v_t=s(sue);xir=r(v_t,"not"),v_t.forEach(t),kir=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(mJ,"A",{href:!0});var T_t=s(UV);Sir=r(T_t,"from_pretrained()"),T_t.forEach(t),Rir=r(mJ," to load the model weights."),mJ.forEach(t),Bir=i(Ql),lue=n(Ql,"P",{});var M_t=s(lue);Pir=r(M_t,"Examples:"),M_t.forEach(t),$ir=i(Ql),m(LA.$$.fragment,Ql),Ql.forEach(t),Iir=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(xA.$$.fragment,ba),qir=i(ba),iue=n(ba,"P",{});var E_t=s(iue);Nir=r(E_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E_t.forEach(t),jir=i(ba),Fn=n(ba,"P",{});var o5=s(Fn);Dir=r(o5,"The model class to instantiate is selected based on the "),due=n(o5,"CODE",{});var C_t=s(due);Gir=r(C_t,"model_type"),C_t.forEach(t),Oir=r(o5,` property of the config object (either
passed as an argument or loaded from `),cue=n(o5,"CODE",{});var w_t=s(cue);Vir=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),Xir=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(o5,"CODE",{});var A_t=s(fue);zir=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),Qir=r(o5,":"),o5.forEach(t),Wir=i(ba),kA=n(ba,"UL",{});var N$e=s(kA);e0=n(N$e,"LI",{});var mxe=s(e0);mue=n(mxe,"STRONG",{});var y_t=s(mue);Hir=r(y_t,"convnext"),y_t.forEach(t),Uir=r(mxe," \u2014 "),JV=n(mxe,"A",{href:!0});var L_t=s(JV);Jir=r(L_t,"TFConvNextForImageClassification"),L_t.forEach(t),Yir=r(mxe," (ConvNext model)"),mxe.forEach(t),Kir=i(N$e),o0=n(N$e,"LI",{});var gxe=s(o0);gue=n(gxe,"STRONG",{});var x_t=s(gue);Zir=r(x_t,"vit"),x_t.forEach(t),edr=r(gxe," \u2014 "),YV=n(gxe,"A",{href:!0});var k_t=s(YV);odr=r(k_t,"TFViTForImageClassification"),k_t.forEach(t),rdr=r(gxe," (ViT model)"),gxe.forEach(t),N$e.forEach(t),tdr=i(ba),hue=n(ba,"P",{});var S_t=s(hue);adr=r(S_t,"Examples:"),S_t.forEach(t),ndr=i(ba),m(SA.$$.fragment,ba),ba.forEach(t),zl.forEach(t),LBe=i(c),wc=n(c,"H2",{class:!0});var j$e=s(wc);r0=n(j$e,"A",{id:!0,class:!0,href:!0});var R_t=s(r0);pue=n(R_t,"SPAN",{});var B_t=s(pue);m(RA.$$.fragment,B_t),B_t.forEach(t),R_t.forEach(t),sdr=i(j$e),_ue=n(j$e,"SPAN",{});var P_t=s(_ue);ldr=r(P_t,"TFAutoModelForMaskedLM"),P_t.forEach(t),j$e.forEach(t),xBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(BA.$$.fragment,Wl),idr=i(Wl),Ac=n(Wl,"P",{});var gJ=s(Ac);ddr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KV=n(gJ,"A",{href:!0});var $_t=s(KV);cdr=r($_t,"from_pretrained()"),$_t.forEach(t),fdr=r(gJ," class method or the "),ZV=n(gJ,"A",{href:!0});var I_t=s(ZV);mdr=r(I_t,"from_config()"),I_t.forEach(t),gdr=r(gJ,` class
method.`),gJ.forEach(t),hdr=i(Wl),PA=n(Wl,"P",{});var D$e=s(PA);pdr=r(D$e,"This class cannot be instantiated directly using "),uue=n(D$e,"CODE",{});var q_t=s(uue);_dr=r(q_t,"__init__()"),q_t.forEach(t),udr=r(D$e," (throws an error)."),D$e.forEach(t),bdr=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m($A.$$.fragment,Hl),Fdr=i(Hl),bue=n(Hl,"P",{});var N_t=s(bue);vdr=r(N_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N_t.forEach(t),Tdr=i(Hl),yc=n(Hl,"P",{});var hJ=s(yc);Mdr=r(hJ,`Note:
Loading a model from its configuration file does `),Fue=n(hJ,"STRONG",{});var j_t=s(Fue);Edr=r(j_t,"not"),j_t.forEach(t),Cdr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(hJ,"A",{href:!0});var D_t=s(eX);wdr=r(D_t,"from_pretrained()"),D_t.forEach(t),Adr=r(hJ," to load the model weights."),hJ.forEach(t),ydr=i(Hl),vue=n(Hl,"P",{});var G_t=s(vue);Ldr=r(G_t,"Examples:"),G_t.forEach(t),xdr=i(Hl),m(IA.$$.fragment,Hl),Hl.forEach(t),kdr=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(qA.$$.fragment,Fa),Sdr=i(Fa),Tue=n(Fa,"P",{});var O_t=s(Tue);Rdr=r(O_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O_t.forEach(t),Bdr=i(Fa),vn=n(Fa,"P",{});var r5=s(vn);Pdr=r(r5,"The model class to instantiate is selected based on the "),Mue=n(r5,"CODE",{});var V_t=s(Mue);$dr=r(V_t,"model_type"),V_t.forEach(t),Idr=r(r5,` property of the config object (either
passed as an argument or loaded from `),Eue=n(r5,"CODE",{});var X_t=s(Eue);qdr=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),Ndr=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(r5,"CODE",{});var z_t=s(Cue);jdr=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),Ddr=r(r5,":"),r5.forEach(t),Gdr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);t0=n(oe,"LI",{});var hxe=s(t0);wue=n(hxe,"STRONG",{});var Q_t=s(wue);Odr=r(Q_t,"albert"),Q_t.forEach(t),Vdr=r(hxe," \u2014 "),oX=n(hxe,"A",{href:!0});var W_t=s(oX);Xdr=r(W_t,"TFAlbertForMaskedLM"),W_t.forEach(t),zdr=r(hxe," (ALBERT model)"),hxe.forEach(t),Qdr=i(oe),a0=n(oe,"LI",{});var pxe=s(a0);Aue=n(pxe,"STRONG",{});var H_t=s(Aue);Wdr=r(H_t,"bert"),H_t.forEach(t),Hdr=r(pxe," \u2014 "),rX=n(pxe,"A",{href:!0});var U_t=s(rX);Udr=r(U_t,"TFBertForMaskedLM"),U_t.forEach(t),Jdr=r(pxe," (BERT model)"),pxe.forEach(t),Ydr=i(oe),n0=n(oe,"LI",{});var _xe=s(n0);yue=n(_xe,"STRONG",{});var J_t=s(yue);Kdr=r(J_t,"camembert"),J_t.forEach(t),Zdr=r(_xe," \u2014 "),tX=n(_xe,"A",{href:!0});var Y_t=s(tX);ecr=r(Y_t,"TFCamembertForMaskedLM"),Y_t.forEach(t),ocr=r(_xe," (CamemBERT model)"),_xe.forEach(t),rcr=i(oe),s0=n(oe,"LI",{});var uxe=s(s0);Lue=n(uxe,"STRONG",{});var K_t=s(Lue);tcr=r(K_t,"convbert"),K_t.forEach(t),acr=r(uxe," \u2014 "),aX=n(uxe,"A",{href:!0});var Z_t=s(aX);ncr=r(Z_t,"TFConvBertForMaskedLM"),Z_t.forEach(t),scr=r(uxe," (ConvBERT model)"),uxe.forEach(t),lcr=i(oe),l0=n(oe,"LI",{});var bxe=s(l0);xue=n(bxe,"STRONG",{});var eut=s(xue);icr=r(eut,"deberta"),eut.forEach(t),dcr=r(bxe," \u2014 "),nX=n(bxe,"A",{href:!0});var out=s(nX);ccr=r(out,"TFDebertaForMaskedLM"),out.forEach(t),fcr=r(bxe," (DeBERTa model)"),bxe.forEach(t),mcr=i(oe),i0=n(oe,"LI",{});var Fxe=s(i0);kue=n(Fxe,"STRONG",{});var rut=s(kue);gcr=r(rut,"deberta-v2"),rut.forEach(t),hcr=r(Fxe," \u2014 "),sX=n(Fxe,"A",{href:!0});var tut=s(sX);pcr=r(tut,"TFDebertaV2ForMaskedLM"),tut.forEach(t),_cr=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),ucr=i(oe),d0=n(oe,"LI",{});var vxe=s(d0);Sue=n(vxe,"STRONG",{});var aut=s(Sue);bcr=r(aut,"distilbert"),aut.forEach(t),Fcr=r(vxe," \u2014 "),lX=n(vxe,"A",{href:!0});var nut=s(lX);vcr=r(nut,"TFDistilBertForMaskedLM"),nut.forEach(t),Tcr=r(vxe," (DistilBERT model)"),vxe.forEach(t),Mcr=i(oe),c0=n(oe,"LI",{});var Txe=s(c0);Rue=n(Txe,"STRONG",{});var sut=s(Rue);Ecr=r(sut,"electra"),sut.forEach(t),Ccr=r(Txe," \u2014 "),iX=n(Txe,"A",{href:!0});var lut=s(iX);wcr=r(lut,"TFElectraForMaskedLM"),lut.forEach(t),Acr=r(Txe," (ELECTRA model)"),Txe.forEach(t),ycr=i(oe),f0=n(oe,"LI",{});var Mxe=s(f0);Bue=n(Mxe,"STRONG",{});var iut=s(Bue);Lcr=r(iut,"flaubert"),iut.forEach(t),xcr=r(Mxe," \u2014 "),dX=n(Mxe,"A",{href:!0});var dut=s(dX);kcr=r(dut,"TFFlaubertWithLMHeadModel"),dut.forEach(t),Scr=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),Rcr=i(oe),m0=n(oe,"LI",{});var Exe=s(m0);Pue=n(Exe,"STRONG",{});var cut=s(Pue);Bcr=r(cut,"funnel"),cut.forEach(t),Pcr=r(Exe," \u2014 "),cX=n(Exe,"A",{href:!0});var fut=s(cX);$cr=r(fut,"TFFunnelForMaskedLM"),fut.forEach(t),Icr=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),qcr=i(oe),g0=n(oe,"LI",{});var Cxe=s(g0);$ue=n(Cxe,"STRONG",{});var mut=s($ue);Ncr=r(mut,"layoutlm"),mut.forEach(t),jcr=r(Cxe," \u2014 "),fX=n(Cxe,"A",{href:!0});var gut=s(fX);Dcr=r(gut,"TFLayoutLMForMaskedLM"),gut.forEach(t),Gcr=r(Cxe," (LayoutLM model)"),Cxe.forEach(t),Ocr=i(oe),h0=n(oe,"LI",{});var wxe=s(h0);Iue=n(wxe,"STRONG",{});var hut=s(Iue);Vcr=r(hut,"longformer"),hut.forEach(t),Xcr=r(wxe," \u2014 "),mX=n(wxe,"A",{href:!0});var put=s(mX);zcr=r(put,"TFLongformerForMaskedLM"),put.forEach(t),Qcr=r(wxe," (Longformer model)"),wxe.forEach(t),Wcr=i(oe),p0=n(oe,"LI",{});var Axe=s(p0);que=n(Axe,"STRONG",{});var _ut=s(que);Hcr=r(_ut,"mobilebert"),_ut.forEach(t),Ucr=r(Axe," \u2014 "),gX=n(Axe,"A",{href:!0});var uut=s(gX);Jcr=r(uut,"TFMobileBertForMaskedLM"),uut.forEach(t),Ycr=r(Axe," (MobileBERT model)"),Axe.forEach(t),Kcr=i(oe),_0=n(oe,"LI",{});var yxe=s(_0);Nue=n(yxe,"STRONG",{});var but=s(Nue);Zcr=r(but,"mpnet"),but.forEach(t),efr=r(yxe," \u2014 "),hX=n(yxe,"A",{href:!0});var Fut=s(hX);ofr=r(Fut,"TFMPNetForMaskedLM"),Fut.forEach(t),rfr=r(yxe," (MPNet model)"),yxe.forEach(t),tfr=i(oe),u0=n(oe,"LI",{});var Lxe=s(u0);jue=n(Lxe,"STRONG",{});var vut=s(jue);afr=r(vut,"rembert"),vut.forEach(t),nfr=r(Lxe," \u2014 "),pX=n(Lxe,"A",{href:!0});var Tut=s(pX);sfr=r(Tut,"TFRemBertForMaskedLM"),Tut.forEach(t),lfr=r(Lxe," (RemBERT model)"),Lxe.forEach(t),ifr=i(oe),b0=n(oe,"LI",{});var xxe=s(b0);Due=n(xxe,"STRONG",{});var Mut=s(Due);dfr=r(Mut,"roberta"),Mut.forEach(t),cfr=r(xxe," \u2014 "),_X=n(xxe,"A",{href:!0});var Eut=s(_X);ffr=r(Eut,"TFRobertaForMaskedLM"),Eut.forEach(t),mfr=r(xxe," (RoBERTa model)"),xxe.forEach(t),gfr=i(oe),F0=n(oe,"LI",{});var kxe=s(F0);Gue=n(kxe,"STRONG",{});var Cut=s(Gue);hfr=r(Cut,"roformer"),Cut.forEach(t),pfr=r(kxe," \u2014 "),uX=n(kxe,"A",{href:!0});var wut=s(uX);_fr=r(wut,"TFRoFormerForMaskedLM"),wut.forEach(t),ufr=r(kxe," (RoFormer model)"),kxe.forEach(t),bfr=i(oe),v0=n(oe,"LI",{});var Sxe=s(v0);Oue=n(Sxe,"STRONG",{});var Aut=s(Oue);Ffr=r(Aut,"tapas"),Aut.forEach(t),vfr=r(Sxe," \u2014 "),bX=n(Sxe,"A",{href:!0});var yut=s(bX);Tfr=r(yut,"TFTapasForMaskedLM"),yut.forEach(t),Mfr=r(Sxe," (TAPAS model)"),Sxe.forEach(t),Efr=i(oe),T0=n(oe,"LI",{});var Rxe=s(T0);Vue=n(Rxe,"STRONG",{});var Lut=s(Vue);Cfr=r(Lut,"xlm"),Lut.forEach(t),wfr=r(Rxe," \u2014 "),FX=n(Rxe,"A",{href:!0});var xut=s(FX);Afr=r(xut,"TFXLMWithLMHeadModel"),xut.forEach(t),yfr=r(Rxe," (XLM model)"),Rxe.forEach(t),Lfr=i(oe),M0=n(oe,"LI",{});var Bxe=s(M0);Xue=n(Bxe,"STRONG",{});var kut=s(Xue);xfr=r(kut,"xlm-roberta"),kut.forEach(t),kfr=r(Bxe," \u2014 "),vX=n(Bxe,"A",{href:!0});var Sut=s(vX);Sfr=r(Sut,"TFXLMRobertaForMaskedLM"),Sut.forEach(t),Rfr=r(Bxe," (XLM-RoBERTa model)"),Bxe.forEach(t),oe.forEach(t),Bfr=i(Fa),zue=n(Fa,"P",{});var Rut=s(zue);Pfr=r(Rut,"Examples:"),Rut.forEach(t),$fr=i(Fa),m(NA.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),kBe=i(c),Lc=n(c,"H2",{class:!0});var G$e=s(Lc);E0=n(G$e,"A",{id:!0,class:!0,href:!0});var But=s(E0);Que=n(But,"SPAN",{});var Put=s(Que);m(jA.$$.fragment,Put),Put.forEach(t),But.forEach(t),Ifr=i(G$e),Wue=n(G$e,"SPAN",{});var $ut=s(Wue);qfr=r($ut,"TFAutoModelForSeq2SeqLM"),$ut.forEach(t),G$e.forEach(t),SBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(DA.$$.fragment,Ul),Nfr=i(Ul),xc=n(Ul,"P",{});var pJ=s(xc);jfr=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TX=n(pJ,"A",{href:!0});var Iut=s(TX);Dfr=r(Iut,"from_pretrained()"),Iut.forEach(t),Gfr=r(pJ," class method or the "),MX=n(pJ,"A",{href:!0});var qut=s(MX);Ofr=r(qut,"from_config()"),qut.forEach(t),Vfr=r(pJ,` class
method.`),pJ.forEach(t),Xfr=i(Ul),GA=n(Ul,"P",{});var O$e=s(GA);zfr=r(O$e,"This class cannot be instantiated directly using "),Hue=n(O$e,"CODE",{});var Nut=s(Hue);Qfr=r(Nut,"__init__()"),Nut.forEach(t),Wfr=r(O$e," (throws an error)."),O$e.forEach(t),Hfr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(OA.$$.fragment,Jl),Ufr=i(Jl),Uue=n(Jl,"P",{});var jut=s(Uue);Jfr=r(jut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jut.forEach(t),Yfr=i(Jl),kc=n(Jl,"P",{});var _J=s(kc);Kfr=r(_J,`Note:
Loading a model from its configuration file does `),Jue=n(_J,"STRONG",{});var Dut=s(Jue);Zfr=r(Dut,"not"),Dut.forEach(t),emr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(_J,"A",{href:!0});var Gut=s(EX);omr=r(Gut,"from_pretrained()"),Gut.forEach(t),rmr=r(_J," to load the model weights."),_J.forEach(t),tmr=i(Jl),Yue=n(Jl,"P",{});var Out=s(Yue);amr=r(Out,"Examples:"),Out.forEach(t),nmr=i(Jl),m(VA.$$.fragment,Jl),Jl.forEach(t),smr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(XA.$$.fragment,va),lmr=i(va),Kue=n(va,"P",{});var Vut=s(Kue);imr=r(Vut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vut.forEach(t),dmr=i(va),Tn=n(va,"P",{});var t5=s(Tn);cmr=r(t5,"The model class to instantiate is selected based on the "),Zue=n(t5,"CODE",{});var Xut=s(Zue);fmr=r(Xut,"model_type"),Xut.forEach(t),mmr=r(t5,` property of the config object (either
passed as an argument or loaded from `),e1e=n(t5,"CODE",{});var zut=s(e1e);gmr=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),hmr=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(t5,"CODE",{});var Qut=s(o1e);pmr=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),_mr=r(t5,":"),t5.forEach(t),umr=i(va),be=n(va,"UL",{});var we=s(be);C0=n(we,"LI",{});var Pxe=s(C0);r1e=n(Pxe,"STRONG",{});var Wut=s(r1e);bmr=r(Wut,"bart"),Wut.forEach(t),Fmr=r(Pxe," \u2014 "),CX=n(Pxe,"A",{href:!0});var Hut=s(CX);vmr=r(Hut,"TFBartForConditionalGeneration"),Hut.forEach(t),Tmr=r(Pxe," (BART model)"),Pxe.forEach(t),Mmr=i(we),w0=n(we,"LI",{});var $xe=s(w0);t1e=n($xe,"STRONG",{});var Uut=s(t1e);Emr=r(Uut,"blenderbot"),Uut.forEach(t),Cmr=r($xe," \u2014 "),wX=n($xe,"A",{href:!0});var Jut=s(wX);wmr=r(Jut,"TFBlenderbotForConditionalGeneration"),Jut.forEach(t),Amr=r($xe," (Blenderbot model)"),$xe.forEach(t),ymr=i(we),A0=n(we,"LI",{});var Ixe=s(A0);a1e=n(Ixe,"STRONG",{});var Yut=s(a1e);Lmr=r(Yut,"blenderbot-small"),Yut.forEach(t),xmr=r(Ixe," \u2014 "),AX=n(Ixe,"A",{href:!0});var Kut=s(AX);kmr=r(Kut,"TFBlenderbotSmallForConditionalGeneration"),Kut.forEach(t),Smr=r(Ixe," (BlenderbotSmall model)"),Ixe.forEach(t),Rmr=i(we),y0=n(we,"LI",{});var qxe=s(y0);n1e=n(qxe,"STRONG",{});var Zut=s(n1e);Bmr=r(Zut,"encoder-decoder"),Zut.forEach(t),Pmr=r(qxe," \u2014 "),yX=n(qxe,"A",{href:!0});var e1t=s(yX);$mr=r(e1t,"TFEncoderDecoderModel"),e1t.forEach(t),Imr=r(qxe," (Encoder decoder model)"),qxe.forEach(t),qmr=i(we),L0=n(we,"LI",{});var Nxe=s(L0);s1e=n(Nxe,"STRONG",{});var o1t=s(s1e);Nmr=r(o1t,"led"),o1t.forEach(t),jmr=r(Nxe," \u2014 "),LX=n(Nxe,"A",{href:!0});var r1t=s(LX);Dmr=r(r1t,"TFLEDForConditionalGeneration"),r1t.forEach(t),Gmr=r(Nxe," (LED model)"),Nxe.forEach(t),Omr=i(we),x0=n(we,"LI",{});var jxe=s(x0);l1e=n(jxe,"STRONG",{});var t1t=s(l1e);Vmr=r(t1t,"marian"),t1t.forEach(t),Xmr=r(jxe," \u2014 "),xX=n(jxe,"A",{href:!0});var a1t=s(xX);zmr=r(a1t,"TFMarianMTModel"),a1t.forEach(t),Qmr=r(jxe," (Marian model)"),jxe.forEach(t),Wmr=i(we),k0=n(we,"LI",{});var Dxe=s(k0);i1e=n(Dxe,"STRONG",{});var n1t=s(i1e);Hmr=r(n1t,"mbart"),n1t.forEach(t),Umr=r(Dxe," \u2014 "),kX=n(Dxe,"A",{href:!0});var s1t=s(kX);Jmr=r(s1t,"TFMBartForConditionalGeneration"),s1t.forEach(t),Ymr=r(Dxe," (mBART model)"),Dxe.forEach(t),Kmr=i(we),S0=n(we,"LI",{});var Gxe=s(S0);d1e=n(Gxe,"STRONG",{});var l1t=s(d1e);Zmr=r(l1t,"mt5"),l1t.forEach(t),egr=r(Gxe," \u2014 "),SX=n(Gxe,"A",{href:!0});var i1t=s(SX);ogr=r(i1t,"TFMT5ForConditionalGeneration"),i1t.forEach(t),rgr=r(Gxe," (mT5 model)"),Gxe.forEach(t),tgr=i(we),R0=n(we,"LI",{});var Oxe=s(R0);c1e=n(Oxe,"STRONG",{});var d1t=s(c1e);agr=r(d1t,"pegasus"),d1t.forEach(t),ngr=r(Oxe," \u2014 "),RX=n(Oxe,"A",{href:!0});var c1t=s(RX);sgr=r(c1t,"TFPegasusForConditionalGeneration"),c1t.forEach(t),lgr=r(Oxe," (Pegasus model)"),Oxe.forEach(t),igr=i(we),B0=n(we,"LI",{});var Vxe=s(B0);f1e=n(Vxe,"STRONG",{});var f1t=s(f1e);dgr=r(f1t,"t5"),f1t.forEach(t),cgr=r(Vxe," \u2014 "),BX=n(Vxe,"A",{href:!0});var m1t=s(BX);fgr=r(m1t,"TFT5ForConditionalGeneration"),m1t.forEach(t),mgr=r(Vxe," (T5 model)"),Vxe.forEach(t),we.forEach(t),ggr=i(va),m1e=n(va,"P",{});var g1t=s(m1e);hgr=r(g1t,"Examples:"),g1t.forEach(t),pgr=i(va),m(zA.$$.fragment,va),va.forEach(t),Ul.forEach(t),RBe=i(c),Sc=n(c,"H2",{class:!0});var V$e=s(Sc);P0=n(V$e,"A",{id:!0,class:!0,href:!0});var h1t=s(P0);g1e=n(h1t,"SPAN",{});var p1t=s(g1e);m(QA.$$.fragment,p1t),p1t.forEach(t),h1t.forEach(t),_gr=i(V$e),h1e=n(V$e,"SPAN",{});var _1t=s(h1e);ugr=r(_1t,"TFAutoModelForSequenceClassification"),_1t.forEach(t),V$e.forEach(t),BBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(WA.$$.fragment,Yl),bgr=i(Yl),Rc=n(Yl,"P",{});var uJ=s(Rc);Fgr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PX=n(uJ,"A",{href:!0});var u1t=s(PX);vgr=r(u1t,"from_pretrained()"),u1t.forEach(t),Tgr=r(uJ," class method or the "),$X=n(uJ,"A",{href:!0});var b1t=s($X);Mgr=r(b1t,"from_config()"),b1t.forEach(t),Egr=r(uJ,` class
method.`),uJ.forEach(t),Cgr=i(Yl),HA=n(Yl,"P",{});var X$e=s(HA);wgr=r(X$e,"This class cannot be instantiated directly using "),p1e=n(X$e,"CODE",{});var F1t=s(p1e);Agr=r(F1t,"__init__()"),F1t.forEach(t),ygr=r(X$e," (throws an error)."),X$e.forEach(t),Lgr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(UA.$$.fragment,Kl),xgr=i(Kl),_1e=n(Kl,"P",{});var v1t=s(_1e);kgr=r(v1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v1t.forEach(t),Sgr=i(Kl),Bc=n(Kl,"P",{});var bJ=s(Bc);Rgr=r(bJ,`Note:
Loading a model from its configuration file does `),u1e=n(bJ,"STRONG",{});var T1t=s(u1e);Bgr=r(T1t,"not"),T1t.forEach(t),Pgr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(bJ,"A",{href:!0});var M1t=s(IX);$gr=r(M1t,"from_pretrained()"),M1t.forEach(t),Igr=r(bJ," to load the model weights."),bJ.forEach(t),qgr=i(Kl),b1e=n(Kl,"P",{});var E1t=s(b1e);Ngr=r(E1t,"Examples:"),E1t.forEach(t),jgr=i(Kl),m(JA.$$.fragment,Kl),Kl.forEach(t),Dgr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(YA.$$.fragment,Ta),Ggr=i(Ta),F1e=n(Ta,"P",{});var C1t=s(F1e);Ogr=r(C1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C1t.forEach(t),Vgr=i(Ta),Mn=n(Ta,"P",{});var a5=s(Mn);Xgr=r(a5,"The model class to instantiate is selected based on the "),v1e=n(a5,"CODE",{});var w1t=s(v1e);zgr=r(w1t,"model_type"),w1t.forEach(t),Qgr=r(a5,` property of the config object (either
passed as an argument or loaded from `),T1e=n(a5,"CODE",{});var A1t=s(T1e);Wgr=r(A1t,"pretrained_model_name_or_path"),A1t.forEach(t),Hgr=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(a5,"CODE",{});var y1t=s(M1e);Ugr=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),Jgr=r(a5,":"),a5.forEach(t),Ygr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);$0=n(Q,"LI",{});var Xxe=s($0);E1e=n(Xxe,"STRONG",{});var L1t=s(E1e);Kgr=r(L1t,"albert"),L1t.forEach(t),Zgr=r(Xxe," \u2014 "),qX=n(Xxe,"A",{href:!0});var x1t=s(qX);ehr=r(x1t,"TFAlbertForSequenceClassification"),x1t.forEach(t),ohr=r(Xxe," (ALBERT model)"),Xxe.forEach(t),rhr=i(Q),I0=n(Q,"LI",{});var zxe=s(I0);C1e=n(zxe,"STRONG",{});var k1t=s(C1e);thr=r(k1t,"bert"),k1t.forEach(t),ahr=r(zxe," \u2014 "),NX=n(zxe,"A",{href:!0});var S1t=s(NX);nhr=r(S1t,"TFBertForSequenceClassification"),S1t.forEach(t),shr=r(zxe," (BERT model)"),zxe.forEach(t),lhr=i(Q),q0=n(Q,"LI",{});var Qxe=s(q0);w1e=n(Qxe,"STRONG",{});var R1t=s(w1e);ihr=r(R1t,"camembert"),R1t.forEach(t),dhr=r(Qxe," \u2014 "),jX=n(Qxe,"A",{href:!0});var B1t=s(jX);chr=r(B1t,"TFCamembertForSequenceClassification"),B1t.forEach(t),fhr=r(Qxe," (CamemBERT model)"),Qxe.forEach(t),mhr=i(Q),N0=n(Q,"LI",{});var Wxe=s(N0);A1e=n(Wxe,"STRONG",{});var P1t=s(A1e);ghr=r(P1t,"convbert"),P1t.forEach(t),hhr=r(Wxe," \u2014 "),DX=n(Wxe,"A",{href:!0});var $1t=s(DX);phr=r($1t,"TFConvBertForSequenceClassification"),$1t.forEach(t),_hr=r(Wxe," (ConvBERT model)"),Wxe.forEach(t),uhr=i(Q),j0=n(Q,"LI",{});var Hxe=s(j0);y1e=n(Hxe,"STRONG",{});var I1t=s(y1e);bhr=r(I1t,"ctrl"),I1t.forEach(t),Fhr=r(Hxe," \u2014 "),GX=n(Hxe,"A",{href:!0});var q1t=s(GX);vhr=r(q1t,"TFCTRLForSequenceClassification"),q1t.forEach(t),Thr=r(Hxe," (CTRL model)"),Hxe.forEach(t),Mhr=i(Q),D0=n(Q,"LI",{});var Uxe=s(D0);L1e=n(Uxe,"STRONG",{});var N1t=s(L1e);Ehr=r(N1t,"deberta"),N1t.forEach(t),Chr=r(Uxe," \u2014 "),OX=n(Uxe,"A",{href:!0});var j1t=s(OX);whr=r(j1t,"TFDebertaForSequenceClassification"),j1t.forEach(t),Ahr=r(Uxe," (DeBERTa model)"),Uxe.forEach(t),yhr=i(Q),G0=n(Q,"LI",{});var Jxe=s(G0);x1e=n(Jxe,"STRONG",{});var D1t=s(x1e);Lhr=r(D1t,"deberta-v2"),D1t.forEach(t),xhr=r(Jxe," \u2014 "),VX=n(Jxe,"A",{href:!0});var G1t=s(VX);khr=r(G1t,"TFDebertaV2ForSequenceClassification"),G1t.forEach(t),Shr=r(Jxe," (DeBERTa-v2 model)"),Jxe.forEach(t),Rhr=i(Q),O0=n(Q,"LI",{});var Yxe=s(O0);k1e=n(Yxe,"STRONG",{});var O1t=s(k1e);Bhr=r(O1t,"distilbert"),O1t.forEach(t),Phr=r(Yxe," \u2014 "),XX=n(Yxe,"A",{href:!0});var V1t=s(XX);$hr=r(V1t,"TFDistilBertForSequenceClassification"),V1t.forEach(t),Ihr=r(Yxe," (DistilBERT model)"),Yxe.forEach(t),qhr=i(Q),V0=n(Q,"LI",{});var Kxe=s(V0);S1e=n(Kxe,"STRONG",{});var X1t=s(S1e);Nhr=r(X1t,"electra"),X1t.forEach(t),jhr=r(Kxe," \u2014 "),zX=n(Kxe,"A",{href:!0});var z1t=s(zX);Dhr=r(z1t,"TFElectraForSequenceClassification"),z1t.forEach(t),Ghr=r(Kxe," (ELECTRA model)"),Kxe.forEach(t),Ohr=i(Q),X0=n(Q,"LI",{});var Zxe=s(X0);R1e=n(Zxe,"STRONG",{});var Q1t=s(R1e);Vhr=r(Q1t,"flaubert"),Q1t.forEach(t),Xhr=r(Zxe," \u2014 "),QX=n(Zxe,"A",{href:!0});var W1t=s(QX);zhr=r(W1t,"TFFlaubertForSequenceClassification"),W1t.forEach(t),Qhr=r(Zxe," (FlauBERT model)"),Zxe.forEach(t),Whr=i(Q),z0=n(Q,"LI",{});var e9e=s(z0);B1e=n(e9e,"STRONG",{});var H1t=s(B1e);Hhr=r(H1t,"funnel"),H1t.forEach(t),Uhr=r(e9e," \u2014 "),WX=n(e9e,"A",{href:!0});var U1t=s(WX);Jhr=r(U1t,"TFFunnelForSequenceClassification"),U1t.forEach(t),Yhr=r(e9e," (Funnel Transformer model)"),e9e.forEach(t),Khr=i(Q),Q0=n(Q,"LI",{});var o9e=s(Q0);P1e=n(o9e,"STRONG",{});var J1t=s(P1e);Zhr=r(J1t,"gpt2"),J1t.forEach(t),epr=r(o9e," \u2014 "),HX=n(o9e,"A",{href:!0});var Y1t=s(HX);opr=r(Y1t,"TFGPT2ForSequenceClassification"),Y1t.forEach(t),rpr=r(o9e," (OpenAI GPT-2 model)"),o9e.forEach(t),tpr=i(Q),W0=n(Q,"LI",{});var r9e=s(W0);$1e=n(r9e,"STRONG",{});var K1t=s($1e);apr=r(K1t,"gptj"),K1t.forEach(t),npr=r(r9e," \u2014 "),UX=n(r9e,"A",{href:!0});var Z1t=s(UX);spr=r(Z1t,"TFGPTJForSequenceClassification"),Z1t.forEach(t),lpr=r(r9e," (GPT-J model)"),r9e.forEach(t),ipr=i(Q),H0=n(Q,"LI",{});var t9e=s(H0);I1e=n(t9e,"STRONG",{});var e8t=s(I1e);dpr=r(e8t,"layoutlm"),e8t.forEach(t),cpr=r(t9e," \u2014 "),JX=n(t9e,"A",{href:!0});var o8t=s(JX);fpr=r(o8t,"TFLayoutLMForSequenceClassification"),o8t.forEach(t),mpr=r(t9e," (LayoutLM model)"),t9e.forEach(t),gpr=i(Q),U0=n(Q,"LI",{});var a9e=s(U0);q1e=n(a9e,"STRONG",{});var r8t=s(q1e);hpr=r(r8t,"longformer"),r8t.forEach(t),ppr=r(a9e," \u2014 "),YX=n(a9e,"A",{href:!0});var t8t=s(YX);_pr=r(t8t,"TFLongformerForSequenceClassification"),t8t.forEach(t),upr=r(a9e," (Longformer model)"),a9e.forEach(t),bpr=i(Q),J0=n(Q,"LI",{});var n9e=s(J0);N1e=n(n9e,"STRONG",{});var a8t=s(N1e);Fpr=r(a8t,"mobilebert"),a8t.forEach(t),vpr=r(n9e," \u2014 "),KX=n(n9e,"A",{href:!0});var n8t=s(KX);Tpr=r(n8t,"TFMobileBertForSequenceClassification"),n8t.forEach(t),Mpr=r(n9e," (MobileBERT model)"),n9e.forEach(t),Epr=i(Q),Y0=n(Q,"LI",{});var s9e=s(Y0);j1e=n(s9e,"STRONG",{});var s8t=s(j1e);Cpr=r(s8t,"mpnet"),s8t.forEach(t),wpr=r(s9e," \u2014 "),ZX=n(s9e,"A",{href:!0});var l8t=s(ZX);Apr=r(l8t,"TFMPNetForSequenceClassification"),l8t.forEach(t),ypr=r(s9e," (MPNet model)"),s9e.forEach(t),Lpr=i(Q),K0=n(Q,"LI",{});var l9e=s(K0);D1e=n(l9e,"STRONG",{});var i8t=s(D1e);xpr=r(i8t,"openai-gpt"),i8t.forEach(t),kpr=r(l9e," \u2014 "),ez=n(l9e,"A",{href:!0});var d8t=s(ez);Spr=r(d8t,"TFOpenAIGPTForSequenceClassification"),d8t.forEach(t),Rpr=r(l9e," (OpenAI GPT model)"),l9e.forEach(t),Bpr=i(Q),Z0=n(Q,"LI",{});var i9e=s(Z0);G1e=n(i9e,"STRONG",{});var c8t=s(G1e);Ppr=r(c8t,"rembert"),c8t.forEach(t),$pr=r(i9e," \u2014 "),oz=n(i9e,"A",{href:!0});var f8t=s(oz);Ipr=r(f8t,"TFRemBertForSequenceClassification"),f8t.forEach(t),qpr=r(i9e," (RemBERT model)"),i9e.forEach(t),Npr=i(Q),eT=n(Q,"LI",{});var d9e=s(eT);O1e=n(d9e,"STRONG",{});var m8t=s(O1e);jpr=r(m8t,"roberta"),m8t.forEach(t),Dpr=r(d9e," \u2014 "),rz=n(d9e,"A",{href:!0});var g8t=s(rz);Gpr=r(g8t,"TFRobertaForSequenceClassification"),g8t.forEach(t),Opr=r(d9e," (RoBERTa model)"),d9e.forEach(t),Vpr=i(Q),oT=n(Q,"LI",{});var c9e=s(oT);V1e=n(c9e,"STRONG",{});var h8t=s(V1e);Xpr=r(h8t,"roformer"),h8t.forEach(t),zpr=r(c9e," \u2014 "),tz=n(c9e,"A",{href:!0});var p8t=s(tz);Qpr=r(p8t,"TFRoFormerForSequenceClassification"),p8t.forEach(t),Wpr=r(c9e," (RoFormer model)"),c9e.forEach(t),Hpr=i(Q),rT=n(Q,"LI",{});var f9e=s(rT);X1e=n(f9e,"STRONG",{});var _8t=s(X1e);Upr=r(_8t,"tapas"),_8t.forEach(t),Jpr=r(f9e," \u2014 "),az=n(f9e,"A",{href:!0});var u8t=s(az);Ypr=r(u8t,"TFTapasForSequenceClassification"),u8t.forEach(t),Kpr=r(f9e," (TAPAS model)"),f9e.forEach(t),Zpr=i(Q),tT=n(Q,"LI",{});var m9e=s(tT);z1e=n(m9e,"STRONG",{});var b8t=s(z1e);e_r=r(b8t,"transfo-xl"),b8t.forEach(t),o_r=r(m9e," \u2014 "),nz=n(m9e,"A",{href:!0});var F8t=s(nz);r_r=r(F8t,"TFTransfoXLForSequenceClassification"),F8t.forEach(t),t_r=r(m9e," (Transformer-XL model)"),m9e.forEach(t),a_r=i(Q),aT=n(Q,"LI",{});var g9e=s(aT);Q1e=n(g9e,"STRONG",{});var v8t=s(Q1e);n_r=r(v8t,"xlm"),v8t.forEach(t),s_r=r(g9e," \u2014 "),sz=n(g9e,"A",{href:!0});var T8t=s(sz);l_r=r(T8t,"TFXLMForSequenceClassification"),T8t.forEach(t),i_r=r(g9e," (XLM model)"),g9e.forEach(t),d_r=i(Q),nT=n(Q,"LI",{});var h9e=s(nT);W1e=n(h9e,"STRONG",{});var M8t=s(W1e);c_r=r(M8t,"xlm-roberta"),M8t.forEach(t),f_r=r(h9e," \u2014 "),lz=n(h9e,"A",{href:!0});var E8t=s(lz);m_r=r(E8t,"TFXLMRobertaForSequenceClassification"),E8t.forEach(t),g_r=r(h9e," (XLM-RoBERTa model)"),h9e.forEach(t),h_r=i(Q),sT=n(Q,"LI",{});var p9e=s(sT);H1e=n(p9e,"STRONG",{});var C8t=s(H1e);p_r=r(C8t,"xlnet"),C8t.forEach(t),__r=r(p9e," \u2014 "),iz=n(p9e,"A",{href:!0});var w8t=s(iz);u_r=r(w8t,"TFXLNetForSequenceClassification"),w8t.forEach(t),b_r=r(p9e," (XLNet model)"),p9e.forEach(t),Q.forEach(t),F_r=i(Ta),U1e=n(Ta,"P",{});var A8t=s(U1e);v_r=r(A8t,"Examples:"),A8t.forEach(t),T_r=i(Ta),m(KA.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),PBe=i(c),Pc=n(c,"H2",{class:!0});var z$e=s(Pc);lT=n(z$e,"A",{id:!0,class:!0,href:!0});var y8t=s(lT);J1e=n(y8t,"SPAN",{});var L8t=s(J1e);m(ZA.$$.fragment,L8t),L8t.forEach(t),y8t.forEach(t),M_r=i(z$e),Y1e=n(z$e,"SPAN",{});var x8t=s(Y1e);E_r=r(x8t,"TFAutoModelForMultipleChoice"),x8t.forEach(t),z$e.forEach(t),$Be=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(ey.$$.fragment,Zl),C_r=i(Zl),$c=n(Zl,"P",{});var FJ=s($c);w_r=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=n(FJ,"A",{href:!0});var k8t=s(dz);A_r=r(k8t,"from_pretrained()"),k8t.forEach(t),y_r=r(FJ," class method or the "),cz=n(FJ,"A",{href:!0});var S8t=s(cz);L_r=r(S8t,"from_config()"),S8t.forEach(t),x_r=r(FJ,` class
method.`),FJ.forEach(t),k_r=i(Zl),oy=n(Zl,"P",{});var Q$e=s(oy);S_r=r(Q$e,"This class cannot be instantiated directly using "),K1e=n(Q$e,"CODE",{});var R8t=s(K1e);R_r=r(R8t,"__init__()"),R8t.forEach(t),B_r=r(Q$e," (throws an error)."),Q$e.forEach(t),P_r=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(ry.$$.fragment,ei),$_r=i(ei),Z1e=n(ei,"P",{});var B8t=s(Z1e);I_r=r(B8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),B8t.forEach(t),q_r=i(ei),Ic=n(ei,"P",{});var vJ=s(Ic);N_r=r(vJ,`Note:
Loading a model from its configuration file does `),e8e=n(vJ,"STRONG",{});var P8t=s(e8e);j_r=r(P8t,"not"),P8t.forEach(t),D_r=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(vJ,"A",{href:!0});var $8t=s(fz);G_r=r($8t,"from_pretrained()"),$8t.forEach(t),O_r=r(vJ," to load the model weights."),vJ.forEach(t),V_r=i(ei),o8e=n(ei,"P",{});var I8t=s(o8e);X_r=r(I8t,"Examples:"),I8t.forEach(t),z_r=i(ei),m(ty.$$.fragment,ei),ei.forEach(t),Q_r=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(ay.$$.fragment,Ma),W_r=i(Ma),r8e=n(Ma,"P",{});var q8t=s(r8e);H_r=r(q8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),q8t.forEach(t),U_r=i(Ma),En=n(Ma,"P",{});var n5=s(En);J_r=r(n5,"The model class to instantiate is selected based on the "),t8e=n(n5,"CODE",{});var N8t=s(t8e);Y_r=r(N8t,"model_type"),N8t.forEach(t),K_r=r(n5,` property of the config object (either
passed as an argument or loaded from `),a8e=n(n5,"CODE",{});var j8t=s(a8e);Z_r=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),eur=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n8e=n(n5,"CODE",{});var D8t=s(n8e);our=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),rur=r(n5,":"),n5.forEach(t),tur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);iT=n(ie,"LI",{});var _9e=s(iT);s8e=n(_9e,"STRONG",{});var G8t=s(s8e);aur=r(G8t,"albert"),G8t.forEach(t),nur=r(_9e," \u2014 "),mz=n(_9e,"A",{href:!0});var O8t=s(mz);sur=r(O8t,"TFAlbertForMultipleChoice"),O8t.forEach(t),lur=r(_9e," (ALBERT model)"),_9e.forEach(t),iur=i(ie),dT=n(ie,"LI",{});var u9e=s(dT);l8e=n(u9e,"STRONG",{});var V8t=s(l8e);dur=r(V8t,"bert"),V8t.forEach(t),cur=r(u9e," \u2014 "),gz=n(u9e,"A",{href:!0});var X8t=s(gz);fur=r(X8t,"TFBertForMultipleChoice"),X8t.forEach(t),mur=r(u9e," (BERT model)"),u9e.forEach(t),gur=i(ie),cT=n(ie,"LI",{});var b9e=s(cT);i8e=n(b9e,"STRONG",{});var z8t=s(i8e);hur=r(z8t,"camembert"),z8t.forEach(t),pur=r(b9e," \u2014 "),hz=n(b9e,"A",{href:!0});var Q8t=s(hz);_ur=r(Q8t,"TFCamembertForMultipleChoice"),Q8t.forEach(t),uur=r(b9e," (CamemBERT model)"),b9e.forEach(t),bur=i(ie),fT=n(ie,"LI",{});var F9e=s(fT);d8e=n(F9e,"STRONG",{});var W8t=s(d8e);Fur=r(W8t,"convbert"),W8t.forEach(t),vur=r(F9e," \u2014 "),pz=n(F9e,"A",{href:!0});var H8t=s(pz);Tur=r(H8t,"TFConvBertForMultipleChoice"),H8t.forEach(t),Mur=r(F9e," (ConvBERT model)"),F9e.forEach(t),Eur=i(ie),mT=n(ie,"LI",{});var v9e=s(mT);c8e=n(v9e,"STRONG",{});var U8t=s(c8e);Cur=r(U8t,"distilbert"),U8t.forEach(t),wur=r(v9e," \u2014 "),_z=n(v9e,"A",{href:!0});var J8t=s(_z);Aur=r(J8t,"TFDistilBertForMultipleChoice"),J8t.forEach(t),yur=r(v9e," (DistilBERT model)"),v9e.forEach(t),Lur=i(ie),gT=n(ie,"LI",{});var T9e=s(gT);f8e=n(T9e,"STRONG",{});var Y8t=s(f8e);xur=r(Y8t,"electra"),Y8t.forEach(t),kur=r(T9e," \u2014 "),uz=n(T9e,"A",{href:!0});var K8t=s(uz);Sur=r(K8t,"TFElectraForMultipleChoice"),K8t.forEach(t),Rur=r(T9e," (ELECTRA model)"),T9e.forEach(t),Bur=i(ie),hT=n(ie,"LI",{});var M9e=s(hT);m8e=n(M9e,"STRONG",{});var Z8t=s(m8e);Pur=r(Z8t,"flaubert"),Z8t.forEach(t),$ur=r(M9e," \u2014 "),bz=n(M9e,"A",{href:!0});var ebt=s(bz);Iur=r(ebt,"TFFlaubertForMultipleChoice"),ebt.forEach(t),qur=r(M9e," (FlauBERT model)"),M9e.forEach(t),Nur=i(ie),pT=n(ie,"LI",{});var E9e=s(pT);g8e=n(E9e,"STRONG",{});var obt=s(g8e);jur=r(obt,"funnel"),obt.forEach(t),Dur=r(E9e," \u2014 "),Fz=n(E9e,"A",{href:!0});var rbt=s(Fz);Gur=r(rbt,"TFFunnelForMultipleChoice"),rbt.forEach(t),Our=r(E9e," (Funnel Transformer model)"),E9e.forEach(t),Vur=i(ie),_T=n(ie,"LI",{});var C9e=s(_T);h8e=n(C9e,"STRONG",{});var tbt=s(h8e);Xur=r(tbt,"longformer"),tbt.forEach(t),zur=r(C9e," \u2014 "),vz=n(C9e,"A",{href:!0});var abt=s(vz);Qur=r(abt,"TFLongformerForMultipleChoice"),abt.forEach(t),Wur=r(C9e," (Longformer model)"),C9e.forEach(t),Hur=i(ie),uT=n(ie,"LI",{});var w9e=s(uT);p8e=n(w9e,"STRONG",{});var nbt=s(p8e);Uur=r(nbt,"mobilebert"),nbt.forEach(t),Jur=r(w9e," \u2014 "),Tz=n(w9e,"A",{href:!0});var sbt=s(Tz);Yur=r(sbt,"TFMobileBertForMultipleChoice"),sbt.forEach(t),Kur=r(w9e," (MobileBERT model)"),w9e.forEach(t),Zur=i(ie),bT=n(ie,"LI",{});var A9e=s(bT);_8e=n(A9e,"STRONG",{});var lbt=s(_8e);e1r=r(lbt,"mpnet"),lbt.forEach(t),o1r=r(A9e," \u2014 "),Mz=n(A9e,"A",{href:!0});var ibt=s(Mz);r1r=r(ibt,"TFMPNetForMultipleChoice"),ibt.forEach(t),t1r=r(A9e," (MPNet model)"),A9e.forEach(t),a1r=i(ie),FT=n(ie,"LI",{});var y9e=s(FT);u8e=n(y9e,"STRONG",{});var dbt=s(u8e);n1r=r(dbt,"rembert"),dbt.forEach(t),s1r=r(y9e," \u2014 "),Ez=n(y9e,"A",{href:!0});var cbt=s(Ez);l1r=r(cbt,"TFRemBertForMultipleChoice"),cbt.forEach(t),i1r=r(y9e," (RemBERT model)"),y9e.forEach(t),d1r=i(ie),vT=n(ie,"LI",{});var L9e=s(vT);b8e=n(L9e,"STRONG",{});var fbt=s(b8e);c1r=r(fbt,"roberta"),fbt.forEach(t),f1r=r(L9e," \u2014 "),Cz=n(L9e,"A",{href:!0});var mbt=s(Cz);m1r=r(mbt,"TFRobertaForMultipleChoice"),mbt.forEach(t),g1r=r(L9e," (RoBERTa model)"),L9e.forEach(t),h1r=i(ie),TT=n(ie,"LI",{});var x9e=s(TT);F8e=n(x9e,"STRONG",{});var gbt=s(F8e);p1r=r(gbt,"roformer"),gbt.forEach(t),_1r=r(x9e," \u2014 "),wz=n(x9e,"A",{href:!0});var hbt=s(wz);u1r=r(hbt,"TFRoFormerForMultipleChoice"),hbt.forEach(t),b1r=r(x9e," (RoFormer model)"),x9e.forEach(t),F1r=i(ie),MT=n(ie,"LI",{});var k9e=s(MT);v8e=n(k9e,"STRONG",{});var pbt=s(v8e);v1r=r(pbt,"xlm"),pbt.forEach(t),T1r=r(k9e," \u2014 "),Az=n(k9e,"A",{href:!0});var _bt=s(Az);M1r=r(_bt,"TFXLMForMultipleChoice"),_bt.forEach(t),E1r=r(k9e," (XLM model)"),k9e.forEach(t),C1r=i(ie),ET=n(ie,"LI",{});var S9e=s(ET);T8e=n(S9e,"STRONG",{});var ubt=s(T8e);w1r=r(ubt,"xlm-roberta"),ubt.forEach(t),A1r=r(S9e," \u2014 "),yz=n(S9e,"A",{href:!0});var bbt=s(yz);y1r=r(bbt,"TFXLMRobertaForMultipleChoice"),bbt.forEach(t),L1r=r(S9e," (XLM-RoBERTa model)"),S9e.forEach(t),x1r=i(ie),CT=n(ie,"LI",{});var R9e=s(CT);M8e=n(R9e,"STRONG",{});var Fbt=s(M8e);k1r=r(Fbt,"xlnet"),Fbt.forEach(t),S1r=r(R9e," \u2014 "),Lz=n(R9e,"A",{href:!0});var vbt=s(Lz);R1r=r(vbt,"TFXLNetForMultipleChoice"),vbt.forEach(t),B1r=r(R9e," (XLNet model)"),R9e.forEach(t),ie.forEach(t),P1r=i(Ma),E8e=n(Ma,"P",{});var Tbt=s(E8e);$1r=r(Tbt,"Examples:"),Tbt.forEach(t),I1r=i(Ma),m(ny.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),IBe=i(c),qc=n(c,"H2",{class:!0});var W$e=s(qc);wT=n(W$e,"A",{id:!0,class:!0,href:!0});var Mbt=s(wT);C8e=n(Mbt,"SPAN",{});var Ebt=s(C8e);m(sy.$$.fragment,Ebt),Ebt.forEach(t),Mbt.forEach(t),q1r=i(W$e),w8e=n(W$e,"SPAN",{});var Cbt=s(w8e);N1r=r(Cbt,"TFAutoModelForTableQuestionAnswering"),Cbt.forEach(t),W$e.forEach(t),qBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(ly.$$.fragment,oi),j1r=i(oi),Nc=n(oi,"P",{});var TJ=s(Nc);D1r=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xz=n(TJ,"A",{href:!0});var wbt=s(xz);G1r=r(wbt,"from_pretrained()"),wbt.forEach(t),O1r=r(TJ," class method or the "),kz=n(TJ,"A",{href:!0});var Abt=s(kz);V1r=r(Abt,"from_config()"),Abt.forEach(t),X1r=r(TJ,` class
method.`),TJ.forEach(t),z1r=i(oi),iy=n(oi,"P",{});var H$e=s(iy);Q1r=r(H$e,"This class cannot be instantiated directly using "),A8e=n(H$e,"CODE",{});var ybt=s(A8e);W1r=r(ybt,"__init__()"),ybt.forEach(t),H1r=r(H$e," (throws an error)."),H$e.forEach(t),U1r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(dy.$$.fragment,ri),J1r=i(ri),y8e=n(ri,"P",{});var Lbt=s(y8e);Y1r=r(Lbt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lbt.forEach(t),K1r=i(ri),jc=n(ri,"P",{});var MJ=s(jc);Z1r=r(MJ,`Note:
Loading a model from its configuration file does `),L8e=n(MJ,"STRONG",{});var xbt=s(L8e);e8r=r(xbt,"not"),xbt.forEach(t),o8r=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(MJ,"A",{href:!0});var kbt=s(Sz);r8r=r(kbt,"from_pretrained()"),kbt.forEach(t),t8r=r(MJ," to load the model weights."),MJ.forEach(t),a8r=i(ri),x8e=n(ri,"P",{});var Sbt=s(x8e);n8r=r(Sbt,"Examples:"),Sbt.forEach(t),s8r=i(ri),m(cy.$$.fragment,ri),ri.forEach(t),l8r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(fy.$$.fragment,Ea),i8r=i(Ea),k8e=n(Ea,"P",{});var Rbt=s(k8e);d8r=r(Rbt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Rbt.forEach(t),c8r=i(Ea),Cn=n(Ea,"P",{});var s5=s(Cn);f8r=r(s5,"The model class to instantiate is selected based on the "),S8e=n(s5,"CODE",{});var Bbt=s(S8e);m8r=r(Bbt,"model_type"),Bbt.forEach(t),g8r=r(s5,` property of the config object (either
passed as an argument or loaded from `),R8e=n(s5,"CODE",{});var Pbt=s(R8e);h8r=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),p8r=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B8e=n(s5,"CODE",{});var $bt=s(B8e);_8r=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),u8r=r(s5,":"),s5.forEach(t),b8r=i(Ea),P8e=n(Ea,"UL",{});var Ibt=s(P8e);AT=n(Ibt,"LI",{});var B9e=s(AT);$8e=n(B9e,"STRONG",{});var qbt=s($8e);F8r=r(qbt,"tapas"),qbt.forEach(t),v8r=r(B9e," \u2014 "),Rz=n(B9e,"A",{href:!0});var Nbt=s(Rz);T8r=r(Nbt,"TFTapasForQuestionAnswering"),Nbt.forEach(t),M8r=r(B9e," (TAPAS model)"),B9e.forEach(t),Ibt.forEach(t),E8r=i(Ea),I8e=n(Ea,"P",{});var jbt=s(I8e);C8r=r(jbt,"Examples:"),jbt.forEach(t),w8r=i(Ea),m(my.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),NBe=i(c),Dc=n(c,"H2",{class:!0});var U$e=s(Dc);yT=n(U$e,"A",{id:!0,class:!0,href:!0});var Dbt=s(yT);q8e=n(Dbt,"SPAN",{});var Gbt=s(q8e);m(gy.$$.fragment,Gbt),Gbt.forEach(t),Dbt.forEach(t),A8r=i(U$e),N8e=n(U$e,"SPAN",{});var Obt=s(N8e);y8r=r(Obt,"TFAutoModelForTokenClassification"),Obt.forEach(t),U$e.forEach(t),jBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(hy.$$.fragment,ti),L8r=i(ti),Gc=n(ti,"P",{});var EJ=s(Gc);x8r=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=n(EJ,"A",{href:!0});var Vbt=s(Bz);k8r=r(Vbt,"from_pretrained()"),Vbt.forEach(t),S8r=r(EJ," class method or the "),Pz=n(EJ,"A",{href:!0});var Xbt=s(Pz);R8r=r(Xbt,"from_config()"),Xbt.forEach(t),B8r=r(EJ,` class
method.`),EJ.forEach(t),P8r=i(ti),py=n(ti,"P",{});var J$e=s(py);$8r=r(J$e,"This class cannot be instantiated directly using "),j8e=n(J$e,"CODE",{});var zbt=s(j8e);I8r=r(zbt,"__init__()"),zbt.forEach(t),q8r=r(J$e," (throws an error)."),J$e.forEach(t),N8r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(_y.$$.fragment,ai),j8r=i(ai),D8e=n(ai,"P",{});var Qbt=s(D8e);D8r=r(Qbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Qbt.forEach(t),G8r=i(ai),Oc=n(ai,"P",{});var CJ=s(Oc);O8r=r(CJ,`Note:
Loading a model from its configuration file does `),G8e=n(CJ,"STRONG",{});var Wbt=s(G8e);V8r=r(Wbt,"not"),Wbt.forEach(t),X8r=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(CJ,"A",{href:!0});var Hbt=s($z);z8r=r(Hbt,"from_pretrained()"),Hbt.forEach(t),Q8r=r(CJ," to load the model weights."),CJ.forEach(t),W8r=i(ai),O8e=n(ai,"P",{});var Ubt=s(O8e);H8r=r(Ubt,"Examples:"),Ubt.forEach(t),U8r=i(ai),m(uy.$$.fragment,ai),ai.forEach(t),J8r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(by.$$.fragment,Ca),Y8r=i(Ca),V8e=n(Ca,"P",{});var Jbt=s(V8e);K8r=r(Jbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jbt.forEach(t),Z8r=i(Ca),wn=n(Ca,"P",{});var l5=s(wn);ebr=r(l5,"The model class to instantiate is selected based on the "),X8e=n(l5,"CODE",{});var Ybt=s(X8e);obr=r(Ybt,"model_type"),Ybt.forEach(t),rbr=r(l5,` property of the config object (either
passed as an argument or loaded from `),z8e=n(l5,"CODE",{});var Kbt=s(z8e);tbr=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),abr=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q8e=n(l5,"CODE",{});var Zbt=s(Q8e);nbr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),sbr=r(l5,":"),l5.forEach(t),lbr=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);LT=n(re,"LI",{});var P9e=s(LT);W8e=n(P9e,"STRONG",{});var e2t=s(W8e);ibr=r(e2t,"albert"),e2t.forEach(t),dbr=r(P9e," \u2014 "),Iz=n(P9e,"A",{href:!0});var o2t=s(Iz);cbr=r(o2t,"TFAlbertForTokenClassification"),o2t.forEach(t),fbr=r(P9e," (ALBERT model)"),P9e.forEach(t),mbr=i(re),xT=n(re,"LI",{});var $9e=s(xT);H8e=n($9e,"STRONG",{});var r2t=s(H8e);gbr=r(r2t,"bert"),r2t.forEach(t),hbr=r($9e," \u2014 "),qz=n($9e,"A",{href:!0});var t2t=s(qz);pbr=r(t2t,"TFBertForTokenClassification"),t2t.forEach(t),_br=r($9e," (BERT model)"),$9e.forEach(t),ubr=i(re),kT=n(re,"LI",{});var I9e=s(kT);U8e=n(I9e,"STRONG",{});var a2t=s(U8e);bbr=r(a2t,"camembert"),a2t.forEach(t),Fbr=r(I9e," \u2014 "),Nz=n(I9e,"A",{href:!0});var n2t=s(Nz);vbr=r(n2t,"TFCamembertForTokenClassification"),n2t.forEach(t),Tbr=r(I9e," (CamemBERT model)"),I9e.forEach(t),Mbr=i(re),ST=n(re,"LI",{});var q9e=s(ST);J8e=n(q9e,"STRONG",{});var s2t=s(J8e);Ebr=r(s2t,"convbert"),s2t.forEach(t),Cbr=r(q9e," \u2014 "),jz=n(q9e,"A",{href:!0});var l2t=s(jz);wbr=r(l2t,"TFConvBertForTokenClassification"),l2t.forEach(t),Abr=r(q9e," (ConvBERT model)"),q9e.forEach(t),ybr=i(re),RT=n(re,"LI",{});var N9e=s(RT);Y8e=n(N9e,"STRONG",{});var i2t=s(Y8e);Lbr=r(i2t,"deberta"),i2t.forEach(t),xbr=r(N9e," \u2014 "),Dz=n(N9e,"A",{href:!0});var d2t=s(Dz);kbr=r(d2t,"TFDebertaForTokenClassification"),d2t.forEach(t),Sbr=r(N9e," (DeBERTa model)"),N9e.forEach(t),Rbr=i(re),BT=n(re,"LI",{});var j9e=s(BT);K8e=n(j9e,"STRONG",{});var c2t=s(K8e);Bbr=r(c2t,"deberta-v2"),c2t.forEach(t),Pbr=r(j9e," \u2014 "),Gz=n(j9e,"A",{href:!0});var f2t=s(Gz);$br=r(f2t,"TFDebertaV2ForTokenClassification"),f2t.forEach(t),Ibr=r(j9e," (DeBERTa-v2 model)"),j9e.forEach(t),qbr=i(re),PT=n(re,"LI",{});var D9e=s(PT);Z8e=n(D9e,"STRONG",{});var m2t=s(Z8e);Nbr=r(m2t,"distilbert"),m2t.forEach(t),jbr=r(D9e," \u2014 "),Oz=n(D9e,"A",{href:!0});var g2t=s(Oz);Dbr=r(g2t,"TFDistilBertForTokenClassification"),g2t.forEach(t),Gbr=r(D9e," (DistilBERT model)"),D9e.forEach(t),Obr=i(re),$T=n(re,"LI",{});var G9e=s($T);ebe=n(G9e,"STRONG",{});var h2t=s(ebe);Vbr=r(h2t,"electra"),h2t.forEach(t),Xbr=r(G9e," \u2014 "),Vz=n(G9e,"A",{href:!0});var p2t=s(Vz);zbr=r(p2t,"TFElectraForTokenClassification"),p2t.forEach(t),Qbr=r(G9e," (ELECTRA model)"),G9e.forEach(t),Wbr=i(re),IT=n(re,"LI",{});var O9e=s(IT);obe=n(O9e,"STRONG",{});var _2t=s(obe);Hbr=r(_2t,"flaubert"),_2t.forEach(t),Ubr=r(O9e," \u2014 "),Xz=n(O9e,"A",{href:!0});var u2t=s(Xz);Jbr=r(u2t,"TFFlaubertForTokenClassification"),u2t.forEach(t),Ybr=r(O9e," (FlauBERT model)"),O9e.forEach(t),Kbr=i(re),qT=n(re,"LI",{});var V9e=s(qT);rbe=n(V9e,"STRONG",{});var b2t=s(rbe);Zbr=r(b2t,"funnel"),b2t.forEach(t),e2r=r(V9e," \u2014 "),zz=n(V9e,"A",{href:!0});var F2t=s(zz);o2r=r(F2t,"TFFunnelForTokenClassification"),F2t.forEach(t),r2r=r(V9e," (Funnel Transformer model)"),V9e.forEach(t),t2r=i(re),NT=n(re,"LI",{});var X9e=s(NT);tbe=n(X9e,"STRONG",{});var v2t=s(tbe);a2r=r(v2t,"layoutlm"),v2t.forEach(t),n2r=r(X9e," \u2014 "),Qz=n(X9e,"A",{href:!0});var T2t=s(Qz);s2r=r(T2t,"TFLayoutLMForTokenClassification"),T2t.forEach(t),l2r=r(X9e," (LayoutLM model)"),X9e.forEach(t),i2r=i(re),jT=n(re,"LI",{});var z9e=s(jT);abe=n(z9e,"STRONG",{});var M2t=s(abe);d2r=r(M2t,"longformer"),M2t.forEach(t),c2r=r(z9e," \u2014 "),Wz=n(z9e,"A",{href:!0});var E2t=s(Wz);f2r=r(E2t,"TFLongformerForTokenClassification"),E2t.forEach(t),m2r=r(z9e," (Longformer model)"),z9e.forEach(t),g2r=i(re),DT=n(re,"LI",{});var Q9e=s(DT);nbe=n(Q9e,"STRONG",{});var C2t=s(nbe);h2r=r(C2t,"mobilebert"),C2t.forEach(t),p2r=r(Q9e," \u2014 "),Hz=n(Q9e,"A",{href:!0});var w2t=s(Hz);_2r=r(w2t,"TFMobileBertForTokenClassification"),w2t.forEach(t),u2r=r(Q9e," (MobileBERT model)"),Q9e.forEach(t),b2r=i(re),GT=n(re,"LI",{});var W9e=s(GT);sbe=n(W9e,"STRONG",{});var A2t=s(sbe);F2r=r(A2t,"mpnet"),A2t.forEach(t),v2r=r(W9e," \u2014 "),Uz=n(W9e,"A",{href:!0});var y2t=s(Uz);T2r=r(y2t,"TFMPNetForTokenClassification"),y2t.forEach(t),M2r=r(W9e," (MPNet model)"),W9e.forEach(t),E2r=i(re),OT=n(re,"LI",{});var H9e=s(OT);lbe=n(H9e,"STRONG",{});var L2t=s(lbe);C2r=r(L2t,"rembert"),L2t.forEach(t),w2r=r(H9e," \u2014 "),Jz=n(H9e,"A",{href:!0});var x2t=s(Jz);A2r=r(x2t,"TFRemBertForTokenClassification"),x2t.forEach(t),y2r=r(H9e," (RemBERT model)"),H9e.forEach(t),L2r=i(re),VT=n(re,"LI",{});var U9e=s(VT);ibe=n(U9e,"STRONG",{});var k2t=s(ibe);x2r=r(k2t,"roberta"),k2t.forEach(t),k2r=r(U9e," \u2014 "),Yz=n(U9e,"A",{href:!0});var S2t=s(Yz);S2r=r(S2t,"TFRobertaForTokenClassification"),S2t.forEach(t),R2r=r(U9e," (RoBERTa model)"),U9e.forEach(t),B2r=i(re),XT=n(re,"LI",{});var J9e=s(XT);dbe=n(J9e,"STRONG",{});var R2t=s(dbe);P2r=r(R2t,"roformer"),R2t.forEach(t),$2r=r(J9e," \u2014 "),Kz=n(J9e,"A",{href:!0});var B2t=s(Kz);I2r=r(B2t,"TFRoFormerForTokenClassification"),B2t.forEach(t),q2r=r(J9e," (RoFormer model)"),J9e.forEach(t),N2r=i(re),zT=n(re,"LI",{});var Y9e=s(zT);cbe=n(Y9e,"STRONG",{});var P2t=s(cbe);j2r=r(P2t,"xlm"),P2t.forEach(t),D2r=r(Y9e," \u2014 "),Zz=n(Y9e,"A",{href:!0});var $2t=s(Zz);G2r=r($2t,"TFXLMForTokenClassification"),$2t.forEach(t),O2r=r(Y9e," (XLM model)"),Y9e.forEach(t),V2r=i(re),QT=n(re,"LI",{});var K9e=s(QT);fbe=n(K9e,"STRONG",{});var I2t=s(fbe);X2r=r(I2t,"xlm-roberta"),I2t.forEach(t),z2r=r(K9e," \u2014 "),eQ=n(K9e,"A",{href:!0});var q2t=s(eQ);Q2r=r(q2t,"TFXLMRobertaForTokenClassification"),q2t.forEach(t),W2r=r(K9e," (XLM-RoBERTa model)"),K9e.forEach(t),H2r=i(re),WT=n(re,"LI",{});var Z9e=s(WT);mbe=n(Z9e,"STRONG",{});var N2t=s(mbe);U2r=r(N2t,"xlnet"),N2t.forEach(t),J2r=r(Z9e," \u2014 "),oQ=n(Z9e,"A",{href:!0});var j2t=s(oQ);Y2r=r(j2t,"TFXLNetForTokenClassification"),j2t.forEach(t),K2r=r(Z9e," (XLNet model)"),Z9e.forEach(t),re.forEach(t),Z2r=i(Ca),gbe=n(Ca,"P",{});var D2t=s(gbe);e6r=r(D2t,"Examples:"),D2t.forEach(t),o6r=i(Ca),m(Fy.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),DBe=i(c),Vc=n(c,"H2",{class:!0});var Y$e=s(Vc);HT=n(Y$e,"A",{id:!0,class:!0,href:!0});var G2t=s(HT);hbe=n(G2t,"SPAN",{});var O2t=s(hbe);m(vy.$$.fragment,O2t),O2t.forEach(t),G2t.forEach(t),r6r=i(Y$e),pbe=n(Y$e,"SPAN",{});var V2t=s(pbe);t6r=r(V2t,"TFAutoModelForQuestionAnswering"),V2t.forEach(t),Y$e.forEach(t),GBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(Ty.$$.fragment,ni),a6r=i(ni),Xc=n(ni,"P",{});var wJ=s(Xc);n6r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rQ=n(wJ,"A",{href:!0});var X2t=s(rQ);s6r=r(X2t,"from_pretrained()"),X2t.forEach(t),l6r=r(wJ," class method or the "),tQ=n(wJ,"A",{href:!0});var z2t=s(tQ);i6r=r(z2t,"from_config()"),z2t.forEach(t),d6r=r(wJ,` class
method.`),wJ.forEach(t),c6r=i(ni),My=n(ni,"P",{});var K$e=s(My);f6r=r(K$e,"This class cannot be instantiated directly using "),_be=n(K$e,"CODE",{});var Q2t=s(_be);m6r=r(Q2t,"__init__()"),Q2t.forEach(t),g6r=r(K$e," (throws an error)."),K$e.forEach(t),h6r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(Ey.$$.fragment,si),p6r=i(si),ube=n(si,"P",{});var W2t=s(ube);_6r=r(W2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),W2t.forEach(t),u6r=i(si),zc=n(si,"P",{});var AJ=s(zc);b6r=r(AJ,`Note:
Loading a model from its configuration file does `),bbe=n(AJ,"STRONG",{});var H2t=s(bbe);F6r=r(H2t,"not"),H2t.forEach(t),v6r=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(AJ,"A",{href:!0});var U2t=s(aQ);T6r=r(U2t,"from_pretrained()"),U2t.forEach(t),M6r=r(AJ," to load the model weights."),AJ.forEach(t),E6r=i(si),Fbe=n(si,"P",{});var J2t=s(Fbe);C6r=r(J2t,"Examples:"),J2t.forEach(t),w6r=i(si),m(Cy.$$.fragment,si),si.forEach(t),A6r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(wy.$$.fragment,wa),y6r=i(wa),vbe=n(wa,"P",{});var Y2t=s(vbe);L6r=r(Y2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Y2t.forEach(t),x6r=i(wa),An=n(wa,"P",{});var i5=s(An);k6r=r(i5,"The model class to instantiate is selected based on the "),Tbe=n(i5,"CODE",{});var K2t=s(Tbe);S6r=r(K2t,"model_type"),K2t.forEach(t),R6r=r(i5,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(i5,"CODE",{});var Z2t=s(Mbe);B6r=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),P6r=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(i5,"CODE",{});var e6t=s(Ebe);$6r=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),I6r=r(i5,":"),i5.forEach(t),q6r=i(wa),K=n(wa,"UL",{});var te=s(K);UT=n(te,"LI",{});var eke=s(UT);Cbe=n(eke,"STRONG",{});var o6t=s(Cbe);N6r=r(o6t,"albert"),o6t.forEach(t),j6r=r(eke," \u2014 "),nQ=n(eke,"A",{href:!0});var r6t=s(nQ);D6r=r(r6t,"TFAlbertForQuestionAnswering"),r6t.forEach(t),G6r=r(eke," (ALBERT model)"),eke.forEach(t),O6r=i(te),JT=n(te,"LI",{});var oke=s(JT);wbe=n(oke,"STRONG",{});var t6t=s(wbe);V6r=r(t6t,"bert"),t6t.forEach(t),X6r=r(oke," \u2014 "),sQ=n(oke,"A",{href:!0});var a6t=s(sQ);z6r=r(a6t,"TFBertForQuestionAnswering"),a6t.forEach(t),Q6r=r(oke," (BERT model)"),oke.forEach(t),W6r=i(te),YT=n(te,"LI",{});var rke=s(YT);Abe=n(rke,"STRONG",{});var n6t=s(Abe);H6r=r(n6t,"camembert"),n6t.forEach(t),U6r=r(rke," \u2014 "),lQ=n(rke,"A",{href:!0});var s6t=s(lQ);J6r=r(s6t,"TFCamembertForQuestionAnswering"),s6t.forEach(t),Y6r=r(rke," (CamemBERT model)"),rke.forEach(t),K6r=i(te),KT=n(te,"LI",{});var tke=s(KT);ybe=n(tke,"STRONG",{});var l6t=s(ybe);Z6r=r(l6t,"convbert"),l6t.forEach(t),eFr=r(tke," \u2014 "),iQ=n(tke,"A",{href:!0});var i6t=s(iQ);oFr=r(i6t,"TFConvBertForQuestionAnswering"),i6t.forEach(t),rFr=r(tke," (ConvBERT model)"),tke.forEach(t),tFr=i(te),ZT=n(te,"LI",{});var ake=s(ZT);Lbe=n(ake,"STRONG",{});var d6t=s(Lbe);aFr=r(d6t,"deberta"),d6t.forEach(t),nFr=r(ake," \u2014 "),dQ=n(ake,"A",{href:!0});var c6t=s(dQ);sFr=r(c6t,"TFDebertaForQuestionAnswering"),c6t.forEach(t),lFr=r(ake," (DeBERTa model)"),ake.forEach(t),iFr=i(te),eM=n(te,"LI",{});var nke=s(eM);xbe=n(nke,"STRONG",{});var f6t=s(xbe);dFr=r(f6t,"deberta-v2"),f6t.forEach(t),cFr=r(nke," \u2014 "),cQ=n(nke,"A",{href:!0});var m6t=s(cQ);fFr=r(m6t,"TFDebertaV2ForQuestionAnswering"),m6t.forEach(t),mFr=r(nke," (DeBERTa-v2 model)"),nke.forEach(t),gFr=i(te),oM=n(te,"LI",{});var ske=s(oM);kbe=n(ske,"STRONG",{});var g6t=s(kbe);hFr=r(g6t,"distilbert"),g6t.forEach(t),pFr=r(ske," \u2014 "),fQ=n(ske,"A",{href:!0});var h6t=s(fQ);_Fr=r(h6t,"TFDistilBertForQuestionAnswering"),h6t.forEach(t),uFr=r(ske," (DistilBERT model)"),ske.forEach(t),bFr=i(te),rM=n(te,"LI",{});var lke=s(rM);Sbe=n(lke,"STRONG",{});var p6t=s(Sbe);FFr=r(p6t,"electra"),p6t.forEach(t),vFr=r(lke," \u2014 "),mQ=n(lke,"A",{href:!0});var _6t=s(mQ);TFr=r(_6t,"TFElectraForQuestionAnswering"),_6t.forEach(t),MFr=r(lke," (ELECTRA model)"),lke.forEach(t),EFr=i(te),tM=n(te,"LI",{});var ike=s(tM);Rbe=n(ike,"STRONG",{});var u6t=s(Rbe);CFr=r(u6t,"flaubert"),u6t.forEach(t),wFr=r(ike," \u2014 "),gQ=n(ike,"A",{href:!0});var b6t=s(gQ);AFr=r(b6t,"TFFlaubertForQuestionAnsweringSimple"),b6t.forEach(t),yFr=r(ike," (FlauBERT model)"),ike.forEach(t),LFr=i(te),aM=n(te,"LI",{});var dke=s(aM);Bbe=n(dke,"STRONG",{});var F6t=s(Bbe);xFr=r(F6t,"funnel"),F6t.forEach(t),kFr=r(dke," \u2014 "),hQ=n(dke,"A",{href:!0});var v6t=s(hQ);SFr=r(v6t,"TFFunnelForQuestionAnswering"),v6t.forEach(t),RFr=r(dke," (Funnel Transformer model)"),dke.forEach(t),BFr=i(te),nM=n(te,"LI",{});var cke=s(nM);Pbe=n(cke,"STRONG",{});var T6t=s(Pbe);PFr=r(T6t,"gptj"),T6t.forEach(t),$Fr=r(cke," \u2014 "),pQ=n(cke,"A",{href:!0});var M6t=s(pQ);IFr=r(M6t,"TFGPTJForQuestionAnswering"),M6t.forEach(t),qFr=r(cke," (GPT-J model)"),cke.forEach(t),NFr=i(te),sM=n(te,"LI",{});var fke=s(sM);$be=n(fke,"STRONG",{});var E6t=s($be);jFr=r(E6t,"longformer"),E6t.forEach(t),DFr=r(fke," \u2014 "),_Q=n(fke,"A",{href:!0});var C6t=s(_Q);GFr=r(C6t,"TFLongformerForQuestionAnswering"),C6t.forEach(t),OFr=r(fke," (Longformer model)"),fke.forEach(t),VFr=i(te),lM=n(te,"LI",{});var mke=s(lM);Ibe=n(mke,"STRONG",{});var w6t=s(Ibe);XFr=r(w6t,"mobilebert"),w6t.forEach(t),zFr=r(mke," \u2014 "),uQ=n(mke,"A",{href:!0});var A6t=s(uQ);QFr=r(A6t,"TFMobileBertForQuestionAnswering"),A6t.forEach(t),WFr=r(mke," (MobileBERT model)"),mke.forEach(t),HFr=i(te),iM=n(te,"LI",{});var gke=s(iM);qbe=n(gke,"STRONG",{});var y6t=s(qbe);UFr=r(y6t,"mpnet"),y6t.forEach(t),JFr=r(gke," \u2014 "),bQ=n(gke,"A",{href:!0});var L6t=s(bQ);YFr=r(L6t,"TFMPNetForQuestionAnswering"),L6t.forEach(t),KFr=r(gke," (MPNet model)"),gke.forEach(t),ZFr=i(te),dM=n(te,"LI",{});var hke=s(dM);Nbe=n(hke,"STRONG",{});var x6t=s(Nbe);evr=r(x6t,"rembert"),x6t.forEach(t),ovr=r(hke," \u2014 "),FQ=n(hke,"A",{href:!0});var k6t=s(FQ);rvr=r(k6t,"TFRemBertForQuestionAnswering"),k6t.forEach(t),tvr=r(hke," (RemBERT model)"),hke.forEach(t),avr=i(te),cM=n(te,"LI",{});var pke=s(cM);jbe=n(pke,"STRONG",{});var S6t=s(jbe);nvr=r(S6t,"roberta"),S6t.forEach(t),svr=r(pke," \u2014 "),vQ=n(pke,"A",{href:!0});var R6t=s(vQ);lvr=r(R6t,"TFRobertaForQuestionAnswering"),R6t.forEach(t),ivr=r(pke," (RoBERTa model)"),pke.forEach(t),dvr=i(te),fM=n(te,"LI",{});var _ke=s(fM);Dbe=n(_ke,"STRONG",{});var B6t=s(Dbe);cvr=r(B6t,"roformer"),B6t.forEach(t),fvr=r(_ke," \u2014 "),TQ=n(_ke,"A",{href:!0});var P6t=s(TQ);mvr=r(P6t,"TFRoFormerForQuestionAnswering"),P6t.forEach(t),gvr=r(_ke," (RoFormer model)"),_ke.forEach(t),hvr=i(te),mM=n(te,"LI",{});var uke=s(mM);Gbe=n(uke,"STRONG",{});var $6t=s(Gbe);pvr=r($6t,"xlm"),$6t.forEach(t),_vr=r(uke," \u2014 "),MQ=n(uke,"A",{href:!0});var I6t=s(MQ);uvr=r(I6t,"TFXLMForQuestionAnsweringSimple"),I6t.forEach(t),bvr=r(uke," (XLM model)"),uke.forEach(t),Fvr=i(te),gM=n(te,"LI",{});var bke=s(gM);Obe=n(bke,"STRONG",{});var q6t=s(Obe);vvr=r(q6t,"xlm-roberta"),q6t.forEach(t),Tvr=r(bke," \u2014 "),EQ=n(bke,"A",{href:!0});var N6t=s(EQ);Mvr=r(N6t,"TFXLMRobertaForQuestionAnswering"),N6t.forEach(t),Evr=r(bke," (XLM-RoBERTa model)"),bke.forEach(t),Cvr=i(te),hM=n(te,"LI",{});var Fke=s(hM);Vbe=n(Fke,"STRONG",{});var j6t=s(Vbe);wvr=r(j6t,"xlnet"),j6t.forEach(t),Avr=r(Fke," \u2014 "),CQ=n(Fke,"A",{href:!0});var D6t=s(CQ);yvr=r(D6t,"TFXLNetForQuestionAnsweringSimple"),D6t.forEach(t),Lvr=r(Fke," (XLNet model)"),Fke.forEach(t),te.forEach(t),xvr=i(wa),Xbe=n(wa,"P",{});var G6t=s(Xbe);kvr=r(G6t,"Examples:"),G6t.forEach(t),Svr=i(wa),m(Ay.$$.fragment,wa),wa.forEach(t),ni.forEach(t),OBe=i(c),Qc=n(c,"H2",{class:!0});var Z$e=s(Qc);pM=n(Z$e,"A",{id:!0,class:!0,href:!0});var O6t=s(pM);zbe=n(O6t,"SPAN",{});var V6t=s(zbe);m(yy.$$.fragment,V6t),V6t.forEach(t),O6t.forEach(t),Rvr=i(Z$e),Qbe=n(Z$e,"SPAN",{});var X6t=s(Qbe);Bvr=r(X6t,"TFAutoModelForVision2Seq"),X6t.forEach(t),Z$e.forEach(t),VBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(Ly.$$.fragment,li),Pvr=i(li),Wc=n(li,"P",{});var yJ=s(Wc);$vr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wQ=n(yJ,"A",{href:!0});var z6t=s(wQ);Ivr=r(z6t,"from_pretrained()"),z6t.forEach(t),qvr=r(yJ," class method or the "),AQ=n(yJ,"A",{href:!0});var Q6t=s(AQ);Nvr=r(Q6t,"from_config()"),Q6t.forEach(t),jvr=r(yJ,` class
method.`),yJ.forEach(t),Dvr=i(li),xy=n(li,"P",{});var eIe=s(xy);Gvr=r(eIe,"This class cannot be instantiated directly using "),Wbe=n(eIe,"CODE",{});var W6t=s(Wbe);Ovr=r(W6t,"__init__()"),W6t.forEach(t),Vvr=r(eIe," (throws an error)."),eIe.forEach(t),Xvr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(ky.$$.fragment,ii),zvr=i(ii),Hbe=n(ii,"P",{});var H6t=s(Hbe);Qvr=r(H6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),H6t.forEach(t),Wvr=i(ii),Hc=n(ii,"P",{});var LJ=s(Hc);Hvr=r(LJ,`Note:
Loading a model from its configuration file does `),Ube=n(LJ,"STRONG",{});var U6t=s(Ube);Uvr=r(U6t,"not"),U6t.forEach(t),Jvr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(LJ,"A",{href:!0});var J6t=s(yQ);Yvr=r(J6t,"from_pretrained()"),J6t.forEach(t),Kvr=r(LJ," to load the model weights."),LJ.forEach(t),Zvr=i(ii),Jbe=n(ii,"P",{});var Y6t=s(Jbe);e0r=r(Y6t,"Examples:"),Y6t.forEach(t),o0r=i(ii),m(Sy.$$.fragment,ii),ii.forEach(t),r0r=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(Ry.$$.fragment,Aa),t0r=i(Aa),Ybe=n(Aa,"P",{});var K6t=s(Ybe);a0r=r(K6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K6t.forEach(t),n0r=i(Aa),yn=n(Aa,"P",{});var d5=s(yn);s0r=r(d5,"The model class to instantiate is selected based on the "),Kbe=n(d5,"CODE",{});var Z6t=s(Kbe);l0r=r(Z6t,"model_type"),Z6t.forEach(t),i0r=r(d5,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(d5,"CODE",{});var eFt=s(Zbe);d0r=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),c0r=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(d5,"CODE",{});var oFt=s(e2e);f0r=r(oFt,"pretrained_model_name_or_path"),oFt.forEach(t),m0r=r(d5,":"),d5.forEach(t),g0r=i(Aa),o2e=n(Aa,"UL",{});var rFt=s(o2e);_M=n(rFt,"LI",{});var vke=s(_M);r2e=n(vke,"STRONG",{});var tFt=s(r2e);h0r=r(tFt,"vision-encoder-decoder"),tFt.forEach(t),p0r=r(vke," \u2014 "),LQ=n(vke,"A",{href:!0});var aFt=s(LQ);_0r=r(aFt,"TFVisionEncoderDecoderModel"),aFt.forEach(t),u0r=r(vke," (Vision Encoder decoder model)"),vke.forEach(t),rFt.forEach(t),b0r=i(Aa),t2e=n(Aa,"P",{});var nFt=s(t2e);F0r=r(nFt,"Examples:"),nFt.forEach(t),v0r=i(Aa),m(By.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),XBe=i(c),Uc=n(c,"H2",{class:!0});var oIe=s(Uc);uM=n(oIe,"A",{id:!0,class:!0,href:!0});var sFt=s(uM);a2e=n(sFt,"SPAN",{});var lFt=s(a2e);m(Py.$$.fragment,lFt),lFt.forEach(t),sFt.forEach(t),T0r=i(oIe),n2e=n(oIe,"SPAN",{});var iFt=s(n2e);M0r=r(iFt,"TFAutoModelForSpeechSeq2Seq"),iFt.forEach(t),oIe.forEach(t),zBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m($y.$$.fragment,di),E0r=i(di),Jc=n(di,"P",{});var xJ=s(Jc);C0r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xQ=n(xJ,"A",{href:!0});var dFt=s(xQ);w0r=r(dFt,"from_pretrained()"),dFt.forEach(t),A0r=r(xJ," class method or the "),kQ=n(xJ,"A",{href:!0});var cFt=s(kQ);y0r=r(cFt,"from_config()"),cFt.forEach(t),L0r=r(xJ,` class
method.`),xJ.forEach(t),x0r=i(di),Iy=n(di,"P",{});var rIe=s(Iy);k0r=r(rIe,"This class cannot be instantiated directly using "),s2e=n(rIe,"CODE",{});var fFt=s(s2e);S0r=r(fFt,"__init__()"),fFt.forEach(t),R0r=r(rIe," (throws an error)."),rIe.forEach(t),B0r=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(qy.$$.fragment,ci),P0r=i(ci),l2e=n(ci,"P",{});var mFt=s(l2e);$0r=r(mFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mFt.forEach(t),I0r=i(ci),Yc=n(ci,"P",{});var kJ=s(Yc);q0r=r(kJ,`Note:
Loading a model from its configuration file does `),i2e=n(kJ,"STRONG",{});var gFt=s(i2e);N0r=r(gFt,"not"),gFt.forEach(t),j0r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(kJ,"A",{href:!0});var hFt=s(SQ);D0r=r(hFt,"from_pretrained()"),hFt.forEach(t),G0r=r(kJ," to load the model weights."),kJ.forEach(t),O0r=i(ci),d2e=n(ci,"P",{});var pFt=s(d2e);V0r=r(pFt,"Examples:"),pFt.forEach(t),X0r=i(ci),m(Ny.$$.fragment,ci),ci.forEach(t),z0r=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(jy.$$.fragment,ya),Q0r=i(ya),c2e=n(ya,"P",{});var _Ft=s(c2e);W0r=r(_Ft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Ft.forEach(t),H0r=i(ya),Ln=n(ya,"P",{});var c5=s(Ln);U0r=r(c5,"The model class to instantiate is selected based on the "),f2e=n(c5,"CODE",{});var uFt=s(f2e);J0r=r(uFt,"model_type"),uFt.forEach(t),Y0r=r(c5,` property of the config object (either
passed as an argument or loaded from `),m2e=n(c5,"CODE",{});var bFt=s(m2e);K0r=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),Z0r=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(c5,"CODE",{});var FFt=s(g2e);eTr=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),oTr=r(c5,":"),c5.forEach(t),rTr=i(ya),h2e=n(ya,"UL",{});var vFt=s(h2e);bM=n(vFt,"LI",{});var Tke=s(bM);p2e=n(Tke,"STRONG",{});var TFt=s(p2e);tTr=r(TFt,"speech_to_text"),TFt.forEach(t),aTr=r(Tke," \u2014 "),RQ=n(Tke,"A",{href:!0});var MFt=s(RQ);nTr=r(MFt,"TFSpeech2TextForConditionalGeneration"),MFt.forEach(t),sTr=r(Tke," (Speech2Text model)"),Tke.forEach(t),vFt.forEach(t),lTr=i(ya),_2e=n(ya,"P",{});var EFt=s(_2e);iTr=r(EFt,"Examples:"),EFt.forEach(t),dTr=i(ya),m(Dy.$$.fragment,ya),ya.forEach(t),di.forEach(t),QBe=i(c),Kc=n(c,"H2",{class:!0});var tIe=s(Kc);FM=n(tIe,"A",{id:!0,class:!0,href:!0});var CFt=s(FM);u2e=n(CFt,"SPAN",{});var wFt=s(u2e);m(Gy.$$.fragment,wFt),wFt.forEach(t),CFt.forEach(t),cTr=i(tIe),b2e=n(tIe,"SPAN",{});var AFt=s(b2e);fTr=r(AFt,"FlaxAutoModel"),AFt.forEach(t),tIe.forEach(t),WBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(Oy.$$.fragment,fi),mTr=i(fi),Zc=n(fi,"P",{});var SJ=s(Zc);gTr=r(SJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BQ=n(SJ,"A",{href:!0});var yFt=s(BQ);hTr=r(yFt,"from_pretrained()"),yFt.forEach(t),pTr=r(SJ," class method or the "),PQ=n(SJ,"A",{href:!0});var LFt=s(PQ);_Tr=r(LFt,"from_config()"),LFt.forEach(t),uTr=r(SJ,` class
method.`),SJ.forEach(t),bTr=i(fi),Vy=n(fi,"P",{});var aIe=s(Vy);FTr=r(aIe,"This class cannot be instantiated directly using "),F2e=n(aIe,"CODE",{});var xFt=s(F2e);vTr=r(xFt,"__init__()"),xFt.forEach(t),TTr=r(aIe," (throws an error)."),aIe.forEach(t),MTr=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(Xy.$$.fragment,mi),ETr=i(mi),v2e=n(mi,"P",{});var kFt=s(v2e);CTr=r(kFt,"Instantiates one of the base model classes of the library from a configuration."),kFt.forEach(t),wTr=i(mi),ef=n(mi,"P",{});var RJ=s(ef);ATr=r(RJ,`Note:
Loading a model from its configuration file does `),T2e=n(RJ,"STRONG",{});var SFt=s(T2e);yTr=r(SFt,"not"),SFt.forEach(t),LTr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(RJ,"A",{href:!0});var RFt=s($Q);xTr=r(RFt,"from_pretrained()"),RFt.forEach(t),kTr=r(RJ," to load the model weights."),RJ.forEach(t),STr=i(mi),M2e=n(mi,"P",{});var BFt=s(M2e);RTr=r(BFt,"Examples:"),BFt.forEach(t),BTr=i(mi),m(zy.$$.fragment,mi),mi.forEach(t),PTr=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(Qy.$$.fragment,La),$Tr=i(La),E2e=n(La,"P",{});var PFt=s(E2e);ITr=r(PFt,"Instantiate one of the base model classes of the library from a pretrained model."),PFt.forEach(t),qTr=i(La),xn=n(La,"P",{});var f5=s(xn);NTr=r(f5,"The model class to instantiate is selected based on the "),C2e=n(f5,"CODE",{});var $Ft=s(C2e);jTr=r($Ft,"model_type"),$Ft.forEach(t),DTr=r(f5,` property of the config object (either
passed as an argument or loaded from `),w2e=n(f5,"CODE",{});var IFt=s(w2e);GTr=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),OTr=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(f5,"CODE",{});var qFt=s(A2e);VTr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),XTr=r(f5,":"),f5.forEach(t),zTr=i(La),z=n(La,"UL",{});var W=s(z);vM=n(W,"LI",{});var Mke=s(vM);y2e=n(Mke,"STRONG",{});var NFt=s(y2e);QTr=r(NFt,"albert"),NFt.forEach(t),WTr=r(Mke," \u2014 "),IQ=n(Mke,"A",{href:!0});var jFt=s(IQ);HTr=r(jFt,"FlaxAlbertModel"),jFt.forEach(t),UTr=r(Mke," (ALBERT model)"),Mke.forEach(t),JTr=i(W),TM=n(W,"LI",{});var Eke=s(TM);L2e=n(Eke,"STRONG",{});var DFt=s(L2e);YTr=r(DFt,"bart"),DFt.forEach(t),KTr=r(Eke," \u2014 "),qQ=n(Eke,"A",{href:!0});var GFt=s(qQ);ZTr=r(GFt,"FlaxBartModel"),GFt.forEach(t),eMr=r(Eke," (BART model)"),Eke.forEach(t),oMr=i(W),MM=n(W,"LI",{});var Cke=s(MM);x2e=n(Cke,"STRONG",{});var OFt=s(x2e);rMr=r(OFt,"beit"),OFt.forEach(t),tMr=r(Cke," \u2014 "),NQ=n(Cke,"A",{href:!0});var VFt=s(NQ);aMr=r(VFt,"FlaxBeitModel"),VFt.forEach(t),nMr=r(Cke," (BEiT model)"),Cke.forEach(t),sMr=i(W),EM=n(W,"LI",{});var wke=s(EM);k2e=n(wke,"STRONG",{});var XFt=s(k2e);lMr=r(XFt,"bert"),XFt.forEach(t),iMr=r(wke," \u2014 "),jQ=n(wke,"A",{href:!0});var zFt=s(jQ);dMr=r(zFt,"FlaxBertModel"),zFt.forEach(t),cMr=r(wke," (BERT model)"),wke.forEach(t),fMr=i(W),CM=n(W,"LI",{});var Ake=s(CM);S2e=n(Ake,"STRONG",{});var QFt=s(S2e);mMr=r(QFt,"big_bird"),QFt.forEach(t),gMr=r(Ake," \u2014 "),DQ=n(Ake,"A",{href:!0});var WFt=s(DQ);hMr=r(WFt,"FlaxBigBirdModel"),WFt.forEach(t),pMr=r(Ake," (BigBird model)"),Ake.forEach(t),_Mr=i(W),wM=n(W,"LI",{});var yke=s(wM);R2e=n(yke,"STRONG",{});var HFt=s(R2e);uMr=r(HFt,"blenderbot"),HFt.forEach(t),bMr=r(yke," \u2014 "),GQ=n(yke,"A",{href:!0});var UFt=s(GQ);FMr=r(UFt,"FlaxBlenderbotModel"),UFt.forEach(t),vMr=r(yke," (Blenderbot model)"),yke.forEach(t),TMr=i(W),AM=n(W,"LI",{});var Lke=s(AM);B2e=n(Lke,"STRONG",{});var JFt=s(B2e);MMr=r(JFt,"blenderbot-small"),JFt.forEach(t),EMr=r(Lke," \u2014 "),OQ=n(Lke,"A",{href:!0});var YFt=s(OQ);CMr=r(YFt,"FlaxBlenderbotSmallModel"),YFt.forEach(t),wMr=r(Lke," (BlenderbotSmall model)"),Lke.forEach(t),AMr=i(W),yM=n(W,"LI",{});var xke=s(yM);P2e=n(xke,"STRONG",{});var KFt=s(P2e);yMr=r(KFt,"clip"),KFt.forEach(t),LMr=r(xke," \u2014 "),VQ=n(xke,"A",{href:!0});var ZFt=s(VQ);xMr=r(ZFt,"FlaxCLIPModel"),ZFt.forEach(t),kMr=r(xke," (CLIP model)"),xke.forEach(t),SMr=i(W),LM=n(W,"LI",{});var kke=s(LM);$2e=n(kke,"STRONG",{});var evt=s($2e);RMr=r(evt,"distilbert"),evt.forEach(t),BMr=r(kke," \u2014 "),XQ=n(kke,"A",{href:!0});var ovt=s(XQ);PMr=r(ovt,"FlaxDistilBertModel"),ovt.forEach(t),$Mr=r(kke," (DistilBERT model)"),kke.forEach(t),IMr=i(W),xM=n(W,"LI",{});var Ske=s(xM);I2e=n(Ske,"STRONG",{});var rvt=s(I2e);qMr=r(rvt,"electra"),rvt.forEach(t),NMr=r(Ske," \u2014 "),zQ=n(Ske,"A",{href:!0});var tvt=s(zQ);jMr=r(tvt,"FlaxElectraModel"),tvt.forEach(t),DMr=r(Ske," (ELECTRA model)"),Ske.forEach(t),GMr=i(W),kM=n(W,"LI",{});var Rke=s(kM);q2e=n(Rke,"STRONG",{});var avt=s(q2e);OMr=r(avt,"gpt2"),avt.forEach(t),VMr=r(Rke," \u2014 "),QQ=n(Rke,"A",{href:!0});var nvt=s(QQ);XMr=r(nvt,"FlaxGPT2Model"),nvt.forEach(t),zMr=r(Rke," (OpenAI GPT-2 model)"),Rke.forEach(t),QMr=i(W),SM=n(W,"LI",{});var Bke=s(SM);N2e=n(Bke,"STRONG",{});var svt=s(N2e);WMr=r(svt,"gpt_neo"),svt.forEach(t),HMr=r(Bke," \u2014 "),WQ=n(Bke,"A",{href:!0});var lvt=s(WQ);UMr=r(lvt,"FlaxGPTNeoModel"),lvt.forEach(t),JMr=r(Bke," (GPT Neo model)"),Bke.forEach(t),YMr=i(W),RM=n(W,"LI",{});var Pke=s(RM);j2e=n(Pke,"STRONG",{});var ivt=s(j2e);KMr=r(ivt,"gptj"),ivt.forEach(t),ZMr=r(Pke," \u2014 "),HQ=n(Pke,"A",{href:!0});var dvt=s(HQ);e4r=r(dvt,"FlaxGPTJModel"),dvt.forEach(t),o4r=r(Pke," (GPT-J model)"),Pke.forEach(t),r4r=i(W),BM=n(W,"LI",{});var $ke=s(BM);D2e=n($ke,"STRONG",{});var cvt=s(D2e);t4r=r(cvt,"marian"),cvt.forEach(t),a4r=r($ke," \u2014 "),UQ=n($ke,"A",{href:!0});var fvt=s(UQ);n4r=r(fvt,"FlaxMarianModel"),fvt.forEach(t),s4r=r($ke," (Marian model)"),$ke.forEach(t),l4r=i(W),PM=n(W,"LI",{});var Ike=s(PM);G2e=n(Ike,"STRONG",{});var mvt=s(G2e);i4r=r(mvt,"mbart"),mvt.forEach(t),d4r=r(Ike," \u2014 "),JQ=n(Ike,"A",{href:!0});var gvt=s(JQ);c4r=r(gvt,"FlaxMBartModel"),gvt.forEach(t),f4r=r(Ike," (mBART model)"),Ike.forEach(t),m4r=i(W),$M=n(W,"LI",{});var qke=s($M);O2e=n(qke,"STRONG",{});var hvt=s(O2e);g4r=r(hvt,"mt5"),hvt.forEach(t),h4r=r(qke," \u2014 "),YQ=n(qke,"A",{href:!0});var pvt=s(YQ);p4r=r(pvt,"FlaxMT5Model"),pvt.forEach(t),_4r=r(qke," (mT5 model)"),qke.forEach(t),u4r=i(W),IM=n(W,"LI",{});var Nke=s(IM);V2e=n(Nke,"STRONG",{});var _vt=s(V2e);b4r=r(_vt,"pegasus"),_vt.forEach(t),F4r=r(Nke," \u2014 "),KQ=n(Nke,"A",{href:!0});var uvt=s(KQ);v4r=r(uvt,"FlaxPegasusModel"),uvt.forEach(t),T4r=r(Nke," (Pegasus model)"),Nke.forEach(t),M4r=i(W),qM=n(W,"LI",{});var jke=s(qM);X2e=n(jke,"STRONG",{});var bvt=s(X2e);E4r=r(bvt,"roberta"),bvt.forEach(t),C4r=r(jke," \u2014 "),ZQ=n(jke,"A",{href:!0});var Fvt=s(ZQ);w4r=r(Fvt,"FlaxRobertaModel"),Fvt.forEach(t),A4r=r(jke," (RoBERTa model)"),jke.forEach(t),y4r=i(W),NM=n(W,"LI",{});var Dke=s(NM);z2e=n(Dke,"STRONG",{});var vvt=s(z2e);L4r=r(vvt,"roformer"),vvt.forEach(t),x4r=r(Dke," \u2014 "),eW=n(Dke,"A",{href:!0});var Tvt=s(eW);k4r=r(Tvt,"FlaxRoFormerModel"),Tvt.forEach(t),S4r=r(Dke," (RoFormer model)"),Dke.forEach(t),R4r=i(W),jM=n(W,"LI",{});var Gke=s(jM);Q2e=n(Gke,"STRONG",{});var Mvt=s(Q2e);B4r=r(Mvt,"t5"),Mvt.forEach(t),P4r=r(Gke," \u2014 "),oW=n(Gke,"A",{href:!0});var Evt=s(oW);$4r=r(Evt,"FlaxT5Model"),Evt.forEach(t),I4r=r(Gke," (T5 model)"),Gke.forEach(t),q4r=i(W),DM=n(W,"LI",{});var Oke=s(DM);W2e=n(Oke,"STRONG",{});var Cvt=s(W2e);N4r=r(Cvt,"vision-text-dual-encoder"),Cvt.forEach(t),j4r=r(Oke," \u2014 "),rW=n(Oke,"A",{href:!0});var wvt=s(rW);D4r=r(wvt,"FlaxVisionTextDualEncoderModel"),wvt.forEach(t),G4r=r(Oke," (VisionTextDualEncoder model)"),Oke.forEach(t),O4r=i(W),GM=n(W,"LI",{});var Vke=s(GM);H2e=n(Vke,"STRONG",{});var Avt=s(H2e);V4r=r(Avt,"vit"),Avt.forEach(t),X4r=r(Vke," \u2014 "),tW=n(Vke,"A",{href:!0});var yvt=s(tW);z4r=r(yvt,"FlaxViTModel"),yvt.forEach(t),Q4r=r(Vke," (ViT model)"),Vke.forEach(t),W4r=i(W),OM=n(W,"LI",{});var Xke=s(OM);U2e=n(Xke,"STRONG",{});var Lvt=s(U2e);H4r=r(Lvt,"wav2vec2"),Lvt.forEach(t),U4r=r(Xke," \u2014 "),aW=n(Xke,"A",{href:!0});var xvt=s(aW);J4r=r(xvt,"FlaxWav2Vec2Model"),xvt.forEach(t),Y4r=r(Xke," (Wav2Vec2 model)"),Xke.forEach(t),K4r=i(W),VM=n(W,"LI",{});var zke=s(VM);J2e=n(zke,"STRONG",{});var kvt=s(J2e);Z4r=r(kvt,"xglm"),kvt.forEach(t),eEr=r(zke," \u2014 "),nW=n(zke,"A",{href:!0});var Svt=s(nW);oEr=r(Svt,"FlaxXGLMModel"),Svt.forEach(t),rEr=r(zke," (XGLM model)"),zke.forEach(t),tEr=i(W),XM=n(W,"LI",{});var Qke=s(XM);Y2e=n(Qke,"STRONG",{});var Rvt=s(Y2e);aEr=r(Rvt,"xlm-roberta"),Rvt.forEach(t),nEr=r(Qke," \u2014 "),sW=n(Qke,"A",{href:!0});var Bvt=s(sW);sEr=r(Bvt,"FlaxXLMRobertaModel"),Bvt.forEach(t),lEr=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),W.forEach(t),iEr=i(La),K2e=n(La,"P",{});var Pvt=s(K2e);dEr=r(Pvt,"Examples:"),Pvt.forEach(t),cEr=i(La),m(Wy.$$.fragment,La),La.forEach(t),fi.forEach(t),HBe=i(c),of=n(c,"H2",{class:!0});var nIe=s(of);zM=n(nIe,"A",{id:!0,class:!0,href:!0});var $vt=s(zM);Z2e=n($vt,"SPAN",{});var Ivt=s(Z2e);m(Hy.$$.fragment,Ivt),Ivt.forEach(t),$vt.forEach(t),fEr=i(nIe),e6e=n(nIe,"SPAN",{});var qvt=s(e6e);mEr=r(qvt,"FlaxAutoModelForCausalLM"),qvt.forEach(t),nIe.forEach(t),UBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(Uy.$$.fragment,gi),gEr=i(gi),rf=n(gi,"P",{});var BJ=s(rf);hEr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lW=n(BJ,"A",{href:!0});var Nvt=s(lW);pEr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),_Er=r(BJ," class method or the "),iW=n(BJ,"A",{href:!0});var jvt=s(iW);uEr=r(jvt,"from_config()"),jvt.forEach(t),bEr=r(BJ,` class
method.`),BJ.forEach(t),FEr=i(gi),Jy=n(gi,"P",{});var sIe=s(Jy);vEr=r(sIe,"This class cannot be instantiated directly using "),o6e=n(sIe,"CODE",{});var Dvt=s(o6e);TEr=r(Dvt,"__init__()"),Dvt.forEach(t),MEr=r(sIe," (throws an error)."),sIe.forEach(t),EEr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Yy.$$.fragment,hi),CEr=i(hi),r6e=n(hi,"P",{});var Gvt=s(r6e);wEr=r(Gvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gvt.forEach(t),AEr=i(hi),tf=n(hi,"P",{});var PJ=s(tf);yEr=r(PJ,`Note:
Loading a model from its configuration file does `),t6e=n(PJ,"STRONG",{});var Ovt=s(t6e);LEr=r(Ovt,"not"),Ovt.forEach(t),xEr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(PJ,"A",{href:!0});var Vvt=s(dW);kEr=r(Vvt,"from_pretrained()"),Vvt.forEach(t),SEr=r(PJ," to load the model weights."),PJ.forEach(t),REr=i(hi),a6e=n(hi,"P",{});var Xvt=s(a6e);BEr=r(Xvt,"Examples:"),Xvt.forEach(t),PEr=i(hi),m(Ky.$$.fragment,hi),hi.forEach(t),$Er=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(Zy.$$.fragment,xa),IEr=i(xa),n6e=n(xa,"P",{});var zvt=s(n6e);qEr=r(zvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zvt.forEach(t),NEr=i(xa),kn=n(xa,"P",{});var m5=s(kn);jEr=r(m5,"The model class to instantiate is selected based on the "),s6e=n(m5,"CODE",{});var Qvt=s(s6e);DEr=r(Qvt,"model_type"),Qvt.forEach(t),GEr=r(m5,` property of the config object (either
passed as an argument or loaded from `),l6e=n(m5,"CODE",{});var Wvt=s(l6e);OEr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),VEr=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=n(m5,"CODE",{});var Hvt=s(i6e);XEr=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),zEr=r(m5,":"),m5.forEach(t),QEr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);QM=n(pi,"LI",{});var Wke=s(QM);d6e=n(Wke,"STRONG",{});var Uvt=s(d6e);WEr=r(Uvt,"bart"),Uvt.forEach(t),HEr=r(Wke," \u2014 "),cW=n(Wke,"A",{href:!0});var Jvt=s(cW);UEr=r(Jvt,"FlaxBartForCausalLM"),Jvt.forEach(t),JEr=r(Wke," (BART model)"),Wke.forEach(t),YEr=i(pi),WM=n(pi,"LI",{});var Hke=s(WM);c6e=n(Hke,"STRONG",{});var Yvt=s(c6e);KEr=r(Yvt,"gpt2"),Yvt.forEach(t),ZEr=r(Hke," \u2014 "),fW=n(Hke,"A",{href:!0});var Kvt=s(fW);e5r=r(Kvt,"FlaxGPT2LMHeadModel"),Kvt.forEach(t),o5r=r(Hke," (OpenAI GPT-2 model)"),Hke.forEach(t),r5r=i(pi),HM=n(pi,"LI",{});var Uke=s(HM);f6e=n(Uke,"STRONG",{});var Zvt=s(f6e);t5r=r(Zvt,"gpt_neo"),Zvt.forEach(t),a5r=r(Uke," \u2014 "),mW=n(Uke,"A",{href:!0});var e0t=s(mW);n5r=r(e0t,"FlaxGPTNeoForCausalLM"),e0t.forEach(t),s5r=r(Uke," (GPT Neo model)"),Uke.forEach(t),l5r=i(pi),UM=n(pi,"LI",{});var Jke=s(UM);m6e=n(Jke,"STRONG",{});var o0t=s(m6e);i5r=r(o0t,"gptj"),o0t.forEach(t),d5r=r(Jke," \u2014 "),gW=n(Jke,"A",{href:!0});var r0t=s(gW);c5r=r(r0t,"FlaxGPTJForCausalLM"),r0t.forEach(t),f5r=r(Jke," (GPT-J model)"),Jke.forEach(t),m5r=i(pi),JM=n(pi,"LI",{});var Yke=s(JM);g6e=n(Yke,"STRONG",{});var t0t=s(g6e);g5r=r(t0t,"xglm"),t0t.forEach(t),h5r=r(Yke," \u2014 "),hW=n(Yke,"A",{href:!0});var a0t=s(hW);p5r=r(a0t,"FlaxXGLMForCausalLM"),a0t.forEach(t),_5r=r(Yke," (XGLM model)"),Yke.forEach(t),pi.forEach(t),u5r=i(xa),h6e=n(xa,"P",{});var n0t=s(h6e);b5r=r(n0t,"Examples:"),n0t.forEach(t),F5r=i(xa),m(eL.$$.fragment,xa),xa.forEach(t),gi.forEach(t),JBe=i(c),af=n(c,"H2",{class:!0});var lIe=s(af);YM=n(lIe,"A",{id:!0,class:!0,href:!0});var s0t=s(YM);p6e=n(s0t,"SPAN",{});var l0t=s(p6e);m(oL.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),v5r=i(lIe),_6e=n(lIe,"SPAN",{});var i0t=s(_6e);T5r=r(i0t,"FlaxAutoModelForPreTraining"),i0t.forEach(t),lIe.forEach(t),YBe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(rL.$$.fragment,_i),M5r=i(_i),nf=n(_i,"P",{});var $J=s(nf);E5r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pW=n($J,"A",{href:!0});var d0t=s(pW);C5r=r(d0t,"from_pretrained()"),d0t.forEach(t),w5r=r($J," class method or the "),_W=n($J,"A",{href:!0});var c0t=s(_W);A5r=r(c0t,"from_config()"),c0t.forEach(t),y5r=r($J,` class
method.`),$J.forEach(t),L5r=i(_i),tL=n(_i,"P",{});var iIe=s(tL);x5r=r(iIe,"This class cannot be instantiated directly using "),u6e=n(iIe,"CODE",{});var f0t=s(u6e);k5r=r(f0t,"__init__()"),f0t.forEach(t),S5r=r(iIe," (throws an error)."),iIe.forEach(t),R5r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(aL.$$.fragment,ui),B5r=i(ui),b6e=n(ui,"P",{});var m0t=s(b6e);P5r=r(m0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m0t.forEach(t),$5r=i(ui),sf=n(ui,"P",{});var IJ=s(sf);I5r=r(IJ,`Note:
Loading a model from its configuration file does `),F6e=n(IJ,"STRONG",{});var g0t=s(F6e);q5r=r(g0t,"not"),g0t.forEach(t),N5r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(IJ,"A",{href:!0});var h0t=s(uW);j5r=r(h0t,"from_pretrained()"),h0t.forEach(t),D5r=r(IJ," to load the model weights."),IJ.forEach(t),G5r=i(ui),v6e=n(ui,"P",{});var p0t=s(v6e);O5r=r(p0t,"Examples:"),p0t.forEach(t),V5r=i(ui),m(nL.$$.fragment,ui),ui.forEach(t),X5r=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(sL.$$.fragment,ka),z5r=i(ka),T6e=n(ka,"P",{});var _0t=s(T6e);Q5r=r(_0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_0t.forEach(t),W5r=i(ka),Sn=n(ka,"P",{});var g5=s(Sn);H5r=r(g5,"The model class to instantiate is selected based on the "),M6e=n(g5,"CODE",{});var u0t=s(M6e);U5r=r(u0t,"model_type"),u0t.forEach(t),J5r=r(g5,` property of the config object (either
passed as an argument or loaded from `),E6e=n(g5,"CODE",{});var b0t=s(E6e);Y5r=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),K5r=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(g5,"CODE",{});var F0t=s(C6e);Z5r=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),e3r=r(g5,":"),g5.forEach(t),o3r=i(ka),me=n(ka,"UL",{});var _e=s(me);KM=n(_e,"LI",{});var Kke=s(KM);w6e=n(Kke,"STRONG",{});var v0t=s(w6e);r3r=r(v0t,"albert"),v0t.forEach(t),t3r=r(Kke," \u2014 "),bW=n(Kke,"A",{href:!0});var T0t=s(bW);a3r=r(T0t,"FlaxAlbertForPreTraining"),T0t.forEach(t),n3r=r(Kke," (ALBERT model)"),Kke.forEach(t),s3r=i(_e),ZM=n(_e,"LI",{});var Zke=s(ZM);A6e=n(Zke,"STRONG",{});var M0t=s(A6e);l3r=r(M0t,"bart"),M0t.forEach(t),i3r=r(Zke," \u2014 "),FW=n(Zke,"A",{href:!0});var E0t=s(FW);d3r=r(E0t,"FlaxBartForConditionalGeneration"),E0t.forEach(t),c3r=r(Zke," (BART model)"),Zke.forEach(t),f3r=i(_e),e4=n(_e,"LI",{});var eSe=s(e4);y6e=n(eSe,"STRONG",{});var C0t=s(y6e);m3r=r(C0t,"bert"),C0t.forEach(t),g3r=r(eSe," \u2014 "),vW=n(eSe,"A",{href:!0});var w0t=s(vW);h3r=r(w0t,"FlaxBertForPreTraining"),w0t.forEach(t),p3r=r(eSe," (BERT model)"),eSe.forEach(t),_3r=i(_e),o4=n(_e,"LI",{});var oSe=s(o4);L6e=n(oSe,"STRONG",{});var A0t=s(L6e);u3r=r(A0t,"big_bird"),A0t.forEach(t),b3r=r(oSe," \u2014 "),TW=n(oSe,"A",{href:!0});var y0t=s(TW);F3r=r(y0t,"FlaxBigBirdForPreTraining"),y0t.forEach(t),v3r=r(oSe," (BigBird model)"),oSe.forEach(t),T3r=i(_e),r4=n(_e,"LI",{});var rSe=s(r4);x6e=n(rSe,"STRONG",{});var L0t=s(x6e);M3r=r(L0t,"electra"),L0t.forEach(t),E3r=r(rSe," \u2014 "),MW=n(rSe,"A",{href:!0});var x0t=s(MW);C3r=r(x0t,"FlaxElectraForPreTraining"),x0t.forEach(t),w3r=r(rSe," (ELECTRA model)"),rSe.forEach(t),A3r=i(_e),t4=n(_e,"LI",{});var tSe=s(t4);k6e=n(tSe,"STRONG",{});var k0t=s(k6e);y3r=r(k0t,"mbart"),k0t.forEach(t),L3r=r(tSe," \u2014 "),EW=n(tSe,"A",{href:!0});var S0t=s(EW);x3r=r(S0t,"FlaxMBartForConditionalGeneration"),S0t.forEach(t),k3r=r(tSe," (mBART model)"),tSe.forEach(t),S3r=i(_e),a4=n(_e,"LI",{});var aSe=s(a4);S6e=n(aSe,"STRONG",{});var R0t=s(S6e);R3r=r(R0t,"mt5"),R0t.forEach(t),B3r=r(aSe," \u2014 "),CW=n(aSe,"A",{href:!0});var B0t=s(CW);P3r=r(B0t,"FlaxMT5ForConditionalGeneration"),B0t.forEach(t),$3r=r(aSe," (mT5 model)"),aSe.forEach(t),I3r=i(_e),n4=n(_e,"LI",{});var nSe=s(n4);R6e=n(nSe,"STRONG",{});var P0t=s(R6e);q3r=r(P0t,"roberta"),P0t.forEach(t),N3r=r(nSe," \u2014 "),wW=n(nSe,"A",{href:!0});var $0t=s(wW);j3r=r($0t,"FlaxRobertaForMaskedLM"),$0t.forEach(t),D3r=r(nSe," (RoBERTa model)"),nSe.forEach(t),G3r=i(_e),s4=n(_e,"LI",{});var sSe=s(s4);B6e=n(sSe,"STRONG",{});var I0t=s(B6e);O3r=r(I0t,"roformer"),I0t.forEach(t),V3r=r(sSe," \u2014 "),AW=n(sSe,"A",{href:!0});var q0t=s(AW);X3r=r(q0t,"FlaxRoFormerForMaskedLM"),q0t.forEach(t),z3r=r(sSe," (RoFormer model)"),sSe.forEach(t),Q3r=i(_e),l4=n(_e,"LI",{});var lSe=s(l4);P6e=n(lSe,"STRONG",{});var N0t=s(P6e);W3r=r(N0t,"t5"),N0t.forEach(t),H3r=r(lSe," \u2014 "),yW=n(lSe,"A",{href:!0});var j0t=s(yW);U3r=r(j0t,"FlaxT5ForConditionalGeneration"),j0t.forEach(t),J3r=r(lSe," (T5 model)"),lSe.forEach(t),Y3r=i(_e),i4=n(_e,"LI",{});var iSe=s(i4);$6e=n(iSe,"STRONG",{});var D0t=s($6e);K3r=r(D0t,"wav2vec2"),D0t.forEach(t),Z3r=r(iSe," \u2014 "),LW=n(iSe,"A",{href:!0});var G0t=s(LW);eCr=r(G0t,"FlaxWav2Vec2ForPreTraining"),G0t.forEach(t),oCr=r(iSe," (Wav2Vec2 model)"),iSe.forEach(t),rCr=i(_e),d4=n(_e,"LI",{});var dSe=s(d4);I6e=n(dSe,"STRONG",{});var O0t=s(I6e);tCr=r(O0t,"xlm-roberta"),O0t.forEach(t),aCr=r(dSe," \u2014 "),xW=n(dSe,"A",{href:!0});var V0t=s(xW);nCr=r(V0t,"FlaxXLMRobertaForMaskedLM"),V0t.forEach(t),sCr=r(dSe," (XLM-RoBERTa model)"),dSe.forEach(t),_e.forEach(t),lCr=i(ka),q6e=n(ka,"P",{});var X0t=s(q6e);iCr=r(X0t,"Examples:"),X0t.forEach(t),dCr=i(ka),m(lL.$$.fragment,ka),ka.forEach(t),_i.forEach(t),KBe=i(c),lf=n(c,"H2",{class:!0});var dIe=s(lf);c4=n(dIe,"A",{id:!0,class:!0,href:!0});var z0t=s(c4);N6e=n(z0t,"SPAN",{});var Q0t=s(N6e);m(iL.$$.fragment,Q0t),Q0t.forEach(t),z0t.forEach(t),cCr=i(dIe),j6e=n(dIe,"SPAN",{});var W0t=s(j6e);fCr=r(W0t,"FlaxAutoModelForMaskedLM"),W0t.forEach(t),dIe.forEach(t),ZBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(dL.$$.fragment,bi),mCr=i(bi),df=n(bi,"P",{});var qJ=s(df);gCr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kW=n(qJ,"A",{href:!0});var H0t=s(kW);hCr=r(H0t,"from_pretrained()"),H0t.forEach(t),pCr=r(qJ," class method or the "),SW=n(qJ,"A",{href:!0});var U0t=s(SW);_Cr=r(U0t,"from_config()"),U0t.forEach(t),uCr=r(qJ,` class
method.`),qJ.forEach(t),bCr=i(bi),cL=n(bi,"P",{});var cIe=s(cL);FCr=r(cIe,"This class cannot be instantiated directly using "),D6e=n(cIe,"CODE",{});var J0t=s(D6e);vCr=r(J0t,"__init__()"),J0t.forEach(t),TCr=r(cIe," (throws an error)."),cIe.forEach(t),MCr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(fL.$$.fragment,Fi),ECr=i(Fi),G6e=n(Fi,"P",{});var Y0t=s(G6e);CCr=r(Y0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Y0t.forEach(t),wCr=i(Fi),cf=n(Fi,"P",{});var NJ=s(cf);ACr=r(NJ,`Note:
Loading a model from its configuration file does `),O6e=n(NJ,"STRONG",{});var K0t=s(O6e);yCr=r(K0t,"not"),K0t.forEach(t),LCr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(NJ,"A",{href:!0});var Z0t=s(RW);xCr=r(Z0t,"from_pretrained()"),Z0t.forEach(t),kCr=r(NJ," to load the model weights."),NJ.forEach(t),SCr=i(Fi),V6e=n(Fi,"P",{});var eTt=s(V6e);RCr=r(eTt,"Examples:"),eTt.forEach(t),BCr=i(Fi),m(mL.$$.fragment,Fi),Fi.forEach(t),PCr=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(gL.$$.fragment,Sa),$Cr=i(Sa),X6e=n(Sa,"P",{});var oTt=s(X6e);ICr=r(oTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oTt.forEach(t),qCr=i(Sa),Rn=n(Sa,"P",{});var h5=s(Rn);NCr=r(h5,"The model class to instantiate is selected based on the "),z6e=n(h5,"CODE",{});var rTt=s(z6e);jCr=r(rTt,"model_type"),rTt.forEach(t),DCr=r(h5,` property of the config object (either
passed as an argument or loaded from `),Q6e=n(h5,"CODE",{});var tTt=s(Q6e);GCr=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),OCr=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=n(h5,"CODE",{});var aTt=s(W6e);VCr=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),XCr=r(h5,":"),h5.forEach(t),zCr=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);f4=n(Ae,"LI",{});var cSe=s(f4);H6e=n(cSe,"STRONG",{});var nTt=s(H6e);QCr=r(nTt,"albert"),nTt.forEach(t),WCr=r(cSe," \u2014 "),BW=n(cSe,"A",{href:!0});var sTt=s(BW);HCr=r(sTt,"FlaxAlbertForMaskedLM"),sTt.forEach(t),UCr=r(cSe," (ALBERT model)"),cSe.forEach(t),JCr=i(Ae),m4=n(Ae,"LI",{});var fSe=s(m4);U6e=n(fSe,"STRONG",{});var lTt=s(U6e);YCr=r(lTt,"bart"),lTt.forEach(t),KCr=r(fSe," \u2014 "),PW=n(fSe,"A",{href:!0});var iTt=s(PW);ZCr=r(iTt,"FlaxBartForConditionalGeneration"),iTt.forEach(t),ewr=r(fSe," (BART model)"),fSe.forEach(t),owr=i(Ae),g4=n(Ae,"LI",{});var mSe=s(g4);J6e=n(mSe,"STRONG",{});var dTt=s(J6e);rwr=r(dTt,"bert"),dTt.forEach(t),twr=r(mSe," \u2014 "),$W=n(mSe,"A",{href:!0});var cTt=s($W);awr=r(cTt,"FlaxBertForMaskedLM"),cTt.forEach(t),nwr=r(mSe," (BERT model)"),mSe.forEach(t),swr=i(Ae),h4=n(Ae,"LI",{});var gSe=s(h4);Y6e=n(gSe,"STRONG",{});var fTt=s(Y6e);lwr=r(fTt,"big_bird"),fTt.forEach(t),iwr=r(gSe," \u2014 "),IW=n(gSe,"A",{href:!0});var mTt=s(IW);dwr=r(mTt,"FlaxBigBirdForMaskedLM"),mTt.forEach(t),cwr=r(gSe," (BigBird model)"),gSe.forEach(t),fwr=i(Ae),p4=n(Ae,"LI",{});var hSe=s(p4);K6e=n(hSe,"STRONG",{});var gTt=s(K6e);mwr=r(gTt,"distilbert"),gTt.forEach(t),gwr=r(hSe," \u2014 "),qW=n(hSe,"A",{href:!0});var hTt=s(qW);hwr=r(hTt,"FlaxDistilBertForMaskedLM"),hTt.forEach(t),pwr=r(hSe," (DistilBERT model)"),hSe.forEach(t),_wr=i(Ae),_4=n(Ae,"LI",{});var pSe=s(_4);Z6e=n(pSe,"STRONG",{});var pTt=s(Z6e);uwr=r(pTt,"electra"),pTt.forEach(t),bwr=r(pSe," \u2014 "),NW=n(pSe,"A",{href:!0});var _Tt=s(NW);Fwr=r(_Tt,"FlaxElectraForMaskedLM"),_Tt.forEach(t),vwr=r(pSe," (ELECTRA model)"),pSe.forEach(t),Twr=i(Ae),u4=n(Ae,"LI",{});var _Se=s(u4);eFe=n(_Se,"STRONG",{});var uTt=s(eFe);Mwr=r(uTt,"mbart"),uTt.forEach(t),Ewr=r(_Se," \u2014 "),jW=n(_Se,"A",{href:!0});var bTt=s(jW);Cwr=r(bTt,"FlaxMBartForConditionalGeneration"),bTt.forEach(t),wwr=r(_Se," (mBART model)"),_Se.forEach(t),Awr=i(Ae),b4=n(Ae,"LI",{});var uSe=s(b4);oFe=n(uSe,"STRONG",{});var FTt=s(oFe);ywr=r(FTt,"roberta"),FTt.forEach(t),Lwr=r(uSe," \u2014 "),DW=n(uSe,"A",{href:!0});var vTt=s(DW);xwr=r(vTt,"FlaxRobertaForMaskedLM"),vTt.forEach(t),kwr=r(uSe," (RoBERTa model)"),uSe.forEach(t),Swr=i(Ae),F4=n(Ae,"LI",{});var bSe=s(F4);rFe=n(bSe,"STRONG",{});var TTt=s(rFe);Rwr=r(TTt,"roformer"),TTt.forEach(t),Bwr=r(bSe," \u2014 "),GW=n(bSe,"A",{href:!0});var MTt=s(GW);Pwr=r(MTt,"FlaxRoFormerForMaskedLM"),MTt.forEach(t),$wr=r(bSe," (RoFormer model)"),bSe.forEach(t),Iwr=i(Ae),v4=n(Ae,"LI",{});var FSe=s(v4);tFe=n(FSe,"STRONG",{});var ETt=s(tFe);qwr=r(ETt,"xlm-roberta"),ETt.forEach(t),Nwr=r(FSe," \u2014 "),OW=n(FSe,"A",{href:!0});var CTt=s(OW);jwr=r(CTt,"FlaxXLMRobertaForMaskedLM"),CTt.forEach(t),Dwr=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),Ae.forEach(t),Gwr=i(Sa),aFe=n(Sa,"P",{});var wTt=s(aFe);Owr=r(wTt,"Examples:"),wTt.forEach(t),Vwr=i(Sa),m(hL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),ePe=i(c),ff=n(c,"H2",{class:!0});var fIe=s(ff);T4=n(fIe,"A",{id:!0,class:!0,href:!0});var ATt=s(T4);nFe=n(ATt,"SPAN",{});var yTt=s(nFe);m(pL.$$.fragment,yTt),yTt.forEach(t),ATt.forEach(t),Xwr=i(fIe),sFe=n(fIe,"SPAN",{});var LTt=s(sFe);zwr=r(LTt,"FlaxAutoModelForSeq2SeqLM"),LTt.forEach(t),fIe.forEach(t),oPe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(_L.$$.fragment,vi),Qwr=i(vi),mf=n(vi,"P",{});var jJ=s(mf);Wwr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VW=n(jJ,"A",{href:!0});var xTt=s(VW);Hwr=r(xTt,"from_pretrained()"),xTt.forEach(t),Uwr=r(jJ," class method or the "),XW=n(jJ,"A",{href:!0});var kTt=s(XW);Jwr=r(kTt,"from_config()"),kTt.forEach(t),Ywr=r(jJ,` class
method.`),jJ.forEach(t),Kwr=i(vi),uL=n(vi,"P",{});var mIe=s(uL);Zwr=r(mIe,"This class cannot be instantiated directly using "),lFe=n(mIe,"CODE",{});var STt=s(lFe);eAr=r(STt,"__init__()"),STt.forEach(t),oAr=r(mIe," (throws an error)."),mIe.forEach(t),rAr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(bL.$$.fragment,Ti),tAr=i(Ti),iFe=n(Ti,"P",{});var RTt=s(iFe);aAr=r(RTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RTt.forEach(t),nAr=i(Ti),gf=n(Ti,"P",{});var DJ=s(gf);sAr=r(DJ,`Note:
Loading a model from its configuration file does `),dFe=n(DJ,"STRONG",{});var BTt=s(dFe);lAr=r(BTt,"not"),BTt.forEach(t),iAr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(DJ,"A",{href:!0});var PTt=s(zW);dAr=r(PTt,"from_pretrained()"),PTt.forEach(t),cAr=r(DJ," to load the model weights."),DJ.forEach(t),fAr=i(Ti),cFe=n(Ti,"P",{});var $Tt=s(cFe);mAr=r($Tt,"Examples:"),$Tt.forEach(t),gAr=i(Ti),m(FL.$$.fragment,Ti),Ti.forEach(t),hAr=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(vL.$$.fragment,Ra),pAr=i(Ra),fFe=n(Ra,"P",{});var ITt=s(fFe);_Ar=r(ITt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ITt.forEach(t),uAr=i(Ra),Bn=n(Ra,"P",{});var p5=s(Bn);bAr=r(p5,"The model class to instantiate is selected based on the "),mFe=n(p5,"CODE",{});var qTt=s(mFe);FAr=r(qTt,"model_type"),qTt.forEach(t),vAr=r(p5,` property of the config object (either
passed as an argument or loaded from `),gFe=n(p5,"CODE",{});var NTt=s(gFe);TAr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),MAr=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(p5,"CODE",{});var jTt=s(hFe);EAr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),CAr=r(p5,":"),p5.forEach(t),wAr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);M4=n(so,"LI",{});var vSe=s(M4);pFe=n(vSe,"STRONG",{});var DTt=s(pFe);AAr=r(DTt,"bart"),DTt.forEach(t),yAr=r(vSe," \u2014 "),QW=n(vSe,"A",{href:!0});var GTt=s(QW);LAr=r(GTt,"FlaxBartForConditionalGeneration"),GTt.forEach(t),xAr=r(vSe," (BART model)"),vSe.forEach(t),kAr=i(so),E4=n(so,"LI",{});var TSe=s(E4);_Fe=n(TSe,"STRONG",{});var OTt=s(_Fe);SAr=r(OTt,"blenderbot"),OTt.forEach(t),RAr=r(TSe," \u2014 "),WW=n(TSe,"A",{href:!0});var VTt=s(WW);BAr=r(VTt,"FlaxBlenderbotForConditionalGeneration"),VTt.forEach(t),PAr=r(TSe," (Blenderbot model)"),TSe.forEach(t),$Ar=i(so),C4=n(so,"LI",{});var MSe=s(C4);uFe=n(MSe,"STRONG",{});var XTt=s(uFe);IAr=r(XTt,"blenderbot-small"),XTt.forEach(t),qAr=r(MSe," \u2014 "),HW=n(MSe,"A",{href:!0});var zTt=s(HW);NAr=r(zTt,"FlaxBlenderbotSmallForConditionalGeneration"),zTt.forEach(t),jAr=r(MSe," (BlenderbotSmall model)"),MSe.forEach(t),DAr=i(so),w4=n(so,"LI",{});var ESe=s(w4);bFe=n(ESe,"STRONG",{});var QTt=s(bFe);GAr=r(QTt,"encoder-decoder"),QTt.forEach(t),OAr=r(ESe," \u2014 "),UW=n(ESe,"A",{href:!0});var WTt=s(UW);VAr=r(WTt,"FlaxEncoderDecoderModel"),WTt.forEach(t),XAr=r(ESe," (Encoder decoder model)"),ESe.forEach(t),zAr=i(so),A4=n(so,"LI",{});var CSe=s(A4);FFe=n(CSe,"STRONG",{});var HTt=s(FFe);QAr=r(HTt,"marian"),HTt.forEach(t),WAr=r(CSe," \u2014 "),JW=n(CSe,"A",{href:!0});var UTt=s(JW);HAr=r(UTt,"FlaxMarianMTModel"),UTt.forEach(t),UAr=r(CSe," (Marian model)"),CSe.forEach(t),JAr=i(so),y4=n(so,"LI",{});var wSe=s(y4);vFe=n(wSe,"STRONG",{});var JTt=s(vFe);YAr=r(JTt,"mbart"),JTt.forEach(t),KAr=r(wSe," \u2014 "),YW=n(wSe,"A",{href:!0});var YTt=s(YW);ZAr=r(YTt,"FlaxMBartForConditionalGeneration"),YTt.forEach(t),eyr=r(wSe," (mBART model)"),wSe.forEach(t),oyr=i(so),L4=n(so,"LI",{});var ASe=s(L4);TFe=n(ASe,"STRONG",{});var KTt=s(TFe);ryr=r(KTt,"mt5"),KTt.forEach(t),tyr=r(ASe," \u2014 "),KW=n(ASe,"A",{href:!0});var ZTt=s(KW);ayr=r(ZTt,"FlaxMT5ForConditionalGeneration"),ZTt.forEach(t),nyr=r(ASe," (mT5 model)"),ASe.forEach(t),syr=i(so),x4=n(so,"LI",{});var ySe=s(x4);MFe=n(ySe,"STRONG",{});var eMt=s(MFe);lyr=r(eMt,"pegasus"),eMt.forEach(t),iyr=r(ySe," \u2014 "),ZW=n(ySe,"A",{href:!0});var oMt=s(ZW);dyr=r(oMt,"FlaxPegasusForConditionalGeneration"),oMt.forEach(t),cyr=r(ySe," (Pegasus model)"),ySe.forEach(t),fyr=i(so),k4=n(so,"LI",{});var LSe=s(k4);EFe=n(LSe,"STRONG",{});var rMt=s(EFe);myr=r(rMt,"t5"),rMt.forEach(t),gyr=r(LSe," \u2014 "),eH=n(LSe,"A",{href:!0});var tMt=s(eH);hyr=r(tMt,"FlaxT5ForConditionalGeneration"),tMt.forEach(t),pyr=r(LSe," (T5 model)"),LSe.forEach(t),so.forEach(t),_yr=i(Ra),CFe=n(Ra,"P",{});var aMt=s(CFe);uyr=r(aMt,"Examples:"),aMt.forEach(t),byr=i(Ra),m(TL.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),rPe=i(c),hf=n(c,"H2",{class:!0});var gIe=s(hf);S4=n(gIe,"A",{id:!0,class:!0,href:!0});var nMt=s(S4);wFe=n(nMt,"SPAN",{});var sMt=s(wFe);m(ML.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),Fyr=i(gIe),AFe=n(gIe,"SPAN",{});var lMt=s(AFe);vyr=r(lMt,"FlaxAutoModelForSequenceClassification"),lMt.forEach(t),gIe.forEach(t),tPe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(EL.$$.fragment,Mi),Tyr=i(Mi),pf=n(Mi,"P",{});var GJ=s(pf);Myr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oH=n(GJ,"A",{href:!0});var iMt=s(oH);Eyr=r(iMt,"from_pretrained()"),iMt.forEach(t),Cyr=r(GJ," class method or the "),rH=n(GJ,"A",{href:!0});var dMt=s(rH);wyr=r(dMt,"from_config()"),dMt.forEach(t),Ayr=r(GJ,` class
method.`),GJ.forEach(t),yyr=i(Mi),CL=n(Mi,"P",{});var hIe=s(CL);Lyr=r(hIe,"This class cannot be instantiated directly using "),yFe=n(hIe,"CODE",{});var cMt=s(yFe);xyr=r(cMt,"__init__()"),cMt.forEach(t),kyr=r(hIe," (throws an error)."),hIe.forEach(t),Syr=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(wL.$$.fragment,Ei),Ryr=i(Ei),LFe=n(Ei,"P",{});var fMt=s(LFe);Byr=r(fMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fMt.forEach(t),Pyr=i(Ei),_f=n(Ei,"P",{});var OJ=s(_f);$yr=r(OJ,`Note:
Loading a model from its configuration file does `),xFe=n(OJ,"STRONG",{});var mMt=s(xFe);Iyr=r(mMt,"not"),mMt.forEach(t),qyr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(OJ,"A",{href:!0});var gMt=s(tH);Nyr=r(gMt,"from_pretrained()"),gMt.forEach(t),jyr=r(OJ," to load the model weights."),OJ.forEach(t),Dyr=i(Ei),kFe=n(Ei,"P",{});var hMt=s(kFe);Gyr=r(hMt,"Examples:"),hMt.forEach(t),Oyr=i(Ei),m(AL.$$.fragment,Ei),Ei.forEach(t),Vyr=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(yL.$$.fragment,Ba),Xyr=i(Ba),SFe=n(Ba,"P",{});var pMt=s(SFe);zyr=r(pMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pMt.forEach(t),Qyr=i(Ba),Pn=n(Ba,"P",{});var _5=s(Pn);Wyr=r(_5,"The model class to instantiate is selected based on the "),RFe=n(_5,"CODE",{});var _Mt=s(RFe);Hyr=r(_Mt,"model_type"),_Mt.forEach(t),Uyr=r(_5,` property of the config object (either
passed as an argument or loaded from `),BFe=n(_5,"CODE",{});var uMt=s(BFe);Jyr=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),Yyr=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(_5,"CODE",{});var bMt=s(PFe);Kyr=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),Zyr=r(_5,":"),_5.forEach(t),eLr=i(Ba),ve=n(Ba,"UL",{});var ye=s(ve);R4=n(ye,"LI",{});var xSe=s(R4);$Fe=n(xSe,"STRONG",{});var FMt=s($Fe);oLr=r(FMt,"albert"),FMt.forEach(t),rLr=r(xSe," \u2014 "),aH=n(xSe,"A",{href:!0});var vMt=s(aH);tLr=r(vMt,"FlaxAlbertForSequenceClassification"),vMt.forEach(t),aLr=r(xSe," (ALBERT model)"),xSe.forEach(t),nLr=i(ye),B4=n(ye,"LI",{});var kSe=s(B4);IFe=n(kSe,"STRONG",{});var TMt=s(IFe);sLr=r(TMt,"bart"),TMt.forEach(t),lLr=r(kSe," \u2014 "),nH=n(kSe,"A",{href:!0});var MMt=s(nH);iLr=r(MMt,"FlaxBartForSequenceClassification"),MMt.forEach(t),dLr=r(kSe," (BART model)"),kSe.forEach(t),cLr=i(ye),P4=n(ye,"LI",{});var SSe=s(P4);qFe=n(SSe,"STRONG",{});var EMt=s(qFe);fLr=r(EMt,"bert"),EMt.forEach(t),mLr=r(SSe," \u2014 "),sH=n(SSe,"A",{href:!0});var CMt=s(sH);gLr=r(CMt,"FlaxBertForSequenceClassification"),CMt.forEach(t),hLr=r(SSe," (BERT model)"),SSe.forEach(t),pLr=i(ye),$4=n(ye,"LI",{});var RSe=s($4);NFe=n(RSe,"STRONG",{});var wMt=s(NFe);_Lr=r(wMt,"big_bird"),wMt.forEach(t),uLr=r(RSe," \u2014 "),lH=n(RSe,"A",{href:!0});var AMt=s(lH);bLr=r(AMt,"FlaxBigBirdForSequenceClassification"),AMt.forEach(t),FLr=r(RSe," (BigBird model)"),RSe.forEach(t),vLr=i(ye),I4=n(ye,"LI",{});var BSe=s(I4);jFe=n(BSe,"STRONG",{});var yMt=s(jFe);TLr=r(yMt,"distilbert"),yMt.forEach(t),MLr=r(BSe," \u2014 "),iH=n(BSe,"A",{href:!0});var LMt=s(iH);ELr=r(LMt,"FlaxDistilBertForSequenceClassification"),LMt.forEach(t),CLr=r(BSe," (DistilBERT model)"),BSe.forEach(t),wLr=i(ye),q4=n(ye,"LI",{});var PSe=s(q4);DFe=n(PSe,"STRONG",{});var xMt=s(DFe);ALr=r(xMt,"electra"),xMt.forEach(t),yLr=r(PSe," \u2014 "),dH=n(PSe,"A",{href:!0});var kMt=s(dH);LLr=r(kMt,"FlaxElectraForSequenceClassification"),kMt.forEach(t),xLr=r(PSe," (ELECTRA model)"),PSe.forEach(t),kLr=i(ye),N4=n(ye,"LI",{});var $Se=s(N4);GFe=n($Se,"STRONG",{});var SMt=s(GFe);SLr=r(SMt,"mbart"),SMt.forEach(t),RLr=r($Se," \u2014 "),cH=n($Se,"A",{href:!0});var RMt=s(cH);BLr=r(RMt,"FlaxMBartForSequenceClassification"),RMt.forEach(t),PLr=r($Se," (mBART model)"),$Se.forEach(t),$Lr=i(ye),j4=n(ye,"LI",{});var ISe=s(j4);OFe=n(ISe,"STRONG",{});var BMt=s(OFe);ILr=r(BMt,"roberta"),BMt.forEach(t),qLr=r(ISe," \u2014 "),fH=n(ISe,"A",{href:!0});var PMt=s(fH);NLr=r(PMt,"FlaxRobertaForSequenceClassification"),PMt.forEach(t),jLr=r(ISe," (RoBERTa model)"),ISe.forEach(t),DLr=i(ye),D4=n(ye,"LI",{});var qSe=s(D4);VFe=n(qSe,"STRONG",{});var $Mt=s(VFe);GLr=r($Mt,"roformer"),$Mt.forEach(t),OLr=r(qSe," \u2014 "),mH=n(qSe,"A",{href:!0});var IMt=s(mH);VLr=r(IMt,"FlaxRoFormerForSequenceClassification"),IMt.forEach(t),XLr=r(qSe," (RoFormer model)"),qSe.forEach(t),zLr=i(ye),G4=n(ye,"LI",{});var NSe=s(G4);XFe=n(NSe,"STRONG",{});var qMt=s(XFe);QLr=r(qMt,"xlm-roberta"),qMt.forEach(t),WLr=r(NSe," \u2014 "),gH=n(NSe,"A",{href:!0});var NMt=s(gH);HLr=r(NMt,"FlaxXLMRobertaForSequenceClassification"),NMt.forEach(t),ULr=r(NSe," (XLM-RoBERTa model)"),NSe.forEach(t),ye.forEach(t),JLr=i(Ba),zFe=n(Ba,"P",{});var jMt=s(zFe);YLr=r(jMt,"Examples:"),jMt.forEach(t),KLr=i(Ba),m(LL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),aPe=i(c),uf=n(c,"H2",{class:!0});var pIe=s(uf);O4=n(pIe,"A",{id:!0,class:!0,href:!0});var DMt=s(O4);QFe=n(DMt,"SPAN",{});var GMt=s(QFe);m(xL.$$.fragment,GMt),GMt.forEach(t),DMt.forEach(t),ZLr=i(pIe),WFe=n(pIe,"SPAN",{});var OMt=s(WFe);e7r=r(OMt,"FlaxAutoModelForQuestionAnswering"),OMt.forEach(t),pIe.forEach(t),nPe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(kL.$$.fragment,Ci),o7r=i(Ci),bf=n(Ci,"P",{});var VJ=s(bf);r7r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hH=n(VJ,"A",{href:!0});var VMt=s(hH);t7r=r(VMt,"from_pretrained()"),VMt.forEach(t),a7r=r(VJ," class method or the "),pH=n(VJ,"A",{href:!0});var XMt=s(pH);n7r=r(XMt,"from_config()"),XMt.forEach(t),s7r=r(VJ,` class
method.`),VJ.forEach(t),l7r=i(Ci),SL=n(Ci,"P",{});var _Ie=s(SL);i7r=r(_Ie,"This class cannot be instantiated directly using "),HFe=n(_Ie,"CODE",{});var zMt=s(HFe);d7r=r(zMt,"__init__()"),zMt.forEach(t),c7r=r(_Ie," (throws an error)."),_Ie.forEach(t),f7r=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(RL.$$.fragment,wi),m7r=i(wi),UFe=n(wi,"P",{});var QMt=s(UFe);g7r=r(QMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QMt.forEach(t),h7r=i(wi),Ff=n(wi,"P",{});var XJ=s(Ff);p7r=r(XJ,`Note:
Loading a model from its configuration file does `),JFe=n(XJ,"STRONG",{});var WMt=s(JFe);_7r=r(WMt,"not"),WMt.forEach(t),u7r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(XJ,"A",{href:!0});var HMt=s(_H);b7r=r(HMt,"from_pretrained()"),HMt.forEach(t),F7r=r(XJ," to load the model weights."),XJ.forEach(t),v7r=i(wi),YFe=n(wi,"P",{});var UMt=s(YFe);T7r=r(UMt,"Examples:"),UMt.forEach(t),M7r=i(wi),m(BL.$$.fragment,wi),wi.forEach(t),E7r=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(PL.$$.fragment,Pa),C7r=i(Pa),KFe=n(Pa,"P",{});var JMt=s(KFe);w7r=r(JMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JMt.forEach(t),A7r=i(Pa),$n=n(Pa,"P",{});var u5=s($n);y7r=r(u5,"The model class to instantiate is selected based on the "),ZFe=n(u5,"CODE",{});var YMt=s(ZFe);L7r=r(YMt,"model_type"),YMt.forEach(t),x7r=r(u5,` property of the config object (either
passed as an argument or loaded from `),eve=n(u5,"CODE",{});var KMt=s(eve);k7r=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),S7r=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(u5,"CODE",{});var ZMt=s(ove);R7r=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),B7r=r(u5,":"),u5.forEach(t),P7r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);V4=n(Le,"LI",{});var jSe=s(V4);rve=n(jSe,"STRONG",{});var e4t=s(rve);$7r=r(e4t,"albert"),e4t.forEach(t),I7r=r(jSe," \u2014 "),uH=n(jSe,"A",{href:!0});var o4t=s(uH);q7r=r(o4t,"FlaxAlbertForQuestionAnswering"),o4t.forEach(t),N7r=r(jSe," (ALBERT model)"),jSe.forEach(t),j7r=i(Le),X4=n(Le,"LI",{});var DSe=s(X4);tve=n(DSe,"STRONG",{});var r4t=s(tve);D7r=r(r4t,"bart"),r4t.forEach(t),G7r=r(DSe," \u2014 "),bH=n(DSe,"A",{href:!0});var t4t=s(bH);O7r=r(t4t,"FlaxBartForQuestionAnswering"),t4t.forEach(t),V7r=r(DSe," (BART model)"),DSe.forEach(t),X7r=i(Le),z4=n(Le,"LI",{});var GSe=s(z4);ave=n(GSe,"STRONG",{});var a4t=s(ave);z7r=r(a4t,"bert"),a4t.forEach(t),Q7r=r(GSe," \u2014 "),FH=n(GSe,"A",{href:!0});var n4t=s(FH);W7r=r(n4t,"FlaxBertForQuestionAnswering"),n4t.forEach(t),H7r=r(GSe," (BERT model)"),GSe.forEach(t),U7r=i(Le),Q4=n(Le,"LI",{});var OSe=s(Q4);nve=n(OSe,"STRONG",{});var s4t=s(nve);J7r=r(s4t,"big_bird"),s4t.forEach(t),Y7r=r(OSe," \u2014 "),vH=n(OSe,"A",{href:!0});var l4t=s(vH);K7r=r(l4t,"FlaxBigBirdForQuestionAnswering"),l4t.forEach(t),Z7r=r(OSe," (BigBird model)"),OSe.forEach(t),exr=i(Le),W4=n(Le,"LI",{});var VSe=s(W4);sve=n(VSe,"STRONG",{});var i4t=s(sve);oxr=r(i4t,"distilbert"),i4t.forEach(t),rxr=r(VSe," \u2014 "),TH=n(VSe,"A",{href:!0});var d4t=s(TH);txr=r(d4t,"FlaxDistilBertForQuestionAnswering"),d4t.forEach(t),axr=r(VSe," (DistilBERT model)"),VSe.forEach(t),nxr=i(Le),H4=n(Le,"LI",{});var XSe=s(H4);lve=n(XSe,"STRONG",{});var c4t=s(lve);sxr=r(c4t,"electra"),c4t.forEach(t),lxr=r(XSe," \u2014 "),MH=n(XSe,"A",{href:!0});var f4t=s(MH);ixr=r(f4t,"FlaxElectraForQuestionAnswering"),f4t.forEach(t),dxr=r(XSe," (ELECTRA model)"),XSe.forEach(t),cxr=i(Le),U4=n(Le,"LI",{});var zSe=s(U4);ive=n(zSe,"STRONG",{});var m4t=s(ive);fxr=r(m4t,"mbart"),m4t.forEach(t),mxr=r(zSe," \u2014 "),EH=n(zSe,"A",{href:!0});var g4t=s(EH);gxr=r(g4t,"FlaxMBartForQuestionAnswering"),g4t.forEach(t),hxr=r(zSe," (mBART model)"),zSe.forEach(t),pxr=i(Le),J4=n(Le,"LI",{});var QSe=s(J4);dve=n(QSe,"STRONG",{});var h4t=s(dve);_xr=r(h4t,"roberta"),h4t.forEach(t),uxr=r(QSe," \u2014 "),CH=n(QSe,"A",{href:!0});var p4t=s(CH);bxr=r(p4t,"FlaxRobertaForQuestionAnswering"),p4t.forEach(t),Fxr=r(QSe," (RoBERTa model)"),QSe.forEach(t),vxr=i(Le),Y4=n(Le,"LI",{});var WSe=s(Y4);cve=n(WSe,"STRONG",{});var _4t=s(cve);Txr=r(_4t,"roformer"),_4t.forEach(t),Mxr=r(WSe," \u2014 "),wH=n(WSe,"A",{href:!0});var u4t=s(wH);Exr=r(u4t,"FlaxRoFormerForQuestionAnswering"),u4t.forEach(t),Cxr=r(WSe," (RoFormer model)"),WSe.forEach(t),wxr=i(Le),K4=n(Le,"LI",{});var HSe=s(K4);fve=n(HSe,"STRONG",{});var b4t=s(fve);Axr=r(b4t,"xlm-roberta"),b4t.forEach(t),yxr=r(HSe," \u2014 "),AH=n(HSe,"A",{href:!0});var F4t=s(AH);Lxr=r(F4t,"FlaxXLMRobertaForQuestionAnswering"),F4t.forEach(t),xxr=r(HSe," (XLM-RoBERTa model)"),HSe.forEach(t),Le.forEach(t),kxr=i(Pa),mve=n(Pa,"P",{});var v4t=s(mve);Sxr=r(v4t,"Examples:"),v4t.forEach(t),Rxr=i(Pa),m($L.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),sPe=i(c),vf=n(c,"H2",{class:!0});var uIe=s(vf);Z4=n(uIe,"A",{id:!0,class:!0,href:!0});var T4t=s(Z4);gve=n(T4t,"SPAN",{});var M4t=s(gve);m(IL.$$.fragment,M4t),M4t.forEach(t),T4t.forEach(t),Bxr=i(uIe),hve=n(uIe,"SPAN",{});var E4t=s(hve);Pxr=r(E4t,"FlaxAutoModelForTokenClassification"),E4t.forEach(t),uIe.forEach(t),lPe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(qL.$$.fragment,Ai),$xr=i(Ai),Tf=n(Ai,"P",{});var zJ=s(Tf);Ixr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=n(zJ,"A",{href:!0});var C4t=s(yH);qxr=r(C4t,"from_pretrained()"),C4t.forEach(t),Nxr=r(zJ," class method or the "),LH=n(zJ,"A",{href:!0});var w4t=s(LH);jxr=r(w4t,"from_config()"),w4t.forEach(t),Dxr=r(zJ,` class
method.`),zJ.forEach(t),Gxr=i(Ai),NL=n(Ai,"P",{});var bIe=s(NL);Oxr=r(bIe,"This class cannot be instantiated directly using "),pve=n(bIe,"CODE",{});var A4t=s(pve);Vxr=r(A4t,"__init__()"),A4t.forEach(t),Xxr=r(bIe," (throws an error)."),bIe.forEach(t),zxr=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(jL.$$.fragment,yi),Qxr=i(yi),_ve=n(yi,"P",{});var y4t=s(_ve);Wxr=r(y4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y4t.forEach(t),Hxr=i(yi),Mf=n(yi,"P",{});var QJ=s(Mf);Uxr=r(QJ,`Note:
Loading a model from its configuration file does `),uve=n(QJ,"STRONG",{});var L4t=s(uve);Jxr=r(L4t,"not"),L4t.forEach(t),Yxr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(QJ,"A",{href:!0});var x4t=s(xH);Kxr=r(x4t,"from_pretrained()"),x4t.forEach(t),Zxr=r(QJ," to load the model weights."),QJ.forEach(t),e9r=i(yi),bve=n(yi,"P",{});var k4t=s(bve);o9r=r(k4t,"Examples:"),k4t.forEach(t),r9r=i(yi),m(DL.$$.fragment,yi),yi.forEach(t),t9r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(GL.$$.fragment,$a),a9r=i($a),Fve=n($a,"P",{});var S4t=s(Fve);n9r=r(S4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),S4t.forEach(t),s9r=i($a),In=n($a,"P",{});var b5=s(In);l9r=r(b5,"The model class to instantiate is selected based on the "),vve=n(b5,"CODE",{});var R4t=s(vve);i9r=r(R4t,"model_type"),R4t.forEach(t),d9r=r(b5,` property of the config object (either
passed as an argument or loaded from `),Tve=n(b5,"CODE",{});var B4t=s(Tve);c9r=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),f9r=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(b5,"CODE",{});var P4t=s(Mve);m9r=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),g9r=r(b5,":"),b5.forEach(t),h9r=i($a),Be=n($a,"UL",{});var Oo=s(Be);eE=n(Oo,"LI",{});var USe=s(eE);Eve=n(USe,"STRONG",{});var $4t=s(Eve);p9r=r($4t,"albert"),$4t.forEach(t),_9r=r(USe," \u2014 "),kH=n(USe,"A",{href:!0});var I4t=s(kH);u9r=r(I4t,"FlaxAlbertForTokenClassification"),I4t.forEach(t),b9r=r(USe," (ALBERT model)"),USe.forEach(t),F9r=i(Oo),oE=n(Oo,"LI",{});var JSe=s(oE);Cve=n(JSe,"STRONG",{});var q4t=s(Cve);v9r=r(q4t,"bert"),q4t.forEach(t),T9r=r(JSe," \u2014 "),SH=n(JSe,"A",{href:!0});var N4t=s(SH);M9r=r(N4t,"FlaxBertForTokenClassification"),N4t.forEach(t),E9r=r(JSe," (BERT model)"),JSe.forEach(t),C9r=i(Oo),rE=n(Oo,"LI",{});var YSe=s(rE);wve=n(YSe,"STRONG",{});var j4t=s(wve);w9r=r(j4t,"big_bird"),j4t.forEach(t),A9r=r(YSe," \u2014 "),RH=n(YSe,"A",{href:!0});var D4t=s(RH);y9r=r(D4t,"FlaxBigBirdForTokenClassification"),D4t.forEach(t),L9r=r(YSe," (BigBird model)"),YSe.forEach(t),x9r=i(Oo),tE=n(Oo,"LI",{});var KSe=s(tE);Ave=n(KSe,"STRONG",{});var G4t=s(Ave);k9r=r(G4t,"distilbert"),G4t.forEach(t),S9r=r(KSe," \u2014 "),BH=n(KSe,"A",{href:!0});var O4t=s(BH);R9r=r(O4t,"FlaxDistilBertForTokenClassification"),O4t.forEach(t),B9r=r(KSe," (DistilBERT model)"),KSe.forEach(t),P9r=i(Oo),aE=n(Oo,"LI",{});var ZSe=s(aE);yve=n(ZSe,"STRONG",{});var V4t=s(yve);$9r=r(V4t,"electra"),V4t.forEach(t),I9r=r(ZSe," \u2014 "),PH=n(ZSe,"A",{href:!0});var X4t=s(PH);q9r=r(X4t,"FlaxElectraForTokenClassification"),X4t.forEach(t),N9r=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),j9r=i(Oo),nE=n(Oo,"LI",{});var eRe=s(nE);Lve=n(eRe,"STRONG",{});var z4t=s(Lve);D9r=r(z4t,"roberta"),z4t.forEach(t),G9r=r(eRe," \u2014 "),$H=n(eRe,"A",{href:!0});var Q4t=s($H);O9r=r(Q4t,"FlaxRobertaForTokenClassification"),Q4t.forEach(t),V9r=r(eRe," (RoBERTa model)"),eRe.forEach(t),X9r=i(Oo),sE=n(Oo,"LI",{});var oRe=s(sE);xve=n(oRe,"STRONG",{});var W4t=s(xve);z9r=r(W4t,"roformer"),W4t.forEach(t),Q9r=r(oRe," \u2014 "),IH=n(oRe,"A",{href:!0});var H4t=s(IH);W9r=r(H4t,"FlaxRoFormerForTokenClassification"),H4t.forEach(t),H9r=r(oRe," (RoFormer model)"),oRe.forEach(t),U9r=i(Oo),lE=n(Oo,"LI",{});var rRe=s(lE);kve=n(rRe,"STRONG",{});var U4t=s(kve);J9r=r(U4t,"xlm-roberta"),U4t.forEach(t),Y9r=r(rRe," \u2014 "),qH=n(rRe,"A",{href:!0});var J4t=s(qH);K9r=r(J4t,"FlaxXLMRobertaForTokenClassification"),J4t.forEach(t),Z9r=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),Oo.forEach(t),ekr=i($a),Sve=n($a,"P",{});var Y4t=s(Sve);okr=r(Y4t,"Examples:"),Y4t.forEach(t),rkr=i($a),m(OL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),iPe=i(c),Ef=n(c,"H2",{class:!0});var FIe=s(Ef);iE=n(FIe,"A",{id:!0,class:!0,href:!0});var K4t=s(iE);Rve=n(K4t,"SPAN",{});var Z4t=s(Rve);m(VL.$$.fragment,Z4t),Z4t.forEach(t),K4t.forEach(t),tkr=i(FIe),Bve=n(FIe,"SPAN",{});var eEt=s(Bve);akr=r(eEt,"FlaxAutoModelForMultipleChoice"),eEt.forEach(t),FIe.forEach(t),dPe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(XL.$$.fragment,Li),nkr=i(Li),Cf=n(Li,"P",{});var WJ=s(Cf);skr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=n(WJ,"A",{href:!0});var oEt=s(NH);lkr=r(oEt,"from_pretrained()"),oEt.forEach(t),ikr=r(WJ," class method or the "),jH=n(WJ,"A",{href:!0});var rEt=s(jH);dkr=r(rEt,"from_config()"),rEt.forEach(t),ckr=r(WJ,` class
method.`),WJ.forEach(t),fkr=i(Li),zL=n(Li,"P",{});var vIe=s(zL);mkr=r(vIe,"This class cannot be instantiated directly using "),Pve=n(vIe,"CODE",{});var tEt=s(Pve);gkr=r(tEt,"__init__()"),tEt.forEach(t),hkr=r(vIe," (throws an error)."),vIe.forEach(t),pkr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(QL.$$.fragment,xi),_kr=i(xi),$ve=n(xi,"P",{});var aEt=s($ve);ukr=r(aEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),aEt.forEach(t),bkr=i(xi),wf=n(xi,"P",{});var HJ=s(wf);Fkr=r(HJ,`Note:
Loading a model from its configuration file does `),Ive=n(HJ,"STRONG",{});var nEt=s(Ive);vkr=r(nEt,"not"),nEt.forEach(t),Tkr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(HJ,"A",{href:!0});var sEt=s(DH);Mkr=r(sEt,"from_pretrained()"),sEt.forEach(t),Ekr=r(HJ," to load the model weights."),HJ.forEach(t),Ckr=i(xi),qve=n(xi,"P",{});var lEt=s(qve);wkr=r(lEt,"Examples:"),lEt.forEach(t),Akr=i(xi),m(WL.$$.fragment,xi),xi.forEach(t),ykr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(HL.$$.fragment,Ia),Lkr=i(Ia),Nve=n(Ia,"P",{});var iEt=s(Nve);xkr=r(iEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iEt.forEach(t),kkr=i(Ia),qn=n(Ia,"P",{});var F5=s(qn);Skr=r(F5,"The model class to instantiate is selected based on the "),jve=n(F5,"CODE",{});var dEt=s(jve);Rkr=r(dEt,"model_type"),dEt.forEach(t),Bkr=r(F5,` property of the config object (either
passed as an argument or loaded from `),Dve=n(F5,"CODE",{});var cEt=s(Dve);Pkr=r(cEt,"pretrained_model_name_or_path"),cEt.forEach(t),$kr=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(F5,"CODE",{});var fEt=s(Gve);Ikr=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),qkr=r(F5,":"),F5.forEach(t),Nkr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);dE=n(Vo,"LI",{});var tRe=s(dE);Ove=n(tRe,"STRONG",{});var mEt=s(Ove);jkr=r(mEt,"albert"),mEt.forEach(t),Dkr=r(tRe," \u2014 "),GH=n(tRe,"A",{href:!0});var gEt=s(GH);Gkr=r(gEt,"FlaxAlbertForMultipleChoice"),gEt.forEach(t),Okr=r(tRe," (ALBERT model)"),tRe.forEach(t),Vkr=i(Vo),cE=n(Vo,"LI",{});var aRe=s(cE);Vve=n(aRe,"STRONG",{});var hEt=s(Vve);Xkr=r(hEt,"bert"),hEt.forEach(t),zkr=r(aRe," \u2014 "),OH=n(aRe,"A",{href:!0});var pEt=s(OH);Qkr=r(pEt,"FlaxBertForMultipleChoice"),pEt.forEach(t),Wkr=r(aRe," (BERT model)"),aRe.forEach(t),Hkr=i(Vo),fE=n(Vo,"LI",{});var nRe=s(fE);Xve=n(nRe,"STRONG",{});var _Et=s(Xve);Ukr=r(_Et,"big_bird"),_Et.forEach(t),Jkr=r(nRe," \u2014 "),VH=n(nRe,"A",{href:!0});var uEt=s(VH);Ykr=r(uEt,"FlaxBigBirdForMultipleChoice"),uEt.forEach(t),Kkr=r(nRe," (BigBird model)"),nRe.forEach(t),Zkr=i(Vo),mE=n(Vo,"LI",{});var sRe=s(mE);zve=n(sRe,"STRONG",{});var bEt=s(zve);eSr=r(bEt,"distilbert"),bEt.forEach(t),oSr=r(sRe," \u2014 "),XH=n(sRe,"A",{href:!0});var FEt=s(XH);rSr=r(FEt,"FlaxDistilBertForMultipleChoice"),FEt.forEach(t),tSr=r(sRe," (DistilBERT model)"),sRe.forEach(t),aSr=i(Vo),gE=n(Vo,"LI",{});var lRe=s(gE);Qve=n(lRe,"STRONG",{});var vEt=s(Qve);nSr=r(vEt,"electra"),vEt.forEach(t),sSr=r(lRe," \u2014 "),zH=n(lRe,"A",{href:!0});var TEt=s(zH);lSr=r(TEt,"FlaxElectraForMultipleChoice"),TEt.forEach(t),iSr=r(lRe," (ELECTRA model)"),lRe.forEach(t),dSr=i(Vo),hE=n(Vo,"LI",{});var iRe=s(hE);Wve=n(iRe,"STRONG",{});var MEt=s(Wve);cSr=r(MEt,"roberta"),MEt.forEach(t),fSr=r(iRe," \u2014 "),QH=n(iRe,"A",{href:!0});var EEt=s(QH);mSr=r(EEt,"FlaxRobertaForMultipleChoice"),EEt.forEach(t),gSr=r(iRe," (RoBERTa model)"),iRe.forEach(t),hSr=i(Vo),pE=n(Vo,"LI",{});var dRe=s(pE);Hve=n(dRe,"STRONG",{});var CEt=s(Hve);pSr=r(CEt,"roformer"),CEt.forEach(t),_Sr=r(dRe," \u2014 "),WH=n(dRe,"A",{href:!0});var wEt=s(WH);uSr=r(wEt,"FlaxRoFormerForMultipleChoice"),wEt.forEach(t),bSr=r(dRe," (RoFormer model)"),dRe.forEach(t),FSr=i(Vo),_E=n(Vo,"LI",{});var cRe=s(_E);Uve=n(cRe,"STRONG",{});var AEt=s(Uve);vSr=r(AEt,"xlm-roberta"),AEt.forEach(t),TSr=r(cRe," \u2014 "),HH=n(cRe,"A",{href:!0});var yEt=s(HH);MSr=r(yEt,"FlaxXLMRobertaForMultipleChoice"),yEt.forEach(t),ESr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Vo.forEach(t),CSr=i(Ia),Jve=n(Ia,"P",{});var LEt=s(Jve);wSr=r(LEt,"Examples:"),LEt.forEach(t),ASr=i(Ia),m(UL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),cPe=i(c),Af=n(c,"H2",{class:!0});var TIe=s(Af);uE=n(TIe,"A",{id:!0,class:!0,href:!0});var xEt=s(uE);Yve=n(xEt,"SPAN",{});var kEt=s(Yve);m(JL.$$.fragment,kEt),kEt.forEach(t),xEt.forEach(t),ySr=i(TIe),Kve=n(TIe,"SPAN",{});var SEt=s(Kve);LSr=r(SEt,"FlaxAutoModelForNextSentencePrediction"),SEt.forEach(t),TIe.forEach(t),fPe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(YL.$$.fragment,ki),xSr=i(ki),yf=n(ki,"P",{});var UJ=s(yf);kSr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UH=n(UJ,"A",{href:!0});var REt=s(UH);SSr=r(REt,"from_pretrained()"),REt.forEach(t),RSr=r(UJ," class method or the "),JH=n(UJ,"A",{href:!0});var BEt=s(JH);BSr=r(BEt,"from_config()"),BEt.forEach(t),PSr=r(UJ,` class
method.`),UJ.forEach(t),$Sr=i(ki),KL=n(ki,"P",{});var MIe=s(KL);ISr=r(MIe,"This class cannot be instantiated directly using "),Zve=n(MIe,"CODE",{});var PEt=s(Zve);qSr=r(PEt,"__init__()"),PEt.forEach(t),NSr=r(MIe," (throws an error)."),MIe.forEach(t),jSr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(ZL.$$.fragment,Si),DSr=i(Si),e0e=n(Si,"P",{});var $Et=s(e0e);GSr=r($Et,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Et.forEach(t),OSr=i(Si),Lf=n(Si,"P",{});var JJ=s(Lf);VSr=r(JJ,`Note:
Loading a model from its configuration file does `),o0e=n(JJ,"STRONG",{});var IEt=s(o0e);XSr=r(IEt,"not"),IEt.forEach(t),zSr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(JJ,"A",{href:!0});var qEt=s(YH);QSr=r(qEt,"from_pretrained()"),qEt.forEach(t),WSr=r(JJ," to load the model weights."),JJ.forEach(t),HSr=i(Si),r0e=n(Si,"P",{});var NEt=s(r0e);USr=r(NEt,"Examples:"),NEt.forEach(t),JSr=i(Si),m(e7.$$.fragment,Si),Si.forEach(t),YSr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(o7.$$.fragment,qa),KSr=i(qa),t0e=n(qa,"P",{});var jEt=s(t0e);ZSr=r(jEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jEt.forEach(t),eRr=i(qa),Nn=n(qa,"P",{});var v5=s(Nn);oRr=r(v5,"The model class to instantiate is selected based on the "),a0e=n(v5,"CODE",{});var DEt=s(a0e);rRr=r(DEt,"model_type"),DEt.forEach(t),tRr=r(v5,` property of the config object (either
passed as an argument or loaded from `),n0e=n(v5,"CODE",{});var GEt=s(n0e);aRr=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),nRr=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=n(v5,"CODE",{});var OEt=s(s0e);sRr=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),lRr=r(v5,":"),v5.forEach(t),iRr=i(qa),l0e=n(qa,"UL",{});var VEt=s(l0e);bE=n(VEt,"LI",{});var fRe=s(bE);i0e=n(fRe,"STRONG",{});var XEt=s(i0e);dRr=r(XEt,"bert"),XEt.forEach(t),cRr=r(fRe," \u2014 "),KH=n(fRe,"A",{href:!0});var zEt=s(KH);fRr=r(zEt,"FlaxBertForNextSentencePrediction"),zEt.forEach(t),mRr=r(fRe," (BERT model)"),fRe.forEach(t),VEt.forEach(t),gRr=i(qa),d0e=n(qa,"P",{});var QEt=s(d0e);hRr=r(QEt,"Examples:"),QEt.forEach(t),pRr=i(qa),m(r7.$$.fragment,qa),qa.forEach(t),ki.forEach(t),mPe=i(c),xf=n(c,"H2",{class:!0});var EIe=s(xf);FE=n(EIe,"A",{id:!0,class:!0,href:!0});var WEt=s(FE);c0e=n(WEt,"SPAN",{});var HEt=s(c0e);m(t7.$$.fragment,HEt),HEt.forEach(t),WEt.forEach(t),_Rr=i(EIe),f0e=n(EIe,"SPAN",{});var UEt=s(f0e);uRr=r(UEt,"FlaxAutoModelForImageClassification"),UEt.forEach(t),EIe.forEach(t),gPe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(a7.$$.fragment,Ri),bRr=i(Ri),kf=n(Ri,"P",{});var YJ=s(kf);FRr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZH=n(YJ,"A",{href:!0});var JEt=s(ZH);vRr=r(JEt,"from_pretrained()"),JEt.forEach(t),TRr=r(YJ," class method or the "),eU=n(YJ,"A",{href:!0});var YEt=s(eU);MRr=r(YEt,"from_config()"),YEt.forEach(t),ERr=r(YJ,` class
method.`),YJ.forEach(t),CRr=i(Ri),n7=n(Ri,"P",{});var CIe=s(n7);wRr=r(CIe,"This class cannot be instantiated directly using "),m0e=n(CIe,"CODE",{});var KEt=s(m0e);ARr=r(KEt,"__init__()"),KEt.forEach(t),yRr=r(CIe," (throws an error)."),CIe.forEach(t),LRr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(s7.$$.fragment,Bi),xRr=i(Bi),g0e=n(Bi,"P",{});var ZEt=s(g0e);kRr=r(ZEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZEt.forEach(t),SRr=i(Bi),Sf=n(Bi,"P",{});var KJ=s(Sf);RRr=r(KJ,`Note:
Loading a model from its configuration file does `),h0e=n(KJ,"STRONG",{});var e5t=s(h0e);BRr=r(e5t,"not"),e5t.forEach(t),PRr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(KJ,"A",{href:!0});var o5t=s(oU);$Rr=r(o5t,"from_pretrained()"),o5t.forEach(t),IRr=r(KJ," to load the model weights."),KJ.forEach(t),qRr=i(Bi),p0e=n(Bi,"P",{});var r5t=s(p0e);NRr=r(r5t,"Examples:"),r5t.forEach(t),jRr=i(Bi),m(l7.$$.fragment,Bi),Bi.forEach(t),DRr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(i7.$$.fragment,Na),GRr=i(Na),_0e=n(Na,"P",{});var t5t=s(_0e);ORr=r(t5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),t5t.forEach(t),VRr=i(Na),jn=n(Na,"P",{});var T5=s(jn);XRr=r(T5,"The model class to instantiate is selected based on the "),u0e=n(T5,"CODE",{});var a5t=s(u0e);zRr=r(a5t,"model_type"),a5t.forEach(t),QRr=r(T5,` property of the config object (either
passed as an argument or loaded from `),b0e=n(T5,"CODE",{});var n5t=s(b0e);WRr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),HRr=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(T5,"CODE",{});var s5t=s(F0e);URr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),JRr=r(T5,":"),T5.forEach(t),YRr=i(Na),d7=n(Na,"UL",{});var wIe=s(d7);vE=n(wIe,"LI",{});var mRe=s(vE);v0e=n(mRe,"STRONG",{});var l5t=s(v0e);KRr=r(l5t,"beit"),l5t.forEach(t),ZRr=r(mRe," \u2014 "),rU=n(mRe,"A",{href:!0});var i5t=s(rU);eBr=r(i5t,"FlaxBeitForImageClassification"),i5t.forEach(t),oBr=r(mRe," (BEiT model)"),mRe.forEach(t),rBr=i(wIe),TE=n(wIe,"LI",{});var gRe=s(TE);T0e=n(gRe,"STRONG",{});var d5t=s(T0e);tBr=r(d5t,"vit"),d5t.forEach(t),aBr=r(gRe," \u2014 "),tU=n(gRe,"A",{href:!0});var c5t=s(tU);nBr=r(c5t,"FlaxViTForImageClassification"),c5t.forEach(t),sBr=r(gRe," (ViT model)"),gRe.forEach(t),wIe.forEach(t),lBr=i(Na),M0e=n(Na,"P",{});var f5t=s(M0e);iBr=r(f5t,"Examples:"),f5t.forEach(t),dBr=i(Na),m(c7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),hPe=i(c),Rf=n(c,"H2",{class:!0});var AIe=s(Rf);ME=n(AIe,"A",{id:!0,class:!0,href:!0});var m5t=s(ME);E0e=n(m5t,"SPAN",{});var g5t=s(E0e);m(f7.$$.fragment,g5t),g5t.forEach(t),m5t.forEach(t),cBr=i(AIe),C0e=n(AIe,"SPAN",{});var h5t=s(C0e);fBr=r(h5t,"FlaxAutoModelForVision2Seq"),h5t.forEach(t),AIe.forEach(t),pPe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(m7.$$.fragment,Pi),mBr=i(Pi),Bf=n(Pi,"P",{});var ZJ=s(Bf);gBr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=n(ZJ,"A",{href:!0});var p5t=s(aU);hBr=r(p5t,"from_pretrained()"),p5t.forEach(t),pBr=r(ZJ," class method or the "),nU=n(ZJ,"A",{href:!0});var _5t=s(nU);_Br=r(_5t,"from_config()"),_5t.forEach(t),uBr=r(ZJ,` class
method.`),ZJ.forEach(t),bBr=i(Pi),g7=n(Pi,"P",{});var yIe=s(g7);FBr=r(yIe,"This class cannot be instantiated directly using "),w0e=n(yIe,"CODE",{});var u5t=s(w0e);vBr=r(u5t,"__init__()"),u5t.forEach(t),TBr=r(yIe," (throws an error)."),yIe.forEach(t),MBr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(h7.$$.fragment,$i),EBr=i($i),A0e=n($i,"P",{});var b5t=s(A0e);CBr=r(b5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),b5t.forEach(t),wBr=i($i),Pf=n($i,"P",{});var eY=s(Pf);ABr=r(eY,`Note:
Loading a model from its configuration file does `),y0e=n(eY,"STRONG",{});var F5t=s(y0e);yBr=r(F5t,"not"),F5t.forEach(t),LBr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(eY,"A",{href:!0});var v5t=s(sU);xBr=r(v5t,"from_pretrained()"),v5t.forEach(t),kBr=r(eY," to load the model weights."),eY.forEach(t),SBr=i($i),L0e=n($i,"P",{});var T5t=s(L0e);RBr=r(T5t,"Examples:"),T5t.forEach(t),BBr=i($i),m(p7.$$.fragment,$i),$i.forEach(t),PBr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(_7.$$.fragment,ja),$Br=i(ja),x0e=n(ja,"P",{});var M5t=s(x0e);IBr=r(M5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M5t.forEach(t),qBr=i(ja),Dn=n(ja,"P",{});var M5=s(Dn);NBr=r(M5,"The model class to instantiate is selected based on the "),k0e=n(M5,"CODE",{});var E5t=s(k0e);jBr=r(E5t,"model_type"),E5t.forEach(t),DBr=r(M5,` property of the config object (either
passed as an argument or loaded from `),S0e=n(M5,"CODE",{});var C5t=s(S0e);GBr=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),OBr=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=n(M5,"CODE",{});var w5t=s(R0e);VBr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),XBr=r(M5,":"),M5.forEach(t),zBr=i(ja),B0e=n(ja,"UL",{});var A5t=s(B0e);EE=n(A5t,"LI",{});var hRe=s(EE);P0e=n(hRe,"STRONG",{});var y5t=s(P0e);QBr=r(y5t,"vision-encoder-decoder"),y5t.forEach(t),WBr=r(hRe," \u2014 "),lU=n(hRe,"A",{href:!0});var L5t=s(lU);HBr=r(L5t,"FlaxVisionEncoderDecoderModel"),L5t.forEach(t),UBr=r(hRe," (Vision Encoder decoder model)"),hRe.forEach(t),A5t.forEach(t),JBr=i(ja),$0e=n(ja,"P",{});var x5t=s($0e);YBr=r(x5t,"Examples:"),x5t.forEach(t),KBr=i(ja),m(u7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(j5t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(Tx,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(Mx,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertConfig"),d(Ex,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig"),d(Cx,"href","/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitConfig"),d(wx,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertConfig"),d(Ax,"href","/docs/transformers/pr_16808/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(yx,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdConfig"),d(Lx,"href","/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(xx,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(kx,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(Sx,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertConfig"),d(Rx,"href","/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineConfig"),d(Bx,"href","/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPConfig"),d(Px,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertConfig"),d($x,"href","/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextConfig"),d(Ix,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLConfig"),d(qx,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(Nx,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(jx,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaConfig"),d(Dx,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(Gx,"href","/docs/transformers/pr_16808/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Ox,"href","/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTConfig"),d(Vx,"href","/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrConfig"),d(Xx,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertConfig"),d(zx,"href","/docs/transformers/pr_16808/en/model_doc/dpr#transformers.DPRConfig"),d(Qx,"href","/docs/transformers/pr_16808/en/model_doc/dpt#transformers.DPTConfig"),d(Wx,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraConfig"),d(Hx,"href","/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Ux,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertConfig"),d(Jx,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetConfig"),d(Yx,"href","/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTConfig"),d(Kx,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelConfig"),d(Zx,"href","/docs/transformers/pr_16808/en/model_doc/glpn#transformers.GLPNConfig"),d(e9,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Config"),d(o9,"href","/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(r9,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJConfig"),d(t9,"href","/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertConfig"),d(a9,"href","/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertConfig"),d(n9,"href","/docs/transformers/pr_16808/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(s9,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(l9,"href","/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(i9,"href","/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDConfig"),d(d9,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerConfig"),d(c9,"href","/docs/transformers/pr_16808/en/model_doc/luke#transformers.LukeConfig"),d(f9,"href","/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertConfig"),d(m9,"href","/docs/transformers/pr_16808/en/model_doc/m2m_100#transformers.M2M100Config"),d(g9,"href","/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianConfig"),d(h9,"href","/docs/transformers/pr_16808/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(p9,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartConfig"),d(_9,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(u9,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(b9,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetConfig"),d(F9,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Config"),d(v9,"href","/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(T9,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(M9,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusConfig"),d(E9,"href","/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverConfig"),d(C9,"href","/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartConfig"),d(w9,"href","/docs/transformers/pr_16808/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(A9,"href","/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(y9,"href","/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(L9,"href","/docs/transformers/pr_16808/en/model_doc/rag#transformers.RagConfig"),d(x9,"href","/docs/transformers/pr_16808/en/model_doc/realm#transformers.RealmConfig"),d(k9,"href","/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerConfig"),d(S9,"href","/docs/transformers/pr_16808/en/model_doc/regnet#transformers.RegNetConfig"),d(R9,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertConfig"),d(B9,"href","/docs/transformers/pr_16808/en/model_doc/resnet#transformers.ResNetConfig"),d(P9,"href","/docs/transformers/pr_16808/en/model_doc/retribert#transformers.RetriBertConfig"),d($9,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaConfig"),d(I9,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerConfig"),d(q9,"href","/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerConfig"),d(N9,"href","/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWConfig"),d(j9,"href","/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDConfig"),d(D9,"href","/docs/transformers/pr_16808/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(G9,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(O9,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(V9,"href","/docs/transformers/pr_16808/en/model_doc/splinter#transformers.SplinterConfig"),d(X9,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(z9,"href","/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinConfig"),d(Q9,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Config"),d(W9,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasConfig"),d(H9,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartConfig"),d(U9,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(J9,"href","/docs/transformers/pr_16808/en/model_doc/trocr#transformers.TrOCRConfig"),d(Y9,"href","/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(K9,"href","/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Z9,"href","/docs/transformers/pr_16808/en/model_doc/van#transformers.VanConfig"),d(ek,"href","/docs/transformers/pr_16808/en/model_doc/vilt#transformers.ViltConfig"),d(ok,"href","/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(rk,"href","/docs/transformers/pr_16808/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(tk,"href","/docs/transformers/pr_16808/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(ak,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTConfig"),d(nk,"href","/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(sk,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(lk,"href","/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMConfig"),d(ik,"href","/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMConfig"),d(dk,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMConfig"),d(ck,"href","/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(fk,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(mk,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(gk,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetConfig"),d(hk,"href","/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ng,"id","transformers.AutoTokenizer"),d(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ng,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(pk,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(_k,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertTokenizer"),d(uk,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(bk,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartTokenizer"),d(Fk,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartTokenizerFast"),d(vk,"href","/docs/transformers/pr_16808/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Tk,"href","/docs/transformers/pr_16808/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16808/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Ek,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertTokenizer"),d(Ck,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertTokenizerFast"),d(wk,"href","/docs/transformers/pr_16808/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Ak,"href","/docs/transformers/pr_16808/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(yk,"href","/docs/transformers/pr_16808/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Lk,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(xk,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(kk,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Sk,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Bk,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d($k,"href","/docs/transformers/pr_16808/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ik,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertTokenizer"),d(qk,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineTokenizer"),d(jk,"href","/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPTokenizer"),d(Dk,"href","/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Ok,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16808/en/model_doc/cpm#transformers.CpmTokenizer"),d(Xk,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(zk,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Qk,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Hk,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Uk,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16808/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Yk,"href","/docs/transformers/pr_16808/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraTokenizer"),d(Zk,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(eS,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(oS,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetTokenizer"),d(rS,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(tS,"href","/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(aS,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelTokenizer"),d(nS,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(sS,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(lS,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(iS,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(dS,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(cS,"href","/docs/transformers/pr_16808/en/model_doc/herbert#transformers.HerbertTokenizer"),d(fS,"href","/docs/transformers/pr_16808/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(mS,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(gS,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaTokenizer"),d(hS,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(pS,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(_S,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(uS,"href","/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(bS,"href","/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(FS,"href","/docs/transformers/pr_16808/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(vS,"href","/docs/transformers/pr_16808/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(TS,"href","/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDTokenizer"),d(MS,"href","/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDTokenizerFast"),d(ES,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerTokenizer"),d(CS,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(wS,"href","/docs/transformers/pr_16808/en/model_doc/luke#transformers.LukeTokenizer"),d(AS,"href","/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(yS,"href","/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(LS,"href","/docs/transformers/pr_16808/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(xS,"href","/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianTokenizer"),d(kS,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartTokenizer"),d(SS,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(RS,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(BS,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(PS,"href","/docs/transformers/pr_16808/en/model_doc/mluke#transformers.MLukeTokenizer"),d($S,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(IS,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(qS,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(NS,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(jS,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.T5Tokenizer"),d(DS,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.T5TokenizerFast"),d(GS,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(OS,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(VS,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(XS,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(zS,"href","/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(QS,"href","/docs/transformers/pr_16808/en/model_doc/phobert#transformers.PhobertTokenizer"),d(WS,"href","/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartTokenizer"),d(HS,"href","/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(US,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertTokenizer"),d(JS,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertTokenizerFast"),d(YS,"href","/docs/transformers/pr_16808/en/model_doc/rag#transformers.RagTokenizer"),d(KS,"href","/docs/transformers/pr_16808/en/model_doc/realm#transformers.RealmTokenizer"),d(ZS,"href","/docs/transformers/pr_16808/en/model_doc/realm#transformers.RealmTokenizerFast"),d(eR,"href","/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerTokenizer"),d(oR,"href","/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(rR,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertTokenizer"),d(tR,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(aR,"href","/docs/transformers/pr_16808/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(nR,"href","/docs/transformers/pr_16808/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(sR,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaTokenizer"),d(lR,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(iR,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(dR,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(cR,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(fR,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(mR,"href","/docs/transformers/pr_16808/en/model_doc/splinter#transformers.SplinterTokenizer"),d(gR,"href","/docs/transformers/pr_16808/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(hR,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(pR,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(_R,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.T5Tokenizer"),d(uR,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.T5TokenizerFast"),d(bR,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasTokenizer"),d(FR,"href","/docs/transformers/pr_16808/en/model_doc/tapex#transformers.TapexTokenizer"),d(vR,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(TR,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(MR,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(ER,"href","/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMTokenizer"),d(CR,"href","/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(wR,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMTokenizer"),d(AR,"href","/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(yR,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(LR,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(xR,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(kR,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_h,"id","transformers.AutoFeatureExtractor"),d(_h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_h,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(SR,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(RR,"href","/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d($R,"href","/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(NR,"href","/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(jR,"href","/docs/transformers/pr_16808/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(GR,"href","/docs/transformers/pr_16808/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(OR,"href","/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(VR,"href","/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(XR,"href","/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nh,"id","transformers.AutoProcessor"),d(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(YR,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(KR,"href","/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPProcessor"),d(ZR,"href","/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(eB,"href","/docs/transformers/pr_16808/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(oB,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(rB,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(tB,"href","/docs/transformers/pr_16808/en/model_doc/trocr#transformers.TrOCRProcessor"),d(aB,"href","/docs/transformers/pr_16808/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(nB,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uh,"id","transformers.AutoModel"),d(Uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(sB,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lB,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iB,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dB,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertModel"),d(cB,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartModel"),d(fB,"href","/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitModel"),d(mB,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertModel"),d(gB,"href","/docs/transformers/pr_16808/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(hB,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdModel"),d(pB,"href","/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(_B,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(uB,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(bB,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertModel"),d(FB,"href","/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineModel"),d(vB,"href","/docs/transformers/pr_16808/en/model_doc/clip#transformers.CLIPModel"),d(TB,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertModel"),d(MB,"href","/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextModel"),d(EB,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLModel"),d(CB,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(wB,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(AB,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaModel"),d(yB,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(LB,"href","/docs/transformers/pr_16808/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(xB,"href","/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTModel"),d(kB,"href","/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrModel"),d(SB,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertModel"),d(RB,"href","/docs/transformers/pr_16808/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(BB,"href","/docs/transformers/pr_16808/en/model_doc/dpt#transformers.DPTModel"),d(PB,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraModel"),d($B,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertModel"),d(IB,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetModel"),d(qB,"href","/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTModel"),d(NB,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelModel"),d(jB,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelBaseModel"),d(DB,"href","/docs/transformers/pr_16808/en/model_doc/glpn#transformers.GLPNModel"),d(GB,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2Model"),d(OB,"href","/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(VB,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJModel"),d(XB,"href","/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertModel"),d(zB,"href","/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertModel"),d(QB,"href","/docs/transformers/pr_16808/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(WB,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(HB,"href","/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(UB,"href","/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDModel"),d(JB,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerModel"),d(YB,"href","/docs/transformers/pr_16808/en/model_doc/luke#transformers.LukeModel"),d(KB,"href","/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertModel"),d(ZB,"href","/docs/transformers/pr_16808/en/model_doc/m2m_100#transformers.M2M100Model"),d(eP,"href","/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianModel"),d(oP,"href","/docs/transformers/pr_16808/en/model_doc/maskformer#transformers.MaskFormerModel"),d(rP,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartModel"),d(tP,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(aP,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertModel"),d(nP,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetModel"),d(sP,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5Model"),d(lP,"href","/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerModel"),d(iP,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(dP,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusModel"),d(cP,"href","/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverModel"),d(fP,"href","/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartModel"),d(mP,"href","/docs/transformers/pr_16808/en/model_doc/poolformer#transformers.PoolFormerModel"),d(gP,"href","/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(hP,"href","/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertModel"),d(pP,"href","/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerModel"),d(_P,"href","/docs/transformers/pr_16808/en/model_doc/regnet#transformers.RegNetModel"),d(uP,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertModel"),d(bP,"href","/docs/transformers/pr_16808/en/model_doc/resnet#transformers.ResNetModel"),d(FP,"href","/docs/transformers/pr_16808/en/model_doc/retribert#transformers.RetriBertModel"),d(vP,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaModel"),d(TP,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerModel"),d(MP,"href","/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerModel"),d(EP,"href","/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWModel"),d(CP,"href","/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDModel"),d(wP,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(AP,"href","/docs/transformers/pr_16808/en/model_doc/splinter#transformers.SplinterModel"),d(yP,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(LP,"href","/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinModel"),d(xP,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5Model"),d(kP,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasModel"),d(SP,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(RP,"href","/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechModel"),d(BP,"href","/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(PP,"href","/docs/transformers/pr_16808/en/model_doc/van#transformers.VanModel"),d($P,"href","/docs/transformers/pr_16808/en/model_doc/vilt#transformers.ViltModel"),d(IP,"href","/docs/transformers/pr_16808/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(qP,"href","/docs/transformers/pr_16808/en/model_doc/visual_bert#transformers.VisualBertModel"),d(NP,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTModel"),d(jP,"href","/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(DP,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(GP,"href","/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMModel"),d(OP,"href","/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMModel"),d(VP,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMModel"),d(XP,"href","/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(zP,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(QP,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(WP,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetModel"),d(HP,"href","/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($_,"id","transformers.AutoModelForPreTraining"),d($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(UP,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JP,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YP,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KP,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForPreTraining"),d(ZP,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(e$,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForPreTraining"),d(o$,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(r$,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(t$,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(a$,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(n$,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(s$,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(l$,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(i$,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForPreTraining"),d(d$,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(c$,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForPreTraining"),d(f$,"href","/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(m$,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(g$,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(h$,"href","/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(p$,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(_$,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(u$,"href","/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(b$,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(F$,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(v$,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(T$,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(M$,"href","/docs/transformers/pr_16808/en/model_doc/retribert#transformers.RetriBertModel"),d(E$,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(C$,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(w$,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(A$,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(y$,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(L$,"href","/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(x$,"href","/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(k$,"href","/docs/transformers/pr_16808/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(S$,"href","/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(R$,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(B$,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(P$,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d($$,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(I$,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mu,"id","transformers.AutoModelForCausalLM"),d(Mu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(q$,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(N$,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(j$,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D$,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForCausalLM"),d(G$,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertLMHeadModel"),d(O$,"href","/docs/transformers/pr_16808/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(V$,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(X$,"href","/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(z$,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(Q$,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(W$,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(H$,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(U$,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(J$,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForCausalLM"),d(Y$,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(K$,"href","/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(Z$,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(eI,"href","/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianForCausalLM"),d(oI,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForCausalLM"),d(rI,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(tI,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(aI,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(nI,"href","/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(sI,"href","/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(lI,"href","/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(iI,"href","/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(dI,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(cI,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(fI,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(mI,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(gI,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(hI,"href","/docs/transformers/pr_16808/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(pI,"href","/docs/transformers/pr_16808/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(_I,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(uI,"href","/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(bI,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(FI,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(vI,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n1,"id","transformers.AutoModelForMaskedLM"),d(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(TI,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MI,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EI,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CI,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(wI,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AI,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForMaskedLM"),d(yI,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(LI,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(xI,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(kI,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(SI,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(RI,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(BI,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(PI,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForMaskedLM"),d($I,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(II,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(qI,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(NI,"href","/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(jI,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(DI,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(GI,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(OI,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(VI,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(XI,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(zI,"href","/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(QI,"href","/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(WI,"href","/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(HI,"href","/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(UI,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(JI,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(YI,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(KI,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(eq,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(oq,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(rq,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(tq,"href","/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O1,"id","transformers.AutoModelForSeq2SeqLM"),d(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(aq,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nq,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sq,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lq,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(mq,"href","/docs/transformers/pr_16808/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(hq,"href","/docs/transformers/pr_16808/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_16808/en/model_doc/marian#transformers.MarianMTModel"),d(_q,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(bq,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(vq,"href","/docs/transformers/pr_16808/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_16808/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l8,"id","transformers.AutoModelForSequenceClassification"),d(l8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l8,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Cq,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wq,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Aq,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yq,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d($q,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16808/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rb,"id","transformers.AutoModelForMultipleChoice"),d(rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rb,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(vN,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TN,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MN,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EN,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d($N,"href","/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rb,"id","transformers.AutoModelForNextSentencePrediction"),d(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(YN,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KN,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZN,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ej,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(oj,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(rj,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(tj,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(aj,"href","/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jb,"id","transformers.AutoModelForTokenClassification"),d(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jb,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(nj,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sj,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lj,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ij,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(dj,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForTokenClassification"),d(cj,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(fj,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(mj,"href","/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineForTokenClassification"),d(gj,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(hj,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(pj,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(_j,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(uj,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(bj,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(wj,"href","/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(yj,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(xj,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(kj,"href","/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d($j,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(qj,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(jj,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v2,"id","transformers.AutoModelForQuestionAnswering"),d(v2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v2,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Gj,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Oj,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vj,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xj,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16808/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16808/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(aD,"href","/docs/transformers/pr_16808/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16808/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16808/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16808/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16808/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16808/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16808/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16808/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16808/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16808/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(wD,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(LD,"href","/docs/transformers/pr_16808/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l6,"id","transformers.AutoModelForTableQuestionAnswering"),d(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l6,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(xD,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kD,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SD,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RD,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c6,"id","transformers.AutoModelForImageClassification"),d(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c6,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(BD,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PD,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($D,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ID,"href","/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitForImageClassification"),d(qD,"href","/docs/transformers/pr_16808/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(ND,"href","/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTForImageClassification"),d(jD,"href","/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(DD,"href","/docs/transformers/pr_16808/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(GD,"href","/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(OD,"href","/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(VD,"href","/docs/transformers/pr_16808/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(XD,"href","/docs/transformers/pr_16808/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(zD,"href","/docs/transformers/pr_16808/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(QD,"href","/docs/transformers/pr_16808/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(WD,"href","/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(HD,"href","/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinForImageClassification"),d(UD,"href","/docs/transformers/pr_16808/en/model_doc/van#transformers.VanForImageClassification"),d(JD,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M6,"id","transformers.AutoModelForVision2Seq"),d(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M6,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(YD,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KD,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZD,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eG,"href","/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w6,"id","transformers.AutoModelForAudioClassification"),d(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w6,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(oG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aG,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(nG,"href","/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(sG,"href","/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(lG,"href","/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(iG,"href","/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(dG,"href","/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(cG,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(fG,"href","/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($6,"id","transformers.AutoModelForAudioFrameClassification"),d($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($6,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(mG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pG,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(_G,"href","/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(uG,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(bG,"href","/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G6,"id","transformers.AutoModelForCTC"),d(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G6,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(FG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MG,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(EG,"href","/docs/transformers/pr_16808/en/model_doc/hubert#transformers.HubertForCTC"),d(CG,"href","/docs/transformers/pr_16808/en/model_doc/sew#transformers.SEWForCTC"),d(wG,"href","/docs/transformers/pr_16808/en/model_doc/sew-d#transformers.SEWDForCTC"),d(AG,"href","/docs/transformers/pr_16808/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(yG,"href","/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(LG,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(xG,"href","/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y6,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y6,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(kG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BG,"href","/docs/transformers/pr_16808/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(PG,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oF,"id","transformers.AutoModelForAudioXVector"),d(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oF,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d($G,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NG,"href","/docs/transformers/pr_16808/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(jG,"href","/docs/transformers/pr_16808/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(DG,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(GG,"href","/docs/transformers/pr_16808/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lF,"id","transformers.AutoModelForMaskedImageModeling"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(OG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zG,"href","/docs/transformers/pr_16808/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(QG,"href","/docs/transformers/pr_16808/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(WG,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mF,"id","transformers.AutoModelForObjectDetection"),d(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mF,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(HG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YG,"href","/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pF,"id","transformers.AutoModelForImageSegmentation"),d(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(KG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oO,"href","/docs/transformers/pr_16808/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bF,"id","transformers.AutoModelForSemanticSegmentation"),d(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(rO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nO,"href","/docs/transformers/pr_16808/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(sO,"href","/docs/transformers/pr_16808/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(lO,"href","/docs/transformers/pr_16808/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EF,"id","transformers.AutoModelForInstanceSegmentation"),d(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EF,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(iO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fO,"href","/docs/transformers/pr_16808/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AF,"id","transformers.TFAutoModel"),d(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(mO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pO,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertModel"),d(_O,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.TFBartModel"),d(uO,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertModel"),d(bO,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(FO,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(vO,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertModel"),d(TO,"href","/docs/transformers/pr_16808/en/model_doc/clip#transformers.TFCLIPModel"),d(MO,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertModel"),d(EO,"href","/docs/transformers/pr_16808/en/model_doc/convnext#transformers.TFConvNextModel"),d(CO,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.TFCTRLModel"),d(wO,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaModel"),d(AO,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(yO,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(LO,"href","/docs/transformers/pr_16808/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(xO,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraModel"),d(kO,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(SO,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelModel"),d(RO,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(BO,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.TFGPT2Model"),d(PO,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.TFGPTJModel"),d($O,"href","/docs/transformers/pr_16808/en/model_doc/hubert#transformers.TFHubertModel"),d(IO,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(qO,"href","/docs/transformers/pr_16808/en/model_doc/led#transformers.TFLEDModel"),d(NO,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerModel"),d(jO,"href","/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.TFLxmertModel"),d(DO,"href","/docs/transformers/pr_16808/en/model_doc/marian#transformers.TFMarianModel"),d(GO,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.TFMBartModel"),d(OO,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(VO,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetModel"),d(XO,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.TFMT5Model"),d(zO,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(QO,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.TFPegasusModel"),d(WO,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertModel"),d(HO,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaModel"),d(UO,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerModel"),d(JO,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(YO,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.TFT5Model"),d(KO,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasModel"),d(ZO,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(eV,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.TFViTModel"),d(oV,"href","/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(rV,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(tV,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMModel"),d(aV,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(nV,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_v,"id","transformers.TFAutoModelForPreTraining"),d(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_v,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(sV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dV,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(cV,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(fV,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForPreTraining"),d(mV,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(gV,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(hV,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(pV,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(_V,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(uV,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(bV,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(FV,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(vV,"href","/docs/transformers/pr_16808/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(TV,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(MV,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(EV,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(CV,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(wV,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(yV,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(LV,"href","/docs/transformers/pr_16808/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(xV,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(kV,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(SV,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dv,"id","transformers.TFAutoModelForCausalLM"),d(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dv,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(RV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($V,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(IV,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(qV,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(NV,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(jV,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(DV,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(GV,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(OV,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(VV,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(XV,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(zV,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(QV,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zv,"id","transformers.TFAutoModelForImageClassification"),d(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zv,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(WV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JV,"href","/docs/transformers/pr_16808/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(YV,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r0,"id","transformers.TFAutoModelForMaskedLM"),d(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r0,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(KV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZV,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eX,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oX,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(rX,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(tX,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(aX,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(nX,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(sX,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(lX,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(iX,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(dX,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(cX,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(fX,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(mX,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(gX,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(hX,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(pX,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(_X,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(uX,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(bX,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(FX,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(vX,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E0,"id","transformers.TFAutoModelForSeq2SeqLM"),d(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E0,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(TX,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MX,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EX,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CX,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(wX,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(AX,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(yX,"href","/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(LX,"href","/docs/transformers/pr_16808/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(xX,"href","/docs/transformers/pr_16808/en/model_doc/marian#transformers.TFMarianMTModel"),d(kX,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(RX,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P0,"id","transformers.TFAutoModelForSequenceClassification"),d(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P0,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(PX,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($X,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IX,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qX,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16808/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16808/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(az,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16808/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lT,"id","transformers.TFAutoModelForMultipleChoice"),d(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(dz,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cz,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fz,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mz,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(gz,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(hz,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(pz,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(_z,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(bz,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(vz,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(wz,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(xz,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kz,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sz,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rz,"href","/docs/transformers/pr_16808/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yT,"id","transformers.TFAutoModelForTokenClassification"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Bz,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pz,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($z,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Iz,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(qz,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(jz,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(zz,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16808/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Hz,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Uz,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Jz,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Yz,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HT,"id","transformers.TFAutoModelForQuestionAnswering"),d(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(rQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nQ,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_16808/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_16808/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_16808/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_16808/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_16808/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(hQ,"href","/docs/transformers/pr_16808/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_16808/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_16808/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_16808/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_16808/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16808/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(EQ,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16808/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pM,"id","transformers.TFAutoModelForVision2Seq"),d(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(wQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LQ,"href","/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(xQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RQ,"href","/docs/transformers/pr_16808/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FM,"id","transformers.FlaxAutoModel"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(BQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PQ,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($Q,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IQ,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertModel"),d(qQ,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartModel"),d(NQ,"href","/docs/transformers/pr_16808/en/model_doc/beit#transformers.FlaxBeitModel"),d(jQ,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertModel"),d(DQ,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(GQ,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(OQ,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(VQ,"href","/docs/transformers/pr_16808/en/model_doc/clip#transformers.FlaxCLIPModel"),d(XQ,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(zQ,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraModel"),d(QQ,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(WQ,"href","/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(HQ,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(UQ,"href","/docs/transformers/pr_16808/en/model_doc/marian#transformers.FlaxMarianModel"),d(JQ,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartModel"),d(YQ,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.FlaxMT5Model"),d(KQ,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(ZQ,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(eW,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(oW,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.FlaxT5Model"),d(rW,"href","/docs/transformers/pr_16808/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(tW,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.FlaxViTModel"),d(aW,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(nW,"href","/docs/transformers/pr_16808/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(sW,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zM,"id","transformers.FlaxAutoModelForCausalLM"),d(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(lW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cW,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(fW,"href","/docs/transformers/pr_16808/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(mW,"href","/docs/transformers/pr_16808/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(gW,"href","/docs/transformers/pr_16808/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(hW,"href","/docs/transformers/pr_16808/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YM,"id","transformers.FlaxAutoModelForPreTraining"),d(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YM,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(pW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_W,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bW,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(FW,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(vW,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(TW,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(MW,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(EW,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(CW,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(wW,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(AW,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(yW,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(LW,"href","/docs/transformers/pr_16808/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(xW,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c4,"id","transformers.FlaxAutoModelForMaskedLM"),d(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(kW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BW,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(PW,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d($W,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(IW,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(qW,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(NW,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(jW,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(GW,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(OW,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(VW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zW,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QW,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(WW,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(HW,"href","/docs/transformers/pr_16808/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(UW,"href","/docs/transformers/pr_16808/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(JW,"href","/docs/transformers/pr_16808/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(YW,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_16808/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_16808/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(eH,"href","/docs/transformers/pr_16808/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(oH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aH,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(nH,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(sH,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(lH,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(iH,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(dH,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(cH,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(fH,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(mH,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(gH,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(hH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_H,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uH,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(bH,"href","/docs/transformers/pr_16808/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(FH,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(vH,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(TH,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(MH,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(EH,"href","/docs/transformers/pr_16808/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(CH,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(wH,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z4,"id","transformers.FlaxAutoModelForTokenClassification"),d(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(yH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kH,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(SH,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(RH,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(BH,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(PH,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d($H,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(IH,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(qH,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(NH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GH,"href","/docs/transformers/pr_16808/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(OH,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(VH,"href","/docs/transformers/pr_16808/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(XH,"href","/docs/transformers/pr_16808/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(zH,"href","/docs/transformers/pr_16808/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(QH,"href","/docs/transformers/pr_16808/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(WH,"href","/docs/transformers/pr_16808/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(HH,"href","/docs/transformers/pr_16808/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(UH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KH,"href","/docs/transformers/pr_16808/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FE,"id","transformers.FlaxAutoModelForImageClassification"),d(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(ZH,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rU,"href","/docs/transformers/pr_16808/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(tU,"href","/docs/transformers/pr_16808/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ME,"id","transformers.FlaxAutoModelForVision2Seq"),d(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ME,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(aU,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nU,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sU,"href","/docs/transformers/pr_16808/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lU,"href","/docs/transformers/pr_16808/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(ge,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,E5),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,C5),e(co,On),e(co,Vn),e(Vn,w5),e(co,Di),e(co,Xn),e(Xn,A5),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,px),e(ue,Oi),e(Oi,_x),e(ue,ux),b(c,zo,u),b(c,Ga,u),e(Ga,bx),e(Ga,Df),e(Df,Fx),e(Ga,LIe),b(c,pRe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,oY),g(y5,oY,null),e(Vi,xIe),e(Vi,rY),e(rY,kIe),b(c,_Re,u),b(c,zn,u),e(zn,SIe),e(zn,tY),e(tY,RIe),e(zn,BIe),e(zn,aY),e(aY,PIe),e(zn,$Ie),b(c,uRe,u),g(L5,c,u),b(c,bRe,u),b(c,vx,u),e(vx,IIe),b(c,FRe,u),g(Of,c,u),b(c,vRe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,nY),g(x5,nY,null),e(Xi,qIe),e(Xi,sY),e(sY,NIe),b(c,TRe,u),b(c,Qo,u),g(k5,Qo,null),e(Qo,jIe),e(Qo,S5),e(S5,DIe),e(S5,Tx),e(Tx,GIe),e(S5,OIe),e(Qo,VIe),e(Qo,R5),e(R5,XIe),e(R5,lY),e(lY,zIe),e(R5,QIe),e(Qo,WIe),e(Qo,mo),g(B5,mo,null),e(mo,HIe),e(mo,iY),e(iY,UIe),e(mo,JIe),e(mo,zi),e(zi,YIe),e(zi,dY),e(dY,KIe),e(zi,ZIe),e(zi,cY),e(cY,eqe),e(zi,oqe),e(mo,rqe),e(mo,F),e(F,Xf),e(Xf,fY),e(fY,tqe),e(Xf,aqe),e(Xf,Mx),e(Mx,nqe),e(Xf,sqe),e(F,lqe),e(F,zf),e(zf,mY),e(mY,iqe),e(zf,dqe),e(zf,Ex),e(Ex,cqe),e(zf,fqe),e(F,mqe),e(F,Qf),e(Qf,gY),e(gY,gqe),e(Qf,hqe),e(Qf,Cx),e(Cx,pqe),e(Qf,_qe),e(F,uqe),e(F,Wf),e(Wf,hY),e(hY,bqe),e(Wf,Fqe),e(Wf,wx),e(wx,vqe),e(Wf,Tqe),e(F,Mqe),e(F,Hf),e(Hf,pY),e(pY,Eqe),e(Hf,Cqe),e(Hf,Ax),e(Ax,wqe),e(Hf,Aqe),e(F,yqe),e(F,Uf),e(Uf,_Y),e(_Y,Lqe),e(Uf,xqe),e(Uf,yx),e(yx,kqe),e(Uf,Sqe),e(F,Rqe),e(F,Jf),e(Jf,uY),e(uY,Bqe),e(Jf,Pqe),e(Jf,Lx),e(Lx,$qe),e(Jf,Iqe),e(F,qqe),e(F,Yf),e(Yf,bY),e(bY,Nqe),e(Yf,jqe),e(Yf,xx),e(xx,Dqe),e(Yf,Gqe),e(F,Oqe),e(F,Kf),e(Kf,FY),e(FY,Vqe),e(Kf,Xqe),e(Kf,kx),e(kx,zqe),e(Kf,Qqe),e(F,Wqe),e(F,Zf),e(Zf,vY),e(vY,Hqe),e(Zf,Uqe),e(Zf,Sx),e(Sx,Jqe),e(Zf,Yqe),e(F,Kqe),e(F,em),e(em,TY),e(TY,Zqe),e(em,eNe),e(em,Rx),e(Rx,oNe),e(em,rNe),e(F,tNe),e(F,om),e(om,MY),e(MY,aNe),e(om,nNe),e(om,Bx),e(Bx,sNe),e(om,lNe),e(F,iNe),e(F,rm),e(rm,EY),e(EY,dNe),e(rm,cNe),e(rm,Px),e(Px,fNe),e(rm,mNe),e(F,gNe),e(F,tm),e(tm,CY),e(CY,hNe),e(tm,pNe),e(tm,$x),e($x,_Ne),e(tm,uNe),e(F,bNe),e(F,am),e(am,wY),e(wY,FNe),e(am,vNe),e(am,Ix),e(Ix,TNe),e(am,MNe),e(F,ENe),e(F,nm),e(nm,AY),e(AY,CNe),e(nm,wNe),e(nm,qx),e(qx,ANe),e(nm,yNe),e(F,LNe),e(F,sm),e(sm,yY),e(yY,xNe),e(sm,kNe),e(sm,Nx),e(Nx,SNe),e(sm,RNe),e(F,BNe),e(F,lm),e(lm,LY),e(LY,PNe),e(lm,$Ne),e(lm,jx),e(jx,INe),e(lm,qNe),e(F,NNe),e(F,im),e(im,xY),e(xY,jNe),e(im,DNe),e(im,Dx),e(Dx,GNe),e(im,ONe),e(F,VNe),e(F,dm),e(dm,kY),e(kY,XNe),e(dm,zNe),e(dm,Gx),e(Gx,QNe),e(dm,WNe),e(F,HNe),e(F,cm),e(cm,SY),e(SY,UNe),e(cm,JNe),e(cm,Ox),e(Ox,YNe),e(cm,KNe),e(F,ZNe),e(F,fm),e(fm,RY),e(RY,eje),e(fm,oje),e(fm,Vx),e(Vx,rje),e(fm,tje),e(F,aje),e(F,mm),e(mm,BY),e(BY,nje),e(mm,sje),e(mm,Xx),e(Xx,lje),e(mm,ije),e(F,dje),e(F,gm),e(gm,PY),e(PY,cje),e(gm,fje),e(gm,zx),e(zx,mje),e(gm,gje),e(F,hje),e(F,hm),e(hm,$Y),e($Y,pje),e(hm,_je),e(hm,Qx),e(Qx,uje),e(hm,bje),e(F,Fje),e(F,pm),e(pm,IY),e(IY,vje),e(pm,Tje),e(pm,Wx),e(Wx,Mje),e(pm,Eje),e(F,Cje),e(F,_m),e(_m,qY),e(qY,wje),e(_m,Aje),e(_m,Hx),e(Hx,yje),e(_m,Lje),e(F,xje),e(F,um),e(um,NY),e(NY,kje),e(um,Sje),e(um,Ux),e(Ux,Rje),e(um,Bje),e(F,Pje),e(F,bm),e(bm,jY),e(jY,$je),e(bm,Ije),e(bm,Jx),e(Jx,qje),e(bm,Nje),e(F,jje),e(F,Fm),e(Fm,DY),e(DY,Dje),e(Fm,Gje),e(Fm,Yx),e(Yx,Oje),e(Fm,Vje),e(F,Xje),e(F,vm),e(vm,GY),e(GY,zje),e(vm,Qje),e(vm,Kx),e(Kx,Wje),e(vm,Hje),e(F,Uje),e(F,Tm),e(Tm,OY),e(OY,Jje),e(Tm,Yje),e(Tm,Zx),e(Zx,Kje),e(Tm,Zje),e(F,eDe),e(F,Mm),e(Mm,VY),e(VY,oDe),e(Mm,rDe),e(Mm,e9),e(e9,tDe),e(Mm,aDe),e(F,nDe),e(F,Em),e(Em,XY),e(XY,sDe),e(Em,lDe),e(Em,o9),e(o9,iDe),e(Em,dDe),e(F,cDe),e(F,Cm),e(Cm,zY),e(zY,fDe),e(Cm,mDe),e(Cm,r9),e(r9,gDe),e(Cm,hDe),e(F,pDe),e(F,wm),e(wm,QY),e(QY,_De),e(wm,uDe),e(wm,t9),e(t9,bDe),e(wm,FDe),e(F,vDe),e(F,Am),e(Am,WY),e(WY,TDe),e(Am,MDe),e(Am,a9),e(a9,EDe),e(Am,CDe),e(F,wDe),e(F,ym),e(ym,HY),e(HY,ADe),e(ym,yDe),e(ym,n9),e(n9,LDe),e(ym,xDe),e(F,kDe),e(F,Lm),e(Lm,UY),e(UY,SDe),e(Lm,RDe),e(Lm,s9),e(s9,BDe),e(Lm,PDe),e(F,$De),e(F,xm),e(xm,JY),e(JY,IDe),e(xm,qDe),e(xm,l9),e(l9,NDe),e(xm,jDe),e(F,DDe),e(F,km),e(km,YY),e(YY,GDe),e(km,ODe),e(km,i9),e(i9,VDe),e(km,XDe),e(F,zDe),e(F,Sm),e(Sm,KY),e(KY,QDe),e(Sm,WDe),e(Sm,d9),e(d9,HDe),e(Sm,UDe),e(F,JDe),e(F,Rm),e(Rm,ZY),e(ZY,YDe),e(Rm,KDe),e(Rm,c9),e(c9,ZDe),e(Rm,eGe),e(F,oGe),e(F,Bm),e(Bm,eK),e(eK,rGe),e(Bm,tGe),e(Bm,f9),e(f9,aGe),e(Bm,nGe),e(F,sGe),e(F,Pm),e(Pm,oK),e(oK,lGe),e(Pm,iGe),e(Pm,m9),e(m9,dGe),e(Pm,cGe),e(F,fGe),e(F,$m),e($m,rK),e(rK,mGe),e($m,gGe),e($m,g9),e(g9,hGe),e($m,pGe),e(F,_Ge),e(F,Im),e(Im,tK),e(tK,uGe),e(Im,bGe),e(Im,h9),e(h9,FGe),e(Im,vGe),e(F,TGe),e(F,qm),e(qm,aK),e(aK,MGe),e(qm,EGe),e(qm,p9),e(p9,CGe),e(qm,wGe),e(F,AGe),e(F,Nm),e(Nm,nK),e(nK,yGe),e(Nm,LGe),e(Nm,_9),e(_9,xGe),e(Nm,kGe),e(F,SGe),e(F,jm),e(jm,sK),e(sK,RGe),e(jm,BGe),e(jm,u9),e(u9,PGe),e(jm,$Ge),e(F,IGe),e(F,Dm),e(Dm,lK),e(lK,qGe),e(Dm,NGe),e(Dm,b9),e(b9,jGe),e(Dm,DGe),e(F,GGe),e(F,Gm),e(Gm,iK),e(iK,OGe),e(Gm,VGe),e(Gm,F9),e(F9,XGe),e(Gm,zGe),e(F,QGe),e(F,Om),e(Om,dK),e(dK,WGe),e(Om,HGe),e(Om,v9),e(v9,UGe),e(Om,JGe),e(F,YGe),e(F,Vm),e(Vm,cK),e(cK,KGe),e(Vm,ZGe),e(Vm,T9),e(T9,eOe),e(Vm,oOe),e(F,rOe),e(F,Xm),e(Xm,fK),e(fK,tOe),e(Xm,aOe),e(Xm,M9),e(M9,nOe),e(Xm,sOe),e(F,lOe),e(F,zm),e(zm,mK),e(mK,iOe),e(zm,dOe),e(zm,E9),e(E9,cOe),e(zm,fOe),e(F,mOe),e(F,Qm),e(Qm,gK),e(gK,gOe),e(Qm,hOe),e(Qm,C9),e(C9,pOe),e(Qm,_Oe),e(F,uOe),e(F,Wm),e(Wm,hK),e(hK,bOe),e(Wm,FOe),e(Wm,w9),e(w9,vOe),e(Wm,TOe),e(F,MOe),e(F,Hm),e(Hm,pK),e(pK,EOe),e(Hm,COe),e(Hm,A9),e(A9,wOe),e(Hm,AOe),e(F,yOe),e(F,Um),e(Um,_K),e(_K,LOe),e(Um,xOe),e(Um,y9),e(y9,kOe),e(Um,SOe),e(F,ROe),e(F,Jm),e(Jm,uK),e(uK,BOe),e(Jm,POe),e(Jm,L9),e(L9,$Oe),e(Jm,IOe),e(F,qOe),e(F,Ym),e(Ym,bK),e(bK,NOe),e(Ym,jOe),e(Ym,x9),e(x9,DOe),e(Ym,GOe),e(F,OOe),e(F,Km),e(Km,FK),e(FK,VOe),e(Km,XOe),e(Km,k9),e(k9,zOe),e(Km,QOe),e(F,WOe),e(F,Zm),e(Zm,vK),e(vK,HOe),e(Zm,UOe),e(Zm,S9),e(S9,JOe),e(Zm,YOe),e(F,KOe),e(F,eg),e(eg,TK),e(TK,ZOe),e(eg,eVe),e(eg,R9),e(R9,oVe),e(eg,rVe),e(F,tVe),e(F,og),e(og,MK),e(MK,aVe),e(og,nVe),e(og,B9),e(B9,sVe),e(og,lVe),e(F,iVe),e(F,rg),e(rg,EK),e(EK,dVe),e(rg,cVe),e(rg,P9),e(P9,fVe),e(rg,mVe),e(F,gVe),e(F,tg),e(tg,CK),e(CK,hVe),e(tg,pVe),e(tg,$9),e($9,_Ve),e(tg,uVe),e(F,bVe),e(F,ag),e(ag,wK),e(wK,FVe),e(ag,vVe),e(ag,I9),e(I9,TVe),e(ag,MVe),e(F,EVe),e(F,ng),e(ng,AK),e(AK,CVe),e(ng,wVe),e(ng,q9),e(q9,AVe),e(ng,yVe),e(F,LVe),e(F,sg),e(sg,yK),e(yK,xVe),e(sg,kVe),e(sg,N9),e(N9,SVe),e(sg,RVe),e(F,BVe),e(F,lg),e(lg,LK),e(LK,PVe),e(lg,$Ve),e(lg,j9),e(j9,IVe),e(lg,qVe),e(F,NVe),e(F,ig),e(ig,xK),e(xK,jVe),e(ig,DVe),e(ig,D9),e(D9,GVe),e(ig,OVe),e(F,VVe),e(F,dg),e(dg,kK),e(kK,XVe),e(dg,zVe),e(dg,G9),e(G9,QVe),e(dg,WVe),e(F,HVe),e(F,cg),e(cg,SK),e(SK,UVe),e(cg,JVe),e(cg,O9),e(O9,YVe),e(cg,KVe),e(F,ZVe),e(F,fg),e(fg,RK),e(RK,eXe),e(fg,oXe),e(fg,V9),e(V9,rXe),e(fg,tXe),e(F,aXe),e(F,mg),e(mg,BK),e(BK,nXe),e(mg,sXe),e(mg,X9),e(X9,lXe),e(mg,iXe),e(F,dXe),e(F,gg),e(gg,PK),e(PK,cXe),e(gg,fXe),e(gg,z9),e(z9,mXe),e(gg,gXe),e(F,hXe),e(F,hg),e(hg,$K),e($K,pXe),e(hg,_Xe),e(hg,Q9),e(Q9,uXe),e(hg,bXe),e(F,FXe),e(F,pg),e(pg,IK),e(IK,vXe),e(pg,TXe),e(pg,W9),e(W9,MXe),e(pg,EXe),e(F,CXe),e(F,_g),e(_g,qK),e(qK,wXe),e(_g,AXe),e(_g,H9),e(H9,yXe),e(_g,LXe),e(F,xXe),e(F,ug),e(ug,NK),e(NK,kXe),e(ug,SXe),e(ug,U9),e(U9,RXe),e(ug,BXe),e(F,PXe),e(F,bg),e(bg,jK),e(jK,$Xe),e(bg,IXe),e(bg,J9),e(J9,qXe),e(bg,NXe),e(F,jXe),e(F,Fg),e(Fg,DK),e(DK,DXe),e(Fg,GXe),e(Fg,Y9),e(Y9,OXe),e(Fg,VXe),e(F,XXe),e(F,vg),e(vg,GK),e(GK,zXe),e(vg,QXe),e(vg,K9),e(K9,WXe),e(vg,HXe),e(F,UXe),e(F,Tg),e(Tg,OK),e(OK,JXe),e(Tg,YXe),e(Tg,Z9),e(Z9,KXe),e(Tg,ZXe),e(F,eze),e(F,Mg),e(Mg,VK),e(VK,oze),e(Mg,rze),e(Mg,ek),e(ek,tze),e(Mg,aze),e(F,nze),e(F,Eg),e(Eg,XK),e(XK,sze),e(Eg,lze),e(Eg,ok),e(ok,ize),e(Eg,dze),e(F,cze),e(F,Cg),e(Cg,zK),e(zK,fze),e(Cg,mze),e(Cg,rk),e(rk,gze),e(Cg,hze),e(F,pze),e(F,wg),e(wg,QK),e(QK,_ze),e(wg,uze),e(wg,tk),e(tk,bze),e(wg,Fze),e(F,vze),e(F,Ag),e(Ag,WK),e(WK,Tze),e(Ag,Mze),e(Ag,ak),e(ak,Eze),e(Ag,Cze),e(F,wze),e(F,yg),e(yg,HK),e(HK,Aze),e(yg,yze),e(yg,nk),e(nk,Lze),e(yg,xze),e(F,kze),e(F,Lg),e(Lg,UK),e(UK,Sze),e(Lg,Rze),e(Lg,sk),e(sk,Bze),e(Lg,Pze),e(F,$ze),e(F,xg),e(xg,JK),e(JK,Ize),e(xg,qze),e(xg,lk),e(lk,Nze),e(xg,jze),e(F,Dze),e(F,kg),e(kg,YK),e(YK,Gze),e(kg,Oze),e(kg,ik),e(ik,Vze),e(kg,Xze),e(F,zze),e(F,Sg),e(Sg,KK),e(KK,Qze),e(Sg,Wze),e(Sg,dk),e(dk,Hze),e(Sg,Uze),e(F,Jze),e(F,Rg),e(Rg,ZK),e(ZK,Yze),e(Rg,Kze),e(Rg,ck),e(ck,Zze),e(Rg,eQe),e(F,oQe),e(F,Bg),e(Bg,eZ),e(eZ,rQe),e(Bg,tQe),e(Bg,fk),e(fk,aQe),e(Bg,nQe),e(F,sQe),e(F,Pg),e(Pg,oZ),e(oZ,lQe),e(Pg,iQe),e(Pg,mk),e(mk,dQe),e(Pg,cQe),e(F,fQe),e(F,$g),e($g,rZ),e(rZ,mQe),e($g,gQe),e($g,gk),e(gk,hQe),e($g,pQe),e(F,_Qe),e(F,Ig),e(Ig,tZ),e(tZ,uQe),e(Ig,bQe),e(Ig,hk),e(hk,FQe),e(Ig,vQe),e(mo,TQe),e(mo,aZ),e(aZ,MQe),e(mo,EQe),g(P5,mo,null),e(Qo,CQe),e(Qo,qg),g($5,qg,null),e(qg,wQe),e(qg,nZ),e(nZ,AQe),b(c,MRe,u),b(c,Qi,u),e(Qi,Ng),e(Ng,sZ),g(I5,sZ,null),e(Qi,yQe),e(Qi,lZ),e(lZ,LQe),b(c,ERe,u),b(c,Wo,u),g(q5,Wo,null),e(Wo,xQe),e(Wo,N5),e(N5,kQe),e(N5,pk),e(pk,SQe),e(N5,RQe),e(Wo,BQe),e(Wo,j5),e(j5,PQe),e(j5,iZ),e(iZ,$Qe),e(j5,IQe),e(Wo,qQe),e(Wo,go),g(D5,go,null),e(go,NQe),e(go,dZ),e(dZ,jQe),e(go,DQe),e(go,Oa),e(Oa,GQe),e(Oa,cZ),e(cZ,OQe),e(Oa,VQe),e(Oa,fZ),e(fZ,XQe),e(Oa,zQe),e(Oa,mZ),e(mZ,QQe),e(Oa,WQe),e(go,HQe),e(go,E),e(E,Qn),e(Qn,gZ),e(gZ,UQe),e(Qn,JQe),e(Qn,_k),e(_k,YQe),e(Qn,KQe),e(Qn,uk),e(uk,ZQe),e(Qn,eWe),e(E,oWe),e(E,Wn),e(Wn,hZ),e(hZ,rWe),e(Wn,tWe),e(Wn,bk),e(bk,aWe),e(Wn,nWe),e(Wn,Fk),e(Fk,sWe),e(Wn,lWe),e(E,iWe),e(E,Hn),e(Hn,pZ),e(pZ,dWe),e(Hn,cWe),e(Hn,vk),e(vk,fWe),e(Hn,mWe),e(Hn,Tk),e(Tk,gWe),e(Hn,hWe),e(E,pWe),e(E,jg),e(jg,_Z),e(_Z,_We),e(jg,uWe),e(jg,Mk),e(Mk,bWe),e(jg,FWe),e(E,vWe),e(E,Un),e(Un,uZ),e(uZ,TWe),e(Un,MWe),e(Un,Ek),e(Ek,EWe),e(Un,CWe),e(Un,Ck),e(Ck,wWe),e(Un,AWe),e(E,yWe),e(E,Dg),e(Dg,bZ),e(bZ,LWe),e(Dg,xWe),e(Dg,wk),e(wk,kWe),e(Dg,SWe),e(E,RWe),e(E,Gg),e(Gg,FZ),e(FZ,BWe),e(Gg,PWe),e(Gg,Ak),e(Ak,$We),e(Gg,IWe),e(E,qWe),e(E,Og),e(Og,vZ),e(vZ,NWe),e(Og,jWe),e(Og,yk),e(yk,DWe),e(Og,GWe),e(E,OWe),e(E,Jn),e(Jn,TZ),e(TZ,VWe),e(Jn,XWe),e(Jn,Lk),e(Lk,zWe),e(Jn,QWe),e(Jn,xk),e(xk,WWe),e(Jn,HWe),e(E,UWe),e(E,Yn),e(Yn,MZ),e(MZ,JWe),e(Yn,YWe),e(Yn,kk),e(kk,KWe),e(Yn,ZWe),e(Yn,Sk),e(Sk,eHe),e(Yn,oHe),e(E,rHe),e(E,Kn),e(Kn,EZ),e(EZ,tHe),e(Kn,aHe),e(Kn,Rk),e(Rk,nHe),e(Kn,sHe),e(Kn,Bk),e(Bk,lHe),e(Kn,iHe),e(E,dHe),e(E,Vg),e(Vg,CZ),e(CZ,cHe),e(Vg,fHe),e(Vg,Pk),e(Pk,mHe),e(Vg,gHe),e(E,hHe),e(E,Xg),e(Xg,wZ),e(wZ,pHe),e(Xg,_He),e(Xg,$k),e($k,uHe),e(Xg,bHe),e(E,FHe),e(E,Zn),e(Zn,AZ),e(AZ,vHe),e(Zn,THe),e(Zn,Ik),e(Ik,MHe),e(Zn,EHe),e(Zn,qk),e(qk,CHe),e(Zn,wHe),e(E,AHe),e(E,zg),e(zg,yZ),e(yZ,yHe),e(zg,LHe),e(zg,Nk),e(Nk,xHe),e(zg,kHe),e(E,SHe),e(E,es),e(es,LZ),e(LZ,RHe),e(es,BHe),e(es,jk),e(jk,PHe),e(es,$He),e(es,Dk),e(Dk,IHe),e(es,qHe),e(E,NHe),e(E,os),e(os,xZ),e(xZ,jHe),e(os,DHe),e(os,Gk),e(Gk,GHe),e(os,OHe),e(os,Ok),e(Ok,VHe),e(os,XHe),e(E,zHe),e(E,rs),e(rs,kZ),e(kZ,QHe),e(rs,WHe),e(rs,Vk),e(Vk,HHe),e(rs,UHe),e(rs,SZ),e(SZ,JHe),e(rs,YHe),e(E,KHe),e(E,Qg),e(Qg,RZ),e(RZ,ZHe),e(Qg,eUe),e(Qg,Xk),e(Xk,oUe),e(Qg,rUe),e(E,tUe),e(E,ts),e(ts,BZ),e(BZ,aUe),e(ts,nUe),e(ts,zk),e(zk,sUe),e(ts,lUe),e(ts,Qk),e(Qk,iUe),e(ts,dUe),e(E,cUe),e(E,Wg),e(Wg,PZ),e(PZ,fUe),e(Wg,mUe),e(Wg,Wk),e(Wk,gUe),e(Wg,hUe),e(E,pUe),e(E,as),e(as,$Z),e($Z,_Ue),e(as,uUe),e(as,Hk),e(Hk,bUe),e(as,FUe),e(as,Uk),e(Uk,vUe),e(as,TUe),e(E,MUe),e(E,ns),e(ns,IZ),e(IZ,EUe),e(ns,CUe),e(ns,Jk),e(Jk,wUe),e(ns,AUe),e(ns,Yk),e(Yk,yUe),e(ns,LUe),e(E,xUe),e(E,ss),e(ss,qZ),e(qZ,kUe),e(ss,SUe),e(ss,Kk),e(Kk,RUe),e(ss,BUe),e(ss,Zk),e(Zk,PUe),e(ss,$Ue),e(E,IUe),e(E,Hg),e(Hg,NZ),e(NZ,qUe),e(Hg,NUe),e(Hg,eS),e(eS,jUe),e(Hg,DUe),e(E,GUe),e(E,ls),e(ls,jZ),e(jZ,OUe),e(ls,VUe),e(ls,oS),e(oS,XUe),e(ls,zUe),e(ls,rS),e(rS,QUe),e(ls,WUe),e(E,HUe),e(E,Ug),e(Ug,DZ),e(DZ,UUe),e(Ug,JUe),e(Ug,tS),e(tS,YUe),e(Ug,KUe),e(E,ZUe),e(E,is),e(is,GZ),e(GZ,eJe),e(is,oJe),e(is,aS),e(aS,rJe),e(is,tJe),e(is,nS),e(nS,aJe),e(is,nJe),e(E,sJe),e(E,ds),e(ds,OZ),e(OZ,lJe),e(ds,iJe),e(ds,sS),e(sS,dJe),e(ds,cJe),e(ds,lS),e(lS,fJe),e(ds,mJe),e(E,gJe),e(E,cs),e(cs,VZ),e(VZ,hJe),e(cs,pJe),e(cs,iS),e(iS,_Je),e(cs,uJe),e(cs,dS),e(dS,bJe),e(cs,FJe),e(E,vJe),e(E,fs),e(fs,XZ),e(XZ,TJe),e(fs,MJe),e(fs,cS),e(cS,EJe),e(fs,CJe),e(fs,fS),e(fS,wJe),e(fs,AJe),e(E,yJe),e(E,Jg),e(Jg,zZ),e(zZ,LJe),e(Jg,xJe),e(Jg,mS),e(mS,kJe),e(Jg,SJe),e(E,RJe),e(E,ms),e(ms,QZ),e(QZ,BJe),e(ms,PJe),e(ms,gS),e(gS,$Je),e(ms,IJe),e(ms,hS),e(hS,qJe),e(ms,NJe),e(E,jJe),e(E,gs),e(gs,WZ),e(WZ,DJe),e(gs,GJe),e(gs,pS),e(pS,OJe),e(gs,VJe),e(gs,_S),e(_S,XJe),e(gs,zJe),e(E,QJe),e(E,hs),e(hs,HZ),e(HZ,WJe),e(hs,HJe),e(hs,uS),e(uS,UJe),e(hs,JJe),e(hs,bS),e(bS,YJe),e(hs,KJe),e(E,ZJe),e(E,ps),e(ps,UZ),e(UZ,eYe),e(ps,oYe),e(ps,FS),e(FS,rYe),e(ps,tYe),e(ps,vS),e(vS,aYe),e(ps,nYe),e(E,sYe),e(E,_s),e(_s,JZ),e(JZ,lYe),e(_s,iYe),e(_s,TS),e(TS,dYe),e(_s,cYe),e(_s,MS),e(MS,fYe),e(_s,mYe),e(E,gYe),e(E,us),e(us,YZ),e(YZ,hYe),e(us,pYe),e(us,ES),e(ES,_Ye),e(us,uYe),e(us,CS),e(CS,bYe),e(us,FYe),e(E,vYe),e(E,Yg),e(Yg,KZ),e(KZ,TYe),e(Yg,MYe),e(Yg,wS),e(wS,EYe),e(Yg,CYe),e(E,wYe),e(E,bs),e(bs,ZZ),e(ZZ,AYe),e(bs,yYe),e(bs,AS),e(AS,LYe),e(bs,xYe),e(bs,yS),e(yS,kYe),e(bs,SYe),e(E,RYe),e(E,Kg),e(Kg,eee),e(eee,BYe),e(Kg,PYe),e(Kg,LS),e(LS,$Ye),e(Kg,IYe),e(E,qYe),e(E,Zg),e(Zg,oee),e(oee,NYe),e(Zg,jYe),e(Zg,xS),e(xS,DYe),e(Zg,GYe),e(E,OYe),e(E,Fs),e(Fs,ree),e(ree,VYe),e(Fs,XYe),e(Fs,kS),e(kS,zYe),e(Fs,QYe),e(Fs,SS),e(SS,WYe),e(Fs,HYe),e(E,UYe),e(E,vs),e(vs,tee),e(tee,JYe),e(vs,YYe),e(vs,RS),e(RS,KYe),e(vs,ZYe),e(vs,BS),e(BS,eKe),e(vs,oKe),e(E,rKe),e(E,eh),e(eh,aee),e(aee,tKe),e(eh,aKe),e(eh,PS),e(PS,nKe),e(eh,sKe),e(E,lKe),e(E,Ts),e(Ts,nee),e(nee,iKe),e(Ts,dKe),e(Ts,$S),e($S,cKe),e(Ts,fKe),e(Ts,IS),e(IS,mKe),e(Ts,gKe),e(E,hKe),e(E,Ms),e(Ms,see),e(see,pKe),e(Ms,_Ke),e(Ms,qS),e(qS,uKe),e(Ms,bKe),e(Ms,NS),e(NS,FKe),e(Ms,vKe),e(E,TKe),e(E,Es),e(Es,lee),e(lee,MKe),e(Es,EKe),e(Es,jS),e(jS,CKe),e(Es,wKe),e(Es,DS),e(DS,AKe),e(Es,yKe),e(E,LKe),e(E,Cs),e(Cs,iee),e(iee,xKe),e(Cs,kKe),e(Cs,GS),e(GS,SKe),e(Cs,RKe),e(Cs,OS),e(OS,BKe),e(Cs,PKe),e(E,$Ke),e(E,ws),e(ws,dee),e(dee,IKe),e(ws,qKe),e(ws,VS),e(VS,NKe),e(ws,jKe),e(ws,XS),e(XS,DKe),e(ws,GKe),e(E,OKe),e(E,oh),e(oh,cee),e(cee,VKe),e(oh,XKe),e(oh,zS),e(zS,zKe),e(oh,QKe),e(E,WKe),e(E,rh),e(rh,fee),e(fee,HKe),e(rh,UKe),e(rh,QS),e(QS,JKe),e(rh,YKe),e(E,KKe),e(E,th),e(th,mee),e(mee,ZKe),e(th,eZe),e(th,WS),e(WS,oZe),e(th,rZe),e(E,tZe),e(E,ah),e(ah,gee),e(gee,aZe),e(ah,nZe),e(ah,HS),e(HS,sZe),e(ah,lZe),e(E,iZe),e(E,As),e(As,hee),e(hee,dZe),e(As,cZe),e(As,US),e(US,fZe),e(As,mZe),e(As,JS),e(JS,gZe),e(As,hZe),e(E,pZe),e(E,nh),e(nh,pee),e(pee,_Ze),e(nh,uZe),e(nh,YS),e(YS,bZe),e(nh,FZe),e(E,vZe),e(E,ys),e(ys,_ee),e(_ee,TZe),e(ys,MZe),e(ys,KS),e(KS,EZe),e(ys,CZe),e(ys,ZS),e(ZS,wZe),e(ys,AZe),e(E,yZe),e(E,Ls),e(Ls,uee),e(uee,LZe),e(Ls,xZe),e(Ls,eR),e(eR,kZe),e(Ls,SZe),e(Ls,oR),e(oR,RZe),e(Ls,BZe),e(E,PZe),e(E,xs),e(xs,bee),e(bee,$Ze),e(xs,IZe),e(xs,rR),e(rR,qZe),e(xs,NZe),e(xs,tR),e(tR,jZe),e(xs,DZe),e(E,GZe),e(E,ks),e(ks,Fee),e(Fee,OZe),e(ks,VZe),e(ks,aR),e(aR,XZe),e(ks,zZe),e(ks,nR),e(nR,QZe),e(ks,WZe),e(E,HZe),e(E,Ss),e(Ss,vee),e(vee,UZe),e(Ss,JZe),e(Ss,sR),e(sR,YZe),e(Ss,KZe),e(Ss,lR),e(lR,ZZe),e(Ss,eeo),e(E,oeo),e(E,Rs),e(Rs,Tee),e(Tee,reo),e(Rs,teo),e(Rs,iR),e(iR,aeo),e(Rs,neo),e(Rs,dR),e(dR,seo),e(Rs,leo),e(E,ieo),e(E,sh),e(sh,Mee),e(Mee,deo),e(sh,ceo),e(sh,cR),e(cR,feo),e(sh,meo),e(E,geo),e(E,lh),e(lh,Eee),e(Eee,heo),e(lh,peo),e(lh,fR),e(fR,_eo),e(lh,ueo),e(E,beo),e(E,Bs),e(Bs,Cee),e(Cee,Feo),e(Bs,veo),e(Bs,mR),e(mR,Teo),e(Bs,Meo),e(Bs,gR),e(gR,Eeo),e(Bs,Ceo),e(E,weo),e(E,Ps),e(Ps,wee),e(wee,Aeo),e(Ps,yeo),e(Ps,hR),e(hR,Leo),e(Ps,xeo),e(Ps,pR),e(pR,keo),e(Ps,Seo),e(E,Reo),e(E,$s),e($s,Aee),e(Aee,Beo),e($s,Peo),e($s,_R),e(_R,$eo),e($s,Ieo),e($s,uR),e(uR,qeo),e($s,Neo),e(E,jeo),e(E,ih),e(ih,yee),e(yee,Deo),e(ih,Geo),e(ih,bR),e(bR,Oeo),e(ih,Veo),e(E,Xeo),e(E,dh),e(dh,Lee),e(Lee,zeo),e(dh,Qeo),e(dh,FR),e(FR,Weo),e(dh,Heo),e(E,Ueo),e(E,ch),e(ch,xee),e(xee,Jeo),e(ch,Yeo),e(ch,vR),e(vR,Keo),e(ch,Zeo),e(E,eoo),e(E,fh),e(fh,kee),e(kee,ooo),e(fh,roo),e(fh,TR),e(TR,too),e(fh,aoo),e(E,noo),e(E,mh),e(mh,See),e(See,soo),e(mh,loo),e(mh,MR),e(MR,ioo),e(mh,doo),e(E,coo),e(E,Is),e(Is,Ree),e(Ree,foo),e(Is,moo),e(Is,ER),e(ER,goo),e(Is,hoo),e(Is,CR),e(CR,poo),e(Is,_oo),e(E,uoo),e(E,gh),e(gh,Bee),e(Bee,boo),e(gh,Foo),e(gh,wR),e(wR,voo),e(gh,Too),e(E,Moo),e(E,hh),e(hh,Pee),e(Pee,Eoo),e(hh,Coo),e(hh,AR),e(AR,woo),e(hh,Aoo),e(E,yoo),e(E,qs),e(qs,$ee),e($ee,Loo),e(qs,xoo),e(qs,yR),e(yR,koo),e(qs,Soo),e(qs,LR),e(LR,Roo),e(qs,Boo),e(E,Poo),e(E,Ns),e(Ns,Iee),e(Iee,$oo),e(Ns,Ioo),e(Ns,xR),e(xR,qoo),e(Ns,Noo),e(Ns,kR),e(kR,joo),e(Ns,Doo),e(go,Goo),e(go,qee),e(qee,Ooo),e(go,Voo),g(G5,go,null),e(Wo,Xoo),e(Wo,ph),g(O5,ph,null),e(ph,zoo),e(ph,Nee),e(Nee,Qoo),b(c,CRe,u),b(c,Wi,u),e(Wi,_h),e(_h,jee),g(V5,jee,null),e(Wi,Woo),e(Wi,Dee),e(Dee,Hoo),b(c,wRe,u),b(c,Ho,u),g(X5,Ho,null),e(Ho,Uoo),e(Ho,z5),e(z5,Joo),e(z5,SR),e(SR,Yoo),e(z5,Koo),e(Ho,Zoo),e(Ho,Q5),e(Q5,ero),e(Q5,Gee),e(Gee,oro),e(Q5,rro),e(Ho,tro),e(Ho,$e),g(W5,$e,null),e($e,aro),e($e,Oee),e(Oee,nro),e($e,sro),e($e,Va),e(Va,lro),e(Va,Vee),e(Vee,iro),e(Va,dro),e(Va,Xee),e(Xee,cro),e(Va,fro),e(Va,zee),e(zee,mro),e(Va,gro),e($e,hro),e($e,ee),e(ee,uh),e(uh,Qee),e(Qee,pro),e(uh,_ro),e(uh,RR),e(RR,uro),e(uh,bro),e(ee,Fro),e(ee,bh),e(bh,Wee),e(Wee,vro),e(bh,Tro),e(bh,BR),e(BR,Mro),e(bh,Ero),e(ee,Cro),e(ee,Fh),e(Fh,Hee),e(Hee,wro),e(Fh,Aro),e(Fh,PR),e(PR,yro),e(Fh,Lro),e(ee,xro),e(ee,vh),e(vh,Uee),e(Uee,kro),e(vh,Sro),e(vh,$R),e($R,Rro),e(vh,Bro),e(ee,Pro),e(ee,Th),e(Th,Jee),e(Jee,$ro),e(Th,Iro),e(Th,IR),e(IR,qro),e(Th,Nro),e(ee,jro),e(ee,Mh),e(Mh,Yee),e(Yee,Dro),e(Mh,Gro),e(Mh,qR),e(qR,Oro),e(Mh,Vro),e(ee,Xro),e(ee,Eh),e(Eh,Kee),e(Kee,zro),e(Eh,Qro),e(Eh,NR),e(NR,Wro),e(Eh,Hro),e(ee,Uro),e(ee,Ch),e(Ch,Zee),e(Zee,Jro),e(Ch,Yro),e(Ch,jR),e(jR,Kro),e(Ch,Zro),e(ee,eto),e(ee,wh),e(wh,eoe),e(eoe,oto),e(wh,rto),e(wh,DR),e(DR,tto),e(wh,ato),e(ee,nto),e(ee,Ah),e(Ah,ooe),e(ooe,sto),e(Ah,lto),e(Ah,GR),e(GR,ito),e(Ah,dto),e(ee,cto),e(ee,yh),e(yh,roe),e(roe,fto),e(yh,mto),e(yh,OR),e(OR,gto),e(yh,hto),e(ee,pto),e(ee,Lh),e(Lh,toe),e(toe,_to),e(Lh,uto),e(Lh,VR),e(VR,bto),e(Lh,Fto),e(ee,vto),e(ee,xh),e(xh,aoe),e(aoe,Tto),e(xh,Mto),e(xh,XR),e(XR,Eto),e(xh,Cto),e(ee,wto),e(ee,kh),e(kh,noe),e(noe,Ato),e(kh,yto),e(kh,zR),e(zR,Lto),e(kh,xto),e(ee,kto),e(ee,Sh),e(Sh,soe),e(soe,Sto),e(Sh,Rto),e(Sh,QR),e(QR,Bto),e(Sh,Pto),e(ee,$to),e(ee,Rh),e(Rh,loe),e(loe,Ito),e(Rh,qto),e(Rh,WR),e(WR,Nto),e(Rh,jto),e(ee,Dto),e(ee,Bh),e(Bh,ioe),e(ioe,Gto),e(Bh,Oto),e(Bh,HR),e(HR,Vto),e(Bh,Xto),e(ee,zto),e(ee,Ph),e(Ph,doe),e(doe,Qto),e(Ph,Wto),e(Ph,UR),e(UR,Hto),e(Ph,Uto),e(ee,Jto),e(ee,$h),e($h,coe),e(coe,Yto),e($h,Kto),e($h,JR),e(JR,Zto),e($h,eao),e($e,oao),g(Ih,$e,null),e($e,rao),e($e,foe),e(foe,tao),e($e,aao),g(H5,$e,null),e(Ho,nao),e(Ho,qh),g(U5,qh,null),e(qh,sao),e(qh,moe),e(moe,lao),b(c,ARe,u),b(c,Hi,u),e(Hi,Nh),e(Nh,goe),g(J5,goe,null),e(Hi,iao),e(Hi,hoe),e(hoe,dao),b(c,yRe,u),b(c,Uo,u),g(Y5,Uo,null),e(Uo,cao),e(Uo,K5),e(K5,fao),e(K5,YR),e(YR,mao),e(K5,gao),e(Uo,hao),e(Uo,Z5),e(Z5,pao),e(Z5,poe),e(poe,_ao),e(Z5,uao),e(Uo,bao),e(Uo,Ie),g(e3,Ie,null),e(Ie,Fao),e(Ie,_oe),e(_oe,vao),e(Ie,Tao),e(Ie,Ui),e(Ui,Mao),e(Ui,uoe),e(uoe,Eao),e(Ui,Cao),e(Ui,boe),e(boe,wao),e(Ui,Aao),e(Ie,yao),e(Ie,ke),e(ke,jh),e(jh,Foe),e(Foe,Lao),e(jh,xao),e(jh,KR),e(KR,kao),e(jh,Sao),e(ke,Rao),e(ke,Dh),e(Dh,voe),e(voe,Bao),e(Dh,Pao),e(Dh,ZR),e(ZR,$ao),e(Dh,Iao),e(ke,qao),e(ke,Gh),e(Gh,Toe),e(Toe,Nao),e(Gh,jao),e(Gh,eB),e(eB,Dao),e(Gh,Gao),e(ke,Oao),e(ke,Oh),e(Oh,Moe),e(Moe,Vao),e(Oh,Xao),e(Oh,oB),e(oB,zao),e(Oh,Qao),e(ke,Wao),e(ke,Vh),e(Vh,Eoe),e(Eoe,Hao),e(Vh,Uao),e(Vh,rB),e(rB,Jao),e(Vh,Yao),e(ke,Kao),e(ke,Xh),e(Xh,Coe),e(Coe,Zao),e(Xh,eno),e(Xh,tB),e(tB,ono),e(Xh,rno),e(ke,tno),e(ke,zh),e(zh,woe),e(woe,ano),e(zh,nno),e(zh,aB),e(aB,sno),e(zh,lno),e(ke,ino),e(ke,Qh),e(Qh,Aoe),e(Aoe,dno),e(Qh,cno),e(Qh,nB),e(nB,fno),e(Qh,mno),e(Ie,gno),g(Wh,Ie,null),e(Ie,hno),e(Ie,yoe),e(yoe,pno),e(Ie,_no),g(o3,Ie,null),e(Uo,uno),e(Uo,Hh),g(r3,Hh,null),e(Hh,bno),e(Hh,Loe),e(Loe,Fno),b(c,LRe,u),b(c,Ji,u),e(Ji,Uh),e(Uh,xoe),g(t3,xoe,null),e(Ji,vno),e(Ji,koe),e(koe,Tno),b(c,xRe,u),b(c,Jo,u),g(a3,Jo,null),e(Jo,Mno),e(Jo,Yi),e(Yi,Eno),e(Yi,sB),e(sB,Cno),e(Yi,wno),e(Yi,lB),e(lB,Ano),e(Yi,yno),e(Jo,Lno),e(Jo,n3),e(n3,xno),e(n3,Soe),e(Soe,kno),e(n3,Sno),e(Jo,Rno),e(Jo,Xr),g(s3,Xr,null),e(Xr,Bno),e(Xr,Roe),e(Roe,Pno),e(Xr,$no),e(Xr,Ki),e(Ki,Ino),e(Ki,Boe),e(Boe,qno),e(Ki,Nno),e(Ki,iB),e(iB,jno),e(Ki,Dno),e(Xr,Gno),e(Xr,Poe),e(Poe,Ono),e(Xr,Vno),g(l3,Xr,null),e(Jo,Xno),e(Jo,qe),g(i3,qe,null),e(qe,zno),e(qe,$oe),e($oe,Qno),e(qe,Wno),e(qe,Xa),e(Xa,Hno),e(Xa,Ioe),e(Ioe,Uno),e(Xa,Jno),e(Xa,qoe),e(qoe,Yno),e(Xa,Kno),e(Xa,Noe),e(Noe,Zno),e(Xa,eso),e(qe,oso),e(qe,T),e(T,Jh),e(Jh,joe),e(joe,rso),e(Jh,tso),e(Jh,dB),e(dB,aso),e(Jh,nso),e(T,sso),e(T,Yh),e(Yh,Doe),e(Doe,lso),e(Yh,iso),e(Yh,cB),e(cB,dso),e(Yh,cso),e(T,fso),e(T,Kh),e(Kh,Goe),e(Goe,mso),e(Kh,gso),e(Kh,fB),e(fB,hso),e(Kh,pso),e(T,_so),e(T,Zh),e(Zh,Ooe),e(Ooe,uso),e(Zh,bso),e(Zh,mB),e(mB,Fso),e(Zh,vso),e(T,Tso),e(T,ep),e(ep,Voe),e(Voe,Mso),e(ep,Eso),e(ep,gB),e(gB,Cso),e(ep,wso),e(T,Aso),e(T,op),e(op,Xoe),e(Xoe,yso),e(op,Lso),e(op,hB),e(hB,xso),e(op,kso),e(T,Sso),e(T,rp),e(rp,zoe),e(zoe,Rso),e(rp,Bso),e(rp,pB),e(pB,Pso),e(rp,$so),e(T,Iso),e(T,tp),e(tp,Qoe),e(Qoe,qso),e(tp,Nso),e(tp,_B),e(_B,jso),e(tp,Dso),e(T,Gso),e(T,ap),e(ap,Woe),e(Woe,Oso),e(ap,Vso),e(ap,uB),e(uB,Xso),e(ap,zso),e(T,Qso),e(T,np),e(np,Hoe),e(Hoe,Wso),e(np,Hso),e(np,bB),e(bB,Uso),e(np,Jso),e(T,Yso),e(T,sp),e(sp,Uoe),e(Uoe,Kso),e(sp,Zso),e(sp,FB),e(FB,elo),e(sp,olo),e(T,rlo),e(T,lp),e(lp,Joe),e(Joe,tlo),e(lp,alo),e(lp,vB),e(vB,nlo),e(lp,slo),e(T,llo),e(T,ip),e(ip,Yoe),e(Yoe,ilo),e(ip,dlo),e(ip,TB),e(TB,clo),e(ip,flo),e(T,mlo),e(T,dp),e(dp,Koe),e(Koe,glo),e(dp,hlo),e(dp,MB),e(MB,plo),e(dp,_lo),e(T,ulo),e(T,cp),e(cp,Zoe),e(Zoe,blo),e(cp,Flo),e(cp,EB),e(EB,vlo),e(cp,Tlo),e(T,Mlo),e(T,fp),e(fp,ere),e(ere,Elo),e(fp,Clo),e(fp,CB),e(CB,wlo),e(fp,Alo),e(T,ylo),e(T,mp),e(mp,ore),e(ore,Llo),e(mp,xlo),e(mp,wB),e(wB,klo),e(mp,Slo),e(T,Rlo),e(T,gp),e(gp,rre),e(rre,Blo),e(gp,Plo),e(gp,AB),e(AB,$lo),e(gp,Ilo),e(T,qlo),e(T,hp),e(hp,tre),e(tre,Nlo),e(hp,jlo),e(hp,yB),e(yB,Dlo),e(hp,Glo),e(T,Olo),e(T,pp),e(pp,are),e(are,Vlo),e(pp,Xlo),e(pp,LB),e(LB,zlo),e(pp,Qlo),e(T,Wlo),e(T,_p),e(_p,nre),e(nre,Hlo),e(_p,Ulo),e(_p,xB),e(xB,Jlo),e(_p,Ylo),e(T,Klo),e(T,up),e(up,sre),e(sre,Zlo),e(up,eio),e(up,kB),e(kB,oio),e(up,rio),e(T,tio),e(T,bp),e(bp,lre),e(lre,aio),e(bp,nio),e(bp,SB),e(SB,sio),e(bp,lio),e(T,iio),e(T,Fp),e(Fp,ire),e(ire,dio),e(Fp,cio),e(Fp,RB),e(RB,fio),e(Fp,mio),e(T,gio),e(T,vp),e(vp,dre),e(dre,hio),e(vp,pio),e(vp,BB),e(BB,_io),e(vp,uio),e(T,bio),e(T,Tp),e(Tp,cre),e(cre,Fio),e(Tp,vio),e(Tp,PB),e(PB,Tio),e(Tp,Mio),e(T,Eio),e(T,Mp),e(Mp,fre),e(fre,Cio),e(Mp,wio),e(Mp,$B),e($B,Aio),e(Mp,yio),e(T,Lio),e(T,Ep),e(Ep,mre),e(mre,xio),e(Ep,kio),e(Ep,IB),e(IB,Sio),e(Ep,Rio),e(T,Bio),e(T,Cp),e(Cp,gre),e(gre,Pio),e(Cp,$io),e(Cp,qB),e(qB,Iio),e(Cp,qio),e(T,Nio),e(T,js),e(js,hre),e(hre,jio),e(js,Dio),e(js,NB),e(NB,Gio),e(js,Oio),e(js,jB),e(jB,Vio),e(js,Xio),e(T,zio),e(T,wp),e(wp,pre),e(pre,Qio),e(wp,Wio),e(wp,DB),e(DB,Hio),e(wp,Uio),e(T,Jio),e(T,Ap),e(Ap,_re),e(_re,Yio),e(Ap,Kio),e(Ap,GB),e(GB,Zio),e(Ap,edo),e(T,odo),e(T,yp),e(yp,ure),e(ure,rdo),e(yp,tdo),e(yp,OB),e(OB,ado),e(yp,ndo),e(T,sdo),e(T,Lp),e(Lp,bre),e(bre,ldo),e(Lp,ido),e(Lp,VB),e(VB,ddo),e(Lp,cdo),e(T,fdo),e(T,xp),e(xp,Fre),e(Fre,mdo),e(xp,gdo),e(xp,XB),e(XB,hdo),e(xp,pdo),e(T,_do),e(T,kp),e(kp,vre),e(vre,udo),e(kp,bdo),e(kp,zB),e(zB,Fdo),e(kp,vdo),e(T,Tdo),e(T,Sp),e(Sp,Tre),e(Tre,Mdo),e(Sp,Edo),e(Sp,QB),e(QB,Cdo),e(Sp,wdo),e(T,Ado),e(T,Rp),e(Rp,Mre),e(Mre,ydo),e(Rp,Ldo),e(Rp,WB),e(WB,xdo),e(Rp,kdo),e(T,Sdo),e(T,Bp),e(Bp,Ere),e(Ere,Rdo),e(Bp,Bdo),e(Bp,HB),e(HB,Pdo),e(Bp,$do),e(T,Ido),e(T,Pp),e(Pp,Cre),e(Cre,qdo),e(Pp,Ndo),e(Pp,UB),e(UB,jdo),e(Pp,Ddo),e(T,Gdo),e(T,$p),e($p,wre),e(wre,Odo),e($p,Vdo),e($p,JB),e(JB,Xdo),e($p,zdo),e(T,Qdo),e(T,Ip),e(Ip,Are),e(Are,Wdo),e(Ip,Hdo),e(Ip,YB),e(YB,Udo),e(Ip,Jdo),e(T,Ydo),e(T,qp),e(qp,yre),e(yre,Kdo),e(qp,Zdo),e(qp,KB),e(KB,eco),e(qp,oco),e(T,rco),e(T,Np),e(Np,Lre),e(Lre,tco),e(Np,aco),e(Np,ZB),e(ZB,nco),e(Np,sco),e(T,lco),e(T,jp),e(jp,xre),e(xre,ico),e(jp,dco),e(jp,eP),e(eP,cco),e(jp,fco),e(T,mco),e(T,Dp),e(Dp,kre),e(kre,gco),e(Dp,hco),e(Dp,oP),e(oP,pco),e(Dp,_co),e(T,uco),e(T,Gp),e(Gp,Sre),e(Sre,bco),e(Gp,Fco),e(Gp,rP),e(rP,vco),e(Gp,Tco),e(T,Mco),e(T,Op),e(Op,Rre),e(Rre,Eco),e(Op,Cco),e(Op,tP),e(tP,wco),e(Op,Aco),e(T,yco),e(T,Vp),e(Vp,Bre),e(Bre,Lco),e(Vp,xco),e(Vp,aP),e(aP,kco),e(Vp,Sco),e(T,Rco),e(T,Xp),e(Xp,Pre),e(Pre,Bco),e(Xp,Pco),e(Xp,nP),e(nP,$co),e(Xp,Ico),e(T,qco),e(T,zp),e(zp,$re),e($re,Nco),e(zp,jco),e(zp,sP),e(sP,Dco),e(zp,Gco),e(T,Oco),e(T,Qp),e(Qp,Ire),e(Ire,Vco),e(Qp,Xco),e(Qp,lP),e(lP,zco),e(Qp,Qco),e(T,Wco),e(T,Wp),e(Wp,qre),e(qre,Hco),e(Wp,Uco),e(Wp,iP),e(iP,Jco),e(Wp,Yco),e(T,Kco),e(T,Hp),e(Hp,Nre),e(Nre,Zco),e(Hp,efo),e(Hp,dP),e(dP,ofo),e(Hp,rfo),e(T,tfo),e(T,Up),e(Up,jre),e(jre,afo),e(Up,nfo),e(Up,cP),e(cP,sfo),e(Up,lfo),e(T,ifo),e(T,Jp),e(Jp,Dre),e(Dre,dfo),e(Jp,cfo),e(Jp,fP),e(fP,ffo),e(Jp,mfo),e(T,gfo),e(T,Yp),e(Yp,Gre),e(Gre,hfo),e(Yp,pfo),e(Yp,mP),e(mP,_fo),e(Yp,ufo),e(T,bfo),e(T,Kp),e(Kp,Ore),e(Ore,Ffo),e(Kp,vfo),e(Kp,gP),e(gP,Tfo),e(Kp,Mfo),e(T,Efo),e(T,Zp),e(Zp,Vre),e(Vre,Cfo),e(Zp,wfo),e(Zp,hP),e(hP,Afo),e(Zp,yfo),e(T,Lfo),e(T,e_),e(e_,Xre),e(Xre,xfo),e(e_,kfo),e(e_,pP),e(pP,Sfo),e(e_,Rfo),e(T,Bfo),e(T,o_),e(o_,zre),e(zre,Pfo),e(o_,$fo),e(o_,_P),e(_P,Ifo),e(o_,qfo),e(T,Nfo),e(T,r_),e(r_,Qre),e(Qre,jfo),e(r_,Dfo),e(r_,uP),e(uP,Gfo),e(r_,Ofo),e(T,Vfo),e(T,t_),e(t_,Wre),e(Wre,Xfo),e(t_,zfo),e(t_,bP),e(bP,Qfo),e(t_,Wfo),e(T,Hfo),e(T,a_),e(a_,Hre),e(Hre,Ufo),e(a_,Jfo),e(a_,FP),e(FP,Yfo),e(a_,Kfo),e(T,Zfo),e(T,n_),e(n_,Ure),e(Ure,emo),e(n_,omo),e(n_,vP),e(vP,rmo),e(n_,tmo),e(T,amo),e(T,s_),e(s_,Jre),e(Jre,nmo),e(s_,smo),e(s_,TP),e(TP,lmo),e(s_,imo),e(T,dmo),e(T,l_),e(l_,Yre),e(Yre,cmo),e(l_,fmo),e(l_,MP),e(MP,mmo),e(l_,gmo),e(T,hmo),e(T,i_),e(i_,Kre),e(Kre,pmo),e(i_,_mo),e(i_,EP),e(EP,umo),e(i_,bmo),e(T,Fmo),e(T,d_),e(d_,Zre),e(Zre,vmo),e(d_,Tmo),e(d_,CP),e(CP,Mmo),e(d_,Emo),e(T,Cmo),e(T,c_),e(c_,ete),e(ete,wmo),e(c_,Amo),e(c_,wP),e(wP,ymo),e(c_,Lmo),e(T,xmo),e(T,f_),e(f_,ote),e(ote,kmo),e(f_,Smo),e(f_,AP),e(AP,Rmo),e(f_,Bmo),e(T,Pmo),e(T,m_),e(m_,rte),e(rte,$mo),e(m_,Imo),e(m_,yP),e(yP,qmo),e(m_,Nmo),e(T,jmo),e(T,g_),e(g_,tte),e(tte,Dmo),e(g_,Gmo),e(g_,LP),e(LP,Omo),e(g_,Vmo),e(T,Xmo),e(T,h_),e(h_,ate),e(ate,zmo),e(h_,Qmo),e(h_,xP),e(xP,Wmo),e(h_,Hmo),e(T,Umo),e(T,p_),e(p_,nte),e(nte,Jmo),e(p_,Ymo),e(p_,kP),e(kP,Kmo),e(p_,Zmo),e(T,ego),e(T,__),e(__,ste),e(ste,ogo),e(__,rgo),e(__,SP),e(SP,tgo),e(__,ago),e(T,ngo),e(T,u_),e(u_,lte),e(lte,sgo),e(u_,lgo),e(u_,RP),e(RP,igo),e(u_,dgo),e(T,cgo),e(T,b_),e(b_,ite),e(ite,fgo),e(b_,mgo),e(b_,BP),e(BP,ggo),e(b_,hgo),e(T,pgo),e(T,F_),e(F_,dte),e(dte,_go),e(F_,ugo),e(F_,PP),e(PP,bgo),e(F_,Fgo),e(T,vgo),e(T,v_),e(v_,cte),e(cte,Tgo),e(v_,Mgo),e(v_,$P),e($P,Ego),e(v_,Cgo),e(T,wgo),e(T,T_),e(T_,fte),e(fte,Ago),e(T_,ygo),e(T_,IP),e(IP,Lgo),e(T_,xgo),e(T,kgo),e(T,M_),e(M_,mte),e(mte,Sgo),e(M_,Rgo),e(M_,qP),e(qP,Bgo),e(M_,Pgo),e(T,$go),e(T,E_),e(E_,gte),e(gte,Igo),e(E_,qgo),e(E_,NP),e(NP,Ngo),e(E_,jgo),e(T,Dgo),e(T,C_),e(C_,hte),e(hte,Ggo),e(C_,Ogo),e(C_,jP),e(jP,Vgo),e(C_,Xgo),e(T,zgo),e(T,w_),e(w_,pte),e(pte,Qgo),e(w_,Wgo),e(w_,DP),e(DP,Hgo),e(w_,Ugo),e(T,Jgo),e(T,A_),e(A_,_te),e(_te,Ygo),e(A_,Kgo),e(A_,GP),e(GP,Zgo),e(A_,eho),e(T,oho),e(T,y_),e(y_,ute),e(ute,rho),e(y_,tho),e(y_,OP),e(OP,aho),e(y_,nho),e(T,sho),e(T,L_),e(L_,bte),e(bte,lho),e(L_,iho),e(L_,VP),e(VP,dho),e(L_,cho),e(T,fho),e(T,x_),e(x_,Fte),e(Fte,mho),e(x_,gho),e(x_,XP),e(XP,hho),e(x_,pho),e(T,_ho),e(T,k_),e(k_,vte),e(vte,uho),e(k_,bho),e(k_,zP),e(zP,Fho),e(k_,vho),e(T,Tho),e(T,S_),e(S_,Tte),e(Tte,Mho),e(S_,Eho),e(S_,QP),e(QP,Cho),e(S_,who),e(T,Aho),e(T,R_),e(R_,Mte),e(Mte,yho),e(R_,Lho),e(R_,WP),e(WP,xho),e(R_,kho),e(T,Sho),e(T,B_),e(B_,Ete),e(Ete,Rho),e(B_,Bho),e(B_,HP),e(HP,Pho),e(B_,$ho),e(qe,Iho),e(qe,P_),e(P_,qho),e(P_,Cte),e(Cte,Nho),e(P_,jho),e(P_,wte),e(wte,Dho),e(qe,Gho),e(qe,Ate),e(Ate,Oho),e(qe,Vho),g(d3,qe,null),b(c,kRe,u),b(c,Zi,u),e(Zi,$_),e($_,yte),g(c3,yte,null),e(Zi,Xho),e(Zi,Lte),e(Lte,zho),b(c,SRe,u),b(c,Yo,u),g(f3,Yo,null),e(Yo,Qho),e(Yo,ed),e(ed,Who),e(ed,UP),e(UP,Hho),e(ed,Uho),e(ed,JP),e(JP,Jho),e(ed,Yho),e(Yo,Kho),e(Yo,m3),e(m3,Zho),e(m3,xte),e(xte,epo),e(m3,opo),e(Yo,rpo),e(Yo,zr),g(g3,zr,null),e(zr,tpo),e(zr,kte),e(kte,apo),e(zr,npo),e(zr,od),e(od,spo),e(od,Ste),e(Ste,lpo),e(od,ipo),e(od,YP),e(YP,dpo),e(od,cpo),e(zr,fpo),e(zr,Rte),e(Rte,mpo),e(zr,gpo),g(h3,zr,null),e(Yo,hpo),e(Yo,Ne),g(p3,Ne,null),e(Ne,ppo),e(Ne,Bte),e(Bte,_po),e(Ne,upo),e(Ne,za),e(za,bpo),e(za,Pte),e(Pte,Fpo),e(za,vpo),e(za,$te),e($te,Tpo),e(za,Mpo),e(za,Ite),e(Ite,Epo),e(za,Cpo),e(Ne,wpo),e(Ne,S),e(S,I_),e(I_,qte),e(qte,Apo),e(I_,ypo),e(I_,KP),e(KP,Lpo),e(I_,xpo),e(S,kpo),e(S,q_),e(q_,Nte),e(Nte,Spo),e(q_,Rpo),e(q_,ZP),e(ZP,Bpo),e(q_,Ppo),e(S,$po),e(S,N_),e(N_,jte),e(jte,Ipo),e(N_,qpo),e(N_,e$),e(e$,Npo),e(N_,jpo),e(S,Dpo),e(S,j_),e(j_,Dte),e(Dte,Gpo),e(j_,Opo),e(j_,o$),e(o$,Vpo),e(j_,Xpo),e(S,zpo),e(S,D_),e(D_,Gte),e(Gte,Qpo),e(D_,Wpo),e(D_,r$),e(r$,Hpo),e(D_,Upo),e(S,Jpo),e(S,G_),e(G_,Ote),e(Ote,Ypo),e(G_,Kpo),e(G_,t$),e(t$,Zpo),e(G_,e_o),e(S,o_o),e(S,O_),e(O_,Vte),e(Vte,r_o),e(O_,t_o),e(O_,a$),e(a$,a_o),e(O_,n_o),e(S,s_o),e(S,V_),e(V_,Xte),e(Xte,l_o),e(V_,i_o),e(V_,n$),e(n$,d_o),e(V_,c_o),e(S,f_o),e(S,X_),e(X_,zte),e(zte,m_o),e(X_,g_o),e(X_,s$),e(s$,h_o),e(X_,p_o),e(S,__o),e(S,z_),e(z_,Qte),e(Qte,u_o),e(z_,b_o),e(z_,l$),e(l$,F_o),e(z_,v_o),e(S,T_o),e(S,Q_),e(Q_,Wte),e(Wte,M_o),e(Q_,E_o),e(Q_,i$),e(i$,C_o),e(Q_,w_o),e(S,A_o),e(S,W_),e(W_,Hte),e(Hte,y_o),e(W_,L_o),e(W_,d$),e(d$,x_o),e(W_,k_o),e(S,S_o),e(S,H_),e(H_,Ute),e(Ute,R_o),e(H_,B_o),e(H_,c$),e(c$,P_o),e(H_,$_o),e(S,I_o),e(S,U_),e(U_,Jte),e(Jte,q_o),e(U_,N_o),e(U_,f$),e(f$,j_o),e(U_,D_o),e(S,G_o),e(S,J_),e(J_,Yte),e(Yte,O_o),e(J_,V_o),e(J_,m$),e(m$,X_o),e(J_,z_o),e(S,Q_o),e(S,Y_),e(Y_,Kte),e(Kte,W_o),e(Y_,H_o),e(Y_,g$),e(g$,U_o),e(Y_,J_o),e(S,Y_o),e(S,K_),e(K_,Zte),e(Zte,K_o),e(K_,Z_o),e(K_,h$),e(h$,euo),e(K_,ouo),e(S,ruo),e(S,Z_),e(Z_,eae),e(eae,tuo),e(Z_,auo),e(Z_,p$),e(p$,nuo),e(Z_,suo),e(S,luo),e(S,eu),e(eu,oae),e(oae,iuo),e(eu,duo),e(eu,_$),e(_$,cuo),e(eu,fuo),e(S,muo),e(S,ou),e(ou,rae),e(rae,guo),e(ou,huo),e(ou,u$),e(u$,puo),e(ou,_uo),e(S,uuo),e(S,ru),e(ru,tae),e(tae,buo),e(ru,Fuo),e(ru,b$),e(b$,vuo),e(ru,Tuo),e(S,Muo),e(S,tu),e(tu,aae),e(aae,Euo),e(tu,Cuo),e(tu,F$),e(F$,wuo),e(tu,Auo),e(S,yuo),e(S,au),e(au,nae),e(nae,Luo),e(au,xuo),e(au,v$),e(v$,kuo),e(au,Suo),e(S,Ruo),e(S,nu),e(nu,sae),e(sae,Buo),e(nu,Puo),e(nu,T$),e(T$,$uo),e(nu,Iuo),e(S,quo),e(S,su),e(su,lae),e(lae,Nuo),e(su,juo),e(su,M$),e(M$,Duo),e(su,Guo),e(S,Ouo),e(S,lu),e(lu,iae),e(iae,Vuo),e(lu,Xuo),e(lu,E$),e(E$,zuo),e(lu,Quo),e(S,Wuo),e(S,iu),e(iu,dae),e(dae,Huo),e(iu,Uuo),e(iu,C$),e(C$,Juo),e(iu,Yuo),e(S,Kuo),e(S,du),e(du,cae),e(cae,Zuo),e(du,e1o),e(du,w$),e(w$,o1o),e(du,r1o),e(S,t1o),e(S,cu),e(cu,fae),e(fae,a1o),e(cu,n1o),e(cu,A$),e(A$,s1o),e(cu,l1o),e(S,i1o),e(S,fu),e(fu,mae),e(mae,d1o),e(fu,c1o),e(fu,y$),e(y$,f1o),e(fu,m1o),e(S,g1o),e(S,mu),e(mu,gae),e(gae,h1o),e(mu,p1o),e(mu,L$),e(L$,_1o),e(mu,u1o),e(S,b1o),e(S,gu),e(gu,hae),e(hae,F1o),e(gu,v1o),e(gu,x$),e(x$,T1o),e(gu,M1o),e(S,E1o),e(S,hu),e(hu,pae),e(pae,C1o),e(hu,w1o),e(hu,k$),e(k$,A1o),e(hu,y1o),e(S,L1o),e(S,pu),e(pu,_ae),e(_ae,x1o),e(pu,k1o),e(pu,S$),e(S$,S1o),e(pu,R1o),e(S,B1o),e(S,_u),e(_u,uae),e(uae,P1o),e(_u,$1o),e(_u,R$),e(R$,I1o),e(_u,q1o),e(S,N1o),e(S,uu),e(uu,bae),e(bae,j1o),e(uu,D1o),e(uu,B$),e(B$,G1o),e(uu,O1o),e(S,V1o),e(S,bu),e(bu,Fae),e(Fae,X1o),e(bu,z1o),e(bu,P$),e(P$,Q1o),e(bu,W1o),e(S,H1o),e(S,Fu),e(Fu,vae),e(vae,U1o),e(Fu,J1o),e(Fu,$$),e($$,Y1o),e(Fu,K1o),e(S,Z1o),e(S,vu),e(vu,Tae),e(Tae,e8o),e(vu,o8o),e(vu,I$),e(I$,r8o),e(vu,t8o),e(Ne,a8o),e(Ne,Tu),e(Tu,n8o),e(Tu,Mae),e(Mae,s8o),e(Tu,l8o),e(Tu,Eae),e(Eae,i8o),e(Ne,d8o),e(Ne,Cae),e(Cae,c8o),e(Ne,f8o),g(_3,Ne,null),b(c,RRe,u),b(c,rd,u),e(rd,Mu),e(Mu,wae),g(u3,wae,null),e(rd,m8o),e(rd,Aae),e(Aae,g8o),b(c,BRe,u),b(c,Ko,u),g(b3,Ko,null),e(Ko,h8o),e(Ko,td),e(td,p8o),e(td,q$),e(q$,_8o),e(td,u8o),e(td,N$),e(N$,b8o),e(td,F8o),e(Ko,v8o),e(Ko,F3),e(F3,T8o),e(F3,yae),e(yae,M8o),e(F3,E8o),e(Ko,C8o),e(Ko,Qr),g(v3,Qr,null),e(Qr,w8o),e(Qr,Lae),e(Lae,A8o),e(Qr,y8o),e(Qr,ad),e(ad,L8o),e(ad,xae),e(xae,x8o),e(ad,k8o),e(ad,j$),e(j$,S8o),e(ad,R8o),e(Qr,B8o),e(Qr,kae),e(kae,P8o),e(Qr,$8o),g(T3,Qr,null),e(Ko,I8o),e(Ko,je),g(M3,je,null),e(je,q8o),e(je,Sae),e(Sae,N8o),e(je,j8o),e(je,Qa),e(Qa,D8o),e(Qa,Rae),e(Rae,G8o),e(Qa,O8o),e(Qa,Bae),e(Bae,V8o),e(Qa,X8o),e(Qa,Pae),e(Pae,z8o),e(Qa,Q8o),e(je,W8o),e(je,$),e($,Eu),e(Eu,$ae),e($ae,H8o),e(Eu,U8o),e(Eu,D$),e(D$,J8o),e(Eu,Y8o),e($,K8o),e($,Cu),e(Cu,Iae),e(Iae,Z8o),e(Cu,ebo),e(Cu,G$),e(G$,obo),e(Cu,rbo),e($,tbo),e($,wu),e(wu,qae),e(qae,abo),e(wu,nbo),e(wu,O$),e(O$,sbo),e(wu,lbo),e($,ibo),e($,Au),e(Au,Nae),e(Nae,dbo),e(Au,cbo),e(Au,V$),e(V$,fbo),e(Au,mbo),e($,gbo),e($,yu),e(yu,jae),e(jae,hbo),e(yu,pbo),e(yu,X$),e(X$,_bo),e(yu,ubo),e($,bbo),e($,Lu),e(Lu,Dae),e(Dae,Fbo),e(Lu,vbo),e(Lu,z$),e(z$,Tbo),e(Lu,Mbo),e($,Ebo),e($,xu),e(xu,Gae),e(Gae,Cbo),e(xu,wbo),e(xu,Q$),e(Q$,Abo),e(xu,ybo),e($,Lbo),e($,ku),e(ku,Oae),e(Oae,xbo),e(ku,kbo),e(ku,W$),e(W$,Sbo),e(ku,Rbo),e($,Bbo),e($,Su),e(Su,Vae),e(Vae,Pbo),e(Su,$bo),e(Su,H$),e(H$,Ibo),e(Su,qbo),e($,Nbo),e($,Ru),e(Ru,Xae),e(Xae,jbo),e(Ru,Dbo),e(Ru,U$),e(U$,Gbo),e(Ru,Obo),e($,Vbo),e($,Bu),e(Bu,zae),e(zae,Xbo),e(Bu,zbo),e(Bu,J$),e(J$,Qbo),e(Bu,Wbo),e($,Hbo),e($,Pu),e(Pu,Qae),e(Qae,Ubo),e(Pu,Jbo),e(Pu,Y$),e(Y$,Ybo),e(Pu,Kbo),e($,Zbo),e($,$u),e($u,Wae),e(Wae,e2o),e($u,o2o),e($u,K$),e(K$,r2o),e($u,t2o),e($,a2o),e($,Iu),e(Iu,Hae),e(Hae,n2o),e(Iu,s2o),e(Iu,Z$),e(Z$,l2o),e(Iu,i2o),e($,d2o),e($,qu),e(qu,Uae),e(Uae,c2o),e(qu,f2o),e(qu,eI),e(eI,m2o),e(qu,g2o),e($,h2o),e($,Nu),e(Nu,Jae),e(Jae,p2o),e(Nu,_2o),e(Nu,oI),e(oI,u2o),e(Nu,b2o),e($,F2o),e($,ju),e(ju,Yae),e(Yae,v2o),e(ju,T2o),e(ju,rI),e(rI,M2o),e(ju,E2o),e($,C2o),e($,Du),e(Du,Kae),e(Kae,w2o),e(Du,A2o),e(Du,tI),e(tI,y2o),e(Du,L2o),e($,x2o),e($,Gu),e(Gu,Zae),e(Zae,k2o),e(Gu,S2o),e(Gu,aI),e(aI,R2o),e(Gu,B2o),e($,P2o),e($,Ou),e(Ou,ene),e(ene,$2o),e(Ou,I2o),e(Ou,nI),e(nI,q2o),e(Ou,N2o),e($,j2o),e($,Vu),e(Vu,one),e(one,D2o),e(Vu,G2o),e(Vu,sI),e(sI,O2o),e(Vu,V2o),e($,X2o),e($,Xu),e(Xu,rne),e(rne,z2o),e(Xu,Q2o),e(Xu,lI),e(lI,W2o),e(Xu,H2o),e($,U2o),e($,zu),e(zu,tne),e(tne,J2o),e(zu,Y2o),e(zu,iI),e(iI,K2o),e(zu,Z2o),e($,e6o),e($,Qu),e(Qu,ane),e(ane,o6o),e(Qu,r6o),e(Qu,dI),e(dI,t6o),e(Qu,a6o),e($,n6o),e($,Wu),e(Wu,nne),e(nne,s6o),e(Wu,l6o),e(Wu,cI),e(cI,i6o),e(Wu,d6o),e($,c6o),e($,Hu),e(Hu,sne),e(sne,f6o),e(Hu,m6o),e(Hu,fI),e(fI,g6o),e(Hu,h6o),e($,p6o),e($,Uu),e(Uu,lne),e(lne,_6o),e(Uu,u6o),e(Uu,mI),e(mI,b6o),e(Uu,F6o),e($,v6o),e($,Ju),e(Ju,ine),e(ine,T6o),e(Ju,M6o),e(Ju,gI),e(gI,E6o),e(Ju,C6o),e($,w6o),e($,Yu),e(Yu,dne),e(dne,A6o),e(Yu,y6o),e(Yu,hI),e(hI,L6o),e(Yu,x6o),e($,k6o),e($,Ku),e(Ku,cne),e(cne,S6o),e(Ku,R6o),e(Ku,pI),e(pI,B6o),e(Ku,P6o),e($,$6o),e($,Zu),e(Zu,fne),e(fne,I6o),e(Zu,q6o),e(Zu,_I),e(_I,N6o),e(Zu,j6o),e($,D6o),e($,e1),e(e1,mne),e(mne,G6o),e(e1,O6o),e(e1,uI),e(uI,V6o),e(e1,X6o),e($,z6o),e($,o1),e(o1,gne),e(gne,Q6o),e(o1,W6o),e(o1,bI),e(bI,H6o),e(o1,U6o),e($,J6o),e($,r1),e(r1,hne),e(hne,Y6o),e(r1,K6o),e(r1,FI),e(FI,Z6o),e(r1,eFo),e($,oFo),e($,t1),e(t1,pne),e(pne,rFo),e(t1,tFo),e(t1,vI),e(vI,aFo),e(t1,nFo),e(je,sFo),e(je,a1),e(a1,lFo),e(a1,_ne),e(_ne,iFo),e(a1,dFo),e(a1,une),e(une,cFo),e(je,fFo),e(je,bne),e(bne,mFo),e(je,gFo),g(E3,je,null),b(c,PRe,u),b(c,nd,u),e(nd,n1),e(n1,Fne),g(C3,Fne,null),e(nd,hFo),e(nd,vne),e(vne,pFo),b(c,$Re,u),b(c,Zo,u),g(w3,Zo,null),e(Zo,_Fo),e(Zo,sd),e(sd,uFo),e(sd,TI),e(TI,bFo),e(sd,FFo),e(sd,MI),e(MI,vFo),e(sd,TFo),e(Zo,MFo),e(Zo,A3),e(A3,EFo),e(A3,Tne),e(Tne,CFo),e(A3,wFo),e(Zo,AFo),e(Zo,Wr),g(y3,Wr,null),e(Wr,yFo),e(Wr,Mne),e(Mne,LFo),e(Wr,xFo),e(Wr,ld),e(ld,kFo),e(ld,Ene),e(Ene,SFo),e(ld,RFo),e(ld,EI),e(EI,BFo),e(ld,PFo),e(Wr,$Fo),e(Wr,Cne),e(Cne,IFo),e(Wr,qFo),g(L3,Wr,null),e(Zo,NFo),e(Zo,De),g(x3,De,null),e(De,jFo),e(De,wne),e(wne,DFo),e(De,GFo),e(De,Wa),e(Wa,OFo),e(Wa,Ane),e(Ane,VFo),e(Wa,XFo),e(Wa,yne),e(yne,zFo),e(Wa,QFo),e(Wa,Lne),e(Lne,WFo),e(Wa,HFo),e(De,UFo),e(De,I),e(I,s1),e(s1,xne),e(xne,JFo),e(s1,YFo),e(s1,CI),e(CI,KFo),e(s1,ZFo),e(I,evo),e(I,l1),e(l1,kne),e(kne,ovo),e(l1,rvo),e(l1,wI),e(wI,tvo),e(l1,avo),e(I,nvo),e(I,i1),e(i1,Sne),e(Sne,svo),e(i1,lvo),e(i1,AI),e(AI,ivo),e(i1,dvo),e(I,cvo),e(I,d1),e(d1,Rne),e(Rne,fvo),e(d1,mvo),e(d1,yI),e(yI,gvo),e(d1,hvo),e(I,pvo),e(I,c1),e(c1,Bne),e(Bne,_vo),e(c1,uvo),e(c1,LI),e(LI,bvo),e(c1,Fvo),e(I,vvo),e(I,f1),e(f1,Pne),e(Pne,Tvo),e(f1,Mvo),e(f1,xI),e(xI,Evo),e(f1,Cvo),e(I,wvo),e(I,m1),e(m1,$ne),e($ne,Avo),e(m1,yvo),e(m1,kI),e(kI,Lvo),e(m1,xvo),e(I,kvo),e(I,g1),e(g1,Ine),e(Ine,Svo),e(g1,Rvo),e(g1,SI),e(SI,Bvo),e(g1,Pvo),e(I,$vo),e(I,h1),e(h1,qne),e(qne,Ivo),e(h1,qvo),e(h1,RI),e(RI,Nvo),e(h1,jvo),e(I,Dvo),e(I,p1),e(p1,Nne),e(Nne,Gvo),e(p1,Ovo),e(p1,BI),e(BI,Vvo),e(p1,Xvo),e(I,zvo),e(I,_1),e(_1,jne),e(jne,Qvo),e(_1,Wvo),e(_1,PI),e(PI,Hvo),e(_1,Uvo),e(I,Jvo),e(I,u1),e(u1,Dne),e(Dne,Yvo),e(u1,Kvo),e(u1,$I),e($I,Zvo),e(u1,e0o),e(I,o0o),e(I,b1),e(b1,Gne),e(Gne,r0o),e(b1,t0o),e(b1,II),e(II,a0o),e(b1,n0o),e(I,s0o),e(I,F1),e(F1,One),e(One,l0o),e(F1,i0o),e(F1,qI),e(qI,d0o),e(F1,c0o),e(I,f0o),e(I,v1),e(v1,Vne),e(Vne,m0o),e(v1,g0o),e(v1,NI),e(NI,h0o),e(v1,p0o),e(I,_0o),e(I,T1),e(T1,Xne),e(Xne,u0o),e(T1,b0o),e(T1,jI),e(jI,F0o),e(T1,v0o),e(I,T0o),e(I,M1),e(M1,zne),e(zne,M0o),e(M1,E0o),e(M1,DI),e(DI,C0o),e(M1,w0o),e(I,A0o),e(I,E1),e(E1,Qne),e(Qne,y0o),e(E1,L0o),e(E1,GI),e(GI,x0o),e(E1,k0o),e(I,S0o),e(I,C1),e(C1,Wne),e(Wne,R0o),e(C1,B0o),e(C1,OI),e(OI,P0o),e(C1,$0o),e(I,I0o),e(I,w1),e(w1,Hne),e(Hne,q0o),e(w1,N0o),e(w1,VI),e(VI,j0o),e(w1,D0o),e(I,G0o),e(I,A1),e(A1,Une),e(Une,O0o),e(A1,V0o),e(A1,XI),e(XI,X0o),e(A1,z0o),e(I,Q0o),e(I,y1),e(y1,Jne),e(Jne,W0o),e(y1,H0o),e(y1,zI),e(zI,U0o),e(y1,J0o),e(I,Y0o),e(I,L1),e(L1,Yne),e(Yne,K0o),e(L1,Z0o),e(L1,QI),e(QI,eTo),e(L1,oTo),e(I,rTo),e(I,x1),e(x1,Kne),e(Kne,tTo),e(x1,aTo),e(x1,WI),e(WI,nTo),e(x1,sTo),e(I,lTo),e(I,k1),e(k1,Zne),e(Zne,iTo),e(k1,dTo),e(k1,HI),e(HI,cTo),e(k1,fTo),e(I,mTo),e(I,S1),e(S1,ese),e(ese,gTo),e(S1,hTo),e(S1,UI),e(UI,pTo),e(S1,_To),e(I,uTo),e(I,R1),e(R1,ose),e(ose,bTo),e(R1,FTo),e(R1,JI),e(JI,vTo),e(R1,TTo),e(I,MTo),e(I,B1),e(B1,rse),e(rse,ETo),e(B1,CTo),e(B1,YI),e(YI,wTo),e(B1,ATo),e(I,yTo),e(I,P1),e(P1,tse),e(tse,LTo),e(P1,xTo),e(P1,KI),e(KI,kTo),e(P1,STo),e(I,RTo),e(I,$1),e($1,ase),e(ase,BTo),e($1,PTo),e($1,ZI),e(ZI,$To),e($1,ITo),e(I,qTo),e(I,I1),e(I1,nse),e(nse,NTo),e(I1,jTo),e(I1,sse),e(sse,DTo),e(I1,GTo),e(I,OTo),e(I,q1),e(q1,lse),e(lse,VTo),e(q1,XTo),e(q1,eq),e(eq,zTo),e(q1,QTo),e(I,WTo),e(I,N1),e(N1,ise),e(ise,HTo),e(N1,UTo),e(N1,oq),e(oq,JTo),e(N1,YTo),e(I,KTo),e(I,j1),e(j1,dse),e(dse,ZTo),e(j1,eMo),e(j1,rq),e(rq,oMo),e(j1,rMo),e(I,tMo),e(I,D1),e(D1,cse),e(cse,aMo),e(D1,nMo),e(D1,tq),e(tq,sMo),e(D1,lMo),e(De,iMo),e(De,G1),e(G1,dMo),e(G1,fse),e(fse,cMo),e(G1,fMo),e(G1,mse),e(mse,mMo),e(De,gMo),e(De,gse),e(gse,hMo),e(De,pMo),g(k3,De,null),b(c,IRe,u),b(c,id,u),e(id,O1),e(O1,hse),g(S3,hse,null),e(id,_Mo),e(id,pse),e(pse,uMo),b(c,qRe,u),b(c,er,u),g(R3,er,null),e(er,bMo),e(er,dd),e(dd,FMo),e(dd,aq),e(aq,vMo),e(dd,TMo),e(dd,nq),e(nq,MMo),e(dd,EMo),e(er,CMo),e(er,B3),e(B3,wMo),e(B3,_se),e(_se,AMo),e(B3,yMo),e(er,LMo),e(er,Hr),g(P3,Hr,null),e(Hr,xMo),e(Hr,use),e(use,kMo),e(Hr,SMo),e(Hr,cd),e(cd,RMo),e(cd,bse),e(bse,BMo),e(cd,PMo),e(cd,sq),e(sq,$Mo),e(cd,IMo),e(Hr,qMo),e(Hr,Fse),e(Fse,NMo),e(Hr,jMo),g($3,Hr,null),e(er,DMo),e(er,Ge),g(I3,Ge,null),e(Ge,GMo),e(Ge,vse),e(vse,OMo),e(Ge,VMo),e(Ge,Ha),e(Ha,XMo),e(Ha,Tse),e(Tse,zMo),e(Ha,QMo),e(Ha,Mse),e(Mse,WMo),e(Ha,HMo),e(Ha,Ese),e(Ese,UMo),e(Ha,JMo),e(Ge,YMo),e(Ge,ne),e(ne,V1),e(V1,Cse),e(Cse,KMo),e(V1,ZMo),e(V1,lq),e(lq,e4o),e(V1,o4o),e(ne,r4o),e(ne,X1),e(X1,wse),e(wse,t4o),e(X1,a4o),e(X1,iq),e(iq,n4o),e(X1,s4o),e(ne,l4o),e(ne,z1),e(z1,Ase),e(Ase,i4o),e(z1,d4o),e(z1,dq),e(dq,c4o),e(z1,f4o),e(ne,m4o),e(ne,Q1),e(Q1,yse),e(yse,g4o),e(Q1,h4o),e(Q1,cq),e(cq,p4o),e(Q1,_4o),e(ne,u4o),e(ne,W1),e(W1,Lse),e(Lse,b4o),e(W1,F4o),e(W1,fq),e(fq,v4o),e(W1,T4o),e(ne,M4o),e(ne,H1),e(H1,xse),e(xse,E4o),e(H1,C4o),e(H1,mq),e(mq,w4o),e(H1,A4o),e(ne,y4o),e(ne,U1),e(U1,kse),e(kse,L4o),e(U1,x4o),e(U1,gq),e(gq,k4o),e(U1,S4o),e(ne,R4o),e(ne,J1),e(J1,Sse),e(Sse,B4o),e(J1,P4o),e(J1,hq),e(hq,$4o),e(J1,I4o),e(ne,q4o),e(ne,Y1),e(Y1,Rse),e(Rse,N4o),e(Y1,j4o),e(Y1,pq),e(pq,D4o),e(Y1,G4o),e(ne,O4o),e(ne,K1),e(K1,Bse),e(Bse,V4o),e(K1,X4o),e(K1,_q),e(_q,z4o),e(K1,Q4o),e(ne,W4o),e(ne,Z1),e(Z1,Pse),e(Pse,H4o),e(Z1,U4o),e(Z1,uq),e(uq,J4o),e(Z1,Y4o),e(ne,K4o),e(ne,e8),e(e8,$se),e($se,Z4o),e(e8,eEo),e(e8,bq),e(bq,oEo),e(e8,rEo),e(ne,tEo),e(ne,o8),e(o8,Ise),e(Ise,aEo),e(o8,nEo),e(o8,Fq),e(Fq,sEo),e(o8,lEo),e(ne,iEo),e(ne,r8),e(r8,qse),e(qse,dEo),e(r8,cEo),e(r8,vq),e(vq,fEo),e(r8,mEo),e(ne,gEo),e(ne,t8),e(t8,Nse),e(Nse,hEo),e(t8,pEo),e(t8,Tq),e(Tq,_Eo),e(t8,uEo),e(ne,bEo),e(ne,a8),e(a8,jse),e(jse,FEo),e(a8,vEo),e(a8,Mq),e(Mq,TEo),e(a8,MEo),e(ne,EEo),e(ne,n8),e(n8,Dse),e(Dse,CEo),e(n8,wEo),e(n8,Eq),e(Eq,AEo),e(n8,yEo),e(Ge,LEo),e(Ge,s8),e(s8,xEo),e(s8,Gse),e(Gse,kEo),e(s8,SEo),e(s8,Ose),e(Ose,REo),e(Ge,BEo),e(Ge,Vse),e(Vse,PEo),e(Ge,$Eo),g(q3,Ge,null),b(c,NRe,u),b(c,fd,u),e(fd,l8),e(l8,Xse),g(N3,Xse,null),e(fd,IEo),e(fd,zse),e(zse,qEo),b(c,jRe,u),b(c,or,u),g(j3,or,null),e(or,NEo),e(or,md),e(md,jEo),e(md,Cq),e(Cq,DEo),e(md,GEo),e(md,wq),e(wq,OEo),e(md,VEo),e(or,XEo),e(or,D3),e(D3,zEo),e(D3,Qse),e(Qse,QEo),e(D3,WEo),e(or,HEo),e(or,Ur),g(G3,Ur,null),e(Ur,UEo),e(Ur,Wse),e(Wse,JEo),e(Ur,YEo),e(Ur,gd),e(gd,KEo),e(gd,Hse),e(Hse,ZEo),e(gd,e5o),e(gd,Aq),e(Aq,o5o),e(gd,r5o),e(Ur,t5o),e(Ur,Use),e(Use,a5o),e(Ur,n5o),g(O3,Ur,null),e(or,s5o),e(or,Oe),g(V3,Oe,null),e(Oe,l5o),e(Oe,Jse),e(Jse,i5o),e(Oe,d5o),e(Oe,Ua),e(Ua,c5o),e(Ua,Yse),e(Yse,f5o),e(Ua,m5o),e(Ua,Kse),e(Kse,g5o),e(Ua,h5o),e(Ua,Zse),e(Zse,p5o),e(Ua,_5o),e(Oe,u5o),e(Oe,y),e(y,i8),e(i8,ele),e(ele,b5o),e(i8,F5o),e(i8,yq),e(yq,v5o),e(i8,T5o),e(y,M5o),e(y,d8),e(d8,ole),e(ole,E5o),e(d8,C5o),e(d8,Lq),e(Lq,w5o),e(d8,A5o),e(y,y5o),e(y,c8),e(c8,rle),e(rle,L5o),e(c8,x5o),e(c8,xq),e(xq,k5o),e(c8,S5o),e(y,R5o),e(y,f8),e(f8,tle),e(tle,B5o),e(f8,P5o),e(f8,kq),e(kq,$5o),e(f8,I5o),e(y,q5o),e(y,m8),e(m8,ale),e(ale,N5o),e(m8,j5o),e(m8,Sq),e(Sq,D5o),e(m8,G5o),e(y,O5o),e(y,g8),e(g8,nle),e(nle,V5o),e(g8,X5o),e(g8,Rq),e(Rq,z5o),e(g8,Q5o),e(y,W5o),e(y,h8),e(h8,sle),e(sle,H5o),e(h8,U5o),e(h8,Bq),e(Bq,J5o),e(h8,Y5o),e(y,K5o),e(y,p8),e(p8,lle),e(lle,Z5o),e(p8,e3o),e(p8,Pq),e(Pq,o3o),e(p8,r3o),e(y,t3o),e(y,_8),e(_8,ile),e(ile,a3o),e(_8,n3o),e(_8,$q),e($q,s3o),e(_8,l3o),e(y,i3o),e(y,u8),e(u8,dle),e(dle,d3o),e(u8,c3o),e(u8,Iq),e(Iq,f3o),e(u8,m3o),e(y,g3o),e(y,b8),e(b8,cle),e(cle,h3o),e(b8,p3o),e(b8,qq),e(qq,_3o),e(b8,u3o),e(y,b3o),e(y,F8),e(F8,fle),e(fle,F3o),e(F8,v3o),e(F8,Nq),e(Nq,T3o),e(F8,M3o),e(y,E3o),e(y,v8),e(v8,mle),e(mle,C3o),e(v8,w3o),e(v8,jq),e(jq,A3o),e(v8,y3o),e(y,L3o),e(y,T8),e(T8,gle),e(gle,x3o),e(T8,k3o),e(T8,Dq),e(Dq,S3o),e(T8,R3o),e(y,B3o),e(y,M8),e(M8,hle),e(hle,P3o),e(M8,$3o),e(M8,Gq),e(Gq,I3o),e(M8,q3o),e(y,N3o),e(y,E8),e(E8,ple),e(ple,j3o),e(E8,D3o),e(E8,Oq),e(Oq,G3o),e(E8,O3o),e(y,V3o),e(y,C8),e(C8,_le),e(_le,X3o),e(C8,z3o),e(C8,Vq),e(Vq,Q3o),e(C8,W3o),e(y,H3o),e(y,w8),e(w8,ule),e(ule,U3o),e(w8,J3o),e(w8,Xq),e(Xq,Y3o),e(w8,K3o),e(y,Z3o),e(y,A8),e(A8,ble),e(ble,eCo),e(A8,oCo),e(A8,zq),e(zq,rCo),e(A8,tCo),e(y,aCo),e(y,y8),e(y8,Fle),e(Fle,nCo),e(y8,sCo),e(y8,Qq),e(Qq,lCo),e(y8,iCo),e(y,dCo),e(y,L8),e(L8,vle),e(vle,cCo),e(L8,fCo),e(L8,Wq),e(Wq,mCo),e(L8,gCo),e(y,hCo),e(y,x8),e(x8,Tle),e(Tle,pCo),e(x8,_Co),e(x8,Hq),e(Hq,uCo),e(x8,bCo),e(y,FCo),e(y,k8),e(k8,Mle),e(Mle,vCo),e(k8,TCo),e(k8,Uq),e(Uq,MCo),e(k8,ECo),e(y,CCo),e(y,S8),e(S8,Ele),e(Ele,wCo),e(S8,ACo),e(S8,Jq),e(Jq,yCo),e(S8,LCo),e(y,xCo),e(y,R8),e(R8,Cle),e(Cle,kCo),e(R8,SCo),e(R8,Yq),e(Yq,RCo),e(R8,BCo),e(y,PCo),e(y,B8),e(B8,wle),e(wle,$Co),e(B8,ICo),e(B8,Kq),e(Kq,qCo),e(B8,NCo),e(y,jCo),e(y,P8),e(P8,Ale),e(Ale,DCo),e(P8,GCo),e(P8,Zq),e(Zq,OCo),e(P8,VCo),e(y,XCo),e(y,$8),e($8,yle),e(yle,zCo),e($8,QCo),e($8,eN),e(eN,WCo),e($8,HCo),e(y,UCo),e(y,I8),e(I8,Lle),e(Lle,JCo),e(I8,YCo),e(I8,oN),e(oN,KCo),e(I8,ZCo),e(y,ewo),e(y,q8),e(q8,xle),e(xle,owo),e(q8,rwo),e(q8,rN),e(rN,two),e(q8,awo),e(y,nwo),e(y,N8),e(N8,kle),e(kle,swo),e(N8,lwo),e(N8,tN),e(tN,iwo),e(N8,dwo),e(y,cwo),e(y,j8),e(j8,Sle),e(Sle,fwo),e(j8,mwo),e(j8,aN),e(aN,gwo),e(j8,hwo),e(y,pwo),e(y,D8),e(D8,Rle),e(Rle,_wo),e(D8,uwo),e(D8,nN),e(nN,bwo),e(D8,Fwo),e(y,vwo),e(y,G8),e(G8,Ble),e(Ble,Two),e(G8,Mwo),e(G8,sN),e(sN,Ewo),e(G8,Cwo),e(y,wwo),e(y,O8),e(O8,Ple),e(Ple,Awo),e(O8,ywo),e(O8,lN),e(lN,Lwo),e(O8,xwo),e(y,kwo),e(y,V8),e(V8,$le),e($le,Swo),e(V8,Rwo),e(V8,iN),e(iN,Bwo),e(V8,Pwo),e(y,$wo),e(y,X8),e(X8,Ile),e(Ile,Iwo),e(X8,qwo),e(X8,dN),e(dN,Nwo),e(X8,jwo),e(y,Dwo),e(y,z8),e(z8,qle),e(qle,Gwo),e(z8,Owo),e(z8,cN),e(cN,Vwo),e(z8,Xwo),e(y,zwo),e(y,Q8),e(Q8,Nle),e(Nle,Qwo),e(Q8,Wwo),e(Q8,fN),e(fN,Hwo),e(Q8,Uwo),e(y,Jwo),e(y,W8),e(W8,jle),e(jle,Ywo),e(W8,Kwo),e(W8,mN),e(mN,Zwo),e(W8,eAo),e(y,oAo),e(y,H8),e(H8,Dle),e(Dle,rAo),e(H8,tAo),e(H8,gN),e(gN,aAo),e(H8,nAo),e(y,sAo),e(y,U8),e(U8,Gle),e(Gle,lAo),e(U8,iAo),e(U8,hN),e(hN,dAo),e(U8,cAo),e(y,fAo),e(y,J8),e(J8,Ole),e(Ole,mAo),e(J8,gAo),e(J8,pN),e(pN,hAo),e(J8,pAo),e(y,_Ao),e(y,Y8),e(Y8,Vle),e(Vle,uAo),e(Y8,bAo),e(Y8,_N),e(_N,FAo),e(Y8,vAo),e(y,TAo),e(y,K8),e(K8,Xle),e(Xle,MAo),e(K8,EAo),e(K8,uN),e(uN,CAo),e(K8,wAo),e(y,AAo),e(y,Z8),e(Z8,zle),e(zle,yAo),e(Z8,LAo),e(Z8,bN),e(bN,xAo),e(Z8,kAo),e(y,SAo),e(y,eb),e(eb,Qle),e(Qle,RAo),e(eb,BAo),e(eb,FN),e(FN,PAo),e(eb,$Ao),e(Oe,IAo),e(Oe,ob),e(ob,qAo),e(ob,Wle),e(Wle,NAo),e(ob,jAo),e(ob,Hle),e(Hle,DAo),e(Oe,GAo),e(Oe,Ule),e(Ule,OAo),e(Oe,VAo),g(X3,Oe,null),b(c,DRe,u),b(c,hd,u),e(hd,rb),e(rb,Jle),g(z3,Jle,null),e(hd,XAo),e(hd,Yle),e(Yle,zAo),b(c,GRe,u),b(c,rr,u),g(Q3,rr,null),e(rr,QAo),e(rr,pd),e(pd,WAo),e(pd,vN),e(vN,HAo),e(pd,UAo),e(pd,TN),e(TN,JAo),e(pd,YAo),e(rr,KAo),e(rr,W3),e(W3,ZAo),e(W3,Kle),e(Kle,eyo),e(W3,oyo),e(rr,ryo),e(rr,Jr),g(H3,Jr,null),e(Jr,tyo),e(Jr,Zle),e(Zle,ayo),e(Jr,nyo),e(Jr,_d),e(_d,syo),e(_d,eie),e(eie,lyo),e(_d,iyo),e(_d,MN),e(MN,dyo),e(_d,cyo),e(Jr,fyo),e(Jr,oie),e(oie,myo),e(Jr,gyo),g(U3,Jr,null),e(rr,hyo),e(rr,Ve),g(J3,Ve,null),e(Ve,pyo),e(Ve,rie),e(rie,_yo),e(Ve,uyo),e(Ve,Ja),e(Ja,byo),e(Ja,tie),e(tie,Fyo),e(Ja,vyo),e(Ja,aie),e(aie,Tyo),e(Ja,Myo),e(Ja,nie),e(nie,Eyo),e(Ja,Cyo),e(Ve,wyo),e(Ve,G),e(G,tb),e(tb,sie),e(sie,Ayo),e(tb,yyo),e(tb,EN),e(EN,Lyo),e(tb,xyo),e(G,kyo),e(G,ab),e(ab,lie),e(lie,Syo),e(ab,Ryo),e(ab,CN),e(CN,Byo),e(ab,Pyo),e(G,$yo),e(G,nb),e(nb,iie),e(iie,Iyo),e(nb,qyo),e(nb,wN),e(wN,Nyo),e(nb,jyo),e(G,Dyo),e(G,sb),e(sb,die),e(die,Gyo),e(sb,Oyo),e(sb,AN),e(AN,Vyo),e(sb,Xyo),e(G,zyo),e(G,lb),e(lb,cie),e(cie,Qyo),e(lb,Wyo),e(lb,yN),e(yN,Hyo),e(lb,Uyo),e(G,Jyo),e(G,ib),e(ib,fie),e(fie,Yyo),e(ib,Kyo),e(ib,LN),e(LN,Zyo),e(ib,eLo),e(G,oLo),e(G,db),e(db,mie),e(mie,rLo),e(db,tLo),e(db,xN),e(xN,aLo),e(db,nLo),e(G,sLo),e(G,cb),e(cb,gie),e(gie,lLo),e(cb,iLo),e(cb,kN),e(kN,dLo),e(cb,cLo),e(G,fLo),e(G,fb),e(fb,hie),e(hie,mLo),e(fb,gLo),e(fb,SN),e(SN,hLo),e(fb,pLo),e(G,_Lo),e(G,mb),e(mb,pie),e(pie,uLo),e(mb,bLo),e(mb,RN),e(RN,FLo),e(mb,vLo),e(G,TLo),e(G,gb),e(gb,_ie),e(_ie,MLo),e(gb,ELo),e(gb,BN),e(BN,CLo),e(gb,wLo),e(G,ALo),e(G,hb),e(hb,uie),e(uie,yLo),e(hb,LLo),e(hb,PN),e(PN,xLo),e(hb,kLo),e(G,SLo),e(G,pb),e(pb,bie),e(bie,RLo),e(pb,BLo),e(pb,$N),e($N,PLo),e(pb,$Lo),e(G,ILo),e(G,_b),e(_b,Fie),e(Fie,qLo),e(_b,NLo),e(_b,IN),e(IN,jLo),e(_b,DLo),e(G,GLo),e(G,ub),e(ub,vie),e(vie,OLo),e(ub,VLo),e(ub,qN),e(qN,XLo),e(ub,zLo),e(G,QLo),e(G,bb),e(bb,Tie),e(Tie,WLo),e(bb,HLo),e(bb,NN),e(NN,ULo),e(bb,JLo),e(G,YLo),e(G,Fb),e(Fb,Mie),e(Mie,KLo),e(Fb,ZLo),e(Fb,jN),e(jN,e7o),e(Fb,o7o),e(G,r7o),e(G,vb),e(vb,Eie),e(Eie,t7o),e(vb,a7o),e(vb,DN),e(DN,n7o),e(vb,s7o),e(G,l7o),e(G,Tb),e(Tb,Cie),e(Cie,i7o),e(Tb,d7o),e(Tb,GN),e(GN,c7o),e(Tb,f7o),e(G,m7o),e(G,Mb),e(Mb,wie),e(wie,g7o),e(Mb,h7o),e(Mb,ON),e(ON,p7o),e(Mb,_7o),e(G,u7o),e(G,Eb),e(Eb,Aie),e(Aie,b7o),e(Eb,F7o),e(Eb,VN),e(VN,v7o),e(Eb,T7o),e(G,M7o),e(G,Cb),e(Cb,yie),e(yie,E7o),e(Cb,C7o),e(Cb,XN),e(XN,w7o),e(Cb,A7o),e(G,y7o),e(G,wb),e(wb,Lie),e(Lie,L7o),e(wb,x7o),e(wb,zN),e(zN,k7o),e(wb,S7o),e(G,R7o),e(G,Ab),e(Ab,xie),e(xie,B7o),e(Ab,P7o),e(Ab,QN),e(QN,$7o),e(Ab,I7o),e(G,q7o),e(G,yb),e(yb,kie),e(kie,N7o),e(yb,j7o),e(yb,WN),e(WN,D7o),e(yb,G7o),e(G,O7o),e(G,Lb),e(Lb,Sie),e(Sie,V7o),e(Lb,X7o),e(Lb,HN),e(HN,z7o),e(Lb,Q7o),e(G,W7o),e(G,xb),e(xb,Rie),e(Rie,H7o),e(xb,U7o),e(xb,UN),e(UN,J7o),e(xb,Y7o),e(G,K7o),e(G,kb),e(kb,Bie),e(Bie,Z7o),e(kb,exo),e(kb,JN),e(JN,oxo),e(kb,rxo),e(Ve,txo),e(Ve,Sb),e(Sb,axo),e(Sb,Pie),e(Pie,nxo),e(Sb,sxo),e(Sb,$ie),e($ie,lxo),e(Ve,ixo),e(Ve,Iie),e(Iie,dxo),e(Ve,cxo),g(Y3,Ve,null),b(c,ORe,u),b(c,ud,u),e(ud,Rb),e(Rb,qie),g(K3,qie,null),e(ud,fxo),e(ud,Nie),e(Nie,mxo),b(c,VRe,u),b(c,tr,u),g(Z3,tr,null),e(tr,gxo),e(tr,bd),e(bd,hxo),e(bd,YN),e(YN,pxo),e(bd,_xo),e(bd,KN),e(KN,uxo),e(bd,bxo),e(tr,Fxo),e(tr,eC),e(eC,vxo),e(eC,jie),e(jie,Txo),e(eC,Mxo),e(tr,Exo),e(tr,Yr),g(oC,Yr,null),e(Yr,Cxo),e(Yr,Die),e(Die,wxo),e(Yr,Axo),e(Yr,Fd),e(Fd,yxo),e(Fd,Gie),e(Gie,Lxo),e(Fd,xxo),e(Fd,ZN),e(ZN,kxo),e(Fd,Sxo),e(Yr,Rxo),e(Yr,Oie),e(Oie,Bxo),e(Yr,Pxo),g(rC,Yr,null),e(tr,$xo),e(tr,Xe),g(tC,Xe,null),e(Xe,Ixo),e(Xe,Vie),e(Vie,qxo),e(Xe,Nxo),e(Xe,Ya),e(Ya,jxo),e(Ya,Xie),e(Xie,Dxo),e(Ya,Gxo),e(Ya,zie),e(zie,Oxo),e(Ya,Vxo),e(Ya,Qie),e(Qie,Xxo),e(Ya,zxo),e(Xe,Qxo),e(Xe,da),e(da,Bb),e(Bb,Wie),e(Wie,Wxo),e(Bb,Hxo),e(Bb,ej),e(ej,Uxo),e(Bb,Jxo),e(da,Yxo),e(da,Pb),e(Pb,Hie),e(Hie,Kxo),e(Pb,Zxo),e(Pb,oj),e(oj,e9o),e(Pb,o9o),e(da,r9o),e(da,$b),e($b,Uie),e(Uie,t9o),e($b,a9o),e($b,rj),e(rj,n9o),e($b,s9o),e(da,l9o),e(da,Ib),e(Ib,Jie),e(Jie,i9o),e(Ib,d9o),e(Ib,tj),e(tj,c9o),e(Ib,f9o),e(da,m9o),e(da,qb),e(qb,Yie),e(Yie,g9o),e(qb,h9o),e(qb,aj),e(aj,p9o),e(qb,_9o),e(Xe,u9o),e(Xe,Nb),e(Nb,b9o),e(Nb,Kie),e(Kie,F9o),e(Nb,v9o),e(Nb,Zie),e(Zie,T9o),e(Xe,M9o),e(Xe,ede),e(ede,E9o),e(Xe,C9o),g(aC,Xe,null),b(c,XRe,u),b(c,vd,u),e(vd,jb),e(jb,ode),g(nC,ode,null),e(vd,w9o),e(vd,rde),e(rde,A9o),b(c,zRe,u),b(c,ar,u),g(sC,ar,null),e(ar,y9o),e(ar,Td),e(Td,L9o),e(Td,nj),e(nj,x9o),e(Td,k9o),e(Td,sj),e(sj,S9o),e(Td,R9o),e(ar,B9o),e(ar,lC),e(lC,P9o),e(lC,tde),e(tde,$9o),e(lC,I9o),e(ar,q9o),e(ar,Kr),g(iC,Kr,null),e(Kr,N9o),e(Kr,ade),e(ade,j9o),e(Kr,D9o),e(Kr,Md),e(Md,G9o),e(Md,nde),e(nde,O9o),e(Md,V9o),e(Md,lj),e(lj,X9o),e(Md,z9o),e(Kr,Q9o),e(Kr,sde),e(sde,W9o),e(Kr,H9o),g(dC,Kr,null),e(ar,U9o),e(ar,ze),g(cC,ze,null),e(ze,J9o),e(ze,lde),e(lde,Y9o),e(ze,K9o),e(ze,Ka),e(Ka,Z9o),e(Ka,ide),e(ide,eko),e(Ka,oko),e(Ka,dde),e(dde,rko),e(Ka,tko),e(Ka,cde),e(cde,ako),e(Ka,nko),e(ze,sko),e(ze,j),e(j,Db),e(Db,fde),e(fde,lko),e(Db,iko),e(Db,ij),e(ij,dko),e(Db,cko),e(j,fko),e(j,Gb),e(Gb,mde),e(mde,mko),e(Gb,gko),e(Gb,dj),e(dj,hko),e(Gb,pko),e(j,_ko),e(j,Ob),e(Ob,gde),e(gde,uko),e(Ob,bko),e(Ob,cj),e(cj,Fko),e(Ob,vko),e(j,Tko),e(j,Vb),e(Vb,hde),e(hde,Mko),e(Vb,Eko),e(Vb,fj),e(fj,Cko),e(Vb,wko),e(j,Ako),e(j,Xb),e(Xb,pde),e(pde,yko),e(Xb,Lko),e(Xb,mj),e(mj,xko),e(Xb,kko),e(j,Sko),e(j,zb),e(zb,_de),e(_de,Rko),e(zb,Bko),e(zb,gj),e(gj,Pko),e(zb,$ko),e(j,Iko),e(j,Qb),e(Qb,ude),e(ude,qko),e(Qb,Nko),e(Qb,hj),e(hj,jko),e(Qb,Dko),e(j,Gko),e(j,Wb),e(Wb,bde),e(bde,Oko),e(Wb,Vko),e(Wb,pj),e(pj,Xko),e(Wb,zko),e(j,Qko),e(j,Hb),e(Hb,Fde),e(Fde,Wko),e(Hb,Hko),e(Hb,_j),e(_j,Uko),e(Hb,Jko),e(j,Yko),e(j,Ub),e(Ub,vde),e(vde,Kko),e(Ub,Zko),e(Ub,uj),e(uj,eSo),e(Ub,oSo),e(j,rSo),e(j,Jb),e(Jb,Tde),e(Tde,tSo),e(Jb,aSo),e(Jb,bj),e(bj,nSo),e(Jb,sSo),e(j,lSo),e(j,Yb),e(Yb,Mde),e(Mde,iSo),e(Yb,dSo),e(Yb,Fj),e(Fj,cSo),e(Yb,fSo),e(j,mSo),e(j,Kb),e(Kb,Ede),e(Ede,gSo),e(Kb,hSo),e(Kb,vj),e(vj,pSo),e(Kb,_So),e(j,uSo),e(j,Zb),e(Zb,Cde),e(Cde,bSo),e(Zb,FSo),e(Zb,Tj),e(Tj,vSo),e(Zb,TSo),e(j,MSo),e(j,e2),e(e2,wde),e(wde,ESo),e(e2,CSo),e(e2,Mj),e(Mj,wSo),e(e2,ASo),e(j,ySo),e(j,o2),e(o2,Ade),e(Ade,LSo),e(o2,xSo),e(o2,Ej),e(Ej,kSo),e(o2,SSo),e(j,RSo),e(j,r2),e(r2,yde),e(yde,BSo),e(r2,PSo),e(r2,Cj),e(Cj,$So),e(r2,ISo),e(j,qSo),e(j,t2),e(t2,Lde),e(Lde,NSo),e(t2,jSo),e(t2,wj),e(wj,DSo),e(t2,GSo),e(j,OSo),e(j,a2),e(a2,xde),e(xde,VSo),e(a2,XSo),e(a2,Aj),e(Aj,zSo),e(a2,QSo),e(j,WSo),e(j,n2),e(n2,kde),e(kde,HSo),e(n2,USo),e(n2,yj),e(yj,JSo),e(n2,YSo),e(j,KSo),e(j,s2),e(s2,Sde),e(Sde,ZSo),e(s2,eRo),e(s2,Lj),e(Lj,oRo),e(s2,rRo),e(j,tRo),e(j,l2),e(l2,Rde),e(Rde,aRo),e(l2,nRo),e(l2,xj),e(xj,sRo),e(l2,lRo),e(j,iRo),e(j,i2),e(i2,Bde),e(Bde,dRo),e(i2,cRo),e(i2,kj),e(kj,fRo),e(i2,mRo),e(j,gRo),e(j,d2),e(d2,Pde),e(Pde,hRo),e(d2,pRo),e(d2,Sj),e(Sj,_Ro),e(d2,uRo),e(j,bRo),e(j,c2),e(c2,$de),e($de,FRo),e(c2,vRo),e(c2,Rj),e(Rj,TRo),e(c2,MRo),e(j,ERo),e(j,f2),e(f2,Ide),e(Ide,CRo),e(f2,wRo),e(f2,Bj),e(Bj,ARo),e(f2,yRo),e(j,LRo),e(j,m2),e(m2,qde),e(qde,xRo),e(m2,kRo),e(m2,Pj),e(Pj,SRo),e(m2,RRo),e(j,BRo),e(j,g2),e(g2,Nde),e(Nde,PRo),e(g2,$Ro),e(g2,$j),e($j,IRo),e(g2,qRo),e(j,NRo),e(j,h2),e(h2,jde),e(jde,jRo),e(h2,DRo),e(h2,Ij),e(Ij,GRo),e(h2,ORo),e(j,VRo),e(j,p2),e(p2,Dde),e(Dde,XRo),e(p2,zRo),e(p2,qj),e(qj,QRo),e(p2,WRo),e(j,HRo),e(j,_2),e(_2,Gde),e(Gde,URo),e(_2,JRo),e(_2,Nj),e(Nj,YRo),e(_2,KRo),e(j,ZRo),e(j,u2),e(u2,Ode),e(Ode,eBo),e(u2,oBo),e(u2,jj),e(jj,rBo),e(u2,tBo),e(j,aBo),e(j,b2),e(b2,Vde),e(Vde,nBo),e(b2,sBo),e(b2,Dj),e(Dj,lBo),e(b2,iBo),e(ze,dBo),e(ze,F2),e(F2,cBo),e(F2,Xde),e(Xde,fBo),e(F2,mBo),e(F2,zde),e(zde,gBo),e(ze,hBo),e(ze,Qde),e(Qde,pBo),e(ze,_Bo),g(fC,ze,null),b(c,QRe,u),b(c,Ed,u),e(Ed,v2),e(v2,Wde),g(mC,Wde,null),e(Ed,uBo),e(Ed,Hde),e(Hde,bBo),b(c,WRe,u),b(c,nr,u),g(gC,nr,null),e(nr,FBo),e(nr,Cd),e(Cd,vBo),e(Cd,Gj),e(Gj,TBo),e(Cd,MBo),e(Cd,Oj),e(Oj,EBo),e(Cd,CBo),e(nr,wBo),e(nr,hC),e(hC,ABo),e(hC,Ude),e(Ude,yBo),e(hC,LBo),e(nr,xBo),e(nr,Zr),g(pC,Zr,null),e(Zr,kBo),e(Zr,Jde),e(Jde,SBo),e(Zr,RBo),e(Zr,wd),e(wd,BBo),e(wd,Yde),e(Yde,PBo),e(wd,$Bo),e(wd,Vj),e(Vj,IBo),e(wd,qBo),e(Zr,NBo),e(Zr,Kde),e(Kde,jBo),e(Zr,DBo),g(_C,Zr,null),e(nr,GBo),e(nr,Qe),g(uC,Qe,null),e(Qe,OBo),e(Qe,Zde),e(Zde,VBo),e(Qe,XBo),e(Qe,Za),e(Za,zBo),e(Za,ece),e(ece,QBo),e(Za,WBo),e(Za,oce),e(oce,HBo),e(Za,UBo),e(Za,rce),e(rce,JBo),e(Za,YBo),e(Qe,KBo),e(Qe,R),e(R,T2),e(T2,tce),e(tce,ZBo),e(T2,ePo),e(T2,Xj),e(Xj,oPo),e(T2,rPo),e(R,tPo),e(R,M2),e(M2,ace),e(ace,aPo),e(M2,nPo),e(M2,zj),e(zj,sPo),e(M2,lPo),e(R,iPo),e(R,E2),e(E2,nce),e(nce,dPo),e(E2,cPo),e(E2,Qj),e(Qj,fPo),e(E2,mPo),e(R,gPo),e(R,C2),e(C2,sce),e(sce,hPo),e(C2,pPo),e(C2,Wj),e(Wj,_Po),e(C2,uPo),e(R,bPo),e(R,w2),e(w2,lce),e(lce,FPo),e(w2,vPo),e(w2,Hj),e(Hj,TPo),e(w2,MPo),e(R,EPo),e(R,A2),e(A2,ice),e(ice,CPo),e(A2,wPo),e(A2,Uj),e(Uj,APo),e(A2,yPo),e(R,LPo),e(R,y2),e(y2,dce),e(dce,xPo),e(y2,kPo),e(y2,Jj),e(Jj,SPo),e(y2,RPo),e(R,BPo),e(R,L2),e(L2,cce),e(cce,PPo),e(L2,$Po),e(L2,Yj),e(Yj,IPo),e(L2,qPo),e(R,NPo),e(R,x2),e(x2,fce),e(fce,jPo),e(x2,DPo),e(x2,Kj),e(Kj,GPo),e(x2,OPo),e(R,VPo),e(R,k2),e(k2,mce),e(mce,XPo),e(k2,zPo),e(k2,Zj),e(Zj,QPo),e(k2,WPo),e(R,HPo),e(R,S2),e(S2,gce),e(gce,UPo),e(S2,JPo),e(S2,eD),e(eD,YPo),e(S2,KPo),e(R,ZPo),e(R,R2),e(R2,hce),e(hce,e$o),e(R2,o$o),e(R2,oD),e(oD,r$o),e(R2,t$o),e(R,a$o),e(R,B2),e(B2,pce),e(pce,n$o),e(B2,s$o),e(B2,rD),e(rD,l$o),e(B2,i$o),e(R,d$o),e(R,P2),e(P2,_ce),e(_ce,c$o),e(P2,f$o),e(P2,tD),e(tD,m$o),e(P2,g$o),e(R,h$o),e(R,$2),e($2,uce),e(uce,p$o),e($2,_$o),e($2,aD),e(aD,u$o),e($2,b$o),e(R,F$o),e(R,I2),e(I2,bce),e(bce,v$o),e(I2,T$o),e(I2,nD),e(nD,M$o),e(I2,E$o),e(R,C$o),e(R,q2),e(q2,Fce),e(Fce,w$o),e(q2,A$o),e(q2,sD),e(sD,y$o),e(q2,L$o),e(R,x$o),e(R,N2),e(N2,vce),e(vce,k$o),e(N2,S$o),e(N2,lD),e(lD,R$o),e(N2,B$o),e(R,P$o),e(R,j2),e(j2,Tce),e(Tce,$$o),e(j2,I$o),e(j2,iD),e(iD,q$o),e(j2,N$o),e(R,j$o),e(R,D2),e(D2,Mce),e(Mce,D$o),e(D2,G$o),e(D2,dD),e(dD,O$o),e(D2,V$o),e(R,X$o),e(R,G2),e(G2,Ece),e(Ece,z$o),e(G2,Q$o),e(G2,cD),e(cD,W$o),e(G2,H$o),e(R,U$o),e(R,O2),e(O2,Cce),e(Cce,J$o),e(O2,Y$o),e(O2,fD),e(fD,K$o),e(O2,Z$o),e(R,eIo),e(R,V2),e(V2,wce),e(wce,oIo),e(V2,rIo),e(V2,mD),e(mD,tIo),e(V2,aIo),e(R,nIo),e(R,X2),e(X2,Ace),e(Ace,sIo),e(X2,lIo),e(X2,gD),e(gD,iIo),e(X2,dIo),e(R,cIo),e(R,z2),e(z2,yce),e(yce,fIo),e(z2,mIo),e(z2,hD),e(hD,gIo),e(z2,hIo),e(R,pIo),e(R,Q2),e(Q2,Lce),e(Lce,_Io),e(Q2,uIo),e(Q2,pD),e(pD,bIo),e(Q2,FIo),e(R,vIo),e(R,W2),e(W2,xce),e(xce,TIo),e(W2,MIo),e(W2,_D),e(_D,EIo),e(W2,CIo),e(R,wIo),e(R,H2),e(H2,kce),e(kce,AIo),e(H2,yIo),e(H2,uD),e(uD,LIo),e(H2,xIo),e(R,kIo),e(R,U2),e(U2,Sce),e(Sce,SIo),e(U2,RIo),e(U2,bD),e(bD,BIo),e(U2,PIo),e(R,$Io),e(R,J2),e(J2,Rce),e(Rce,IIo),e(J2,qIo),e(J2,FD),e(FD,NIo),e(J2,jIo),e(R,DIo),e(R,Y2),e(Y2,Bce),e(Bce,GIo),e(Y2,OIo),e(Y2,vD),e(vD,VIo),e(Y2,XIo),e(R,zIo),e(R,K2),e(K2,Pce),e(Pce,QIo),e(K2,WIo),e(K2,TD),e(TD,HIo),e(K2,UIo),e(R,JIo),e(R,Z2),e(Z2,$ce),e($ce,YIo),e(Z2,KIo),e(Z2,MD),e(MD,ZIo),e(Z2,eqo),e(R,oqo),e(R,e6),e(e6,Ice),e(Ice,rqo),e(e6,tqo),e(e6,ED),e(ED,aqo),e(e6,nqo),e(R,sqo),e(R,o6),e(o6,qce),e(qce,lqo),e(o6,iqo),e(o6,CD),e(CD,dqo),e(o6,cqo),e(R,fqo),e(R,r6),e(r6,Nce),e(Nce,mqo),e(r6,gqo),e(r6,wD),e(wD,hqo),e(r6,pqo),e(R,_qo),e(R,t6),e(t6,jce),e(jce,uqo),e(t6,bqo),e(t6,AD),e(AD,Fqo),e(t6,vqo),e(R,Tqo),e(R,a6),e(a6,Dce),e(Dce,Mqo),e(a6,Eqo),e(a6,yD),e(yD,Cqo),e(a6,wqo),e(R,Aqo),e(R,n6),e(n6,Gce),e(Gce,yqo),e(n6,Lqo),e(n6,LD),e(LD,xqo),e(n6,kqo),e(Qe,Sqo),e(Qe,s6),e(s6,Rqo),e(s6,Oce),e(Oce,Bqo),e(s6,Pqo),e(s6,Vce),e(Vce,$qo),e(Qe,Iqo),e(Qe,Xce),e(Xce,qqo),e(Qe,Nqo),g(bC,Qe,null),b(c,HRe,u),b(c,Ad,u),e(Ad,l6),e(l6,zce),g(FC,zce,null),e(Ad,jqo),e(Ad,Qce),e(Qce,Dqo),b(c,URe,u),b(c,sr,u),g(vC,sr,null),e(sr,Gqo),e(sr,yd),e(yd,Oqo),e(yd,xD),e(xD,Vqo),e(yd,Xqo),e(yd,kD),e(kD,zqo),e(yd,Qqo),e(sr,Wqo),e(sr,TC),e(TC,Hqo),e(TC,Wce),e(Wce,Uqo),e(TC,Jqo),e(sr,Yqo),e(sr,et),g(MC,et,null),e(et,Kqo),e(et,Hce),e(Hce,Zqo),e(et,eNo),e(et,Ld),e(Ld,oNo),e(Ld,Uce),e(Uce,rNo),e(Ld,tNo),e(Ld,SD),e(SD,aNo),e(Ld,nNo),e(et,sNo),e(et,Jce),e(Jce,lNo),e(et,iNo),g(EC,et,null),e(sr,dNo),e(sr,We),g(CC,We,null),e(We,cNo),e(We,Yce),e(Yce,fNo),e(We,mNo),e(We,en),e(en,gNo),e(en,Kce),e(Kce,hNo),e(en,pNo),e(en,Zce),e(Zce,_No),e(en,uNo),e(en,efe),e(efe,bNo),e(en,FNo),e(We,vNo),e(We,ofe),e(ofe,i6),e(i6,rfe),e(rfe,TNo),e(i6,MNo),e(i6,RD),e(RD,ENo),e(i6,CNo),e(We,wNo),e(We,d6),e(d6,ANo),e(d6,tfe),e(tfe,yNo),e(d6,LNo),e(d6,afe),e(afe,xNo),e(We,kNo),e(We,nfe),e(nfe,SNo),e(We,RNo),g(wC,We,null),b(c,JRe,u),b(c,xd,u),e(xd,c6),e(c6,sfe),g(AC,sfe,null),e(xd,BNo),e(xd,lfe),e(lfe,PNo),b(c,YRe,u),b(c,lr,u),g(yC,lr,null),e(lr,$No),e(lr,kd),e(kd,INo),e(kd,BD),e(BD,qNo),e(kd,NNo),e(kd,PD),e(PD,jNo),e(kd,DNo),e(lr,GNo),e(lr,LC),e(LC,ONo),e(LC,ife),e(ife,VNo),e(LC,XNo),e(lr,zNo),e(lr,ot),g(xC,ot,null),e(ot,QNo),e(ot,dfe),e(dfe,WNo),e(ot,HNo),e(ot,Sd),e(Sd,UNo),e(Sd,cfe),e(cfe,JNo),e(Sd,YNo),e(Sd,$D),e($D,KNo),e(Sd,ZNo),e(ot,ejo),e(ot,ffe),e(ffe,ojo),e(ot,rjo),g(kC,ot,null),e(lr,tjo),e(lr,He),g(SC,He,null),e(He,ajo),e(He,mfe),e(mfe,njo),e(He,sjo),e(He,on),e(on,ljo),e(on,gfe),e(gfe,ijo),e(on,djo),e(on,hfe),e(hfe,cjo),e(on,fjo),e(on,pfe),e(pfe,mjo),e(on,gjo),e(He,hjo),e(He,ce),e(ce,f6),e(f6,_fe),e(_fe,pjo),e(f6,_jo),e(f6,ID),e(ID,ujo),e(f6,bjo),e(ce,Fjo),e(ce,m6),e(m6,ufe),e(ufe,vjo),e(m6,Tjo),e(m6,qD),e(qD,Mjo),e(m6,Ejo),e(ce,Cjo),e(ce,Ds),e(Ds,bfe),e(bfe,wjo),e(Ds,Ajo),e(Ds,ND),e(ND,yjo),e(Ds,Ljo),e(Ds,jD),e(jD,xjo),e(Ds,kjo),e(ce,Sjo),e(ce,g6),e(g6,Ffe),e(Ffe,Rjo),e(g6,Bjo),e(g6,DD),e(DD,Pjo),e(g6,$jo),e(ce,Ijo),e(ce,ma),e(ma,vfe),e(vfe,qjo),e(ma,Njo),e(ma,GD),e(GD,jjo),e(ma,Djo),e(ma,OD),e(OD,Gjo),e(ma,Ojo),e(ma,VD),e(VD,Vjo),e(ma,Xjo),e(ce,zjo),e(ce,h6),e(h6,Tfe),e(Tfe,Qjo),e(h6,Wjo),e(h6,XD),e(XD,Hjo),e(h6,Ujo),e(ce,Jjo),e(ce,p6),e(p6,Mfe),e(Mfe,Yjo),e(p6,Kjo),e(p6,zD),e(zD,Zjo),e(p6,eDo),e(ce,oDo),e(ce,_6),e(_6,Efe),e(Efe,rDo),e(_6,tDo),e(_6,QD),e(QD,aDo),e(_6,nDo),e(ce,sDo),e(ce,u6),e(u6,Cfe),e(Cfe,lDo),e(u6,iDo),e(u6,WD),e(WD,dDo),e(u6,cDo),e(ce,fDo),e(ce,b6),e(b6,wfe),e(wfe,mDo),e(b6,gDo),e(b6,HD),e(HD,hDo),e(b6,pDo),e(ce,_Do),e(ce,F6),e(F6,Afe),e(Afe,uDo),e(F6,bDo),e(F6,UD),e(UD,FDo),e(F6,vDo),e(ce,TDo),e(ce,v6),e(v6,yfe),e(yfe,MDo),e(v6,EDo),e(v6,JD),e(JD,CDo),e(v6,wDo),e(He,ADo),e(He,T6),e(T6,yDo),e(T6,Lfe),e(Lfe,LDo),e(T6,xDo),e(T6,xfe),e(xfe,kDo),e(He,SDo),e(He,kfe),e(kfe,RDo),e(He,BDo),g(RC,He,null),b(c,KRe,u),b(c,Rd,u),e(Rd,M6),e(M6,Sfe),g(BC,Sfe,null),e(Rd,PDo),e(Rd,Rfe),e(Rfe,$Do),b(c,ZRe,u),b(c,ir,u),g(PC,ir,null),e(ir,IDo),e(ir,Bd),e(Bd,qDo),e(Bd,YD),e(YD,NDo),e(Bd,jDo),e(Bd,KD),e(KD,DDo),e(Bd,GDo),e(ir,ODo),e(ir,$C),e($C,VDo),e($C,Bfe),e(Bfe,XDo),e($C,zDo),e(ir,QDo),e(ir,rt),g(IC,rt,null),e(rt,WDo),e(rt,Pfe),e(Pfe,HDo),e(rt,UDo),e(rt,Pd),e(Pd,JDo),e(Pd,$fe),e($fe,YDo),e(Pd,KDo),e(Pd,ZD),e(ZD,ZDo),e(Pd,eGo),e(rt,oGo),e(rt,Ife),e(Ife,rGo),e(rt,tGo),g(qC,rt,null),e(ir,aGo),e(ir,Ue),g(NC,Ue,null),e(Ue,nGo),e(Ue,qfe),e(qfe,sGo),e(Ue,lGo),e(Ue,rn),e(rn,iGo),e(rn,Nfe),e(Nfe,dGo),e(rn,cGo),e(rn,jfe),e(jfe,fGo),e(rn,mGo),e(rn,Dfe),e(Dfe,gGo),e(rn,hGo),e(Ue,pGo),e(Ue,Gfe),e(Gfe,E6),e(E6,Ofe),e(Ofe,_Go),e(E6,uGo),e(E6,eG),e(eG,bGo),e(E6,FGo),e(Ue,vGo),e(Ue,C6),e(C6,TGo),e(C6,Vfe),e(Vfe,MGo),e(C6,EGo),e(C6,Xfe),e(Xfe,CGo),e(Ue,wGo),e(Ue,zfe),e(zfe,AGo),e(Ue,yGo),g(jC,Ue,null),b(c,eBe,u),b(c,$d,u),e($d,w6),e(w6,Qfe),g(DC,Qfe,null),e($d,LGo),e($d,Wfe),e(Wfe,xGo),b(c,oBe,u),b(c,dr,u),g(GC,dr,null),e(dr,kGo),e(dr,Id),e(Id,SGo),e(Id,oG),e(oG,RGo),e(Id,BGo),e(Id,rG),e(rG,PGo),e(Id,$Go),e(dr,IGo),e(dr,OC),e(OC,qGo),e(OC,Hfe),e(Hfe,NGo),e(OC,jGo),e(dr,DGo),e(dr,tt),g(VC,tt,null),e(tt,GGo),e(tt,Ufe),e(Ufe,OGo),e(tt,VGo),e(tt,qd),e(qd,XGo),e(qd,Jfe),e(Jfe,zGo),e(qd,QGo),e(qd,tG),e(tG,WGo),e(qd,HGo),e(tt,UGo),e(tt,Yfe),e(Yfe,JGo),e(tt,YGo),g(XC,tt,null),e(dr,KGo),e(dr,Je),g(zC,Je,null),e(Je,ZGo),e(Je,Kfe),e(Kfe,eOo),e(Je,oOo),e(Je,tn),e(tn,rOo),e(tn,Zfe),e(Zfe,tOo),e(tn,aOo),e(tn,eme),e(eme,nOo),e(tn,sOo),e(tn,ome),e(ome,lOo),e(tn,iOo),e(Je,dOo),e(Je,Se),e(Se,A6),e(A6,rme),e(rme,cOo),e(A6,fOo),e(A6,aG),e(aG,mOo),e(A6,gOo),e(Se,hOo),e(Se,y6),e(y6,tme),e(tme,pOo),e(y6,_Oo),e(y6,nG),e(nG,uOo),e(y6,bOo),e(Se,FOo),e(Se,L6),e(L6,ame),e(ame,vOo),e(L6,TOo),e(L6,sG),e(sG,MOo),e(L6,EOo),e(Se,COo),e(Se,x6),e(x6,nme),e(nme,wOo),e(x6,AOo),e(x6,lG),e(lG,yOo),e(x6,LOo),e(Se,xOo),e(Se,k6),e(k6,sme),e(sme,kOo),e(k6,SOo),e(k6,iG),e(iG,ROo),e(k6,BOo),e(Se,POo),e(Se,S6),e(S6,lme),e(lme,$Oo),e(S6,IOo),e(S6,dG),e(dG,qOo),e(S6,NOo),e(Se,jOo),e(Se,R6),e(R6,ime),e(ime,DOo),e(R6,GOo),e(R6,cG),e(cG,OOo),e(R6,VOo),e(Se,XOo),e(Se,B6),e(B6,dme),e(dme,zOo),e(B6,QOo),e(B6,fG),e(fG,WOo),e(B6,HOo),e(Je,UOo),e(Je,P6),e(P6,JOo),e(P6,cme),e(cme,YOo),e(P6,KOo),e(P6,fme),e(fme,ZOo),e(Je,eVo),e(Je,mme),e(mme,oVo),e(Je,rVo),g(QC,Je,null),b(c,rBe,u),b(c,Nd,u),e(Nd,$6),e($6,gme),g(WC,gme,null),e(Nd,tVo),e(Nd,hme),e(hme,aVo),b(c,tBe,u),b(c,cr,u),g(HC,cr,null),e(cr,nVo),e(cr,jd),e(jd,sVo),e(jd,mG),e(mG,lVo),e(jd,iVo),e(jd,gG),e(gG,dVo),e(jd,cVo),e(cr,fVo),e(cr,UC),e(UC,mVo),e(UC,pme),e(pme,gVo),e(UC,hVo),e(cr,pVo),e(cr,at),g(JC,at,null),e(at,_Vo),e(at,_me),e(_me,uVo),e(at,bVo),e(at,Dd),e(Dd,FVo),e(Dd,ume),e(ume,vVo),e(Dd,TVo),e(Dd,hG),e(hG,MVo),e(Dd,EVo),e(at,CVo),e(at,bme),e(bme,wVo),e(at,AVo),g(YC,at,null),e(cr,yVo),e(cr,Ye),g(KC,Ye,null),e(Ye,LVo),e(Ye,Fme),e(Fme,xVo),e(Ye,kVo),e(Ye,an),e(an,SVo),e(an,vme),e(vme,RVo),e(an,BVo),e(an,Tme),e(Tme,PVo),e(an,$Vo),e(an,Mme),e(Mme,IVo),e(an,qVo),e(Ye,NVo),e(Ye,nn),e(nn,I6),e(I6,Eme),e(Eme,jVo),e(I6,DVo),e(I6,pG),e(pG,GVo),e(I6,OVo),e(nn,VVo),e(nn,q6),e(q6,Cme),e(Cme,XVo),e(q6,zVo),e(q6,_G),e(_G,QVo),e(q6,WVo),e(nn,HVo),e(nn,N6),e(N6,wme),e(wme,UVo),e(N6,JVo),e(N6,uG),e(uG,YVo),e(N6,KVo),e(nn,ZVo),e(nn,j6),e(j6,Ame),e(Ame,eXo),e(j6,oXo),e(j6,bG),e(bG,rXo),e(j6,tXo),e(Ye,aXo),e(Ye,D6),e(D6,nXo),e(D6,yme),e(yme,sXo),e(D6,lXo),e(D6,Lme),e(Lme,iXo),e(Ye,dXo),e(Ye,xme),e(xme,cXo),e(Ye,fXo),g(ZC,Ye,null),b(c,aBe,u),b(c,Gd,u),e(Gd,G6),e(G6,kme),g(ew,kme,null),e(Gd,mXo),e(Gd,Sme),e(Sme,gXo),b(c,nBe,u),b(c,fr,u),g(ow,fr,null),e(fr,hXo),e(fr,Od),e(Od,pXo),e(Od,FG),e(FG,_Xo),e(Od,uXo),e(Od,vG),e(vG,bXo),e(Od,FXo),e(fr,vXo),e(fr,rw),e(rw,TXo),e(rw,Rme),e(Rme,MXo),e(rw,EXo),e(fr,CXo),e(fr,nt),g(tw,nt,null),e(nt,wXo),e(nt,Bme),e(Bme,AXo),e(nt,yXo),e(nt,Vd),e(Vd,LXo),e(Vd,Pme),e(Pme,xXo),e(Vd,kXo),e(Vd,TG),e(TG,SXo),e(Vd,RXo),e(nt,BXo),e(nt,$me),e($me,PXo),e(nt,$Xo),g(aw,nt,null),e(fr,IXo),e(fr,Ke),g(nw,Ke,null),e(Ke,qXo),e(Ke,Ime),e(Ime,NXo),e(Ke,jXo),e(Ke,sn),e(sn,DXo),e(sn,qme),e(qme,GXo),e(sn,OXo),e(sn,Nme),e(Nme,VXo),e(sn,XXo),e(sn,jme),e(jme,zXo),e(sn,QXo),e(Ke,WXo),e(Ke,Re),e(Re,O6),e(O6,Dme),e(Dme,HXo),e(O6,UXo),e(O6,MG),e(MG,JXo),e(O6,YXo),e(Re,KXo),e(Re,V6),e(V6,Gme),e(Gme,ZXo),e(V6,ezo),e(V6,EG),e(EG,ozo),e(V6,rzo),e(Re,tzo),e(Re,X6),e(X6,Ome),e(Ome,azo),e(X6,nzo),e(X6,CG),e(CG,szo),e(X6,lzo),e(Re,izo),e(Re,z6),e(z6,Vme),e(Vme,dzo),e(z6,czo),e(z6,wG),e(wG,fzo),e(z6,mzo),e(Re,gzo),e(Re,Q6),e(Q6,Xme),e(Xme,hzo),e(Q6,pzo),e(Q6,AG),e(AG,_zo),e(Q6,uzo),e(Re,bzo),e(Re,W6),e(W6,zme),e(zme,Fzo),e(W6,vzo),e(W6,yG),e(yG,Tzo),e(W6,Mzo),e(Re,Ezo),e(Re,H6),e(H6,Qme),e(Qme,Czo),e(H6,wzo),e(H6,LG),e(LG,Azo),e(H6,yzo),e(Re,Lzo),e(Re,U6),e(U6,Wme),e(Wme,xzo),e(U6,kzo),e(U6,xG),e(xG,Szo),e(U6,Rzo),e(Ke,Bzo),e(Ke,J6),e(J6,Pzo),e(J6,Hme),e(Hme,$zo),e(J6,Izo),e(J6,Ume),e(Ume,qzo),e(Ke,Nzo),e(Ke,Jme),e(Jme,jzo),e(Ke,Dzo),g(sw,Ke,null),b(c,sBe,u),b(c,Xd,u),e(Xd,Y6),e(Y6,Yme),g(lw,Yme,null),e(Xd,Gzo),e(Xd,Kme),e(Kme,Ozo),b(c,lBe,u),b(c,mr,u),g(iw,mr,null),e(mr,Vzo),e(mr,zd),e(zd,Xzo),e(zd,kG),e(kG,zzo),e(zd,Qzo),e(zd,SG),e(SG,Wzo),e(zd,Hzo),e(mr,Uzo),e(mr,dw),e(dw,Jzo),e(dw,Zme),e(Zme,Yzo),e(dw,Kzo),e(mr,Zzo),e(mr,st),g(cw,st,null),e(st,eQo),e(st,ege),e(ege,oQo),e(st,rQo),e(st,Qd),e(Qd,tQo),e(Qd,oge),e(oge,aQo),e(Qd,nQo),e(Qd,RG),e(RG,sQo),e(Qd,lQo),e(st,iQo),e(st,rge),e(rge,dQo),e(st,cQo),g(fw,st,null),e(mr,fQo),e(mr,Ze),g(mw,Ze,null),e(Ze,mQo),e(Ze,tge),e(tge,gQo),e(Ze,hQo),e(Ze,ln),e(ln,pQo),e(ln,age),e(age,_Qo),e(ln,uQo),e(ln,nge),e(nge,bQo),e(ln,FQo),e(ln,sge),e(sge,vQo),e(ln,TQo),e(Ze,MQo),e(Ze,gw),e(gw,K6),e(K6,lge),e(lge,EQo),e(K6,CQo),e(K6,BG),e(BG,wQo),e(K6,AQo),e(gw,yQo),e(gw,Z6),e(Z6,ige),e(ige,LQo),e(Z6,xQo),e(Z6,PG),e(PG,kQo),e(Z6,SQo),e(Ze,RQo),e(Ze,eF),e(eF,BQo),e(eF,dge),e(dge,PQo),e(eF,$Qo),e(eF,cge),e(cge,IQo),e(Ze,qQo),e(Ze,fge),e(fge,NQo),e(Ze,jQo),g(hw,Ze,null),b(c,iBe,u),b(c,Wd,u),e(Wd,oF),e(oF,mge),g(pw,mge,null),e(Wd,DQo),e(Wd,gge),e(gge,GQo),b(c,dBe,u),b(c,gr,u),g(_w,gr,null),e(gr,OQo),e(gr,Hd),e(Hd,VQo),e(Hd,$G),e($G,XQo),e(Hd,zQo),e(Hd,IG),e(IG,QQo),e(Hd,WQo),e(gr,HQo),e(gr,uw),e(uw,UQo),e(uw,hge),e(hge,JQo),e(uw,YQo),e(gr,KQo),e(gr,lt),g(bw,lt,null),e(lt,ZQo),e(lt,pge),e(pge,eWo),e(lt,oWo),e(lt,Ud),e(Ud,rWo),e(Ud,_ge),e(_ge,tWo),e(Ud,aWo),e(Ud,qG),e(qG,nWo),e(Ud,sWo),e(lt,lWo),e(lt,uge),e(uge,iWo),e(lt,dWo),g(Fw,lt,null),e(gr,cWo),e(gr,eo),g(vw,eo,null),e(eo,fWo),e(eo,bge),e(bge,mWo),e(eo,gWo),e(eo,dn),e(dn,hWo),e(dn,Fge),e(Fge,pWo),e(dn,_Wo),e(dn,vge),e(vge,uWo),e(dn,bWo),e(dn,Tge),e(Tge,FWo),e(dn,vWo),e(eo,TWo),e(eo,cn),e(cn,rF),e(rF,Mge),e(Mge,MWo),e(rF,EWo),e(rF,NG),e(NG,CWo),e(rF,wWo),e(cn,AWo),e(cn,tF),e(tF,Ege),e(Ege,yWo),e(tF,LWo),e(tF,jG),e(jG,xWo),e(tF,kWo),e(cn,SWo),e(cn,aF),e(aF,Cge),e(Cge,RWo),e(aF,BWo),e(aF,DG),e(DG,PWo),e(aF,$Wo),e(cn,IWo),e(cn,nF),e(nF,wge),e(wge,qWo),e(nF,NWo),e(nF,GG),e(GG,jWo),e(nF,DWo),e(eo,GWo),e(eo,sF),e(sF,OWo),e(sF,Age),e(Age,VWo),e(sF,XWo),e(sF,yge),e(yge,zWo),e(eo,QWo),e(eo,Lge),e(Lge,WWo),e(eo,HWo),g(Tw,eo,null),b(c,cBe,u),b(c,Jd,u),e(Jd,lF),e(lF,xge),g(Mw,xge,null),e(Jd,UWo),e(Jd,kge),e(kge,JWo),b(c,fBe,u),b(c,hr,u),g(Ew,hr,null),e(hr,YWo),e(hr,Yd),e(Yd,KWo),e(Yd,OG),e(OG,ZWo),e(Yd,eHo),e(Yd,VG),e(VG,oHo),e(Yd,rHo),e(hr,tHo),e(hr,Cw),e(Cw,aHo),e(Cw,Sge),e(Sge,nHo),e(Cw,sHo),e(hr,lHo),e(hr,it),g(ww,it,null),e(it,iHo),e(it,Rge),e(Rge,dHo),e(it,cHo),e(it,Kd),e(Kd,fHo),e(Kd,Bge),e(Bge,mHo),e(Kd,gHo),e(Kd,XG),e(XG,hHo),e(Kd,pHo),e(it,_Ho),e(it,Pge),e(Pge,uHo),e(it,bHo),g(Aw,it,null),e(hr,FHo),e(hr,oo),g(yw,oo,null),e(oo,vHo),e(oo,$ge),e($ge,THo),e(oo,MHo),e(oo,fn),e(fn,EHo),e(fn,Ige),e(Ige,CHo),e(fn,wHo),e(fn,qge),e(qge,AHo),e(fn,yHo),e(fn,Nge),e(Nge,LHo),e(fn,xHo),e(oo,kHo),e(oo,Zd),e(Zd,iF),e(iF,jge),e(jge,SHo),e(iF,RHo),e(iF,zG),e(zG,BHo),e(iF,PHo),e(Zd,$Ho),e(Zd,dF),e(dF,Dge),e(Dge,IHo),e(dF,qHo),e(dF,QG),e(QG,NHo),e(dF,jHo),e(Zd,DHo),e(Zd,cF),e(cF,Gge),e(Gge,GHo),e(cF,OHo),e(cF,WG),e(WG,VHo),e(cF,XHo),e(oo,zHo),e(oo,fF),e(fF,QHo),e(fF,Oge),e(Oge,WHo),e(fF,HHo),e(fF,Vge),e(Vge,UHo),e(oo,JHo),e(oo,Xge),e(Xge,YHo),e(oo,KHo),g(Lw,oo,null),b(c,mBe,u),b(c,ec,u),e(ec,mF),e(mF,zge),g(xw,zge,null),e(ec,ZHo),e(ec,Qge),e(Qge,eUo),b(c,gBe,u),b(c,pr,u),g(kw,pr,null),e(pr,oUo),e(pr,oc),e(oc,rUo),e(oc,HG),e(HG,tUo),e(oc,aUo),e(oc,UG),e(UG,nUo),e(oc,sUo),e(pr,lUo),e(pr,Sw),e(Sw,iUo),e(Sw,Wge),e(Wge,dUo),e(Sw,cUo),e(pr,fUo),e(pr,dt),g(Rw,dt,null),e(dt,mUo),e(dt,Hge),e(Hge,gUo),e(dt,hUo),e(dt,rc),e(rc,pUo),e(rc,Uge),e(Uge,_Uo),e(rc,uUo),e(rc,JG),e(JG,bUo),e(rc,FUo),e(dt,vUo),e(dt,Jge),e(Jge,TUo),e(dt,MUo),g(Bw,dt,null),e(pr,EUo),e(pr,ro),g(Pw,ro,null),e(ro,CUo),e(ro,Yge),e(Yge,wUo),e(ro,AUo),e(ro,mn),e(mn,yUo),e(mn,Kge),e(Kge,LUo),e(mn,xUo),e(mn,Zge),e(Zge,kUo),e(mn,SUo),e(mn,ehe),e(ehe,RUo),e(mn,BUo),e(ro,PUo),e(ro,ohe),e(ohe,gF),e(gF,rhe),e(rhe,$Uo),e(gF,IUo),e(gF,YG),e(YG,qUo),e(gF,NUo),e(ro,jUo),e(ro,hF),e(hF,DUo),e(hF,the),e(the,GUo),e(hF,OUo),e(hF,ahe),e(ahe,VUo),e(ro,XUo),e(ro,nhe),e(nhe,zUo),e(ro,QUo),g($w,ro,null),b(c,hBe,u),b(c,tc,u),e(tc,pF),e(pF,she),g(Iw,she,null),e(tc,WUo),e(tc,lhe),e(lhe,HUo),b(c,pBe,u),b(c,_r,u),g(qw,_r,null),e(_r,UUo),e(_r,ac),e(ac,JUo),e(ac,KG),e(KG,YUo),e(ac,KUo),e(ac,ZG),e(ZG,ZUo),e(ac,eJo),e(_r,oJo),e(_r,Nw),e(Nw,rJo),e(Nw,ihe),e(ihe,tJo),e(Nw,aJo),e(_r,nJo),e(_r,ct),g(jw,ct,null),e(ct,sJo),e(ct,dhe),e(dhe,lJo),e(ct,iJo),e(ct,nc),e(nc,dJo),e(nc,che),e(che,cJo),e(nc,fJo),e(nc,eO),e(eO,mJo),e(nc,gJo),e(ct,hJo),e(ct,fhe),e(fhe,pJo),e(ct,_Jo),g(Dw,ct,null),e(_r,uJo),e(_r,to),g(Gw,to,null),e(to,bJo),e(to,mhe),e(mhe,FJo),e(to,vJo),e(to,gn),e(gn,TJo),e(gn,ghe),e(ghe,MJo),e(gn,EJo),e(gn,hhe),e(hhe,CJo),e(gn,wJo),e(gn,phe),e(phe,AJo),e(gn,yJo),e(to,LJo),e(to,_he),e(_he,_F),e(_F,uhe),e(uhe,xJo),e(_F,kJo),e(_F,oO),e(oO,SJo),e(_F,RJo),e(to,BJo),e(to,uF),e(uF,PJo),e(uF,bhe),e(bhe,$Jo),e(uF,IJo),e(uF,Fhe),e(Fhe,qJo),e(to,NJo),e(to,vhe),e(vhe,jJo),e(to,DJo),g(Ow,to,null),b(c,_Be,u),b(c,sc,u),e(sc,bF),e(bF,The),g(Vw,The,null),e(sc,GJo),e(sc,Mhe),e(Mhe,OJo),b(c,uBe,u),b(c,ur,u),g(Xw,ur,null),e(ur,VJo),e(ur,lc),e(lc,XJo),e(lc,rO),e(rO,zJo),e(lc,QJo),e(lc,tO),e(tO,WJo),e(lc,HJo),e(ur,UJo),e(ur,zw),e(zw,JJo),e(zw,Ehe),e(Ehe,YJo),e(zw,KJo),e(ur,ZJo),e(ur,ft),g(Qw,ft,null),e(ft,eYo),e(ft,Che),e(Che,oYo),e(ft,rYo),e(ft,ic),e(ic,tYo),e(ic,whe),e(whe,aYo),e(ic,nYo),e(ic,aO),e(aO,sYo),e(ic,lYo),e(ft,iYo),e(ft,Ahe),e(Ahe,dYo),e(ft,cYo),g(Ww,ft,null),e(ur,fYo),e(ur,ao),g(Hw,ao,null),e(ao,mYo),e(ao,yhe),e(yhe,gYo),e(ao,hYo),e(ao,hn),e(hn,pYo),e(hn,Lhe),e(Lhe,_Yo),e(hn,uYo),e(hn,xhe),e(xhe,bYo),e(hn,FYo),e(hn,khe),e(khe,vYo),e(hn,TYo),e(ao,MYo),e(ao,dc),e(dc,FF),e(FF,She),e(She,EYo),e(FF,CYo),e(FF,nO),e(nO,wYo),e(FF,AYo),e(dc,yYo),e(dc,vF),e(vF,Rhe),e(Rhe,LYo),e(vF,xYo),e(vF,sO),e(sO,kYo),e(vF,SYo),e(dc,RYo),e(dc,TF),e(TF,Bhe),e(Bhe,BYo),e(TF,PYo),e(TF,lO),e(lO,$Yo),e(TF,IYo),e(ao,qYo),e(ao,MF),e(MF,NYo),e(MF,Phe),e(Phe,jYo),e(MF,DYo),e(MF,$he),e($he,GYo),e(ao,OYo),e(ao,Ihe),e(Ihe,VYo),e(ao,XYo),g(Uw,ao,null),b(c,bBe,u),b(c,cc,u),e(cc,EF),e(EF,qhe),g(Jw,qhe,null),e(cc,zYo),e(cc,Nhe),e(Nhe,QYo),b(c,FBe,u),b(c,br,u),g(Yw,br,null),e(br,WYo),e(br,fc),e(fc,HYo),e(fc,iO),e(iO,UYo),e(fc,JYo),e(fc,dO),e(dO,YYo),e(fc,KYo),e(br,ZYo),e(br,Kw),e(Kw,eKo),e(Kw,jhe),e(jhe,oKo),e(Kw,rKo),e(br,tKo),e(br,mt),g(Zw,mt,null),e(mt,aKo),e(mt,Dhe),e(Dhe,nKo),e(mt,sKo),e(mt,mc),e(mc,lKo),e(mc,Ghe),e(Ghe,iKo),e(mc,dKo),e(mc,cO),e(cO,cKo),e(mc,fKo),e(mt,mKo),e(mt,Ohe),e(Ohe,gKo),e(mt,hKo),g(eA,mt,null),e(br,pKo),e(br,no),g(oA,no,null),e(no,_Ko),e(no,Vhe),e(Vhe,uKo),e(no,bKo),e(no,pn),e(pn,FKo),e(pn,Xhe),e(Xhe,vKo),e(pn,TKo),e(pn,zhe),e(zhe,MKo),e(pn,EKo),e(pn,Qhe),e(Qhe,CKo),e(pn,wKo),e(no,AKo),e(no,Whe),e(Whe,CF),e(CF,Hhe),e(Hhe,yKo),e(CF,LKo),e(CF,fO),e(fO,xKo),e(CF,kKo),e(no,SKo),e(no,wF),e(wF,RKo),e(wF,Uhe),e(Uhe,BKo),e(wF,PKo),e(wF,Jhe),e(Jhe,$Ko),e(no,IKo),e(no,Yhe),e(Yhe,qKo),e(no,NKo),g(rA,no,null),b(c,vBe,u),b(c,gc,u),e(gc,AF),e(AF,Khe),g(tA,Khe,null),e(gc,jKo),e(gc,Zhe),e(Zhe,DKo),b(c,TBe,u),b(c,Fr,u),g(aA,Fr,null),e(Fr,GKo),e(Fr,hc),e(hc,OKo),e(hc,mO),e(mO,VKo),e(hc,XKo),e(hc,gO),e(gO,zKo),e(hc,QKo),e(Fr,WKo),e(Fr,nA),e(nA,HKo),e(nA,epe),e(epe,UKo),e(nA,JKo),e(Fr,YKo),e(Fr,gt),g(sA,gt,null),e(gt,KKo),e(gt,ope),e(ope,ZKo),e(gt,eZo),e(gt,pc),e(pc,oZo),e(pc,rpe),e(rpe,rZo),e(pc,tZo),e(pc,hO),e(hO,aZo),e(pc,nZo),e(gt,sZo),e(gt,tpe),e(tpe,lZo),e(gt,iZo),g(lA,gt,null),e(Fr,dZo),e(Fr,ho),g(iA,ho,null),e(ho,cZo),e(ho,ape),e(ape,fZo),e(ho,mZo),e(ho,_n),e(_n,gZo),e(_n,npe),e(npe,hZo),e(_n,pZo),e(_n,spe),e(spe,_Zo),e(_n,uZo),e(_n,lpe),e(lpe,bZo),e(_n,FZo),e(ho,vZo),e(ho,x),e(x,yF),e(yF,ipe),e(ipe,TZo),e(yF,MZo),e(yF,pO),e(pO,EZo),e(yF,CZo),e(x,wZo),e(x,LF),e(LF,dpe),e(dpe,AZo),e(LF,yZo),e(LF,_O),e(_O,LZo),e(LF,xZo),e(x,kZo),e(x,xF),e(xF,cpe),e(cpe,SZo),e(xF,RZo),e(xF,uO),e(uO,BZo),e(xF,PZo),e(x,$Zo),e(x,kF),e(kF,fpe),e(fpe,IZo),e(kF,qZo),e(kF,bO),e(bO,NZo),e(kF,jZo),e(x,DZo),e(x,SF),e(SF,mpe),e(mpe,GZo),e(SF,OZo),e(SF,FO),e(FO,VZo),e(SF,XZo),e(x,zZo),e(x,RF),e(RF,gpe),e(gpe,QZo),e(RF,WZo),e(RF,vO),e(vO,HZo),e(RF,UZo),e(x,JZo),e(x,BF),e(BF,hpe),e(hpe,YZo),e(BF,KZo),e(BF,TO),e(TO,ZZo),e(BF,eer),e(x,oer),e(x,PF),e(PF,ppe),e(ppe,rer),e(PF,ter),e(PF,MO),e(MO,aer),e(PF,ner),e(x,ser),e(x,$F),e($F,_pe),e(_pe,ler),e($F,ier),e($F,EO),e(EO,der),e($F,cer),e(x,fer),e(x,IF),e(IF,upe),e(upe,mer),e(IF,ger),e(IF,CO),e(CO,her),e(IF,per),e(x,_er),e(x,qF),e(qF,bpe),e(bpe,uer),e(qF,ber),e(qF,wO),e(wO,Fer),e(qF,ver),e(x,Ter),e(x,NF),e(NF,Fpe),e(Fpe,Mer),e(NF,Eer),e(NF,AO),e(AO,Cer),e(NF,wer),e(x,Aer),e(x,jF),e(jF,vpe),e(vpe,yer),e(jF,Ler),e(jF,yO),e(yO,xer),e(jF,ker),e(x,Ser),e(x,DF),e(DF,Tpe),e(Tpe,Rer),e(DF,Ber),e(DF,LO),e(LO,Per),e(DF,$er),e(x,Ier),e(x,GF),e(GF,Mpe),e(Mpe,qer),e(GF,Ner),e(GF,xO),e(xO,jer),e(GF,Der),e(x,Ger),e(x,OF),e(OF,Epe),e(Epe,Oer),e(OF,Ver),e(OF,kO),e(kO,Xer),e(OF,zer),e(x,Qer),e(x,Gs),e(Gs,Cpe),e(Cpe,Wer),e(Gs,Her),e(Gs,SO),e(SO,Uer),e(Gs,Jer),e(Gs,RO),e(RO,Yer),e(Gs,Ker),e(x,Zer),e(x,VF),e(VF,wpe),e(wpe,eor),e(VF,oor),e(VF,BO),e(BO,ror),e(VF,tor),e(x,aor),e(x,XF),e(XF,Ape),e(Ape,nor),e(XF,sor),e(XF,PO),e(PO,lor),e(XF,ior),e(x,dor),e(x,zF),e(zF,ype),e(ype,cor),e(zF,mor),e(zF,$O),e($O,gor),e(zF,hor),e(x,por),e(x,QF),e(QF,Lpe),e(Lpe,_or),e(QF,uor),e(QF,IO),e(IO,bor),e(QF,For),e(x,vor),e(x,WF),e(WF,xpe),e(xpe,Tor),e(WF,Mor),e(WF,qO),e(qO,Eor),e(WF,Cor),e(x,wor),e(x,HF),e(HF,kpe),e(kpe,Aor),e(HF,yor),e(HF,NO),e(NO,Lor),e(HF,xor),e(x,kor),e(x,UF),e(UF,Spe),e(Spe,Sor),e(UF,Ror),e(UF,jO),e(jO,Bor),e(UF,Por),e(x,$or),e(x,JF),e(JF,Rpe),e(Rpe,Ior),e(JF,qor),e(JF,DO),e(DO,Nor),e(JF,jor),e(x,Dor),e(x,YF),e(YF,Bpe),e(Bpe,Gor),e(YF,Oor),e(YF,GO),e(GO,Vor),e(YF,Xor),e(x,zor),e(x,KF),e(KF,Ppe),e(Ppe,Qor),e(KF,Wor),e(KF,OO),e(OO,Hor),e(KF,Uor),e(x,Jor),e(x,ZF),e(ZF,$pe),e($pe,Yor),e(ZF,Kor),e(ZF,VO),e(VO,Zor),e(ZF,err),e(x,orr),e(x,ev),e(ev,Ipe),e(Ipe,rrr),e(ev,trr),e(ev,XO),e(XO,arr),e(ev,nrr),e(x,srr),e(x,ov),e(ov,qpe),e(qpe,lrr),e(ov,irr),e(ov,zO),e(zO,drr),e(ov,crr),e(x,frr),e(x,rv),e(rv,Npe),e(Npe,mrr),e(rv,grr),e(rv,QO),e(QO,hrr),e(rv,prr),e(x,_rr),e(x,tv),e(tv,jpe),e(jpe,urr),e(tv,brr),e(tv,WO),e(WO,Frr),e(tv,vrr),e(x,Trr),e(x,av),e(av,Dpe),e(Dpe,Mrr),e(av,Err),e(av,HO),e(HO,Crr),e(av,wrr),e(x,Arr),e(x,nv),e(nv,Gpe),e(Gpe,yrr),e(nv,Lrr),e(nv,UO),e(UO,xrr),e(nv,krr),e(x,Srr),e(x,sv),e(sv,Ope),e(Ope,Rrr),e(sv,Brr),e(sv,JO),e(JO,Prr),e(sv,$rr),e(x,Irr),e(x,lv),e(lv,Vpe),e(Vpe,qrr),e(lv,Nrr),e(lv,YO),e(YO,jrr),e(lv,Drr),e(x,Grr),e(x,iv),e(iv,Xpe),e(Xpe,Orr),e(iv,Vrr),e(iv,KO),e(KO,Xrr),e(iv,zrr),e(x,Qrr),e(x,dv),e(dv,zpe),e(zpe,Wrr),e(dv,Hrr),e(dv,ZO),e(ZO,Urr),e(dv,Jrr),e(x,Yrr),e(x,cv),e(cv,Qpe),e(Qpe,Krr),e(cv,Zrr),e(cv,eV),e(eV,etr),e(cv,otr),e(x,rtr),e(x,fv),e(fv,Wpe),e(Wpe,ttr),e(fv,atr),e(fv,oV),e(oV,ntr),e(fv,str),e(x,ltr),e(x,mv),e(mv,Hpe),e(Hpe,itr),e(mv,dtr),e(mv,rV),e(rV,ctr),e(mv,ftr),e(x,mtr),e(x,gv),e(gv,Upe),e(Upe,gtr),e(gv,htr),e(gv,tV),e(tV,ptr),e(gv,_tr),e(x,utr),e(x,hv),e(hv,Jpe),e(Jpe,btr),e(hv,Ftr),e(hv,aV),e(aV,vtr),e(hv,Ttr),e(x,Mtr),e(x,pv),e(pv,Ype),e(Ype,Etr),e(pv,Ctr),e(pv,nV),e(nV,wtr),e(pv,Atr),e(ho,ytr),e(ho,Kpe),e(Kpe,Ltr),e(ho,xtr),g(dA,ho,null),b(c,MBe,u),b(c,_c,u),e(_c,_v),e(_v,Zpe),g(cA,Zpe,null),e(_c,ktr),e(_c,e_e),e(e_e,Str),b(c,EBe,u),b(c,vr,u),g(fA,vr,null),e(vr,Rtr),e(vr,uc),e(uc,Btr),e(uc,sV),e(sV,Ptr),e(uc,$tr),e(uc,lV),e(lV,Itr),e(uc,qtr),e(vr,Ntr),e(vr,mA),e(mA,jtr),e(mA,o_e),e(o_e,Dtr),e(mA,Gtr),e(vr,Otr),e(vr,ht),g(gA,ht,null),e(ht,Vtr),e(ht,r_e),e(r_e,Xtr),e(ht,ztr),e(ht,bc),e(bc,Qtr),e(bc,t_e),e(t_e,Wtr),e(bc,Htr),e(bc,iV),e(iV,Utr),e(bc,Jtr),e(ht,Ytr),e(ht,a_e),e(a_e,Ktr),e(ht,Ztr),g(hA,ht,null),e(vr,ear),e(vr,po),g(pA,po,null),e(po,oar),e(po,n_e),e(n_e,rar),e(po,tar),e(po,un),e(un,aar),e(un,s_e),e(s_e,nar),e(un,sar),e(un,l_e),e(l_e,lar),e(un,iar),e(un,i_e),e(i_e,dar),e(un,car),e(po,far),e(po,H),e(H,uv),e(uv,d_e),e(d_e,mar),e(uv,gar),e(uv,dV),e(dV,har),e(uv,par),e(H,_ar),e(H,bv),e(bv,c_e),e(c_e,uar),e(bv,bar),e(bv,cV),e(cV,Far),e(bv,Tar),e(H,Mar),e(H,Fv),e(Fv,f_e),e(f_e,Ear),e(Fv,Car),e(Fv,fV),e(fV,war),e(Fv,Aar),e(H,yar),e(H,vv),e(vv,m_e),e(m_e,Lar),e(vv,xar),e(vv,mV),e(mV,kar),e(vv,Sar),e(H,Rar),e(H,Tv),e(Tv,g_e),e(g_e,Bar),e(Tv,Par),e(Tv,gV),e(gV,$ar),e(Tv,Iar),e(H,qar),e(H,Mv),e(Mv,h_e),e(h_e,Nar),e(Mv,jar),e(Mv,hV),e(hV,Dar),e(Mv,Gar),e(H,Oar),e(H,Ev),e(Ev,p_e),e(p_e,Var),e(Ev,Xar),e(Ev,pV),e(pV,zar),e(Ev,Qar),e(H,War),e(H,Cv),e(Cv,__e),e(__e,Har),e(Cv,Uar),e(Cv,_V),e(_V,Jar),e(Cv,Yar),e(H,Kar),e(H,wv),e(wv,u_e),e(u_e,Zar),e(wv,enr),e(wv,uV),e(uV,onr),e(wv,rnr),e(H,tnr),e(H,Av),e(Av,b_e),e(b_e,anr),e(Av,nnr),e(Av,bV),e(bV,snr),e(Av,lnr),e(H,inr),e(H,yv),e(yv,F_e),e(F_e,dnr),e(yv,cnr),e(yv,FV),e(FV,fnr),e(yv,mnr),e(H,gnr),e(H,Lv),e(Lv,v_e),e(v_e,hnr),e(Lv,pnr),e(Lv,vV),e(vV,_nr),e(Lv,unr),e(H,bnr),e(H,xv),e(xv,T_e),e(T_e,Fnr),e(xv,vnr),e(xv,TV),e(TV,Tnr),e(xv,Mnr),e(H,Enr),e(H,kv),e(kv,M_e),e(M_e,Cnr),e(kv,wnr),e(kv,MV),e(MV,Anr),e(kv,ynr),e(H,Lnr),e(H,Sv),e(Sv,E_e),e(E_e,xnr),e(Sv,knr),e(Sv,EV),e(EV,Snr),e(Sv,Rnr),e(H,Bnr),e(H,Rv),e(Rv,C_e),e(C_e,Pnr),e(Rv,$nr),e(Rv,CV),e(CV,Inr),e(Rv,qnr),e(H,Nnr),e(H,Bv),e(Bv,w_e),e(w_e,jnr),e(Bv,Dnr),e(Bv,wV),e(wV,Gnr),e(Bv,Onr),e(H,Vnr),e(H,Pv),e(Pv,A_e),e(A_e,Xnr),e(Pv,znr),e(Pv,AV),e(AV,Qnr),e(Pv,Wnr),e(H,Hnr),e(H,$v),e($v,y_e),e(y_e,Unr),e($v,Jnr),e($v,yV),e(yV,Ynr),e($v,Knr),e(H,Znr),e(H,Iv),e(Iv,L_e),e(L_e,esr),e(Iv,osr),e(Iv,LV),e(LV,rsr),e(Iv,tsr),e(H,asr),e(H,qv),e(qv,x_e),e(x_e,nsr),e(qv,ssr),e(qv,xV),e(xV,lsr),e(qv,isr),e(H,dsr),e(H,Nv),e(Nv,k_e),e(k_e,csr),e(Nv,fsr),e(Nv,kV),e(kV,msr),e(Nv,gsr),e(H,hsr),e(H,jv),e(jv,S_e),e(S_e,psr),e(jv,_sr),e(jv,SV),e(SV,usr),e(jv,bsr),e(po,Fsr),e(po,R_e),e(R_e,vsr),e(po,Tsr),g(_A,po,null),b(c,CBe,u),b(c,Fc,u),e(Fc,Dv),e(Dv,B_e),g(uA,B_e,null),e(Fc,Msr),e(Fc,P_e),e(P_e,Esr),b(c,wBe,u),b(c,Tr,u),g(bA,Tr,null),e(Tr,Csr),e(Tr,vc),e(vc,wsr),e(vc,RV),e(RV,Asr),e(vc,ysr),e(vc,BV),e(BV,Lsr),e(vc,xsr),e(Tr,ksr),e(Tr,FA),e(FA,Ssr),e(FA,$_e),e($_e,Rsr),e(FA,Bsr),e(Tr,Psr),e(Tr,pt),g(vA,pt,null),e(pt,$sr),e(pt,I_e),e(I_e,Isr),e(pt,qsr),e(pt,Tc),e(Tc,Nsr),e(Tc,q_e),e(q_e,jsr),e(Tc,Dsr),e(Tc,PV),e(PV,Gsr),e(Tc,Osr),e(pt,Vsr),e(pt,N_e),e(N_e,Xsr),e(pt,zsr),g(TA,pt,null),e(Tr,Qsr),e(Tr,_o),g(MA,_o,null),e(_o,Wsr),e(_o,j_e),e(j_e,Hsr),e(_o,Usr),e(_o,bn),e(bn,Jsr),e(bn,D_e),e(D_e,Ysr),e(bn,Ksr),e(bn,G_e),e(G_e,Zsr),e(bn,elr),e(bn,O_e),e(O_e,olr),e(bn,rlr),e(_o,tlr),e(_o,fe),e(fe,Gv),e(Gv,V_e),e(V_e,alr),e(Gv,nlr),e(Gv,$V),e($V,slr),e(Gv,llr),e(fe,ilr),e(fe,Ov),e(Ov,X_e),e(X_e,dlr),e(Ov,clr),e(Ov,IV),e(IV,flr),e(Ov,mlr),e(fe,glr),e(fe,Vv),e(Vv,z_e),e(z_e,hlr),e(Vv,plr),e(Vv,qV),e(qV,_lr),e(Vv,ulr),e(fe,blr),e(fe,Xv),e(Xv,Q_e),e(Q_e,Flr),e(Xv,vlr),e(Xv,NV),e(NV,Tlr),e(Xv,Mlr),e(fe,Elr),e(fe,zv),e(zv,W_e),e(W_e,Clr),e(zv,wlr),e(zv,jV),e(jV,Alr),e(zv,ylr),e(fe,Llr),e(fe,Qv),e(Qv,H_e),e(H_e,xlr),e(Qv,klr),e(Qv,DV),e(DV,Slr),e(Qv,Rlr),e(fe,Blr),e(fe,Wv),e(Wv,U_e),e(U_e,Plr),e(Wv,$lr),e(Wv,GV),e(GV,Ilr),e(Wv,qlr),e(fe,Nlr),e(fe,Hv),e(Hv,J_e),e(J_e,jlr),e(Hv,Dlr),e(Hv,OV),e(OV,Glr),e(Hv,Olr),e(fe,Vlr),e(fe,Uv),e(Uv,Y_e),e(Y_e,Xlr),e(Uv,zlr),e(Uv,VV),e(VV,Qlr),e(Uv,Wlr),e(fe,Hlr),e(fe,Jv),e(Jv,K_e),e(K_e,Ulr),e(Jv,Jlr),e(Jv,XV),e(XV,Ylr),e(Jv,Klr),e(fe,Zlr),e(fe,Yv),e(Yv,Z_e),e(Z_e,eir),e(Yv,oir),e(Yv,zV),e(zV,rir),e(Yv,tir),e(fe,air),e(fe,Kv),e(Kv,eue),e(eue,nir),e(Kv,sir),e(Kv,QV),e(QV,lir),e(Kv,iir),e(_o,dir),e(_o,oue),e(oue,cir),e(_o,fir),g(EA,_o,null),b(c,ABe,u),b(c,Mc,u),e(Mc,Zv),e(Zv,rue),g(CA,rue,null),e(Mc,mir),e(Mc,tue),e(tue,gir),b(c,yBe,u),b(c,Mr,u),g(wA,Mr,null),e(Mr,hir),e(Mr,Ec),e(Ec,pir),e(Ec,WV),e(WV,_ir),e(Ec,uir),e(Ec,HV),e(HV,bir),e(Ec,Fir),e(Mr,vir),e(Mr,AA),e(AA,Tir),e(AA,aue),e(aue,Mir),e(AA,Eir),e(Mr,Cir),e(Mr,_t),g(yA,_t,null),e(_t,wir),e(_t,nue),e(nue,Air),e(_t,yir),e(_t,Cc),e(Cc,Lir),e(Cc,sue),e(sue,xir),e(Cc,kir),e(Cc,UV),e(UV,Sir),e(Cc,Rir),e(_t,Bir),e(_t,lue),e(lue,Pir),e(_t,$ir),g(LA,_t,null),e(Mr,Iir),e(Mr,uo),g(xA,uo,null),e(uo,qir),e(uo,iue),e(iue,Nir),e(uo,jir),e(uo,Fn),e(Fn,Dir),e(Fn,due),e(due,Gir),e(Fn,Oir),e(Fn,cue),e(cue,Vir),e(Fn,Xir),e(Fn,fue),e(fue,zir),e(Fn,Qir),e(uo,Wir),e(uo,kA),e(kA,e0),e(e0,mue),e(mue,Hir),e(e0,Uir),e(e0,JV),e(JV,Jir),e(e0,Yir),e(kA,Kir),e(kA,o0),e(o0,gue),e(gue,Zir),e(o0,edr),e(o0,YV),e(YV,odr),e(o0,rdr),e(uo,tdr),e(uo,hue),e(hue,adr),e(uo,ndr),g(SA,uo,null),b(c,LBe,u),b(c,wc,u),e(wc,r0),e(r0,pue),g(RA,pue,null),e(wc,sdr),e(wc,_ue),e(_ue,ldr),b(c,xBe,u),b(c,Er,u),g(BA,Er,null),e(Er,idr),e(Er,Ac),e(Ac,ddr),e(Ac,KV),e(KV,cdr),e(Ac,fdr),e(Ac,ZV),e(ZV,mdr),e(Ac,gdr),e(Er,hdr),e(Er,PA),e(PA,pdr),e(PA,uue),e(uue,_dr),e(PA,udr),e(Er,bdr),e(Er,ut),g($A,ut,null),e(ut,Fdr),e(ut,bue),e(bue,vdr),e(ut,Tdr),e(ut,yc),e(yc,Mdr),e(yc,Fue),e(Fue,Edr),e(yc,Cdr),e(yc,eX),e(eX,wdr),e(yc,Adr),e(ut,ydr),e(ut,vue),e(vue,Ldr),e(ut,xdr),g(IA,ut,null),e(Er,kdr),e(Er,bo),g(qA,bo,null),e(bo,Sdr),e(bo,Tue),e(Tue,Rdr),e(bo,Bdr),e(bo,vn),e(vn,Pdr),e(vn,Mue),e(Mue,$dr),e(vn,Idr),e(vn,Eue),e(Eue,qdr),e(vn,Ndr),e(vn,Cue),e(Cue,jdr),e(vn,Ddr),e(bo,Gdr),e(bo,J),e(J,t0),e(t0,wue),e(wue,Odr),e(t0,Vdr),e(t0,oX),e(oX,Xdr),e(t0,zdr),e(J,Qdr),e(J,a0),e(a0,Aue),e(Aue,Wdr),e(a0,Hdr),e(a0,rX),e(rX,Udr),e(a0,Jdr),e(J,Ydr),e(J,n0),e(n0,yue),e(yue,Kdr),e(n0,Zdr),e(n0,tX),e(tX,ecr),e(n0,ocr),e(J,rcr),e(J,s0),e(s0,Lue),e(Lue,tcr),e(s0,acr),e(s0,aX),e(aX,ncr),e(s0,scr),e(J,lcr),e(J,l0),e(l0,xue),e(xue,icr),e(l0,dcr),e(l0,nX),e(nX,ccr),e(l0,fcr),e(J,mcr),e(J,i0),e(i0,kue),e(kue,gcr),e(i0,hcr),e(i0,sX),e(sX,pcr),e(i0,_cr),e(J,ucr),e(J,d0),e(d0,Sue),e(Sue,bcr),e(d0,Fcr),e(d0,lX),e(lX,vcr),e(d0,Tcr),e(J,Mcr),e(J,c0),e(c0,Rue),e(Rue,Ecr),e(c0,Ccr),e(c0,iX),e(iX,wcr),e(c0,Acr),e(J,ycr),e(J,f0),e(f0,Bue),e(Bue,Lcr),e(f0,xcr),e(f0,dX),e(dX,kcr),e(f0,Scr),e(J,Rcr),e(J,m0),e(m0,Pue),e(Pue,Bcr),e(m0,Pcr),e(m0,cX),e(cX,$cr),e(m0,Icr),e(J,qcr),e(J,g0),e(g0,$ue),e($ue,Ncr),e(g0,jcr),e(g0,fX),e(fX,Dcr),e(g0,Gcr),e(J,Ocr),e(J,h0),e(h0,Iue),e(Iue,Vcr),e(h0,Xcr),e(h0,mX),e(mX,zcr),e(h0,Qcr),e(J,Wcr),e(J,p0),e(p0,que),e(que,Hcr),e(p0,Ucr),e(p0,gX),e(gX,Jcr),e(p0,Ycr),e(J,Kcr),e(J,_0),e(_0,Nue),e(Nue,Zcr),e(_0,efr),e(_0,hX),e(hX,ofr),e(_0,rfr),e(J,tfr),e(J,u0),e(u0,jue),e(jue,afr),e(u0,nfr),e(u0,pX),e(pX,sfr),e(u0,lfr),e(J,ifr),e(J,b0),e(b0,Due),e(Due,dfr),e(b0,cfr),e(b0,_X),e(_X,ffr),e(b0,mfr),e(J,gfr),e(J,F0),e(F0,Gue),e(Gue,hfr),e(F0,pfr),e(F0,uX),e(uX,_fr),e(F0,ufr),e(J,bfr),e(J,v0),e(v0,Oue),e(Oue,Ffr),e(v0,vfr),e(v0,bX),e(bX,Tfr),e(v0,Mfr),e(J,Efr),e(J,T0),e(T0,Vue),e(Vue,Cfr),e(T0,wfr),e(T0,FX),e(FX,Afr),e(T0,yfr),e(J,Lfr),e(J,M0),e(M0,Xue),e(Xue,xfr),e(M0,kfr),e(M0,vX),e(vX,Sfr),e(M0,Rfr),e(bo,Bfr),e(bo,zue),e(zue,Pfr),e(bo,$fr),g(NA,bo,null),b(c,kBe,u),b(c,Lc,u),e(Lc,E0),e(E0,Que),g(jA,Que,null),e(Lc,Ifr),e(Lc,Wue),e(Wue,qfr),b(c,SBe,u),b(c,Cr,u),g(DA,Cr,null),e(Cr,Nfr),e(Cr,xc),e(xc,jfr),e(xc,TX),e(TX,Dfr),e(xc,Gfr),e(xc,MX),e(MX,Ofr),e(xc,Vfr),e(Cr,Xfr),e(Cr,GA),e(GA,zfr),e(GA,Hue),e(Hue,Qfr),e(GA,Wfr),e(Cr,Hfr),e(Cr,bt),g(OA,bt,null),e(bt,Ufr),e(bt,Uue),e(Uue,Jfr),e(bt,Yfr),e(bt,kc),e(kc,Kfr),e(kc,Jue),e(Jue,Zfr),e(kc,emr),e(kc,EX),e(EX,omr),e(kc,rmr),e(bt,tmr),e(bt,Yue),e(Yue,amr),e(bt,nmr),g(VA,bt,null),e(Cr,smr),e(Cr,Fo),g(XA,Fo,null),e(Fo,lmr),e(Fo,Kue),e(Kue,imr),e(Fo,dmr),e(Fo,Tn),e(Tn,cmr),e(Tn,Zue),e(Zue,fmr),e(Tn,mmr),e(Tn,e1e),e(e1e,gmr),e(Tn,hmr),e(Tn,o1e),e(o1e,pmr),e(Tn,_mr),e(Fo,umr),e(Fo,be),e(be,C0),e(C0,r1e),e(r1e,bmr),e(C0,Fmr),e(C0,CX),e(CX,vmr),e(C0,Tmr),e(be,Mmr),e(be,w0),e(w0,t1e),e(t1e,Emr),e(w0,Cmr),e(w0,wX),e(wX,wmr),e(w0,Amr),e(be,ymr),e(be,A0),e(A0,a1e),e(a1e,Lmr),e(A0,xmr),e(A0,AX),e(AX,kmr),e(A0,Smr),e(be,Rmr),e(be,y0),e(y0,n1e),e(n1e,Bmr),e(y0,Pmr),e(y0,yX),e(yX,$mr),e(y0,Imr),e(be,qmr),e(be,L0),e(L0,s1e),e(s1e,Nmr),e(L0,jmr),e(L0,LX),e(LX,Dmr),e(L0,Gmr),e(be,Omr),e(be,x0),e(x0,l1e),e(l1e,Vmr),e(x0,Xmr),e(x0,xX),e(xX,zmr),e(x0,Qmr),e(be,Wmr),e(be,k0),e(k0,i1e),e(i1e,Hmr),e(k0,Umr),e(k0,kX),e(kX,Jmr),e(k0,Ymr),e(be,Kmr),e(be,S0),e(S0,d1e),e(d1e,Zmr),e(S0,egr),e(S0,SX),e(SX,ogr),e(S0,rgr),e(be,tgr),e(be,R0),e(R0,c1e),e(c1e,agr),e(R0,ngr),e(R0,RX),e(RX,sgr),e(R0,lgr),e(be,igr),e(be,B0),e(B0,f1e),e(f1e,dgr),e(B0,cgr),e(B0,BX),e(BX,fgr),e(B0,mgr),e(Fo,ggr),e(Fo,m1e),e(m1e,hgr),e(Fo,pgr),g(zA,Fo,null),b(c,RBe,u),b(c,Sc,u),e(Sc,P0),e(P0,g1e),g(QA,g1e,null),e(Sc,_gr),e(Sc,h1e),e(h1e,ugr),b(c,BBe,u),b(c,wr,u),g(WA,wr,null),e(wr,bgr),e(wr,Rc),e(Rc,Fgr),e(Rc,PX),e(PX,vgr),e(Rc,Tgr),e(Rc,$X),e($X,Mgr),e(Rc,Egr),e(wr,Cgr),e(wr,HA),e(HA,wgr),e(HA,p1e),e(p1e,Agr),e(HA,ygr),e(wr,Lgr),e(wr,Ft),g(UA,Ft,null),e(Ft,xgr),e(Ft,_1e),e(_1e,kgr),e(Ft,Sgr),e(Ft,Bc),e(Bc,Rgr),e(Bc,u1e),e(u1e,Bgr),e(Bc,Pgr),e(Bc,IX),e(IX,$gr),e(Bc,Igr),e(Ft,qgr),e(Ft,b1e),e(b1e,Ngr),e(Ft,jgr),g(JA,Ft,null),e(wr,Dgr),e(wr,vo),g(YA,vo,null),e(vo,Ggr),e(vo,F1e),e(F1e,Ogr),e(vo,Vgr),e(vo,Mn),e(Mn,Xgr),e(Mn,v1e),e(v1e,zgr),e(Mn,Qgr),e(Mn,T1e),e(T1e,Wgr),e(Mn,Hgr),e(Mn,M1e),e(M1e,Ugr),e(Mn,Jgr),e(vo,Ygr),e(vo,V),e(V,$0),e($0,E1e),e(E1e,Kgr),e($0,Zgr),e($0,qX),e(qX,ehr),e($0,ohr),e(V,rhr),e(V,I0),e(I0,C1e),e(C1e,thr),e(I0,ahr),e(I0,NX),e(NX,nhr),e(I0,shr),e(V,lhr),e(V,q0),e(q0,w1e),e(w1e,ihr),e(q0,dhr),e(q0,jX),e(jX,chr),e(q0,fhr),e(V,mhr),e(V,N0),e(N0,A1e),e(A1e,ghr),e(N0,hhr),e(N0,DX),e(DX,phr),e(N0,_hr),e(V,uhr),e(V,j0),e(j0,y1e),e(y1e,bhr),e(j0,Fhr),e(j0,GX),e(GX,vhr),e(j0,Thr),e(V,Mhr),e(V,D0),e(D0,L1e),e(L1e,Ehr),e(D0,Chr),e(D0,OX),e(OX,whr),e(D0,Ahr),e(V,yhr),e(V,G0),e(G0,x1e),e(x1e,Lhr),e(G0,xhr),e(G0,VX),e(VX,khr),e(G0,Shr),e(V,Rhr),e(V,O0),e(O0,k1e),e(k1e,Bhr),e(O0,Phr),e(O0,XX),e(XX,$hr),e(O0,Ihr),e(V,qhr),e(V,V0),e(V0,S1e),e(S1e,Nhr),e(V0,jhr),e(V0,zX),e(zX,Dhr),e(V0,Ghr),e(V,Ohr),e(V,X0),e(X0,R1e),e(R1e,Vhr),e(X0,Xhr),e(X0,QX),e(QX,zhr),e(X0,Qhr),e(V,Whr),e(V,z0),e(z0,B1e),e(B1e,Hhr),e(z0,Uhr),e(z0,WX),e(WX,Jhr),e(z0,Yhr),e(V,Khr),e(V,Q0),e(Q0,P1e),e(P1e,Zhr),e(Q0,epr),e(Q0,HX),e(HX,opr),e(Q0,rpr),e(V,tpr),e(V,W0),e(W0,$1e),e($1e,apr),e(W0,npr),e(W0,UX),e(UX,spr),e(W0,lpr),e(V,ipr),e(V,H0),e(H0,I1e),e(I1e,dpr),e(H0,cpr),e(H0,JX),e(JX,fpr),e(H0,mpr),e(V,gpr),e(V,U0),e(U0,q1e),e(q1e,hpr),e(U0,ppr),e(U0,YX),e(YX,_pr),e(U0,upr),e(V,bpr),e(V,J0),e(J0,N1e),e(N1e,Fpr),e(J0,vpr),e(J0,KX),e(KX,Tpr),e(J0,Mpr),e(V,Epr),e(V,Y0),e(Y0,j1e),e(j1e,Cpr),e(Y0,wpr),e(Y0,ZX),e(ZX,Apr),e(Y0,ypr),e(V,Lpr),e(V,K0),e(K0,D1e),e(D1e,xpr),e(K0,kpr),e(K0,ez),e(ez,Spr),e(K0,Rpr),e(V,Bpr),e(V,Z0),e(Z0,G1e),e(G1e,Ppr),e(Z0,$pr),e(Z0,oz),e(oz,Ipr),e(Z0,qpr),e(V,Npr),e(V,eT),e(eT,O1e),e(O1e,jpr),e(eT,Dpr),e(eT,rz),e(rz,Gpr),e(eT,Opr),e(V,Vpr),e(V,oT),e(oT,V1e),e(V1e,Xpr),e(oT,zpr),e(oT,tz),e(tz,Qpr),e(oT,Wpr),e(V,Hpr),e(V,rT),e(rT,X1e),e(X1e,Upr),e(rT,Jpr),e(rT,az),e(az,Ypr),e(rT,Kpr),e(V,Zpr),e(V,tT),e(tT,z1e),e(z1e,e_r),e(tT,o_r),e(tT,nz),e(nz,r_r),e(tT,t_r),e(V,a_r),e(V,aT),e(aT,Q1e),e(Q1e,n_r),e(aT,s_r),e(aT,sz),e(sz,l_r),e(aT,i_r),e(V,d_r),e(V,nT),e(nT,W1e),e(W1e,c_r),e(nT,f_r),e(nT,lz),e(lz,m_r),e(nT,g_r),e(V,h_r),e(V,sT),e(sT,H1e),e(H1e,p_r),e(sT,__r),e(sT,iz),e(iz,u_r),e(sT,b_r),e(vo,F_r),e(vo,U1e),e(U1e,v_r),e(vo,T_r),g(KA,vo,null),b(c,PBe,u),b(c,Pc,u),e(Pc,lT),e(lT,J1e),g(ZA,J1e,null),e(Pc,M_r),e(Pc,Y1e),e(Y1e,E_r),b(c,$Be,u),b(c,Ar,u),g(ey,Ar,null),e(Ar,C_r),e(Ar,$c),e($c,w_r),e($c,dz),e(dz,A_r),e($c,y_r),e($c,cz),e(cz,L_r),e($c,x_r),e(Ar,k_r),e(Ar,oy),e(oy,S_r),e(oy,K1e),e(K1e,R_r),e(oy,B_r),e(Ar,P_r),e(Ar,vt),g(ry,vt,null),e(vt,$_r),e(vt,Z1e),e(Z1e,I_r),e(vt,q_r),e(vt,Ic),e(Ic,N_r),e(Ic,e8e),e(e8e,j_r),e(Ic,D_r),e(Ic,fz),e(fz,G_r),e(Ic,O_r),e(vt,V_r),e(vt,o8e),e(o8e,X_r),e(vt,z_r),g(ty,vt,null),e(Ar,Q_r),e(Ar,To),g(ay,To,null),e(To,W_r),e(To,r8e),e(r8e,H_r),e(To,U_r),e(To,En),e(En,J_r),e(En,t8e),e(t8e,Y_r),e(En,K_r),e(En,a8e),e(a8e,Z_r),e(En,eur),e(En,n8e),e(n8e,our),e(En,rur),e(To,tur),e(To,se),e(se,iT),e(iT,s8e),e(s8e,aur),e(iT,nur),e(iT,mz),e(mz,sur),e(iT,lur),e(se,iur),e(se,dT),e(dT,l8e),e(l8e,dur),e(dT,cur),e(dT,gz),e(gz,fur),e(dT,mur),e(se,gur),e(se,cT),e(cT,i8e),e(i8e,hur),e(cT,pur),e(cT,hz),e(hz,_ur),e(cT,uur),e(se,bur),e(se,fT),e(fT,d8e),e(d8e,Fur),e(fT,vur),e(fT,pz),e(pz,Tur),e(fT,Mur),e(se,Eur),e(se,mT),e(mT,c8e),e(c8e,Cur),e(mT,wur),e(mT,_z),e(_z,Aur),e(mT,yur),e(se,Lur),e(se,gT),e(gT,f8e),e(f8e,xur),e(gT,kur),e(gT,uz),e(uz,Sur),e(gT,Rur),e(se,Bur),e(se,hT),e(hT,m8e),e(m8e,Pur),e(hT,$ur),e(hT,bz),e(bz,Iur),e(hT,qur),e(se,Nur),e(se,pT),e(pT,g8e),e(g8e,jur),e(pT,Dur),e(pT,Fz),e(Fz,Gur),e(pT,Our),e(se,Vur),e(se,_T),e(_T,h8e),e(h8e,Xur),e(_T,zur),e(_T,vz),e(vz,Qur),e(_T,Wur),e(se,Hur),e(se,uT),e(uT,p8e),e(p8e,Uur),e(uT,Jur),e(uT,Tz),e(Tz,Yur),e(uT,Kur),e(se,Zur),e(se,bT),e(bT,_8e),e(_8e,e1r),e(bT,o1r),e(bT,Mz),e(Mz,r1r),e(bT,t1r),e(se,a1r),e(se,FT),e(FT,u8e),e(u8e,n1r),e(FT,s1r),e(FT,Ez),e(Ez,l1r),e(FT,i1r),e(se,d1r),e(se,vT),e(vT,b8e),e(b8e,c1r),e(vT,f1r),e(vT,Cz),e(Cz,m1r),e(vT,g1r),e(se,h1r),e(se,TT),e(TT,F8e),e(F8e,p1r),e(TT,_1r),e(TT,wz),e(wz,u1r),e(TT,b1r),e(se,F1r),e(se,MT),e(MT,v8e),e(v8e,v1r),e(MT,T1r),e(MT,Az),e(Az,M1r),e(MT,E1r),e(se,C1r),e(se,ET),e(ET,T8e),e(T8e,w1r),e(ET,A1r),e(ET,yz),e(yz,y1r),e(ET,L1r),e(se,x1r),e(se,CT),e(CT,M8e),e(M8e,k1r),e(CT,S1r),e(CT,Lz),e(Lz,R1r),e(CT,B1r),e(To,P1r),e(To,E8e),e(E8e,$1r),e(To,I1r),g(ny,To,null),b(c,IBe,u),b(c,qc,u),e(qc,wT),e(wT,C8e),g(sy,C8e,null),e(qc,q1r),e(qc,w8e),e(w8e,N1r),b(c,qBe,u),b(c,yr,u),g(ly,yr,null),e(yr,j1r),e(yr,Nc),e(Nc,D1r),e(Nc,xz),e(xz,G1r),e(Nc,O1r),e(Nc,kz),e(kz,V1r),e(Nc,X1r),e(yr,z1r),e(yr,iy),e(iy,Q1r),e(iy,A8e),e(A8e,W1r),e(iy,H1r),e(yr,U1r),e(yr,Tt),g(dy,Tt,null),e(Tt,J1r),e(Tt,y8e),e(y8e,Y1r),e(Tt,K1r),e(Tt,jc),e(jc,Z1r),e(jc,L8e),e(L8e,e8r),e(jc,o8r),e(jc,Sz),e(Sz,r8r),e(jc,t8r),e(Tt,a8r),e(Tt,x8e),e(x8e,n8r),e(Tt,s8r),g(cy,Tt,null),e(yr,l8r),e(yr,Mo),g(fy,Mo,null),e(Mo,i8r),e(Mo,k8e),e(k8e,d8r),e(Mo,c8r),e(Mo,Cn),e(Cn,f8r),e(Cn,S8e),e(S8e,m8r),e(Cn,g8r),e(Cn,R8e),e(R8e,h8r),e(Cn,p8r),e(Cn,B8e),e(B8e,_8r),e(Cn,u8r),e(Mo,b8r),e(Mo,P8e),e(P8e,AT),e(AT,$8e),e($8e,F8r),e(AT,v8r),e(AT,Rz),e(Rz,T8r),e(AT,M8r),e(Mo,E8r),e(Mo,I8e),e(I8e,C8r),e(Mo,w8r),g(my,Mo,null),b(c,NBe,u),b(c,Dc,u),e(Dc,yT),e(yT,q8e),g(gy,q8e,null),e(Dc,A8r),e(Dc,N8e),e(N8e,y8r),b(c,jBe,u),b(c,Lr,u),g(hy,Lr,null),e(Lr,L8r),e(Lr,Gc),e(Gc,x8r),e(Gc,Bz),e(Bz,k8r),e(Gc,S8r),e(Gc,Pz),e(Pz,R8r),e(Gc,B8r),e(Lr,P8r),e(Lr,py),e(py,$8r),e(py,j8e),e(j8e,I8r),e(py,q8r),e(Lr,N8r),e(Lr,Mt),g(_y,Mt,null),e(Mt,j8r),e(Mt,D8e),e(D8e,D8r),e(Mt,G8r),e(Mt,Oc),e(Oc,O8r),e(Oc,G8e),e(G8e,V8r),e(Oc,X8r),e(Oc,$z),e($z,z8r),e(Oc,Q8r),e(Mt,W8r),e(Mt,O8e),e(O8e,H8r),e(Mt,U8r),g(uy,Mt,null),e(Lr,J8r),e(Lr,Eo),g(by,Eo,null),e(Eo,Y8r),e(Eo,V8e),e(V8e,K8r),e(Eo,Z8r),e(Eo,wn),e(wn,ebr),e(wn,X8e),e(X8e,obr),e(wn,rbr),e(wn,z8e),e(z8e,tbr),e(wn,abr),e(wn,Q8e),e(Q8e,nbr),e(wn,sbr),e(Eo,lbr),e(Eo,Y),e(Y,LT),e(LT,W8e),e(W8e,ibr),e(LT,dbr),e(LT,Iz),e(Iz,cbr),e(LT,fbr),e(Y,mbr),e(Y,xT),e(xT,H8e),e(H8e,gbr),e(xT,hbr),e(xT,qz),e(qz,pbr),e(xT,_br),e(Y,ubr),e(Y,kT),e(kT,U8e),e(U8e,bbr),e(kT,Fbr),e(kT,Nz),e(Nz,vbr),e(kT,Tbr),e(Y,Mbr),e(Y,ST),e(ST,J8e),e(J8e,Ebr),e(ST,Cbr),e(ST,jz),e(jz,wbr),e(ST,Abr),e(Y,ybr),e(Y,RT),e(RT,Y8e),e(Y8e,Lbr),e(RT,xbr),e(RT,Dz),e(Dz,kbr),e(RT,Sbr),e(Y,Rbr),e(Y,BT),e(BT,K8e),e(K8e,Bbr),e(BT,Pbr),e(BT,Gz),e(Gz,$br),e(BT,Ibr),e(Y,qbr),e(Y,PT),e(PT,Z8e),e(Z8e,Nbr),e(PT,jbr),e(PT,Oz),e(Oz,Dbr),e(PT,Gbr),e(Y,Obr),e(Y,$T),e($T,ebe),e(ebe,Vbr),e($T,Xbr),e($T,Vz),e(Vz,zbr),e($T,Qbr),e(Y,Wbr),e(Y,IT),e(IT,obe),e(obe,Hbr),e(IT,Ubr),e(IT,Xz),e(Xz,Jbr),e(IT,Ybr),e(Y,Kbr),e(Y,qT),e(qT,rbe),e(rbe,Zbr),e(qT,e2r),e(qT,zz),e(zz,o2r),e(qT,r2r),e(Y,t2r),e(Y,NT),e(NT,tbe),e(tbe,a2r),e(NT,n2r),e(NT,Qz),e(Qz,s2r),e(NT,l2r),e(Y,i2r),e(Y,jT),e(jT,abe),e(abe,d2r),e(jT,c2r),e(jT,Wz),e(Wz,f2r),e(jT,m2r),e(Y,g2r),e(Y,DT),e(DT,nbe),e(nbe,h2r),e(DT,p2r),e(DT,Hz),e(Hz,_2r),e(DT,u2r),e(Y,b2r),e(Y,GT),e(GT,sbe),e(sbe,F2r),e(GT,v2r),e(GT,Uz),e(Uz,T2r),e(GT,M2r),e(Y,E2r),e(Y,OT),e(OT,lbe),e(lbe,C2r),e(OT,w2r),e(OT,Jz),e(Jz,A2r),e(OT,y2r),e(Y,L2r),e(Y,VT),e(VT,ibe),e(ibe,x2r),e(VT,k2r),e(VT,Yz),e(Yz,S2r),e(VT,R2r),e(Y,B2r),e(Y,XT),e(XT,dbe),e(dbe,P2r),e(XT,$2r),e(XT,Kz),e(Kz,I2r),e(XT,q2r),e(Y,N2r),e(Y,zT),e(zT,cbe),e(cbe,j2r),e(zT,D2r),e(zT,Zz),e(Zz,G2r),e(zT,O2r),e(Y,V2r),e(Y,QT),e(QT,fbe),e(fbe,X2r),e(QT,z2r),e(QT,eQ),e(eQ,Q2r),e(QT,W2r),e(Y,H2r),e(Y,WT),e(WT,mbe),e(mbe,U2r),e(WT,J2r),e(WT,oQ),e(oQ,Y2r),e(WT,K2r),e(Eo,Z2r),e(Eo,gbe),e(gbe,e6r),e(Eo,o6r),g(Fy,Eo,null),b(c,DBe,u),b(c,Vc,u),e(Vc,HT),e(HT,hbe),g(vy,hbe,null),e(Vc,r6r),e(Vc,pbe),e(pbe,t6r),b(c,GBe,u),b(c,xr,u),g(Ty,xr,null),e(xr,a6r),e(xr,Xc),e(Xc,n6r),e(Xc,rQ),e(rQ,s6r),e(Xc,l6r),e(Xc,tQ),e(tQ,i6r),e(Xc,d6r),e(xr,c6r),e(xr,My),e(My,f6r),e(My,_be),e(_be,m6r),e(My,g6r),e(xr,h6r),e(xr,Et),g(Ey,Et,null),e(Et,p6r),e(Et,ube),e(ube,_6r),e(Et,u6r),e(Et,zc),e(zc,b6r),e(zc,bbe),e(bbe,F6r),e(zc,v6r),e(zc,aQ),e(aQ,T6r),e(zc,M6r),e(Et,E6r),e(Et,Fbe),e(Fbe,C6r),e(Et,w6r),g(Cy,Et,null),e(xr,A6r),e(xr,Co),g(wy,Co,null),e(Co,y6r),e(Co,vbe),e(vbe,L6r),e(Co,x6r),e(Co,An),e(An,k6r),e(An,Tbe),e(Tbe,S6r),e(An,R6r),e(An,Mbe),e(Mbe,B6r),e(An,P6r),e(An,Ebe),e(Ebe,$6r),e(An,I6r),e(Co,q6r),e(Co,K),e(K,UT),e(UT,Cbe),e(Cbe,N6r),e(UT,j6r),e(UT,nQ),e(nQ,D6r),e(UT,G6r),e(K,O6r),e(K,JT),e(JT,wbe),e(wbe,V6r),e(JT,X6r),e(JT,sQ),e(sQ,z6r),e(JT,Q6r),e(K,W6r),e(K,YT),e(YT,Abe),e(Abe,H6r),e(YT,U6r),e(YT,lQ),e(lQ,J6r),e(YT,Y6r),e(K,K6r),e(K,KT),e(KT,ybe),e(ybe,Z6r),e(KT,eFr),e(KT,iQ),e(iQ,oFr),e(KT,rFr),e(K,tFr),e(K,ZT),e(ZT,Lbe),e(Lbe,aFr),e(ZT,nFr),e(ZT,dQ),e(dQ,sFr),e(ZT,lFr),e(K,iFr),e(K,eM),e(eM,xbe),e(xbe,dFr),e(eM,cFr),e(eM,cQ),e(cQ,fFr),e(eM,mFr),e(K,gFr),e(K,oM),e(oM,kbe),e(kbe,hFr),e(oM,pFr),e(oM,fQ),e(fQ,_Fr),e(oM,uFr),e(K,bFr),e(K,rM),e(rM,Sbe),e(Sbe,FFr),e(rM,vFr),e(rM,mQ),e(mQ,TFr),e(rM,MFr),e(K,EFr),e(K,tM),e(tM,Rbe),e(Rbe,CFr),e(tM,wFr),e(tM,gQ),e(gQ,AFr),e(tM,yFr),e(K,LFr),e(K,aM),e(aM,Bbe),e(Bbe,xFr),e(aM,kFr),e(aM,hQ),e(hQ,SFr),e(aM,RFr),e(K,BFr),e(K,nM),e(nM,Pbe),e(Pbe,PFr),e(nM,$Fr),e(nM,pQ),e(pQ,IFr),e(nM,qFr),e(K,NFr),e(K,sM),e(sM,$be),e($be,jFr),e(sM,DFr),e(sM,_Q),e(_Q,GFr),e(sM,OFr),e(K,VFr),e(K,lM),e(lM,Ibe),e(Ibe,XFr),e(lM,zFr),e(lM,uQ),e(uQ,QFr),e(lM,WFr),e(K,HFr),e(K,iM),e(iM,qbe),e(qbe,UFr),e(iM,JFr),e(iM,bQ),e(bQ,YFr),e(iM,KFr),e(K,ZFr),e(K,dM),e(dM,Nbe),e(Nbe,evr),e(dM,ovr),e(dM,FQ),e(FQ,rvr),e(dM,tvr),e(K,avr),e(K,cM),e(cM,jbe),e(jbe,nvr),e(cM,svr),e(cM,vQ),e(vQ,lvr),e(cM,ivr),e(K,dvr),e(K,fM),e(fM,Dbe),e(Dbe,cvr),e(fM,fvr),e(fM,TQ),e(TQ,mvr),e(fM,gvr),e(K,hvr),e(K,mM),e(mM,Gbe),e(Gbe,pvr),e(mM,_vr),e(mM,MQ),e(MQ,uvr),e(mM,bvr),e(K,Fvr),e(K,gM),e(gM,Obe),e(Obe,vvr),e(gM,Tvr),e(gM,EQ),e(EQ,Mvr),e(gM,Evr),e(K,Cvr),e(K,hM),e(hM,Vbe),e(Vbe,wvr),e(hM,Avr),e(hM,CQ),e(CQ,yvr),e(hM,Lvr),e(Co,xvr),e(Co,Xbe),e(Xbe,kvr),e(Co,Svr),g(Ay,Co,null),b(c,OBe,u),b(c,Qc,u),e(Qc,pM),e(pM,zbe),g(yy,zbe,null),e(Qc,Rvr),e(Qc,Qbe),e(Qbe,Bvr),b(c,VBe,u),b(c,kr,u),g(Ly,kr,null),e(kr,Pvr),e(kr,Wc),e(Wc,$vr),e(Wc,wQ),e(wQ,Ivr),e(Wc,qvr),e(Wc,AQ),e(AQ,Nvr),e(Wc,jvr),e(kr,Dvr),e(kr,xy),e(xy,Gvr),e(xy,Wbe),e(Wbe,Ovr),e(xy,Vvr),e(kr,Xvr),e(kr,Ct),g(ky,Ct,null),e(Ct,zvr),e(Ct,Hbe),e(Hbe,Qvr),e(Ct,Wvr),e(Ct,Hc),e(Hc,Hvr),e(Hc,Ube),e(Ube,Uvr),e(Hc,Jvr),e(Hc,yQ),e(yQ,Yvr),e(Hc,Kvr),e(Ct,Zvr),e(Ct,Jbe),e(Jbe,e0r),e(Ct,o0r),g(Sy,Ct,null),e(kr,r0r),e(kr,wo),g(Ry,wo,null),e(wo,t0r),e(wo,Ybe),e(Ybe,a0r),e(wo,n0r),e(wo,yn),e(yn,s0r),e(yn,Kbe),e(Kbe,l0r),e(yn,i0r),e(yn,Zbe),e(Zbe,d0r),e(yn,c0r),e(yn,e2e),e(e2e,f0r),e(yn,m0r),e(wo,g0r),e(wo,o2e),e(o2e,_M),e(_M,r2e),e(r2e,h0r),e(_M,p0r),e(_M,LQ),e(LQ,_0r),e(_M,u0r),e(wo,b0r),e(wo,t2e),e(t2e,F0r),e(wo,v0r),g(By,wo,null),b(c,XBe,u),b(c,Uc,u),e(Uc,uM),e(uM,a2e),g(Py,a2e,null),e(Uc,T0r),e(Uc,n2e),e(n2e,M0r),b(c,zBe,u),b(c,Sr,u),g($y,Sr,null),e(Sr,E0r),e(Sr,Jc),e(Jc,C0r),e(Jc,xQ),e(xQ,w0r),e(Jc,A0r),e(Jc,kQ),e(kQ,y0r),e(Jc,L0r),e(Sr,x0r),e(Sr,Iy),e(Iy,k0r),e(Iy,s2e),e(s2e,S0r),e(Iy,R0r),e(Sr,B0r),e(Sr,wt),g(qy,wt,null),e(wt,P0r),e(wt,l2e),e(l2e,$0r),e(wt,I0r),e(wt,Yc),e(Yc,q0r),e(Yc,i2e),e(i2e,N0r),e(Yc,j0r),e(Yc,SQ),e(SQ,D0r),e(Yc,G0r),e(wt,O0r),e(wt,d2e),e(d2e,V0r),e(wt,X0r),g(Ny,wt,null),e(Sr,z0r),e(Sr,Ao),g(jy,Ao,null),e(Ao,Q0r),e(Ao,c2e),e(c2e,W0r),e(Ao,H0r),e(Ao,Ln),e(Ln,U0r),e(Ln,f2e),e(f2e,J0r),e(Ln,Y0r),e(Ln,m2e),e(m2e,K0r),e(Ln,Z0r),e(Ln,g2e),e(g2e,eTr),e(Ln,oTr),e(Ao,rTr),e(Ao,h2e),e(h2e,bM),e(bM,p2e),e(p2e,tTr),e(bM,aTr),e(bM,RQ),e(RQ,nTr),e(bM,sTr),e(Ao,lTr),e(Ao,_2e),e(_2e,iTr),e(Ao,dTr),g(Dy,Ao,null),b(c,QBe,u),b(c,Kc,u),e(Kc,FM),e(FM,u2e),g(Gy,u2e,null),e(Kc,cTr),e(Kc,b2e),e(b2e,fTr),b(c,WBe,u),b(c,Rr,u),g(Oy,Rr,null),e(Rr,mTr),e(Rr,Zc),e(Zc,gTr),e(Zc,BQ),e(BQ,hTr),e(Zc,pTr),e(Zc,PQ),e(PQ,_Tr),e(Zc,uTr),e(Rr,bTr),e(Rr,Vy),e(Vy,FTr),e(Vy,F2e),e(F2e,vTr),e(Vy,TTr),e(Rr,MTr),e(Rr,At),g(Xy,At,null),e(At,ETr),e(At,v2e),e(v2e,CTr),e(At,wTr),e(At,ef),e(ef,ATr),e(ef,T2e),e(T2e,yTr),e(ef,LTr),e(ef,$Q),e($Q,xTr),e(ef,kTr),e(At,STr),e(At,M2e),e(M2e,RTr),e(At,BTr),g(zy,At,null),e(Rr,PTr),e(Rr,yo),g(Qy,yo,null),e(yo,$Tr),e(yo,E2e),e(E2e,ITr),e(yo,qTr),e(yo,xn),e(xn,NTr),e(xn,C2e),e(C2e,jTr),e(xn,DTr),e(xn,w2e),e(w2e,GTr),e(xn,OTr),e(xn,A2e),e(A2e,VTr),e(xn,XTr),e(yo,zTr),e(yo,z),e(z,vM),e(vM,y2e),e(y2e,QTr),e(vM,WTr),e(vM,IQ),e(IQ,HTr),e(vM,UTr),e(z,JTr),e(z,TM),e(TM,L2e),e(L2e,YTr),e(TM,KTr),e(TM,qQ),e(qQ,ZTr),e(TM,eMr),e(z,oMr),e(z,MM),e(MM,x2e),e(x2e,rMr),e(MM,tMr),e(MM,NQ),e(NQ,aMr),e(MM,nMr),e(z,sMr),e(z,EM),e(EM,k2e),e(k2e,lMr),e(EM,iMr),e(EM,jQ),e(jQ,dMr),e(EM,cMr),e(z,fMr),e(z,CM),e(CM,S2e),e(S2e,mMr),e(CM,gMr),e(CM,DQ),e(DQ,hMr),e(CM,pMr),e(z,_Mr),e(z,wM),e(wM,R2e),e(R2e,uMr),e(wM,bMr),e(wM,GQ),e(GQ,FMr),e(wM,vMr),e(z,TMr),e(z,AM),e(AM,B2e),e(B2e,MMr),e(AM,EMr),e(AM,OQ),e(OQ,CMr),e(AM,wMr),e(z,AMr),e(z,yM),e(yM,P2e),e(P2e,yMr),e(yM,LMr),e(yM,VQ),e(VQ,xMr),e(yM,kMr),e(z,SMr),e(z,LM),e(LM,$2e),e($2e,RMr),e(LM,BMr),e(LM,XQ),e(XQ,PMr),e(LM,$Mr),e(z,IMr),e(z,xM),e(xM,I2e),e(I2e,qMr),e(xM,NMr),e(xM,zQ),e(zQ,jMr),e(xM,DMr),e(z,GMr),e(z,kM),e(kM,q2e),e(q2e,OMr),e(kM,VMr),e(kM,QQ),e(QQ,XMr),e(kM,zMr),e(z,QMr),e(z,SM),e(SM,N2e),e(N2e,WMr),e(SM,HMr),e(SM,WQ),e(WQ,UMr),e(SM,JMr),e(z,YMr),e(z,RM),e(RM,j2e),e(j2e,KMr),e(RM,ZMr),e(RM,HQ),e(HQ,e4r),e(RM,o4r),e(z,r4r),e(z,BM),e(BM,D2e),e(D2e,t4r),e(BM,a4r),e(BM,UQ),e(UQ,n4r),e(BM,s4r),e(z,l4r),e(z,PM),e(PM,G2e),e(G2e,i4r),e(PM,d4r),e(PM,JQ),e(JQ,c4r),e(PM,f4r),e(z,m4r),e(z,$M),e($M,O2e),e(O2e,g4r),e($M,h4r),e($M,YQ),e(YQ,p4r),e($M,_4r),e(z,u4r),e(z,IM),e(IM,V2e),e(V2e,b4r),e(IM,F4r),e(IM,KQ),e(KQ,v4r),e(IM,T4r),e(z,M4r),e(z,qM),e(qM,X2e),e(X2e,E4r),e(qM,C4r),e(qM,ZQ),e(ZQ,w4r),e(qM,A4r),e(z,y4r),e(z,NM),e(NM,z2e),e(z2e,L4r),e(NM,x4r),e(NM,eW),e(eW,k4r),e(NM,S4r),e(z,R4r),e(z,jM),e(jM,Q2e),e(Q2e,B4r),e(jM,P4r),e(jM,oW),e(oW,$4r),e(jM,I4r),e(z,q4r),e(z,DM),e(DM,W2e),e(W2e,N4r),e(DM,j4r),e(DM,rW),e(rW,D4r),e(DM,G4r),e(z,O4r),e(z,GM),e(GM,H2e),e(H2e,V4r),e(GM,X4r),e(GM,tW),e(tW,z4r),e(GM,Q4r),e(z,W4r),e(z,OM),e(OM,U2e),e(U2e,H4r),e(OM,U4r),e(OM,aW),e(aW,J4r),e(OM,Y4r),e(z,K4r),e(z,VM),e(VM,J2e),e(J2e,Z4r),e(VM,eEr),e(VM,nW),e(nW,oEr),e(VM,rEr),e(z,tEr),e(z,XM),e(XM,Y2e),e(Y2e,aEr),e(XM,nEr),e(XM,sW),e(sW,sEr),e(XM,lEr),e(yo,iEr),e(yo,K2e),e(K2e,dEr),e(yo,cEr),g(Wy,yo,null),b(c,HBe,u),b(c,of,u),e(of,zM),e(zM,Z2e),g(Hy,Z2e,null),e(of,fEr),e(of,e6e),e(e6e,mEr),b(c,UBe,u),b(c,Br,u),g(Uy,Br,null),e(Br,gEr),e(Br,rf),e(rf,hEr),e(rf,lW),e(lW,pEr),e(rf,_Er),e(rf,iW),e(iW,uEr),e(rf,bEr),e(Br,FEr),e(Br,Jy),e(Jy,vEr),e(Jy,o6e),e(o6e,TEr),e(Jy,MEr),e(Br,EEr),e(Br,yt),g(Yy,yt,null),e(yt,CEr),e(yt,r6e),e(r6e,wEr),e(yt,AEr),e(yt,tf),e(tf,yEr),e(tf,t6e),e(t6e,LEr),e(tf,xEr),e(tf,dW),e(dW,kEr),e(tf,SEr),e(yt,REr),e(yt,a6e),e(a6e,BEr),e(yt,PEr),g(Ky,yt,null),e(Br,$Er),e(Br,Lo),g(Zy,Lo,null),e(Lo,IEr),e(Lo,n6e),e(n6e,qEr),e(Lo,NEr),e(Lo,kn),e(kn,jEr),e(kn,s6e),e(s6e,DEr),e(kn,GEr),e(kn,l6e),e(l6e,OEr),e(kn,VEr),e(kn,i6e),e(i6e,XEr),e(kn,zEr),e(Lo,QEr),e(Lo,ca),e(ca,QM),e(QM,d6e),e(d6e,WEr),e(QM,HEr),e(QM,cW),e(cW,UEr),e(QM,JEr),e(ca,YEr),e(ca,WM),e(WM,c6e),e(c6e,KEr),e(WM,ZEr),e(WM,fW),e(fW,e5r),e(WM,o5r),e(ca,r5r),e(ca,HM),e(HM,f6e),e(f6e,t5r),e(HM,a5r),e(HM,mW),e(mW,n5r),e(HM,s5r),e(ca,l5r),e(ca,UM),e(UM,m6e),e(m6e,i5r),e(UM,d5r),e(UM,gW),e(gW,c5r),e(UM,f5r),e(ca,m5r),e(ca,JM),e(JM,g6e),e(g6e,g5r),e(JM,h5r),e(JM,hW),e(hW,p5r),e(JM,_5r),e(Lo,u5r),e(Lo,h6e),e(h6e,b5r),e(Lo,F5r),g(eL,Lo,null),b(c,JBe,u),b(c,af,u),e(af,YM),e(YM,p6e),g(oL,p6e,null),e(af,v5r),e(af,_6e),e(_6e,T5r),b(c,YBe,u),b(c,Pr,u),g(rL,Pr,null),e(Pr,M5r),e(Pr,nf),e(nf,E5r),e(nf,pW),e(pW,C5r),e(nf,w5r),e(nf,_W),e(_W,A5r),e(nf,y5r),e(Pr,L5r),e(Pr,tL),e(tL,x5r),e(tL,u6e),e(u6e,k5r),e(tL,S5r),e(Pr,R5r),e(Pr,Lt),g(aL,Lt,null),e(Lt,B5r),e(Lt,b6e),e(b6e,P5r),e(Lt,$5r),e(Lt,sf),e(sf,I5r),e(sf,F6e),e(F6e,q5r),e(sf,N5r),e(sf,uW),e(uW,j5r),e(sf,D5r),e(Lt,G5r),e(Lt,v6e),e(v6e,O5r),e(Lt,V5r),g(nL,Lt,null),e(Pr,X5r),e(Pr,xo),g(sL,xo,null),e(xo,z5r),e(xo,T6e),e(T6e,Q5r),e(xo,W5r),e(xo,Sn),e(Sn,H5r),e(Sn,M6e),e(M6e,U5r),e(Sn,J5r),e(Sn,E6e),e(E6e,Y5r),e(Sn,K5r),e(Sn,C6e),e(C6e,Z5r),e(Sn,e3r),e(xo,o3r),e(xo,me),e(me,KM),e(KM,w6e),e(w6e,r3r),e(KM,t3r),e(KM,bW),e(bW,a3r),e(KM,n3r),e(me,s3r),e(me,ZM),e(ZM,A6e),e(A6e,l3r),e(ZM,i3r),e(ZM,FW),e(FW,d3r),e(ZM,c3r),e(me,f3r),e(me,e4),e(e4,y6e),e(y6e,m3r),e(e4,g3r),e(e4,vW),e(vW,h3r),e(e4,p3r),e(me,_3r),e(me,o4),e(o4,L6e),e(L6e,u3r),e(o4,b3r),e(o4,TW),e(TW,F3r),e(o4,v3r),e(me,T3r),e(me,r4),e(r4,x6e),e(x6e,M3r),e(r4,E3r),e(r4,MW),e(MW,C3r),e(r4,w3r),e(me,A3r),e(me,t4),e(t4,k6e),e(k6e,y3r),e(t4,L3r),e(t4,EW),e(EW,x3r),e(t4,k3r),e(me,S3r),e(me,a4),e(a4,S6e),e(S6e,R3r),e(a4,B3r),e(a4,CW),e(CW,P3r),e(a4,$3r),e(me,I3r),e(me,n4),e(n4,R6e),e(R6e,q3r),e(n4,N3r),e(n4,wW),e(wW,j3r),e(n4,D3r),e(me,G3r),e(me,s4),e(s4,B6e),e(B6e,O3r),e(s4,V3r),e(s4,AW),e(AW,X3r),e(s4,z3r),e(me,Q3r),e(me,l4),e(l4,P6e),e(P6e,W3r),e(l4,H3r),e(l4,yW),e(yW,U3r),e(l4,J3r),e(me,Y3r),e(me,i4),e(i4,$6e),e($6e,K3r),e(i4,Z3r),e(i4,LW),e(LW,eCr),e(i4,oCr),e(me,rCr),e(me,d4),e(d4,I6e),e(I6e,tCr),e(d4,aCr),e(d4,xW),e(xW,nCr),e(d4,sCr),e(xo,lCr),e(xo,q6e),e(q6e,iCr),e(xo,dCr),g(lL,xo,null),b(c,KBe,u),b(c,lf,u),e(lf,c4),e(c4,N6e),g(iL,N6e,null),e(lf,cCr),e(lf,j6e),e(j6e,fCr),b(c,ZBe,u),b(c,$r,u),g(dL,$r,null),e($r,mCr),e($r,df),e(df,gCr),e(df,kW),e(kW,hCr),e(df,pCr),e(df,SW),e(SW,_Cr),e(df,uCr),e($r,bCr),e($r,cL),e(cL,FCr),e(cL,D6e),e(D6e,vCr),e(cL,TCr),e($r,MCr),e($r,xt),g(fL,xt,null),e(xt,ECr),e(xt,G6e),e(G6e,CCr),e(xt,wCr),e(xt,cf),e(cf,ACr),e(cf,O6e),e(O6e,yCr),e(cf,LCr),e(cf,RW),e(RW,xCr),e(cf,kCr),e(xt,SCr),e(xt,V6e),e(V6e,RCr),e(xt,BCr),g(mL,xt,null),e($r,PCr),e($r,ko),g(gL,ko,null),e(ko,$Cr),e(ko,X6e),e(X6e,ICr),e(ko,qCr),e(ko,Rn),e(Rn,NCr),e(Rn,z6e),e(z6e,jCr),e(Rn,DCr),e(Rn,Q6e),e(Q6e,GCr),e(Rn,OCr),e(Rn,W6e),e(W6e,VCr),e(Rn,XCr),e(ko,zCr),e(ko,Fe),e(Fe,f4),e(f4,H6e),e(H6e,QCr),e(f4,WCr),e(f4,BW),e(BW,HCr),e(f4,UCr),e(Fe,JCr),e(Fe,m4),e(m4,U6e),e(U6e,YCr),e(m4,KCr),e(m4,PW),e(PW,ZCr),e(m4,ewr),e(Fe,owr),e(Fe,g4),e(g4,J6e),e(J6e,rwr),e(g4,twr),e(g4,$W),e($W,awr),e(g4,nwr),e(Fe,swr),e(Fe,h4),e(h4,Y6e),e(Y6e,lwr),e(h4,iwr),e(h4,IW),e(IW,dwr),e(h4,cwr),e(Fe,fwr),e(Fe,p4),e(p4,K6e),e(K6e,mwr),e(p4,gwr),e(p4,qW),e(qW,hwr),e(p4,pwr),e(Fe,_wr),e(Fe,_4),e(_4,Z6e),e(Z6e,uwr),e(_4,bwr),e(_4,NW),e(NW,Fwr),e(_4,vwr),e(Fe,Twr),e(Fe,u4),e(u4,eFe),e(eFe,Mwr),e(u4,Ewr),e(u4,jW),e(jW,Cwr),e(u4,wwr),e(Fe,Awr),e(Fe,b4),e(b4,oFe),e(oFe,ywr),e(b4,Lwr),e(b4,DW),e(DW,xwr),e(b4,kwr),e(Fe,Swr),e(Fe,F4),e(F4,rFe),e(rFe,Rwr),e(F4,Bwr),e(F4,GW),e(GW,Pwr),e(F4,$wr),e(Fe,Iwr),e(Fe,v4),e(v4,tFe),e(tFe,qwr),e(v4,Nwr),e(v4,OW),e(OW,jwr),e(v4,Dwr),e(ko,Gwr),e(ko,aFe),e(aFe,Owr),e(ko,Vwr),g(hL,ko,null),b(c,ePe,u),b(c,ff,u),e(ff,T4),e(T4,nFe),g(pL,nFe,null),e(ff,Xwr),e(ff,sFe),e(sFe,zwr),b(c,oPe,u),b(c,Ir,u),g(_L,Ir,null),e(Ir,Qwr),e(Ir,mf),e(mf,Wwr),e(mf,VW),e(VW,Hwr),e(mf,Uwr),e(mf,XW),e(XW,Jwr),e(mf,Ywr),e(Ir,Kwr),e(Ir,uL),e(uL,Zwr),e(uL,lFe),e(lFe,eAr),e(uL,oAr),e(Ir,rAr),e(Ir,kt),g(bL,kt,null),e(kt,tAr),e(kt,iFe),e(iFe,aAr),e(kt,nAr),e(kt,gf),e(gf,sAr),e(gf,dFe),e(dFe,lAr),e(gf,iAr),e(gf,zW),e(zW,dAr),e(gf,cAr),e(kt,fAr),e(kt,cFe),e(cFe,mAr),e(kt,gAr),g(FL,kt,null),e(Ir,hAr),e(Ir,So),g(vL,So,null),e(So,pAr),e(So,fFe),e(fFe,_Ar),e(So,uAr),e(So,Bn),e(Bn,bAr),e(Bn,mFe),e(mFe,FAr),e(Bn,vAr),e(Bn,gFe),e(gFe,TAr),e(Bn,MAr),e(Bn,hFe),e(hFe,EAr),e(Bn,CAr),e(So,wAr),e(So,Ee),e(Ee,M4),e(M4,pFe),e(pFe,AAr),e(M4,yAr),e(M4,QW),e(QW,LAr),e(M4,xAr),e(Ee,kAr),e(Ee,E4),e(E4,_Fe),e(_Fe,SAr),e(E4,RAr),e(E4,WW),e(WW,BAr),e(E4,PAr),e(Ee,$Ar),e(Ee,C4),e(C4,uFe),e(uFe,IAr),e(C4,qAr),e(C4,HW),e(HW,NAr),e(C4,jAr),e(Ee,DAr),e(Ee,w4),e(w4,bFe),e(bFe,GAr),e(w4,OAr),e(w4,UW),e(UW,VAr),e(w4,XAr),e(Ee,zAr),e(Ee,A4),e(A4,FFe),e(FFe,QAr),e(A4,WAr),e(A4,JW),e(JW,HAr),e(A4,UAr),e(Ee,JAr),e(Ee,y4),e(y4,vFe),e(vFe,YAr),e(y4,KAr),e(y4,YW),e(YW,ZAr),e(y4,eyr),e(Ee,oyr),e(Ee,L4),e(L4,TFe),e(TFe,ryr),e(L4,tyr),e(L4,KW),e(KW,ayr),e(L4,nyr),e(Ee,syr),e(Ee,x4),e(x4,MFe),e(MFe,lyr),e(x4,iyr),e(x4,ZW),e(ZW,dyr),e(x4,cyr),e(Ee,fyr),e(Ee,k4),e(k4,EFe),e(EFe,myr),e(k4,gyr),e(k4,eH),e(eH,hyr),e(k4,pyr),e(So,_yr),e(So,CFe),e(CFe,uyr),e(So,byr),g(TL,So,null),b(c,rPe,u),b(c,hf,u),e(hf,S4),e(S4,wFe),g(ML,wFe,null),e(hf,Fyr),e(hf,AFe),e(AFe,vyr),b(c,tPe,u),b(c,qr,u),g(EL,qr,null),e(qr,Tyr),e(qr,pf),e(pf,Myr),e(pf,oH),e(oH,Eyr),e(pf,Cyr),e(pf,rH),e(rH,wyr),e(pf,Ayr),e(qr,yyr),e(qr,CL),e(CL,Lyr),e(CL,yFe),e(yFe,xyr),e(CL,kyr),e(qr,Syr),e(qr,St),g(wL,St,null),e(St,Ryr),e(St,LFe),e(LFe,Byr),e(St,Pyr),e(St,_f),e(_f,$yr),e(_f,xFe),e(xFe,Iyr),e(_f,qyr),e(_f,tH),e(tH,Nyr),e(_f,jyr),e(St,Dyr),e(St,kFe),e(kFe,Gyr),e(St,Oyr),g(AL,St,null),e(qr,Vyr),e(qr,Ro),g(yL,Ro,null),e(Ro,Xyr),e(Ro,SFe),e(SFe,zyr),e(Ro,Qyr),e(Ro,Pn),e(Pn,Wyr),e(Pn,RFe),e(RFe,Hyr),e(Pn,Uyr),e(Pn,BFe),e(BFe,Jyr),e(Pn,Yyr),e(Pn,PFe),e(PFe,Kyr),e(Pn,Zyr),e(Ro,eLr),e(Ro,ve),e(ve,R4),e(R4,$Fe),e($Fe,oLr),e(R4,rLr),e(R4,aH),e(aH,tLr),e(R4,aLr),e(ve,nLr),e(ve,B4),e(B4,IFe),e(IFe,sLr),e(B4,lLr),e(B4,nH),e(nH,iLr),e(B4,dLr),e(ve,cLr),e(ve,P4),e(P4,qFe),e(qFe,fLr),e(P4,mLr),e(P4,sH),e(sH,gLr),e(P4,hLr),e(ve,pLr),e(ve,$4),e($4,NFe),e(NFe,_Lr),e($4,uLr),e($4,lH),e(lH,bLr),e($4,FLr),e(ve,vLr),e(ve,I4),e(I4,jFe),e(jFe,TLr),e(I4,MLr),e(I4,iH),e(iH,ELr),e(I4,CLr),e(ve,wLr),e(ve,q4),e(q4,DFe),e(DFe,ALr),e(q4,yLr),e(q4,dH),e(dH,LLr),e(q4,xLr),e(ve,kLr),e(ve,N4),e(N4,GFe),e(GFe,SLr),e(N4,RLr),e(N4,cH),e(cH,BLr),e(N4,PLr),e(ve,$Lr),e(ve,j4),e(j4,OFe),e(OFe,ILr),e(j4,qLr),e(j4,fH),e(fH,NLr),e(j4,jLr),e(ve,DLr),e(ve,D4),e(D4,VFe),e(VFe,GLr),e(D4,OLr),e(D4,mH),e(mH,VLr),e(D4,XLr),e(ve,zLr),e(ve,G4),e(G4,XFe),e(XFe,QLr),e(G4,WLr),e(G4,gH),e(gH,HLr),e(G4,ULr),e(Ro,JLr),e(Ro,zFe),e(zFe,YLr),e(Ro,KLr),g(LL,Ro,null),b(c,aPe,u),b(c,uf,u),e(uf,O4),e(O4,QFe),g(xL,QFe,null),e(uf,ZLr),e(uf,WFe),e(WFe,e7r),b(c,nPe,u),b(c,Nr,u),g(kL,Nr,null),e(Nr,o7r),e(Nr,bf),e(bf,r7r),e(bf,hH),e(hH,t7r),e(bf,a7r),e(bf,pH),e(pH,n7r),e(bf,s7r),e(Nr,l7r),e(Nr,SL),e(SL,i7r),e(SL,HFe),e(HFe,d7r),e(SL,c7r),e(Nr,f7r),e(Nr,Rt),g(RL,Rt,null),e(Rt,m7r),e(Rt,UFe),e(UFe,g7r),e(Rt,h7r),e(Rt,Ff),e(Ff,p7r),e(Ff,JFe),e(JFe,_7r),e(Ff,u7r),e(Ff,_H),e(_H,b7r),e(Ff,F7r),e(Rt,v7r),e(Rt,YFe),e(YFe,T7r),e(Rt,M7r),g(BL,Rt,null),e(Nr,E7r),e(Nr,Bo),g(PL,Bo,null),e(Bo,C7r),e(Bo,KFe),e(KFe,w7r),e(Bo,A7r),e(Bo,$n),e($n,y7r),e($n,ZFe),e(ZFe,L7r),e($n,x7r),e($n,eve),e(eve,k7r),e($n,S7r),e($n,ove),e(ove,R7r),e($n,B7r),e(Bo,P7r),e(Bo,Te),e(Te,V4),e(V4,rve),e(rve,$7r),e(V4,I7r),e(V4,uH),e(uH,q7r),e(V4,N7r),e(Te,j7r),e(Te,X4),e(X4,tve),e(tve,D7r),e(X4,G7r),e(X4,bH),e(bH,O7r),e(X4,V7r),e(Te,X7r),e(Te,z4),e(z4,ave),e(ave,z7r),e(z4,Q7r),e(z4,FH),e(FH,W7r),e(z4,H7r),e(Te,U7r),e(Te,Q4),e(Q4,nve),e(nve,J7r),e(Q4,Y7r),e(Q4,vH),e(vH,K7r),e(Q4,Z7r),e(Te,exr),e(Te,W4),e(W4,sve),e(sve,oxr),e(W4,rxr),e(W4,TH),e(TH,txr),e(W4,axr),e(Te,nxr),e(Te,H4),e(H4,lve),e(lve,sxr),e(H4,lxr),e(H4,MH),e(MH,ixr),e(H4,dxr),e(Te,cxr),e(Te,U4),e(U4,ive),e(ive,fxr),e(U4,mxr),e(U4,EH),e(EH,gxr),e(U4,hxr),e(Te,pxr),e(Te,J4),e(J4,dve),e(dve,_xr),e(J4,uxr),e(J4,CH),e(CH,bxr),e(J4,Fxr),e(Te,vxr),e(Te,Y4),e(Y4,cve),e(cve,Txr),e(Y4,Mxr),e(Y4,wH),e(wH,Exr),e(Y4,Cxr),e(Te,wxr),e(Te,K4),e(K4,fve),e(fve,Axr),e(K4,yxr),e(K4,AH),e(AH,Lxr),e(K4,xxr),e(Bo,kxr),e(Bo,mve),e(mve,Sxr),e(Bo,Rxr),g($L,Bo,null),b(c,sPe,u),b(c,vf,u),e(vf,Z4),e(Z4,gve),g(IL,gve,null),e(vf,Bxr),e(vf,hve),e(hve,Pxr),b(c,lPe,u),b(c,jr,u),g(qL,jr,null),e(jr,$xr),e(jr,Tf),e(Tf,Ixr),e(Tf,yH),e(yH,qxr),e(Tf,Nxr),e(Tf,LH),e(LH,jxr),e(Tf,Dxr),e(jr,Gxr),e(jr,NL),e(NL,Oxr),e(NL,pve),e(pve,Vxr),e(NL,Xxr),e(jr,zxr),e(jr,Bt),g(jL,Bt,null),e(Bt,Qxr),e(Bt,_ve),e(_ve,Wxr),e(Bt,Hxr),e(Bt,Mf),e(Mf,Uxr),e(Mf,uve),e(uve,Jxr),e(Mf,Yxr),e(Mf,xH),e(xH,Kxr),e(Mf,Zxr),e(Bt,e9r),e(Bt,bve),e(bve,o9r),e(Bt,r9r),g(DL,Bt,null),e(jr,t9r),e(jr,Po),g(GL,Po,null),e(Po,a9r),e(Po,Fve),e(Fve,n9r),e(Po,s9r),e(Po,In),e(In,l9r),e(In,vve),e(vve,i9r),e(In,d9r),e(In,Tve),e(Tve,c9r),e(In,f9r),e(In,Mve),e(Mve,m9r),e(In,g9r),e(Po,h9r),e(Po,Be),e(Be,eE),e(eE,Eve),e(Eve,p9r),e(eE,_9r),e(eE,kH),e(kH,u9r),e(eE,b9r),e(Be,F9r),e(Be,oE),e(oE,Cve),e(Cve,v9r),e(oE,T9r),e(oE,SH),e(SH,M9r),e(oE,E9r),e(Be,C9r),e(Be,rE),e(rE,wve),e(wve,w9r),e(rE,A9r),e(rE,RH),e(RH,y9r),e(rE,L9r),e(Be,x9r),e(Be,tE),e(tE,Ave),e(Ave,k9r),e(tE,S9r),e(tE,BH),e(BH,R9r),e(tE,B9r),e(Be,P9r),e(Be,aE),e(aE,yve),e(yve,$9r),e(aE,I9r),e(aE,PH),e(PH,q9r),e(aE,N9r),e(Be,j9r),e(Be,nE),e(nE,Lve),e(Lve,D9r),e(nE,G9r),e(nE,$H),e($H,O9r),e(nE,V9r),e(Be,X9r),e(Be,sE),e(sE,xve),e(xve,z9r),e(sE,Q9r),e(sE,IH),e(IH,W9r),e(sE,H9r),e(Be,U9r),e(Be,lE),e(lE,kve),e(kve,J9r),e(lE,Y9r),e(lE,qH),e(qH,K9r),e(lE,Z9r),e(Po,ekr),e(Po,Sve),e(Sve,okr),e(Po,rkr),g(OL,Po,null),b(c,iPe,u),b(c,Ef,u),e(Ef,iE),e(iE,Rve),g(VL,Rve,null),e(Ef,tkr),e(Ef,Bve),e(Bve,akr),b(c,dPe,u),b(c,Dr,u),g(XL,Dr,null),e(Dr,nkr),e(Dr,Cf),e(Cf,skr),e(Cf,NH),e(NH,lkr),e(Cf,ikr),e(Cf,jH),e(jH,dkr),e(Cf,ckr),e(Dr,fkr),e(Dr,zL),e(zL,mkr),e(zL,Pve),e(Pve,gkr),e(zL,hkr),e(Dr,pkr),e(Dr,Pt),g(QL,Pt,null),e(Pt,_kr),e(Pt,$ve),e($ve,ukr),e(Pt,bkr),e(Pt,wf),e(wf,Fkr),e(wf,Ive),e(Ive,vkr),e(wf,Tkr),e(wf,DH),e(DH,Mkr),e(wf,Ekr),e(Pt,Ckr),e(Pt,qve),e(qve,wkr),e(Pt,Akr),g(WL,Pt,null),e(Dr,ykr),e(Dr,$o),g(HL,$o,null),e($o,Lkr),e($o,Nve),e(Nve,xkr),e($o,kkr),e($o,qn),e(qn,Skr),e(qn,jve),e(jve,Rkr),e(qn,Bkr),e(qn,Dve),e(Dve,Pkr),e(qn,$kr),e(qn,Gve),e(Gve,Ikr),e(qn,qkr),e($o,Nkr),e($o,Pe),e(Pe,dE),e(dE,Ove),e(Ove,jkr),e(dE,Dkr),e(dE,GH),e(GH,Gkr),e(dE,Okr),e(Pe,Vkr),e(Pe,cE),e(cE,Vve),e(Vve,Xkr),e(cE,zkr),e(cE,OH),e(OH,Qkr),e(cE,Wkr),e(Pe,Hkr),e(Pe,fE),e(fE,Xve),e(Xve,Ukr),e(fE,Jkr),e(fE,VH),e(VH,Ykr),e(fE,Kkr),e(Pe,Zkr),e(Pe,mE),e(mE,zve),e(zve,eSr),e(mE,oSr),e(mE,XH),e(XH,rSr),e(mE,tSr),e(Pe,aSr),e(Pe,gE),e(gE,Qve),e(Qve,nSr),e(gE,sSr),e(gE,zH),e(zH,lSr),e(gE,iSr),e(Pe,dSr),e(Pe,hE),e(hE,Wve),e(Wve,cSr),e(hE,fSr),e(hE,QH),e(QH,mSr),e(hE,gSr),e(Pe,hSr),e(Pe,pE),e(pE,Hve),e(Hve,pSr),e(pE,_Sr),e(pE,WH),e(WH,uSr),e(pE,bSr),e(Pe,FSr),e(Pe,_E),e(_E,Uve),e(Uve,vSr),e(_E,TSr),e(_E,HH),e(HH,MSr),e(_E,ESr),e($o,CSr),e($o,Jve),e(Jve,wSr),e($o,ASr),g(UL,$o,null),b(c,cPe,u),b(c,Af,u),e(Af,uE),e(uE,Yve),g(JL,Yve,null),e(Af,ySr),e(Af,Kve),e(Kve,LSr),b(c,fPe,u),b(c,Gr,u),g(YL,Gr,null),e(Gr,xSr),e(Gr,yf),e(yf,kSr),e(yf,UH),e(UH,SSr),e(yf,RSr),e(yf,JH),e(JH,BSr),e(yf,PSr),e(Gr,$Sr),e(Gr,KL),e(KL,ISr),e(KL,Zve),e(Zve,qSr),e(KL,NSr),e(Gr,jSr),e(Gr,$t),g(ZL,$t,null),e($t,DSr),e($t,e0e),e(e0e,GSr),e($t,OSr),e($t,Lf),e(Lf,VSr),e(Lf,o0e),e(o0e,XSr),e(Lf,zSr),e(Lf,YH),e(YH,QSr),e(Lf,WSr),e($t,HSr),e($t,r0e),e(r0e,USr),e($t,JSr),g(e7,$t,null),e(Gr,YSr),e(Gr,Io),g(o7,Io,null),e(Io,KSr),e(Io,t0e),e(t0e,ZSr),e(Io,eRr),e(Io,Nn),e(Nn,oRr),e(Nn,a0e),e(a0e,rRr),e(Nn,tRr),e(Nn,n0e),e(n0e,aRr),e(Nn,nRr),e(Nn,s0e),e(s0e,sRr),e(Nn,lRr),e(Io,iRr),e(Io,l0e),e(l0e,bE),e(bE,i0e),e(i0e,dRr),e(bE,cRr),e(bE,KH),e(KH,fRr),e(bE,mRr),e(Io,gRr),e(Io,d0e),e(d0e,hRr),e(Io,pRr),g(r7,Io,null),b(c,mPe,u),b(c,xf,u),e(xf,FE),e(FE,c0e),g(t7,c0e,null),e(xf,_Rr),e(xf,f0e),e(f0e,uRr),b(c,gPe,u),b(c,Or,u),g(a7,Or,null),e(Or,bRr),e(Or,kf),e(kf,FRr),e(kf,ZH),e(ZH,vRr),e(kf,TRr),e(kf,eU),e(eU,MRr),e(kf,ERr),e(Or,CRr),e(Or,n7),e(n7,wRr),e(n7,m0e),e(m0e,ARr),e(n7,yRr),e(Or,LRr),e(Or,It),g(s7,It,null),e(It,xRr),e(It,g0e),e(g0e,kRr),e(It,SRr),e(It,Sf),e(Sf,RRr),e(Sf,h0e),e(h0e,BRr),e(Sf,PRr),e(Sf,oU),e(oU,$Rr),e(Sf,IRr),e(It,qRr),e(It,p0e),e(p0e,NRr),e(It,jRr),g(l7,It,null),e(Or,DRr),e(Or,qo),g(i7,qo,null),e(qo,GRr),e(qo,_0e),e(_0e,ORr),e(qo,VRr),e(qo,jn),e(jn,XRr),e(jn,u0e),e(u0e,zRr),e(jn,QRr),e(jn,b0e),e(b0e,WRr),e(jn,HRr),e(jn,F0e),e(F0e,URr),e(jn,JRr),e(qo,YRr),e(qo,d7),e(d7,vE),e(vE,v0e),e(v0e,KRr),e(vE,ZRr),e(vE,rU),e(rU,eBr),e(vE,oBr),e(d7,rBr),e(d7,TE),e(TE,T0e),e(T0e,tBr),e(TE,aBr),e(TE,tU),e(tU,nBr),e(TE,sBr),e(qo,lBr),e(qo,M0e),e(M0e,iBr),e(qo,dBr),g(c7,qo,null),b(c,hPe,u),b(c,Rf,u),e(Rf,ME),e(ME,E0e),g(f7,E0e,null),e(Rf,cBr),e(Rf,C0e),e(C0e,fBr),b(c,pPe,u),b(c,Vr,u),g(m7,Vr,null),e(Vr,mBr),e(Vr,Bf),e(Bf,gBr),e(Bf,aU),e(aU,hBr),e(Bf,pBr),e(Bf,nU),e(nU,_Br),e(Bf,uBr),e(Vr,bBr),e(Vr,g7),e(g7,FBr),e(g7,w0e),e(w0e,vBr),e(g7,TBr),e(Vr,MBr),e(Vr,qt),g(h7,qt,null),e(qt,EBr),e(qt,A0e),e(A0e,CBr),e(qt,wBr),e(qt,Pf),e(Pf,ABr),e(Pf,y0e),e(y0e,yBr),e(Pf,LBr),e(Pf,sU),e(sU,xBr),e(Pf,kBr),e(qt,SBr),e(qt,L0e),e(L0e,RBr),e(qt,BBr),g(p7,qt,null),e(Vr,PBr),e(Vr,No),g(_7,No,null),e(No,$Br),e(No,x0e),e(x0e,IBr),e(No,qBr),e(No,Dn),e(Dn,NBr),e(Dn,k0e),e(k0e,jBr),e(Dn,DBr),e(Dn,S0e),e(S0e,GBr),e(Dn,OBr),e(Dn,R0e),e(R0e,VBr),e(Dn,XBr),e(No,zBr),e(No,B0e),e(B0e,EE),e(EE,P0e),e(P0e,QBr),e(EE,WBr),e(EE,lU),e(lU,HBr),e(EE,UBr),e(No,JBr),e(No,$0e),e($0e,YBr),e(No,KBr),g(u7,No,null),_Pe=!0},p(c,[u]){const b7={};u&2&&(b7.$$scope={dirty:u,ctx:c}),Of.$set(b7);const I0e={};u&2&&(I0e.$$scope={dirty:u,ctx:c}),Ih.$set(I0e);const q0e={};u&2&&(q0e.$$scope={dirty:u,ctx:c}),Wh.$set(q0e)},i(c){_Pe||(h(ge.$$.fragment,c),h(Da.$$.fragment,c),h(y5.$$.fragment,c),h(L5.$$.fragment,c),h(Of.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(q5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(X5.$$.fragment,c),h(W5.$$.fragment,c),h(Ih.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(e3.$$.fragment,c),h(Wh.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(w3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(R3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(oC.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(sC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(FC.$$.fragment,c),h(vC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(ey.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),_Pe=!0)},o(c){p(ge.$$.fragment,c),p(Da.$$.fragment,c),p(y5.$$.fragment,c),p(L5.$$.fragment,c),p(Of.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(q5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(X5.$$.fragment,c),p(W5.$$.fragment,c),p(Ih.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(e3.$$.fragment,c),p(Wh.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(w3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(R3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(oC.$$.fragment,c),p(rC.$$.fragment,c),p(tC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(sC.$$.fragment,c),p(iC.$$.fragment,c),p(dC.$$.fragment,c),p(cC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(gC.$$.fragment,c),p(pC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(FC.$$.fragment,c),p(vC.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(ey.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(c7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),_Pe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(ge),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(pRe),c&&t(Vi),_(y5),c&&t(_Re),c&&t(zn),c&&t(uRe),_(L5,c),c&&t(bRe),c&&t(vx),c&&t(FRe),_(Of,c),c&&t(vRe),c&&t(Xi),_(x5),c&&t(TRe),c&&t(Qo),_(k5),_(B5),_(P5),_($5),c&&t(MRe),c&&t(Qi),_(I5),c&&t(ERe),c&&t(Wo),_(q5),_(D5),_(G5),_(O5),c&&t(CRe),c&&t(Wi),_(V5),c&&t(wRe),c&&t(Ho),_(X5),_(W5),_(Ih),_(H5),_(U5),c&&t(ARe),c&&t(Hi),_(J5),c&&t(yRe),c&&t(Uo),_(Y5),_(e3),_(Wh),_(o3),_(r3),c&&t(LRe),c&&t(Ji),_(t3),c&&t(xRe),c&&t(Jo),_(a3),_(s3),_(l3),_(i3),_(d3),c&&t(kRe),c&&t(Zi),_(c3),c&&t(SRe),c&&t(Yo),_(f3),_(g3),_(h3),_(p3),_(_3),c&&t(RRe),c&&t(rd),_(u3),c&&t(BRe),c&&t(Ko),_(b3),_(v3),_(T3),_(M3),_(E3),c&&t(PRe),c&&t(nd),_(C3),c&&t($Re),c&&t(Zo),_(w3),_(y3),_(L3),_(x3),_(k3),c&&t(IRe),c&&t(id),_(S3),c&&t(qRe),c&&t(er),_(R3),_(P3),_($3),_(I3),_(q3),c&&t(NRe),c&&t(fd),_(N3),c&&t(jRe),c&&t(or),_(j3),_(G3),_(O3),_(V3),_(X3),c&&t(DRe),c&&t(hd),_(z3),c&&t(GRe),c&&t(rr),_(Q3),_(H3),_(U3),_(J3),_(Y3),c&&t(ORe),c&&t(ud),_(K3),c&&t(VRe),c&&t(tr),_(Z3),_(oC),_(rC),_(tC),_(aC),c&&t(XRe),c&&t(vd),_(nC),c&&t(zRe),c&&t(ar),_(sC),_(iC),_(dC),_(cC),_(fC),c&&t(QRe),c&&t(Ed),_(mC),c&&t(WRe),c&&t(nr),_(gC),_(pC),_(_C),_(uC),_(bC),c&&t(HRe),c&&t(Ad),_(FC),c&&t(URe),c&&t(sr),_(vC),_(MC),_(EC),_(CC),_(wC),c&&t(JRe),c&&t(xd),_(AC),c&&t(YRe),c&&t(lr),_(yC),_(xC),_(kC),_(SC),_(RC),c&&t(KRe),c&&t(Rd),_(BC),c&&t(ZRe),c&&t(ir),_(PC),_(IC),_(qC),_(NC),_(jC),c&&t(eBe),c&&t($d),_(DC),c&&t(oBe),c&&t(dr),_(GC),_(VC),_(XC),_(zC),_(QC),c&&t(rBe),c&&t(Nd),_(WC),c&&t(tBe),c&&t(cr),_(HC),_(JC),_(YC),_(KC),_(ZC),c&&t(aBe),c&&t(Gd),_(ew),c&&t(nBe),c&&t(fr),_(ow),_(tw),_(aw),_(nw),_(sw),c&&t(sBe),c&&t(Xd),_(lw),c&&t(lBe),c&&t(mr),_(iw),_(cw),_(fw),_(mw),_(hw),c&&t(iBe),c&&t(Wd),_(pw),c&&t(dBe),c&&t(gr),_(_w),_(bw),_(Fw),_(vw),_(Tw),c&&t(cBe),c&&t(Jd),_(Mw),c&&t(fBe),c&&t(hr),_(Ew),_(ww),_(Aw),_(yw),_(Lw),c&&t(mBe),c&&t(ec),_(xw),c&&t(gBe),c&&t(pr),_(kw),_(Rw),_(Bw),_(Pw),_($w),c&&t(hBe),c&&t(tc),_(Iw),c&&t(pBe),c&&t(_r),_(qw),_(jw),_(Dw),_(Gw),_(Ow),c&&t(_Be),c&&t(sc),_(Vw),c&&t(uBe),c&&t(ur),_(Xw),_(Qw),_(Ww),_(Hw),_(Uw),c&&t(bBe),c&&t(cc),_(Jw),c&&t(FBe),c&&t(br),_(Yw),_(Zw),_(eA),_(oA),_(rA),c&&t(vBe),c&&t(gc),_(tA),c&&t(TBe),c&&t(Fr),_(aA),_(sA),_(lA),_(iA),_(dA),c&&t(MBe),c&&t(_c),_(cA),c&&t(EBe),c&&t(vr),_(fA),_(gA),_(hA),_(pA),_(_A),c&&t(CBe),c&&t(Fc),_(uA),c&&t(wBe),c&&t(Tr),_(bA),_(vA),_(TA),_(MA),_(EA),c&&t(ABe),c&&t(Mc),_(CA),c&&t(yBe),c&&t(Mr),_(wA),_(yA),_(LA),_(xA),_(SA),c&&t(LBe),c&&t(wc),_(RA),c&&t(xBe),c&&t(Er),_(BA),_($A),_(IA),_(qA),_(NA),c&&t(kBe),c&&t(Lc),_(jA),c&&t(SBe),c&&t(Cr),_(DA),_(OA),_(VA),_(XA),_(zA),c&&t(RBe),c&&t(Sc),_(QA),c&&t(BBe),c&&t(wr),_(WA),_(UA),_(JA),_(YA),_(KA),c&&t(PBe),c&&t(Pc),_(ZA),c&&t($Be),c&&t(Ar),_(ey),_(ry),_(ty),_(ay),_(ny),c&&t(IBe),c&&t(qc),_(sy),c&&t(qBe),c&&t(yr),_(ly),_(dy),_(cy),_(fy),_(my),c&&t(NBe),c&&t(Dc),_(gy),c&&t(jBe),c&&t(Lr),_(hy),_(_y),_(uy),_(by),_(Fy),c&&t(DBe),c&&t(Vc),_(vy),c&&t(GBe),c&&t(xr),_(Ty),_(Ey),_(Cy),_(wy),_(Ay),c&&t(OBe),c&&t(Qc),_(yy),c&&t(VBe),c&&t(kr),_(Ly),_(ky),_(Sy),_(Ry),_(By),c&&t(XBe),c&&t(Uc),_(Py),c&&t(zBe),c&&t(Sr),_($y),_(qy),_(Ny),_(jy),_(Dy),c&&t(QBe),c&&t(Kc),_(Gy),c&&t(WBe),c&&t(Rr),_(Oy),_(Xy),_(zy),_(Qy),_(Wy),c&&t(HBe),c&&t(of),_(Hy),c&&t(UBe),c&&t(Br),_(Uy),_(Yy),_(Ky),_(Zy),_(eL),c&&t(JBe),c&&t(af),_(oL),c&&t(YBe),c&&t(Pr),_(rL),_(aL),_(nL),_(sL),_(lL),c&&t(KBe),c&&t(lf),_(iL),c&&t(ZBe),c&&t($r),_(dL),_(fL),_(mL),_(gL),_(hL),c&&t(ePe),c&&t(ff),_(pL),c&&t(oPe),c&&t(Ir),_(_L),_(bL),_(FL),_(vL),_(TL),c&&t(rPe),c&&t(hf),_(ML),c&&t(tPe),c&&t(qr),_(EL),_(wL),_(AL),_(yL),_(LL),c&&t(aPe),c&&t(uf),_(xL),c&&t(nPe),c&&t(Nr),_(kL),_(RL),_(BL),_(PL),_($L),c&&t(sPe),c&&t(vf),_(IL),c&&t(lPe),c&&t(jr),_(qL),_(jL),_(DL),_(GL),_(OL),c&&t(iPe),c&&t(Ef),_(VL),c&&t(dPe),c&&t(Dr),_(XL),_(QL),_(WL),_(HL),_(UL),c&&t(cPe),c&&t(Af),_(JL),c&&t(fPe),c&&t(Gr),_(YL),_(ZL),_(e7),_(o7),_(r7),c&&t(mPe),c&&t(xf),_(t7),c&&t(gPe),c&&t(Or),_(a7),_(s7),_(l7),_(i7),_(c7),c&&t(hPe),c&&t(Rf),_(f7),c&&t(pPe),c&&t(Vr),_(m7),_(h7),_(p7),_(_7),_(u7)}}}const j5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function D5t(If){return P5t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Q5t extends k5t{constructor(Z){super();S5t(this,Z,D5t,N5t,R5t,{})}}export{Q5t as default,j5t as metadata};
