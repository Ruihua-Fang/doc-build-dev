import{S as n5t,i as s5t,s as l5t,e as a,k as l,w as F,t as o,M as i5t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as d5t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as pPr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function c5t(L){let g,v,p,m,u,d,h,Fo,ti,tf,Zr,ai,ni,vA,af,Ne,Xe,si,Tn,FA,Mn,En,TA,li,Cn,MA,ii,nf,Fa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Fo=o(`, make sure its
`),ti=a("code"),tf=o("model_type"),Zr=o(" attribute is set to the same key you use when registering the config (here "),ai=a("code"),ni=o('"new-model"'),vA=o(")."),af=l(),Ne=a("p"),Xe=o("Likewise, if your "),si=a("code"),Tn=o("NewModel"),FA=o(" is a subclass of "),Mn=a("a"),En=o("PreTrainedModel"),TA=o(`, make sure its
`),li=a("code"),Cn=o("config_class"),MA=o(` attribute is set to the same class you use when registering the model (here
`),ii=a("code"),nf=o("NewModelConfig"),Fa=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var B9=s(p);m=r(B9,"NewModelConfig"),B9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var di=s(d);h=r(di,"PretrainedConfig"),di.forEach(t),Fo=r(Ae,`, make sure its
`),ti=n(Ae,"CODE",{});var P9=s(ti);tf=r(P9,"model_type"),P9.forEach(t),Zr=r(Ae," attribute is set to the same key you use when registering the config (here "),ai=n(Ae,"CODE",{});var I9=s(ai);ni=r(I9,'"new-model"'),I9.forEach(t),vA=r(Ae,")."),Ae.forEach(t),af=i(ze),Ne=n(ze,"P",{});var To=s(Ne);Xe=r(To,"Likewise, if your "),si=n(To,"CODE",{});var Ta=s(si);Tn=r(Ta,"NewModel"),Ta.forEach(t),FA=r(To," is a subclass of "),Mn=n(To,"A",{href:!0});var q9=s(Mn);En=r(q9,"PreTrainedModel"),q9.forEach(t),TA=r(To,`, make sure its
`),li=n(To,"CODE",{});var sf=s(li);Cn=r(sf,"config_class"),sf.forEach(t),MA=r(To,` attribute is set to the same class you use when registering the model (here
`),ii=n(To,"CODE",{});var N9=s(ii);nf=r(N9,"NewModelConfig"),N9.forEach(t),Fa=r(To,")."),To.forEach(t),this.h()},h(){c(Mn,"href","/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Fo),e(g,ti),e(ti,tf),e(g,Zr),e(g,ai),e(ai,ni),e(g,vA),b(ze,af,Ae),b(ze,Ne,Ae),e(Ne,Xe),e(Ne,si),e(si,Tn),e(Ne,FA),e(Ne,Mn),e(Mn,En),e(Ne,TA),e(Ne,li),e(li,Cn),e(Ne,MA),e(Ne,ii),e(ii,nf),e(Ne,Fa)},d(ze){ze&&t(g),ze&&t(af),ze&&t(Ne)}}}function f5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g5t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function h5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p5t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function u5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(L){let g,v,p,m,u,d,h,Fo,ti,tf,Zr,ai,ni,vA,af,Ne,Xe,si,Tn,FA,Mn,En,TA,li,Cn,MA,ii,nf,Fa,ze,Ae,B9,di,P9,I9,To,Ta,q9,sf,N9,vNe,gBe,ci,lf,rZ,EA,FNe,tZ,TNe,hBe,wn,MNe,aZ,ENe,CNe,nZ,wNe,ANe,pBe,CA,uBe,j9,yNe,_Be,df,bBe,fi,cf,sZ,wA,LNe,lZ,xNe,vBe,Mo,AA,$Ne,yA,kNe,D9,SNe,RNe,BNe,LA,PNe,iZ,INe,qNe,NNe,Fr,xA,jNe,dZ,DNe,GNe,mi,ONe,cZ,VNe,XNe,fZ,zNe,WNe,QNe,A,ff,mZ,HNe,UNe,G9,JNe,YNe,KNe,mf,gZ,ZNe,eje,O9,oje,rje,tje,gf,hZ,aje,nje,V9,sje,lje,ije,hf,pZ,dje,cje,X9,fje,mje,gje,pf,uZ,hje,pje,z9,uje,_je,bje,uf,_Z,vje,Fje,W9,Tje,Mje,Eje,_f,bZ,Cje,wje,Q9,Aje,yje,Lje,bf,vZ,xje,$je,H9,kje,Sje,Rje,vf,FZ,Bje,Pje,U9,Ije,qje,Nje,Ff,TZ,jje,Dje,J9,Gje,Oje,Vje,Tf,MZ,Xje,zje,Y9,Wje,Qje,Hje,Mf,EZ,Uje,Jje,K9,Yje,Kje,Zje,Ef,CZ,eDe,oDe,Z9,rDe,tDe,aDe,Cf,wZ,nDe,sDe,e$,lDe,iDe,dDe,wf,AZ,cDe,fDe,o$,mDe,gDe,hDe,Af,yZ,pDe,uDe,r$,_De,bDe,vDe,yf,LZ,FDe,TDe,t$,MDe,EDe,CDe,Lf,xZ,wDe,ADe,a$,yDe,LDe,xDe,xf,$Z,$De,kDe,n$,SDe,RDe,BDe,$f,kZ,PDe,IDe,s$,qDe,NDe,jDe,kf,SZ,DDe,GDe,l$,ODe,VDe,XDe,Sf,RZ,zDe,WDe,i$,QDe,HDe,UDe,Rf,BZ,JDe,YDe,d$,KDe,ZDe,eGe,Bf,PZ,oGe,rGe,c$,tGe,aGe,nGe,Pf,IZ,sGe,lGe,f$,iGe,dGe,cGe,If,qZ,fGe,mGe,m$,gGe,hGe,pGe,qf,NZ,uGe,_Ge,g$,bGe,vGe,FGe,Nf,jZ,TGe,MGe,h$,EGe,CGe,wGe,jf,DZ,AGe,yGe,p$,LGe,xGe,$Ge,Df,GZ,kGe,SGe,u$,RGe,BGe,PGe,Gf,OZ,IGe,qGe,_$,NGe,jGe,DGe,Of,VZ,GGe,OGe,b$,VGe,XGe,zGe,Vf,XZ,WGe,QGe,v$,HGe,UGe,JGe,Xf,zZ,YGe,KGe,F$,ZGe,eOe,oOe,zf,WZ,rOe,tOe,T$,aOe,nOe,sOe,Wf,QZ,lOe,iOe,M$,dOe,cOe,fOe,Qf,HZ,mOe,gOe,E$,hOe,pOe,uOe,Hf,UZ,_Oe,bOe,C$,vOe,FOe,TOe,Uf,JZ,MOe,EOe,w$,COe,wOe,AOe,Jf,YZ,yOe,LOe,A$,xOe,$Oe,kOe,Yf,KZ,SOe,ROe,y$,BOe,POe,IOe,Kf,ZZ,qOe,NOe,L$,jOe,DOe,GOe,Zf,eee,OOe,VOe,x$,XOe,zOe,WOe,em,oee,QOe,HOe,$$,UOe,JOe,YOe,om,ree,KOe,ZOe,k$,eVe,oVe,rVe,rm,tee,tVe,aVe,S$,nVe,sVe,lVe,tm,aee,iVe,dVe,R$,cVe,fVe,mVe,am,nee,gVe,hVe,B$,pVe,uVe,_Ve,nm,see,bVe,vVe,P$,FVe,TVe,MVe,sm,lee,EVe,CVe,I$,wVe,AVe,yVe,lm,iee,LVe,xVe,q$,$Ve,kVe,SVe,im,dee,RVe,BVe,N$,PVe,IVe,qVe,dm,cee,NVe,jVe,j$,DVe,GVe,OVe,cm,fee,VVe,XVe,D$,zVe,WVe,QVe,fm,mee,HVe,UVe,G$,JVe,YVe,KVe,mm,gee,ZVe,eXe,O$,oXe,rXe,tXe,gm,hee,aXe,nXe,V$,sXe,lXe,iXe,hm,pee,dXe,cXe,X$,fXe,mXe,gXe,pm,uee,hXe,pXe,z$,uXe,_Xe,bXe,um,_ee,vXe,FXe,W$,TXe,MXe,EXe,_m,bee,CXe,wXe,Q$,AXe,yXe,LXe,bm,vee,xXe,$Xe,H$,kXe,SXe,RXe,vm,Fee,BXe,PXe,U$,IXe,qXe,NXe,Fm,Tee,jXe,DXe,J$,GXe,OXe,VXe,Tm,Mee,XXe,zXe,Y$,WXe,QXe,HXe,Mm,Eee,UXe,JXe,K$,YXe,KXe,ZXe,Em,Cee,eze,oze,Z$,rze,tze,aze,Cm,wee,nze,sze,ek,lze,ize,dze,wm,Aee,cze,fze,ok,mze,gze,hze,Am,yee,pze,uze,rk,_ze,bze,vze,ym,Lee,Fze,Tze,tk,Mze,Eze,Cze,Lm,xee,wze,Aze,ak,yze,Lze,xze,xm,$ee,$ze,kze,nk,Sze,Rze,Bze,$m,kee,Pze,Ize,sk,qze,Nze,jze,km,See,Dze,Gze,lk,Oze,Vze,Xze,Sm,Ree,zze,Wze,ik,Qze,Hze,Uze,Rm,Bee,Jze,Yze,dk,Kze,Zze,eWe,Bm,Pee,oWe,rWe,ck,tWe,aWe,nWe,Pm,Iee,sWe,lWe,fk,iWe,dWe,cWe,Im,qee,fWe,mWe,mk,gWe,hWe,pWe,qm,Nee,uWe,_We,gk,bWe,vWe,FWe,Nm,jee,TWe,MWe,hk,EWe,CWe,wWe,jm,Dee,AWe,yWe,pk,LWe,xWe,$We,Dm,Gee,kWe,SWe,uk,RWe,BWe,PWe,Gm,Oee,IWe,qWe,_k,NWe,jWe,DWe,Om,Vee,GWe,OWe,bk,VWe,XWe,zWe,Vm,Xee,WWe,QWe,vk,HWe,UWe,JWe,Xm,zee,YWe,KWe,Fk,ZWe,eQe,oQe,zm,Wee,rQe,tQe,Tk,aQe,nQe,sQe,Wm,Qee,lQe,iQe,Mk,dQe,cQe,fQe,Qm,Hee,mQe,gQe,Ek,hQe,pQe,uQe,Hm,Uee,_Qe,bQe,Ck,vQe,FQe,TQe,Um,Jee,MQe,EQe,wk,CQe,wQe,AQe,Jm,Yee,yQe,LQe,Ak,xQe,$Qe,kQe,Ym,Kee,SQe,RQe,yk,BQe,PQe,IQe,Km,Zee,qQe,NQe,Lk,jQe,DQe,GQe,Zm,eoe,OQe,VQe,xk,XQe,zQe,WQe,eg,ooe,QQe,HQe,$k,UQe,JQe,YQe,og,roe,KQe,ZQe,kk,eHe,oHe,rHe,rg,toe,tHe,aHe,Sk,nHe,sHe,lHe,tg,aoe,iHe,dHe,Rk,cHe,fHe,mHe,ag,noe,gHe,hHe,Bk,pHe,uHe,_He,ng,soe,bHe,vHe,Pk,FHe,THe,MHe,sg,EHe,lg,$A,CHe,loe,wHe,FBe,gi,ig,ioe,kA,AHe,doe,yHe,TBe,Eo,SA,LHe,RA,xHe,Ik,$He,kHe,SHe,BA,RHe,coe,BHe,PHe,IHe,Tr,PA,qHe,foe,NHe,jHe,Ma,DHe,moe,GHe,OHe,goe,VHe,XHe,hoe,zHe,WHe,QHe,k,An,poe,HHe,UHe,qk,JHe,YHe,Nk,KHe,ZHe,eUe,yn,uoe,oUe,rUe,jk,tUe,aUe,Dk,nUe,sUe,lUe,Ln,_oe,iUe,dUe,Gk,cUe,fUe,Ok,mUe,gUe,hUe,dg,boe,pUe,uUe,Vk,_Ue,bUe,vUe,xn,voe,FUe,TUe,Xk,MUe,EUe,zk,CUe,wUe,AUe,cg,Foe,yUe,LUe,Wk,xUe,$Ue,kUe,fg,Toe,SUe,RUe,Qk,BUe,PUe,IUe,mg,Moe,qUe,NUe,Hk,jUe,DUe,GUe,$n,Eoe,OUe,VUe,Uk,XUe,zUe,Jk,WUe,QUe,HUe,kn,Coe,UUe,JUe,Yk,YUe,KUe,Kk,ZUe,eJe,oJe,Sn,woe,rJe,tJe,Zk,aJe,nJe,eS,sJe,lJe,iJe,gg,Aoe,dJe,cJe,oS,fJe,mJe,gJe,hg,yoe,hJe,pJe,rS,uJe,_Je,bJe,Rn,Loe,vJe,FJe,tS,TJe,MJe,aS,EJe,CJe,wJe,pg,xoe,AJe,yJe,nS,LJe,xJe,$Je,Bn,$oe,kJe,SJe,sS,RJe,BJe,lS,PJe,IJe,qJe,Pn,koe,NJe,jJe,iS,DJe,GJe,dS,OJe,VJe,XJe,In,Soe,zJe,WJe,cS,QJe,HJe,Roe,UJe,JJe,YJe,ug,Boe,KJe,ZJe,fS,eYe,oYe,rYe,qn,Poe,tYe,aYe,mS,nYe,sYe,gS,lYe,iYe,dYe,Nn,Ioe,cYe,fYe,hS,mYe,gYe,pS,hYe,pYe,uYe,jn,qoe,_Ye,bYe,uS,vYe,FYe,_S,TYe,MYe,EYe,Dn,Noe,CYe,wYe,bS,AYe,yYe,vS,LYe,xYe,$Ye,Gn,joe,kYe,SYe,FS,RYe,BYe,TS,PYe,IYe,qYe,On,Doe,NYe,jYe,MS,DYe,GYe,ES,OYe,VYe,XYe,_g,Goe,zYe,WYe,CS,QYe,HYe,UYe,Vn,Ooe,JYe,YYe,wS,KYe,ZYe,AS,eKe,oKe,rKe,bg,Voe,tKe,aKe,yS,nKe,sKe,lKe,Xn,Xoe,iKe,dKe,LS,cKe,fKe,xS,mKe,gKe,hKe,zn,zoe,pKe,uKe,$S,_Ke,bKe,kS,vKe,FKe,TKe,Wn,Woe,MKe,EKe,SS,CKe,wKe,RS,AKe,yKe,LKe,Qn,Qoe,xKe,$Ke,BS,kKe,SKe,PS,RKe,BKe,PKe,Hn,Hoe,IKe,qKe,IS,NKe,jKe,qS,DKe,GKe,OKe,vg,Uoe,VKe,XKe,NS,zKe,WKe,QKe,Un,Joe,HKe,UKe,jS,JKe,YKe,DS,KKe,ZKe,eZe,Jn,Yoe,oZe,rZe,GS,tZe,aZe,OS,nZe,sZe,lZe,Yn,Koe,iZe,dZe,VS,cZe,fZe,XS,mZe,gZe,hZe,Kn,Zoe,pZe,uZe,zS,_Ze,bZe,WS,vZe,FZe,TZe,Zn,ere,MZe,EZe,QS,CZe,wZe,HS,AZe,yZe,LZe,es,ore,xZe,$Ze,US,kZe,SZe,JS,RZe,BZe,PZe,Fg,rre,IZe,qZe,YS,NZe,jZe,DZe,os,tre,GZe,OZe,KS,VZe,XZe,ZS,zZe,WZe,QZe,Tg,are,HZe,UZe,eR,JZe,YZe,KZe,Mg,nre,ZZe,eeo,oR,oeo,reo,teo,rs,sre,aeo,neo,rR,seo,leo,tR,ieo,deo,ceo,ts,lre,feo,meo,aR,geo,heo,nR,peo,ueo,_eo,as,ire,beo,veo,sR,Feo,Teo,lR,Meo,Eeo,Ceo,Eg,dre,weo,Aeo,iR,yeo,Leo,xeo,ns,cre,$eo,keo,dR,Seo,Reo,cR,Beo,Peo,Ieo,ss,fre,qeo,Neo,fR,jeo,Deo,mR,Geo,Oeo,Veo,ls,mre,Xeo,zeo,gR,Weo,Qeo,hR,Heo,Ueo,Jeo,is,gre,Yeo,Keo,pR,Zeo,eoo,uR,ooo,roo,too,ds,hre,aoo,noo,_R,soo,loo,bR,ioo,doo,coo,cs,pre,foo,moo,vR,goo,hoo,FR,poo,uoo,_oo,Cg,ure,boo,voo,TR,Foo,Too,Moo,wg,_re,Eoo,Coo,MR,woo,Aoo,yoo,Ag,bre,Loo,xoo,ER,$oo,koo,Soo,yg,vre,Roo,Boo,CR,Poo,Ioo,qoo,fs,Fre,Noo,joo,wR,Doo,Goo,AR,Ooo,Voo,Xoo,Lg,Tre,zoo,Woo,yR,Qoo,Hoo,Uoo,ms,Mre,Joo,Yoo,LR,Koo,Zoo,xR,ero,oro,rro,gs,Ere,tro,aro,$R,nro,sro,kR,lro,iro,dro,hs,Cre,cro,fro,SR,mro,gro,RR,hro,pro,uro,ps,wre,_ro,bro,BR,vro,Fro,PR,Tro,Mro,Ero,us,Are,Cro,wro,IR,Aro,yro,qR,Lro,xro,$ro,_s,yre,kro,Sro,NR,Rro,Bro,jR,Pro,Iro,qro,xg,Lre,Nro,jro,DR,Dro,Gro,Oro,$g,xre,Vro,Xro,GR,zro,Wro,Qro,bs,$re,Hro,Uro,OR,Jro,Yro,VR,Kro,Zro,eto,vs,kre,oto,rto,XR,tto,ato,zR,nto,sto,lto,Fs,Sre,ito,dto,WR,cto,fto,QR,mto,gto,hto,kg,Rre,pto,uto,HR,_to,bto,vto,Sg,Bre,Fto,Tto,UR,Mto,Eto,Cto,Rg,Pre,wto,Ato,JR,yto,Lto,xto,Ts,Ire,$to,kto,YR,Sto,Rto,KR,Bto,Pto,Ito,Bg,qre,qto,Nto,ZR,jto,Dto,Gto,Pg,Nre,Oto,Vto,eB,Xto,zto,Wto,Ig,jre,Qto,Hto,oB,Uto,Jto,Yto,Ms,Dre,Kto,Zto,rB,eao,oao,tB,rao,tao,aao,qg,Gre,nao,sao,aB,lao,iao,dao,Ng,Ore,cao,fao,nB,mao,gao,hao,Es,Vre,pao,uao,sB,_ao,bao,lB,vao,Fao,Tao,Cs,Xre,Mao,Eao,iB,Cao,wao,dB,Aao,yao,Lao,ws,zre,xao,$ao,cB,kao,Sao,fB,Rao,Bao,Pao,As,Wre,Iao,qao,mB,Nao,jao,gB,Dao,Gao,Oao,jg,Vao,Dg,IA,Xao,Qre,zao,MBe,hi,Gg,Hre,qA,Wao,Ure,Qao,EBe,Co,NA,Hao,jA,Uao,hB,Jao,Yao,Kao,DA,Zao,Jre,eno,ono,rno,We,GA,tno,Yre,ano,nno,Ea,sno,Kre,lno,ino,Zre,dno,cno,ete,fno,mno,gno,te,Og,ote,hno,pno,pB,uno,_no,bno,Vg,rte,vno,Fno,uB,Tno,Mno,Eno,Xg,tte,Cno,wno,_B,Ano,yno,Lno,zg,ate,xno,$no,bB,kno,Sno,Rno,Wg,nte,Bno,Pno,vB,Ino,qno,Nno,Qg,ste,jno,Dno,FB,Gno,Ono,Vno,Hg,lte,Xno,zno,TB,Wno,Qno,Hno,Ug,ite,Uno,Jno,MB,Yno,Kno,Zno,Jg,dte,eso,oso,EB,rso,tso,aso,Yg,cte,nso,sso,CB,lso,iso,dso,Kg,fte,cso,fso,wB,mso,gso,hso,Zg,mte,pso,uso,AB,_so,bso,vso,eh,gte,Fso,Tso,yB,Mso,Eso,Cso,oh,hte,wso,Aso,LB,yso,Lso,xso,rh,pte,$so,kso,xB,Sso,Rso,Bso,th,ute,Pso,Iso,$B,qso,Nso,jso,ah,_te,Dso,Gso,kB,Oso,Vso,Xso,nh,bte,zso,Wso,SB,Qso,Hso,Uso,sh,vte,Jso,Yso,RB,Kso,Zso,elo,lh,Fte,olo,rlo,BB,tlo,alo,nlo,ih,Tte,slo,llo,PB,ilo,dlo,clo,dh,Mte,flo,mlo,IB,glo,hlo,plo,ch,Ete,ulo,_lo,qB,blo,vlo,Flo,fh,Cte,Tlo,Mlo,NB,Elo,Clo,wlo,mh,Alo,gh,ylo,hh,OA,Llo,wte,xlo,CBe,pi,ph,Ate,VA,$lo,yte,klo,wBe,wo,XA,Slo,zA,Rlo,jB,Blo,Plo,Ilo,WA,qlo,Lte,Nlo,jlo,Dlo,Qe,QA,Glo,xte,Olo,Vlo,ui,Xlo,$te,zlo,Wlo,kte,Qlo,Hlo,Ulo,be,uh,Ste,Jlo,Ylo,DB,Klo,Zlo,eio,_h,Rte,oio,rio,GB,tio,aio,nio,bh,Bte,sio,lio,OB,iio,dio,cio,vh,Pte,fio,mio,VB,gio,hio,pio,Fh,Ite,uio,_io,XB,bio,vio,Fio,Th,qte,Tio,Mio,zB,Eio,Cio,wio,Mh,Nte,Aio,yio,WB,Lio,xio,$io,Eh,jte,kio,Sio,QB,Rio,Bio,Pio,Ch,Dte,Iio,qio,HB,Nio,jio,Dio,wh,Gte,Gio,Oio,UB,Vio,Xio,zio,Ah,Ote,Wio,Qio,JB,Hio,Uio,Jio,yh,Vte,Yio,Kio,YB,Zio,edo,odo,Lh,Xte,rdo,tdo,KB,ado,ndo,sdo,xh,zte,ldo,ido,ZB,ddo,cdo,fdo,$h,Wte,mdo,gdo,eP,hdo,pdo,udo,kh,_do,Sh,bdo,Rh,HA,vdo,Qte,Fdo,ABe,_i,Bh,Hte,UA,Tdo,Ute,Mdo,yBe,Ao,JA,Edo,bi,Cdo,oP,wdo,Ado,rP,ydo,Ldo,xdo,YA,$do,Jte,kdo,Sdo,Rdo,et,KA,Bdo,Yte,Pdo,Ido,vi,qdo,Kte,Ndo,jdo,tP,Ddo,Gdo,Odo,Ph,Vdo,He,ZA,Xdo,Zte,zdo,Wdo,Ca,Qdo,eae,Hdo,Udo,oae,Jdo,Ydo,rae,Kdo,Zdo,eco,x,Ih,tae,oco,rco,aP,tco,aco,nco,qh,aae,sco,lco,nP,ico,dco,cco,Nh,nae,fco,mco,sP,gco,hco,pco,jh,sae,uco,_co,lP,bco,vco,Fco,Dh,lae,Tco,Mco,iP,Eco,Cco,wco,Gh,iae,Aco,yco,dP,Lco,xco,$co,Oh,dae,kco,Sco,cP,Rco,Bco,Pco,Vh,cae,Ico,qco,fP,Nco,jco,Dco,Xh,fae,Gco,Oco,mP,Vco,Xco,zco,zh,mae,Wco,Qco,gP,Hco,Uco,Jco,Wh,gae,Yco,Kco,hP,Zco,efo,ofo,Qh,hae,rfo,tfo,pP,afo,nfo,sfo,Hh,pae,lfo,ifo,uP,dfo,cfo,ffo,Uh,uae,mfo,gfo,_P,hfo,pfo,ufo,Jh,_ae,_fo,bfo,bP,vfo,Ffo,Tfo,Yh,bae,Mfo,Efo,vP,Cfo,wfo,Afo,Kh,vae,yfo,Lfo,FP,xfo,$fo,kfo,Zh,Fae,Sfo,Rfo,TP,Bfo,Pfo,Ifo,ep,Tae,qfo,Nfo,MP,jfo,Dfo,Gfo,op,Mae,Ofo,Vfo,EP,Xfo,zfo,Wfo,rp,Eae,Qfo,Hfo,CP,Ufo,Jfo,Yfo,tp,Cae,Kfo,Zfo,wP,emo,omo,rmo,ap,wae,tmo,amo,AP,nmo,smo,lmo,np,Aae,imo,dmo,yP,cmo,fmo,mmo,sp,yae,gmo,hmo,LP,pmo,umo,_mo,lp,Lae,bmo,vmo,xP,Fmo,Tmo,Mmo,ip,xae,Emo,Cmo,$P,wmo,Amo,ymo,dp,$ae,Lmo,xmo,kP,$mo,kmo,Smo,cp,kae,Rmo,Bmo,SP,Pmo,Imo,qmo,fp,Sae,Nmo,jmo,RP,Dmo,Gmo,Omo,ys,Rae,Vmo,Xmo,BP,zmo,Wmo,PP,Qmo,Hmo,Umo,mp,Bae,Jmo,Ymo,IP,Kmo,Zmo,ego,gp,Pae,ogo,rgo,qP,tgo,ago,ngo,hp,Iae,sgo,lgo,NP,igo,dgo,cgo,pp,qae,fgo,mgo,jP,ggo,hgo,pgo,up,Nae,ugo,_go,DP,bgo,vgo,Fgo,_p,jae,Tgo,Mgo,GP,Ego,Cgo,wgo,bp,Dae,Ago,ygo,OP,Lgo,xgo,$go,vp,Gae,kgo,Sgo,VP,Rgo,Bgo,Pgo,Fp,Oae,Igo,qgo,XP,Ngo,jgo,Dgo,Tp,Vae,Ggo,Ogo,zP,Vgo,Xgo,zgo,Mp,Xae,Wgo,Qgo,WP,Hgo,Ugo,Jgo,Ep,zae,Ygo,Kgo,QP,Zgo,eho,oho,Cp,Wae,rho,tho,HP,aho,nho,sho,wp,Qae,lho,iho,UP,dho,cho,fho,Ap,Hae,mho,gho,JP,hho,pho,uho,yp,Uae,_ho,bho,YP,vho,Fho,Tho,Lp,Jae,Mho,Eho,KP,Cho,who,Aho,xp,Yae,yho,Lho,ZP,xho,$ho,kho,$p,Kae,Sho,Rho,eI,Bho,Pho,Iho,kp,Zae,qho,Nho,oI,jho,Dho,Gho,Sp,ene,Oho,Vho,rI,Xho,zho,Who,Rp,one,Qho,Hho,tI,Uho,Jho,Yho,Bp,rne,Kho,Zho,aI,epo,opo,rpo,Pp,tne,tpo,apo,nI,npo,spo,lpo,Ip,ane,ipo,dpo,sI,cpo,fpo,mpo,qp,nne,gpo,hpo,lI,ppo,upo,_po,Np,sne,bpo,vpo,iI,Fpo,Tpo,Mpo,jp,lne,Epo,Cpo,dI,wpo,Apo,ypo,Dp,ine,Lpo,xpo,cI,$po,kpo,Spo,Gp,dne,Rpo,Bpo,fI,Ppo,Ipo,qpo,Op,cne,Npo,jpo,mI,Dpo,Gpo,Opo,Vp,fne,Vpo,Xpo,gI,zpo,Wpo,Qpo,Xp,mne,Hpo,Upo,hI,Jpo,Ypo,Kpo,zp,gne,Zpo,euo,pI,ouo,ruo,tuo,Wp,hne,auo,nuo,uI,suo,luo,iuo,Qp,pne,duo,cuo,_I,fuo,muo,guo,Hp,une,huo,puo,bI,uuo,_uo,buo,Up,_ne,vuo,Fuo,vI,Tuo,Muo,Euo,Jp,bne,Cuo,wuo,FI,Auo,yuo,Luo,Yp,vne,xuo,$uo,TI,kuo,Suo,Ruo,Kp,Fne,Buo,Puo,MI,Iuo,quo,Nuo,Zp,Tne,juo,Duo,EI,Guo,Ouo,Vuo,eu,Mne,Xuo,zuo,CI,Wuo,Quo,Huo,ou,Ene,Uuo,Juo,wI,Yuo,Kuo,Zuo,ru,Cne,e_o,o_o,AI,r_o,t_o,a_o,tu,wne,n_o,s_o,yI,l_o,i_o,d_o,au,Ane,c_o,f_o,LI,m_o,g_o,h_o,nu,yne,p_o,u_o,xI,__o,b_o,v_o,su,Lne,F_o,T_o,$I,M_o,E_o,C_o,lu,xne,w_o,A_o,kI,y_o,L_o,x_o,iu,$ne,$_o,k_o,SI,S_o,R_o,B_o,du,kne,P_o,I_o,RI,q_o,N_o,j_o,cu,Sne,D_o,G_o,BI,O_o,V_o,X_o,fu,Rne,z_o,W_o,PI,Q_o,H_o,U_o,mu,Bne,J_o,Y_o,II,K_o,Z_o,e1o,gu,Pne,o1o,r1o,qI,t1o,a1o,n1o,hu,Ine,s1o,l1o,NI,i1o,d1o,c1o,pu,qne,f1o,m1o,jI,g1o,h1o,p1o,uu,Nne,u1o,_1o,DI,b1o,v1o,F1o,_u,jne,T1o,M1o,GI,E1o,C1o,w1o,bu,Dne,A1o,y1o,OI,L1o,x1o,$1o,vu,Gne,k1o,S1o,VI,R1o,B1o,P1o,Fu,One,I1o,q1o,XI,N1o,j1o,D1o,Tu,Vne,G1o,O1o,zI,V1o,X1o,z1o,Mu,W1o,Xne,Q1o,H1o,zne,U1o,J1o,Eu,LBe,Fi,Cu,Wne,e0,Y1o,Qne,K1o,xBe,yo,o0,Z1o,Ti,e2o,WI,o2o,r2o,QI,t2o,a2o,n2o,r0,s2o,Hne,l2o,i2o,d2o,ot,t0,c2o,Une,f2o,m2o,Mi,g2o,Jne,h2o,p2o,HI,u2o,_2o,b2o,wu,v2o,Ue,a0,F2o,Yne,T2o,M2o,wa,E2o,Kne,C2o,w2o,Zne,A2o,y2o,ese,L2o,x2o,$2o,G,Au,ose,k2o,S2o,UI,R2o,B2o,P2o,yu,rse,I2o,q2o,JI,N2o,j2o,D2o,Lu,tse,G2o,O2o,YI,V2o,X2o,z2o,xu,ase,W2o,Q2o,KI,H2o,U2o,J2o,$u,nse,Y2o,K2o,ZI,Z2o,ebo,obo,ku,sse,rbo,tbo,eq,abo,nbo,sbo,Su,lse,lbo,ibo,oq,dbo,cbo,fbo,Ru,ise,mbo,gbo,rq,hbo,pbo,ubo,Bu,dse,_bo,bbo,tq,vbo,Fbo,Tbo,Pu,cse,Mbo,Ebo,aq,Cbo,wbo,Abo,Iu,fse,ybo,Lbo,nq,xbo,$bo,kbo,qu,mse,Sbo,Rbo,sq,Bbo,Pbo,Ibo,Nu,gse,qbo,Nbo,lq,jbo,Dbo,Gbo,ju,hse,Obo,Vbo,iq,Xbo,zbo,Wbo,Du,pse,Qbo,Hbo,dq,Ubo,Jbo,Ybo,Gu,use,Kbo,Zbo,cq,evo,ovo,rvo,Ou,_se,tvo,avo,fq,nvo,svo,lvo,Vu,bse,ivo,dvo,mq,cvo,fvo,mvo,Xu,vse,gvo,hvo,gq,pvo,uvo,_vo,zu,Fse,bvo,vvo,hq,Fvo,Tvo,Mvo,Wu,Tse,Evo,Cvo,pq,wvo,Avo,yvo,Qu,Mse,Lvo,xvo,uq,$vo,kvo,Svo,Hu,Ese,Rvo,Bvo,_q,Pvo,Ivo,qvo,Uu,Cse,Nvo,jvo,bq,Dvo,Gvo,Ovo,Ju,wse,Vvo,Xvo,vq,zvo,Wvo,Qvo,Yu,Ase,Hvo,Uvo,Fq,Jvo,Yvo,Kvo,Ku,yse,Zvo,eFo,Tq,oFo,rFo,tFo,Zu,Lse,aFo,nFo,Mq,sFo,lFo,iFo,e_,xse,dFo,cFo,Eq,fFo,mFo,gFo,o_,$se,hFo,pFo,Cq,uFo,_Fo,bFo,r_,kse,vFo,FFo,wq,TFo,MFo,EFo,t_,Sse,CFo,wFo,Aq,AFo,yFo,LFo,a_,Rse,xFo,$Fo,yq,kFo,SFo,RFo,n_,Bse,BFo,PFo,Lq,IFo,qFo,NFo,s_,Pse,jFo,DFo,xq,GFo,OFo,VFo,l_,Ise,XFo,zFo,$q,WFo,QFo,HFo,i_,qse,UFo,JFo,kq,YFo,KFo,ZFo,d_,Nse,e6o,o6o,Sq,r6o,t6o,a6o,c_,jse,n6o,s6o,Rq,l6o,i6o,d6o,f_,Dse,c6o,f6o,Bq,m6o,g6o,h6o,m_,p6o,Gse,u6o,_6o,Ose,b6o,v6o,g_,$Be,Ei,h_,Vse,n0,F6o,Xse,T6o,kBe,Lo,s0,M6o,Ci,E6o,Pq,C6o,w6o,Iq,A6o,y6o,L6o,l0,x6o,zse,$6o,k6o,S6o,rt,i0,R6o,Wse,B6o,P6o,wi,I6o,Qse,q6o,N6o,qq,j6o,D6o,G6o,p_,O6o,Je,d0,V6o,Hse,X6o,z6o,Aa,W6o,Use,Q6o,H6o,Jse,U6o,J6o,Yse,Y6o,K6o,Z6o,z,u_,Kse,eTo,oTo,Nq,rTo,tTo,aTo,__,Zse,nTo,sTo,jq,lTo,iTo,dTo,b_,ele,cTo,fTo,Dq,mTo,gTo,hTo,v_,ole,pTo,uTo,Gq,_To,bTo,vTo,F_,rle,FTo,TTo,Oq,MTo,ETo,CTo,T_,tle,wTo,ATo,Vq,yTo,LTo,xTo,M_,ale,$To,kTo,Xq,STo,RTo,BTo,E_,nle,PTo,ITo,zq,qTo,NTo,jTo,C_,sle,DTo,GTo,Wq,OTo,VTo,XTo,w_,lle,zTo,WTo,Qq,QTo,HTo,UTo,A_,ile,JTo,YTo,Hq,KTo,ZTo,e8o,y_,dle,o8o,r8o,Uq,t8o,a8o,n8o,L_,cle,s8o,l8o,Jq,i8o,d8o,c8o,x_,fle,f8o,m8o,Yq,g8o,h8o,p8o,$_,mle,u8o,_8o,Kq,b8o,v8o,F8o,k_,gle,T8o,M8o,Zq,E8o,C8o,w8o,S_,hle,A8o,y8o,eN,L8o,x8o,$8o,R_,ple,k8o,S8o,oN,R8o,B8o,P8o,B_,ule,I8o,q8o,rN,N8o,j8o,D8o,P_,_le,G8o,O8o,tN,V8o,X8o,z8o,I_,ble,W8o,Q8o,aN,H8o,U8o,J8o,q_,vle,Y8o,K8o,nN,Z8o,eMo,oMo,N_,Fle,rMo,tMo,sN,aMo,nMo,sMo,j_,Tle,lMo,iMo,lN,dMo,cMo,fMo,D_,Mle,mMo,gMo,iN,hMo,pMo,uMo,G_,Ele,_Mo,bMo,dN,vMo,FMo,TMo,O_,Cle,MMo,EMo,cN,CMo,wMo,AMo,V_,wle,yMo,LMo,fN,xMo,$Mo,kMo,X_,Ale,SMo,RMo,mN,BMo,PMo,IMo,z_,yle,qMo,NMo,gN,jMo,DMo,GMo,W_,Lle,OMo,VMo,hN,XMo,zMo,WMo,Q_,xle,QMo,HMo,pN,UMo,JMo,YMo,H_,$le,KMo,ZMo,uN,e4o,o4o,r4o,U_,kle,t4o,a4o,_N,n4o,s4o,l4o,J_,Sle,i4o,d4o,bN,c4o,f4o,m4o,Y_,g4o,Rle,h4o,p4o,Ble,u4o,_4o,K_,SBe,Ai,Z_,Ple,c0,b4o,Ile,v4o,RBe,xo,f0,F4o,yi,T4o,vN,M4o,E4o,FN,C4o,w4o,A4o,m0,y4o,qle,L4o,x4o,$4o,tt,g0,k4o,Nle,S4o,R4o,Li,B4o,jle,P4o,I4o,TN,q4o,N4o,j4o,e1,D4o,Ye,h0,G4o,Dle,O4o,V4o,ya,X4o,Gle,z4o,W4o,Ole,Q4o,H4o,Vle,U4o,J4o,Y4o,W,o1,Xle,K4o,Z4o,MN,eEo,oEo,rEo,r1,zle,tEo,aEo,EN,nEo,sEo,lEo,t1,Wle,iEo,dEo,CN,cEo,fEo,mEo,a1,Qle,gEo,hEo,wN,pEo,uEo,_Eo,n1,Hle,bEo,vEo,AN,FEo,TEo,MEo,s1,Ule,EEo,CEo,yN,wEo,AEo,yEo,l1,Jle,LEo,xEo,LN,$Eo,kEo,SEo,i1,Yle,REo,BEo,xN,PEo,IEo,qEo,d1,Kle,NEo,jEo,$N,DEo,GEo,OEo,c1,Zle,VEo,XEo,kN,zEo,WEo,QEo,f1,eie,HEo,UEo,SN,JEo,YEo,KEo,m1,oie,ZEo,eCo,RN,oCo,rCo,tCo,g1,rie,aCo,nCo,BN,sCo,lCo,iCo,h1,tie,dCo,cCo,PN,fCo,mCo,gCo,p1,aie,hCo,pCo,IN,uCo,_Co,bCo,u1,nie,vCo,FCo,qN,TCo,MCo,ECo,_1,sie,CCo,wCo,NN,ACo,yCo,LCo,b1,lie,xCo,$Co,jN,kCo,SCo,RCo,v1,iie,BCo,PCo,DN,ICo,qCo,NCo,F1,die,jCo,DCo,GN,GCo,OCo,VCo,T1,cie,XCo,zCo,ON,WCo,QCo,HCo,M1,fie,UCo,JCo,VN,YCo,KCo,ZCo,E1,mie,e5o,o5o,XN,r5o,t5o,a5o,C1,gie,n5o,s5o,zN,l5o,i5o,d5o,w1,hie,c5o,f5o,WN,m5o,g5o,h5o,A1,pie,p5o,u5o,QN,_5o,b5o,v5o,y1,uie,F5o,T5o,HN,M5o,E5o,C5o,L1,_ie,w5o,A5o,UN,y5o,L5o,x5o,x1,bie,$5o,k5o,JN,S5o,R5o,B5o,$1,vie,P5o,I5o,YN,q5o,N5o,j5o,k1,Fie,D5o,G5o,Tie,O5o,V5o,X5o,S1,Mie,z5o,W5o,KN,Q5o,H5o,U5o,R1,Eie,J5o,Y5o,ZN,K5o,Z5o,e3o,B1,Cie,o3o,r3o,ej,t3o,a3o,n3o,P1,wie,s3o,l3o,oj,i3o,d3o,c3o,I1,f3o,Aie,m3o,g3o,yie,h3o,p3o,q1,BBe,xi,N1,Lie,p0,u3o,xie,_3o,PBe,$o,u0,b3o,$i,v3o,rj,F3o,T3o,tj,M3o,E3o,C3o,_0,w3o,$ie,A3o,y3o,L3o,at,b0,x3o,kie,$3o,k3o,ki,S3o,Sie,R3o,B3o,aj,P3o,I3o,q3o,j1,N3o,Ke,v0,j3o,Rie,D3o,G3o,La,O3o,Bie,V3o,X3o,Pie,z3o,W3o,Iie,Q3o,H3o,U3o,he,D1,qie,J3o,Y3o,nj,K3o,Z3o,ewo,G1,Nie,owo,rwo,sj,two,awo,nwo,O1,jie,swo,lwo,lj,iwo,dwo,cwo,V1,Die,fwo,mwo,ij,gwo,hwo,pwo,X1,Gie,uwo,_wo,dj,bwo,vwo,Fwo,z1,Oie,Two,Mwo,cj,Ewo,Cwo,wwo,W1,Vie,Awo,ywo,fj,Lwo,xwo,$wo,Q1,Xie,kwo,Swo,mj,Rwo,Bwo,Pwo,H1,zie,Iwo,qwo,gj,Nwo,jwo,Dwo,U1,Wie,Gwo,Owo,hj,Vwo,Xwo,zwo,J1,Qie,Wwo,Qwo,pj,Hwo,Uwo,Jwo,Y1,Hie,Ywo,Kwo,uj,Zwo,eAo,oAo,K1,Uie,rAo,tAo,_j,aAo,nAo,sAo,Z1,Jie,lAo,iAo,bj,dAo,cAo,fAo,e2,Yie,mAo,gAo,vj,hAo,pAo,uAo,o2,Kie,_Ao,bAo,Fj,vAo,FAo,TAo,r2,Zie,MAo,EAo,Tj,CAo,wAo,AAo,t2,yAo,ede,LAo,xAo,ode,$Ao,kAo,a2,IBe,Si,n2,rde,F0,SAo,tde,RAo,qBe,ko,T0,BAo,Ri,PAo,Mj,IAo,qAo,Ej,NAo,jAo,DAo,M0,GAo,ade,OAo,VAo,XAo,nt,E0,zAo,nde,WAo,QAo,Bi,HAo,sde,UAo,JAo,Cj,YAo,KAo,ZAo,s2,e0o,Ze,C0,o0o,lde,r0o,t0o,xa,a0o,ide,n0o,s0o,dde,l0o,i0o,cde,d0o,c0o,f0o,q,l2,fde,m0o,g0o,wj,h0o,p0o,u0o,i2,mde,_0o,b0o,Aj,v0o,F0o,T0o,d2,gde,M0o,E0o,yj,C0o,w0o,A0o,c2,hde,y0o,L0o,Lj,x0o,$0o,k0o,f2,pde,S0o,R0o,xj,B0o,P0o,I0o,m2,ude,q0o,N0o,$j,j0o,D0o,G0o,g2,_de,O0o,V0o,kj,X0o,z0o,W0o,h2,bde,Q0o,H0o,Sj,U0o,J0o,Y0o,p2,vde,K0o,Z0o,Rj,eyo,oyo,ryo,u2,Fde,tyo,ayo,Bj,nyo,syo,lyo,_2,Tde,iyo,dyo,Pj,cyo,fyo,myo,b2,Mde,gyo,hyo,Ij,pyo,uyo,_yo,v2,Ede,byo,vyo,qj,Fyo,Tyo,Myo,F2,Cde,Eyo,Cyo,Nj,wyo,Ayo,yyo,T2,wde,Lyo,xyo,jj,$yo,kyo,Syo,M2,Ade,Ryo,Byo,Dj,Pyo,Iyo,qyo,E2,yde,Nyo,jyo,Gj,Dyo,Gyo,Oyo,C2,Lde,Vyo,Xyo,Oj,zyo,Wyo,Qyo,w2,xde,Hyo,Uyo,Vj,Jyo,Yyo,Kyo,A2,$de,Zyo,eLo,Xj,oLo,rLo,tLo,y2,kde,aLo,nLo,zj,sLo,lLo,iLo,L2,Sde,dLo,cLo,Wj,fLo,mLo,gLo,x2,Rde,hLo,pLo,Qj,uLo,_Lo,bLo,$2,Bde,vLo,FLo,Hj,TLo,MLo,ELo,k2,Pde,CLo,wLo,Uj,ALo,yLo,LLo,S2,Ide,xLo,$Lo,Jj,kLo,SLo,RLo,R2,qde,BLo,PLo,Yj,ILo,qLo,NLo,B2,Nde,jLo,DLo,Kj,GLo,OLo,VLo,P2,jde,XLo,zLo,Zj,WLo,QLo,HLo,I2,Dde,ULo,JLo,eD,YLo,KLo,ZLo,q2,Gde,e7o,o7o,oD,r7o,t7o,a7o,N2,Ode,n7o,s7o,rD,l7o,i7o,d7o,j2,Vde,c7o,f7o,tD,m7o,g7o,h7o,D2,Xde,p7o,u7o,aD,_7o,b7o,v7o,G2,zde,F7o,T7o,nD,M7o,E7o,C7o,O2,Wde,w7o,A7o,sD,y7o,L7o,x7o,V2,Qde,$7o,k7o,lD,S7o,R7o,B7o,X2,Hde,P7o,I7o,iD,q7o,N7o,j7o,z2,Ude,D7o,G7o,dD,O7o,V7o,X7o,W2,Jde,z7o,W7o,cD,Q7o,H7o,U7o,Q2,Yde,J7o,Y7o,fD,K7o,Z7o,exo,H2,Kde,oxo,rxo,mD,txo,axo,nxo,U2,Zde,sxo,lxo,gD,ixo,dxo,cxo,J2,ece,fxo,mxo,hD,gxo,hxo,pxo,Y2,oce,uxo,_xo,pD,bxo,vxo,Fxo,K2,rce,Txo,Mxo,uD,Exo,Cxo,wxo,Z2,tce,Axo,yxo,_D,Lxo,xxo,$xo,eb,kxo,ace,Sxo,Rxo,nce,Bxo,Pxo,ob,NBe,Pi,rb,sce,w0,Ixo,lce,qxo,jBe,So,A0,Nxo,Ii,jxo,bD,Dxo,Gxo,vD,Oxo,Vxo,Xxo,y0,zxo,ice,Wxo,Qxo,Hxo,st,L0,Uxo,dce,Jxo,Yxo,qi,Kxo,cce,Zxo,e9o,FD,o9o,r9o,t9o,tb,a9o,eo,x0,n9o,fce,s9o,l9o,$a,i9o,mce,d9o,c9o,gce,f9o,m9o,hce,g9o,h9o,p9o,Y,ab,pce,u9o,_9o,TD,b9o,v9o,F9o,nb,uce,T9o,M9o,MD,E9o,C9o,w9o,sb,_ce,A9o,y9o,ED,L9o,x9o,$9o,lb,bce,k9o,S9o,CD,R9o,B9o,P9o,ib,vce,I9o,q9o,wD,N9o,j9o,D9o,db,Fce,G9o,O9o,AD,V9o,X9o,z9o,cb,Tce,W9o,Q9o,yD,H9o,U9o,J9o,fb,Mce,Y9o,K9o,LD,Z9o,e$o,o$o,mb,Ece,r$o,t$o,xD,a$o,n$o,s$o,gb,Cce,l$o,i$o,$D,d$o,c$o,f$o,hb,wce,m$o,g$o,kD,h$o,p$o,u$o,pb,Ace,_$o,b$o,SD,v$o,F$o,T$o,ub,yce,M$o,E$o,RD,C$o,w$o,A$o,_b,Lce,y$o,L$o,BD,x$o,$$o,k$o,bb,xce,S$o,R$o,PD,B$o,P$o,I$o,vb,$ce,q$o,N$o,ID,j$o,D$o,G$o,Fb,kce,O$o,V$o,qD,X$o,z$o,W$o,Tb,Sce,Q$o,H$o,ND,U$o,J$o,Y$o,Mb,Rce,K$o,Z$o,jD,eko,oko,rko,Eb,Bce,tko,ako,DD,nko,sko,lko,Cb,Pce,iko,dko,GD,cko,fko,mko,wb,Ice,gko,hko,OD,pko,uko,_ko,Ab,qce,bko,vko,VD,Fko,Tko,Mko,yb,Nce,Eko,Cko,XD,wko,Ako,yko,Lb,jce,Lko,xko,zD,$ko,kko,Sko,xb,Dce,Rko,Bko,WD,Pko,Iko,qko,$b,Gce,Nko,jko,QD,Dko,Gko,Oko,kb,Oce,Vko,Xko,HD,zko,Wko,Qko,Sb,Hko,Vce,Uko,Jko,Xce,Yko,Kko,Rb,DBe,Ni,Bb,zce,$0,Zko,Wce,eSo,GBe,Ro,k0,oSo,ji,rSo,UD,tSo,aSo,JD,nSo,sSo,lSo,S0,iSo,Qce,dSo,cSo,fSo,lt,R0,mSo,Hce,gSo,hSo,Di,pSo,Uce,uSo,_So,YD,bSo,vSo,FSo,Pb,TSo,oo,B0,MSo,Jce,ESo,CSo,ka,wSo,Yce,ASo,ySo,Kce,LSo,xSo,Zce,$So,kSo,SSo,Qr,Ib,efe,RSo,BSo,KD,PSo,ISo,qSo,qb,ofe,NSo,jSo,ZD,DSo,GSo,OSo,Nb,rfe,VSo,XSo,eG,zSo,WSo,QSo,jb,tfe,HSo,USo,oG,JSo,YSo,KSo,Db,afe,ZSo,eRo,rG,oRo,rRo,tRo,Gb,aRo,nfe,nRo,sRo,sfe,lRo,iRo,Ob,OBe,Gi,Vb,lfe,P0,dRo,ife,cRo,VBe,Bo,I0,fRo,Oi,mRo,tG,gRo,hRo,aG,pRo,uRo,_Ro,q0,bRo,dfe,vRo,FRo,TRo,it,N0,MRo,cfe,ERo,CRo,Vi,wRo,ffe,ARo,yRo,nG,LRo,xRo,$Ro,Xb,kRo,ro,j0,SRo,mfe,RRo,BRo,Sa,PRo,gfe,IRo,qRo,hfe,NRo,jRo,pfe,DRo,GRo,ORo,U,zb,ufe,VRo,XRo,sG,zRo,WRo,QRo,Wb,_fe,HRo,URo,lG,JRo,YRo,KRo,Qb,bfe,ZRo,eBo,iG,oBo,rBo,tBo,Hb,vfe,aBo,nBo,dG,sBo,lBo,iBo,Ub,Ffe,dBo,cBo,cG,fBo,mBo,gBo,Jb,Tfe,hBo,pBo,fG,uBo,_Bo,bBo,Yb,Mfe,vBo,FBo,mG,TBo,MBo,EBo,Kb,Efe,CBo,wBo,gG,ABo,yBo,LBo,Zb,Cfe,xBo,$Bo,hG,kBo,SBo,RBo,ev,wfe,BBo,PBo,pG,IBo,qBo,NBo,ov,Afe,jBo,DBo,uG,GBo,OBo,VBo,rv,yfe,XBo,zBo,_G,WBo,QBo,HBo,tv,Lfe,UBo,JBo,bG,YBo,KBo,ZBo,av,xfe,ePo,oPo,vG,rPo,tPo,aPo,nv,$fe,nPo,sPo,FG,lPo,iPo,dPo,sv,kfe,cPo,fPo,TG,mPo,gPo,hPo,lv,Sfe,pPo,uPo,MG,_Po,bPo,vPo,iv,Rfe,FPo,TPo,EG,MPo,EPo,CPo,dv,Bfe,wPo,APo,CG,yPo,LPo,xPo,cv,Pfe,$Po,kPo,wG,SPo,RPo,BPo,fv,Ife,PPo,IPo,AG,qPo,NPo,jPo,mv,qfe,DPo,GPo,yG,OPo,VPo,XPo,gv,Nfe,zPo,WPo,LG,QPo,HPo,UPo,hv,jfe,JPo,YPo,xG,KPo,ZPo,eIo,pv,Dfe,oIo,rIo,$G,tIo,aIo,nIo,uv,Gfe,sIo,lIo,kG,iIo,dIo,cIo,_v,Ofe,fIo,mIo,SG,gIo,hIo,pIo,bv,Vfe,uIo,_Io,RG,bIo,vIo,FIo,vv,Xfe,TIo,MIo,BG,EIo,CIo,wIo,Fv,zfe,AIo,yIo,PG,LIo,xIo,$Io,Tv,Wfe,kIo,SIo,IG,RIo,BIo,PIo,Mv,Qfe,IIo,qIo,qG,NIo,jIo,DIo,Ev,Hfe,GIo,OIo,NG,VIo,XIo,zIo,Cv,WIo,Ufe,QIo,HIo,Jfe,UIo,JIo,wv,XBe,Xi,Av,Yfe,D0,YIo,Kfe,KIo,zBe,Po,G0,ZIo,zi,eqo,jG,oqo,rqo,DG,tqo,aqo,nqo,O0,sqo,Zfe,lqo,iqo,dqo,dt,V0,cqo,eme,fqo,mqo,Wi,gqo,ome,hqo,pqo,GG,uqo,_qo,bqo,yv,vqo,to,X0,Fqo,rme,Tqo,Mqo,Ra,Eqo,tme,Cqo,wqo,ame,Aqo,yqo,nme,Lqo,xqo,$qo,O,Lv,sme,kqo,Sqo,OG,Rqo,Bqo,Pqo,xv,lme,Iqo,qqo,VG,Nqo,jqo,Dqo,$v,ime,Gqo,Oqo,XG,Vqo,Xqo,zqo,kv,dme,Wqo,Qqo,zG,Hqo,Uqo,Jqo,Sv,cme,Yqo,Kqo,WG,Zqo,eNo,oNo,Rv,fme,rNo,tNo,QG,aNo,nNo,sNo,Bv,mme,lNo,iNo,HG,dNo,cNo,fNo,Pv,gme,mNo,gNo,UG,hNo,pNo,uNo,Iv,hme,_No,bNo,JG,vNo,FNo,TNo,qv,pme,MNo,ENo,YG,CNo,wNo,ANo,Nv,ume,yNo,LNo,KG,xNo,$No,kNo,jv,_me,SNo,RNo,ZG,BNo,PNo,INo,Dv,bme,qNo,NNo,eO,jNo,DNo,GNo,Gv,vme,ONo,VNo,oO,XNo,zNo,WNo,Ov,Fme,QNo,HNo,rO,UNo,JNo,YNo,Vv,Tme,KNo,ZNo,tO,ejo,ojo,rjo,Xv,Mme,tjo,ajo,aO,njo,sjo,ljo,zv,Eme,ijo,djo,nO,cjo,fjo,mjo,Wv,Cme,gjo,hjo,sO,pjo,ujo,_jo,Qv,wme,bjo,vjo,lO,Fjo,Tjo,Mjo,Hv,Ame,Ejo,Cjo,iO,wjo,Ajo,yjo,Uv,yme,Ljo,xjo,dO,$jo,kjo,Sjo,Jv,Lme,Rjo,Bjo,cO,Pjo,Ijo,qjo,Yv,xme,Njo,jjo,fO,Djo,Gjo,Ojo,Kv,$me,Vjo,Xjo,mO,zjo,Wjo,Qjo,Zv,kme,Hjo,Ujo,gO,Jjo,Yjo,Kjo,eF,Sme,Zjo,eDo,hO,oDo,rDo,tDo,oF,Rme,aDo,nDo,pO,sDo,lDo,iDo,rF,Bme,dDo,cDo,uO,fDo,mDo,gDo,tF,Pme,hDo,pDo,_O,uDo,_Do,bDo,aF,Ime,vDo,FDo,bO,TDo,MDo,EDo,nF,qme,CDo,wDo,vO,ADo,yDo,LDo,sF,Nme,xDo,$Do,FO,kDo,SDo,RDo,lF,jme,BDo,PDo,TO,IDo,qDo,NDo,iF,Dme,jDo,DDo,MO,GDo,ODo,VDo,dF,Gme,XDo,zDo,EO,WDo,QDo,HDo,cF,Ome,UDo,JDo,CO,YDo,KDo,ZDo,fF,Vme,eGo,oGo,wO,rGo,tGo,aGo,mF,Xme,nGo,sGo,AO,lGo,iGo,dGo,gF,cGo,zme,fGo,mGo,Wme,gGo,hGo,hF,WBe,Qi,pF,Qme,z0,pGo,Hme,uGo,QBe,Io,W0,_Go,Hi,bGo,yO,vGo,FGo,LO,TGo,MGo,EGo,Q0,CGo,Ume,wGo,AGo,yGo,ct,H0,LGo,Jme,xGo,$Go,Ui,kGo,Yme,SGo,RGo,xO,BGo,PGo,IGo,uF,qGo,ao,U0,NGo,Kme,jGo,DGo,Ba,GGo,Zme,OGo,VGo,ege,XGo,zGo,oge,WGo,QGo,HGo,rge,_F,tge,UGo,JGo,$O,YGo,KGo,ZGo,bF,eOo,age,oOo,rOo,nge,tOo,aOo,vF,HBe,Ji,FF,sge,J0,nOo,lge,sOo,UBe,qo,Y0,lOo,Yi,iOo,kO,dOo,cOo,SO,fOo,mOo,gOo,K0,hOo,ige,pOo,uOo,_Oo,ft,Z0,bOo,dge,vOo,FOo,Ki,TOo,cge,MOo,EOo,RO,COo,wOo,AOo,TF,yOo,no,ey,LOo,fge,xOo,$Oo,Pa,kOo,mge,SOo,ROo,gge,BOo,POo,hge,IOo,qOo,NOo,Fe,MF,pge,jOo,DOo,BO,GOo,OOo,VOo,EF,uge,XOo,zOo,PO,WOo,QOo,HOo,CF,_ge,UOo,JOo,IO,YOo,KOo,ZOo,Ls,bge,eVo,oVo,qO,rVo,tVo,NO,aVo,nVo,sVo,wF,vge,lVo,iVo,jO,dVo,cVo,fVo,mt,Fge,mVo,gVo,DO,hVo,pVo,GO,uVo,_Vo,OO,bVo,vVo,FVo,AF,Tge,TVo,MVo,VO,EVo,CVo,wVo,yF,Mge,AVo,yVo,XO,LVo,xVo,$Vo,LF,Ege,kVo,SVo,zO,RVo,BVo,PVo,xF,Cge,IVo,qVo,WO,NVo,jVo,DVo,$F,wge,GVo,OVo,QO,VVo,XVo,zVo,kF,Age,WVo,QVo,HO,HVo,UVo,JVo,SF,yge,YVo,KVo,UO,ZVo,eXo,oXo,RF,rXo,Lge,tXo,aXo,xge,nXo,sXo,BF,JBe,Zi,PF,$ge,oy,lXo,kge,iXo,YBe,No,ry,dXo,ed,cXo,JO,fXo,mXo,YO,gXo,hXo,pXo,ty,uXo,Sge,_Xo,bXo,vXo,gt,ay,FXo,Rge,TXo,MXo,od,EXo,Bge,CXo,wXo,KO,AXo,yXo,LXo,IF,xXo,so,ny,$Xo,Pge,kXo,SXo,Ia,RXo,Ige,BXo,PXo,qge,IXo,qXo,Nge,NXo,jXo,DXo,jge,qF,Dge,GXo,OXo,ZO,VXo,XXo,zXo,NF,WXo,Gge,QXo,HXo,Oge,UXo,JXo,jF,KBe,rd,DF,Vge,sy,YXo,Xge,KXo,ZBe,jo,ly,ZXo,td,ezo,eV,ozo,rzo,oV,tzo,azo,nzo,iy,szo,zge,lzo,izo,dzo,ht,dy,czo,Wge,fzo,mzo,ad,gzo,Qge,hzo,pzo,rV,uzo,_zo,bzo,GF,vzo,lo,cy,Fzo,Hge,Tzo,Mzo,qa,Ezo,Uge,Czo,wzo,Jge,Azo,yzo,Yge,Lzo,xzo,$zo,ke,OF,Kge,kzo,Szo,tV,Rzo,Bzo,Pzo,VF,Zge,Izo,qzo,aV,Nzo,jzo,Dzo,XF,ehe,Gzo,Ozo,nV,Vzo,Xzo,zzo,zF,ohe,Wzo,Qzo,sV,Hzo,Uzo,Jzo,WF,rhe,Yzo,Kzo,lV,Zzo,eWo,oWo,QF,the,rWo,tWo,iV,aWo,nWo,sWo,HF,ahe,lWo,iWo,dV,dWo,cWo,fWo,UF,nhe,mWo,gWo,cV,hWo,pWo,uWo,JF,she,_Wo,bWo,fV,vWo,FWo,TWo,YF,MWo,lhe,EWo,CWo,ihe,wWo,AWo,KF,ePe,nd,ZF,dhe,fy,yWo,che,LWo,oPe,Do,my,xWo,sd,$Wo,mV,kWo,SWo,gV,RWo,BWo,PWo,gy,IWo,fhe,qWo,NWo,jWo,pt,hy,DWo,mhe,GWo,OWo,ld,VWo,ghe,XWo,zWo,hV,WWo,QWo,HWo,e6,UWo,io,py,JWo,hhe,YWo,KWo,Na,ZWo,phe,eQo,oQo,uhe,rQo,tQo,_he,aQo,nQo,sQo,Hr,o6,bhe,lQo,iQo,pV,dQo,cQo,fQo,r6,vhe,mQo,gQo,uV,hQo,pQo,uQo,t6,Fhe,_Qo,bQo,_V,vQo,FQo,TQo,a6,The,MQo,EQo,bV,CQo,wQo,AQo,n6,Mhe,yQo,LQo,vV,xQo,$Qo,kQo,s6,SQo,Ehe,RQo,BQo,Che,PQo,IQo,l6,rPe,id,i6,whe,uy,qQo,Ahe,NQo,tPe,Go,_y,jQo,dd,DQo,FV,GQo,OQo,TV,VQo,XQo,zQo,by,WQo,yhe,QQo,HQo,UQo,ut,vy,JQo,Lhe,YQo,KQo,cd,ZQo,xhe,eHo,oHo,MV,rHo,tHo,aHo,d6,nHo,co,Fy,sHo,$he,lHo,iHo,ja,dHo,khe,cHo,fHo,She,mHo,gHo,Rhe,hHo,pHo,uHo,Se,c6,Bhe,_Ho,bHo,EV,vHo,FHo,THo,f6,Phe,MHo,EHo,CV,CHo,wHo,AHo,m6,Ihe,yHo,LHo,wV,xHo,$Ho,kHo,g6,qhe,SHo,RHo,AV,BHo,PHo,IHo,h6,Nhe,qHo,NHo,yV,jHo,DHo,GHo,p6,jhe,OHo,VHo,LV,XHo,zHo,WHo,u6,Dhe,QHo,HHo,xV,UHo,JHo,YHo,_6,Ghe,KHo,ZHo,$V,eUo,oUo,rUo,b6,Ohe,tUo,aUo,kV,nUo,sUo,lUo,v6,iUo,Vhe,dUo,cUo,Xhe,fUo,mUo,F6,aPe,fd,T6,zhe,Ty,gUo,Whe,hUo,nPe,Oo,My,pUo,md,uUo,SV,_Uo,bUo,RV,vUo,FUo,TUo,Ey,MUo,Qhe,EUo,CUo,wUo,_t,Cy,AUo,Hhe,yUo,LUo,gd,xUo,Uhe,$Uo,kUo,BV,SUo,RUo,BUo,M6,PUo,fo,wy,IUo,Jhe,qUo,NUo,Da,jUo,Yhe,DUo,GUo,Khe,OUo,VUo,Zhe,XUo,zUo,WUo,Ay,E6,epe,QUo,HUo,PV,UUo,JUo,YUo,C6,ope,KUo,ZUo,IV,eJo,oJo,rJo,w6,tJo,rpe,aJo,nJo,tpe,sJo,lJo,A6,sPe,hd,y6,ape,yy,iJo,npe,dJo,lPe,Vo,Ly,cJo,pd,fJo,qV,mJo,gJo,NV,hJo,pJo,uJo,xy,_Jo,spe,bJo,vJo,FJo,bt,$y,TJo,lpe,MJo,EJo,ud,CJo,ipe,wJo,AJo,jV,yJo,LJo,xJo,L6,$Jo,mo,ky,kJo,dpe,SJo,RJo,Ga,BJo,cpe,PJo,IJo,fpe,qJo,NJo,mpe,jJo,DJo,GJo,Ur,x6,gpe,OJo,VJo,DV,XJo,zJo,WJo,$6,hpe,QJo,HJo,GV,UJo,JJo,YJo,k6,ppe,KJo,ZJo,OV,eYo,oYo,rYo,S6,upe,tYo,aYo,VV,nYo,sYo,lYo,R6,_pe,iYo,dYo,XV,cYo,fYo,mYo,B6,gYo,bpe,hYo,pYo,vpe,uYo,_Yo,P6,iPe,_d,I6,Fpe,Sy,bYo,Tpe,vYo,dPe,Xo,Ry,FYo,bd,TYo,zV,MYo,EYo,WV,CYo,wYo,AYo,By,yYo,Mpe,LYo,xYo,$Yo,vt,Py,kYo,Epe,SYo,RYo,vd,BYo,Cpe,PYo,IYo,QV,qYo,NYo,jYo,q6,DYo,go,Iy,GYo,wpe,OYo,VYo,Oa,XYo,Ape,zYo,WYo,ype,QYo,HYo,Lpe,UYo,JYo,YYo,Fd,N6,xpe,KYo,ZYo,HV,eKo,oKo,rKo,j6,$pe,tKo,aKo,UV,nKo,sKo,lKo,D6,kpe,iKo,dKo,JV,cKo,fKo,mKo,G6,gKo,Spe,hKo,pKo,Rpe,uKo,_Ko,O6,cPe,Td,V6,Bpe,qy,bKo,Ppe,vKo,fPe,zo,Ny,FKo,Md,TKo,YV,MKo,EKo,KV,CKo,wKo,AKo,jy,yKo,Ipe,LKo,xKo,$Ko,Ft,Dy,kKo,qpe,SKo,RKo,Ed,BKo,Npe,PKo,IKo,ZV,qKo,NKo,jKo,X6,DKo,ho,Gy,GKo,jpe,OKo,VKo,Va,XKo,Dpe,zKo,WKo,Gpe,QKo,HKo,Ope,UKo,JKo,YKo,Vpe,z6,Xpe,KKo,ZKo,eX,eZo,oZo,rZo,W6,tZo,zpe,aZo,nZo,Wpe,sZo,lZo,Q6,mPe,Cd,H6,Qpe,Oy,iZo,Hpe,dZo,gPe,Wo,Vy,cZo,wd,fZo,oX,mZo,gZo,rX,hZo,pZo,uZo,Xy,_Zo,Upe,bZo,vZo,FZo,Tt,zy,TZo,Jpe,MZo,EZo,Ad,CZo,Ype,wZo,AZo,tX,yZo,LZo,xZo,U6,$Zo,po,Wy,kZo,Kpe,SZo,RZo,Xa,BZo,Zpe,PZo,IZo,eue,qZo,NZo,oue,jZo,DZo,GZo,rue,J6,tue,OZo,VZo,aX,XZo,zZo,WZo,Y6,QZo,aue,HZo,UZo,nue,JZo,YZo,K6,hPe,yd,Z6,sue,Qy,KZo,lue,ZZo,pPe,Qo,Hy,eer,Ld,oer,nX,rer,ter,sX,aer,ner,ser,Uy,ler,iue,ier,der,cer,Mt,Jy,fer,due,mer,ger,xd,her,cue,per,uer,lX,_er,ber,ver,eT,Fer,uo,Yy,Ter,fue,Mer,Eer,za,Cer,mue,wer,Aer,gue,yer,Ler,hue,xer,$er,ker,Wa,oT,pue,Ser,Rer,iX,Ber,Per,Ier,rT,uue,qer,Ner,dX,jer,Der,Ger,tT,_ue,Oer,Ver,cX,Xer,zer,Wer,aT,bue,Qer,Her,fX,Uer,Jer,Yer,nT,Ker,vue,Zer,eor,Fue,oor,ror,sT,uPe,$d,lT,Tue,Ky,tor,Mue,aor,_Pe,Ho,Zy,nor,kd,sor,mX,lor,ior,gX,dor,cor,mor,eL,gor,Eue,hor,por,uor,Et,oL,_or,Cue,bor,vor,Sd,For,wue,Tor,Mor,hX,Eor,Cor,wor,iT,Aor,_o,rL,yor,Aue,Lor,xor,Qa,$or,yue,kor,Sor,Lue,Ror,Bor,xue,Por,Ior,qor,$ue,dT,kue,Nor,jor,pX,Dor,Gor,Oor,cT,Vor,Sue,Xor,zor,Rue,Wor,Qor,fT,bPe,Rd,mT,Bue,tL,Hor,Pue,Uor,vPe,Uo,aL,Jor,Bd,Yor,uX,Kor,Zor,_X,err,orr,rrr,nL,trr,Iue,arr,nrr,srr,Ct,sL,lrr,que,irr,drr,Pd,crr,Nue,frr,mrr,bX,grr,hrr,prr,gT,urr,Mr,lL,_rr,jue,brr,vrr,Ha,Frr,Due,Trr,Mrr,Gue,Err,Crr,Oue,wrr,Arr,yrr,j,hT,Vue,Lrr,xrr,vX,$rr,krr,Srr,pT,Xue,Rrr,Brr,FX,Prr,Irr,qrr,uT,zue,Nrr,jrr,TX,Drr,Grr,Orr,_T,Wue,Vrr,Xrr,MX,zrr,Wrr,Qrr,bT,Que,Hrr,Urr,EX,Jrr,Yrr,Krr,vT,Hue,Zrr,etr,CX,otr,rtr,ttr,FT,Uue,atr,ntr,wX,str,ltr,itr,TT,Jue,dtr,ctr,AX,ftr,mtr,gtr,MT,Yue,htr,ptr,yX,utr,_tr,btr,ET,Kue,vtr,Ftr,LX,Ttr,Mtr,Etr,CT,Zue,Ctr,wtr,xX,Atr,ytr,Ltr,wT,e_e,xtr,$tr,$X,ktr,Str,Rtr,AT,o_e,Btr,Ptr,kX,Itr,qtr,Ntr,yT,r_e,jtr,Dtr,SX,Gtr,Otr,Vtr,LT,t_e,Xtr,ztr,RX,Wtr,Qtr,Htr,xT,a_e,Utr,Jtr,BX,Ytr,Ktr,Ztr,xs,n_e,ear,oar,PX,rar,tar,IX,aar,nar,sar,$T,s_e,lar,iar,qX,dar,car,far,kT,l_e,mar,gar,NX,har,par,uar,ST,i_e,_ar,bar,jX,Far,Tar,Mar,RT,d_e,Ear,Car,DX,war,Aar,yar,BT,c_e,Lar,xar,GX,$ar,kar,Sar,PT,f_e,Rar,Bar,OX,Par,Iar,qar,IT,m_e,Nar,jar,VX,Dar,Gar,Oar,qT,g_e,Var,Xar,XX,zar,War,Qar,NT,h_e,Har,Uar,zX,Jar,Yar,Kar,jT,p_e,Zar,enr,WX,onr,rnr,tnr,DT,u_e,anr,nnr,QX,snr,lnr,inr,GT,__e,dnr,cnr,HX,fnr,mnr,gnr,OT,b_e,hnr,pnr,UX,unr,_nr,bnr,VT,v_e,vnr,Fnr,JX,Tnr,Mnr,Enr,XT,F_e,Cnr,wnr,YX,Anr,ynr,Lnr,zT,T_e,xnr,$nr,KX,knr,Snr,Rnr,WT,M_e,Bnr,Pnr,ZX,Inr,qnr,Nnr,QT,E_e,jnr,Dnr,ez,Gnr,Onr,Vnr,HT,C_e,Xnr,znr,oz,Wnr,Qnr,Hnr,UT,w_e,Unr,Jnr,rz,Ynr,Knr,Znr,JT,A_e,esr,osr,tz,rsr,tsr,asr,YT,y_e,nsr,ssr,az,lsr,isr,dsr,KT,L_e,csr,fsr,nz,msr,gsr,hsr,ZT,x_e,psr,usr,sz,_sr,bsr,vsr,e8,$_e,Fsr,Tsr,lz,Msr,Esr,Csr,o8,k_e,wsr,Asr,iz,ysr,Lsr,xsr,r8,S_e,$sr,ksr,dz,Ssr,Rsr,Bsr,t8,FPe,Id,a8,R_e,iL,Psr,B_e,Isr,TPe,Jo,dL,qsr,qd,Nsr,cz,jsr,Dsr,fz,Gsr,Osr,Vsr,cL,Xsr,P_e,zsr,Wsr,Qsr,wt,fL,Hsr,I_e,Usr,Jsr,Nd,Ysr,q_e,Ksr,Zsr,mz,elr,olr,rlr,n8,tlr,Er,mL,alr,N_e,nlr,slr,Ua,llr,j_e,ilr,dlr,D_e,clr,flr,G_e,mlr,glr,hlr,ne,s8,O_e,plr,ulr,gz,_lr,blr,vlr,l8,V_e,Flr,Tlr,hz,Mlr,Elr,Clr,i8,X_e,wlr,Alr,pz,ylr,Llr,xlr,d8,z_e,$lr,klr,uz,Slr,Rlr,Blr,c8,W_e,Plr,Ilr,_z,qlr,Nlr,jlr,f8,Q_e,Dlr,Glr,bz,Olr,Vlr,Xlr,m8,H_e,zlr,Wlr,vz,Qlr,Hlr,Ulr,g8,U_e,Jlr,Ylr,Fz,Klr,Zlr,eir,h8,J_e,oir,rir,Tz,tir,air,nir,p8,Y_e,sir,lir,Mz,iir,dir,cir,u8,K_e,fir,mir,Ez,gir,hir,pir,_8,Z_e,uir,_ir,Cz,bir,vir,Fir,b8,e1e,Tir,Mir,wz,Eir,Cir,wir,v8,o1e,Air,yir,Az,Lir,xir,$ir,F8,r1e,kir,Sir,yz,Rir,Bir,Pir,T8,t1e,Iir,qir,Lz,Nir,jir,Dir,M8,a1e,Gir,Oir,xz,Vir,Xir,zir,E8,n1e,Wir,Qir,$z,Hir,Uir,Jir,C8,s1e,Yir,Kir,kz,Zir,edr,odr,w8,l1e,rdr,tdr,Sz,adr,ndr,sdr,A8,i1e,ldr,idr,Rz,ddr,cdr,fdr,y8,d1e,mdr,gdr,Bz,hdr,pdr,udr,L8,c1e,_dr,bdr,Pz,vdr,Fdr,Tdr,x8,MPe,jd,$8,f1e,gL,Mdr,m1e,Edr,EPe,Yo,hL,Cdr,Dd,wdr,Iz,Adr,ydr,qz,Ldr,xdr,$dr,pL,kdr,g1e,Sdr,Rdr,Bdr,At,uL,Pdr,h1e,Idr,qdr,Gd,Ndr,p1e,jdr,Ddr,Nz,Gdr,Odr,Vdr,k8,Xdr,Cr,_L,zdr,u1e,Wdr,Qdr,Ja,Hdr,_1e,Udr,Jdr,b1e,Ydr,Kdr,v1e,Zdr,ecr,ocr,Te,S8,F1e,rcr,tcr,jz,acr,ncr,scr,R8,T1e,lcr,icr,Dz,dcr,ccr,fcr,B8,M1e,mcr,gcr,Gz,hcr,pcr,ucr,P8,E1e,_cr,bcr,Oz,vcr,Fcr,Tcr,I8,C1e,Mcr,Ecr,Vz,Ccr,wcr,Acr,q8,w1e,ycr,Lcr,Xz,xcr,$cr,kcr,N8,A1e,Scr,Rcr,zz,Bcr,Pcr,Icr,j8,y1e,qcr,Ncr,Wz,jcr,Dcr,Gcr,D8,L1e,Ocr,Vcr,Qz,Xcr,zcr,Wcr,G8,x1e,Qcr,Hcr,Hz,Ucr,Jcr,Ycr,O8,$1e,Kcr,Zcr,Uz,efr,ofr,rfr,V8,k1e,tfr,afr,Jz,nfr,sfr,lfr,X8,CPe,Od,z8,S1e,bL,ifr,R1e,dfr,wPe,Ko,vL,cfr,Vd,ffr,Yz,mfr,gfr,Kz,hfr,pfr,ufr,FL,_fr,B1e,bfr,vfr,Ffr,yt,TL,Tfr,P1e,Mfr,Efr,Xd,Cfr,I1e,wfr,Afr,Zz,yfr,Lfr,xfr,W8,$fr,wr,ML,kfr,q1e,Sfr,Rfr,Ya,Bfr,N1e,Pfr,Ifr,j1e,qfr,Nfr,D1e,jfr,Dfr,Gfr,EL,Q8,G1e,Ofr,Vfr,eW,Xfr,zfr,Wfr,H8,O1e,Qfr,Hfr,oW,Ufr,Jfr,Yfr,U8,APe,zd,J8,V1e,CL,Kfr,X1e,Zfr,yPe,Zo,wL,emr,Wd,omr,rW,rmr,tmr,tW,amr,nmr,smr,AL,lmr,z1e,imr,dmr,cmr,Lt,yL,fmr,W1e,mmr,gmr,Qd,hmr,Q1e,pmr,umr,aW,_mr,bmr,vmr,Y8,Fmr,Ar,LL,Tmr,H1e,Mmr,Emr,Ka,Cmr,U1e,wmr,Amr,J1e,ymr,Lmr,Y1e,xmr,$mr,kmr,ie,K8,K1e,Smr,Rmr,nW,Bmr,Pmr,Imr,Z8,Z1e,qmr,Nmr,sW,jmr,Dmr,Gmr,eM,e2e,Omr,Vmr,lW,Xmr,zmr,Wmr,oM,o2e,Qmr,Hmr,iW,Umr,Jmr,Ymr,rM,r2e,Kmr,Zmr,dW,egr,ogr,rgr,tM,t2e,tgr,agr,cW,ngr,sgr,lgr,aM,a2e,igr,dgr,fW,cgr,fgr,mgr,nM,n2e,ggr,hgr,mW,pgr,ugr,_gr,sM,s2e,bgr,vgr,gW,Fgr,Tgr,Mgr,lM,l2e,Egr,Cgr,hW,wgr,Agr,ygr,iM,i2e,Lgr,xgr,pW,$gr,kgr,Sgr,dM,d2e,Rgr,Bgr,uW,Pgr,Igr,qgr,cM,c2e,Ngr,jgr,_W,Dgr,Ggr,Ogr,fM,f2e,Vgr,Xgr,bW,zgr,Wgr,Qgr,mM,m2e,Hgr,Ugr,vW,Jgr,Ygr,Kgr,gM,g2e,Zgr,ehr,FW,ohr,rhr,thr,hM,h2e,ahr,nhr,TW,shr,lhr,ihr,pM,p2e,dhr,chr,MW,fhr,mhr,ghr,uM,u2e,hhr,phr,EW,uhr,_hr,bhr,_M,_2e,vhr,Fhr,CW,Thr,Mhr,Ehr,bM,LPe,Hd,vM,b2e,xL,Chr,v2e,whr,xPe,er,$L,Ahr,Ud,yhr,wW,Lhr,xhr,AW,$hr,khr,Shr,kL,Rhr,F2e,Bhr,Phr,Ihr,xt,SL,qhr,T2e,Nhr,jhr,Jd,Dhr,M2e,Ghr,Ohr,yW,Vhr,Xhr,zhr,FM,Whr,yr,RL,Qhr,E2e,Hhr,Uhr,Za,Jhr,C2e,Yhr,Khr,w2e,Zhr,epr,A2e,opr,rpr,tpr,ye,TM,y2e,apr,npr,LW,spr,lpr,ipr,MM,L2e,dpr,cpr,xW,fpr,mpr,gpr,EM,x2e,hpr,ppr,$W,upr,_pr,bpr,CM,$2e,vpr,Fpr,kW,Tpr,Mpr,Epr,wM,k2e,Cpr,wpr,SW,Apr,ypr,Lpr,AM,S2e,xpr,$pr,RW,kpr,Spr,Rpr,yM,R2e,Bpr,Ppr,BW,Ipr,qpr,Npr,LM,B2e,jpr,Dpr,PW,Gpr,Opr,Vpr,xM,P2e,Xpr,zpr,IW,Wpr,Qpr,Hpr,$M,I2e,Upr,Jpr,qW,Ypr,Kpr,Zpr,kM,$Pe,Yd,SM,q2e,BL,eur,N2e,our,kPe,or,PL,rur,Kd,tur,NW,aur,nur,jW,sur,lur,iur,IL,dur,j2e,cur,fur,mur,$t,qL,gur,D2e,hur,pur,Zd,uur,G2e,_ur,bur,DW,vur,Fur,Tur,RM,Mur,Lr,NL,Eur,O2e,Cur,wur,en,Aur,V2e,yur,Lur,X2e,xur,$ur,z2e,kur,Sur,Rur,Z,BM,W2e,Bur,Pur,GW,Iur,qur,Nur,PM,Q2e,jur,Dur,OW,Gur,Our,Vur,IM,H2e,Xur,zur,VW,Wur,Qur,Hur,qM,U2e,Uur,Jur,XW,Yur,Kur,Zur,NM,J2e,e_r,o_r,zW,r_r,t_r,a_r,jM,Y2e,n_r,s_r,WW,l_r,i_r,d_r,DM,K2e,c_r,f_r,QW,m_r,g_r,h_r,GM,Z2e,p_r,u_r,HW,__r,b_r,v_r,OM,ebe,F_r,T_r,UW,M_r,E_r,C_r,VM,obe,w_r,A_r,JW,y_r,L_r,x_r,XM,rbe,$_r,k_r,YW,S_r,R_r,B_r,zM,tbe,P_r,I_r,KW,q_r,N_r,j_r,WM,abe,D_r,G_r,ZW,O_r,V_r,X_r,QM,nbe,z_r,W_r,eQ,Q_r,H_r,U_r,HM,sbe,J_r,Y_r,oQ,K_r,Z_r,e1r,UM,lbe,o1r,r1r,rQ,t1r,a1r,n1r,JM,ibe,s1r,l1r,tQ,i1r,d1r,c1r,YM,dbe,f1r,m1r,aQ,g1r,h1r,p1r,KM,cbe,u1r,_1r,nQ,b1r,v1r,F1r,ZM,fbe,T1r,M1r,sQ,E1r,C1r,w1r,e4,mbe,A1r,y1r,lQ,L1r,x1r,$1r,o4,gbe,k1r,S1r,iQ,R1r,B1r,P1r,r4,hbe,I1r,q1r,dQ,N1r,j1r,D1r,t4,pbe,G1r,O1r,cQ,V1r,X1r,z1r,a4,ube,W1r,Q1r,fQ,H1r,U1r,J1r,n4,_be,Y1r,K1r,mQ,Z1r,e2r,o2r,s4,SPe,ec,l4,bbe,jL,r2r,vbe,t2r,RPe,rr,DL,a2r,oc,n2r,gQ,s2r,l2r,hQ,i2r,d2r,c2r,GL,f2r,Fbe,m2r,g2r,h2r,kt,OL,p2r,Tbe,u2r,_2r,rc,b2r,Mbe,v2r,F2r,pQ,T2r,M2r,E2r,i4,C2r,xr,VL,w2r,Ebe,A2r,y2r,on,L2r,Cbe,x2r,$2r,wbe,k2r,S2r,Abe,R2r,B2r,P2r,pe,d4,ybe,I2r,q2r,uQ,N2r,j2r,D2r,c4,Lbe,G2r,O2r,_Q,V2r,X2r,z2r,f4,xbe,W2r,Q2r,bQ,H2r,U2r,J2r,m4,$be,Y2r,K2r,vQ,Z2r,ebr,obr,g4,kbe,rbr,tbr,FQ,abr,nbr,sbr,h4,Sbe,lbr,ibr,TQ,dbr,cbr,fbr,p4,Rbe,mbr,gbr,MQ,hbr,pbr,ubr,u4,Bbe,_br,bbr,EQ,vbr,Fbr,Tbr,_4,Pbe,Mbr,Ebr,CQ,Cbr,wbr,Abr,b4,Ibe,ybr,Lbr,wQ,xbr,$br,kbr,v4,qbe,Sbr,Rbr,AQ,Bbr,Pbr,Ibr,F4,Nbe,qbr,Nbr,yQ,jbr,Dbr,Gbr,T4,jbe,Obr,Vbr,LQ,Xbr,zbr,Wbr,M4,Dbe,Qbr,Hbr,xQ,Ubr,Jbr,Ybr,E4,Gbe,Kbr,Zbr,$Q,evr,ovr,rvr,C4,Obe,tvr,avr,kQ,nvr,svr,lvr,w4,Vbe,ivr,dvr,SQ,cvr,fvr,mvr,A4,BPe,tc,y4,Xbe,XL,gvr,zbe,hvr,PPe,tr,zL,pvr,ac,uvr,RQ,_vr,bvr,BQ,vvr,Fvr,Tvr,WL,Mvr,Wbe,Evr,Cvr,wvr,St,QL,Avr,Qbe,yvr,Lvr,nc,xvr,Hbe,$vr,kvr,PQ,Svr,Rvr,Bvr,L4,Pvr,$r,HL,Ivr,Ube,qvr,Nvr,rn,jvr,Jbe,Dvr,Gvr,Ybe,Ovr,Vvr,Kbe,Xvr,zvr,Wvr,Zbe,x4,eve,Qvr,Hvr,IQ,Uvr,Jvr,Yvr,$4,IPe,sc,k4,ove,UL,Kvr,rve,Zvr,qPe,ar,JL,eFr,lc,oFr,qQ,rFr,tFr,NQ,aFr,nFr,sFr,YL,lFr,tve,iFr,dFr,cFr,Rt,KL,fFr,ave,mFr,gFr,ic,hFr,nve,pFr,uFr,jQ,_Fr,bFr,vFr,S4,FFr,kr,ZL,TFr,sve,MFr,EFr,tn,CFr,lve,wFr,AFr,ive,yFr,LFr,dve,xFr,$Fr,kFr,de,R4,cve,SFr,RFr,DQ,BFr,PFr,IFr,B4,fve,qFr,NFr,GQ,jFr,DFr,GFr,P4,mve,OFr,VFr,OQ,XFr,zFr,WFr,I4,gve,QFr,HFr,VQ,UFr,JFr,YFr,q4,hve,KFr,ZFr,XQ,e6r,o6r,r6r,N4,pve,t6r,a6r,zQ,n6r,s6r,l6r,j4,uve,i6r,d6r,WQ,c6r,f6r,m6r,D4,_ve,g6r,h6r,QQ,p6r,u6r,_6r,G4,bve,b6r,v6r,HQ,F6r,T6r,M6r,O4,vve,E6r,C6r,UQ,w6r,A6r,y6r,V4,Fve,L6r,x6r,JQ,$6r,k6r,S6r,X4,Tve,R6r,B6r,YQ,P6r,I6r,q6r,z4,Mve,N6r,j6r,KQ,D6r,G6r,O6r,W4,Eve,V6r,X6r,ZQ,z6r,W6r,Q6r,Q4,Cve,H6r,U6r,eH,J6r,Y6r,K6r,H4,wve,Z6r,eTr,oH,oTr,rTr,tTr,U4,Ave,aTr,nTr,rH,sTr,lTr,iTr,J4,yve,dTr,cTr,tH,fTr,mTr,gTr,Y4,Lve,hTr,pTr,aH,uTr,_Tr,bTr,K4,xve,vTr,FTr,nH,TTr,MTr,ETr,Z4,NPe,dc,eE,$ve,e7,CTr,kve,wTr,jPe,nr,o7,ATr,cc,yTr,sH,LTr,xTr,lH,$Tr,kTr,STr,r7,RTr,Sve,BTr,PTr,ITr,Bt,t7,qTr,Rve,NTr,jTr,fc,DTr,Bve,GTr,OTr,iH,VTr,XTr,zTr,oE,WTr,Sr,a7,QTr,Pve,HTr,UTr,an,JTr,Ive,YTr,KTr,qve,ZTr,e8r,Nve,o8r,r8r,t8r,ce,rE,jve,a8r,n8r,dH,s8r,l8r,i8r,tE,Dve,d8r,c8r,cH,f8r,m8r,g8r,aE,Gve,h8r,p8r,fH,u8r,_8r,b8r,nE,Ove,v8r,F8r,mH,T8r,M8r,E8r,sE,Vve,C8r,w8r,gH,A8r,y8r,L8r,lE,Xve,x8r,$8r,hH,k8r,S8r,R8r,iE,zve,B8r,P8r,pH,I8r,q8r,N8r,dE,Wve,j8r,D8r,uH,G8r,O8r,V8r,cE,Qve,X8r,z8r,_H,W8r,Q8r,H8r,fE,Hve,U8r,J8r,bH,Y8r,K8r,Z8r,mE,Uve,eMr,oMr,vH,rMr,tMr,aMr,gE,Jve,nMr,sMr,FH,lMr,iMr,dMr,hE,Yve,cMr,fMr,TH,mMr,gMr,hMr,pE,Kve,pMr,uMr,MH,_Mr,bMr,vMr,uE,Zve,FMr,TMr,EH,MMr,EMr,CMr,_E,eFe,wMr,AMr,CH,yMr,LMr,xMr,bE,oFe,$Mr,kMr,wH,SMr,RMr,BMr,vE,rFe,PMr,IMr,AH,qMr,NMr,jMr,FE,tFe,DMr,GMr,yH,OMr,VMr,XMr,TE,aFe,zMr,WMr,LH,QMr,HMr,UMr,ME,DPe,mc,EE,nFe,n7,JMr,sFe,YMr,GPe,sr,s7,KMr,gc,ZMr,xH,e4r,o4r,$H,r4r,t4r,a4r,l7,n4r,lFe,s4r,l4r,i4r,Pt,i7,d4r,iFe,c4r,f4r,hc,m4r,dFe,g4r,h4r,kH,p4r,u4r,_4r,CE,b4r,Rr,d7,v4r,cFe,F4r,T4r,nn,M4r,fFe,E4r,C4r,mFe,w4r,A4r,gFe,y4r,L4r,x4r,hFe,wE,pFe,$4r,k4r,SH,S4r,R4r,B4r,AE,OPe,pc,yE,uFe,c7,P4r,_Fe,I4r,VPe,lr,f7,q4r,uc,N4r,RH,j4r,D4r,BH,G4r,O4r,V4r,m7,X4r,bFe,z4r,W4r,Q4r,It,g7,H4r,vFe,U4r,J4r,_c,Y4r,FFe,K4r,Z4r,PH,eEr,oEr,rEr,LE,tEr,Br,h7,aEr,TFe,nEr,sEr,sn,lEr,MFe,iEr,dEr,EFe,cEr,fEr,CFe,mEr,gEr,hEr,wFe,xE,AFe,pEr,uEr,IH,_Er,bEr,vEr,$E,XPe,bc,kE,yFe,p7,FEr,LFe,TEr,zPe,ir,u7,MEr,vc,EEr,qH,CEr,wEr,NH,AEr,yEr,LEr,_7,xEr,xFe,$Er,kEr,SEr,qt,b7,REr,$Fe,BEr,PEr,Fc,IEr,kFe,qEr,NEr,jH,jEr,DEr,GEr,SE,OEr,Pr,v7,VEr,SFe,XEr,zEr,ln,WEr,RFe,QEr,HEr,BFe,UEr,JEr,PFe,YEr,KEr,ZEr,oe,RE,IFe,eCr,oCr,DH,rCr,tCr,aCr,BE,qFe,nCr,sCr,GH,lCr,iCr,dCr,PE,NFe,cCr,fCr,OH,mCr,gCr,hCr,IE,jFe,pCr,uCr,VH,_Cr,bCr,vCr,qE,DFe,FCr,TCr,XH,MCr,ECr,CCr,NE,GFe,wCr,ACr,zH,yCr,LCr,xCr,jE,OFe,$Cr,kCr,WH,SCr,RCr,BCr,DE,VFe,PCr,ICr,QH,qCr,NCr,jCr,GE,XFe,DCr,GCr,HH,OCr,VCr,XCr,OE,zFe,zCr,WCr,UH,QCr,HCr,UCr,VE,WFe,JCr,YCr,JH,KCr,ZCr,e5r,XE,QFe,o5r,r5r,YH,t5r,a5r,n5r,zE,HFe,s5r,l5r,KH,i5r,d5r,c5r,WE,UFe,f5r,m5r,ZH,g5r,h5r,p5r,QE,JFe,u5r,_5r,eU,b5r,v5r,F5r,HE,YFe,T5r,M5r,oU,E5r,C5r,w5r,UE,KFe,A5r,y5r,rU,L5r,x5r,$5r,JE,ZFe,k5r,S5r,tU,R5r,B5r,P5r,YE,e6e,I5r,q5r,aU,N5r,j5r,D5r,KE,o6e,G5r,O5r,nU,V5r,X5r,z5r,ZE,r6e,W5r,Q5r,sU,H5r,U5r,J5r,eC,t6e,Y5r,K5r,lU,Z5r,e3r,o3r,oC,a6e,r3r,t3r,iU,a3r,n3r,s3r,rC,n6e,l3r,i3r,dU,d3r,c3r,f3r,tC,s6e,m3r,g3r,cU,h3r,p3r,u3r,aC,WPe,Tc,nC,l6e,F7,_3r,i6e,b3r,QPe,dr,T7,v3r,Mc,F3r,fU,T3r,M3r,mU,E3r,C3r,w3r,M7,A3r,d6e,y3r,L3r,x3r,Nt,E7,$3r,c6e,k3r,S3r,Ec,R3r,f6e,B3r,P3r,gU,I3r,q3r,N3r,sC,j3r,Ir,C7,D3r,m6e,G3r,O3r,dn,V3r,g6e,X3r,z3r,h6e,W3r,Q3r,p6e,H3r,U3r,J3r,Jr,lC,u6e,Y3r,K3r,hU,Z3r,ewr,owr,iC,_6e,rwr,twr,pU,awr,nwr,swr,dC,b6e,lwr,iwr,uU,dwr,cwr,fwr,cC,v6e,mwr,gwr,_U,hwr,pwr,uwr,fC,F6e,_wr,bwr,bU,vwr,Fwr,Twr,mC,HPe,Cc,gC,T6e,w7,Mwr,M6e,Ewr,UPe,cr,A7,Cwr,wc,wwr,vU,Awr,ywr,FU,Lwr,xwr,$wr,y7,kwr,E6e,Swr,Rwr,Bwr,jt,L7,Pwr,C6e,Iwr,qwr,Ac,Nwr,w6e,jwr,Dwr,TU,Gwr,Owr,Vwr,hC,Xwr,qr,x7,zwr,A6e,Wwr,Qwr,cn,Hwr,y6e,Uwr,Jwr,L6e,Ywr,Kwr,x6e,Zwr,eAr,oAr,Me,pC,$6e,rAr,tAr,MU,aAr,nAr,sAr,uC,k6e,lAr,iAr,EU,dAr,cAr,fAr,_C,S6e,mAr,gAr,CU,hAr,pAr,uAr,bC,R6e,_Ar,bAr,wU,vAr,FAr,TAr,vC,B6e,MAr,EAr,AU,CAr,wAr,AAr,FC,P6e,yAr,LAr,yU,xAr,$Ar,kAr,TC,I6e,SAr,RAr,LU,BAr,PAr,IAr,MC,q6e,qAr,NAr,xU,jAr,DAr,GAr,EC,N6e,OAr,VAr,$U,XAr,zAr,WAr,CC,j6e,QAr,HAr,kU,UAr,JAr,YAr,wC,D6e,KAr,ZAr,SU,e0r,o0r,r0r,AC,G6e,t0r,a0r,RU,n0r,s0r,l0r,yC,JPe,yc,LC,O6e,$7,i0r,V6e,d0r,YPe,fr,k7,c0r,Lc,f0r,BU,m0r,g0r,PU,h0r,p0r,u0r,S7,_0r,X6e,b0r,v0r,F0r,Dt,R7,T0r,z6e,M0r,E0r,xc,C0r,W6e,w0r,A0r,IU,y0r,L0r,x0r,xC,$0r,Nr,B7,k0r,Q6e,S0r,R0r,fn,B0r,H6e,P0r,I0r,U6e,q0r,N0r,J6e,j0r,D0r,G0r,Le,$C,Y6e,O0r,V0r,qU,X0r,z0r,W0r,kC,K6e,Q0r,H0r,NU,U0r,J0r,Y0r,SC,Z6e,K0r,Z0r,jU,eyr,oyr,ryr,RC,eTe,tyr,ayr,DU,nyr,syr,lyr,BC,oTe,iyr,dyr,GU,cyr,fyr,myr,PC,rTe,gyr,hyr,OU,pyr,uyr,_yr,IC,tTe,byr,vyr,VU,Fyr,Tyr,Myr,qC,aTe,Eyr,Cyr,XU,wyr,Ayr,yyr,NC,nTe,Lyr,xyr,zU,$yr,kyr,Syr,jC,sTe,Ryr,Byr,WU,Pyr,Iyr,qyr,DC,KPe,$c,GC,lTe,P7,Nyr,iTe,jyr,ZPe,mr,I7,Dyr,kc,Gyr,QU,Oyr,Vyr,HU,Xyr,zyr,Wyr,q7,Qyr,dTe,Hyr,Uyr,Jyr,Gt,N7,Yyr,cTe,Kyr,Zyr,Sc,eLr,fTe,oLr,rLr,UU,tLr,aLr,nLr,OC,sLr,jr,j7,lLr,mTe,iLr,dLr,mn,cLr,gTe,fLr,mLr,hTe,gLr,hLr,pTe,pLr,uLr,_Lr,Re,VC,uTe,bLr,vLr,JU,FLr,TLr,MLr,XC,_Te,ELr,CLr,YU,wLr,ALr,yLr,zC,bTe,LLr,xLr,KU,$Lr,kLr,SLr,WC,vTe,RLr,BLr,ZU,PLr,ILr,qLr,QC,FTe,NLr,jLr,eJ,DLr,GLr,OLr,HC,TTe,VLr,XLr,oJ,zLr,WLr,QLr,UC,MTe,HLr,ULr,rJ,JLr,YLr,KLr,JC,ETe,ZLr,e7r,tJ,o7r,r7r,t7r,YC,CTe,a7r,n7r,aJ,s7r,l7r,i7r,KC,eIe,Rc,ZC,wTe,D7,d7r,ATe,c7r,oIe,gr,G7,f7r,Bc,m7r,nJ,g7r,h7r,sJ,p7r,u7r,_7r,O7,b7r,yTe,v7r,F7r,T7r,Ot,V7,M7r,LTe,E7r,C7r,Pc,w7r,xTe,A7r,y7r,lJ,L7r,x7r,$7r,e5,k7r,Dr,X7,S7r,$Te,R7r,B7r,gn,P7r,kTe,I7r,q7r,STe,N7r,j7r,RTe,D7r,G7r,O7r,xe,o5,BTe,V7r,X7r,iJ,z7r,W7r,Q7r,r5,PTe,H7r,U7r,dJ,J7r,Y7r,K7r,t5,ITe,Z7r,exr,cJ,oxr,rxr,txr,a5,qTe,axr,nxr,fJ,sxr,lxr,ixr,n5,NTe,dxr,cxr,mJ,fxr,mxr,gxr,s5,jTe,hxr,pxr,gJ,uxr,_xr,bxr,l5,DTe,vxr,Fxr,hJ,Txr,Mxr,Exr,i5,GTe,Cxr,wxr,pJ,Axr,yxr,Lxr,d5,OTe,xxr,$xr,uJ,kxr,Sxr,Rxr,c5,VTe,Bxr,Pxr,_J,Ixr,qxr,Nxr,f5,rIe,Ic,m5,XTe,z7,jxr,zTe,Dxr,tIe,hr,W7,Gxr,qc,Oxr,bJ,Vxr,Xxr,vJ,zxr,Wxr,Qxr,Q7,Hxr,WTe,Uxr,Jxr,Yxr,Vt,H7,Kxr,QTe,Zxr,e9r,Nc,o9r,HTe,r9r,t9r,FJ,a9r,n9r,s9r,g5,l9r,Gr,U7,i9r,UTe,d9r,c9r,hn,f9r,JTe,m9r,g9r,YTe,h9r,p9r,KTe,u9r,_9r,b9r,$e,h5,ZTe,v9r,F9r,TJ,T9r,M9r,E9r,p5,e8e,C9r,w9r,MJ,A9r,y9r,L9r,u5,o8e,x9r,$9r,EJ,k9r,S9r,R9r,_5,r8e,B9r,P9r,CJ,I9r,q9r,N9r,b5,t8e,j9r,D9r,wJ,G9r,O9r,V9r,v5,a8e,X9r,z9r,AJ,W9r,Q9r,H9r,F5,n8e,U9r,J9r,yJ,Y9r,K9r,Z9r,T5,s8e,e$r,o$r,LJ,r$r,t$r,a$r,M5,l8e,n$r,s$r,xJ,l$r,i$r,d$r,E5,i8e,c$r,f$r,$J,m$r,g$r,h$r,C5,aIe,jc,w5,d8e,J7,p$r,c8e,u$r,nIe,pr,Y7,_$r,Dc,b$r,kJ,v$r,F$r,SJ,T$r,M$r,E$r,K7,C$r,f8e,w$r,A$r,y$r,Xt,Z7,L$r,m8e,x$r,$$r,Gc,k$r,g8e,S$r,R$r,RJ,B$r,P$r,I$r,A5,q$r,Or,ex,N$r,h8e,j$r,D$r,pn,G$r,p8e,O$r,V$r,u8e,X$r,z$r,_8e,W$r,Q$r,H$r,je,y5,b8e,U$r,J$r,BJ,Y$r,K$r,Z$r,L5,v8e,ekr,okr,PJ,rkr,tkr,akr,x5,F8e,nkr,skr,IJ,lkr,ikr,dkr,$5,T8e,ckr,fkr,qJ,mkr,gkr,hkr,k5,M8e,pkr,ukr,NJ,_kr,bkr,vkr,S5,E8e,Fkr,Tkr,jJ,Mkr,Ekr,Ckr,R5,C8e,wkr,Akr,DJ,ykr,Lkr,xkr,B5,w8e,$kr,kkr,GJ,Skr,Rkr,Bkr,P5,sIe,Oc,I5,A8e,ox,Pkr,y8e,Ikr,lIe,ur,rx,qkr,Vc,Nkr,OJ,jkr,Dkr,VJ,Gkr,Okr,Vkr,tx,Xkr,L8e,zkr,Wkr,Qkr,zt,ax,Hkr,x8e,Ukr,Jkr,Xc,Ykr,$8e,Kkr,Zkr,XJ,eSr,oSr,rSr,q5,tSr,Vr,nx,aSr,k8e,nSr,sSr,un,lSr,S8e,iSr,dSr,R8e,cSr,fSr,B8e,mSr,gSr,hSr,De,N5,P8e,pSr,uSr,zJ,_Sr,bSr,vSr,j5,I8e,FSr,TSr,WJ,MSr,ESr,CSr,D5,q8e,wSr,ASr,QJ,ySr,LSr,xSr,G5,N8e,$Sr,kSr,HJ,SSr,RSr,BSr,O5,j8e,PSr,ISr,UJ,qSr,NSr,jSr,V5,D8e,DSr,GSr,JJ,OSr,VSr,XSr,X5,G8e,zSr,WSr,YJ,QSr,HSr,USr,z5,O8e,JSr,YSr,KJ,KSr,ZSr,eRr,W5,iIe,zc,Q5,V8e,sx,oRr,X8e,rRr,dIe,_r,lx,tRr,Wc,aRr,ZJ,nRr,sRr,eY,lRr,iRr,dRr,ix,cRr,z8e,fRr,mRr,gRr,Wt,dx,hRr,W8e,pRr,uRr,Qc,_Rr,Q8e,bRr,vRr,oY,FRr,TRr,MRr,H5,ERr,Xr,cx,CRr,H8e,wRr,ARr,_n,yRr,U8e,LRr,xRr,J8e,$Rr,kRr,Y8e,SRr,RRr,BRr,K8e,U5,Z8e,PRr,IRr,rY,qRr,NRr,jRr,J5,cIe,Hc,Y5,eMe,fx,DRr,oMe,GRr,fIe,br,mx,ORr,Uc,VRr,tY,XRr,zRr,aY,WRr,QRr,HRr,gx,URr,rMe,JRr,YRr,KRr,Qt,hx,ZRr,tMe,eBr,oBr,Jc,rBr,aMe,tBr,aBr,nY,nBr,sBr,lBr,K5,iBr,zr,px,dBr,nMe,cBr,fBr,bn,mBr,sMe,gBr,hBr,lMe,pBr,uBr,iMe,_Br,bBr,vBr,ux,Z5,dMe,FBr,TBr,sY,MBr,EBr,CBr,e3,cMe,wBr,ABr,lY,yBr,LBr,xBr,o3,mIe,Yc,r3,fMe,_x,$Br,mMe,kBr,gIe,vr,bx,SBr,Kc,RBr,iY,BBr,PBr,dY,IBr,qBr,NBr,vx,jBr,gMe,DBr,GBr,OBr,Ht,Fx,VBr,hMe,XBr,zBr,Zc,WBr,pMe,QBr,HBr,cY,UBr,JBr,YBr,t3,KBr,Wr,Tx,ZBr,uMe,ePr,oPr,vn,rPr,_Me,tPr,aPr,bMe,nPr,sPr,vMe,lPr,iPr,dPr,FMe,a3,TMe,cPr,fPr,fY,mPr,gPr,hPr,n3,hIe;return d=new ee({}),Fa=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),EA=new ee({}),CA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),df=new pPr({props:{warning:!0,$$slots:{default:[c5t]},$$scope:{ctx:L}}}),wA=new ee({}),AA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/configuration_auto.py#L563"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/configuration_auto.py#L586"}}),sg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[f5t]},$$scope:{ctx:L}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/configuration_auto.py#L708"}}),kA=new ee({}),SA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/tokenization_auto.py#L378"}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16812/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/tokenization_auto.py#L392"}}),jg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[m5t]},$$scope:{ctx:L}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/tokenization_auto.py#L588"}}),qA=new ee({}),NA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16812/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),mh=new pPr({props:{$$slots:{default:[g5t]},$$scope:{ctx:L}}}),gh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[h5t]},$$scope:{ctx:L}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/processing_auto.py#L77"}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/processing_auto.py#L91"}}),kh=new pPr({props:{$$slots:{default:[p5t]},$$scope:{ctx:L}}}),Sh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[u5t]},$$scope:{ctx:L}}}),HA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/processing_auto.py#L244"}}),UA=new ee({}),JA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L720"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2ConformerConformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Ph=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[_5t]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),Eu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[b5t]},$$scope:{ctx:L}}}),e0=new ee({}),o0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L727"}}),t0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2ConformerConformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),wu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[v5t]},$$scope:{ctx:L}}}),a0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),g_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[F5t]},$$scope:{ctx:L}}}),n0=new ee({}),s0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L742"}}),i0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),p_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[T5t]},$$scope:{ctx:L}}}),d0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),K_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[M5t]},$$scope:{ctx:L}}}),c0=new ee({}),f0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L749"}}),g0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[E5t]},$$scope:{ctx:L}}}),h0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),q1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[C5t]},$$scope:{ctx:L}}}),p0=new ee({}),u0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L756"}}),b0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),j1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[w5t]},$$scope:{ctx:L}}}),v0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),a2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[A5t]},$$scope:{ctx:L}}}),F0=new ee({}),T0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L765"}}),E0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),s2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[y5t]},$$scope:{ctx:L}}}),C0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),ob=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[L5t]},$$scope:{ctx:L}}}),w0=new ee({}),A0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L799"}}),L0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),tb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[x5t]},$$scope:{ctx:L}}}),x0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),Rb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$5t]},$$scope:{ctx:L}}}),$0=new ee({}),k0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L806"}}),R0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Pb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[k5t]},$$scope:{ctx:L}}}),B0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[S5t]},$$scope:{ctx:L}}}),P0=new ee({}),I0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L792"}}),N0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[R5t]},$$scope:{ctx:L}}}),j0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[B5t]},$$scope:{ctx:L}}}),D0=new ee({}),G0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L774"}}),V0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[P5t]},$$scope:{ctx:L}}}),X0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[I5t]},$$scope:{ctx:L}}}),z0=new ee({}),W0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L781"}}),H0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[q5t]},$$scope:{ctx:L}}}),U0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[N5t]},$$scope:{ctx:L}}}),J0=new ee({}),Y0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L815"}}),Z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[j5t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[D5t]},$$scope:{ctx:L}}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L854"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[G5t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[O5t]},$$scope:{ctx:L}}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L861"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2ConformerConformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[V5t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[X5t]},$$scope:{ctx:L}}}),fy=new ee({}),my=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L884"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2ConformerConformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[z5t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),l6=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[W5t]},$$scope:{ctx:L}}}),uy=new ee({}),_y=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L868"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2ConformerConformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Q5t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),F6=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[H5t]},$$scope:{ctx:L}}}),Ty=new ee({}),My=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L875"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),M6=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[U5t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[J5t]},$$scope:{ctx:L}}}),yy=new ee({}),Ly=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L893"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2ConformerConformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),L6=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Y5t]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[K5t]},$$scope:{ctx:L}}}),Sy=new ee({}),Ry=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L900"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Z5t]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[e3t]},$$scope:{ctx:L}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L847"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[o3t]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L822"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),U6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[t3t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),K6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),Qy=new ee({}),Hy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L829"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[n3t]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_auto.py#L838"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),sL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),fL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),x8=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),uL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),k8=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),X8=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),bL=new ee({}),vL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),TL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),W8=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),Y8=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),s4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),i4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[y3t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[L3t]},$$scope:{ctx:L}}}),e7=new ee({}),o7=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),t7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[x3t]},$$scope:{ctx:L}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$3t]},$$scope:{ctx:L}}}),n7=new ee({}),s7=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),i7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[k3t]},$$scope:{ctx:L}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[S3t]},$$scope:{ctx:L}}}),c7=new ee({}),f7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),g7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[R3t]},$$scope:{ctx:L}}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[B3t]},$$scope:{ctx:L}}}),p7=new ee({}),u7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),b7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[P3t]},$$scope:{ctx:L}}}),v7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[I3t]},$$scope:{ctx:L}}}),F7=new ee({}),T7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),E7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[q3t]},$$scope:{ctx:L}}}),C7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[N3t]},$$scope:{ctx:L}}}),w7=new ee({}),A7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),L7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[j3t]},$$scope:{ctx:L}}}),x7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[D3t]},$$scope:{ctx:L}}}),$7=new ee({}),k7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),R7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[G3t]},$$scope:{ctx:L}}}),B7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[O3t]},$$scope:{ctx:L}}}),P7=new ee({}),I7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),N7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[V3t]},$$scope:{ctx:L}}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:L}}}),D7=new ee({}),G7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),V7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[z3t]},$$scope:{ctx:L}}}),X7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[W3t]},$$scope:{ctx:L}}}),z7=new ee({}),W7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),H7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Q3t]},$$scope:{ctx:L}}}),U7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:L}}}),J7=new ee({}),Y7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),Z7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:L}}}),ox=new ee({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:L}}}),sx=new ee({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),fx=new ee({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),_x=new ee({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16812/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16812/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16812/src/transformers/models/auto/auto_factory.py#L417"}}),n3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Fo=a("span"),ti=o("Auto Classes"),tf=l(),Zr=a("p"),ai=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ni=a("code"),vA=o("from_pretrained()"),af=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ne=l(),Xe=a("p"),si=o("Instantiating one of "),Tn=a("a"),FA=o("AutoConfig"),Mn=o(", "),En=a("a"),TA=o("AutoModel"),li=o(`, and
`),Cn=a("a"),MA=o("AutoTokenizer"),ii=o(" will directly create a class of the relevant architecture. For instance"),nf=l(),F(Fa.$$.fragment),ze=l(),Ae=a("p"),B9=o("will create a model that is an instance of "),di=a("a"),P9=o("BertModel"),I9=o("."),To=l(),Ta=a("p"),q9=o("There is one class of "),sf=a("code"),N9=o("AutoModel"),vNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),gBe=l(),ci=a("h2"),lf=a("a"),rZ=a("span"),F(EA.$$.fragment),FNe=l(),tZ=a("span"),TNe=o("Extending the Auto Classes"),hBe=l(),wn=a("p"),MNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),aZ=a("code"),ENe=o("NewModel"),CNe=o(", make sure you have a "),nZ=a("code"),wNe=o("NewModelConfig"),ANe=o(` then you can add those to the auto
classes like this:`),pBe=l(),F(CA.$$.fragment),uBe=l(),j9=a("p"),yNe=o("You will then be able to use the auto classes like you would usually do!"),_Be=l(),F(df.$$.fragment),bBe=l(),fi=a("h2"),cf=a("a"),sZ=a("span"),F(wA.$$.fragment),LNe=l(),lZ=a("span"),xNe=o("AutoConfig"),vBe=l(),Mo=a("div"),F(AA.$$.fragment),$Ne=l(),yA=a("p"),kNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),D9=a("a"),SNe=o("from_pretrained()"),RNe=o(" class method."),BNe=l(),LA=a("p"),PNe=o("This class cannot be instantiated directly using "),iZ=a("code"),INe=o("__init__()"),qNe=o(" (throws an error)."),NNe=l(),Fr=a("div"),F(xA.$$.fragment),jNe=l(),dZ=a("p"),DNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),GNe=l(),mi=a("p"),ONe=o("The configuration class to instantiate is selected based on the "),cZ=a("code"),VNe=o("model_type"),XNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),fZ=a("code"),zNe=o("pretrained_model_name_or_path"),WNe=o(":"),QNe=l(),A=a("ul"),ff=a("li"),mZ=a("strong"),HNe=o("albert"),UNe=o(" \u2014 "),G9=a("a"),JNe=o("AlbertConfig"),YNe=o(" (ALBERT model)"),KNe=l(),mf=a("li"),gZ=a("strong"),ZNe=o("bart"),eje=o(" \u2014 "),O9=a("a"),oje=o("BartConfig"),rje=o(" (BART model)"),tje=l(),gf=a("li"),hZ=a("strong"),aje=o("beit"),nje=o(" \u2014 "),V9=a("a"),sje=o("BeitConfig"),lje=o(" (BEiT model)"),ije=l(),hf=a("li"),pZ=a("strong"),dje=o("bert"),cje=o(" \u2014 "),X9=a("a"),fje=o("BertConfig"),mje=o(" (BERT model)"),gje=l(),pf=a("li"),uZ=a("strong"),hje=o("bert-generation"),pje=o(" \u2014 "),z9=a("a"),uje=o("BertGenerationConfig"),_je=o(" (Bert Generation model)"),bje=l(),uf=a("li"),_Z=a("strong"),vje=o("big_bird"),Fje=o(" \u2014 "),W9=a("a"),Tje=o("BigBirdConfig"),Mje=o(" (BigBird model)"),Eje=l(),_f=a("li"),bZ=a("strong"),Cje=o("bigbird_pegasus"),wje=o(" \u2014 "),Q9=a("a"),Aje=o("BigBirdPegasusConfig"),yje=o(" (BigBirdPegasus model)"),Lje=l(),bf=a("li"),vZ=a("strong"),xje=o("blenderbot"),$je=o(" \u2014 "),H9=a("a"),kje=o("BlenderbotConfig"),Sje=o(" (Blenderbot model)"),Rje=l(),vf=a("li"),FZ=a("strong"),Bje=o("blenderbot-small"),Pje=o(" \u2014 "),U9=a("a"),Ije=o("BlenderbotSmallConfig"),qje=o(" (BlenderbotSmall model)"),Nje=l(),Ff=a("li"),TZ=a("strong"),jje=o("camembert"),Dje=o(" \u2014 "),J9=a("a"),Gje=o("CamembertConfig"),Oje=o(" (CamemBERT model)"),Vje=l(),Tf=a("li"),MZ=a("strong"),Xje=o("canine"),zje=o(" \u2014 "),Y9=a("a"),Wje=o("CanineConfig"),Qje=o(" (Canine model)"),Hje=l(),Mf=a("li"),EZ=a("strong"),Uje=o("clip"),Jje=o(" \u2014 "),K9=a("a"),Yje=o("CLIPConfig"),Kje=o(" (CLIP model)"),Zje=l(),Ef=a("li"),CZ=a("strong"),eDe=o("convbert"),oDe=o(" \u2014 "),Z9=a("a"),rDe=o("ConvBertConfig"),tDe=o(" (ConvBERT model)"),aDe=l(),Cf=a("li"),wZ=a("strong"),nDe=o("convnext"),sDe=o(" \u2014 "),e$=a("a"),lDe=o("ConvNextConfig"),iDe=o(" (ConvNext model)"),dDe=l(),wf=a("li"),AZ=a("strong"),cDe=o("ctrl"),fDe=o(" \u2014 "),o$=a("a"),mDe=o("CTRLConfig"),gDe=o(" (CTRL model)"),hDe=l(),Af=a("li"),yZ=a("strong"),pDe=o("data2vec-audio"),uDe=o(" \u2014 "),r$=a("a"),_De=o("Data2VecAudioConfig"),bDe=o(" (Data2VecAudio model)"),vDe=l(),yf=a("li"),LZ=a("strong"),FDe=o("data2vec-text"),TDe=o(" \u2014 "),t$=a("a"),MDe=o("Data2VecTextConfig"),EDe=o(" (Data2VecText model)"),CDe=l(),Lf=a("li"),xZ=a("strong"),wDe=o("data2vec-vision"),ADe=o(" \u2014 "),a$=a("a"),yDe=o("Data2VecVisionConfig"),LDe=o(" (Data2VecVision model)"),xDe=l(),xf=a("li"),$Z=a("strong"),$De=o("deberta"),kDe=o(" \u2014 "),n$=a("a"),SDe=o("DebertaConfig"),RDe=o(" (DeBERTa model)"),BDe=l(),$f=a("li"),kZ=a("strong"),PDe=o("deberta-v2"),IDe=o(" \u2014 "),s$=a("a"),qDe=o("DebertaV2Config"),NDe=o(" (DeBERTa-v2 model)"),jDe=l(),kf=a("li"),SZ=a("strong"),DDe=o("decision_transformer"),GDe=o(" \u2014 "),l$=a("a"),ODe=o("DecisionTransformerConfig"),VDe=o(" (Decision Transformer model)"),XDe=l(),Sf=a("li"),RZ=a("strong"),zDe=o("deit"),WDe=o(" \u2014 "),i$=a("a"),QDe=o("DeiTConfig"),HDe=o(" (DeiT model)"),UDe=l(),Rf=a("li"),BZ=a("strong"),JDe=o("detr"),YDe=o(" \u2014 "),d$=a("a"),KDe=o("DetrConfig"),ZDe=o(" (DETR model)"),eGe=l(),Bf=a("li"),PZ=a("strong"),oGe=o("distilbert"),rGe=o(" \u2014 "),c$=a("a"),tGe=o("DistilBertConfig"),aGe=o(" (DistilBERT model)"),nGe=l(),Pf=a("li"),IZ=a("strong"),sGe=o("dpr"),lGe=o(" \u2014 "),f$=a("a"),iGe=o("DPRConfig"),dGe=o(" (DPR model)"),cGe=l(),If=a("li"),qZ=a("strong"),fGe=o("dpt"),mGe=o(" \u2014 "),m$=a("a"),gGe=o("DPTConfig"),hGe=o(" (DPT model)"),pGe=l(),qf=a("li"),NZ=a("strong"),uGe=o("electra"),_Ge=o(" \u2014 "),g$=a("a"),bGe=o("ElectraConfig"),vGe=o(" (ELECTRA model)"),FGe=l(),Nf=a("li"),jZ=a("strong"),TGe=o("encoder-decoder"),MGe=o(" \u2014 "),h$=a("a"),EGe=o("EncoderDecoderConfig"),CGe=o(" (Encoder decoder model)"),wGe=l(),jf=a("li"),DZ=a("strong"),AGe=o("flaubert"),yGe=o(" \u2014 "),p$=a("a"),LGe=o("FlaubertConfig"),xGe=o(" (FlauBERT model)"),$Ge=l(),Df=a("li"),GZ=a("strong"),kGe=o("fnet"),SGe=o(" \u2014 "),u$=a("a"),RGe=o("FNetConfig"),BGe=o(" (FNet model)"),PGe=l(),Gf=a("li"),OZ=a("strong"),IGe=o("fsmt"),qGe=o(" \u2014 "),_$=a("a"),NGe=o("FSMTConfig"),jGe=o(" (FairSeq Machine-Translation model)"),DGe=l(),Of=a("li"),VZ=a("strong"),GGe=o("funnel"),OGe=o(" \u2014 "),b$=a("a"),VGe=o("FunnelConfig"),XGe=o(" (Funnel Transformer model)"),zGe=l(),Vf=a("li"),XZ=a("strong"),WGe=o("glpn"),QGe=o(" \u2014 "),v$=a("a"),HGe=o("GLPNConfig"),UGe=o(" (GLPN model)"),JGe=l(),Xf=a("li"),zZ=a("strong"),YGe=o("gpt2"),KGe=o(" \u2014 "),F$=a("a"),ZGe=o("GPT2Config"),eOe=o(" (OpenAI GPT-2 model)"),oOe=l(),zf=a("li"),WZ=a("strong"),rOe=o("gpt_neo"),tOe=o(" \u2014 "),T$=a("a"),aOe=o("GPTNeoConfig"),nOe=o(" (GPT Neo model)"),sOe=l(),Wf=a("li"),QZ=a("strong"),lOe=o("gptj"),iOe=o(" \u2014 "),M$=a("a"),dOe=o("GPTJConfig"),cOe=o(" (GPT-J model)"),fOe=l(),Qf=a("li"),HZ=a("strong"),mOe=o("hubert"),gOe=o(" \u2014 "),E$=a("a"),hOe=o("HubertConfig"),pOe=o(" (Hubert model)"),uOe=l(),Hf=a("li"),UZ=a("strong"),_Oe=o("ibert"),bOe=o(" \u2014 "),C$=a("a"),vOe=o("IBertConfig"),FOe=o(" (I-BERT model)"),TOe=l(),Uf=a("li"),JZ=a("strong"),MOe=o("imagegpt"),EOe=o(" \u2014 "),w$=a("a"),COe=o("ImageGPTConfig"),wOe=o(" (ImageGPT model)"),AOe=l(),Jf=a("li"),YZ=a("strong"),yOe=o("layoutlm"),LOe=o(" \u2014 "),A$=a("a"),xOe=o("LayoutLMConfig"),$Oe=o(" (LayoutLM model)"),kOe=l(),Yf=a("li"),KZ=a("strong"),SOe=o("layoutlmv2"),ROe=o(" \u2014 "),y$=a("a"),BOe=o("LayoutLMv2Config"),POe=o(" (LayoutLMv2 model)"),IOe=l(),Kf=a("li"),ZZ=a("strong"),qOe=o("led"),NOe=o(" \u2014 "),L$=a("a"),jOe=o("LEDConfig"),DOe=o(" (LED model)"),GOe=l(),Zf=a("li"),eee=a("strong"),OOe=o("longformer"),VOe=o(" \u2014 "),x$=a("a"),XOe=o("LongformerConfig"),zOe=o(" (Longformer model)"),WOe=l(),em=a("li"),oee=a("strong"),QOe=o("luke"),HOe=o(" \u2014 "),$$=a("a"),UOe=o("LukeConfig"),JOe=o(" (LUKE model)"),YOe=l(),om=a("li"),ree=a("strong"),KOe=o("lxmert"),ZOe=o(" \u2014 "),k$=a("a"),eVe=o("LxmertConfig"),oVe=o(" (LXMERT model)"),rVe=l(),rm=a("li"),tee=a("strong"),tVe=o("m2m_100"),aVe=o(" \u2014 "),S$=a("a"),nVe=o("M2M100Config"),sVe=o(" (M2M100 model)"),lVe=l(),tm=a("li"),aee=a("strong"),iVe=o("marian"),dVe=o(" \u2014 "),R$=a("a"),cVe=o("MarianConfig"),fVe=o(" (Marian model)"),mVe=l(),am=a("li"),nee=a("strong"),gVe=o("maskformer"),hVe=o(" \u2014 "),B$=a("a"),pVe=o("MaskFormerConfig"),uVe=o(" (MaskFormer model)"),_Ve=l(),nm=a("li"),see=a("strong"),bVe=o("mbart"),vVe=o(" \u2014 "),P$=a("a"),FVe=o("MBartConfig"),TVe=o(" (mBART model)"),MVe=l(),sm=a("li"),lee=a("strong"),EVe=o("megatron-bert"),CVe=o(" \u2014 "),I$=a("a"),wVe=o("MegatronBertConfig"),AVe=o(" (MegatronBert model)"),yVe=l(),lm=a("li"),iee=a("strong"),LVe=o("mobilebert"),xVe=o(" \u2014 "),q$=a("a"),$Ve=o("MobileBertConfig"),kVe=o(" (MobileBERT model)"),SVe=l(),im=a("li"),dee=a("strong"),RVe=o("mpnet"),BVe=o(" \u2014 "),N$=a("a"),PVe=o("MPNetConfig"),IVe=o(" (MPNet model)"),qVe=l(),dm=a("li"),cee=a("strong"),NVe=o("mt5"),jVe=o(" \u2014 "),j$=a("a"),DVe=o("MT5Config"),GVe=o(" (mT5 model)"),OVe=l(),cm=a("li"),fee=a("strong"),VVe=o("nystromformer"),XVe=o(" \u2014 "),D$=a("a"),zVe=o("NystromformerConfig"),WVe=o(" (Nystromformer model)"),QVe=l(),fm=a("li"),mee=a("strong"),HVe=o("openai-gpt"),UVe=o(" \u2014 "),G$=a("a"),JVe=o("OpenAIGPTConfig"),YVe=o(" (OpenAI GPT model)"),KVe=l(),mm=a("li"),gee=a("strong"),ZVe=o("pegasus"),eXe=o(" \u2014 "),O$=a("a"),oXe=o("PegasusConfig"),rXe=o(" (Pegasus model)"),tXe=l(),gm=a("li"),hee=a("strong"),aXe=o("perceiver"),nXe=o(" \u2014 "),V$=a("a"),sXe=o("PerceiverConfig"),lXe=o(" (Perceiver model)"),iXe=l(),hm=a("li"),pee=a("strong"),dXe=o("plbart"),cXe=o(" \u2014 "),X$=a("a"),fXe=o("PLBartConfig"),mXe=o(" (PLBart model)"),gXe=l(),pm=a("li"),uee=a("strong"),hXe=o("poolformer"),pXe=o(" \u2014 "),z$=a("a"),uXe=o("PoolFormerConfig"),_Xe=o(" (PoolFormer model)"),bXe=l(),um=a("li"),_ee=a("strong"),vXe=o("prophetnet"),FXe=o(" \u2014 "),W$=a("a"),TXe=o("ProphetNetConfig"),MXe=o(" (ProphetNet model)"),EXe=l(),_m=a("li"),bee=a("strong"),CXe=o("qdqbert"),wXe=o(" \u2014 "),Q$=a("a"),AXe=o("QDQBertConfig"),yXe=o(" (QDQBert model)"),LXe=l(),bm=a("li"),vee=a("strong"),xXe=o("rag"),$Xe=o(" \u2014 "),H$=a("a"),kXe=o("RagConfig"),SXe=o(" (RAG model)"),RXe=l(),vm=a("li"),Fee=a("strong"),BXe=o("realm"),PXe=o(" \u2014 "),U$=a("a"),IXe=o("RealmConfig"),qXe=o(" (Realm model)"),NXe=l(),Fm=a("li"),Tee=a("strong"),jXe=o("reformer"),DXe=o(" \u2014 "),J$=a("a"),GXe=o("ReformerConfig"),OXe=o(" (Reformer model)"),VXe=l(),Tm=a("li"),Mee=a("strong"),XXe=o("regnet"),zXe=o(" \u2014 "),Y$=a("a"),WXe=o("RegNetConfig"),QXe=o(" (RegNet model)"),HXe=l(),Mm=a("li"),Eee=a("strong"),UXe=o("rembert"),JXe=o(" \u2014 "),K$=a("a"),YXe=o("RemBertConfig"),KXe=o(" (RemBERT model)"),ZXe=l(),Em=a("li"),Cee=a("strong"),eze=o("resnet"),oze=o(" \u2014 "),Z$=a("a"),rze=o("ResNetConfig"),tze=o(" (ResNet model)"),aze=l(),Cm=a("li"),wee=a("strong"),nze=o("retribert"),sze=o(" \u2014 "),ek=a("a"),lze=o("RetriBertConfig"),ize=o(" (RetriBERT model)"),dze=l(),wm=a("li"),Aee=a("strong"),cze=o("roberta"),fze=o(" \u2014 "),ok=a("a"),mze=o("RobertaConfig"),gze=o(" (RoBERTa model)"),hze=l(),Am=a("li"),yee=a("strong"),pze=o("roformer"),uze=o(" \u2014 "),rk=a("a"),_ze=o("RoFormerConfig"),bze=o(" (RoFormer model)"),vze=l(),ym=a("li"),Lee=a("strong"),Fze=o("segformer"),Tze=o(" \u2014 "),tk=a("a"),Mze=o("SegformerConfig"),Eze=o(" (SegFormer model)"),Cze=l(),Lm=a("li"),xee=a("strong"),wze=o("sew"),Aze=o(" \u2014 "),ak=a("a"),yze=o("SEWConfig"),Lze=o(" (SEW model)"),xze=l(),xm=a("li"),$ee=a("strong"),$ze=o("sew-d"),kze=o(" \u2014 "),nk=a("a"),Sze=o("SEWDConfig"),Rze=o(" (SEW-D model)"),Bze=l(),$m=a("li"),kee=a("strong"),Pze=o("speech-encoder-decoder"),Ize=o(" \u2014 "),sk=a("a"),qze=o("SpeechEncoderDecoderConfig"),Nze=o(" (Speech Encoder decoder model)"),jze=l(),km=a("li"),See=a("strong"),Dze=o("speech_to_text"),Gze=o(" \u2014 "),lk=a("a"),Oze=o("Speech2TextConfig"),Vze=o(" (Speech2Text model)"),Xze=l(),Sm=a("li"),Ree=a("strong"),zze=o("speech_to_text_2"),Wze=o(" \u2014 "),ik=a("a"),Qze=o("Speech2Text2Config"),Hze=o(" (Speech2Text2 model)"),Uze=l(),Rm=a("li"),Bee=a("strong"),Jze=o("splinter"),Yze=o(" \u2014 "),dk=a("a"),Kze=o("SplinterConfig"),Zze=o(" (Splinter model)"),eWe=l(),Bm=a("li"),Pee=a("strong"),oWe=o("squeezebert"),rWe=o(" \u2014 "),ck=a("a"),tWe=o("SqueezeBertConfig"),aWe=o(" (SqueezeBERT model)"),nWe=l(),Pm=a("li"),Iee=a("strong"),sWe=o("swin"),lWe=o(" \u2014 "),fk=a("a"),iWe=o("SwinConfig"),dWe=o(" (Swin model)"),cWe=l(),Im=a("li"),qee=a("strong"),fWe=o("t5"),mWe=o(" \u2014 "),mk=a("a"),gWe=o("T5Config"),hWe=o(" (T5 model)"),pWe=l(),qm=a("li"),Nee=a("strong"),uWe=o("tapas"),_We=o(" \u2014 "),gk=a("a"),bWe=o("TapasConfig"),vWe=o(" (TAPAS model)"),FWe=l(),Nm=a("li"),jee=a("strong"),TWe=o("tapex"),MWe=o(" \u2014 "),hk=a("a"),EWe=o("BartConfig"),CWe=o(" (TAPEX model)"),wWe=l(),jm=a("li"),Dee=a("strong"),AWe=o("transfo-xl"),yWe=o(" \u2014 "),pk=a("a"),LWe=o("TransfoXLConfig"),xWe=o(" (Transformer-XL model)"),$We=l(),Dm=a("li"),Gee=a("strong"),kWe=o("trocr"),SWe=o(" \u2014 "),uk=a("a"),RWe=o("TrOCRConfig"),BWe=o(" (TrOCR model)"),PWe=l(),Gm=a("li"),Oee=a("strong"),IWe=o("unispeech"),qWe=o(" \u2014 "),_k=a("a"),NWe=o("UniSpeechConfig"),jWe=o(" (UniSpeech model)"),DWe=l(),Om=a("li"),Vee=a("strong"),GWe=o("unispeech-sat"),OWe=o(" \u2014 "),bk=a("a"),VWe=o("UniSpeechSatConfig"),XWe=o(" (UniSpeechSat model)"),zWe=l(),Vm=a("li"),Xee=a("strong"),WWe=o("van"),QWe=o(" \u2014 "),vk=a("a"),HWe=o("VanConfig"),UWe=o(" (VAN model)"),JWe=l(),Xm=a("li"),zee=a("strong"),YWe=o("vilt"),KWe=o(" \u2014 "),Fk=a("a"),ZWe=o("ViltConfig"),eQe=o(" (ViLT model)"),oQe=l(),zm=a("li"),Wee=a("strong"),rQe=o("vision-encoder-decoder"),tQe=o(" \u2014 "),Tk=a("a"),aQe=o("VisionEncoderDecoderConfig"),nQe=o(" (Vision Encoder decoder model)"),sQe=l(),Wm=a("li"),Qee=a("strong"),lQe=o("vision-text-dual-encoder"),iQe=o(" \u2014 "),Mk=a("a"),dQe=o("VisionTextDualEncoderConfig"),cQe=o(" (VisionTextDualEncoder model)"),fQe=l(),Qm=a("li"),Hee=a("strong"),mQe=o("visual_bert"),gQe=o(" \u2014 "),Ek=a("a"),hQe=o("VisualBertConfig"),pQe=o(" (VisualBert model)"),uQe=l(),Hm=a("li"),Uee=a("strong"),_Qe=o("vit"),bQe=o(" \u2014 "),Ck=a("a"),vQe=o("ViTConfig"),FQe=o(" (ViT model)"),TQe=l(),Um=a("li"),Jee=a("strong"),MQe=o("vit_mae"),EQe=o(" \u2014 "),wk=a("a"),CQe=o("ViTMAEConfig"),wQe=o(" (ViTMAE model)"),AQe=l(),Jm=a("li"),Yee=a("strong"),yQe=o("wav2vec2"),LQe=o(" \u2014 "),Ak=a("a"),xQe=o("Wav2Vec2Config"),$Qe=o(" (Wav2Vec2 model)"),kQe=l(),Ym=a("li"),Kee=a("strong"),SQe=o("wav2vec2-conformer"),RQe=o(" \u2014 "),yk=a("a"),BQe=o("Wav2Vec2ConformerConfig"),PQe=o(" (Wav2Vec2ConformerConformer model)"),IQe=l(),Km=a("li"),Zee=a("strong"),qQe=o("wavlm"),NQe=o(" \u2014 "),Lk=a("a"),jQe=o("WavLMConfig"),DQe=o(" (WavLM model)"),GQe=l(),Zm=a("li"),eoe=a("strong"),OQe=o("xglm"),VQe=o(" \u2014 "),xk=a("a"),XQe=o("XGLMConfig"),zQe=o(" (XGLM model)"),WQe=l(),eg=a("li"),ooe=a("strong"),QQe=o("xlm"),HQe=o(" \u2014 "),$k=a("a"),UQe=o("XLMConfig"),JQe=o(" (XLM model)"),YQe=l(),og=a("li"),roe=a("strong"),KQe=o("xlm-prophetnet"),ZQe=o(" \u2014 "),kk=a("a"),eHe=o("XLMProphetNetConfig"),oHe=o(" (XLMProphetNet model)"),rHe=l(),rg=a("li"),toe=a("strong"),tHe=o("xlm-roberta"),aHe=o(" \u2014 "),Sk=a("a"),nHe=o("XLMRobertaConfig"),sHe=o(" (XLM-RoBERTa model)"),lHe=l(),tg=a("li"),aoe=a("strong"),iHe=o("xlm-roberta-xl"),dHe=o(" \u2014 "),Rk=a("a"),cHe=o("XLMRobertaXLConfig"),fHe=o(" (XLM-RoBERTa-XL model)"),mHe=l(),ag=a("li"),noe=a("strong"),gHe=o("xlnet"),hHe=o(" \u2014 "),Bk=a("a"),pHe=o("XLNetConfig"),uHe=o(" (XLNet model)"),_He=l(),ng=a("li"),soe=a("strong"),bHe=o("yoso"),vHe=o(" \u2014 "),Pk=a("a"),FHe=o("YosoConfig"),THe=o(" (YOSO model)"),MHe=l(),F(sg.$$.fragment),EHe=l(),lg=a("div"),F($A.$$.fragment),CHe=l(),loe=a("p"),wHe=o("Register a new configuration for this class."),FBe=l(),gi=a("h2"),ig=a("a"),ioe=a("span"),F(kA.$$.fragment),AHe=l(),doe=a("span"),yHe=o("AutoTokenizer"),TBe=l(),Eo=a("div"),F(SA.$$.fragment),LHe=l(),RA=a("p"),xHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ik=a("a"),$He=o("AutoTokenizer.from_pretrained()"),kHe=o(" class method."),SHe=l(),BA=a("p"),RHe=o("This class cannot be instantiated directly using "),coe=a("code"),BHe=o("__init__()"),PHe=o(" (throws an error)."),IHe=l(),Tr=a("div"),F(PA.$$.fragment),qHe=l(),foe=a("p"),NHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jHe=l(),Ma=a("p"),DHe=o("The tokenizer class to instantiate is selected based on the "),moe=a("code"),GHe=o("model_type"),OHe=o(` property of the config object (either
passed as an argument or loaded from `),goe=a("code"),VHe=o("pretrained_model_name_or_path"),XHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hoe=a("code"),zHe=o("pretrained_model_name_or_path"),WHe=o(":"),QHe=l(),k=a("ul"),An=a("li"),poe=a("strong"),HHe=o("albert"),UHe=o(" \u2014 "),qk=a("a"),JHe=o("AlbertTokenizer"),YHe=o(" or "),Nk=a("a"),KHe=o("AlbertTokenizerFast"),ZHe=o(" (ALBERT model)"),eUe=l(),yn=a("li"),uoe=a("strong"),oUe=o("bart"),rUe=o(" \u2014 "),jk=a("a"),tUe=o("BartTokenizer"),aUe=o(" or "),Dk=a("a"),nUe=o("BartTokenizerFast"),sUe=o(" (BART model)"),lUe=l(),Ln=a("li"),_oe=a("strong"),iUe=o("barthez"),dUe=o(" \u2014 "),Gk=a("a"),cUe=o("BarthezTokenizer"),fUe=o(" or "),Ok=a("a"),mUe=o("BarthezTokenizerFast"),gUe=o(" (BARThez model)"),hUe=l(),dg=a("li"),boe=a("strong"),pUe=o("bartpho"),uUe=o(" \u2014 "),Vk=a("a"),_Ue=o("BartphoTokenizer"),bUe=o(" (BARTpho model)"),vUe=l(),xn=a("li"),voe=a("strong"),FUe=o("bert"),TUe=o(" \u2014 "),Xk=a("a"),MUe=o("BertTokenizer"),EUe=o(" or "),zk=a("a"),CUe=o("BertTokenizerFast"),wUe=o(" (BERT model)"),AUe=l(),cg=a("li"),Foe=a("strong"),yUe=o("bert-generation"),LUe=o(" \u2014 "),Wk=a("a"),xUe=o("BertGenerationTokenizer"),$Ue=o(" (Bert Generation model)"),kUe=l(),fg=a("li"),Toe=a("strong"),SUe=o("bert-japanese"),RUe=o(" \u2014 "),Qk=a("a"),BUe=o("BertJapaneseTokenizer"),PUe=o(" (BertJapanese model)"),IUe=l(),mg=a("li"),Moe=a("strong"),qUe=o("bertweet"),NUe=o(" \u2014 "),Hk=a("a"),jUe=o("BertweetTokenizer"),DUe=o(" (Bertweet model)"),GUe=l(),$n=a("li"),Eoe=a("strong"),OUe=o("big_bird"),VUe=o(" \u2014 "),Uk=a("a"),XUe=o("BigBirdTokenizer"),zUe=o(" or "),Jk=a("a"),WUe=o("BigBirdTokenizerFast"),QUe=o(" (BigBird model)"),HUe=l(),kn=a("li"),Coe=a("strong"),UUe=o("bigbird_pegasus"),JUe=o(" \u2014 "),Yk=a("a"),YUe=o("PegasusTokenizer"),KUe=o(" or "),Kk=a("a"),ZUe=o("PegasusTokenizerFast"),eJe=o(" (BigBirdPegasus model)"),oJe=l(),Sn=a("li"),woe=a("strong"),rJe=o("blenderbot"),tJe=o(" \u2014 "),Zk=a("a"),aJe=o("BlenderbotTokenizer"),nJe=o(" or "),eS=a("a"),sJe=o("BlenderbotTokenizerFast"),lJe=o(" (Blenderbot model)"),iJe=l(),gg=a("li"),Aoe=a("strong"),dJe=o("blenderbot-small"),cJe=o(" \u2014 "),oS=a("a"),fJe=o("BlenderbotSmallTokenizer"),mJe=o(" (BlenderbotSmall model)"),gJe=l(),hg=a("li"),yoe=a("strong"),hJe=o("byt5"),pJe=o(" \u2014 "),rS=a("a"),uJe=o("ByT5Tokenizer"),_Je=o(" (ByT5 model)"),bJe=l(),Rn=a("li"),Loe=a("strong"),vJe=o("camembert"),FJe=o(" \u2014 "),tS=a("a"),TJe=o("CamembertTokenizer"),MJe=o(" or "),aS=a("a"),EJe=o("CamembertTokenizerFast"),CJe=o(" (CamemBERT model)"),wJe=l(),pg=a("li"),xoe=a("strong"),AJe=o("canine"),yJe=o(" \u2014 "),nS=a("a"),LJe=o("CanineTokenizer"),xJe=o(" (Canine model)"),$Je=l(),Bn=a("li"),$oe=a("strong"),kJe=o("clip"),SJe=o(" \u2014 "),sS=a("a"),RJe=o("CLIPTokenizer"),BJe=o(" or "),lS=a("a"),PJe=o("CLIPTokenizerFast"),IJe=o(" (CLIP model)"),qJe=l(),Pn=a("li"),koe=a("strong"),NJe=o("convbert"),jJe=o(" \u2014 "),iS=a("a"),DJe=o("ConvBertTokenizer"),GJe=o(" or "),dS=a("a"),OJe=o("ConvBertTokenizerFast"),VJe=o(" (ConvBERT model)"),XJe=l(),In=a("li"),Soe=a("strong"),zJe=o("cpm"),WJe=o(" \u2014 "),cS=a("a"),QJe=o("CpmTokenizer"),HJe=o(" or "),Roe=a("code"),UJe=o("CpmTokenizerFast"),JJe=o(" (CPM model)"),YJe=l(),ug=a("li"),Boe=a("strong"),KJe=o("ctrl"),ZJe=o(" \u2014 "),fS=a("a"),eYe=o("CTRLTokenizer"),oYe=o(" (CTRL model)"),rYe=l(),qn=a("li"),Poe=a("strong"),tYe=o("data2vec-text"),aYe=o(" \u2014 "),mS=a("a"),nYe=o("RobertaTokenizer"),sYe=o(" or "),gS=a("a"),lYe=o("RobertaTokenizerFast"),iYe=o(" (Data2VecText model)"),dYe=l(),Nn=a("li"),Ioe=a("strong"),cYe=o("deberta"),fYe=o(" \u2014 "),hS=a("a"),mYe=o("DebertaTokenizer"),gYe=o(" or "),pS=a("a"),hYe=o("DebertaTokenizerFast"),pYe=o(" (DeBERTa model)"),uYe=l(),jn=a("li"),qoe=a("strong"),_Ye=o("deberta-v2"),bYe=o(" \u2014 "),uS=a("a"),vYe=o("DebertaV2Tokenizer"),FYe=o(" or "),_S=a("a"),TYe=o("DebertaV2TokenizerFast"),MYe=o(" (DeBERTa-v2 model)"),EYe=l(),Dn=a("li"),Noe=a("strong"),CYe=o("distilbert"),wYe=o(" \u2014 "),bS=a("a"),AYe=o("DistilBertTokenizer"),yYe=o(" or "),vS=a("a"),LYe=o("DistilBertTokenizerFast"),xYe=o(" (DistilBERT model)"),$Ye=l(),Gn=a("li"),joe=a("strong"),kYe=o("dpr"),SYe=o(" \u2014 "),FS=a("a"),RYe=o("DPRQuestionEncoderTokenizer"),BYe=o(" or "),TS=a("a"),PYe=o("DPRQuestionEncoderTokenizerFast"),IYe=o(" (DPR model)"),qYe=l(),On=a("li"),Doe=a("strong"),NYe=o("electra"),jYe=o(" \u2014 "),MS=a("a"),DYe=o("ElectraTokenizer"),GYe=o(" or "),ES=a("a"),OYe=o("ElectraTokenizerFast"),VYe=o(" (ELECTRA model)"),XYe=l(),_g=a("li"),Goe=a("strong"),zYe=o("flaubert"),WYe=o(" \u2014 "),CS=a("a"),QYe=o("FlaubertTokenizer"),HYe=o(" (FlauBERT model)"),UYe=l(),Vn=a("li"),Ooe=a("strong"),JYe=o("fnet"),YYe=o(" \u2014 "),wS=a("a"),KYe=o("FNetTokenizer"),ZYe=o(" or "),AS=a("a"),eKe=o("FNetTokenizerFast"),oKe=o(" (FNet model)"),rKe=l(),bg=a("li"),Voe=a("strong"),tKe=o("fsmt"),aKe=o(" \u2014 "),yS=a("a"),nKe=o("FSMTTokenizer"),sKe=o(" (FairSeq Machine-Translation model)"),lKe=l(),Xn=a("li"),Xoe=a("strong"),iKe=o("funnel"),dKe=o(" \u2014 "),LS=a("a"),cKe=o("FunnelTokenizer"),fKe=o(" or "),xS=a("a"),mKe=o("FunnelTokenizerFast"),gKe=o(" (Funnel Transformer model)"),hKe=l(),zn=a("li"),zoe=a("strong"),pKe=o("gpt2"),uKe=o(" \u2014 "),$S=a("a"),_Ke=o("GPT2Tokenizer"),bKe=o(" or "),kS=a("a"),vKe=o("GPT2TokenizerFast"),FKe=o(" (OpenAI GPT-2 model)"),TKe=l(),Wn=a("li"),Woe=a("strong"),MKe=o("gpt_neo"),EKe=o(" \u2014 "),SS=a("a"),CKe=o("GPT2Tokenizer"),wKe=o(" or "),RS=a("a"),AKe=o("GPT2TokenizerFast"),yKe=o(" (GPT Neo model)"),LKe=l(),Qn=a("li"),Qoe=a("strong"),xKe=o("gptj"),$Ke=o(" \u2014 "),BS=a("a"),kKe=o("GPT2Tokenizer"),SKe=o(" or "),PS=a("a"),RKe=o("GPT2TokenizerFast"),BKe=o(" (GPT-J model)"),PKe=l(),Hn=a("li"),Hoe=a("strong"),IKe=o("herbert"),qKe=o(" \u2014 "),IS=a("a"),NKe=o("HerbertTokenizer"),jKe=o(" or "),qS=a("a"),DKe=o("HerbertTokenizerFast"),GKe=o(" (HerBERT model)"),OKe=l(),vg=a("li"),Uoe=a("strong"),VKe=o("hubert"),XKe=o(" \u2014 "),NS=a("a"),zKe=o("Wav2Vec2CTCTokenizer"),WKe=o(" (Hubert model)"),QKe=l(),Un=a("li"),Joe=a("strong"),HKe=o("ibert"),UKe=o(" \u2014 "),jS=a("a"),JKe=o("RobertaTokenizer"),YKe=o(" or "),DS=a("a"),KKe=o("RobertaTokenizerFast"),ZKe=o(" (I-BERT model)"),eZe=l(),Jn=a("li"),Yoe=a("strong"),oZe=o("layoutlm"),rZe=o(" \u2014 "),GS=a("a"),tZe=o("LayoutLMTokenizer"),aZe=o(" or "),OS=a("a"),nZe=o("LayoutLMTokenizerFast"),sZe=o(" (LayoutLM model)"),lZe=l(),Yn=a("li"),Koe=a("strong"),iZe=o("layoutlmv2"),dZe=o(" \u2014 "),VS=a("a"),cZe=o("LayoutLMv2Tokenizer"),fZe=o(" or "),XS=a("a"),mZe=o("LayoutLMv2TokenizerFast"),gZe=o(" (LayoutLMv2 model)"),hZe=l(),Kn=a("li"),Zoe=a("strong"),pZe=o("layoutxlm"),uZe=o(" \u2014 "),zS=a("a"),_Ze=o("LayoutXLMTokenizer"),bZe=o(" or "),WS=a("a"),vZe=o("LayoutXLMTokenizerFast"),FZe=o(" (LayoutXLM model)"),TZe=l(),Zn=a("li"),ere=a("strong"),MZe=o("led"),EZe=o(" \u2014 "),QS=a("a"),CZe=o("LEDTokenizer"),wZe=o(" or "),HS=a("a"),AZe=o("LEDTokenizerFast"),yZe=o(" (LED model)"),LZe=l(),es=a("li"),ore=a("strong"),xZe=o("longformer"),$Ze=o(" \u2014 "),US=a("a"),kZe=o("LongformerTokenizer"),SZe=o(" or "),JS=a("a"),RZe=o("LongformerTokenizerFast"),BZe=o(" (Longformer model)"),PZe=l(),Fg=a("li"),rre=a("strong"),IZe=o("luke"),qZe=o(" \u2014 "),YS=a("a"),NZe=o("LukeTokenizer"),jZe=o(" (LUKE model)"),DZe=l(),os=a("li"),tre=a("strong"),GZe=o("lxmert"),OZe=o(" \u2014 "),KS=a("a"),VZe=o("LxmertTokenizer"),XZe=o(" or "),ZS=a("a"),zZe=o("LxmertTokenizerFast"),WZe=o(" (LXMERT model)"),QZe=l(),Tg=a("li"),are=a("strong"),HZe=o("m2m_100"),UZe=o(" \u2014 "),eR=a("a"),JZe=o("M2M100Tokenizer"),YZe=o(" (M2M100 model)"),KZe=l(),Mg=a("li"),nre=a("strong"),ZZe=o("marian"),eeo=o(" \u2014 "),oR=a("a"),oeo=o("MarianTokenizer"),reo=o(" (Marian model)"),teo=l(),rs=a("li"),sre=a("strong"),aeo=o("mbart"),neo=o(" \u2014 "),rR=a("a"),seo=o("MBartTokenizer"),leo=o(" or "),tR=a("a"),ieo=o("MBartTokenizerFast"),deo=o(" (mBART model)"),ceo=l(),ts=a("li"),lre=a("strong"),feo=o("mbart50"),meo=o(" \u2014 "),aR=a("a"),geo=o("MBart50Tokenizer"),heo=o(" or "),nR=a("a"),peo=o("MBart50TokenizerFast"),ueo=o(" (mBART-50 model)"),_eo=l(),as=a("li"),ire=a("strong"),beo=o("megatron-bert"),veo=o(" \u2014 "),sR=a("a"),Feo=o("BertTokenizer"),Teo=o(" or "),lR=a("a"),Meo=o("BertTokenizerFast"),Eeo=o(" (MegatronBert model)"),Ceo=l(),Eg=a("li"),dre=a("strong"),weo=o("mluke"),Aeo=o(" \u2014 "),iR=a("a"),yeo=o("MLukeTokenizer"),Leo=o(" (mLUKE model)"),xeo=l(),ns=a("li"),cre=a("strong"),$eo=o("mobilebert"),keo=o(" \u2014 "),dR=a("a"),Seo=o("MobileBertTokenizer"),Reo=o(" or "),cR=a("a"),Beo=o("MobileBertTokenizerFast"),Peo=o(" (MobileBERT model)"),Ieo=l(),ss=a("li"),fre=a("strong"),qeo=o("mpnet"),Neo=o(" \u2014 "),fR=a("a"),jeo=o("MPNetTokenizer"),Deo=o(" or "),mR=a("a"),Geo=o("MPNetTokenizerFast"),Oeo=o(" (MPNet model)"),Veo=l(),ls=a("li"),mre=a("strong"),Xeo=o("mt5"),zeo=o(" \u2014 "),gR=a("a"),Weo=o("MT5Tokenizer"),Qeo=o(" or "),hR=a("a"),Heo=o("MT5TokenizerFast"),Ueo=o(" (mT5 model)"),Jeo=l(),is=a("li"),gre=a("strong"),Yeo=o("nystromformer"),Keo=o(" \u2014 "),pR=a("a"),Zeo=o("AlbertTokenizer"),eoo=o(" or "),uR=a("a"),ooo=o("AlbertTokenizerFast"),roo=o(" (Nystromformer model)"),too=l(),ds=a("li"),hre=a("strong"),aoo=o("openai-gpt"),noo=o(" \u2014 "),_R=a("a"),soo=o("OpenAIGPTTokenizer"),loo=o(" or "),bR=a("a"),ioo=o("OpenAIGPTTokenizerFast"),doo=o(" (OpenAI GPT model)"),coo=l(),cs=a("li"),pre=a("strong"),foo=o("pegasus"),moo=o(" \u2014 "),vR=a("a"),goo=o("PegasusTokenizer"),hoo=o(" or "),FR=a("a"),poo=o("PegasusTokenizerFast"),uoo=o(" (Pegasus model)"),_oo=l(),Cg=a("li"),ure=a("strong"),boo=o("perceiver"),voo=o(" \u2014 "),TR=a("a"),Foo=o("PerceiverTokenizer"),Too=o(" (Perceiver model)"),Moo=l(),wg=a("li"),_re=a("strong"),Eoo=o("phobert"),Coo=o(" \u2014 "),MR=a("a"),woo=o("PhobertTokenizer"),Aoo=o(" (PhoBERT model)"),yoo=l(),Ag=a("li"),bre=a("strong"),Loo=o("plbart"),xoo=o(" \u2014 "),ER=a("a"),$oo=o("PLBartTokenizer"),koo=o(" (PLBart model)"),Soo=l(),yg=a("li"),vre=a("strong"),Roo=o("prophetnet"),Boo=o(" \u2014 "),CR=a("a"),Poo=o("ProphetNetTokenizer"),Ioo=o(" (ProphetNet model)"),qoo=l(),fs=a("li"),Fre=a("strong"),Noo=o("qdqbert"),joo=o(" \u2014 "),wR=a("a"),Doo=o("BertTokenizer"),Goo=o(" or "),AR=a("a"),Ooo=o("BertTokenizerFast"),Voo=o(" (QDQBert model)"),Xoo=l(),Lg=a("li"),Tre=a("strong"),zoo=o("rag"),Woo=o(" \u2014 "),yR=a("a"),Qoo=o("RagTokenizer"),Hoo=o(" (RAG model)"),Uoo=l(),ms=a("li"),Mre=a("strong"),Joo=o("realm"),Yoo=o(" \u2014 "),LR=a("a"),Koo=o("RealmTokenizer"),Zoo=o(" or "),xR=a("a"),ero=o("RealmTokenizerFast"),oro=o(" (Realm model)"),rro=l(),gs=a("li"),Ere=a("strong"),tro=o("reformer"),aro=o(" \u2014 "),$R=a("a"),nro=o("ReformerTokenizer"),sro=o(" or "),kR=a("a"),lro=o("ReformerTokenizerFast"),iro=o(" (Reformer model)"),dro=l(),hs=a("li"),Cre=a("strong"),cro=o("rembert"),fro=o(" \u2014 "),SR=a("a"),mro=o("RemBertTokenizer"),gro=o(" or "),RR=a("a"),hro=o("RemBertTokenizerFast"),pro=o(" (RemBERT model)"),uro=l(),ps=a("li"),wre=a("strong"),_ro=o("retribert"),bro=o(" \u2014 "),BR=a("a"),vro=o("RetriBertTokenizer"),Fro=o(" or "),PR=a("a"),Tro=o("RetriBertTokenizerFast"),Mro=o(" (RetriBERT model)"),Ero=l(),us=a("li"),Are=a("strong"),Cro=o("roberta"),wro=o(" \u2014 "),IR=a("a"),Aro=o("RobertaTokenizer"),yro=o(" or "),qR=a("a"),Lro=o("RobertaTokenizerFast"),xro=o(" (RoBERTa model)"),$ro=l(),_s=a("li"),yre=a("strong"),kro=o("roformer"),Sro=o(" \u2014 "),NR=a("a"),Rro=o("RoFormerTokenizer"),Bro=o(" or "),jR=a("a"),Pro=o("RoFormerTokenizerFast"),Iro=o(" (RoFormer model)"),qro=l(),xg=a("li"),Lre=a("strong"),Nro=o("speech_to_text"),jro=o(" \u2014 "),DR=a("a"),Dro=o("Speech2TextTokenizer"),Gro=o(" (Speech2Text model)"),Oro=l(),$g=a("li"),xre=a("strong"),Vro=o("speech_to_text_2"),Xro=o(" \u2014 "),GR=a("a"),zro=o("Speech2Text2Tokenizer"),Wro=o(" (Speech2Text2 model)"),Qro=l(),bs=a("li"),$re=a("strong"),Hro=o("splinter"),Uro=o(" \u2014 "),OR=a("a"),Jro=o("SplinterTokenizer"),Yro=o(" or "),VR=a("a"),Kro=o("SplinterTokenizerFast"),Zro=o(" (Splinter model)"),eto=l(),vs=a("li"),kre=a("strong"),oto=o("squeezebert"),rto=o(" \u2014 "),XR=a("a"),tto=o("SqueezeBertTokenizer"),ato=o(" or "),zR=a("a"),nto=o("SqueezeBertTokenizerFast"),sto=o(" (SqueezeBERT model)"),lto=l(),Fs=a("li"),Sre=a("strong"),ito=o("t5"),dto=o(" \u2014 "),WR=a("a"),cto=o("T5Tokenizer"),fto=o(" or "),QR=a("a"),mto=o("T5TokenizerFast"),gto=o(" (T5 model)"),hto=l(),kg=a("li"),Rre=a("strong"),pto=o("tapas"),uto=o(" \u2014 "),HR=a("a"),_to=o("TapasTokenizer"),bto=o(" (TAPAS model)"),vto=l(),Sg=a("li"),Bre=a("strong"),Fto=o("tapex"),Tto=o(" \u2014 "),UR=a("a"),Mto=o("TapexTokenizer"),Eto=o(" (TAPEX model)"),Cto=l(),Rg=a("li"),Pre=a("strong"),wto=o("transfo-xl"),Ato=o(" \u2014 "),JR=a("a"),yto=o("TransfoXLTokenizer"),Lto=o(" (Transformer-XL model)"),xto=l(),Ts=a("li"),Ire=a("strong"),$to=o("visual_bert"),kto=o(" \u2014 "),YR=a("a"),Sto=o("BertTokenizer"),Rto=o(" or "),KR=a("a"),Bto=o("BertTokenizerFast"),Pto=o(" (VisualBert model)"),Ito=l(),Bg=a("li"),qre=a("strong"),qto=o("wav2vec2"),Nto=o(" \u2014 "),ZR=a("a"),jto=o("Wav2Vec2CTCTokenizer"),Dto=o(" (Wav2Vec2 model)"),Gto=l(),Pg=a("li"),Nre=a("strong"),Oto=o("wav2vec2-conformer"),Vto=o(" \u2014 "),eB=a("a"),Xto=o("Wav2Vec2CTCTokenizer"),zto=o(" (Wav2Vec2ConformerConformer model)"),Wto=l(),Ig=a("li"),jre=a("strong"),Qto=o("wav2vec2_phoneme"),Hto=o(" \u2014 "),oB=a("a"),Uto=o("Wav2Vec2PhonemeCTCTokenizer"),Jto=o(" (Wav2Vec2Phoneme model)"),Yto=l(),Ms=a("li"),Dre=a("strong"),Kto=o("xglm"),Zto=o(" \u2014 "),rB=a("a"),eao=o("XGLMTokenizer"),oao=o(" or "),tB=a("a"),rao=o("XGLMTokenizerFast"),tao=o(" (XGLM model)"),aao=l(),qg=a("li"),Gre=a("strong"),nao=o("xlm"),sao=o(" \u2014 "),aB=a("a"),lao=o("XLMTokenizer"),iao=o(" (XLM model)"),dao=l(),Ng=a("li"),Ore=a("strong"),cao=o("xlm-prophetnet"),fao=o(" \u2014 "),nB=a("a"),mao=o("XLMProphetNetTokenizer"),gao=o(" (XLMProphetNet model)"),hao=l(),Es=a("li"),Vre=a("strong"),pao=o("xlm-roberta"),uao=o(" \u2014 "),sB=a("a"),_ao=o("XLMRobertaTokenizer"),bao=o(" or "),lB=a("a"),vao=o("XLMRobertaTokenizerFast"),Fao=o(" (XLM-RoBERTa model)"),Tao=l(),Cs=a("li"),Xre=a("strong"),Mao=o("xlm-roberta-xl"),Eao=o(" \u2014 "),iB=a("a"),Cao=o("RobertaTokenizer"),wao=o(" or "),dB=a("a"),Aao=o("RobertaTokenizerFast"),yao=o(" (XLM-RoBERTa-XL model)"),Lao=l(),ws=a("li"),zre=a("strong"),xao=o("xlnet"),$ao=o(" \u2014 "),cB=a("a"),kao=o("XLNetTokenizer"),Sao=o(" or "),fB=a("a"),Rao=o("XLNetTokenizerFast"),Bao=o(" (XLNet model)"),Pao=l(),As=a("li"),Wre=a("strong"),Iao=o("yoso"),qao=o(" \u2014 "),mB=a("a"),Nao=o("AlbertTokenizer"),jao=o(" or "),gB=a("a"),Dao=o("AlbertTokenizerFast"),Gao=o(" (YOSO model)"),Oao=l(),F(jg.$$.fragment),Vao=l(),Dg=a("div"),F(IA.$$.fragment),Xao=l(),Qre=a("p"),zao=o("Register a new tokenizer in this mapping."),MBe=l(),hi=a("h2"),Gg=a("a"),Hre=a("span"),F(qA.$$.fragment),Wao=l(),Ure=a("span"),Qao=o("AutoFeatureExtractor"),EBe=l(),Co=a("div"),F(NA.$$.fragment),Hao=l(),jA=a("p"),Uao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hB=a("a"),Jao=o("AutoFeatureExtractor.from_pretrained()"),Yao=o(" class method."),Kao=l(),DA=a("p"),Zao=o("This class cannot be instantiated directly using "),Jre=a("code"),eno=o("__init__()"),ono=o(" (throws an error)."),rno=l(),We=a("div"),F(GA.$$.fragment),tno=l(),Yre=a("p"),ano=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),nno=l(),Ea=a("p"),sno=o("The feature extractor class to instantiate is selected based on the "),Kre=a("code"),lno=o("model_type"),ino=o(` property of the config object
(either passed as an argument or loaded from `),Zre=a("code"),dno=o("pretrained_model_name_or_path"),cno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ete=a("code"),fno=o("pretrained_model_name_or_path"),mno=o(":"),gno=l(),te=a("ul"),Og=a("li"),ote=a("strong"),hno=o("beit"),pno=o(" \u2014 "),pB=a("a"),uno=o("BeitFeatureExtractor"),_no=o(" (BEiT model)"),bno=l(),Vg=a("li"),rte=a("strong"),vno=o("clip"),Fno=o(" \u2014 "),uB=a("a"),Tno=o("CLIPFeatureExtractor"),Mno=o(" (CLIP model)"),Eno=l(),Xg=a("li"),tte=a("strong"),Cno=o("convnext"),wno=o(" \u2014 "),_B=a("a"),Ano=o("ConvNextFeatureExtractor"),yno=o(" (ConvNext model)"),Lno=l(),zg=a("li"),ate=a("strong"),xno=o("data2vec-audio"),$no=o(" \u2014 "),bB=a("a"),kno=o("Wav2Vec2FeatureExtractor"),Sno=o(" (Data2VecAudio model)"),Rno=l(),Wg=a("li"),nte=a("strong"),Bno=o("data2vec-vision"),Pno=o(" \u2014 "),vB=a("a"),Ino=o("BeitFeatureExtractor"),qno=o(" (Data2VecVision model)"),Nno=l(),Qg=a("li"),ste=a("strong"),jno=o("deit"),Dno=o(" \u2014 "),FB=a("a"),Gno=o("DeiTFeatureExtractor"),Ono=o(" (DeiT model)"),Vno=l(),Hg=a("li"),lte=a("strong"),Xno=o("detr"),zno=o(" \u2014 "),TB=a("a"),Wno=o("DetrFeatureExtractor"),Qno=o(" (DETR model)"),Hno=l(),Ug=a("li"),ite=a("strong"),Uno=o("dpt"),Jno=o(" \u2014 "),MB=a("a"),Yno=o("DPTFeatureExtractor"),Kno=o(" (DPT model)"),Zno=l(),Jg=a("li"),dte=a("strong"),eso=o("glpn"),oso=o(" \u2014 "),EB=a("a"),rso=o("GLPNFeatureExtractor"),tso=o(" (GLPN model)"),aso=l(),Yg=a("li"),cte=a("strong"),nso=o("hubert"),sso=o(" \u2014 "),CB=a("a"),lso=o("Wav2Vec2FeatureExtractor"),iso=o(" (Hubert model)"),dso=l(),Kg=a("li"),fte=a("strong"),cso=o("layoutlmv2"),fso=o(" \u2014 "),wB=a("a"),mso=o("LayoutLMv2FeatureExtractor"),gso=o(" (LayoutLMv2 model)"),hso=l(),Zg=a("li"),mte=a("strong"),pso=o("maskformer"),uso=o(" \u2014 "),AB=a("a"),_so=o("MaskFormerFeatureExtractor"),bso=o(" (MaskFormer model)"),vso=l(),eh=a("li"),gte=a("strong"),Fso=o("perceiver"),Tso=o(" \u2014 "),yB=a("a"),Mso=o("PerceiverFeatureExtractor"),Eso=o(" (Perceiver model)"),Cso=l(),oh=a("li"),hte=a("strong"),wso=o("poolformer"),Aso=o(" \u2014 "),LB=a("a"),yso=o("PoolFormerFeatureExtractor"),Lso=o(" (PoolFormer model)"),xso=l(),rh=a("li"),pte=a("strong"),$so=o("regnet"),kso=o(" \u2014 "),xB=a("a"),Sso=o("ConvNextFeatureExtractor"),Rso=o(" (RegNet model)"),Bso=l(),th=a("li"),ute=a("strong"),Pso=o("resnet"),Iso=o(" \u2014 "),$B=a("a"),qso=o("ConvNextFeatureExtractor"),Nso=o(" (ResNet model)"),jso=l(),ah=a("li"),_te=a("strong"),Dso=o("segformer"),Gso=o(" \u2014 "),kB=a("a"),Oso=o("SegformerFeatureExtractor"),Vso=o(" (SegFormer model)"),Xso=l(),nh=a("li"),bte=a("strong"),zso=o("speech_to_text"),Wso=o(" \u2014 "),SB=a("a"),Qso=o("Speech2TextFeatureExtractor"),Hso=o(" (Speech2Text model)"),Uso=l(),sh=a("li"),vte=a("strong"),Jso=o("swin"),Yso=o(" \u2014 "),RB=a("a"),Kso=o("ViTFeatureExtractor"),Zso=o(" (Swin model)"),elo=l(),lh=a("li"),Fte=a("strong"),olo=o("van"),rlo=o(" \u2014 "),BB=a("a"),tlo=o("ConvNextFeatureExtractor"),alo=o(" (VAN model)"),nlo=l(),ih=a("li"),Tte=a("strong"),slo=o("vit"),llo=o(" \u2014 "),PB=a("a"),ilo=o("ViTFeatureExtractor"),dlo=o(" (ViT model)"),clo=l(),dh=a("li"),Mte=a("strong"),flo=o("vit_mae"),mlo=o(" \u2014 "),IB=a("a"),glo=o("ViTFeatureExtractor"),hlo=o(" (ViTMAE model)"),plo=l(),ch=a("li"),Ete=a("strong"),ulo=o("wav2vec2"),_lo=o(" \u2014 "),qB=a("a"),blo=o("Wav2Vec2FeatureExtractor"),vlo=o(" (Wav2Vec2 model)"),Flo=l(),fh=a("li"),Cte=a("strong"),Tlo=o("wav2vec2-conformer"),Mlo=o(" \u2014 "),NB=a("a"),Elo=o("Wav2Vec2FeatureExtractor"),Clo=o(" (Wav2Vec2ConformerConformer model)"),wlo=l(),F(mh.$$.fragment),Alo=l(),F(gh.$$.fragment),ylo=l(),hh=a("div"),F(OA.$$.fragment),Llo=l(),wte=a("p"),xlo=o("Register a new feature extractor for this class."),CBe=l(),pi=a("h2"),ph=a("a"),Ate=a("span"),F(VA.$$.fragment),$lo=l(),yte=a("span"),klo=o("AutoProcessor"),wBe=l(),wo=a("div"),F(XA.$$.fragment),Slo=l(),zA=a("p"),Rlo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jB=a("a"),Blo=o("AutoProcessor.from_pretrained()"),Plo=o(" class method."),Ilo=l(),WA=a("p"),qlo=o("This class cannot be instantiated directly using "),Lte=a("code"),Nlo=o("__init__()"),jlo=o(" (throws an error)."),Dlo=l(),Qe=a("div"),F(QA.$$.fragment),Glo=l(),xte=a("p"),Olo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Vlo=l(),ui=a("p"),Xlo=o("The processor class to instantiate is selected based on the "),$te=a("code"),zlo=o("model_type"),Wlo=o(` property of the config object (either
passed as an argument or loaded from `),kte=a("code"),Qlo=o("pretrained_model_name_or_path"),Hlo=o(" if possible):"),Ulo=l(),be=a("ul"),uh=a("li"),Ste=a("strong"),Jlo=o("clip"),Ylo=o(" \u2014 "),DB=a("a"),Klo=o("CLIPProcessor"),Zlo=o(" (CLIP model)"),eio=l(),_h=a("li"),Rte=a("strong"),oio=o("layoutlmv2"),rio=o(" \u2014 "),GB=a("a"),tio=o("LayoutLMv2Processor"),aio=o(" (LayoutLMv2 model)"),nio=l(),bh=a("li"),Bte=a("strong"),sio=o("layoutxlm"),lio=o(" \u2014 "),OB=a("a"),iio=o("LayoutXLMProcessor"),dio=o(" (LayoutXLM model)"),cio=l(),vh=a("li"),Pte=a("strong"),fio=o("sew"),mio=o(" \u2014 "),VB=a("a"),gio=o("Wav2Vec2Processor"),hio=o(" (SEW model)"),pio=l(),Fh=a("li"),Ite=a("strong"),uio=o("sew-d"),_io=o(" \u2014 "),XB=a("a"),bio=o("Wav2Vec2Processor"),vio=o(" (SEW-D model)"),Fio=l(),Th=a("li"),qte=a("strong"),Tio=o("speech_to_text"),Mio=o(" \u2014 "),zB=a("a"),Eio=o("Speech2TextProcessor"),Cio=o(" (Speech2Text model)"),wio=l(),Mh=a("li"),Nte=a("strong"),Aio=o("speech_to_text_2"),yio=o(" \u2014 "),WB=a("a"),Lio=o("Speech2Text2Processor"),xio=o(" (Speech2Text2 model)"),$io=l(),Eh=a("li"),jte=a("strong"),kio=o("trocr"),Sio=o(" \u2014 "),QB=a("a"),Rio=o("TrOCRProcessor"),Bio=o(" (TrOCR model)"),Pio=l(),Ch=a("li"),Dte=a("strong"),Iio=o("unispeech"),qio=o(" \u2014 "),HB=a("a"),Nio=o("Wav2Vec2Processor"),jio=o(" (UniSpeech model)"),Dio=l(),wh=a("li"),Gte=a("strong"),Gio=o("unispeech-sat"),Oio=o(" \u2014 "),UB=a("a"),Vio=o("Wav2Vec2Processor"),Xio=o(" (UniSpeechSat model)"),zio=l(),Ah=a("li"),Ote=a("strong"),Wio=o("vilt"),Qio=o(" \u2014 "),JB=a("a"),Hio=o("ViltProcessor"),Uio=o(" (ViLT model)"),Jio=l(),yh=a("li"),Vte=a("strong"),Yio=o("vision-text-dual-encoder"),Kio=o(" \u2014 "),YB=a("a"),Zio=o("VisionTextDualEncoderProcessor"),edo=o(" (VisionTextDualEncoder model)"),odo=l(),Lh=a("li"),Xte=a("strong"),rdo=o("wav2vec2"),tdo=o(" \u2014 "),KB=a("a"),ado=o("Wav2Vec2Processor"),ndo=o(" (Wav2Vec2 model)"),sdo=l(),xh=a("li"),zte=a("strong"),ldo=o("wav2vec2-conformer"),ido=o(" \u2014 "),ZB=a("a"),ddo=o("Wav2Vec2Processor"),cdo=o(" (Wav2Vec2ConformerConformer model)"),fdo=l(),$h=a("li"),Wte=a("strong"),mdo=o("wavlm"),gdo=o(" \u2014 "),eP=a("a"),hdo=o("Wav2Vec2Processor"),pdo=o(" (WavLM model)"),udo=l(),F(kh.$$.fragment),_do=l(),F(Sh.$$.fragment),bdo=l(),Rh=a("div"),F(HA.$$.fragment),vdo=l(),Qte=a("p"),Fdo=o("Register a new processor for this class."),ABe=l(),_i=a("h2"),Bh=a("a"),Hte=a("span"),F(UA.$$.fragment),Tdo=l(),Ute=a("span"),Mdo=o("AutoModel"),yBe=l(),Ao=a("div"),F(JA.$$.fragment),Edo=l(),bi=a("p"),Cdo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oP=a("a"),wdo=o("from_pretrained()"),Ado=o(" class method or the "),rP=a("a"),ydo=o("from_config()"),Ldo=o(` class
method.`),xdo=l(),YA=a("p"),$do=o("This class cannot be instantiated directly using "),Jte=a("code"),kdo=o("__init__()"),Sdo=o(" (throws an error)."),Rdo=l(),et=a("div"),F(KA.$$.fragment),Bdo=l(),Yte=a("p"),Pdo=o("Instantiates one of the base model classes of the library from a configuration."),Ido=l(),vi=a("p"),qdo=o(`Note:
Loading a model from its configuration file does `),Kte=a("strong"),Ndo=o("not"),jdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tP=a("a"),Ddo=o("from_pretrained()"),Gdo=o(" to load the model weights."),Odo=l(),F(Ph.$$.fragment),Vdo=l(),He=a("div"),F(ZA.$$.fragment),Xdo=l(),Zte=a("p"),zdo=o("Instantiate one of the base model classes of the library from a pretrained model."),Wdo=l(),Ca=a("p"),Qdo=o("The model class to instantiate is selected based on the "),eae=a("code"),Hdo=o("model_type"),Udo=o(` property of the config object (either
passed as an argument or loaded from `),oae=a("code"),Jdo=o("pretrained_model_name_or_path"),Ydo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=a("code"),Kdo=o("pretrained_model_name_or_path"),Zdo=o(":"),eco=l(),x=a("ul"),Ih=a("li"),tae=a("strong"),oco=o("albert"),rco=o(" \u2014 "),aP=a("a"),tco=o("AlbertModel"),aco=o(" (ALBERT model)"),nco=l(),qh=a("li"),aae=a("strong"),sco=o("bart"),lco=o(" \u2014 "),nP=a("a"),ico=o("BartModel"),dco=o(" (BART model)"),cco=l(),Nh=a("li"),nae=a("strong"),fco=o("beit"),mco=o(" \u2014 "),sP=a("a"),gco=o("BeitModel"),hco=o(" (BEiT model)"),pco=l(),jh=a("li"),sae=a("strong"),uco=o("bert"),_co=o(" \u2014 "),lP=a("a"),bco=o("BertModel"),vco=o(" (BERT model)"),Fco=l(),Dh=a("li"),lae=a("strong"),Tco=o("bert-generation"),Mco=o(" \u2014 "),iP=a("a"),Eco=o("BertGenerationEncoder"),Cco=o(" (Bert Generation model)"),wco=l(),Gh=a("li"),iae=a("strong"),Aco=o("big_bird"),yco=o(" \u2014 "),dP=a("a"),Lco=o("BigBirdModel"),xco=o(" (BigBird model)"),$co=l(),Oh=a("li"),dae=a("strong"),kco=o("bigbird_pegasus"),Sco=o(" \u2014 "),cP=a("a"),Rco=o("BigBirdPegasusModel"),Bco=o(" (BigBirdPegasus model)"),Pco=l(),Vh=a("li"),cae=a("strong"),Ico=o("blenderbot"),qco=o(" \u2014 "),fP=a("a"),Nco=o("BlenderbotModel"),jco=o(" (Blenderbot model)"),Dco=l(),Xh=a("li"),fae=a("strong"),Gco=o("blenderbot-small"),Oco=o(" \u2014 "),mP=a("a"),Vco=o("BlenderbotSmallModel"),Xco=o(" (BlenderbotSmall model)"),zco=l(),zh=a("li"),mae=a("strong"),Wco=o("camembert"),Qco=o(" \u2014 "),gP=a("a"),Hco=o("CamembertModel"),Uco=o(" (CamemBERT model)"),Jco=l(),Wh=a("li"),gae=a("strong"),Yco=o("canine"),Kco=o(" \u2014 "),hP=a("a"),Zco=o("CanineModel"),efo=o(" (Canine model)"),ofo=l(),Qh=a("li"),hae=a("strong"),rfo=o("clip"),tfo=o(" \u2014 "),pP=a("a"),afo=o("CLIPModel"),nfo=o(" (CLIP model)"),sfo=l(),Hh=a("li"),pae=a("strong"),lfo=o("convbert"),ifo=o(" \u2014 "),uP=a("a"),dfo=o("ConvBertModel"),cfo=o(" (ConvBERT model)"),ffo=l(),Uh=a("li"),uae=a("strong"),mfo=o("convnext"),gfo=o(" \u2014 "),_P=a("a"),hfo=o("ConvNextModel"),pfo=o(" (ConvNext model)"),ufo=l(),Jh=a("li"),_ae=a("strong"),_fo=o("ctrl"),bfo=o(" \u2014 "),bP=a("a"),vfo=o("CTRLModel"),Ffo=o(" (CTRL model)"),Tfo=l(),Yh=a("li"),bae=a("strong"),Mfo=o("data2vec-audio"),Efo=o(" \u2014 "),vP=a("a"),Cfo=o("Data2VecAudioModel"),wfo=o(" (Data2VecAudio model)"),Afo=l(),Kh=a("li"),vae=a("strong"),yfo=o("data2vec-text"),Lfo=o(" \u2014 "),FP=a("a"),xfo=o("Data2VecTextModel"),$fo=o(" (Data2VecText model)"),kfo=l(),Zh=a("li"),Fae=a("strong"),Sfo=o("data2vec-vision"),Rfo=o(" \u2014 "),TP=a("a"),Bfo=o("Data2VecVisionModel"),Pfo=o(" (Data2VecVision model)"),Ifo=l(),ep=a("li"),Tae=a("strong"),qfo=o("deberta"),Nfo=o(" \u2014 "),MP=a("a"),jfo=o("DebertaModel"),Dfo=o(" (DeBERTa model)"),Gfo=l(),op=a("li"),Mae=a("strong"),Ofo=o("deberta-v2"),Vfo=o(" \u2014 "),EP=a("a"),Xfo=o("DebertaV2Model"),zfo=o(" (DeBERTa-v2 model)"),Wfo=l(),rp=a("li"),Eae=a("strong"),Qfo=o("decision_transformer"),Hfo=o(" \u2014 "),CP=a("a"),Ufo=o("DecisionTransformerModel"),Jfo=o(" (Decision Transformer model)"),Yfo=l(),tp=a("li"),Cae=a("strong"),Kfo=o("deit"),Zfo=o(" \u2014 "),wP=a("a"),emo=o("DeiTModel"),omo=o(" (DeiT model)"),rmo=l(),ap=a("li"),wae=a("strong"),tmo=o("detr"),amo=o(" \u2014 "),AP=a("a"),nmo=o("DetrModel"),smo=o(" (DETR model)"),lmo=l(),np=a("li"),Aae=a("strong"),imo=o("distilbert"),dmo=o(" \u2014 "),yP=a("a"),cmo=o("DistilBertModel"),fmo=o(" (DistilBERT model)"),mmo=l(),sp=a("li"),yae=a("strong"),gmo=o("dpr"),hmo=o(" \u2014 "),LP=a("a"),pmo=o("DPRQuestionEncoder"),umo=o(" (DPR model)"),_mo=l(),lp=a("li"),Lae=a("strong"),bmo=o("dpt"),vmo=o(" \u2014 "),xP=a("a"),Fmo=o("DPTModel"),Tmo=o(" (DPT model)"),Mmo=l(),ip=a("li"),xae=a("strong"),Emo=o("electra"),Cmo=o(" \u2014 "),$P=a("a"),wmo=o("ElectraModel"),Amo=o(" (ELECTRA model)"),ymo=l(),dp=a("li"),$ae=a("strong"),Lmo=o("flaubert"),xmo=o(" \u2014 "),kP=a("a"),$mo=o("FlaubertModel"),kmo=o(" (FlauBERT model)"),Smo=l(),cp=a("li"),kae=a("strong"),Rmo=o("fnet"),Bmo=o(" \u2014 "),SP=a("a"),Pmo=o("FNetModel"),Imo=o(" (FNet model)"),qmo=l(),fp=a("li"),Sae=a("strong"),Nmo=o("fsmt"),jmo=o(" \u2014 "),RP=a("a"),Dmo=o("FSMTModel"),Gmo=o(" (FairSeq Machine-Translation model)"),Omo=l(),ys=a("li"),Rae=a("strong"),Vmo=o("funnel"),Xmo=o(" \u2014 "),BP=a("a"),zmo=o("FunnelModel"),Wmo=o(" or "),PP=a("a"),Qmo=o("FunnelBaseModel"),Hmo=o(" (Funnel Transformer model)"),Umo=l(),mp=a("li"),Bae=a("strong"),Jmo=o("glpn"),Ymo=o(" \u2014 "),IP=a("a"),Kmo=o("GLPNModel"),Zmo=o(" (GLPN model)"),ego=l(),gp=a("li"),Pae=a("strong"),ogo=o("gpt2"),rgo=o(" \u2014 "),qP=a("a"),tgo=o("GPT2Model"),ago=o(" (OpenAI GPT-2 model)"),ngo=l(),hp=a("li"),Iae=a("strong"),sgo=o("gpt_neo"),lgo=o(" \u2014 "),NP=a("a"),igo=o("GPTNeoModel"),dgo=o(" (GPT Neo model)"),cgo=l(),pp=a("li"),qae=a("strong"),fgo=o("gptj"),mgo=o(" \u2014 "),jP=a("a"),ggo=o("GPTJModel"),hgo=o(" (GPT-J model)"),pgo=l(),up=a("li"),Nae=a("strong"),ugo=o("hubert"),_go=o(" \u2014 "),DP=a("a"),bgo=o("HubertModel"),vgo=o(" (Hubert model)"),Fgo=l(),_p=a("li"),jae=a("strong"),Tgo=o("ibert"),Mgo=o(" \u2014 "),GP=a("a"),Ego=o("IBertModel"),Cgo=o(" (I-BERT model)"),wgo=l(),bp=a("li"),Dae=a("strong"),Ago=o("imagegpt"),ygo=o(" \u2014 "),OP=a("a"),Lgo=o("ImageGPTModel"),xgo=o(" (ImageGPT model)"),$go=l(),vp=a("li"),Gae=a("strong"),kgo=o("layoutlm"),Sgo=o(" \u2014 "),VP=a("a"),Rgo=o("LayoutLMModel"),Bgo=o(" (LayoutLM model)"),Pgo=l(),Fp=a("li"),Oae=a("strong"),Igo=o("layoutlmv2"),qgo=o(" \u2014 "),XP=a("a"),Ngo=o("LayoutLMv2Model"),jgo=o(" (LayoutLMv2 model)"),Dgo=l(),Tp=a("li"),Vae=a("strong"),Ggo=o("led"),Ogo=o(" \u2014 "),zP=a("a"),Vgo=o("LEDModel"),Xgo=o(" (LED model)"),zgo=l(),Mp=a("li"),Xae=a("strong"),Wgo=o("longformer"),Qgo=o(" \u2014 "),WP=a("a"),Hgo=o("LongformerModel"),Ugo=o(" (Longformer model)"),Jgo=l(),Ep=a("li"),zae=a("strong"),Ygo=o("luke"),Kgo=o(" \u2014 "),QP=a("a"),Zgo=o("LukeModel"),eho=o(" (LUKE model)"),oho=l(),Cp=a("li"),Wae=a("strong"),rho=o("lxmert"),tho=o(" \u2014 "),HP=a("a"),aho=o("LxmertModel"),nho=o(" (LXMERT model)"),sho=l(),wp=a("li"),Qae=a("strong"),lho=o("m2m_100"),iho=o(" \u2014 "),UP=a("a"),dho=o("M2M100Model"),cho=o(" (M2M100 model)"),fho=l(),Ap=a("li"),Hae=a("strong"),mho=o("marian"),gho=o(" \u2014 "),JP=a("a"),hho=o("MarianModel"),pho=o(" (Marian model)"),uho=l(),yp=a("li"),Uae=a("strong"),_ho=o("maskformer"),bho=o(" \u2014 "),YP=a("a"),vho=o("MaskFormerModel"),Fho=o(" (MaskFormer model)"),Tho=l(),Lp=a("li"),Jae=a("strong"),Mho=o("mbart"),Eho=o(" \u2014 "),KP=a("a"),Cho=o("MBartModel"),who=o(" (mBART model)"),Aho=l(),xp=a("li"),Yae=a("strong"),yho=o("megatron-bert"),Lho=o(" \u2014 "),ZP=a("a"),xho=o("MegatronBertModel"),$ho=o(" (MegatronBert model)"),kho=l(),$p=a("li"),Kae=a("strong"),Sho=o("mobilebert"),Rho=o(" \u2014 "),eI=a("a"),Bho=o("MobileBertModel"),Pho=o(" (MobileBERT model)"),Iho=l(),kp=a("li"),Zae=a("strong"),qho=o("mpnet"),Nho=o(" \u2014 "),oI=a("a"),jho=o("MPNetModel"),Dho=o(" (MPNet model)"),Gho=l(),Sp=a("li"),ene=a("strong"),Oho=o("mt5"),Vho=o(" \u2014 "),rI=a("a"),Xho=o("MT5Model"),zho=o(" (mT5 model)"),Who=l(),Rp=a("li"),one=a("strong"),Qho=o("nystromformer"),Hho=o(" \u2014 "),tI=a("a"),Uho=o("NystromformerModel"),Jho=o(" (Nystromformer model)"),Yho=l(),Bp=a("li"),rne=a("strong"),Kho=o("openai-gpt"),Zho=o(" \u2014 "),aI=a("a"),epo=o("OpenAIGPTModel"),opo=o(" (OpenAI GPT model)"),rpo=l(),Pp=a("li"),tne=a("strong"),tpo=o("pegasus"),apo=o(" \u2014 "),nI=a("a"),npo=o("PegasusModel"),spo=o(" (Pegasus model)"),lpo=l(),Ip=a("li"),ane=a("strong"),ipo=o("perceiver"),dpo=o(" \u2014 "),sI=a("a"),cpo=o("PerceiverModel"),fpo=o(" (Perceiver model)"),mpo=l(),qp=a("li"),nne=a("strong"),gpo=o("plbart"),hpo=o(" \u2014 "),lI=a("a"),ppo=o("PLBartModel"),upo=o(" (PLBart model)"),_po=l(),Np=a("li"),sne=a("strong"),bpo=o("poolformer"),vpo=o(" \u2014 "),iI=a("a"),Fpo=o("PoolFormerModel"),Tpo=o(" (PoolFormer model)"),Mpo=l(),jp=a("li"),lne=a("strong"),Epo=o("prophetnet"),Cpo=o(" \u2014 "),dI=a("a"),wpo=o("ProphetNetModel"),Apo=o(" (ProphetNet model)"),ypo=l(),Dp=a("li"),ine=a("strong"),Lpo=o("qdqbert"),xpo=o(" \u2014 "),cI=a("a"),$po=o("QDQBertModel"),kpo=o(" (QDQBert model)"),Spo=l(),Gp=a("li"),dne=a("strong"),Rpo=o("reformer"),Bpo=o(" \u2014 "),fI=a("a"),Ppo=o("ReformerModel"),Ipo=o(" (Reformer model)"),qpo=l(),Op=a("li"),cne=a("strong"),Npo=o("regnet"),jpo=o(" \u2014 "),mI=a("a"),Dpo=o("RegNetModel"),Gpo=o(" (RegNet model)"),Opo=l(),Vp=a("li"),fne=a("strong"),Vpo=o("rembert"),Xpo=o(" \u2014 "),gI=a("a"),zpo=o("RemBertModel"),Wpo=o(" (RemBERT model)"),Qpo=l(),Xp=a("li"),mne=a("strong"),Hpo=o("resnet"),Upo=o(" \u2014 "),hI=a("a"),Jpo=o("ResNetModel"),Ypo=o(" (ResNet model)"),Kpo=l(),zp=a("li"),gne=a("strong"),Zpo=o("retribert"),euo=o(" \u2014 "),pI=a("a"),ouo=o("RetriBertModel"),ruo=o(" (RetriBERT model)"),tuo=l(),Wp=a("li"),hne=a("strong"),auo=o("roberta"),nuo=o(" \u2014 "),uI=a("a"),suo=o("RobertaModel"),luo=o(" (RoBERTa model)"),iuo=l(),Qp=a("li"),pne=a("strong"),duo=o("roformer"),cuo=o(" \u2014 "),_I=a("a"),fuo=o("RoFormerModel"),muo=o(" (RoFormer model)"),guo=l(),Hp=a("li"),une=a("strong"),huo=o("segformer"),puo=o(" \u2014 "),bI=a("a"),uuo=o("SegformerModel"),_uo=o(" (SegFormer model)"),buo=l(),Up=a("li"),_ne=a("strong"),vuo=o("sew"),Fuo=o(" \u2014 "),vI=a("a"),Tuo=o("SEWModel"),Muo=o(" (SEW model)"),Euo=l(),Jp=a("li"),bne=a("strong"),Cuo=o("sew-d"),wuo=o(" \u2014 "),FI=a("a"),Auo=o("SEWDModel"),yuo=o(" (SEW-D model)"),Luo=l(),Yp=a("li"),vne=a("strong"),xuo=o("speech_to_text"),$uo=o(" \u2014 "),TI=a("a"),kuo=o("Speech2TextModel"),Suo=o(" (Speech2Text model)"),Ruo=l(),Kp=a("li"),Fne=a("strong"),Buo=o("splinter"),Puo=o(" \u2014 "),MI=a("a"),Iuo=o("SplinterModel"),quo=o(" (Splinter model)"),Nuo=l(),Zp=a("li"),Tne=a("strong"),juo=o("squeezebert"),Duo=o(" \u2014 "),EI=a("a"),Guo=o("SqueezeBertModel"),Ouo=o(" (SqueezeBERT model)"),Vuo=l(),eu=a("li"),Mne=a("strong"),Xuo=o("swin"),zuo=o(" \u2014 "),CI=a("a"),Wuo=o("SwinModel"),Quo=o(" (Swin model)"),Huo=l(),ou=a("li"),Ene=a("strong"),Uuo=o("t5"),Juo=o(" \u2014 "),wI=a("a"),Yuo=o("T5Model"),Kuo=o(" (T5 model)"),Zuo=l(),ru=a("li"),Cne=a("strong"),e_o=o("tapas"),o_o=o(" \u2014 "),AI=a("a"),r_o=o("TapasModel"),t_o=o(" (TAPAS model)"),a_o=l(),tu=a("li"),wne=a("strong"),n_o=o("transfo-xl"),s_o=o(" \u2014 "),yI=a("a"),l_o=o("TransfoXLModel"),i_o=o(" (Transformer-XL model)"),d_o=l(),au=a("li"),Ane=a("strong"),c_o=o("unispeech"),f_o=o(" \u2014 "),LI=a("a"),m_o=o("UniSpeechModel"),g_o=o(" (UniSpeech model)"),h_o=l(),nu=a("li"),yne=a("strong"),p_o=o("unispeech-sat"),u_o=o(" \u2014 "),xI=a("a"),__o=o("UniSpeechSatModel"),b_o=o(" (UniSpeechSat model)"),v_o=l(),su=a("li"),Lne=a("strong"),F_o=o("van"),T_o=o(" \u2014 "),$I=a("a"),M_o=o("VanModel"),E_o=o(" (VAN model)"),C_o=l(),lu=a("li"),xne=a("strong"),w_o=o("vilt"),A_o=o(" \u2014 "),kI=a("a"),y_o=o("ViltModel"),L_o=o(" (ViLT model)"),x_o=l(),iu=a("li"),$ne=a("strong"),$_o=o("vision-text-dual-encoder"),k_o=o(" \u2014 "),SI=a("a"),S_o=o("VisionTextDualEncoderModel"),R_o=o(" (VisionTextDualEncoder model)"),B_o=l(),du=a("li"),kne=a("strong"),P_o=o("visual_bert"),I_o=o(" \u2014 "),RI=a("a"),q_o=o("VisualBertModel"),N_o=o(" (VisualBert model)"),j_o=l(),cu=a("li"),Sne=a("strong"),D_o=o("vit"),G_o=o(" \u2014 "),BI=a("a"),O_o=o("ViTModel"),V_o=o(" (ViT model)"),X_o=l(),fu=a("li"),Rne=a("strong"),z_o=o("vit_mae"),W_o=o(" \u2014 "),PI=a("a"),Q_o=o("ViTMAEModel"),H_o=o(" (ViTMAE model)"),U_o=l(),mu=a("li"),Bne=a("strong"),J_o=o("wav2vec2"),Y_o=o(" \u2014 "),II=a("a"),K_o=o("Wav2Vec2Model"),Z_o=o(" (Wav2Vec2 model)"),e1o=l(),gu=a("li"),Pne=a("strong"),o1o=o("wav2vec2-conformer"),r1o=o(" \u2014 "),qI=a("a"),t1o=o("Wav2Vec2ConformerModel"),a1o=o(" (Wav2Vec2ConformerConformer model)"),n1o=l(),hu=a("li"),Ine=a("strong"),s1o=o("wavlm"),l1o=o(" \u2014 "),NI=a("a"),i1o=o("WavLMModel"),d1o=o(" (WavLM model)"),c1o=l(),pu=a("li"),qne=a("strong"),f1o=o("xglm"),m1o=o(" \u2014 "),jI=a("a"),g1o=o("XGLMModel"),h1o=o(" (XGLM model)"),p1o=l(),uu=a("li"),Nne=a("strong"),u1o=o("xlm"),_1o=o(" \u2014 "),DI=a("a"),b1o=o("XLMModel"),v1o=o(" (XLM model)"),F1o=l(),_u=a("li"),jne=a("strong"),T1o=o("xlm-prophetnet"),M1o=o(" \u2014 "),GI=a("a"),E1o=o("XLMProphetNetModel"),C1o=o(" (XLMProphetNet model)"),w1o=l(),bu=a("li"),Dne=a("strong"),A1o=o("xlm-roberta"),y1o=o(" \u2014 "),OI=a("a"),L1o=o("XLMRobertaModel"),x1o=o(" (XLM-RoBERTa model)"),$1o=l(),vu=a("li"),Gne=a("strong"),k1o=o("xlm-roberta-xl"),S1o=o(" \u2014 "),VI=a("a"),R1o=o("XLMRobertaXLModel"),B1o=o(" (XLM-RoBERTa-XL model)"),P1o=l(),Fu=a("li"),One=a("strong"),I1o=o("xlnet"),q1o=o(" \u2014 "),XI=a("a"),N1o=o("XLNetModel"),j1o=o(" (XLNet model)"),D1o=l(),Tu=a("li"),Vne=a("strong"),G1o=o("yoso"),O1o=o(" \u2014 "),zI=a("a"),V1o=o("YosoModel"),X1o=o(" (YOSO model)"),z1o=l(),Mu=a("p"),W1o=o("The model is set in evaluation mode by default using "),Xne=a("code"),Q1o=o("model.eval()"),H1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=a("code"),U1o=o("model.train()"),J1o=l(),F(Eu.$$.fragment),LBe=l(),Fi=a("h2"),Cu=a("a"),Wne=a("span"),F(e0.$$.fragment),Y1o=l(),Qne=a("span"),K1o=o("AutoModelForPreTraining"),xBe=l(),yo=a("div"),F(o0.$$.fragment),Z1o=l(),Ti=a("p"),e2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WI=a("a"),o2o=o("from_pretrained()"),r2o=o(" class method or the "),QI=a("a"),t2o=o("from_config()"),a2o=o(` class
method.`),n2o=l(),r0=a("p"),s2o=o("This class cannot be instantiated directly using "),Hne=a("code"),l2o=o("__init__()"),i2o=o(" (throws an error)."),d2o=l(),ot=a("div"),F(t0.$$.fragment),c2o=l(),Une=a("p"),f2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m2o=l(),Mi=a("p"),g2o=o(`Note:
Loading a model from its configuration file does `),Jne=a("strong"),h2o=o("not"),p2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HI=a("a"),u2o=o("from_pretrained()"),_2o=o(" to load the model weights."),b2o=l(),F(wu.$$.fragment),v2o=l(),Ue=a("div"),F(a0.$$.fragment),F2o=l(),Yne=a("p"),T2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),M2o=l(),wa=a("p"),E2o=o("The model class to instantiate is selected based on the "),Kne=a("code"),C2o=o("model_type"),w2o=o(` property of the config object (either
passed as an argument or loaded from `),Zne=a("code"),A2o=o("pretrained_model_name_or_path"),y2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ese=a("code"),L2o=o("pretrained_model_name_or_path"),x2o=o(":"),$2o=l(),G=a("ul"),Au=a("li"),ose=a("strong"),k2o=o("albert"),S2o=o(" \u2014 "),UI=a("a"),R2o=o("AlbertForPreTraining"),B2o=o(" (ALBERT model)"),P2o=l(),yu=a("li"),rse=a("strong"),I2o=o("bart"),q2o=o(" \u2014 "),JI=a("a"),N2o=o("BartForConditionalGeneration"),j2o=o(" (BART model)"),D2o=l(),Lu=a("li"),tse=a("strong"),G2o=o("bert"),O2o=o(" \u2014 "),YI=a("a"),V2o=o("BertForPreTraining"),X2o=o(" (BERT model)"),z2o=l(),xu=a("li"),ase=a("strong"),W2o=o("big_bird"),Q2o=o(" \u2014 "),KI=a("a"),H2o=o("BigBirdForPreTraining"),U2o=o(" (BigBird model)"),J2o=l(),$u=a("li"),nse=a("strong"),Y2o=o("camembert"),K2o=o(" \u2014 "),ZI=a("a"),Z2o=o("CamembertForMaskedLM"),ebo=o(" (CamemBERT model)"),obo=l(),ku=a("li"),sse=a("strong"),rbo=o("ctrl"),tbo=o(" \u2014 "),eq=a("a"),abo=o("CTRLLMHeadModel"),nbo=o(" (CTRL model)"),sbo=l(),Su=a("li"),lse=a("strong"),lbo=o("data2vec-text"),ibo=o(" \u2014 "),oq=a("a"),dbo=o("Data2VecTextForMaskedLM"),cbo=o(" (Data2VecText model)"),fbo=l(),Ru=a("li"),ise=a("strong"),mbo=o("deberta"),gbo=o(" \u2014 "),rq=a("a"),hbo=o("DebertaForMaskedLM"),pbo=o(" (DeBERTa model)"),ubo=l(),Bu=a("li"),dse=a("strong"),_bo=o("deberta-v2"),bbo=o(" \u2014 "),tq=a("a"),vbo=o("DebertaV2ForMaskedLM"),Fbo=o(" (DeBERTa-v2 model)"),Tbo=l(),Pu=a("li"),cse=a("strong"),Mbo=o("distilbert"),Ebo=o(" \u2014 "),aq=a("a"),Cbo=o("DistilBertForMaskedLM"),wbo=o(" (DistilBERT model)"),Abo=l(),Iu=a("li"),fse=a("strong"),ybo=o("electra"),Lbo=o(" \u2014 "),nq=a("a"),xbo=o("ElectraForPreTraining"),$bo=o(" (ELECTRA model)"),kbo=l(),qu=a("li"),mse=a("strong"),Sbo=o("flaubert"),Rbo=o(" \u2014 "),sq=a("a"),Bbo=o("FlaubertWithLMHeadModel"),Pbo=o(" (FlauBERT model)"),Ibo=l(),Nu=a("li"),gse=a("strong"),qbo=o("fnet"),Nbo=o(" \u2014 "),lq=a("a"),jbo=o("FNetForPreTraining"),Dbo=o(" (FNet model)"),Gbo=l(),ju=a("li"),hse=a("strong"),Obo=o("fsmt"),Vbo=o(" \u2014 "),iq=a("a"),Xbo=o("FSMTForConditionalGeneration"),zbo=o(" (FairSeq Machine-Translation model)"),Wbo=l(),Du=a("li"),pse=a("strong"),Qbo=o("funnel"),Hbo=o(" \u2014 "),dq=a("a"),Ubo=o("FunnelForPreTraining"),Jbo=o(" (Funnel Transformer model)"),Ybo=l(),Gu=a("li"),use=a("strong"),Kbo=o("gpt2"),Zbo=o(" \u2014 "),cq=a("a"),evo=o("GPT2LMHeadModel"),ovo=o(" (OpenAI GPT-2 model)"),rvo=l(),Ou=a("li"),_se=a("strong"),tvo=o("ibert"),avo=o(" \u2014 "),fq=a("a"),nvo=o("IBertForMaskedLM"),svo=o(" (I-BERT model)"),lvo=l(),Vu=a("li"),bse=a("strong"),ivo=o("layoutlm"),dvo=o(" \u2014 "),mq=a("a"),cvo=o("LayoutLMForMaskedLM"),fvo=o(" (LayoutLM model)"),mvo=l(),Xu=a("li"),vse=a("strong"),gvo=o("longformer"),hvo=o(" \u2014 "),gq=a("a"),pvo=o("LongformerForMaskedLM"),uvo=o(" (Longformer model)"),_vo=l(),zu=a("li"),Fse=a("strong"),bvo=o("lxmert"),vvo=o(" \u2014 "),hq=a("a"),Fvo=o("LxmertForPreTraining"),Tvo=o(" (LXMERT model)"),Mvo=l(),Wu=a("li"),Tse=a("strong"),Evo=o("megatron-bert"),Cvo=o(" \u2014 "),pq=a("a"),wvo=o("MegatronBertForPreTraining"),Avo=o(" (MegatronBert model)"),yvo=l(),Qu=a("li"),Mse=a("strong"),Lvo=o("mobilebert"),xvo=o(" \u2014 "),uq=a("a"),$vo=o("MobileBertForPreTraining"),kvo=o(" (MobileBERT model)"),Svo=l(),Hu=a("li"),Ese=a("strong"),Rvo=o("mpnet"),Bvo=o(" \u2014 "),_q=a("a"),Pvo=o("MPNetForMaskedLM"),Ivo=o(" (MPNet model)"),qvo=l(),Uu=a("li"),Cse=a("strong"),Nvo=o("openai-gpt"),jvo=o(" \u2014 "),bq=a("a"),Dvo=o("OpenAIGPTLMHeadModel"),Gvo=o(" (OpenAI GPT model)"),Ovo=l(),Ju=a("li"),wse=a("strong"),Vvo=o("retribert"),Xvo=o(" \u2014 "),vq=a("a"),zvo=o("RetriBertModel"),Wvo=o(" (RetriBERT model)"),Qvo=l(),Yu=a("li"),Ase=a("strong"),Hvo=o("roberta"),Uvo=o(" \u2014 "),Fq=a("a"),Jvo=o("RobertaForMaskedLM"),Yvo=o(" (RoBERTa model)"),Kvo=l(),Ku=a("li"),yse=a("strong"),Zvo=o("squeezebert"),eFo=o(" \u2014 "),Tq=a("a"),oFo=o("SqueezeBertForMaskedLM"),rFo=o(" (SqueezeBERT model)"),tFo=l(),Zu=a("li"),Lse=a("strong"),aFo=o("t5"),nFo=o(" \u2014 "),Mq=a("a"),sFo=o("T5ForConditionalGeneration"),lFo=o(" (T5 model)"),iFo=l(),e_=a("li"),xse=a("strong"),dFo=o("tapas"),cFo=o(" \u2014 "),Eq=a("a"),fFo=o("TapasForMaskedLM"),mFo=o(" (TAPAS model)"),gFo=l(),o_=a("li"),$se=a("strong"),hFo=o("transfo-xl"),pFo=o(" \u2014 "),Cq=a("a"),uFo=o("TransfoXLLMHeadModel"),_Fo=o(" (Transformer-XL model)"),bFo=l(),r_=a("li"),kse=a("strong"),vFo=o("unispeech"),FFo=o(" \u2014 "),wq=a("a"),TFo=o("UniSpeechForPreTraining"),MFo=o(" (UniSpeech model)"),EFo=l(),t_=a("li"),Sse=a("strong"),CFo=o("unispeech-sat"),wFo=o(" \u2014 "),Aq=a("a"),AFo=o("UniSpeechSatForPreTraining"),yFo=o(" (UniSpeechSat model)"),LFo=l(),a_=a("li"),Rse=a("strong"),xFo=o("visual_bert"),$Fo=o(" \u2014 "),yq=a("a"),kFo=o("VisualBertForPreTraining"),SFo=o(" (VisualBert model)"),RFo=l(),n_=a("li"),Bse=a("strong"),BFo=o("vit_mae"),PFo=o(" \u2014 "),Lq=a("a"),IFo=o("ViTMAEForPreTraining"),qFo=o(" (ViTMAE model)"),NFo=l(),s_=a("li"),Pse=a("strong"),jFo=o("wav2vec2"),DFo=o(" \u2014 "),xq=a("a"),GFo=o("Wav2Vec2ForPreTraining"),OFo=o(" (Wav2Vec2 model)"),VFo=l(),l_=a("li"),Ise=a("strong"),XFo=o("wav2vec2-conformer"),zFo=o(" \u2014 "),$q=a("a"),WFo=o("Wav2Vec2ConformerForPreTraining"),QFo=o(" (Wav2Vec2ConformerConformer model)"),HFo=l(),i_=a("li"),qse=a("strong"),UFo=o("xlm"),JFo=o(" \u2014 "),kq=a("a"),YFo=o("XLMWithLMHeadModel"),KFo=o(" (XLM model)"),ZFo=l(),d_=a("li"),Nse=a("strong"),e6o=o("xlm-roberta"),o6o=o(" \u2014 "),Sq=a("a"),r6o=o("XLMRobertaForMaskedLM"),t6o=o(" (XLM-RoBERTa model)"),a6o=l(),c_=a("li"),jse=a("strong"),n6o=o("xlm-roberta-xl"),s6o=o(" \u2014 "),Rq=a("a"),l6o=o("XLMRobertaXLForMaskedLM"),i6o=o(" (XLM-RoBERTa-XL model)"),d6o=l(),f_=a("li"),Dse=a("strong"),c6o=o("xlnet"),f6o=o(" \u2014 "),Bq=a("a"),m6o=o("XLNetLMHeadModel"),g6o=o(" (XLNet model)"),h6o=l(),m_=a("p"),p6o=o("The model is set in evaluation mode by default using "),Gse=a("code"),u6o=o("model.eval()"),_6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=a("code"),b6o=o("model.train()"),v6o=l(),F(g_.$$.fragment),$Be=l(),Ei=a("h2"),h_=a("a"),Vse=a("span"),F(n0.$$.fragment),F6o=l(),Xse=a("span"),T6o=o("AutoModelForCausalLM"),kBe=l(),Lo=a("div"),F(s0.$$.fragment),M6o=l(),Ci=a("p"),E6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pq=a("a"),C6o=o("from_pretrained()"),w6o=o(" class method or the "),Iq=a("a"),A6o=o("from_config()"),y6o=o(` class
method.`),L6o=l(),l0=a("p"),x6o=o("This class cannot be instantiated directly using "),zse=a("code"),$6o=o("__init__()"),k6o=o(" (throws an error)."),S6o=l(),rt=a("div"),F(i0.$$.fragment),R6o=l(),Wse=a("p"),B6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),P6o=l(),wi=a("p"),I6o=o(`Note:
Loading a model from its configuration file does `),Qse=a("strong"),q6o=o("not"),N6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qq=a("a"),j6o=o("from_pretrained()"),D6o=o(" to load the model weights."),G6o=l(),F(p_.$$.fragment),O6o=l(),Je=a("div"),F(d0.$$.fragment),V6o=l(),Hse=a("p"),X6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),z6o=l(),Aa=a("p"),W6o=o("The model class to instantiate is selected based on the "),Use=a("code"),Q6o=o("model_type"),H6o=o(` property of the config object (either
passed as an argument or loaded from `),Jse=a("code"),U6o=o("pretrained_model_name_or_path"),J6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=a("code"),Y6o=o("pretrained_model_name_or_path"),K6o=o(":"),Z6o=l(),z=a("ul"),u_=a("li"),Kse=a("strong"),eTo=o("bart"),oTo=o(" \u2014 "),Nq=a("a"),rTo=o("BartForCausalLM"),tTo=o(" (BART model)"),aTo=l(),__=a("li"),Zse=a("strong"),nTo=o("bert"),sTo=o(" \u2014 "),jq=a("a"),lTo=o("BertLMHeadModel"),iTo=o(" (BERT model)"),dTo=l(),b_=a("li"),ele=a("strong"),cTo=o("bert-generation"),fTo=o(" \u2014 "),Dq=a("a"),mTo=o("BertGenerationDecoder"),gTo=o(" (Bert Generation model)"),hTo=l(),v_=a("li"),ole=a("strong"),pTo=o("big_bird"),uTo=o(" \u2014 "),Gq=a("a"),_To=o("BigBirdForCausalLM"),bTo=o(" (BigBird model)"),vTo=l(),F_=a("li"),rle=a("strong"),FTo=o("bigbird_pegasus"),TTo=o(" \u2014 "),Oq=a("a"),MTo=o("BigBirdPegasusForCausalLM"),ETo=o(" (BigBirdPegasus model)"),CTo=l(),T_=a("li"),tle=a("strong"),wTo=o("blenderbot"),ATo=o(" \u2014 "),Vq=a("a"),yTo=o("BlenderbotForCausalLM"),LTo=o(" (Blenderbot model)"),xTo=l(),M_=a("li"),ale=a("strong"),$To=o("blenderbot-small"),kTo=o(" \u2014 "),Xq=a("a"),STo=o("BlenderbotSmallForCausalLM"),RTo=o(" (BlenderbotSmall model)"),BTo=l(),E_=a("li"),nle=a("strong"),PTo=o("camembert"),ITo=o(" \u2014 "),zq=a("a"),qTo=o("CamembertForCausalLM"),NTo=o(" (CamemBERT model)"),jTo=l(),C_=a("li"),sle=a("strong"),DTo=o("ctrl"),GTo=o(" \u2014 "),Wq=a("a"),OTo=o("CTRLLMHeadModel"),VTo=o(" (CTRL model)"),XTo=l(),w_=a("li"),lle=a("strong"),zTo=o("data2vec-text"),WTo=o(" \u2014 "),Qq=a("a"),QTo=o("Data2VecTextForCausalLM"),HTo=o(" (Data2VecText model)"),UTo=l(),A_=a("li"),ile=a("strong"),JTo=o("electra"),YTo=o(" \u2014 "),Hq=a("a"),KTo=o("ElectraForCausalLM"),ZTo=o(" (ELECTRA model)"),e8o=l(),y_=a("li"),dle=a("strong"),o8o=o("gpt2"),r8o=o(" \u2014 "),Uq=a("a"),t8o=o("GPT2LMHeadModel"),a8o=o(" (OpenAI GPT-2 model)"),n8o=l(),L_=a("li"),cle=a("strong"),s8o=o("gpt_neo"),l8o=o(" \u2014 "),Jq=a("a"),i8o=o("GPTNeoForCausalLM"),d8o=o(" (GPT Neo model)"),c8o=l(),x_=a("li"),fle=a("strong"),f8o=o("gptj"),m8o=o(" \u2014 "),Yq=a("a"),g8o=o("GPTJForCausalLM"),h8o=o(" (GPT-J model)"),p8o=l(),$_=a("li"),mle=a("strong"),u8o=o("marian"),_8o=o(" \u2014 "),Kq=a("a"),b8o=o("MarianForCausalLM"),v8o=o(" (Marian model)"),F8o=l(),k_=a("li"),gle=a("strong"),T8o=o("mbart"),M8o=o(" \u2014 "),Zq=a("a"),E8o=o("MBartForCausalLM"),C8o=o(" (mBART model)"),w8o=l(),S_=a("li"),hle=a("strong"),A8o=o("megatron-bert"),y8o=o(" \u2014 "),eN=a("a"),L8o=o("MegatronBertForCausalLM"),x8o=o(" (MegatronBert model)"),$8o=l(),R_=a("li"),ple=a("strong"),k8o=o("openai-gpt"),S8o=o(" \u2014 "),oN=a("a"),R8o=o("OpenAIGPTLMHeadModel"),B8o=o(" (OpenAI GPT model)"),P8o=l(),B_=a("li"),ule=a("strong"),I8o=o("pegasus"),q8o=o(" \u2014 "),rN=a("a"),N8o=o("PegasusForCausalLM"),j8o=o(" (Pegasus model)"),D8o=l(),P_=a("li"),_le=a("strong"),G8o=o("plbart"),O8o=o(" \u2014 "),tN=a("a"),V8o=o("PLBartForCausalLM"),X8o=o(" (PLBart model)"),z8o=l(),I_=a("li"),ble=a("strong"),W8o=o("prophetnet"),Q8o=o(" \u2014 "),aN=a("a"),H8o=o("ProphetNetForCausalLM"),U8o=o(" (ProphetNet model)"),J8o=l(),q_=a("li"),vle=a("strong"),Y8o=o("qdqbert"),K8o=o(" \u2014 "),nN=a("a"),Z8o=o("QDQBertLMHeadModel"),eMo=o(" (QDQBert model)"),oMo=l(),N_=a("li"),Fle=a("strong"),rMo=o("reformer"),tMo=o(" \u2014 "),sN=a("a"),aMo=o("ReformerModelWithLMHead"),nMo=o(" (Reformer model)"),sMo=l(),j_=a("li"),Tle=a("strong"),lMo=o("rembert"),iMo=o(" \u2014 "),lN=a("a"),dMo=o("RemBertForCausalLM"),cMo=o(" (RemBERT model)"),fMo=l(),D_=a("li"),Mle=a("strong"),mMo=o("roberta"),gMo=o(" \u2014 "),iN=a("a"),hMo=o("RobertaForCausalLM"),pMo=o(" (RoBERTa model)"),uMo=l(),G_=a("li"),Ele=a("strong"),_Mo=o("roformer"),bMo=o(" \u2014 "),dN=a("a"),vMo=o("RoFormerForCausalLM"),FMo=o(" (RoFormer model)"),TMo=l(),O_=a("li"),Cle=a("strong"),MMo=o("speech_to_text_2"),EMo=o(" \u2014 "),cN=a("a"),CMo=o("Speech2Text2ForCausalLM"),wMo=o(" (Speech2Text2 model)"),AMo=l(),V_=a("li"),wle=a("strong"),yMo=o("transfo-xl"),LMo=o(" \u2014 "),fN=a("a"),xMo=o("TransfoXLLMHeadModel"),$Mo=o(" (Transformer-XL model)"),kMo=l(),X_=a("li"),Ale=a("strong"),SMo=o("trocr"),RMo=o(" \u2014 "),mN=a("a"),BMo=o("TrOCRForCausalLM"),PMo=o(" (TrOCR model)"),IMo=l(),z_=a("li"),yle=a("strong"),qMo=o("xglm"),NMo=o(" \u2014 "),gN=a("a"),jMo=o("XGLMForCausalLM"),DMo=o(" (XGLM model)"),GMo=l(),W_=a("li"),Lle=a("strong"),OMo=o("xlm"),VMo=o(" \u2014 "),hN=a("a"),XMo=o("XLMWithLMHeadModel"),zMo=o(" (XLM model)"),WMo=l(),Q_=a("li"),xle=a("strong"),QMo=o("xlm-prophetnet"),HMo=o(" \u2014 "),pN=a("a"),UMo=o("XLMProphetNetForCausalLM"),JMo=o(" (XLMProphetNet model)"),YMo=l(),H_=a("li"),$le=a("strong"),KMo=o("xlm-roberta"),ZMo=o(" \u2014 "),uN=a("a"),e4o=o("XLMRobertaForCausalLM"),o4o=o(" (XLM-RoBERTa model)"),r4o=l(),U_=a("li"),kle=a("strong"),t4o=o("xlm-roberta-xl"),a4o=o(" \u2014 "),_N=a("a"),n4o=o("XLMRobertaXLForCausalLM"),s4o=o(" (XLM-RoBERTa-XL model)"),l4o=l(),J_=a("li"),Sle=a("strong"),i4o=o("xlnet"),d4o=o(" \u2014 "),bN=a("a"),c4o=o("XLNetLMHeadModel"),f4o=o(" (XLNet model)"),m4o=l(),Y_=a("p"),g4o=o("The model is set in evaluation mode by default using "),Rle=a("code"),h4o=o("model.eval()"),p4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),u4o=o("model.train()"),_4o=l(),F(K_.$$.fragment),SBe=l(),Ai=a("h2"),Z_=a("a"),Ple=a("span"),F(c0.$$.fragment),b4o=l(),Ile=a("span"),v4o=o("AutoModelForMaskedLM"),RBe=l(),xo=a("div"),F(f0.$$.fragment),F4o=l(),yi=a("p"),T4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vN=a("a"),M4o=o("from_pretrained()"),E4o=o(" class method or the "),FN=a("a"),C4o=o("from_config()"),w4o=o(` class
method.`),A4o=l(),m0=a("p"),y4o=o("This class cannot be instantiated directly using "),qle=a("code"),L4o=o("__init__()"),x4o=o(" (throws an error)."),$4o=l(),tt=a("div"),F(g0.$$.fragment),k4o=l(),Nle=a("p"),S4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R4o=l(),Li=a("p"),B4o=o(`Note:
Loading a model from its configuration file does `),jle=a("strong"),P4o=o("not"),I4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=a("a"),q4o=o("from_pretrained()"),N4o=o(" to load the model weights."),j4o=l(),F(e1.$$.fragment),D4o=l(),Ye=a("div"),F(h0.$$.fragment),G4o=l(),Dle=a("p"),O4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V4o=l(),ya=a("p"),X4o=o("The model class to instantiate is selected based on the "),Gle=a("code"),z4o=o("model_type"),W4o=o(` property of the config object (either
passed as an argument or loaded from `),Ole=a("code"),Q4o=o("pretrained_model_name_or_path"),H4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vle=a("code"),U4o=o("pretrained_model_name_or_path"),J4o=o(":"),Y4o=l(),W=a("ul"),o1=a("li"),Xle=a("strong"),K4o=o("albert"),Z4o=o(" \u2014 "),MN=a("a"),eEo=o("AlbertForMaskedLM"),oEo=o(" (ALBERT model)"),rEo=l(),r1=a("li"),zle=a("strong"),tEo=o("bart"),aEo=o(" \u2014 "),EN=a("a"),nEo=o("BartForConditionalGeneration"),sEo=o(" (BART model)"),lEo=l(),t1=a("li"),Wle=a("strong"),iEo=o("bert"),dEo=o(" \u2014 "),CN=a("a"),cEo=o("BertForMaskedLM"),fEo=o(" (BERT model)"),mEo=l(),a1=a("li"),Qle=a("strong"),gEo=o("big_bird"),hEo=o(" \u2014 "),wN=a("a"),pEo=o("BigBirdForMaskedLM"),uEo=o(" (BigBird model)"),_Eo=l(),n1=a("li"),Hle=a("strong"),bEo=o("camembert"),vEo=o(" \u2014 "),AN=a("a"),FEo=o("CamembertForMaskedLM"),TEo=o(" (CamemBERT model)"),MEo=l(),s1=a("li"),Ule=a("strong"),EEo=o("convbert"),CEo=o(" \u2014 "),yN=a("a"),wEo=o("ConvBertForMaskedLM"),AEo=o(" (ConvBERT model)"),yEo=l(),l1=a("li"),Jle=a("strong"),LEo=o("data2vec-text"),xEo=o(" \u2014 "),LN=a("a"),$Eo=o("Data2VecTextForMaskedLM"),kEo=o(" (Data2VecText model)"),SEo=l(),i1=a("li"),Yle=a("strong"),REo=o("deberta"),BEo=o(" \u2014 "),xN=a("a"),PEo=o("DebertaForMaskedLM"),IEo=o(" (DeBERTa model)"),qEo=l(),d1=a("li"),Kle=a("strong"),NEo=o("deberta-v2"),jEo=o(" \u2014 "),$N=a("a"),DEo=o("DebertaV2ForMaskedLM"),GEo=o(" (DeBERTa-v2 model)"),OEo=l(),c1=a("li"),Zle=a("strong"),VEo=o("distilbert"),XEo=o(" \u2014 "),kN=a("a"),zEo=o("DistilBertForMaskedLM"),WEo=o(" (DistilBERT model)"),QEo=l(),f1=a("li"),eie=a("strong"),HEo=o("electra"),UEo=o(" \u2014 "),SN=a("a"),JEo=o("ElectraForMaskedLM"),YEo=o(" (ELECTRA model)"),KEo=l(),m1=a("li"),oie=a("strong"),ZEo=o("flaubert"),eCo=o(" \u2014 "),RN=a("a"),oCo=o("FlaubertWithLMHeadModel"),rCo=o(" (FlauBERT model)"),tCo=l(),g1=a("li"),rie=a("strong"),aCo=o("fnet"),nCo=o(" \u2014 "),BN=a("a"),sCo=o("FNetForMaskedLM"),lCo=o(" (FNet model)"),iCo=l(),h1=a("li"),tie=a("strong"),dCo=o("funnel"),cCo=o(" \u2014 "),PN=a("a"),fCo=o("FunnelForMaskedLM"),mCo=o(" (Funnel Transformer model)"),gCo=l(),p1=a("li"),aie=a("strong"),hCo=o("ibert"),pCo=o(" \u2014 "),IN=a("a"),uCo=o("IBertForMaskedLM"),_Co=o(" (I-BERT model)"),bCo=l(),u1=a("li"),nie=a("strong"),vCo=o("layoutlm"),FCo=o(" \u2014 "),qN=a("a"),TCo=o("LayoutLMForMaskedLM"),MCo=o(" (LayoutLM model)"),ECo=l(),_1=a("li"),sie=a("strong"),CCo=o("longformer"),wCo=o(" \u2014 "),NN=a("a"),ACo=o("LongformerForMaskedLM"),yCo=o(" (Longformer model)"),LCo=l(),b1=a("li"),lie=a("strong"),xCo=o("mbart"),$Co=o(" \u2014 "),jN=a("a"),kCo=o("MBartForConditionalGeneration"),SCo=o(" (mBART model)"),RCo=l(),v1=a("li"),iie=a("strong"),BCo=o("megatron-bert"),PCo=o(" \u2014 "),DN=a("a"),ICo=o("MegatronBertForMaskedLM"),qCo=o(" (MegatronBert model)"),NCo=l(),F1=a("li"),die=a("strong"),jCo=o("mobilebert"),DCo=o(" \u2014 "),GN=a("a"),GCo=o("MobileBertForMaskedLM"),OCo=o(" (MobileBERT model)"),VCo=l(),T1=a("li"),cie=a("strong"),XCo=o("mpnet"),zCo=o(" \u2014 "),ON=a("a"),WCo=o("MPNetForMaskedLM"),QCo=o(" (MPNet model)"),HCo=l(),M1=a("li"),fie=a("strong"),UCo=o("nystromformer"),JCo=o(" \u2014 "),VN=a("a"),YCo=o("NystromformerForMaskedLM"),KCo=o(" (Nystromformer model)"),ZCo=l(),E1=a("li"),mie=a("strong"),e5o=o("perceiver"),o5o=o(" \u2014 "),XN=a("a"),r5o=o("PerceiverForMaskedLM"),t5o=o(" (Perceiver model)"),a5o=l(),C1=a("li"),gie=a("strong"),n5o=o("qdqbert"),s5o=o(" \u2014 "),zN=a("a"),l5o=o("QDQBertForMaskedLM"),i5o=o(" (QDQBert model)"),d5o=l(),w1=a("li"),hie=a("strong"),c5o=o("reformer"),f5o=o(" \u2014 "),WN=a("a"),m5o=o("ReformerForMaskedLM"),g5o=o(" (Reformer model)"),h5o=l(),A1=a("li"),pie=a("strong"),p5o=o("rembert"),u5o=o(" \u2014 "),QN=a("a"),_5o=o("RemBertForMaskedLM"),b5o=o(" (RemBERT model)"),v5o=l(),y1=a("li"),uie=a("strong"),F5o=o("roberta"),T5o=o(" \u2014 "),HN=a("a"),M5o=o("RobertaForMaskedLM"),E5o=o(" (RoBERTa model)"),C5o=l(),L1=a("li"),_ie=a("strong"),w5o=o("roformer"),A5o=o(" \u2014 "),UN=a("a"),y5o=o("RoFormerForMaskedLM"),L5o=o(" (RoFormer model)"),x5o=l(),x1=a("li"),bie=a("strong"),$5o=o("squeezebert"),k5o=o(" \u2014 "),JN=a("a"),S5o=o("SqueezeBertForMaskedLM"),R5o=o(" (SqueezeBERT model)"),B5o=l(),$1=a("li"),vie=a("strong"),P5o=o("tapas"),I5o=o(" \u2014 "),YN=a("a"),q5o=o("TapasForMaskedLM"),N5o=o(" (TAPAS model)"),j5o=l(),k1=a("li"),Fie=a("strong"),D5o=o("wav2vec2"),G5o=o(" \u2014 "),Tie=a("code"),O5o=o("Wav2Vec2ForMaskedLM"),V5o=o(" (Wav2Vec2 model)"),X5o=l(),S1=a("li"),Mie=a("strong"),z5o=o("xlm"),W5o=o(" \u2014 "),KN=a("a"),Q5o=o("XLMWithLMHeadModel"),H5o=o(" (XLM model)"),U5o=l(),R1=a("li"),Eie=a("strong"),J5o=o("xlm-roberta"),Y5o=o(" \u2014 "),ZN=a("a"),K5o=o("XLMRobertaForMaskedLM"),Z5o=o(" (XLM-RoBERTa model)"),e3o=l(),B1=a("li"),Cie=a("strong"),o3o=o("xlm-roberta-xl"),r3o=o(" \u2014 "),ej=a("a"),t3o=o("XLMRobertaXLForMaskedLM"),a3o=o(" (XLM-RoBERTa-XL model)"),n3o=l(),P1=a("li"),wie=a("strong"),s3o=o("yoso"),l3o=o(" \u2014 "),oj=a("a"),i3o=o("YosoForMaskedLM"),d3o=o(" (YOSO model)"),c3o=l(),I1=a("p"),f3o=o("The model is set in evaluation mode by default using "),Aie=a("code"),m3o=o("model.eval()"),g3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=a("code"),h3o=o("model.train()"),p3o=l(),F(q1.$$.fragment),BBe=l(),xi=a("h2"),N1=a("a"),Lie=a("span"),F(p0.$$.fragment),u3o=l(),xie=a("span"),_3o=o("AutoModelForSeq2SeqLM"),PBe=l(),$o=a("div"),F(u0.$$.fragment),b3o=l(),$i=a("p"),v3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rj=a("a"),F3o=o("from_pretrained()"),T3o=o(" class method or the "),tj=a("a"),M3o=o("from_config()"),E3o=o(` class
method.`),C3o=l(),_0=a("p"),w3o=o("This class cannot be instantiated directly using "),$ie=a("code"),A3o=o("__init__()"),y3o=o(" (throws an error)."),L3o=l(),at=a("div"),F(b0.$$.fragment),x3o=l(),kie=a("p"),$3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),k3o=l(),ki=a("p"),S3o=o(`Note:
Loading a model from its configuration file does `),Sie=a("strong"),R3o=o("not"),B3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=a("a"),P3o=o("from_pretrained()"),I3o=o(" to load the model weights."),q3o=l(),F(j1.$$.fragment),N3o=l(),Ke=a("div"),F(v0.$$.fragment),j3o=l(),Rie=a("p"),D3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),G3o=l(),La=a("p"),O3o=o("The model class to instantiate is selected based on the "),Bie=a("code"),V3o=o("model_type"),X3o=o(` property of the config object (either
passed as an argument or loaded from `),Pie=a("code"),z3o=o("pretrained_model_name_or_path"),W3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=a("code"),Q3o=o("pretrained_model_name_or_path"),H3o=o(":"),U3o=l(),he=a("ul"),D1=a("li"),qie=a("strong"),J3o=o("bart"),Y3o=o(" \u2014 "),nj=a("a"),K3o=o("BartForConditionalGeneration"),Z3o=o(" (BART model)"),ewo=l(),G1=a("li"),Nie=a("strong"),owo=o("bigbird_pegasus"),rwo=o(" \u2014 "),sj=a("a"),two=o("BigBirdPegasusForConditionalGeneration"),awo=o(" (BigBirdPegasus model)"),nwo=l(),O1=a("li"),jie=a("strong"),swo=o("blenderbot"),lwo=o(" \u2014 "),lj=a("a"),iwo=o("BlenderbotForConditionalGeneration"),dwo=o(" (Blenderbot model)"),cwo=l(),V1=a("li"),Die=a("strong"),fwo=o("blenderbot-small"),mwo=o(" \u2014 "),ij=a("a"),gwo=o("BlenderbotSmallForConditionalGeneration"),hwo=o(" (BlenderbotSmall model)"),pwo=l(),X1=a("li"),Gie=a("strong"),uwo=o("encoder-decoder"),_wo=o(" \u2014 "),dj=a("a"),bwo=o("EncoderDecoderModel"),vwo=o(" (Encoder decoder model)"),Fwo=l(),z1=a("li"),Oie=a("strong"),Two=o("fsmt"),Mwo=o(" \u2014 "),cj=a("a"),Ewo=o("FSMTForConditionalGeneration"),Cwo=o(" (FairSeq Machine-Translation model)"),wwo=l(),W1=a("li"),Vie=a("strong"),Awo=o("led"),ywo=o(" \u2014 "),fj=a("a"),Lwo=o("LEDForConditionalGeneration"),xwo=o(" (LED model)"),$wo=l(),Q1=a("li"),Xie=a("strong"),kwo=o("m2m_100"),Swo=o(" \u2014 "),mj=a("a"),Rwo=o("M2M100ForConditionalGeneration"),Bwo=o(" (M2M100 model)"),Pwo=l(),H1=a("li"),zie=a("strong"),Iwo=o("marian"),qwo=o(" \u2014 "),gj=a("a"),Nwo=o("MarianMTModel"),jwo=o(" (Marian model)"),Dwo=l(),U1=a("li"),Wie=a("strong"),Gwo=o("mbart"),Owo=o(" \u2014 "),hj=a("a"),Vwo=o("MBartForConditionalGeneration"),Xwo=o(" (mBART model)"),zwo=l(),J1=a("li"),Qie=a("strong"),Wwo=o("mt5"),Qwo=o(" \u2014 "),pj=a("a"),Hwo=o("MT5ForConditionalGeneration"),Uwo=o(" (mT5 model)"),Jwo=l(),Y1=a("li"),Hie=a("strong"),Ywo=o("pegasus"),Kwo=o(" \u2014 "),uj=a("a"),Zwo=o("PegasusForConditionalGeneration"),eAo=o(" (Pegasus model)"),oAo=l(),K1=a("li"),Uie=a("strong"),rAo=o("plbart"),tAo=o(" \u2014 "),_j=a("a"),aAo=o("PLBartForConditionalGeneration"),nAo=o(" (PLBart model)"),sAo=l(),Z1=a("li"),Jie=a("strong"),lAo=o("prophetnet"),iAo=o(" \u2014 "),bj=a("a"),dAo=o("ProphetNetForConditionalGeneration"),cAo=o(" (ProphetNet model)"),fAo=l(),e2=a("li"),Yie=a("strong"),mAo=o("t5"),gAo=o(" \u2014 "),vj=a("a"),hAo=o("T5ForConditionalGeneration"),pAo=o(" (T5 model)"),uAo=l(),o2=a("li"),Kie=a("strong"),_Ao=o("tapex"),bAo=o(" \u2014 "),Fj=a("a"),vAo=o("BartForConditionalGeneration"),FAo=o(" (TAPEX model)"),TAo=l(),r2=a("li"),Zie=a("strong"),MAo=o("xlm-prophetnet"),EAo=o(" \u2014 "),Tj=a("a"),CAo=o("XLMProphetNetForConditionalGeneration"),wAo=o(" (XLMProphetNet model)"),AAo=l(),t2=a("p"),yAo=o("The model is set in evaluation mode by default using "),ede=a("code"),LAo=o("model.eval()"),xAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=a("code"),$Ao=o("model.train()"),kAo=l(),F(a2.$$.fragment),IBe=l(),Si=a("h2"),n2=a("a"),rde=a("span"),F(F0.$$.fragment),SAo=l(),tde=a("span"),RAo=o("AutoModelForSequenceClassification"),qBe=l(),ko=a("div"),F(T0.$$.fragment),BAo=l(),Ri=a("p"),PAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Mj=a("a"),IAo=o("from_pretrained()"),qAo=o(" class method or the "),Ej=a("a"),NAo=o("from_config()"),jAo=o(` class
method.`),DAo=l(),M0=a("p"),GAo=o("This class cannot be instantiated directly using "),ade=a("code"),OAo=o("__init__()"),VAo=o(" (throws an error)."),XAo=l(),nt=a("div"),F(E0.$$.fragment),zAo=l(),nde=a("p"),WAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QAo=l(),Bi=a("p"),HAo=o(`Note:
Loading a model from its configuration file does `),sde=a("strong"),UAo=o("not"),JAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),YAo=o("from_pretrained()"),KAo=o(" to load the model weights."),ZAo=l(),F(s2.$$.fragment),e0o=l(),Ze=a("div"),F(C0.$$.fragment),o0o=l(),lde=a("p"),r0o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t0o=l(),xa=a("p"),a0o=o("The model class to instantiate is selected based on the "),ide=a("code"),n0o=o("model_type"),s0o=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),l0o=o("pretrained_model_name_or_path"),i0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),d0o=o("pretrained_model_name_or_path"),c0o=o(":"),f0o=l(),q=a("ul"),l2=a("li"),fde=a("strong"),m0o=o("albert"),g0o=o(" \u2014 "),wj=a("a"),h0o=o("AlbertForSequenceClassification"),p0o=o(" (ALBERT model)"),u0o=l(),i2=a("li"),mde=a("strong"),_0o=o("bart"),b0o=o(" \u2014 "),Aj=a("a"),v0o=o("BartForSequenceClassification"),F0o=o(" (BART model)"),T0o=l(),d2=a("li"),gde=a("strong"),M0o=o("bert"),E0o=o(" \u2014 "),yj=a("a"),C0o=o("BertForSequenceClassification"),w0o=o(" (BERT model)"),A0o=l(),c2=a("li"),hde=a("strong"),y0o=o("big_bird"),L0o=o(" \u2014 "),Lj=a("a"),x0o=o("BigBirdForSequenceClassification"),$0o=o(" (BigBird model)"),k0o=l(),f2=a("li"),pde=a("strong"),S0o=o("bigbird_pegasus"),R0o=o(" \u2014 "),xj=a("a"),B0o=o("BigBirdPegasusForSequenceClassification"),P0o=o(" (BigBirdPegasus model)"),I0o=l(),m2=a("li"),ude=a("strong"),q0o=o("camembert"),N0o=o(" \u2014 "),$j=a("a"),j0o=o("CamembertForSequenceClassification"),D0o=o(" (CamemBERT model)"),G0o=l(),g2=a("li"),_de=a("strong"),O0o=o("canine"),V0o=o(" \u2014 "),kj=a("a"),X0o=o("CanineForSequenceClassification"),z0o=o(" (Canine model)"),W0o=l(),h2=a("li"),bde=a("strong"),Q0o=o("convbert"),H0o=o(" \u2014 "),Sj=a("a"),U0o=o("ConvBertForSequenceClassification"),J0o=o(" (ConvBERT model)"),Y0o=l(),p2=a("li"),vde=a("strong"),K0o=o("ctrl"),Z0o=o(" \u2014 "),Rj=a("a"),eyo=o("CTRLForSequenceClassification"),oyo=o(" (CTRL model)"),ryo=l(),u2=a("li"),Fde=a("strong"),tyo=o("data2vec-text"),ayo=o(" \u2014 "),Bj=a("a"),nyo=o("Data2VecTextForSequenceClassification"),syo=o(" (Data2VecText model)"),lyo=l(),_2=a("li"),Tde=a("strong"),iyo=o("deberta"),dyo=o(" \u2014 "),Pj=a("a"),cyo=o("DebertaForSequenceClassification"),fyo=o(" (DeBERTa model)"),myo=l(),b2=a("li"),Mde=a("strong"),gyo=o("deberta-v2"),hyo=o(" \u2014 "),Ij=a("a"),pyo=o("DebertaV2ForSequenceClassification"),uyo=o(" (DeBERTa-v2 model)"),_yo=l(),v2=a("li"),Ede=a("strong"),byo=o("distilbert"),vyo=o(" \u2014 "),qj=a("a"),Fyo=o("DistilBertForSequenceClassification"),Tyo=o(" (DistilBERT model)"),Myo=l(),F2=a("li"),Cde=a("strong"),Eyo=o("electra"),Cyo=o(" \u2014 "),Nj=a("a"),wyo=o("ElectraForSequenceClassification"),Ayo=o(" (ELECTRA model)"),yyo=l(),T2=a("li"),wde=a("strong"),Lyo=o("flaubert"),xyo=o(" \u2014 "),jj=a("a"),$yo=o("FlaubertForSequenceClassification"),kyo=o(" (FlauBERT model)"),Syo=l(),M2=a("li"),Ade=a("strong"),Ryo=o("fnet"),Byo=o(" \u2014 "),Dj=a("a"),Pyo=o("FNetForSequenceClassification"),Iyo=o(" (FNet model)"),qyo=l(),E2=a("li"),yde=a("strong"),Nyo=o("funnel"),jyo=o(" \u2014 "),Gj=a("a"),Dyo=o("FunnelForSequenceClassification"),Gyo=o(" (Funnel Transformer model)"),Oyo=l(),C2=a("li"),Lde=a("strong"),Vyo=o("gpt2"),Xyo=o(" \u2014 "),Oj=a("a"),zyo=o("GPT2ForSequenceClassification"),Wyo=o(" (OpenAI GPT-2 model)"),Qyo=l(),w2=a("li"),xde=a("strong"),Hyo=o("gpt_neo"),Uyo=o(" \u2014 "),Vj=a("a"),Jyo=o("GPTNeoForSequenceClassification"),Yyo=o(" (GPT Neo model)"),Kyo=l(),A2=a("li"),$de=a("strong"),Zyo=o("gptj"),eLo=o(" \u2014 "),Xj=a("a"),oLo=o("GPTJForSequenceClassification"),rLo=o(" (GPT-J model)"),tLo=l(),y2=a("li"),kde=a("strong"),aLo=o("ibert"),nLo=o(" \u2014 "),zj=a("a"),sLo=o("IBertForSequenceClassification"),lLo=o(" (I-BERT model)"),iLo=l(),L2=a("li"),Sde=a("strong"),dLo=o("layoutlm"),cLo=o(" \u2014 "),Wj=a("a"),fLo=o("LayoutLMForSequenceClassification"),mLo=o(" (LayoutLM model)"),gLo=l(),x2=a("li"),Rde=a("strong"),hLo=o("layoutlmv2"),pLo=o(" \u2014 "),Qj=a("a"),uLo=o("LayoutLMv2ForSequenceClassification"),_Lo=o(" (LayoutLMv2 model)"),bLo=l(),$2=a("li"),Bde=a("strong"),vLo=o("led"),FLo=o(" \u2014 "),Hj=a("a"),TLo=o("LEDForSequenceClassification"),MLo=o(" (LED model)"),ELo=l(),k2=a("li"),Pde=a("strong"),CLo=o("longformer"),wLo=o(" \u2014 "),Uj=a("a"),ALo=o("LongformerForSequenceClassification"),yLo=o(" (Longformer model)"),LLo=l(),S2=a("li"),Ide=a("strong"),xLo=o("mbart"),$Lo=o(" \u2014 "),Jj=a("a"),kLo=o("MBartForSequenceClassification"),SLo=o(" (mBART model)"),RLo=l(),R2=a("li"),qde=a("strong"),BLo=o("megatron-bert"),PLo=o(" \u2014 "),Yj=a("a"),ILo=o("MegatronBertForSequenceClassification"),qLo=o(" (MegatronBert model)"),NLo=l(),B2=a("li"),Nde=a("strong"),jLo=o("mobilebert"),DLo=o(" \u2014 "),Kj=a("a"),GLo=o("MobileBertForSequenceClassification"),OLo=o(" (MobileBERT model)"),VLo=l(),P2=a("li"),jde=a("strong"),XLo=o("mpnet"),zLo=o(" \u2014 "),Zj=a("a"),WLo=o("MPNetForSequenceClassification"),QLo=o(" (MPNet model)"),HLo=l(),I2=a("li"),Dde=a("strong"),ULo=o("nystromformer"),JLo=o(" \u2014 "),eD=a("a"),YLo=o("NystromformerForSequenceClassification"),KLo=o(" (Nystromformer model)"),ZLo=l(),q2=a("li"),Gde=a("strong"),e7o=o("openai-gpt"),o7o=o(" \u2014 "),oD=a("a"),r7o=o("OpenAIGPTForSequenceClassification"),t7o=o(" (OpenAI GPT model)"),a7o=l(),N2=a("li"),Ode=a("strong"),n7o=o("perceiver"),s7o=o(" \u2014 "),rD=a("a"),l7o=o("PerceiverForSequenceClassification"),i7o=o(" (Perceiver model)"),d7o=l(),j2=a("li"),Vde=a("strong"),c7o=o("plbart"),f7o=o(" \u2014 "),tD=a("a"),m7o=o("PLBartForSequenceClassification"),g7o=o(" (PLBart model)"),h7o=l(),D2=a("li"),Xde=a("strong"),p7o=o("qdqbert"),u7o=o(" \u2014 "),aD=a("a"),_7o=o("QDQBertForSequenceClassification"),b7o=o(" (QDQBert model)"),v7o=l(),G2=a("li"),zde=a("strong"),F7o=o("reformer"),T7o=o(" \u2014 "),nD=a("a"),M7o=o("ReformerForSequenceClassification"),E7o=o(" (Reformer model)"),C7o=l(),O2=a("li"),Wde=a("strong"),w7o=o("rembert"),A7o=o(" \u2014 "),sD=a("a"),y7o=o("RemBertForSequenceClassification"),L7o=o(" (RemBERT model)"),x7o=l(),V2=a("li"),Qde=a("strong"),$7o=o("roberta"),k7o=o(" \u2014 "),lD=a("a"),S7o=o("RobertaForSequenceClassification"),R7o=o(" (RoBERTa model)"),B7o=l(),X2=a("li"),Hde=a("strong"),P7o=o("roformer"),I7o=o(" \u2014 "),iD=a("a"),q7o=o("RoFormerForSequenceClassification"),N7o=o(" (RoFormer model)"),j7o=l(),z2=a("li"),Ude=a("strong"),D7o=o("squeezebert"),G7o=o(" \u2014 "),dD=a("a"),O7o=o("SqueezeBertForSequenceClassification"),V7o=o(" (SqueezeBERT model)"),X7o=l(),W2=a("li"),Jde=a("strong"),z7o=o("tapas"),W7o=o(" \u2014 "),cD=a("a"),Q7o=o("TapasForSequenceClassification"),H7o=o(" (TAPAS model)"),U7o=l(),Q2=a("li"),Yde=a("strong"),J7o=o("tapex"),Y7o=o(" \u2014 "),fD=a("a"),K7o=o("BartForSequenceClassification"),Z7o=o(" (TAPEX model)"),exo=l(),H2=a("li"),Kde=a("strong"),oxo=o("transfo-xl"),rxo=o(" \u2014 "),mD=a("a"),txo=o("TransfoXLForSequenceClassification"),axo=o(" (Transformer-XL model)"),nxo=l(),U2=a("li"),Zde=a("strong"),sxo=o("xlm"),lxo=o(" \u2014 "),gD=a("a"),ixo=o("XLMForSequenceClassification"),dxo=o(" (XLM model)"),cxo=l(),J2=a("li"),ece=a("strong"),fxo=o("xlm-roberta"),mxo=o(" \u2014 "),hD=a("a"),gxo=o("XLMRobertaForSequenceClassification"),hxo=o(" (XLM-RoBERTa model)"),pxo=l(),Y2=a("li"),oce=a("strong"),uxo=o("xlm-roberta-xl"),_xo=o(" \u2014 "),pD=a("a"),bxo=o("XLMRobertaXLForSequenceClassification"),vxo=o(" (XLM-RoBERTa-XL model)"),Fxo=l(),K2=a("li"),rce=a("strong"),Txo=o("xlnet"),Mxo=o(" \u2014 "),uD=a("a"),Exo=o("XLNetForSequenceClassification"),Cxo=o(" (XLNet model)"),wxo=l(),Z2=a("li"),tce=a("strong"),Axo=o("yoso"),yxo=o(" \u2014 "),_D=a("a"),Lxo=o("YosoForSequenceClassification"),xxo=o(" (YOSO model)"),$xo=l(),eb=a("p"),kxo=o("The model is set in evaluation mode by default using "),ace=a("code"),Sxo=o("model.eval()"),Rxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=a("code"),Bxo=o("model.train()"),Pxo=l(),F(ob.$$.fragment),NBe=l(),Pi=a("h2"),rb=a("a"),sce=a("span"),F(w0.$$.fragment),Ixo=l(),lce=a("span"),qxo=o("AutoModelForMultipleChoice"),jBe=l(),So=a("div"),F(A0.$$.fragment),Nxo=l(),Ii=a("p"),jxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bD=a("a"),Dxo=o("from_pretrained()"),Gxo=o(" class method or the "),vD=a("a"),Oxo=o("from_config()"),Vxo=o(` class
method.`),Xxo=l(),y0=a("p"),zxo=o("This class cannot be instantiated directly using "),ice=a("code"),Wxo=o("__init__()"),Qxo=o(" (throws an error)."),Hxo=l(),st=a("div"),F(L0.$$.fragment),Uxo=l(),dce=a("p"),Jxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Yxo=l(),qi=a("p"),Kxo=o(`Note:
Loading a model from its configuration file does `),cce=a("strong"),Zxo=o("not"),e9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),o9o=o("from_pretrained()"),r9o=o(" to load the model weights."),t9o=l(),F(tb.$$.fragment),a9o=l(),eo=a("div"),F(x0.$$.fragment),n9o=l(),fce=a("p"),s9o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),l9o=l(),$a=a("p"),i9o=o("The model class to instantiate is selected based on the "),mce=a("code"),d9o=o("model_type"),c9o=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),f9o=o("pretrained_model_name_or_path"),m9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),g9o=o("pretrained_model_name_or_path"),h9o=o(":"),p9o=l(),Y=a("ul"),ab=a("li"),pce=a("strong"),u9o=o("albert"),_9o=o(" \u2014 "),TD=a("a"),b9o=o("AlbertForMultipleChoice"),v9o=o(" (ALBERT model)"),F9o=l(),nb=a("li"),uce=a("strong"),T9o=o("bert"),M9o=o(" \u2014 "),MD=a("a"),E9o=o("BertForMultipleChoice"),C9o=o(" (BERT model)"),w9o=l(),sb=a("li"),_ce=a("strong"),A9o=o("big_bird"),y9o=o(" \u2014 "),ED=a("a"),L9o=o("BigBirdForMultipleChoice"),x9o=o(" (BigBird model)"),$9o=l(),lb=a("li"),bce=a("strong"),k9o=o("camembert"),S9o=o(" \u2014 "),CD=a("a"),R9o=o("CamembertForMultipleChoice"),B9o=o(" (CamemBERT model)"),P9o=l(),ib=a("li"),vce=a("strong"),I9o=o("canine"),q9o=o(" \u2014 "),wD=a("a"),N9o=o("CanineForMultipleChoice"),j9o=o(" (Canine model)"),D9o=l(),db=a("li"),Fce=a("strong"),G9o=o("convbert"),O9o=o(" \u2014 "),AD=a("a"),V9o=o("ConvBertForMultipleChoice"),X9o=o(" (ConvBERT model)"),z9o=l(),cb=a("li"),Tce=a("strong"),W9o=o("data2vec-text"),Q9o=o(" \u2014 "),yD=a("a"),H9o=o("Data2VecTextForMultipleChoice"),U9o=o(" (Data2VecText model)"),J9o=l(),fb=a("li"),Mce=a("strong"),Y9o=o("distilbert"),K9o=o(" \u2014 "),LD=a("a"),Z9o=o("DistilBertForMultipleChoice"),e$o=o(" (DistilBERT model)"),o$o=l(),mb=a("li"),Ece=a("strong"),r$o=o("electra"),t$o=o(" \u2014 "),xD=a("a"),a$o=o("ElectraForMultipleChoice"),n$o=o(" (ELECTRA model)"),s$o=l(),gb=a("li"),Cce=a("strong"),l$o=o("flaubert"),i$o=o(" \u2014 "),$D=a("a"),d$o=o("FlaubertForMultipleChoice"),c$o=o(" (FlauBERT model)"),f$o=l(),hb=a("li"),wce=a("strong"),m$o=o("fnet"),g$o=o(" \u2014 "),kD=a("a"),h$o=o("FNetForMultipleChoice"),p$o=o(" (FNet model)"),u$o=l(),pb=a("li"),Ace=a("strong"),_$o=o("funnel"),b$o=o(" \u2014 "),SD=a("a"),v$o=o("FunnelForMultipleChoice"),F$o=o(" (Funnel Transformer model)"),T$o=l(),ub=a("li"),yce=a("strong"),M$o=o("ibert"),E$o=o(" \u2014 "),RD=a("a"),C$o=o("IBertForMultipleChoice"),w$o=o(" (I-BERT model)"),A$o=l(),_b=a("li"),Lce=a("strong"),y$o=o("longformer"),L$o=o(" \u2014 "),BD=a("a"),x$o=o("LongformerForMultipleChoice"),$$o=o(" (Longformer model)"),k$o=l(),bb=a("li"),xce=a("strong"),S$o=o("megatron-bert"),R$o=o(" \u2014 "),PD=a("a"),B$o=o("MegatronBertForMultipleChoice"),P$o=o(" (MegatronBert model)"),I$o=l(),vb=a("li"),$ce=a("strong"),q$o=o("mobilebert"),N$o=o(" \u2014 "),ID=a("a"),j$o=o("MobileBertForMultipleChoice"),D$o=o(" (MobileBERT model)"),G$o=l(),Fb=a("li"),kce=a("strong"),O$o=o("mpnet"),V$o=o(" \u2014 "),qD=a("a"),X$o=o("MPNetForMultipleChoice"),z$o=o(" (MPNet model)"),W$o=l(),Tb=a("li"),Sce=a("strong"),Q$o=o("nystromformer"),H$o=o(" \u2014 "),ND=a("a"),U$o=o("NystromformerForMultipleChoice"),J$o=o(" (Nystromformer model)"),Y$o=l(),Mb=a("li"),Rce=a("strong"),K$o=o("qdqbert"),Z$o=o(" \u2014 "),jD=a("a"),eko=o("QDQBertForMultipleChoice"),oko=o(" (QDQBert model)"),rko=l(),Eb=a("li"),Bce=a("strong"),tko=o("rembert"),ako=o(" \u2014 "),DD=a("a"),nko=o("RemBertForMultipleChoice"),sko=o(" (RemBERT model)"),lko=l(),Cb=a("li"),Pce=a("strong"),iko=o("roberta"),dko=o(" \u2014 "),GD=a("a"),cko=o("RobertaForMultipleChoice"),fko=o(" (RoBERTa model)"),mko=l(),wb=a("li"),Ice=a("strong"),gko=o("roformer"),hko=o(" \u2014 "),OD=a("a"),pko=o("RoFormerForMultipleChoice"),uko=o(" (RoFormer model)"),_ko=l(),Ab=a("li"),qce=a("strong"),bko=o("squeezebert"),vko=o(" \u2014 "),VD=a("a"),Fko=o("SqueezeBertForMultipleChoice"),Tko=o(" (SqueezeBERT model)"),Mko=l(),yb=a("li"),Nce=a("strong"),Eko=o("xlm"),Cko=o(" \u2014 "),XD=a("a"),wko=o("XLMForMultipleChoice"),Ako=o(" (XLM model)"),yko=l(),Lb=a("li"),jce=a("strong"),Lko=o("xlm-roberta"),xko=o(" \u2014 "),zD=a("a"),$ko=o("XLMRobertaForMultipleChoice"),kko=o(" (XLM-RoBERTa model)"),Sko=l(),xb=a("li"),Dce=a("strong"),Rko=o("xlm-roberta-xl"),Bko=o(" \u2014 "),WD=a("a"),Pko=o("XLMRobertaXLForMultipleChoice"),Iko=o(" (XLM-RoBERTa-XL model)"),qko=l(),$b=a("li"),Gce=a("strong"),Nko=o("xlnet"),jko=o(" \u2014 "),QD=a("a"),Dko=o("XLNetForMultipleChoice"),Gko=o(" (XLNet model)"),Oko=l(),kb=a("li"),Oce=a("strong"),Vko=o("yoso"),Xko=o(" \u2014 "),HD=a("a"),zko=o("YosoForMultipleChoice"),Wko=o(" (YOSO model)"),Qko=l(),Sb=a("p"),Hko=o("The model is set in evaluation mode by default using "),Vce=a("code"),Uko=o("model.eval()"),Jko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=a("code"),Yko=o("model.train()"),Kko=l(),F(Rb.$$.fragment),DBe=l(),Ni=a("h2"),Bb=a("a"),zce=a("span"),F($0.$$.fragment),Zko=l(),Wce=a("span"),eSo=o("AutoModelForNextSentencePrediction"),GBe=l(),Ro=a("div"),F(k0.$$.fragment),oSo=l(),ji=a("p"),rSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UD=a("a"),tSo=o("from_pretrained()"),aSo=o(" class method or the "),JD=a("a"),nSo=o("from_config()"),sSo=o(` class
method.`),lSo=l(),S0=a("p"),iSo=o("This class cannot be instantiated directly using "),Qce=a("code"),dSo=o("__init__()"),cSo=o(" (throws an error)."),fSo=l(),lt=a("div"),F(R0.$$.fragment),mSo=l(),Hce=a("p"),gSo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hSo=l(),Di=a("p"),pSo=o(`Note:
Loading a model from its configuration file does `),Uce=a("strong"),uSo=o("not"),_So=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=a("a"),bSo=o("from_pretrained()"),vSo=o(" to load the model weights."),FSo=l(),F(Pb.$$.fragment),TSo=l(),oo=a("div"),F(B0.$$.fragment),MSo=l(),Jce=a("p"),ESo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CSo=l(),ka=a("p"),wSo=o("The model class to instantiate is selected based on the "),Yce=a("code"),ASo=o("model_type"),ySo=o(` property of the config object (either
passed as an argument or loaded from `),Kce=a("code"),LSo=o("pretrained_model_name_or_path"),xSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zce=a("code"),$So=o("pretrained_model_name_or_path"),kSo=o(":"),SSo=l(),Qr=a("ul"),Ib=a("li"),efe=a("strong"),RSo=o("bert"),BSo=o(" \u2014 "),KD=a("a"),PSo=o("BertForNextSentencePrediction"),ISo=o(" (BERT model)"),qSo=l(),qb=a("li"),ofe=a("strong"),NSo=o("fnet"),jSo=o(" \u2014 "),ZD=a("a"),DSo=o("FNetForNextSentencePrediction"),GSo=o(" (FNet model)"),OSo=l(),Nb=a("li"),rfe=a("strong"),VSo=o("megatron-bert"),XSo=o(" \u2014 "),eG=a("a"),zSo=o("MegatronBertForNextSentencePrediction"),WSo=o(" (MegatronBert model)"),QSo=l(),jb=a("li"),tfe=a("strong"),HSo=o("mobilebert"),USo=o(" \u2014 "),oG=a("a"),JSo=o("MobileBertForNextSentencePrediction"),YSo=o(" (MobileBERT model)"),KSo=l(),Db=a("li"),afe=a("strong"),ZSo=o("qdqbert"),eRo=o(" \u2014 "),rG=a("a"),oRo=o("QDQBertForNextSentencePrediction"),rRo=o(" (QDQBert model)"),tRo=l(),Gb=a("p"),aRo=o("The model is set in evaluation mode by default using "),nfe=a("code"),nRo=o("model.eval()"),sRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),lRo=o("model.train()"),iRo=l(),F(Ob.$$.fragment),OBe=l(),Gi=a("h2"),Vb=a("a"),lfe=a("span"),F(P0.$$.fragment),dRo=l(),ife=a("span"),cRo=o("AutoModelForTokenClassification"),VBe=l(),Bo=a("div"),F(I0.$$.fragment),fRo=l(),Oi=a("p"),mRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tG=a("a"),gRo=o("from_pretrained()"),hRo=o(" class method or the "),aG=a("a"),pRo=o("from_config()"),uRo=o(` class
method.`),_Ro=l(),q0=a("p"),bRo=o("This class cannot be instantiated directly using "),dfe=a("code"),vRo=o("__init__()"),FRo=o(" (throws an error)."),TRo=l(),it=a("div"),F(N0.$$.fragment),MRo=l(),cfe=a("p"),ERo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CRo=l(),Vi=a("p"),wRo=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),ARo=o("not"),yRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),LRo=o("from_pretrained()"),xRo=o(" to load the model weights."),$Ro=l(),F(Xb.$$.fragment),kRo=l(),ro=a("div"),F(j0.$$.fragment),SRo=l(),mfe=a("p"),RRo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BRo=l(),Sa=a("p"),PRo=o("The model class to instantiate is selected based on the "),gfe=a("code"),IRo=o("model_type"),qRo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),NRo=o("pretrained_model_name_or_path"),jRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),DRo=o("pretrained_model_name_or_path"),GRo=o(":"),ORo=l(),U=a("ul"),zb=a("li"),ufe=a("strong"),VRo=o("albert"),XRo=o(" \u2014 "),sG=a("a"),zRo=o("AlbertForTokenClassification"),WRo=o(" (ALBERT model)"),QRo=l(),Wb=a("li"),_fe=a("strong"),HRo=o("bert"),URo=o(" \u2014 "),lG=a("a"),JRo=o("BertForTokenClassification"),YRo=o(" (BERT model)"),KRo=l(),Qb=a("li"),bfe=a("strong"),ZRo=o("big_bird"),eBo=o(" \u2014 "),iG=a("a"),oBo=o("BigBirdForTokenClassification"),rBo=o(" (BigBird model)"),tBo=l(),Hb=a("li"),vfe=a("strong"),aBo=o("camembert"),nBo=o(" \u2014 "),dG=a("a"),sBo=o("CamembertForTokenClassification"),lBo=o(" (CamemBERT model)"),iBo=l(),Ub=a("li"),Ffe=a("strong"),dBo=o("canine"),cBo=o(" \u2014 "),cG=a("a"),fBo=o("CanineForTokenClassification"),mBo=o(" (Canine model)"),gBo=l(),Jb=a("li"),Tfe=a("strong"),hBo=o("convbert"),pBo=o(" \u2014 "),fG=a("a"),uBo=o("ConvBertForTokenClassification"),_Bo=o(" (ConvBERT model)"),bBo=l(),Yb=a("li"),Mfe=a("strong"),vBo=o("data2vec-text"),FBo=o(" \u2014 "),mG=a("a"),TBo=o("Data2VecTextForTokenClassification"),MBo=o(" (Data2VecText model)"),EBo=l(),Kb=a("li"),Efe=a("strong"),CBo=o("deberta"),wBo=o(" \u2014 "),gG=a("a"),ABo=o("DebertaForTokenClassification"),yBo=o(" (DeBERTa model)"),LBo=l(),Zb=a("li"),Cfe=a("strong"),xBo=o("deberta-v2"),$Bo=o(" \u2014 "),hG=a("a"),kBo=o("DebertaV2ForTokenClassification"),SBo=o(" (DeBERTa-v2 model)"),RBo=l(),ev=a("li"),wfe=a("strong"),BBo=o("distilbert"),PBo=o(" \u2014 "),pG=a("a"),IBo=o("DistilBertForTokenClassification"),qBo=o(" (DistilBERT model)"),NBo=l(),ov=a("li"),Afe=a("strong"),jBo=o("electra"),DBo=o(" \u2014 "),uG=a("a"),GBo=o("ElectraForTokenClassification"),OBo=o(" (ELECTRA model)"),VBo=l(),rv=a("li"),yfe=a("strong"),XBo=o("flaubert"),zBo=o(" \u2014 "),_G=a("a"),WBo=o("FlaubertForTokenClassification"),QBo=o(" (FlauBERT model)"),HBo=l(),tv=a("li"),Lfe=a("strong"),UBo=o("fnet"),JBo=o(" \u2014 "),bG=a("a"),YBo=o("FNetForTokenClassification"),KBo=o(" (FNet model)"),ZBo=l(),av=a("li"),xfe=a("strong"),ePo=o("funnel"),oPo=o(" \u2014 "),vG=a("a"),rPo=o("FunnelForTokenClassification"),tPo=o(" (Funnel Transformer model)"),aPo=l(),nv=a("li"),$fe=a("strong"),nPo=o("gpt2"),sPo=o(" \u2014 "),FG=a("a"),lPo=o("GPT2ForTokenClassification"),iPo=o(" (OpenAI GPT-2 model)"),dPo=l(),sv=a("li"),kfe=a("strong"),cPo=o("ibert"),fPo=o(" \u2014 "),TG=a("a"),mPo=o("IBertForTokenClassification"),gPo=o(" (I-BERT model)"),hPo=l(),lv=a("li"),Sfe=a("strong"),pPo=o("layoutlm"),uPo=o(" \u2014 "),MG=a("a"),_Po=o("LayoutLMForTokenClassification"),bPo=o(" (LayoutLM model)"),vPo=l(),iv=a("li"),Rfe=a("strong"),FPo=o("layoutlmv2"),TPo=o(" \u2014 "),EG=a("a"),MPo=o("LayoutLMv2ForTokenClassification"),EPo=o(" (LayoutLMv2 model)"),CPo=l(),dv=a("li"),Bfe=a("strong"),wPo=o("longformer"),APo=o(" \u2014 "),CG=a("a"),yPo=o("LongformerForTokenClassification"),LPo=o(" (Longformer model)"),xPo=l(),cv=a("li"),Pfe=a("strong"),$Po=o("megatron-bert"),kPo=o(" \u2014 "),wG=a("a"),SPo=o("MegatronBertForTokenClassification"),RPo=o(" (MegatronBert model)"),BPo=l(),fv=a("li"),Ife=a("strong"),PPo=o("mobilebert"),IPo=o(" \u2014 "),AG=a("a"),qPo=o("MobileBertForTokenClassification"),NPo=o(" (MobileBERT model)"),jPo=l(),mv=a("li"),qfe=a("strong"),DPo=o("mpnet"),GPo=o(" \u2014 "),yG=a("a"),OPo=o("MPNetForTokenClassification"),VPo=o(" (MPNet model)"),XPo=l(),gv=a("li"),Nfe=a("strong"),zPo=o("nystromformer"),WPo=o(" \u2014 "),LG=a("a"),QPo=o("NystromformerForTokenClassification"),HPo=o(" (Nystromformer model)"),UPo=l(),hv=a("li"),jfe=a("strong"),JPo=o("qdqbert"),YPo=o(" \u2014 "),xG=a("a"),KPo=o("QDQBertForTokenClassification"),ZPo=o(" (QDQBert model)"),eIo=l(),pv=a("li"),Dfe=a("strong"),oIo=o("rembert"),rIo=o(" \u2014 "),$G=a("a"),tIo=o("RemBertForTokenClassification"),aIo=o(" (RemBERT model)"),nIo=l(),uv=a("li"),Gfe=a("strong"),sIo=o("roberta"),lIo=o(" \u2014 "),kG=a("a"),iIo=o("RobertaForTokenClassification"),dIo=o(" (RoBERTa model)"),cIo=l(),_v=a("li"),Ofe=a("strong"),fIo=o("roformer"),mIo=o(" \u2014 "),SG=a("a"),gIo=o("RoFormerForTokenClassification"),hIo=o(" (RoFormer model)"),pIo=l(),bv=a("li"),Vfe=a("strong"),uIo=o("squeezebert"),_Io=o(" \u2014 "),RG=a("a"),bIo=o("SqueezeBertForTokenClassification"),vIo=o(" (SqueezeBERT model)"),FIo=l(),vv=a("li"),Xfe=a("strong"),TIo=o("xlm"),MIo=o(" \u2014 "),BG=a("a"),EIo=o("XLMForTokenClassification"),CIo=o(" (XLM model)"),wIo=l(),Fv=a("li"),zfe=a("strong"),AIo=o("xlm-roberta"),yIo=o(" \u2014 "),PG=a("a"),LIo=o("XLMRobertaForTokenClassification"),xIo=o(" (XLM-RoBERTa model)"),$Io=l(),Tv=a("li"),Wfe=a("strong"),kIo=o("xlm-roberta-xl"),SIo=o(" \u2014 "),IG=a("a"),RIo=o("XLMRobertaXLForTokenClassification"),BIo=o(" (XLM-RoBERTa-XL model)"),PIo=l(),Mv=a("li"),Qfe=a("strong"),IIo=o("xlnet"),qIo=o(" \u2014 "),qG=a("a"),NIo=o("XLNetForTokenClassification"),jIo=o(" (XLNet model)"),DIo=l(),Ev=a("li"),Hfe=a("strong"),GIo=o("yoso"),OIo=o(" \u2014 "),NG=a("a"),VIo=o("YosoForTokenClassification"),XIo=o(" (YOSO model)"),zIo=l(),Cv=a("p"),WIo=o("The model is set in evaluation mode by default using "),Ufe=a("code"),QIo=o("model.eval()"),HIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=a("code"),UIo=o("model.train()"),JIo=l(),F(wv.$$.fragment),XBe=l(),Xi=a("h2"),Av=a("a"),Yfe=a("span"),F(D0.$$.fragment),YIo=l(),Kfe=a("span"),KIo=o("AutoModelForQuestionAnswering"),zBe=l(),Po=a("div"),F(G0.$$.fragment),ZIo=l(),zi=a("p"),eqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jG=a("a"),oqo=o("from_pretrained()"),rqo=o(" class method or the "),DG=a("a"),tqo=o("from_config()"),aqo=o(` class
method.`),nqo=l(),O0=a("p"),sqo=o("This class cannot be instantiated directly using "),Zfe=a("code"),lqo=o("__init__()"),iqo=o(" (throws an error)."),dqo=l(),dt=a("div"),F(V0.$$.fragment),cqo=l(),eme=a("p"),fqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mqo=l(),Wi=a("p"),gqo=o(`Note:
Loading a model from its configuration file does `),ome=a("strong"),hqo=o("not"),pqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),uqo=o("from_pretrained()"),_qo=o(" to load the model weights."),bqo=l(),F(yv.$$.fragment),vqo=l(),to=a("div"),F(X0.$$.fragment),Fqo=l(),rme=a("p"),Tqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mqo=l(),Ra=a("p"),Eqo=o("The model class to instantiate is selected based on the "),tme=a("code"),Cqo=o("model_type"),wqo=o(` property of the config object (either
passed as an argument or loaded from `),ame=a("code"),Aqo=o("pretrained_model_name_or_path"),yqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=a("code"),Lqo=o("pretrained_model_name_or_path"),xqo=o(":"),$qo=l(),O=a("ul"),Lv=a("li"),sme=a("strong"),kqo=o("albert"),Sqo=o(" \u2014 "),OG=a("a"),Rqo=o("AlbertForQuestionAnswering"),Bqo=o(" (ALBERT model)"),Pqo=l(),xv=a("li"),lme=a("strong"),Iqo=o("bart"),qqo=o(" \u2014 "),VG=a("a"),Nqo=o("BartForQuestionAnswering"),jqo=o(" (BART model)"),Dqo=l(),$v=a("li"),ime=a("strong"),Gqo=o("bert"),Oqo=o(" \u2014 "),XG=a("a"),Vqo=o("BertForQuestionAnswering"),Xqo=o(" (BERT model)"),zqo=l(),kv=a("li"),dme=a("strong"),Wqo=o("big_bird"),Qqo=o(" \u2014 "),zG=a("a"),Hqo=o("BigBirdForQuestionAnswering"),Uqo=o(" (BigBird model)"),Jqo=l(),Sv=a("li"),cme=a("strong"),Yqo=o("bigbird_pegasus"),Kqo=o(" \u2014 "),WG=a("a"),Zqo=o("BigBirdPegasusForQuestionAnswering"),eNo=o(" (BigBirdPegasus model)"),oNo=l(),Rv=a("li"),fme=a("strong"),rNo=o("camembert"),tNo=o(" \u2014 "),QG=a("a"),aNo=o("CamembertForQuestionAnswering"),nNo=o(" (CamemBERT model)"),sNo=l(),Bv=a("li"),mme=a("strong"),lNo=o("canine"),iNo=o(" \u2014 "),HG=a("a"),dNo=o("CanineForQuestionAnswering"),cNo=o(" (Canine model)"),fNo=l(),Pv=a("li"),gme=a("strong"),mNo=o("convbert"),gNo=o(" \u2014 "),UG=a("a"),hNo=o("ConvBertForQuestionAnswering"),pNo=o(" (ConvBERT model)"),uNo=l(),Iv=a("li"),hme=a("strong"),_No=o("data2vec-text"),bNo=o(" \u2014 "),JG=a("a"),vNo=o("Data2VecTextForQuestionAnswering"),FNo=o(" (Data2VecText model)"),TNo=l(),qv=a("li"),pme=a("strong"),MNo=o("deberta"),ENo=o(" \u2014 "),YG=a("a"),CNo=o("DebertaForQuestionAnswering"),wNo=o(" (DeBERTa model)"),ANo=l(),Nv=a("li"),ume=a("strong"),yNo=o("deberta-v2"),LNo=o(" \u2014 "),KG=a("a"),xNo=o("DebertaV2ForQuestionAnswering"),$No=o(" (DeBERTa-v2 model)"),kNo=l(),jv=a("li"),_me=a("strong"),SNo=o("distilbert"),RNo=o(" \u2014 "),ZG=a("a"),BNo=o("DistilBertForQuestionAnswering"),PNo=o(" (DistilBERT model)"),INo=l(),Dv=a("li"),bme=a("strong"),qNo=o("electra"),NNo=o(" \u2014 "),eO=a("a"),jNo=o("ElectraForQuestionAnswering"),DNo=o(" (ELECTRA model)"),GNo=l(),Gv=a("li"),vme=a("strong"),ONo=o("flaubert"),VNo=o(" \u2014 "),oO=a("a"),XNo=o("FlaubertForQuestionAnsweringSimple"),zNo=o(" (FlauBERT model)"),WNo=l(),Ov=a("li"),Fme=a("strong"),QNo=o("fnet"),HNo=o(" \u2014 "),rO=a("a"),UNo=o("FNetForQuestionAnswering"),JNo=o(" (FNet model)"),YNo=l(),Vv=a("li"),Tme=a("strong"),KNo=o("funnel"),ZNo=o(" \u2014 "),tO=a("a"),ejo=o("FunnelForQuestionAnswering"),ojo=o(" (Funnel Transformer model)"),rjo=l(),Xv=a("li"),Mme=a("strong"),tjo=o("gptj"),ajo=o(" \u2014 "),aO=a("a"),njo=o("GPTJForQuestionAnswering"),sjo=o(" (GPT-J model)"),ljo=l(),zv=a("li"),Eme=a("strong"),ijo=o("ibert"),djo=o(" \u2014 "),nO=a("a"),cjo=o("IBertForQuestionAnswering"),fjo=o(" (I-BERT model)"),mjo=l(),Wv=a("li"),Cme=a("strong"),gjo=o("layoutlmv2"),hjo=o(" \u2014 "),sO=a("a"),pjo=o("LayoutLMv2ForQuestionAnswering"),ujo=o(" (LayoutLMv2 model)"),_jo=l(),Qv=a("li"),wme=a("strong"),bjo=o("led"),vjo=o(" \u2014 "),lO=a("a"),Fjo=o("LEDForQuestionAnswering"),Tjo=o(" (LED model)"),Mjo=l(),Hv=a("li"),Ame=a("strong"),Ejo=o("longformer"),Cjo=o(" \u2014 "),iO=a("a"),wjo=o("LongformerForQuestionAnswering"),Ajo=o(" (Longformer model)"),yjo=l(),Uv=a("li"),yme=a("strong"),Ljo=o("lxmert"),xjo=o(" \u2014 "),dO=a("a"),$jo=o("LxmertForQuestionAnswering"),kjo=o(" (LXMERT model)"),Sjo=l(),Jv=a("li"),Lme=a("strong"),Rjo=o("mbart"),Bjo=o(" \u2014 "),cO=a("a"),Pjo=o("MBartForQuestionAnswering"),Ijo=o(" (mBART model)"),qjo=l(),Yv=a("li"),xme=a("strong"),Njo=o("megatron-bert"),jjo=o(" \u2014 "),fO=a("a"),Djo=o("MegatronBertForQuestionAnswering"),Gjo=o(" (MegatronBert model)"),Ojo=l(),Kv=a("li"),$me=a("strong"),Vjo=o("mobilebert"),Xjo=o(" \u2014 "),mO=a("a"),zjo=o("MobileBertForQuestionAnswering"),Wjo=o(" (MobileBERT model)"),Qjo=l(),Zv=a("li"),kme=a("strong"),Hjo=o("mpnet"),Ujo=o(" \u2014 "),gO=a("a"),Jjo=o("MPNetForQuestionAnswering"),Yjo=o(" (MPNet model)"),Kjo=l(),eF=a("li"),Sme=a("strong"),Zjo=o("nystromformer"),eDo=o(" \u2014 "),hO=a("a"),oDo=o("NystromformerForQuestionAnswering"),rDo=o(" (Nystromformer model)"),tDo=l(),oF=a("li"),Rme=a("strong"),aDo=o("qdqbert"),nDo=o(" \u2014 "),pO=a("a"),sDo=o("QDQBertForQuestionAnswering"),lDo=o(" (QDQBert model)"),iDo=l(),rF=a("li"),Bme=a("strong"),dDo=o("reformer"),cDo=o(" \u2014 "),uO=a("a"),fDo=o("ReformerForQuestionAnswering"),mDo=o(" (Reformer model)"),gDo=l(),tF=a("li"),Pme=a("strong"),hDo=o("rembert"),pDo=o(" \u2014 "),_O=a("a"),uDo=o("RemBertForQuestionAnswering"),_Do=o(" (RemBERT model)"),bDo=l(),aF=a("li"),Ime=a("strong"),vDo=o("roberta"),FDo=o(" \u2014 "),bO=a("a"),TDo=o("RobertaForQuestionAnswering"),MDo=o(" (RoBERTa model)"),EDo=l(),nF=a("li"),qme=a("strong"),CDo=o("roformer"),wDo=o(" \u2014 "),vO=a("a"),ADo=o("RoFormerForQuestionAnswering"),yDo=o(" (RoFormer model)"),LDo=l(),sF=a("li"),Nme=a("strong"),xDo=o("splinter"),$Do=o(" \u2014 "),FO=a("a"),kDo=o("SplinterForQuestionAnswering"),SDo=o(" (Splinter model)"),RDo=l(),lF=a("li"),jme=a("strong"),BDo=o("squeezebert"),PDo=o(" \u2014 "),TO=a("a"),IDo=o("SqueezeBertForQuestionAnswering"),qDo=o(" (SqueezeBERT model)"),NDo=l(),iF=a("li"),Dme=a("strong"),jDo=o("xlm"),DDo=o(" \u2014 "),MO=a("a"),GDo=o("XLMForQuestionAnsweringSimple"),ODo=o(" (XLM model)"),VDo=l(),dF=a("li"),Gme=a("strong"),XDo=o("xlm-roberta"),zDo=o(" \u2014 "),EO=a("a"),WDo=o("XLMRobertaForQuestionAnswering"),QDo=o(" (XLM-RoBERTa model)"),HDo=l(),cF=a("li"),Ome=a("strong"),UDo=o("xlm-roberta-xl"),JDo=o(" \u2014 "),CO=a("a"),YDo=o("XLMRobertaXLForQuestionAnswering"),KDo=o(" (XLM-RoBERTa-XL model)"),ZDo=l(),fF=a("li"),Vme=a("strong"),eGo=o("xlnet"),oGo=o(" \u2014 "),wO=a("a"),rGo=o("XLNetForQuestionAnsweringSimple"),tGo=o(" (XLNet model)"),aGo=l(),mF=a("li"),Xme=a("strong"),nGo=o("yoso"),sGo=o(" \u2014 "),AO=a("a"),lGo=o("YosoForQuestionAnswering"),iGo=o(" (YOSO model)"),dGo=l(),gF=a("p"),cGo=o("The model is set in evaluation mode by default using "),zme=a("code"),fGo=o("model.eval()"),mGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=a("code"),gGo=o("model.train()"),hGo=l(),F(hF.$$.fragment),WBe=l(),Qi=a("h2"),pF=a("a"),Qme=a("span"),F(z0.$$.fragment),pGo=l(),Hme=a("span"),uGo=o("AutoModelForTableQuestionAnswering"),QBe=l(),Io=a("div"),F(W0.$$.fragment),_Go=l(),Hi=a("p"),bGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yO=a("a"),vGo=o("from_pretrained()"),FGo=o(" class method or the "),LO=a("a"),TGo=o("from_config()"),MGo=o(` class
method.`),EGo=l(),Q0=a("p"),CGo=o("This class cannot be instantiated directly using "),Ume=a("code"),wGo=o("__init__()"),AGo=o(" (throws an error)."),yGo=l(),ct=a("div"),F(H0.$$.fragment),LGo=l(),Jme=a("p"),xGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$Go=l(),Ui=a("p"),kGo=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),SGo=o("not"),RGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),BGo=o("from_pretrained()"),PGo=o(" to load the model weights."),IGo=l(),F(uF.$$.fragment),qGo=l(),ao=a("div"),F(U0.$$.fragment),NGo=l(),Kme=a("p"),jGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DGo=l(),Ba=a("p"),GGo=o("The model class to instantiate is selected based on the "),Zme=a("code"),OGo=o("model_type"),VGo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),XGo=o("pretrained_model_name_or_path"),zGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),WGo=o("pretrained_model_name_or_path"),QGo=o(":"),HGo=l(),rge=a("ul"),_F=a("li"),tge=a("strong"),UGo=o("tapas"),JGo=o(" \u2014 "),$O=a("a"),YGo=o("TapasForQuestionAnswering"),KGo=o(" (TAPAS model)"),ZGo=l(),bF=a("p"),eOo=o("The model is set in evaluation mode by default using "),age=a("code"),oOo=o("model.eval()"),rOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),tOo=o("model.train()"),aOo=l(),F(vF.$$.fragment),HBe=l(),Ji=a("h2"),FF=a("a"),sge=a("span"),F(J0.$$.fragment),nOo=l(),lge=a("span"),sOo=o("AutoModelForImageClassification"),UBe=l(),qo=a("div"),F(Y0.$$.fragment),lOo=l(),Yi=a("p"),iOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kO=a("a"),dOo=o("from_pretrained()"),cOo=o(" class method or the "),SO=a("a"),fOo=o("from_config()"),mOo=o(` class
method.`),gOo=l(),K0=a("p"),hOo=o("This class cannot be instantiated directly using "),ige=a("code"),pOo=o("__init__()"),uOo=o(" (throws an error)."),_Oo=l(),ft=a("div"),F(Z0.$$.fragment),bOo=l(),dge=a("p"),vOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FOo=l(),Ki=a("p"),TOo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),MOo=o("not"),EOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=a("a"),COo=o("from_pretrained()"),wOo=o(" to load the model weights."),AOo=l(),F(TF.$$.fragment),yOo=l(),no=a("div"),F(ey.$$.fragment),LOo=l(),fge=a("p"),xOo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Oo=l(),Pa=a("p"),kOo=o("The model class to instantiate is selected based on the "),mge=a("code"),SOo=o("model_type"),ROo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),BOo=o("pretrained_model_name_or_path"),POo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),IOo=o("pretrained_model_name_or_path"),qOo=o(":"),NOo=l(),Fe=a("ul"),MF=a("li"),pge=a("strong"),jOo=o("beit"),DOo=o(" \u2014 "),BO=a("a"),GOo=o("BeitForImageClassification"),OOo=o(" (BEiT model)"),VOo=l(),EF=a("li"),uge=a("strong"),XOo=o("convnext"),zOo=o(" \u2014 "),PO=a("a"),WOo=o("ConvNextForImageClassification"),QOo=o(" (ConvNext model)"),HOo=l(),CF=a("li"),_ge=a("strong"),UOo=o("data2vec-vision"),JOo=o(" \u2014 "),IO=a("a"),YOo=o("Data2VecVisionForImageClassification"),KOo=o(" (Data2VecVision model)"),ZOo=l(),Ls=a("li"),bge=a("strong"),eVo=o("deit"),oVo=o(" \u2014 "),qO=a("a"),rVo=o("DeiTForImageClassification"),tVo=o(" or "),NO=a("a"),aVo=o("DeiTForImageClassificationWithTeacher"),nVo=o(" (DeiT model)"),sVo=l(),wF=a("li"),vge=a("strong"),lVo=o("imagegpt"),iVo=o(" \u2014 "),jO=a("a"),dVo=o("ImageGPTForImageClassification"),cVo=o(" (ImageGPT model)"),fVo=l(),mt=a("li"),Fge=a("strong"),mVo=o("perceiver"),gVo=o(" \u2014 "),DO=a("a"),hVo=o("PerceiverForImageClassificationLearned"),pVo=o(" or "),GO=a("a"),uVo=o("PerceiverForImageClassificationFourier"),_Vo=o(" or "),OO=a("a"),bVo=o("PerceiverForImageClassificationConvProcessing"),vVo=o(" (Perceiver model)"),FVo=l(),AF=a("li"),Tge=a("strong"),TVo=o("poolformer"),MVo=o(" \u2014 "),VO=a("a"),EVo=o("PoolFormerForImageClassification"),CVo=o(" (PoolFormer model)"),wVo=l(),yF=a("li"),Mge=a("strong"),AVo=o("regnet"),yVo=o(" \u2014 "),XO=a("a"),LVo=o("RegNetForImageClassification"),xVo=o(" (RegNet model)"),$Vo=l(),LF=a("li"),Ege=a("strong"),kVo=o("resnet"),SVo=o(" \u2014 "),zO=a("a"),RVo=o("ResNetForImageClassification"),BVo=o(" (ResNet model)"),PVo=l(),xF=a("li"),Cge=a("strong"),IVo=o("segformer"),qVo=o(" \u2014 "),WO=a("a"),NVo=o("SegformerForImageClassification"),jVo=o(" (SegFormer model)"),DVo=l(),$F=a("li"),wge=a("strong"),GVo=o("swin"),OVo=o(" \u2014 "),QO=a("a"),VVo=o("SwinForImageClassification"),XVo=o(" (Swin model)"),zVo=l(),kF=a("li"),Age=a("strong"),WVo=o("van"),QVo=o(" \u2014 "),HO=a("a"),HVo=o("VanForImageClassification"),UVo=o(" (VAN model)"),JVo=l(),SF=a("li"),yge=a("strong"),YVo=o("vit"),KVo=o(" \u2014 "),UO=a("a"),ZVo=o("ViTForImageClassification"),eXo=o(" (ViT model)"),oXo=l(),RF=a("p"),rXo=o("The model is set in evaluation mode by default using "),Lge=a("code"),tXo=o("model.eval()"),aXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),nXo=o("model.train()"),sXo=l(),F(BF.$$.fragment),JBe=l(),Zi=a("h2"),PF=a("a"),$ge=a("span"),F(oy.$$.fragment),lXo=l(),kge=a("span"),iXo=o("AutoModelForVision2Seq"),YBe=l(),No=a("div"),F(ry.$$.fragment),dXo=l(),ed=a("p"),cXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JO=a("a"),fXo=o("from_pretrained()"),mXo=o(" class method or the "),YO=a("a"),gXo=o("from_config()"),hXo=o(` class
method.`),pXo=l(),ty=a("p"),uXo=o("This class cannot be instantiated directly using "),Sge=a("code"),_Xo=o("__init__()"),bXo=o(" (throws an error)."),vXo=l(),gt=a("div"),F(ay.$$.fragment),FXo=l(),Rge=a("p"),TXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MXo=l(),od=a("p"),EXo=o(`Note:
Loading a model from its configuration file does `),Bge=a("strong"),CXo=o("not"),wXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=a("a"),AXo=o("from_pretrained()"),yXo=o(" to load the model weights."),LXo=l(),F(IF.$$.fragment),xXo=l(),so=a("div"),F(ny.$$.fragment),$Xo=l(),Pge=a("p"),kXo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SXo=l(),Ia=a("p"),RXo=o("The model class to instantiate is selected based on the "),Ige=a("code"),BXo=o("model_type"),PXo=o(` property of the config object (either
passed as an argument or loaded from `),qge=a("code"),IXo=o("pretrained_model_name_or_path"),qXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=a("code"),NXo=o("pretrained_model_name_or_path"),jXo=o(":"),DXo=l(),jge=a("ul"),qF=a("li"),Dge=a("strong"),GXo=o("vision-encoder-decoder"),OXo=o(" \u2014 "),ZO=a("a"),VXo=o("VisionEncoderDecoderModel"),XXo=o(" (Vision Encoder decoder model)"),zXo=l(),NF=a("p"),WXo=o("The model is set in evaluation mode by default using "),Gge=a("code"),QXo=o("model.eval()"),HXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),UXo=o("model.train()"),JXo=l(),F(jF.$$.fragment),KBe=l(),rd=a("h2"),DF=a("a"),Vge=a("span"),F(sy.$$.fragment),YXo=l(),Xge=a("span"),KXo=o("AutoModelForAudioClassification"),ZBe=l(),jo=a("div"),F(ly.$$.fragment),ZXo=l(),td=a("p"),ezo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eV=a("a"),ozo=o("from_pretrained()"),rzo=o(" class method or the "),oV=a("a"),tzo=o("from_config()"),azo=o(` class
method.`),nzo=l(),iy=a("p"),szo=o("This class cannot be instantiated directly using "),zge=a("code"),lzo=o("__init__()"),izo=o(" (throws an error)."),dzo=l(),ht=a("div"),F(dy.$$.fragment),czo=l(),Wge=a("p"),fzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),mzo=l(),ad=a("p"),gzo=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),hzo=o("not"),pzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),uzo=o("from_pretrained()"),_zo=o(" to load the model weights."),bzo=l(),F(GF.$$.fragment),vzo=l(),lo=a("div"),F(cy.$$.fragment),Fzo=l(),Hge=a("p"),Tzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Mzo=l(),qa=a("p"),Ezo=o("The model class to instantiate is selected based on the "),Uge=a("code"),Czo=o("model_type"),wzo=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),Azo=o("pretrained_model_name_or_path"),yzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),Lzo=o("pretrained_model_name_or_path"),xzo=o(":"),$zo=l(),ke=a("ul"),OF=a("li"),Kge=a("strong"),kzo=o("data2vec-audio"),Szo=o(" \u2014 "),tV=a("a"),Rzo=o("Data2VecAudioForSequenceClassification"),Bzo=o(" (Data2VecAudio model)"),Pzo=l(),VF=a("li"),Zge=a("strong"),Izo=o("hubert"),qzo=o(" \u2014 "),aV=a("a"),Nzo=o("HubertForSequenceClassification"),jzo=o(" (Hubert model)"),Dzo=l(),XF=a("li"),ehe=a("strong"),Gzo=o("sew"),Ozo=o(" \u2014 "),nV=a("a"),Vzo=o("SEWForSequenceClassification"),Xzo=o(" (SEW model)"),zzo=l(),zF=a("li"),ohe=a("strong"),Wzo=o("sew-d"),Qzo=o(" \u2014 "),sV=a("a"),Hzo=o("SEWDForSequenceClassification"),Uzo=o(" (SEW-D model)"),Jzo=l(),WF=a("li"),rhe=a("strong"),Yzo=o("unispeech"),Kzo=o(" \u2014 "),lV=a("a"),Zzo=o("UniSpeechForSequenceClassification"),eWo=o(" (UniSpeech model)"),oWo=l(),QF=a("li"),the=a("strong"),rWo=o("unispeech-sat"),tWo=o(" \u2014 "),iV=a("a"),aWo=o("UniSpeechSatForSequenceClassification"),nWo=o(" (UniSpeechSat model)"),sWo=l(),HF=a("li"),ahe=a("strong"),lWo=o("wav2vec2"),iWo=o(" \u2014 "),dV=a("a"),dWo=o("Wav2Vec2ForSequenceClassification"),cWo=o(" (Wav2Vec2 model)"),fWo=l(),UF=a("li"),nhe=a("strong"),mWo=o("wav2vec2-conformer"),gWo=o(" \u2014 "),cV=a("a"),hWo=o("Wav2Vec2ConformerForSequenceClassification"),pWo=o(" (Wav2Vec2ConformerConformer model)"),uWo=l(),JF=a("li"),she=a("strong"),_Wo=o("wavlm"),bWo=o(" \u2014 "),fV=a("a"),vWo=o("WavLMForSequenceClassification"),FWo=o(" (WavLM model)"),TWo=l(),YF=a("p"),MWo=o("The model is set in evaluation mode by default using "),lhe=a("code"),EWo=o("model.eval()"),CWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),wWo=o("model.train()"),AWo=l(),F(KF.$$.fragment),ePe=l(),nd=a("h2"),ZF=a("a"),dhe=a("span"),F(fy.$$.fragment),yWo=l(),che=a("span"),LWo=o("AutoModelForAudioFrameClassification"),oPe=l(),Do=a("div"),F(my.$$.fragment),xWo=l(),sd=a("p"),$Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mV=a("a"),kWo=o("from_pretrained()"),SWo=o(" class method or the "),gV=a("a"),RWo=o("from_config()"),BWo=o(` class
method.`),PWo=l(),gy=a("p"),IWo=o("This class cannot be instantiated directly using "),fhe=a("code"),qWo=o("__init__()"),NWo=o(" (throws an error)."),jWo=l(),pt=a("div"),F(hy.$$.fragment),DWo=l(),mhe=a("p"),GWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),OWo=l(),ld=a("p"),VWo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),XWo=o("not"),zWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),WWo=o("from_pretrained()"),QWo=o(" to load the model weights."),HWo=l(),F(e6.$$.fragment),UWo=l(),io=a("div"),F(py.$$.fragment),JWo=l(),hhe=a("p"),YWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),KWo=l(),Na=a("p"),ZWo=o("The model class to instantiate is selected based on the "),phe=a("code"),eQo=o("model_type"),oQo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),aQo=o("pretrained_model_name_or_path"),nQo=o(":"),sQo=l(),Hr=a("ul"),o6=a("li"),bhe=a("strong"),lQo=o("data2vec-audio"),iQo=o(" \u2014 "),pV=a("a"),dQo=o("Data2VecAudioForAudioFrameClassification"),cQo=o(" (Data2VecAudio model)"),fQo=l(),r6=a("li"),vhe=a("strong"),mQo=o("unispeech-sat"),gQo=o(" \u2014 "),uV=a("a"),hQo=o("UniSpeechSatForAudioFrameClassification"),pQo=o(" (UniSpeechSat model)"),uQo=l(),t6=a("li"),Fhe=a("strong"),_Qo=o("wav2vec2"),bQo=o(" \u2014 "),_V=a("a"),vQo=o("Wav2Vec2ForAudioFrameClassification"),FQo=o(" (Wav2Vec2 model)"),TQo=l(),a6=a("li"),The=a("strong"),MQo=o("wav2vec2-conformer"),EQo=o(" \u2014 "),bV=a("a"),CQo=o("Wav2Vec2ConformerForAudioFrameClassification"),wQo=o(" (Wav2Vec2ConformerConformer model)"),AQo=l(),n6=a("li"),Mhe=a("strong"),yQo=o("wavlm"),LQo=o(" \u2014 "),vV=a("a"),xQo=o("WavLMForAudioFrameClassification"),$Qo=o(" (WavLM model)"),kQo=l(),s6=a("p"),SQo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),RQo=o("model.eval()"),BQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),PQo=o("model.train()"),IQo=l(),F(l6.$$.fragment),rPe=l(),id=a("h2"),i6=a("a"),whe=a("span"),F(uy.$$.fragment),qQo=l(),Ahe=a("span"),NQo=o("AutoModelForCTC"),tPe=l(),Go=a("div"),F(_y.$$.fragment),jQo=l(),dd=a("p"),DQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FV=a("a"),GQo=o("from_pretrained()"),OQo=o(" class method or the "),TV=a("a"),VQo=o("from_config()"),XQo=o(` class
method.`),zQo=l(),by=a("p"),WQo=o("This class cannot be instantiated directly using "),yhe=a("code"),QQo=o("__init__()"),HQo=o(" (throws an error)."),UQo=l(),ut=a("div"),F(vy.$$.fragment),JQo=l(),Lhe=a("p"),YQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),KQo=l(),cd=a("p"),ZQo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),eHo=o("not"),oHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),rHo=o("from_pretrained()"),tHo=o(" to load the model weights."),aHo=l(),F(d6.$$.fragment),nHo=l(),co=a("div"),F(Fy.$$.fragment),sHo=l(),$he=a("p"),lHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),iHo=l(),ja=a("p"),dHo=o("The model class to instantiate is selected based on the "),khe=a("code"),cHo=o("model_type"),fHo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),mHo=o("pretrained_model_name_or_path"),gHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),hHo=o("pretrained_model_name_or_path"),pHo=o(":"),uHo=l(),Se=a("ul"),c6=a("li"),Bhe=a("strong"),_Ho=o("data2vec-audio"),bHo=o(" \u2014 "),EV=a("a"),vHo=o("Data2VecAudioForCTC"),FHo=o(" (Data2VecAudio model)"),THo=l(),f6=a("li"),Phe=a("strong"),MHo=o("hubert"),EHo=o(" \u2014 "),CV=a("a"),CHo=o("HubertForCTC"),wHo=o(" (Hubert model)"),AHo=l(),m6=a("li"),Ihe=a("strong"),yHo=o("sew"),LHo=o(" \u2014 "),wV=a("a"),xHo=o("SEWForCTC"),$Ho=o(" (SEW model)"),kHo=l(),g6=a("li"),qhe=a("strong"),SHo=o("sew-d"),RHo=o(" \u2014 "),AV=a("a"),BHo=o("SEWDForCTC"),PHo=o(" (SEW-D model)"),IHo=l(),h6=a("li"),Nhe=a("strong"),qHo=o("unispeech"),NHo=o(" \u2014 "),yV=a("a"),jHo=o("UniSpeechForCTC"),DHo=o(" (UniSpeech model)"),GHo=l(),p6=a("li"),jhe=a("strong"),OHo=o("unispeech-sat"),VHo=o(" \u2014 "),LV=a("a"),XHo=o("UniSpeechSatForCTC"),zHo=o(" (UniSpeechSat model)"),WHo=l(),u6=a("li"),Dhe=a("strong"),QHo=o("wav2vec2"),HHo=o(" \u2014 "),xV=a("a"),UHo=o("Wav2Vec2ForCTC"),JHo=o(" (Wav2Vec2 model)"),YHo=l(),_6=a("li"),Ghe=a("strong"),KHo=o("wav2vec2-conformer"),ZHo=o(" \u2014 "),$V=a("a"),eUo=o("Wav2Vec2ConformerForCTC"),oUo=o(" (Wav2Vec2ConformerConformer model)"),rUo=l(),b6=a("li"),Ohe=a("strong"),tUo=o("wavlm"),aUo=o(" \u2014 "),kV=a("a"),nUo=o("WavLMForCTC"),sUo=o(" (WavLM model)"),lUo=l(),v6=a("p"),iUo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),dUo=o("model.eval()"),cUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),fUo=o("model.train()"),mUo=l(),F(F6.$$.fragment),aPe=l(),fd=a("h2"),T6=a("a"),zhe=a("span"),F(Ty.$$.fragment),gUo=l(),Whe=a("span"),hUo=o("AutoModelForSpeechSeq2Seq"),nPe=l(),Oo=a("div"),F(My.$$.fragment),pUo=l(),md=a("p"),uUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SV=a("a"),_Uo=o("from_pretrained()"),bUo=o(" class method or the "),RV=a("a"),vUo=o("from_config()"),FUo=o(` class
method.`),TUo=l(),Ey=a("p"),MUo=o("This class cannot be instantiated directly using "),Qhe=a("code"),EUo=o("__init__()"),CUo=o(" (throws an error)."),wUo=l(),_t=a("div"),F(Cy.$$.fragment),AUo=l(),Hhe=a("p"),yUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LUo=l(),gd=a("p"),xUo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),$Uo=o("not"),kUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),SUo=o("from_pretrained()"),RUo=o(" to load the model weights."),BUo=l(),F(M6.$$.fragment),PUo=l(),fo=a("div"),F(wy.$$.fragment),IUo=l(),Jhe=a("p"),qUo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),NUo=l(),Da=a("p"),jUo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),DUo=o("model_type"),GUo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(":"),WUo=l(),Ay=a("ul"),E6=a("li"),epe=a("strong"),QUo=o("speech-encoder-decoder"),HUo=o(" \u2014 "),PV=a("a"),UUo=o("SpeechEncoderDecoderModel"),JUo=o(" (Speech Encoder decoder model)"),YUo=l(),C6=a("li"),ope=a("strong"),KUo=o("speech_to_text"),ZUo=o(" \u2014 "),IV=a("a"),eJo=o("Speech2TextForConditionalGeneration"),oJo=o(" (Speech2Text model)"),rJo=l(),w6=a("p"),tJo=o("The model is set in evaluation mode by default using "),rpe=a("code"),aJo=o("model.eval()"),nJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),sJo=o("model.train()"),lJo=l(),F(A6.$$.fragment),sPe=l(),hd=a("h2"),y6=a("a"),ape=a("span"),F(yy.$$.fragment),iJo=l(),npe=a("span"),dJo=o("AutoModelForAudioXVector"),lPe=l(),Vo=a("div"),F(Ly.$$.fragment),cJo=l(),pd=a("p"),fJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qV=a("a"),mJo=o("from_pretrained()"),gJo=o(" class method or the "),NV=a("a"),hJo=o("from_config()"),pJo=o(` class
method.`),uJo=l(),xy=a("p"),_Jo=o("This class cannot be instantiated directly using "),spe=a("code"),bJo=o("__init__()"),vJo=o(" (throws an error)."),FJo=l(),bt=a("div"),F($y.$$.fragment),TJo=l(),lpe=a("p"),MJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),EJo=l(),ud=a("p"),CJo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),wJo=o("not"),AJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),yJo=o("from_pretrained()"),LJo=o(" to load the model weights."),xJo=l(),F(L6.$$.fragment),$Jo=l(),mo=a("div"),F(ky.$$.fragment),kJo=l(),dpe=a("p"),SJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),RJo=l(),Ga=a("p"),BJo=o("The model class to instantiate is selected based on the "),cpe=a("code"),PJo=o("model_type"),IJo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),qJo=o("pretrained_model_name_or_path"),NJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),jJo=o("pretrained_model_name_or_path"),DJo=o(":"),GJo=l(),Ur=a("ul"),x6=a("li"),gpe=a("strong"),OJo=o("data2vec-audio"),VJo=o(" \u2014 "),DV=a("a"),XJo=o("Data2VecAudioForXVector"),zJo=o(" (Data2VecAudio model)"),WJo=l(),$6=a("li"),hpe=a("strong"),QJo=o("unispeech-sat"),HJo=o(" \u2014 "),GV=a("a"),UJo=o("UniSpeechSatForXVector"),JJo=o(" (UniSpeechSat model)"),YJo=l(),k6=a("li"),ppe=a("strong"),KJo=o("wav2vec2"),ZJo=o(" \u2014 "),OV=a("a"),eYo=o("Wav2Vec2ForXVector"),oYo=o(" (Wav2Vec2 model)"),rYo=l(),S6=a("li"),upe=a("strong"),tYo=o("wav2vec2-conformer"),aYo=o(" \u2014 "),VV=a("a"),nYo=o("Wav2Vec2ConformerForXVector"),sYo=o(" (Wav2Vec2ConformerConformer model)"),lYo=l(),R6=a("li"),_pe=a("strong"),iYo=o("wavlm"),dYo=o(" \u2014 "),XV=a("a"),cYo=o("WavLMForXVector"),fYo=o(" (WavLM model)"),mYo=l(),B6=a("p"),gYo=o("The model is set in evaluation mode by default using "),bpe=a("code"),hYo=o("model.eval()"),pYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),uYo=o("model.train()"),_Yo=l(),F(P6.$$.fragment),iPe=l(),_d=a("h2"),I6=a("a"),Fpe=a("span"),F(Sy.$$.fragment),bYo=l(),Tpe=a("span"),vYo=o("AutoModelForMaskedImageModeling"),dPe=l(),Xo=a("div"),F(Ry.$$.fragment),FYo=l(),bd=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zV=a("a"),MYo=o("from_pretrained()"),EYo=o(" class method or the "),WV=a("a"),CYo=o("from_config()"),wYo=o(` class
method.`),AYo=l(),By=a("p"),yYo=o("This class cannot be instantiated directly using "),Mpe=a("code"),LYo=o("__init__()"),xYo=o(" (throws an error)."),$Yo=l(),vt=a("div"),F(Py.$$.fragment),kYo=l(),Epe=a("p"),SYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),RYo=l(),vd=a("p"),BYo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),PYo=o("not"),IYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),qYo=o("from_pretrained()"),NYo=o(" to load the model weights."),jYo=l(),F(q6.$$.fragment),DYo=l(),go=a("div"),F(Iy.$$.fragment),GYo=l(),wpe=a("p"),OYo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),VYo=l(),Oa=a("p"),XYo=o("The model class to instantiate is selected based on the "),Ape=a("code"),zYo=o("model_type"),WYo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),QYo=o("pretrained_model_name_or_path"),HYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(":"),YYo=l(),Fd=a("ul"),N6=a("li"),xpe=a("strong"),KYo=o("deit"),ZYo=o(" \u2014 "),HV=a("a"),eKo=o("DeiTForMaskedImageModeling"),oKo=o(" (DeiT model)"),rKo=l(),j6=a("li"),$pe=a("strong"),tKo=o("swin"),aKo=o(" \u2014 "),UV=a("a"),nKo=o("SwinForMaskedImageModeling"),sKo=o(" (Swin model)"),lKo=l(),D6=a("li"),kpe=a("strong"),iKo=o("vit"),dKo=o(" \u2014 "),JV=a("a"),cKo=o("ViTForMaskedImageModeling"),fKo=o(" (ViT model)"),mKo=l(),G6=a("p"),gKo=o("The model is set in evaluation mode by default using "),Spe=a("code"),hKo=o("model.eval()"),pKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),uKo=o("model.train()"),_Ko=l(),F(O6.$$.fragment),cPe=l(),Td=a("h2"),V6=a("a"),Bpe=a("span"),F(qy.$$.fragment),bKo=l(),Ppe=a("span"),vKo=o("AutoModelForObjectDetection"),fPe=l(),zo=a("div"),F(Ny.$$.fragment),FKo=l(),Md=a("p"),TKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YV=a("a"),MKo=o("from_pretrained()"),EKo=o(" class method or the "),KV=a("a"),CKo=o("from_config()"),wKo=o(` class
method.`),AKo=l(),jy=a("p"),yKo=o("This class cannot be instantiated directly using "),Ipe=a("code"),LKo=o("__init__()"),xKo=o(" (throws an error)."),$Ko=l(),Ft=a("div"),F(Dy.$$.fragment),kKo=l(),qpe=a("p"),SKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),RKo=l(),Ed=a("p"),BKo=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),PKo=o("not"),IKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),qKo=o("from_pretrained()"),NKo=o(" to load the model weights."),jKo=l(),F(X6.$$.fragment),DKo=l(),ho=a("div"),F(Gy.$$.fragment),GKo=l(),jpe=a("p"),OKo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),VKo=l(),Va=a("p"),XKo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),zKo=o("model_type"),WKo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),QKo=o("pretrained_model_name_or_path"),HKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),UKo=o("pretrained_model_name_or_path"),JKo=o(":"),YKo=l(),Vpe=a("ul"),z6=a("li"),Xpe=a("strong"),KKo=o("detr"),ZKo=o(" \u2014 "),eX=a("a"),eZo=o("DetrForObjectDetection"),oZo=o(" (DETR model)"),rZo=l(),W6=a("p"),tZo=o("The model is set in evaluation mode by default using "),zpe=a("code"),aZo=o("model.eval()"),nZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),sZo=o("model.train()"),lZo=l(),F(Q6.$$.fragment),mPe=l(),Cd=a("h2"),H6=a("a"),Qpe=a("span"),F(Oy.$$.fragment),iZo=l(),Hpe=a("span"),dZo=o("AutoModelForImageSegmentation"),gPe=l(),Wo=a("div"),F(Vy.$$.fragment),cZo=l(),wd=a("p"),fZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oX=a("a"),mZo=o("from_pretrained()"),gZo=o(" class method or the "),rX=a("a"),hZo=o("from_config()"),pZo=o(` class
method.`),uZo=l(),Xy=a("p"),_Zo=o("This class cannot be instantiated directly using "),Upe=a("code"),bZo=o("__init__()"),vZo=o(" (throws an error)."),FZo=l(),Tt=a("div"),F(zy.$$.fragment),TZo=l(),Jpe=a("p"),MZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),EZo=l(),Ad=a("p"),CZo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),wZo=o("not"),AZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),yZo=o("from_pretrained()"),LZo=o(" to load the model weights."),xZo=l(),F(U6.$$.fragment),$Zo=l(),po=a("div"),F(Wy.$$.fragment),kZo=l(),Kpe=a("p"),SZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),RZo=l(),Xa=a("p"),BZo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),PZo=o("model_type"),IZo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),qZo=o("pretrained_model_name_or_path"),NZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),jZo=o("pretrained_model_name_or_path"),DZo=o(":"),GZo=l(),rue=a("ul"),J6=a("li"),tue=a("strong"),OZo=o("detr"),VZo=o(" \u2014 "),aX=a("a"),XZo=o("DetrForSegmentation"),zZo=o(" (DETR model)"),WZo=l(),Y6=a("p"),QZo=o("The model is set in evaluation mode by default using "),aue=a("code"),HZo=o("model.eval()"),UZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=a("code"),JZo=o("model.train()"),YZo=l(),F(K6.$$.fragment),hPe=l(),yd=a("h2"),Z6=a("a"),sue=a("span"),F(Qy.$$.fragment),KZo=l(),lue=a("span"),ZZo=o("AutoModelForSemanticSegmentation"),pPe=l(),Qo=a("div"),F(Hy.$$.fragment),eer=l(),Ld=a("p"),oer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nX=a("a"),rer=o("from_pretrained()"),ter=o(" class method or the "),sX=a("a"),aer=o("from_config()"),ner=o(` class
method.`),ser=l(),Uy=a("p"),ler=o("This class cannot be instantiated directly using "),iue=a("code"),ier=o("__init__()"),der=o(" (throws an error)."),cer=l(),Mt=a("div"),F(Jy.$$.fragment),fer=l(),due=a("p"),mer=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ger=l(),xd=a("p"),her=o(`Note:
Loading a model from its configuration file does `),cue=a("strong"),per=o("not"),uer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),_er=o("from_pretrained()"),ber=o(" to load the model weights."),ver=l(),F(eT.$$.fragment),Fer=l(),uo=a("div"),F(Yy.$$.fragment),Ter=l(),fue=a("p"),Mer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Eer=l(),za=a("p"),Cer=o("The model class to instantiate is selected based on the "),mue=a("code"),wer=o("model_type"),Aer=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),yer=o("pretrained_model_name_or_path"),Ler=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),xer=o("pretrained_model_name_or_path"),$er=o(":"),ker=l(),Wa=a("ul"),oT=a("li"),pue=a("strong"),Ser=o("beit"),Rer=o(" \u2014 "),iX=a("a"),Ber=o("BeitForSemanticSegmentation"),Per=o(" (BEiT model)"),Ier=l(),rT=a("li"),uue=a("strong"),qer=o("data2vec-vision"),Ner=o(" \u2014 "),dX=a("a"),jer=o("Data2VecVisionForSemanticSegmentation"),Der=o(" (Data2VecVision model)"),Ger=l(),tT=a("li"),_ue=a("strong"),Oer=o("dpt"),Ver=o(" \u2014 "),cX=a("a"),Xer=o("DPTForSemanticSegmentation"),zer=o(" (DPT model)"),Wer=l(),aT=a("li"),bue=a("strong"),Qer=o("segformer"),Her=o(" \u2014 "),fX=a("a"),Uer=o("SegformerForSemanticSegmentation"),Jer=o(" (SegFormer model)"),Yer=l(),nT=a("p"),Ker=o("The model is set in evaluation mode by default using "),vue=a("code"),Zer=o("model.eval()"),eor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),oor=o("model.train()"),ror=l(),F(sT.$$.fragment),uPe=l(),$d=a("h2"),lT=a("a"),Tue=a("span"),F(Ky.$$.fragment),tor=l(),Mue=a("span"),aor=o("AutoModelForInstanceSegmentation"),_Pe=l(),Ho=a("div"),F(Zy.$$.fragment),nor=l(),kd=a("p"),sor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mX=a("a"),lor=o("from_pretrained()"),ior=o(" class method or the "),gX=a("a"),dor=o("from_config()"),cor=o(` class
method.`),mor=l(),eL=a("p"),gor=o("This class cannot be instantiated directly using "),Eue=a("code"),hor=o("__init__()"),por=o(" (throws an error)."),uor=l(),Et=a("div"),F(oL.$$.fragment),_or=l(),Cue=a("p"),bor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),vor=l(),Sd=a("p"),For=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),Tor=o("not"),Mor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),Eor=o("from_pretrained()"),Cor=o(" to load the model weights."),wor=l(),F(iT.$$.fragment),Aor=l(),_o=a("div"),F(rL.$$.fragment),yor=l(),Aue=a("p"),Lor=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xor=l(),Qa=a("p"),$or=o("The model class to instantiate is selected based on the "),yue=a("code"),kor=o("model_type"),Sor=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),Ror=o("pretrained_model_name_or_path"),Bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Por=o("pretrained_model_name_or_path"),Ior=o(":"),qor=l(),$ue=a("ul"),dT=a("li"),kue=a("strong"),Nor=o("maskformer"),jor=o(" \u2014 "),pX=a("a"),Dor=o("MaskFormerForInstanceSegmentation"),Gor=o(" (MaskFormer model)"),Oor=l(),cT=a("p"),Vor=o("The model is set in evaluation mode by default using "),Sue=a("code"),Xor=o("model.eval()"),zor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),Wor=o("model.train()"),Qor=l(),F(fT.$$.fragment),bPe=l(),Rd=a("h2"),mT=a("a"),Bue=a("span"),F(tL.$$.fragment),Hor=l(),Pue=a("span"),Uor=o("TFAutoModel"),vPe=l(),Uo=a("div"),F(aL.$$.fragment),Jor=l(),Bd=a("p"),Yor=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uX=a("a"),Kor=o("from_pretrained()"),Zor=o(" class method or the "),_X=a("a"),err=o("from_config()"),orr=o(` class
method.`),rrr=l(),nL=a("p"),trr=o("This class cannot be instantiated directly using "),Iue=a("code"),arr=o("__init__()"),nrr=o(" (throws an error)."),srr=l(),Ct=a("div"),F(sL.$$.fragment),lrr=l(),que=a("p"),irr=o("Instantiates one of the base model classes of the library from a configuration."),drr=l(),Pd=a("p"),crr=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),frr=o("not"),mrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),grr=o("from_pretrained()"),hrr=o(" to load the model weights."),prr=l(),F(gT.$$.fragment),urr=l(),Mr=a("div"),F(lL.$$.fragment),_rr=l(),jue=a("p"),brr=o("Instantiate one of the base model classes of the library from a pretrained model."),vrr=l(),Ha=a("p"),Frr=o("The model class to instantiate is selected based on the "),Due=a("code"),Trr=o("model_type"),Mrr=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),Err=o("pretrained_model_name_or_path"),Crr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(":"),yrr=l(),j=a("ul"),hT=a("li"),Vue=a("strong"),Lrr=o("albert"),xrr=o(" \u2014 "),vX=a("a"),$rr=o("TFAlbertModel"),krr=o(" (ALBERT model)"),Srr=l(),pT=a("li"),Xue=a("strong"),Rrr=o("bart"),Brr=o(" \u2014 "),FX=a("a"),Prr=o("TFBartModel"),Irr=o(" (BART model)"),qrr=l(),uT=a("li"),zue=a("strong"),Nrr=o("bert"),jrr=o(" \u2014 "),TX=a("a"),Drr=o("TFBertModel"),Grr=o(" (BERT model)"),Orr=l(),_T=a("li"),Wue=a("strong"),Vrr=o("blenderbot"),Xrr=o(" \u2014 "),MX=a("a"),zrr=o("TFBlenderbotModel"),Wrr=o(" (Blenderbot model)"),Qrr=l(),bT=a("li"),Que=a("strong"),Hrr=o("blenderbot-small"),Urr=o(" \u2014 "),EX=a("a"),Jrr=o("TFBlenderbotSmallModel"),Yrr=o(" (BlenderbotSmall model)"),Krr=l(),vT=a("li"),Hue=a("strong"),Zrr=o("camembert"),etr=o(" \u2014 "),CX=a("a"),otr=o("TFCamembertModel"),rtr=o(" (CamemBERT model)"),ttr=l(),FT=a("li"),Uue=a("strong"),atr=o("clip"),ntr=o(" \u2014 "),wX=a("a"),str=o("TFCLIPModel"),ltr=o(" (CLIP model)"),itr=l(),TT=a("li"),Jue=a("strong"),dtr=o("convbert"),ctr=o(" \u2014 "),AX=a("a"),ftr=o("TFConvBertModel"),mtr=o(" (ConvBERT model)"),gtr=l(),MT=a("li"),Yue=a("strong"),htr=o("convnext"),ptr=o(" \u2014 "),yX=a("a"),utr=o("TFConvNextModel"),_tr=o(" (ConvNext model)"),btr=l(),ET=a("li"),Kue=a("strong"),vtr=o("ctrl"),Ftr=o(" \u2014 "),LX=a("a"),Ttr=o("TFCTRLModel"),Mtr=o(" (CTRL model)"),Etr=l(),CT=a("li"),Zue=a("strong"),Ctr=o("deberta"),wtr=o(" \u2014 "),xX=a("a"),Atr=o("TFDebertaModel"),ytr=o(" (DeBERTa model)"),Ltr=l(),wT=a("li"),e_e=a("strong"),xtr=o("deberta-v2"),$tr=o(" \u2014 "),$X=a("a"),ktr=o("TFDebertaV2Model"),Str=o(" (DeBERTa-v2 model)"),Rtr=l(),AT=a("li"),o_e=a("strong"),Btr=o("distilbert"),Ptr=o(" \u2014 "),kX=a("a"),Itr=o("TFDistilBertModel"),qtr=o(" (DistilBERT model)"),Ntr=l(),yT=a("li"),r_e=a("strong"),jtr=o("dpr"),Dtr=o(" \u2014 "),SX=a("a"),Gtr=o("TFDPRQuestionEncoder"),Otr=o(" (DPR model)"),Vtr=l(),LT=a("li"),t_e=a("strong"),Xtr=o("electra"),ztr=o(" \u2014 "),RX=a("a"),Wtr=o("TFElectraModel"),Qtr=o(" (ELECTRA model)"),Htr=l(),xT=a("li"),a_e=a("strong"),Utr=o("flaubert"),Jtr=o(" \u2014 "),BX=a("a"),Ytr=o("TFFlaubertModel"),Ktr=o(" (FlauBERT model)"),Ztr=l(),xs=a("li"),n_e=a("strong"),ear=o("funnel"),oar=o(" \u2014 "),PX=a("a"),rar=o("TFFunnelModel"),tar=o(" or "),IX=a("a"),aar=o("TFFunnelBaseModel"),nar=o(" (Funnel Transformer model)"),sar=l(),$T=a("li"),s_e=a("strong"),lar=o("gpt2"),iar=o(" \u2014 "),qX=a("a"),dar=o("TFGPT2Model"),car=o(" (OpenAI GPT-2 model)"),far=l(),kT=a("li"),l_e=a("strong"),mar=o("gptj"),gar=o(" \u2014 "),NX=a("a"),har=o("TFGPTJModel"),par=o(" (GPT-J model)"),uar=l(),ST=a("li"),i_e=a("strong"),_ar=o("hubert"),bar=o(" \u2014 "),jX=a("a"),Far=o("TFHubertModel"),Tar=o(" (Hubert model)"),Mar=l(),RT=a("li"),d_e=a("strong"),Ear=o("layoutlm"),Car=o(" \u2014 "),DX=a("a"),war=o("TFLayoutLMModel"),Aar=o(" (LayoutLM model)"),yar=l(),BT=a("li"),c_e=a("strong"),Lar=o("led"),xar=o(" \u2014 "),GX=a("a"),$ar=o("TFLEDModel"),kar=o(" (LED model)"),Sar=l(),PT=a("li"),f_e=a("strong"),Rar=o("longformer"),Bar=o(" \u2014 "),OX=a("a"),Par=o("TFLongformerModel"),Iar=o(" (Longformer model)"),qar=l(),IT=a("li"),m_e=a("strong"),Nar=o("lxmert"),jar=o(" \u2014 "),VX=a("a"),Dar=o("TFLxmertModel"),Gar=o(" (LXMERT model)"),Oar=l(),qT=a("li"),g_e=a("strong"),Var=o("marian"),Xar=o(" \u2014 "),XX=a("a"),zar=o("TFMarianModel"),War=o(" (Marian model)"),Qar=l(),NT=a("li"),h_e=a("strong"),Har=o("mbart"),Uar=o(" \u2014 "),zX=a("a"),Jar=o("TFMBartModel"),Yar=o(" (mBART model)"),Kar=l(),jT=a("li"),p_e=a("strong"),Zar=o("mobilebert"),enr=o(" \u2014 "),WX=a("a"),onr=o("TFMobileBertModel"),rnr=o(" (MobileBERT model)"),tnr=l(),DT=a("li"),u_e=a("strong"),anr=o("mpnet"),nnr=o(" \u2014 "),QX=a("a"),snr=o("TFMPNetModel"),lnr=o(" (MPNet model)"),inr=l(),GT=a("li"),__e=a("strong"),dnr=o("mt5"),cnr=o(" \u2014 "),HX=a("a"),fnr=o("TFMT5Model"),mnr=o(" (mT5 model)"),gnr=l(),OT=a("li"),b_e=a("strong"),hnr=o("openai-gpt"),pnr=o(" \u2014 "),UX=a("a"),unr=o("TFOpenAIGPTModel"),_nr=o(" (OpenAI GPT model)"),bnr=l(),VT=a("li"),v_e=a("strong"),vnr=o("pegasus"),Fnr=o(" \u2014 "),JX=a("a"),Tnr=o("TFPegasusModel"),Mnr=o(" (Pegasus model)"),Enr=l(),XT=a("li"),F_e=a("strong"),Cnr=o("rembert"),wnr=o(" \u2014 "),YX=a("a"),Anr=o("TFRemBertModel"),ynr=o(" (RemBERT model)"),Lnr=l(),zT=a("li"),T_e=a("strong"),xnr=o("roberta"),$nr=o(" \u2014 "),KX=a("a"),knr=o("TFRobertaModel"),Snr=o(" (RoBERTa model)"),Rnr=l(),WT=a("li"),M_e=a("strong"),Bnr=o("roformer"),Pnr=o(" \u2014 "),ZX=a("a"),Inr=o("TFRoFormerModel"),qnr=o(" (RoFormer model)"),Nnr=l(),QT=a("li"),E_e=a("strong"),jnr=o("speech_to_text"),Dnr=o(" \u2014 "),ez=a("a"),Gnr=o("TFSpeech2TextModel"),Onr=o(" (Speech2Text model)"),Vnr=l(),HT=a("li"),C_e=a("strong"),Xnr=o("t5"),znr=o(" \u2014 "),oz=a("a"),Wnr=o("TFT5Model"),Qnr=o(" (T5 model)"),Hnr=l(),UT=a("li"),w_e=a("strong"),Unr=o("tapas"),Jnr=o(" \u2014 "),rz=a("a"),Ynr=o("TFTapasModel"),Knr=o(" (TAPAS model)"),Znr=l(),JT=a("li"),A_e=a("strong"),esr=o("transfo-xl"),osr=o(" \u2014 "),tz=a("a"),rsr=o("TFTransfoXLModel"),tsr=o(" (Transformer-XL model)"),asr=l(),YT=a("li"),y_e=a("strong"),nsr=o("vit"),ssr=o(" \u2014 "),az=a("a"),lsr=o("TFViTModel"),isr=o(" (ViT model)"),dsr=l(),KT=a("li"),L_e=a("strong"),csr=o("vit_mae"),fsr=o(" \u2014 "),nz=a("a"),msr=o("TFViTMAEModel"),gsr=o(" (ViTMAE model)"),hsr=l(),ZT=a("li"),x_e=a("strong"),psr=o("wav2vec2"),usr=o(" \u2014 "),sz=a("a"),_sr=o("TFWav2Vec2Model"),bsr=o(" (Wav2Vec2 model)"),vsr=l(),e8=a("li"),$_e=a("strong"),Fsr=o("xlm"),Tsr=o(" \u2014 "),lz=a("a"),Msr=o("TFXLMModel"),Esr=o(" (XLM model)"),Csr=l(),o8=a("li"),k_e=a("strong"),wsr=o("xlm-roberta"),Asr=o(" \u2014 "),iz=a("a"),ysr=o("TFXLMRobertaModel"),Lsr=o(" (XLM-RoBERTa model)"),xsr=l(),r8=a("li"),S_e=a("strong"),$sr=o("xlnet"),ksr=o(" \u2014 "),dz=a("a"),Ssr=o("TFXLNetModel"),Rsr=o(" (XLNet model)"),Bsr=l(),F(t8.$$.fragment),FPe=l(),Id=a("h2"),a8=a("a"),R_e=a("span"),F(iL.$$.fragment),Psr=l(),B_e=a("span"),Isr=o("TFAutoModelForPreTraining"),TPe=l(),Jo=a("div"),F(dL.$$.fragment),qsr=l(),qd=a("p"),Nsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cz=a("a"),jsr=o("from_pretrained()"),Dsr=o(" class method or the "),fz=a("a"),Gsr=o("from_config()"),Osr=o(` class
method.`),Vsr=l(),cL=a("p"),Xsr=o("This class cannot be instantiated directly using "),P_e=a("code"),zsr=o("__init__()"),Wsr=o(" (throws an error)."),Qsr=l(),wt=a("div"),F(fL.$$.fragment),Hsr=l(),I_e=a("p"),Usr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jsr=l(),Nd=a("p"),Ysr=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),Ksr=o("not"),Zsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),elr=o("from_pretrained()"),olr=o(" to load the model weights."),rlr=l(),F(n8.$$.fragment),tlr=l(),Er=a("div"),F(mL.$$.fragment),alr=l(),N_e=a("p"),nlr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),slr=l(),Ua=a("p"),llr=o("The model class to instantiate is selected based on the "),j_e=a("code"),ilr=o("model_type"),dlr=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),clr=o("pretrained_model_name_or_path"),flr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),mlr=o("pretrained_model_name_or_path"),glr=o(":"),hlr=l(),ne=a("ul"),s8=a("li"),O_e=a("strong"),plr=o("albert"),ulr=o(" \u2014 "),gz=a("a"),_lr=o("TFAlbertForPreTraining"),blr=o(" (ALBERT model)"),vlr=l(),l8=a("li"),V_e=a("strong"),Flr=o("bart"),Tlr=o(" \u2014 "),hz=a("a"),Mlr=o("TFBartForConditionalGeneration"),Elr=o(" (BART model)"),Clr=l(),i8=a("li"),X_e=a("strong"),wlr=o("bert"),Alr=o(" \u2014 "),pz=a("a"),ylr=o("TFBertForPreTraining"),Llr=o(" (BERT model)"),xlr=l(),d8=a("li"),z_e=a("strong"),$lr=o("camembert"),klr=o(" \u2014 "),uz=a("a"),Slr=o("TFCamembertForMaskedLM"),Rlr=o(" (CamemBERT model)"),Blr=l(),c8=a("li"),W_e=a("strong"),Plr=o("ctrl"),Ilr=o(" \u2014 "),_z=a("a"),qlr=o("TFCTRLLMHeadModel"),Nlr=o(" (CTRL model)"),jlr=l(),f8=a("li"),Q_e=a("strong"),Dlr=o("distilbert"),Glr=o(" \u2014 "),bz=a("a"),Olr=o("TFDistilBertForMaskedLM"),Vlr=o(" (DistilBERT model)"),Xlr=l(),m8=a("li"),H_e=a("strong"),zlr=o("electra"),Wlr=o(" \u2014 "),vz=a("a"),Qlr=o("TFElectraForPreTraining"),Hlr=o(" (ELECTRA model)"),Ulr=l(),g8=a("li"),U_e=a("strong"),Jlr=o("flaubert"),Ylr=o(" \u2014 "),Fz=a("a"),Klr=o("TFFlaubertWithLMHeadModel"),Zlr=o(" (FlauBERT model)"),eir=l(),h8=a("li"),J_e=a("strong"),oir=o("funnel"),rir=o(" \u2014 "),Tz=a("a"),tir=o("TFFunnelForPreTraining"),air=o(" (Funnel Transformer model)"),nir=l(),p8=a("li"),Y_e=a("strong"),sir=o("gpt2"),lir=o(" \u2014 "),Mz=a("a"),iir=o("TFGPT2LMHeadModel"),dir=o(" (OpenAI GPT-2 model)"),cir=l(),u8=a("li"),K_e=a("strong"),fir=o("layoutlm"),mir=o(" \u2014 "),Ez=a("a"),gir=o("TFLayoutLMForMaskedLM"),hir=o(" (LayoutLM model)"),pir=l(),_8=a("li"),Z_e=a("strong"),uir=o("lxmert"),_ir=o(" \u2014 "),Cz=a("a"),bir=o("TFLxmertForPreTraining"),vir=o(" (LXMERT model)"),Fir=l(),b8=a("li"),e1e=a("strong"),Tir=o("mobilebert"),Mir=o(" \u2014 "),wz=a("a"),Eir=o("TFMobileBertForPreTraining"),Cir=o(" (MobileBERT model)"),wir=l(),v8=a("li"),o1e=a("strong"),Air=o("mpnet"),yir=o(" \u2014 "),Az=a("a"),Lir=o("TFMPNetForMaskedLM"),xir=o(" (MPNet model)"),$ir=l(),F8=a("li"),r1e=a("strong"),kir=o("openai-gpt"),Sir=o(" \u2014 "),yz=a("a"),Rir=o("TFOpenAIGPTLMHeadModel"),Bir=o(" (OpenAI GPT model)"),Pir=l(),T8=a("li"),t1e=a("strong"),Iir=o("roberta"),qir=o(" \u2014 "),Lz=a("a"),Nir=o("TFRobertaForMaskedLM"),jir=o(" (RoBERTa model)"),Dir=l(),M8=a("li"),a1e=a("strong"),Gir=o("t5"),Oir=o(" \u2014 "),xz=a("a"),Vir=o("TFT5ForConditionalGeneration"),Xir=o(" (T5 model)"),zir=l(),E8=a("li"),n1e=a("strong"),Wir=o("tapas"),Qir=o(" \u2014 "),$z=a("a"),Hir=o("TFTapasForMaskedLM"),Uir=o(" (TAPAS model)"),Jir=l(),C8=a("li"),s1e=a("strong"),Yir=o("transfo-xl"),Kir=o(" \u2014 "),kz=a("a"),Zir=o("TFTransfoXLLMHeadModel"),edr=o(" (Transformer-XL model)"),odr=l(),w8=a("li"),l1e=a("strong"),rdr=o("vit_mae"),tdr=o(" \u2014 "),Sz=a("a"),adr=o("TFViTMAEForPreTraining"),ndr=o(" (ViTMAE model)"),sdr=l(),A8=a("li"),i1e=a("strong"),ldr=o("xlm"),idr=o(" \u2014 "),Rz=a("a"),ddr=o("TFXLMWithLMHeadModel"),cdr=o(" (XLM model)"),fdr=l(),y8=a("li"),d1e=a("strong"),mdr=o("xlm-roberta"),gdr=o(" \u2014 "),Bz=a("a"),hdr=o("TFXLMRobertaForMaskedLM"),pdr=o(" (XLM-RoBERTa model)"),udr=l(),L8=a("li"),c1e=a("strong"),_dr=o("xlnet"),bdr=o(" \u2014 "),Pz=a("a"),vdr=o("TFXLNetLMHeadModel"),Fdr=o(" (XLNet model)"),Tdr=l(),F(x8.$$.fragment),MPe=l(),jd=a("h2"),$8=a("a"),f1e=a("span"),F(gL.$$.fragment),Mdr=l(),m1e=a("span"),Edr=o("TFAutoModelForCausalLM"),EPe=l(),Yo=a("div"),F(hL.$$.fragment),Cdr=l(),Dd=a("p"),wdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Iz=a("a"),Adr=o("from_pretrained()"),ydr=o(" class method or the "),qz=a("a"),Ldr=o("from_config()"),xdr=o(` class
method.`),$dr=l(),pL=a("p"),kdr=o("This class cannot be instantiated directly using "),g1e=a("code"),Sdr=o("__init__()"),Rdr=o(" (throws an error)."),Bdr=l(),At=a("div"),F(uL.$$.fragment),Pdr=l(),h1e=a("p"),Idr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qdr=l(),Gd=a("p"),Ndr=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),jdr=o("not"),Ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),Gdr=o("from_pretrained()"),Odr=o(" to load the model weights."),Vdr=l(),F(k8.$$.fragment),Xdr=l(),Cr=a("div"),F(_L.$$.fragment),zdr=l(),u1e=a("p"),Wdr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qdr=l(),Ja=a("p"),Hdr=o("The model class to instantiate is selected based on the "),_1e=a("code"),Udr=o("model_type"),Jdr=o(` property of the config object (either
passed as an argument or loaded from `),b1e=a("code"),Ydr=o("pretrained_model_name_or_path"),Kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=a("code"),Zdr=o("pretrained_model_name_or_path"),ecr=o(":"),ocr=l(),Te=a("ul"),S8=a("li"),F1e=a("strong"),rcr=o("bert"),tcr=o(" \u2014 "),jz=a("a"),acr=o("TFBertLMHeadModel"),ncr=o(" (BERT model)"),scr=l(),R8=a("li"),T1e=a("strong"),lcr=o("camembert"),icr=o(" \u2014 "),Dz=a("a"),dcr=o("TFCamembertForCausalLM"),ccr=o(" (CamemBERT model)"),fcr=l(),B8=a("li"),M1e=a("strong"),mcr=o("ctrl"),gcr=o(" \u2014 "),Gz=a("a"),hcr=o("TFCTRLLMHeadModel"),pcr=o(" (CTRL model)"),ucr=l(),P8=a("li"),E1e=a("strong"),_cr=o("gpt2"),bcr=o(" \u2014 "),Oz=a("a"),vcr=o("TFGPT2LMHeadModel"),Fcr=o(" (OpenAI GPT-2 model)"),Tcr=l(),I8=a("li"),C1e=a("strong"),Mcr=o("gptj"),Ecr=o(" \u2014 "),Vz=a("a"),Ccr=o("TFGPTJForCausalLM"),wcr=o(" (GPT-J model)"),Acr=l(),q8=a("li"),w1e=a("strong"),ycr=o("openai-gpt"),Lcr=o(" \u2014 "),Xz=a("a"),xcr=o("TFOpenAIGPTLMHeadModel"),$cr=o(" (OpenAI GPT model)"),kcr=l(),N8=a("li"),A1e=a("strong"),Scr=o("rembert"),Rcr=o(" \u2014 "),zz=a("a"),Bcr=o("TFRemBertForCausalLM"),Pcr=o(" (RemBERT model)"),Icr=l(),j8=a("li"),y1e=a("strong"),qcr=o("roberta"),Ncr=o(" \u2014 "),Wz=a("a"),jcr=o("TFRobertaForCausalLM"),Dcr=o(" (RoBERTa model)"),Gcr=l(),D8=a("li"),L1e=a("strong"),Ocr=o("roformer"),Vcr=o(" \u2014 "),Qz=a("a"),Xcr=o("TFRoFormerForCausalLM"),zcr=o(" (RoFormer model)"),Wcr=l(),G8=a("li"),x1e=a("strong"),Qcr=o("transfo-xl"),Hcr=o(" \u2014 "),Hz=a("a"),Ucr=o("TFTransfoXLLMHeadModel"),Jcr=o(" (Transformer-XL model)"),Ycr=l(),O8=a("li"),$1e=a("strong"),Kcr=o("xlm"),Zcr=o(" \u2014 "),Uz=a("a"),efr=o("TFXLMWithLMHeadModel"),ofr=o(" (XLM model)"),rfr=l(),V8=a("li"),k1e=a("strong"),tfr=o("xlnet"),afr=o(" \u2014 "),Jz=a("a"),nfr=o("TFXLNetLMHeadModel"),sfr=o(" (XLNet model)"),lfr=l(),F(X8.$$.fragment),CPe=l(),Od=a("h2"),z8=a("a"),S1e=a("span"),F(bL.$$.fragment),ifr=l(),R1e=a("span"),dfr=o("TFAutoModelForImageClassification"),wPe=l(),Ko=a("div"),F(vL.$$.fragment),cfr=l(),Vd=a("p"),ffr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yz=a("a"),mfr=o("from_pretrained()"),gfr=o(" class method or the "),Kz=a("a"),hfr=o("from_config()"),pfr=o(` class
method.`),ufr=l(),FL=a("p"),_fr=o("This class cannot be instantiated directly using "),B1e=a("code"),bfr=o("__init__()"),vfr=o(" (throws an error)."),Ffr=l(),yt=a("div"),F(TL.$$.fragment),Tfr=l(),P1e=a("p"),Mfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Efr=l(),Xd=a("p"),Cfr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),wfr=o("not"),Afr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),yfr=o("from_pretrained()"),Lfr=o(" to load the model weights."),xfr=l(),F(W8.$$.fragment),$fr=l(),wr=a("div"),F(ML.$$.fragment),kfr=l(),q1e=a("p"),Sfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rfr=l(),Ya=a("p"),Bfr=o("The model class to instantiate is selected based on the "),N1e=a("code"),Pfr=o("model_type"),Ifr=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),qfr=o("pretrained_model_name_or_path"),Nfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),jfr=o("pretrained_model_name_or_path"),Dfr=o(":"),Gfr=l(),EL=a("ul"),Q8=a("li"),G1e=a("strong"),Ofr=o("convnext"),Vfr=o(" \u2014 "),eW=a("a"),Xfr=o("TFConvNextForImageClassification"),zfr=o(" (ConvNext model)"),Wfr=l(),H8=a("li"),O1e=a("strong"),Qfr=o("vit"),Hfr=o(" \u2014 "),oW=a("a"),Ufr=o("TFViTForImageClassification"),Jfr=o(" (ViT model)"),Yfr=l(),F(U8.$$.fragment),APe=l(),zd=a("h2"),J8=a("a"),V1e=a("span"),F(CL.$$.fragment),Kfr=l(),X1e=a("span"),Zfr=o("TFAutoModelForMaskedLM"),yPe=l(),Zo=a("div"),F(wL.$$.fragment),emr=l(),Wd=a("p"),omr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rW=a("a"),rmr=o("from_pretrained()"),tmr=o(" class method or the "),tW=a("a"),amr=o("from_config()"),nmr=o(` class
method.`),smr=l(),AL=a("p"),lmr=o("This class cannot be instantiated directly using "),z1e=a("code"),imr=o("__init__()"),dmr=o(" (throws an error)."),cmr=l(),Lt=a("div"),F(yL.$$.fragment),fmr=l(),W1e=a("p"),mmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gmr=l(),Qd=a("p"),hmr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),pmr=o("not"),umr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),_mr=o("from_pretrained()"),bmr=o(" to load the model weights."),vmr=l(),F(Y8.$$.fragment),Fmr=l(),Ar=a("div"),F(LL.$$.fragment),Tmr=l(),H1e=a("p"),Mmr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Emr=l(),Ka=a("p"),Cmr=o("The model class to instantiate is selected based on the "),U1e=a("code"),wmr=o("model_type"),Amr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),ymr=o("pretrained_model_name_or_path"),Lmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),xmr=o("pretrained_model_name_or_path"),$mr=o(":"),kmr=l(),ie=a("ul"),K8=a("li"),K1e=a("strong"),Smr=o("albert"),Rmr=o(" \u2014 "),nW=a("a"),Bmr=o("TFAlbertForMaskedLM"),Pmr=o(" (ALBERT model)"),Imr=l(),Z8=a("li"),Z1e=a("strong"),qmr=o("bert"),Nmr=o(" \u2014 "),sW=a("a"),jmr=o("TFBertForMaskedLM"),Dmr=o(" (BERT model)"),Gmr=l(),eM=a("li"),e2e=a("strong"),Omr=o("camembert"),Vmr=o(" \u2014 "),lW=a("a"),Xmr=o("TFCamembertForMaskedLM"),zmr=o(" (CamemBERT model)"),Wmr=l(),oM=a("li"),o2e=a("strong"),Qmr=o("convbert"),Hmr=o(" \u2014 "),iW=a("a"),Umr=o("TFConvBertForMaskedLM"),Jmr=o(" (ConvBERT model)"),Ymr=l(),rM=a("li"),r2e=a("strong"),Kmr=o("deberta"),Zmr=o(" \u2014 "),dW=a("a"),egr=o("TFDebertaForMaskedLM"),ogr=o(" (DeBERTa model)"),rgr=l(),tM=a("li"),t2e=a("strong"),tgr=o("deberta-v2"),agr=o(" \u2014 "),cW=a("a"),ngr=o("TFDebertaV2ForMaskedLM"),sgr=o(" (DeBERTa-v2 model)"),lgr=l(),aM=a("li"),a2e=a("strong"),igr=o("distilbert"),dgr=o(" \u2014 "),fW=a("a"),cgr=o("TFDistilBertForMaskedLM"),fgr=o(" (DistilBERT model)"),mgr=l(),nM=a("li"),n2e=a("strong"),ggr=o("electra"),hgr=o(" \u2014 "),mW=a("a"),pgr=o("TFElectraForMaskedLM"),ugr=o(" (ELECTRA model)"),_gr=l(),sM=a("li"),s2e=a("strong"),bgr=o("flaubert"),vgr=o(" \u2014 "),gW=a("a"),Fgr=o("TFFlaubertWithLMHeadModel"),Tgr=o(" (FlauBERT model)"),Mgr=l(),lM=a("li"),l2e=a("strong"),Egr=o("funnel"),Cgr=o(" \u2014 "),hW=a("a"),wgr=o("TFFunnelForMaskedLM"),Agr=o(" (Funnel Transformer model)"),ygr=l(),iM=a("li"),i2e=a("strong"),Lgr=o("layoutlm"),xgr=o(" \u2014 "),pW=a("a"),$gr=o("TFLayoutLMForMaskedLM"),kgr=o(" (LayoutLM model)"),Sgr=l(),dM=a("li"),d2e=a("strong"),Rgr=o("longformer"),Bgr=o(" \u2014 "),uW=a("a"),Pgr=o("TFLongformerForMaskedLM"),Igr=o(" (Longformer model)"),qgr=l(),cM=a("li"),c2e=a("strong"),Ngr=o("mobilebert"),jgr=o(" \u2014 "),_W=a("a"),Dgr=o("TFMobileBertForMaskedLM"),Ggr=o(" (MobileBERT model)"),Ogr=l(),fM=a("li"),f2e=a("strong"),Vgr=o("mpnet"),Xgr=o(" \u2014 "),bW=a("a"),zgr=o("TFMPNetForMaskedLM"),Wgr=o(" (MPNet model)"),Qgr=l(),mM=a("li"),m2e=a("strong"),Hgr=o("rembert"),Ugr=o(" \u2014 "),vW=a("a"),Jgr=o("TFRemBertForMaskedLM"),Ygr=o(" (RemBERT model)"),Kgr=l(),gM=a("li"),g2e=a("strong"),Zgr=o("roberta"),ehr=o(" \u2014 "),FW=a("a"),ohr=o("TFRobertaForMaskedLM"),rhr=o(" (RoBERTa model)"),thr=l(),hM=a("li"),h2e=a("strong"),ahr=o("roformer"),nhr=o(" \u2014 "),TW=a("a"),shr=o("TFRoFormerForMaskedLM"),lhr=o(" (RoFormer model)"),ihr=l(),pM=a("li"),p2e=a("strong"),dhr=o("tapas"),chr=o(" \u2014 "),MW=a("a"),fhr=o("TFTapasForMaskedLM"),mhr=o(" (TAPAS model)"),ghr=l(),uM=a("li"),u2e=a("strong"),hhr=o("xlm"),phr=o(" \u2014 "),EW=a("a"),uhr=o("TFXLMWithLMHeadModel"),_hr=o(" (XLM model)"),bhr=l(),_M=a("li"),_2e=a("strong"),vhr=o("xlm-roberta"),Fhr=o(" \u2014 "),CW=a("a"),Thr=o("TFXLMRobertaForMaskedLM"),Mhr=o(" (XLM-RoBERTa model)"),Ehr=l(),F(bM.$$.fragment),LPe=l(),Hd=a("h2"),vM=a("a"),b2e=a("span"),F(xL.$$.fragment),Chr=l(),v2e=a("span"),whr=o("TFAutoModelForSeq2SeqLM"),xPe=l(),er=a("div"),F($L.$$.fragment),Ahr=l(),Ud=a("p"),yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wW=a("a"),Lhr=o("from_pretrained()"),xhr=o(" class method or the "),AW=a("a"),$hr=o("from_config()"),khr=o(` class
method.`),Shr=l(),kL=a("p"),Rhr=o("This class cannot be instantiated directly using "),F2e=a("code"),Bhr=o("__init__()"),Phr=o(" (throws an error)."),Ihr=l(),xt=a("div"),F(SL.$$.fragment),qhr=l(),T2e=a("p"),Nhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jhr=l(),Jd=a("p"),Dhr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),Ghr=o("not"),Ohr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),Vhr=o("from_pretrained()"),Xhr=o(" to load the model weights."),zhr=l(),F(FM.$$.fragment),Whr=l(),yr=a("div"),F(RL.$$.fragment),Qhr=l(),E2e=a("p"),Hhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Uhr=l(),Za=a("p"),Jhr=o("The model class to instantiate is selected based on the "),C2e=a("code"),Yhr=o("model_type"),Khr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),Zhr=o("pretrained_model_name_or_path"),epr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(":"),tpr=l(),ye=a("ul"),TM=a("li"),y2e=a("strong"),apr=o("bart"),npr=o(" \u2014 "),LW=a("a"),spr=o("TFBartForConditionalGeneration"),lpr=o(" (BART model)"),ipr=l(),MM=a("li"),L2e=a("strong"),dpr=o("blenderbot"),cpr=o(" \u2014 "),xW=a("a"),fpr=o("TFBlenderbotForConditionalGeneration"),mpr=o(" (Blenderbot model)"),gpr=l(),EM=a("li"),x2e=a("strong"),hpr=o("blenderbot-small"),ppr=o(" \u2014 "),$W=a("a"),upr=o("TFBlenderbotSmallForConditionalGeneration"),_pr=o(" (BlenderbotSmall model)"),bpr=l(),CM=a("li"),$2e=a("strong"),vpr=o("encoder-decoder"),Fpr=o(" \u2014 "),kW=a("a"),Tpr=o("TFEncoderDecoderModel"),Mpr=o(" (Encoder decoder model)"),Epr=l(),wM=a("li"),k2e=a("strong"),Cpr=o("led"),wpr=o(" \u2014 "),SW=a("a"),Apr=o("TFLEDForConditionalGeneration"),ypr=o(" (LED model)"),Lpr=l(),AM=a("li"),S2e=a("strong"),xpr=o("marian"),$pr=o(" \u2014 "),RW=a("a"),kpr=o("TFMarianMTModel"),Spr=o(" (Marian model)"),Rpr=l(),yM=a("li"),R2e=a("strong"),Bpr=o("mbart"),Ppr=o(" \u2014 "),BW=a("a"),Ipr=o("TFMBartForConditionalGeneration"),qpr=o(" (mBART model)"),Npr=l(),LM=a("li"),B2e=a("strong"),jpr=o("mt5"),Dpr=o(" \u2014 "),PW=a("a"),Gpr=o("TFMT5ForConditionalGeneration"),Opr=o(" (mT5 model)"),Vpr=l(),xM=a("li"),P2e=a("strong"),Xpr=o("pegasus"),zpr=o(" \u2014 "),IW=a("a"),Wpr=o("TFPegasusForConditionalGeneration"),Qpr=o(" (Pegasus model)"),Hpr=l(),$M=a("li"),I2e=a("strong"),Upr=o("t5"),Jpr=o(" \u2014 "),qW=a("a"),Ypr=o("TFT5ForConditionalGeneration"),Kpr=o(" (T5 model)"),Zpr=l(),F(kM.$$.fragment),$Pe=l(),Yd=a("h2"),SM=a("a"),q2e=a("span"),F(BL.$$.fragment),eur=l(),N2e=a("span"),our=o("TFAutoModelForSequenceClassification"),kPe=l(),or=a("div"),F(PL.$$.fragment),rur=l(),Kd=a("p"),tur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NW=a("a"),aur=o("from_pretrained()"),nur=o(" class method or the "),jW=a("a"),sur=o("from_config()"),lur=o(` class
method.`),iur=l(),IL=a("p"),dur=o("This class cannot be instantiated directly using "),j2e=a("code"),cur=o("__init__()"),fur=o(" (throws an error)."),mur=l(),$t=a("div"),F(qL.$$.fragment),gur=l(),D2e=a("p"),hur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pur=l(),Zd=a("p"),uur=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),_ur=o("not"),bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),vur=o("from_pretrained()"),Fur=o(" to load the model weights."),Tur=l(),F(RM.$$.fragment),Mur=l(),Lr=a("div"),F(NL.$$.fragment),Eur=l(),O2e=a("p"),Cur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wur=l(),en=a("p"),Aur=o("The model class to instantiate is selected based on the "),V2e=a("code"),yur=o("model_type"),Lur=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),xur=o("pretrained_model_name_or_path"),$ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),kur=o("pretrained_model_name_or_path"),Sur=o(":"),Rur=l(),Z=a("ul"),BM=a("li"),W2e=a("strong"),Bur=o("albert"),Pur=o(" \u2014 "),GW=a("a"),Iur=o("TFAlbertForSequenceClassification"),qur=o(" (ALBERT model)"),Nur=l(),PM=a("li"),Q2e=a("strong"),jur=o("bert"),Dur=o(" \u2014 "),OW=a("a"),Gur=o("TFBertForSequenceClassification"),Our=o(" (BERT model)"),Vur=l(),IM=a("li"),H2e=a("strong"),Xur=o("camembert"),zur=o(" \u2014 "),VW=a("a"),Wur=o("TFCamembertForSequenceClassification"),Qur=o(" (CamemBERT model)"),Hur=l(),qM=a("li"),U2e=a("strong"),Uur=o("convbert"),Jur=o(" \u2014 "),XW=a("a"),Yur=o("TFConvBertForSequenceClassification"),Kur=o(" (ConvBERT model)"),Zur=l(),NM=a("li"),J2e=a("strong"),e_r=o("ctrl"),o_r=o(" \u2014 "),zW=a("a"),r_r=o("TFCTRLForSequenceClassification"),t_r=o(" (CTRL model)"),a_r=l(),jM=a("li"),Y2e=a("strong"),n_r=o("deberta"),s_r=o(" \u2014 "),WW=a("a"),l_r=o("TFDebertaForSequenceClassification"),i_r=o(" (DeBERTa model)"),d_r=l(),DM=a("li"),K2e=a("strong"),c_r=o("deberta-v2"),f_r=o(" \u2014 "),QW=a("a"),m_r=o("TFDebertaV2ForSequenceClassification"),g_r=o(" (DeBERTa-v2 model)"),h_r=l(),GM=a("li"),Z2e=a("strong"),p_r=o("distilbert"),u_r=o(" \u2014 "),HW=a("a"),__r=o("TFDistilBertForSequenceClassification"),b_r=o(" (DistilBERT model)"),v_r=l(),OM=a("li"),ebe=a("strong"),F_r=o("electra"),T_r=o(" \u2014 "),UW=a("a"),M_r=o("TFElectraForSequenceClassification"),E_r=o(" (ELECTRA model)"),C_r=l(),VM=a("li"),obe=a("strong"),w_r=o("flaubert"),A_r=o(" \u2014 "),JW=a("a"),y_r=o("TFFlaubertForSequenceClassification"),L_r=o(" (FlauBERT model)"),x_r=l(),XM=a("li"),rbe=a("strong"),$_r=o("funnel"),k_r=o(" \u2014 "),YW=a("a"),S_r=o("TFFunnelForSequenceClassification"),R_r=o(" (Funnel Transformer model)"),B_r=l(),zM=a("li"),tbe=a("strong"),P_r=o("gpt2"),I_r=o(" \u2014 "),KW=a("a"),q_r=o("TFGPT2ForSequenceClassification"),N_r=o(" (OpenAI GPT-2 model)"),j_r=l(),WM=a("li"),abe=a("strong"),D_r=o("gptj"),G_r=o(" \u2014 "),ZW=a("a"),O_r=o("TFGPTJForSequenceClassification"),V_r=o(" (GPT-J model)"),X_r=l(),QM=a("li"),nbe=a("strong"),z_r=o("layoutlm"),W_r=o(" \u2014 "),eQ=a("a"),Q_r=o("TFLayoutLMForSequenceClassification"),H_r=o(" (LayoutLM model)"),U_r=l(),HM=a("li"),sbe=a("strong"),J_r=o("longformer"),Y_r=o(" \u2014 "),oQ=a("a"),K_r=o("TFLongformerForSequenceClassification"),Z_r=o(" (Longformer model)"),e1r=l(),UM=a("li"),lbe=a("strong"),o1r=o("mobilebert"),r1r=o(" \u2014 "),rQ=a("a"),t1r=o("TFMobileBertForSequenceClassification"),a1r=o(" (MobileBERT model)"),n1r=l(),JM=a("li"),ibe=a("strong"),s1r=o("mpnet"),l1r=o(" \u2014 "),tQ=a("a"),i1r=o("TFMPNetForSequenceClassification"),d1r=o(" (MPNet model)"),c1r=l(),YM=a("li"),dbe=a("strong"),f1r=o("openai-gpt"),m1r=o(" \u2014 "),aQ=a("a"),g1r=o("TFOpenAIGPTForSequenceClassification"),h1r=o(" (OpenAI GPT model)"),p1r=l(),KM=a("li"),cbe=a("strong"),u1r=o("rembert"),_1r=o(" \u2014 "),nQ=a("a"),b1r=o("TFRemBertForSequenceClassification"),v1r=o(" (RemBERT model)"),F1r=l(),ZM=a("li"),fbe=a("strong"),T1r=o("roberta"),M1r=o(" \u2014 "),sQ=a("a"),E1r=o("TFRobertaForSequenceClassification"),C1r=o(" (RoBERTa model)"),w1r=l(),e4=a("li"),mbe=a("strong"),A1r=o("roformer"),y1r=o(" \u2014 "),lQ=a("a"),L1r=o("TFRoFormerForSequenceClassification"),x1r=o(" (RoFormer model)"),$1r=l(),o4=a("li"),gbe=a("strong"),k1r=o("tapas"),S1r=o(" \u2014 "),iQ=a("a"),R1r=o("TFTapasForSequenceClassification"),B1r=o(" (TAPAS model)"),P1r=l(),r4=a("li"),hbe=a("strong"),I1r=o("transfo-xl"),q1r=o(" \u2014 "),dQ=a("a"),N1r=o("TFTransfoXLForSequenceClassification"),j1r=o(" (Transformer-XL model)"),D1r=l(),t4=a("li"),pbe=a("strong"),G1r=o("xlm"),O1r=o(" \u2014 "),cQ=a("a"),V1r=o("TFXLMForSequenceClassification"),X1r=o(" (XLM model)"),z1r=l(),a4=a("li"),ube=a("strong"),W1r=o("xlm-roberta"),Q1r=o(" \u2014 "),fQ=a("a"),H1r=o("TFXLMRobertaForSequenceClassification"),U1r=o(" (XLM-RoBERTa model)"),J1r=l(),n4=a("li"),_be=a("strong"),Y1r=o("xlnet"),K1r=o(" \u2014 "),mQ=a("a"),Z1r=o("TFXLNetForSequenceClassification"),e2r=o(" (XLNet model)"),o2r=l(),F(s4.$$.fragment),SPe=l(),ec=a("h2"),l4=a("a"),bbe=a("span"),F(jL.$$.fragment),r2r=l(),vbe=a("span"),t2r=o("TFAutoModelForMultipleChoice"),RPe=l(),rr=a("div"),F(DL.$$.fragment),a2r=l(),oc=a("p"),n2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gQ=a("a"),s2r=o("from_pretrained()"),l2r=o(" class method or the "),hQ=a("a"),i2r=o("from_config()"),d2r=o(` class
method.`),c2r=l(),GL=a("p"),f2r=o("This class cannot be instantiated directly using "),Fbe=a("code"),m2r=o("__init__()"),g2r=o(" (throws an error)."),h2r=l(),kt=a("div"),F(OL.$$.fragment),p2r=l(),Tbe=a("p"),u2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_2r=l(),rc=a("p"),b2r=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),v2r=o("not"),F2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),T2r=o("from_pretrained()"),M2r=o(" to load the model weights."),E2r=l(),F(i4.$$.fragment),C2r=l(),xr=a("div"),F(VL.$$.fragment),w2r=l(),Ebe=a("p"),A2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y2r=l(),on=a("p"),L2r=o("The model class to instantiate is selected based on the "),Cbe=a("code"),x2r=o("model_type"),$2r=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),k2r=o("pretrained_model_name_or_path"),S2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),R2r=o("pretrained_model_name_or_path"),B2r=o(":"),P2r=l(),pe=a("ul"),d4=a("li"),ybe=a("strong"),I2r=o("albert"),q2r=o(" \u2014 "),uQ=a("a"),N2r=o("TFAlbertForMultipleChoice"),j2r=o(" (ALBERT model)"),D2r=l(),c4=a("li"),Lbe=a("strong"),G2r=o("bert"),O2r=o(" \u2014 "),_Q=a("a"),V2r=o("TFBertForMultipleChoice"),X2r=o(" (BERT model)"),z2r=l(),f4=a("li"),xbe=a("strong"),W2r=o("camembert"),Q2r=o(" \u2014 "),bQ=a("a"),H2r=o("TFCamembertForMultipleChoice"),U2r=o(" (CamemBERT model)"),J2r=l(),m4=a("li"),$be=a("strong"),Y2r=o("convbert"),K2r=o(" \u2014 "),vQ=a("a"),Z2r=o("TFConvBertForMultipleChoice"),ebr=o(" (ConvBERT model)"),obr=l(),g4=a("li"),kbe=a("strong"),rbr=o("distilbert"),tbr=o(" \u2014 "),FQ=a("a"),abr=o("TFDistilBertForMultipleChoice"),nbr=o(" (DistilBERT model)"),sbr=l(),h4=a("li"),Sbe=a("strong"),lbr=o("electra"),ibr=o(" \u2014 "),TQ=a("a"),dbr=o("TFElectraForMultipleChoice"),cbr=o(" (ELECTRA model)"),fbr=l(),p4=a("li"),Rbe=a("strong"),mbr=o("flaubert"),gbr=o(" \u2014 "),MQ=a("a"),hbr=o("TFFlaubertForMultipleChoice"),pbr=o(" (FlauBERT model)"),ubr=l(),u4=a("li"),Bbe=a("strong"),_br=o("funnel"),bbr=o(" \u2014 "),EQ=a("a"),vbr=o("TFFunnelForMultipleChoice"),Fbr=o(" (Funnel Transformer model)"),Tbr=l(),_4=a("li"),Pbe=a("strong"),Mbr=o("longformer"),Ebr=o(" \u2014 "),CQ=a("a"),Cbr=o("TFLongformerForMultipleChoice"),wbr=o(" (Longformer model)"),Abr=l(),b4=a("li"),Ibe=a("strong"),ybr=o("mobilebert"),Lbr=o(" \u2014 "),wQ=a("a"),xbr=o("TFMobileBertForMultipleChoice"),$br=o(" (MobileBERT model)"),kbr=l(),v4=a("li"),qbe=a("strong"),Sbr=o("mpnet"),Rbr=o(" \u2014 "),AQ=a("a"),Bbr=o("TFMPNetForMultipleChoice"),Pbr=o(" (MPNet model)"),Ibr=l(),F4=a("li"),Nbe=a("strong"),qbr=o("rembert"),Nbr=o(" \u2014 "),yQ=a("a"),jbr=o("TFRemBertForMultipleChoice"),Dbr=o(" (RemBERT model)"),Gbr=l(),T4=a("li"),jbe=a("strong"),Obr=o("roberta"),Vbr=o(" \u2014 "),LQ=a("a"),Xbr=o("TFRobertaForMultipleChoice"),zbr=o(" (RoBERTa model)"),Wbr=l(),M4=a("li"),Dbe=a("strong"),Qbr=o("roformer"),Hbr=o(" \u2014 "),xQ=a("a"),Ubr=o("TFRoFormerForMultipleChoice"),Jbr=o(" (RoFormer model)"),Ybr=l(),E4=a("li"),Gbe=a("strong"),Kbr=o("xlm"),Zbr=o(" \u2014 "),$Q=a("a"),evr=o("TFXLMForMultipleChoice"),ovr=o(" (XLM model)"),rvr=l(),C4=a("li"),Obe=a("strong"),tvr=o("xlm-roberta"),avr=o(" \u2014 "),kQ=a("a"),nvr=o("TFXLMRobertaForMultipleChoice"),svr=o(" (XLM-RoBERTa model)"),lvr=l(),w4=a("li"),Vbe=a("strong"),ivr=o("xlnet"),dvr=o(" \u2014 "),SQ=a("a"),cvr=o("TFXLNetForMultipleChoice"),fvr=o(" (XLNet model)"),mvr=l(),F(A4.$$.fragment),BPe=l(),tc=a("h2"),y4=a("a"),Xbe=a("span"),F(XL.$$.fragment),gvr=l(),zbe=a("span"),hvr=o("TFAutoModelForTableQuestionAnswering"),PPe=l(),tr=a("div"),F(zL.$$.fragment),pvr=l(),ac=a("p"),uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RQ=a("a"),_vr=o("from_pretrained()"),bvr=o(" class method or the "),BQ=a("a"),vvr=o("from_config()"),Fvr=o(` class
method.`),Tvr=l(),WL=a("p"),Mvr=o("This class cannot be instantiated directly using "),Wbe=a("code"),Evr=o("__init__()"),Cvr=o(" (throws an error)."),wvr=l(),St=a("div"),F(QL.$$.fragment),Avr=l(),Qbe=a("p"),yvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lvr=l(),nc=a("p"),xvr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),$vr=o("not"),kvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),Svr=o("from_pretrained()"),Rvr=o(" to load the model weights."),Bvr=l(),F(L4.$$.fragment),Pvr=l(),$r=a("div"),F(HL.$$.fragment),Ivr=l(),Ube=a("p"),qvr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nvr=l(),rn=a("p"),jvr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),Dvr=o("model_type"),Gvr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),Ovr=o("pretrained_model_name_or_path"),Vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(":"),Wvr=l(),Zbe=a("ul"),x4=a("li"),eve=a("strong"),Qvr=o("tapas"),Hvr=o(" \u2014 "),IQ=a("a"),Uvr=o("TFTapasForQuestionAnswering"),Jvr=o(" (TAPAS model)"),Yvr=l(),F($4.$$.fragment),IPe=l(),sc=a("h2"),k4=a("a"),ove=a("span"),F(UL.$$.fragment),Kvr=l(),rve=a("span"),Zvr=o("TFAutoModelForTokenClassification"),qPe=l(),ar=a("div"),F(JL.$$.fragment),eFr=l(),lc=a("p"),oFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qQ=a("a"),rFr=o("from_pretrained()"),tFr=o(" class method or the "),NQ=a("a"),aFr=o("from_config()"),nFr=o(` class
method.`),sFr=l(),YL=a("p"),lFr=o("This class cannot be instantiated directly using "),tve=a("code"),iFr=o("__init__()"),dFr=o(" (throws an error)."),cFr=l(),Rt=a("div"),F(KL.$$.fragment),fFr=l(),ave=a("p"),mFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gFr=l(),ic=a("p"),hFr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),pFr=o("not"),uFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),_Fr=o("from_pretrained()"),bFr=o(" to load the model weights."),vFr=l(),F(S4.$$.fragment),FFr=l(),kr=a("div"),F(ZL.$$.fragment),TFr=l(),sve=a("p"),MFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EFr=l(),tn=a("p"),CFr=o("The model class to instantiate is selected based on the "),lve=a("code"),wFr=o("model_type"),AFr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),yFr=o("pretrained_model_name_or_path"),LFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),xFr=o("pretrained_model_name_or_path"),$Fr=o(":"),kFr=l(),de=a("ul"),R4=a("li"),cve=a("strong"),SFr=o("albert"),RFr=o(" \u2014 "),DQ=a("a"),BFr=o("TFAlbertForTokenClassification"),PFr=o(" (ALBERT model)"),IFr=l(),B4=a("li"),fve=a("strong"),qFr=o("bert"),NFr=o(" \u2014 "),GQ=a("a"),jFr=o("TFBertForTokenClassification"),DFr=o(" (BERT model)"),GFr=l(),P4=a("li"),mve=a("strong"),OFr=o("camembert"),VFr=o(" \u2014 "),OQ=a("a"),XFr=o("TFCamembertForTokenClassification"),zFr=o(" (CamemBERT model)"),WFr=l(),I4=a("li"),gve=a("strong"),QFr=o("convbert"),HFr=o(" \u2014 "),VQ=a("a"),UFr=o("TFConvBertForTokenClassification"),JFr=o(" (ConvBERT model)"),YFr=l(),q4=a("li"),hve=a("strong"),KFr=o("deberta"),ZFr=o(" \u2014 "),XQ=a("a"),e6r=o("TFDebertaForTokenClassification"),o6r=o(" (DeBERTa model)"),r6r=l(),N4=a("li"),pve=a("strong"),t6r=o("deberta-v2"),a6r=o(" \u2014 "),zQ=a("a"),n6r=o("TFDebertaV2ForTokenClassification"),s6r=o(" (DeBERTa-v2 model)"),l6r=l(),j4=a("li"),uve=a("strong"),i6r=o("distilbert"),d6r=o(" \u2014 "),WQ=a("a"),c6r=o("TFDistilBertForTokenClassification"),f6r=o(" (DistilBERT model)"),m6r=l(),D4=a("li"),_ve=a("strong"),g6r=o("electra"),h6r=o(" \u2014 "),QQ=a("a"),p6r=o("TFElectraForTokenClassification"),u6r=o(" (ELECTRA model)"),_6r=l(),G4=a("li"),bve=a("strong"),b6r=o("flaubert"),v6r=o(" \u2014 "),HQ=a("a"),F6r=o("TFFlaubertForTokenClassification"),T6r=o(" (FlauBERT model)"),M6r=l(),O4=a("li"),vve=a("strong"),E6r=o("funnel"),C6r=o(" \u2014 "),UQ=a("a"),w6r=o("TFFunnelForTokenClassification"),A6r=o(" (Funnel Transformer model)"),y6r=l(),V4=a("li"),Fve=a("strong"),L6r=o("layoutlm"),x6r=o(" \u2014 "),JQ=a("a"),$6r=o("TFLayoutLMForTokenClassification"),k6r=o(" (LayoutLM model)"),S6r=l(),X4=a("li"),Tve=a("strong"),R6r=o("longformer"),B6r=o(" \u2014 "),YQ=a("a"),P6r=o("TFLongformerForTokenClassification"),I6r=o(" (Longformer model)"),q6r=l(),z4=a("li"),Mve=a("strong"),N6r=o("mobilebert"),j6r=o(" \u2014 "),KQ=a("a"),D6r=o("TFMobileBertForTokenClassification"),G6r=o(" (MobileBERT model)"),O6r=l(),W4=a("li"),Eve=a("strong"),V6r=o("mpnet"),X6r=o(" \u2014 "),ZQ=a("a"),z6r=o("TFMPNetForTokenClassification"),W6r=o(" (MPNet model)"),Q6r=l(),Q4=a("li"),Cve=a("strong"),H6r=o("rembert"),U6r=o(" \u2014 "),eH=a("a"),J6r=o("TFRemBertForTokenClassification"),Y6r=o(" (RemBERT model)"),K6r=l(),H4=a("li"),wve=a("strong"),Z6r=o("roberta"),eTr=o(" \u2014 "),oH=a("a"),oTr=o("TFRobertaForTokenClassification"),rTr=o(" (RoBERTa model)"),tTr=l(),U4=a("li"),Ave=a("strong"),aTr=o("roformer"),nTr=o(" \u2014 "),rH=a("a"),sTr=o("TFRoFormerForTokenClassification"),lTr=o(" (RoFormer model)"),iTr=l(),J4=a("li"),yve=a("strong"),dTr=o("xlm"),cTr=o(" \u2014 "),tH=a("a"),fTr=o("TFXLMForTokenClassification"),mTr=o(" (XLM model)"),gTr=l(),Y4=a("li"),Lve=a("strong"),hTr=o("xlm-roberta"),pTr=o(" \u2014 "),aH=a("a"),uTr=o("TFXLMRobertaForTokenClassification"),_Tr=o(" (XLM-RoBERTa model)"),bTr=l(),K4=a("li"),xve=a("strong"),vTr=o("xlnet"),FTr=o(" \u2014 "),nH=a("a"),TTr=o("TFXLNetForTokenClassification"),MTr=o(" (XLNet model)"),ETr=l(),F(Z4.$$.fragment),NPe=l(),dc=a("h2"),eE=a("a"),$ve=a("span"),F(e7.$$.fragment),CTr=l(),kve=a("span"),wTr=o("TFAutoModelForQuestionAnswering"),jPe=l(),nr=a("div"),F(o7.$$.fragment),ATr=l(),cc=a("p"),yTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sH=a("a"),LTr=o("from_pretrained()"),xTr=o(" class method or the "),lH=a("a"),$Tr=o("from_config()"),kTr=o(` class
method.`),STr=l(),r7=a("p"),RTr=o("This class cannot be instantiated directly using "),Sve=a("code"),BTr=o("__init__()"),PTr=o(" (throws an error)."),ITr=l(),Bt=a("div"),F(t7.$$.fragment),qTr=l(),Rve=a("p"),NTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jTr=l(),fc=a("p"),DTr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),GTr=o("not"),OTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),VTr=o("from_pretrained()"),XTr=o(" to load the model weights."),zTr=l(),F(oE.$$.fragment),WTr=l(),Sr=a("div"),F(a7.$$.fragment),QTr=l(),Pve=a("p"),HTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UTr=l(),an=a("p"),JTr=o("The model class to instantiate is selected based on the "),Ive=a("code"),YTr=o("model_type"),KTr=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),ZTr=o("pretrained_model_name_or_path"),e8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(":"),t8r=l(),ce=a("ul"),rE=a("li"),jve=a("strong"),a8r=o("albert"),n8r=o(" \u2014 "),dH=a("a"),s8r=o("TFAlbertForQuestionAnswering"),l8r=o(" (ALBERT model)"),i8r=l(),tE=a("li"),Dve=a("strong"),d8r=o("bert"),c8r=o(" \u2014 "),cH=a("a"),f8r=o("TFBertForQuestionAnswering"),m8r=o(" (BERT model)"),g8r=l(),aE=a("li"),Gve=a("strong"),h8r=o("camembert"),p8r=o(" \u2014 "),fH=a("a"),u8r=o("TFCamembertForQuestionAnswering"),_8r=o(" (CamemBERT model)"),b8r=l(),nE=a("li"),Ove=a("strong"),v8r=o("convbert"),F8r=o(" \u2014 "),mH=a("a"),T8r=o("TFConvBertForQuestionAnswering"),M8r=o(" (ConvBERT model)"),E8r=l(),sE=a("li"),Vve=a("strong"),C8r=o("deberta"),w8r=o(" \u2014 "),gH=a("a"),A8r=o("TFDebertaForQuestionAnswering"),y8r=o(" (DeBERTa model)"),L8r=l(),lE=a("li"),Xve=a("strong"),x8r=o("deberta-v2"),$8r=o(" \u2014 "),hH=a("a"),k8r=o("TFDebertaV2ForQuestionAnswering"),S8r=o(" (DeBERTa-v2 model)"),R8r=l(),iE=a("li"),zve=a("strong"),B8r=o("distilbert"),P8r=o(" \u2014 "),pH=a("a"),I8r=o("TFDistilBertForQuestionAnswering"),q8r=o(" (DistilBERT model)"),N8r=l(),dE=a("li"),Wve=a("strong"),j8r=o("electra"),D8r=o(" \u2014 "),uH=a("a"),G8r=o("TFElectraForQuestionAnswering"),O8r=o(" (ELECTRA model)"),V8r=l(),cE=a("li"),Qve=a("strong"),X8r=o("flaubert"),z8r=o(" \u2014 "),_H=a("a"),W8r=o("TFFlaubertForQuestionAnsweringSimple"),Q8r=o(" (FlauBERT model)"),H8r=l(),fE=a("li"),Hve=a("strong"),U8r=o("funnel"),J8r=o(" \u2014 "),bH=a("a"),Y8r=o("TFFunnelForQuestionAnswering"),K8r=o(" (Funnel Transformer model)"),Z8r=l(),mE=a("li"),Uve=a("strong"),eMr=o("gptj"),oMr=o(" \u2014 "),vH=a("a"),rMr=o("TFGPTJForQuestionAnswering"),tMr=o(" (GPT-J model)"),aMr=l(),gE=a("li"),Jve=a("strong"),nMr=o("longformer"),sMr=o(" \u2014 "),FH=a("a"),lMr=o("TFLongformerForQuestionAnswering"),iMr=o(" (Longformer model)"),dMr=l(),hE=a("li"),Yve=a("strong"),cMr=o("mobilebert"),fMr=o(" \u2014 "),TH=a("a"),mMr=o("TFMobileBertForQuestionAnswering"),gMr=o(" (MobileBERT model)"),hMr=l(),pE=a("li"),Kve=a("strong"),pMr=o("mpnet"),uMr=o(" \u2014 "),MH=a("a"),_Mr=o("TFMPNetForQuestionAnswering"),bMr=o(" (MPNet model)"),vMr=l(),uE=a("li"),Zve=a("strong"),FMr=o("rembert"),TMr=o(" \u2014 "),EH=a("a"),MMr=o("TFRemBertForQuestionAnswering"),EMr=o(" (RemBERT model)"),CMr=l(),_E=a("li"),eFe=a("strong"),wMr=o("roberta"),AMr=o(" \u2014 "),CH=a("a"),yMr=o("TFRobertaForQuestionAnswering"),LMr=o(" (RoBERTa model)"),xMr=l(),bE=a("li"),oFe=a("strong"),$Mr=o("roformer"),kMr=o(" \u2014 "),wH=a("a"),SMr=o("TFRoFormerForQuestionAnswering"),RMr=o(" (RoFormer model)"),BMr=l(),vE=a("li"),rFe=a("strong"),PMr=o("xlm"),IMr=o(" \u2014 "),AH=a("a"),qMr=o("TFXLMForQuestionAnsweringSimple"),NMr=o(" (XLM model)"),jMr=l(),FE=a("li"),tFe=a("strong"),DMr=o("xlm-roberta"),GMr=o(" \u2014 "),yH=a("a"),OMr=o("TFXLMRobertaForQuestionAnswering"),VMr=o(" (XLM-RoBERTa model)"),XMr=l(),TE=a("li"),aFe=a("strong"),zMr=o("xlnet"),WMr=o(" \u2014 "),LH=a("a"),QMr=o("TFXLNetForQuestionAnsweringSimple"),HMr=o(" (XLNet model)"),UMr=l(),F(ME.$$.fragment),DPe=l(),mc=a("h2"),EE=a("a"),nFe=a("span"),F(n7.$$.fragment),JMr=l(),sFe=a("span"),YMr=o("TFAutoModelForVision2Seq"),GPe=l(),sr=a("div"),F(s7.$$.fragment),KMr=l(),gc=a("p"),ZMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xH=a("a"),e4r=o("from_pretrained()"),o4r=o(" class method or the "),$H=a("a"),r4r=o("from_config()"),t4r=o(` class
method.`),a4r=l(),l7=a("p"),n4r=o("This class cannot be instantiated directly using "),lFe=a("code"),s4r=o("__init__()"),l4r=o(" (throws an error)."),i4r=l(),Pt=a("div"),F(i7.$$.fragment),d4r=l(),iFe=a("p"),c4r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f4r=l(),hc=a("p"),m4r=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),g4r=o("not"),h4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),p4r=o("from_pretrained()"),u4r=o(" to load the model weights."),_4r=l(),F(CE.$$.fragment),b4r=l(),Rr=a("div"),F(d7.$$.fragment),v4r=l(),cFe=a("p"),F4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),T4r=l(),nn=a("p"),M4r=o("The model class to instantiate is selected based on the "),fFe=a("code"),E4r=o("model_type"),C4r=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),w4r=o("pretrained_model_name_or_path"),A4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),y4r=o("pretrained_model_name_or_path"),L4r=o(":"),x4r=l(),hFe=a("ul"),wE=a("li"),pFe=a("strong"),$4r=o("vision-encoder-decoder"),k4r=o(" \u2014 "),SH=a("a"),S4r=o("TFVisionEncoderDecoderModel"),R4r=o(" (Vision Encoder decoder model)"),B4r=l(),F(AE.$$.fragment),OPe=l(),pc=a("h2"),yE=a("a"),uFe=a("span"),F(c7.$$.fragment),P4r=l(),_Fe=a("span"),I4r=o("TFAutoModelForSpeechSeq2Seq"),VPe=l(),lr=a("div"),F(f7.$$.fragment),q4r=l(),uc=a("p"),N4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RH=a("a"),j4r=o("from_pretrained()"),D4r=o(" class method or the "),BH=a("a"),G4r=o("from_config()"),O4r=o(` class
method.`),V4r=l(),m7=a("p"),X4r=o("This class cannot be instantiated directly using "),bFe=a("code"),z4r=o("__init__()"),W4r=o(" (throws an error)."),Q4r=l(),It=a("div"),F(g7.$$.fragment),H4r=l(),vFe=a("p"),U4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),J4r=l(),_c=a("p"),Y4r=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),K4r=o("not"),Z4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),eEr=o("from_pretrained()"),oEr=o(" to load the model weights."),rEr=l(),F(LE.$$.fragment),tEr=l(),Br=a("div"),F(h7.$$.fragment),aEr=l(),TFe=a("p"),nEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sEr=l(),sn=a("p"),lEr=o("The model class to instantiate is selected based on the "),MFe=a("code"),iEr=o("model_type"),dEr=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),cEr=o("pretrained_model_name_or_path"),fEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),mEr=o("pretrained_model_name_or_path"),gEr=o(":"),hEr=l(),wFe=a("ul"),xE=a("li"),AFe=a("strong"),pEr=o("speech_to_text"),uEr=o(" \u2014 "),IH=a("a"),_Er=o("TFSpeech2TextForConditionalGeneration"),bEr=o(" (Speech2Text model)"),vEr=l(),F($E.$$.fragment),XPe=l(),bc=a("h2"),kE=a("a"),yFe=a("span"),F(p7.$$.fragment),FEr=l(),LFe=a("span"),TEr=o("FlaxAutoModel"),zPe=l(),ir=a("div"),F(u7.$$.fragment),MEr=l(),vc=a("p"),EEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qH=a("a"),CEr=o("from_pretrained()"),wEr=o(" class method or the "),NH=a("a"),AEr=o("from_config()"),yEr=o(` class
method.`),LEr=l(),_7=a("p"),xEr=o("This class cannot be instantiated directly using "),xFe=a("code"),$Er=o("__init__()"),kEr=o(" (throws an error)."),SEr=l(),qt=a("div"),F(b7.$$.fragment),REr=l(),$Fe=a("p"),BEr=o("Instantiates one of the base model classes of the library from a configuration."),PEr=l(),Fc=a("p"),IEr=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),qEr=o("not"),NEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),jEr=o("from_pretrained()"),DEr=o(" to load the model weights."),GEr=l(),F(SE.$$.fragment),OEr=l(),Pr=a("div"),F(v7.$$.fragment),VEr=l(),SFe=a("p"),XEr=o("Instantiate one of the base model classes of the library from a pretrained model."),zEr=l(),ln=a("p"),WEr=o("The model class to instantiate is selected based on the "),RFe=a("code"),QEr=o("model_type"),HEr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),UEr=o("pretrained_model_name_or_path"),JEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),YEr=o("pretrained_model_name_or_path"),KEr=o(":"),ZEr=l(),oe=a("ul"),RE=a("li"),IFe=a("strong"),eCr=o("albert"),oCr=o(" \u2014 "),DH=a("a"),rCr=o("FlaxAlbertModel"),tCr=o(" (ALBERT model)"),aCr=l(),BE=a("li"),qFe=a("strong"),nCr=o("bart"),sCr=o(" \u2014 "),GH=a("a"),lCr=o("FlaxBartModel"),iCr=o(" (BART model)"),dCr=l(),PE=a("li"),NFe=a("strong"),cCr=o("beit"),fCr=o(" \u2014 "),OH=a("a"),mCr=o("FlaxBeitModel"),gCr=o(" (BEiT model)"),hCr=l(),IE=a("li"),jFe=a("strong"),pCr=o("bert"),uCr=o(" \u2014 "),VH=a("a"),_Cr=o("FlaxBertModel"),bCr=o(" (BERT model)"),vCr=l(),qE=a("li"),DFe=a("strong"),FCr=o("big_bird"),TCr=o(" \u2014 "),XH=a("a"),MCr=o("FlaxBigBirdModel"),ECr=o(" (BigBird model)"),CCr=l(),NE=a("li"),GFe=a("strong"),wCr=o("blenderbot"),ACr=o(" \u2014 "),zH=a("a"),yCr=o("FlaxBlenderbotModel"),LCr=o(" (Blenderbot model)"),xCr=l(),jE=a("li"),OFe=a("strong"),$Cr=o("blenderbot-small"),kCr=o(" \u2014 "),WH=a("a"),SCr=o("FlaxBlenderbotSmallModel"),RCr=o(" (BlenderbotSmall model)"),BCr=l(),DE=a("li"),VFe=a("strong"),PCr=o("clip"),ICr=o(" \u2014 "),QH=a("a"),qCr=o("FlaxCLIPModel"),NCr=o(" (CLIP model)"),jCr=l(),GE=a("li"),XFe=a("strong"),DCr=o("distilbert"),GCr=o(" \u2014 "),HH=a("a"),OCr=o("FlaxDistilBertModel"),VCr=o(" (DistilBERT model)"),XCr=l(),OE=a("li"),zFe=a("strong"),zCr=o("electra"),WCr=o(" \u2014 "),UH=a("a"),QCr=o("FlaxElectraModel"),HCr=o(" (ELECTRA model)"),UCr=l(),VE=a("li"),WFe=a("strong"),JCr=o("gpt2"),YCr=o(" \u2014 "),JH=a("a"),KCr=o("FlaxGPT2Model"),ZCr=o(" (OpenAI GPT-2 model)"),e5r=l(),XE=a("li"),QFe=a("strong"),o5r=o("gpt_neo"),r5r=o(" \u2014 "),YH=a("a"),t5r=o("FlaxGPTNeoModel"),a5r=o(" (GPT Neo model)"),n5r=l(),zE=a("li"),HFe=a("strong"),s5r=o("gptj"),l5r=o(" \u2014 "),KH=a("a"),i5r=o("FlaxGPTJModel"),d5r=o(" (GPT-J model)"),c5r=l(),WE=a("li"),UFe=a("strong"),f5r=o("marian"),m5r=o(" \u2014 "),ZH=a("a"),g5r=o("FlaxMarianModel"),h5r=o(" (Marian model)"),p5r=l(),QE=a("li"),JFe=a("strong"),u5r=o("mbart"),_5r=o(" \u2014 "),eU=a("a"),b5r=o("FlaxMBartModel"),v5r=o(" (mBART model)"),F5r=l(),HE=a("li"),YFe=a("strong"),T5r=o("mt5"),M5r=o(" \u2014 "),oU=a("a"),E5r=o("FlaxMT5Model"),C5r=o(" (mT5 model)"),w5r=l(),UE=a("li"),KFe=a("strong"),A5r=o("pegasus"),y5r=o(" \u2014 "),rU=a("a"),L5r=o("FlaxPegasusModel"),x5r=o(" (Pegasus model)"),$5r=l(),JE=a("li"),ZFe=a("strong"),k5r=o("roberta"),S5r=o(" \u2014 "),tU=a("a"),R5r=o("FlaxRobertaModel"),B5r=o(" (RoBERTa model)"),P5r=l(),YE=a("li"),e6e=a("strong"),I5r=o("roformer"),q5r=o(" \u2014 "),aU=a("a"),N5r=o("FlaxRoFormerModel"),j5r=o(" (RoFormer model)"),D5r=l(),KE=a("li"),o6e=a("strong"),G5r=o("t5"),O5r=o(" \u2014 "),nU=a("a"),V5r=o("FlaxT5Model"),X5r=o(" (T5 model)"),z5r=l(),ZE=a("li"),r6e=a("strong"),W5r=o("vision-text-dual-encoder"),Q5r=o(" \u2014 "),sU=a("a"),H5r=o("FlaxVisionTextDualEncoderModel"),U5r=o(" (VisionTextDualEncoder model)"),J5r=l(),eC=a("li"),t6e=a("strong"),Y5r=o("vit"),K5r=o(" \u2014 "),lU=a("a"),Z5r=o("FlaxViTModel"),e3r=o(" (ViT model)"),o3r=l(),oC=a("li"),a6e=a("strong"),r3r=o("wav2vec2"),t3r=o(" \u2014 "),iU=a("a"),a3r=o("FlaxWav2Vec2Model"),n3r=o(" (Wav2Vec2 model)"),s3r=l(),rC=a("li"),n6e=a("strong"),l3r=o("xglm"),i3r=o(" \u2014 "),dU=a("a"),d3r=o("FlaxXGLMModel"),c3r=o(" (XGLM model)"),f3r=l(),tC=a("li"),s6e=a("strong"),m3r=o("xlm-roberta"),g3r=o(" \u2014 "),cU=a("a"),h3r=o("FlaxXLMRobertaModel"),p3r=o(" (XLM-RoBERTa model)"),u3r=l(),F(aC.$$.fragment),WPe=l(),Tc=a("h2"),nC=a("a"),l6e=a("span"),F(F7.$$.fragment),_3r=l(),i6e=a("span"),b3r=o("FlaxAutoModelForCausalLM"),QPe=l(),dr=a("div"),F(T7.$$.fragment),v3r=l(),Mc=a("p"),F3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fU=a("a"),T3r=o("from_pretrained()"),M3r=o(" class method or the "),mU=a("a"),E3r=o("from_config()"),C3r=o(` class
method.`),w3r=l(),M7=a("p"),A3r=o("This class cannot be instantiated directly using "),d6e=a("code"),y3r=o("__init__()"),L3r=o(" (throws an error)."),x3r=l(),Nt=a("div"),F(E7.$$.fragment),$3r=l(),c6e=a("p"),k3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),S3r=l(),Ec=a("p"),R3r=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),B3r=o("not"),P3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),I3r=o("from_pretrained()"),q3r=o(" to load the model weights."),N3r=l(),F(sC.$$.fragment),j3r=l(),Ir=a("div"),F(C7.$$.fragment),D3r=l(),m6e=a("p"),G3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O3r=l(),dn=a("p"),V3r=o("The model class to instantiate is selected based on the "),g6e=a("code"),X3r=o("model_type"),z3r=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),W3r=o("pretrained_model_name_or_path"),Q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),H3r=o("pretrained_model_name_or_path"),U3r=o(":"),J3r=l(),Jr=a("ul"),lC=a("li"),u6e=a("strong"),Y3r=o("bart"),K3r=o(" \u2014 "),hU=a("a"),Z3r=o("FlaxBartForCausalLM"),ewr=o(" (BART model)"),owr=l(),iC=a("li"),_6e=a("strong"),rwr=o("gpt2"),twr=o(" \u2014 "),pU=a("a"),awr=o("FlaxGPT2LMHeadModel"),nwr=o(" (OpenAI GPT-2 model)"),swr=l(),dC=a("li"),b6e=a("strong"),lwr=o("gpt_neo"),iwr=o(" \u2014 "),uU=a("a"),dwr=o("FlaxGPTNeoForCausalLM"),cwr=o(" (GPT Neo model)"),fwr=l(),cC=a("li"),v6e=a("strong"),mwr=o("gptj"),gwr=o(" \u2014 "),_U=a("a"),hwr=o("FlaxGPTJForCausalLM"),pwr=o(" (GPT-J model)"),uwr=l(),fC=a("li"),F6e=a("strong"),_wr=o("xglm"),bwr=o(" \u2014 "),bU=a("a"),vwr=o("FlaxXGLMForCausalLM"),Fwr=o(" (XGLM model)"),Twr=l(),F(mC.$$.fragment),HPe=l(),Cc=a("h2"),gC=a("a"),T6e=a("span"),F(w7.$$.fragment),Mwr=l(),M6e=a("span"),Ewr=o("FlaxAutoModelForPreTraining"),UPe=l(),cr=a("div"),F(A7.$$.fragment),Cwr=l(),wc=a("p"),wwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vU=a("a"),Awr=o("from_pretrained()"),ywr=o(" class method or the "),FU=a("a"),Lwr=o("from_config()"),xwr=o(` class
method.`),$wr=l(),y7=a("p"),kwr=o("This class cannot be instantiated directly using "),E6e=a("code"),Swr=o("__init__()"),Rwr=o(" (throws an error)."),Bwr=l(),jt=a("div"),F(L7.$$.fragment),Pwr=l(),C6e=a("p"),Iwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qwr=l(),Ac=a("p"),Nwr=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),jwr=o("not"),Dwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),Gwr=o("from_pretrained()"),Owr=o(" to load the model weights."),Vwr=l(),F(hC.$$.fragment),Xwr=l(),qr=a("div"),F(x7.$$.fragment),zwr=l(),A6e=a("p"),Wwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qwr=l(),cn=a("p"),Hwr=o("The model class to instantiate is selected based on the "),y6e=a("code"),Uwr=o("model_type"),Jwr=o(` property of the config object (either
passed as an argument or loaded from `),L6e=a("code"),Ywr=o("pretrained_model_name_or_path"),Kwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),Zwr=o("pretrained_model_name_or_path"),eAr=o(":"),oAr=l(),Me=a("ul"),pC=a("li"),$6e=a("strong"),rAr=o("albert"),tAr=o(" \u2014 "),MU=a("a"),aAr=o("FlaxAlbertForPreTraining"),nAr=o(" (ALBERT model)"),sAr=l(),uC=a("li"),k6e=a("strong"),lAr=o("bart"),iAr=o(" \u2014 "),EU=a("a"),dAr=o("FlaxBartForConditionalGeneration"),cAr=o(" (BART model)"),fAr=l(),_C=a("li"),S6e=a("strong"),mAr=o("bert"),gAr=o(" \u2014 "),CU=a("a"),hAr=o("FlaxBertForPreTraining"),pAr=o(" (BERT model)"),uAr=l(),bC=a("li"),R6e=a("strong"),_Ar=o("big_bird"),bAr=o(" \u2014 "),wU=a("a"),vAr=o("FlaxBigBirdForPreTraining"),FAr=o(" (BigBird model)"),TAr=l(),vC=a("li"),B6e=a("strong"),MAr=o("electra"),EAr=o(" \u2014 "),AU=a("a"),CAr=o("FlaxElectraForPreTraining"),wAr=o(" (ELECTRA model)"),AAr=l(),FC=a("li"),P6e=a("strong"),yAr=o("mbart"),LAr=o(" \u2014 "),yU=a("a"),xAr=o("FlaxMBartForConditionalGeneration"),$Ar=o(" (mBART model)"),kAr=l(),TC=a("li"),I6e=a("strong"),SAr=o("mt5"),RAr=o(" \u2014 "),LU=a("a"),BAr=o("FlaxMT5ForConditionalGeneration"),PAr=o(" (mT5 model)"),IAr=l(),MC=a("li"),q6e=a("strong"),qAr=o("roberta"),NAr=o(" \u2014 "),xU=a("a"),jAr=o("FlaxRobertaForMaskedLM"),DAr=o(" (RoBERTa model)"),GAr=l(),EC=a("li"),N6e=a("strong"),OAr=o("roformer"),VAr=o(" \u2014 "),$U=a("a"),XAr=o("FlaxRoFormerForMaskedLM"),zAr=o(" (RoFormer model)"),WAr=l(),CC=a("li"),j6e=a("strong"),QAr=o("t5"),HAr=o(" \u2014 "),kU=a("a"),UAr=o("FlaxT5ForConditionalGeneration"),JAr=o(" (T5 model)"),YAr=l(),wC=a("li"),D6e=a("strong"),KAr=o("wav2vec2"),ZAr=o(" \u2014 "),SU=a("a"),e0r=o("FlaxWav2Vec2ForPreTraining"),o0r=o(" (Wav2Vec2 model)"),r0r=l(),AC=a("li"),G6e=a("strong"),t0r=o("xlm-roberta"),a0r=o(" \u2014 "),RU=a("a"),n0r=o("FlaxXLMRobertaForMaskedLM"),s0r=o(" (XLM-RoBERTa model)"),l0r=l(),F(yC.$$.fragment),JPe=l(),yc=a("h2"),LC=a("a"),O6e=a("span"),F($7.$$.fragment),i0r=l(),V6e=a("span"),d0r=o("FlaxAutoModelForMaskedLM"),YPe=l(),fr=a("div"),F(k7.$$.fragment),c0r=l(),Lc=a("p"),f0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BU=a("a"),m0r=o("from_pretrained()"),g0r=o(" class method or the "),PU=a("a"),h0r=o("from_config()"),p0r=o(` class
method.`),u0r=l(),S7=a("p"),_0r=o("This class cannot be instantiated directly using "),X6e=a("code"),b0r=o("__init__()"),v0r=o(" (throws an error)."),F0r=l(),Dt=a("div"),F(R7.$$.fragment),T0r=l(),z6e=a("p"),M0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E0r=l(),xc=a("p"),C0r=o(`Note:
Loading a model from its configuration file does `),W6e=a("strong"),w0r=o("not"),A0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),y0r=o("from_pretrained()"),L0r=o(" to load the model weights."),x0r=l(),F(xC.$$.fragment),$0r=l(),Nr=a("div"),F(B7.$$.fragment),k0r=l(),Q6e=a("p"),S0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),R0r=l(),fn=a("p"),B0r=o("The model class to instantiate is selected based on the "),H6e=a("code"),P0r=o("model_type"),I0r=o(` property of the config object (either
passed as an argument or loaded from `),U6e=a("code"),q0r=o("pretrained_model_name_or_path"),N0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=a("code"),j0r=o("pretrained_model_name_or_path"),D0r=o(":"),G0r=l(),Le=a("ul"),$C=a("li"),Y6e=a("strong"),O0r=o("albert"),V0r=o(" \u2014 "),qU=a("a"),X0r=o("FlaxAlbertForMaskedLM"),z0r=o(" (ALBERT model)"),W0r=l(),kC=a("li"),K6e=a("strong"),Q0r=o("bart"),H0r=o(" \u2014 "),NU=a("a"),U0r=o("FlaxBartForConditionalGeneration"),J0r=o(" (BART model)"),Y0r=l(),SC=a("li"),Z6e=a("strong"),K0r=o("bert"),Z0r=o(" \u2014 "),jU=a("a"),eyr=o("FlaxBertForMaskedLM"),oyr=o(" (BERT model)"),ryr=l(),RC=a("li"),eTe=a("strong"),tyr=o("big_bird"),ayr=o(" \u2014 "),DU=a("a"),nyr=o("FlaxBigBirdForMaskedLM"),syr=o(" (BigBird model)"),lyr=l(),BC=a("li"),oTe=a("strong"),iyr=o("distilbert"),dyr=o(" \u2014 "),GU=a("a"),cyr=o("FlaxDistilBertForMaskedLM"),fyr=o(" (DistilBERT model)"),myr=l(),PC=a("li"),rTe=a("strong"),gyr=o("electra"),hyr=o(" \u2014 "),OU=a("a"),pyr=o("FlaxElectraForMaskedLM"),uyr=o(" (ELECTRA model)"),_yr=l(),IC=a("li"),tTe=a("strong"),byr=o("mbart"),vyr=o(" \u2014 "),VU=a("a"),Fyr=o("FlaxMBartForConditionalGeneration"),Tyr=o(" (mBART model)"),Myr=l(),qC=a("li"),aTe=a("strong"),Eyr=o("roberta"),Cyr=o(" \u2014 "),XU=a("a"),wyr=o("FlaxRobertaForMaskedLM"),Ayr=o(" (RoBERTa model)"),yyr=l(),NC=a("li"),nTe=a("strong"),Lyr=o("roformer"),xyr=o(" \u2014 "),zU=a("a"),$yr=o("FlaxRoFormerForMaskedLM"),kyr=o(" (RoFormer model)"),Syr=l(),jC=a("li"),sTe=a("strong"),Ryr=o("xlm-roberta"),Byr=o(" \u2014 "),WU=a("a"),Pyr=o("FlaxXLMRobertaForMaskedLM"),Iyr=o(" (XLM-RoBERTa model)"),qyr=l(),F(DC.$$.fragment),KPe=l(),$c=a("h2"),GC=a("a"),lTe=a("span"),F(P7.$$.fragment),Nyr=l(),iTe=a("span"),jyr=o("FlaxAutoModelForSeq2SeqLM"),ZPe=l(),mr=a("div"),F(I7.$$.fragment),Dyr=l(),kc=a("p"),Gyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QU=a("a"),Oyr=o("from_pretrained()"),Vyr=o(" class method or the "),HU=a("a"),Xyr=o("from_config()"),zyr=o(` class
method.`),Wyr=l(),q7=a("p"),Qyr=o("This class cannot be instantiated directly using "),dTe=a("code"),Hyr=o("__init__()"),Uyr=o(" (throws an error)."),Jyr=l(),Gt=a("div"),F(N7.$$.fragment),Yyr=l(),cTe=a("p"),Kyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Zyr=l(),Sc=a("p"),eLr=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),oLr=o("not"),rLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),tLr=o("from_pretrained()"),aLr=o(" to load the model weights."),nLr=l(),F(OC.$$.fragment),sLr=l(),jr=a("div"),F(j7.$$.fragment),lLr=l(),mTe=a("p"),iLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dLr=l(),mn=a("p"),cLr=o("The model class to instantiate is selected based on the "),gTe=a("code"),fLr=o("model_type"),mLr=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),pLr=o("pretrained_model_name_or_path"),uLr=o(":"),_Lr=l(),Re=a("ul"),VC=a("li"),uTe=a("strong"),bLr=o("bart"),vLr=o(" \u2014 "),JU=a("a"),FLr=o("FlaxBartForConditionalGeneration"),TLr=o(" (BART model)"),MLr=l(),XC=a("li"),_Te=a("strong"),ELr=o("blenderbot"),CLr=o(" \u2014 "),YU=a("a"),wLr=o("FlaxBlenderbotForConditionalGeneration"),ALr=o(" (Blenderbot model)"),yLr=l(),zC=a("li"),bTe=a("strong"),LLr=o("blenderbot-small"),xLr=o(" \u2014 "),KU=a("a"),$Lr=o("FlaxBlenderbotSmallForConditionalGeneration"),kLr=o(" (BlenderbotSmall model)"),SLr=l(),WC=a("li"),vTe=a("strong"),RLr=o("encoder-decoder"),BLr=o(" \u2014 "),ZU=a("a"),PLr=o("FlaxEncoderDecoderModel"),ILr=o(" (Encoder decoder model)"),qLr=l(),QC=a("li"),FTe=a("strong"),NLr=o("marian"),jLr=o(" \u2014 "),eJ=a("a"),DLr=o("FlaxMarianMTModel"),GLr=o(" (Marian model)"),OLr=l(),HC=a("li"),TTe=a("strong"),VLr=o("mbart"),XLr=o(" \u2014 "),oJ=a("a"),zLr=o("FlaxMBartForConditionalGeneration"),WLr=o(" (mBART model)"),QLr=l(),UC=a("li"),MTe=a("strong"),HLr=o("mt5"),ULr=o(" \u2014 "),rJ=a("a"),JLr=o("FlaxMT5ForConditionalGeneration"),YLr=o(" (mT5 model)"),KLr=l(),JC=a("li"),ETe=a("strong"),ZLr=o("pegasus"),e7r=o(" \u2014 "),tJ=a("a"),o7r=o("FlaxPegasusForConditionalGeneration"),r7r=o(" (Pegasus model)"),t7r=l(),YC=a("li"),CTe=a("strong"),a7r=o("t5"),n7r=o(" \u2014 "),aJ=a("a"),s7r=o("FlaxT5ForConditionalGeneration"),l7r=o(" (T5 model)"),i7r=l(),F(KC.$$.fragment),eIe=l(),Rc=a("h2"),ZC=a("a"),wTe=a("span"),F(D7.$$.fragment),d7r=l(),ATe=a("span"),c7r=o("FlaxAutoModelForSequenceClassification"),oIe=l(),gr=a("div"),F(G7.$$.fragment),f7r=l(),Bc=a("p"),m7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nJ=a("a"),g7r=o("from_pretrained()"),h7r=o(" class method or the "),sJ=a("a"),p7r=o("from_config()"),u7r=o(` class
method.`),_7r=l(),O7=a("p"),b7r=o("This class cannot be instantiated directly using "),yTe=a("code"),v7r=o("__init__()"),F7r=o(" (throws an error)."),T7r=l(),Ot=a("div"),F(V7.$$.fragment),M7r=l(),LTe=a("p"),E7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),C7r=l(),Pc=a("p"),w7r=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),A7r=o("not"),y7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),L7r=o("from_pretrained()"),x7r=o(" to load the model weights."),$7r=l(),F(e5.$$.fragment),k7r=l(),Dr=a("div"),F(X7.$$.fragment),S7r=l(),$Te=a("p"),R7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B7r=l(),gn=a("p"),P7r=o("The model class to instantiate is selected based on the "),kTe=a("code"),I7r=o("model_type"),q7r=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),N7r=o("pretrained_model_name_or_path"),j7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),D7r=o("pretrained_model_name_or_path"),G7r=o(":"),O7r=l(),xe=a("ul"),o5=a("li"),BTe=a("strong"),V7r=o("albert"),X7r=o(" \u2014 "),iJ=a("a"),z7r=o("FlaxAlbertForSequenceClassification"),W7r=o(" (ALBERT model)"),Q7r=l(),r5=a("li"),PTe=a("strong"),H7r=o("bart"),U7r=o(" \u2014 "),dJ=a("a"),J7r=o("FlaxBartForSequenceClassification"),Y7r=o(" (BART model)"),K7r=l(),t5=a("li"),ITe=a("strong"),Z7r=o("bert"),exr=o(" \u2014 "),cJ=a("a"),oxr=o("FlaxBertForSequenceClassification"),rxr=o(" (BERT model)"),txr=l(),a5=a("li"),qTe=a("strong"),axr=o("big_bird"),nxr=o(" \u2014 "),fJ=a("a"),sxr=o("FlaxBigBirdForSequenceClassification"),lxr=o(" (BigBird model)"),ixr=l(),n5=a("li"),NTe=a("strong"),dxr=o("distilbert"),cxr=o(" \u2014 "),mJ=a("a"),fxr=o("FlaxDistilBertForSequenceClassification"),mxr=o(" (DistilBERT model)"),gxr=l(),s5=a("li"),jTe=a("strong"),hxr=o("electra"),pxr=o(" \u2014 "),gJ=a("a"),uxr=o("FlaxElectraForSequenceClassification"),_xr=o(" (ELECTRA model)"),bxr=l(),l5=a("li"),DTe=a("strong"),vxr=o("mbart"),Fxr=o(" \u2014 "),hJ=a("a"),Txr=o("FlaxMBartForSequenceClassification"),Mxr=o(" (mBART model)"),Exr=l(),i5=a("li"),GTe=a("strong"),Cxr=o("roberta"),wxr=o(" \u2014 "),pJ=a("a"),Axr=o("FlaxRobertaForSequenceClassification"),yxr=o(" (RoBERTa model)"),Lxr=l(),d5=a("li"),OTe=a("strong"),xxr=o("roformer"),$xr=o(" \u2014 "),uJ=a("a"),kxr=o("FlaxRoFormerForSequenceClassification"),Sxr=o(" (RoFormer model)"),Rxr=l(),c5=a("li"),VTe=a("strong"),Bxr=o("xlm-roberta"),Pxr=o(" \u2014 "),_J=a("a"),Ixr=o("FlaxXLMRobertaForSequenceClassification"),qxr=o(" (XLM-RoBERTa model)"),Nxr=l(),F(f5.$$.fragment),rIe=l(),Ic=a("h2"),m5=a("a"),XTe=a("span"),F(z7.$$.fragment),jxr=l(),zTe=a("span"),Dxr=o("FlaxAutoModelForQuestionAnswering"),tIe=l(),hr=a("div"),F(W7.$$.fragment),Gxr=l(),qc=a("p"),Oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bJ=a("a"),Vxr=o("from_pretrained()"),Xxr=o(" class method or the "),vJ=a("a"),zxr=o("from_config()"),Wxr=o(` class
method.`),Qxr=l(),Q7=a("p"),Hxr=o("This class cannot be instantiated directly using "),WTe=a("code"),Uxr=o("__init__()"),Jxr=o(" (throws an error)."),Yxr=l(),Vt=a("div"),F(H7.$$.fragment),Kxr=l(),QTe=a("p"),Zxr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),e9r=l(),Nc=a("p"),o9r=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),r9r=o("not"),t9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),a9r=o("from_pretrained()"),n9r=o(" to load the model weights."),s9r=l(),F(g5.$$.fragment),l9r=l(),Gr=a("div"),F(U7.$$.fragment),i9r=l(),UTe=a("p"),d9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),c9r=l(),hn=a("p"),f9r=o("The model class to instantiate is selected based on the "),JTe=a("code"),m9r=o("model_type"),g9r=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),h9r=o("pretrained_model_name_or_path"),p9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),u9r=o("pretrained_model_name_or_path"),_9r=o(":"),b9r=l(),$e=a("ul"),h5=a("li"),ZTe=a("strong"),v9r=o("albert"),F9r=o(" \u2014 "),TJ=a("a"),T9r=o("FlaxAlbertForQuestionAnswering"),M9r=o(" (ALBERT model)"),E9r=l(),p5=a("li"),e8e=a("strong"),C9r=o("bart"),w9r=o(" \u2014 "),MJ=a("a"),A9r=o("FlaxBartForQuestionAnswering"),y9r=o(" (BART model)"),L9r=l(),u5=a("li"),o8e=a("strong"),x9r=o("bert"),$9r=o(" \u2014 "),EJ=a("a"),k9r=o("FlaxBertForQuestionAnswering"),S9r=o(" (BERT model)"),R9r=l(),_5=a("li"),r8e=a("strong"),B9r=o("big_bird"),P9r=o(" \u2014 "),CJ=a("a"),I9r=o("FlaxBigBirdForQuestionAnswering"),q9r=o(" (BigBird model)"),N9r=l(),b5=a("li"),t8e=a("strong"),j9r=o("distilbert"),D9r=o(" \u2014 "),wJ=a("a"),G9r=o("FlaxDistilBertForQuestionAnswering"),O9r=o(" (DistilBERT model)"),V9r=l(),v5=a("li"),a8e=a("strong"),X9r=o("electra"),z9r=o(" \u2014 "),AJ=a("a"),W9r=o("FlaxElectraForQuestionAnswering"),Q9r=o(" (ELECTRA model)"),H9r=l(),F5=a("li"),n8e=a("strong"),U9r=o("mbart"),J9r=o(" \u2014 "),yJ=a("a"),Y9r=o("FlaxMBartForQuestionAnswering"),K9r=o(" (mBART model)"),Z9r=l(),T5=a("li"),s8e=a("strong"),e$r=o("roberta"),o$r=o(" \u2014 "),LJ=a("a"),r$r=o("FlaxRobertaForQuestionAnswering"),t$r=o(" (RoBERTa model)"),a$r=l(),M5=a("li"),l8e=a("strong"),n$r=o("roformer"),s$r=o(" \u2014 "),xJ=a("a"),l$r=o("FlaxRoFormerForQuestionAnswering"),i$r=o(" (RoFormer model)"),d$r=l(),E5=a("li"),i8e=a("strong"),c$r=o("xlm-roberta"),f$r=o(" \u2014 "),$J=a("a"),m$r=o("FlaxXLMRobertaForQuestionAnswering"),g$r=o(" (XLM-RoBERTa model)"),h$r=l(),F(C5.$$.fragment),aIe=l(),jc=a("h2"),w5=a("a"),d8e=a("span"),F(J7.$$.fragment),p$r=l(),c8e=a("span"),u$r=o("FlaxAutoModelForTokenClassification"),nIe=l(),pr=a("div"),F(Y7.$$.fragment),_$r=l(),Dc=a("p"),b$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kJ=a("a"),v$r=o("from_pretrained()"),F$r=o(" class method or the "),SJ=a("a"),T$r=o("from_config()"),M$r=o(` class
method.`),E$r=l(),K7=a("p"),C$r=o("This class cannot be instantiated directly using "),f8e=a("code"),w$r=o("__init__()"),A$r=o(" (throws an error)."),y$r=l(),Xt=a("div"),F(Z7.$$.fragment),L$r=l(),m8e=a("p"),x$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$$r=l(),Gc=a("p"),k$r=o(`Note:
Loading a model from its configuration file does `),g8e=a("strong"),S$r=o("not"),R$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),B$r=o("from_pretrained()"),P$r=o(" to load the model weights."),I$r=l(),F(A5.$$.fragment),q$r=l(),Or=a("div"),F(ex.$$.fragment),N$r=l(),h8e=a("p"),j$r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D$r=l(),pn=a("p"),G$r=o("The model class to instantiate is selected based on the "),p8e=a("code"),O$r=o("model_type"),V$r=o(` property of the config object (either
passed as an argument or loaded from `),u8e=a("code"),X$r=o("pretrained_model_name_or_path"),z$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=a("code"),W$r=o("pretrained_model_name_or_path"),Q$r=o(":"),H$r=l(),je=a("ul"),y5=a("li"),b8e=a("strong"),U$r=o("albert"),J$r=o(" \u2014 "),BJ=a("a"),Y$r=o("FlaxAlbertForTokenClassification"),K$r=o(" (ALBERT model)"),Z$r=l(),L5=a("li"),v8e=a("strong"),ekr=o("bert"),okr=o(" \u2014 "),PJ=a("a"),rkr=o("FlaxBertForTokenClassification"),tkr=o(" (BERT model)"),akr=l(),x5=a("li"),F8e=a("strong"),nkr=o("big_bird"),skr=o(" \u2014 "),IJ=a("a"),lkr=o("FlaxBigBirdForTokenClassification"),ikr=o(" (BigBird model)"),dkr=l(),$5=a("li"),T8e=a("strong"),ckr=o("distilbert"),fkr=o(" \u2014 "),qJ=a("a"),mkr=o("FlaxDistilBertForTokenClassification"),gkr=o(" (DistilBERT model)"),hkr=l(),k5=a("li"),M8e=a("strong"),pkr=o("electra"),ukr=o(" \u2014 "),NJ=a("a"),_kr=o("FlaxElectraForTokenClassification"),bkr=o(" (ELECTRA model)"),vkr=l(),S5=a("li"),E8e=a("strong"),Fkr=o("roberta"),Tkr=o(" \u2014 "),jJ=a("a"),Mkr=o("FlaxRobertaForTokenClassification"),Ekr=o(" (RoBERTa model)"),Ckr=l(),R5=a("li"),C8e=a("strong"),wkr=o("roformer"),Akr=o(" \u2014 "),DJ=a("a"),ykr=o("FlaxRoFormerForTokenClassification"),Lkr=o(" (RoFormer model)"),xkr=l(),B5=a("li"),w8e=a("strong"),$kr=o("xlm-roberta"),kkr=o(" \u2014 "),GJ=a("a"),Skr=o("FlaxXLMRobertaForTokenClassification"),Rkr=o(" (XLM-RoBERTa model)"),Bkr=l(),F(P5.$$.fragment),sIe=l(),Oc=a("h2"),I5=a("a"),A8e=a("span"),F(ox.$$.fragment),Pkr=l(),y8e=a("span"),Ikr=o("FlaxAutoModelForMultipleChoice"),lIe=l(),ur=a("div"),F(rx.$$.fragment),qkr=l(),Vc=a("p"),Nkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OJ=a("a"),jkr=o("from_pretrained()"),Dkr=o(" class method or the "),VJ=a("a"),Gkr=o("from_config()"),Okr=o(` class
method.`),Vkr=l(),tx=a("p"),Xkr=o("This class cannot be instantiated directly using "),L8e=a("code"),zkr=o("__init__()"),Wkr=o(" (throws an error)."),Qkr=l(),zt=a("div"),F(ax.$$.fragment),Hkr=l(),x8e=a("p"),Ukr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jkr=l(),Xc=a("p"),Ykr=o(`Note:
Loading a model from its configuration file does `),$8e=a("strong"),Kkr=o("not"),Zkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),eSr=o("from_pretrained()"),oSr=o(" to load the model weights."),rSr=l(),F(q5.$$.fragment),tSr=l(),Vr=a("div"),F(nx.$$.fragment),aSr=l(),k8e=a("p"),nSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sSr=l(),un=a("p"),lSr=o("The model class to instantiate is selected based on the "),S8e=a("code"),iSr=o("model_type"),dSr=o(` property of the config object (either
passed as an argument or loaded from `),R8e=a("code"),cSr=o("pretrained_model_name_or_path"),fSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B8e=a("code"),mSr=o("pretrained_model_name_or_path"),gSr=o(":"),hSr=l(),De=a("ul"),N5=a("li"),P8e=a("strong"),pSr=o("albert"),uSr=o(" \u2014 "),zJ=a("a"),_Sr=o("FlaxAlbertForMultipleChoice"),bSr=o(" (ALBERT model)"),vSr=l(),j5=a("li"),I8e=a("strong"),FSr=o("bert"),TSr=o(" \u2014 "),WJ=a("a"),MSr=o("FlaxBertForMultipleChoice"),ESr=o(" (BERT model)"),CSr=l(),D5=a("li"),q8e=a("strong"),wSr=o("big_bird"),ASr=o(" \u2014 "),QJ=a("a"),ySr=o("FlaxBigBirdForMultipleChoice"),LSr=o(" (BigBird model)"),xSr=l(),G5=a("li"),N8e=a("strong"),$Sr=o("distilbert"),kSr=o(" \u2014 "),HJ=a("a"),SSr=o("FlaxDistilBertForMultipleChoice"),RSr=o(" (DistilBERT model)"),BSr=l(),O5=a("li"),j8e=a("strong"),PSr=o("electra"),ISr=o(" \u2014 "),UJ=a("a"),qSr=o("FlaxElectraForMultipleChoice"),NSr=o(" (ELECTRA model)"),jSr=l(),V5=a("li"),D8e=a("strong"),DSr=o("roberta"),GSr=o(" \u2014 "),JJ=a("a"),OSr=o("FlaxRobertaForMultipleChoice"),VSr=o(" (RoBERTa model)"),XSr=l(),X5=a("li"),G8e=a("strong"),zSr=o("roformer"),WSr=o(" \u2014 "),YJ=a("a"),QSr=o("FlaxRoFormerForMultipleChoice"),HSr=o(" (RoFormer model)"),USr=l(),z5=a("li"),O8e=a("strong"),JSr=o("xlm-roberta"),YSr=o(" \u2014 "),KJ=a("a"),KSr=o("FlaxXLMRobertaForMultipleChoice"),ZSr=o(" (XLM-RoBERTa model)"),eRr=l(),F(W5.$$.fragment),iIe=l(),zc=a("h2"),Q5=a("a"),V8e=a("span"),F(sx.$$.fragment),oRr=l(),X8e=a("span"),rRr=o("FlaxAutoModelForNextSentencePrediction"),dIe=l(),_r=a("div"),F(lx.$$.fragment),tRr=l(),Wc=a("p"),aRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZJ=a("a"),nRr=o("from_pretrained()"),sRr=o(" class method or the "),eY=a("a"),lRr=o("from_config()"),iRr=o(` class
method.`),dRr=l(),ix=a("p"),cRr=o("This class cannot be instantiated directly using "),z8e=a("code"),fRr=o("__init__()"),mRr=o(" (throws an error)."),gRr=l(),Wt=a("div"),F(dx.$$.fragment),hRr=l(),W8e=a("p"),pRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uRr=l(),Qc=a("p"),_Rr=o(`Note:
Loading a model from its configuration file does `),Q8e=a("strong"),bRr=o("not"),vRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),FRr=o("from_pretrained()"),TRr=o(" to load the model weights."),MRr=l(),F(H5.$$.fragment),ERr=l(),Xr=a("div"),F(cx.$$.fragment),CRr=l(),H8e=a("p"),wRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ARr=l(),_n=a("p"),yRr=o("The model class to instantiate is selected based on the "),U8e=a("code"),LRr=o("model_type"),xRr=o(` property of the config object (either
passed as an argument or loaded from `),J8e=a("code"),$Rr=o("pretrained_model_name_or_path"),kRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(":"),BRr=l(),K8e=a("ul"),U5=a("li"),Z8e=a("strong"),PRr=o("bert"),IRr=o(" \u2014 "),rY=a("a"),qRr=o("FlaxBertForNextSentencePrediction"),NRr=o(" (BERT model)"),jRr=l(),F(J5.$$.fragment),cIe=l(),Hc=a("h2"),Y5=a("a"),eMe=a("span"),F(fx.$$.fragment),DRr=l(),oMe=a("span"),GRr=o("FlaxAutoModelForImageClassification"),fIe=l(),br=a("div"),F(mx.$$.fragment),ORr=l(),Uc=a("p"),VRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tY=a("a"),XRr=o("from_pretrained()"),zRr=o(" class method or the "),aY=a("a"),WRr=o("from_config()"),QRr=o(` class
method.`),HRr=l(),gx=a("p"),URr=o("This class cannot be instantiated directly using "),rMe=a("code"),JRr=o("__init__()"),YRr=o(" (throws an error)."),KRr=l(),Qt=a("div"),F(hx.$$.fragment),ZRr=l(),tMe=a("p"),eBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oBr=l(),Jc=a("p"),rBr=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),tBr=o("not"),aBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),nBr=o("from_pretrained()"),sBr=o(" to load the model weights."),lBr=l(),F(K5.$$.fragment),iBr=l(),zr=a("div"),F(px.$$.fragment),dBr=l(),nMe=a("p"),cBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fBr=l(),bn=a("p"),mBr=o("The model class to instantiate is selected based on the "),sMe=a("code"),gBr=o("model_type"),hBr=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),pBr=o("pretrained_model_name_or_path"),uBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),_Br=o("pretrained_model_name_or_path"),bBr=o(":"),vBr=l(),ux=a("ul"),Z5=a("li"),dMe=a("strong"),FBr=o("beit"),TBr=o(" \u2014 "),sY=a("a"),MBr=o("FlaxBeitForImageClassification"),EBr=o(" (BEiT model)"),CBr=l(),e3=a("li"),cMe=a("strong"),wBr=o("vit"),ABr=o(" \u2014 "),lY=a("a"),yBr=o("FlaxViTForImageClassification"),LBr=o(" (ViT model)"),xBr=l(),F(o3.$$.fragment),mIe=l(),Yc=a("h2"),r3=a("a"),fMe=a("span"),F(_x.$$.fragment),$Br=l(),mMe=a("span"),kBr=o("FlaxAutoModelForVision2Seq"),gIe=l(),vr=a("div"),F(bx.$$.fragment),SBr=l(),Kc=a("p"),RBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iY=a("a"),BBr=o("from_pretrained()"),PBr=o(" class method or the "),dY=a("a"),IBr=o("from_config()"),qBr=o(` class
method.`),NBr=l(),vx=a("p"),jBr=o("This class cannot be instantiated directly using "),gMe=a("code"),DBr=o("__init__()"),GBr=o(" (throws an error)."),OBr=l(),Ht=a("div"),F(Fx.$$.fragment),VBr=l(),hMe=a("p"),XBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zBr=l(),Zc=a("p"),WBr=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),QBr=o("not"),HBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),UBr=o("from_pretrained()"),JBr=o(" to load the model weights."),YBr=l(),F(t3.$$.fragment),KBr=l(),Wr=a("div"),F(Tx.$$.fragment),ZBr=l(),uMe=a("p"),ePr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oPr=l(),vn=a("p"),rPr=o("The model class to instantiate is selected based on the "),_Me=a("code"),tPr=o("model_type"),aPr=o(` property of the config object (either
passed as an argument or loaded from `),bMe=a("code"),nPr=o("pretrained_model_name_or_path"),sPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(":"),dPr=l(),FMe=a("ul"),a3=a("li"),TMe=a("strong"),cPr=o("vision-encoder-decoder"),fPr=o(" \u2014 "),fY=a("a"),mPr=o("FlaxVisionEncoderDecoderModel"),gPr=o(" (Vision Encoder decoder model)"),hPr=l(),F(n3.$$.fragment),this.h()},l(f){const _=i5t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Mx=s(p);m=n(Mx,"A",{id:!0,class:!0,href:!0});var MMe=s(m);u=n(MMe,"SPAN",{});var EMe=s(u);T(d.$$.fragment,EMe),EMe.forEach(t),MMe.forEach(t),h=i(Mx),Fo=n(Mx,"SPAN",{});var CMe=s(Fo);ti=r(CMe,"Auto Classes"),CMe.forEach(t),Mx.forEach(t),tf=i(f),Zr=n(f,"P",{});var Ex=s(Zr);ai=r(Ex,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ni=n(Ex,"CODE",{});var wMe=s(ni);vA=r(wMe,"from_pretrained()"),wMe.forEach(t),af=r(Ex,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ex.forEach(t),Ne=i(f),Xe=n(f,"P",{});var Fn=s(Xe);si=r(Fn,"Instantiating one of "),Tn=n(Fn,"A",{href:!0});var AMe=s(Tn);FA=r(AMe,"AutoConfig"),AMe.forEach(t),Mn=r(Fn,", "),En=n(Fn,"A",{href:!0});var yMe=s(En);TA=r(yMe,"AutoModel"),yMe.forEach(t),li=r(Fn,`, and
`),Cn=n(Fn,"A",{href:!0});var LMe=s(Cn);MA=r(LMe,"AutoTokenizer"),LMe.forEach(t),ii=r(Fn," will directly create a class of the relevant architecture. For instance"),Fn.forEach(t),nf=i(f),T(Fa.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Cx=s(Ae);B9=r(Cx,"will create a model that is an instance of "),di=n(Cx,"A",{href:!0});var xMe=s(di);P9=r(xMe,"BertModel"),xMe.forEach(t),I9=r(Cx,"."),Cx.forEach(t),To=i(f),Ta=n(f,"P",{});var wx=s(Ta);q9=r(wx,"There is one class of "),sf=n(wx,"CODE",{});var $Me=s(sf);N9=r($Me,"AutoModel"),$Me.forEach(t),vNe=r(wx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),wx.forEach(t),gBe=i(f),ci=n(f,"H2",{class:!0});var Ax=s(ci);lf=n(Ax,"A",{id:!0,class:!0,href:!0});var kMe=s(lf);rZ=n(kMe,"SPAN",{});var SMe=s(rZ);T(EA.$$.fragment,SMe),SMe.forEach(t),kMe.forEach(t),FNe=i(Ax),tZ=n(Ax,"SPAN",{});var RMe=s(tZ);TNe=r(RMe,"Extending the Auto Classes"),RMe.forEach(t),Ax.forEach(t),hBe=i(f),wn=n(f,"P",{});var ef=s(wn);MNe=r(ef,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),aZ=n(ef,"CODE",{});var BMe=s(aZ);ENe=r(BMe,"NewModel"),BMe.forEach(t),CNe=r(ef,", make sure you have a "),nZ=n(ef,"CODE",{});var PMe=s(nZ);wNe=r(PMe,"NewModelConfig"),PMe.forEach(t),ANe=r(ef,` then you can add those to the auto
classes like this:`),ef.forEach(t),pBe=i(f),T(CA.$$.fragment,f),uBe=i(f),j9=n(f,"P",{});var IMe=s(j9);yNe=r(IMe,"You will then be able to use the auto classes like you would usually do!"),IMe.forEach(t),_Be=i(f),T(df.$$.fragment,f),bBe=i(f),fi=n(f,"H2",{class:!0});var yx=s(fi);cf=n(yx,"A",{id:!0,class:!0,href:!0});var qMe=s(cf);sZ=n(qMe,"SPAN",{});var NMe=s(sZ);T(wA.$$.fragment,NMe),NMe.forEach(t),qMe.forEach(t),LNe=i(yx),lZ=n(yx,"SPAN",{});var jMe=s(lZ);xNe=r(jMe,"AutoConfig"),jMe.forEach(t),yx.forEach(t),vBe=i(f),Mo=n(f,"DIV",{class:!0});var Yr=s(Mo);T(AA.$$.fragment,Yr),$Ne=i(Yr),yA=n(Yr,"P",{});var Lx=s(yA);kNe=r(Lx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),D9=n(Lx,"A",{href:!0});var DMe=s(D9);SNe=r(DMe,"from_pretrained()"),DMe.forEach(t),RNe=r(Lx," class method."),Lx.forEach(t),BNe=i(Yr),LA=n(Yr,"P",{});var xx=s(LA);PNe=r(xx,"This class cannot be instantiated directly using "),iZ=n(xx,"CODE",{});var GMe=s(iZ);INe=r(GMe,"__init__()"),GMe.forEach(t),qNe=r(xx," (throws an error)."),xx.forEach(t),NNe=i(Yr),Fr=n(Yr,"DIV",{class:!0});var Kr=s(Fr);T(xA.$$.fragment,Kr),jNe=i(Kr),dZ=n(Kr,"P",{});var OMe=s(dZ);DNe=r(OMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),OMe.forEach(t),GNe=i(Kr),mi=n(Kr,"P",{});var of=s(mi);ONe=r(of,"The configuration class to instantiate is selected based on the "),cZ=n(of,"CODE",{});var VMe=s(cZ);VNe=r(VMe,"model_type"),VMe.forEach(t),XNe=r(of,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),fZ=n(of,"CODE",{});var XMe=s(fZ);zNe=r(XMe,"pretrained_model_name_or_path"),XMe.forEach(t),WNe=r(of,":"),of.forEach(t),QNe=i(Kr),A=n(Kr,"UL",{});var y=s(A);ff=n(y,"LI",{});var s3=s(ff);mZ=n(s3,"STRONG",{});var zMe=s(mZ);HNe=r(zMe,"albert"),zMe.forEach(t),UNe=r(s3," \u2014 "),G9=n(s3,"A",{href:!0});var WMe=s(G9);JNe=r(WMe,"AlbertConfig"),WMe.forEach(t),YNe=r(s3," (ALBERT model)"),s3.forEach(t),KNe=i(y),mf=n(y,"LI",{});var l3=s(mf);gZ=n(l3,"STRONG",{});var QMe=s(gZ);ZNe=r(QMe,"bart"),QMe.forEach(t),eje=r(l3," \u2014 "),O9=n(l3,"A",{href:!0});var HMe=s(O9);oje=r(HMe,"BartConfig"),HMe.forEach(t),rje=r(l3," (BART model)"),l3.forEach(t),tje=i(y),gf=n(y,"LI",{});var i3=s(gf);hZ=n(i3,"STRONG",{});var UMe=s(hZ);aje=r(UMe,"beit"),UMe.forEach(t),nje=r(i3," \u2014 "),V9=n(i3,"A",{href:!0});var JMe=s(V9);sje=r(JMe,"BeitConfig"),JMe.forEach(t),lje=r(i3," (BEiT model)"),i3.forEach(t),ije=i(y),hf=n(y,"LI",{});var d3=s(hf);pZ=n(d3,"STRONG",{});var YMe=s(pZ);dje=r(YMe,"bert"),YMe.forEach(t),cje=r(d3," \u2014 "),X9=n(d3,"A",{href:!0});var KMe=s(X9);fje=r(KMe,"BertConfig"),KMe.forEach(t),mje=r(d3," (BERT model)"),d3.forEach(t),gje=i(y),pf=n(y,"LI",{});var c3=s(pf);uZ=n(c3,"STRONG",{});var ZMe=s(uZ);hje=r(ZMe,"bert-generation"),ZMe.forEach(t),pje=r(c3," \u2014 "),z9=n(c3,"A",{href:!0});var e4e=s(z9);uje=r(e4e,"BertGenerationConfig"),e4e.forEach(t),_je=r(c3," (Bert Generation model)"),c3.forEach(t),bje=i(y),uf=n(y,"LI",{});var f3=s(uf);_Z=n(f3,"STRONG",{});var o4e=s(_Z);vje=r(o4e,"big_bird"),o4e.forEach(t),Fje=r(f3," \u2014 "),W9=n(f3,"A",{href:!0});var r4e=s(W9);Tje=r(r4e,"BigBirdConfig"),r4e.forEach(t),Mje=r(f3," (BigBird model)"),f3.forEach(t),Eje=i(y),_f=n(y,"LI",{});var m3=s(_f);bZ=n(m3,"STRONG",{});var t4e=s(bZ);Cje=r(t4e,"bigbird_pegasus"),t4e.forEach(t),wje=r(m3," \u2014 "),Q9=n(m3,"A",{href:!0});var a4e=s(Q9);Aje=r(a4e,"BigBirdPegasusConfig"),a4e.forEach(t),yje=r(m3," (BigBirdPegasus model)"),m3.forEach(t),Lje=i(y),bf=n(y,"LI",{});var g3=s(bf);vZ=n(g3,"STRONG",{});var n4e=s(vZ);xje=r(n4e,"blenderbot"),n4e.forEach(t),$je=r(g3," \u2014 "),H9=n(g3,"A",{href:!0});var s4e=s(H9);kje=r(s4e,"BlenderbotConfig"),s4e.forEach(t),Sje=r(g3," (Blenderbot model)"),g3.forEach(t),Rje=i(y),vf=n(y,"LI",{});var h3=s(vf);FZ=n(h3,"STRONG",{});var l4e=s(FZ);Bje=r(l4e,"blenderbot-small"),l4e.forEach(t),Pje=r(h3," \u2014 "),U9=n(h3,"A",{href:!0});var i4e=s(U9);Ije=r(i4e,"BlenderbotSmallConfig"),i4e.forEach(t),qje=r(h3," (BlenderbotSmall model)"),h3.forEach(t),Nje=i(y),Ff=n(y,"LI",{});var p3=s(Ff);TZ=n(p3,"STRONG",{});var d4e=s(TZ);jje=r(d4e,"camembert"),d4e.forEach(t),Dje=r(p3," \u2014 "),J9=n(p3,"A",{href:!0});var c4e=s(J9);Gje=r(c4e,"CamembertConfig"),c4e.forEach(t),Oje=r(p3," (CamemBERT model)"),p3.forEach(t),Vje=i(y),Tf=n(y,"LI",{});var u3=s(Tf);MZ=n(u3,"STRONG",{});var f4e=s(MZ);Xje=r(f4e,"canine"),f4e.forEach(t),zje=r(u3," \u2014 "),Y9=n(u3,"A",{href:!0});var m4e=s(Y9);Wje=r(m4e,"CanineConfig"),m4e.forEach(t),Qje=r(u3," (Canine model)"),u3.forEach(t),Hje=i(y),Mf=n(y,"LI",{});var _3=s(Mf);EZ=n(_3,"STRONG",{});var g4e=s(EZ);Uje=r(g4e,"clip"),g4e.forEach(t),Jje=r(_3," \u2014 "),K9=n(_3,"A",{href:!0});var h4e=s(K9);Yje=r(h4e,"CLIPConfig"),h4e.forEach(t),Kje=r(_3," (CLIP model)"),_3.forEach(t),Zje=i(y),Ef=n(y,"LI",{});var b3=s(Ef);CZ=n(b3,"STRONG",{});var p4e=s(CZ);eDe=r(p4e,"convbert"),p4e.forEach(t),oDe=r(b3," \u2014 "),Z9=n(b3,"A",{href:!0});var u4e=s(Z9);rDe=r(u4e,"ConvBertConfig"),u4e.forEach(t),tDe=r(b3," (ConvBERT model)"),b3.forEach(t),aDe=i(y),Cf=n(y,"LI",{});var v3=s(Cf);wZ=n(v3,"STRONG",{});var _4e=s(wZ);nDe=r(_4e,"convnext"),_4e.forEach(t),sDe=r(v3," \u2014 "),e$=n(v3,"A",{href:!0});var b4e=s(e$);lDe=r(b4e,"ConvNextConfig"),b4e.forEach(t),iDe=r(v3," (ConvNext model)"),v3.forEach(t),dDe=i(y),wf=n(y,"LI",{});var F3=s(wf);AZ=n(F3,"STRONG",{});var v4e=s(AZ);cDe=r(v4e,"ctrl"),v4e.forEach(t),fDe=r(F3," \u2014 "),o$=n(F3,"A",{href:!0});var F4e=s(o$);mDe=r(F4e,"CTRLConfig"),F4e.forEach(t),gDe=r(F3," (CTRL model)"),F3.forEach(t),hDe=i(y),Af=n(y,"LI",{});var T3=s(Af);yZ=n(T3,"STRONG",{});var T4e=s(yZ);pDe=r(T4e,"data2vec-audio"),T4e.forEach(t),uDe=r(T3," \u2014 "),r$=n(T3,"A",{href:!0});var M4e=s(r$);_De=r(M4e,"Data2VecAudioConfig"),M4e.forEach(t),bDe=r(T3," (Data2VecAudio model)"),T3.forEach(t),vDe=i(y),yf=n(y,"LI",{});var M3=s(yf);LZ=n(M3,"STRONG",{});var E4e=s(LZ);FDe=r(E4e,"data2vec-text"),E4e.forEach(t),TDe=r(M3," \u2014 "),t$=n(M3,"A",{href:!0});var C4e=s(t$);MDe=r(C4e,"Data2VecTextConfig"),C4e.forEach(t),EDe=r(M3," (Data2VecText model)"),M3.forEach(t),CDe=i(y),Lf=n(y,"LI",{});var E3=s(Lf);xZ=n(E3,"STRONG",{});var w4e=s(xZ);wDe=r(w4e,"data2vec-vision"),w4e.forEach(t),ADe=r(E3," \u2014 "),a$=n(E3,"A",{href:!0});var A4e=s(a$);yDe=r(A4e,"Data2VecVisionConfig"),A4e.forEach(t),LDe=r(E3," (Data2VecVision model)"),E3.forEach(t),xDe=i(y),xf=n(y,"LI",{});var C3=s(xf);$Z=n(C3,"STRONG",{});var y4e=s($Z);$De=r(y4e,"deberta"),y4e.forEach(t),kDe=r(C3," \u2014 "),n$=n(C3,"A",{href:!0});var L4e=s(n$);SDe=r(L4e,"DebertaConfig"),L4e.forEach(t),RDe=r(C3," (DeBERTa model)"),C3.forEach(t),BDe=i(y),$f=n(y,"LI",{});var w3=s($f);kZ=n(w3,"STRONG",{});var x4e=s(kZ);PDe=r(x4e,"deberta-v2"),x4e.forEach(t),IDe=r(w3," \u2014 "),s$=n(w3,"A",{href:!0});var $4e=s(s$);qDe=r($4e,"DebertaV2Config"),$4e.forEach(t),NDe=r(w3," (DeBERTa-v2 model)"),w3.forEach(t),jDe=i(y),kf=n(y,"LI",{});var A3=s(kf);SZ=n(A3,"STRONG",{});var k4e=s(SZ);DDe=r(k4e,"decision_transformer"),k4e.forEach(t),GDe=r(A3," \u2014 "),l$=n(A3,"A",{href:!0});var S4e=s(l$);ODe=r(S4e,"DecisionTransformerConfig"),S4e.forEach(t),VDe=r(A3," (Decision Transformer model)"),A3.forEach(t),XDe=i(y),Sf=n(y,"LI",{});var y3=s(Sf);RZ=n(y3,"STRONG",{});var R4e=s(RZ);zDe=r(R4e,"deit"),R4e.forEach(t),WDe=r(y3," \u2014 "),i$=n(y3,"A",{href:!0});var B4e=s(i$);QDe=r(B4e,"DeiTConfig"),B4e.forEach(t),HDe=r(y3," (DeiT model)"),y3.forEach(t),UDe=i(y),Rf=n(y,"LI",{});var P4e=s(Rf);BZ=n(P4e,"STRONG",{});var uPr=s(BZ);JDe=r(uPr,"detr"),uPr.forEach(t),YDe=r(P4e," \u2014 "),d$=n(P4e,"A",{href:!0});var _Pr=s(d$);KDe=r(_Pr,"DetrConfig"),_Pr.forEach(t),ZDe=r(P4e," (DETR model)"),P4e.forEach(t),eGe=i(y),Bf=n(y,"LI",{});var I4e=s(Bf);PZ=n(I4e,"STRONG",{});var bPr=s(PZ);oGe=r(bPr,"distilbert"),bPr.forEach(t),rGe=r(I4e," \u2014 "),c$=n(I4e,"A",{href:!0});var vPr=s(c$);tGe=r(vPr,"DistilBertConfig"),vPr.forEach(t),aGe=r(I4e," (DistilBERT model)"),I4e.forEach(t),nGe=i(y),Pf=n(y,"LI",{});var q4e=s(Pf);IZ=n(q4e,"STRONG",{});var FPr=s(IZ);sGe=r(FPr,"dpr"),FPr.forEach(t),lGe=r(q4e," \u2014 "),f$=n(q4e,"A",{href:!0});var TPr=s(f$);iGe=r(TPr,"DPRConfig"),TPr.forEach(t),dGe=r(q4e," (DPR model)"),q4e.forEach(t),cGe=i(y),If=n(y,"LI",{});var N4e=s(If);qZ=n(N4e,"STRONG",{});var MPr=s(qZ);fGe=r(MPr,"dpt"),MPr.forEach(t),mGe=r(N4e," \u2014 "),m$=n(N4e,"A",{href:!0});var EPr=s(m$);gGe=r(EPr,"DPTConfig"),EPr.forEach(t),hGe=r(N4e," (DPT model)"),N4e.forEach(t),pGe=i(y),qf=n(y,"LI",{});var j4e=s(qf);NZ=n(j4e,"STRONG",{});var CPr=s(NZ);uGe=r(CPr,"electra"),CPr.forEach(t),_Ge=r(j4e," \u2014 "),g$=n(j4e,"A",{href:!0});var wPr=s(g$);bGe=r(wPr,"ElectraConfig"),wPr.forEach(t),vGe=r(j4e," (ELECTRA model)"),j4e.forEach(t),FGe=i(y),Nf=n(y,"LI",{});var D4e=s(Nf);jZ=n(D4e,"STRONG",{});var APr=s(jZ);TGe=r(APr,"encoder-decoder"),APr.forEach(t),MGe=r(D4e," \u2014 "),h$=n(D4e,"A",{href:!0});var yPr=s(h$);EGe=r(yPr,"EncoderDecoderConfig"),yPr.forEach(t),CGe=r(D4e," (Encoder decoder model)"),D4e.forEach(t),wGe=i(y),jf=n(y,"LI",{});var G4e=s(jf);DZ=n(G4e,"STRONG",{});var LPr=s(DZ);AGe=r(LPr,"flaubert"),LPr.forEach(t),yGe=r(G4e," \u2014 "),p$=n(G4e,"A",{href:!0});var xPr=s(p$);LGe=r(xPr,"FlaubertConfig"),xPr.forEach(t),xGe=r(G4e," (FlauBERT model)"),G4e.forEach(t),$Ge=i(y),Df=n(y,"LI",{});var O4e=s(Df);GZ=n(O4e,"STRONG",{});var $Pr=s(GZ);kGe=r($Pr,"fnet"),$Pr.forEach(t),SGe=r(O4e," \u2014 "),u$=n(O4e,"A",{href:!0});var kPr=s(u$);RGe=r(kPr,"FNetConfig"),kPr.forEach(t),BGe=r(O4e," (FNet model)"),O4e.forEach(t),PGe=i(y),Gf=n(y,"LI",{});var V4e=s(Gf);OZ=n(V4e,"STRONG",{});var SPr=s(OZ);IGe=r(SPr,"fsmt"),SPr.forEach(t),qGe=r(V4e," \u2014 "),_$=n(V4e,"A",{href:!0});var RPr=s(_$);NGe=r(RPr,"FSMTConfig"),RPr.forEach(t),jGe=r(V4e," (FairSeq Machine-Translation model)"),V4e.forEach(t),DGe=i(y),Of=n(y,"LI",{});var X4e=s(Of);VZ=n(X4e,"STRONG",{});var BPr=s(VZ);GGe=r(BPr,"funnel"),BPr.forEach(t),OGe=r(X4e," \u2014 "),b$=n(X4e,"A",{href:!0});var PPr=s(b$);VGe=r(PPr,"FunnelConfig"),PPr.forEach(t),XGe=r(X4e," (Funnel Transformer model)"),X4e.forEach(t),zGe=i(y),Vf=n(y,"LI",{});var z4e=s(Vf);XZ=n(z4e,"STRONG",{});var IPr=s(XZ);WGe=r(IPr,"glpn"),IPr.forEach(t),QGe=r(z4e," \u2014 "),v$=n(z4e,"A",{href:!0});var qPr=s(v$);HGe=r(qPr,"GLPNConfig"),qPr.forEach(t),UGe=r(z4e," (GLPN model)"),z4e.forEach(t),JGe=i(y),Xf=n(y,"LI",{});var W4e=s(Xf);zZ=n(W4e,"STRONG",{});var NPr=s(zZ);YGe=r(NPr,"gpt2"),NPr.forEach(t),KGe=r(W4e," \u2014 "),F$=n(W4e,"A",{href:!0});var jPr=s(F$);ZGe=r(jPr,"GPT2Config"),jPr.forEach(t),eOe=r(W4e," (OpenAI GPT-2 model)"),W4e.forEach(t),oOe=i(y),zf=n(y,"LI",{});var Q4e=s(zf);WZ=n(Q4e,"STRONG",{});var DPr=s(WZ);rOe=r(DPr,"gpt_neo"),DPr.forEach(t),tOe=r(Q4e," \u2014 "),T$=n(Q4e,"A",{href:!0});var GPr=s(T$);aOe=r(GPr,"GPTNeoConfig"),GPr.forEach(t),nOe=r(Q4e," (GPT Neo model)"),Q4e.forEach(t),sOe=i(y),Wf=n(y,"LI",{});var H4e=s(Wf);QZ=n(H4e,"STRONG",{});var OPr=s(QZ);lOe=r(OPr,"gptj"),OPr.forEach(t),iOe=r(H4e," \u2014 "),M$=n(H4e,"A",{href:!0});var VPr=s(M$);dOe=r(VPr,"GPTJConfig"),VPr.forEach(t),cOe=r(H4e," (GPT-J model)"),H4e.forEach(t),fOe=i(y),Qf=n(y,"LI",{});var U4e=s(Qf);HZ=n(U4e,"STRONG",{});var XPr=s(HZ);mOe=r(XPr,"hubert"),XPr.forEach(t),gOe=r(U4e," \u2014 "),E$=n(U4e,"A",{href:!0});var zPr=s(E$);hOe=r(zPr,"HubertConfig"),zPr.forEach(t),pOe=r(U4e," (Hubert model)"),U4e.forEach(t),uOe=i(y),Hf=n(y,"LI",{});var J4e=s(Hf);UZ=n(J4e,"STRONG",{});var WPr=s(UZ);_Oe=r(WPr,"ibert"),WPr.forEach(t),bOe=r(J4e," \u2014 "),C$=n(J4e,"A",{href:!0});var QPr=s(C$);vOe=r(QPr,"IBertConfig"),QPr.forEach(t),FOe=r(J4e," (I-BERT model)"),J4e.forEach(t),TOe=i(y),Uf=n(y,"LI",{});var Y4e=s(Uf);JZ=n(Y4e,"STRONG",{});var HPr=s(JZ);MOe=r(HPr,"imagegpt"),HPr.forEach(t),EOe=r(Y4e," \u2014 "),w$=n(Y4e,"A",{href:!0});var UPr=s(w$);COe=r(UPr,"ImageGPTConfig"),UPr.forEach(t),wOe=r(Y4e," (ImageGPT model)"),Y4e.forEach(t),AOe=i(y),Jf=n(y,"LI",{});var K4e=s(Jf);YZ=n(K4e,"STRONG",{});var JPr=s(YZ);yOe=r(JPr,"layoutlm"),JPr.forEach(t),LOe=r(K4e," \u2014 "),A$=n(K4e,"A",{href:!0});var YPr=s(A$);xOe=r(YPr,"LayoutLMConfig"),YPr.forEach(t),$Oe=r(K4e," (LayoutLM model)"),K4e.forEach(t),kOe=i(y),Yf=n(y,"LI",{});var Z4e=s(Yf);KZ=n(Z4e,"STRONG",{});var KPr=s(KZ);SOe=r(KPr,"layoutlmv2"),KPr.forEach(t),ROe=r(Z4e," \u2014 "),y$=n(Z4e,"A",{href:!0});var ZPr=s(y$);BOe=r(ZPr,"LayoutLMv2Config"),ZPr.forEach(t),POe=r(Z4e," (LayoutLMv2 model)"),Z4e.forEach(t),IOe=i(y),Kf=n(y,"LI",{});var eEe=s(Kf);ZZ=n(eEe,"STRONG",{});var eIr=s(ZZ);qOe=r(eIr,"led"),eIr.forEach(t),NOe=r(eEe," \u2014 "),L$=n(eEe,"A",{href:!0});var oIr=s(L$);jOe=r(oIr,"LEDConfig"),oIr.forEach(t),DOe=r(eEe," (LED model)"),eEe.forEach(t),GOe=i(y),Zf=n(y,"LI",{});var oEe=s(Zf);eee=n(oEe,"STRONG",{});var rIr=s(eee);OOe=r(rIr,"longformer"),rIr.forEach(t),VOe=r(oEe," \u2014 "),x$=n(oEe,"A",{href:!0});var tIr=s(x$);XOe=r(tIr,"LongformerConfig"),tIr.forEach(t),zOe=r(oEe," (Longformer model)"),oEe.forEach(t),WOe=i(y),em=n(y,"LI",{});var rEe=s(em);oee=n(rEe,"STRONG",{});var aIr=s(oee);QOe=r(aIr,"luke"),aIr.forEach(t),HOe=r(rEe," \u2014 "),$$=n(rEe,"A",{href:!0});var nIr=s($$);UOe=r(nIr,"LukeConfig"),nIr.forEach(t),JOe=r(rEe," (LUKE model)"),rEe.forEach(t),YOe=i(y),om=n(y,"LI",{});var tEe=s(om);ree=n(tEe,"STRONG",{});var sIr=s(ree);KOe=r(sIr,"lxmert"),sIr.forEach(t),ZOe=r(tEe," \u2014 "),k$=n(tEe,"A",{href:!0});var lIr=s(k$);eVe=r(lIr,"LxmertConfig"),lIr.forEach(t),oVe=r(tEe," (LXMERT model)"),tEe.forEach(t),rVe=i(y),rm=n(y,"LI",{});var aEe=s(rm);tee=n(aEe,"STRONG",{});var iIr=s(tee);tVe=r(iIr,"m2m_100"),iIr.forEach(t),aVe=r(aEe," \u2014 "),S$=n(aEe,"A",{href:!0});var dIr=s(S$);nVe=r(dIr,"M2M100Config"),dIr.forEach(t),sVe=r(aEe," (M2M100 model)"),aEe.forEach(t),lVe=i(y),tm=n(y,"LI",{});var nEe=s(tm);aee=n(nEe,"STRONG",{});var cIr=s(aee);iVe=r(cIr,"marian"),cIr.forEach(t),dVe=r(nEe," \u2014 "),R$=n(nEe,"A",{href:!0});var fIr=s(R$);cVe=r(fIr,"MarianConfig"),fIr.forEach(t),fVe=r(nEe," (Marian model)"),nEe.forEach(t),mVe=i(y),am=n(y,"LI",{});var sEe=s(am);nee=n(sEe,"STRONG",{});var mIr=s(nee);gVe=r(mIr,"maskformer"),mIr.forEach(t),hVe=r(sEe," \u2014 "),B$=n(sEe,"A",{href:!0});var gIr=s(B$);pVe=r(gIr,"MaskFormerConfig"),gIr.forEach(t),uVe=r(sEe," (MaskFormer model)"),sEe.forEach(t),_Ve=i(y),nm=n(y,"LI",{});var lEe=s(nm);see=n(lEe,"STRONG",{});var hIr=s(see);bVe=r(hIr,"mbart"),hIr.forEach(t),vVe=r(lEe," \u2014 "),P$=n(lEe,"A",{href:!0});var pIr=s(P$);FVe=r(pIr,"MBartConfig"),pIr.forEach(t),TVe=r(lEe," (mBART model)"),lEe.forEach(t),MVe=i(y),sm=n(y,"LI",{});var iEe=s(sm);lee=n(iEe,"STRONG",{});var uIr=s(lee);EVe=r(uIr,"megatron-bert"),uIr.forEach(t),CVe=r(iEe," \u2014 "),I$=n(iEe,"A",{href:!0});var _Ir=s(I$);wVe=r(_Ir,"MegatronBertConfig"),_Ir.forEach(t),AVe=r(iEe," (MegatronBert model)"),iEe.forEach(t),yVe=i(y),lm=n(y,"LI",{});var dEe=s(lm);iee=n(dEe,"STRONG",{});var bIr=s(iee);LVe=r(bIr,"mobilebert"),bIr.forEach(t),xVe=r(dEe," \u2014 "),q$=n(dEe,"A",{href:!0});var vIr=s(q$);$Ve=r(vIr,"MobileBertConfig"),vIr.forEach(t),kVe=r(dEe," (MobileBERT model)"),dEe.forEach(t),SVe=i(y),im=n(y,"LI",{});var cEe=s(im);dee=n(cEe,"STRONG",{});var FIr=s(dee);RVe=r(FIr,"mpnet"),FIr.forEach(t),BVe=r(cEe," \u2014 "),N$=n(cEe,"A",{href:!0});var TIr=s(N$);PVe=r(TIr,"MPNetConfig"),TIr.forEach(t),IVe=r(cEe," (MPNet model)"),cEe.forEach(t),qVe=i(y),dm=n(y,"LI",{});var fEe=s(dm);cee=n(fEe,"STRONG",{});var MIr=s(cee);NVe=r(MIr,"mt5"),MIr.forEach(t),jVe=r(fEe," \u2014 "),j$=n(fEe,"A",{href:!0});var EIr=s(j$);DVe=r(EIr,"MT5Config"),EIr.forEach(t),GVe=r(fEe," (mT5 model)"),fEe.forEach(t),OVe=i(y),cm=n(y,"LI",{});var mEe=s(cm);fee=n(mEe,"STRONG",{});var CIr=s(fee);VVe=r(CIr,"nystromformer"),CIr.forEach(t),XVe=r(mEe," \u2014 "),D$=n(mEe,"A",{href:!0});var wIr=s(D$);zVe=r(wIr,"NystromformerConfig"),wIr.forEach(t),WVe=r(mEe," (Nystromformer model)"),mEe.forEach(t),QVe=i(y),fm=n(y,"LI",{});var gEe=s(fm);mee=n(gEe,"STRONG",{});var AIr=s(mee);HVe=r(AIr,"openai-gpt"),AIr.forEach(t),UVe=r(gEe," \u2014 "),G$=n(gEe,"A",{href:!0});var yIr=s(G$);JVe=r(yIr,"OpenAIGPTConfig"),yIr.forEach(t),YVe=r(gEe," (OpenAI GPT model)"),gEe.forEach(t),KVe=i(y),mm=n(y,"LI",{});var hEe=s(mm);gee=n(hEe,"STRONG",{});var LIr=s(gee);ZVe=r(LIr,"pegasus"),LIr.forEach(t),eXe=r(hEe," \u2014 "),O$=n(hEe,"A",{href:!0});var xIr=s(O$);oXe=r(xIr,"PegasusConfig"),xIr.forEach(t),rXe=r(hEe," (Pegasus model)"),hEe.forEach(t),tXe=i(y),gm=n(y,"LI",{});var pEe=s(gm);hee=n(pEe,"STRONG",{});var $Ir=s(hee);aXe=r($Ir,"perceiver"),$Ir.forEach(t),nXe=r(pEe," \u2014 "),V$=n(pEe,"A",{href:!0});var kIr=s(V$);sXe=r(kIr,"PerceiverConfig"),kIr.forEach(t),lXe=r(pEe," (Perceiver model)"),pEe.forEach(t),iXe=i(y),hm=n(y,"LI",{});var uEe=s(hm);pee=n(uEe,"STRONG",{});var SIr=s(pee);dXe=r(SIr,"plbart"),SIr.forEach(t),cXe=r(uEe," \u2014 "),X$=n(uEe,"A",{href:!0});var RIr=s(X$);fXe=r(RIr,"PLBartConfig"),RIr.forEach(t),mXe=r(uEe," (PLBart model)"),uEe.forEach(t),gXe=i(y),pm=n(y,"LI",{});var _Ee=s(pm);uee=n(_Ee,"STRONG",{});var BIr=s(uee);hXe=r(BIr,"poolformer"),BIr.forEach(t),pXe=r(_Ee," \u2014 "),z$=n(_Ee,"A",{href:!0});var PIr=s(z$);uXe=r(PIr,"PoolFormerConfig"),PIr.forEach(t),_Xe=r(_Ee," (PoolFormer model)"),_Ee.forEach(t),bXe=i(y),um=n(y,"LI",{});var bEe=s(um);_ee=n(bEe,"STRONG",{});var IIr=s(_ee);vXe=r(IIr,"prophetnet"),IIr.forEach(t),FXe=r(bEe," \u2014 "),W$=n(bEe,"A",{href:!0});var qIr=s(W$);TXe=r(qIr,"ProphetNetConfig"),qIr.forEach(t),MXe=r(bEe," (ProphetNet model)"),bEe.forEach(t),EXe=i(y),_m=n(y,"LI",{});var vEe=s(_m);bee=n(vEe,"STRONG",{});var NIr=s(bee);CXe=r(NIr,"qdqbert"),NIr.forEach(t),wXe=r(vEe," \u2014 "),Q$=n(vEe,"A",{href:!0});var jIr=s(Q$);AXe=r(jIr,"QDQBertConfig"),jIr.forEach(t),yXe=r(vEe," (QDQBert model)"),vEe.forEach(t),LXe=i(y),bm=n(y,"LI",{});var FEe=s(bm);vee=n(FEe,"STRONG",{});var DIr=s(vee);xXe=r(DIr,"rag"),DIr.forEach(t),$Xe=r(FEe," \u2014 "),H$=n(FEe,"A",{href:!0});var GIr=s(H$);kXe=r(GIr,"RagConfig"),GIr.forEach(t),SXe=r(FEe," (RAG model)"),FEe.forEach(t),RXe=i(y),vm=n(y,"LI",{});var TEe=s(vm);Fee=n(TEe,"STRONG",{});var OIr=s(Fee);BXe=r(OIr,"realm"),OIr.forEach(t),PXe=r(TEe," \u2014 "),U$=n(TEe,"A",{href:!0});var VIr=s(U$);IXe=r(VIr,"RealmConfig"),VIr.forEach(t),qXe=r(TEe," (Realm model)"),TEe.forEach(t),NXe=i(y),Fm=n(y,"LI",{});var MEe=s(Fm);Tee=n(MEe,"STRONG",{});var XIr=s(Tee);jXe=r(XIr,"reformer"),XIr.forEach(t),DXe=r(MEe," \u2014 "),J$=n(MEe,"A",{href:!0});var zIr=s(J$);GXe=r(zIr,"ReformerConfig"),zIr.forEach(t),OXe=r(MEe," (Reformer model)"),MEe.forEach(t),VXe=i(y),Tm=n(y,"LI",{});var EEe=s(Tm);Mee=n(EEe,"STRONG",{});var WIr=s(Mee);XXe=r(WIr,"regnet"),WIr.forEach(t),zXe=r(EEe," \u2014 "),Y$=n(EEe,"A",{href:!0});var QIr=s(Y$);WXe=r(QIr,"RegNetConfig"),QIr.forEach(t),QXe=r(EEe," (RegNet model)"),EEe.forEach(t),HXe=i(y),Mm=n(y,"LI",{});var CEe=s(Mm);Eee=n(CEe,"STRONG",{});var HIr=s(Eee);UXe=r(HIr,"rembert"),HIr.forEach(t),JXe=r(CEe," \u2014 "),K$=n(CEe,"A",{href:!0});var UIr=s(K$);YXe=r(UIr,"RemBertConfig"),UIr.forEach(t),KXe=r(CEe," (RemBERT model)"),CEe.forEach(t),ZXe=i(y),Em=n(y,"LI",{});var wEe=s(Em);Cee=n(wEe,"STRONG",{});var JIr=s(Cee);eze=r(JIr,"resnet"),JIr.forEach(t),oze=r(wEe," \u2014 "),Z$=n(wEe,"A",{href:!0});var YIr=s(Z$);rze=r(YIr,"ResNetConfig"),YIr.forEach(t),tze=r(wEe," (ResNet model)"),wEe.forEach(t),aze=i(y),Cm=n(y,"LI",{});var AEe=s(Cm);wee=n(AEe,"STRONG",{});var KIr=s(wee);nze=r(KIr,"retribert"),KIr.forEach(t),sze=r(AEe," \u2014 "),ek=n(AEe,"A",{href:!0});var ZIr=s(ek);lze=r(ZIr,"RetriBertConfig"),ZIr.forEach(t),ize=r(AEe," (RetriBERT model)"),AEe.forEach(t),dze=i(y),wm=n(y,"LI",{});var yEe=s(wm);Aee=n(yEe,"STRONG",{});var eqr=s(Aee);cze=r(eqr,"roberta"),eqr.forEach(t),fze=r(yEe," \u2014 "),ok=n(yEe,"A",{href:!0});var oqr=s(ok);mze=r(oqr,"RobertaConfig"),oqr.forEach(t),gze=r(yEe," (RoBERTa model)"),yEe.forEach(t),hze=i(y),Am=n(y,"LI",{});var LEe=s(Am);yee=n(LEe,"STRONG",{});var rqr=s(yee);pze=r(rqr,"roformer"),rqr.forEach(t),uze=r(LEe," \u2014 "),rk=n(LEe,"A",{href:!0});var tqr=s(rk);_ze=r(tqr,"RoFormerConfig"),tqr.forEach(t),bze=r(LEe," (RoFormer model)"),LEe.forEach(t),vze=i(y),ym=n(y,"LI",{});var xEe=s(ym);Lee=n(xEe,"STRONG",{});var aqr=s(Lee);Fze=r(aqr,"segformer"),aqr.forEach(t),Tze=r(xEe," \u2014 "),tk=n(xEe,"A",{href:!0});var nqr=s(tk);Mze=r(nqr,"SegformerConfig"),nqr.forEach(t),Eze=r(xEe," (SegFormer model)"),xEe.forEach(t),Cze=i(y),Lm=n(y,"LI",{});var $Ee=s(Lm);xee=n($Ee,"STRONG",{});var sqr=s(xee);wze=r(sqr,"sew"),sqr.forEach(t),Aze=r($Ee," \u2014 "),ak=n($Ee,"A",{href:!0});var lqr=s(ak);yze=r(lqr,"SEWConfig"),lqr.forEach(t),Lze=r($Ee," (SEW model)"),$Ee.forEach(t),xze=i(y),xm=n(y,"LI",{});var kEe=s(xm);$ee=n(kEe,"STRONG",{});var iqr=s($ee);$ze=r(iqr,"sew-d"),iqr.forEach(t),kze=r(kEe," \u2014 "),nk=n(kEe,"A",{href:!0});var dqr=s(nk);Sze=r(dqr,"SEWDConfig"),dqr.forEach(t),Rze=r(kEe," (SEW-D model)"),kEe.forEach(t),Bze=i(y),$m=n(y,"LI",{});var SEe=s($m);kee=n(SEe,"STRONG",{});var cqr=s(kee);Pze=r(cqr,"speech-encoder-decoder"),cqr.forEach(t),Ize=r(SEe," \u2014 "),sk=n(SEe,"A",{href:!0});var fqr=s(sk);qze=r(fqr,"SpeechEncoderDecoderConfig"),fqr.forEach(t),Nze=r(SEe," (Speech Encoder decoder model)"),SEe.forEach(t),jze=i(y),km=n(y,"LI",{});var REe=s(km);See=n(REe,"STRONG",{});var mqr=s(See);Dze=r(mqr,"speech_to_text"),mqr.forEach(t),Gze=r(REe," \u2014 "),lk=n(REe,"A",{href:!0});var gqr=s(lk);Oze=r(gqr,"Speech2TextConfig"),gqr.forEach(t),Vze=r(REe," (Speech2Text model)"),REe.forEach(t),Xze=i(y),Sm=n(y,"LI",{});var BEe=s(Sm);Ree=n(BEe,"STRONG",{});var hqr=s(Ree);zze=r(hqr,"speech_to_text_2"),hqr.forEach(t),Wze=r(BEe," \u2014 "),ik=n(BEe,"A",{href:!0});var pqr=s(ik);Qze=r(pqr,"Speech2Text2Config"),pqr.forEach(t),Hze=r(BEe," (Speech2Text2 model)"),BEe.forEach(t),Uze=i(y),Rm=n(y,"LI",{});var PEe=s(Rm);Bee=n(PEe,"STRONG",{});var uqr=s(Bee);Jze=r(uqr,"splinter"),uqr.forEach(t),Yze=r(PEe," \u2014 "),dk=n(PEe,"A",{href:!0});var _qr=s(dk);Kze=r(_qr,"SplinterConfig"),_qr.forEach(t),Zze=r(PEe," (Splinter model)"),PEe.forEach(t),eWe=i(y),Bm=n(y,"LI",{});var IEe=s(Bm);Pee=n(IEe,"STRONG",{});var bqr=s(Pee);oWe=r(bqr,"squeezebert"),bqr.forEach(t),rWe=r(IEe," \u2014 "),ck=n(IEe,"A",{href:!0});var vqr=s(ck);tWe=r(vqr,"SqueezeBertConfig"),vqr.forEach(t),aWe=r(IEe," (SqueezeBERT model)"),IEe.forEach(t),nWe=i(y),Pm=n(y,"LI",{});var qEe=s(Pm);Iee=n(qEe,"STRONG",{});var Fqr=s(Iee);sWe=r(Fqr,"swin"),Fqr.forEach(t),lWe=r(qEe," \u2014 "),fk=n(qEe,"A",{href:!0});var Tqr=s(fk);iWe=r(Tqr,"SwinConfig"),Tqr.forEach(t),dWe=r(qEe," (Swin model)"),qEe.forEach(t),cWe=i(y),Im=n(y,"LI",{});var NEe=s(Im);qee=n(NEe,"STRONG",{});var Mqr=s(qee);fWe=r(Mqr,"t5"),Mqr.forEach(t),mWe=r(NEe," \u2014 "),mk=n(NEe,"A",{href:!0});var Eqr=s(mk);gWe=r(Eqr,"T5Config"),Eqr.forEach(t),hWe=r(NEe," (T5 model)"),NEe.forEach(t),pWe=i(y),qm=n(y,"LI",{});var jEe=s(qm);Nee=n(jEe,"STRONG",{});var Cqr=s(Nee);uWe=r(Cqr,"tapas"),Cqr.forEach(t),_We=r(jEe," \u2014 "),gk=n(jEe,"A",{href:!0});var wqr=s(gk);bWe=r(wqr,"TapasConfig"),wqr.forEach(t),vWe=r(jEe," (TAPAS model)"),jEe.forEach(t),FWe=i(y),Nm=n(y,"LI",{});var DEe=s(Nm);jee=n(DEe,"STRONG",{});var Aqr=s(jee);TWe=r(Aqr,"tapex"),Aqr.forEach(t),MWe=r(DEe," \u2014 "),hk=n(DEe,"A",{href:!0});var yqr=s(hk);EWe=r(yqr,"BartConfig"),yqr.forEach(t),CWe=r(DEe," (TAPEX model)"),DEe.forEach(t),wWe=i(y),jm=n(y,"LI",{});var GEe=s(jm);Dee=n(GEe,"STRONG",{});var Lqr=s(Dee);AWe=r(Lqr,"transfo-xl"),Lqr.forEach(t),yWe=r(GEe," \u2014 "),pk=n(GEe,"A",{href:!0});var xqr=s(pk);LWe=r(xqr,"TransfoXLConfig"),xqr.forEach(t),xWe=r(GEe," (Transformer-XL model)"),GEe.forEach(t),$We=i(y),Dm=n(y,"LI",{});var OEe=s(Dm);Gee=n(OEe,"STRONG",{});var $qr=s(Gee);kWe=r($qr,"trocr"),$qr.forEach(t),SWe=r(OEe," \u2014 "),uk=n(OEe,"A",{href:!0});var kqr=s(uk);RWe=r(kqr,"TrOCRConfig"),kqr.forEach(t),BWe=r(OEe," (TrOCR model)"),OEe.forEach(t),PWe=i(y),Gm=n(y,"LI",{});var VEe=s(Gm);Oee=n(VEe,"STRONG",{});var Sqr=s(Oee);IWe=r(Sqr,"unispeech"),Sqr.forEach(t),qWe=r(VEe," \u2014 "),_k=n(VEe,"A",{href:!0});var Rqr=s(_k);NWe=r(Rqr,"UniSpeechConfig"),Rqr.forEach(t),jWe=r(VEe," (UniSpeech model)"),VEe.forEach(t),DWe=i(y),Om=n(y,"LI",{});var XEe=s(Om);Vee=n(XEe,"STRONG",{});var Bqr=s(Vee);GWe=r(Bqr,"unispeech-sat"),Bqr.forEach(t),OWe=r(XEe," \u2014 "),bk=n(XEe,"A",{href:!0});var Pqr=s(bk);VWe=r(Pqr,"UniSpeechSatConfig"),Pqr.forEach(t),XWe=r(XEe," (UniSpeechSat model)"),XEe.forEach(t),zWe=i(y),Vm=n(y,"LI",{});var zEe=s(Vm);Xee=n(zEe,"STRONG",{});var Iqr=s(Xee);WWe=r(Iqr,"van"),Iqr.forEach(t),QWe=r(zEe," \u2014 "),vk=n(zEe,"A",{href:!0});var qqr=s(vk);HWe=r(qqr,"VanConfig"),qqr.forEach(t),UWe=r(zEe," (VAN model)"),zEe.forEach(t),JWe=i(y),Xm=n(y,"LI",{});var WEe=s(Xm);zee=n(WEe,"STRONG",{});var Nqr=s(zee);YWe=r(Nqr,"vilt"),Nqr.forEach(t),KWe=r(WEe," \u2014 "),Fk=n(WEe,"A",{href:!0});var jqr=s(Fk);ZWe=r(jqr,"ViltConfig"),jqr.forEach(t),eQe=r(WEe," (ViLT model)"),WEe.forEach(t),oQe=i(y),zm=n(y,"LI",{});var QEe=s(zm);Wee=n(QEe,"STRONG",{});var Dqr=s(Wee);rQe=r(Dqr,"vision-encoder-decoder"),Dqr.forEach(t),tQe=r(QEe," \u2014 "),Tk=n(QEe,"A",{href:!0});var Gqr=s(Tk);aQe=r(Gqr,"VisionEncoderDecoderConfig"),Gqr.forEach(t),nQe=r(QEe," (Vision Encoder decoder model)"),QEe.forEach(t),sQe=i(y),Wm=n(y,"LI",{});var HEe=s(Wm);Qee=n(HEe,"STRONG",{});var Oqr=s(Qee);lQe=r(Oqr,"vision-text-dual-encoder"),Oqr.forEach(t),iQe=r(HEe," \u2014 "),Mk=n(HEe,"A",{href:!0});var Vqr=s(Mk);dQe=r(Vqr,"VisionTextDualEncoderConfig"),Vqr.forEach(t),cQe=r(HEe," (VisionTextDualEncoder model)"),HEe.forEach(t),fQe=i(y),Qm=n(y,"LI",{});var UEe=s(Qm);Hee=n(UEe,"STRONG",{});var Xqr=s(Hee);mQe=r(Xqr,"visual_bert"),Xqr.forEach(t),gQe=r(UEe," \u2014 "),Ek=n(UEe,"A",{href:!0});var zqr=s(Ek);hQe=r(zqr,"VisualBertConfig"),zqr.forEach(t),pQe=r(UEe," (VisualBert model)"),UEe.forEach(t),uQe=i(y),Hm=n(y,"LI",{});var JEe=s(Hm);Uee=n(JEe,"STRONG",{});var Wqr=s(Uee);_Qe=r(Wqr,"vit"),Wqr.forEach(t),bQe=r(JEe," \u2014 "),Ck=n(JEe,"A",{href:!0});var Qqr=s(Ck);vQe=r(Qqr,"ViTConfig"),Qqr.forEach(t),FQe=r(JEe," (ViT model)"),JEe.forEach(t),TQe=i(y),Um=n(y,"LI",{});var YEe=s(Um);Jee=n(YEe,"STRONG",{});var Hqr=s(Jee);MQe=r(Hqr,"vit_mae"),Hqr.forEach(t),EQe=r(YEe," \u2014 "),wk=n(YEe,"A",{href:!0});var Uqr=s(wk);CQe=r(Uqr,"ViTMAEConfig"),Uqr.forEach(t),wQe=r(YEe," (ViTMAE model)"),YEe.forEach(t),AQe=i(y),Jm=n(y,"LI",{});var KEe=s(Jm);Yee=n(KEe,"STRONG",{});var Jqr=s(Yee);yQe=r(Jqr,"wav2vec2"),Jqr.forEach(t),LQe=r(KEe," \u2014 "),Ak=n(KEe,"A",{href:!0});var Yqr=s(Ak);xQe=r(Yqr,"Wav2Vec2Config"),Yqr.forEach(t),$Qe=r(KEe," (Wav2Vec2 model)"),KEe.forEach(t),kQe=i(y),Ym=n(y,"LI",{});var ZEe=s(Ym);Kee=n(ZEe,"STRONG",{});var Kqr=s(Kee);SQe=r(Kqr,"wav2vec2-conformer"),Kqr.forEach(t),RQe=r(ZEe," \u2014 "),yk=n(ZEe,"A",{href:!0});var Zqr=s(yk);BQe=r(Zqr,"Wav2Vec2ConformerConfig"),Zqr.forEach(t),PQe=r(ZEe," (Wav2Vec2ConformerConformer model)"),ZEe.forEach(t),IQe=i(y),Km=n(y,"LI",{});var eCe=s(Km);Zee=n(eCe,"STRONG",{});var eNr=s(Zee);qQe=r(eNr,"wavlm"),eNr.forEach(t),NQe=r(eCe," \u2014 "),Lk=n(eCe,"A",{href:!0});var oNr=s(Lk);jQe=r(oNr,"WavLMConfig"),oNr.forEach(t),DQe=r(eCe," (WavLM model)"),eCe.forEach(t),GQe=i(y),Zm=n(y,"LI",{});var oCe=s(Zm);eoe=n(oCe,"STRONG",{});var rNr=s(eoe);OQe=r(rNr,"xglm"),rNr.forEach(t),VQe=r(oCe," \u2014 "),xk=n(oCe,"A",{href:!0});var tNr=s(xk);XQe=r(tNr,"XGLMConfig"),tNr.forEach(t),zQe=r(oCe," (XGLM model)"),oCe.forEach(t),WQe=i(y),eg=n(y,"LI",{});var rCe=s(eg);ooe=n(rCe,"STRONG",{});var aNr=s(ooe);QQe=r(aNr,"xlm"),aNr.forEach(t),HQe=r(rCe," \u2014 "),$k=n(rCe,"A",{href:!0});var nNr=s($k);UQe=r(nNr,"XLMConfig"),nNr.forEach(t),JQe=r(rCe," (XLM model)"),rCe.forEach(t),YQe=i(y),og=n(y,"LI",{});var tCe=s(og);roe=n(tCe,"STRONG",{});var sNr=s(roe);KQe=r(sNr,"xlm-prophetnet"),sNr.forEach(t),ZQe=r(tCe," \u2014 "),kk=n(tCe,"A",{href:!0});var lNr=s(kk);eHe=r(lNr,"XLMProphetNetConfig"),lNr.forEach(t),oHe=r(tCe," (XLMProphetNet model)"),tCe.forEach(t),rHe=i(y),rg=n(y,"LI",{});var aCe=s(rg);toe=n(aCe,"STRONG",{});var iNr=s(toe);tHe=r(iNr,"xlm-roberta"),iNr.forEach(t),aHe=r(aCe," \u2014 "),Sk=n(aCe,"A",{href:!0});var dNr=s(Sk);nHe=r(dNr,"XLMRobertaConfig"),dNr.forEach(t),sHe=r(aCe," (XLM-RoBERTa model)"),aCe.forEach(t),lHe=i(y),tg=n(y,"LI",{});var nCe=s(tg);aoe=n(nCe,"STRONG",{});var cNr=s(aoe);iHe=r(cNr,"xlm-roberta-xl"),cNr.forEach(t),dHe=r(nCe," \u2014 "),Rk=n(nCe,"A",{href:!0});var fNr=s(Rk);cHe=r(fNr,"XLMRobertaXLConfig"),fNr.forEach(t),fHe=r(nCe," (XLM-RoBERTa-XL model)"),nCe.forEach(t),mHe=i(y),ag=n(y,"LI",{});var sCe=s(ag);noe=n(sCe,"STRONG",{});var mNr=s(noe);gHe=r(mNr,"xlnet"),mNr.forEach(t),hHe=r(sCe," \u2014 "),Bk=n(sCe,"A",{href:!0});var gNr=s(Bk);pHe=r(gNr,"XLNetConfig"),gNr.forEach(t),uHe=r(sCe," (XLNet model)"),sCe.forEach(t),_He=i(y),ng=n(y,"LI",{});var lCe=s(ng);soe=n(lCe,"STRONG",{});var hNr=s(soe);bHe=r(hNr,"yoso"),hNr.forEach(t),vHe=r(lCe," \u2014 "),Pk=n(lCe,"A",{href:!0});var pNr=s(Pk);FHe=r(pNr,"YosoConfig"),pNr.forEach(t),THe=r(lCe," (YOSO model)"),lCe.forEach(t),y.forEach(t),MHe=i(Kr),T(sg.$$.fragment,Kr),Kr.forEach(t),EHe=i(Yr),lg=n(Yr,"DIV",{class:!0});var pIe=s(lg);T($A.$$.fragment,pIe),CHe=i(pIe),loe=n(pIe,"P",{});var uNr=s(loe);wHe=r(uNr,"Register a new configuration for this class."),uNr.forEach(t),pIe.forEach(t),Yr.forEach(t),FBe=i(f),gi=n(f,"H2",{class:!0});var uIe=s(gi);ig=n(uIe,"A",{id:!0,class:!0,href:!0});var _Nr=s(ig);ioe=n(_Nr,"SPAN",{});var bNr=s(ioe);T(kA.$$.fragment,bNr),bNr.forEach(t),_Nr.forEach(t),AHe=i(uIe),doe=n(uIe,"SPAN",{});var vNr=s(doe);yHe=r(vNr,"AutoTokenizer"),vNr.forEach(t),uIe.forEach(t),TBe=i(f),Eo=n(f,"DIV",{class:!0});var $s=s(Eo);T(SA.$$.fragment,$s),LHe=i($s),RA=n($s,"P",{});var _Ie=s(RA);xHe=r(_Ie,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ik=n(_Ie,"A",{href:!0});var FNr=s(Ik);$He=r(FNr,"AutoTokenizer.from_pretrained()"),FNr.forEach(t),kHe=r(_Ie," class method."),_Ie.forEach(t),SHe=i($s),BA=n($s,"P",{});var bIe=s(BA);RHe=r(bIe,"This class cannot be instantiated directly using "),coe=n(bIe,"CODE",{});var TNr=s(coe);BHe=r(TNr,"__init__()"),TNr.forEach(t),PHe=r(bIe," (throws an error)."),bIe.forEach(t),IHe=i($s),Tr=n($s,"DIV",{class:!0});var ks=s(Tr);T(PA.$$.fragment,ks),qHe=i(ks),foe=n(ks,"P",{});var MNr=s(foe);NHe=r(MNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),MNr.forEach(t),jHe=i(ks),Ma=n(ks,"P",{});var L3=s(Ma);DHe=r(L3,"The tokenizer class to instantiate is selected based on the "),moe=n(L3,"CODE",{});var ENr=s(moe);GHe=r(ENr,"model_type"),ENr.forEach(t),OHe=r(L3,` property of the config object (either
passed as an argument or loaded from `),goe=n(L3,"CODE",{});var CNr=s(goe);VHe=r(CNr,"pretrained_model_name_or_path"),CNr.forEach(t),XHe=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hoe=n(L3,"CODE",{});var wNr=s(hoe);zHe=r(wNr,"pretrained_model_name_or_path"),wNr.forEach(t),WHe=r(L3,":"),L3.forEach(t),QHe=i(ks),k=n(ks,"UL",{});var S=s(k);An=n(S,"LI",{});var $x=s(An);poe=n($x,"STRONG",{});var ANr=s(poe);HHe=r(ANr,"albert"),ANr.forEach(t),UHe=r($x," \u2014 "),qk=n($x,"A",{href:!0});var yNr=s(qk);JHe=r(yNr,"AlbertTokenizer"),yNr.forEach(t),YHe=r($x," or "),Nk=n($x,"A",{href:!0});var LNr=s(Nk);KHe=r(LNr,"AlbertTokenizerFast"),LNr.forEach(t),ZHe=r($x," (ALBERT model)"),$x.forEach(t),eUe=i(S),yn=n(S,"LI",{});var kx=s(yn);uoe=n(kx,"STRONG",{});var xNr=s(uoe);oUe=r(xNr,"bart"),xNr.forEach(t),rUe=r(kx," \u2014 "),jk=n(kx,"A",{href:!0});var $Nr=s(jk);tUe=r($Nr,"BartTokenizer"),$Nr.forEach(t),aUe=r(kx," or "),Dk=n(kx,"A",{href:!0});var kNr=s(Dk);nUe=r(kNr,"BartTokenizerFast"),kNr.forEach(t),sUe=r(kx," (BART model)"),kx.forEach(t),lUe=i(S),Ln=n(S,"LI",{});var Sx=s(Ln);_oe=n(Sx,"STRONG",{});var SNr=s(_oe);iUe=r(SNr,"barthez"),SNr.forEach(t),dUe=r(Sx," \u2014 "),Gk=n(Sx,"A",{href:!0});var RNr=s(Gk);cUe=r(RNr,"BarthezTokenizer"),RNr.forEach(t),fUe=r(Sx," or "),Ok=n(Sx,"A",{href:!0});var BNr=s(Ok);mUe=r(BNr,"BarthezTokenizerFast"),BNr.forEach(t),gUe=r(Sx," (BARThez model)"),Sx.forEach(t),hUe=i(S),dg=n(S,"LI",{});var iCe=s(dg);boe=n(iCe,"STRONG",{});var PNr=s(boe);pUe=r(PNr,"bartpho"),PNr.forEach(t),uUe=r(iCe," \u2014 "),Vk=n(iCe,"A",{href:!0});var INr=s(Vk);_Ue=r(INr,"BartphoTokenizer"),INr.forEach(t),bUe=r(iCe," (BARTpho model)"),iCe.forEach(t),vUe=i(S),xn=n(S,"LI",{});var Rx=s(xn);voe=n(Rx,"STRONG",{});var qNr=s(voe);FUe=r(qNr,"bert"),qNr.forEach(t),TUe=r(Rx," \u2014 "),Xk=n(Rx,"A",{href:!0});var NNr=s(Xk);MUe=r(NNr,"BertTokenizer"),NNr.forEach(t),EUe=r(Rx," or "),zk=n(Rx,"A",{href:!0});var jNr=s(zk);CUe=r(jNr,"BertTokenizerFast"),jNr.forEach(t),wUe=r(Rx," (BERT model)"),Rx.forEach(t),AUe=i(S),cg=n(S,"LI",{});var dCe=s(cg);Foe=n(dCe,"STRONG",{});var DNr=s(Foe);yUe=r(DNr,"bert-generation"),DNr.forEach(t),LUe=r(dCe," \u2014 "),Wk=n(dCe,"A",{href:!0});var GNr=s(Wk);xUe=r(GNr,"BertGenerationTokenizer"),GNr.forEach(t),$Ue=r(dCe," (Bert Generation model)"),dCe.forEach(t),kUe=i(S),fg=n(S,"LI",{});var cCe=s(fg);Toe=n(cCe,"STRONG",{});var ONr=s(Toe);SUe=r(ONr,"bert-japanese"),ONr.forEach(t),RUe=r(cCe," \u2014 "),Qk=n(cCe,"A",{href:!0});var VNr=s(Qk);BUe=r(VNr,"BertJapaneseTokenizer"),VNr.forEach(t),PUe=r(cCe," (BertJapanese model)"),cCe.forEach(t),IUe=i(S),mg=n(S,"LI",{});var fCe=s(mg);Moe=n(fCe,"STRONG",{});var XNr=s(Moe);qUe=r(XNr,"bertweet"),XNr.forEach(t),NUe=r(fCe," \u2014 "),Hk=n(fCe,"A",{href:!0});var zNr=s(Hk);jUe=r(zNr,"BertweetTokenizer"),zNr.forEach(t),DUe=r(fCe," (Bertweet model)"),fCe.forEach(t),GUe=i(S),$n=n(S,"LI",{});var Bx=s($n);Eoe=n(Bx,"STRONG",{});var WNr=s(Eoe);OUe=r(WNr,"big_bird"),WNr.forEach(t),VUe=r(Bx," \u2014 "),Uk=n(Bx,"A",{href:!0});var QNr=s(Uk);XUe=r(QNr,"BigBirdTokenizer"),QNr.forEach(t),zUe=r(Bx," or "),Jk=n(Bx,"A",{href:!0});var HNr=s(Jk);WUe=r(HNr,"BigBirdTokenizerFast"),HNr.forEach(t),QUe=r(Bx," (BigBird model)"),Bx.forEach(t),HUe=i(S),kn=n(S,"LI",{});var Px=s(kn);Coe=n(Px,"STRONG",{});var UNr=s(Coe);UUe=r(UNr,"bigbird_pegasus"),UNr.forEach(t),JUe=r(Px," \u2014 "),Yk=n(Px,"A",{href:!0});var JNr=s(Yk);YUe=r(JNr,"PegasusTokenizer"),JNr.forEach(t),KUe=r(Px," or "),Kk=n(Px,"A",{href:!0});var YNr=s(Kk);ZUe=r(YNr,"PegasusTokenizerFast"),YNr.forEach(t),eJe=r(Px," (BigBirdPegasus model)"),Px.forEach(t),oJe=i(S),Sn=n(S,"LI",{});var Ix=s(Sn);woe=n(Ix,"STRONG",{});var KNr=s(woe);rJe=r(KNr,"blenderbot"),KNr.forEach(t),tJe=r(Ix," \u2014 "),Zk=n(Ix,"A",{href:!0});var ZNr=s(Zk);aJe=r(ZNr,"BlenderbotTokenizer"),ZNr.forEach(t),nJe=r(Ix," or "),eS=n(Ix,"A",{href:!0});var ejr=s(eS);sJe=r(ejr,"BlenderbotTokenizerFast"),ejr.forEach(t),lJe=r(Ix," (Blenderbot model)"),Ix.forEach(t),iJe=i(S),gg=n(S,"LI",{});var mCe=s(gg);Aoe=n(mCe,"STRONG",{});var ojr=s(Aoe);dJe=r(ojr,"blenderbot-small"),ojr.forEach(t),cJe=r(mCe," \u2014 "),oS=n(mCe,"A",{href:!0});var rjr=s(oS);fJe=r(rjr,"BlenderbotSmallTokenizer"),rjr.forEach(t),mJe=r(mCe," (BlenderbotSmall model)"),mCe.forEach(t),gJe=i(S),hg=n(S,"LI",{});var gCe=s(hg);yoe=n(gCe,"STRONG",{});var tjr=s(yoe);hJe=r(tjr,"byt5"),tjr.forEach(t),pJe=r(gCe," \u2014 "),rS=n(gCe,"A",{href:!0});var ajr=s(rS);uJe=r(ajr,"ByT5Tokenizer"),ajr.forEach(t),_Je=r(gCe," (ByT5 model)"),gCe.forEach(t),bJe=i(S),Rn=n(S,"LI",{});var qx=s(Rn);Loe=n(qx,"STRONG",{});var njr=s(Loe);vJe=r(njr,"camembert"),njr.forEach(t),FJe=r(qx," \u2014 "),tS=n(qx,"A",{href:!0});var sjr=s(tS);TJe=r(sjr,"CamembertTokenizer"),sjr.forEach(t),MJe=r(qx," or "),aS=n(qx,"A",{href:!0});var ljr=s(aS);EJe=r(ljr,"CamembertTokenizerFast"),ljr.forEach(t),CJe=r(qx," (CamemBERT model)"),qx.forEach(t),wJe=i(S),pg=n(S,"LI",{});var hCe=s(pg);xoe=n(hCe,"STRONG",{});var ijr=s(xoe);AJe=r(ijr,"canine"),ijr.forEach(t),yJe=r(hCe," \u2014 "),nS=n(hCe,"A",{href:!0});var djr=s(nS);LJe=r(djr,"CanineTokenizer"),djr.forEach(t),xJe=r(hCe," (Canine model)"),hCe.forEach(t),$Je=i(S),Bn=n(S,"LI",{});var Nx=s(Bn);$oe=n(Nx,"STRONG",{});var cjr=s($oe);kJe=r(cjr,"clip"),cjr.forEach(t),SJe=r(Nx," \u2014 "),sS=n(Nx,"A",{href:!0});var fjr=s(sS);RJe=r(fjr,"CLIPTokenizer"),fjr.forEach(t),BJe=r(Nx," or "),lS=n(Nx,"A",{href:!0});var mjr=s(lS);PJe=r(mjr,"CLIPTokenizerFast"),mjr.forEach(t),IJe=r(Nx," (CLIP model)"),Nx.forEach(t),qJe=i(S),Pn=n(S,"LI",{});var jx=s(Pn);koe=n(jx,"STRONG",{});var gjr=s(koe);NJe=r(gjr,"convbert"),gjr.forEach(t),jJe=r(jx," \u2014 "),iS=n(jx,"A",{href:!0});var hjr=s(iS);DJe=r(hjr,"ConvBertTokenizer"),hjr.forEach(t),GJe=r(jx," or "),dS=n(jx,"A",{href:!0});var pjr=s(dS);OJe=r(pjr,"ConvBertTokenizerFast"),pjr.forEach(t),VJe=r(jx," (ConvBERT model)"),jx.forEach(t),XJe=i(S),In=n(S,"LI",{});var Dx=s(In);Soe=n(Dx,"STRONG",{});var ujr=s(Soe);zJe=r(ujr,"cpm"),ujr.forEach(t),WJe=r(Dx," \u2014 "),cS=n(Dx,"A",{href:!0});var _jr=s(cS);QJe=r(_jr,"CpmTokenizer"),_jr.forEach(t),HJe=r(Dx," or "),Roe=n(Dx,"CODE",{});var bjr=s(Roe);UJe=r(bjr,"CpmTokenizerFast"),bjr.forEach(t),JJe=r(Dx," (CPM model)"),Dx.forEach(t),YJe=i(S),ug=n(S,"LI",{});var pCe=s(ug);Boe=n(pCe,"STRONG",{});var vjr=s(Boe);KJe=r(vjr,"ctrl"),vjr.forEach(t),ZJe=r(pCe," \u2014 "),fS=n(pCe,"A",{href:!0});var Fjr=s(fS);eYe=r(Fjr,"CTRLTokenizer"),Fjr.forEach(t),oYe=r(pCe," (CTRL model)"),pCe.forEach(t),rYe=i(S),qn=n(S,"LI",{});var Gx=s(qn);Poe=n(Gx,"STRONG",{});var Tjr=s(Poe);tYe=r(Tjr,"data2vec-text"),Tjr.forEach(t),aYe=r(Gx," \u2014 "),mS=n(Gx,"A",{href:!0});var Mjr=s(mS);nYe=r(Mjr,"RobertaTokenizer"),Mjr.forEach(t),sYe=r(Gx," or "),gS=n(Gx,"A",{href:!0});var Ejr=s(gS);lYe=r(Ejr,"RobertaTokenizerFast"),Ejr.forEach(t),iYe=r(Gx," (Data2VecText model)"),Gx.forEach(t),dYe=i(S),Nn=n(S,"LI",{});var Ox=s(Nn);Ioe=n(Ox,"STRONG",{});var Cjr=s(Ioe);cYe=r(Cjr,"deberta"),Cjr.forEach(t),fYe=r(Ox," \u2014 "),hS=n(Ox,"A",{href:!0});var wjr=s(hS);mYe=r(wjr,"DebertaTokenizer"),wjr.forEach(t),gYe=r(Ox," or "),pS=n(Ox,"A",{href:!0});var Ajr=s(pS);hYe=r(Ajr,"DebertaTokenizerFast"),Ajr.forEach(t),pYe=r(Ox," (DeBERTa model)"),Ox.forEach(t),uYe=i(S),jn=n(S,"LI",{});var Vx=s(jn);qoe=n(Vx,"STRONG",{});var yjr=s(qoe);_Ye=r(yjr,"deberta-v2"),yjr.forEach(t),bYe=r(Vx," \u2014 "),uS=n(Vx,"A",{href:!0});var Ljr=s(uS);vYe=r(Ljr,"DebertaV2Tokenizer"),Ljr.forEach(t),FYe=r(Vx," or "),_S=n(Vx,"A",{href:!0});var xjr=s(_S);TYe=r(xjr,"DebertaV2TokenizerFast"),xjr.forEach(t),MYe=r(Vx," (DeBERTa-v2 model)"),Vx.forEach(t),EYe=i(S),Dn=n(S,"LI",{});var Xx=s(Dn);Noe=n(Xx,"STRONG",{});var $jr=s(Noe);CYe=r($jr,"distilbert"),$jr.forEach(t),wYe=r(Xx," \u2014 "),bS=n(Xx,"A",{href:!0});var kjr=s(bS);AYe=r(kjr,"DistilBertTokenizer"),kjr.forEach(t),yYe=r(Xx," or "),vS=n(Xx,"A",{href:!0});var Sjr=s(vS);LYe=r(Sjr,"DistilBertTokenizerFast"),Sjr.forEach(t),xYe=r(Xx," (DistilBERT model)"),Xx.forEach(t),$Ye=i(S),Gn=n(S,"LI",{});var zx=s(Gn);joe=n(zx,"STRONG",{});var Rjr=s(joe);kYe=r(Rjr,"dpr"),Rjr.forEach(t),SYe=r(zx," \u2014 "),FS=n(zx,"A",{href:!0});var Bjr=s(FS);RYe=r(Bjr,"DPRQuestionEncoderTokenizer"),Bjr.forEach(t),BYe=r(zx," or "),TS=n(zx,"A",{href:!0});var Pjr=s(TS);PYe=r(Pjr,"DPRQuestionEncoderTokenizerFast"),Pjr.forEach(t),IYe=r(zx," (DPR model)"),zx.forEach(t),qYe=i(S),On=n(S,"LI",{});var Wx=s(On);Doe=n(Wx,"STRONG",{});var Ijr=s(Doe);NYe=r(Ijr,"electra"),Ijr.forEach(t),jYe=r(Wx," \u2014 "),MS=n(Wx,"A",{href:!0});var qjr=s(MS);DYe=r(qjr,"ElectraTokenizer"),qjr.forEach(t),GYe=r(Wx," or "),ES=n(Wx,"A",{href:!0});var Njr=s(ES);OYe=r(Njr,"ElectraTokenizerFast"),Njr.forEach(t),VYe=r(Wx," (ELECTRA model)"),Wx.forEach(t),XYe=i(S),_g=n(S,"LI",{});var uCe=s(_g);Goe=n(uCe,"STRONG",{});var jjr=s(Goe);zYe=r(jjr,"flaubert"),jjr.forEach(t),WYe=r(uCe," \u2014 "),CS=n(uCe,"A",{href:!0});var Djr=s(CS);QYe=r(Djr,"FlaubertTokenizer"),Djr.forEach(t),HYe=r(uCe," (FlauBERT model)"),uCe.forEach(t),UYe=i(S),Vn=n(S,"LI",{});var Qx=s(Vn);Ooe=n(Qx,"STRONG",{});var Gjr=s(Ooe);JYe=r(Gjr,"fnet"),Gjr.forEach(t),YYe=r(Qx," \u2014 "),wS=n(Qx,"A",{href:!0});var Ojr=s(wS);KYe=r(Ojr,"FNetTokenizer"),Ojr.forEach(t),ZYe=r(Qx," or "),AS=n(Qx,"A",{href:!0});var Vjr=s(AS);eKe=r(Vjr,"FNetTokenizerFast"),Vjr.forEach(t),oKe=r(Qx," (FNet model)"),Qx.forEach(t),rKe=i(S),bg=n(S,"LI",{});var _Ce=s(bg);Voe=n(_Ce,"STRONG",{});var Xjr=s(Voe);tKe=r(Xjr,"fsmt"),Xjr.forEach(t),aKe=r(_Ce," \u2014 "),yS=n(_Ce,"A",{href:!0});var zjr=s(yS);nKe=r(zjr,"FSMTTokenizer"),zjr.forEach(t),sKe=r(_Ce," (FairSeq Machine-Translation model)"),_Ce.forEach(t),lKe=i(S),Xn=n(S,"LI",{});var Hx=s(Xn);Xoe=n(Hx,"STRONG",{});var Wjr=s(Xoe);iKe=r(Wjr,"funnel"),Wjr.forEach(t),dKe=r(Hx," \u2014 "),LS=n(Hx,"A",{href:!0});var Qjr=s(LS);cKe=r(Qjr,"FunnelTokenizer"),Qjr.forEach(t),fKe=r(Hx," or "),xS=n(Hx,"A",{href:!0});var Hjr=s(xS);mKe=r(Hjr,"FunnelTokenizerFast"),Hjr.forEach(t),gKe=r(Hx," (Funnel Transformer model)"),Hx.forEach(t),hKe=i(S),zn=n(S,"LI",{});var Ux=s(zn);zoe=n(Ux,"STRONG",{});var Ujr=s(zoe);pKe=r(Ujr,"gpt2"),Ujr.forEach(t),uKe=r(Ux," \u2014 "),$S=n(Ux,"A",{href:!0});var Jjr=s($S);_Ke=r(Jjr,"GPT2Tokenizer"),Jjr.forEach(t),bKe=r(Ux," or "),kS=n(Ux,"A",{href:!0});var Yjr=s(kS);vKe=r(Yjr,"GPT2TokenizerFast"),Yjr.forEach(t),FKe=r(Ux," (OpenAI GPT-2 model)"),Ux.forEach(t),TKe=i(S),Wn=n(S,"LI",{});var Jx=s(Wn);Woe=n(Jx,"STRONG",{});var Kjr=s(Woe);MKe=r(Kjr,"gpt_neo"),Kjr.forEach(t),EKe=r(Jx," \u2014 "),SS=n(Jx,"A",{href:!0});var Zjr=s(SS);CKe=r(Zjr,"GPT2Tokenizer"),Zjr.forEach(t),wKe=r(Jx," or "),RS=n(Jx,"A",{href:!0});var eDr=s(RS);AKe=r(eDr,"GPT2TokenizerFast"),eDr.forEach(t),yKe=r(Jx," (GPT Neo model)"),Jx.forEach(t),LKe=i(S),Qn=n(S,"LI",{});var Yx=s(Qn);Qoe=n(Yx,"STRONG",{});var oDr=s(Qoe);xKe=r(oDr,"gptj"),oDr.forEach(t),$Ke=r(Yx," \u2014 "),BS=n(Yx,"A",{href:!0});var rDr=s(BS);kKe=r(rDr,"GPT2Tokenizer"),rDr.forEach(t),SKe=r(Yx," or "),PS=n(Yx,"A",{href:!0});var tDr=s(PS);RKe=r(tDr,"GPT2TokenizerFast"),tDr.forEach(t),BKe=r(Yx," (GPT-J model)"),Yx.forEach(t),PKe=i(S),Hn=n(S,"LI",{});var Kx=s(Hn);Hoe=n(Kx,"STRONG",{});var aDr=s(Hoe);IKe=r(aDr,"herbert"),aDr.forEach(t),qKe=r(Kx," \u2014 "),IS=n(Kx,"A",{href:!0});var nDr=s(IS);NKe=r(nDr,"HerbertTokenizer"),nDr.forEach(t),jKe=r(Kx," or "),qS=n(Kx,"A",{href:!0});var sDr=s(qS);DKe=r(sDr,"HerbertTokenizerFast"),sDr.forEach(t),GKe=r(Kx," (HerBERT model)"),Kx.forEach(t),OKe=i(S),vg=n(S,"LI",{});var bCe=s(vg);Uoe=n(bCe,"STRONG",{});var lDr=s(Uoe);VKe=r(lDr,"hubert"),lDr.forEach(t),XKe=r(bCe," \u2014 "),NS=n(bCe,"A",{href:!0});var iDr=s(NS);zKe=r(iDr,"Wav2Vec2CTCTokenizer"),iDr.forEach(t),WKe=r(bCe," (Hubert model)"),bCe.forEach(t),QKe=i(S),Un=n(S,"LI",{});var Zx=s(Un);Joe=n(Zx,"STRONG",{});var dDr=s(Joe);HKe=r(dDr,"ibert"),dDr.forEach(t),UKe=r(Zx," \u2014 "),jS=n(Zx,"A",{href:!0});var cDr=s(jS);JKe=r(cDr,"RobertaTokenizer"),cDr.forEach(t),YKe=r(Zx," or "),DS=n(Zx,"A",{href:!0});var fDr=s(DS);KKe=r(fDr,"RobertaTokenizerFast"),fDr.forEach(t),ZKe=r(Zx," (I-BERT model)"),Zx.forEach(t),eZe=i(S),Jn=n(S,"LI",{});var e9=s(Jn);Yoe=n(e9,"STRONG",{});var mDr=s(Yoe);oZe=r(mDr,"layoutlm"),mDr.forEach(t),rZe=r(e9," \u2014 "),GS=n(e9,"A",{href:!0});var gDr=s(GS);tZe=r(gDr,"LayoutLMTokenizer"),gDr.forEach(t),aZe=r(e9," or "),OS=n(e9,"A",{href:!0});var hDr=s(OS);nZe=r(hDr,"LayoutLMTokenizerFast"),hDr.forEach(t),sZe=r(e9," (LayoutLM model)"),e9.forEach(t),lZe=i(S),Yn=n(S,"LI",{});var o9=s(Yn);Koe=n(o9,"STRONG",{});var pDr=s(Koe);iZe=r(pDr,"layoutlmv2"),pDr.forEach(t),dZe=r(o9," \u2014 "),VS=n(o9,"A",{href:!0});var uDr=s(VS);cZe=r(uDr,"LayoutLMv2Tokenizer"),uDr.forEach(t),fZe=r(o9," or "),XS=n(o9,"A",{href:!0});var _Dr=s(XS);mZe=r(_Dr,"LayoutLMv2TokenizerFast"),_Dr.forEach(t),gZe=r(o9," (LayoutLMv2 model)"),o9.forEach(t),hZe=i(S),Kn=n(S,"LI",{});var r9=s(Kn);Zoe=n(r9,"STRONG",{});var bDr=s(Zoe);pZe=r(bDr,"layoutxlm"),bDr.forEach(t),uZe=r(r9," \u2014 "),zS=n(r9,"A",{href:!0});var vDr=s(zS);_Ze=r(vDr,"LayoutXLMTokenizer"),vDr.forEach(t),bZe=r(r9," or "),WS=n(r9,"A",{href:!0});var FDr=s(WS);vZe=r(FDr,"LayoutXLMTokenizerFast"),FDr.forEach(t),FZe=r(r9," (LayoutXLM model)"),r9.forEach(t),TZe=i(S),Zn=n(S,"LI",{});var t9=s(Zn);ere=n(t9,"STRONG",{});var TDr=s(ere);MZe=r(TDr,"led"),TDr.forEach(t),EZe=r(t9," \u2014 "),QS=n(t9,"A",{href:!0});var MDr=s(QS);CZe=r(MDr,"LEDTokenizer"),MDr.forEach(t),wZe=r(t9," or "),HS=n(t9,"A",{href:!0});var EDr=s(HS);AZe=r(EDr,"LEDTokenizerFast"),EDr.forEach(t),yZe=r(t9," (LED model)"),t9.forEach(t),LZe=i(S),es=n(S,"LI",{});var a9=s(es);ore=n(a9,"STRONG",{});var CDr=s(ore);xZe=r(CDr,"longformer"),CDr.forEach(t),$Ze=r(a9," \u2014 "),US=n(a9,"A",{href:!0});var wDr=s(US);kZe=r(wDr,"LongformerTokenizer"),wDr.forEach(t),SZe=r(a9," or "),JS=n(a9,"A",{href:!0});var ADr=s(JS);RZe=r(ADr,"LongformerTokenizerFast"),ADr.forEach(t),BZe=r(a9," (Longformer model)"),a9.forEach(t),PZe=i(S),Fg=n(S,"LI",{});var vCe=s(Fg);rre=n(vCe,"STRONG",{});var yDr=s(rre);IZe=r(yDr,"luke"),yDr.forEach(t),qZe=r(vCe," \u2014 "),YS=n(vCe,"A",{href:!0});var LDr=s(YS);NZe=r(LDr,"LukeTokenizer"),LDr.forEach(t),jZe=r(vCe," (LUKE model)"),vCe.forEach(t),DZe=i(S),os=n(S,"LI",{});var n9=s(os);tre=n(n9,"STRONG",{});var xDr=s(tre);GZe=r(xDr,"lxmert"),xDr.forEach(t),OZe=r(n9," \u2014 "),KS=n(n9,"A",{href:!0});var $Dr=s(KS);VZe=r($Dr,"LxmertTokenizer"),$Dr.forEach(t),XZe=r(n9," or "),ZS=n(n9,"A",{href:!0});var kDr=s(ZS);zZe=r(kDr,"LxmertTokenizerFast"),kDr.forEach(t),WZe=r(n9," (LXMERT model)"),n9.forEach(t),QZe=i(S),Tg=n(S,"LI",{});var FCe=s(Tg);are=n(FCe,"STRONG",{});var SDr=s(are);HZe=r(SDr,"m2m_100"),SDr.forEach(t),UZe=r(FCe," \u2014 "),eR=n(FCe,"A",{href:!0});var RDr=s(eR);JZe=r(RDr,"M2M100Tokenizer"),RDr.forEach(t),YZe=r(FCe," (M2M100 model)"),FCe.forEach(t),KZe=i(S),Mg=n(S,"LI",{});var TCe=s(Mg);nre=n(TCe,"STRONG",{});var BDr=s(nre);ZZe=r(BDr,"marian"),BDr.forEach(t),eeo=r(TCe," \u2014 "),oR=n(TCe,"A",{href:!0});var PDr=s(oR);oeo=r(PDr,"MarianTokenizer"),PDr.forEach(t),reo=r(TCe," (Marian model)"),TCe.forEach(t),teo=i(S),rs=n(S,"LI",{});var s9=s(rs);sre=n(s9,"STRONG",{});var IDr=s(sre);aeo=r(IDr,"mbart"),IDr.forEach(t),neo=r(s9," \u2014 "),rR=n(s9,"A",{href:!0});var qDr=s(rR);seo=r(qDr,"MBartTokenizer"),qDr.forEach(t),leo=r(s9," or "),tR=n(s9,"A",{href:!0});var NDr=s(tR);ieo=r(NDr,"MBartTokenizerFast"),NDr.forEach(t),deo=r(s9," (mBART model)"),s9.forEach(t),ceo=i(S),ts=n(S,"LI",{});var l9=s(ts);lre=n(l9,"STRONG",{});var jDr=s(lre);feo=r(jDr,"mbart50"),jDr.forEach(t),meo=r(l9," \u2014 "),aR=n(l9,"A",{href:!0});var DDr=s(aR);geo=r(DDr,"MBart50Tokenizer"),DDr.forEach(t),heo=r(l9," or "),nR=n(l9,"A",{href:!0});var GDr=s(nR);peo=r(GDr,"MBart50TokenizerFast"),GDr.forEach(t),ueo=r(l9," (mBART-50 model)"),l9.forEach(t),_eo=i(S),as=n(S,"LI",{});var i9=s(as);ire=n(i9,"STRONG",{});var ODr=s(ire);beo=r(ODr,"megatron-bert"),ODr.forEach(t),veo=r(i9," \u2014 "),sR=n(i9,"A",{href:!0});var VDr=s(sR);Feo=r(VDr,"BertTokenizer"),VDr.forEach(t),Teo=r(i9," or "),lR=n(i9,"A",{href:!0});var XDr=s(lR);Meo=r(XDr,"BertTokenizerFast"),XDr.forEach(t),Eeo=r(i9," (MegatronBert model)"),i9.forEach(t),Ceo=i(S),Eg=n(S,"LI",{});var MCe=s(Eg);dre=n(MCe,"STRONG",{});var zDr=s(dre);weo=r(zDr,"mluke"),zDr.forEach(t),Aeo=r(MCe," \u2014 "),iR=n(MCe,"A",{href:!0});var WDr=s(iR);yeo=r(WDr,"MLukeTokenizer"),WDr.forEach(t),Leo=r(MCe," (mLUKE model)"),MCe.forEach(t),xeo=i(S),ns=n(S,"LI",{});var d9=s(ns);cre=n(d9,"STRONG",{});var QDr=s(cre);$eo=r(QDr,"mobilebert"),QDr.forEach(t),keo=r(d9," \u2014 "),dR=n(d9,"A",{href:!0});var HDr=s(dR);Seo=r(HDr,"MobileBertTokenizer"),HDr.forEach(t),Reo=r(d9," or "),cR=n(d9,"A",{href:!0});var UDr=s(cR);Beo=r(UDr,"MobileBertTokenizerFast"),UDr.forEach(t),Peo=r(d9," (MobileBERT model)"),d9.forEach(t),Ieo=i(S),ss=n(S,"LI",{});var c9=s(ss);fre=n(c9,"STRONG",{});var JDr=s(fre);qeo=r(JDr,"mpnet"),JDr.forEach(t),Neo=r(c9," \u2014 "),fR=n(c9,"A",{href:!0});var YDr=s(fR);jeo=r(YDr,"MPNetTokenizer"),YDr.forEach(t),Deo=r(c9," or "),mR=n(c9,"A",{href:!0});var KDr=s(mR);Geo=r(KDr,"MPNetTokenizerFast"),KDr.forEach(t),Oeo=r(c9," (MPNet model)"),c9.forEach(t),Veo=i(S),ls=n(S,"LI",{});var f9=s(ls);mre=n(f9,"STRONG",{});var ZDr=s(mre);Xeo=r(ZDr,"mt5"),ZDr.forEach(t),zeo=r(f9," \u2014 "),gR=n(f9,"A",{href:!0});var eGr=s(gR);Weo=r(eGr,"MT5Tokenizer"),eGr.forEach(t),Qeo=r(f9," or "),hR=n(f9,"A",{href:!0});var oGr=s(hR);Heo=r(oGr,"MT5TokenizerFast"),oGr.forEach(t),Ueo=r(f9," (mT5 model)"),f9.forEach(t),Jeo=i(S),is=n(S,"LI",{});var m9=s(is);gre=n(m9,"STRONG",{});var rGr=s(gre);Yeo=r(rGr,"nystromformer"),rGr.forEach(t),Keo=r(m9," \u2014 "),pR=n(m9,"A",{href:!0});var tGr=s(pR);Zeo=r(tGr,"AlbertTokenizer"),tGr.forEach(t),eoo=r(m9," or "),uR=n(m9,"A",{href:!0});var aGr=s(uR);ooo=r(aGr,"AlbertTokenizerFast"),aGr.forEach(t),roo=r(m9," (Nystromformer model)"),m9.forEach(t),too=i(S),ds=n(S,"LI",{});var g9=s(ds);hre=n(g9,"STRONG",{});var nGr=s(hre);aoo=r(nGr,"openai-gpt"),nGr.forEach(t),noo=r(g9," \u2014 "),_R=n(g9,"A",{href:!0});var sGr=s(_R);soo=r(sGr,"OpenAIGPTTokenizer"),sGr.forEach(t),loo=r(g9," or "),bR=n(g9,"A",{href:!0});var lGr=s(bR);ioo=r(lGr,"OpenAIGPTTokenizerFast"),lGr.forEach(t),doo=r(g9," (OpenAI GPT model)"),g9.forEach(t),coo=i(S),cs=n(S,"LI",{});var h9=s(cs);pre=n(h9,"STRONG",{});var iGr=s(pre);foo=r(iGr,"pegasus"),iGr.forEach(t),moo=r(h9," \u2014 "),vR=n(h9,"A",{href:!0});var dGr=s(vR);goo=r(dGr,"PegasusTokenizer"),dGr.forEach(t),hoo=r(h9," or "),FR=n(h9,"A",{href:!0});var cGr=s(FR);poo=r(cGr,"PegasusTokenizerFast"),cGr.forEach(t),uoo=r(h9," (Pegasus model)"),h9.forEach(t),_oo=i(S),Cg=n(S,"LI",{});var ECe=s(Cg);ure=n(ECe,"STRONG",{});var fGr=s(ure);boo=r(fGr,"perceiver"),fGr.forEach(t),voo=r(ECe," \u2014 "),TR=n(ECe,"A",{href:!0});var mGr=s(TR);Foo=r(mGr,"PerceiverTokenizer"),mGr.forEach(t),Too=r(ECe," (Perceiver model)"),ECe.forEach(t),Moo=i(S),wg=n(S,"LI",{});var CCe=s(wg);_re=n(CCe,"STRONG",{});var gGr=s(_re);Eoo=r(gGr,"phobert"),gGr.forEach(t),Coo=r(CCe," \u2014 "),MR=n(CCe,"A",{href:!0});var hGr=s(MR);woo=r(hGr,"PhobertTokenizer"),hGr.forEach(t),Aoo=r(CCe," (PhoBERT model)"),CCe.forEach(t),yoo=i(S),Ag=n(S,"LI",{});var wCe=s(Ag);bre=n(wCe,"STRONG",{});var pGr=s(bre);Loo=r(pGr,"plbart"),pGr.forEach(t),xoo=r(wCe," \u2014 "),ER=n(wCe,"A",{href:!0});var uGr=s(ER);$oo=r(uGr,"PLBartTokenizer"),uGr.forEach(t),koo=r(wCe," (PLBart model)"),wCe.forEach(t),Soo=i(S),yg=n(S,"LI",{});var ACe=s(yg);vre=n(ACe,"STRONG",{});var _Gr=s(vre);Roo=r(_Gr,"prophetnet"),_Gr.forEach(t),Boo=r(ACe," \u2014 "),CR=n(ACe,"A",{href:!0});var bGr=s(CR);Poo=r(bGr,"ProphetNetTokenizer"),bGr.forEach(t),Ioo=r(ACe," (ProphetNet model)"),ACe.forEach(t),qoo=i(S),fs=n(S,"LI",{});var p9=s(fs);Fre=n(p9,"STRONG",{});var vGr=s(Fre);Noo=r(vGr,"qdqbert"),vGr.forEach(t),joo=r(p9," \u2014 "),wR=n(p9,"A",{href:!0});var FGr=s(wR);Doo=r(FGr,"BertTokenizer"),FGr.forEach(t),Goo=r(p9," or "),AR=n(p9,"A",{href:!0});var TGr=s(AR);Ooo=r(TGr,"BertTokenizerFast"),TGr.forEach(t),Voo=r(p9," (QDQBert model)"),p9.forEach(t),Xoo=i(S),Lg=n(S,"LI",{});var yCe=s(Lg);Tre=n(yCe,"STRONG",{});var MGr=s(Tre);zoo=r(MGr,"rag"),MGr.forEach(t),Woo=r(yCe," \u2014 "),yR=n(yCe,"A",{href:!0});var EGr=s(yR);Qoo=r(EGr,"RagTokenizer"),EGr.forEach(t),Hoo=r(yCe," (RAG model)"),yCe.forEach(t),Uoo=i(S),ms=n(S,"LI",{});var u9=s(ms);Mre=n(u9,"STRONG",{});var CGr=s(Mre);Joo=r(CGr,"realm"),CGr.forEach(t),Yoo=r(u9," \u2014 "),LR=n(u9,"A",{href:!0});var wGr=s(LR);Koo=r(wGr,"RealmTokenizer"),wGr.forEach(t),Zoo=r(u9," or "),xR=n(u9,"A",{href:!0});var AGr=s(xR);ero=r(AGr,"RealmTokenizerFast"),AGr.forEach(t),oro=r(u9," (Realm model)"),u9.forEach(t),rro=i(S),gs=n(S,"LI",{});var _9=s(gs);Ere=n(_9,"STRONG",{});var yGr=s(Ere);tro=r(yGr,"reformer"),yGr.forEach(t),aro=r(_9," \u2014 "),$R=n(_9,"A",{href:!0});var LGr=s($R);nro=r(LGr,"ReformerTokenizer"),LGr.forEach(t),sro=r(_9," or "),kR=n(_9,"A",{href:!0});var xGr=s(kR);lro=r(xGr,"ReformerTokenizerFast"),xGr.forEach(t),iro=r(_9," (Reformer model)"),_9.forEach(t),dro=i(S),hs=n(S,"LI",{});var b9=s(hs);Cre=n(b9,"STRONG",{});var $Gr=s(Cre);cro=r($Gr,"rembert"),$Gr.forEach(t),fro=r(b9," \u2014 "),SR=n(b9,"A",{href:!0});var kGr=s(SR);mro=r(kGr,"RemBertTokenizer"),kGr.forEach(t),gro=r(b9," or "),RR=n(b9,"A",{href:!0});var SGr=s(RR);hro=r(SGr,"RemBertTokenizerFast"),SGr.forEach(t),pro=r(b9," (RemBERT model)"),b9.forEach(t),uro=i(S),ps=n(S,"LI",{});var v9=s(ps);wre=n(v9,"STRONG",{});var RGr=s(wre);_ro=r(RGr,"retribert"),RGr.forEach(t),bro=r(v9," \u2014 "),BR=n(v9,"A",{href:!0});var BGr=s(BR);vro=r(BGr,"RetriBertTokenizer"),BGr.forEach(t),Fro=r(v9," or "),PR=n(v9,"A",{href:!0});var PGr=s(PR);Tro=r(PGr,"RetriBertTokenizerFast"),PGr.forEach(t),Mro=r(v9," (RetriBERT model)"),v9.forEach(t),Ero=i(S),us=n(S,"LI",{});var F9=s(us);Are=n(F9,"STRONG",{});var IGr=s(Are);Cro=r(IGr,"roberta"),IGr.forEach(t),wro=r(F9," \u2014 "),IR=n(F9,"A",{href:!0});var qGr=s(IR);Aro=r(qGr,"RobertaTokenizer"),qGr.forEach(t),yro=r(F9," or "),qR=n(F9,"A",{href:!0});var NGr=s(qR);Lro=r(NGr,"RobertaTokenizerFast"),NGr.forEach(t),xro=r(F9," (RoBERTa model)"),F9.forEach(t),$ro=i(S),_s=n(S,"LI",{});var T9=s(_s);yre=n(T9,"STRONG",{});var jGr=s(yre);kro=r(jGr,"roformer"),jGr.forEach(t),Sro=r(T9," \u2014 "),NR=n(T9,"A",{href:!0});var DGr=s(NR);Rro=r(DGr,"RoFormerTokenizer"),DGr.forEach(t),Bro=r(T9," or "),jR=n(T9,"A",{href:!0});var GGr=s(jR);Pro=r(GGr,"RoFormerTokenizerFast"),GGr.forEach(t),Iro=r(T9," (RoFormer model)"),T9.forEach(t),qro=i(S),xg=n(S,"LI",{});var LCe=s(xg);Lre=n(LCe,"STRONG",{});var OGr=s(Lre);Nro=r(OGr,"speech_to_text"),OGr.forEach(t),jro=r(LCe," \u2014 "),DR=n(LCe,"A",{href:!0});var VGr=s(DR);Dro=r(VGr,"Speech2TextTokenizer"),VGr.forEach(t),Gro=r(LCe," (Speech2Text model)"),LCe.forEach(t),Oro=i(S),$g=n(S,"LI",{});var xCe=s($g);xre=n(xCe,"STRONG",{});var XGr=s(xre);Vro=r(XGr,"speech_to_text_2"),XGr.forEach(t),Xro=r(xCe," \u2014 "),GR=n(xCe,"A",{href:!0});var zGr=s(GR);zro=r(zGr,"Speech2Text2Tokenizer"),zGr.forEach(t),Wro=r(xCe," (Speech2Text2 model)"),xCe.forEach(t),Qro=i(S),bs=n(S,"LI",{});var M9=s(bs);$re=n(M9,"STRONG",{});var WGr=s($re);Hro=r(WGr,"splinter"),WGr.forEach(t),Uro=r(M9," \u2014 "),OR=n(M9,"A",{href:!0});var QGr=s(OR);Jro=r(QGr,"SplinterTokenizer"),QGr.forEach(t),Yro=r(M9," or "),VR=n(M9,"A",{href:!0});var HGr=s(VR);Kro=r(HGr,"SplinterTokenizerFast"),HGr.forEach(t),Zro=r(M9," (Splinter model)"),M9.forEach(t),eto=i(S),vs=n(S,"LI",{});var E9=s(vs);kre=n(E9,"STRONG",{});var UGr=s(kre);oto=r(UGr,"squeezebert"),UGr.forEach(t),rto=r(E9," \u2014 "),XR=n(E9,"A",{href:!0});var JGr=s(XR);tto=r(JGr,"SqueezeBertTokenizer"),JGr.forEach(t),ato=r(E9," or "),zR=n(E9,"A",{href:!0});var YGr=s(zR);nto=r(YGr,"SqueezeBertTokenizerFast"),YGr.forEach(t),sto=r(E9," (SqueezeBERT model)"),E9.forEach(t),lto=i(S),Fs=n(S,"LI",{});var C9=s(Fs);Sre=n(C9,"STRONG",{});var KGr=s(Sre);ito=r(KGr,"t5"),KGr.forEach(t),dto=r(C9," \u2014 "),WR=n(C9,"A",{href:!0});var ZGr=s(WR);cto=r(ZGr,"T5Tokenizer"),ZGr.forEach(t),fto=r(C9," or "),QR=n(C9,"A",{href:!0});var eOr=s(QR);mto=r(eOr,"T5TokenizerFast"),eOr.forEach(t),gto=r(C9," (T5 model)"),C9.forEach(t),hto=i(S),kg=n(S,"LI",{});var $Ce=s(kg);Rre=n($Ce,"STRONG",{});var oOr=s(Rre);pto=r(oOr,"tapas"),oOr.forEach(t),uto=r($Ce," \u2014 "),HR=n($Ce,"A",{href:!0});var rOr=s(HR);_to=r(rOr,"TapasTokenizer"),rOr.forEach(t),bto=r($Ce," (TAPAS model)"),$Ce.forEach(t),vto=i(S),Sg=n(S,"LI",{});var kCe=s(Sg);Bre=n(kCe,"STRONG",{});var tOr=s(Bre);Fto=r(tOr,"tapex"),tOr.forEach(t),Tto=r(kCe," \u2014 "),UR=n(kCe,"A",{href:!0});var aOr=s(UR);Mto=r(aOr,"TapexTokenizer"),aOr.forEach(t),Eto=r(kCe," (TAPEX model)"),kCe.forEach(t),Cto=i(S),Rg=n(S,"LI",{});var SCe=s(Rg);Pre=n(SCe,"STRONG",{});var nOr=s(Pre);wto=r(nOr,"transfo-xl"),nOr.forEach(t),Ato=r(SCe," \u2014 "),JR=n(SCe,"A",{href:!0});var sOr=s(JR);yto=r(sOr,"TransfoXLTokenizer"),sOr.forEach(t),Lto=r(SCe," (Transformer-XL model)"),SCe.forEach(t),xto=i(S),Ts=n(S,"LI",{});var w9=s(Ts);Ire=n(w9,"STRONG",{});var lOr=s(Ire);$to=r(lOr,"visual_bert"),lOr.forEach(t),kto=r(w9," \u2014 "),YR=n(w9,"A",{href:!0});var iOr=s(YR);Sto=r(iOr,"BertTokenizer"),iOr.forEach(t),Rto=r(w9," or "),KR=n(w9,"A",{href:!0});var dOr=s(KR);Bto=r(dOr,"BertTokenizerFast"),dOr.forEach(t),Pto=r(w9," (VisualBert model)"),w9.forEach(t),Ito=i(S),Bg=n(S,"LI",{});var RCe=s(Bg);qre=n(RCe,"STRONG",{});var cOr=s(qre);qto=r(cOr,"wav2vec2"),cOr.forEach(t),Nto=r(RCe," \u2014 "),ZR=n(RCe,"A",{href:!0});var fOr=s(ZR);jto=r(fOr,"Wav2Vec2CTCTokenizer"),fOr.forEach(t),Dto=r(RCe," (Wav2Vec2 model)"),RCe.forEach(t),Gto=i(S),Pg=n(S,"LI",{});var BCe=s(Pg);Nre=n(BCe,"STRONG",{});var mOr=s(Nre);Oto=r(mOr,"wav2vec2-conformer"),mOr.forEach(t),Vto=r(BCe," \u2014 "),eB=n(BCe,"A",{href:!0});var gOr=s(eB);Xto=r(gOr,"Wav2Vec2CTCTokenizer"),gOr.forEach(t),zto=r(BCe," (Wav2Vec2ConformerConformer model)"),BCe.forEach(t),Wto=i(S),Ig=n(S,"LI",{});var PCe=s(Ig);jre=n(PCe,"STRONG",{});var hOr=s(jre);Qto=r(hOr,"wav2vec2_phoneme"),hOr.forEach(t),Hto=r(PCe," \u2014 "),oB=n(PCe,"A",{href:!0});var pOr=s(oB);Uto=r(pOr,"Wav2Vec2PhonemeCTCTokenizer"),pOr.forEach(t),Jto=r(PCe," (Wav2Vec2Phoneme model)"),PCe.forEach(t),Yto=i(S),Ms=n(S,"LI",{});var A9=s(Ms);Dre=n(A9,"STRONG",{});var uOr=s(Dre);Kto=r(uOr,"xglm"),uOr.forEach(t),Zto=r(A9," \u2014 "),rB=n(A9,"A",{href:!0});var _Or=s(rB);eao=r(_Or,"XGLMTokenizer"),_Or.forEach(t),oao=r(A9," or "),tB=n(A9,"A",{href:!0});var bOr=s(tB);rao=r(bOr,"XGLMTokenizerFast"),bOr.forEach(t),tao=r(A9," (XGLM model)"),A9.forEach(t),aao=i(S),qg=n(S,"LI",{});var ICe=s(qg);Gre=n(ICe,"STRONG",{});var vOr=s(Gre);nao=r(vOr,"xlm"),vOr.forEach(t),sao=r(ICe," \u2014 "),aB=n(ICe,"A",{href:!0});var FOr=s(aB);lao=r(FOr,"XLMTokenizer"),FOr.forEach(t),iao=r(ICe," (XLM model)"),ICe.forEach(t),dao=i(S),Ng=n(S,"LI",{});var qCe=s(Ng);Ore=n(qCe,"STRONG",{});var TOr=s(Ore);cao=r(TOr,"xlm-prophetnet"),TOr.forEach(t),fao=r(qCe," \u2014 "),nB=n(qCe,"A",{href:!0});var MOr=s(nB);mao=r(MOr,"XLMProphetNetTokenizer"),MOr.forEach(t),gao=r(qCe," (XLMProphetNet model)"),qCe.forEach(t),hao=i(S),Es=n(S,"LI",{});var y9=s(Es);Vre=n(y9,"STRONG",{});var EOr=s(Vre);pao=r(EOr,"xlm-roberta"),EOr.forEach(t),uao=r(y9," \u2014 "),sB=n(y9,"A",{href:!0});var COr=s(sB);_ao=r(COr,"XLMRobertaTokenizer"),COr.forEach(t),bao=r(y9," or "),lB=n(y9,"A",{href:!0});var wOr=s(lB);vao=r(wOr,"XLMRobertaTokenizerFast"),wOr.forEach(t),Fao=r(y9," (XLM-RoBERTa model)"),y9.forEach(t),Tao=i(S),Cs=n(S,"LI",{});var L9=s(Cs);Xre=n(L9,"STRONG",{});var AOr=s(Xre);Mao=r(AOr,"xlm-roberta-xl"),AOr.forEach(t),Eao=r(L9," \u2014 "),iB=n(L9,"A",{href:!0});var yOr=s(iB);Cao=r(yOr,"RobertaTokenizer"),yOr.forEach(t),wao=r(L9," or "),dB=n(L9,"A",{href:!0});var LOr=s(dB);Aao=r(LOr,"RobertaTokenizerFast"),LOr.forEach(t),yao=r(L9," (XLM-RoBERTa-XL model)"),L9.forEach(t),Lao=i(S),ws=n(S,"LI",{});var x9=s(ws);zre=n(x9,"STRONG",{});var xOr=s(zre);xao=r(xOr,"xlnet"),xOr.forEach(t),$ao=r(x9," \u2014 "),cB=n(x9,"A",{href:!0});var $Or=s(cB);kao=r($Or,"XLNetTokenizer"),$Or.forEach(t),Sao=r(x9," or "),fB=n(x9,"A",{href:!0});var kOr=s(fB);Rao=r(kOr,"XLNetTokenizerFast"),kOr.forEach(t),Bao=r(x9," (XLNet model)"),x9.forEach(t),Pao=i(S),As=n(S,"LI",{});var $9=s(As);Wre=n($9,"STRONG",{});var SOr=s(Wre);Iao=r(SOr,"yoso"),SOr.forEach(t),qao=r($9," \u2014 "),mB=n($9,"A",{href:!0});var ROr=s(mB);Nao=r(ROr,"AlbertTokenizer"),ROr.forEach(t),jao=r($9," or "),gB=n($9,"A",{href:!0});var BOr=s(gB);Dao=r(BOr,"AlbertTokenizerFast"),BOr.forEach(t),Gao=r($9," (YOSO model)"),$9.forEach(t),S.forEach(t),Oao=i(ks),T(jg.$$.fragment,ks),ks.forEach(t),Vao=i($s),Dg=n($s,"DIV",{class:!0});var vIe=s(Dg);T(IA.$$.fragment,vIe),Xao=i(vIe),Qre=n(vIe,"P",{});var POr=s(Qre);zao=r(POr,"Register a new tokenizer in this mapping."),POr.forEach(t),vIe.forEach(t),$s.forEach(t),MBe=i(f),hi=n(f,"H2",{class:!0});var FIe=s(hi);Gg=n(FIe,"A",{id:!0,class:!0,href:!0});var IOr=s(Gg);Hre=n(IOr,"SPAN",{});var qOr=s(Hre);T(qA.$$.fragment,qOr),qOr.forEach(t),IOr.forEach(t),Wao=i(FIe),Ure=n(FIe,"SPAN",{});var NOr=s(Ure);Qao=r(NOr,"AutoFeatureExtractor"),NOr.forEach(t),FIe.forEach(t),EBe=i(f),Co=n(f,"DIV",{class:!0});var Ss=s(Co);T(NA.$$.fragment,Ss),Hao=i(Ss),jA=n(Ss,"P",{});var TIe=s(jA);Uao=r(TIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hB=n(TIe,"A",{href:!0});var jOr=s(hB);Jao=r(jOr,"AutoFeatureExtractor.from_pretrained()"),jOr.forEach(t),Yao=r(TIe," class method."),TIe.forEach(t),Kao=i(Ss),DA=n(Ss,"P",{});var MIe=s(DA);Zao=r(MIe,"This class cannot be instantiated directly using "),Jre=n(MIe,"CODE",{});var DOr=s(Jre);eno=r(DOr,"__init__()"),DOr.forEach(t),ono=r(MIe," (throws an error)."),MIe.forEach(t),rno=i(Ss),We=n(Ss,"DIV",{class:!0});var Ut=s(We);T(GA.$$.fragment,Ut),tno=i(Ut),Yre=n(Ut,"P",{});var GOr=s(Yre);ano=r(GOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),GOr.forEach(t),nno=i(Ut),Ea=n(Ut,"P",{});var x3=s(Ea);sno=r(x3,"The feature extractor class to instantiate is selected based on the "),Kre=n(x3,"CODE",{});var OOr=s(Kre);lno=r(OOr,"model_type"),OOr.forEach(t),ino=r(x3,` property of the config object
(either passed as an argument or loaded from `),Zre=n(x3,"CODE",{});var VOr=s(Zre);dno=r(VOr,"pretrained_model_name_or_path"),VOr.forEach(t),cno=r(x3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ete=n(x3,"CODE",{});var XOr=s(ete);fno=r(XOr,"pretrained_model_name_or_path"),XOr.forEach(t),mno=r(x3,":"),x3.forEach(t),gno=i(Ut),te=n(Ut,"UL",{});var se=s(te);Og=n(se,"LI",{});var NCe=s(Og);ote=n(NCe,"STRONG",{});var zOr=s(ote);hno=r(zOr,"beit"),zOr.forEach(t),pno=r(NCe," \u2014 "),pB=n(NCe,"A",{href:!0});var WOr=s(pB);uno=r(WOr,"BeitFeatureExtractor"),WOr.forEach(t),_no=r(NCe," (BEiT model)"),NCe.forEach(t),bno=i(se),Vg=n(se,"LI",{});var jCe=s(Vg);rte=n(jCe,"STRONG",{});var QOr=s(rte);vno=r(QOr,"clip"),QOr.forEach(t),Fno=r(jCe," \u2014 "),uB=n(jCe,"A",{href:!0});var HOr=s(uB);Tno=r(HOr,"CLIPFeatureExtractor"),HOr.forEach(t),Mno=r(jCe," (CLIP model)"),jCe.forEach(t),Eno=i(se),Xg=n(se,"LI",{});var DCe=s(Xg);tte=n(DCe,"STRONG",{});var UOr=s(tte);Cno=r(UOr,"convnext"),UOr.forEach(t),wno=r(DCe," \u2014 "),_B=n(DCe,"A",{href:!0});var JOr=s(_B);Ano=r(JOr,"ConvNextFeatureExtractor"),JOr.forEach(t),yno=r(DCe," (ConvNext model)"),DCe.forEach(t),Lno=i(se),zg=n(se,"LI",{});var GCe=s(zg);ate=n(GCe,"STRONG",{});var YOr=s(ate);xno=r(YOr,"data2vec-audio"),YOr.forEach(t),$no=r(GCe," \u2014 "),bB=n(GCe,"A",{href:!0});var KOr=s(bB);kno=r(KOr,"Wav2Vec2FeatureExtractor"),KOr.forEach(t),Sno=r(GCe," (Data2VecAudio model)"),GCe.forEach(t),Rno=i(se),Wg=n(se,"LI",{});var OCe=s(Wg);nte=n(OCe,"STRONG",{});var ZOr=s(nte);Bno=r(ZOr,"data2vec-vision"),ZOr.forEach(t),Pno=r(OCe," \u2014 "),vB=n(OCe,"A",{href:!0});var eVr=s(vB);Ino=r(eVr,"BeitFeatureExtractor"),eVr.forEach(t),qno=r(OCe," (Data2VecVision model)"),OCe.forEach(t),Nno=i(se),Qg=n(se,"LI",{});var VCe=s(Qg);ste=n(VCe,"STRONG",{});var oVr=s(ste);jno=r(oVr,"deit"),oVr.forEach(t),Dno=r(VCe," \u2014 "),FB=n(VCe,"A",{href:!0});var rVr=s(FB);Gno=r(rVr,"DeiTFeatureExtractor"),rVr.forEach(t),Ono=r(VCe," (DeiT model)"),VCe.forEach(t),Vno=i(se),Hg=n(se,"LI",{});var XCe=s(Hg);lte=n(XCe,"STRONG",{});var tVr=s(lte);Xno=r(tVr,"detr"),tVr.forEach(t),zno=r(XCe," \u2014 "),TB=n(XCe,"A",{href:!0});var aVr=s(TB);Wno=r(aVr,"DetrFeatureExtractor"),aVr.forEach(t),Qno=r(XCe," (DETR model)"),XCe.forEach(t),Hno=i(se),Ug=n(se,"LI",{});var zCe=s(Ug);ite=n(zCe,"STRONG",{});var nVr=s(ite);Uno=r(nVr,"dpt"),nVr.forEach(t),Jno=r(zCe," \u2014 "),MB=n(zCe,"A",{href:!0});var sVr=s(MB);Yno=r(sVr,"DPTFeatureExtractor"),sVr.forEach(t),Kno=r(zCe," (DPT model)"),zCe.forEach(t),Zno=i(se),Jg=n(se,"LI",{});var WCe=s(Jg);dte=n(WCe,"STRONG",{});var lVr=s(dte);eso=r(lVr,"glpn"),lVr.forEach(t),oso=r(WCe," \u2014 "),EB=n(WCe,"A",{href:!0});var iVr=s(EB);rso=r(iVr,"GLPNFeatureExtractor"),iVr.forEach(t),tso=r(WCe," (GLPN model)"),WCe.forEach(t),aso=i(se),Yg=n(se,"LI",{});var QCe=s(Yg);cte=n(QCe,"STRONG",{});var dVr=s(cte);nso=r(dVr,"hubert"),dVr.forEach(t),sso=r(QCe," \u2014 "),CB=n(QCe,"A",{href:!0});var cVr=s(CB);lso=r(cVr,"Wav2Vec2FeatureExtractor"),cVr.forEach(t),iso=r(QCe," (Hubert model)"),QCe.forEach(t),dso=i(se),Kg=n(se,"LI",{});var HCe=s(Kg);fte=n(HCe,"STRONG",{});var fVr=s(fte);cso=r(fVr,"layoutlmv2"),fVr.forEach(t),fso=r(HCe," \u2014 "),wB=n(HCe,"A",{href:!0});var mVr=s(wB);mso=r(mVr,"LayoutLMv2FeatureExtractor"),mVr.forEach(t),gso=r(HCe," (LayoutLMv2 model)"),HCe.forEach(t),hso=i(se),Zg=n(se,"LI",{});var UCe=s(Zg);mte=n(UCe,"STRONG",{});var gVr=s(mte);pso=r(gVr,"maskformer"),gVr.forEach(t),uso=r(UCe," \u2014 "),AB=n(UCe,"A",{href:!0});var hVr=s(AB);_so=r(hVr,"MaskFormerFeatureExtractor"),hVr.forEach(t),bso=r(UCe," (MaskFormer model)"),UCe.forEach(t),vso=i(se),eh=n(se,"LI",{});var JCe=s(eh);gte=n(JCe,"STRONG",{});var pVr=s(gte);Fso=r(pVr,"perceiver"),pVr.forEach(t),Tso=r(JCe," \u2014 "),yB=n(JCe,"A",{href:!0});var uVr=s(yB);Mso=r(uVr,"PerceiverFeatureExtractor"),uVr.forEach(t),Eso=r(JCe," (Perceiver model)"),JCe.forEach(t),Cso=i(se),oh=n(se,"LI",{});var YCe=s(oh);hte=n(YCe,"STRONG",{});var _Vr=s(hte);wso=r(_Vr,"poolformer"),_Vr.forEach(t),Aso=r(YCe," \u2014 "),LB=n(YCe,"A",{href:!0});var bVr=s(LB);yso=r(bVr,"PoolFormerFeatureExtractor"),bVr.forEach(t),Lso=r(YCe," (PoolFormer model)"),YCe.forEach(t),xso=i(se),rh=n(se,"LI",{});var KCe=s(rh);pte=n(KCe,"STRONG",{});var vVr=s(pte);$so=r(vVr,"regnet"),vVr.forEach(t),kso=r(KCe," \u2014 "),xB=n(KCe,"A",{href:!0});var FVr=s(xB);Sso=r(FVr,"ConvNextFeatureExtractor"),FVr.forEach(t),Rso=r(KCe," (RegNet model)"),KCe.forEach(t),Bso=i(se),th=n(se,"LI",{});var ZCe=s(th);ute=n(ZCe,"STRONG",{});var TVr=s(ute);Pso=r(TVr,"resnet"),TVr.forEach(t),Iso=r(ZCe," \u2014 "),$B=n(ZCe,"A",{href:!0});var MVr=s($B);qso=r(MVr,"ConvNextFeatureExtractor"),MVr.forEach(t),Nso=r(ZCe," (ResNet model)"),ZCe.forEach(t),jso=i(se),ah=n(se,"LI",{});var e5e=s(ah);_te=n(e5e,"STRONG",{});var EVr=s(_te);Dso=r(EVr,"segformer"),EVr.forEach(t),Gso=r(e5e," \u2014 "),kB=n(e5e,"A",{href:!0});var CVr=s(kB);Oso=r(CVr,"SegformerFeatureExtractor"),CVr.forEach(t),Vso=r(e5e," (SegFormer model)"),e5e.forEach(t),Xso=i(se),nh=n(se,"LI",{});var o5e=s(nh);bte=n(o5e,"STRONG",{});var wVr=s(bte);zso=r(wVr,"speech_to_text"),wVr.forEach(t),Wso=r(o5e," \u2014 "),SB=n(o5e,"A",{href:!0});var AVr=s(SB);Qso=r(AVr,"Speech2TextFeatureExtractor"),AVr.forEach(t),Hso=r(o5e," (Speech2Text model)"),o5e.forEach(t),Uso=i(se),sh=n(se,"LI",{});var r5e=s(sh);vte=n(r5e,"STRONG",{});var yVr=s(vte);Jso=r(yVr,"swin"),yVr.forEach(t),Yso=r(r5e," \u2014 "),RB=n(r5e,"A",{href:!0});var LVr=s(RB);Kso=r(LVr,"ViTFeatureExtractor"),LVr.forEach(t),Zso=r(r5e," (Swin model)"),r5e.forEach(t),elo=i(se),lh=n(se,"LI",{});var t5e=s(lh);Fte=n(t5e,"STRONG",{});var xVr=s(Fte);olo=r(xVr,"van"),xVr.forEach(t),rlo=r(t5e," \u2014 "),BB=n(t5e,"A",{href:!0});var $Vr=s(BB);tlo=r($Vr,"ConvNextFeatureExtractor"),$Vr.forEach(t),alo=r(t5e," (VAN model)"),t5e.forEach(t),nlo=i(se),ih=n(se,"LI",{});var a5e=s(ih);Tte=n(a5e,"STRONG",{});var kVr=s(Tte);slo=r(kVr,"vit"),kVr.forEach(t),llo=r(a5e," \u2014 "),PB=n(a5e,"A",{href:!0});var SVr=s(PB);ilo=r(SVr,"ViTFeatureExtractor"),SVr.forEach(t),dlo=r(a5e," (ViT model)"),a5e.forEach(t),clo=i(se),dh=n(se,"LI",{});var n5e=s(dh);Mte=n(n5e,"STRONG",{});var RVr=s(Mte);flo=r(RVr,"vit_mae"),RVr.forEach(t),mlo=r(n5e," \u2014 "),IB=n(n5e,"A",{href:!0});var BVr=s(IB);glo=r(BVr,"ViTFeatureExtractor"),BVr.forEach(t),hlo=r(n5e," (ViTMAE model)"),n5e.forEach(t),plo=i(se),ch=n(se,"LI",{});var s5e=s(ch);Ete=n(s5e,"STRONG",{});var PVr=s(Ete);ulo=r(PVr,"wav2vec2"),PVr.forEach(t),_lo=r(s5e," \u2014 "),qB=n(s5e,"A",{href:!0});var IVr=s(qB);blo=r(IVr,"Wav2Vec2FeatureExtractor"),IVr.forEach(t),vlo=r(s5e," (Wav2Vec2 model)"),s5e.forEach(t),Flo=i(se),fh=n(se,"LI",{});var l5e=s(fh);Cte=n(l5e,"STRONG",{});var qVr=s(Cte);Tlo=r(qVr,"wav2vec2-conformer"),qVr.forEach(t),Mlo=r(l5e," \u2014 "),NB=n(l5e,"A",{href:!0});var NVr=s(NB);Elo=r(NVr,"Wav2Vec2FeatureExtractor"),NVr.forEach(t),Clo=r(l5e," (Wav2Vec2ConformerConformer model)"),l5e.forEach(t),se.forEach(t),wlo=i(Ut),T(mh.$$.fragment,Ut),Alo=i(Ut),T(gh.$$.fragment,Ut),Ut.forEach(t),ylo=i(Ss),hh=n(Ss,"DIV",{class:!0});var EIe=s(hh);T(OA.$$.fragment,EIe),Llo=i(EIe),wte=n(EIe,"P",{});var jVr=s(wte);xlo=r(jVr,"Register a new feature extractor for this class."),jVr.forEach(t),EIe.forEach(t),Ss.forEach(t),CBe=i(f),pi=n(f,"H2",{class:!0});var CIe=s(pi);ph=n(CIe,"A",{id:!0,class:!0,href:!0});var DVr=s(ph);Ate=n(DVr,"SPAN",{});var GVr=s(Ate);T(VA.$$.fragment,GVr),GVr.forEach(t),DVr.forEach(t),$lo=i(CIe),yte=n(CIe,"SPAN",{});var OVr=s(yte);klo=r(OVr,"AutoProcessor"),OVr.forEach(t),CIe.forEach(t),wBe=i(f),wo=n(f,"DIV",{class:!0});var Rs=s(wo);T(XA.$$.fragment,Rs),Slo=i(Rs),zA=n(Rs,"P",{});var wIe=s(zA);Rlo=r(wIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jB=n(wIe,"A",{href:!0});var VVr=s(jB);Blo=r(VVr,"AutoProcessor.from_pretrained()"),VVr.forEach(t),Plo=r(wIe," class method."),wIe.forEach(t),Ilo=i(Rs),WA=n(Rs,"P",{});var AIe=s(WA);qlo=r(AIe,"This class cannot be instantiated directly using "),Lte=n(AIe,"CODE",{});var XVr=s(Lte);Nlo=r(XVr,"__init__()"),XVr.forEach(t),jlo=r(AIe," (throws an error)."),AIe.forEach(t),Dlo=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Jt=s(Qe);T(QA.$$.fragment,Jt),Glo=i(Jt),xte=n(Jt,"P",{});var zVr=s(xte);Olo=r(zVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zVr.forEach(t),Vlo=i(Jt),ui=n(Jt,"P",{});var mY=s(ui);Xlo=r(mY,"The processor class to instantiate is selected based on the "),$te=n(mY,"CODE",{});var WVr=s($te);zlo=r(WVr,"model_type"),WVr.forEach(t),Wlo=r(mY,` property of the config object (either
passed as an argument or loaded from `),kte=n(mY,"CODE",{});var QVr=s(kte);Qlo=r(QVr,"pretrained_model_name_or_path"),QVr.forEach(t),Hlo=r(mY," if possible):"),mY.forEach(t),Ulo=i(Jt),be=n(Jt,"UL",{});var ve=s(be);uh=n(ve,"LI",{});var i5e=s(uh);Ste=n(i5e,"STRONG",{});var HVr=s(Ste);Jlo=r(HVr,"clip"),HVr.forEach(t),Ylo=r(i5e," \u2014 "),DB=n(i5e,"A",{href:!0});var UVr=s(DB);Klo=r(UVr,"CLIPProcessor"),UVr.forEach(t),Zlo=r(i5e," (CLIP model)"),i5e.forEach(t),eio=i(ve),_h=n(ve,"LI",{});var d5e=s(_h);Rte=n(d5e,"STRONG",{});var JVr=s(Rte);oio=r(JVr,"layoutlmv2"),JVr.forEach(t),rio=r(d5e," \u2014 "),GB=n(d5e,"A",{href:!0});var YVr=s(GB);tio=r(YVr,"LayoutLMv2Processor"),YVr.forEach(t),aio=r(d5e," (LayoutLMv2 model)"),d5e.forEach(t),nio=i(ve),bh=n(ve,"LI",{});var c5e=s(bh);Bte=n(c5e,"STRONG",{});var KVr=s(Bte);sio=r(KVr,"layoutxlm"),KVr.forEach(t),lio=r(c5e," \u2014 "),OB=n(c5e,"A",{href:!0});var ZVr=s(OB);iio=r(ZVr,"LayoutXLMProcessor"),ZVr.forEach(t),dio=r(c5e," (LayoutXLM model)"),c5e.forEach(t),cio=i(ve),vh=n(ve,"LI",{});var f5e=s(vh);Pte=n(f5e,"STRONG",{});var eXr=s(Pte);fio=r(eXr,"sew"),eXr.forEach(t),mio=r(f5e," \u2014 "),VB=n(f5e,"A",{href:!0});var oXr=s(VB);gio=r(oXr,"Wav2Vec2Processor"),oXr.forEach(t),hio=r(f5e," (SEW model)"),f5e.forEach(t),pio=i(ve),Fh=n(ve,"LI",{});var m5e=s(Fh);Ite=n(m5e,"STRONG",{});var rXr=s(Ite);uio=r(rXr,"sew-d"),rXr.forEach(t),_io=r(m5e," \u2014 "),XB=n(m5e,"A",{href:!0});var tXr=s(XB);bio=r(tXr,"Wav2Vec2Processor"),tXr.forEach(t),vio=r(m5e," (SEW-D model)"),m5e.forEach(t),Fio=i(ve),Th=n(ve,"LI",{});var g5e=s(Th);qte=n(g5e,"STRONG",{});var aXr=s(qte);Tio=r(aXr,"speech_to_text"),aXr.forEach(t),Mio=r(g5e," \u2014 "),zB=n(g5e,"A",{href:!0});var nXr=s(zB);Eio=r(nXr,"Speech2TextProcessor"),nXr.forEach(t),Cio=r(g5e," (Speech2Text model)"),g5e.forEach(t),wio=i(ve),Mh=n(ve,"LI",{});var h5e=s(Mh);Nte=n(h5e,"STRONG",{});var sXr=s(Nte);Aio=r(sXr,"speech_to_text_2"),sXr.forEach(t),yio=r(h5e," \u2014 "),WB=n(h5e,"A",{href:!0});var lXr=s(WB);Lio=r(lXr,"Speech2Text2Processor"),lXr.forEach(t),xio=r(h5e," (Speech2Text2 model)"),h5e.forEach(t),$io=i(ve),Eh=n(ve,"LI",{});var p5e=s(Eh);jte=n(p5e,"STRONG",{});var iXr=s(jte);kio=r(iXr,"trocr"),iXr.forEach(t),Sio=r(p5e," \u2014 "),QB=n(p5e,"A",{href:!0});var dXr=s(QB);Rio=r(dXr,"TrOCRProcessor"),dXr.forEach(t),Bio=r(p5e," (TrOCR model)"),p5e.forEach(t),Pio=i(ve),Ch=n(ve,"LI",{});var u5e=s(Ch);Dte=n(u5e,"STRONG",{});var cXr=s(Dte);Iio=r(cXr,"unispeech"),cXr.forEach(t),qio=r(u5e," \u2014 "),HB=n(u5e,"A",{href:!0});var fXr=s(HB);Nio=r(fXr,"Wav2Vec2Processor"),fXr.forEach(t),jio=r(u5e," (UniSpeech model)"),u5e.forEach(t),Dio=i(ve),wh=n(ve,"LI",{});var _5e=s(wh);Gte=n(_5e,"STRONG",{});var mXr=s(Gte);Gio=r(mXr,"unispeech-sat"),mXr.forEach(t),Oio=r(_5e," \u2014 "),UB=n(_5e,"A",{href:!0});var gXr=s(UB);Vio=r(gXr,"Wav2Vec2Processor"),gXr.forEach(t),Xio=r(_5e," (UniSpeechSat model)"),_5e.forEach(t),zio=i(ve),Ah=n(ve,"LI",{});var b5e=s(Ah);Ote=n(b5e,"STRONG",{});var hXr=s(Ote);Wio=r(hXr,"vilt"),hXr.forEach(t),Qio=r(b5e," \u2014 "),JB=n(b5e,"A",{href:!0});var pXr=s(JB);Hio=r(pXr,"ViltProcessor"),pXr.forEach(t),Uio=r(b5e," (ViLT model)"),b5e.forEach(t),Jio=i(ve),yh=n(ve,"LI",{});var v5e=s(yh);Vte=n(v5e,"STRONG",{});var uXr=s(Vte);Yio=r(uXr,"vision-text-dual-encoder"),uXr.forEach(t),Kio=r(v5e," \u2014 "),YB=n(v5e,"A",{href:!0});var _Xr=s(YB);Zio=r(_Xr,"VisionTextDualEncoderProcessor"),_Xr.forEach(t),edo=r(v5e," (VisionTextDualEncoder model)"),v5e.forEach(t),odo=i(ve),Lh=n(ve,"LI",{});var F5e=s(Lh);Xte=n(F5e,"STRONG",{});var bXr=s(Xte);rdo=r(bXr,"wav2vec2"),bXr.forEach(t),tdo=r(F5e," \u2014 "),KB=n(F5e,"A",{href:!0});var vXr=s(KB);ado=r(vXr,"Wav2Vec2Processor"),vXr.forEach(t),ndo=r(F5e," (Wav2Vec2 model)"),F5e.forEach(t),sdo=i(ve),xh=n(ve,"LI",{});var T5e=s(xh);zte=n(T5e,"STRONG",{});var FXr=s(zte);ldo=r(FXr,"wav2vec2-conformer"),FXr.forEach(t),ido=r(T5e," \u2014 "),ZB=n(T5e,"A",{href:!0});var TXr=s(ZB);ddo=r(TXr,"Wav2Vec2Processor"),TXr.forEach(t),cdo=r(T5e," (Wav2Vec2ConformerConformer model)"),T5e.forEach(t),fdo=i(ve),$h=n(ve,"LI",{});var M5e=s($h);Wte=n(M5e,"STRONG",{});var MXr=s(Wte);mdo=r(MXr,"wavlm"),MXr.forEach(t),gdo=r(M5e," \u2014 "),eP=n(M5e,"A",{href:!0});var EXr=s(eP);hdo=r(EXr,"Wav2Vec2Processor"),EXr.forEach(t),pdo=r(M5e," (WavLM model)"),M5e.forEach(t),ve.forEach(t),udo=i(Jt),T(kh.$$.fragment,Jt),_do=i(Jt),T(Sh.$$.fragment,Jt),Jt.forEach(t),bdo=i(Rs),Rh=n(Rs,"DIV",{class:!0});var yIe=s(Rh);T(HA.$$.fragment,yIe),vdo=i(yIe),Qte=n(yIe,"P",{});var CXr=s(Qte);Fdo=r(CXr,"Register a new processor for this class."),CXr.forEach(t),yIe.forEach(t),Rs.forEach(t),ABe=i(f),_i=n(f,"H2",{class:!0});var LIe=s(_i);Bh=n(LIe,"A",{id:!0,class:!0,href:!0});var wXr=s(Bh);Hte=n(wXr,"SPAN",{});var AXr=s(Hte);T(UA.$$.fragment,AXr),AXr.forEach(t),wXr.forEach(t),Tdo=i(LIe),Ute=n(LIe,"SPAN",{});var yXr=s(Ute);Mdo=r(yXr,"AutoModel"),yXr.forEach(t),LIe.forEach(t),yBe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(JA.$$.fragment,Bs),Edo=i(Bs),bi=n(Bs,"P",{});var gY=s(bi);Cdo=r(gY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oP=n(gY,"A",{href:!0});var LXr=s(oP);wdo=r(LXr,"from_pretrained()"),LXr.forEach(t),Ado=r(gY," class method or the "),rP=n(gY,"A",{href:!0});var xXr=s(rP);ydo=r(xXr,"from_config()"),xXr.forEach(t),Ldo=r(gY,` class
method.`),gY.forEach(t),xdo=i(Bs),YA=n(Bs,"P",{});var xIe=s(YA);$do=r(xIe,"This class cannot be instantiated directly using "),Jte=n(xIe,"CODE",{});var $Xr=s(Jte);kdo=r($Xr,"__init__()"),$Xr.forEach(t),Sdo=r(xIe," (throws an error)."),xIe.forEach(t),Rdo=i(Bs),et=n(Bs,"DIV",{class:!0});var $3=s(et);T(KA.$$.fragment,$3),Bdo=i($3),Yte=n($3,"P",{});var kXr=s(Yte);Pdo=r(kXr,"Instantiates one of the base model classes of the library from a configuration."),kXr.forEach(t),Ido=i($3),vi=n($3,"P",{});var hY=s(vi);qdo=r(hY,`Note:
Loading a model from its configuration file does `),Kte=n(hY,"STRONG",{});var SXr=s(Kte);Ndo=r(SXr,"not"),SXr.forEach(t),jdo=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tP=n(hY,"A",{href:!0});var RXr=s(tP);Ddo=r(RXr,"from_pretrained()"),RXr.forEach(t),Gdo=r(hY," to load the model weights."),hY.forEach(t),Odo=i($3),T(Ph.$$.fragment,$3),$3.forEach(t),Vdo=i(Bs),He=n(Bs,"DIV",{class:!0});var Yt=s(He);T(ZA.$$.fragment,Yt),Xdo=i(Yt),Zte=n(Yt,"P",{});var BXr=s(Zte);zdo=r(BXr,"Instantiate one of the base model classes of the library from a pretrained model."),BXr.forEach(t),Wdo=i(Yt),Ca=n(Yt,"P",{});var k3=s(Ca);Qdo=r(k3,"The model class to instantiate is selected based on the "),eae=n(k3,"CODE",{});var PXr=s(eae);Hdo=r(PXr,"model_type"),PXr.forEach(t),Udo=r(k3,` property of the config object (either
passed as an argument or loaded from `),oae=n(k3,"CODE",{});var IXr=s(oae);Jdo=r(IXr,"pretrained_model_name_or_path"),IXr.forEach(t),Ydo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=n(k3,"CODE",{});var qXr=s(rae);Kdo=r(qXr,"pretrained_model_name_or_path"),qXr.forEach(t),Zdo=r(k3,":"),k3.forEach(t),eco=i(Yt),x=n(Yt,"UL",{});var $=s(x);Ih=n($,"LI",{});var E5e=s(Ih);tae=n(E5e,"STRONG",{});var NXr=s(tae);oco=r(NXr,"albert"),NXr.forEach(t),rco=r(E5e," \u2014 "),aP=n(E5e,"A",{href:!0});var jXr=s(aP);tco=r(jXr,"AlbertModel"),jXr.forEach(t),aco=r(E5e," (ALBERT model)"),E5e.forEach(t),nco=i($),qh=n($,"LI",{});var C5e=s(qh);aae=n(C5e,"STRONG",{});var DXr=s(aae);sco=r(DXr,"bart"),DXr.forEach(t),lco=r(C5e," \u2014 "),nP=n(C5e,"A",{href:!0});var GXr=s(nP);ico=r(GXr,"BartModel"),GXr.forEach(t),dco=r(C5e," (BART model)"),C5e.forEach(t),cco=i($),Nh=n($,"LI",{});var w5e=s(Nh);nae=n(w5e,"STRONG",{});var OXr=s(nae);fco=r(OXr,"beit"),OXr.forEach(t),mco=r(w5e," \u2014 "),sP=n(w5e,"A",{href:!0});var VXr=s(sP);gco=r(VXr,"BeitModel"),VXr.forEach(t),hco=r(w5e," (BEiT model)"),w5e.forEach(t),pco=i($),jh=n($,"LI",{});var A5e=s(jh);sae=n(A5e,"STRONG",{});var XXr=s(sae);uco=r(XXr,"bert"),XXr.forEach(t),_co=r(A5e," \u2014 "),lP=n(A5e,"A",{href:!0});var zXr=s(lP);bco=r(zXr,"BertModel"),zXr.forEach(t),vco=r(A5e," (BERT model)"),A5e.forEach(t),Fco=i($),Dh=n($,"LI",{});var y5e=s(Dh);lae=n(y5e,"STRONG",{});var WXr=s(lae);Tco=r(WXr,"bert-generation"),WXr.forEach(t),Mco=r(y5e," \u2014 "),iP=n(y5e,"A",{href:!0});var QXr=s(iP);Eco=r(QXr,"BertGenerationEncoder"),QXr.forEach(t),Cco=r(y5e," (Bert Generation model)"),y5e.forEach(t),wco=i($),Gh=n($,"LI",{});var L5e=s(Gh);iae=n(L5e,"STRONG",{});var HXr=s(iae);Aco=r(HXr,"big_bird"),HXr.forEach(t),yco=r(L5e," \u2014 "),dP=n(L5e,"A",{href:!0});var UXr=s(dP);Lco=r(UXr,"BigBirdModel"),UXr.forEach(t),xco=r(L5e," (BigBird model)"),L5e.forEach(t),$co=i($),Oh=n($,"LI",{});var x5e=s(Oh);dae=n(x5e,"STRONG",{});var JXr=s(dae);kco=r(JXr,"bigbird_pegasus"),JXr.forEach(t),Sco=r(x5e," \u2014 "),cP=n(x5e,"A",{href:!0});var YXr=s(cP);Rco=r(YXr,"BigBirdPegasusModel"),YXr.forEach(t),Bco=r(x5e," (BigBirdPegasus model)"),x5e.forEach(t),Pco=i($),Vh=n($,"LI",{});var $5e=s(Vh);cae=n($5e,"STRONG",{});var KXr=s(cae);Ico=r(KXr,"blenderbot"),KXr.forEach(t),qco=r($5e," \u2014 "),fP=n($5e,"A",{href:!0});var ZXr=s(fP);Nco=r(ZXr,"BlenderbotModel"),ZXr.forEach(t),jco=r($5e," (Blenderbot model)"),$5e.forEach(t),Dco=i($),Xh=n($,"LI",{});var k5e=s(Xh);fae=n(k5e,"STRONG",{});var ezr=s(fae);Gco=r(ezr,"blenderbot-small"),ezr.forEach(t),Oco=r(k5e," \u2014 "),mP=n(k5e,"A",{href:!0});var ozr=s(mP);Vco=r(ozr,"BlenderbotSmallModel"),ozr.forEach(t),Xco=r(k5e," (BlenderbotSmall model)"),k5e.forEach(t),zco=i($),zh=n($,"LI",{});var S5e=s(zh);mae=n(S5e,"STRONG",{});var rzr=s(mae);Wco=r(rzr,"camembert"),rzr.forEach(t),Qco=r(S5e," \u2014 "),gP=n(S5e,"A",{href:!0});var tzr=s(gP);Hco=r(tzr,"CamembertModel"),tzr.forEach(t),Uco=r(S5e," (CamemBERT model)"),S5e.forEach(t),Jco=i($),Wh=n($,"LI",{});var R5e=s(Wh);gae=n(R5e,"STRONG",{});var azr=s(gae);Yco=r(azr,"canine"),azr.forEach(t),Kco=r(R5e," \u2014 "),hP=n(R5e,"A",{href:!0});var nzr=s(hP);Zco=r(nzr,"CanineModel"),nzr.forEach(t),efo=r(R5e," (Canine model)"),R5e.forEach(t),ofo=i($),Qh=n($,"LI",{});var B5e=s(Qh);hae=n(B5e,"STRONG",{});var szr=s(hae);rfo=r(szr,"clip"),szr.forEach(t),tfo=r(B5e," \u2014 "),pP=n(B5e,"A",{href:!0});var lzr=s(pP);afo=r(lzr,"CLIPModel"),lzr.forEach(t),nfo=r(B5e," (CLIP model)"),B5e.forEach(t),sfo=i($),Hh=n($,"LI",{});var P5e=s(Hh);pae=n(P5e,"STRONG",{});var izr=s(pae);lfo=r(izr,"convbert"),izr.forEach(t),ifo=r(P5e," \u2014 "),uP=n(P5e,"A",{href:!0});var dzr=s(uP);dfo=r(dzr,"ConvBertModel"),dzr.forEach(t),cfo=r(P5e," (ConvBERT model)"),P5e.forEach(t),ffo=i($),Uh=n($,"LI",{});var I5e=s(Uh);uae=n(I5e,"STRONG",{});var czr=s(uae);mfo=r(czr,"convnext"),czr.forEach(t),gfo=r(I5e," \u2014 "),_P=n(I5e,"A",{href:!0});var fzr=s(_P);hfo=r(fzr,"ConvNextModel"),fzr.forEach(t),pfo=r(I5e," (ConvNext model)"),I5e.forEach(t),ufo=i($),Jh=n($,"LI",{});var q5e=s(Jh);_ae=n(q5e,"STRONG",{});var mzr=s(_ae);_fo=r(mzr,"ctrl"),mzr.forEach(t),bfo=r(q5e," \u2014 "),bP=n(q5e,"A",{href:!0});var gzr=s(bP);vfo=r(gzr,"CTRLModel"),gzr.forEach(t),Ffo=r(q5e," (CTRL model)"),q5e.forEach(t),Tfo=i($),Yh=n($,"LI",{});var N5e=s(Yh);bae=n(N5e,"STRONG",{});var hzr=s(bae);Mfo=r(hzr,"data2vec-audio"),hzr.forEach(t),Efo=r(N5e," \u2014 "),vP=n(N5e,"A",{href:!0});var pzr=s(vP);Cfo=r(pzr,"Data2VecAudioModel"),pzr.forEach(t),wfo=r(N5e," (Data2VecAudio model)"),N5e.forEach(t),Afo=i($),Kh=n($,"LI",{});var j5e=s(Kh);vae=n(j5e,"STRONG",{});var uzr=s(vae);yfo=r(uzr,"data2vec-text"),uzr.forEach(t),Lfo=r(j5e," \u2014 "),FP=n(j5e,"A",{href:!0});var _zr=s(FP);xfo=r(_zr,"Data2VecTextModel"),_zr.forEach(t),$fo=r(j5e," (Data2VecText model)"),j5e.forEach(t),kfo=i($),Zh=n($,"LI",{});var D5e=s(Zh);Fae=n(D5e,"STRONG",{});var bzr=s(Fae);Sfo=r(bzr,"data2vec-vision"),bzr.forEach(t),Rfo=r(D5e," \u2014 "),TP=n(D5e,"A",{href:!0});var vzr=s(TP);Bfo=r(vzr,"Data2VecVisionModel"),vzr.forEach(t),Pfo=r(D5e," (Data2VecVision model)"),D5e.forEach(t),Ifo=i($),ep=n($,"LI",{});var G5e=s(ep);Tae=n(G5e,"STRONG",{});var Fzr=s(Tae);qfo=r(Fzr,"deberta"),Fzr.forEach(t),Nfo=r(G5e," \u2014 "),MP=n(G5e,"A",{href:!0});var Tzr=s(MP);jfo=r(Tzr,"DebertaModel"),Tzr.forEach(t),Dfo=r(G5e," (DeBERTa model)"),G5e.forEach(t),Gfo=i($),op=n($,"LI",{});var O5e=s(op);Mae=n(O5e,"STRONG",{});var Mzr=s(Mae);Ofo=r(Mzr,"deberta-v2"),Mzr.forEach(t),Vfo=r(O5e," \u2014 "),EP=n(O5e,"A",{href:!0});var Ezr=s(EP);Xfo=r(Ezr,"DebertaV2Model"),Ezr.forEach(t),zfo=r(O5e," (DeBERTa-v2 model)"),O5e.forEach(t),Wfo=i($),rp=n($,"LI",{});var V5e=s(rp);Eae=n(V5e,"STRONG",{});var Czr=s(Eae);Qfo=r(Czr,"decision_transformer"),Czr.forEach(t),Hfo=r(V5e," \u2014 "),CP=n(V5e,"A",{href:!0});var wzr=s(CP);Ufo=r(wzr,"DecisionTransformerModel"),wzr.forEach(t),Jfo=r(V5e," (Decision Transformer model)"),V5e.forEach(t),Yfo=i($),tp=n($,"LI",{});var X5e=s(tp);Cae=n(X5e,"STRONG",{});var Azr=s(Cae);Kfo=r(Azr,"deit"),Azr.forEach(t),Zfo=r(X5e," \u2014 "),wP=n(X5e,"A",{href:!0});var yzr=s(wP);emo=r(yzr,"DeiTModel"),yzr.forEach(t),omo=r(X5e," (DeiT model)"),X5e.forEach(t),rmo=i($),ap=n($,"LI",{});var z5e=s(ap);wae=n(z5e,"STRONG",{});var Lzr=s(wae);tmo=r(Lzr,"detr"),Lzr.forEach(t),amo=r(z5e," \u2014 "),AP=n(z5e,"A",{href:!0});var xzr=s(AP);nmo=r(xzr,"DetrModel"),xzr.forEach(t),smo=r(z5e," (DETR model)"),z5e.forEach(t),lmo=i($),np=n($,"LI",{});var W5e=s(np);Aae=n(W5e,"STRONG",{});var $zr=s(Aae);imo=r($zr,"distilbert"),$zr.forEach(t),dmo=r(W5e," \u2014 "),yP=n(W5e,"A",{href:!0});var kzr=s(yP);cmo=r(kzr,"DistilBertModel"),kzr.forEach(t),fmo=r(W5e," (DistilBERT model)"),W5e.forEach(t),mmo=i($),sp=n($,"LI",{});var Q5e=s(sp);yae=n(Q5e,"STRONG",{});var Szr=s(yae);gmo=r(Szr,"dpr"),Szr.forEach(t),hmo=r(Q5e," \u2014 "),LP=n(Q5e,"A",{href:!0});var Rzr=s(LP);pmo=r(Rzr,"DPRQuestionEncoder"),Rzr.forEach(t),umo=r(Q5e," (DPR model)"),Q5e.forEach(t),_mo=i($),lp=n($,"LI",{});var H5e=s(lp);Lae=n(H5e,"STRONG",{});var Bzr=s(Lae);bmo=r(Bzr,"dpt"),Bzr.forEach(t),vmo=r(H5e," \u2014 "),xP=n(H5e,"A",{href:!0});var Pzr=s(xP);Fmo=r(Pzr,"DPTModel"),Pzr.forEach(t),Tmo=r(H5e," (DPT model)"),H5e.forEach(t),Mmo=i($),ip=n($,"LI",{});var U5e=s(ip);xae=n(U5e,"STRONG",{});var Izr=s(xae);Emo=r(Izr,"electra"),Izr.forEach(t),Cmo=r(U5e," \u2014 "),$P=n(U5e,"A",{href:!0});var qzr=s($P);wmo=r(qzr,"ElectraModel"),qzr.forEach(t),Amo=r(U5e," (ELECTRA model)"),U5e.forEach(t),ymo=i($),dp=n($,"LI",{});var J5e=s(dp);$ae=n(J5e,"STRONG",{});var Nzr=s($ae);Lmo=r(Nzr,"flaubert"),Nzr.forEach(t),xmo=r(J5e," \u2014 "),kP=n(J5e,"A",{href:!0});var jzr=s(kP);$mo=r(jzr,"FlaubertModel"),jzr.forEach(t),kmo=r(J5e," (FlauBERT model)"),J5e.forEach(t),Smo=i($),cp=n($,"LI",{});var Y5e=s(cp);kae=n(Y5e,"STRONG",{});var Dzr=s(kae);Rmo=r(Dzr,"fnet"),Dzr.forEach(t),Bmo=r(Y5e," \u2014 "),SP=n(Y5e,"A",{href:!0});var Gzr=s(SP);Pmo=r(Gzr,"FNetModel"),Gzr.forEach(t),Imo=r(Y5e," (FNet model)"),Y5e.forEach(t),qmo=i($),fp=n($,"LI",{});var K5e=s(fp);Sae=n(K5e,"STRONG",{});var Ozr=s(Sae);Nmo=r(Ozr,"fsmt"),Ozr.forEach(t),jmo=r(K5e," \u2014 "),RP=n(K5e,"A",{href:!0});var Vzr=s(RP);Dmo=r(Vzr,"FSMTModel"),Vzr.forEach(t),Gmo=r(K5e," (FairSeq Machine-Translation model)"),K5e.forEach(t),Omo=i($),ys=n($,"LI",{});var k9=s(ys);Rae=n(k9,"STRONG",{});var Xzr=s(Rae);Vmo=r(Xzr,"funnel"),Xzr.forEach(t),Xmo=r(k9," \u2014 "),BP=n(k9,"A",{href:!0});var zzr=s(BP);zmo=r(zzr,"FunnelModel"),zzr.forEach(t),Wmo=r(k9," or "),PP=n(k9,"A",{href:!0});var Wzr=s(PP);Qmo=r(Wzr,"FunnelBaseModel"),Wzr.forEach(t),Hmo=r(k9," (Funnel Transformer model)"),k9.forEach(t),Umo=i($),mp=n($,"LI",{});var Z5e=s(mp);Bae=n(Z5e,"STRONG",{});var Qzr=s(Bae);Jmo=r(Qzr,"glpn"),Qzr.forEach(t),Ymo=r(Z5e," \u2014 "),IP=n(Z5e,"A",{href:!0});var Hzr=s(IP);Kmo=r(Hzr,"GLPNModel"),Hzr.forEach(t),Zmo=r(Z5e," (GLPN model)"),Z5e.forEach(t),ego=i($),gp=n($,"LI",{});var e3e=s(gp);Pae=n(e3e,"STRONG",{});var Uzr=s(Pae);ogo=r(Uzr,"gpt2"),Uzr.forEach(t),rgo=r(e3e," \u2014 "),qP=n(e3e,"A",{href:!0});var Jzr=s(qP);tgo=r(Jzr,"GPT2Model"),Jzr.forEach(t),ago=r(e3e," (OpenAI GPT-2 model)"),e3e.forEach(t),ngo=i($),hp=n($,"LI",{});var o3e=s(hp);Iae=n(o3e,"STRONG",{});var Yzr=s(Iae);sgo=r(Yzr,"gpt_neo"),Yzr.forEach(t),lgo=r(o3e," \u2014 "),NP=n(o3e,"A",{href:!0});var Kzr=s(NP);igo=r(Kzr,"GPTNeoModel"),Kzr.forEach(t),dgo=r(o3e," (GPT Neo model)"),o3e.forEach(t),cgo=i($),pp=n($,"LI",{});var r3e=s(pp);qae=n(r3e,"STRONG",{});var Zzr=s(qae);fgo=r(Zzr,"gptj"),Zzr.forEach(t),mgo=r(r3e," \u2014 "),jP=n(r3e,"A",{href:!0});var eWr=s(jP);ggo=r(eWr,"GPTJModel"),eWr.forEach(t),hgo=r(r3e," (GPT-J model)"),r3e.forEach(t),pgo=i($),up=n($,"LI",{});var t3e=s(up);Nae=n(t3e,"STRONG",{});var oWr=s(Nae);ugo=r(oWr,"hubert"),oWr.forEach(t),_go=r(t3e," \u2014 "),DP=n(t3e,"A",{href:!0});var rWr=s(DP);bgo=r(rWr,"HubertModel"),rWr.forEach(t),vgo=r(t3e," (Hubert model)"),t3e.forEach(t),Fgo=i($),_p=n($,"LI",{});var a3e=s(_p);jae=n(a3e,"STRONG",{});var tWr=s(jae);Tgo=r(tWr,"ibert"),tWr.forEach(t),Mgo=r(a3e," \u2014 "),GP=n(a3e,"A",{href:!0});var aWr=s(GP);Ego=r(aWr,"IBertModel"),aWr.forEach(t),Cgo=r(a3e," (I-BERT model)"),a3e.forEach(t),wgo=i($),bp=n($,"LI",{});var n3e=s(bp);Dae=n(n3e,"STRONG",{});var nWr=s(Dae);Ago=r(nWr,"imagegpt"),nWr.forEach(t),ygo=r(n3e," \u2014 "),OP=n(n3e,"A",{href:!0});var sWr=s(OP);Lgo=r(sWr,"ImageGPTModel"),sWr.forEach(t),xgo=r(n3e," (ImageGPT model)"),n3e.forEach(t),$go=i($),vp=n($,"LI",{});var s3e=s(vp);Gae=n(s3e,"STRONG",{});var lWr=s(Gae);kgo=r(lWr,"layoutlm"),lWr.forEach(t),Sgo=r(s3e," \u2014 "),VP=n(s3e,"A",{href:!0});var iWr=s(VP);Rgo=r(iWr,"LayoutLMModel"),iWr.forEach(t),Bgo=r(s3e," (LayoutLM model)"),s3e.forEach(t),Pgo=i($),Fp=n($,"LI",{});var l3e=s(Fp);Oae=n(l3e,"STRONG",{});var dWr=s(Oae);Igo=r(dWr,"layoutlmv2"),dWr.forEach(t),qgo=r(l3e," \u2014 "),XP=n(l3e,"A",{href:!0});var cWr=s(XP);Ngo=r(cWr,"LayoutLMv2Model"),cWr.forEach(t),jgo=r(l3e," (LayoutLMv2 model)"),l3e.forEach(t),Dgo=i($),Tp=n($,"LI",{});var i3e=s(Tp);Vae=n(i3e,"STRONG",{});var fWr=s(Vae);Ggo=r(fWr,"led"),fWr.forEach(t),Ogo=r(i3e," \u2014 "),zP=n(i3e,"A",{href:!0});var mWr=s(zP);Vgo=r(mWr,"LEDModel"),mWr.forEach(t),Xgo=r(i3e," (LED model)"),i3e.forEach(t),zgo=i($),Mp=n($,"LI",{});var d3e=s(Mp);Xae=n(d3e,"STRONG",{});var gWr=s(Xae);Wgo=r(gWr,"longformer"),gWr.forEach(t),Qgo=r(d3e," \u2014 "),WP=n(d3e,"A",{href:!0});var hWr=s(WP);Hgo=r(hWr,"LongformerModel"),hWr.forEach(t),Ugo=r(d3e," (Longformer model)"),d3e.forEach(t),Jgo=i($),Ep=n($,"LI",{});var c3e=s(Ep);zae=n(c3e,"STRONG",{});var pWr=s(zae);Ygo=r(pWr,"luke"),pWr.forEach(t),Kgo=r(c3e," \u2014 "),QP=n(c3e,"A",{href:!0});var uWr=s(QP);Zgo=r(uWr,"LukeModel"),uWr.forEach(t),eho=r(c3e," (LUKE model)"),c3e.forEach(t),oho=i($),Cp=n($,"LI",{});var f3e=s(Cp);Wae=n(f3e,"STRONG",{});var _Wr=s(Wae);rho=r(_Wr,"lxmert"),_Wr.forEach(t),tho=r(f3e," \u2014 "),HP=n(f3e,"A",{href:!0});var bWr=s(HP);aho=r(bWr,"LxmertModel"),bWr.forEach(t),nho=r(f3e," (LXMERT model)"),f3e.forEach(t),sho=i($),wp=n($,"LI",{});var m3e=s(wp);Qae=n(m3e,"STRONG",{});var vWr=s(Qae);lho=r(vWr,"m2m_100"),vWr.forEach(t),iho=r(m3e," \u2014 "),UP=n(m3e,"A",{href:!0});var FWr=s(UP);dho=r(FWr,"M2M100Model"),FWr.forEach(t),cho=r(m3e," (M2M100 model)"),m3e.forEach(t),fho=i($),Ap=n($,"LI",{});var g3e=s(Ap);Hae=n(g3e,"STRONG",{});var TWr=s(Hae);mho=r(TWr,"marian"),TWr.forEach(t),gho=r(g3e," \u2014 "),JP=n(g3e,"A",{href:!0});var MWr=s(JP);hho=r(MWr,"MarianModel"),MWr.forEach(t),pho=r(g3e," (Marian model)"),g3e.forEach(t),uho=i($),yp=n($,"LI",{});var h3e=s(yp);Uae=n(h3e,"STRONG",{});var EWr=s(Uae);_ho=r(EWr,"maskformer"),EWr.forEach(t),bho=r(h3e," \u2014 "),YP=n(h3e,"A",{href:!0});var CWr=s(YP);vho=r(CWr,"MaskFormerModel"),CWr.forEach(t),Fho=r(h3e," (MaskFormer model)"),h3e.forEach(t),Tho=i($),Lp=n($,"LI",{});var p3e=s(Lp);Jae=n(p3e,"STRONG",{});var wWr=s(Jae);Mho=r(wWr,"mbart"),wWr.forEach(t),Eho=r(p3e," \u2014 "),KP=n(p3e,"A",{href:!0});var AWr=s(KP);Cho=r(AWr,"MBartModel"),AWr.forEach(t),who=r(p3e," (mBART model)"),p3e.forEach(t),Aho=i($),xp=n($,"LI",{});var u3e=s(xp);Yae=n(u3e,"STRONG",{});var yWr=s(Yae);yho=r(yWr,"megatron-bert"),yWr.forEach(t),Lho=r(u3e," \u2014 "),ZP=n(u3e,"A",{href:!0});var LWr=s(ZP);xho=r(LWr,"MegatronBertModel"),LWr.forEach(t),$ho=r(u3e," (MegatronBert model)"),u3e.forEach(t),kho=i($),$p=n($,"LI",{});var _3e=s($p);Kae=n(_3e,"STRONG",{});var xWr=s(Kae);Sho=r(xWr,"mobilebert"),xWr.forEach(t),Rho=r(_3e," \u2014 "),eI=n(_3e,"A",{href:!0});var $Wr=s(eI);Bho=r($Wr,"MobileBertModel"),$Wr.forEach(t),Pho=r(_3e," (MobileBERT model)"),_3e.forEach(t),Iho=i($),kp=n($,"LI",{});var b3e=s(kp);Zae=n(b3e,"STRONG",{});var kWr=s(Zae);qho=r(kWr,"mpnet"),kWr.forEach(t),Nho=r(b3e," \u2014 "),oI=n(b3e,"A",{href:!0});var SWr=s(oI);jho=r(SWr,"MPNetModel"),SWr.forEach(t),Dho=r(b3e," (MPNet model)"),b3e.forEach(t),Gho=i($),Sp=n($,"LI",{});var v3e=s(Sp);ene=n(v3e,"STRONG",{});var RWr=s(ene);Oho=r(RWr,"mt5"),RWr.forEach(t),Vho=r(v3e," \u2014 "),rI=n(v3e,"A",{href:!0});var BWr=s(rI);Xho=r(BWr,"MT5Model"),BWr.forEach(t),zho=r(v3e," (mT5 model)"),v3e.forEach(t),Who=i($),Rp=n($,"LI",{});var F3e=s(Rp);one=n(F3e,"STRONG",{});var PWr=s(one);Qho=r(PWr,"nystromformer"),PWr.forEach(t),Hho=r(F3e," \u2014 "),tI=n(F3e,"A",{href:!0});var IWr=s(tI);Uho=r(IWr,"NystromformerModel"),IWr.forEach(t),Jho=r(F3e," (Nystromformer model)"),F3e.forEach(t),Yho=i($),Bp=n($,"LI",{});var T3e=s(Bp);rne=n(T3e,"STRONG",{});var qWr=s(rne);Kho=r(qWr,"openai-gpt"),qWr.forEach(t),Zho=r(T3e," \u2014 "),aI=n(T3e,"A",{href:!0});var NWr=s(aI);epo=r(NWr,"OpenAIGPTModel"),NWr.forEach(t),opo=r(T3e," (OpenAI GPT model)"),T3e.forEach(t),rpo=i($),Pp=n($,"LI",{});var M3e=s(Pp);tne=n(M3e,"STRONG",{});var jWr=s(tne);tpo=r(jWr,"pegasus"),jWr.forEach(t),apo=r(M3e," \u2014 "),nI=n(M3e,"A",{href:!0});var DWr=s(nI);npo=r(DWr,"PegasusModel"),DWr.forEach(t),spo=r(M3e," (Pegasus model)"),M3e.forEach(t),lpo=i($),Ip=n($,"LI",{});var E3e=s(Ip);ane=n(E3e,"STRONG",{});var GWr=s(ane);ipo=r(GWr,"perceiver"),GWr.forEach(t),dpo=r(E3e," \u2014 "),sI=n(E3e,"A",{href:!0});var OWr=s(sI);cpo=r(OWr,"PerceiverModel"),OWr.forEach(t),fpo=r(E3e," (Perceiver model)"),E3e.forEach(t),mpo=i($),qp=n($,"LI",{});var C3e=s(qp);nne=n(C3e,"STRONG",{});var VWr=s(nne);gpo=r(VWr,"plbart"),VWr.forEach(t),hpo=r(C3e," \u2014 "),lI=n(C3e,"A",{href:!0});var XWr=s(lI);ppo=r(XWr,"PLBartModel"),XWr.forEach(t),upo=r(C3e," (PLBart model)"),C3e.forEach(t),_po=i($),Np=n($,"LI",{});var w3e=s(Np);sne=n(w3e,"STRONG",{});var zWr=s(sne);bpo=r(zWr,"poolformer"),zWr.forEach(t),vpo=r(w3e," \u2014 "),iI=n(w3e,"A",{href:!0});var WWr=s(iI);Fpo=r(WWr,"PoolFormerModel"),WWr.forEach(t),Tpo=r(w3e," (PoolFormer model)"),w3e.forEach(t),Mpo=i($),jp=n($,"LI",{});var A3e=s(jp);lne=n(A3e,"STRONG",{});var QWr=s(lne);Epo=r(QWr,"prophetnet"),QWr.forEach(t),Cpo=r(A3e," \u2014 "),dI=n(A3e,"A",{href:!0});var HWr=s(dI);wpo=r(HWr,"ProphetNetModel"),HWr.forEach(t),Apo=r(A3e," (ProphetNet model)"),A3e.forEach(t),ypo=i($),Dp=n($,"LI",{});var y3e=s(Dp);ine=n(y3e,"STRONG",{});var UWr=s(ine);Lpo=r(UWr,"qdqbert"),UWr.forEach(t),xpo=r(y3e," \u2014 "),cI=n(y3e,"A",{href:!0});var JWr=s(cI);$po=r(JWr,"QDQBertModel"),JWr.forEach(t),kpo=r(y3e," (QDQBert model)"),y3e.forEach(t),Spo=i($),Gp=n($,"LI",{});var L3e=s(Gp);dne=n(L3e,"STRONG",{});var YWr=s(dne);Rpo=r(YWr,"reformer"),YWr.forEach(t),Bpo=r(L3e," \u2014 "),fI=n(L3e,"A",{href:!0});var KWr=s(fI);Ppo=r(KWr,"ReformerModel"),KWr.forEach(t),Ipo=r(L3e," (Reformer model)"),L3e.forEach(t),qpo=i($),Op=n($,"LI",{});var x3e=s(Op);cne=n(x3e,"STRONG",{});var ZWr=s(cne);Npo=r(ZWr,"regnet"),ZWr.forEach(t),jpo=r(x3e," \u2014 "),mI=n(x3e,"A",{href:!0});var eQr=s(mI);Dpo=r(eQr,"RegNetModel"),eQr.forEach(t),Gpo=r(x3e," (RegNet model)"),x3e.forEach(t),Opo=i($),Vp=n($,"LI",{});var $3e=s(Vp);fne=n($3e,"STRONG",{});var oQr=s(fne);Vpo=r(oQr,"rembert"),oQr.forEach(t),Xpo=r($3e," \u2014 "),gI=n($3e,"A",{href:!0});var rQr=s(gI);zpo=r(rQr,"RemBertModel"),rQr.forEach(t),Wpo=r($3e," (RemBERT model)"),$3e.forEach(t),Qpo=i($),Xp=n($,"LI",{});var k3e=s(Xp);mne=n(k3e,"STRONG",{});var tQr=s(mne);Hpo=r(tQr,"resnet"),tQr.forEach(t),Upo=r(k3e," \u2014 "),hI=n(k3e,"A",{href:!0});var aQr=s(hI);Jpo=r(aQr,"ResNetModel"),aQr.forEach(t),Ypo=r(k3e," (ResNet model)"),k3e.forEach(t),Kpo=i($),zp=n($,"LI",{});var S3e=s(zp);gne=n(S3e,"STRONG",{});var nQr=s(gne);Zpo=r(nQr,"retribert"),nQr.forEach(t),euo=r(S3e," \u2014 "),pI=n(S3e,"A",{href:!0});var sQr=s(pI);ouo=r(sQr,"RetriBertModel"),sQr.forEach(t),ruo=r(S3e," (RetriBERT model)"),S3e.forEach(t),tuo=i($),Wp=n($,"LI",{});var R3e=s(Wp);hne=n(R3e,"STRONG",{});var lQr=s(hne);auo=r(lQr,"roberta"),lQr.forEach(t),nuo=r(R3e," \u2014 "),uI=n(R3e,"A",{href:!0});var iQr=s(uI);suo=r(iQr,"RobertaModel"),iQr.forEach(t),luo=r(R3e," (RoBERTa model)"),R3e.forEach(t),iuo=i($),Qp=n($,"LI",{});var B3e=s(Qp);pne=n(B3e,"STRONG",{});var dQr=s(pne);duo=r(dQr,"roformer"),dQr.forEach(t),cuo=r(B3e," \u2014 "),_I=n(B3e,"A",{href:!0});var cQr=s(_I);fuo=r(cQr,"RoFormerModel"),cQr.forEach(t),muo=r(B3e," (RoFormer model)"),B3e.forEach(t),guo=i($),Hp=n($,"LI",{});var P3e=s(Hp);une=n(P3e,"STRONG",{});var fQr=s(une);huo=r(fQr,"segformer"),fQr.forEach(t),puo=r(P3e," \u2014 "),bI=n(P3e,"A",{href:!0});var mQr=s(bI);uuo=r(mQr,"SegformerModel"),mQr.forEach(t),_uo=r(P3e," (SegFormer model)"),P3e.forEach(t),buo=i($),Up=n($,"LI",{});var I3e=s(Up);_ne=n(I3e,"STRONG",{});var gQr=s(_ne);vuo=r(gQr,"sew"),gQr.forEach(t),Fuo=r(I3e," \u2014 "),vI=n(I3e,"A",{href:!0});var hQr=s(vI);Tuo=r(hQr,"SEWModel"),hQr.forEach(t),Muo=r(I3e," (SEW model)"),I3e.forEach(t),Euo=i($),Jp=n($,"LI",{});var q3e=s(Jp);bne=n(q3e,"STRONG",{});var pQr=s(bne);Cuo=r(pQr,"sew-d"),pQr.forEach(t),wuo=r(q3e," \u2014 "),FI=n(q3e,"A",{href:!0});var uQr=s(FI);Auo=r(uQr,"SEWDModel"),uQr.forEach(t),yuo=r(q3e," (SEW-D model)"),q3e.forEach(t),Luo=i($),Yp=n($,"LI",{});var N3e=s(Yp);vne=n(N3e,"STRONG",{});var _Qr=s(vne);xuo=r(_Qr,"speech_to_text"),_Qr.forEach(t),$uo=r(N3e," \u2014 "),TI=n(N3e,"A",{href:!0});var bQr=s(TI);kuo=r(bQr,"Speech2TextModel"),bQr.forEach(t),Suo=r(N3e," (Speech2Text model)"),N3e.forEach(t),Ruo=i($),Kp=n($,"LI",{});var j3e=s(Kp);Fne=n(j3e,"STRONG",{});var vQr=s(Fne);Buo=r(vQr,"splinter"),vQr.forEach(t),Puo=r(j3e," \u2014 "),MI=n(j3e,"A",{href:!0});var FQr=s(MI);Iuo=r(FQr,"SplinterModel"),FQr.forEach(t),quo=r(j3e," (Splinter model)"),j3e.forEach(t),Nuo=i($),Zp=n($,"LI",{});var D3e=s(Zp);Tne=n(D3e,"STRONG",{});var TQr=s(Tne);juo=r(TQr,"squeezebert"),TQr.forEach(t),Duo=r(D3e," \u2014 "),EI=n(D3e,"A",{href:!0});var MQr=s(EI);Guo=r(MQr,"SqueezeBertModel"),MQr.forEach(t),Ouo=r(D3e," (SqueezeBERT model)"),D3e.forEach(t),Vuo=i($),eu=n($,"LI",{});var G3e=s(eu);Mne=n(G3e,"STRONG",{});var EQr=s(Mne);Xuo=r(EQr,"swin"),EQr.forEach(t),zuo=r(G3e," \u2014 "),CI=n(G3e,"A",{href:!0});var CQr=s(CI);Wuo=r(CQr,"SwinModel"),CQr.forEach(t),Quo=r(G3e," (Swin model)"),G3e.forEach(t),Huo=i($),ou=n($,"LI",{});var O3e=s(ou);Ene=n(O3e,"STRONG",{});var wQr=s(Ene);Uuo=r(wQr,"t5"),wQr.forEach(t),Juo=r(O3e," \u2014 "),wI=n(O3e,"A",{href:!0});var AQr=s(wI);Yuo=r(AQr,"T5Model"),AQr.forEach(t),Kuo=r(O3e," (T5 model)"),O3e.forEach(t),Zuo=i($),ru=n($,"LI",{});var V3e=s(ru);Cne=n(V3e,"STRONG",{});var yQr=s(Cne);e_o=r(yQr,"tapas"),yQr.forEach(t),o_o=r(V3e," \u2014 "),AI=n(V3e,"A",{href:!0});var LQr=s(AI);r_o=r(LQr,"TapasModel"),LQr.forEach(t),t_o=r(V3e," (TAPAS model)"),V3e.forEach(t),a_o=i($),tu=n($,"LI",{});var X3e=s(tu);wne=n(X3e,"STRONG",{});var xQr=s(wne);n_o=r(xQr,"transfo-xl"),xQr.forEach(t),s_o=r(X3e," \u2014 "),yI=n(X3e,"A",{href:!0});var $Qr=s(yI);l_o=r($Qr,"TransfoXLModel"),$Qr.forEach(t),i_o=r(X3e," (Transformer-XL model)"),X3e.forEach(t),d_o=i($),au=n($,"LI",{});var z3e=s(au);Ane=n(z3e,"STRONG",{});var kQr=s(Ane);c_o=r(kQr,"unispeech"),kQr.forEach(t),f_o=r(z3e," \u2014 "),LI=n(z3e,"A",{href:!0});var SQr=s(LI);m_o=r(SQr,"UniSpeechModel"),SQr.forEach(t),g_o=r(z3e," (UniSpeech model)"),z3e.forEach(t),h_o=i($),nu=n($,"LI",{});var W3e=s(nu);yne=n(W3e,"STRONG",{});var RQr=s(yne);p_o=r(RQr,"unispeech-sat"),RQr.forEach(t),u_o=r(W3e," \u2014 "),xI=n(W3e,"A",{href:!0});var BQr=s(xI);__o=r(BQr,"UniSpeechSatModel"),BQr.forEach(t),b_o=r(W3e," (UniSpeechSat model)"),W3e.forEach(t),v_o=i($),su=n($,"LI",{});var Q3e=s(su);Lne=n(Q3e,"STRONG",{});var PQr=s(Lne);F_o=r(PQr,"van"),PQr.forEach(t),T_o=r(Q3e," \u2014 "),$I=n(Q3e,"A",{href:!0});var IQr=s($I);M_o=r(IQr,"VanModel"),IQr.forEach(t),E_o=r(Q3e," (VAN model)"),Q3e.forEach(t),C_o=i($),lu=n($,"LI",{});var H3e=s(lu);xne=n(H3e,"STRONG",{});var qQr=s(xne);w_o=r(qQr,"vilt"),qQr.forEach(t),A_o=r(H3e," \u2014 "),kI=n(H3e,"A",{href:!0});var NQr=s(kI);y_o=r(NQr,"ViltModel"),NQr.forEach(t),L_o=r(H3e," (ViLT model)"),H3e.forEach(t),x_o=i($),iu=n($,"LI",{});var U3e=s(iu);$ne=n(U3e,"STRONG",{});var jQr=s($ne);$_o=r(jQr,"vision-text-dual-encoder"),jQr.forEach(t),k_o=r(U3e," \u2014 "),SI=n(U3e,"A",{href:!0});var DQr=s(SI);S_o=r(DQr,"VisionTextDualEncoderModel"),DQr.forEach(t),R_o=r(U3e," (VisionTextDualEncoder model)"),U3e.forEach(t),B_o=i($),du=n($,"LI",{});var J3e=s(du);kne=n(J3e,"STRONG",{});var GQr=s(kne);P_o=r(GQr,"visual_bert"),GQr.forEach(t),I_o=r(J3e," \u2014 "),RI=n(J3e,"A",{href:!0});var OQr=s(RI);q_o=r(OQr,"VisualBertModel"),OQr.forEach(t),N_o=r(J3e," (VisualBert model)"),J3e.forEach(t),j_o=i($),cu=n($,"LI",{});var Y3e=s(cu);Sne=n(Y3e,"STRONG",{});var VQr=s(Sne);D_o=r(VQr,"vit"),VQr.forEach(t),G_o=r(Y3e," \u2014 "),BI=n(Y3e,"A",{href:!0});var XQr=s(BI);O_o=r(XQr,"ViTModel"),XQr.forEach(t),V_o=r(Y3e," (ViT model)"),Y3e.forEach(t),X_o=i($),fu=n($,"LI",{});var K3e=s(fu);Rne=n(K3e,"STRONG",{});var zQr=s(Rne);z_o=r(zQr,"vit_mae"),zQr.forEach(t),W_o=r(K3e," \u2014 "),PI=n(K3e,"A",{href:!0});var WQr=s(PI);Q_o=r(WQr,"ViTMAEModel"),WQr.forEach(t),H_o=r(K3e," (ViTMAE model)"),K3e.forEach(t),U_o=i($),mu=n($,"LI",{});var Z3e=s(mu);Bne=n(Z3e,"STRONG",{});var QQr=s(Bne);J_o=r(QQr,"wav2vec2"),QQr.forEach(t),Y_o=r(Z3e," \u2014 "),II=n(Z3e,"A",{href:!0});var HQr=s(II);K_o=r(HQr,"Wav2Vec2Model"),HQr.forEach(t),Z_o=r(Z3e," (Wav2Vec2 model)"),Z3e.forEach(t),e1o=i($),gu=n($,"LI",{});var ewe=s(gu);Pne=n(ewe,"STRONG",{});var UQr=s(Pne);o1o=r(UQr,"wav2vec2-conformer"),UQr.forEach(t),r1o=r(ewe," \u2014 "),qI=n(ewe,"A",{href:!0});var JQr=s(qI);t1o=r(JQr,"Wav2Vec2ConformerModel"),JQr.forEach(t),a1o=r(ewe," (Wav2Vec2ConformerConformer model)"),ewe.forEach(t),n1o=i($),hu=n($,"LI",{});var owe=s(hu);Ine=n(owe,"STRONG",{});var YQr=s(Ine);s1o=r(YQr,"wavlm"),YQr.forEach(t),l1o=r(owe," \u2014 "),NI=n(owe,"A",{href:!0});var KQr=s(NI);i1o=r(KQr,"WavLMModel"),KQr.forEach(t),d1o=r(owe," (WavLM model)"),owe.forEach(t),c1o=i($),pu=n($,"LI",{});var rwe=s(pu);qne=n(rwe,"STRONG",{});var ZQr=s(qne);f1o=r(ZQr,"xglm"),ZQr.forEach(t),m1o=r(rwe," \u2014 "),jI=n(rwe,"A",{href:!0});var eHr=s(jI);g1o=r(eHr,"XGLMModel"),eHr.forEach(t),h1o=r(rwe," (XGLM model)"),rwe.forEach(t),p1o=i($),uu=n($,"LI",{});var twe=s(uu);Nne=n(twe,"STRONG",{});var oHr=s(Nne);u1o=r(oHr,"xlm"),oHr.forEach(t),_1o=r(twe," \u2014 "),DI=n(twe,"A",{href:!0});var rHr=s(DI);b1o=r(rHr,"XLMModel"),rHr.forEach(t),v1o=r(twe," (XLM model)"),twe.forEach(t),F1o=i($),_u=n($,"LI",{});var awe=s(_u);jne=n(awe,"STRONG",{});var tHr=s(jne);T1o=r(tHr,"xlm-prophetnet"),tHr.forEach(t),M1o=r(awe," \u2014 "),GI=n(awe,"A",{href:!0});var aHr=s(GI);E1o=r(aHr,"XLMProphetNetModel"),aHr.forEach(t),C1o=r(awe," (XLMProphetNet model)"),awe.forEach(t),w1o=i($),bu=n($,"LI",{});var nwe=s(bu);Dne=n(nwe,"STRONG",{});var nHr=s(Dne);A1o=r(nHr,"xlm-roberta"),nHr.forEach(t),y1o=r(nwe," \u2014 "),OI=n(nwe,"A",{href:!0});var sHr=s(OI);L1o=r(sHr,"XLMRobertaModel"),sHr.forEach(t),x1o=r(nwe," (XLM-RoBERTa model)"),nwe.forEach(t),$1o=i($),vu=n($,"LI",{});var swe=s(vu);Gne=n(swe,"STRONG",{});var lHr=s(Gne);k1o=r(lHr,"xlm-roberta-xl"),lHr.forEach(t),S1o=r(swe," \u2014 "),VI=n(swe,"A",{href:!0});var iHr=s(VI);R1o=r(iHr,"XLMRobertaXLModel"),iHr.forEach(t),B1o=r(swe," (XLM-RoBERTa-XL model)"),swe.forEach(t),P1o=i($),Fu=n($,"LI",{});var lwe=s(Fu);One=n(lwe,"STRONG",{});var dHr=s(One);I1o=r(dHr,"xlnet"),dHr.forEach(t),q1o=r(lwe," \u2014 "),XI=n(lwe,"A",{href:!0});var cHr=s(XI);N1o=r(cHr,"XLNetModel"),cHr.forEach(t),j1o=r(lwe," (XLNet model)"),lwe.forEach(t),D1o=i($),Tu=n($,"LI",{});var iwe=s(Tu);Vne=n(iwe,"STRONG",{});var fHr=s(Vne);G1o=r(fHr,"yoso"),fHr.forEach(t),O1o=r(iwe," \u2014 "),zI=n(iwe,"A",{href:!0});var mHr=s(zI);V1o=r(mHr,"YosoModel"),mHr.forEach(t),X1o=r(iwe," (YOSO model)"),iwe.forEach(t),$.forEach(t),z1o=i(Yt),Mu=n(Yt,"P",{});var dwe=s(Mu);W1o=r(dwe,"The model is set in evaluation mode by default using "),Xne=n(dwe,"CODE",{});var gHr=s(Xne);Q1o=r(gHr,"model.eval()"),gHr.forEach(t),H1o=r(dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=n(dwe,"CODE",{});var hHr=s(zne);U1o=r(hHr,"model.train()"),hHr.forEach(t),dwe.forEach(t),J1o=i(Yt),T(Eu.$$.fragment,Yt),Yt.forEach(t),Bs.forEach(t),LBe=i(f),Fi=n(f,"H2",{class:!0});var $Ie=s(Fi);Cu=n($Ie,"A",{id:!0,class:!0,href:!0});var pHr=s(Cu);Wne=n(pHr,"SPAN",{});var uHr=s(Wne);T(e0.$$.fragment,uHr),uHr.forEach(t),pHr.forEach(t),Y1o=i($Ie),Qne=n($Ie,"SPAN",{});var _Hr=s(Qne);K1o=r(_Hr,"AutoModelForPreTraining"),_Hr.forEach(t),$Ie.forEach(t),xBe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(o0.$$.fragment,Ps),Z1o=i(Ps),Ti=n(Ps,"P",{});var pY=s(Ti);e2o=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WI=n(pY,"A",{href:!0});var bHr=s(WI);o2o=r(bHr,"from_pretrained()"),bHr.forEach(t),r2o=r(pY," class method or the "),QI=n(pY,"A",{href:!0});var vHr=s(QI);t2o=r(vHr,"from_config()"),vHr.forEach(t),a2o=r(pY,` class
method.`),pY.forEach(t),n2o=i(Ps),r0=n(Ps,"P",{});var kIe=s(r0);s2o=r(kIe,"This class cannot be instantiated directly using "),Hne=n(kIe,"CODE",{});var FHr=s(Hne);l2o=r(FHr,"__init__()"),FHr.forEach(t),i2o=r(kIe," (throws an error)."),kIe.forEach(t),d2o=i(Ps),ot=n(Ps,"DIV",{class:!0});var S3=s(ot);T(t0.$$.fragment,S3),c2o=i(S3),Une=n(S3,"P",{});var THr=s(Une);f2o=r(THr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),THr.forEach(t),m2o=i(S3),Mi=n(S3,"P",{});var uY=s(Mi);g2o=r(uY,`Note:
Loading a model from its configuration file does `),Jne=n(uY,"STRONG",{});var MHr=s(Jne);h2o=r(MHr,"not"),MHr.forEach(t),p2o=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HI=n(uY,"A",{href:!0});var EHr=s(HI);u2o=r(EHr,"from_pretrained()"),EHr.forEach(t),_2o=r(uY," to load the model weights."),uY.forEach(t),b2o=i(S3),T(wu.$$.fragment,S3),S3.forEach(t),v2o=i(Ps),Ue=n(Ps,"DIV",{class:!0});var Kt=s(Ue);T(a0.$$.fragment,Kt),F2o=i(Kt),Yne=n(Kt,"P",{});var CHr=s(Yne);T2o=r(CHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CHr.forEach(t),M2o=i(Kt),wa=n(Kt,"P",{});var R3=s(wa);E2o=r(R3,"The model class to instantiate is selected based on the "),Kne=n(R3,"CODE",{});var wHr=s(Kne);C2o=r(wHr,"model_type"),wHr.forEach(t),w2o=r(R3,` property of the config object (either
passed as an argument or loaded from `),Zne=n(R3,"CODE",{});var AHr=s(Zne);A2o=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),y2o=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ese=n(R3,"CODE",{});var yHr=s(ese);L2o=r(yHr,"pretrained_model_name_or_path"),yHr.forEach(t),x2o=r(R3,":"),R3.forEach(t),$2o=i(Kt),G=n(Kt,"UL",{});var V=s(G);Au=n(V,"LI",{});var cwe=s(Au);ose=n(cwe,"STRONG",{});var LHr=s(ose);k2o=r(LHr,"albert"),LHr.forEach(t),S2o=r(cwe," \u2014 "),UI=n(cwe,"A",{href:!0});var xHr=s(UI);R2o=r(xHr,"AlbertForPreTraining"),xHr.forEach(t),B2o=r(cwe," (ALBERT model)"),cwe.forEach(t),P2o=i(V),yu=n(V,"LI",{});var fwe=s(yu);rse=n(fwe,"STRONG",{});var $Hr=s(rse);I2o=r($Hr,"bart"),$Hr.forEach(t),q2o=r(fwe," \u2014 "),JI=n(fwe,"A",{href:!0});var kHr=s(JI);N2o=r(kHr,"BartForConditionalGeneration"),kHr.forEach(t),j2o=r(fwe," (BART model)"),fwe.forEach(t),D2o=i(V),Lu=n(V,"LI",{});var mwe=s(Lu);tse=n(mwe,"STRONG",{});var SHr=s(tse);G2o=r(SHr,"bert"),SHr.forEach(t),O2o=r(mwe," \u2014 "),YI=n(mwe,"A",{href:!0});var RHr=s(YI);V2o=r(RHr,"BertForPreTraining"),RHr.forEach(t),X2o=r(mwe," (BERT model)"),mwe.forEach(t),z2o=i(V),xu=n(V,"LI",{});var gwe=s(xu);ase=n(gwe,"STRONG",{});var BHr=s(ase);W2o=r(BHr,"big_bird"),BHr.forEach(t),Q2o=r(gwe," \u2014 "),KI=n(gwe,"A",{href:!0});var PHr=s(KI);H2o=r(PHr,"BigBirdForPreTraining"),PHr.forEach(t),U2o=r(gwe," (BigBird model)"),gwe.forEach(t),J2o=i(V),$u=n(V,"LI",{});var hwe=s($u);nse=n(hwe,"STRONG",{});var IHr=s(nse);Y2o=r(IHr,"camembert"),IHr.forEach(t),K2o=r(hwe," \u2014 "),ZI=n(hwe,"A",{href:!0});var qHr=s(ZI);Z2o=r(qHr,"CamembertForMaskedLM"),qHr.forEach(t),ebo=r(hwe," (CamemBERT model)"),hwe.forEach(t),obo=i(V),ku=n(V,"LI",{});var pwe=s(ku);sse=n(pwe,"STRONG",{});var NHr=s(sse);rbo=r(NHr,"ctrl"),NHr.forEach(t),tbo=r(pwe," \u2014 "),eq=n(pwe,"A",{href:!0});var jHr=s(eq);abo=r(jHr,"CTRLLMHeadModel"),jHr.forEach(t),nbo=r(pwe," (CTRL model)"),pwe.forEach(t),sbo=i(V),Su=n(V,"LI",{});var uwe=s(Su);lse=n(uwe,"STRONG",{});var DHr=s(lse);lbo=r(DHr,"data2vec-text"),DHr.forEach(t),ibo=r(uwe," \u2014 "),oq=n(uwe,"A",{href:!0});var GHr=s(oq);dbo=r(GHr,"Data2VecTextForMaskedLM"),GHr.forEach(t),cbo=r(uwe," (Data2VecText model)"),uwe.forEach(t),fbo=i(V),Ru=n(V,"LI",{});var _we=s(Ru);ise=n(_we,"STRONG",{});var OHr=s(ise);mbo=r(OHr,"deberta"),OHr.forEach(t),gbo=r(_we," \u2014 "),rq=n(_we,"A",{href:!0});var VHr=s(rq);hbo=r(VHr,"DebertaForMaskedLM"),VHr.forEach(t),pbo=r(_we," (DeBERTa model)"),_we.forEach(t),ubo=i(V),Bu=n(V,"LI",{});var bwe=s(Bu);dse=n(bwe,"STRONG",{});var XHr=s(dse);_bo=r(XHr,"deberta-v2"),XHr.forEach(t),bbo=r(bwe," \u2014 "),tq=n(bwe,"A",{href:!0});var zHr=s(tq);vbo=r(zHr,"DebertaV2ForMaskedLM"),zHr.forEach(t),Fbo=r(bwe," (DeBERTa-v2 model)"),bwe.forEach(t),Tbo=i(V),Pu=n(V,"LI",{});var vwe=s(Pu);cse=n(vwe,"STRONG",{});var WHr=s(cse);Mbo=r(WHr,"distilbert"),WHr.forEach(t),Ebo=r(vwe," \u2014 "),aq=n(vwe,"A",{href:!0});var QHr=s(aq);Cbo=r(QHr,"DistilBertForMaskedLM"),QHr.forEach(t),wbo=r(vwe," (DistilBERT model)"),vwe.forEach(t),Abo=i(V),Iu=n(V,"LI",{});var Fwe=s(Iu);fse=n(Fwe,"STRONG",{});var HHr=s(fse);ybo=r(HHr,"electra"),HHr.forEach(t),Lbo=r(Fwe," \u2014 "),nq=n(Fwe,"A",{href:!0});var UHr=s(nq);xbo=r(UHr,"ElectraForPreTraining"),UHr.forEach(t),$bo=r(Fwe," (ELECTRA model)"),Fwe.forEach(t),kbo=i(V),qu=n(V,"LI",{});var Twe=s(qu);mse=n(Twe,"STRONG",{});var JHr=s(mse);Sbo=r(JHr,"flaubert"),JHr.forEach(t),Rbo=r(Twe," \u2014 "),sq=n(Twe,"A",{href:!0});var YHr=s(sq);Bbo=r(YHr,"FlaubertWithLMHeadModel"),YHr.forEach(t),Pbo=r(Twe," (FlauBERT model)"),Twe.forEach(t),Ibo=i(V),Nu=n(V,"LI",{});var Mwe=s(Nu);gse=n(Mwe,"STRONG",{});var KHr=s(gse);qbo=r(KHr,"fnet"),KHr.forEach(t),Nbo=r(Mwe," \u2014 "),lq=n(Mwe,"A",{href:!0});var ZHr=s(lq);jbo=r(ZHr,"FNetForPreTraining"),ZHr.forEach(t),Dbo=r(Mwe," (FNet model)"),Mwe.forEach(t),Gbo=i(V),ju=n(V,"LI",{});var Ewe=s(ju);hse=n(Ewe,"STRONG",{});var eUr=s(hse);Obo=r(eUr,"fsmt"),eUr.forEach(t),Vbo=r(Ewe," \u2014 "),iq=n(Ewe,"A",{href:!0});var oUr=s(iq);Xbo=r(oUr,"FSMTForConditionalGeneration"),oUr.forEach(t),zbo=r(Ewe," (FairSeq Machine-Translation model)"),Ewe.forEach(t),Wbo=i(V),Du=n(V,"LI",{});var Cwe=s(Du);pse=n(Cwe,"STRONG",{});var rUr=s(pse);Qbo=r(rUr,"funnel"),rUr.forEach(t),Hbo=r(Cwe," \u2014 "),dq=n(Cwe,"A",{href:!0});var tUr=s(dq);Ubo=r(tUr,"FunnelForPreTraining"),tUr.forEach(t),Jbo=r(Cwe," (Funnel Transformer model)"),Cwe.forEach(t),Ybo=i(V),Gu=n(V,"LI",{});var wwe=s(Gu);use=n(wwe,"STRONG",{});var aUr=s(use);Kbo=r(aUr,"gpt2"),aUr.forEach(t),Zbo=r(wwe," \u2014 "),cq=n(wwe,"A",{href:!0});var nUr=s(cq);evo=r(nUr,"GPT2LMHeadModel"),nUr.forEach(t),ovo=r(wwe," (OpenAI GPT-2 model)"),wwe.forEach(t),rvo=i(V),Ou=n(V,"LI",{});var Awe=s(Ou);_se=n(Awe,"STRONG",{});var sUr=s(_se);tvo=r(sUr,"ibert"),sUr.forEach(t),avo=r(Awe," \u2014 "),fq=n(Awe,"A",{href:!0});var lUr=s(fq);nvo=r(lUr,"IBertForMaskedLM"),lUr.forEach(t),svo=r(Awe," (I-BERT model)"),Awe.forEach(t),lvo=i(V),Vu=n(V,"LI",{});var ywe=s(Vu);bse=n(ywe,"STRONG",{});var iUr=s(bse);ivo=r(iUr,"layoutlm"),iUr.forEach(t),dvo=r(ywe," \u2014 "),mq=n(ywe,"A",{href:!0});var dUr=s(mq);cvo=r(dUr,"LayoutLMForMaskedLM"),dUr.forEach(t),fvo=r(ywe," (LayoutLM model)"),ywe.forEach(t),mvo=i(V),Xu=n(V,"LI",{});var Lwe=s(Xu);vse=n(Lwe,"STRONG",{});var cUr=s(vse);gvo=r(cUr,"longformer"),cUr.forEach(t),hvo=r(Lwe," \u2014 "),gq=n(Lwe,"A",{href:!0});var fUr=s(gq);pvo=r(fUr,"LongformerForMaskedLM"),fUr.forEach(t),uvo=r(Lwe," (Longformer model)"),Lwe.forEach(t),_vo=i(V),zu=n(V,"LI",{});var xwe=s(zu);Fse=n(xwe,"STRONG",{});var mUr=s(Fse);bvo=r(mUr,"lxmert"),mUr.forEach(t),vvo=r(xwe," \u2014 "),hq=n(xwe,"A",{href:!0});var gUr=s(hq);Fvo=r(gUr,"LxmertForPreTraining"),gUr.forEach(t),Tvo=r(xwe," (LXMERT model)"),xwe.forEach(t),Mvo=i(V),Wu=n(V,"LI",{});var $we=s(Wu);Tse=n($we,"STRONG",{});var hUr=s(Tse);Evo=r(hUr,"megatron-bert"),hUr.forEach(t),Cvo=r($we," \u2014 "),pq=n($we,"A",{href:!0});var pUr=s(pq);wvo=r(pUr,"MegatronBertForPreTraining"),pUr.forEach(t),Avo=r($we," (MegatronBert model)"),$we.forEach(t),yvo=i(V),Qu=n(V,"LI",{});var kwe=s(Qu);Mse=n(kwe,"STRONG",{});var uUr=s(Mse);Lvo=r(uUr,"mobilebert"),uUr.forEach(t),xvo=r(kwe," \u2014 "),uq=n(kwe,"A",{href:!0});var _Ur=s(uq);$vo=r(_Ur,"MobileBertForPreTraining"),_Ur.forEach(t),kvo=r(kwe," (MobileBERT model)"),kwe.forEach(t),Svo=i(V),Hu=n(V,"LI",{});var Swe=s(Hu);Ese=n(Swe,"STRONG",{});var bUr=s(Ese);Rvo=r(bUr,"mpnet"),bUr.forEach(t),Bvo=r(Swe," \u2014 "),_q=n(Swe,"A",{href:!0});var vUr=s(_q);Pvo=r(vUr,"MPNetForMaskedLM"),vUr.forEach(t),Ivo=r(Swe," (MPNet model)"),Swe.forEach(t),qvo=i(V),Uu=n(V,"LI",{});var Rwe=s(Uu);Cse=n(Rwe,"STRONG",{});var FUr=s(Cse);Nvo=r(FUr,"openai-gpt"),FUr.forEach(t),jvo=r(Rwe," \u2014 "),bq=n(Rwe,"A",{href:!0});var TUr=s(bq);Dvo=r(TUr,"OpenAIGPTLMHeadModel"),TUr.forEach(t),Gvo=r(Rwe," (OpenAI GPT model)"),Rwe.forEach(t),Ovo=i(V),Ju=n(V,"LI",{});var Bwe=s(Ju);wse=n(Bwe,"STRONG",{});var MUr=s(wse);Vvo=r(MUr,"retribert"),MUr.forEach(t),Xvo=r(Bwe," \u2014 "),vq=n(Bwe,"A",{href:!0});var EUr=s(vq);zvo=r(EUr,"RetriBertModel"),EUr.forEach(t),Wvo=r(Bwe," (RetriBERT model)"),Bwe.forEach(t),Qvo=i(V),Yu=n(V,"LI",{});var Pwe=s(Yu);Ase=n(Pwe,"STRONG",{});var CUr=s(Ase);Hvo=r(CUr,"roberta"),CUr.forEach(t),Uvo=r(Pwe," \u2014 "),Fq=n(Pwe,"A",{href:!0});var wUr=s(Fq);Jvo=r(wUr,"RobertaForMaskedLM"),wUr.forEach(t),Yvo=r(Pwe," (RoBERTa model)"),Pwe.forEach(t),Kvo=i(V),Ku=n(V,"LI",{});var Iwe=s(Ku);yse=n(Iwe,"STRONG",{});var AUr=s(yse);Zvo=r(AUr,"squeezebert"),AUr.forEach(t),eFo=r(Iwe," \u2014 "),Tq=n(Iwe,"A",{href:!0});var yUr=s(Tq);oFo=r(yUr,"SqueezeBertForMaskedLM"),yUr.forEach(t),rFo=r(Iwe," (SqueezeBERT model)"),Iwe.forEach(t),tFo=i(V),Zu=n(V,"LI",{});var qwe=s(Zu);Lse=n(qwe,"STRONG",{});var LUr=s(Lse);aFo=r(LUr,"t5"),LUr.forEach(t),nFo=r(qwe," \u2014 "),Mq=n(qwe,"A",{href:!0});var xUr=s(Mq);sFo=r(xUr,"T5ForConditionalGeneration"),xUr.forEach(t),lFo=r(qwe," (T5 model)"),qwe.forEach(t),iFo=i(V),e_=n(V,"LI",{});var Nwe=s(e_);xse=n(Nwe,"STRONG",{});var $Ur=s(xse);dFo=r($Ur,"tapas"),$Ur.forEach(t),cFo=r(Nwe," \u2014 "),Eq=n(Nwe,"A",{href:!0});var kUr=s(Eq);fFo=r(kUr,"TapasForMaskedLM"),kUr.forEach(t),mFo=r(Nwe," (TAPAS model)"),Nwe.forEach(t),gFo=i(V),o_=n(V,"LI",{});var jwe=s(o_);$se=n(jwe,"STRONG",{});var SUr=s($se);hFo=r(SUr,"transfo-xl"),SUr.forEach(t),pFo=r(jwe," \u2014 "),Cq=n(jwe,"A",{href:!0});var RUr=s(Cq);uFo=r(RUr,"TransfoXLLMHeadModel"),RUr.forEach(t),_Fo=r(jwe," (Transformer-XL model)"),jwe.forEach(t),bFo=i(V),r_=n(V,"LI",{});var Dwe=s(r_);kse=n(Dwe,"STRONG",{});var BUr=s(kse);vFo=r(BUr,"unispeech"),BUr.forEach(t),FFo=r(Dwe," \u2014 "),wq=n(Dwe,"A",{href:!0});var PUr=s(wq);TFo=r(PUr,"UniSpeechForPreTraining"),PUr.forEach(t),MFo=r(Dwe," (UniSpeech model)"),Dwe.forEach(t),EFo=i(V),t_=n(V,"LI",{});var Gwe=s(t_);Sse=n(Gwe,"STRONG",{});var IUr=s(Sse);CFo=r(IUr,"unispeech-sat"),IUr.forEach(t),wFo=r(Gwe," \u2014 "),Aq=n(Gwe,"A",{href:!0});var qUr=s(Aq);AFo=r(qUr,"UniSpeechSatForPreTraining"),qUr.forEach(t),yFo=r(Gwe," (UniSpeechSat model)"),Gwe.forEach(t),LFo=i(V),a_=n(V,"LI",{});var Owe=s(a_);Rse=n(Owe,"STRONG",{});var NUr=s(Rse);xFo=r(NUr,"visual_bert"),NUr.forEach(t),$Fo=r(Owe," \u2014 "),yq=n(Owe,"A",{href:!0});var jUr=s(yq);kFo=r(jUr,"VisualBertForPreTraining"),jUr.forEach(t),SFo=r(Owe," (VisualBert model)"),Owe.forEach(t),RFo=i(V),n_=n(V,"LI",{});var Vwe=s(n_);Bse=n(Vwe,"STRONG",{});var DUr=s(Bse);BFo=r(DUr,"vit_mae"),DUr.forEach(t),PFo=r(Vwe," \u2014 "),Lq=n(Vwe,"A",{href:!0});var GUr=s(Lq);IFo=r(GUr,"ViTMAEForPreTraining"),GUr.forEach(t),qFo=r(Vwe," (ViTMAE model)"),Vwe.forEach(t),NFo=i(V),s_=n(V,"LI",{});var Xwe=s(s_);Pse=n(Xwe,"STRONG",{});var OUr=s(Pse);jFo=r(OUr,"wav2vec2"),OUr.forEach(t),DFo=r(Xwe," \u2014 "),xq=n(Xwe,"A",{href:!0});var VUr=s(xq);GFo=r(VUr,"Wav2Vec2ForPreTraining"),VUr.forEach(t),OFo=r(Xwe," (Wav2Vec2 model)"),Xwe.forEach(t),VFo=i(V),l_=n(V,"LI",{});var zwe=s(l_);Ise=n(zwe,"STRONG",{});var XUr=s(Ise);XFo=r(XUr,"wav2vec2-conformer"),XUr.forEach(t),zFo=r(zwe," \u2014 "),$q=n(zwe,"A",{href:!0});var zUr=s($q);WFo=r(zUr,"Wav2Vec2ConformerForPreTraining"),zUr.forEach(t),QFo=r(zwe," (Wav2Vec2ConformerConformer model)"),zwe.forEach(t),HFo=i(V),i_=n(V,"LI",{});var Wwe=s(i_);qse=n(Wwe,"STRONG",{});var WUr=s(qse);UFo=r(WUr,"xlm"),WUr.forEach(t),JFo=r(Wwe," \u2014 "),kq=n(Wwe,"A",{href:!0});var QUr=s(kq);YFo=r(QUr,"XLMWithLMHeadModel"),QUr.forEach(t),KFo=r(Wwe," (XLM model)"),Wwe.forEach(t),ZFo=i(V),d_=n(V,"LI",{});var Qwe=s(d_);Nse=n(Qwe,"STRONG",{});var HUr=s(Nse);e6o=r(HUr,"xlm-roberta"),HUr.forEach(t),o6o=r(Qwe," \u2014 "),Sq=n(Qwe,"A",{href:!0});var UUr=s(Sq);r6o=r(UUr,"XLMRobertaForMaskedLM"),UUr.forEach(t),t6o=r(Qwe," (XLM-RoBERTa model)"),Qwe.forEach(t),a6o=i(V),c_=n(V,"LI",{});var Hwe=s(c_);jse=n(Hwe,"STRONG",{});var JUr=s(jse);n6o=r(JUr,"xlm-roberta-xl"),JUr.forEach(t),s6o=r(Hwe," \u2014 "),Rq=n(Hwe,"A",{href:!0});var YUr=s(Rq);l6o=r(YUr,"XLMRobertaXLForMaskedLM"),YUr.forEach(t),i6o=r(Hwe," (XLM-RoBERTa-XL model)"),Hwe.forEach(t),d6o=i(V),f_=n(V,"LI",{});var Uwe=s(f_);Dse=n(Uwe,"STRONG",{});var KUr=s(Dse);c6o=r(KUr,"xlnet"),KUr.forEach(t),f6o=r(Uwe," \u2014 "),Bq=n(Uwe,"A",{href:!0});var ZUr=s(Bq);m6o=r(ZUr,"XLNetLMHeadModel"),ZUr.forEach(t),g6o=r(Uwe," (XLNet model)"),Uwe.forEach(t),V.forEach(t),h6o=i(Kt),m_=n(Kt,"P",{});var Jwe=s(m_);p6o=r(Jwe,"The model is set in evaluation mode by default using "),Gse=n(Jwe,"CODE",{});var eJr=s(Gse);u6o=r(eJr,"model.eval()"),eJr.forEach(t),_6o=r(Jwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ose=n(Jwe,"CODE",{});var oJr=s(Ose);b6o=r(oJr,"model.train()"),oJr.forEach(t),Jwe.forEach(t),v6o=i(Kt),T(g_.$$.fragment,Kt),Kt.forEach(t),Ps.forEach(t),$Be=i(f),Ei=n(f,"H2",{class:!0});var SIe=s(Ei);h_=n(SIe,"A",{id:!0,class:!0,href:!0});var rJr=s(h_);Vse=n(rJr,"SPAN",{});var tJr=s(Vse);T(n0.$$.fragment,tJr),tJr.forEach(t),rJr.forEach(t),F6o=i(SIe),Xse=n(SIe,"SPAN",{});var aJr=s(Xse);T6o=r(aJr,"AutoModelForCausalLM"),aJr.forEach(t),SIe.forEach(t),kBe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(s0.$$.fragment,Is),M6o=i(Is),Ci=n(Is,"P",{});var _Y=s(Ci);E6o=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pq=n(_Y,"A",{href:!0});var nJr=s(Pq);C6o=r(nJr,"from_pretrained()"),nJr.forEach(t),w6o=r(_Y," class method or the "),Iq=n(_Y,"A",{href:!0});var sJr=s(Iq);A6o=r(sJr,"from_config()"),sJr.forEach(t),y6o=r(_Y,` class
method.`),_Y.forEach(t),L6o=i(Is),l0=n(Is,"P",{});var RIe=s(l0);x6o=r(RIe,"This class cannot be instantiated directly using "),zse=n(RIe,"CODE",{});var lJr=s(zse);$6o=r(lJr,"__init__()"),lJr.forEach(t),k6o=r(RIe," (throws an error)."),RIe.forEach(t),S6o=i(Is),rt=n(Is,"DIV",{class:!0});var B3=s(rt);T(i0.$$.fragment,B3),R6o=i(B3),Wse=n(B3,"P",{});var iJr=s(Wse);B6o=r(iJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iJr.forEach(t),P6o=i(B3),wi=n(B3,"P",{});var bY=s(wi);I6o=r(bY,`Note:
Loading a model from its configuration file does `),Qse=n(bY,"STRONG",{});var dJr=s(Qse);q6o=r(dJr,"not"),dJr.forEach(t),N6o=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qq=n(bY,"A",{href:!0});var cJr=s(qq);j6o=r(cJr,"from_pretrained()"),cJr.forEach(t),D6o=r(bY," to load the model weights."),bY.forEach(t),G6o=i(B3),T(p_.$$.fragment,B3),B3.forEach(t),O6o=i(Is),Je=n(Is,"DIV",{class:!0});var Zt=s(Je);T(d0.$$.fragment,Zt),V6o=i(Zt),Hse=n(Zt,"P",{});var fJr=s(Hse);X6o=r(fJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fJr.forEach(t),z6o=i(Zt),Aa=n(Zt,"P",{});var P3=s(Aa);W6o=r(P3,"The model class to instantiate is selected based on the "),Use=n(P3,"CODE",{});var mJr=s(Use);Q6o=r(mJr,"model_type"),mJr.forEach(t),H6o=r(P3,` property of the config object (either
passed as an argument or loaded from `),Jse=n(P3,"CODE",{});var gJr=s(Jse);U6o=r(gJr,"pretrained_model_name_or_path"),gJr.forEach(t),J6o=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=n(P3,"CODE",{});var hJr=s(Yse);Y6o=r(hJr,"pretrained_model_name_or_path"),hJr.forEach(t),K6o=r(P3,":"),P3.forEach(t),Z6o=i(Zt),z=n(Zt,"UL",{});var Q=s(z);u_=n(Q,"LI",{});var Ywe=s(u_);Kse=n(Ywe,"STRONG",{});var pJr=s(Kse);eTo=r(pJr,"bart"),pJr.forEach(t),oTo=r(Ywe," \u2014 "),Nq=n(Ywe,"A",{href:!0});var uJr=s(Nq);rTo=r(uJr,"BartForCausalLM"),uJr.forEach(t),tTo=r(Ywe," (BART model)"),Ywe.forEach(t),aTo=i(Q),__=n(Q,"LI",{});var Kwe=s(__);Zse=n(Kwe,"STRONG",{});var _Jr=s(Zse);nTo=r(_Jr,"bert"),_Jr.forEach(t),sTo=r(Kwe," \u2014 "),jq=n(Kwe,"A",{href:!0});var bJr=s(jq);lTo=r(bJr,"BertLMHeadModel"),bJr.forEach(t),iTo=r(Kwe," (BERT model)"),Kwe.forEach(t),dTo=i(Q),b_=n(Q,"LI",{});var Zwe=s(b_);ele=n(Zwe,"STRONG",{});var vJr=s(ele);cTo=r(vJr,"bert-generation"),vJr.forEach(t),fTo=r(Zwe," \u2014 "),Dq=n(Zwe,"A",{href:!0});var FJr=s(Dq);mTo=r(FJr,"BertGenerationDecoder"),FJr.forEach(t),gTo=r(Zwe," (Bert Generation model)"),Zwe.forEach(t),hTo=i(Q),v_=n(Q,"LI",{});var eAe=s(v_);ole=n(eAe,"STRONG",{});var TJr=s(ole);pTo=r(TJr,"big_bird"),TJr.forEach(t),uTo=r(eAe," \u2014 "),Gq=n(eAe,"A",{href:!0});var MJr=s(Gq);_To=r(MJr,"BigBirdForCausalLM"),MJr.forEach(t),bTo=r(eAe," (BigBird model)"),eAe.forEach(t),vTo=i(Q),F_=n(Q,"LI",{});var oAe=s(F_);rle=n(oAe,"STRONG",{});var EJr=s(rle);FTo=r(EJr,"bigbird_pegasus"),EJr.forEach(t),TTo=r(oAe," \u2014 "),Oq=n(oAe,"A",{href:!0});var CJr=s(Oq);MTo=r(CJr,"BigBirdPegasusForCausalLM"),CJr.forEach(t),ETo=r(oAe," (BigBirdPegasus model)"),oAe.forEach(t),CTo=i(Q),T_=n(Q,"LI",{});var rAe=s(T_);tle=n(rAe,"STRONG",{});var wJr=s(tle);wTo=r(wJr,"blenderbot"),wJr.forEach(t),ATo=r(rAe," \u2014 "),Vq=n(rAe,"A",{href:!0});var AJr=s(Vq);yTo=r(AJr,"BlenderbotForCausalLM"),AJr.forEach(t),LTo=r(rAe," (Blenderbot model)"),rAe.forEach(t),xTo=i(Q),M_=n(Q,"LI",{});var tAe=s(M_);ale=n(tAe,"STRONG",{});var yJr=s(ale);$To=r(yJr,"blenderbot-small"),yJr.forEach(t),kTo=r(tAe," \u2014 "),Xq=n(tAe,"A",{href:!0});var LJr=s(Xq);STo=r(LJr,"BlenderbotSmallForCausalLM"),LJr.forEach(t),RTo=r(tAe," (BlenderbotSmall model)"),tAe.forEach(t),BTo=i(Q),E_=n(Q,"LI",{});var aAe=s(E_);nle=n(aAe,"STRONG",{});var xJr=s(nle);PTo=r(xJr,"camembert"),xJr.forEach(t),ITo=r(aAe," \u2014 "),zq=n(aAe,"A",{href:!0});var $Jr=s(zq);qTo=r($Jr,"CamembertForCausalLM"),$Jr.forEach(t),NTo=r(aAe," (CamemBERT model)"),aAe.forEach(t),jTo=i(Q),C_=n(Q,"LI",{});var nAe=s(C_);sle=n(nAe,"STRONG",{});var kJr=s(sle);DTo=r(kJr,"ctrl"),kJr.forEach(t),GTo=r(nAe," \u2014 "),Wq=n(nAe,"A",{href:!0});var SJr=s(Wq);OTo=r(SJr,"CTRLLMHeadModel"),SJr.forEach(t),VTo=r(nAe," (CTRL model)"),nAe.forEach(t),XTo=i(Q),w_=n(Q,"LI",{});var sAe=s(w_);lle=n(sAe,"STRONG",{});var RJr=s(lle);zTo=r(RJr,"data2vec-text"),RJr.forEach(t),WTo=r(sAe," \u2014 "),Qq=n(sAe,"A",{href:!0});var BJr=s(Qq);QTo=r(BJr,"Data2VecTextForCausalLM"),BJr.forEach(t),HTo=r(sAe," (Data2VecText model)"),sAe.forEach(t),UTo=i(Q),A_=n(Q,"LI",{});var lAe=s(A_);ile=n(lAe,"STRONG",{});var PJr=s(ile);JTo=r(PJr,"electra"),PJr.forEach(t),YTo=r(lAe," \u2014 "),Hq=n(lAe,"A",{href:!0});var IJr=s(Hq);KTo=r(IJr,"ElectraForCausalLM"),IJr.forEach(t),ZTo=r(lAe," (ELECTRA model)"),lAe.forEach(t),e8o=i(Q),y_=n(Q,"LI",{});var iAe=s(y_);dle=n(iAe,"STRONG",{});var qJr=s(dle);o8o=r(qJr,"gpt2"),qJr.forEach(t),r8o=r(iAe," \u2014 "),Uq=n(iAe,"A",{href:!0});var NJr=s(Uq);t8o=r(NJr,"GPT2LMHeadModel"),NJr.forEach(t),a8o=r(iAe," (OpenAI GPT-2 model)"),iAe.forEach(t),n8o=i(Q),L_=n(Q,"LI",{});var dAe=s(L_);cle=n(dAe,"STRONG",{});var jJr=s(cle);s8o=r(jJr,"gpt_neo"),jJr.forEach(t),l8o=r(dAe," \u2014 "),Jq=n(dAe,"A",{href:!0});var DJr=s(Jq);i8o=r(DJr,"GPTNeoForCausalLM"),DJr.forEach(t),d8o=r(dAe," (GPT Neo model)"),dAe.forEach(t),c8o=i(Q),x_=n(Q,"LI",{});var cAe=s(x_);fle=n(cAe,"STRONG",{});var GJr=s(fle);f8o=r(GJr,"gptj"),GJr.forEach(t),m8o=r(cAe," \u2014 "),Yq=n(cAe,"A",{href:!0});var OJr=s(Yq);g8o=r(OJr,"GPTJForCausalLM"),OJr.forEach(t),h8o=r(cAe," (GPT-J model)"),cAe.forEach(t),p8o=i(Q),$_=n(Q,"LI",{});var fAe=s($_);mle=n(fAe,"STRONG",{});var VJr=s(mle);u8o=r(VJr,"marian"),VJr.forEach(t),_8o=r(fAe," \u2014 "),Kq=n(fAe,"A",{href:!0});var XJr=s(Kq);b8o=r(XJr,"MarianForCausalLM"),XJr.forEach(t),v8o=r(fAe," (Marian model)"),fAe.forEach(t),F8o=i(Q),k_=n(Q,"LI",{});var mAe=s(k_);gle=n(mAe,"STRONG",{});var zJr=s(gle);T8o=r(zJr,"mbart"),zJr.forEach(t),M8o=r(mAe," \u2014 "),Zq=n(mAe,"A",{href:!0});var WJr=s(Zq);E8o=r(WJr,"MBartForCausalLM"),WJr.forEach(t),C8o=r(mAe," (mBART model)"),mAe.forEach(t),w8o=i(Q),S_=n(Q,"LI",{});var gAe=s(S_);hle=n(gAe,"STRONG",{});var QJr=s(hle);A8o=r(QJr,"megatron-bert"),QJr.forEach(t),y8o=r(gAe," \u2014 "),eN=n(gAe,"A",{href:!0});var HJr=s(eN);L8o=r(HJr,"MegatronBertForCausalLM"),HJr.forEach(t),x8o=r(gAe," (MegatronBert model)"),gAe.forEach(t),$8o=i(Q),R_=n(Q,"LI",{});var hAe=s(R_);ple=n(hAe,"STRONG",{});var UJr=s(ple);k8o=r(UJr,"openai-gpt"),UJr.forEach(t),S8o=r(hAe," \u2014 "),oN=n(hAe,"A",{href:!0});var JJr=s(oN);R8o=r(JJr,"OpenAIGPTLMHeadModel"),JJr.forEach(t),B8o=r(hAe," (OpenAI GPT model)"),hAe.forEach(t),P8o=i(Q),B_=n(Q,"LI",{});var pAe=s(B_);ule=n(pAe,"STRONG",{});var YJr=s(ule);I8o=r(YJr,"pegasus"),YJr.forEach(t),q8o=r(pAe," \u2014 "),rN=n(pAe,"A",{href:!0});var KJr=s(rN);N8o=r(KJr,"PegasusForCausalLM"),KJr.forEach(t),j8o=r(pAe," (Pegasus model)"),pAe.forEach(t),D8o=i(Q),P_=n(Q,"LI",{});var uAe=s(P_);_le=n(uAe,"STRONG",{});var ZJr=s(_le);G8o=r(ZJr,"plbart"),ZJr.forEach(t),O8o=r(uAe," \u2014 "),tN=n(uAe,"A",{href:!0});var eYr=s(tN);V8o=r(eYr,"PLBartForCausalLM"),eYr.forEach(t),X8o=r(uAe," (PLBart model)"),uAe.forEach(t),z8o=i(Q),I_=n(Q,"LI",{});var _Ae=s(I_);ble=n(_Ae,"STRONG",{});var oYr=s(ble);W8o=r(oYr,"prophetnet"),oYr.forEach(t),Q8o=r(_Ae," \u2014 "),aN=n(_Ae,"A",{href:!0});var rYr=s(aN);H8o=r(rYr,"ProphetNetForCausalLM"),rYr.forEach(t),U8o=r(_Ae," (ProphetNet model)"),_Ae.forEach(t),J8o=i(Q),q_=n(Q,"LI",{});var bAe=s(q_);vle=n(bAe,"STRONG",{});var tYr=s(vle);Y8o=r(tYr,"qdqbert"),tYr.forEach(t),K8o=r(bAe," \u2014 "),nN=n(bAe,"A",{href:!0});var aYr=s(nN);Z8o=r(aYr,"QDQBertLMHeadModel"),aYr.forEach(t),eMo=r(bAe," (QDQBert model)"),bAe.forEach(t),oMo=i(Q),N_=n(Q,"LI",{});var vAe=s(N_);Fle=n(vAe,"STRONG",{});var nYr=s(Fle);rMo=r(nYr,"reformer"),nYr.forEach(t),tMo=r(vAe," \u2014 "),sN=n(vAe,"A",{href:!0});var sYr=s(sN);aMo=r(sYr,"ReformerModelWithLMHead"),sYr.forEach(t),nMo=r(vAe," (Reformer model)"),vAe.forEach(t),sMo=i(Q),j_=n(Q,"LI",{});var FAe=s(j_);Tle=n(FAe,"STRONG",{});var lYr=s(Tle);lMo=r(lYr,"rembert"),lYr.forEach(t),iMo=r(FAe," \u2014 "),lN=n(FAe,"A",{href:!0});var iYr=s(lN);dMo=r(iYr,"RemBertForCausalLM"),iYr.forEach(t),cMo=r(FAe," (RemBERT model)"),FAe.forEach(t),fMo=i(Q),D_=n(Q,"LI",{});var TAe=s(D_);Mle=n(TAe,"STRONG",{});var dYr=s(Mle);mMo=r(dYr,"roberta"),dYr.forEach(t),gMo=r(TAe," \u2014 "),iN=n(TAe,"A",{href:!0});var cYr=s(iN);hMo=r(cYr,"RobertaForCausalLM"),cYr.forEach(t),pMo=r(TAe," (RoBERTa model)"),TAe.forEach(t),uMo=i(Q),G_=n(Q,"LI",{});var MAe=s(G_);Ele=n(MAe,"STRONG",{});var fYr=s(Ele);_Mo=r(fYr,"roformer"),fYr.forEach(t),bMo=r(MAe," \u2014 "),dN=n(MAe,"A",{href:!0});var mYr=s(dN);vMo=r(mYr,"RoFormerForCausalLM"),mYr.forEach(t),FMo=r(MAe," (RoFormer model)"),MAe.forEach(t),TMo=i(Q),O_=n(Q,"LI",{});var EAe=s(O_);Cle=n(EAe,"STRONG",{});var gYr=s(Cle);MMo=r(gYr,"speech_to_text_2"),gYr.forEach(t),EMo=r(EAe," \u2014 "),cN=n(EAe,"A",{href:!0});var hYr=s(cN);CMo=r(hYr,"Speech2Text2ForCausalLM"),hYr.forEach(t),wMo=r(EAe," (Speech2Text2 model)"),EAe.forEach(t),AMo=i(Q),V_=n(Q,"LI",{});var CAe=s(V_);wle=n(CAe,"STRONG",{});var pYr=s(wle);yMo=r(pYr,"transfo-xl"),pYr.forEach(t),LMo=r(CAe," \u2014 "),fN=n(CAe,"A",{href:!0});var uYr=s(fN);xMo=r(uYr,"TransfoXLLMHeadModel"),uYr.forEach(t),$Mo=r(CAe," (Transformer-XL model)"),CAe.forEach(t),kMo=i(Q),X_=n(Q,"LI",{});var wAe=s(X_);Ale=n(wAe,"STRONG",{});var _Yr=s(Ale);SMo=r(_Yr,"trocr"),_Yr.forEach(t),RMo=r(wAe," \u2014 "),mN=n(wAe,"A",{href:!0});var bYr=s(mN);BMo=r(bYr,"TrOCRForCausalLM"),bYr.forEach(t),PMo=r(wAe," (TrOCR model)"),wAe.forEach(t),IMo=i(Q),z_=n(Q,"LI",{});var AAe=s(z_);yle=n(AAe,"STRONG",{});var vYr=s(yle);qMo=r(vYr,"xglm"),vYr.forEach(t),NMo=r(AAe," \u2014 "),gN=n(AAe,"A",{href:!0});var FYr=s(gN);jMo=r(FYr,"XGLMForCausalLM"),FYr.forEach(t),DMo=r(AAe," (XGLM model)"),AAe.forEach(t),GMo=i(Q),W_=n(Q,"LI",{});var yAe=s(W_);Lle=n(yAe,"STRONG",{});var TYr=s(Lle);OMo=r(TYr,"xlm"),TYr.forEach(t),VMo=r(yAe," \u2014 "),hN=n(yAe,"A",{href:!0});var MYr=s(hN);XMo=r(MYr,"XLMWithLMHeadModel"),MYr.forEach(t),zMo=r(yAe," (XLM model)"),yAe.forEach(t),WMo=i(Q),Q_=n(Q,"LI",{});var LAe=s(Q_);xle=n(LAe,"STRONG",{});var EYr=s(xle);QMo=r(EYr,"xlm-prophetnet"),EYr.forEach(t),HMo=r(LAe," \u2014 "),pN=n(LAe,"A",{href:!0});var CYr=s(pN);UMo=r(CYr,"XLMProphetNetForCausalLM"),CYr.forEach(t),JMo=r(LAe," (XLMProphetNet model)"),LAe.forEach(t),YMo=i(Q),H_=n(Q,"LI",{});var xAe=s(H_);$le=n(xAe,"STRONG",{});var wYr=s($le);KMo=r(wYr,"xlm-roberta"),wYr.forEach(t),ZMo=r(xAe," \u2014 "),uN=n(xAe,"A",{href:!0});var AYr=s(uN);e4o=r(AYr,"XLMRobertaForCausalLM"),AYr.forEach(t),o4o=r(xAe," (XLM-RoBERTa model)"),xAe.forEach(t),r4o=i(Q),U_=n(Q,"LI",{});var $Ae=s(U_);kle=n($Ae,"STRONG",{});var yYr=s(kle);t4o=r(yYr,"xlm-roberta-xl"),yYr.forEach(t),a4o=r($Ae," \u2014 "),_N=n($Ae,"A",{href:!0});var LYr=s(_N);n4o=r(LYr,"XLMRobertaXLForCausalLM"),LYr.forEach(t),s4o=r($Ae," (XLM-RoBERTa-XL model)"),$Ae.forEach(t),l4o=i(Q),J_=n(Q,"LI",{});var kAe=s(J_);Sle=n(kAe,"STRONG",{});var xYr=s(Sle);i4o=r(xYr,"xlnet"),xYr.forEach(t),d4o=r(kAe," \u2014 "),bN=n(kAe,"A",{href:!0});var $Yr=s(bN);c4o=r($Yr,"XLNetLMHeadModel"),$Yr.forEach(t),f4o=r(kAe," (XLNet model)"),kAe.forEach(t),Q.forEach(t),m4o=i(Zt),Y_=n(Zt,"P",{});var SAe=s(Y_);g4o=r(SAe,"The model is set in evaluation mode by default using "),Rle=n(SAe,"CODE",{});var kYr=s(Rle);h4o=r(kYr,"model.eval()"),kYr.forEach(t),p4o=r(SAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=n(SAe,"CODE",{});var SYr=s(Ble);u4o=r(SYr,"model.train()"),SYr.forEach(t),SAe.forEach(t),_4o=i(Zt),T(K_.$$.fragment,Zt),Zt.forEach(t),Is.forEach(t),SBe=i(f),Ai=n(f,"H2",{class:!0});var BIe=s(Ai);Z_=n(BIe,"A",{id:!0,class:!0,href:!0});var RYr=s(Z_);Ple=n(RYr,"SPAN",{});var BYr=s(Ple);T(c0.$$.fragment,BYr),BYr.forEach(t),RYr.forEach(t),b4o=i(BIe),Ile=n(BIe,"SPAN",{});var PYr=s(Ile);v4o=r(PYr,"AutoModelForMaskedLM"),PYr.forEach(t),BIe.forEach(t),RBe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(f0.$$.fragment,qs),F4o=i(qs),yi=n(qs,"P",{});var vY=s(yi);T4o=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vN=n(vY,"A",{href:!0});var IYr=s(vN);M4o=r(IYr,"from_pretrained()"),IYr.forEach(t),E4o=r(vY," class method or the "),FN=n(vY,"A",{href:!0});var qYr=s(FN);C4o=r(qYr,"from_config()"),qYr.forEach(t),w4o=r(vY,` class
method.`),vY.forEach(t),A4o=i(qs),m0=n(qs,"P",{});var PIe=s(m0);y4o=r(PIe,"This class cannot be instantiated directly using "),qle=n(PIe,"CODE",{});var NYr=s(qle);L4o=r(NYr,"__init__()"),NYr.forEach(t),x4o=r(PIe," (throws an error)."),PIe.forEach(t),$4o=i(qs),tt=n(qs,"DIV",{class:!0});var I3=s(tt);T(g0.$$.fragment,I3),k4o=i(I3),Nle=n(I3,"P",{});var jYr=s(Nle);S4o=r(jYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jYr.forEach(t),R4o=i(I3),Li=n(I3,"P",{});var FY=s(Li);B4o=r(FY,`Note:
Loading a model from its configuration file does `),jle=n(FY,"STRONG",{});var DYr=s(jle);P4o=r(DYr,"not"),DYr.forEach(t),I4o=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=n(FY,"A",{href:!0});var GYr=s(TN);q4o=r(GYr,"from_pretrained()"),GYr.forEach(t),N4o=r(FY," to load the model weights."),FY.forEach(t),j4o=i(I3),T(e1.$$.fragment,I3),I3.forEach(t),D4o=i(qs),Ye=n(qs,"DIV",{class:!0});var ea=s(Ye);T(h0.$$.fragment,ea),G4o=i(ea),Dle=n(ea,"P",{});var OYr=s(Dle);O4o=r(OYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),OYr.forEach(t),V4o=i(ea),ya=n(ea,"P",{});var q3=s(ya);X4o=r(q3,"The model class to instantiate is selected based on the "),Gle=n(q3,"CODE",{});var VYr=s(Gle);z4o=r(VYr,"model_type"),VYr.forEach(t),W4o=r(q3,` property of the config object (either
passed as an argument or loaded from `),Ole=n(q3,"CODE",{});var XYr=s(Ole);Q4o=r(XYr,"pretrained_model_name_or_path"),XYr.forEach(t),H4o=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vle=n(q3,"CODE",{});var zYr=s(Vle);U4o=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),J4o=r(q3,":"),q3.forEach(t),Y4o=i(ea),W=n(ea,"UL",{});var H=s(W);o1=n(H,"LI",{});var RAe=s(o1);Xle=n(RAe,"STRONG",{});var WYr=s(Xle);K4o=r(WYr,"albert"),WYr.forEach(t),Z4o=r(RAe," \u2014 "),MN=n(RAe,"A",{href:!0});var QYr=s(MN);eEo=r(QYr,"AlbertForMaskedLM"),QYr.forEach(t),oEo=r(RAe," (ALBERT model)"),RAe.forEach(t),rEo=i(H),r1=n(H,"LI",{});var BAe=s(r1);zle=n(BAe,"STRONG",{});var HYr=s(zle);tEo=r(HYr,"bart"),HYr.forEach(t),aEo=r(BAe," \u2014 "),EN=n(BAe,"A",{href:!0});var UYr=s(EN);nEo=r(UYr,"BartForConditionalGeneration"),UYr.forEach(t),sEo=r(BAe," (BART model)"),BAe.forEach(t),lEo=i(H),t1=n(H,"LI",{});var PAe=s(t1);Wle=n(PAe,"STRONG",{});var JYr=s(Wle);iEo=r(JYr,"bert"),JYr.forEach(t),dEo=r(PAe," \u2014 "),CN=n(PAe,"A",{href:!0});var YYr=s(CN);cEo=r(YYr,"BertForMaskedLM"),YYr.forEach(t),fEo=r(PAe," (BERT model)"),PAe.forEach(t),mEo=i(H),a1=n(H,"LI",{});var IAe=s(a1);Qle=n(IAe,"STRONG",{});var KYr=s(Qle);gEo=r(KYr,"big_bird"),KYr.forEach(t),hEo=r(IAe," \u2014 "),wN=n(IAe,"A",{href:!0});var ZYr=s(wN);pEo=r(ZYr,"BigBirdForMaskedLM"),ZYr.forEach(t),uEo=r(IAe," (BigBird model)"),IAe.forEach(t),_Eo=i(H),n1=n(H,"LI",{});var qAe=s(n1);Hle=n(qAe,"STRONG",{});var eKr=s(Hle);bEo=r(eKr,"camembert"),eKr.forEach(t),vEo=r(qAe," \u2014 "),AN=n(qAe,"A",{href:!0});var oKr=s(AN);FEo=r(oKr,"CamembertForMaskedLM"),oKr.forEach(t),TEo=r(qAe," (CamemBERT model)"),qAe.forEach(t),MEo=i(H),s1=n(H,"LI",{});var NAe=s(s1);Ule=n(NAe,"STRONG",{});var rKr=s(Ule);EEo=r(rKr,"convbert"),rKr.forEach(t),CEo=r(NAe," \u2014 "),yN=n(NAe,"A",{href:!0});var tKr=s(yN);wEo=r(tKr,"ConvBertForMaskedLM"),tKr.forEach(t),AEo=r(NAe," (ConvBERT model)"),NAe.forEach(t),yEo=i(H),l1=n(H,"LI",{});var jAe=s(l1);Jle=n(jAe,"STRONG",{});var aKr=s(Jle);LEo=r(aKr,"data2vec-text"),aKr.forEach(t),xEo=r(jAe," \u2014 "),LN=n(jAe,"A",{href:!0});var nKr=s(LN);$Eo=r(nKr,"Data2VecTextForMaskedLM"),nKr.forEach(t),kEo=r(jAe," (Data2VecText model)"),jAe.forEach(t),SEo=i(H),i1=n(H,"LI",{});var DAe=s(i1);Yle=n(DAe,"STRONG",{});var sKr=s(Yle);REo=r(sKr,"deberta"),sKr.forEach(t),BEo=r(DAe," \u2014 "),xN=n(DAe,"A",{href:!0});var lKr=s(xN);PEo=r(lKr,"DebertaForMaskedLM"),lKr.forEach(t),IEo=r(DAe," (DeBERTa model)"),DAe.forEach(t),qEo=i(H),d1=n(H,"LI",{});var GAe=s(d1);Kle=n(GAe,"STRONG",{});var iKr=s(Kle);NEo=r(iKr,"deberta-v2"),iKr.forEach(t),jEo=r(GAe," \u2014 "),$N=n(GAe,"A",{href:!0});var dKr=s($N);DEo=r(dKr,"DebertaV2ForMaskedLM"),dKr.forEach(t),GEo=r(GAe," (DeBERTa-v2 model)"),GAe.forEach(t),OEo=i(H),c1=n(H,"LI",{});var OAe=s(c1);Zle=n(OAe,"STRONG",{});var cKr=s(Zle);VEo=r(cKr,"distilbert"),cKr.forEach(t),XEo=r(OAe," \u2014 "),kN=n(OAe,"A",{href:!0});var fKr=s(kN);zEo=r(fKr,"DistilBertForMaskedLM"),fKr.forEach(t),WEo=r(OAe," (DistilBERT model)"),OAe.forEach(t),QEo=i(H),f1=n(H,"LI",{});var VAe=s(f1);eie=n(VAe,"STRONG",{});var mKr=s(eie);HEo=r(mKr,"electra"),mKr.forEach(t),UEo=r(VAe," \u2014 "),SN=n(VAe,"A",{href:!0});var gKr=s(SN);JEo=r(gKr,"ElectraForMaskedLM"),gKr.forEach(t),YEo=r(VAe," (ELECTRA model)"),VAe.forEach(t),KEo=i(H),m1=n(H,"LI",{});var XAe=s(m1);oie=n(XAe,"STRONG",{});var hKr=s(oie);ZEo=r(hKr,"flaubert"),hKr.forEach(t),eCo=r(XAe," \u2014 "),RN=n(XAe,"A",{href:!0});var pKr=s(RN);oCo=r(pKr,"FlaubertWithLMHeadModel"),pKr.forEach(t),rCo=r(XAe," (FlauBERT model)"),XAe.forEach(t),tCo=i(H),g1=n(H,"LI",{});var zAe=s(g1);rie=n(zAe,"STRONG",{});var uKr=s(rie);aCo=r(uKr,"fnet"),uKr.forEach(t),nCo=r(zAe," \u2014 "),BN=n(zAe,"A",{href:!0});var _Kr=s(BN);sCo=r(_Kr,"FNetForMaskedLM"),_Kr.forEach(t),lCo=r(zAe," (FNet model)"),zAe.forEach(t),iCo=i(H),h1=n(H,"LI",{});var WAe=s(h1);tie=n(WAe,"STRONG",{});var bKr=s(tie);dCo=r(bKr,"funnel"),bKr.forEach(t),cCo=r(WAe," \u2014 "),PN=n(WAe,"A",{href:!0});var vKr=s(PN);fCo=r(vKr,"FunnelForMaskedLM"),vKr.forEach(t),mCo=r(WAe," (Funnel Transformer model)"),WAe.forEach(t),gCo=i(H),p1=n(H,"LI",{});var QAe=s(p1);aie=n(QAe,"STRONG",{});var FKr=s(aie);hCo=r(FKr,"ibert"),FKr.forEach(t),pCo=r(QAe," \u2014 "),IN=n(QAe,"A",{href:!0});var TKr=s(IN);uCo=r(TKr,"IBertForMaskedLM"),TKr.forEach(t),_Co=r(QAe," (I-BERT model)"),QAe.forEach(t),bCo=i(H),u1=n(H,"LI",{});var HAe=s(u1);nie=n(HAe,"STRONG",{});var MKr=s(nie);vCo=r(MKr,"layoutlm"),MKr.forEach(t),FCo=r(HAe," \u2014 "),qN=n(HAe,"A",{href:!0});var EKr=s(qN);TCo=r(EKr,"LayoutLMForMaskedLM"),EKr.forEach(t),MCo=r(HAe," (LayoutLM model)"),HAe.forEach(t),ECo=i(H),_1=n(H,"LI",{});var UAe=s(_1);sie=n(UAe,"STRONG",{});var CKr=s(sie);CCo=r(CKr,"longformer"),CKr.forEach(t),wCo=r(UAe," \u2014 "),NN=n(UAe,"A",{href:!0});var wKr=s(NN);ACo=r(wKr,"LongformerForMaskedLM"),wKr.forEach(t),yCo=r(UAe," (Longformer model)"),UAe.forEach(t),LCo=i(H),b1=n(H,"LI",{});var JAe=s(b1);lie=n(JAe,"STRONG",{});var AKr=s(lie);xCo=r(AKr,"mbart"),AKr.forEach(t),$Co=r(JAe," \u2014 "),jN=n(JAe,"A",{href:!0});var yKr=s(jN);kCo=r(yKr,"MBartForConditionalGeneration"),yKr.forEach(t),SCo=r(JAe," (mBART model)"),JAe.forEach(t),RCo=i(H),v1=n(H,"LI",{});var YAe=s(v1);iie=n(YAe,"STRONG",{});var LKr=s(iie);BCo=r(LKr,"megatron-bert"),LKr.forEach(t),PCo=r(YAe," \u2014 "),DN=n(YAe,"A",{href:!0});var xKr=s(DN);ICo=r(xKr,"MegatronBertForMaskedLM"),xKr.forEach(t),qCo=r(YAe," (MegatronBert model)"),YAe.forEach(t),NCo=i(H),F1=n(H,"LI",{});var KAe=s(F1);die=n(KAe,"STRONG",{});var $Kr=s(die);jCo=r($Kr,"mobilebert"),$Kr.forEach(t),DCo=r(KAe," \u2014 "),GN=n(KAe,"A",{href:!0});var kKr=s(GN);GCo=r(kKr,"MobileBertForMaskedLM"),kKr.forEach(t),OCo=r(KAe," (MobileBERT model)"),KAe.forEach(t),VCo=i(H),T1=n(H,"LI",{});var ZAe=s(T1);cie=n(ZAe,"STRONG",{});var SKr=s(cie);XCo=r(SKr,"mpnet"),SKr.forEach(t),zCo=r(ZAe," \u2014 "),ON=n(ZAe,"A",{href:!0});var RKr=s(ON);WCo=r(RKr,"MPNetForMaskedLM"),RKr.forEach(t),QCo=r(ZAe," (MPNet model)"),ZAe.forEach(t),HCo=i(H),M1=n(H,"LI",{});var e0e=s(M1);fie=n(e0e,"STRONG",{});var BKr=s(fie);UCo=r(BKr,"nystromformer"),BKr.forEach(t),JCo=r(e0e," \u2014 "),VN=n(e0e,"A",{href:!0});var PKr=s(VN);YCo=r(PKr,"NystromformerForMaskedLM"),PKr.forEach(t),KCo=r(e0e," (Nystromformer model)"),e0e.forEach(t),ZCo=i(H),E1=n(H,"LI",{});var o0e=s(E1);mie=n(o0e,"STRONG",{});var IKr=s(mie);e5o=r(IKr,"perceiver"),IKr.forEach(t),o5o=r(o0e," \u2014 "),XN=n(o0e,"A",{href:!0});var qKr=s(XN);r5o=r(qKr,"PerceiverForMaskedLM"),qKr.forEach(t),t5o=r(o0e," (Perceiver model)"),o0e.forEach(t),a5o=i(H),C1=n(H,"LI",{});var r0e=s(C1);gie=n(r0e,"STRONG",{});var NKr=s(gie);n5o=r(NKr,"qdqbert"),NKr.forEach(t),s5o=r(r0e," \u2014 "),zN=n(r0e,"A",{href:!0});var jKr=s(zN);l5o=r(jKr,"QDQBertForMaskedLM"),jKr.forEach(t),i5o=r(r0e," (QDQBert model)"),r0e.forEach(t),d5o=i(H),w1=n(H,"LI",{});var t0e=s(w1);hie=n(t0e,"STRONG",{});var DKr=s(hie);c5o=r(DKr,"reformer"),DKr.forEach(t),f5o=r(t0e," \u2014 "),WN=n(t0e,"A",{href:!0});var GKr=s(WN);m5o=r(GKr,"ReformerForMaskedLM"),GKr.forEach(t),g5o=r(t0e," (Reformer model)"),t0e.forEach(t),h5o=i(H),A1=n(H,"LI",{});var a0e=s(A1);pie=n(a0e,"STRONG",{});var OKr=s(pie);p5o=r(OKr,"rembert"),OKr.forEach(t),u5o=r(a0e," \u2014 "),QN=n(a0e,"A",{href:!0});var VKr=s(QN);_5o=r(VKr,"RemBertForMaskedLM"),VKr.forEach(t),b5o=r(a0e," (RemBERT model)"),a0e.forEach(t),v5o=i(H),y1=n(H,"LI",{});var n0e=s(y1);uie=n(n0e,"STRONG",{});var XKr=s(uie);F5o=r(XKr,"roberta"),XKr.forEach(t),T5o=r(n0e," \u2014 "),HN=n(n0e,"A",{href:!0});var zKr=s(HN);M5o=r(zKr,"RobertaForMaskedLM"),zKr.forEach(t),E5o=r(n0e," (RoBERTa model)"),n0e.forEach(t),C5o=i(H),L1=n(H,"LI",{});var s0e=s(L1);_ie=n(s0e,"STRONG",{});var WKr=s(_ie);w5o=r(WKr,"roformer"),WKr.forEach(t),A5o=r(s0e," \u2014 "),UN=n(s0e,"A",{href:!0});var QKr=s(UN);y5o=r(QKr,"RoFormerForMaskedLM"),QKr.forEach(t),L5o=r(s0e," (RoFormer model)"),s0e.forEach(t),x5o=i(H),x1=n(H,"LI",{});var l0e=s(x1);bie=n(l0e,"STRONG",{});var HKr=s(bie);$5o=r(HKr,"squeezebert"),HKr.forEach(t),k5o=r(l0e," \u2014 "),JN=n(l0e,"A",{href:!0});var UKr=s(JN);S5o=r(UKr,"SqueezeBertForMaskedLM"),UKr.forEach(t),R5o=r(l0e," (SqueezeBERT model)"),l0e.forEach(t),B5o=i(H),$1=n(H,"LI",{});var i0e=s($1);vie=n(i0e,"STRONG",{});var JKr=s(vie);P5o=r(JKr,"tapas"),JKr.forEach(t),I5o=r(i0e," \u2014 "),YN=n(i0e,"A",{href:!0});var YKr=s(YN);q5o=r(YKr,"TapasForMaskedLM"),YKr.forEach(t),N5o=r(i0e," (TAPAS model)"),i0e.forEach(t),j5o=i(H),k1=n(H,"LI",{});var d0e=s(k1);Fie=n(d0e,"STRONG",{});var KKr=s(Fie);D5o=r(KKr,"wav2vec2"),KKr.forEach(t),G5o=r(d0e," \u2014 "),Tie=n(d0e,"CODE",{});var ZKr=s(Tie);O5o=r(ZKr,"Wav2Vec2ForMaskedLM"),ZKr.forEach(t),V5o=r(d0e," (Wav2Vec2 model)"),d0e.forEach(t),X5o=i(H),S1=n(H,"LI",{});var c0e=s(S1);Mie=n(c0e,"STRONG",{});var eZr=s(Mie);z5o=r(eZr,"xlm"),eZr.forEach(t),W5o=r(c0e," \u2014 "),KN=n(c0e,"A",{href:!0});var oZr=s(KN);Q5o=r(oZr,"XLMWithLMHeadModel"),oZr.forEach(t),H5o=r(c0e," (XLM model)"),c0e.forEach(t),U5o=i(H),R1=n(H,"LI",{});var f0e=s(R1);Eie=n(f0e,"STRONG",{});var rZr=s(Eie);J5o=r(rZr,"xlm-roberta"),rZr.forEach(t),Y5o=r(f0e," \u2014 "),ZN=n(f0e,"A",{href:!0});var tZr=s(ZN);K5o=r(tZr,"XLMRobertaForMaskedLM"),tZr.forEach(t),Z5o=r(f0e," (XLM-RoBERTa model)"),f0e.forEach(t),e3o=i(H),B1=n(H,"LI",{});var m0e=s(B1);Cie=n(m0e,"STRONG",{});var aZr=s(Cie);o3o=r(aZr,"xlm-roberta-xl"),aZr.forEach(t),r3o=r(m0e," \u2014 "),ej=n(m0e,"A",{href:!0});var nZr=s(ej);t3o=r(nZr,"XLMRobertaXLForMaskedLM"),nZr.forEach(t),a3o=r(m0e," (XLM-RoBERTa-XL model)"),m0e.forEach(t),n3o=i(H),P1=n(H,"LI",{});var g0e=s(P1);wie=n(g0e,"STRONG",{});var sZr=s(wie);s3o=r(sZr,"yoso"),sZr.forEach(t),l3o=r(g0e," \u2014 "),oj=n(g0e,"A",{href:!0});var lZr=s(oj);i3o=r(lZr,"YosoForMaskedLM"),lZr.forEach(t),d3o=r(g0e," (YOSO model)"),g0e.forEach(t),H.forEach(t),c3o=i(ea),I1=n(ea,"P",{});var h0e=s(I1);f3o=r(h0e,"The model is set in evaluation mode by default using "),Aie=n(h0e,"CODE",{});var iZr=s(Aie);m3o=r(iZr,"model.eval()"),iZr.forEach(t),g3o=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=n(h0e,"CODE",{});var dZr=s(yie);h3o=r(dZr,"model.train()"),dZr.forEach(t),h0e.forEach(t),p3o=i(ea),T(q1.$$.fragment,ea),ea.forEach(t),qs.forEach(t),BBe=i(f),xi=n(f,"H2",{class:!0});var IIe=s(xi);N1=n(IIe,"A",{id:!0,class:!0,href:!0});var cZr=s(N1);Lie=n(cZr,"SPAN",{});var fZr=s(Lie);T(p0.$$.fragment,fZr),fZr.forEach(t),cZr.forEach(t),u3o=i(IIe),xie=n(IIe,"SPAN",{});var mZr=s(xie);_3o=r(mZr,"AutoModelForSeq2SeqLM"),mZr.forEach(t),IIe.forEach(t),PBe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(u0.$$.fragment,Ns),b3o=i(Ns),$i=n(Ns,"P",{});var TY=s($i);v3o=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rj=n(TY,"A",{href:!0});var gZr=s(rj);F3o=r(gZr,"from_pretrained()"),gZr.forEach(t),T3o=r(TY," class method or the "),tj=n(TY,"A",{href:!0});var hZr=s(tj);M3o=r(hZr,"from_config()"),hZr.forEach(t),E3o=r(TY,` class
method.`),TY.forEach(t),C3o=i(Ns),_0=n(Ns,"P",{});var qIe=s(_0);w3o=r(qIe,"This class cannot be instantiated directly using "),$ie=n(qIe,"CODE",{});var pZr=s($ie);A3o=r(pZr,"__init__()"),pZr.forEach(t),y3o=r(qIe," (throws an error)."),qIe.forEach(t),L3o=i(Ns),at=n(Ns,"DIV",{class:!0});var N3=s(at);T(b0.$$.fragment,N3),x3o=i(N3),kie=n(N3,"P",{});var uZr=s(kie);$3o=r(uZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uZr.forEach(t),k3o=i(N3),ki=n(N3,"P",{});var MY=s(ki);S3o=r(MY,`Note:
Loading a model from its configuration file does `),Sie=n(MY,"STRONG",{});var _Zr=s(Sie);R3o=r(_Zr,"not"),_Zr.forEach(t),B3o=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=n(MY,"A",{href:!0});var bZr=s(aj);P3o=r(bZr,"from_pretrained()"),bZr.forEach(t),I3o=r(MY," to load the model weights."),MY.forEach(t),q3o=i(N3),T(j1.$$.fragment,N3),N3.forEach(t),N3o=i(Ns),Ke=n(Ns,"DIV",{class:!0});var oa=s(Ke);T(v0.$$.fragment,oa),j3o=i(oa),Rie=n(oa,"P",{});var vZr=s(Rie);D3o=r(vZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vZr.forEach(t),G3o=i(oa),La=n(oa,"P",{});var j3=s(La);O3o=r(j3,"The model class to instantiate is selected based on the "),Bie=n(j3,"CODE",{});var FZr=s(Bie);V3o=r(FZr,"model_type"),FZr.forEach(t),X3o=r(j3,` property of the config object (either
passed as an argument or loaded from `),Pie=n(j3,"CODE",{});var TZr=s(Pie);z3o=r(TZr,"pretrained_model_name_or_path"),TZr.forEach(t),W3o=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=n(j3,"CODE",{});var MZr=s(Iie);Q3o=r(MZr,"pretrained_model_name_or_path"),MZr.forEach(t),H3o=r(j3,":"),j3.forEach(t),U3o=i(oa),he=n(oa,"UL",{});var ue=s(he);D1=n(ue,"LI",{});var p0e=s(D1);qie=n(p0e,"STRONG",{});var EZr=s(qie);J3o=r(EZr,"bart"),EZr.forEach(t),Y3o=r(p0e," \u2014 "),nj=n(p0e,"A",{href:!0});var CZr=s(nj);K3o=r(CZr,"BartForConditionalGeneration"),CZr.forEach(t),Z3o=r(p0e," (BART model)"),p0e.forEach(t),ewo=i(ue),G1=n(ue,"LI",{});var u0e=s(G1);Nie=n(u0e,"STRONG",{});var wZr=s(Nie);owo=r(wZr,"bigbird_pegasus"),wZr.forEach(t),rwo=r(u0e," \u2014 "),sj=n(u0e,"A",{href:!0});var AZr=s(sj);two=r(AZr,"BigBirdPegasusForConditionalGeneration"),AZr.forEach(t),awo=r(u0e," (BigBirdPegasus model)"),u0e.forEach(t),nwo=i(ue),O1=n(ue,"LI",{});var _0e=s(O1);jie=n(_0e,"STRONG",{});var yZr=s(jie);swo=r(yZr,"blenderbot"),yZr.forEach(t),lwo=r(_0e," \u2014 "),lj=n(_0e,"A",{href:!0});var LZr=s(lj);iwo=r(LZr,"BlenderbotForConditionalGeneration"),LZr.forEach(t),dwo=r(_0e," (Blenderbot model)"),_0e.forEach(t),cwo=i(ue),V1=n(ue,"LI",{});var b0e=s(V1);Die=n(b0e,"STRONG",{});var xZr=s(Die);fwo=r(xZr,"blenderbot-small"),xZr.forEach(t),mwo=r(b0e," \u2014 "),ij=n(b0e,"A",{href:!0});var $Zr=s(ij);gwo=r($Zr,"BlenderbotSmallForConditionalGeneration"),$Zr.forEach(t),hwo=r(b0e," (BlenderbotSmall model)"),b0e.forEach(t),pwo=i(ue),X1=n(ue,"LI",{});var v0e=s(X1);Gie=n(v0e,"STRONG",{});var kZr=s(Gie);uwo=r(kZr,"encoder-decoder"),kZr.forEach(t),_wo=r(v0e," \u2014 "),dj=n(v0e,"A",{href:!0});var SZr=s(dj);bwo=r(SZr,"EncoderDecoderModel"),SZr.forEach(t),vwo=r(v0e," (Encoder decoder model)"),v0e.forEach(t),Fwo=i(ue),z1=n(ue,"LI",{});var F0e=s(z1);Oie=n(F0e,"STRONG",{});var RZr=s(Oie);Two=r(RZr,"fsmt"),RZr.forEach(t),Mwo=r(F0e," \u2014 "),cj=n(F0e,"A",{href:!0});var BZr=s(cj);Ewo=r(BZr,"FSMTForConditionalGeneration"),BZr.forEach(t),Cwo=r(F0e," (FairSeq Machine-Translation model)"),F0e.forEach(t),wwo=i(ue),W1=n(ue,"LI",{});var T0e=s(W1);Vie=n(T0e,"STRONG",{});var PZr=s(Vie);Awo=r(PZr,"led"),PZr.forEach(t),ywo=r(T0e," \u2014 "),fj=n(T0e,"A",{href:!0});var IZr=s(fj);Lwo=r(IZr,"LEDForConditionalGeneration"),IZr.forEach(t),xwo=r(T0e," (LED model)"),T0e.forEach(t),$wo=i(ue),Q1=n(ue,"LI",{});var M0e=s(Q1);Xie=n(M0e,"STRONG",{});var qZr=s(Xie);kwo=r(qZr,"m2m_100"),qZr.forEach(t),Swo=r(M0e," \u2014 "),mj=n(M0e,"A",{href:!0});var NZr=s(mj);Rwo=r(NZr,"M2M100ForConditionalGeneration"),NZr.forEach(t),Bwo=r(M0e," (M2M100 model)"),M0e.forEach(t),Pwo=i(ue),H1=n(ue,"LI",{});var E0e=s(H1);zie=n(E0e,"STRONG",{});var jZr=s(zie);Iwo=r(jZr,"marian"),jZr.forEach(t),qwo=r(E0e," \u2014 "),gj=n(E0e,"A",{href:!0});var DZr=s(gj);Nwo=r(DZr,"MarianMTModel"),DZr.forEach(t),jwo=r(E0e," (Marian model)"),E0e.forEach(t),Dwo=i(ue),U1=n(ue,"LI",{});var C0e=s(U1);Wie=n(C0e,"STRONG",{});var GZr=s(Wie);Gwo=r(GZr,"mbart"),GZr.forEach(t),Owo=r(C0e," \u2014 "),hj=n(C0e,"A",{href:!0});var OZr=s(hj);Vwo=r(OZr,"MBartForConditionalGeneration"),OZr.forEach(t),Xwo=r(C0e," (mBART model)"),C0e.forEach(t),zwo=i(ue),J1=n(ue,"LI",{});var w0e=s(J1);Qie=n(w0e,"STRONG",{});var VZr=s(Qie);Wwo=r(VZr,"mt5"),VZr.forEach(t),Qwo=r(w0e," \u2014 "),pj=n(w0e,"A",{href:!0});var XZr=s(pj);Hwo=r(XZr,"MT5ForConditionalGeneration"),XZr.forEach(t),Uwo=r(w0e," (mT5 model)"),w0e.forEach(t),Jwo=i(ue),Y1=n(ue,"LI",{});var A0e=s(Y1);Hie=n(A0e,"STRONG",{});var zZr=s(Hie);Ywo=r(zZr,"pegasus"),zZr.forEach(t),Kwo=r(A0e," \u2014 "),uj=n(A0e,"A",{href:!0});var WZr=s(uj);Zwo=r(WZr,"PegasusForConditionalGeneration"),WZr.forEach(t),eAo=r(A0e," (Pegasus model)"),A0e.forEach(t),oAo=i(ue),K1=n(ue,"LI",{});var y0e=s(K1);Uie=n(y0e,"STRONG",{});var QZr=s(Uie);rAo=r(QZr,"plbart"),QZr.forEach(t),tAo=r(y0e," \u2014 "),_j=n(y0e,"A",{href:!0});var HZr=s(_j);aAo=r(HZr,"PLBartForConditionalGeneration"),HZr.forEach(t),nAo=r(y0e," (PLBart model)"),y0e.forEach(t),sAo=i(ue),Z1=n(ue,"LI",{});var L0e=s(Z1);Jie=n(L0e,"STRONG",{});var UZr=s(Jie);lAo=r(UZr,"prophetnet"),UZr.forEach(t),iAo=r(L0e," \u2014 "),bj=n(L0e,"A",{href:!0});var JZr=s(bj);dAo=r(JZr,"ProphetNetForConditionalGeneration"),JZr.forEach(t),cAo=r(L0e," (ProphetNet model)"),L0e.forEach(t),fAo=i(ue),e2=n(ue,"LI",{});var x0e=s(e2);Yie=n(x0e,"STRONG",{});var YZr=s(Yie);mAo=r(YZr,"t5"),YZr.forEach(t),gAo=r(x0e," \u2014 "),vj=n(x0e,"A",{href:!0});var KZr=s(vj);hAo=r(KZr,"T5ForConditionalGeneration"),KZr.forEach(t),pAo=r(x0e," (T5 model)"),x0e.forEach(t),uAo=i(ue),o2=n(ue,"LI",{});var $0e=s(o2);Kie=n($0e,"STRONG",{});var ZZr=s(Kie);_Ao=r(ZZr,"tapex"),ZZr.forEach(t),bAo=r($0e," \u2014 "),Fj=n($0e,"A",{href:!0});var eet=s(Fj);vAo=r(eet,"BartForConditionalGeneration"),eet.forEach(t),FAo=r($0e," (TAPEX model)"),$0e.forEach(t),TAo=i(ue),r2=n(ue,"LI",{});var k0e=s(r2);Zie=n(k0e,"STRONG",{});var oet=s(Zie);MAo=r(oet,"xlm-prophetnet"),oet.forEach(t),EAo=r(k0e," \u2014 "),Tj=n(k0e,"A",{href:!0});var ret=s(Tj);CAo=r(ret,"XLMProphetNetForConditionalGeneration"),ret.forEach(t),wAo=r(k0e," (XLMProphetNet model)"),k0e.forEach(t),ue.forEach(t),AAo=i(oa),t2=n(oa,"P",{});var S0e=s(t2);yAo=r(S0e,"The model is set in evaluation mode by default using "),ede=n(S0e,"CODE",{});var tet=s(ede);LAo=r(tet,"model.eval()"),tet.forEach(t),xAo=r(S0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=n(S0e,"CODE",{});var aet=s(ode);$Ao=r(aet,"model.train()"),aet.forEach(t),S0e.forEach(t),kAo=i(oa),T(a2.$$.fragment,oa),oa.forEach(t),Ns.forEach(t),IBe=i(f),Si=n(f,"H2",{class:!0});var NIe=s(Si);n2=n(NIe,"A",{id:!0,class:!0,href:!0});var net=s(n2);rde=n(net,"SPAN",{});var set=s(rde);T(F0.$$.fragment,set),set.forEach(t),net.forEach(t),SAo=i(NIe),tde=n(NIe,"SPAN",{});var iet=s(tde);RAo=r(iet,"AutoModelForSequenceClassification"),iet.forEach(t),NIe.forEach(t),qBe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(T0.$$.fragment,js),BAo=i(js),Ri=n(js,"P",{});var EY=s(Ri);PAo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Mj=n(EY,"A",{href:!0});var det=s(Mj);IAo=r(det,"from_pretrained()"),det.forEach(t),qAo=r(EY," class method or the "),Ej=n(EY,"A",{href:!0});var cet=s(Ej);NAo=r(cet,"from_config()"),cet.forEach(t),jAo=r(EY,` class
method.`),EY.forEach(t),DAo=i(js),M0=n(js,"P",{});var jIe=s(M0);GAo=r(jIe,"This class cannot be instantiated directly using "),ade=n(jIe,"CODE",{});var fet=s(ade);OAo=r(fet,"__init__()"),fet.forEach(t),VAo=r(jIe," (throws an error)."),jIe.forEach(t),XAo=i(js),nt=n(js,"DIV",{class:!0});var D3=s(nt);T(E0.$$.fragment,D3),zAo=i(D3),nde=n(D3,"P",{});var met=s(nde);WAo=r(met,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),met.forEach(t),QAo=i(D3),Bi=n(D3,"P",{});var CY=s(Bi);HAo=r(CY,`Note:
Loading a model from its configuration file does `),sde=n(CY,"STRONG",{});var get=s(sde);UAo=r(get,"not"),get.forEach(t),JAo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(CY,"A",{href:!0});var het=s(Cj);YAo=r(het,"from_pretrained()"),het.forEach(t),KAo=r(CY," to load the model weights."),CY.forEach(t),ZAo=i(D3),T(s2.$$.fragment,D3),D3.forEach(t),e0o=i(js),Ze=n(js,"DIV",{class:!0});var ra=s(Ze);T(C0.$$.fragment,ra),o0o=i(ra),lde=n(ra,"P",{});var pet=s(lde);r0o=r(pet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pet.forEach(t),t0o=i(ra),xa=n(ra,"P",{});var G3=s(xa);a0o=r(G3,"The model class to instantiate is selected based on the "),ide=n(G3,"CODE",{});var uet=s(ide);n0o=r(uet,"model_type"),uet.forEach(t),s0o=r(G3,` property of the config object (either
passed as an argument or loaded from `),dde=n(G3,"CODE",{});var _et=s(dde);l0o=r(_et,"pretrained_model_name_or_path"),_et.forEach(t),i0o=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(G3,"CODE",{});var bet=s(cde);d0o=r(bet,"pretrained_model_name_or_path"),bet.forEach(t),c0o=r(G3,":"),G3.forEach(t),f0o=i(ra),q=n(ra,"UL",{});var N=s(q);l2=n(N,"LI",{});var R0e=s(l2);fde=n(R0e,"STRONG",{});var vet=s(fde);m0o=r(vet,"albert"),vet.forEach(t),g0o=r(R0e," \u2014 "),wj=n(R0e,"A",{href:!0});var Fet=s(wj);h0o=r(Fet,"AlbertForSequenceClassification"),Fet.forEach(t),p0o=r(R0e," (ALBERT model)"),R0e.forEach(t),u0o=i(N),i2=n(N,"LI",{});var B0e=s(i2);mde=n(B0e,"STRONG",{});var Tet=s(mde);_0o=r(Tet,"bart"),Tet.forEach(t),b0o=r(B0e," \u2014 "),Aj=n(B0e,"A",{href:!0});var Met=s(Aj);v0o=r(Met,"BartForSequenceClassification"),Met.forEach(t),F0o=r(B0e," (BART model)"),B0e.forEach(t),T0o=i(N),d2=n(N,"LI",{});var P0e=s(d2);gde=n(P0e,"STRONG",{});var Eet=s(gde);M0o=r(Eet,"bert"),Eet.forEach(t),E0o=r(P0e," \u2014 "),yj=n(P0e,"A",{href:!0});var Cet=s(yj);C0o=r(Cet,"BertForSequenceClassification"),Cet.forEach(t),w0o=r(P0e," (BERT model)"),P0e.forEach(t),A0o=i(N),c2=n(N,"LI",{});var I0e=s(c2);hde=n(I0e,"STRONG",{});var wet=s(hde);y0o=r(wet,"big_bird"),wet.forEach(t),L0o=r(I0e," \u2014 "),Lj=n(I0e,"A",{href:!0});var Aet=s(Lj);x0o=r(Aet,"BigBirdForSequenceClassification"),Aet.forEach(t),$0o=r(I0e," (BigBird model)"),I0e.forEach(t),k0o=i(N),f2=n(N,"LI",{});var q0e=s(f2);pde=n(q0e,"STRONG",{});var yet=s(pde);S0o=r(yet,"bigbird_pegasus"),yet.forEach(t),R0o=r(q0e," \u2014 "),xj=n(q0e,"A",{href:!0});var Let=s(xj);B0o=r(Let,"BigBirdPegasusForSequenceClassification"),Let.forEach(t),P0o=r(q0e," (BigBirdPegasus model)"),q0e.forEach(t),I0o=i(N),m2=n(N,"LI",{});var N0e=s(m2);ude=n(N0e,"STRONG",{});var xet=s(ude);q0o=r(xet,"camembert"),xet.forEach(t),N0o=r(N0e," \u2014 "),$j=n(N0e,"A",{href:!0});var $et=s($j);j0o=r($et,"CamembertForSequenceClassification"),$et.forEach(t),D0o=r(N0e," (CamemBERT model)"),N0e.forEach(t),G0o=i(N),g2=n(N,"LI",{});var j0e=s(g2);_de=n(j0e,"STRONG",{});var ket=s(_de);O0o=r(ket,"canine"),ket.forEach(t),V0o=r(j0e," \u2014 "),kj=n(j0e,"A",{href:!0});var Set=s(kj);X0o=r(Set,"CanineForSequenceClassification"),Set.forEach(t),z0o=r(j0e," (Canine model)"),j0e.forEach(t),W0o=i(N),h2=n(N,"LI",{});var D0e=s(h2);bde=n(D0e,"STRONG",{});var Ret=s(bde);Q0o=r(Ret,"convbert"),Ret.forEach(t),H0o=r(D0e," \u2014 "),Sj=n(D0e,"A",{href:!0});var Bet=s(Sj);U0o=r(Bet,"ConvBertForSequenceClassification"),Bet.forEach(t),J0o=r(D0e," (ConvBERT model)"),D0e.forEach(t),Y0o=i(N),p2=n(N,"LI",{});var G0e=s(p2);vde=n(G0e,"STRONG",{});var Pet=s(vde);K0o=r(Pet,"ctrl"),Pet.forEach(t),Z0o=r(G0e," \u2014 "),Rj=n(G0e,"A",{href:!0});var Iet=s(Rj);eyo=r(Iet,"CTRLForSequenceClassification"),Iet.forEach(t),oyo=r(G0e," (CTRL model)"),G0e.forEach(t),ryo=i(N),u2=n(N,"LI",{});var O0e=s(u2);Fde=n(O0e,"STRONG",{});var qet=s(Fde);tyo=r(qet,"data2vec-text"),qet.forEach(t),ayo=r(O0e," \u2014 "),Bj=n(O0e,"A",{href:!0});var Net=s(Bj);nyo=r(Net,"Data2VecTextForSequenceClassification"),Net.forEach(t),syo=r(O0e," (Data2VecText model)"),O0e.forEach(t),lyo=i(N),_2=n(N,"LI",{});var V0e=s(_2);Tde=n(V0e,"STRONG",{});var jet=s(Tde);iyo=r(jet,"deberta"),jet.forEach(t),dyo=r(V0e," \u2014 "),Pj=n(V0e,"A",{href:!0});var Det=s(Pj);cyo=r(Det,"DebertaForSequenceClassification"),Det.forEach(t),fyo=r(V0e," (DeBERTa model)"),V0e.forEach(t),myo=i(N),b2=n(N,"LI",{});var X0e=s(b2);Mde=n(X0e,"STRONG",{});var Get=s(Mde);gyo=r(Get,"deberta-v2"),Get.forEach(t),hyo=r(X0e," \u2014 "),Ij=n(X0e,"A",{href:!0});var Oet=s(Ij);pyo=r(Oet,"DebertaV2ForSequenceClassification"),Oet.forEach(t),uyo=r(X0e," (DeBERTa-v2 model)"),X0e.forEach(t),_yo=i(N),v2=n(N,"LI",{});var z0e=s(v2);Ede=n(z0e,"STRONG",{});var Vet=s(Ede);byo=r(Vet,"distilbert"),Vet.forEach(t),vyo=r(z0e," \u2014 "),qj=n(z0e,"A",{href:!0});var Xet=s(qj);Fyo=r(Xet,"DistilBertForSequenceClassification"),Xet.forEach(t),Tyo=r(z0e," (DistilBERT model)"),z0e.forEach(t),Myo=i(N),F2=n(N,"LI",{});var W0e=s(F2);Cde=n(W0e,"STRONG",{});var zet=s(Cde);Eyo=r(zet,"electra"),zet.forEach(t),Cyo=r(W0e," \u2014 "),Nj=n(W0e,"A",{href:!0});var Wet=s(Nj);wyo=r(Wet,"ElectraForSequenceClassification"),Wet.forEach(t),Ayo=r(W0e," (ELECTRA model)"),W0e.forEach(t),yyo=i(N),T2=n(N,"LI",{});var Q0e=s(T2);wde=n(Q0e,"STRONG",{});var Qet=s(wde);Lyo=r(Qet,"flaubert"),Qet.forEach(t),xyo=r(Q0e," \u2014 "),jj=n(Q0e,"A",{href:!0});var Het=s(jj);$yo=r(Het,"FlaubertForSequenceClassification"),Het.forEach(t),kyo=r(Q0e," (FlauBERT model)"),Q0e.forEach(t),Syo=i(N),M2=n(N,"LI",{});var H0e=s(M2);Ade=n(H0e,"STRONG",{});var Uet=s(Ade);Ryo=r(Uet,"fnet"),Uet.forEach(t),Byo=r(H0e," \u2014 "),Dj=n(H0e,"A",{href:!0});var Jet=s(Dj);Pyo=r(Jet,"FNetForSequenceClassification"),Jet.forEach(t),Iyo=r(H0e," (FNet model)"),H0e.forEach(t),qyo=i(N),E2=n(N,"LI",{});var U0e=s(E2);yde=n(U0e,"STRONG",{});var Yet=s(yde);Nyo=r(Yet,"funnel"),Yet.forEach(t),jyo=r(U0e," \u2014 "),Gj=n(U0e,"A",{href:!0});var Ket=s(Gj);Dyo=r(Ket,"FunnelForSequenceClassification"),Ket.forEach(t),Gyo=r(U0e," (Funnel Transformer model)"),U0e.forEach(t),Oyo=i(N),C2=n(N,"LI",{});var J0e=s(C2);Lde=n(J0e,"STRONG",{});var Zet=s(Lde);Vyo=r(Zet,"gpt2"),Zet.forEach(t),Xyo=r(J0e," \u2014 "),Oj=n(J0e,"A",{href:!0});var eot=s(Oj);zyo=r(eot,"GPT2ForSequenceClassification"),eot.forEach(t),Wyo=r(J0e," (OpenAI GPT-2 model)"),J0e.forEach(t),Qyo=i(N),w2=n(N,"LI",{});var Y0e=s(w2);xde=n(Y0e,"STRONG",{});var oot=s(xde);Hyo=r(oot,"gpt_neo"),oot.forEach(t),Uyo=r(Y0e," \u2014 "),Vj=n(Y0e,"A",{href:!0});var rot=s(Vj);Jyo=r(rot,"GPTNeoForSequenceClassification"),rot.forEach(t),Yyo=r(Y0e," (GPT Neo model)"),Y0e.forEach(t),Kyo=i(N),A2=n(N,"LI",{});var K0e=s(A2);$de=n(K0e,"STRONG",{});var tot=s($de);Zyo=r(tot,"gptj"),tot.forEach(t),eLo=r(K0e," \u2014 "),Xj=n(K0e,"A",{href:!0});var aot=s(Xj);oLo=r(aot,"GPTJForSequenceClassification"),aot.forEach(t),rLo=r(K0e," (GPT-J model)"),K0e.forEach(t),tLo=i(N),y2=n(N,"LI",{});var Z0e=s(y2);kde=n(Z0e,"STRONG",{});var not=s(kde);aLo=r(not,"ibert"),not.forEach(t),nLo=r(Z0e," \u2014 "),zj=n(Z0e,"A",{href:!0});var sot=s(zj);sLo=r(sot,"IBertForSequenceClassification"),sot.forEach(t),lLo=r(Z0e," (I-BERT model)"),Z0e.forEach(t),iLo=i(N),L2=n(N,"LI",{});var eye=s(L2);Sde=n(eye,"STRONG",{});var lot=s(Sde);dLo=r(lot,"layoutlm"),lot.forEach(t),cLo=r(eye," \u2014 "),Wj=n(eye,"A",{href:!0});var iot=s(Wj);fLo=r(iot,"LayoutLMForSequenceClassification"),iot.forEach(t),mLo=r(eye," (LayoutLM model)"),eye.forEach(t),gLo=i(N),x2=n(N,"LI",{});var oye=s(x2);Rde=n(oye,"STRONG",{});var dot=s(Rde);hLo=r(dot,"layoutlmv2"),dot.forEach(t),pLo=r(oye," \u2014 "),Qj=n(oye,"A",{href:!0});var cot=s(Qj);uLo=r(cot,"LayoutLMv2ForSequenceClassification"),cot.forEach(t),_Lo=r(oye," (LayoutLMv2 model)"),oye.forEach(t),bLo=i(N),$2=n(N,"LI",{});var rye=s($2);Bde=n(rye,"STRONG",{});var fot=s(Bde);vLo=r(fot,"led"),fot.forEach(t),FLo=r(rye," \u2014 "),Hj=n(rye,"A",{href:!0});var mot=s(Hj);TLo=r(mot,"LEDForSequenceClassification"),mot.forEach(t),MLo=r(rye," (LED model)"),rye.forEach(t),ELo=i(N),k2=n(N,"LI",{});var tye=s(k2);Pde=n(tye,"STRONG",{});var got=s(Pde);CLo=r(got,"longformer"),got.forEach(t),wLo=r(tye," \u2014 "),Uj=n(tye,"A",{href:!0});var hot=s(Uj);ALo=r(hot,"LongformerForSequenceClassification"),hot.forEach(t),yLo=r(tye," (Longformer model)"),tye.forEach(t),LLo=i(N),S2=n(N,"LI",{});var aye=s(S2);Ide=n(aye,"STRONG",{});var pot=s(Ide);xLo=r(pot,"mbart"),pot.forEach(t),$Lo=r(aye," \u2014 "),Jj=n(aye,"A",{href:!0});var uot=s(Jj);kLo=r(uot,"MBartForSequenceClassification"),uot.forEach(t),SLo=r(aye," (mBART model)"),aye.forEach(t),RLo=i(N),R2=n(N,"LI",{});var nye=s(R2);qde=n(nye,"STRONG",{});var _ot=s(qde);BLo=r(_ot,"megatron-bert"),_ot.forEach(t),PLo=r(nye," \u2014 "),Yj=n(nye,"A",{href:!0});var bot=s(Yj);ILo=r(bot,"MegatronBertForSequenceClassification"),bot.forEach(t),qLo=r(nye," (MegatronBert model)"),nye.forEach(t),NLo=i(N),B2=n(N,"LI",{});var sye=s(B2);Nde=n(sye,"STRONG",{});var vot=s(Nde);jLo=r(vot,"mobilebert"),vot.forEach(t),DLo=r(sye," \u2014 "),Kj=n(sye,"A",{href:!0});var Fot=s(Kj);GLo=r(Fot,"MobileBertForSequenceClassification"),Fot.forEach(t),OLo=r(sye," (MobileBERT model)"),sye.forEach(t),VLo=i(N),P2=n(N,"LI",{});var lye=s(P2);jde=n(lye,"STRONG",{});var Tot=s(jde);XLo=r(Tot,"mpnet"),Tot.forEach(t),zLo=r(lye," \u2014 "),Zj=n(lye,"A",{href:!0});var Mot=s(Zj);WLo=r(Mot,"MPNetForSequenceClassification"),Mot.forEach(t),QLo=r(lye," (MPNet model)"),lye.forEach(t),HLo=i(N),I2=n(N,"LI",{});var iye=s(I2);Dde=n(iye,"STRONG",{});var Eot=s(Dde);ULo=r(Eot,"nystromformer"),Eot.forEach(t),JLo=r(iye," \u2014 "),eD=n(iye,"A",{href:!0});var Cot=s(eD);YLo=r(Cot,"NystromformerForSequenceClassification"),Cot.forEach(t),KLo=r(iye," (Nystromformer model)"),iye.forEach(t),ZLo=i(N),q2=n(N,"LI",{});var dye=s(q2);Gde=n(dye,"STRONG",{});var wot=s(Gde);e7o=r(wot,"openai-gpt"),wot.forEach(t),o7o=r(dye," \u2014 "),oD=n(dye,"A",{href:!0});var Aot=s(oD);r7o=r(Aot,"OpenAIGPTForSequenceClassification"),Aot.forEach(t),t7o=r(dye," (OpenAI GPT model)"),dye.forEach(t),a7o=i(N),N2=n(N,"LI",{});var cye=s(N2);Ode=n(cye,"STRONG",{});var yot=s(Ode);n7o=r(yot,"perceiver"),yot.forEach(t),s7o=r(cye," \u2014 "),rD=n(cye,"A",{href:!0});var Lot=s(rD);l7o=r(Lot,"PerceiverForSequenceClassification"),Lot.forEach(t),i7o=r(cye," (Perceiver model)"),cye.forEach(t),d7o=i(N),j2=n(N,"LI",{});var fye=s(j2);Vde=n(fye,"STRONG",{});var xot=s(Vde);c7o=r(xot,"plbart"),xot.forEach(t),f7o=r(fye," \u2014 "),tD=n(fye,"A",{href:!0});var $ot=s(tD);m7o=r($ot,"PLBartForSequenceClassification"),$ot.forEach(t),g7o=r(fye," (PLBart model)"),fye.forEach(t),h7o=i(N),D2=n(N,"LI",{});var mye=s(D2);Xde=n(mye,"STRONG",{});var kot=s(Xde);p7o=r(kot,"qdqbert"),kot.forEach(t),u7o=r(mye," \u2014 "),aD=n(mye,"A",{href:!0});var Sot=s(aD);_7o=r(Sot,"QDQBertForSequenceClassification"),Sot.forEach(t),b7o=r(mye," (QDQBert model)"),mye.forEach(t),v7o=i(N),G2=n(N,"LI",{});var gye=s(G2);zde=n(gye,"STRONG",{});var Rot=s(zde);F7o=r(Rot,"reformer"),Rot.forEach(t),T7o=r(gye," \u2014 "),nD=n(gye,"A",{href:!0});var Bot=s(nD);M7o=r(Bot,"ReformerForSequenceClassification"),Bot.forEach(t),E7o=r(gye," (Reformer model)"),gye.forEach(t),C7o=i(N),O2=n(N,"LI",{});var hye=s(O2);Wde=n(hye,"STRONG",{});var Pot=s(Wde);w7o=r(Pot,"rembert"),Pot.forEach(t),A7o=r(hye," \u2014 "),sD=n(hye,"A",{href:!0});var Iot=s(sD);y7o=r(Iot,"RemBertForSequenceClassification"),Iot.forEach(t),L7o=r(hye," (RemBERT model)"),hye.forEach(t),x7o=i(N),V2=n(N,"LI",{});var pye=s(V2);Qde=n(pye,"STRONG",{});var qot=s(Qde);$7o=r(qot,"roberta"),qot.forEach(t),k7o=r(pye," \u2014 "),lD=n(pye,"A",{href:!0});var Not=s(lD);S7o=r(Not,"RobertaForSequenceClassification"),Not.forEach(t),R7o=r(pye," (RoBERTa model)"),pye.forEach(t),B7o=i(N),X2=n(N,"LI",{});var uye=s(X2);Hde=n(uye,"STRONG",{});var jot=s(Hde);P7o=r(jot,"roformer"),jot.forEach(t),I7o=r(uye," \u2014 "),iD=n(uye,"A",{href:!0});var Dot=s(iD);q7o=r(Dot,"RoFormerForSequenceClassification"),Dot.forEach(t),N7o=r(uye," (RoFormer model)"),uye.forEach(t),j7o=i(N),z2=n(N,"LI",{});var _ye=s(z2);Ude=n(_ye,"STRONG",{});var Got=s(Ude);D7o=r(Got,"squeezebert"),Got.forEach(t),G7o=r(_ye," \u2014 "),dD=n(_ye,"A",{href:!0});var Oot=s(dD);O7o=r(Oot,"SqueezeBertForSequenceClassification"),Oot.forEach(t),V7o=r(_ye," (SqueezeBERT model)"),_ye.forEach(t),X7o=i(N),W2=n(N,"LI",{});var bye=s(W2);Jde=n(bye,"STRONG",{});var Vot=s(Jde);z7o=r(Vot,"tapas"),Vot.forEach(t),W7o=r(bye," \u2014 "),cD=n(bye,"A",{href:!0});var Xot=s(cD);Q7o=r(Xot,"TapasForSequenceClassification"),Xot.forEach(t),H7o=r(bye," (TAPAS model)"),bye.forEach(t),U7o=i(N),Q2=n(N,"LI",{});var vye=s(Q2);Yde=n(vye,"STRONG",{});var zot=s(Yde);J7o=r(zot,"tapex"),zot.forEach(t),Y7o=r(vye," \u2014 "),fD=n(vye,"A",{href:!0});var Wot=s(fD);K7o=r(Wot,"BartForSequenceClassification"),Wot.forEach(t),Z7o=r(vye," (TAPEX model)"),vye.forEach(t),exo=i(N),H2=n(N,"LI",{});var Fye=s(H2);Kde=n(Fye,"STRONG",{});var Qot=s(Kde);oxo=r(Qot,"transfo-xl"),Qot.forEach(t),rxo=r(Fye," \u2014 "),mD=n(Fye,"A",{href:!0});var Hot=s(mD);txo=r(Hot,"TransfoXLForSequenceClassification"),Hot.forEach(t),axo=r(Fye," (Transformer-XL model)"),Fye.forEach(t),nxo=i(N),U2=n(N,"LI",{});var Tye=s(U2);Zde=n(Tye,"STRONG",{});var Uot=s(Zde);sxo=r(Uot,"xlm"),Uot.forEach(t),lxo=r(Tye," \u2014 "),gD=n(Tye,"A",{href:!0});var Jot=s(gD);ixo=r(Jot,"XLMForSequenceClassification"),Jot.forEach(t),dxo=r(Tye," (XLM model)"),Tye.forEach(t),cxo=i(N),J2=n(N,"LI",{});var Mye=s(J2);ece=n(Mye,"STRONG",{});var Yot=s(ece);fxo=r(Yot,"xlm-roberta"),Yot.forEach(t),mxo=r(Mye," \u2014 "),hD=n(Mye,"A",{href:!0});var Kot=s(hD);gxo=r(Kot,"XLMRobertaForSequenceClassification"),Kot.forEach(t),hxo=r(Mye," (XLM-RoBERTa model)"),Mye.forEach(t),pxo=i(N),Y2=n(N,"LI",{});var Eye=s(Y2);oce=n(Eye,"STRONG",{});var Zot=s(oce);uxo=r(Zot,"xlm-roberta-xl"),Zot.forEach(t),_xo=r(Eye," \u2014 "),pD=n(Eye,"A",{href:!0});var ert=s(pD);bxo=r(ert,"XLMRobertaXLForSequenceClassification"),ert.forEach(t),vxo=r(Eye," (XLM-RoBERTa-XL model)"),Eye.forEach(t),Fxo=i(N),K2=n(N,"LI",{});var Cye=s(K2);rce=n(Cye,"STRONG",{});var ort=s(rce);Txo=r(ort,"xlnet"),ort.forEach(t),Mxo=r(Cye," \u2014 "),uD=n(Cye,"A",{href:!0});var rrt=s(uD);Exo=r(rrt,"XLNetForSequenceClassification"),rrt.forEach(t),Cxo=r(Cye," (XLNet model)"),Cye.forEach(t),wxo=i(N),Z2=n(N,"LI",{});var wye=s(Z2);tce=n(wye,"STRONG",{});var trt=s(tce);Axo=r(trt,"yoso"),trt.forEach(t),yxo=r(wye," \u2014 "),_D=n(wye,"A",{href:!0});var art=s(_D);Lxo=r(art,"YosoForSequenceClassification"),art.forEach(t),xxo=r(wye," (YOSO model)"),wye.forEach(t),N.forEach(t),$xo=i(ra),eb=n(ra,"P",{});var Aye=s(eb);kxo=r(Aye,"The model is set in evaluation mode by default using "),ace=n(Aye,"CODE",{});var nrt=s(ace);Sxo=r(nrt,"model.eval()"),nrt.forEach(t),Rxo=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=n(Aye,"CODE",{});var srt=s(nce);Bxo=r(srt,"model.train()"),srt.forEach(t),Aye.forEach(t),Pxo=i(ra),T(ob.$$.fragment,ra),ra.forEach(t),js.forEach(t),NBe=i(f),Pi=n(f,"H2",{class:!0});var DIe=s(Pi);rb=n(DIe,"A",{id:!0,class:!0,href:!0});var lrt=s(rb);sce=n(lrt,"SPAN",{});var irt=s(sce);T(w0.$$.fragment,irt),irt.forEach(t),lrt.forEach(t),Ixo=i(DIe),lce=n(DIe,"SPAN",{});var drt=s(lce);qxo=r(drt,"AutoModelForMultipleChoice"),drt.forEach(t),DIe.forEach(t),jBe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(A0.$$.fragment,Ds),Nxo=i(Ds),Ii=n(Ds,"P",{});var wY=s(Ii);jxo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bD=n(wY,"A",{href:!0});var crt=s(bD);Dxo=r(crt,"from_pretrained()"),crt.forEach(t),Gxo=r(wY," class method or the "),vD=n(wY,"A",{href:!0});var frt=s(vD);Oxo=r(frt,"from_config()"),frt.forEach(t),Vxo=r(wY,` class
method.`),wY.forEach(t),Xxo=i(Ds),y0=n(Ds,"P",{});var GIe=s(y0);zxo=r(GIe,"This class cannot be instantiated directly using "),ice=n(GIe,"CODE",{});var mrt=s(ice);Wxo=r(mrt,"__init__()"),mrt.forEach(t),Qxo=r(GIe," (throws an error)."),GIe.forEach(t),Hxo=i(Ds),st=n(Ds,"DIV",{class:!0});var O3=s(st);T(L0.$$.fragment,O3),Uxo=i(O3),dce=n(O3,"P",{});var grt=s(dce);Jxo=r(grt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),grt.forEach(t),Yxo=i(O3),qi=n(O3,"P",{});var AY=s(qi);Kxo=r(AY,`Note:
Loading a model from its configuration file does `),cce=n(AY,"STRONG",{});var hrt=s(cce);Zxo=r(hrt,"not"),hrt.forEach(t),e9o=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(AY,"A",{href:!0});var prt=s(FD);o9o=r(prt,"from_pretrained()"),prt.forEach(t),r9o=r(AY," to load the model weights."),AY.forEach(t),t9o=i(O3),T(tb.$$.fragment,O3),O3.forEach(t),a9o=i(Ds),eo=n(Ds,"DIV",{class:!0});var ta=s(eo);T(x0.$$.fragment,ta),n9o=i(ta),fce=n(ta,"P",{});var urt=s(fce);s9o=r(urt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),urt.forEach(t),l9o=i(ta),$a=n(ta,"P",{});var V3=s($a);i9o=r(V3,"The model class to instantiate is selected based on the "),mce=n(V3,"CODE",{});var _rt=s(mce);d9o=r(_rt,"model_type"),_rt.forEach(t),c9o=r(V3,` property of the config object (either
passed as an argument or loaded from `),gce=n(V3,"CODE",{});var brt=s(gce);f9o=r(brt,"pretrained_model_name_or_path"),brt.forEach(t),m9o=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(V3,"CODE",{});var vrt=s(hce);g9o=r(vrt,"pretrained_model_name_or_path"),vrt.forEach(t),h9o=r(V3,":"),V3.forEach(t),p9o=i(ta),Y=n(ta,"UL",{});var K=s(Y);ab=n(K,"LI",{});var yye=s(ab);pce=n(yye,"STRONG",{});var Frt=s(pce);u9o=r(Frt,"albert"),Frt.forEach(t),_9o=r(yye," \u2014 "),TD=n(yye,"A",{href:!0});var Trt=s(TD);b9o=r(Trt,"AlbertForMultipleChoice"),Trt.forEach(t),v9o=r(yye," (ALBERT model)"),yye.forEach(t),F9o=i(K),nb=n(K,"LI",{});var Lye=s(nb);uce=n(Lye,"STRONG",{});var Mrt=s(uce);T9o=r(Mrt,"bert"),Mrt.forEach(t),M9o=r(Lye," \u2014 "),MD=n(Lye,"A",{href:!0});var Ert=s(MD);E9o=r(Ert,"BertForMultipleChoice"),Ert.forEach(t),C9o=r(Lye," (BERT model)"),Lye.forEach(t),w9o=i(K),sb=n(K,"LI",{});var xye=s(sb);_ce=n(xye,"STRONG",{});var Crt=s(_ce);A9o=r(Crt,"big_bird"),Crt.forEach(t),y9o=r(xye," \u2014 "),ED=n(xye,"A",{href:!0});var wrt=s(ED);L9o=r(wrt,"BigBirdForMultipleChoice"),wrt.forEach(t),x9o=r(xye," (BigBird model)"),xye.forEach(t),$9o=i(K),lb=n(K,"LI",{});var $ye=s(lb);bce=n($ye,"STRONG",{});var Art=s(bce);k9o=r(Art,"camembert"),Art.forEach(t),S9o=r($ye," \u2014 "),CD=n($ye,"A",{href:!0});var yrt=s(CD);R9o=r(yrt,"CamembertForMultipleChoice"),yrt.forEach(t),B9o=r($ye," (CamemBERT model)"),$ye.forEach(t),P9o=i(K),ib=n(K,"LI",{});var kye=s(ib);vce=n(kye,"STRONG",{});var Lrt=s(vce);I9o=r(Lrt,"canine"),Lrt.forEach(t),q9o=r(kye," \u2014 "),wD=n(kye,"A",{href:!0});var xrt=s(wD);N9o=r(xrt,"CanineForMultipleChoice"),xrt.forEach(t),j9o=r(kye," (Canine model)"),kye.forEach(t),D9o=i(K),db=n(K,"LI",{});var Sye=s(db);Fce=n(Sye,"STRONG",{});var $rt=s(Fce);G9o=r($rt,"convbert"),$rt.forEach(t),O9o=r(Sye," \u2014 "),AD=n(Sye,"A",{href:!0});var krt=s(AD);V9o=r(krt,"ConvBertForMultipleChoice"),krt.forEach(t),X9o=r(Sye," (ConvBERT model)"),Sye.forEach(t),z9o=i(K),cb=n(K,"LI",{});var Rye=s(cb);Tce=n(Rye,"STRONG",{});var Srt=s(Tce);W9o=r(Srt,"data2vec-text"),Srt.forEach(t),Q9o=r(Rye," \u2014 "),yD=n(Rye,"A",{href:!0});var Rrt=s(yD);H9o=r(Rrt,"Data2VecTextForMultipleChoice"),Rrt.forEach(t),U9o=r(Rye," (Data2VecText model)"),Rye.forEach(t),J9o=i(K),fb=n(K,"LI",{});var Bye=s(fb);Mce=n(Bye,"STRONG",{});var Brt=s(Mce);Y9o=r(Brt,"distilbert"),Brt.forEach(t),K9o=r(Bye," \u2014 "),LD=n(Bye,"A",{href:!0});var Prt=s(LD);Z9o=r(Prt,"DistilBertForMultipleChoice"),Prt.forEach(t),e$o=r(Bye," (DistilBERT model)"),Bye.forEach(t),o$o=i(K),mb=n(K,"LI",{});var Pye=s(mb);Ece=n(Pye,"STRONG",{});var Irt=s(Ece);r$o=r(Irt,"electra"),Irt.forEach(t),t$o=r(Pye," \u2014 "),xD=n(Pye,"A",{href:!0});var qrt=s(xD);a$o=r(qrt,"ElectraForMultipleChoice"),qrt.forEach(t),n$o=r(Pye," (ELECTRA model)"),Pye.forEach(t),s$o=i(K),gb=n(K,"LI",{});var Iye=s(gb);Cce=n(Iye,"STRONG",{});var Nrt=s(Cce);l$o=r(Nrt,"flaubert"),Nrt.forEach(t),i$o=r(Iye," \u2014 "),$D=n(Iye,"A",{href:!0});var jrt=s($D);d$o=r(jrt,"FlaubertForMultipleChoice"),jrt.forEach(t),c$o=r(Iye," (FlauBERT model)"),Iye.forEach(t),f$o=i(K),hb=n(K,"LI",{});var qye=s(hb);wce=n(qye,"STRONG",{});var Drt=s(wce);m$o=r(Drt,"fnet"),Drt.forEach(t),g$o=r(qye," \u2014 "),kD=n(qye,"A",{href:!0});var Grt=s(kD);h$o=r(Grt,"FNetForMultipleChoice"),Grt.forEach(t),p$o=r(qye," (FNet model)"),qye.forEach(t),u$o=i(K),pb=n(K,"LI",{});var Nye=s(pb);Ace=n(Nye,"STRONG",{});var Ort=s(Ace);_$o=r(Ort,"funnel"),Ort.forEach(t),b$o=r(Nye," \u2014 "),SD=n(Nye,"A",{href:!0});var Vrt=s(SD);v$o=r(Vrt,"FunnelForMultipleChoice"),Vrt.forEach(t),F$o=r(Nye," (Funnel Transformer model)"),Nye.forEach(t),T$o=i(K),ub=n(K,"LI",{});var jye=s(ub);yce=n(jye,"STRONG",{});var Xrt=s(yce);M$o=r(Xrt,"ibert"),Xrt.forEach(t),E$o=r(jye," \u2014 "),RD=n(jye,"A",{href:!0});var zrt=s(RD);C$o=r(zrt,"IBertForMultipleChoice"),zrt.forEach(t),w$o=r(jye," (I-BERT model)"),jye.forEach(t),A$o=i(K),_b=n(K,"LI",{});var Dye=s(_b);Lce=n(Dye,"STRONG",{});var Wrt=s(Lce);y$o=r(Wrt,"longformer"),Wrt.forEach(t),L$o=r(Dye," \u2014 "),BD=n(Dye,"A",{href:!0});var Qrt=s(BD);x$o=r(Qrt,"LongformerForMultipleChoice"),Qrt.forEach(t),$$o=r(Dye," (Longformer model)"),Dye.forEach(t),k$o=i(K),bb=n(K,"LI",{});var Gye=s(bb);xce=n(Gye,"STRONG",{});var Hrt=s(xce);S$o=r(Hrt,"megatron-bert"),Hrt.forEach(t),R$o=r(Gye," \u2014 "),PD=n(Gye,"A",{href:!0});var Urt=s(PD);B$o=r(Urt,"MegatronBertForMultipleChoice"),Urt.forEach(t),P$o=r(Gye," (MegatronBert model)"),Gye.forEach(t),I$o=i(K),vb=n(K,"LI",{});var Oye=s(vb);$ce=n(Oye,"STRONG",{});var Jrt=s($ce);q$o=r(Jrt,"mobilebert"),Jrt.forEach(t),N$o=r(Oye," \u2014 "),ID=n(Oye,"A",{href:!0});var Yrt=s(ID);j$o=r(Yrt,"MobileBertForMultipleChoice"),Yrt.forEach(t),D$o=r(Oye," (MobileBERT model)"),Oye.forEach(t),G$o=i(K),Fb=n(K,"LI",{});var Vye=s(Fb);kce=n(Vye,"STRONG",{});var Krt=s(kce);O$o=r(Krt,"mpnet"),Krt.forEach(t),V$o=r(Vye," \u2014 "),qD=n(Vye,"A",{href:!0});var Zrt=s(qD);X$o=r(Zrt,"MPNetForMultipleChoice"),Zrt.forEach(t),z$o=r(Vye," (MPNet model)"),Vye.forEach(t),W$o=i(K),Tb=n(K,"LI",{});var Xye=s(Tb);Sce=n(Xye,"STRONG",{});var ett=s(Sce);Q$o=r(ett,"nystromformer"),ett.forEach(t),H$o=r(Xye," \u2014 "),ND=n(Xye,"A",{href:!0});var ott=s(ND);U$o=r(ott,"NystromformerForMultipleChoice"),ott.forEach(t),J$o=r(Xye," (Nystromformer model)"),Xye.forEach(t),Y$o=i(K),Mb=n(K,"LI",{});var zye=s(Mb);Rce=n(zye,"STRONG",{});var rtt=s(Rce);K$o=r(rtt,"qdqbert"),rtt.forEach(t),Z$o=r(zye," \u2014 "),jD=n(zye,"A",{href:!0});var ttt=s(jD);eko=r(ttt,"QDQBertForMultipleChoice"),ttt.forEach(t),oko=r(zye," (QDQBert model)"),zye.forEach(t),rko=i(K),Eb=n(K,"LI",{});var Wye=s(Eb);Bce=n(Wye,"STRONG",{});var att=s(Bce);tko=r(att,"rembert"),att.forEach(t),ako=r(Wye," \u2014 "),DD=n(Wye,"A",{href:!0});var ntt=s(DD);nko=r(ntt,"RemBertForMultipleChoice"),ntt.forEach(t),sko=r(Wye," (RemBERT model)"),Wye.forEach(t),lko=i(K),Cb=n(K,"LI",{});var Qye=s(Cb);Pce=n(Qye,"STRONG",{});var stt=s(Pce);iko=r(stt,"roberta"),stt.forEach(t),dko=r(Qye," \u2014 "),GD=n(Qye,"A",{href:!0});var ltt=s(GD);cko=r(ltt,"RobertaForMultipleChoice"),ltt.forEach(t),fko=r(Qye," (RoBERTa model)"),Qye.forEach(t),mko=i(K),wb=n(K,"LI",{});var Hye=s(wb);Ice=n(Hye,"STRONG",{});var itt=s(Ice);gko=r(itt,"roformer"),itt.forEach(t),hko=r(Hye," \u2014 "),OD=n(Hye,"A",{href:!0});var dtt=s(OD);pko=r(dtt,"RoFormerForMultipleChoice"),dtt.forEach(t),uko=r(Hye," (RoFormer model)"),Hye.forEach(t),_ko=i(K),Ab=n(K,"LI",{});var Uye=s(Ab);qce=n(Uye,"STRONG",{});var ctt=s(qce);bko=r(ctt,"squeezebert"),ctt.forEach(t),vko=r(Uye," \u2014 "),VD=n(Uye,"A",{href:!0});var ftt=s(VD);Fko=r(ftt,"SqueezeBertForMultipleChoice"),ftt.forEach(t),Tko=r(Uye," (SqueezeBERT model)"),Uye.forEach(t),Mko=i(K),yb=n(K,"LI",{});var Jye=s(yb);Nce=n(Jye,"STRONG",{});var mtt=s(Nce);Eko=r(mtt,"xlm"),mtt.forEach(t),Cko=r(Jye," \u2014 "),XD=n(Jye,"A",{href:!0});var gtt=s(XD);wko=r(gtt,"XLMForMultipleChoice"),gtt.forEach(t),Ako=r(Jye," (XLM model)"),Jye.forEach(t),yko=i(K),Lb=n(K,"LI",{});var Yye=s(Lb);jce=n(Yye,"STRONG",{});var htt=s(jce);Lko=r(htt,"xlm-roberta"),htt.forEach(t),xko=r(Yye," \u2014 "),zD=n(Yye,"A",{href:!0});var ptt=s(zD);$ko=r(ptt,"XLMRobertaForMultipleChoice"),ptt.forEach(t),kko=r(Yye," (XLM-RoBERTa model)"),Yye.forEach(t),Sko=i(K),xb=n(K,"LI",{});var Kye=s(xb);Dce=n(Kye,"STRONG",{});var utt=s(Dce);Rko=r(utt,"xlm-roberta-xl"),utt.forEach(t),Bko=r(Kye," \u2014 "),WD=n(Kye,"A",{href:!0});var _tt=s(WD);Pko=r(_tt,"XLMRobertaXLForMultipleChoice"),_tt.forEach(t),Iko=r(Kye," (XLM-RoBERTa-XL model)"),Kye.forEach(t),qko=i(K),$b=n(K,"LI",{});var Zye=s($b);Gce=n(Zye,"STRONG",{});var btt=s(Gce);Nko=r(btt,"xlnet"),btt.forEach(t),jko=r(Zye," \u2014 "),QD=n(Zye,"A",{href:!0});var vtt=s(QD);Dko=r(vtt,"XLNetForMultipleChoice"),vtt.forEach(t),Gko=r(Zye," (XLNet model)"),Zye.forEach(t),Oko=i(K),kb=n(K,"LI",{});var eLe=s(kb);Oce=n(eLe,"STRONG",{});var Ftt=s(Oce);Vko=r(Ftt,"yoso"),Ftt.forEach(t),Xko=r(eLe," \u2014 "),HD=n(eLe,"A",{href:!0});var Ttt=s(HD);zko=r(Ttt,"YosoForMultipleChoice"),Ttt.forEach(t),Wko=r(eLe," (YOSO model)"),eLe.forEach(t),K.forEach(t),Qko=i(ta),Sb=n(ta,"P",{});var oLe=s(Sb);Hko=r(oLe,"The model is set in evaluation mode by default using "),Vce=n(oLe,"CODE",{});var Mtt=s(Vce);Uko=r(Mtt,"model.eval()"),Mtt.forEach(t),Jko=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=n(oLe,"CODE",{});var Ett=s(Xce);Yko=r(Ett,"model.train()"),Ett.forEach(t),oLe.forEach(t),Kko=i(ta),T(Rb.$$.fragment,ta),ta.forEach(t),Ds.forEach(t),DBe=i(f),Ni=n(f,"H2",{class:!0});var OIe=s(Ni);Bb=n(OIe,"A",{id:!0,class:!0,href:!0});var Ctt=s(Bb);zce=n(Ctt,"SPAN",{});var wtt=s(zce);T($0.$$.fragment,wtt),wtt.forEach(t),Ctt.forEach(t),Zko=i(OIe),Wce=n(OIe,"SPAN",{});var Att=s(Wce);eSo=r(Att,"AutoModelForNextSentencePrediction"),Att.forEach(t),OIe.forEach(t),GBe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(k0.$$.fragment,Gs),oSo=i(Gs),ji=n(Gs,"P",{});var yY=s(ji);rSo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),UD=n(yY,"A",{href:!0});var ytt=s(UD);tSo=r(ytt,"from_pretrained()"),ytt.forEach(t),aSo=r(yY," class method or the "),JD=n(yY,"A",{href:!0});var Ltt=s(JD);nSo=r(Ltt,"from_config()"),Ltt.forEach(t),sSo=r(yY,` class
method.`),yY.forEach(t),lSo=i(Gs),S0=n(Gs,"P",{});var VIe=s(S0);iSo=r(VIe,"This class cannot be instantiated directly using "),Qce=n(VIe,"CODE",{});var xtt=s(Qce);dSo=r(xtt,"__init__()"),xtt.forEach(t),cSo=r(VIe," (throws an error)."),VIe.forEach(t),fSo=i(Gs),lt=n(Gs,"DIV",{class:!0});var X3=s(lt);T(R0.$$.fragment,X3),mSo=i(X3),Hce=n(X3,"P",{});var $tt=s(Hce);gSo=r($tt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$tt.forEach(t),hSo=i(X3),Di=n(X3,"P",{});var LY=s(Di);pSo=r(LY,`Note:
Loading a model from its configuration file does `),Uce=n(LY,"STRONG",{});var ktt=s(Uce);uSo=r(ktt,"not"),ktt.forEach(t),_So=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=n(LY,"A",{href:!0});var Stt=s(YD);bSo=r(Stt,"from_pretrained()"),Stt.forEach(t),vSo=r(LY," to load the model weights."),LY.forEach(t),FSo=i(X3),T(Pb.$$.fragment,X3),X3.forEach(t),TSo=i(Gs),oo=n(Gs,"DIV",{class:!0});var aa=s(oo);T(B0.$$.fragment,aa),MSo=i(aa),Jce=n(aa,"P",{});var Rtt=s(Jce);ESo=r(Rtt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Rtt.forEach(t),CSo=i(aa),ka=n(aa,"P",{});var z3=s(ka);wSo=r(z3,"The model class to instantiate is selected based on the "),Yce=n(z3,"CODE",{});var Btt=s(Yce);ASo=r(Btt,"model_type"),Btt.forEach(t),ySo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Kce=n(z3,"CODE",{});var Ptt=s(Kce);LSo=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),xSo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zce=n(z3,"CODE",{});var Itt=s(Zce);$So=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),kSo=r(z3,":"),z3.forEach(t),SSo=i(aa),Qr=n(aa,"UL",{});var Os=s(Qr);Ib=n(Os,"LI",{});var rLe=s(Ib);efe=n(rLe,"STRONG",{});var qtt=s(efe);RSo=r(qtt,"bert"),qtt.forEach(t),BSo=r(rLe," \u2014 "),KD=n(rLe,"A",{href:!0});var Ntt=s(KD);PSo=r(Ntt,"BertForNextSentencePrediction"),Ntt.forEach(t),ISo=r(rLe," (BERT model)"),rLe.forEach(t),qSo=i(Os),qb=n(Os,"LI",{});var tLe=s(qb);ofe=n(tLe,"STRONG",{});var jtt=s(ofe);NSo=r(jtt,"fnet"),jtt.forEach(t),jSo=r(tLe," \u2014 "),ZD=n(tLe,"A",{href:!0});var Dtt=s(ZD);DSo=r(Dtt,"FNetForNextSentencePrediction"),Dtt.forEach(t),GSo=r(tLe," (FNet model)"),tLe.forEach(t),OSo=i(Os),Nb=n(Os,"LI",{});var aLe=s(Nb);rfe=n(aLe,"STRONG",{});var Gtt=s(rfe);VSo=r(Gtt,"megatron-bert"),Gtt.forEach(t),XSo=r(aLe," \u2014 "),eG=n(aLe,"A",{href:!0});var Ott=s(eG);zSo=r(Ott,"MegatronBertForNextSentencePrediction"),Ott.forEach(t),WSo=r(aLe," (MegatronBert model)"),aLe.forEach(t),QSo=i(Os),jb=n(Os,"LI",{});var nLe=s(jb);tfe=n(nLe,"STRONG",{});var Vtt=s(tfe);HSo=r(Vtt,"mobilebert"),Vtt.forEach(t),USo=r(nLe," \u2014 "),oG=n(nLe,"A",{href:!0});var Xtt=s(oG);JSo=r(Xtt,"MobileBertForNextSentencePrediction"),Xtt.forEach(t),YSo=r(nLe," (MobileBERT model)"),nLe.forEach(t),KSo=i(Os),Db=n(Os,"LI",{});var sLe=s(Db);afe=n(sLe,"STRONG",{});var ztt=s(afe);ZSo=r(ztt,"qdqbert"),ztt.forEach(t),eRo=r(sLe," \u2014 "),rG=n(sLe,"A",{href:!0});var Wtt=s(rG);oRo=r(Wtt,"QDQBertForNextSentencePrediction"),Wtt.forEach(t),rRo=r(sLe," (QDQBert model)"),sLe.forEach(t),Os.forEach(t),tRo=i(aa),Gb=n(aa,"P",{});var lLe=s(Gb);aRo=r(lLe,"The model is set in evaluation mode by default using "),nfe=n(lLe,"CODE",{});var Qtt=s(nfe);nRo=r(Qtt,"model.eval()"),Qtt.forEach(t),sRo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(lLe,"CODE",{});var Htt=s(sfe);lRo=r(Htt,"model.train()"),Htt.forEach(t),lLe.forEach(t),iRo=i(aa),T(Ob.$$.fragment,aa),aa.forEach(t),Gs.forEach(t),OBe=i(f),Gi=n(f,"H2",{class:!0});var XIe=s(Gi);Vb=n(XIe,"A",{id:!0,class:!0,href:!0});var Utt=s(Vb);lfe=n(Utt,"SPAN",{});var Jtt=s(lfe);T(P0.$$.fragment,Jtt),Jtt.forEach(t),Utt.forEach(t),dRo=i(XIe),ife=n(XIe,"SPAN",{});var Ytt=s(ife);cRo=r(Ytt,"AutoModelForTokenClassification"),Ytt.forEach(t),XIe.forEach(t),VBe=i(f),Bo=n(f,"DIV",{class:!0});var Vs=s(Bo);T(I0.$$.fragment,Vs),fRo=i(Vs),Oi=n(Vs,"P",{});var xY=s(Oi);mRo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tG=n(xY,"A",{href:!0});var Ktt=s(tG);gRo=r(Ktt,"from_pretrained()"),Ktt.forEach(t),hRo=r(xY," class method or the "),aG=n(xY,"A",{href:!0});var Ztt=s(aG);pRo=r(Ztt,"from_config()"),Ztt.forEach(t),uRo=r(xY,` class
method.`),xY.forEach(t),_Ro=i(Vs),q0=n(Vs,"P",{});var zIe=s(q0);bRo=r(zIe,"This class cannot be instantiated directly using "),dfe=n(zIe,"CODE",{});var eat=s(dfe);vRo=r(eat,"__init__()"),eat.forEach(t),FRo=r(zIe," (throws an error)."),zIe.forEach(t),TRo=i(Vs),it=n(Vs,"DIV",{class:!0});var W3=s(it);T(N0.$$.fragment,W3),MRo=i(W3),cfe=n(W3,"P",{});var oat=s(cfe);ERo=r(oat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oat.forEach(t),CRo=i(W3),Vi=n(W3,"P",{});var $Y=s(Vi);wRo=r($Y,`Note:
Loading a model from its configuration file does `),ffe=n($Y,"STRONG",{});var rat=s(ffe);ARo=r(rat,"not"),rat.forEach(t),yRo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n($Y,"A",{href:!0});var tat=s(nG);LRo=r(tat,"from_pretrained()"),tat.forEach(t),xRo=r($Y," to load the model weights."),$Y.forEach(t),$Ro=i(W3),T(Xb.$$.fragment,W3),W3.forEach(t),kRo=i(Vs),ro=n(Vs,"DIV",{class:!0});var na=s(ro);T(j0.$$.fragment,na),SRo=i(na),mfe=n(na,"P",{});var aat=s(mfe);RRo=r(aat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aat.forEach(t),BRo=i(na),Sa=n(na,"P",{});var Q3=s(Sa);PRo=r(Q3,"The model class to instantiate is selected based on the "),gfe=n(Q3,"CODE",{});var nat=s(gfe);IRo=r(nat,"model_type"),nat.forEach(t),qRo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),hfe=n(Q3,"CODE",{});var sat=s(hfe);NRo=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),jRo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(Q3,"CODE",{});var lat=s(pfe);DRo=r(lat,"pretrained_model_name_or_path"),lat.forEach(t),GRo=r(Q3,":"),Q3.forEach(t),ORo=i(na),U=n(na,"UL",{});var J=s(U);zb=n(J,"LI",{});var iLe=s(zb);ufe=n(iLe,"STRONG",{});var iat=s(ufe);VRo=r(iat,"albert"),iat.forEach(t),XRo=r(iLe," \u2014 "),sG=n(iLe,"A",{href:!0});var dat=s(sG);zRo=r(dat,"AlbertForTokenClassification"),dat.forEach(t),WRo=r(iLe," (ALBERT model)"),iLe.forEach(t),QRo=i(J),Wb=n(J,"LI",{});var dLe=s(Wb);_fe=n(dLe,"STRONG",{});var cat=s(_fe);HRo=r(cat,"bert"),cat.forEach(t),URo=r(dLe," \u2014 "),lG=n(dLe,"A",{href:!0});var fat=s(lG);JRo=r(fat,"BertForTokenClassification"),fat.forEach(t),YRo=r(dLe," (BERT model)"),dLe.forEach(t),KRo=i(J),Qb=n(J,"LI",{});var cLe=s(Qb);bfe=n(cLe,"STRONG",{});var mat=s(bfe);ZRo=r(mat,"big_bird"),mat.forEach(t),eBo=r(cLe," \u2014 "),iG=n(cLe,"A",{href:!0});var gat=s(iG);oBo=r(gat,"BigBirdForTokenClassification"),gat.forEach(t),rBo=r(cLe," (BigBird model)"),cLe.forEach(t),tBo=i(J),Hb=n(J,"LI",{});var fLe=s(Hb);vfe=n(fLe,"STRONG",{});var hat=s(vfe);aBo=r(hat,"camembert"),hat.forEach(t),nBo=r(fLe," \u2014 "),dG=n(fLe,"A",{href:!0});var pat=s(dG);sBo=r(pat,"CamembertForTokenClassification"),pat.forEach(t),lBo=r(fLe," (CamemBERT model)"),fLe.forEach(t),iBo=i(J),Ub=n(J,"LI",{});var mLe=s(Ub);Ffe=n(mLe,"STRONG",{});var uat=s(Ffe);dBo=r(uat,"canine"),uat.forEach(t),cBo=r(mLe," \u2014 "),cG=n(mLe,"A",{href:!0});var _at=s(cG);fBo=r(_at,"CanineForTokenClassification"),_at.forEach(t),mBo=r(mLe," (Canine model)"),mLe.forEach(t),gBo=i(J),Jb=n(J,"LI",{});var gLe=s(Jb);Tfe=n(gLe,"STRONG",{});var bat=s(Tfe);hBo=r(bat,"convbert"),bat.forEach(t),pBo=r(gLe," \u2014 "),fG=n(gLe,"A",{href:!0});var vat=s(fG);uBo=r(vat,"ConvBertForTokenClassification"),vat.forEach(t),_Bo=r(gLe," (ConvBERT model)"),gLe.forEach(t),bBo=i(J),Yb=n(J,"LI",{});var hLe=s(Yb);Mfe=n(hLe,"STRONG",{});var Fat=s(Mfe);vBo=r(Fat,"data2vec-text"),Fat.forEach(t),FBo=r(hLe," \u2014 "),mG=n(hLe,"A",{href:!0});var Tat=s(mG);TBo=r(Tat,"Data2VecTextForTokenClassification"),Tat.forEach(t),MBo=r(hLe," (Data2VecText model)"),hLe.forEach(t),EBo=i(J),Kb=n(J,"LI",{});var pLe=s(Kb);Efe=n(pLe,"STRONG",{});var Mat=s(Efe);CBo=r(Mat,"deberta"),Mat.forEach(t),wBo=r(pLe," \u2014 "),gG=n(pLe,"A",{href:!0});var Eat=s(gG);ABo=r(Eat,"DebertaForTokenClassification"),Eat.forEach(t),yBo=r(pLe," (DeBERTa model)"),pLe.forEach(t),LBo=i(J),Zb=n(J,"LI",{});var uLe=s(Zb);Cfe=n(uLe,"STRONG",{});var Cat=s(Cfe);xBo=r(Cat,"deberta-v2"),Cat.forEach(t),$Bo=r(uLe," \u2014 "),hG=n(uLe,"A",{href:!0});var wat=s(hG);kBo=r(wat,"DebertaV2ForTokenClassification"),wat.forEach(t),SBo=r(uLe," (DeBERTa-v2 model)"),uLe.forEach(t),RBo=i(J),ev=n(J,"LI",{});var _Le=s(ev);wfe=n(_Le,"STRONG",{});var Aat=s(wfe);BBo=r(Aat,"distilbert"),Aat.forEach(t),PBo=r(_Le," \u2014 "),pG=n(_Le,"A",{href:!0});var yat=s(pG);IBo=r(yat,"DistilBertForTokenClassification"),yat.forEach(t),qBo=r(_Le," (DistilBERT model)"),_Le.forEach(t),NBo=i(J),ov=n(J,"LI",{});var bLe=s(ov);Afe=n(bLe,"STRONG",{});var Lat=s(Afe);jBo=r(Lat,"electra"),Lat.forEach(t),DBo=r(bLe," \u2014 "),uG=n(bLe,"A",{href:!0});var xat=s(uG);GBo=r(xat,"ElectraForTokenClassification"),xat.forEach(t),OBo=r(bLe," (ELECTRA model)"),bLe.forEach(t),VBo=i(J),rv=n(J,"LI",{});var vLe=s(rv);yfe=n(vLe,"STRONG",{});var $at=s(yfe);XBo=r($at,"flaubert"),$at.forEach(t),zBo=r(vLe," \u2014 "),_G=n(vLe,"A",{href:!0});var kat=s(_G);WBo=r(kat,"FlaubertForTokenClassification"),kat.forEach(t),QBo=r(vLe," (FlauBERT model)"),vLe.forEach(t),HBo=i(J),tv=n(J,"LI",{});var FLe=s(tv);Lfe=n(FLe,"STRONG",{});var Sat=s(Lfe);UBo=r(Sat,"fnet"),Sat.forEach(t),JBo=r(FLe," \u2014 "),bG=n(FLe,"A",{href:!0});var Rat=s(bG);YBo=r(Rat,"FNetForTokenClassification"),Rat.forEach(t),KBo=r(FLe," (FNet model)"),FLe.forEach(t),ZBo=i(J),av=n(J,"LI",{});var TLe=s(av);xfe=n(TLe,"STRONG",{});var Bat=s(xfe);ePo=r(Bat,"funnel"),Bat.forEach(t),oPo=r(TLe," \u2014 "),vG=n(TLe,"A",{href:!0});var Pat=s(vG);rPo=r(Pat,"FunnelForTokenClassification"),Pat.forEach(t),tPo=r(TLe," (Funnel Transformer model)"),TLe.forEach(t),aPo=i(J),nv=n(J,"LI",{});var MLe=s(nv);$fe=n(MLe,"STRONG",{});var Iat=s($fe);nPo=r(Iat,"gpt2"),Iat.forEach(t),sPo=r(MLe," \u2014 "),FG=n(MLe,"A",{href:!0});var qat=s(FG);lPo=r(qat,"GPT2ForTokenClassification"),qat.forEach(t),iPo=r(MLe," (OpenAI GPT-2 model)"),MLe.forEach(t),dPo=i(J),sv=n(J,"LI",{});var ELe=s(sv);kfe=n(ELe,"STRONG",{});var Nat=s(kfe);cPo=r(Nat,"ibert"),Nat.forEach(t),fPo=r(ELe," \u2014 "),TG=n(ELe,"A",{href:!0});var jat=s(TG);mPo=r(jat,"IBertForTokenClassification"),jat.forEach(t),gPo=r(ELe," (I-BERT model)"),ELe.forEach(t),hPo=i(J),lv=n(J,"LI",{});var CLe=s(lv);Sfe=n(CLe,"STRONG",{});var Dat=s(Sfe);pPo=r(Dat,"layoutlm"),Dat.forEach(t),uPo=r(CLe," \u2014 "),MG=n(CLe,"A",{href:!0});var Gat=s(MG);_Po=r(Gat,"LayoutLMForTokenClassification"),Gat.forEach(t),bPo=r(CLe," (LayoutLM model)"),CLe.forEach(t),vPo=i(J),iv=n(J,"LI",{});var wLe=s(iv);Rfe=n(wLe,"STRONG",{});var Oat=s(Rfe);FPo=r(Oat,"layoutlmv2"),Oat.forEach(t),TPo=r(wLe," \u2014 "),EG=n(wLe,"A",{href:!0});var Vat=s(EG);MPo=r(Vat,"LayoutLMv2ForTokenClassification"),Vat.forEach(t),EPo=r(wLe," (LayoutLMv2 model)"),wLe.forEach(t),CPo=i(J),dv=n(J,"LI",{});var ALe=s(dv);Bfe=n(ALe,"STRONG",{});var Xat=s(Bfe);wPo=r(Xat,"longformer"),Xat.forEach(t),APo=r(ALe," \u2014 "),CG=n(ALe,"A",{href:!0});var zat=s(CG);yPo=r(zat,"LongformerForTokenClassification"),zat.forEach(t),LPo=r(ALe," (Longformer model)"),ALe.forEach(t),xPo=i(J),cv=n(J,"LI",{});var yLe=s(cv);Pfe=n(yLe,"STRONG",{});var Wat=s(Pfe);$Po=r(Wat,"megatron-bert"),Wat.forEach(t),kPo=r(yLe," \u2014 "),wG=n(yLe,"A",{href:!0});var Qat=s(wG);SPo=r(Qat,"MegatronBertForTokenClassification"),Qat.forEach(t),RPo=r(yLe," (MegatronBert model)"),yLe.forEach(t),BPo=i(J),fv=n(J,"LI",{});var LLe=s(fv);Ife=n(LLe,"STRONG",{});var Hat=s(Ife);PPo=r(Hat,"mobilebert"),Hat.forEach(t),IPo=r(LLe," \u2014 "),AG=n(LLe,"A",{href:!0});var Uat=s(AG);qPo=r(Uat,"MobileBertForTokenClassification"),Uat.forEach(t),NPo=r(LLe," (MobileBERT model)"),LLe.forEach(t),jPo=i(J),mv=n(J,"LI",{});var xLe=s(mv);qfe=n(xLe,"STRONG",{});var Jat=s(qfe);DPo=r(Jat,"mpnet"),Jat.forEach(t),GPo=r(xLe," \u2014 "),yG=n(xLe,"A",{href:!0});var Yat=s(yG);OPo=r(Yat,"MPNetForTokenClassification"),Yat.forEach(t),VPo=r(xLe," (MPNet model)"),xLe.forEach(t),XPo=i(J),gv=n(J,"LI",{});var $Le=s(gv);Nfe=n($Le,"STRONG",{});var Kat=s(Nfe);zPo=r(Kat,"nystromformer"),Kat.forEach(t),WPo=r($Le," \u2014 "),LG=n($Le,"A",{href:!0});var Zat=s(LG);QPo=r(Zat,"NystromformerForTokenClassification"),Zat.forEach(t),HPo=r($Le," (Nystromformer model)"),$Le.forEach(t),UPo=i(J),hv=n(J,"LI",{});var kLe=s(hv);jfe=n(kLe,"STRONG",{});var ent=s(jfe);JPo=r(ent,"qdqbert"),ent.forEach(t),YPo=r(kLe," \u2014 "),xG=n(kLe,"A",{href:!0});var ont=s(xG);KPo=r(ont,"QDQBertForTokenClassification"),ont.forEach(t),ZPo=r(kLe," (QDQBert model)"),kLe.forEach(t),eIo=i(J),pv=n(J,"LI",{});var SLe=s(pv);Dfe=n(SLe,"STRONG",{});var rnt=s(Dfe);oIo=r(rnt,"rembert"),rnt.forEach(t),rIo=r(SLe," \u2014 "),$G=n(SLe,"A",{href:!0});var tnt=s($G);tIo=r(tnt,"RemBertForTokenClassification"),tnt.forEach(t),aIo=r(SLe," (RemBERT model)"),SLe.forEach(t),nIo=i(J),uv=n(J,"LI",{});var RLe=s(uv);Gfe=n(RLe,"STRONG",{});var ant=s(Gfe);sIo=r(ant,"roberta"),ant.forEach(t),lIo=r(RLe," \u2014 "),kG=n(RLe,"A",{href:!0});var nnt=s(kG);iIo=r(nnt,"RobertaForTokenClassification"),nnt.forEach(t),dIo=r(RLe," (RoBERTa model)"),RLe.forEach(t),cIo=i(J),_v=n(J,"LI",{});var BLe=s(_v);Ofe=n(BLe,"STRONG",{});var snt=s(Ofe);fIo=r(snt,"roformer"),snt.forEach(t),mIo=r(BLe," \u2014 "),SG=n(BLe,"A",{href:!0});var lnt=s(SG);gIo=r(lnt,"RoFormerForTokenClassification"),lnt.forEach(t),hIo=r(BLe," (RoFormer model)"),BLe.forEach(t),pIo=i(J),bv=n(J,"LI",{});var PLe=s(bv);Vfe=n(PLe,"STRONG",{});var int=s(Vfe);uIo=r(int,"squeezebert"),int.forEach(t),_Io=r(PLe," \u2014 "),RG=n(PLe,"A",{href:!0});var dnt=s(RG);bIo=r(dnt,"SqueezeBertForTokenClassification"),dnt.forEach(t),vIo=r(PLe," (SqueezeBERT model)"),PLe.forEach(t),FIo=i(J),vv=n(J,"LI",{});var ILe=s(vv);Xfe=n(ILe,"STRONG",{});var cnt=s(Xfe);TIo=r(cnt,"xlm"),cnt.forEach(t),MIo=r(ILe," \u2014 "),BG=n(ILe,"A",{href:!0});var fnt=s(BG);EIo=r(fnt,"XLMForTokenClassification"),fnt.forEach(t),CIo=r(ILe," (XLM model)"),ILe.forEach(t),wIo=i(J),Fv=n(J,"LI",{});var qLe=s(Fv);zfe=n(qLe,"STRONG",{});var mnt=s(zfe);AIo=r(mnt,"xlm-roberta"),mnt.forEach(t),yIo=r(qLe," \u2014 "),PG=n(qLe,"A",{href:!0});var gnt=s(PG);LIo=r(gnt,"XLMRobertaForTokenClassification"),gnt.forEach(t),xIo=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),$Io=i(J),Tv=n(J,"LI",{});var NLe=s(Tv);Wfe=n(NLe,"STRONG",{});var hnt=s(Wfe);kIo=r(hnt,"xlm-roberta-xl"),hnt.forEach(t),SIo=r(NLe," \u2014 "),IG=n(NLe,"A",{href:!0});var pnt=s(IG);RIo=r(pnt,"XLMRobertaXLForTokenClassification"),pnt.forEach(t),BIo=r(NLe," (XLM-RoBERTa-XL model)"),NLe.forEach(t),PIo=i(J),Mv=n(J,"LI",{});var jLe=s(Mv);Qfe=n(jLe,"STRONG",{});var unt=s(Qfe);IIo=r(unt,"xlnet"),unt.forEach(t),qIo=r(jLe," \u2014 "),qG=n(jLe,"A",{href:!0});var _nt=s(qG);NIo=r(_nt,"XLNetForTokenClassification"),_nt.forEach(t),jIo=r(jLe," (XLNet model)"),jLe.forEach(t),DIo=i(J),Ev=n(J,"LI",{});var DLe=s(Ev);Hfe=n(DLe,"STRONG",{});var bnt=s(Hfe);GIo=r(bnt,"yoso"),bnt.forEach(t),OIo=r(DLe," \u2014 "),NG=n(DLe,"A",{href:!0});var vnt=s(NG);VIo=r(vnt,"YosoForTokenClassification"),vnt.forEach(t),XIo=r(DLe," (YOSO model)"),DLe.forEach(t),J.forEach(t),zIo=i(na),Cv=n(na,"P",{});var GLe=s(Cv);WIo=r(GLe,"The model is set in evaluation mode by default using "),Ufe=n(GLe,"CODE",{});var Fnt=s(Ufe);QIo=r(Fnt,"model.eval()"),Fnt.forEach(t),HIo=r(GLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=n(GLe,"CODE",{});var Tnt=s(Jfe);UIo=r(Tnt,"model.train()"),Tnt.forEach(t),GLe.forEach(t),JIo=i(na),T(wv.$$.fragment,na),na.forEach(t),Vs.forEach(t),XBe=i(f),Xi=n(f,"H2",{class:!0});var WIe=s(Xi);Av=n(WIe,"A",{id:!0,class:!0,href:!0});var Mnt=s(Av);Yfe=n(Mnt,"SPAN",{});var Ent=s(Yfe);T(D0.$$.fragment,Ent),Ent.forEach(t),Mnt.forEach(t),YIo=i(WIe),Kfe=n(WIe,"SPAN",{});var Cnt=s(Kfe);KIo=r(Cnt,"AutoModelForQuestionAnswering"),Cnt.forEach(t),WIe.forEach(t),zBe=i(f),Po=n(f,"DIV",{class:!0});var Xs=s(Po);T(G0.$$.fragment,Xs),ZIo=i(Xs),zi=n(Xs,"P",{});var kY=s(zi);eqo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jG=n(kY,"A",{href:!0});var wnt=s(jG);oqo=r(wnt,"from_pretrained()"),wnt.forEach(t),rqo=r(kY," class method or the "),DG=n(kY,"A",{href:!0});var Ant=s(DG);tqo=r(Ant,"from_config()"),Ant.forEach(t),aqo=r(kY,` class
method.`),kY.forEach(t),nqo=i(Xs),O0=n(Xs,"P",{});var QIe=s(O0);sqo=r(QIe,"This class cannot be instantiated directly using "),Zfe=n(QIe,"CODE",{});var ynt=s(Zfe);lqo=r(ynt,"__init__()"),ynt.forEach(t),iqo=r(QIe," (throws an error)."),QIe.forEach(t),dqo=i(Xs),dt=n(Xs,"DIV",{class:!0});var H3=s(dt);T(V0.$$.fragment,H3),cqo=i(H3),eme=n(H3,"P",{});var Lnt=s(eme);fqo=r(Lnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lnt.forEach(t),mqo=i(H3),Wi=n(H3,"P",{});var SY=s(Wi);gqo=r(SY,`Note:
Loading a model from its configuration file does `),ome=n(SY,"STRONG",{});var xnt=s(ome);hqo=r(xnt,"not"),xnt.forEach(t),pqo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(SY,"A",{href:!0});var $nt=s(GG);uqo=r($nt,"from_pretrained()"),$nt.forEach(t),_qo=r(SY," to load the model weights."),SY.forEach(t),bqo=i(H3),T(yv.$$.fragment,H3),H3.forEach(t),vqo=i(Xs),to=n(Xs,"DIV",{class:!0});var sa=s(to);T(X0.$$.fragment,sa),Fqo=i(sa),rme=n(sa,"P",{});var knt=s(rme);Tqo=r(knt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),knt.forEach(t),Mqo=i(sa),Ra=n(sa,"P",{});var U3=s(Ra);Eqo=r(U3,"The model class to instantiate is selected based on the "),tme=n(U3,"CODE",{});var Snt=s(tme);Cqo=r(Snt,"model_type"),Snt.forEach(t),wqo=r(U3,` property of the config object (either
passed as an argument or loaded from `),ame=n(U3,"CODE",{});var Rnt=s(ame);Aqo=r(Rnt,"pretrained_model_name_or_path"),Rnt.forEach(t),yqo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=n(U3,"CODE",{});var Bnt=s(nme);Lqo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),xqo=r(U3,":"),U3.forEach(t),$qo=i(sa),O=n(sa,"UL",{});var X=s(O);Lv=n(X,"LI",{});var OLe=s(Lv);sme=n(OLe,"STRONG",{});var Pnt=s(sme);kqo=r(Pnt,"albert"),Pnt.forEach(t),Sqo=r(OLe," \u2014 "),OG=n(OLe,"A",{href:!0});var Int=s(OG);Rqo=r(Int,"AlbertForQuestionAnswering"),Int.forEach(t),Bqo=r(OLe," (ALBERT model)"),OLe.forEach(t),Pqo=i(X),xv=n(X,"LI",{});var VLe=s(xv);lme=n(VLe,"STRONG",{});var qnt=s(lme);Iqo=r(qnt,"bart"),qnt.forEach(t),qqo=r(VLe," \u2014 "),VG=n(VLe,"A",{href:!0});var Nnt=s(VG);Nqo=r(Nnt,"BartForQuestionAnswering"),Nnt.forEach(t),jqo=r(VLe," (BART model)"),VLe.forEach(t),Dqo=i(X),$v=n(X,"LI",{});var XLe=s($v);ime=n(XLe,"STRONG",{});var jnt=s(ime);Gqo=r(jnt,"bert"),jnt.forEach(t),Oqo=r(XLe," \u2014 "),XG=n(XLe,"A",{href:!0});var Dnt=s(XG);Vqo=r(Dnt,"BertForQuestionAnswering"),Dnt.forEach(t),Xqo=r(XLe," (BERT model)"),XLe.forEach(t),zqo=i(X),kv=n(X,"LI",{});var zLe=s(kv);dme=n(zLe,"STRONG",{});var Gnt=s(dme);Wqo=r(Gnt,"big_bird"),Gnt.forEach(t),Qqo=r(zLe," \u2014 "),zG=n(zLe,"A",{href:!0});var Ont=s(zG);Hqo=r(Ont,"BigBirdForQuestionAnswering"),Ont.forEach(t),Uqo=r(zLe," (BigBird model)"),zLe.forEach(t),Jqo=i(X),Sv=n(X,"LI",{});var WLe=s(Sv);cme=n(WLe,"STRONG",{});var Vnt=s(cme);Yqo=r(Vnt,"bigbird_pegasus"),Vnt.forEach(t),Kqo=r(WLe," \u2014 "),WG=n(WLe,"A",{href:!0});var Xnt=s(WG);Zqo=r(Xnt,"BigBirdPegasusForQuestionAnswering"),Xnt.forEach(t),eNo=r(WLe," (BigBirdPegasus model)"),WLe.forEach(t),oNo=i(X),Rv=n(X,"LI",{});var QLe=s(Rv);fme=n(QLe,"STRONG",{});var znt=s(fme);rNo=r(znt,"camembert"),znt.forEach(t),tNo=r(QLe," \u2014 "),QG=n(QLe,"A",{href:!0});var Wnt=s(QG);aNo=r(Wnt,"CamembertForQuestionAnswering"),Wnt.forEach(t),nNo=r(QLe," (CamemBERT model)"),QLe.forEach(t),sNo=i(X),Bv=n(X,"LI",{});var HLe=s(Bv);mme=n(HLe,"STRONG",{});var Qnt=s(mme);lNo=r(Qnt,"canine"),Qnt.forEach(t),iNo=r(HLe," \u2014 "),HG=n(HLe,"A",{href:!0});var Hnt=s(HG);dNo=r(Hnt,"CanineForQuestionAnswering"),Hnt.forEach(t),cNo=r(HLe," (Canine model)"),HLe.forEach(t),fNo=i(X),Pv=n(X,"LI",{});var ULe=s(Pv);gme=n(ULe,"STRONG",{});var Unt=s(gme);mNo=r(Unt,"convbert"),Unt.forEach(t),gNo=r(ULe," \u2014 "),UG=n(ULe,"A",{href:!0});var Jnt=s(UG);hNo=r(Jnt,"ConvBertForQuestionAnswering"),Jnt.forEach(t),pNo=r(ULe," (ConvBERT model)"),ULe.forEach(t),uNo=i(X),Iv=n(X,"LI",{});var JLe=s(Iv);hme=n(JLe,"STRONG",{});var Ynt=s(hme);_No=r(Ynt,"data2vec-text"),Ynt.forEach(t),bNo=r(JLe," \u2014 "),JG=n(JLe,"A",{href:!0});var Knt=s(JG);vNo=r(Knt,"Data2VecTextForQuestionAnswering"),Knt.forEach(t),FNo=r(JLe," (Data2VecText model)"),JLe.forEach(t),TNo=i(X),qv=n(X,"LI",{});var YLe=s(qv);pme=n(YLe,"STRONG",{});var Znt=s(pme);MNo=r(Znt,"deberta"),Znt.forEach(t),ENo=r(YLe," \u2014 "),YG=n(YLe,"A",{href:!0});var est=s(YG);CNo=r(est,"DebertaForQuestionAnswering"),est.forEach(t),wNo=r(YLe," (DeBERTa model)"),YLe.forEach(t),ANo=i(X),Nv=n(X,"LI",{});var KLe=s(Nv);ume=n(KLe,"STRONG",{});var ost=s(ume);yNo=r(ost,"deberta-v2"),ost.forEach(t),LNo=r(KLe," \u2014 "),KG=n(KLe,"A",{href:!0});var rst=s(KG);xNo=r(rst,"DebertaV2ForQuestionAnswering"),rst.forEach(t),$No=r(KLe," (DeBERTa-v2 model)"),KLe.forEach(t),kNo=i(X),jv=n(X,"LI",{});var ZLe=s(jv);_me=n(ZLe,"STRONG",{});var tst=s(_me);SNo=r(tst,"distilbert"),tst.forEach(t),RNo=r(ZLe," \u2014 "),ZG=n(ZLe,"A",{href:!0});var ast=s(ZG);BNo=r(ast,"DistilBertForQuestionAnswering"),ast.forEach(t),PNo=r(ZLe," (DistilBERT model)"),ZLe.forEach(t),INo=i(X),Dv=n(X,"LI",{});var e7e=s(Dv);bme=n(e7e,"STRONG",{});var nst=s(bme);qNo=r(nst,"electra"),nst.forEach(t),NNo=r(e7e," \u2014 "),eO=n(e7e,"A",{href:!0});var sst=s(eO);jNo=r(sst,"ElectraForQuestionAnswering"),sst.forEach(t),DNo=r(e7e," (ELECTRA model)"),e7e.forEach(t),GNo=i(X),Gv=n(X,"LI",{});var o7e=s(Gv);vme=n(o7e,"STRONG",{});var lst=s(vme);ONo=r(lst,"flaubert"),lst.forEach(t),VNo=r(o7e," \u2014 "),oO=n(o7e,"A",{href:!0});var ist=s(oO);XNo=r(ist,"FlaubertForQuestionAnsweringSimple"),ist.forEach(t),zNo=r(o7e," (FlauBERT model)"),o7e.forEach(t),WNo=i(X),Ov=n(X,"LI",{});var r7e=s(Ov);Fme=n(r7e,"STRONG",{});var dst=s(Fme);QNo=r(dst,"fnet"),dst.forEach(t),HNo=r(r7e," \u2014 "),rO=n(r7e,"A",{href:!0});var cst=s(rO);UNo=r(cst,"FNetForQuestionAnswering"),cst.forEach(t),JNo=r(r7e," (FNet model)"),r7e.forEach(t),YNo=i(X),Vv=n(X,"LI",{});var t7e=s(Vv);Tme=n(t7e,"STRONG",{});var fst=s(Tme);KNo=r(fst,"funnel"),fst.forEach(t),ZNo=r(t7e," \u2014 "),tO=n(t7e,"A",{href:!0});var mst=s(tO);ejo=r(mst,"FunnelForQuestionAnswering"),mst.forEach(t),ojo=r(t7e," (Funnel Transformer model)"),t7e.forEach(t),rjo=i(X),Xv=n(X,"LI",{});var a7e=s(Xv);Mme=n(a7e,"STRONG",{});var gst=s(Mme);tjo=r(gst,"gptj"),gst.forEach(t),ajo=r(a7e," \u2014 "),aO=n(a7e,"A",{href:!0});var hst=s(aO);njo=r(hst,"GPTJForQuestionAnswering"),hst.forEach(t),sjo=r(a7e," (GPT-J model)"),a7e.forEach(t),ljo=i(X),zv=n(X,"LI",{});var n7e=s(zv);Eme=n(n7e,"STRONG",{});var pst=s(Eme);ijo=r(pst,"ibert"),pst.forEach(t),djo=r(n7e," \u2014 "),nO=n(n7e,"A",{href:!0});var ust=s(nO);cjo=r(ust,"IBertForQuestionAnswering"),ust.forEach(t),fjo=r(n7e," (I-BERT model)"),n7e.forEach(t),mjo=i(X),Wv=n(X,"LI",{});var s7e=s(Wv);Cme=n(s7e,"STRONG",{});var _st=s(Cme);gjo=r(_st,"layoutlmv2"),_st.forEach(t),hjo=r(s7e," \u2014 "),sO=n(s7e,"A",{href:!0});var bst=s(sO);pjo=r(bst,"LayoutLMv2ForQuestionAnswering"),bst.forEach(t),ujo=r(s7e," (LayoutLMv2 model)"),s7e.forEach(t),_jo=i(X),Qv=n(X,"LI",{});var l7e=s(Qv);wme=n(l7e,"STRONG",{});var vst=s(wme);bjo=r(vst,"led"),vst.forEach(t),vjo=r(l7e," \u2014 "),lO=n(l7e,"A",{href:!0});var Fst=s(lO);Fjo=r(Fst,"LEDForQuestionAnswering"),Fst.forEach(t),Tjo=r(l7e," (LED model)"),l7e.forEach(t),Mjo=i(X),Hv=n(X,"LI",{});var i7e=s(Hv);Ame=n(i7e,"STRONG",{});var Tst=s(Ame);Ejo=r(Tst,"longformer"),Tst.forEach(t),Cjo=r(i7e," \u2014 "),iO=n(i7e,"A",{href:!0});var Mst=s(iO);wjo=r(Mst,"LongformerForQuestionAnswering"),Mst.forEach(t),Ajo=r(i7e," (Longformer model)"),i7e.forEach(t),yjo=i(X),Uv=n(X,"LI",{});var d7e=s(Uv);yme=n(d7e,"STRONG",{});var Est=s(yme);Ljo=r(Est,"lxmert"),Est.forEach(t),xjo=r(d7e," \u2014 "),dO=n(d7e,"A",{href:!0});var Cst=s(dO);$jo=r(Cst,"LxmertForQuestionAnswering"),Cst.forEach(t),kjo=r(d7e," (LXMERT model)"),d7e.forEach(t),Sjo=i(X),Jv=n(X,"LI",{});var c7e=s(Jv);Lme=n(c7e,"STRONG",{});var wst=s(Lme);Rjo=r(wst,"mbart"),wst.forEach(t),Bjo=r(c7e," \u2014 "),cO=n(c7e,"A",{href:!0});var Ast=s(cO);Pjo=r(Ast,"MBartForQuestionAnswering"),Ast.forEach(t),Ijo=r(c7e," (mBART model)"),c7e.forEach(t),qjo=i(X),Yv=n(X,"LI",{});var f7e=s(Yv);xme=n(f7e,"STRONG",{});var yst=s(xme);Njo=r(yst,"megatron-bert"),yst.forEach(t),jjo=r(f7e," \u2014 "),fO=n(f7e,"A",{href:!0});var Lst=s(fO);Djo=r(Lst,"MegatronBertForQuestionAnswering"),Lst.forEach(t),Gjo=r(f7e," (MegatronBert model)"),f7e.forEach(t),Ojo=i(X),Kv=n(X,"LI",{});var m7e=s(Kv);$me=n(m7e,"STRONG",{});var xst=s($me);Vjo=r(xst,"mobilebert"),xst.forEach(t),Xjo=r(m7e," \u2014 "),mO=n(m7e,"A",{href:!0});var $st=s(mO);zjo=r($st,"MobileBertForQuestionAnswering"),$st.forEach(t),Wjo=r(m7e," (MobileBERT model)"),m7e.forEach(t),Qjo=i(X),Zv=n(X,"LI",{});var g7e=s(Zv);kme=n(g7e,"STRONG",{});var kst=s(kme);Hjo=r(kst,"mpnet"),kst.forEach(t),Ujo=r(g7e," \u2014 "),gO=n(g7e,"A",{href:!0});var Sst=s(gO);Jjo=r(Sst,"MPNetForQuestionAnswering"),Sst.forEach(t),Yjo=r(g7e," (MPNet model)"),g7e.forEach(t),Kjo=i(X),eF=n(X,"LI",{});var h7e=s(eF);Sme=n(h7e,"STRONG",{});var Rst=s(Sme);Zjo=r(Rst,"nystromformer"),Rst.forEach(t),eDo=r(h7e," \u2014 "),hO=n(h7e,"A",{href:!0});var Bst=s(hO);oDo=r(Bst,"NystromformerForQuestionAnswering"),Bst.forEach(t),rDo=r(h7e," (Nystromformer model)"),h7e.forEach(t),tDo=i(X),oF=n(X,"LI",{});var p7e=s(oF);Rme=n(p7e,"STRONG",{});var Pst=s(Rme);aDo=r(Pst,"qdqbert"),Pst.forEach(t),nDo=r(p7e," \u2014 "),pO=n(p7e,"A",{href:!0});var Ist=s(pO);sDo=r(Ist,"QDQBertForQuestionAnswering"),Ist.forEach(t),lDo=r(p7e," (QDQBert model)"),p7e.forEach(t),iDo=i(X),rF=n(X,"LI",{});var u7e=s(rF);Bme=n(u7e,"STRONG",{});var qst=s(Bme);dDo=r(qst,"reformer"),qst.forEach(t),cDo=r(u7e," \u2014 "),uO=n(u7e,"A",{href:!0});var Nst=s(uO);fDo=r(Nst,"ReformerForQuestionAnswering"),Nst.forEach(t),mDo=r(u7e," (Reformer model)"),u7e.forEach(t),gDo=i(X),tF=n(X,"LI",{});var _7e=s(tF);Pme=n(_7e,"STRONG",{});var jst=s(Pme);hDo=r(jst,"rembert"),jst.forEach(t),pDo=r(_7e," \u2014 "),_O=n(_7e,"A",{href:!0});var Dst=s(_O);uDo=r(Dst,"RemBertForQuestionAnswering"),Dst.forEach(t),_Do=r(_7e," (RemBERT model)"),_7e.forEach(t),bDo=i(X),aF=n(X,"LI",{});var b7e=s(aF);Ime=n(b7e,"STRONG",{});var Gst=s(Ime);vDo=r(Gst,"roberta"),Gst.forEach(t),FDo=r(b7e," \u2014 "),bO=n(b7e,"A",{href:!0});var Ost=s(bO);TDo=r(Ost,"RobertaForQuestionAnswering"),Ost.forEach(t),MDo=r(b7e," (RoBERTa model)"),b7e.forEach(t),EDo=i(X),nF=n(X,"LI",{});var v7e=s(nF);qme=n(v7e,"STRONG",{});var Vst=s(qme);CDo=r(Vst,"roformer"),Vst.forEach(t),wDo=r(v7e," \u2014 "),vO=n(v7e,"A",{href:!0});var Xst=s(vO);ADo=r(Xst,"RoFormerForQuestionAnswering"),Xst.forEach(t),yDo=r(v7e," (RoFormer model)"),v7e.forEach(t),LDo=i(X),sF=n(X,"LI",{});var F7e=s(sF);Nme=n(F7e,"STRONG",{});var zst=s(Nme);xDo=r(zst,"splinter"),zst.forEach(t),$Do=r(F7e," \u2014 "),FO=n(F7e,"A",{href:!0});var Wst=s(FO);kDo=r(Wst,"SplinterForQuestionAnswering"),Wst.forEach(t),SDo=r(F7e," (Splinter model)"),F7e.forEach(t),RDo=i(X),lF=n(X,"LI",{});var T7e=s(lF);jme=n(T7e,"STRONG",{});var Qst=s(jme);BDo=r(Qst,"squeezebert"),Qst.forEach(t),PDo=r(T7e," \u2014 "),TO=n(T7e,"A",{href:!0});var Hst=s(TO);IDo=r(Hst,"SqueezeBertForQuestionAnswering"),Hst.forEach(t),qDo=r(T7e," (SqueezeBERT model)"),T7e.forEach(t),NDo=i(X),iF=n(X,"LI",{});var M7e=s(iF);Dme=n(M7e,"STRONG",{});var Ust=s(Dme);jDo=r(Ust,"xlm"),Ust.forEach(t),DDo=r(M7e," \u2014 "),MO=n(M7e,"A",{href:!0});var Jst=s(MO);GDo=r(Jst,"XLMForQuestionAnsweringSimple"),Jst.forEach(t),ODo=r(M7e," (XLM model)"),M7e.forEach(t),VDo=i(X),dF=n(X,"LI",{});var E7e=s(dF);Gme=n(E7e,"STRONG",{});var Yst=s(Gme);XDo=r(Yst,"xlm-roberta"),Yst.forEach(t),zDo=r(E7e," \u2014 "),EO=n(E7e,"A",{href:!0});var Kst=s(EO);WDo=r(Kst,"XLMRobertaForQuestionAnswering"),Kst.forEach(t),QDo=r(E7e," (XLM-RoBERTa model)"),E7e.forEach(t),HDo=i(X),cF=n(X,"LI",{});var C7e=s(cF);Ome=n(C7e,"STRONG",{});var Zst=s(Ome);UDo=r(Zst,"xlm-roberta-xl"),Zst.forEach(t),JDo=r(C7e," \u2014 "),CO=n(C7e,"A",{href:!0});var elt=s(CO);YDo=r(elt,"XLMRobertaXLForQuestionAnswering"),elt.forEach(t),KDo=r(C7e," (XLM-RoBERTa-XL model)"),C7e.forEach(t),ZDo=i(X),fF=n(X,"LI",{});var w7e=s(fF);Vme=n(w7e,"STRONG",{});var olt=s(Vme);eGo=r(olt,"xlnet"),olt.forEach(t),oGo=r(w7e," \u2014 "),wO=n(w7e,"A",{href:!0});var rlt=s(wO);rGo=r(rlt,"XLNetForQuestionAnsweringSimple"),rlt.forEach(t),tGo=r(w7e," (XLNet model)"),w7e.forEach(t),aGo=i(X),mF=n(X,"LI",{});var A7e=s(mF);Xme=n(A7e,"STRONG",{});var tlt=s(Xme);nGo=r(tlt,"yoso"),tlt.forEach(t),sGo=r(A7e," \u2014 "),AO=n(A7e,"A",{href:!0});var alt=s(AO);lGo=r(alt,"YosoForQuestionAnswering"),alt.forEach(t),iGo=r(A7e," (YOSO model)"),A7e.forEach(t),X.forEach(t),dGo=i(sa),gF=n(sa,"P",{});var y7e=s(gF);cGo=r(y7e,"The model is set in evaluation mode by default using "),zme=n(y7e,"CODE",{});var nlt=s(zme);fGo=r(nlt,"model.eval()"),nlt.forEach(t),mGo=r(y7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=n(y7e,"CODE",{});var slt=s(Wme);gGo=r(slt,"model.train()"),slt.forEach(t),y7e.forEach(t),hGo=i(sa),T(hF.$$.fragment,sa),sa.forEach(t),Xs.forEach(t),WBe=i(f),Qi=n(f,"H2",{class:!0});var HIe=s(Qi);pF=n(HIe,"A",{id:!0,class:!0,href:!0});var llt=s(pF);Qme=n(llt,"SPAN",{});var ilt=s(Qme);T(z0.$$.fragment,ilt),ilt.forEach(t),llt.forEach(t),pGo=i(HIe),Hme=n(HIe,"SPAN",{});var dlt=s(Hme);uGo=r(dlt,"AutoModelForTableQuestionAnswering"),dlt.forEach(t),HIe.forEach(t),QBe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(W0.$$.fragment,zs),_Go=i(zs),Hi=n(zs,"P",{});var RY=s(Hi);bGo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yO=n(RY,"A",{href:!0});var clt=s(yO);vGo=r(clt,"from_pretrained()"),clt.forEach(t),FGo=r(RY," class method or the "),LO=n(RY,"A",{href:!0});var flt=s(LO);TGo=r(flt,"from_config()"),flt.forEach(t),MGo=r(RY,` class
method.`),RY.forEach(t),EGo=i(zs),Q0=n(zs,"P",{});var UIe=s(Q0);CGo=r(UIe,"This class cannot be instantiated directly using "),Ume=n(UIe,"CODE",{});var mlt=s(Ume);wGo=r(mlt,"__init__()"),mlt.forEach(t),AGo=r(UIe," (throws an error)."),UIe.forEach(t),yGo=i(zs),ct=n(zs,"DIV",{class:!0});var J3=s(ct);T(H0.$$.fragment,J3),LGo=i(J3),Jme=n(J3,"P",{});var glt=s(Jme);xGo=r(glt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),glt.forEach(t),$Go=i(J3),Ui=n(J3,"P",{});var BY=s(Ui);kGo=r(BY,`Note:
Loading a model from its configuration file does `),Yme=n(BY,"STRONG",{});var hlt=s(Yme);SGo=r(hlt,"not"),hlt.forEach(t),RGo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(BY,"A",{href:!0});var plt=s(xO);BGo=r(plt,"from_pretrained()"),plt.forEach(t),PGo=r(BY," to load the model weights."),BY.forEach(t),IGo=i(J3),T(uF.$$.fragment,J3),J3.forEach(t),qGo=i(zs),ao=n(zs,"DIV",{class:!0});var la=s(ao);T(U0.$$.fragment,la),NGo=i(la),Kme=n(la,"P",{});var ult=s(Kme);jGo=r(ult,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ult.forEach(t),DGo=i(la),Ba=n(la,"P",{});var Y3=s(Ba);GGo=r(Y3,"The model class to instantiate is selected based on the "),Zme=n(Y3,"CODE",{});var _lt=s(Zme);OGo=r(_lt,"model_type"),_lt.forEach(t),VGo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),ege=n(Y3,"CODE",{});var blt=s(ege);XGo=r(blt,"pretrained_model_name_or_path"),blt.forEach(t),zGo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(Y3,"CODE",{});var vlt=s(oge);WGo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),QGo=r(Y3,":"),Y3.forEach(t),HGo=i(la),rge=n(la,"UL",{});var Flt=s(rge);_F=n(Flt,"LI",{});var L7e=s(_F);tge=n(L7e,"STRONG",{});var Tlt=s(tge);UGo=r(Tlt,"tapas"),Tlt.forEach(t),JGo=r(L7e," \u2014 "),$O=n(L7e,"A",{href:!0});var Mlt=s($O);YGo=r(Mlt,"TapasForQuestionAnswering"),Mlt.forEach(t),KGo=r(L7e," (TAPAS model)"),L7e.forEach(t),Flt.forEach(t),ZGo=i(la),bF=n(la,"P",{});var x7e=s(bF);eOo=r(x7e,"The model is set in evaluation mode by default using "),age=n(x7e,"CODE",{});var Elt=s(age);oOo=r(Elt,"model.eval()"),Elt.forEach(t),rOo=r(x7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(x7e,"CODE",{});var Clt=s(nge);tOo=r(Clt,"model.train()"),Clt.forEach(t),x7e.forEach(t),aOo=i(la),T(vF.$$.fragment,la),la.forEach(t),zs.forEach(t),HBe=i(f),Ji=n(f,"H2",{class:!0});var JIe=s(Ji);FF=n(JIe,"A",{id:!0,class:!0,href:!0});var wlt=s(FF);sge=n(wlt,"SPAN",{});var Alt=s(sge);T(J0.$$.fragment,Alt),Alt.forEach(t),wlt.forEach(t),nOo=i(JIe),lge=n(JIe,"SPAN",{});var ylt=s(lge);sOo=r(ylt,"AutoModelForImageClassification"),ylt.forEach(t),JIe.forEach(t),UBe=i(f),qo=n(f,"DIV",{class:!0});var Ws=s(qo);T(Y0.$$.fragment,Ws),lOo=i(Ws),Yi=n(Ws,"P",{});var PY=s(Yi);iOo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kO=n(PY,"A",{href:!0});var Llt=s(kO);dOo=r(Llt,"from_pretrained()"),Llt.forEach(t),cOo=r(PY," class method or the "),SO=n(PY,"A",{href:!0});var xlt=s(SO);fOo=r(xlt,"from_config()"),xlt.forEach(t),mOo=r(PY,` class
method.`),PY.forEach(t),gOo=i(Ws),K0=n(Ws,"P",{});var YIe=s(K0);hOo=r(YIe,"This class cannot be instantiated directly using "),ige=n(YIe,"CODE",{});var $lt=s(ige);pOo=r($lt,"__init__()"),$lt.forEach(t),uOo=r(YIe," (throws an error)."),YIe.forEach(t),_Oo=i(Ws),ft=n(Ws,"DIV",{class:!0});var K3=s(ft);T(Z0.$$.fragment,K3),bOo=i(K3),dge=n(K3,"P",{});var klt=s(dge);vOo=r(klt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),klt.forEach(t),FOo=i(K3),Ki=n(K3,"P",{});var IY=s(Ki);TOo=r(IY,`Note:
Loading a model from its configuration file does `),cge=n(IY,"STRONG",{});var Slt=s(cge);MOo=r(Slt,"not"),Slt.forEach(t),EOo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=n(IY,"A",{href:!0});var Rlt=s(RO);COo=r(Rlt,"from_pretrained()"),Rlt.forEach(t),wOo=r(IY," to load the model weights."),IY.forEach(t),AOo=i(K3),T(TF.$$.fragment,K3),K3.forEach(t),yOo=i(Ws),no=n(Ws,"DIV",{class:!0});var ia=s(no);T(ey.$$.fragment,ia),LOo=i(ia),fge=n(ia,"P",{});var Blt=s(fge);xOo=r(Blt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Blt.forEach(t),$Oo=i(ia),Pa=n(ia,"P",{});var Z3=s(Pa);kOo=r(Z3,"The model class to instantiate is selected based on the "),mge=n(Z3,"CODE",{});var Plt=s(mge);SOo=r(Plt,"model_type"),Plt.forEach(t),ROo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),gge=n(Z3,"CODE",{});var Ilt=s(gge);BOo=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),POo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(Z3,"CODE",{});var qlt=s(hge);IOo=r(qlt,"pretrained_model_name_or_path"),qlt.forEach(t),qOo=r(Z3,":"),Z3.forEach(t),NOo=i(ia),Fe=n(ia,"UL",{});var Ee=s(Fe);MF=n(Ee,"LI",{});var $7e=s(MF);pge=n($7e,"STRONG",{});var Nlt=s(pge);jOo=r(Nlt,"beit"),Nlt.forEach(t),DOo=r($7e," \u2014 "),BO=n($7e,"A",{href:!0});var jlt=s(BO);GOo=r(jlt,"BeitForImageClassification"),jlt.forEach(t),OOo=r($7e," (BEiT model)"),$7e.forEach(t),VOo=i(Ee),EF=n(Ee,"LI",{});var k7e=s(EF);uge=n(k7e,"STRONG",{});var Dlt=s(uge);XOo=r(Dlt,"convnext"),Dlt.forEach(t),zOo=r(k7e," \u2014 "),PO=n(k7e,"A",{href:!0});var Glt=s(PO);WOo=r(Glt,"ConvNextForImageClassification"),Glt.forEach(t),QOo=r(k7e," (ConvNext model)"),k7e.forEach(t),HOo=i(Ee),CF=n(Ee,"LI",{});var S7e=s(CF);_ge=n(S7e,"STRONG",{});var Olt=s(_ge);UOo=r(Olt,"data2vec-vision"),Olt.forEach(t),JOo=r(S7e," \u2014 "),IO=n(S7e,"A",{href:!0});var Vlt=s(IO);YOo=r(Vlt,"Data2VecVisionForImageClassification"),Vlt.forEach(t),KOo=r(S7e," (Data2VecVision model)"),S7e.forEach(t),ZOo=i(Ee),Ls=n(Ee,"LI",{});var S9=s(Ls);bge=n(S9,"STRONG",{});var Xlt=s(bge);eVo=r(Xlt,"deit"),Xlt.forEach(t),oVo=r(S9," \u2014 "),qO=n(S9,"A",{href:!0});var zlt=s(qO);rVo=r(zlt,"DeiTForImageClassification"),zlt.forEach(t),tVo=r(S9," or "),NO=n(S9,"A",{href:!0});var Wlt=s(NO);aVo=r(Wlt,"DeiTForImageClassificationWithTeacher"),Wlt.forEach(t),nVo=r(S9," (DeiT model)"),S9.forEach(t),sVo=i(Ee),wF=n(Ee,"LI",{});var R7e=s(wF);vge=n(R7e,"STRONG",{});var Qlt=s(vge);lVo=r(Qlt,"imagegpt"),Qlt.forEach(t),iVo=r(R7e," \u2014 "),jO=n(R7e,"A",{href:!0});var Hlt=s(jO);dVo=r(Hlt,"ImageGPTForImageClassification"),Hlt.forEach(t),cVo=r(R7e," (ImageGPT model)"),R7e.forEach(t),fVo=i(Ee),mt=n(Ee,"LI",{});var rf=s(mt);Fge=n(rf,"STRONG",{});var Ult=s(Fge);mVo=r(Ult,"perceiver"),Ult.forEach(t),gVo=r(rf," \u2014 "),DO=n(rf,"A",{href:!0});var Jlt=s(DO);hVo=r(Jlt,"PerceiverForImageClassificationLearned"),Jlt.forEach(t),pVo=r(rf," or "),GO=n(rf,"A",{href:!0});var Ylt=s(GO);uVo=r(Ylt,"PerceiverForImageClassificationFourier"),Ylt.forEach(t),_Vo=r(rf," or "),OO=n(rf,"A",{href:!0});var Klt=s(OO);bVo=r(Klt,"PerceiverForImageClassificationConvProcessing"),Klt.forEach(t),vVo=r(rf," (Perceiver model)"),rf.forEach(t),FVo=i(Ee),AF=n(Ee,"LI",{});var B7e=s(AF);Tge=n(B7e,"STRONG",{});var Zlt=s(Tge);TVo=r(Zlt,"poolformer"),Zlt.forEach(t),MVo=r(B7e," \u2014 "),VO=n(B7e,"A",{href:!0});var eit=s(VO);EVo=r(eit,"PoolFormerForImageClassification"),eit.forEach(t),CVo=r(B7e," (PoolFormer model)"),B7e.forEach(t),wVo=i(Ee),yF=n(Ee,"LI",{});var P7e=s(yF);Mge=n(P7e,"STRONG",{});var oit=s(Mge);AVo=r(oit,"regnet"),oit.forEach(t),yVo=r(P7e," \u2014 "),XO=n(P7e,"A",{href:!0});var rit=s(XO);LVo=r(rit,"RegNetForImageClassification"),rit.forEach(t),xVo=r(P7e," (RegNet model)"),P7e.forEach(t),$Vo=i(Ee),LF=n(Ee,"LI",{});var I7e=s(LF);Ege=n(I7e,"STRONG",{});var tit=s(Ege);kVo=r(tit,"resnet"),tit.forEach(t),SVo=r(I7e," \u2014 "),zO=n(I7e,"A",{href:!0});var ait=s(zO);RVo=r(ait,"ResNetForImageClassification"),ait.forEach(t),BVo=r(I7e," (ResNet model)"),I7e.forEach(t),PVo=i(Ee),xF=n(Ee,"LI",{});var q7e=s(xF);Cge=n(q7e,"STRONG",{});var nit=s(Cge);IVo=r(nit,"segformer"),nit.forEach(t),qVo=r(q7e," \u2014 "),WO=n(q7e,"A",{href:!0});var sit=s(WO);NVo=r(sit,"SegformerForImageClassification"),sit.forEach(t),jVo=r(q7e," (SegFormer model)"),q7e.forEach(t),DVo=i(Ee),$F=n(Ee,"LI",{});var N7e=s($F);wge=n(N7e,"STRONG",{});var lit=s(wge);GVo=r(lit,"swin"),lit.forEach(t),OVo=r(N7e," \u2014 "),QO=n(N7e,"A",{href:!0});var iit=s(QO);VVo=r(iit,"SwinForImageClassification"),iit.forEach(t),XVo=r(N7e," (Swin model)"),N7e.forEach(t),zVo=i(Ee),kF=n(Ee,"LI",{});var j7e=s(kF);Age=n(j7e,"STRONG",{});var dit=s(Age);WVo=r(dit,"van"),dit.forEach(t),QVo=r(j7e," \u2014 "),HO=n(j7e,"A",{href:!0});var cit=s(HO);HVo=r(cit,"VanForImageClassification"),cit.forEach(t),UVo=r(j7e," (VAN model)"),j7e.forEach(t),JVo=i(Ee),SF=n(Ee,"LI",{});var D7e=s(SF);yge=n(D7e,"STRONG",{});var fit=s(yge);YVo=r(fit,"vit"),fit.forEach(t),KVo=r(D7e," \u2014 "),UO=n(D7e,"A",{href:!0});var mit=s(UO);ZVo=r(mit,"ViTForImageClassification"),mit.forEach(t),eXo=r(D7e," (ViT model)"),D7e.forEach(t),Ee.forEach(t),oXo=i(ia),RF=n(ia,"P",{});var G7e=s(RF);rXo=r(G7e,"The model is set in evaluation mode by default using "),Lge=n(G7e,"CODE",{});var git=s(Lge);tXo=r(git,"model.eval()"),git.forEach(t),aXo=r(G7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(G7e,"CODE",{});var hit=s(xge);nXo=r(hit,"model.train()"),hit.forEach(t),G7e.forEach(t),sXo=i(ia),T(BF.$$.fragment,ia),ia.forEach(t),Ws.forEach(t),JBe=i(f),Zi=n(f,"H2",{class:!0});var KIe=s(Zi);PF=n(KIe,"A",{id:!0,class:!0,href:!0});var pit=s(PF);$ge=n(pit,"SPAN",{});var uit=s($ge);T(oy.$$.fragment,uit),uit.forEach(t),pit.forEach(t),lXo=i(KIe),kge=n(KIe,"SPAN",{});var _it=s(kge);iXo=r(_it,"AutoModelForVision2Seq"),_it.forEach(t),KIe.forEach(t),YBe=i(f),No=n(f,"DIV",{class:!0});var Qs=s(No);T(ry.$$.fragment,Qs),dXo=i(Qs),ed=n(Qs,"P",{});var qY=s(ed);cXo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JO=n(qY,"A",{href:!0});var bit=s(JO);fXo=r(bit,"from_pretrained()"),bit.forEach(t),mXo=r(qY," class method or the "),YO=n(qY,"A",{href:!0});var vit=s(YO);gXo=r(vit,"from_config()"),vit.forEach(t),hXo=r(qY,` class
method.`),qY.forEach(t),pXo=i(Qs),ty=n(Qs,"P",{});var ZIe=s(ty);uXo=r(ZIe,"This class cannot be instantiated directly using "),Sge=n(ZIe,"CODE",{});var Fit=s(Sge);_Xo=r(Fit,"__init__()"),Fit.forEach(t),bXo=r(ZIe," (throws an error)."),ZIe.forEach(t),vXo=i(Qs),gt=n(Qs,"DIV",{class:!0});var ew=s(gt);T(ay.$$.fragment,ew),FXo=i(ew),Rge=n(ew,"P",{});var Tit=s(Rge);TXo=r(Tit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tit.forEach(t),MXo=i(ew),od=n(ew,"P",{});var NY=s(od);EXo=r(NY,`Note:
Loading a model from its configuration file does `),Bge=n(NY,"STRONG",{});var Mit=s(Bge);CXo=r(Mit,"not"),Mit.forEach(t),wXo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=n(NY,"A",{href:!0});var Eit=s(KO);AXo=r(Eit,"from_pretrained()"),Eit.forEach(t),yXo=r(NY," to load the model weights."),NY.forEach(t),LXo=i(ew),T(IF.$$.fragment,ew),ew.forEach(t),xXo=i(Qs),so=n(Qs,"DIV",{class:!0});var da=s(so);T(ny.$$.fragment,da),$Xo=i(da),Pge=n(da,"P",{});var Cit=s(Pge);kXo=r(Cit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Cit.forEach(t),SXo=i(da),Ia=n(da,"P",{});var ow=s(Ia);RXo=r(ow,"The model class to instantiate is selected based on the "),Ige=n(ow,"CODE",{});var wit=s(Ige);BXo=r(wit,"model_type"),wit.forEach(t),PXo=r(ow,` property of the config object (either
passed as an argument or loaded from `),qge=n(ow,"CODE",{});var Ait=s(qge);IXo=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),qXo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=n(ow,"CODE",{});var yit=s(Nge);NXo=r(yit,"pretrained_model_name_or_path"),yit.forEach(t),jXo=r(ow,":"),ow.forEach(t),DXo=i(da),jge=n(da,"UL",{});var Lit=s(jge);qF=n(Lit,"LI",{});var O7e=s(qF);Dge=n(O7e,"STRONG",{});var xit=s(Dge);GXo=r(xit,"vision-encoder-decoder"),xit.forEach(t),OXo=r(O7e," \u2014 "),ZO=n(O7e,"A",{href:!0});var $it=s(ZO);VXo=r($it,"VisionEncoderDecoderModel"),$it.forEach(t),XXo=r(O7e," (Vision Encoder decoder model)"),O7e.forEach(t),Lit.forEach(t),zXo=i(da),NF=n(da,"P",{});var V7e=s(NF);WXo=r(V7e,"The model is set in evaluation mode by default using "),Gge=n(V7e,"CODE",{});var kit=s(Gge);QXo=r(kit,"model.eval()"),kit.forEach(t),HXo=r(V7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(V7e,"CODE",{});var Sit=s(Oge);UXo=r(Sit,"model.train()"),Sit.forEach(t),V7e.forEach(t),JXo=i(da),T(jF.$$.fragment,da),da.forEach(t),Qs.forEach(t),KBe=i(f),rd=n(f,"H2",{class:!0});var eqe=s(rd);DF=n(eqe,"A",{id:!0,class:!0,href:!0});var Rit=s(DF);Vge=n(Rit,"SPAN",{});var Bit=s(Vge);T(sy.$$.fragment,Bit),Bit.forEach(t),Rit.forEach(t),YXo=i(eqe),Xge=n(eqe,"SPAN",{});var Pit=s(Xge);KXo=r(Pit,"AutoModelForAudioClassification"),Pit.forEach(t),eqe.forEach(t),ZBe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(ly.$$.fragment,Hs),ZXo=i(Hs),td=n(Hs,"P",{});var jY=s(td);ezo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),eV=n(jY,"A",{href:!0});var Iit=s(eV);ozo=r(Iit,"from_pretrained()"),Iit.forEach(t),rzo=r(jY," class method or the "),oV=n(jY,"A",{href:!0});var qit=s(oV);tzo=r(qit,"from_config()"),qit.forEach(t),azo=r(jY,` class
method.`),jY.forEach(t),nzo=i(Hs),iy=n(Hs,"P",{});var oqe=s(iy);szo=r(oqe,"This class cannot be instantiated directly using "),zge=n(oqe,"CODE",{});var Nit=s(zge);lzo=r(Nit,"__init__()"),Nit.forEach(t),izo=r(oqe," (throws an error)."),oqe.forEach(t),dzo=i(Hs),ht=n(Hs,"DIV",{class:!0});var rw=s(ht);T(dy.$$.fragment,rw),czo=i(rw),Wge=n(rw,"P",{});var jit=s(Wge);fzo=r(jit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),jit.forEach(t),mzo=i(rw),ad=n(rw,"P",{});var DY=s(ad);gzo=r(DY,`Note:
Loading a model from its configuration file does `),Qge=n(DY,"STRONG",{});var Dit=s(Qge);hzo=r(Dit,"not"),Dit.forEach(t),pzo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(DY,"A",{href:!0});var Git=s(rV);uzo=r(Git,"from_pretrained()"),Git.forEach(t),_zo=r(DY," to load the model weights."),DY.forEach(t),bzo=i(rw),T(GF.$$.fragment,rw),rw.forEach(t),vzo=i(Hs),lo=n(Hs,"DIV",{class:!0});var ca=s(lo);T(cy.$$.fragment,ca),Fzo=i(ca),Hge=n(ca,"P",{});var Oit=s(Hge);Tzo=r(Oit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Oit.forEach(t),Mzo=i(ca),qa=n(ca,"P",{});var tw=s(qa);Ezo=r(tw,"The model class to instantiate is selected based on the "),Uge=n(tw,"CODE",{});var Vit=s(Uge);Czo=r(Vit,"model_type"),Vit.forEach(t),wzo=r(tw,` property of the config object (either
passed as an argument or loaded from `),Jge=n(tw,"CODE",{});var Xit=s(Jge);Azo=r(Xit,"pretrained_model_name_or_path"),Xit.forEach(t),yzo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(tw,"CODE",{});var zit=s(Yge);Lzo=r(zit,"pretrained_model_name_or_path"),zit.forEach(t),xzo=r(tw,":"),tw.forEach(t),$zo=i(ca),ke=n(ca,"UL",{});var Ge=s(ke);OF=n(Ge,"LI",{});var X7e=s(OF);Kge=n(X7e,"STRONG",{});var Wit=s(Kge);kzo=r(Wit,"data2vec-audio"),Wit.forEach(t),Szo=r(X7e," \u2014 "),tV=n(X7e,"A",{href:!0});var Qit=s(tV);Rzo=r(Qit,"Data2VecAudioForSequenceClassification"),Qit.forEach(t),Bzo=r(X7e," (Data2VecAudio model)"),X7e.forEach(t),Pzo=i(Ge),VF=n(Ge,"LI",{});var z7e=s(VF);Zge=n(z7e,"STRONG",{});var Hit=s(Zge);Izo=r(Hit,"hubert"),Hit.forEach(t),qzo=r(z7e," \u2014 "),aV=n(z7e,"A",{href:!0});var Uit=s(aV);Nzo=r(Uit,"HubertForSequenceClassification"),Uit.forEach(t),jzo=r(z7e," (Hubert model)"),z7e.forEach(t),Dzo=i(Ge),XF=n(Ge,"LI",{});var W7e=s(XF);ehe=n(W7e,"STRONG",{});var Jit=s(ehe);Gzo=r(Jit,"sew"),Jit.forEach(t),Ozo=r(W7e," \u2014 "),nV=n(W7e,"A",{href:!0});var Yit=s(nV);Vzo=r(Yit,"SEWForSequenceClassification"),Yit.forEach(t),Xzo=r(W7e," (SEW model)"),W7e.forEach(t),zzo=i(Ge),zF=n(Ge,"LI",{});var Q7e=s(zF);ohe=n(Q7e,"STRONG",{});var Kit=s(ohe);Wzo=r(Kit,"sew-d"),Kit.forEach(t),Qzo=r(Q7e," \u2014 "),sV=n(Q7e,"A",{href:!0});var Zit=s(sV);Hzo=r(Zit,"SEWDForSequenceClassification"),Zit.forEach(t),Uzo=r(Q7e," (SEW-D model)"),Q7e.forEach(t),Jzo=i(Ge),WF=n(Ge,"LI",{});var H7e=s(WF);rhe=n(H7e,"STRONG",{});var edt=s(rhe);Yzo=r(edt,"unispeech"),edt.forEach(t),Kzo=r(H7e," \u2014 "),lV=n(H7e,"A",{href:!0});var odt=s(lV);Zzo=r(odt,"UniSpeechForSequenceClassification"),odt.forEach(t),eWo=r(H7e," (UniSpeech model)"),H7e.forEach(t),oWo=i(Ge),QF=n(Ge,"LI",{});var U7e=s(QF);the=n(U7e,"STRONG",{});var rdt=s(the);rWo=r(rdt,"unispeech-sat"),rdt.forEach(t),tWo=r(U7e," \u2014 "),iV=n(U7e,"A",{href:!0});var tdt=s(iV);aWo=r(tdt,"UniSpeechSatForSequenceClassification"),tdt.forEach(t),nWo=r(U7e," (UniSpeechSat model)"),U7e.forEach(t),sWo=i(Ge),HF=n(Ge,"LI",{});var J7e=s(HF);ahe=n(J7e,"STRONG",{});var adt=s(ahe);lWo=r(adt,"wav2vec2"),adt.forEach(t),iWo=r(J7e," \u2014 "),dV=n(J7e,"A",{href:!0});var ndt=s(dV);dWo=r(ndt,"Wav2Vec2ForSequenceClassification"),ndt.forEach(t),cWo=r(J7e," (Wav2Vec2 model)"),J7e.forEach(t),fWo=i(Ge),UF=n(Ge,"LI",{});var Y7e=s(UF);nhe=n(Y7e,"STRONG",{});var sdt=s(nhe);mWo=r(sdt,"wav2vec2-conformer"),sdt.forEach(t),gWo=r(Y7e," \u2014 "),cV=n(Y7e,"A",{href:!0});var ldt=s(cV);hWo=r(ldt,"Wav2Vec2ConformerForSequenceClassification"),ldt.forEach(t),pWo=r(Y7e," (Wav2Vec2ConformerConformer model)"),Y7e.forEach(t),uWo=i(Ge),JF=n(Ge,"LI",{});var K7e=s(JF);she=n(K7e,"STRONG",{});var idt=s(she);_Wo=r(idt,"wavlm"),idt.forEach(t),bWo=r(K7e," \u2014 "),fV=n(K7e,"A",{href:!0});var ddt=s(fV);vWo=r(ddt,"WavLMForSequenceClassification"),ddt.forEach(t),FWo=r(K7e," (WavLM model)"),K7e.forEach(t),Ge.forEach(t),TWo=i(ca),YF=n(ca,"P",{});var Z7e=s(YF);MWo=r(Z7e,"The model is set in evaluation mode by default using "),lhe=n(Z7e,"CODE",{});var cdt=s(lhe);EWo=r(cdt,"model.eval()"),cdt.forEach(t),CWo=r(Z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(Z7e,"CODE",{});var fdt=s(ihe);wWo=r(fdt,"model.train()"),fdt.forEach(t),Z7e.forEach(t),AWo=i(ca),T(KF.$$.fragment,ca),ca.forEach(t),Hs.forEach(t),ePe=i(f),nd=n(f,"H2",{class:!0});var rqe=s(nd);ZF=n(rqe,"A",{id:!0,class:!0,href:!0});var mdt=s(ZF);dhe=n(mdt,"SPAN",{});var gdt=s(dhe);T(fy.$$.fragment,gdt),gdt.forEach(t),mdt.forEach(t),yWo=i(rqe),che=n(rqe,"SPAN",{});var hdt=s(che);LWo=r(hdt,"AutoModelForAudioFrameClassification"),hdt.forEach(t),rqe.forEach(t),oPe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(my.$$.fragment,Us),xWo=i(Us),sd=n(Us,"P",{});var GY=s(sd);$Wo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mV=n(GY,"A",{href:!0});var pdt=s(mV);kWo=r(pdt,"from_pretrained()"),pdt.forEach(t),SWo=r(GY," class method or the "),gV=n(GY,"A",{href:!0});var udt=s(gV);RWo=r(udt,"from_config()"),udt.forEach(t),BWo=r(GY,` class
method.`),GY.forEach(t),PWo=i(Us),gy=n(Us,"P",{});var tqe=s(gy);IWo=r(tqe,"This class cannot be instantiated directly using "),fhe=n(tqe,"CODE",{});var _dt=s(fhe);qWo=r(_dt,"__init__()"),_dt.forEach(t),NWo=r(tqe," (throws an error)."),tqe.forEach(t),jWo=i(Us),pt=n(Us,"DIV",{class:!0});var aw=s(pt);T(hy.$$.fragment,aw),DWo=i(aw),mhe=n(aw,"P",{});var bdt=s(mhe);GWo=r(bdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bdt.forEach(t),OWo=i(aw),ld=n(aw,"P",{});var OY=s(ld);VWo=r(OY,`Note:
Loading a model from its configuration file does `),ghe=n(OY,"STRONG",{});var vdt=s(ghe);XWo=r(vdt,"not"),vdt.forEach(t),zWo=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(OY,"A",{href:!0});var Fdt=s(hV);WWo=r(Fdt,"from_pretrained()"),Fdt.forEach(t),QWo=r(OY," to load the model weights."),OY.forEach(t),HWo=i(aw),T(e6.$$.fragment,aw),aw.forEach(t),UWo=i(Us),io=n(Us,"DIV",{class:!0});var fa=s(io);T(py.$$.fragment,fa),JWo=i(fa),hhe=n(fa,"P",{});var Tdt=s(hhe);YWo=r(Tdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Tdt.forEach(t),KWo=i(fa),Na=n(fa,"P",{});var nw=s(Na);ZWo=r(nw,"The model class to instantiate is selected based on the "),phe=n(nw,"CODE",{});var Mdt=s(phe);eQo=r(Mdt,"model_type"),Mdt.forEach(t),oQo=r(nw,` property of the config object (either
passed as an argument or loaded from `),uhe=n(nw,"CODE",{});var Edt=s(uhe);rQo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),tQo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(nw,"CODE",{});var Cdt=s(_he);aQo=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),nQo=r(nw,":"),nw.forEach(t),sQo=i(fa),Hr=n(fa,"UL",{});var Js=s(Hr);o6=n(Js,"LI",{});var exe=s(o6);bhe=n(exe,"STRONG",{});var wdt=s(bhe);lQo=r(wdt,"data2vec-audio"),wdt.forEach(t),iQo=r(exe," \u2014 "),pV=n(exe,"A",{href:!0});var Adt=s(pV);dQo=r(Adt,"Data2VecAudioForAudioFrameClassification"),Adt.forEach(t),cQo=r(exe," (Data2VecAudio model)"),exe.forEach(t),fQo=i(Js),r6=n(Js,"LI",{});var oxe=s(r6);vhe=n(oxe,"STRONG",{});var ydt=s(vhe);mQo=r(ydt,"unispeech-sat"),ydt.forEach(t),gQo=r(oxe," \u2014 "),uV=n(oxe,"A",{href:!0});var Ldt=s(uV);hQo=r(Ldt,"UniSpeechSatForAudioFrameClassification"),Ldt.forEach(t),pQo=r(oxe," (UniSpeechSat model)"),oxe.forEach(t),uQo=i(Js),t6=n(Js,"LI",{});var rxe=s(t6);Fhe=n(rxe,"STRONG",{});var xdt=s(Fhe);_Qo=r(xdt,"wav2vec2"),xdt.forEach(t),bQo=r(rxe," \u2014 "),_V=n(rxe,"A",{href:!0});var $dt=s(_V);vQo=r($dt,"Wav2Vec2ForAudioFrameClassification"),$dt.forEach(t),FQo=r(rxe," (Wav2Vec2 model)"),rxe.forEach(t),TQo=i(Js),a6=n(Js,"LI",{});var txe=s(a6);The=n(txe,"STRONG",{});var kdt=s(The);MQo=r(kdt,"wav2vec2-conformer"),kdt.forEach(t),EQo=r(txe," \u2014 "),bV=n(txe,"A",{href:!0});var Sdt=s(bV);CQo=r(Sdt,"Wav2Vec2ConformerForAudioFrameClassification"),Sdt.forEach(t),wQo=r(txe," (Wav2Vec2ConformerConformer model)"),txe.forEach(t),AQo=i(Js),n6=n(Js,"LI",{});var axe=s(n6);Mhe=n(axe,"STRONG",{});var Rdt=s(Mhe);yQo=r(Rdt,"wavlm"),Rdt.forEach(t),LQo=r(axe," \u2014 "),vV=n(axe,"A",{href:!0});var Bdt=s(vV);xQo=r(Bdt,"WavLMForAudioFrameClassification"),Bdt.forEach(t),$Qo=r(axe," (WavLM model)"),axe.forEach(t),Js.forEach(t),kQo=i(fa),s6=n(fa,"P",{});var nxe=s(s6);SQo=r(nxe,"The model is set in evaluation mode by default using "),Ehe=n(nxe,"CODE",{});var Pdt=s(Ehe);RQo=r(Pdt,"model.eval()"),Pdt.forEach(t),BQo=r(nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(nxe,"CODE",{});var Idt=s(Che);PQo=r(Idt,"model.train()"),Idt.forEach(t),nxe.forEach(t),IQo=i(fa),T(l6.$$.fragment,fa),fa.forEach(t),Us.forEach(t),rPe=i(f),id=n(f,"H2",{class:!0});var aqe=s(id);i6=n(aqe,"A",{id:!0,class:!0,href:!0});var qdt=s(i6);whe=n(qdt,"SPAN",{});var Ndt=s(whe);T(uy.$$.fragment,Ndt),Ndt.forEach(t),qdt.forEach(t),qQo=i(aqe),Ahe=n(aqe,"SPAN",{});var jdt=s(Ahe);NQo=r(jdt,"AutoModelForCTC"),jdt.forEach(t),aqe.forEach(t),tPe=i(f),Go=n(f,"DIV",{class:!0});var Ys=s(Go);T(_y.$$.fragment,Ys),jQo=i(Ys),dd=n(Ys,"P",{});var VY=s(dd);DQo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FV=n(VY,"A",{href:!0});var Ddt=s(FV);GQo=r(Ddt,"from_pretrained()"),Ddt.forEach(t),OQo=r(VY," class method or the "),TV=n(VY,"A",{href:!0});var Gdt=s(TV);VQo=r(Gdt,"from_config()"),Gdt.forEach(t),XQo=r(VY,` class
method.`),VY.forEach(t),zQo=i(Ys),by=n(Ys,"P",{});var nqe=s(by);WQo=r(nqe,"This class cannot be instantiated directly using "),yhe=n(nqe,"CODE",{});var Odt=s(yhe);QQo=r(Odt,"__init__()"),Odt.forEach(t),HQo=r(nqe," (throws an error)."),nqe.forEach(t),UQo=i(Ys),ut=n(Ys,"DIV",{class:!0});var sw=s(ut);T(vy.$$.fragment,sw),JQo=i(sw),Lhe=n(sw,"P",{});var Vdt=s(Lhe);YQo=r(Vdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Vdt.forEach(t),KQo=i(sw),cd=n(sw,"P",{});var XY=s(cd);ZQo=r(XY,`Note:
Loading a model from its configuration file does `),xhe=n(XY,"STRONG",{});var Xdt=s(xhe);eHo=r(Xdt,"not"),Xdt.forEach(t),oHo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(XY,"A",{href:!0});var zdt=s(MV);rHo=r(zdt,"from_pretrained()"),zdt.forEach(t),tHo=r(XY," to load the model weights."),XY.forEach(t),aHo=i(sw),T(d6.$$.fragment,sw),sw.forEach(t),nHo=i(Ys),co=n(Ys,"DIV",{class:!0});var ma=s(co);T(Fy.$$.fragment,ma),sHo=i(ma),$he=n(ma,"P",{});var Wdt=s($he);lHo=r(Wdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Wdt.forEach(t),iHo=i(ma),ja=n(ma,"P",{});var lw=s(ja);dHo=r(lw,"The model class to instantiate is selected based on the "),khe=n(lw,"CODE",{});var Qdt=s(khe);cHo=r(Qdt,"model_type"),Qdt.forEach(t),fHo=r(lw,` property of the config object (either
passed as an argument or loaded from `),She=n(lw,"CODE",{});var Hdt=s(She);mHo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),gHo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(lw,"CODE",{});var Udt=s(Rhe);hHo=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),pHo=r(lw,":"),lw.forEach(t),uHo=i(ma),Se=n(ma,"UL",{});var Oe=s(Se);c6=n(Oe,"LI",{});var sxe=s(c6);Bhe=n(sxe,"STRONG",{});var Jdt=s(Bhe);_Ho=r(Jdt,"data2vec-audio"),Jdt.forEach(t),bHo=r(sxe," \u2014 "),EV=n(sxe,"A",{href:!0});var Ydt=s(EV);vHo=r(Ydt,"Data2VecAudioForCTC"),Ydt.forEach(t),FHo=r(sxe," (Data2VecAudio model)"),sxe.forEach(t),THo=i(Oe),f6=n(Oe,"LI",{});var lxe=s(f6);Phe=n(lxe,"STRONG",{});var Kdt=s(Phe);MHo=r(Kdt,"hubert"),Kdt.forEach(t),EHo=r(lxe," \u2014 "),CV=n(lxe,"A",{href:!0});var Zdt=s(CV);CHo=r(Zdt,"HubertForCTC"),Zdt.forEach(t),wHo=r(lxe," (Hubert model)"),lxe.forEach(t),AHo=i(Oe),m6=n(Oe,"LI",{});var ixe=s(m6);Ihe=n(ixe,"STRONG",{});var ect=s(Ihe);yHo=r(ect,"sew"),ect.forEach(t),LHo=r(ixe," \u2014 "),wV=n(ixe,"A",{href:!0});var oct=s(wV);xHo=r(oct,"SEWForCTC"),oct.forEach(t),$Ho=r(ixe," (SEW model)"),ixe.forEach(t),kHo=i(Oe),g6=n(Oe,"LI",{});var dxe=s(g6);qhe=n(dxe,"STRONG",{});var rct=s(qhe);SHo=r(rct,"sew-d"),rct.forEach(t),RHo=r(dxe," \u2014 "),AV=n(dxe,"A",{href:!0});var tct=s(AV);BHo=r(tct,"SEWDForCTC"),tct.forEach(t),PHo=r(dxe," (SEW-D model)"),dxe.forEach(t),IHo=i(Oe),h6=n(Oe,"LI",{});var cxe=s(h6);Nhe=n(cxe,"STRONG",{});var act=s(Nhe);qHo=r(act,"unispeech"),act.forEach(t),NHo=r(cxe," \u2014 "),yV=n(cxe,"A",{href:!0});var nct=s(yV);jHo=r(nct,"UniSpeechForCTC"),nct.forEach(t),DHo=r(cxe," (UniSpeech model)"),cxe.forEach(t),GHo=i(Oe),p6=n(Oe,"LI",{});var fxe=s(p6);jhe=n(fxe,"STRONG",{});var sct=s(jhe);OHo=r(sct,"unispeech-sat"),sct.forEach(t),VHo=r(fxe," \u2014 "),LV=n(fxe,"A",{href:!0});var lct=s(LV);XHo=r(lct,"UniSpeechSatForCTC"),lct.forEach(t),zHo=r(fxe," (UniSpeechSat model)"),fxe.forEach(t),WHo=i(Oe),u6=n(Oe,"LI",{});var mxe=s(u6);Dhe=n(mxe,"STRONG",{});var ict=s(Dhe);QHo=r(ict,"wav2vec2"),ict.forEach(t),HHo=r(mxe," \u2014 "),xV=n(mxe,"A",{href:!0});var dct=s(xV);UHo=r(dct,"Wav2Vec2ForCTC"),dct.forEach(t),JHo=r(mxe," (Wav2Vec2 model)"),mxe.forEach(t),YHo=i(Oe),_6=n(Oe,"LI",{});var gxe=s(_6);Ghe=n(gxe,"STRONG",{});var cct=s(Ghe);KHo=r(cct,"wav2vec2-conformer"),cct.forEach(t),ZHo=r(gxe," \u2014 "),$V=n(gxe,"A",{href:!0});var fct=s($V);eUo=r(fct,"Wav2Vec2ConformerForCTC"),fct.forEach(t),oUo=r(gxe," (Wav2Vec2ConformerConformer model)"),gxe.forEach(t),rUo=i(Oe),b6=n(Oe,"LI",{});var hxe=s(b6);Ohe=n(hxe,"STRONG",{});var mct=s(Ohe);tUo=r(mct,"wavlm"),mct.forEach(t),aUo=r(hxe," \u2014 "),kV=n(hxe,"A",{href:!0});var gct=s(kV);nUo=r(gct,"WavLMForCTC"),gct.forEach(t),sUo=r(hxe," (WavLM model)"),hxe.forEach(t),Oe.forEach(t),lUo=i(ma),v6=n(ma,"P",{});var pxe=s(v6);iUo=r(pxe,"The model is set in evaluation mode by default using "),Vhe=n(pxe,"CODE",{});var hct=s(Vhe);dUo=r(hct,"model.eval()"),hct.forEach(t),cUo=r(pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(pxe,"CODE",{});var pct=s(Xhe);fUo=r(pct,"model.train()"),pct.forEach(t),pxe.forEach(t),mUo=i(ma),T(F6.$$.fragment,ma),ma.forEach(t),Ys.forEach(t),aPe=i(f),fd=n(f,"H2",{class:!0});var sqe=s(fd);T6=n(sqe,"A",{id:!0,class:!0,href:!0});var uct=s(T6);zhe=n(uct,"SPAN",{});var _ct=s(zhe);T(Ty.$$.fragment,_ct),_ct.forEach(t),uct.forEach(t),gUo=i(sqe),Whe=n(sqe,"SPAN",{});var bct=s(Whe);hUo=r(bct,"AutoModelForSpeechSeq2Seq"),bct.forEach(t),sqe.forEach(t),nPe=i(f),Oo=n(f,"DIV",{class:!0});var Ks=s(Oo);T(My.$$.fragment,Ks),pUo=i(Ks),md=n(Ks,"P",{});var zY=s(md);uUo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SV=n(zY,"A",{href:!0});var vct=s(SV);_Uo=r(vct,"from_pretrained()"),vct.forEach(t),bUo=r(zY," class method or the "),RV=n(zY,"A",{href:!0});var Fct=s(RV);vUo=r(Fct,"from_config()"),Fct.forEach(t),FUo=r(zY,` class
method.`),zY.forEach(t),TUo=i(Ks),Ey=n(Ks,"P",{});var lqe=s(Ey);MUo=r(lqe,"This class cannot be instantiated directly using "),Qhe=n(lqe,"CODE",{});var Tct=s(Qhe);EUo=r(Tct,"__init__()"),Tct.forEach(t),CUo=r(lqe," (throws an error)."),lqe.forEach(t),wUo=i(Ks),_t=n(Ks,"DIV",{class:!0});var iw=s(_t);T(Cy.$$.fragment,iw),AUo=i(iw),Hhe=n(iw,"P",{});var Mct=s(Hhe);yUo=r(Mct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Mct.forEach(t),LUo=i(iw),gd=n(iw,"P",{});var WY=s(gd);xUo=r(WY,`Note:
Loading a model from its configuration file does `),Uhe=n(WY,"STRONG",{});var Ect=s(Uhe);$Uo=r(Ect,"not"),Ect.forEach(t),kUo=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(WY,"A",{href:!0});var Cct=s(BV);SUo=r(Cct,"from_pretrained()"),Cct.forEach(t),RUo=r(WY," to load the model weights."),WY.forEach(t),BUo=i(iw),T(M6.$$.fragment,iw),iw.forEach(t),PUo=i(Ks),fo=n(Ks,"DIV",{class:!0});var ga=s(fo);T(wy.$$.fragment,ga),IUo=i(ga),Jhe=n(ga,"P",{});var wct=s(Jhe);qUo=r(wct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wct.forEach(t),NUo=i(ga),Da=n(ga,"P",{});var dw=s(Da);jUo=r(dw,"The model class to instantiate is selected based on the "),Yhe=n(dw,"CODE",{});var Act=s(Yhe);DUo=r(Act,"model_type"),Act.forEach(t),GUo=r(dw,` property of the config object (either
passed as an argument or loaded from `),Khe=n(dw,"CODE",{});var yct=s(Khe);OUo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),VUo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(dw,"CODE",{});var Lct=s(Zhe);XUo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),zUo=r(dw,":"),dw.forEach(t),WUo=i(ga),Ay=n(ga,"UL",{});var iqe=s(Ay);E6=n(iqe,"LI",{});var uxe=s(E6);epe=n(uxe,"STRONG",{});var xct=s(epe);QUo=r(xct,"speech-encoder-decoder"),xct.forEach(t),HUo=r(uxe," \u2014 "),PV=n(uxe,"A",{href:!0});var $ct=s(PV);UUo=r($ct,"SpeechEncoderDecoderModel"),$ct.forEach(t),JUo=r(uxe," (Speech Encoder decoder model)"),uxe.forEach(t),YUo=i(iqe),C6=n(iqe,"LI",{});var _xe=s(C6);ope=n(_xe,"STRONG",{});var kct=s(ope);KUo=r(kct,"speech_to_text"),kct.forEach(t),ZUo=r(_xe," \u2014 "),IV=n(_xe,"A",{href:!0});var Sct=s(IV);eJo=r(Sct,"Speech2TextForConditionalGeneration"),Sct.forEach(t),oJo=r(_xe," (Speech2Text model)"),_xe.forEach(t),iqe.forEach(t),rJo=i(ga),w6=n(ga,"P",{});var bxe=s(w6);tJo=r(bxe,"The model is set in evaluation mode by default using "),rpe=n(bxe,"CODE",{});var Rct=s(rpe);aJo=r(Rct,"model.eval()"),Rct.forEach(t),nJo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(bxe,"CODE",{});var Bct=s(tpe);sJo=r(Bct,"model.train()"),Bct.forEach(t),bxe.forEach(t),lJo=i(ga),T(A6.$$.fragment,ga),ga.forEach(t),Ks.forEach(t),sPe=i(f),hd=n(f,"H2",{class:!0});var dqe=s(hd);y6=n(dqe,"A",{id:!0,class:!0,href:!0});var Pct=s(y6);ape=n(Pct,"SPAN",{});var Ict=s(ape);T(yy.$$.fragment,Ict),Ict.forEach(t),Pct.forEach(t),iJo=i(dqe),npe=n(dqe,"SPAN",{});var qct=s(npe);dJo=r(qct,"AutoModelForAudioXVector"),qct.forEach(t),dqe.forEach(t),lPe=i(f),Vo=n(f,"DIV",{class:!0});var Zs=s(Vo);T(Ly.$$.fragment,Zs),cJo=i(Zs),pd=n(Zs,"P",{});var QY=s(pd);fJo=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qV=n(QY,"A",{href:!0});var Nct=s(qV);mJo=r(Nct,"from_pretrained()"),Nct.forEach(t),gJo=r(QY," class method or the "),NV=n(QY,"A",{href:!0});var jct=s(NV);hJo=r(jct,"from_config()"),jct.forEach(t),pJo=r(QY,` class
method.`),QY.forEach(t),uJo=i(Zs),xy=n(Zs,"P",{});var cqe=s(xy);_Jo=r(cqe,"This class cannot be instantiated directly using "),spe=n(cqe,"CODE",{});var Dct=s(spe);bJo=r(Dct,"__init__()"),Dct.forEach(t),vJo=r(cqe," (throws an error)."),cqe.forEach(t),FJo=i(Zs),bt=n(Zs,"DIV",{class:!0});var cw=s(bt);T($y.$$.fragment,cw),TJo=i(cw),lpe=n(cw,"P",{});var Gct=s(lpe);MJo=r(Gct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Gct.forEach(t),EJo=i(cw),ud=n(cw,"P",{});var HY=s(ud);CJo=r(HY,`Note:
Loading a model from its configuration file does `),ipe=n(HY,"STRONG",{});var Oct=s(ipe);wJo=r(Oct,"not"),Oct.forEach(t),AJo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(HY,"A",{href:!0});var Vct=s(jV);yJo=r(Vct,"from_pretrained()"),Vct.forEach(t),LJo=r(HY," to load the model weights."),HY.forEach(t),xJo=i(cw),T(L6.$$.fragment,cw),cw.forEach(t),$Jo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ha=s(mo);T(ky.$$.fragment,ha),kJo=i(ha),dpe=n(ha,"P",{});var Xct=s(dpe);SJo=r(Xct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Xct.forEach(t),RJo=i(ha),Ga=n(ha,"P",{});var fw=s(Ga);BJo=r(fw,"The model class to instantiate is selected based on the "),cpe=n(fw,"CODE",{});var zct=s(cpe);PJo=r(zct,"model_type"),zct.forEach(t),IJo=r(fw,` property of the config object (either
passed as an argument or loaded from `),fpe=n(fw,"CODE",{});var Wct=s(fpe);qJo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),NJo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(fw,"CODE",{});var Qct=s(mpe);jJo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),DJo=r(fw,":"),fw.forEach(t),GJo=i(ha),Ur=n(ha,"UL",{});var el=s(Ur);x6=n(el,"LI",{});var vxe=s(x6);gpe=n(vxe,"STRONG",{});var Hct=s(gpe);OJo=r(Hct,"data2vec-audio"),Hct.forEach(t),VJo=r(vxe," \u2014 "),DV=n(vxe,"A",{href:!0});var Uct=s(DV);XJo=r(Uct,"Data2VecAudioForXVector"),Uct.forEach(t),zJo=r(vxe," (Data2VecAudio model)"),vxe.forEach(t),WJo=i(el),$6=n(el,"LI",{});var Fxe=s($6);hpe=n(Fxe,"STRONG",{});var Jct=s(hpe);QJo=r(Jct,"unispeech-sat"),Jct.forEach(t),HJo=r(Fxe," \u2014 "),GV=n(Fxe,"A",{href:!0});var Yct=s(GV);UJo=r(Yct,"UniSpeechSatForXVector"),Yct.forEach(t),JJo=r(Fxe," (UniSpeechSat model)"),Fxe.forEach(t),YJo=i(el),k6=n(el,"LI",{});var Txe=s(k6);ppe=n(Txe,"STRONG",{});var Kct=s(ppe);KJo=r(Kct,"wav2vec2"),Kct.forEach(t),ZJo=r(Txe," \u2014 "),OV=n(Txe,"A",{href:!0});var Zct=s(OV);eYo=r(Zct,"Wav2Vec2ForXVector"),Zct.forEach(t),oYo=r(Txe," (Wav2Vec2 model)"),Txe.forEach(t),rYo=i(el),S6=n(el,"LI",{});var Mxe=s(S6);upe=n(Mxe,"STRONG",{});var eft=s(upe);tYo=r(eft,"wav2vec2-conformer"),eft.forEach(t),aYo=r(Mxe," \u2014 "),VV=n(Mxe,"A",{href:!0});var oft=s(VV);nYo=r(oft,"Wav2Vec2ConformerForXVector"),oft.forEach(t),sYo=r(Mxe," (Wav2Vec2ConformerConformer model)"),Mxe.forEach(t),lYo=i(el),R6=n(el,"LI",{});var Exe=s(R6);_pe=n(Exe,"STRONG",{});var rft=s(_pe);iYo=r(rft,"wavlm"),rft.forEach(t),dYo=r(Exe," \u2014 "),XV=n(Exe,"A",{href:!0});var tft=s(XV);cYo=r(tft,"WavLMForXVector"),tft.forEach(t),fYo=r(Exe," (WavLM model)"),Exe.forEach(t),el.forEach(t),mYo=i(ha),B6=n(ha,"P",{});var Cxe=s(B6);gYo=r(Cxe,"The model is set in evaluation mode by default using "),bpe=n(Cxe,"CODE",{});var aft=s(bpe);hYo=r(aft,"model.eval()"),aft.forEach(t),pYo=r(Cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(Cxe,"CODE",{});var nft=s(vpe);uYo=r(nft,"model.train()"),nft.forEach(t),Cxe.forEach(t),_Yo=i(ha),T(P6.$$.fragment,ha),ha.forEach(t),Zs.forEach(t),iPe=i(f),_d=n(f,"H2",{class:!0});var fqe=s(_d);I6=n(fqe,"A",{id:!0,class:!0,href:!0});var sft=s(I6);Fpe=n(sft,"SPAN",{});var lft=s(Fpe);T(Sy.$$.fragment,lft),lft.forEach(t),sft.forEach(t),bYo=i(fqe),Tpe=n(fqe,"SPAN",{});var ift=s(Tpe);vYo=r(ift,"AutoModelForMaskedImageModeling"),ift.forEach(t),fqe.forEach(t),dPe=i(f),Xo=n(f,"DIV",{class:!0});var ol=s(Xo);T(Ry.$$.fragment,ol),FYo=i(ol),bd=n(ol,"P",{});var UY=s(bd);TYo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zV=n(UY,"A",{href:!0});var dft=s(zV);MYo=r(dft,"from_pretrained()"),dft.forEach(t),EYo=r(UY," class method or the "),WV=n(UY,"A",{href:!0});var cft=s(WV);CYo=r(cft,"from_config()"),cft.forEach(t),wYo=r(UY,` class
method.`),UY.forEach(t),AYo=i(ol),By=n(ol,"P",{});var mqe=s(By);yYo=r(mqe,"This class cannot be instantiated directly using "),Mpe=n(mqe,"CODE",{});var fft=s(Mpe);LYo=r(fft,"__init__()"),fft.forEach(t),xYo=r(mqe," (throws an error)."),mqe.forEach(t),$Yo=i(ol),vt=n(ol,"DIV",{class:!0});var mw=s(vt);T(Py.$$.fragment,mw),kYo=i(mw),Epe=n(mw,"P",{});var mft=s(Epe);SYo=r(mft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mft.forEach(t),RYo=i(mw),vd=n(mw,"P",{});var JY=s(vd);BYo=r(JY,`Note:
Loading a model from its configuration file does `),Cpe=n(JY,"STRONG",{});var gft=s(Cpe);PYo=r(gft,"not"),gft.forEach(t),IYo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(JY,"A",{href:!0});var hft=s(QV);qYo=r(hft,"from_pretrained()"),hft.forEach(t),NYo=r(JY," to load the model weights."),JY.forEach(t),jYo=i(mw),T(q6.$$.fragment,mw),mw.forEach(t),DYo=i(ol),go=n(ol,"DIV",{class:!0});var pa=s(go);T(Iy.$$.fragment,pa),GYo=i(pa),wpe=n(pa,"P",{});var pft=s(wpe);OYo=r(pft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pft.forEach(t),VYo=i(pa),Oa=n(pa,"P",{});var gw=s(Oa);XYo=r(gw,"The model class to instantiate is selected based on the "),Ape=n(gw,"CODE",{});var uft=s(Ape);zYo=r(uft,"model_type"),uft.forEach(t),WYo=r(gw,` property of the config object (either
passed as an argument or loaded from `),ype=n(gw,"CODE",{});var _ft=s(ype);QYo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),HYo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(gw,"CODE",{});var bft=s(Lpe);UYo=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),JYo=r(gw,":"),gw.forEach(t),YYo=i(pa),Fd=n(pa,"UL",{});var YY=s(Fd);N6=n(YY,"LI",{});var wxe=s(N6);xpe=n(wxe,"STRONG",{});var vft=s(xpe);KYo=r(vft,"deit"),vft.forEach(t),ZYo=r(wxe," \u2014 "),HV=n(wxe,"A",{href:!0});var Fft=s(HV);eKo=r(Fft,"DeiTForMaskedImageModeling"),Fft.forEach(t),oKo=r(wxe," (DeiT model)"),wxe.forEach(t),rKo=i(YY),j6=n(YY,"LI",{});var Axe=s(j6);$pe=n(Axe,"STRONG",{});var Tft=s($pe);tKo=r(Tft,"swin"),Tft.forEach(t),aKo=r(Axe," \u2014 "),UV=n(Axe,"A",{href:!0});var Mft=s(UV);nKo=r(Mft,"SwinForMaskedImageModeling"),Mft.forEach(t),sKo=r(Axe," (Swin model)"),Axe.forEach(t),lKo=i(YY),D6=n(YY,"LI",{});var yxe=s(D6);kpe=n(yxe,"STRONG",{});var Eft=s(kpe);iKo=r(Eft,"vit"),Eft.forEach(t),dKo=r(yxe," \u2014 "),JV=n(yxe,"A",{href:!0});var Cft=s(JV);cKo=r(Cft,"ViTForMaskedImageModeling"),Cft.forEach(t),fKo=r(yxe," (ViT model)"),yxe.forEach(t),YY.forEach(t),mKo=i(pa),G6=n(pa,"P",{});var Lxe=s(G6);gKo=r(Lxe,"The model is set in evaluation mode by default using "),Spe=n(Lxe,"CODE",{});var wft=s(Spe);hKo=r(wft,"model.eval()"),wft.forEach(t),pKo=r(Lxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(Lxe,"CODE",{});var Aft=s(Rpe);uKo=r(Aft,"model.train()"),Aft.forEach(t),Lxe.forEach(t),_Ko=i(pa),T(O6.$$.fragment,pa),pa.forEach(t),ol.forEach(t),cPe=i(f),Td=n(f,"H2",{class:!0});var gqe=s(Td);V6=n(gqe,"A",{id:!0,class:!0,href:!0});var yft=s(V6);Bpe=n(yft,"SPAN",{});var Lft=s(Bpe);T(qy.$$.fragment,Lft),Lft.forEach(t),yft.forEach(t),bKo=i(gqe),Ppe=n(gqe,"SPAN",{});var xft=s(Ppe);vKo=r(xft,"AutoModelForObjectDetection"),xft.forEach(t),gqe.forEach(t),fPe=i(f),zo=n(f,"DIV",{class:!0});var rl=s(zo);T(Ny.$$.fragment,rl),FKo=i(rl),Md=n(rl,"P",{});var KY=s(Md);TKo=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YV=n(KY,"A",{href:!0});var $ft=s(YV);MKo=r($ft,"from_pretrained()"),$ft.forEach(t),EKo=r(KY," class method or the "),KV=n(KY,"A",{href:!0});var kft=s(KV);CKo=r(kft,"from_config()"),kft.forEach(t),wKo=r(KY,` class
method.`),KY.forEach(t),AKo=i(rl),jy=n(rl,"P",{});var hqe=s(jy);yKo=r(hqe,"This class cannot be instantiated directly using "),Ipe=n(hqe,"CODE",{});var Sft=s(Ipe);LKo=r(Sft,"__init__()"),Sft.forEach(t),xKo=r(hqe," (throws an error)."),hqe.forEach(t),$Ko=i(rl),Ft=n(rl,"DIV",{class:!0});var hw=s(Ft);T(Dy.$$.fragment,hw),kKo=i(hw),qpe=n(hw,"P",{});var Rft=s(qpe);SKo=r(Rft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Rft.forEach(t),RKo=i(hw),Ed=n(hw,"P",{});var ZY=s(Ed);BKo=r(ZY,`Note:
Loading a model from its configuration file does `),Npe=n(ZY,"STRONG",{});var Bft=s(Npe);PKo=r(Bft,"not"),Bft.forEach(t),IKo=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(ZY,"A",{href:!0});var Pft=s(ZV);qKo=r(Pft,"from_pretrained()"),Pft.forEach(t),NKo=r(ZY," to load the model weights."),ZY.forEach(t),jKo=i(hw),T(X6.$$.fragment,hw),hw.forEach(t),DKo=i(rl),ho=n(rl,"DIV",{class:!0});var ua=s(ho);T(Gy.$$.fragment,ua),GKo=i(ua),jpe=n(ua,"P",{});var Ift=s(jpe);OKo=r(Ift,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ift.forEach(t),VKo=i(ua),Va=n(ua,"P",{});var pw=s(Va);XKo=r(pw,"The model class to instantiate is selected based on the "),Dpe=n(pw,"CODE",{});var qft=s(Dpe);zKo=r(qft,"model_type"),qft.forEach(t),WKo=r(pw,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(pw,"CODE",{});var Nft=s(Gpe);QKo=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),HKo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(pw,"CODE",{});var jft=s(Ope);UKo=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),JKo=r(pw,":"),pw.forEach(t),YKo=i(ua),Vpe=n(ua,"UL",{});var Dft=s(Vpe);z6=n(Dft,"LI",{});var xxe=s(z6);Xpe=n(xxe,"STRONG",{});var Gft=s(Xpe);KKo=r(Gft,"detr"),Gft.forEach(t),ZKo=r(xxe," \u2014 "),eX=n(xxe,"A",{href:!0});var Oft=s(eX);eZo=r(Oft,"DetrForObjectDetection"),Oft.forEach(t),oZo=r(xxe," (DETR model)"),xxe.forEach(t),Dft.forEach(t),rZo=i(ua),W6=n(ua,"P",{});var $xe=s(W6);tZo=r($xe,"The model is set in evaluation mode by default using "),zpe=n($xe,"CODE",{});var Vft=s(zpe);aZo=r(Vft,"model.eval()"),Vft.forEach(t),nZo=r($xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n($xe,"CODE",{});var Xft=s(Wpe);sZo=r(Xft,"model.train()"),Xft.forEach(t),$xe.forEach(t),lZo=i(ua),T(Q6.$$.fragment,ua),ua.forEach(t),rl.forEach(t),mPe=i(f),Cd=n(f,"H2",{class:!0});var pqe=s(Cd);H6=n(pqe,"A",{id:!0,class:!0,href:!0});var zft=s(H6);Qpe=n(zft,"SPAN",{});var Wft=s(Qpe);T(Oy.$$.fragment,Wft),Wft.forEach(t),zft.forEach(t),iZo=i(pqe),Hpe=n(pqe,"SPAN",{});var Qft=s(Hpe);dZo=r(Qft,"AutoModelForImageSegmentation"),Qft.forEach(t),pqe.forEach(t),gPe=i(f),Wo=n(f,"DIV",{class:!0});var tl=s(Wo);T(Vy.$$.fragment,tl),cZo=i(tl),wd=n(tl,"P",{});var eK=s(wd);fZo=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oX=n(eK,"A",{href:!0});var Hft=s(oX);mZo=r(Hft,"from_pretrained()"),Hft.forEach(t),gZo=r(eK," class method or the "),rX=n(eK,"A",{href:!0});var Uft=s(rX);hZo=r(Uft,"from_config()"),Uft.forEach(t),pZo=r(eK,` class
method.`),eK.forEach(t),uZo=i(tl),Xy=n(tl,"P",{});var uqe=s(Xy);_Zo=r(uqe,"This class cannot be instantiated directly using "),Upe=n(uqe,"CODE",{});var Jft=s(Upe);bZo=r(Jft,"__init__()"),Jft.forEach(t),vZo=r(uqe," (throws an error)."),uqe.forEach(t),FZo=i(tl),Tt=n(tl,"DIV",{class:!0});var uw=s(Tt);T(zy.$$.fragment,uw),TZo=i(uw),Jpe=n(uw,"P",{});var Yft=s(Jpe);MZo=r(Yft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Yft.forEach(t),EZo=i(uw),Ad=n(uw,"P",{});var oK=s(Ad);CZo=r(oK,`Note:
Loading a model from its configuration file does `),Ype=n(oK,"STRONG",{});var Kft=s(Ype);wZo=r(Kft,"not"),Kft.forEach(t),AZo=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(oK,"A",{href:!0});var Zft=s(tX);yZo=r(Zft,"from_pretrained()"),Zft.forEach(t),LZo=r(oK," to load the model weights."),oK.forEach(t),xZo=i(uw),T(U6.$$.fragment,uw),uw.forEach(t),$Zo=i(tl),po=n(tl,"DIV",{class:!0});var _a=s(po);T(Wy.$$.fragment,_a),kZo=i(_a),Kpe=n(_a,"P",{});var emt=s(Kpe);SZo=r(emt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),emt.forEach(t),RZo=i(_a),Xa=n(_a,"P",{});var _w=s(Xa);BZo=r(_w,"The model class to instantiate is selected based on the "),Zpe=n(_w,"CODE",{});var omt=s(Zpe);PZo=r(omt,"model_type"),omt.forEach(t),IZo=r(_w,` property of the config object (either
passed as an argument or loaded from `),eue=n(_w,"CODE",{});var rmt=s(eue);qZo=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),NZo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(_w,"CODE",{});var tmt=s(oue);jZo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),DZo=r(_w,":"),_w.forEach(t),GZo=i(_a),rue=n(_a,"UL",{});var amt=s(rue);J6=n(amt,"LI",{});var kxe=s(J6);tue=n(kxe,"STRONG",{});var nmt=s(tue);OZo=r(nmt,"detr"),nmt.forEach(t),VZo=r(kxe," \u2014 "),aX=n(kxe,"A",{href:!0});var smt=s(aX);XZo=r(smt,"DetrForSegmentation"),smt.forEach(t),zZo=r(kxe," (DETR model)"),kxe.forEach(t),amt.forEach(t),WZo=i(_a),Y6=n(_a,"P",{});var Sxe=s(Y6);QZo=r(Sxe,"The model is set in evaluation mode by default using "),aue=n(Sxe,"CODE",{});var lmt=s(aue);HZo=r(lmt,"model.eval()"),lmt.forEach(t),UZo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=n(Sxe,"CODE",{});var imt=s(nue);JZo=r(imt,"model.train()"),imt.forEach(t),Sxe.forEach(t),YZo=i(_a),T(K6.$$.fragment,_a),_a.forEach(t),tl.forEach(t),hPe=i(f),yd=n(f,"H2",{class:!0});var _qe=s(yd);Z6=n(_qe,"A",{id:!0,class:!0,href:!0});var dmt=s(Z6);sue=n(dmt,"SPAN",{});var cmt=s(sue);T(Qy.$$.fragment,cmt),cmt.forEach(t),dmt.forEach(t),KZo=i(_qe),lue=n(_qe,"SPAN",{});var fmt=s(lue);ZZo=r(fmt,"AutoModelForSemanticSegmentation"),fmt.forEach(t),_qe.forEach(t),pPe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(Hy.$$.fragment,al),eer=i(al),Ld=n(al,"P",{});var rK=s(Ld);oer=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nX=n(rK,"A",{href:!0});var mmt=s(nX);rer=r(mmt,"from_pretrained()"),mmt.forEach(t),ter=r(rK," class method or the "),sX=n(rK,"A",{href:!0});var gmt=s(sX);aer=r(gmt,"from_config()"),gmt.forEach(t),ner=r(rK,` class
method.`),rK.forEach(t),ser=i(al),Uy=n(al,"P",{});var bqe=s(Uy);ler=r(bqe,"This class cannot be instantiated directly using "),iue=n(bqe,"CODE",{});var hmt=s(iue);ier=r(hmt,"__init__()"),hmt.forEach(t),der=r(bqe," (throws an error)."),bqe.forEach(t),cer=i(al),Mt=n(al,"DIV",{class:!0});var bw=s(Mt);T(Jy.$$.fragment,bw),fer=i(bw),due=n(bw,"P",{});var pmt=s(due);mer=r(pmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),pmt.forEach(t),ger=i(bw),xd=n(bw,"P",{});var tK=s(xd);her=r(tK,`Note:
Loading a model from its configuration file does `),cue=n(tK,"STRONG",{});var umt=s(cue);per=r(umt,"not"),umt.forEach(t),uer=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(tK,"A",{href:!0});var _mt=s(lX);_er=r(_mt,"from_pretrained()"),_mt.forEach(t),ber=r(tK," to load the model weights."),tK.forEach(t),ver=i(bw),T(eT.$$.fragment,bw),bw.forEach(t),Fer=i(al),uo=n(al,"DIV",{class:!0});var ba=s(uo);T(Yy.$$.fragment,ba),Ter=i(ba),fue=n(ba,"P",{});var bmt=s(fue);Mer=r(bmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),bmt.forEach(t),Eer=i(ba),za=n(ba,"P",{});var vw=s(za);Cer=r(vw,"The model class to instantiate is selected based on the "),mue=n(vw,"CODE",{});var vmt=s(mue);wer=r(vmt,"model_type"),vmt.forEach(t),Aer=r(vw,` property of the config object (either
passed as an argument or loaded from `),gue=n(vw,"CODE",{});var Fmt=s(gue);yer=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),Ler=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=n(vw,"CODE",{});var Tmt=s(hue);xer=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),$er=r(vw,":"),vw.forEach(t),ker=i(ba),Wa=n(ba,"UL",{});var Fw=s(Wa);oT=n(Fw,"LI",{});var Rxe=s(oT);pue=n(Rxe,"STRONG",{});var Mmt=s(pue);Ser=r(Mmt,"beit"),Mmt.forEach(t),Rer=r(Rxe," \u2014 "),iX=n(Rxe,"A",{href:!0});var Emt=s(iX);Ber=r(Emt,"BeitForSemanticSegmentation"),Emt.forEach(t),Per=r(Rxe," (BEiT model)"),Rxe.forEach(t),Ier=i(Fw),rT=n(Fw,"LI",{});var Bxe=s(rT);uue=n(Bxe,"STRONG",{});var Cmt=s(uue);qer=r(Cmt,"data2vec-vision"),Cmt.forEach(t),Ner=r(Bxe," \u2014 "),dX=n(Bxe,"A",{href:!0});var wmt=s(dX);jer=r(wmt,"Data2VecVisionForSemanticSegmentation"),wmt.forEach(t),Der=r(Bxe," (Data2VecVision model)"),Bxe.forEach(t),Ger=i(Fw),tT=n(Fw,"LI",{});var Pxe=s(tT);_ue=n(Pxe,"STRONG",{});var Amt=s(_ue);Oer=r(Amt,"dpt"),Amt.forEach(t),Ver=r(Pxe," \u2014 "),cX=n(Pxe,"A",{href:!0});var ymt=s(cX);Xer=r(ymt,"DPTForSemanticSegmentation"),ymt.forEach(t),zer=r(Pxe," (DPT model)"),Pxe.forEach(t),Wer=i(Fw),aT=n(Fw,"LI",{});var Ixe=s(aT);bue=n(Ixe,"STRONG",{});var Lmt=s(bue);Qer=r(Lmt,"segformer"),Lmt.forEach(t),Her=r(Ixe," \u2014 "),fX=n(Ixe,"A",{href:!0});var xmt=s(fX);Uer=r(xmt,"SegformerForSemanticSegmentation"),xmt.forEach(t),Jer=r(Ixe," (SegFormer model)"),Ixe.forEach(t),Fw.forEach(t),Yer=i(ba),nT=n(ba,"P",{});var qxe=s(nT);Ker=r(qxe,"The model is set in evaluation mode by default using "),vue=n(qxe,"CODE",{});var $mt=s(vue);Zer=r($mt,"model.eval()"),$mt.forEach(t),eor=r(qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(qxe,"CODE",{});var kmt=s(Fue);oor=r(kmt,"model.train()"),kmt.forEach(t),qxe.forEach(t),ror=i(ba),T(sT.$$.fragment,ba),ba.forEach(t),al.forEach(t),uPe=i(f),$d=n(f,"H2",{class:!0});var vqe=s($d);lT=n(vqe,"A",{id:!0,class:!0,href:!0});var Smt=s(lT);Tue=n(Smt,"SPAN",{});var Rmt=s(Tue);T(Ky.$$.fragment,Rmt),Rmt.forEach(t),Smt.forEach(t),tor=i(vqe),Mue=n(vqe,"SPAN",{});var Bmt=s(Mue);aor=r(Bmt,"AutoModelForInstanceSegmentation"),Bmt.forEach(t),vqe.forEach(t),_Pe=i(f),Ho=n(f,"DIV",{class:!0});var nl=s(Ho);T(Zy.$$.fragment,nl),nor=i(nl),kd=n(nl,"P",{});var aK=s(kd);sor=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mX=n(aK,"A",{href:!0});var Pmt=s(mX);lor=r(Pmt,"from_pretrained()"),Pmt.forEach(t),ior=r(aK," class method or the "),gX=n(aK,"A",{href:!0});var Imt=s(gX);dor=r(Imt,"from_config()"),Imt.forEach(t),cor=r(aK,` class
method.`),aK.forEach(t),mor=i(nl),eL=n(nl,"P",{});var Fqe=s(eL);gor=r(Fqe,"This class cannot be instantiated directly using "),Eue=n(Fqe,"CODE",{});var qmt=s(Eue);hor=r(qmt,"__init__()"),qmt.forEach(t),por=r(Fqe," (throws an error)."),Fqe.forEach(t),uor=i(nl),Et=n(nl,"DIV",{class:!0});var Tw=s(Et);T(oL.$$.fragment,Tw),_or=i(Tw),Cue=n(Tw,"P",{});var Nmt=s(Cue);bor=r(Nmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nmt.forEach(t),vor=i(Tw),Sd=n(Tw,"P",{});var nK=s(Sd);For=r(nK,`Note:
Loading a model from its configuration file does `),wue=n(nK,"STRONG",{});var jmt=s(wue);Tor=r(jmt,"not"),jmt.forEach(t),Mor=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(nK,"A",{href:!0});var Dmt=s(hX);Eor=r(Dmt,"from_pretrained()"),Dmt.forEach(t),Cor=r(nK," to load the model weights."),nK.forEach(t),wor=i(Tw),T(iT.$$.fragment,Tw),Tw.forEach(t),Aor=i(nl),_o=n(nl,"DIV",{class:!0});var va=s(_o);T(rL.$$.fragment,va),yor=i(va),Aue=n(va,"P",{});var Gmt=s(Aue);Lor=r(Gmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Gmt.forEach(t),xor=i(va),Qa=n(va,"P",{});var Mw=s(Qa);$or=r(Mw,"The model class to instantiate is selected based on the "),yue=n(Mw,"CODE",{});var Omt=s(yue);kor=r(Omt,"model_type"),Omt.forEach(t),Sor=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Lue=n(Mw,"CODE",{});var Vmt=s(Lue);Ror=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),Bor=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(Mw,"CODE",{});var Xmt=s(xue);Por=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),Ior=r(Mw,":"),Mw.forEach(t),qor=i(va),$ue=n(va,"UL",{});var zmt=s($ue);dT=n(zmt,"LI",{});var Nxe=s(dT);kue=n(Nxe,"STRONG",{});var Wmt=s(kue);Nor=r(Wmt,"maskformer"),Wmt.forEach(t),jor=r(Nxe," \u2014 "),pX=n(Nxe,"A",{href:!0});var Qmt=s(pX);Dor=r(Qmt,"MaskFormerForInstanceSegmentation"),Qmt.forEach(t),Gor=r(Nxe," (MaskFormer model)"),Nxe.forEach(t),zmt.forEach(t),Oor=i(va),cT=n(va,"P",{});var jxe=s(cT);Vor=r(jxe,"The model is set in evaluation mode by default using "),Sue=n(jxe,"CODE",{});var Hmt=s(Sue);Xor=r(Hmt,"model.eval()"),Hmt.forEach(t),zor=r(jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(jxe,"CODE",{});var Umt=s(Rue);Wor=r(Umt,"model.train()"),Umt.forEach(t),jxe.forEach(t),Qor=i(va),T(fT.$$.fragment,va),va.forEach(t),nl.forEach(t),bPe=i(f),Rd=n(f,"H2",{class:!0});var Tqe=s(Rd);mT=n(Tqe,"A",{id:!0,class:!0,href:!0});var Jmt=s(mT);Bue=n(Jmt,"SPAN",{});var Ymt=s(Bue);T(tL.$$.fragment,Ymt),Ymt.forEach(t),Jmt.forEach(t),Hor=i(Tqe),Pue=n(Tqe,"SPAN",{});var Kmt=s(Pue);Uor=r(Kmt,"TFAutoModel"),Kmt.forEach(t),Tqe.forEach(t),vPe=i(f),Uo=n(f,"DIV",{class:!0});var sl=s(Uo);T(aL.$$.fragment,sl),Jor=i(sl),Bd=n(sl,"P",{});var sK=s(Bd);Yor=r(sK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uX=n(sK,"A",{href:!0});var Zmt=s(uX);Kor=r(Zmt,"from_pretrained()"),Zmt.forEach(t),Zor=r(sK," class method or the "),_X=n(sK,"A",{href:!0});var egt=s(_X);err=r(egt,"from_config()"),egt.forEach(t),orr=r(sK,` class
method.`),sK.forEach(t),rrr=i(sl),nL=n(sl,"P",{});var Mqe=s(nL);trr=r(Mqe,"This class cannot be instantiated directly using "),Iue=n(Mqe,"CODE",{});var ogt=s(Iue);arr=r(ogt,"__init__()"),ogt.forEach(t),nrr=r(Mqe," (throws an error)."),Mqe.forEach(t),srr=i(sl),Ct=n(sl,"DIV",{class:!0});var Ew=s(Ct);T(sL.$$.fragment,Ew),lrr=i(Ew),que=n(Ew,"P",{});var rgt=s(que);irr=r(rgt,"Instantiates one of the base model classes of the library from a configuration."),rgt.forEach(t),drr=i(Ew),Pd=n(Ew,"P",{});var lK=s(Pd);crr=r(lK,`Note:
Loading a model from its configuration file does `),Nue=n(lK,"STRONG",{});var tgt=s(Nue);frr=r(tgt,"not"),tgt.forEach(t),mrr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(lK,"A",{href:!0});var agt=s(bX);grr=r(agt,"from_pretrained()"),agt.forEach(t),hrr=r(lK," to load the model weights."),lK.forEach(t),prr=i(Ew),T(gT.$$.fragment,Ew),Ew.forEach(t),urr=i(sl),Mr=n(sl,"DIV",{class:!0});var ll=s(Mr);T(lL.$$.fragment,ll),_rr=i(ll),jue=n(ll,"P",{});var ngt=s(jue);brr=r(ngt,"Instantiate one of the base model classes of the library from a pretrained model."),ngt.forEach(t),vrr=i(ll),Ha=n(ll,"P",{});var Cw=s(Ha);Frr=r(Cw,"The model class to instantiate is selected based on the "),Due=n(Cw,"CODE",{});var sgt=s(Due);Trr=r(sgt,"model_type"),sgt.forEach(t),Mrr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Gue=n(Cw,"CODE",{});var lgt=s(Gue);Err=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),Crr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(Cw,"CODE",{});var igt=s(Oue);wrr=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),Arr=r(Cw,":"),Cw.forEach(t),yrr=i(ll),j=n(ll,"UL",{});var D=s(j);hT=n(D,"LI",{});var Dxe=s(hT);Vue=n(Dxe,"STRONG",{});var dgt=s(Vue);Lrr=r(dgt,"albert"),dgt.forEach(t),xrr=r(Dxe," \u2014 "),vX=n(Dxe,"A",{href:!0});var cgt=s(vX);$rr=r(cgt,"TFAlbertModel"),cgt.forEach(t),krr=r(Dxe," (ALBERT model)"),Dxe.forEach(t),Srr=i(D),pT=n(D,"LI",{});var Gxe=s(pT);Xue=n(Gxe,"STRONG",{});var fgt=s(Xue);Rrr=r(fgt,"bart"),fgt.forEach(t),Brr=r(Gxe," \u2014 "),FX=n(Gxe,"A",{href:!0});var mgt=s(FX);Prr=r(mgt,"TFBartModel"),mgt.forEach(t),Irr=r(Gxe," (BART model)"),Gxe.forEach(t),qrr=i(D),uT=n(D,"LI",{});var Oxe=s(uT);zue=n(Oxe,"STRONG",{});var ggt=s(zue);Nrr=r(ggt,"bert"),ggt.forEach(t),jrr=r(Oxe," \u2014 "),TX=n(Oxe,"A",{href:!0});var hgt=s(TX);Drr=r(hgt,"TFBertModel"),hgt.forEach(t),Grr=r(Oxe," (BERT model)"),Oxe.forEach(t),Orr=i(D),_T=n(D,"LI",{});var Vxe=s(_T);Wue=n(Vxe,"STRONG",{});var pgt=s(Wue);Vrr=r(pgt,"blenderbot"),pgt.forEach(t),Xrr=r(Vxe," \u2014 "),MX=n(Vxe,"A",{href:!0});var ugt=s(MX);zrr=r(ugt,"TFBlenderbotModel"),ugt.forEach(t),Wrr=r(Vxe," (Blenderbot model)"),Vxe.forEach(t),Qrr=i(D),bT=n(D,"LI",{});var Xxe=s(bT);Que=n(Xxe,"STRONG",{});var _gt=s(Que);Hrr=r(_gt,"blenderbot-small"),_gt.forEach(t),Urr=r(Xxe," \u2014 "),EX=n(Xxe,"A",{href:!0});var bgt=s(EX);Jrr=r(bgt,"TFBlenderbotSmallModel"),bgt.forEach(t),Yrr=r(Xxe," (BlenderbotSmall model)"),Xxe.forEach(t),Krr=i(D),vT=n(D,"LI",{});var zxe=s(vT);Hue=n(zxe,"STRONG",{});var vgt=s(Hue);Zrr=r(vgt,"camembert"),vgt.forEach(t),etr=r(zxe," \u2014 "),CX=n(zxe,"A",{href:!0});var Fgt=s(CX);otr=r(Fgt,"TFCamembertModel"),Fgt.forEach(t),rtr=r(zxe," (CamemBERT model)"),zxe.forEach(t),ttr=i(D),FT=n(D,"LI",{});var Wxe=s(FT);Uue=n(Wxe,"STRONG",{});var Tgt=s(Uue);atr=r(Tgt,"clip"),Tgt.forEach(t),ntr=r(Wxe," \u2014 "),wX=n(Wxe,"A",{href:!0});var Mgt=s(wX);str=r(Mgt,"TFCLIPModel"),Mgt.forEach(t),ltr=r(Wxe," (CLIP model)"),Wxe.forEach(t),itr=i(D),TT=n(D,"LI",{});var Qxe=s(TT);Jue=n(Qxe,"STRONG",{});var Egt=s(Jue);dtr=r(Egt,"convbert"),Egt.forEach(t),ctr=r(Qxe," \u2014 "),AX=n(Qxe,"A",{href:!0});var Cgt=s(AX);ftr=r(Cgt,"TFConvBertModel"),Cgt.forEach(t),mtr=r(Qxe," (ConvBERT model)"),Qxe.forEach(t),gtr=i(D),MT=n(D,"LI",{});var Hxe=s(MT);Yue=n(Hxe,"STRONG",{});var wgt=s(Yue);htr=r(wgt,"convnext"),wgt.forEach(t),ptr=r(Hxe," \u2014 "),yX=n(Hxe,"A",{href:!0});var Agt=s(yX);utr=r(Agt,"TFConvNextModel"),Agt.forEach(t),_tr=r(Hxe," (ConvNext model)"),Hxe.forEach(t),btr=i(D),ET=n(D,"LI",{});var Uxe=s(ET);Kue=n(Uxe,"STRONG",{});var ygt=s(Kue);vtr=r(ygt,"ctrl"),ygt.forEach(t),Ftr=r(Uxe," \u2014 "),LX=n(Uxe,"A",{href:!0});var Lgt=s(LX);Ttr=r(Lgt,"TFCTRLModel"),Lgt.forEach(t),Mtr=r(Uxe," (CTRL model)"),Uxe.forEach(t),Etr=i(D),CT=n(D,"LI",{});var Jxe=s(CT);Zue=n(Jxe,"STRONG",{});var xgt=s(Zue);Ctr=r(xgt,"deberta"),xgt.forEach(t),wtr=r(Jxe," \u2014 "),xX=n(Jxe,"A",{href:!0});var $gt=s(xX);Atr=r($gt,"TFDebertaModel"),$gt.forEach(t),ytr=r(Jxe," (DeBERTa model)"),Jxe.forEach(t),Ltr=i(D),wT=n(D,"LI",{});var Yxe=s(wT);e_e=n(Yxe,"STRONG",{});var kgt=s(e_e);xtr=r(kgt,"deberta-v2"),kgt.forEach(t),$tr=r(Yxe," \u2014 "),$X=n(Yxe,"A",{href:!0});var Sgt=s($X);ktr=r(Sgt,"TFDebertaV2Model"),Sgt.forEach(t),Str=r(Yxe," (DeBERTa-v2 model)"),Yxe.forEach(t),Rtr=i(D),AT=n(D,"LI",{});var Kxe=s(AT);o_e=n(Kxe,"STRONG",{});var Rgt=s(o_e);Btr=r(Rgt,"distilbert"),Rgt.forEach(t),Ptr=r(Kxe," \u2014 "),kX=n(Kxe,"A",{href:!0});var Bgt=s(kX);Itr=r(Bgt,"TFDistilBertModel"),Bgt.forEach(t),qtr=r(Kxe," (DistilBERT model)"),Kxe.forEach(t),Ntr=i(D),yT=n(D,"LI",{});var Zxe=s(yT);r_e=n(Zxe,"STRONG",{});var Pgt=s(r_e);jtr=r(Pgt,"dpr"),Pgt.forEach(t),Dtr=r(Zxe," \u2014 "),SX=n(Zxe,"A",{href:!0});var Igt=s(SX);Gtr=r(Igt,"TFDPRQuestionEncoder"),Igt.forEach(t),Otr=r(Zxe," (DPR model)"),Zxe.forEach(t),Vtr=i(D),LT=n(D,"LI",{});var e9e=s(LT);t_e=n(e9e,"STRONG",{});var qgt=s(t_e);Xtr=r(qgt,"electra"),qgt.forEach(t),ztr=r(e9e," \u2014 "),RX=n(e9e,"A",{href:!0});var Ngt=s(RX);Wtr=r(Ngt,"TFElectraModel"),Ngt.forEach(t),Qtr=r(e9e," (ELECTRA model)"),e9e.forEach(t),Htr=i(D),xT=n(D,"LI",{});var o9e=s(xT);a_e=n(o9e,"STRONG",{});var jgt=s(a_e);Utr=r(jgt,"flaubert"),jgt.forEach(t),Jtr=r(o9e," \u2014 "),BX=n(o9e,"A",{href:!0});var Dgt=s(BX);Ytr=r(Dgt,"TFFlaubertModel"),Dgt.forEach(t),Ktr=r(o9e," (FlauBERT model)"),o9e.forEach(t),Ztr=i(D),xs=n(D,"LI",{});var R9=s(xs);n_e=n(R9,"STRONG",{});var Ggt=s(n_e);ear=r(Ggt,"funnel"),Ggt.forEach(t),oar=r(R9," \u2014 "),PX=n(R9,"A",{href:!0});var Ogt=s(PX);rar=r(Ogt,"TFFunnelModel"),Ogt.forEach(t),tar=r(R9," or "),IX=n(R9,"A",{href:!0});var Vgt=s(IX);aar=r(Vgt,"TFFunnelBaseModel"),Vgt.forEach(t),nar=r(R9," (Funnel Transformer model)"),R9.forEach(t),sar=i(D),$T=n(D,"LI",{});var r9e=s($T);s_e=n(r9e,"STRONG",{});var Xgt=s(s_e);lar=r(Xgt,"gpt2"),Xgt.forEach(t),iar=r(r9e," \u2014 "),qX=n(r9e,"A",{href:!0});var zgt=s(qX);dar=r(zgt,"TFGPT2Model"),zgt.forEach(t),car=r(r9e," (OpenAI GPT-2 model)"),r9e.forEach(t),far=i(D),kT=n(D,"LI",{});var t9e=s(kT);l_e=n(t9e,"STRONG",{});var Wgt=s(l_e);mar=r(Wgt,"gptj"),Wgt.forEach(t),gar=r(t9e," \u2014 "),NX=n(t9e,"A",{href:!0});var Qgt=s(NX);har=r(Qgt,"TFGPTJModel"),Qgt.forEach(t),par=r(t9e," (GPT-J model)"),t9e.forEach(t),uar=i(D),ST=n(D,"LI",{});var a9e=s(ST);i_e=n(a9e,"STRONG",{});var Hgt=s(i_e);_ar=r(Hgt,"hubert"),Hgt.forEach(t),bar=r(a9e," \u2014 "),jX=n(a9e,"A",{href:!0});var Ugt=s(jX);Far=r(Ugt,"TFHubertModel"),Ugt.forEach(t),Tar=r(a9e," (Hubert model)"),a9e.forEach(t),Mar=i(D),RT=n(D,"LI",{});var n9e=s(RT);d_e=n(n9e,"STRONG",{});var Jgt=s(d_e);Ear=r(Jgt,"layoutlm"),Jgt.forEach(t),Car=r(n9e," \u2014 "),DX=n(n9e,"A",{href:!0});var Ygt=s(DX);war=r(Ygt,"TFLayoutLMModel"),Ygt.forEach(t),Aar=r(n9e," (LayoutLM model)"),n9e.forEach(t),yar=i(D),BT=n(D,"LI",{});var s9e=s(BT);c_e=n(s9e,"STRONG",{});var Kgt=s(c_e);Lar=r(Kgt,"led"),Kgt.forEach(t),xar=r(s9e," \u2014 "),GX=n(s9e,"A",{href:!0});var Zgt=s(GX);$ar=r(Zgt,"TFLEDModel"),Zgt.forEach(t),kar=r(s9e," (LED model)"),s9e.forEach(t),Sar=i(D),PT=n(D,"LI",{});var l9e=s(PT);f_e=n(l9e,"STRONG",{});var eht=s(f_e);Rar=r(eht,"longformer"),eht.forEach(t),Bar=r(l9e," \u2014 "),OX=n(l9e,"A",{href:!0});var oht=s(OX);Par=r(oht,"TFLongformerModel"),oht.forEach(t),Iar=r(l9e," (Longformer model)"),l9e.forEach(t),qar=i(D),IT=n(D,"LI",{});var i9e=s(IT);m_e=n(i9e,"STRONG",{});var rht=s(m_e);Nar=r(rht,"lxmert"),rht.forEach(t),jar=r(i9e," \u2014 "),VX=n(i9e,"A",{href:!0});var tht=s(VX);Dar=r(tht,"TFLxmertModel"),tht.forEach(t),Gar=r(i9e," (LXMERT model)"),i9e.forEach(t),Oar=i(D),qT=n(D,"LI",{});var d9e=s(qT);g_e=n(d9e,"STRONG",{});var aht=s(g_e);Var=r(aht,"marian"),aht.forEach(t),Xar=r(d9e," \u2014 "),XX=n(d9e,"A",{href:!0});var nht=s(XX);zar=r(nht,"TFMarianModel"),nht.forEach(t),War=r(d9e," (Marian model)"),d9e.forEach(t),Qar=i(D),NT=n(D,"LI",{});var c9e=s(NT);h_e=n(c9e,"STRONG",{});var sht=s(h_e);Har=r(sht,"mbart"),sht.forEach(t),Uar=r(c9e," \u2014 "),zX=n(c9e,"A",{href:!0});var lht=s(zX);Jar=r(lht,"TFMBartModel"),lht.forEach(t),Yar=r(c9e," (mBART model)"),c9e.forEach(t),Kar=i(D),jT=n(D,"LI",{});var f9e=s(jT);p_e=n(f9e,"STRONG",{});var iht=s(p_e);Zar=r(iht,"mobilebert"),iht.forEach(t),enr=r(f9e," \u2014 "),WX=n(f9e,"A",{href:!0});var dht=s(WX);onr=r(dht,"TFMobileBertModel"),dht.forEach(t),rnr=r(f9e," (MobileBERT model)"),f9e.forEach(t),tnr=i(D),DT=n(D,"LI",{});var m9e=s(DT);u_e=n(m9e,"STRONG",{});var cht=s(u_e);anr=r(cht,"mpnet"),cht.forEach(t),nnr=r(m9e," \u2014 "),QX=n(m9e,"A",{href:!0});var fht=s(QX);snr=r(fht,"TFMPNetModel"),fht.forEach(t),lnr=r(m9e," (MPNet model)"),m9e.forEach(t),inr=i(D),GT=n(D,"LI",{});var g9e=s(GT);__e=n(g9e,"STRONG",{});var mht=s(__e);dnr=r(mht,"mt5"),mht.forEach(t),cnr=r(g9e," \u2014 "),HX=n(g9e,"A",{href:!0});var ght=s(HX);fnr=r(ght,"TFMT5Model"),ght.forEach(t),mnr=r(g9e," (mT5 model)"),g9e.forEach(t),gnr=i(D),OT=n(D,"LI",{});var h9e=s(OT);b_e=n(h9e,"STRONG",{});var hht=s(b_e);hnr=r(hht,"openai-gpt"),hht.forEach(t),pnr=r(h9e," \u2014 "),UX=n(h9e,"A",{href:!0});var pht=s(UX);unr=r(pht,"TFOpenAIGPTModel"),pht.forEach(t),_nr=r(h9e," (OpenAI GPT model)"),h9e.forEach(t),bnr=i(D),VT=n(D,"LI",{});var p9e=s(VT);v_e=n(p9e,"STRONG",{});var uht=s(v_e);vnr=r(uht,"pegasus"),uht.forEach(t),Fnr=r(p9e," \u2014 "),JX=n(p9e,"A",{href:!0});var _ht=s(JX);Tnr=r(_ht,"TFPegasusModel"),_ht.forEach(t),Mnr=r(p9e," (Pegasus model)"),p9e.forEach(t),Enr=i(D),XT=n(D,"LI",{});var u9e=s(XT);F_e=n(u9e,"STRONG",{});var bht=s(F_e);Cnr=r(bht,"rembert"),bht.forEach(t),wnr=r(u9e," \u2014 "),YX=n(u9e,"A",{href:!0});var vht=s(YX);Anr=r(vht,"TFRemBertModel"),vht.forEach(t),ynr=r(u9e," (RemBERT model)"),u9e.forEach(t),Lnr=i(D),zT=n(D,"LI",{});var _9e=s(zT);T_e=n(_9e,"STRONG",{});var Fht=s(T_e);xnr=r(Fht,"roberta"),Fht.forEach(t),$nr=r(_9e," \u2014 "),KX=n(_9e,"A",{href:!0});var Tht=s(KX);knr=r(Tht,"TFRobertaModel"),Tht.forEach(t),Snr=r(_9e," (RoBERTa model)"),_9e.forEach(t),Rnr=i(D),WT=n(D,"LI",{});var b9e=s(WT);M_e=n(b9e,"STRONG",{});var Mht=s(M_e);Bnr=r(Mht,"roformer"),Mht.forEach(t),Pnr=r(b9e," \u2014 "),ZX=n(b9e,"A",{href:!0});var Eht=s(ZX);Inr=r(Eht,"TFRoFormerModel"),Eht.forEach(t),qnr=r(b9e," (RoFormer model)"),b9e.forEach(t),Nnr=i(D),QT=n(D,"LI",{});var v9e=s(QT);E_e=n(v9e,"STRONG",{});var Cht=s(E_e);jnr=r(Cht,"speech_to_text"),Cht.forEach(t),Dnr=r(v9e," \u2014 "),ez=n(v9e,"A",{href:!0});var wht=s(ez);Gnr=r(wht,"TFSpeech2TextModel"),wht.forEach(t),Onr=r(v9e," (Speech2Text model)"),v9e.forEach(t),Vnr=i(D),HT=n(D,"LI",{});var F9e=s(HT);C_e=n(F9e,"STRONG",{});var Aht=s(C_e);Xnr=r(Aht,"t5"),Aht.forEach(t),znr=r(F9e," \u2014 "),oz=n(F9e,"A",{href:!0});var yht=s(oz);Wnr=r(yht,"TFT5Model"),yht.forEach(t),Qnr=r(F9e," (T5 model)"),F9e.forEach(t),Hnr=i(D),UT=n(D,"LI",{});var T9e=s(UT);w_e=n(T9e,"STRONG",{});var Lht=s(w_e);Unr=r(Lht,"tapas"),Lht.forEach(t),Jnr=r(T9e," \u2014 "),rz=n(T9e,"A",{href:!0});var xht=s(rz);Ynr=r(xht,"TFTapasModel"),xht.forEach(t),Knr=r(T9e," (TAPAS model)"),T9e.forEach(t),Znr=i(D),JT=n(D,"LI",{});var M9e=s(JT);A_e=n(M9e,"STRONG",{});var $ht=s(A_e);esr=r($ht,"transfo-xl"),$ht.forEach(t),osr=r(M9e," \u2014 "),tz=n(M9e,"A",{href:!0});var kht=s(tz);rsr=r(kht,"TFTransfoXLModel"),kht.forEach(t),tsr=r(M9e," (Transformer-XL model)"),M9e.forEach(t),asr=i(D),YT=n(D,"LI",{});var E9e=s(YT);y_e=n(E9e,"STRONG",{});var Sht=s(y_e);nsr=r(Sht,"vit"),Sht.forEach(t),ssr=r(E9e," \u2014 "),az=n(E9e,"A",{href:!0});var Rht=s(az);lsr=r(Rht,"TFViTModel"),Rht.forEach(t),isr=r(E9e," (ViT model)"),E9e.forEach(t),dsr=i(D),KT=n(D,"LI",{});var C9e=s(KT);L_e=n(C9e,"STRONG",{});var Bht=s(L_e);csr=r(Bht,"vit_mae"),Bht.forEach(t),fsr=r(C9e," \u2014 "),nz=n(C9e,"A",{href:!0});var Pht=s(nz);msr=r(Pht,"TFViTMAEModel"),Pht.forEach(t),gsr=r(C9e," (ViTMAE model)"),C9e.forEach(t),hsr=i(D),ZT=n(D,"LI",{});var w9e=s(ZT);x_e=n(w9e,"STRONG",{});var Iht=s(x_e);psr=r(Iht,"wav2vec2"),Iht.forEach(t),usr=r(w9e," \u2014 "),sz=n(w9e,"A",{href:!0});var qht=s(sz);_sr=r(qht,"TFWav2Vec2Model"),qht.forEach(t),bsr=r(w9e," (Wav2Vec2 model)"),w9e.forEach(t),vsr=i(D),e8=n(D,"LI",{});var A9e=s(e8);$_e=n(A9e,"STRONG",{});var Nht=s($_e);Fsr=r(Nht,"xlm"),Nht.forEach(t),Tsr=r(A9e," \u2014 "),lz=n(A9e,"A",{href:!0});var jht=s(lz);Msr=r(jht,"TFXLMModel"),jht.forEach(t),Esr=r(A9e," (XLM model)"),A9e.forEach(t),Csr=i(D),o8=n(D,"LI",{});var y9e=s(o8);k_e=n(y9e,"STRONG",{});var Dht=s(k_e);wsr=r(Dht,"xlm-roberta"),Dht.forEach(t),Asr=r(y9e," \u2014 "),iz=n(y9e,"A",{href:!0});var Ght=s(iz);ysr=r(Ght,"TFXLMRobertaModel"),Ght.forEach(t),Lsr=r(y9e," (XLM-RoBERTa model)"),y9e.forEach(t),xsr=i(D),r8=n(D,"LI",{});var L9e=s(r8);S_e=n(L9e,"STRONG",{});var Oht=s(S_e);$sr=r(Oht,"xlnet"),Oht.forEach(t),ksr=r(L9e," \u2014 "),dz=n(L9e,"A",{href:!0});var Vht=s(dz);Ssr=r(Vht,"TFXLNetModel"),Vht.forEach(t),Rsr=r(L9e," (XLNet model)"),L9e.forEach(t),D.forEach(t),Bsr=i(ll),T(t8.$$.fragment,ll),ll.forEach(t),sl.forEach(t),FPe=i(f),Id=n(f,"H2",{class:!0});var Eqe=s(Id);a8=n(Eqe,"A",{id:!0,class:!0,href:!0});var Xht=s(a8);R_e=n(Xht,"SPAN",{});var zht=s(R_e);T(iL.$$.fragment,zht),zht.forEach(t),Xht.forEach(t),Psr=i(Eqe),B_e=n(Eqe,"SPAN",{});var Wht=s(B_e);Isr=r(Wht,"TFAutoModelForPreTraining"),Wht.forEach(t),Eqe.forEach(t),TPe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(dL.$$.fragment,il),qsr=i(il),qd=n(il,"P",{});var iK=s(qd);Nsr=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cz=n(iK,"A",{href:!0});var Qht=s(cz);jsr=r(Qht,"from_pretrained()"),Qht.forEach(t),Dsr=r(iK," class method or the "),fz=n(iK,"A",{href:!0});var Hht=s(fz);Gsr=r(Hht,"from_config()"),Hht.forEach(t),Osr=r(iK,` class
method.`),iK.forEach(t),Vsr=i(il),cL=n(il,"P",{});var Cqe=s(cL);Xsr=r(Cqe,"This class cannot be instantiated directly using "),P_e=n(Cqe,"CODE",{});var Uht=s(P_e);zsr=r(Uht,"__init__()"),Uht.forEach(t),Wsr=r(Cqe," (throws an error)."),Cqe.forEach(t),Qsr=i(il),wt=n(il,"DIV",{class:!0});var ww=s(wt);T(fL.$$.fragment,ww),Hsr=i(ww),I_e=n(ww,"P",{});var Jht=s(I_e);Usr=r(Jht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jht.forEach(t),Jsr=i(ww),Nd=n(ww,"P",{});var dK=s(Nd);Ysr=r(dK,`Note:
Loading a model from its configuration file does `),q_e=n(dK,"STRONG",{});var Yht=s(q_e);Ksr=r(Yht,"not"),Yht.forEach(t),Zsr=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(dK,"A",{href:!0});var Kht=s(mz);elr=r(Kht,"from_pretrained()"),Kht.forEach(t),olr=r(dK," to load the model weights."),dK.forEach(t),rlr=i(ww),T(n8.$$.fragment,ww),ww.forEach(t),tlr=i(il),Er=n(il,"DIV",{class:!0});var dl=s(Er);T(mL.$$.fragment,dl),alr=i(dl),N_e=n(dl,"P",{});var Zht=s(N_e);nlr=r(Zht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zht.forEach(t),slr=i(dl),Ua=n(dl,"P",{});var Aw=s(Ua);llr=r(Aw,"The model class to instantiate is selected based on the "),j_e=n(Aw,"CODE",{});var ept=s(j_e);ilr=r(ept,"model_type"),ept.forEach(t),dlr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),D_e=n(Aw,"CODE",{});var opt=s(D_e);clr=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),flr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(Aw,"CODE",{});var rpt=s(G_e);mlr=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),glr=r(Aw,":"),Aw.forEach(t),hlr=i(dl),ne=n(dl,"UL",{});var le=s(ne);s8=n(le,"LI",{});var x9e=s(s8);O_e=n(x9e,"STRONG",{});var tpt=s(O_e);plr=r(tpt,"albert"),tpt.forEach(t),ulr=r(x9e," \u2014 "),gz=n(x9e,"A",{href:!0});var apt=s(gz);_lr=r(apt,"TFAlbertForPreTraining"),apt.forEach(t),blr=r(x9e," (ALBERT model)"),x9e.forEach(t),vlr=i(le),l8=n(le,"LI",{});var $9e=s(l8);V_e=n($9e,"STRONG",{});var npt=s(V_e);Flr=r(npt,"bart"),npt.forEach(t),Tlr=r($9e," \u2014 "),hz=n($9e,"A",{href:!0});var spt=s(hz);Mlr=r(spt,"TFBartForConditionalGeneration"),spt.forEach(t),Elr=r($9e," (BART model)"),$9e.forEach(t),Clr=i(le),i8=n(le,"LI",{});var k9e=s(i8);X_e=n(k9e,"STRONG",{});var lpt=s(X_e);wlr=r(lpt,"bert"),lpt.forEach(t),Alr=r(k9e," \u2014 "),pz=n(k9e,"A",{href:!0});var ipt=s(pz);ylr=r(ipt,"TFBertForPreTraining"),ipt.forEach(t),Llr=r(k9e," (BERT model)"),k9e.forEach(t),xlr=i(le),d8=n(le,"LI",{});var S9e=s(d8);z_e=n(S9e,"STRONG",{});var dpt=s(z_e);$lr=r(dpt,"camembert"),dpt.forEach(t),klr=r(S9e," \u2014 "),uz=n(S9e,"A",{href:!0});var cpt=s(uz);Slr=r(cpt,"TFCamembertForMaskedLM"),cpt.forEach(t),Rlr=r(S9e," (CamemBERT model)"),S9e.forEach(t),Blr=i(le),c8=n(le,"LI",{});var R9e=s(c8);W_e=n(R9e,"STRONG",{});var fpt=s(W_e);Plr=r(fpt,"ctrl"),fpt.forEach(t),Ilr=r(R9e," \u2014 "),_z=n(R9e,"A",{href:!0});var mpt=s(_z);qlr=r(mpt,"TFCTRLLMHeadModel"),mpt.forEach(t),Nlr=r(R9e," (CTRL model)"),R9e.forEach(t),jlr=i(le),f8=n(le,"LI",{});var B9e=s(f8);Q_e=n(B9e,"STRONG",{});var gpt=s(Q_e);Dlr=r(gpt,"distilbert"),gpt.forEach(t),Glr=r(B9e," \u2014 "),bz=n(B9e,"A",{href:!0});var hpt=s(bz);Olr=r(hpt,"TFDistilBertForMaskedLM"),hpt.forEach(t),Vlr=r(B9e," (DistilBERT model)"),B9e.forEach(t),Xlr=i(le),m8=n(le,"LI",{});var P9e=s(m8);H_e=n(P9e,"STRONG",{});var ppt=s(H_e);zlr=r(ppt,"electra"),ppt.forEach(t),Wlr=r(P9e," \u2014 "),vz=n(P9e,"A",{href:!0});var upt=s(vz);Qlr=r(upt,"TFElectraForPreTraining"),upt.forEach(t),Hlr=r(P9e," (ELECTRA model)"),P9e.forEach(t),Ulr=i(le),g8=n(le,"LI",{});var I9e=s(g8);U_e=n(I9e,"STRONG",{});var _pt=s(U_e);Jlr=r(_pt,"flaubert"),_pt.forEach(t),Ylr=r(I9e," \u2014 "),Fz=n(I9e,"A",{href:!0});var bpt=s(Fz);Klr=r(bpt,"TFFlaubertWithLMHeadModel"),bpt.forEach(t),Zlr=r(I9e," (FlauBERT model)"),I9e.forEach(t),eir=i(le),h8=n(le,"LI",{});var q9e=s(h8);J_e=n(q9e,"STRONG",{});var vpt=s(J_e);oir=r(vpt,"funnel"),vpt.forEach(t),rir=r(q9e," \u2014 "),Tz=n(q9e,"A",{href:!0});var Fpt=s(Tz);tir=r(Fpt,"TFFunnelForPreTraining"),Fpt.forEach(t),air=r(q9e," (Funnel Transformer model)"),q9e.forEach(t),nir=i(le),p8=n(le,"LI",{});var N9e=s(p8);Y_e=n(N9e,"STRONG",{});var Tpt=s(Y_e);sir=r(Tpt,"gpt2"),Tpt.forEach(t),lir=r(N9e," \u2014 "),Mz=n(N9e,"A",{href:!0});var Mpt=s(Mz);iir=r(Mpt,"TFGPT2LMHeadModel"),Mpt.forEach(t),dir=r(N9e," (OpenAI GPT-2 model)"),N9e.forEach(t),cir=i(le),u8=n(le,"LI",{});var j9e=s(u8);K_e=n(j9e,"STRONG",{});var Ept=s(K_e);fir=r(Ept,"layoutlm"),Ept.forEach(t),mir=r(j9e," \u2014 "),Ez=n(j9e,"A",{href:!0});var Cpt=s(Ez);gir=r(Cpt,"TFLayoutLMForMaskedLM"),Cpt.forEach(t),hir=r(j9e," (LayoutLM model)"),j9e.forEach(t),pir=i(le),_8=n(le,"LI",{});var D9e=s(_8);Z_e=n(D9e,"STRONG",{});var wpt=s(Z_e);uir=r(wpt,"lxmert"),wpt.forEach(t),_ir=r(D9e," \u2014 "),Cz=n(D9e,"A",{href:!0});var Apt=s(Cz);bir=r(Apt,"TFLxmertForPreTraining"),Apt.forEach(t),vir=r(D9e," (LXMERT model)"),D9e.forEach(t),Fir=i(le),b8=n(le,"LI",{});var G9e=s(b8);e1e=n(G9e,"STRONG",{});var ypt=s(e1e);Tir=r(ypt,"mobilebert"),ypt.forEach(t),Mir=r(G9e," \u2014 "),wz=n(G9e,"A",{href:!0});var Lpt=s(wz);Eir=r(Lpt,"TFMobileBertForPreTraining"),Lpt.forEach(t),Cir=r(G9e," (MobileBERT model)"),G9e.forEach(t),wir=i(le),v8=n(le,"LI",{});var O9e=s(v8);o1e=n(O9e,"STRONG",{});var xpt=s(o1e);Air=r(xpt,"mpnet"),xpt.forEach(t),yir=r(O9e," \u2014 "),Az=n(O9e,"A",{href:!0});var $pt=s(Az);Lir=r($pt,"TFMPNetForMaskedLM"),$pt.forEach(t),xir=r(O9e," (MPNet model)"),O9e.forEach(t),$ir=i(le),F8=n(le,"LI",{});var V9e=s(F8);r1e=n(V9e,"STRONG",{});var kpt=s(r1e);kir=r(kpt,"openai-gpt"),kpt.forEach(t),Sir=r(V9e," \u2014 "),yz=n(V9e,"A",{href:!0});var Spt=s(yz);Rir=r(Spt,"TFOpenAIGPTLMHeadModel"),Spt.forEach(t),Bir=r(V9e," (OpenAI GPT model)"),V9e.forEach(t),Pir=i(le),T8=n(le,"LI",{});var X9e=s(T8);t1e=n(X9e,"STRONG",{});var Rpt=s(t1e);Iir=r(Rpt,"roberta"),Rpt.forEach(t),qir=r(X9e," \u2014 "),Lz=n(X9e,"A",{href:!0});var Bpt=s(Lz);Nir=r(Bpt,"TFRobertaForMaskedLM"),Bpt.forEach(t),jir=r(X9e," (RoBERTa model)"),X9e.forEach(t),Dir=i(le),M8=n(le,"LI",{});var z9e=s(M8);a1e=n(z9e,"STRONG",{});var Ppt=s(a1e);Gir=r(Ppt,"t5"),Ppt.forEach(t),Oir=r(z9e," \u2014 "),xz=n(z9e,"A",{href:!0});var Ipt=s(xz);Vir=r(Ipt,"TFT5ForConditionalGeneration"),Ipt.forEach(t),Xir=r(z9e," (T5 model)"),z9e.forEach(t),zir=i(le),E8=n(le,"LI",{});var W9e=s(E8);n1e=n(W9e,"STRONG",{});var qpt=s(n1e);Wir=r(qpt,"tapas"),qpt.forEach(t),Qir=r(W9e," \u2014 "),$z=n(W9e,"A",{href:!0});var Npt=s($z);Hir=r(Npt,"TFTapasForMaskedLM"),Npt.forEach(t),Uir=r(W9e," (TAPAS model)"),W9e.forEach(t),Jir=i(le),C8=n(le,"LI",{});var Q9e=s(C8);s1e=n(Q9e,"STRONG",{});var jpt=s(s1e);Yir=r(jpt,"transfo-xl"),jpt.forEach(t),Kir=r(Q9e," \u2014 "),kz=n(Q9e,"A",{href:!0});var Dpt=s(kz);Zir=r(Dpt,"TFTransfoXLLMHeadModel"),Dpt.forEach(t),edr=r(Q9e," (Transformer-XL model)"),Q9e.forEach(t),odr=i(le),w8=n(le,"LI",{});var H9e=s(w8);l1e=n(H9e,"STRONG",{});var Gpt=s(l1e);rdr=r(Gpt,"vit_mae"),Gpt.forEach(t),tdr=r(H9e," \u2014 "),Sz=n(H9e,"A",{href:!0});var Opt=s(Sz);adr=r(Opt,"TFViTMAEForPreTraining"),Opt.forEach(t),ndr=r(H9e," (ViTMAE model)"),H9e.forEach(t),sdr=i(le),A8=n(le,"LI",{});var U9e=s(A8);i1e=n(U9e,"STRONG",{});var Vpt=s(i1e);ldr=r(Vpt,"xlm"),Vpt.forEach(t),idr=r(U9e," \u2014 "),Rz=n(U9e,"A",{href:!0});var Xpt=s(Rz);ddr=r(Xpt,"TFXLMWithLMHeadModel"),Xpt.forEach(t),cdr=r(U9e," (XLM model)"),U9e.forEach(t),fdr=i(le),y8=n(le,"LI",{});var J9e=s(y8);d1e=n(J9e,"STRONG",{});var zpt=s(d1e);mdr=r(zpt,"xlm-roberta"),zpt.forEach(t),gdr=r(J9e," \u2014 "),Bz=n(J9e,"A",{href:!0});var Wpt=s(Bz);hdr=r(Wpt,"TFXLMRobertaForMaskedLM"),Wpt.forEach(t),pdr=r(J9e," (XLM-RoBERTa model)"),J9e.forEach(t),udr=i(le),L8=n(le,"LI",{});var Y9e=s(L8);c1e=n(Y9e,"STRONG",{});var Qpt=s(c1e);_dr=r(Qpt,"xlnet"),Qpt.forEach(t),bdr=r(Y9e," \u2014 "),Pz=n(Y9e,"A",{href:!0});var Hpt=s(Pz);vdr=r(Hpt,"TFXLNetLMHeadModel"),Hpt.forEach(t),Fdr=r(Y9e," (XLNet model)"),Y9e.forEach(t),le.forEach(t),Tdr=i(dl),T(x8.$$.fragment,dl),dl.forEach(t),il.forEach(t),MPe=i(f),jd=n(f,"H2",{class:!0});var wqe=s(jd);$8=n(wqe,"A",{id:!0,class:!0,href:!0});var Upt=s($8);f1e=n(Upt,"SPAN",{});var Jpt=s(f1e);T(gL.$$.fragment,Jpt),Jpt.forEach(t),Upt.forEach(t),Mdr=i(wqe),m1e=n(wqe,"SPAN",{});var Ypt=s(m1e);Edr=r(Ypt,"TFAutoModelForCausalLM"),Ypt.forEach(t),wqe.forEach(t),EPe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(hL.$$.fragment,cl),Cdr=i(cl),Dd=n(cl,"P",{});var cK=s(Dd);wdr=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Iz=n(cK,"A",{href:!0});var Kpt=s(Iz);Adr=r(Kpt,"from_pretrained()"),Kpt.forEach(t),ydr=r(cK," class method or the "),qz=n(cK,"A",{href:!0});var Zpt=s(qz);Ldr=r(Zpt,"from_config()"),Zpt.forEach(t),xdr=r(cK,` class
method.`),cK.forEach(t),$dr=i(cl),pL=n(cl,"P",{});var Aqe=s(pL);kdr=r(Aqe,"This class cannot be instantiated directly using "),g1e=n(Aqe,"CODE",{});var eut=s(g1e);Sdr=r(eut,"__init__()"),eut.forEach(t),Rdr=r(Aqe," (throws an error)."),Aqe.forEach(t),Bdr=i(cl),At=n(cl,"DIV",{class:!0});var yw=s(At);T(uL.$$.fragment,yw),Pdr=i(yw),h1e=n(yw,"P",{});var out=s(h1e);Idr=r(out,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),out.forEach(t),qdr=i(yw),Gd=n(yw,"P",{});var fK=s(Gd);Ndr=r(fK,`Note:
Loading a model from its configuration file does `),p1e=n(fK,"STRONG",{});var rut=s(p1e);jdr=r(rut,"not"),rut.forEach(t),Ddr=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(fK,"A",{href:!0});var tut=s(Nz);Gdr=r(tut,"from_pretrained()"),tut.forEach(t),Odr=r(fK," to load the model weights."),fK.forEach(t),Vdr=i(yw),T(k8.$$.fragment,yw),yw.forEach(t),Xdr=i(cl),Cr=n(cl,"DIV",{class:!0});var fl=s(Cr);T(_L.$$.fragment,fl),zdr=i(fl),u1e=n(fl,"P",{});var aut=s(u1e);Wdr=r(aut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),aut.forEach(t),Qdr=i(fl),Ja=n(fl,"P",{});var Lw=s(Ja);Hdr=r(Lw,"The model class to instantiate is selected based on the "),_1e=n(Lw,"CODE",{});var nut=s(_1e);Udr=r(nut,"model_type"),nut.forEach(t),Jdr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),b1e=n(Lw,"CODE",{});var sut=s(b1e);Ydr=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),Kdr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v1e=n(Lw,"CODE",{});var lut=s(v1e);Zdr=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),ecr=r(Lw,":"),Lw.forEach(t),ocr=i(fl),Te=n(fl,"UL",{});var Ce=s(Te);S8=n(Ce,"LI",{});var K9e=s(S8);F1e=n(K9e,"STRONG",{});var iut=s(F1e);rcr=r(iut,"bert"),iut.forEach(t),tcr=r(K9e," \u2014 "),jz=n(K9e,"A",{href:!0});var dut=s(jz);acr=r(dut,"TFBertLMHeadModel"),dut.forEach(t),ncr=r(K9e," (BERT model)"),K9e.forEach(t),scr=i(Ce),R8=n(Ce,"LI",{});var Z9e=s(R8);T1e=n(Z9e,"STRONG",{});var cut=s(T1e);lcr=r(cut,"camembert"),cut.forEach(t),icr=r(Z9e," \u2014 "),Dz=n(Z9e,"A",{href:!0});var fut=s(Dz);dcr=r(fut,"TFCamembertForCausalLM"),fut.forEach(t),ccr=r(Z9e," (CamemBERT model)"),Z9e.forEach(t),fcr=i(Ce),B8=n(Ce,"LI",{});var e$e=s(B8);M1e=n(e$e,"STRONG",{});var mut=s(M1e);mcr=r(mut,"ctrl"),mut.forEach(t),gcr=r(e$e," \u2014 "),Gz=n(e$e,"A",{href:!0});var gut=s(Gz);hcr=r(gut,"TFCTRLLMHeadModel"),gut.forEach(t),pcr=r(e$e," (CTRL model)"),e$e.forEach(t),ucr=i(Ce),P8=n(Ce,"LI",{});var o$e=s(P8);E1e=n(o$e,"STRONG",{});var hut=s(E1e);_cr=r(hut,"gpt2"),hut.forEach(t),bcr=r(o$e," \u2014 "),Oz=n(o$e,"A",{href:!0});var put=s(Oz);vcr=r(put,"TFGPT2LMHeadModel"),put.forEach(t),Fcr=r(o$e," (OpenAI GPT-2 model)"),o$e.forEach(t),Tcr=i(Ce),I8=n(Ce,"LI",{});var r$e=s(I8);C1e=n(r$e,"STRONG",{});var uut=s(C1e);Mcr=r(uut,"gptj"),uut.forEach(t),Ecr=r(r$e," \u2014 "),Vz=n(r$e,"A",{href:!0});var _ut=s(Vz);Ccr=r(_ut,"TFGPTJForCausalLM"),_ut.forEach(t),wcr=r(r$e," (GPT-J model)"),r$e.forEach(t),Acr=i(Ce),q8=n(Ce,"LI",{});var t$e=s(q8);w1e=n(t$e,"STRONG",{});var but=s(w1e);ycr=r(but,"openai-gpt"),but.forEach(t),Lcr=r(t$e," \u2014 "),Xz=n(t$e,"A",{href:!0});var vut=s(Xz);xcr=r(vut,"TFOpenAIGPTLMHeadModel"),vut.forEach(t),$cr=r(t$e," (OpenAI GPT model)"),t$e.forEach(t),kcr=i(Ce),N8=n(Ce,"LI",{});var a$e=s(N8);A1e=n(a$e,"STRONG",{});var Fut=s(A1e);Scr=r(Fut,"rembert"),Fut.forEach(t),Rcr=r(a$e," \u2014 "),zz=n(a$e,"A",{href:!0});var Tut=s(zz);Bcr=r(Tut,"TFRemBertForCausalLM"),Tut.forEach(t),Pcr=r(a$e," (RemBERT model)"),a$e.forEach(t),Icr=i(Ce),j8=n(Ce,"LI",{});var n$e=s(j8);y1e=n(n$e,"STRONG",{});var Mut=s(y1e);qcr=r(Mut,"roberta"),Mut.forEach(t),Ncr=r(n$e," \u2014 "),Wz=n(n$e,"A",{href:!0});var Eut=s(Wz);jcr=r(Eut,"TFRobertaForCausalLM"),Eut.forEach(t),Dcr=r(n$e," (RoBERTa model)"),n$e.forEach(t),Gcr=i(Ce),D8=n(Ce,"LI",{});var s$e=s(D8);L1e=n(s$e,"STRONG",{});var Cut=s(L1e);Ocr=r(Cut,"roformer"),Cut.forEach(t),Vcr=r(s$e," \u2014 "),Qz=n(s$e,"A",{href:!0});var wut=s(Qz);Xcr=r(wut,"TFRoFormerForCausalLM"),wut.forEach(t),zcr=r(s$e," (RoFormer model)"),s$e.forEach(t),Wcr=i(Ce),G8=n(Ce,"LI",{});var l$e=s(G8);x1e=n(l$e,"STRONG",{});var Aut=s(x1e);Qcr=r(Aut,"transfo-xl"),Aut.forEach(t),Hcr=r(l$e," \u2014 "),Hz=n(l$e,"A",{href:!0});var yut=s(Hz);Ucr=r(yut,"TFTransfoXLLMHeadModel"),yut.forEach(t),Jcr=r(l$e," (Transformer-XL model)"),l$e.forEach(t),Ycr=i(Ce),O8=n(Ce,"LI",{});var i$e=s(O8);$1e=n(i$e,"STRONG",{});var Lut=s($1e);Kcr=r(Lut,"xlm"),Lut.forEach(t),Zcr=r(i$e," \u2014 "),Uz=n(i$e,"A",{href:!0});var xut=s(Uz);efr=r(xut,"TFXLMWithLMHeadModel"),xut.forEach(t),ofr=r(i$e," (XLM model)"),i$e.forEach(t),rfr=i(Ce),V8=n(Ce,"LI",{});var d$e=s(V8);k1e=n(d$e,"STRONG",{});var $ut=s(k1e);tfr=r($ut,"xlnet"),$ut.forEach(t),afr=r(d$e," \u2014 "),Jz=n(d$e,"A",{href:!0});var kut=s(Jz);nfr=r(kut,"TFXLNetLMHeadModel"),kut.forEach(t),sfr=r(d$e," (XLNet model)"),d$e.forEach(t),Ce.forEach(t),lfr=i(fl),T(X8.$$.fragment,fl),fl.forEach(t),cl.forEach(t),CPe=i(f),Od=n(f,"H2",{class:!0});var yqe=s(Od);z8=n(yqe,"A",{id:!0,class:!0,href:!0});var Sut=s(z8);S1e=n(Sut,"SPAN",{});var Rut=s(S1e);T(bL.$$.fragment,Rut),Rut.forEach(t),Sut.forEach(t),ifr=i(yqe),R1e=n(yqe,"SPAN",{});var But=s(R1e);dfr=r(But,"TFAutoModelForImageClassification"),But.forEach(t),yqe.forEach(t),wPe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(vL.$$.fragment,ml),cfr=i(ml),Vd=n(ml,"P",{});var mK=s(Vd);ffr=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yz=n(mK,"A",{href:!0});var Put=s(Yz);mfr=r(Put,"from_pretrained()"),Put.forEach(t),gfr=r(mK," class method or the "),Kz=n(mK,"A",{href:!0});var Iut=s(Kz);hfr=r(Iut,"from_config()"),Iut.forEach(t),pfr=r(mK,` class
method.`),mK.forEach(t),ufr=i(ml),FL=n(ml,"P",{});var Lqe=s(FL);_fr=r(Lqe,"This class cannot be instantiated directly using "),B1e=n(Lqe,"CODE",{});var qut=s(B1e);bfr=r(qut,"__init__()"),qut.forEach(t),vfr=r(Lqe," (throws an error)."),Lqe.forEach(t),Ffr=i(ml),yt=n(ml,"DIV",{class:!0});var xw=s(yt);T(TL.$$.fragment,xw),Tfr=i(xw),P1e=n(xw,"P",{});var Nut=s(P1e);Mfr=r(Nut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nut.forEach(t),Efr=i(xw),Xd=n(xw,"P",{});var gK=s(Xd);Cfr=r(gK,`Note:
Loading a model from its configuration file does `),I1e=n(gK,"STRONG",{});var jut=s(I1e);wfr=r(jut,"not"),jut.forEach(t),Afr=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(gK,"A",{href:!0});var Dut=s(Zz);yfr=r(Dut,"from_pretrained()"),Dut.forEach(t),Lfr=r(gK," to load the model weights."),gK.forEach(t),xfr=i(xw),T(W8.$$.fragment,xw),xw.forEach(t),$fr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(ML.$$.fragment,gl),kfr=i(gl),q1e=n(gl,"P",{});var Gut=s(q1e);Sfr=r(Gut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gut.forEach(t),Rfr=i(gl),Ya=n(gl,"P",{});var $w=s(Ya);Bfr=r($w,"The model class to instantiate is selected based on the "),N1e=n($w,"CODE",{});var Out=s(N1e);Pfr=r(Out,"model_type"),Out.forEach(t),Ifr=r($w,` property of the config object (either
passed as an argument or loaded from `),j1e=n($w,"CODE",{});var Vut=s(j1e);qfr=r(Vut,"pretrained_model_name_or_path"),Vut.forEach(t),Nfr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n($w,"CODE",{});var Xut=s(D1e);jfr=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),Dfr=r($w,":"),$w.forEach(t),Gfr=i(gl),EL=n(gl,"UL",{});var xqe=s(EL);Q8=n(xqe,"LI",{});var c$e=s(Q8);G1e=n(c$e,"STRONG",{});var zut=s(G1e);Ofr=r(zut,"convnext"),zut.forEach(t),Vfr=r(c$e," \u2014 "),eW=n(c$e,"A",{href:!0});var Wut=s(eW);Xfr=r(Wut,"TFConvNextForImageClassification"),Wut.forEach(t),zfr=r(c$e," (ConvNext model)"),c$e.forEach(t),Wfr=i(xqe),H8=n(xqe,"LI",{});var f$e=s(H8);O1e=n(f$e,"STRONG",{});var Qut=s(O1e);Qfr=r(Qut,"vit"),Qut.forEach(t),Hfr=r(f$e," \u2014 "),oW=n(f$e,"A",{href:!0});var Hut=s(oW);Ufr=r(Hut,"TFViTForImageClassification"),Hut.forEach(t),Jfr=r(f$e," (ViT model)"),f$e.forEach(t),xqe.forEach(t),Yfr=i(gl),T(U8.$$.fragment,gl),gl.forEach(t),ml.forEach(t),APe=i(f),zd=n(f,"H2",{class:!0});var $qe=s(zd);J8=n($qe,"A",{id:!0,class:!0,href:!0});var Uut=s(J8);V1e=n(Uut,"SPAN",{});var Jut=s(V1e);T(CL.$$.fragment,Jut),Jut.forEach(t),Uut.forEach(t),Kfr=i($qe),X1e=n($qe,"SPAN",{});var Yut=s(X1e);Zfr=r(Yut,"TFAutoModelForMaskedLM"),Yut.forEach(t),$qe.forEach(t),yPe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(wL.$$.fragment,hl),emr=i(hl),Wd=n(hl,"P",{});var hK=s(Wd);omr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rW=n(hK,"A",{href:!0});var Kut=s(rW);rmr=r(Kut,"from_pretrained()"),Kut.forEach(t),tmr=r(hK," class method or the "),tW=n(hK,"A",{href:!0});var Zut=s(tW);amr=r(Zut,"from_config()"),Zut.forEach(t),nmr=r(hK,` class
method.`),hK.forEach(t),smr=i(hl),AL=n(hl,"P",{});var kqe=s(AL);lmr=r(kqe,"This class cannot be instantiated directly using "),z1e=n(kqe,"CODE",{});var e_t=s(z1e);imr=r(e_t,"__init__()"),e_t.forEach(t),dmr=r(kqe," (throws an error)."),kqe.forEach(t),cmr=i(hl),Lt=n(hl,"DIV",{class:!0});var kw=s(Lt);T(yL.$$.fragment,kw),fmr=i(kw),W1e=n(kw,"P",{});var o_t=s(W1e);mmr=r(o_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),o_t.forEach(t),gmr=i(kw),Qd=n(kw,"P",{});var pK=s(Qd);hmr=r(pK,`Note:
Loading a model from its configuration file does `),Q1e=n(pK,"STRONG",{});var r_t=s(Q1e);pmr=r(r_t,"not"),r_t.forEach(t),umr=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(pK,"A",{href:!0});var t_t=s(aW);_mr=r(t_t,"from_pretrained()"),t_t.forEach(t),bmr=r(pK," to load the model weights."),pK.forEach(t),vmr=i(kw),T(Y8.$$.fragment,kw),kw.forEach(t),Fmr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(LL.$$.fragment,pl),Tmr=i(pl),H1e=n(pl,"P",{});var a_t=s(H1e);Mmr=r(a_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),a_t.forEach(t),Emr=i(pl),Ka=n(pl,"P",{});var Sw=s(Ka);Cmr=r(Sw,"The model class to instantiate is selected based on the "),U1e=n(Sw,"CODE",{});var n_t=s(U1e);wmr=r(n_t,"model_type"),n_t.forEach(t),Amr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),J1e=n(Sw,"CODE",{});var s_t=s(J1e);ymr=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),Lmr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(Sw,"CODE",{});var l_t=s(Y1e);xmr=r(l_t,"pretrained_model_name_or_path"),l_t.forEach(t),$mr=r(Sw,":"),Sw.forEach(t),kmr=i(pl),ie=n(pl,"UL",{});var fe=s(ie);K8=n(fe,"LI",{});var m$e=s(K8);K1e=n(m$e,"STRONG",{});var i_t=s(K1e);Smr=r(i_t,"albert"),i_t.forEach(t),Rmr=r(m$e," \u2014 "),nW=n(m$e,"A",{href:!0});var d_t=s(nW);Bmr=r(d_t,"TFAlbertForMaskedLM"),d_t.forEach(t),Pmr=r(m$e," (ALBERT model)"),m$e.forEach(t),Imr=i(fe),Z8=n(fe,"LI",{});var g$e=s(Z8);Z1e=n(g$e,"STRONG",{});var c_t=s(Z1e);qmr=r(c_t,"bert"),c_t.forEach(t),Nmr=r(g$e," \u2014 "),sW=n(g$e,"A",{href:!0});var f_t=s(sW);jmr=r(f_t,"TFBertForMaskedLM"),f_t.forEach(t),Dmr=r(g$e," (BERT model)"),g$e.forEach(t),Gmr=i(fe),eM=n(fe,"LI",{});var h$e=s(eM);e2e=n(h$e,"STRONG",{});var m_t=s(e2e);Omr=r(m_t,"camembert"),m_t.forEach(t),Vmr=r(h$e," \u2014 "),lW=n(h$e,"A",{href:!0});var g_t=s(lW);Xmr=r(g_t,"TFCamembertForMaskedLM"),g_t.forEach(t),zmr=r(h$e," (CamemBERT model)"),h$e.forEach(t),Wmr=i(fe),oM=n(fe,"LI",{});var p$e=s(oM);o2e=n(p$e,"STRONG",{});var h_t=s(o2e);Qmr=r(h_t,"convbert"),h_t.forEach(t),Hmr=r(p$e," \u2014 "),iW=n(p$e,"A",{href:!0});var p_t=s(iW);Umr=r(p_t,"TFConvBertForMaskedLM"),p_t.forEach(t),Jmr=r(p$e," (ConvBERT model)"),p$e.forEach(t),Ymr=i(fe),rM=n(fe,"LI",{});var u$e=s(rM);r2e=n(u$e,"STRONG",{});var u_t=s(r2e);Kmr=r(u_t,"deberta"),u_t.forEach(t),Zmr=r(u$e," \u2014 "),dW=n(u$e,"A",{href:!0});var __t=s(dW);egr=r(__t,"TFDebertaForMaskedLM"),__t.forEach(t),ogr=r(u$e," (DeBERTa model)"),u$e.forEach(t),rgr=i(fe),tM=n(fe,"LI",{});var _$e=s(tM);t2e=n(_$e,"STRONG",{});var b_t=s(t2e);tgr=r(b_t,"deberta-v2"),b_t.forEach(t),agr=r(_$e," \u2014 "),cW=n(_$e,"A",{href:!0});var v_t=s(cW);ngr=r(v_t,"TFDebertaV2ForMaskedLM"),v_t.forEach(t),sgr=r(_$e," (DeBERTa-v2 model)"),_$e.forEach(t),lgr=i(fe),aM=n(fe,"LI",{});var b$e=s(aM);a2e=n(b$e,"STRONG",{});var F_t=s(a2e);igr=r(F_t,"distilbert"),F_t.forEach(t),dgr=r(b$e," \u2014 "),fW=n(b$e,"A",{href:!0});var T_t=s(fW);cgr=r(T_t,"TFDistilBertForMaskedLM"),T_t.forEach(t),fgr=r(b$e," (DistilBERT model)"),b$e.forEach(t),mgr=i(fe),nM=n(fe,"LI",{});var v$e=s(nM);n2e=n(v$e,"STRONG",{});var M_t=s(n2e);ggr=r(M_t,"electra"),M_t.forEach(t),hgr=r(v$e," \u2014 "),mW=n(v$e,"A",{href:!0});var E_t=s(mW);pgr=r(E_t,"TFElectraForMaskedLM"),E_t.forEach(t),ugr=r(v$e," (ELECTRA model)"),v$e.forEach(t),_gr=i(fe),sM=n(fe,"LI",{});var F$e=s(sM);s2e=n(F$e,"STRONG",{});var C_t=s(s2e);bgr=r(C_t,"flaubert"),C_t.forEach(t),vgr=r(F$e," \u2014 "),gW=n(F$e,"A",{href:!0});var w_t=s(gW);Fgr=r(w_t,"TFFlaubertWithLMHeadModel"),w_t.forEach(t),Tgr=r(F$e," (FlauBERT model)"),F$e.forEach(t),Mgr=i(fe),lM=n(fe,"LI",{});var T$e=s(lM);l2e=n(T$e,"STRONG",{});var A_t=s(l2e);Egr=r(A_t,"funnel"),A_t.forEach(t),Cgr=r(T$e," \u2014 "),hW=n(T$e,"A",{href:!0});var y_t=s(hW);wgr=r(y_t,"TFFunnelForMaskedLM"),y_t.forEach(t),Agr=r(T$e," (Funnel Transformer model)"),T$e.forEach(t),ygr=i(fe),iM=n(fe,"LI",{});var M$e=s(iM);i2e=n(M$e,"STRONG",{});var L_t=s(i2e);Lgr=r(L_t,"layoutlm"),L_t.forEach(t),xgr=r(M$e," \u2014 "),pW=n(M$e,"A",{href:!0});var x_t=s(pW);$gr=r(x_t,"TFLayoutLMForMaskedLM"),x_t.forEach(t),kgr=r(M$e," (LayoutLM model)"),M$e.forEach(t),Sgr=i(fe),dM=n(fe,"LI",{});var E$e=s(dM);d2e=n(E$e,"STRONG",{});var $_t=s(d2e);Rgr=r($_t,"longformer"),$_t.forEach(t),Bgr=r(E$e," \u2014 "),uW=n(E$e,"A",{href:!0});var k_t=s(uW);Pgr=r(k_t,"TFLongformerForMaskedLM"),k_t.forEach(t),Igr=r(E$e," (Longformer model)"),E$e.forEach(t),qgr=i(fe),cM=n(fe,"LI",{});var C$e=s(cM);c2e=n(C$e,"STRONG",{});var S_t=s(c2e);Ngr=r(S_t,"mobilebert"),S_t.forEach(t),jgr=r(C$e," \u2014 "),_W=n(C$e,"A",{href:!0});var R_t=s(_W);Dgr=r(R_t,"TFMobileBertForMaskedLM"),R_t.forEach(t),Ggr=r(C$e," (MobileBERT model)"),C$e.forEach(t),Ogr=i(fe),fM=n(fe,"LI",{});var w$e=s(fM);f2e=n(w$e,"STRONG",{});var B_t=s(f2e);Vgr=r(B_t,"mpnet"),B_t.forEach(t),Xgr=r(w$e," \u2014 "),bW=n(w$e,"A",{href:!0});var P_t=s(bW);zgr=r(P_t,"TFMPNetForMaskedLM"),P_t.forEach(t),Wgr=r(w$e," (MPNet model)"),w$e.forEach(t),Qgr=i(fe),mM=n(fe,"LI",{});var A$e=s(mM);m2e=n(A$e,"STRONG",{});var I_t=s(m2e);Hgr=r(I_t,"rembert"),I_t.forEach(t),Ugr=r(A$e," \u2014 "),vW=n(A$e,"A",{href:!0});var q_t=s(vW);Jgr=r(q_t,"TFRemBertForMaskedLM"),q_t.forEach(t),Ygr=r(A$e," (RemBERT model)"),A$e.forEach(t),Kgr=i(fe),gM=n(fe,"LI",{});var y$e=s(gM);g2e=n(y$e,"STRONG",{});var N_t=s(g2e);Zgr=r(N_t,"roberta"),N_t.forEach(t),ehr=r(y$e," \u2014 "),FW=n(y$e,"A",{href:!0});var j_t=s(FW);ohr=r(j_t,"TFRobertaForMaskedLM"),j_t.forEach(t),rhr=r(y$e," (RoBERTa model)"),y$e.forEach(t),thr=i(fe),hM=n(fe,"LI",{});var L$e=s(hM);h2e=n(L$e,"STRONG",{});var D_t=s(h2e);ahr=r(D_t,"roformer"),D_t.forEach(t),nhr=r(L$e," \u2014 "),TW=n(L$e,"A",{href:!0});var G_t=s(TW);shr=r(G_t,"TFRoFormerForMaskedLM"),G_t.forEach(t),lhr=r(L$e," (RoFormer model)"),L$e.forEach(t),ihr=i(fe),pM=n(fe,"LI",{});var x$e=s(pM);p2e=n(x$e,"STRONG",{});var O_t=s(p2e);dhr=r(O_t,"tapas"),O_t.forEach(t),chr=r(x$e," \u2014 "),MW=n(x$e,"A",{href:!0});var V_t=s(MW);fhr=r(V_t,"TFTapasForMaskedLM"),V_t.forEach(t),mhr=r(x$e," (TAPAS model)"),x$e.forEach(t),ghr=i(fe),uM=n(fe,"LI",{});var $$e=s(uM);u2e=n($$e,"STRONG",{});var X_t=s(u2e);hhr=r(X_t,"xlm"),X_t.forEach(t),phr=r($$e," \u2014 "),EW=n($$e,"A",{href:!0});var z_t=s(EW);uhr=r(z_t,"TFXLMWithLMHeadModel"),z_t.forEach(t),_hr=r($$e," (XLM model)"),$$e.forEach(t),bhr=i(fe),_M=n(fe,"LI",{});var k$e=s(_M);_2e=n(k$e,"STRONG",{});var W_t=s(_2e);vhr=r(W_t,"xlm-roberta"),W_t.forEach(t),Fhr=r(k$e," \u2014 "),CW=n(k$e,"A",{href:!0});var Q_t=s(CW);Thr=r(Q_t,"TFXLMRobertaForMaskedLM"),Q_t.forEach(t),Mhr=r(k$e," (XLM-RoBERTa model)"),k$e.forEach(t),fe.forEach(t),Ehr=i(pl),T(bM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),LPe=i(f),Hd=n(f,"H2",{class:!0});var Sqe=s(Hd);vM=n(Sqe,"A",{id:!0,class:!0,href:!0});var H_t=s(vM);b2e=n(H_t,"SPAN",{});var U_t=s(b2e);T(xL.$$.fragment,U_t),U_t.forEach(t),H_t.forEach(t),Chr=i(Sqe),v2e=n(Sqe,"SPAN",{});var J_t=s(v2e);whr=r(J_t,"TFAutoModelForSeq2SeqLM"),J_t.forEach(t),Sqe.forEach(t),xPe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T($L.$$.fragment,ul),Ahr=i(ul),Ud=n(ul,"P",{});var uK=s(Ud);yhr=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wW=n(uK,"A",{href:!0});var Y_t=s(wW);Lhr=r(Y_t,"from_pretrained()"),Y_t.forEach(t),xhr=r(uK," class method or the "),AW=n(uK,"A",{href:!0});var K_t=s(AW);$hr=r(K_t,"from_config()"),K_t.forEach(t),khr=r(uK,` class
method.`),uK.forEach(t),Shr=i(ul),kL=n(ul,"P",{});var Rqe=s(kL);Rhr=r(Rqe,"This class cannot be instantiated directly using "),F2e=n(Rqe,"CODE",{});var Z_t=s(F2e);Bhr=r(Z_t,"__init__()"),Z_t.forEach(t),Phr=r(Rqe," (throws an error)."),Rqe.forEach(t),Ihr=i(ul),xt=n(ul,"DIV",{class:!0});var Rw=s(xt);T(SL.$$.fragment,Rw),qhr=i(Rw),T2e=n(Rw,"P",{});var e1t=s(T2e);Nhr=r(e1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e1t.forEach(t),jhr=i(Rw),Jd=n(Rw,"P",{});var _K=s(Jd);Dhr=r(_K,`Note:
Loading a model from its configuration file does `),M2e=n(_K,"STRONG",{});var o1t=s(M2e);Ghr=r(o1t,"not"),o1t.forEach(t),Ohr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(_K,"A",{href:!0});var r1t=s(yW);Vhr=r(r1t,"from_pretrained()"),r1t.forEach(t),Xhr=r(_K," to load the model weights."),_K.forEach(t),zhr=i(Rw),T(FM.$$.fragment,Rw),Rw.forEach(t),Whr=i(ul),yr=n(ul,"DIV",{class:!0});var _l=s(yr);T(RL.$$.fragment,_l),Qhr=i(_l),E2e=n(_l,"P",{});var t1t=s(E2e);Hhr=r(t1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t1t.forEach(t),Uhr=i(_l),Za=n(_l,"P",{});var Bw=s(Za);Jhr=r(Bw,"The model class to instantiate is selected based on the "),C2e=n(Bw,"CODE",{});var a1t=s(C2e);Yhr=r(a1t,"model_type"),a1t.forEach(t),Khr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),w2e=n(Bw,"CODE",{});var n1t=s(w2e);Zhr=r(n1t,"pretrained_model_name_or_path"),n1t.forEach(t),epr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(Bw,"CODE",{});var s1t=s(A2e);opr=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),rpr=r(Bw,":"),Bw.forEach(t),tpr=i(_l),ye=n(_l,"UL",{});var Be=s(ye);TM=n(Be,"LI",{});var S$e=s(TM);y2e=n(S$e,"STRONG",{});var l1t=s(y2e);apr=r(l1t,"bart"),l1t.forEach(t),npr=r(S$e," \u2014 "),LW=n(S$e,"A",{href:!0});var i1t=s(LW);spr=r(i1t,"TFBartForConditionalGeneration"),i1t.forEach(t),lpr=r(S$e," (BART model)"),S$e.forEach(t),ipr=i(Be),MM=n(Be,"LI",{});var R$e=s(MM);L2e=n(R$e,"STRONG",{});var d1t=s(L2e);dpr=r(d1t,"blenderbot"),d1t.forEach(t),cpr=r(R$e," \u2014 "),xW=n(R$e,"A",{href:!0});var c1t=s(xW);fpr=r(c1t,"TFBlenderbotForConditionalGeneration"),c1t.forEach(t),mpr=r(R$e," (Blenderbot model)"),R$e.forEach(t),gpr=i(Be),EM=n(Be,"LI",{});var B$e=s(EM);x2e=n(B$e,"STRONG",{});var f1t=s(x2e);hpr=r(f1t,"blenderbot-small"),f1t.forEach(t),ppr=r(B$e," \u2014 "),$W=n(B$e,"A",{href:!0});var m1t=s($W);upr=r(m1t,"TFBlenderbotSmallForConditionalGeneration"),m1t.forEach(t),_pr=r(B$e," (BlenderbotSmall model)"),B$e.forEach(t),bpr=i(Be),CM=n(Be,"LI",{});var P$e=s(CM);$2e=n(P$e,"STRONG",{});var g1t=s($2e);vpr=r(g1t,"encoder-decoder"),g1t.forEach(t),Fpr=r(P$e," \u2014 "),kW=n(P$e,"A",{href:!0});var h1t=s(kW);Tpr=r(h1t,"TFEncoderDecoderModel"),h1t.forEach(t),Mpr=r(P$e," (Encoder decoder model)"),P$e.forEach(t),Epr=i(Be),wM=n(Be,"LI",{});var I$e=s(wM);k2e=n(I$e,"STRONG",{});var p1t=s(k2e);Cpr=r(p1t,"led"),p1t.forEach(t),wpr=r(I$e," \u2014 "),SW=n(I$e,"A",{href:!0});var u1t=s(SW);Apr=r(u1t,"TFLEDForConditionalGeneration"),u1t.forEach(t),ypr=r(I$e," (LED model)"),I$e.forEach(t),Lpr=i(Be),AM=n(Be,"LI",{});var q$e=s(AM);S2e=n(q$e,"STRONG",{});var _1t=s(S2e);xpr=r(_1t,"marian"),_1t.forEach(t),$pr=r(q$e," \u2014 "),RW=n(q$e,"A",{href:!0});var b1t=s(RW);kpr=r(b1t,"TFMarianMTModel"),b1t.forEach(t),Spr=r(q$e," (Marian model)"),q$e.forEach(t),Rpr=i(Be),yM=n(Be,"LI",{});var N$e=s(yM);R2e=n(N$e,"STRONG",{});var v1t=s(R2e);Bpr=r(v1t,"mbart"),v1t.forEach(t),Ppr=r(N$e," \u2014 "),BW=n(N$e,"A",{href:!0});var F1t=s(BW);Ipr=r(F1t,"TFMBartForConditionalGeneration"),F1t.forEach(t),qpr=r(N$e," (mBART model)"),N$e.forEach(t),Npr=i(Be),LM=n(Be,"LI",{});var j$e=s(LM);B2e=n(j$e,"STRONG",{});var T1t=s(B2e);jpr=r(T1t,"mt5"),T1t.forEach(t),Dpr=r(j$e," \u2014 "),PW=n(j$e,"A",{href:!0});var M1t=s(PW);Gpr=r(M1t,"TFMT5ForConditionalGeneration"),M1t.forEach(t),Opr=r(j$e," (mT5 model)"),j$e.forEach(t),Vpr=i(Be),xM=n(Be,"LI",{});var D$e=s(xM);P2e=n(D$e,"STRONG",{});var E1t=s(P2e);Xpr=r(E1t,"pegasus"),E1t.forEach(t),zpr=r(D$e," \u2014 "),IW=n(D$e,"A",{href:!0});var C1t=s(IW);Wpr=r(C1t,"TFPegasusForConditionalGeneration"),C1t.forEach(t),Qpr=r(D$e," (Pegasus model)"),D$e.forEach(t),Hpr=i(Be),$M=n(Be,"LI",{});var G$e=s($M);I2e=n(G$e,"STRONG",{});var w1t=s(I2e);Upr=r(w1t,"t5"),w1t.forEach(t),Jpr=r(G$e," \u2014 "),qW=n(G$e,"A",{href:!0});var A1t=s(qW);Ypr=r(A1t,"TFT5ForConditionalGeneration"),A1t.forEach(t),Kpr=r(G$e," (T5 model)"),G$e.forEach(t),Be.forEach(t),Zpr=i(_l),T(kM.$$.fragment,_l),_l.forEach(t),ul.forEach(t),$Pe=i(f),Yd=n(f,"H2",{class:!0});var Bqe=s(Yd);SM=n(Bqe,"A",{id:!0,class:!0,href:!0});var y1t=s(SM);q2e=n(y1t,"SPAN",{});var L1t=s(q2e);T(BL.$$.fragment,L1t),L1t.forEach(t),y1t.forEach(t),eur=i(Bqe),N2e=n(Bqe,"SPAN",{});var x1t=s(N2e);our=r(x1t,"TFAutoModelForSequenceClassification"),x1t.forEach(t),Bqe.forEach(t),kPe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(PL.$$.fragment,bl),rur=i(bl),Kd=n(bl,"P",{});var bK=s(Kd);tur=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NW=n(bK,"A",{href:!0});var $1t=s(NW);aur=r($1t,"from_pretrained()"),$1t.forEach(t),nur=r(bK," class method or the "),jW=n(bK,"A",{href:!0});var k1t=s(jW);sur=r(k1t,"from_config()"),k1t.forEach(t),lur=r(bK,` class
method.`),bK.forEach(t),iur=i(bl),IL=n(bl,"P",{});var Pqe=s(IL);dur=r(Pqe,"This class cannot be instantiated directly using "),j2e=n(Pqe,"CODE",{});var S1t=s(j2e);cur=r(S1t,"__init__()"),S1t.forEach(t),fur=r(Pqe," (throws an error)."),Pqe.forEach(t),mur=i(bl),$t=n(bl,"DIV",{class:!0});var Pw=s($t);T(qL.$$.fragment,Pw),gur=i(Pw),D2e=n(Pw,"P",{});var R1t=s(D2e);hur=r(R1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),R1t.forEach(t),pur=i(Pw),Zd=n(Pw,"P",{});var vK=s(Zd);uur=r(vK,`Note:
Loading a model from its configuration file does `),G2e=n(vK,"STRONG",{});var B1t=s(G2e);_ur=r(B1t,"not"),B1t.forEach(t),bur=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(vK,"A",{href:!0});var P1t=s(DW);vur=r(P1t,"from_pretrained()"),P1t.forEach(t),Fur=r(vK," to load the model weights."),vK.forEach(t),Tur=i(Pw),T(RM.$$.fragment,Pw),Pw.forEach(t),Mur=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(NL.$$.fragment,vl),Eur=i(vl),O2e=n(vl,"P",{});var I1t=s(O2e);Cur=r(I1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I1t.forEach(t),wur=i(vl),en=n(vl,"P",{});var Iw=s(en);Aur=r(Iw,"The model class to instantiate is selected based on the "),V2e=n(Iw,"CODE",{});var q1t=s(V2e);yur=r(q1t,"model_type"),q1t.forEach(t),Lur=r(Iw,` property of the config object (either
passed as an argument or loaded from `),X2e=n(Iw,"CODE",{});var N1t=s(X2e);xur=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),$ur=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(Iw,"CODE",{});var j1t=s(z2e);kur=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),Sur=r(Iw,":"),Iw.forEach(t),Rur=i(vl),Z=n(vl,"UL",{});var re=s(Z);BM=n(re,"LI",{});var O$e=s(BM);W2e=n(O$e,"STRONG",{});var D1t=s(W2e);Bur=r(D1t,"albert"),D1t.forEach(t),Pur=r(O$e," \u2014 "),GW=n(O$e,"A",{href:!0});var G1t=s(GW);Iur=r(G1t,"TFAlbertForSequenceClassification"),G1t.forEach(t),qur=r(O$e," (ALBERT model)"),O$e.forEach(t),Nur=i(re),PM=n(re,"LI",{});var V$e=s(PM);Q2e=n(V$e,"STRONG",{});var O1t=s(Q2e);jur=r(O1t,"bert"),O1t.forEach(t),Dur=r(V$e," \u2014 "),OW=n(V$e,"A",{href:!0});var V1t=s(OW);Gur=r(V1t,"TFBertForSequenceClassification"),V1t.forEach(t),Our=r(V$e," (BERT model)"),V$e.forEach(t),Vur=i(re),IM=n(re,"LI",{});var X$e=s(IM);H2e=n(X$e,"STRONG",{});var X1t=s(H2e);Xur=r(X1t,"camembert"),X1t.forEach(t),zur=r(X$e," \u2014 "),VW=n(X$e,"A",{href:!0});var z1t=s(VW);Wur=r(z1t,"TFCamembertForSequenceClassification"),z1t.forEach(t),Qur=r(X$e," (CamemBERT model)"),X$e.forEach(t),Hur=i(re),qM=n(re,"LI",{});var z$e=s(qM);U2e=n(z$e,"STRONG",{});var W1t=s(U2e);Uur=r(W1t,"convbert"),W1t.forEach(t),Jur=r(z$e," \u2014 "),XW=n(z$e,"A",{href:!0});var Q1t=s(XW);Yur=r(Q1t,"TFConvBertForSequenceClassification"),Q1t.forEach(t),Kur=r(z$e," (ConvBERT model)"),z$e.forEach(t),Zur=i(re),NM=n(re,"LI",{});var W$e=s(NM);J2e=n(W$e,"STRONG",{});var H1t=s(J2e);e_r=r(H1t,"ctrl"),H1t.forEach(t),o_r=r(W$e," \u2014 "),zW=n(W$e,"A",{href:!0});var U1t=s(zW);r_r=r(U1t,"TFCTRLForSequenceClassification"),U1t.forEach(t),t_r=r(W$e," (CTRL model)"),W$e.forEach(t),a_r=i(re),jM=n(re,"LI",{});var Q$e=s(jM);Y2e=n(Q$e,"STRONG",{});var J1t=s(Y2e);n_r=r(J1t,"deberta"),J1t.forEach(t),s_r=r(Q$e," \u2014 "),WW=n(Q$e,"A",{href:!0});var Y1t=s(WW);l_r=r(Y1t,"TFDebertaForSequenceClassification"),Y1t.forEach(t),i_r=r(Q$e," (DeBERTa model)"),Q$e.forEach(t),d_r=i(re),DM=n(re,"LI",{});var H$e=s(DM);K2e=n(H$e,"STRONG",{});var K1t=s(K2e);c_r=r(K1t,"deberta-v2"),K1t.forEach(t),f_r=r(H$e," \u2014 "),QW=n(H$e,"A",{href:!0});var Z1t=s(QW);m_r=r(Z1t,"TFDebertaV2ForSequenceClassification"),Z1t.forEach(t),g_r=r(H$e," (DeBERTa-v2 model)"),H$e.forEach(t),h_r=i(re),GM=n(re,"LI",{});var U$e=s(GM);Z2e=n(U$e,"STRONG",{});var e2t=s(Z2e);p_r=r(e2t,"distilbert"),e2t.forEach(t),u_r=r(U$e," \u2014 "),HW=n(U$e,"A",{href:!0});var o2t=s(HW);__r=r(o2t,"TFDistilBertForSequenceClassification"),o2t.forEach(t),b_r=r(U$e," (DistilBERT model)"),U$e.forEach(t),v_r=i(re),OM=n(re,"LI",{});var J$e=s(OM);ebe=n(J$e,"STRONG",{});var r2t=s(ebe);F_r=r(r2t,"electra"),r2t.forEach(t),T_r=r(J$e," \u2014 "),UW=n(J$e,"A",{href:!0});var t2t=s(UW);M_r=r(t2t,"TFElectraForSequenceClassification"),t2t.forEach(t),E_r=r(J$e," (ELECTRA model)"),J$e.forEach(t),C_r=i(re),VM=n(re,"LI",{});var Y$e=s(VM);obe=n(Y$e,"STRONG",{});var a2t=s(obe);w_r=r(a2t,"flaubert"),a2t.forEach(t),A_r=r(Y$e," \u2014 "),JW=n(Y$e,"A",{href:!0});var n2t=s(JW);y_r=r(n2t,"TFFlaubertForSequenceClassification"),n2t.forEach(t),L_r=r(Y$e," (FlauBERT model)"),Y$e.forEach(t),x_r=i(re),XM=n(re,"LI",{});var K$e=s(XM);rbe=n(K$e,"STRONG",{});var s2t=s(rbe);$_r=r(s2t,"funnel"),s2t.forEach(t),k_r=r(K$e," \u2014 "),YW=n(K$e,"A",{href:!0});var l2t=s(YW);S_r=r(l2t,"TFFunnelForSequenceClassification"),l2t.forEach(t),R_r=r(K$e," (Funnel Transformer model)"),K$e.forEach(t),B_r=i(re),zM=n(re,"LI",{});var Z$e=s(zM);tbe=n(Z$e,"STRONG",{});var i2t=s(tbe);P_r=r(i2t,"gpt2"),i2t.forEach(t),I_r=r(Z$e," \u2014 "),KW=n(Z$e,"A",{href:!0});var d2t=s(KW);q_r=r(d2t,"TFGPT2ForSequenceClassification"),d2t.forEach(t),N_r=r(Z$e," (OpenAI GPT-2 model)"),Z$e.forEach(t),j_r=i(re),WM=n(re,"LI",{});var eke=s(WM);abe=n(eke,"STRONG",{});var c2t=s(abe);D_r=r(c2t,"gptj"),c2t.forEach(t),G_r=r(eke," \u2014 "),ZW=n(eke,"A",{href:!0});var f2t=s(ZW);O_r=r(f2t,"TFGPTJForSequenceClassification"),f2t.forEach(t),V_r=r(eke," (GPT-J model)"),eke.forEach(t),X_r=i(re),QM=n(re,"LI",{});var oke=s(QM);nbe=n(oke,"STRONG",{});var m2t=s(nbe);z_r=r(m2t,"layoutlm"),m2t.forEach(t),W_r=r(oke," \u2014 "),eQ=n(oke,"A",{href:!0});var g2t=s(eQ);Q_r=r(g2t,"TFLayoutLMForSequenceClassification"),g2t.forEach(t),H_r=r(oke," (LayoutLM model)"),oke.forEach(t),U_r=i(re),HM=n(re,"LI",{});var rke=s(HM);sbe=n(rke,"STRONG",{});var h2t=s(sbe);J_r=r(h2t,"longformer"),h2t.forEach(t),Y_r=r(rke," \u2014 "),oQ=n(rke,"A",{href:!0});var p2t=s(oQ);K_r=r(p2t,"TFLongformerForSequenceClassification"),p2t.forEach(t),Z_r=r(rke," (Longformer model)"),rke.forEach(t),e1r=i(re),UM=n(re,"LI",{});var tke=s(UM);lbe=n(tke,"STRONG",{});var u2t=s(lbe);o1r=r(u2t,"mobilebert"),u2t.forEach(t),r1r=r(tke," \u2014 "),rQ=n(tke,"A",{href:!0});var _2t=s(rQ);t1r=r(_2t,"TFMobileBertForSequenceClassification"),_2t.forEach(t),a1r=r(tke," (MobileBERT model)"),tke.forEach(t),n1r=i(re),JM=n(re,"LI",{});var ake=s(JM);ibe=n(ake,"STRONG",{});var b2t=s(ibe);s1r=r(b2t,"mpnet"),b2t.forEach(t),l1r=r(ake," \u2014 "),tQ=n(ake,"A",{href:!0});var v2t=s(tQ);i1r=r(v2t,"TFMPNetForSequenceClassification"),v2t.forEach(t),d1r=r(ake," (MPNet model)"),ake.forEach(t),c1r=i(re),YM=n(re,"LI",{});var nke=s(YM);dbe=n(nke,"STRONG",{});var F2t=s(dbe);f1r=r(F2t,"openai-gpt"),F2t.forEach(t),m1r=r(nke," \u2014 "),aQ=n(nke,"A",{href:!0});var T2t=s(aQ);g1r=r(T2t,"TFOpenAIGPTForSequenceClassification"),T2t.forEach(t),h1r=r(nke," (OpenAI GPT model)"),nke.forEach(t),p1r=i(re),KM=n(re,"LI",{});var ske=s(KM);cbe=n(ske,"STRONG",{});var M2t=s(cbe);u1r=r(M2t,"rembert"),M2t.forEach(t),_1r=r(ske," \u2014 "),nQ=n(ske,"A",{href:!0});var E2t=s(nQ);b1r=r(E2t,"TFRemBertForSequenceClassification"),E2t.forEach(t),v1r=r(ske," (RemBERT model)"),ske.forEach(t),F1r=i(re),ZM=n(re,"LI",{});var lke=s(ZM);fbe=n(lke,"STRONG",{});var C2t=s(fbe);T1r=r(C2t,"roberta"),C2t.forEach(t),M1r=r(lke," \u2014 "),sQ=n(lke,"A",{href:!0});var w2t=s(sQ);E1r=r(w2t,"TFRobertaForSequenceClassification"),w2t.forEach(t),C1r=r(lke," (RoBERTa model)"),lke.forEach(t),w1r=i(re),e4=n(re,"LI",{});var ike=s(e4);mbe=n(ike,"STRONG",{});var A2t=s(mbe);A1r=r(A2t,"roformer"),A2t.forEach(t),y1r=r(ike," \u2014 "),lQ=n(ike,"A",{href:!0});var y2t=s(lQ);L1r=r(y2t,"TFRoFormerForSequenceClassification"),y2t.forEach(t),x1r=r(ike," (RoFormer model)"),ike.forEach(t),$1r=i(re),o4=n(re,"LI",{});var dke=s(o4);gbe=n(dke,"STRONG",{});var L2t=s(gbe);k1r=r(L2t,"tapas"),L2t.forEach(t),S1r=r(dke," \u2014 "),iQ=n(dke,"A",{href:!0});var x2t=s(iQ);R1r=r(x2t,"TFTapasForSequenceClassification"),x2t.forEach(t),B1r=r(dke," (TAPAS model)"),dke.forEach(t),P1r=i(re),r4=n(re,"LI",{});var cke=s(r4);hbe=n(cke,"STRONG",{});var $2t=s(hbe);I1r=r($2t,"transfo-xl"),$2t.forEach(t),q1r=r(cke," \u2014 "),dQ=n(cke,"A",{href:!0});var k2t=s(dQ);N1r=r(k2t,"TFTransfoXLForSequenceClassification"),k2t.forEach(t),j1r=r(cke," (Transformer-XL model)"),cke.forEach(t),D1r=i(re),t4=n(re,"LI",{});var fke=s(t4);pbe=n(fke,"STRONG",{});var S2t=s(pbe);G1r=r(S2t,"xlm"),S2t.forEach(t),O1r=r(fke," \u2014 "),cQ=n(fke,"A",{href:!0});var R2t=s(cQ);V1r=r(R2t,"TFXLMForSequenceClassification"),R2t.forEach(t),X1r=r(fke," (XLM model)"),fke.forEach(t),z1r=i(re),a4=n(re,"LI",{});var mke=s(a4);ube=n(mke,"STRONG",{});var B2t=s(ube);W1r=r(B2t,"xlm-roberta"),B2t.forEach(t),Q1r=r(mke," \u2014 "),fQ=n(mke,"A",{href:!0});var P2t=s(fQ);H1r=r(P2t,"TFXLMRobertaForSequenceClassification"),P2t.forEach(t),U1r=r(mke," (XLM-RoBERTa model)"),mke.forEach(t),J1r=i(re),n4=n(re,"LI",{});var gke=s(n4);_be=n(gke,"STRONG",{});var I2t=s(_be);Y1r=r(I2t,"xlnet"),I2t.forEach(t),K1r=r(gke," \u2014 "),mQ=n(gke,"A",{href:!0});var q2t=s(mQ);Z1r=r(q2t,"TFXLNetForSequenceClassification"),q2t.forEach(t),e2r=r(gke," (XLNet model)"),gke.forEach(t),re.forEach(t),o2r=i(vl),T(s4.$$.fragment,vl),vl.forEach(t),bl.forEach(t),SPe=i(f),ec=n(f,"H2",{class:!0});var Iqe=s(ec);l4=n(Iqe,"A",{id:!0,class:!0,href:!0});var N2t=s(l4);bbe=n(N2t,"SPAN",{});var j2t=s(bbe);T(jL.$$.fragment,j2t),j2t.forEach(t),N2t.forEach(t),r2r=i(Iqe),vbe=n(Iqe,"SPAN",{});var D2t=s(vbe);t2r=r(D2t,"TFAutoModelForMultipleChoice"),D2t.forEach(t),Iqe.forEach(t),RPe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(DL.$$.fragment,Fl),a2r=i(Fl),oc=n(Fl,"P",{});var FK=s(oc);n2r=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gQ=n(FK,"A",{href:!0});var G2t=s(gQ);s2r=r(G2t,"from_pretrained()"),G2t.forEach(t),l2r=r(FK," class method or the "),hQ=n(FK,"A",{href:!0});var O2t=s(hQ);i2r=r(O2t,"from_config()"),O2t.forEach(t),d2r=r(FK,` class
method.`),FK.forEach(t),c2r=i(Fl),GL=n(Fl,"P",{});var qqe=s(GL);f2r=r(qqe,"This class cannot be instantiated directly using "),Fbe=n(qqe,"CODE",{});var V2t=s(Fbe);m2r=r(V2t,"__init__()"),V2t.forEach(t),g2r=r(qqe," (throws an error)."),qqe.forEach(t),h2r=i(Fl),kt=n(Fl,"DIV",{class:!0});var qw=s(kt);T(OL.$$.fragment,qw),p2r=i(qw),Tbe=n(qw,"P",{});var X2t=s(Tbe);u2r=r(X2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),X2t.forEach(t),_2r=i(qw),rc=n(qw,"P",{});var TK=s(rc);b2r=r(TK,`Note:
Loading a model from its configuration file does `),Mbe=n(TK,"STRONG",{});var z2t=s(Mbe);v2r=r(z2t,"not"),z2t.forEach(t),F2r=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(TK,"A",{href:!0});var W2t=s(pQ);T2r=r(W2t,"from_pretrained()"),W2t.forEach(t),M2r=r(TK," to load the model weights."),TK.forEach(t),E2r=i(qw),T(i4.$$.fragment,qw),qw.forEach(t),C2r=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(VL.$$.fragment,Tl),w2r=i(Tl),Ebe=n(Tl,"P",{});var Q2t=s(Ebe);A2r=r(Q2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q2t.forEach(t),y2r=i(Tl),on=n(Tl,"P",{});var Nw=s(on);L2r=r(Nw,"The model class to instantiate is selected based on the "),Cbe=n(Nw,"CODE",{});var H2t=s(Cbe);x2r=r(H2t,"model_type"),H2t.forEach(t),$2r=r(Nw,` property of the config object (either
passed as an argument or loaded from `),wbe=n(Nw,"CODE",{});var U2t=s(wbe);k2r=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),S2r=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(Nw,"CODE",{});var J2t=s(Abe);R2r=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),B2r=r(Nw,":"),Nw.forEach(t),P2r=i(Tl),pe=n(Tl,"UL",{});var _e=s(pe);d4=n(_e,"LI",{});var hke=s(d4);ybe=n(hke,"STRONG",{});var Y2t=s(ybe);I2r=r(Y2t,"albert"),Y2t.forEach(t),q2r=r(hke," \u2014 "),uQ=n(hke,"A",{href:!0});var K2t=s(uQ);N2r=r(K2t,"TFAlbertForMultipleChoice"),K2t.forEach(t),j2r=r(hke," (ALBERT model)"),hke.forEach(t),D2r=i(_e),c4=n(_e,"LI",{});var pke=s(c4);Lbe=n(pke,"STRONG",{});var Z2t=s(Lbe);G2r=r(Z2t,"bert"),Z2t.forEach(t),O2r=r(pke," \u2014 "),_Q=n(pke,"A",{href:!0});var ebt=s(_Q);V2r=r(ebt,"TFBertForMultipleChoice"),ebt.forEach(t),X2r=r(pke," (BERT model)"),pke.forEach(t),z2r=i(_e),f4=n(_e,"LI",{});var uke=s(f4);xbe=n(uke,"STRONG",{});var obt=s(xbe);W2r=r(obt,"camembert"),obt.forEach(t),Q2r=r(uke," \u2014 "),bQ=n(uke,"A",{href:!0});var rbt=s(bQ);H2r=r(rbt,"TFCamembertForMultipleChoice"),rbt.forEach(t),U2r=r(uke," (CamemBERT model)"),uke.forEach(t),J2r=i(_e),m4=n(_e,"LI",{});var _ke=s(m4);$be=n(_ke,"STRONG",{});var tbt=s($be);Y2r=r(tbt,"convbert"),tbt.forEach(t),K2r=r(_ke," \u2014 "),vQ=n(_ke,"A",{href:!0});var abt=s(vQ);Z2r=r(abt,"TFConvBertForMultipleChoice"),abt.forEach(t),ebr=r(_ke," (ConvBERT model)"),_ke.forEach(t),obr=i(_e),g4=n(_e,"LI",{});var bke=s(g4);kbe=n(bke,"STRONG",{});var nbt=s(kbe);rbr=r(nbt,"distilbert"),nbt.forEach(t),tbr=r(bke," \u2014 "),FQ=n(bke,"A",{href:!0});var sbt=s(FQ);abr=r(sbt,"TFDistilBertForMultipleChoice"),sbt.forEach(t),nbr=r(bke," (DistilBERT model)"),bke.forEach(t),sbr=i(_e),h4=n(_e,"LI",{});var vke=s(h4);Sbe=n(vke,"STRONG",{});var lbt=s(Sbe);lbr=r(lbt,"electra"),lbt.forEach(t),ibr=r(vke," \u2014 "),TQ=n(vke,"A",{href:!0});var ibt=s(TQ);dbr=r(ibt,"TFElectraForMultipleChoice"),ibt.forEach(t),cbr=r(vke," (ELECTRA model)"),vke.forEach(t),fbr=i(_e),p4=n(_e,"LI",{});var Fke=s(p4);Rbe=n(Fke,"STRONG",{});var dbt=s(Rbe);mbr=r(dbt,"flaubert"),dbt.forEach(t),gbr=r(Fke," \u2014 "),MQ=n(Fke,"A",{href:!0});var cbt=s(MQ);hbr=r(cbt,"TFFlaubertForMultipleChoice"),cbt.forEach(t),pbr=r(Fke," (FlauBERT model)"),Fke.forEach(t),ubr=i(_e),u4=n(_e,"LI",{});var Tke=s(u4);Bbe=n(Tke,"STRONG",{});var fbt=s(Bbe);_br=r(fbt,"funnel"),fbt.forEach(t),bbr=r(Tke," \u2014 "),EQ=n(Tke,"A",{href:!0});var mbt=s(EQ);vbr=r(mbt,"TFFunnelForMultipleChoice"),mbt.forEach(t),Fbr=r(Tke," (Funnel Transformer model)"),Tke.forEach(t),Tbr=i(_e),_4=n(_e,"LI",{});var Mke=s(_4);Pbe=n(Mke,"STRONG",{});var gbt=s(Pbe);Mbr=r(gbt,"longformer"),gbt.forEach(t),Ebr=r(Mke," \u2014 "),CQ=n(Mke,"A",{href:!0});var hbt=s(CQ);Cbr=r(hbt,"TFLongformerForMultipleChoice"),hbt.forEach(t),wbr=r(Mke," (Longformer model)"),Mke.forEach(t),Abr=i(_e),b4=n(_e,"LI",{});var Eke=s(b4);Ibe=n(Eke,"STRONG",{});var pbt=s(Ibe);ybr=r(pbt,"mobilebert"),pbt.forEach(t),Lbr=r(Eke," \u2014 "),wQ=n(Eke,"A",{href:!0});var ubt=s(wQ);xbr=r(ubt,"TFMobileBertForMultipleChoice"),ubt.forEach(t),$br=r(Eke," (MobileBERT model)"),Eke.forEach(t),kbr=i(_e),v4=n(_e,"LI",{});var Cke=s(v4);qbe=n(Cke,"STRONG",{});var _bt=s(qbe);Sbr=r(_bt,"mpnet"),_bt.forEach(t),Rbr=r(Cke," \u2014 "),AQ=n(Cke,"A",{href:!0});var bbt=s(AQ);Bbr=r(bbt,"TFMPNetForMultipleChoice"),bbt.forEach(t),Pbr=r(Cke," (MPNet model)"),Cke.forEach(t),Ibr=i(_e),F4=n(_e,"LI",{});var wke=s(F4);Nbe=n(wke,"STRONG",{});var vbt=s(Nbe);qbr=r(vbt,"rembert"),vbt.forEach(t),Nbr=r(wke," \u2014 "),yQ=n(wke,"A",{href:!0});var Fbt=s(yQ);jbr=r(Fbt,"TFRemBertForMultipleChoice"),Fbt.forEach(t),Dbr=r(wke," (RemBERT model)"),wke.forEach(t),Gbr=i(_e),T4=n(_e,"LI",{});var Ake=s(T4);jbe=n(Ake,"STRONG",{});var Tbt=s(jbe);Obr=r(Tbt,"roberta"),Tbt.forEach(t),Vbr=r(Ake," \u2014 "),LQ=n(Ake,"A",{href:!0});var Mbt=s(LQ);Xbr=r(Mbt,"TFRobertaForMultipleChoice"),Mbt.forEach(t),zbr=r(Ake," (RoBERTa model)"),Ake.forEach(t),Wbr=i(_e),M4=n(_e,"LI",{});var yke=s(M4);Dbe=n(yke,"STRONG",{});var Ebt=s(Dbe);Qbr=r(Ebt,"roformer"),Ebt.forEach(t),Hbr=r(yke," \u2014 "),xQ=n(yke,"A",{href:!0});var Cbt=s(xQ);Ubr=r(Cbt,"TFRoFormerForMultipleChoice"),Cbt.forEach(t),Jbr=r(yke," (RoFormer model)"),yke.forEach(t),Ybr=i(_e),E4=n(_e,"LI",{});var Lke=s(E4);Gbe=n(Lke,"STRONG",{});var wbt=s(Gbe);Kbr=r(wbt,"xlm"),wbt.forEach(t),Zbr=r(Lke," \u2014 "),$Q=n(Lke,"A",{href:!0});var Abt=s($Q);evr=r(Abt,"TFXLMForMultipleChoice"),Abt.forEach(t),ovr=r(Lke," (XLM model)"),Lke.forEach(t),rvr=i(_e),C4=n(_e,"LI",{});var xke=s(C4);Obe=n(xke,"STRONG",{});var ybt=s(Obe);tvr=r(ybt,"xlm-roberta"),ybt.forEach(t),avr=r(xke," \u2014 "),kQ=n(xke,"A",{href:!0});var Lbt=s(kQ);nvr=r(Lbt,"TFXLMRobertaForMultipleChoice"),Lbt.forEach(t),svr=r(xke," (XLM-RoBERTa model)"),xke.forEach(t),lvr=i(_e),w4=n(_e,"LI",{});var $ke=s(w4);Vbe=n($ke,"STRONG",{});var xbt=s(Vbe);ivr=r(xbt,"xlnet"),xbt.forEach(t),dvr=r($ke," \u2014 "),SQ=n($ke,"A",{href:!0});var $bt=s(SQ);cvr=r($bt,"TFXLNetForMultipleChoice"),$bt.forEach(t),fvr=r($ke," (XLNet model)"),$ke.forEach(t),_e.forEach(t),mvr=i(Tl),T(A4.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),BPe=i(f),tc=n(f,"H2",{class:!0});var Nqe=s(tc);y4=n(Nqe,"A",{id:!0,class:!0,href:!0});var kbt=s(y4);Xbe=n(kbt,"SPAN",{});var Sbt=s(Xbe);T(XL.$$.fragment,Sbt),Sbt.forEach(t),kbt.forEach(t),gvr=i(Nqe),zbe=n(Nqe,"SPAN",{});var Rbt=s(zbe);hvr=r(Rbt,"TFAutoModelForTableQuestionAnswering"),Rbt.forEach(t),Nqe.forEach(t),PPe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(zL.$$.fragment,Ml),pvr=i(Ml),ac=n(Ml,"P",{});var MK=s(ac);uvr=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RQ=n(MK,"A",{href:!0});var Bbt=s(RQ);_vr=r(Bbt,"from_pretrained()"),Bbt.forEach(t),bvr=r(MK," class method or the "),BQ=n(MK,"A",{href:!0});var Pbt=s(BQ);vvr=r(Pbt,"from_config()"),Pbt.forEach(t),Fvr=r(MK,` class
method.`),MK.forEach(t),Tvr=i(Ml),WL=n(Ml,"P",{});var jqe=s(WL);Mvr=r(jqe,"This class cannot be instantiated directly using "),Wbe=n(jqe,"CODE",{});var Ibt=s(Wbe);Evr=r(Ibt,"__init__()"),Ibt.forEach(t),Cvr=r(jqe," (throws an error)."),jqe.forEach(t),wvr=i(Ml),St=n(Ml,"DIV",{class:!0});var jw=s(St);T(QL.$$.fragment,jw),Avr=i(jw),Qbe=n(jw,"P",{});var qbt=s(Qbe);yvr=r(qbt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qbt.forEach(t),Lvr=i(jw),nc=n(jw,"P",{});var EK=s(nc);xvr=r(EK,`Note:
Loading a model from its configuration file does `),Hbe=n(EK,"STRONG",{});var Nbt=s(Hbe);$vr=r(Nbt,"not"),Nbt.forEach(t),kvr=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(EK,"A",{href:!0});var jbt=s(PQ);Svr=r(jbt,"from_pretrained()"),jbt.forEach(t),Rvr=r(EK," to load the model weights."),EK.forEach(t),Bvr=i(jw),T(L4.$$.fragment,jw),jw.forEach(t),Pvr=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(HL.$$.fragment,El),Ivr=i(El),Ube=n(El,"P",{});var Dbt=s(Ube);qvr=r(Dbt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dbt.forEach(t),Nvr=i(El),rn=n(El,"P",{});var Dw=s(rn);jvr=r(Dw,"The model class to instantiate is selected based on the "),Jbe=n(Dw,"CODE",{});var Gbt=s(Jbe);Dvr=r(Gbt,"model_type"),Gbt.forEach(t),Gvr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(Dw,"CODE",{});var Obt=s(Ybe);Ovr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),Vvr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(Dw,"CODE",{});var Vbt=s(Kbe);Xvr=r(Vbt,"pretrained_model_name_or_path"),Vbt.forEach(t),zvr=r(Dw,":"),Dw.forEach(t),Wvr=i(El),Zbe=n(El,"UL",{});var Xbt=s(Zbe);x4=n(Xbt,"LI",{});var kke=s(x4);eve=n(kke,"STRONG",{});var zbt=s(eve);Qvr=r(zbt,"tapas"),zbt.forEach(t),Hvr=r(kke," \u2014 "),IQ=n(kke,"A",{href:!0});var Wbt=s(IQ);Uvr=r(Wbt,"TFTapasForQuestionAnswering"),Wbt.forEach(t),Jvr=r(kke," (TAPAS model)"),kke.forEach(t),Xbt.forEach(t),Yvr=i(El),T($4.$$.fragment,El),El.forEach(t),Ml.forEach(t),IPe=i(f),sc=n(f,"H2",{class:!0});var Dqe=s(sc);k4=n(Dqe,"A",{id:!0,class:!0,href:!0});var Qbt=s(k4);ove=n(Qbt,"SPAN",{});var Hbt=s(ove);T(UL.$$.fragment,Hbt),Hbt.forEach(t),Qbt.forEach(t),Kvr=i(Dqe),rve=n(Dqe,"SPAN",{});var Ubt=s(rve);Zvr=r(Ubt,"TFAutoModelForTokenClassification"),Ubt.forEach(t),Dqe.forEach(t),qPe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(JL.$$.fragment,Cl),eFr=i(Cl),lc=n(Cl,"P",{});var CK=s(lc);oFr=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qQ=n(CK,"A",{href:!0});var Jbt=s(qQ);rFr=r(Jbt,"from_pretrained()"),Jbt.forEach(t),tFr=r(CK," class method or the "),NQ=n(CK,"A",{href:!0});var Ybt=s(NQ);aFr=r(Ybt,"from_config()"),Ybt.forEach(t),nFr=r(CK,` class
method.`),CK.forEach(t),sFr=i(Cl),YL=n(Cl,"P",{});var Gqe=s(YL);lFr=r(Gqe,"This class cannot be instantiated directly using "),tve=n(Gqe,"CODE",{});var Kbt=s(tve);iFr=r(Kbt,"__init__()"),Kbt.forEach(t),dFr=r(Gqe," (throws an error)."),Gqe.forEach(t),cFr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var Gw=s(Rt);T(KL.$$.fragment,Gw),fFr=i(Gw),ave=n(Gw,"P",{});var Zbt=s(ave);mFr=r(Zbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zbt.forEach(t),gFr=i(Gw),ic=n(Gw,"P",{});var wK=s(ic);hFr=r(wK,`Note:
Loading a model from its configuration file does `),nve=n(wK,"STRONG",{});var evt=s(nve);pFr=r(evt,"not"),evt.forEach(t),uFr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(wK,"A",{href:!0});var ovt=s(jQ);_Fr=r(ovt,"from_pretrained()"),ovt.forEach(t),bFr=r(wK," to load the model weights."),wK.forEach(t),vFr=i(Gw),T(S4.$$.fragment,Gw),Gw.forEach(t),FFr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(ZL.$$.fragment,wl),TFr=i(wl),sve=n(wl,"P",{});var rvt=s(sve);MFr=r(rvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rvt.forEach(t),EFr=i(wl),tn=n(wl,"P",{});var Ow=s(tn);CFr=r(Ow,"The model class to instantiate is selected based on the "),lve=n(Ow,"CODE",{});var tvt=s(lve);wFr=r(tvt,"model_type"),tvt.forEach(t),AFr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),ive=n(Ow,"CODE",{});var avt=s(ive);yFr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),LFr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(Ow,"CODE",{});var nvt=s(dve);xFr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),$Fr=r(Ow,":"),Ow.forEach(t),kFr=i(wl),de=n(wl,"UL",{});var me=s(de);R4=n(me,"LI",{});var Ske=s(R4);cve=n(Ske,"STRONG",{});var svt=s(cve);SFr=r(svt,"albert"),svt.forEach(t),RFr=r(Ske," \u2014 "),DQ=n(Ske,"A",{href:!0});var lvt=s(DQ);BFr=r(lvt,"TFAlbertForTokenClassification"),lvt.forEach(t),PFr=r(Ske," (ALBERT model)"),Ske.forEach(t),IFr=i(me),B4=n(me,"LI",{});var Rke=s(B4);fve=n(Rke,"STRONG",{});var ivt=s(fve);qFr=r(ivt,"bert"),ivt.forEach(t),NFr=r(Rke," \u2014 "),GQ=n(Rke,"A",{href:!0});var dvt=s(GQ);jFr=r(dvt,"TFBertForTokenClassification"),dvt.forEach(t),DFr=r(Rke," (BERT model)"),Rke.forEach(t),GFr=i(me),P4=n(me,"LI",{});var Bke=s(P4);mve=n(Bke,"STRONG",{});var cvt=s(mve);OFr=r(cvt,"camembert"),cvt.forEach(t),VFr=r(Bke," \u2014 "),OQ=n(Bke,"A",{href:!0});var fvt=s(OQ);XFr=r(fvt,"TFCamembertForTokenClassification"),fvt.forEach(t),zFr=r(Bke," (CamemBERT model)"),Bke.forEach(t),WFr=i(me),I4=n(me,"LI",{});var Pke=s(I4);gve=n(Pke,"STRONG",{});var mvt=s(gve);QFr=r(mvt,"convbert"),mvt.forEach(t),HFr=r(Pke," \u2014 "),VQ=n(Pke,"A",{href:!0});var gvt=s(VQ);UFr=r(gvt,"TFConvBertForTokenClassification"),gvt.forEach(t),JFr=r(Pke," (ConvBERT model)"),Pke.forEach(t),YFr=i(me),q4=n(me,"LI",{});var Ike=s(q4);hve=n(Ike,"STRONG",{});var hvt=s(hve);KFr=r(hvt,"deberta"),hvt.forEach(t),ZFr=r(Ike," \u2014 "),XQ=n(Ike,"A",{href:!0});var pvt=s(XQ);e6r=r(pvt,"TFDebertaForTokenClassification"),pvt.forEach(t),o6r=r(Ike," (DeBERTa model)"),Ike.forEach(t),r6r=i(me),N4=n(me,"LI",{});var qke=s(N4);pve=n(qke,"STRONG",{});var uvt=s(pve);t6r=r(uvt,"deberta-v2"),uvt.forEach(t),a6r=r(qke," \u2014 "),zQ=n(qke,"A",{href:!0});var _vt=s(zQ);n6r=r(_vt,"TFDebertaV2ForTokenClassification"),_vt.forEach(t),s6r=r(qke," (DeBERTa-v2 model)"),qke.forEach(t),l6r=i(me),j4=n(me,"LI",{});var Nke=s(j4);uve=n(Nke,"STRONG",{});var bvt=s(uve);i6r=r(bvt,"distilbert"),bvt.forEach(t),d6r=r(Nke," \u2014 "),WQ=n(Nke,"A",{href:!0});var vvt=s(WQ);c6r=r(vvt,"TFDistilBertForTokenClassification"),vvt.forEach(t),f6r=r(Nke," (DistilBERT model)"),Nke.forEach(t),m6r=i(me),D4=n(me,"LI",{});var jke=s(D4);_ve=n(jke,"STRONG",{});var Fvt=s(_ve);g6r=r(Fvt,"electra"),Fvt.forEach(t),h6r=r(jke," \u2014 "),QQ=n(jke,"A",{href:!0});var Tvt=s(QQ);p6r=r(Tvt,"TFElectraForTokenClassification"),Tvt.forEach(t),u6r=r(jke," (ELECTRA model)"),jke.forEach(t),_6r=i(me),G4=n(me,"LI",{});var Dke=s(G4);bve=n(Dke,"STRONG",{});var Mvt=s(bve);b6r=r(Mvt,"flaubert"),Mvt.forEach(t),v6r=r(Dke," \u2014 "),HQ=n(Dke,"A",{href:!0});var Evt=s(HQ);F6r=r(Evt,"TFFlaubertForTokenClassification"),Evt.forEach(t),T6r=r(Dke," (FlauBERT model)"),Dke.forEach(t),M6r=i(me),O4=n(me,"LI",{});var Gke=s(O4);vve=n(Gke,"STRONG",{});var Cvt=s(vve);E6r=r(Cvt,"funnel"),Cvt.forEach(t),C6r=r(Gke," \u2014 "),UQ=n(Gke,"A",{href:!0});var wvt=s(UQ);w6r=r(wvt,"TFFunnelForTokenClassification"),wvt.forEach(t),A6r=r(Gke," (Funnel Transformer model)"),Gke.forEach(t),y6r=i(me),V4=n(me,"LI",{});var Oke=s(V4);Fve=n(Oke,"STRONG",{});var Avt=s(Fve);L6r=r(Avt,"layoutlm"),Avt.forEach(t),x6r=r(Oke," \u2014 "),JQ=n(Oke,"A",{href:!0});var yvt=s(JQ);$6r=r(yvt,"TFLayoutLMForTokenClassification"),yvt.forEach(t),k6r=r(Oke," (LayoutLM model)"),Oke.forEach(t),S6r=i(me),X4=n(me,"LI",{});var Vke=s(X4);Tve=n(Vke,"STRONG",{});var Lvt=s(Tve);R6r=r(Lvt,"longformer"),Lvt.forEach(t),B6r=r(Vke," \u2014 "),YQ=n(Vke,"A",{href:!0});var xvt=s(YQ);P6r=r(xvt,"TFLongformerForTokenClassification"),xvt.forEach(t),I6r=r(Vke," (Longformer model)"),Vke.forEach(t),q6r=i(me),z4=n(me,"LI",{});var Xke=s(z4);Mve=n(Xke,"STRONG",{});var $vt=s(Mve);N6r=r($vt,"mobilebert"),$vt.forEach(t),j6r=r(Xke," \u2014 "),KQ=n(Xke,"A",{href:!0});var kvt=s(KQ);D6r=r(kvt,"TFMobileBertForTokenClassification"),kvt.forEach(t),G6r=r(Xke," (MobileBERT model)"),Xke.forEach(t),O6r=i(me),W4=n(me,"LI",{});var zke=s(W4);Eve=n(zke,"STRONG",{});var Svt=s(Eve);V6r=r(Svt,"mpnet"),Svt.forEach(t),X6r=r(zke," \u2014 "),ZQ=n(zke,"A",{href:!0});var Rvt=s(ZQ);z6r=r(Rvt,"TFMPNetForTokenClassification"),Rvt.forEach(t),W6r=r(zke," (MPNet model)"),zke.forEach(t),Q6r=i(me),Q4=n(me,"LI",{});var Wke=s(Q4);Cve=n(Wke,"STRONG",{});var Bvt=s(Cve);H6r=r(Bvt,"rembert"),Bvt.forEach(t),U6r=r(Wke," \u2014 "),eH=n(Wke,"A",{href:!0});var Pvt=s(eH);J6r=r(Pvt,"TFRemBertForTokenClassification"),Pvt.forEach(t),Y6r=r(Wke," (RemBERT model)"),Wke.forEach(t),K6r=i(me),H4=n(me,"LI",{});var Qke=s(H4);wve=n(Qke,"STRONG",{});var Ivt=s(wve);Z6r=r(Ivt,"roberta"),Ivt.forEach(t),eTr=r(Qke," \u2014 "),oH=n(Qke,"A",{href:!0});var qvt=s(oH);oTr=r(qvt,"TFRobertaForTokenClassification"),qvt.forEach(t),rTr=r(Qke," (RoBERTa model)"),Qke.forEach(t),tTr=i(me),U4=n(me,"LI",{});var Hke=s(U4);Ave=n(Hke,"STRONG",{});var Nvt=s(Ave);aTr=r(Nvt,"roformer"),Nvt.forEach(t),nTr=r(Hke," \u2014 "),rH=n(Hke,"A",{href:!0});var jvt=s(rH);sTr=r(jvt,"TFRoFormerForTokenClassification"),jvt.forEach(t),lTr=r(Hke," (RoFormer model)"),Hke.forEach(t),iTr=i(me),J4=n(me,"LI",{});var Uke=s(J4);yve=n(Uke,"STRONG",{});var Dvt=s(yve);dTr=r(Dvt,"xlm"),Dvt.forEach(t),cTr=r(Uke," \u2014 "),tH=n(Uke,"A",{href:!0});var Gvt=s(tH);fTr=r(Gvt,"TFXLMForTokenClassification"),Gvt.forEach(t),mTr=r(Uke," (XLM model)"),Uke.forEach(t),gTr=i(me),Y4=n(me,"LI",{});var Jke=s(Y4);Lve=n(Jke,"STRONG",{});var Ovt=s(Lve);hTr=r(Ovt,"xlm-roberta"),Ovt.forEach(t),pTr=r(Jke," \u2014 "),aH=n(Jke,"A",{href:!0});var Vvt=s(aH);uTr=r(Vvt,"TFXLMRobertaForTokenClassification"),Vvt.forEach(t),_Tr=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),bTr=i(me),K4=n(me,"LI",{});var Yke=s(K4);xve=n(Yke,"STRONG",{});var Xvt=s(xve);vTr=r(Xvt,"xlnet"),Xvt.forEach(t),FTr=r(Yke," \u2014 "),nH=n(Yke,"A",{href:!0});var zvt=s(nH);TTr=r(zvt,"TFXLNetForTokenClassification"),zvt.forEach(t),MTr=r(Yke," (XLNet model)"),Yke.forEach(t),me.forEach(t),ETr=i(wl),T(Z4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),NPe=i(f),dc=n(f,"H2",{class:!0});var Oqe=s(dc);eE=n(Oqe,"A",{id:!0,class:!0,href:!0});var Wvt=s(eE);$ve=n(Wvt,"SPAN",{});var Qvt=s($ve);T(e7.$$.fragment,Qvt),Qvt.forEach(t),Wvt.forEach(t),CTr=i(Oqe),kve=n(Oqe,"SPAN",{});var Hvt=s(kve);wTr=r(Hvt,"TFAutoModelForQuestionAnswering"),Hvt.forEach(t),Oqe.forEach(t),jPe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(o7.$$.fragment,Al),ATr=i(Al),cc=n(Al,"P",{});var AK=s(cc);yTr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sH=n(AK,"A",{href:!0});var Uvt=s(sH);LTr=r(Uvt,"from_pretrained()"),Uvt.forEach(t),xTr=r(AK," class method or the "),lH=n(AK,"A",{href:!0});var Jvt=s(lH);$Tr=r(Jvt,"from_config()"),Jvt.forEach(t),kTr=r(AK,` class
method.`),AK.forEach(t),STr=i(Al),r7=n(Al,"P",{});var Vqe=s(r7);RTr=r(Vqe,"This class cannot be instantiated directly using "),Sve=n(Vqe,"CODE",{});var Yvt=s(Sve);BTr=r(Yvt,"__init__()"),Yvt.forEach(t),PTr=r(Vqe," (throws an error)."),Vqe.forEach(t),ITr=i(Al),Bt=n(Al,"DIV",{class:!0});var Vw=s(Bt);T(t7.$$.fragment,Vw),qTr=i(Vw),Rve=n(Vw,"P",{});var Kvt=s(Rve);NTr=r(Kvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kvt.forEach(t),jTr=i(Vw),fc=n(Vw,"P",{});var yK=s(fc);DTr=r(yK,`Note:
Loading a model from its configuration file does `),Bve=n(yK,"STRONG",{});var Zvt=s(Bve);GTr=r(Zvt,"not"),Zvt.forEach(t),OTr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(yK,"A",{href:!0});var eFt=s(iH);VTr=r(eFt,"from_pretrained()"),eFt.forEach(t),XTr=r(yK," to load the model weights."),yK.forEach(t),zTr=i(Vw),T(oE.$$.fragment,Vw),Vw.forEach(t),WTr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(a7.$$.fragment,yl),QTr=i(yl),Pve=n(yl,"P",{});var oFt=s(Pve);HTr=r(oFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oFt.forEach(t),UTr=i(yl),an=n(yl,"P",{});var Xw=s(an);JTr=r(Xw,"The model class to instantiate is selected based on the "),Ive=n(Xw,"CODE",{});var rFt=s(Ive);YTr=r(rFt,"model_type"),rFt.forEach(t),KTr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),qve=n(Xw,"CODE",{});var tFt=s(qve);ZTr=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),e8r=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(Xw,"CODE",{});var aFt=s(Nve);o8r=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),r8r=r(Xw,":"),Xw.forEach(t),t8r=i(yl),ce=n(yl,"UL",{});var ge=s(ce);rE=n(ge,"LI",{});var Kke=s(rE);jve=n(Kke,"STRONG",{});var nFt=s(jve);a8r=r(nFt,"albert"),nFt.forEach(t),n8r=r(Kke," \u2014 "),dH=n(Kke,"A",{href:!0});var sFt=s(dH);s8r=r(sFt,"TFAlbertForQuestionAnswering"),sFt.forEach(t),l8r=r(Kke," (ALBERT model)"),Kke.forEach(t),i8r=i(ge),tE=n(ge,"LI",{});var Zke=s(tE);Dve=n(Zke,"STRONG",{});var lFt=s(Dve);d8r=r(lFt,"bert"),lFt.forEach(t),c8r=r(Zke," \u2014 "),cH=n(Zke,"A",{href:!0});var iFt=s(cH);f8r=r(iFt,"TFBertForQuestionAnswering"),iFt.forEach(t),m8r=r(Zke," (BERT model)"),Zke.forEach(t),g8r=i(ge),aE=n(ge,"LI",{});var eSe=s(aE);Gve=n(eSe,"STRONG",{});var dFt=s(Gve);h8r=r(dFt,"camembert"),dFt.forEach(t),p8r=r(eSe," \u2014 "),fH=n(eSe,"A",{href:!0});var cFt=s(fH);u8r=r(cFt,"TFCamembertForQuestionAnswering"),cFt.forEach(t),_8r=r(eSe," (CamemBERT model)"),eSe.forEach(t),b8r=i(ge),nE=n(ge,"LI",{});var oSe=s(nE);Ove=n(oSe,"STRONG",{});var fFt=s(Ove);v8r=r(fFt,"convbert"),fFt.forEach(t),F8r=r(oSe," \u2014 "),mH=n(oSe,"A",{href:!0});var mFt=s(mH);T8r=r(mFt,"TFConvBertForQuestionAnswering"),mFt.forEach(t),M8r=r(oSe," (ConvBERT model)"),oSe.forEach(t),E8r=i(ge),sE=n(ge,"LI",{});var rSe=s(sE);Vve=n(rSe,"STRONG",{});var gFt=s(Vve);C8r=r(gFt,"deberta"),gFt.forEach(t),w8r=r(rSe," \u2014 "),gH=n(rSe,"A",{href:!0});var hFt=s(gH);A8r=r(hFt,"TFDebertaForQuestionAnswering"),hFt.forEach(t),y8r=r(rSe," (DeBERTa model)"),rSe.forEach(t),L8r=i(ge),lE=n(ge,"LI",{});var tSe=s(lE);Xve=n(tSe,"STRONG",{});var pFt=s(Xve);x8r=r(pFt,"deberta-v2"),pFt.forEach(t),$8r=r(tSe," \u2014 "),hH=n(tSe,"A",{href:!0});var uFt=s(hH);k8r=r(uFt,"TFDebertaV2ForQuestionAnswering"),uFt.forEach(t),S8r=r(tSe," (DeBERTa-v2 model)"),tSe.forEach(t),R8r=i(ge),iE=n(ge,"LI",{});var aSe=s(iE);zve=n(aSe,"STRONG",{});var _Ft=s(zve);B8r=r(_Ft,"distilbert"),_Ft.forEach(t),P8r=r(aSe," \u2014 "),pH=n(aSe,"A",{href:!0});var bFt=s(pH);I8r=r(bFt,"TFDistilBertForQuestionAnswering"),bFt.forEach(t),q8r=r(aSe," (DistilBERT model)"),aSe.forEach(t),N8r=i(ge),dE=n(ge,"LI",{});var nSe=s(dE);Wve=n(nSe,"STRONG",{});var vFt=s(Wve);j8r=r(vFt,"electra"),vFt.forEach(t),D8r=r(nSe," \u2014 "),uH=n(nSe,"A",{href:!0});var FFt=s(uH);G8r=r(FFt,"TFElectraForQuestionAnswering"),FFt.forEach(t),O8r=r(nSe," (ELECTRA model)"),nSe.forEach(t),V8r=i(ge),cE=n(ge,"LI",{});var sSe=s(cE);Qve=n(sSe,"STRONG",{});var TFt=s(Qve);X8r=r(TFt,"flaubert"),TFt.forEach(t),z8r=r(sSe," \u2014 "),_H=n(sSe,"A",{href:!0});var MFt=s(_H);W8r=r(MFt,"TFFlaubertForQuestionAnsweringSimple"),MFt.forEach(t),Q8r=r(sSe," (FlauBERT model)"),sSe.forEach(t),H8r=i(ge),fE=n(ge,"LI",{});var lSe=s(fE);Hve=n(lSe,"STRONG",{});var EFt=s(Hve);U8r=r(EFt,"funnel"),EFt.forEach(t),J8r=r(lSe," \u2014 "),bH=n(lSe,"A",{href:!0});var CFt=s(bH);Y8r=r(CFt,"TFFunnelForQuestionAnswering"),CFt.forEach(t),K8r=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),Z8r=i(ge),mE=n(ge,"LI",{});var iSe=s(mE);Uve=n(iSe,"STRONG",{});var wFt=s(Uve);eMr=r(wFt,"gptj"),wFt.forEach(t),oMr=r(iSe," \u2014 "),vH=n(iSe,"A",{href:!0});var AFt=s(vH);rMr=r(AFt,"TFGPTJForQuestionAnswering"),AFt.forEach(t),tMr=r(iSe," (GPT-J model)"),iSe.forEach(t),aMr=i(ge),gE=n(ge,"LI",{});var dSe=s(gE);Jve=n(dSe,"STRONG",{});var yFt=s(Jve);nMr=r(yFt,"longformer"),yFt.forEach(t),sMr=r(dSe," \u2014 "),FH=n(dSe,"A",{href:!0});var LFt=s(FH);lMr=r(LFt,"TFLongformerForQuestionAnswering"),LFt.forEach(t),iMr=r(dSe," (Longformer model)"),dSe.forEach(t),dMr=i(ge),hE=n(ge,"LI",{});var cSe=s(hE);Yve=n(cSe,"STRONG",{});var xFt=s(Yve);cMr=r(xFt,"mobilebert"),xFt.forEach(t),fMr=r(cSe," \u2014 "),TH=n(cSe,"A",{href:!0});var $Ft=s(TH);mMr=r($Ft,"TFMobileBertForQuestionAnswering"),$Ft.forEach(t),gMr=r(cSe," (MobileBERT model)"),cSe.forEach(t),hMr=i(ge),pE=n(ge,"LI",{});var fSe=s(pE);Kve=n(fSe,"STRONG",{});var kFt=s(Kve);pMr=r(kFt,"mpnet"),kFt.forEach(t),uMr=r(fSe," \u2014 "),MH=n(fSe,"A",{href:!0});var SFt=s(MH);_Mr=r(SFt,"TFMPNetForQuestionAnswering"),SFt.forEach(t),bMr=r(fSe," (MPNet model)"),fSe.forEach(t),vMr=i(ge),uE=n(ge,"LI",{});var mSe=s(uE);Zve=n(mSe,"STRONG",{});var RFt=s(Zve);FMr=r(RFt,"rembert"),RFt.forEach(t),TMr=r(mSe," \u2014 "),EH=n(mSe,"A",{href:!0});var BFt=s(EH);MMr=r(BFt,"TFRemBertForQuestionAnswering"),BFt.forEach(t),EMr=r(mSe," (RemBERT model)"),mSe.forEach(t),CMr=i(ge),_E=n(ge,"LI",{});var gSe=s(_E);eFe=n(gSe,"STRONG",{});var PFt=s(eFe);wMr=r(PFt,"roberta"),PFt.forEach(t),AMr=r(gSe," \u2014 "),CH=n(gSe,"A",{href:!0});var IFt=s(CH);yMr=r(IFt,"TFRobertaForQuestionAnswering"),IFt.forEach(t),LMr=r(gSe," (RoBERTa model)"),gSe.forEach(t),xMr=i(ge),bE=n(ge,"LI",{});var hSe=s(bE);oFe=n(hSe,"STRONG",{});var qFt=s(oFe);$Mr=r(qFt,"roformer"),qFt.forEach(t),kMr=r(hSe," \u2014 "),wH=n(hSe,"A",{href:!0});var NFt=s(wH);SMr=r(NFt,"TFRoFormerForQuestionAnswering"),NFt.forEach(t),RMr=r(hSe," (RoFormer model)"),hSe.forEach(t),BMr=i(ge),vE=n(ge,"LI",{});var pSe=s(vE);rFe=n(pSe,"STRONG",{});var jFt=s(rFe);PMr=r(jFt,"xlm"),jFt.forEach(t),IMr=r(pSe," \u2014 "),AH=n(pSe,"A",{href:!0});var DFt=s(AH);qMr=r(DFt,"TFXLMForQuestionAnsweringSimple"),DFt.forEach(t),NMr=r(pSe," (XLM model)"),pSe.forEach(t),jMr=i(ge),FE=n(ge,"LI",{});var uSe=s(FE);tFe=n(uSe,"STRONG",{});var GFt=s(tFe);DMr=r(GFt,"xlm-roberta"),GFt.forEach(t),GMr=r(uSe," \u2014 "),yH=n(uSe,"A",{href:!0});var OFt=s(yH);OMr=r(OFt,"TFXLMRobertaForQuestionAnswering"),OFt.forEach(t),VMr=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),XMr=i(ge),TE=n(ge,"LI",{});var _Se=s(TE);aFe=n(_Se,"STRONG",{});var VFt=s(aFe);zMr=r(VFt,"xlnet"),VFt.forEach(t),WMr=r(_Se," \u2014 "),LH=n(_Se,"A",{href:!0});var XFt=s(LH);QMr=r(XFt,"TFXLNetForQuestionAnsweringSimple"),XFt.forEach(t),HMr=r(_Se," (XLNet model)"),_Se.forEach(t),ge.forEach(t),UMr=i(yl),T(ME.$$.fragment,yl),yl.forEach(t),Al.forEach(t),DPe=i(f),mc=n(f,"H2",{class:!0});var Xqe=s(mc);EE=n(Xqe,"A",{id:!0,class:!0,href:!0});var zFt=s(EE);nFe=n(zFt,"SPAN",{});var WFt=s(nFe);T(n7.$$.fragment,WFt),WFt.forEach(t),zFt.forEach(t),JMr=i(Xqe),sFe=n(Xqe,"SPAN",{});var QFt=s(sFe);YMr=r(QFt,"TFAutoModelForVision2Seq"),QFt.forEach(t),Xqe.forEach(t),GPe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(s7.$$.fragment,Ll),KMr=i(Ll),gc=n(Ll,"P",{});var LK=s(gc);ZMr=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xH=n(LK,"A",{href:!0});var HFt=s(xH);e4r=r(HFt,"from_pretrained()"),HFt.forEach(t),o4r=r(LK," class method or the "),$H=n(LK,"A",{href:!0});var UFt=s($H);r4r=r(UFt,"from_config()"),UFt.forEach(t),t4r=r(LK,` class
method.`),LK.forEach(t),a4r=i(Ll),l7=n(Ll,"P",{});var zqe=s(l7);n4r=r(zqe,"This class cannot be instantiated directly using "),lFe=n(zqe,"CODE",{});var JFt=s(lFe);s4r=r(JFt,"__init__()"),JFt.forEach(t),l4r=r(zqe," (throws an error)."),zqe.forEach(t),i4r=i(Ll),Pt=n(Ll,"DIV",{class:!0});var zw=s(Pt);T(i7.$$.fragment,zw),d4r=i(zw),iFe=n(zw,"P",{});var YFt=s(iFe);c4r=r(YFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YFt.forEach(t),f4r=i(zw),hc=n(zw,"P",{});var xK=s(hc);m4r=r(xK,`Note:
Loading a model from its configuration file does `),dFe=n(xK,"STRONG",{});var KFt=s(dFe);g4r=r(KFt,"not"),KFt.forEach(t),h4r=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(xK,"A",{href:!0});var ZFt=s(kH);p4r=r(ZFt,"from_pretrained()"),ZFt.forEach(t),u4r=r(xK," to load the model weights."),xK.forEach(t),_4r=i(zw),T(CE.$$.fragment,zw),zw.forEach(t),b4r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(d7.$$.fragment,xl),v4r=i(xl),cFe=n(xl,"P",{});var e6t=s(cFe);F4r=r(e6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),e6t.forEach(t),T4r=i(xl),nn=n(xl,"P",{});var Ww=s(nn);M4r=r(Ww,"The model class to instantiate is selected based on the "),fFe=n(Ww,"CODE",{});var o6t=s(fFe);E4r=r(o6t,"model_type"),o6t.forEach(t),C4r=r(Ww,` property of the config object (either
passed as an argument or loaded from `),mFe=n(Ww,"CODE",{});var r6t=s(mFe);w4r=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),A4r=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(Ww,"CODE",{});var t6t=s(gFe);y4r=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),L4r=r(Ww,":"),Ww.forEach(t),x4r=i(xl),hFe=n(xl,"UL",{});var a6t=s(hFe);wE=n(a6t,"LI",{});var bSe=s(wE);pFe=n(bSe,"STRONG",{});var n6t=s(pFe);$4r=r(n6t,"vision-encoder-decoder"),n6t.forEach(t),k4r=r(bSe," \u2014 "),SH=n(bSe,"A",{href:!0});var s6t=s(SH);S4r=r(s6t,"TFVisionEncoderDecoderModel"),s6t.forEach(t),R4r=r(bSe," (Vision Encoder decoder model)"),bSe.forEach(t),a6t.forEach(t),B4r=i(xl),T(AE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),OPe=i(f),pc=n(f,"H2",{class:!0});var Wqe=s(pc);yE=n(Wqe,"A",{id:!0,class:!0,href:!0});var l6t=s(yE);uFe=n(l6t,"SPAN",{});var i6t=s(uFe);T(c7.$$.fragment,i6t),i6t.forEach(t),l6t.forEach(t),P4r=i(Wqe),_Fe=n(Wqe,"SPAN",{});var d6t=s(_Fe);I4r=r(d6t,"TFAutoModelForSpeechSeq2Seq"),d6t.forEach(t),Wqe.forEach(t),VPe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(f7.$$.fragment,$l),q4r=i($l),uc=n($l,"P",{});var $K=s(uc);N4r=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RH=n($K,"A",{href:!0});var c6t=s(RH);j4r=r(c6t,"from_pretrained()"),c6t.forEach(t),D4r=r($K," class method or the "),BH=n($K,"A",{href:!0});var f6t=s(BH);G4r=r(f6t,"from_config()"),f6t.forEach(t),O4r=r($K,` class
method.`),$K.forEach(t),V4r=i($l),m7=n($l,"P",{});var Qqe=s(m7);X4r=r(Qqe,"This class cannot be instantiated directly using "),bFe=n(Qqe,"CODE",{});var m6t=s(bFe);z4r=r(m6t,"__init__()"),m6t.forEach(t),W4r=r(Qqe," (throws an error)."),Qqe.forEach(t),Q4r=i($l),It=n($l,"DIV",{class:!0});var Qw=s(It);T(g7.$$.fragment,Qw),H4r=i(Qw),vFe=n(Qw,"P",{});var g6t=s(vFe);U4r=r(g6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),g6t.forEach(t),J4r=i(Qw),_c=n(Qw,"P",{});var kK=s(_c);Y4r=r(kK,`Note:
Loading a model from its configuration file does `),FFe=n(kK,"STRONG",{});var h6t=s(FFe);K4r=r(h6t,"not"),h6t.forEach(t),Z4r=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(kK,"A",{href:!0});var p6t=s(PH);eEr=r(p6t,"from_pretrained()"),p6t.forEach(t),oEr=r(kK," to load the model weights."),kK.forEach(t),rEr=i(Qw),T(LE.$$.fragment,Qw),Qw.forEach(t),tEr=i($l),Br=n($l,"DIV",{class:!0});var kl=s(Br);T(h7.$$.fragment,kl),aEr=i(kl),TFe=n(kl,"P",{});var u6t=s(TFe);nEr=r(u6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),u6t.forEach(t),sEr=i(kl),sn=n(kl,"P",{});var Hw=s(sn);lEr=r(Hw,"The model class to instantiate is selected based on the "),MFe=n(Hw,"CODE",{});var _6t=s(MFe);iEr=r(_6t,"model_type"),_6t.forEach(t),dEr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),EFe=n(Hw,"CODE",{});var b6t=s(EFe);cEr=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),fEr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(Hw,"CODE",{});var v6t=s(CFe);mEr=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),gEr=r(Hw,":"),Hw.forEach(t),hEr=i(kl),wFe=n(kl,"UL",{});var F6t=s(wFe);xE=n(F6t,"LI",{});var vSe=s(xE);AFe=n(vSe,"STRONG",{});var T6t=s(AFe);pEr=r(T6t,"speech_to_text"),T6t.forEach(t),uEr=r(vSe," \u2014 "),IH=n(vSe,"A",{href:!0});var M6t=s(IH);_Er=r(M6t,"TFSpeech2TextForConditionalGeneration"),M6t.forEach(t),bEr=r(vSe," (Speech2Text model)"),vSe.forEach(t),F6t.forEach(t),vEr=i(kl),T($E.$$.fragment,kl),kl.forEach(t),$l.forEach(t),XPe=i(f),bc=n(f,"H2",{class:!0});var Hqe=s(bc);kE=n(Hqe,"A",{id:!0,class:!0,href:!0});var E6t=s(kE);yFe=n(E6t,"SPAN",{});var C6t=s(yFe);T(p7.$$.fragment,C6t),C6t.forEach(t),E6t.forEach(t),FEr=i(Hqe),LFe=n(Hqe,"SPAN",{});var w6t=s(LFe);TEr=r(w6t,"FlaxAutoModel"),w6t.forEach(t),Hqe.forEach(t),zPe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(u7.$$.fragment,Sl),MEr=i(Sl),vc=n(Sl,"P",{});var SK=s(vc);EEr=r(SK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qH=n(SK,"A",{href:!0});var A6t=s(qH);CEr=r(A6t,"from_pretrained()"),A6t.forEach(t),wEr=r(SK," class method or the "),NH=n(SK,"A",{href:!0});var y6t=s(NH);AEr=r(y6t,"from_config()"),y6t.forEach(t),yEr=r(SK,` class
method.`),SK.forEach(t),LEr=i(Sl),_7=n(Sl,"P",{});var Uqe=s(_7);xEr=r(Uqe,"This class cannot be instantiated directly using "),xFe=n(Uqe,"CODE",{});var L6t=s(xFe);$Er=r(L6t,"__init__()"),L6t.forEach(t),kEr=r(Uqe," (throws an error)."),Uqe.forEach(t),SEr=i(Sl),qt=n(Sl,"DIV",{class:!0});var Uw=s(qt);T(b7.$$.fragment,Uw),REr=i(Uw),$Fe=n(Uw,"P",{});var x6t=s($Fe);BEr=r(x6t,"Instantiates one of the base model classes of the library from a configuration."),x6t.forEach(t),PEr=i(Uw),Fc=n(Uw,"P",{});var RK=s(Fc);IEr=r(RK,`Note:
Loading a model from its configuration file does `),kFe=n(RK,"STRONG",{});var $6t=s(kFe);qEr=r($6t,"not"),$6t.forEach(t),NEr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(RK,"A",{href:!0});var k6t=s(jH);jEr=r(k6t,"from_pretrained()"),k6t.forEach(t),DEr=r(RK," to load the model weights."),RK.forEach(t),GEr=i(Uw),T(SE.$$.fragment,Uw),Uw.forEach(t),OEr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(v7.$$.fragment,Rl),VEr=i(Rl),SFe=n(Rl,"P",{});var S6t=s(SFe);XEr=r(S6t,"Instantiate one of the base model classes of the library from a pretrained model."),S6t.forEach(t),zEr=i(Rl),ln=n(Rl,"P",{});var Jw=s(ln);WEr=r(Jw,"The model class to instantiate is selected based on the "),RFe=n(Jw,"CODE",{});var R6t=s(RFe);QEr=r(R6t,"model_type"),R6t.forEach(t),HEr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),BFe=n(Jw,"CODE",{});var B6t=s(BFe);UEr=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),JEr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(Jw,"CODE",{});var P6t=s(PFe);YEr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),KEr=r(Jw,":"),Jw.forEach(t),ZEr=i(Rl),oe=n(Rl,"UL",{});var ae=s(oe);RE=n(ae,"LI",{});var FSe=s(RE);IFe=n(FSe,"STRONG",{});var I6t=s(IFe);eCr=r(I6t,"albert"),I6t.forEach(t),oCr=r(FSe," \u2014 "),DH=n(FSe,"A",{href:!0});var q6t=s(DH);rCr=r(q6t,"FlaxAlbertModel"),q6t.forEach(t),tCr=r(FSe," (ALBERT model)"),FSe.forEach(t),aCr=i(ae),BE=n(ae,"LI",{});var TSe=s(BE);qFe=n(TSe,"STRONG",{});var N6t=s(qFe);nCr=r(N6t,"bart"),N6t.forEach(t),sCr=r(TSe," \u2014 "),GH=n(TSe,"A",{href:!0});var j6t=s(GH);lCr=r(j6t,"FlaxBartModel"),j6t.forEach(t),iCr=r(TSe," (BART model)"),TSe.forEach(t),dCr=i(ae),PE=n(ae,"LI",{});var MSe=s(PE);NFe=n(MSe,"STRONG",{});var D6t=s(NFe);cCr=r(D6t,"beit"),D6t.forEach(t),fCr=r(MSe," \u2014 "),OH=n(MSe,"A",{href:!0});var G6t=s(OH);mCr=r(G6t,"FlaxBeitModel"),G6t.forEach(t),gCr=r(MSe," (BEiT model)"),MSe.forEach(t),hCr=i(ae),IE=n(ae,"LI",{});var ESe=s(IE);jFe=n(ESe,"STRONG",{});var O6t=s(jFe);pCr=r(O6t,"bert"),O6t.forEach(t),uCr=r(ESe," \u2014 "),VH=n(ESe,"A",{href:!0});var V6t=s(VH);_Cr=r(V6t,"FlaxBertModel"),V6t.forEach(t),bCr=r(ESe," (BERT model)"),ESe.forEach(t),vCr=i(ae),qE=n(ae,"LI",{});var CSe=s(qE);DFe=n(CSe,"STRONG",{});var X6t=s(DFe);FCr=r(X6t,"big_bird"),X6t.forEach(t),TCr=r(CSe," \u2014 "),XH=n(CSe,"A",{href:!0});var z6t=s(XH);MCr=r(z6t,"FlaxBigBirdModel"),z6t.forEach(t),ECr=r(CSe," (BigBird model)"),CSe.forEach(t),CCr=i(ae),NE=n(ae,"LI",{});var wSe=s(NE);GFe=n(wSe,"STRONG",{});var W6t=s(GFe);wCr=r(W6t,"blenderbot"),W6t.forEach(t),ACr=r(wSe," \u2014 "),zH=n(wSe,"A",{href:!0});var Q6t=s(zH);yCr=r(Q6t,"FlaxBlenderbotModel"),Q6t.forEach(t),LCr=r(wSe," (Blenderbot model)"),wSe.forEach(t),xCr=i(ae),jE=n(ae,"LI",{});var ASe=s(jE);OFe=n(ASe,"STRONG",{});var H6t=s(OFe);$Cr=r(H6t,"blenderbot-small"),H6t.forEach(t),kCr=r(ASe," \u2014 "),WH=n(ASe,"A",{href:!0});var U6t=s(WH);SCr=r(U6t,"FlaxBlenderbotSmallModel"),U6t.forEach(t),RCr=r(ASe," (BlenderbotSmall model)"),ASe.forEach(t),BCr=i(ae),DE=n(ae,"LI",{});var ySe=s(DE);VFe=n(ySe,"STRONG",{});var J6t=s(VFe);PCr=r(J6t,"clip"),J6t.forEach(t),ICr=r(ySe," \u2014 "),QH=n(ySe,"A",{href:!0});var Y6t=s(QH);qCr=r(Y6t,"FlaxCLIPModel"),Y6t.forEach(t),NCr=r(ySe," (CLIP model)"),ySe.forEach(t),jCr=i(ae),GE=n(ae,"LI",{});var LSe=s(GE);XFe=n(LSe,"STRONG",{});var K6t=s(XFe);DCr=r(K6t,"distilbert"),K6t.forEach(t),GCr=r(LSe," \u2014 "),HH=n(LSe,"A",{href:!0});var Z6t=s(HH);OCr=r(Z6t,"FlaxDistilBertModel"),Z6t.forEach(t),VCr=r(LSe," (DistilBERT model)"),LSe.forEach(t),XCr=i(ae),OE=n(ae,"LI",{});var xSe=s(OE);zFe=n(xSe,"STRONG",{});var eTt=s(zFe);zCr=r(eTt,"electra"),eTt.forEach(t),WCr=r(xSe," \u2014 "),UH=n(xSe,"A",{href:!0});var oTt=s(UH);QCr=r(oTt,"FlaxElectraModel"),oTt.forEach(t),HCr=r(xSe," (ELECTRA model)"),xSe.forEach(t),UCr=i(ae),VE=n(ae,"LI",{});var $Se=s(VE);WFe=n($Se,"STRONG",{});var rTt=s(WFe);JCr=r(rTt,"gpt2"),rTt.forEach(t),YCr=r($Se," \u2014 "),JH=n($Se,"A",{href:!0});var tTt=s(JH);KCr=r(tTt,"FlaxGPT2Model"),tTt.forEach(t),ZCr=r($Se," (OpenAI GPT-2 model)"),$Se.forEach(t),e5r=i(ae),XE=n(ae,"LI",{});var kSe=s(XE);QFe=n(kSe,"STRONG",{});var aTt=s(QFe);o5r=r(aTt,"gpt_neo"),aTt.forEach(t),r5r=r(kSe," \u2014 "),YH=n(kSe,"A",{href:!0});var nTt=s(YH);t5r=r(nTt,"FlaxGPTNeoModel"),nTt.forEach(t),a5r=r(kSe," (GPT Neo model)"),kSe.forEach(t),n5r=i(ae),zE=n(ae,"LI",{});var SSe=s(zE);HFe=n(SSe,"STRONG",{});var sTt=s(HFe);s5r=r(sTt,"gptj"),sTt.forEach(t),l5r=r(SSe," \u2014 "),KH=n(SSe,"A",{href:!0});var lTt=s(KH);i5r=r(lTt,"FlaxGPTJModel"),lTt.forEach(t),d5r=r(SSe," (GPT-J model)"),SSe.forEach(t),c5r=i(ae),WE=n(ae,"LI",{});var RSe=s(WE);UFe=n(RSe,"STRONG",{});var iTt=s(UFe);f5r=r(iTt,"marian"),iTt.forEach(t),m5r=r(RSe," \u2014 "),ZH=n(RSe,"A",{href:!0});var dTt=s(ZH);g5r=r(dTt,"FlaxMarianModel"),dTt.forEach(t),h5r=r(RSe," (Marian model)"),RSe.forEach(t),p5r=i(ae),QE=n(ae,"LI",{});var BSe=s(QE);JFe=n(BSe,"STRONG",{});var cTt=s(JFe);u5r=r(cTt,"mbart"),cTt.forEach(t),_5r=r(BSe," \u2014 "),eU=n(BSe,"A",{href:!0});var fTt=s(eU);b5r=r(fTt,"FlaxMBartModel"),fTt.forEach(t),v5r=r(BSe," (mBART model)"),BSe.forEach(t),F5r=i(ae),HE=n(ae,"LI",{});var PSe=s(HE);YFe=n(PSe,"STRONG",{});var mTt=s(YFe);T5r=r(mTt,"mt5"),mTt.forEach(t),M5r=r(PSe," \u2014 "),oU=n(PSe,"A",{href:!0});var gTt=s(oU);E5r=r(gTt,"FlaxMT5Model"),gTt.forEach(t),C5r=r(PSe," (mT5 model)"),PSe.forEach(t),w5r=i(ae),UE=n(ae,"LI",{});var ISe=s(UE);KFe=n(ISe,"STRONG",{});var hTt=s(KFe);A5r=r(hTt,"pegasus"),hTt.forEach(t),y5r=r(ISe," \u2014 "),rU=n(ISe,"A",{href:!0});var pTt=s(rU);L5r=r(pTt,"FlaxPegasusModel"),pTt.forEach(t),x5r=r(ISe," (Pegasus model)"),ISe.forEach(t),$5r=i(ae),JE=n(ae,"LI",{});var qSe=s(JE);ZFe=n(qSe,"STRONG",{});var uTt=s(ZFe);k5r=r(uTt,"roberta"),uTt.forEach(t),S5r=r(qSe," \u2014 "),tU=n(qSe,"A",{href:!0});var _Tt=s(tU);R5r=r(_Tt,"FlaxRobertaModel"),_Tt.forEach(t),B5r=r(qSe," (RoBERTa model)"),qSe.forEach(t),P5r=i(ae),YE=n(ae,"LI",{});var NSe=s(YE);e6e=n(NSe,"STRONG",{});var bTt=s(e6e);I5r=r(bTt,"roformer"),bTt.forEach(t),q5r=r(NSe," \u2014 "),aU=n(NSe,"A",{href:!0});var vTt=s(aU);N5r=r(vTt,"FlaxRoFormerModel"),vTt.forEach(t),j5r=r(NSe," (RoFormer model)"),NSe.forEach(t),D5r=i(ae),KE=n(ae,"LI",{});var jSe=s(KE);o6e=n(jSe,"STRONG",{});var FTt=s(o6e);G5r=r(FTt,"t5"),FTt.forEach(t),O5r=r(jSe," \u2014 "),nU=n(jSe,"A",{href:!0});var TTt=s(nU);V5r=r(TTt,"FlaxT5Model"),TTt.forEach(t),X5r=r(jSe," (T5 model)"),jSe.forEach(t),z5r=i(ae),ZE=n(ae,"LI",{});var DSe=s(ZE);r6e=n(DSe,"STRONG",{});var MTt=s(r6e);W5r=r(MTt,"vision-text-dual-encoder"),MTt.forEach(t),Q5r=r(DSe," \u2014 "),sU=n(DSe,"A",{href:!0});var ETt=s(sU);H5r=r(ETt,"FlaxVisionTextDualEncoderModel"),ETt.forEach(t),U5r=r(DSe," (VisionTextDualEncoder model)"),DSe.forEach(t),J5r=i(ae),eC=n(ae,"LI",{});var GSe=s(eC);t6e=n(GSe,"STRONG",{});var CTt=s(t6e);Y5r=r(CTt,"vit"),CTt.forEach(t),K5r=r(GSe," \u2014 "),lU=n(GSe,"A",{href:!0});var wTt=s(lU);Z5r=r(wTt,"FlaxViTModel"),wTt.forEach(t),e3r=r(GSe," (ViT model)"),GSe.forEach(t),o3r=i(ae),oC=n(ae,"LI",{});var OSe=s(oC);a6e=n(OSe,"STRONG",{});var ATt=s(a6e);r3r=r(ATt,"wav2vec2"),ATt.forEach(t),t3r=r(OSe," \u2014 "),iU=n(OSe,"A",{href:!0});var yTt=s(iU);a3r=r(yTt,"FlaxWav2Vec2Model"),yTt.forEach(t),n3r=r(OSe," (Wav2Vec2 model)"),OSe.forEach(t),s3r=i(ae),rC=n(ae,"LI",{});var VSe=s(rC);n6e=n(VSe,"STRONG",{});var LTt=s(n6e);l3r=r(LTt,"xglm"),LTt.forEach(t),i3r=r(VSe," \u2014 "),dU=n(VSe,"A",{href:!0});var xTt=s(dU);d3r=r(xTt,"FlaxXGLMModel"),xTt.forEach(t),c3r=r(VSe," (XGLM model)"),VSe.forEach(t),f3r=i(ae),tC=n(ae,"LI",{});var XSe=s(tC);s6e=n(XSe,"STRONG",{});var $Tt=s(s6e);m3r=r($Tt,"xlm-roberta"),$Tt.forEach(t),g3r=r(XSe," \u2014 "),cU=n(XSe,"A",{href:!0});var kTt=s(cU);h3r=r(kTt,"FlaxXLMRobertaModel"),kTt.forEach(t),p3r=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),ae.forEach(t),u3r=i(Rl),T(aC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),WPe=i(f),Tc=n(f,"H2",{class:!0});var Jqe=s(Tc);nC=n(Jqe,"A",{id:!0,class:!0,href:!0});var STt=s(nC);l6e=n(STt,"SPAN",{});var RTt=s(l6e);T(F7.$$.fragment,RTt),RTt.forEach(t),STt.forEach(t),_3r=i(Jqe),i6e=n(Jqe,"SPAN",{});var BTt=s(i6e);b3r=r(BTt,"FlaxAutoModelForCausalLM"),BTt.forEach(t),Jqe.forEach(t),QPe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(T7.$$.fragment,Bl),v3r=i(Bl),Mc=n(Bl,"P",{});var BK=s(Mc);F3r=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fU=n(BK,"A",{href:!0});var PTt=s(fU);T3r=r(PTt,"from_pretrained()"),PTt.forEach(t),M3r=r(BK," class method or the "),mU=n(BK,"A",{href:!0});var ITt=s(mU);E3r=r(ITt,"from_config()"),ITt.forEach(t),C3r=r(BK,` class
method.`),BK.forEach(t),w3r=i(Bl),M7=n(Bl,"P",{});var Yqe=s(M7);A3r=r(Yqe,"This class cannot be instantiated directly using "),d6e=n(Yqe,"CODE",{});var qTt=s(d6e);y3r=r(qTt,"__init__()"),qTt.forEach(t),L3r=r(Yqe," (throws an error)."),Yqe.forEach(t),x3r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Yw=s(Nt);T(E7.$$.fragment,Yw),$3r=i(Yw),c6e=n(Yw,"P",{});var NTt=s(c6e);k3r=r(NTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NTt.forEach(t),S3r=i(Yw),Ec=n(Yw,"P",{});var PK=s(Ec);R3r=r(PK,`Note:
Loading a model from its configuration file does `),f6e=n(PK,"STRONG",{});var jTt=s(f6e);B3r=r(jTt,"not"),jTt.forEach(t),P3r=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(PK,"A",{href:!0});var DTt=s(gU);I3r=r(DTt,"from_pretrained()"),DTt.forEach(t),q3r=r(PK," to load the model weights."),PK.forEach(t),N3r=i(Yw),T(sC.$$.fragment,Yw),Yw.forEach(t),j3r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Pl=s(Ir);T(C7.$$.fragment,Pl),D3r=i(Pl),m6e=n(Pl,"P",{});var GTt=s(m6e);G3r=r(GTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GTt.forEach(t),O3r=i(Pl),dn=n(Pl,"P",{});var Kw=s(dn);V3r=r(Kw,"The model class to instantiate is selected based on the "),g6e=n(Kw,"CODE",{});var OTt=s(g6e);X3r=r(OTt,"model_type"),OTt.forEach(t),z3r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),h6e=n(Kw,"CODE",{});var VTt=s(h6e);W3r=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),Q3r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(Kw,"CODE",{});var XTt=s(p6e);H3r=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),U3r=r(Kw,":"),Kw.forEach(t),J3r=i(Pl),Jr=n(Pl,"UL",{});var Il=s(Jr);lC=n(Il,"LI",{});var zSe=s(lC);u6e=n(zSe,"STRONG",{});var zTt=s(u6e);Y3r=r(zTt,"bart"),zTt.forEach(t),K3r=r(zSe," \u2014 "),hU=n(zSe,"A",{href:!0});var WTt=s(hU);Z3r=r(WTt,"FlaxBartForCausalLM"),WTt.forEach(t),ewr=r(zSe," (BART model)"),zSe.forEach(t),owr=i(Il),iC=n(Il,"LI",{});var WSe=s(iC);_6e=n(WSe,"STRONG",{});var QTt=s(_6e);rwr=r(QTt,"gpt2"),QTt.forEach(t),twr=r(WSe," \u2014 "),pU=n(WSe,"A",{href:!0});var HTt=s(pU);awr=r(HTt,"FlaxGPT2LMHeadModel"),HTt.forEach(t),nwr=r(WSe," (OpenAI GPT-2 model)"),WSe.forEach(t),swr=i(Il),dC=n(Il,"LI",{});var QSe=s(dC);b6e=n(QSe,"STRONG",{});var UTt=s(b6e);lwr=r(UTt,"gpt_neo"),UTt.forEach(t),iwr=r(QSe," \u2014 "),uU=n(QSe,"A",{href:!0});var JTt=s(uU);dwr=r(JTt,"FlaxGPTNeoForCausalLM"),JTt.forEach(t),cwr=r(QSe," (GPT Neo model)"),QSe.forEach(t),fwr=i(Il),cC=n(Il,"LI",{});var HSe=s(cC);v6e=n(HSe,"STRONG",{});var YTt=s(v6e);mwr=r(YTt,"gptj"),YTt.forEach(t),gwr=r(HSe," \u2014 "),_U=n(HSe,"A",{href:!0});var KTt=s(_U);hwr=r(KTt,"FlaxGPTJForCausalLM"),KTt.forEach(t),pwr=r(HSe," (GPT-J model)"),HSe.forEach(t),uwr=i(Il),fC=n(Il,"LI",{});var USe=s(fC);F6e=n(USe,"STRONG",{});var ZTt=s(F6e);_wr=r(ZTt,"xglm"),ZTt.forEach(t),bwr=r(USe," \u2014 "),bU=n(USe,"A",{href:!0});var e8t=s(bU);vwr=r(e8t,"FlaxXGLMForCausalLM"),e8t.forEach(t),Fwr=r(USe," (XGLM model)"),USe.forEach(t),Il.forEach(t),Twr=i(Pl),T(mC.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),HPe=i(f),Cc=n(f,"H2",{class:!0});var Kqe=s(Cc);gC=n(Kqe,"A",{id:!0,class:!0,href:!0});var o8t=s(gC);T6e=n(o8t,"SPAN",{});var r8t=s(T6e);T(w7.$$.fragment,r8t),r8t.forEach(t),o8t.forEach(t),Mwr=i(Kqe),M6e=n(Kqe,"SPAN",{});var t8t=s(M6e);Ewr=r(t8t,"FlaxAutoModelForPreTraining"),t8t.forEach(t),Kqe.forEach(t),UPe=i(f),cr=n(f,"DIV",{class:!0});var ql=s(cr);T(A7.$$.fragment,ql),Cwr=i(ql),wc=n(ql,"P",{});var IK=s(wc);wwr=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vU=n(IK,"A",{href:!0});var a8t=s(vU);Awr=r(a8t,"from_pretrained()"),a8t.forEach(t),ywr=r(IK," class method or the "),FU=n(IK,"A",{href:!0});var n8t=s(FU);Lwr=r(n8t,"from_config()"),n8t.forEach(t),xwr=r(IK,` class
method.`),IK.forEach(t),$wr=i(ql),y7=n(ql,"P",{});var Zqe=s(y7);kwr=r(Zqe,"This class cannot be instantiated directly using "),E6e=n(Zqe,"CODE",{});var s8t=s(E6e);Swr=r(s8t,"__init__()"),s8t.forEach(t),Rwr=r(Zqe," (throws an error)."),Zqe.forEach(t),Bwr=i(ql),jt=n(ql,"DIV",{class:!0});var Zw=s(jt);T(L7.$$.fragment,Zw),Pwr=i(Zw),C6e=n(Zw,"P",{});var l8t=s(C6e);Iwr=r(l8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l8t.forEach(t),qwr=i(Zw),Ac=n(Zw,"P",{});var qK=s(Ac);Nwr=r(qK,`Note:
Loading a model from its configuration file does `),w6e=n(qK,"STRONG",{});var i8t=s(w6e);jwr=r(i8t,"not"),i8t.forEach(t),Dwr=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(qK,"A",{href:!0});var d8t=s(TU);Gwr=r(d8t,"from_pretrained()"),d8t.forEach(t),Owr=r(qK," to load the model weights."),qK.forEach(t),Vwr=i(Zw),T(hC.$$.fragment,Zw),Zw.forEach(t),Xwr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(x7.$$.fragment,Nl),zwr=i(Nl),A6e=n(Nl,"P",{});var c8t=s(A6e);Wwr=r(c8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c8t.forEach(t),Qwr=i(Nl),cn=n(Nl,"P",{});var eA=s(cn);Hwr=r(eA,"The model class to instantiate is selected based on the "),y6e=n(eA,"CODE",{});var f8t=s(y6e);Uwr=r(f8t,"model_type"),f8t.forEach(t),Jwr=r(eA,` property of the config object (either
passed as an argument or loaded from `),L6e=n(eA,"CODE",{});var m8t=s(L6e);Ywr=r(m8t,"pretrained_model_name_or_path"),m8t.forEach(t),Kwr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(eA,"CODE",{});var g8t=s(x6e);Zwr=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),eAr=r(eA,":"),eA.forEach(t),oAr=i(Nl),Me=n(Nl,"UL",{});var we=s(Me);pC=n(we,"LI",{});var JSe=s(pC);$6e=n(JSe,"STRONG",{});var h8t=s($6e);rAr=r(h8t,"albert"),h8t.forEach(t),tAr=r(JSe," \u2014 "),MU=n(JSe,"A",{href:!0});var p8t=s(MU);aAr=r(p8t,"FlaxAlbertForPreTraining"),p8t.forEach(t),nAr=r(JSe," (ALBERT model)"),JSe.forEach(t),sAr=i(we),uC=n(we,"LI",{});var YSe=s(uC);k6e=n(YSe,"STRONG",{});var u8t=s(k6e);lAr=r(u8t,"bart"),u8t.forEach(t),iAr=r(YSe," \u2014 "),EU=n(YSe,"A",{href:!0});var _8t=s(EU);dAr=r(_8t,"FlaxBartForConditionalGeneration"),_8t.forEach(t),cAr=r(YSe," (BART model)"),YSe.forEach(t),fAr=i(we),_C=n(we,"LI",{});var KSe=s(_C);S6e=n(KSe,"STRONG",{});var b8t=s(S6e);mAr=r(b8t,"bert"),b8t.forEach(t),gAr=r(KSe," \u2014 "),CU=n(KSe,"A",{href:!0});var v8t=s(CU);hAr=r(v8t,"FlaxBertForPreTraining"),v8t.forEach(t),pAr=r(KSe," (BERT model)"),KSe.forEach(t),uAr=i(we),bC=n(we,"LI",{});var ZSe=s(bC);R6e=n(ZSe,"STRONG",{});var F8t=s(R6e);_Ar=r(F8t,"big_bird"),F8t.forEach(t),bAr=r(ZSe," \u2014 "),wU=n(ZSe,"A",{href:!0});var T8t=s(wU);vAr=r(T8t,"FlaxBigBirdForPreTraining"),T8t.forEach(t),FAr=r(ZSe," (BigBird model)"),ZSe.forEach(t),TAr=i(we),vC=n(we,"LI",{});var eRe=s(vC);B6e=n(eRe,"STRONG",{});var M8t=s(B6e);MAr=r(M8t,"electra"),M8t.forEach(t),EAr=r(eRe," \u2014 "),AU=n(eRe,"A",{href:!0});var E8t=s(AU);CAr=r(E8t,"FlaxElectraForPreTraining"),E8t.forEach(t),wAr=r(eRe," (ELECTRA model)"),eRe.forEach(t),AAr=i(we),FC=n(we,"LI",{});var oRe=s(FC);P6e=n(oRe,"STRONG",{});var C8t=s(P6e);yAr=r(C8t,"mbart"),C8t.forEach(t),LAr=r(oRe," \u2014 "),yU=n(oRe,"A",{href:!0});var w8t=s(yU);xAr=r(w8t,"FlaxMBartForConditionalGeneration"),w8t.forEach(t),$Ar=r(oRe," (mBART model)"),oRe.forEach(t),kAr=i(we),TC=n(we,"LI",{});var rRe=s(TC);I6e=n(rRe,"STRONG",{});var A8t=s(I6e);SAr=r(A8t,"mt5"),A8t.forEach(t),RAr=r(rRe," \u2014 "),LU=n(rRe,"A",{href:!0});var y8t=s(LU);BAr=r(y8t,"FlaxMT5ForConditionalGeneration"),y8t.forEach(t),PAr=r(rRe," (mT5 model)"),rRe.forEach(t),IAr=i(we),MC=n(we,"LI",{});var tRe=s(MC);q6e=n(tRe,"STRONG",{});var L8t=s(q6e);qAr=r(L8t,"roberta"),L8t.forEach(t),NAr=r(tRe," \u2014 "),xU=n(tRe,"A",{href:!0});var x8t=s(xU);jAr=r(x8t,"FlaxRobertaForMaskedLM"),x8t.forEach(t),DAr=r(tRe," (RoBERTa model)"),tRe.forEach(t),GAr=i(we),EC=n(we,"LI",{});var aRe=s(EC);N6e=n(aRe,"STRONG",{});var $8t=s(N6e);OAr=r($8t,"roformer"),$8t.forEach(t),VAr=r(aRe," \u2014 "),$U=n(aRe,"A",{href:!0});var k8t=s($U);XAr=r(k8t,"FlaxRoFormerForMaskedLM"),k8t.forEach(t),zAr=r(aRe," (RoFormer model)"),aRe.forEach(t),WAr=i(we),CC=n(we,"LI",{});var nRe=s(CC);j6e=n(nRe,"STRONG",{});var S8t=s(j6e);QAr=r(S8t,"t5"),S8t.forEach(t),HAr=r(nRe," \u2014 "),kU=n(nRe,"A",{href:!0});var R8t=s(kU);UAr=r(R8t,"FlaxT5ForConditionalGeneration"),R8t.forEach(t),JAr=r(nRe," (T5 model)"),nRe.forEach(t),YAr=i(we),wC=n(we,"LI",{});var sRe=s(wC);D6e=n(sRe,"STRONG",{});var B8t=s(D6e);KAr=r(B8t,"wav2vec2"),B8t.forEach(t),ZAr=r(sRe," \u2014 "),SU=n(sRe,"A",{href:!0});var P8t=s(SU);e0r=r(P8t,"FlaxWav2Vec2ForPreTraining"),P8t.forEach(t),o0r=r(sRe," (Wav2Vec2 model)"),sRe.forEach(t),r0r=i(we),AC=n(we,"LI",{});var lRe=s(AC);G6e=n(lRe,"STRONG",{});var I8t=s(G6e);t0r=r(I8t,"xlm-roberta"),I8t.forEach(t),a0r=r(lRe," \u2014 "),RU=n(lRe,"A",{href:!0});var q8t=s(RU);n0r=r(q8t,"FlaxXLMRobertaForMaskedLM"),q8t.forEach(t),s0r=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),we.forEach(t),l0r=i(Nl),T(yC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),JPe=i(f),yc=n(f,"H2",{class:!0});var eNe=s(yc);LC=n(eNe,"A",{id:!0,class:!0,href:!0});var N8t=s(LC);O6e=n(N8t,"SPAN",{});var j8t=s(O6e);T($7.$$.fragment,j8t),j8t.forEach(t),N8t.forEach(t),i0r=i(eNe),V6e=n(eNe,"SPAN",{});var D8t=s(V6e);d0r=r(D8t,"FlaxAutoModelForMaskedLM"),D8t.forEach(t),eNe.forEach(t),YPe=i(f),fr=n(f,"DIV",{class:!0});var jl=s(fr);T(k7.$$.fragment,jl),c0r=i(jl),Lc=n(jl,"P",{});var NK=s(Lc);f0r=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BU=n(NK,"A",{href:!0});var G8t=s(BU);m0r=r(G8t,"from_pretrained()"),G8t.forEach(t),g0r=r(NK," class method or the "),PU=n(NK,"A",{href:!0});var O8t=s(PU);h0r=r(O8t,"from_config()"),O8t.forEach(t),p0r=r(NK,` class
method.`),NK.forEach(t),u0r=i(jl),S7=n(jl,"P",{});var oNe=s(S7);_0r=r(oNe,"This class cannot be instantiated directly using "),X6e=n(oNe,"CODE",{});var V8t=s(X6e);b0r=r(V8t,"__init__()"),V8t.forEach(t),v0r=r(oNe," (throws an error)."),oNe.forEach(t),F0r=i(jl),Dt=n(jl,"DIV",{class:!0});var oA=s(Dt);T(R7.$$.fragment,oA),T0r=i(oA),z6e=n(oA,"P",{});var X8t=s(z6e);M0r=r(X8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X8t.forEach(t),E0r=i(oA),xc=n(oA,"P",{});var jK=s(xc);C0r=r(jK,`Note:
Loading a model from its configuration file does `),W6e=n(jK,"STRONG",{});var z8t=s(W6e);w0r=r(z8t,"not"),z8t.forEach(t),A0r=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(jK,"A",{href:!0});var W8t=s(IU);y0r=r(W8t,"from_pretrained()"),W8t.forEach(t),L0r=r(jK," to load the model weights."),jK.forEach(t),x0r=i(oA),T(xC.$$.fragment,oA),oA.forEach(t),$0r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(B7.$$.fragment,Dl),k0r=i(Dl),Q6e=n(Dl,"P",{});var Q8t=s(Q6e);S0r=r(Q8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q8t.forEach(t),R0r=i(Dl),fn=n(Dl,"P",{});var rA=s(fn);B0r=r(rA,"The model class to instantiate is selected based on the "),H6e=n(rA,"CODE",{});var H8t=s(H6e);P0r=r(H8t,"model_type"),H8t.forEach(t),I0r=r(rA,` property of the config object (either
passed as an argument or loaded from `),U6e=n(rA,"CODE",{});var U8t=s(U6e);q0r=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),N0r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=n(rA,"CODE",{});var J8t=s(J6e);j0r=r(J8t,"pretrained_model_name_or_path"),J8t.forEach(t),D0r=r(rA,":"),rA.forEach(t),G0r=i(Dl),Le=n(Dl,"UL",{});var Pe=s(Le);$C=n(Pe,"LI",{});var iRe=s($C);Y6e=n(iRe,"STRONG",{});var Y8t=s(Y6e);O0r=r(Y8t,"albert"),Y8t.forEach(t),V0r=r(iRe," \u2014 "),qU=n(iRe,"A",{href:!0});var K8t=s(qU);X0r=r(K8t,"FlaxAlbertForMaskedLM"),K8t.forEach(t),z0r=r(iRe," (ALBERT model)"),iRe.forEach(t),W0r=i(Pe),kC=n(Pe,"LI",{});var dRe=s(kC);K6e=n(dRe,"STRONG",{});var Z8t=s(K6e);Q0r=r(Z8t,"bart"),Z8t.forEach(t),H0r=r(dRe," \u2014 "),NU=n(dRe,"A",{href:!0});var eMt=s(NU);U0r=r(eMt,"FlaxBartForConditionalGeneration"),eMt.forEach(t),J0r=r(dRe," (BART model)"),dRe.forEach(t),Y0r=i(Pe),SC=n(Pe,"LI",{});var cRe=s(SC);Z6e=n(cRe,"STRONG",{});var oMt=s(Z6e);K0r=r(oMt,"bert"),oMt.forEach(t),Z0r=r(cRe," \u2014 "),jU=n(cRe,"A",{href:!0});var rMt=s(jU);eyr=r(rMt,"FlaxBertForMaskedLM"),rMt.forEach(t),oyr=r(cRe," (BERT model)"),cRe.forEach(t),ryr=i(Pe),RC=n(Pe,"LI",{});var fRe=s(RC);eTe=n(fRe,"STRONG",{});var tMt=s(eTe);tyr=r(tMt,"big_bird"),tMt.forEach(t),ayr=r(fRe," \u2014 "),DU=n(fRe,"A",{href:!0});var aMt=s(DU);nyr=r(aMt,"FlaxBigBirdForMaskedLM"),aMt.forEach(t),syr=r(fRe," (BigBird model)"),fRe.forEach(t),lyr=i(Pe),BC=n(Pe,"LI",{});var mRe=s(BC);oTe=n(mRe,"STRONG",{});var nMt=s(oTe);iyr=r(nMt,"distilbert"),nMt.forEach(t),dyr=r(mRe," \u2014 "),GU=n(mRe,"A",{href:!0});var sMt=s(GU);cyr=r(sMt,"FlaxDistilBertForMaskedLM"),sMt.forEach(t),fyr=r(mRe," (DistilBERT model)"),mRe.forEach(t),myr=i(Pe),PC=n(Pe,"LI",{});var gRe=s(PC);rTe=n(gRe,"STRONG",{});var lMt=s(rTe);gyr=r(lMt,"electra"),lMt.forEach(t),hyr=r(gRe," \u2014 "),OU=n(gRe,"A",{href:!0});var iMt=s(OU);pyr=r(iMt,"FlaxElectraForMaskedLM"),iMt.forEach(t),uyr=r(gRe," (ELECTRA model)"),gRe.forEach(t),_yr=i(Pe),IC=n(Pe,"LI",{});var hRe=s(IC);tTe=n(hRe,"STRONG",{});var dMt=s(tTe);byr=r(dMt,"mbart"),dMt.forEach(t),vyr=r(hRe," \u2014 "),VU=n(hRe,"A",{href:!0});var cMt=s(VU);Fyr=r(cMt,"FlaxMBartForConditionalGeneration"),cMt.forEach(t),Tyr=r(hRe," (mBART model)"),hRe.forEach(t),Myr=i(Pe),qC=n(Pe,"LI",{});var pRe=s(qC);aTe=n(pRe,"STRONG",{});var fMt=s(aTe);Eyr=r(fMt,"roberta"),fMt.forEach(t),Cyr=r(pRe," \u2014 "),XU=n(pRe,"A",{href:!0});var mMt=s(XU);wyr=r(mMt,"FlaxRobertaForMaskedLM"),mMt.forEach(t),Ayr=r(pRe," (RoBERTa model)"),pRe.forEach(t),yyr=i(Pe),NC=n(Pe,"LI",{});var uRe=s(NC);nTe=n(uRe,"STRONG",{});var gMt=s(nTe);Lyr=r(gMt,"roformer"),gMt.forEach(t),xyr=r(uRe," \u2014 "),zU=n(uRe,"A",{href:!0});var hMt=s(zU);$yr=r(hMt,"FlaxRoFormerForMaskedLM"),hMt.forEach(t),kyr=r(uRe," (RoFormer model)"),uRe.forEach(t),Syr=i(Pe),jC=n(Pe,"LI",{});var _Re=s(jC);sTe=n(_Re,"STRONG",{});var pMt=s(sTe);Ryr=r(pMt,"xlm-roberta"),pMt.forEach(t),Byr=r(_Re," \u2014 "),WU=n(_Re,"A",{href:!0});var uMt=s(WU);Pyr=r(uMt,"FlaxXLMRobertaForMaskedLM"),uMt.forEach(t),Iyr=r(_Re," (XLM-RoBERTa model)"),_Re.forEach(t),Pe.forEach(t),qyr=i(Dl),T(DC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),KPe=i(f),$c=n(f,"H2",{class:!0});var rNe=s($c);GC=n(rNe,"A",{id:!0,class:!0,href:!0});var _Mt=s(GC);lTe=n(_Mt,"SPAN",{});var bMt=s(lTe);T(P7.$$.fragment,bMt),bMt.forEach(t),_Mt.forEach(t),Nyr=i(rNe),iTe=n(rNe,"SPAN",{});var vMt=s(iTe);jyr=r(vMt,"FlaxAutoModelForSeq2SeqLM"),vMt.forEach(t),rNe.forEach(t),ZPe=i(f),mr=n(f,"DIV",{class:!0});var Gl=s(mr);T(I7.$$.fragment,Gl),Dyr=i(Gl),kc=n(Gl,"P",{});var DK=s(kc);Gyr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QU=n(DK,"A",{href:!0});var FMt=s(QU);Oyr=r(FMt,"from_pretrained()"),FMt.forEach(t),Vyr=r(DK," class method or the "),HU=n(DK,"A",{href:!0});var TMt=s(HU);Xyr=r(TMt,"from_config()"),TMt.forEach(t),zyr=r(DK,` class
method.`),DK.forEach(t),Wyr=i(Gl),q7=n(Gl,"P",{});var tNe=s(q7);Qyr=r(tNe,"This class cannot be instantiated directly using "),dTe=n(tNe,"CODE",{});var MMt=s(dTe);Hyr=r(MMt,"__init__()"),MMt.forEach(t),Uyr=r(tNe," (throws an error)."),tNe.forEach(t),Jyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var tA=s(Gt);T(N7.$$.fragment,tA),Yyr=i(tA),cTe=n(tA,"P",{});var EMt=s(cTe);Kyr=r(EMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EMt.forEach(t),Zyr=i(tA),Sc=n(tA,"P",{});var GK=s(Sc);eLr=r(GK,`Note:
Loading a model from its configuration file does `),fTe=n(GK,"STRONG",{});var CMt=s(fTe);oLr=r(CMt,"not"),CMt.forEach(t),rLr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(GK,"A",{href:!0});var wMt=s(UU);tLr=r(wMt,"from_pretrained()"),wMt.forEach(t),aLr=r(GK," to load the model weights."),GK.forEach(t),nLr=i(tA),T(OC.$$.fragment,tA),tA.forEach(t),sLr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(j7.$$.fragment,Ol),lLr=i(Ol),mTe=n(Ol,"P",{});var AMt=s(mTe);iLr=r(AMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AMt.forEach(t),dLr=i(Ol),mn=n(Ol,"P",{});var aA=s(mn);cLr=r(aA,"The model class to instantiate is selected based on the "),gTe=n(aA,"CODE",{});var yMt=s(gTe);fLr=r(yMt,"model_type"),yMt.forEach(t),mLr=r(aA,` property of the config object (either
passed as an argument or loaded from `),hTe=n(aA,"CODE",{});var LMt=s(hTe);gLr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),hLr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(aA,"CODE",{});var xMt=s(pTe);pLr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),uLr=r(aA,":"),aA.forEach(t),_Lr=i(Ol),Re=n(Ol,"UL",{});var Ve=s(Re);VC=n(Ve,"LI",{});var bRe=s(VC);uTe=n(bRe,"STRONG",{});var $Mt=s(uTe);bLr=r($Mt,"bart"),$Mt.forEach(t),vLr=r(bRe," \u2014 "),JU=n(bRe,"A",{href:!0});var kMt=s(JU);FLr=r(kMt,"FlaxBartForConditionalGeneration"),kMt.forEach(t),TLr=r(bRe," (BART model)"),bRe.forEach(t),MLr=i(Ve),XC=n(Ve,"LI",{});var vRe=s(XC);_Te=n(vRe,"STRONG",{});var SMt=s(_Te);ELr=r(SMt,"blenderbot"),SMt.forEach(t),CLr=r(vRe," \u2014 "),YU=n(vRe,"A",{href:!0});var RMt=s(YU);wLr=r(RMt,"FlaxBlenderbotForConditionalGeneration"),RMt.forEach(t),ALr=r(vRe," (Blenderbot model)"),vRe.forEach(t),yLr=i(Ve),zC=n(Ve,"LI",{});var FRe=s(zC);bTe=n(FRe,"STRONG",{});var BMt=s(bTe);LLr=r(BMt,"blenderbot-small"),BMt.forEach(t),xLr=r(FRe," \u2014 "),KU=n(FRe,"A",{href:!0});var PMt=s(KU);$Lr=r(PMt,"FlaxBlenderbotSmallForConditionalGeneration"),PMt.forEach(t),kLr=r(FRe," (BlenderbotSmall model)"),FRe.forEach(t),SLr=i(Ve),WC=n(Ve,"LI",{});var TRe=s(WC);vTe=n(TRe,"STRONG",{});var IMt=s(vTe);RLr=r(IMt,"encoder-decoder"),IMt.forEach(t),BLr=r(TRe," \u2014 "),ZU=n(TRe,"A",{href:!0});var qMt=s(ZU);PLr=r(qMt,"FlaxEncoderDecoderModel"),qMt.forEach(t),ILr=r(TRe," (Encoder decoder model)"),TRe.forEach(t),qLr=i(Ve),QC=n(Ve,"LI",{});var MRe=s(QC);FTe=n(MRe,"STRONG",{});var NMt=s(FTe);NLr=r(NMt,"marian"),NMt.forEach(t),jLr=r(MRe," \u2014 "),eJ=n(MRe,"A",{href:!0});var jMt=s(eJ);DLr=r(jMt,"FlaxMarianMTModel"),jMt.forEach(t),GLr=r(MRe," (Marian model)"),MRe.forEach(t),OLr=i(Ve),HC=n(Ve,"LI",{});var ERe=s(HC);TTe=n(ERe,"STRONG",{});var DMt=s(TTe);VLr=r(DMt,"mbart"),DMt.forEach(t),XLr=r(ERe," \u2014 "),oJ=n(ERe,"A",{href:!0});var GMt=s(oJ);zLr=r(GMt,"FlaxMBartForConditionalGeneration"),GMt.forEach(t),WLr=r(ERe," (mBART model)"),ERe.forEach(t),QLr=i(Ve),UC=n(Ve,"LI",{});var CRe=s(UC);MTe=n(CRe,"STRONG",{});var OMt=s(MTe);HLr=r(OMt,"mt5"),OMt.forEach(t),ULr=r(CRe," \u2014 "),rJ=n(CRe,"A",{href:!0});var VMt=s(rJ);JLr=r(VMt,"FlaxMT5ForConditionalGeneration"),VMt.forEach(t),YLr=r(CRe," (mT5 model)"),CRe.forEach(t),KLr=i(Ve),JC=n(Ve,"LI",{});var wRe=s(JC);ETe=n(wRe,"STRONG",{});var XMt=s(ETe);ZLr=r(XMt,"pegasus"),XMt.forEach(t),e7r=r(wRe," \u2014 "),tJ=n(wRe,"A",{href:!0});var zMt=s(tJ);o7r=r(zMt,"FlaxPegasusForConditionalGeneration"),zMt.forEach(t),r7r=r(wRe," (Pegasus model)"),wRe.forEach(t),t7r=i(Ve),YC=n(Ve,"LI",{});var ARe=s(YC);CTe=n(ARe,"STRONG",{});var WMt=s(CTe);a7r=r(WMt,"t5"),WMt.forEach(t),n7r=r(ARe," \u2014 "),aJ=n(ARe,"A",{href:!0});var QMt=s(aJ);s7r=r(QMt,"FlaxT5ForConditionalGeneration"),QMt.forEach(t),l7r=r(ARe," (T5 model)"),ARe.forEach(t),Ve.forEach(t),i7r=i(Ol),T(KC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),eIe=i(f),Rc=n(f,"H2",{class:!0});var aNe=s(Rc);ZC=n(aNe,"A",{id:!0,class:!0,href:!0});var HMt=s(ZC);wTe=n(HMt,"SPAN",{});var UMt=s(wTe);T(D7.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),d7r=i(aNe),ATe=n(aNe,"SPAN",{});var JMt=s(ATe);c7r=r(JMt,"FlaxAutoModelForSequenceClassification"),JMt.forEach(t),aNe.forEach(t),oIe=i(f),gr=n(f,"DIV",{class:!0});var Vl=s(gr);T(G7.$$.fragment,Vl),f7r=i(Vl),Bc=n(Vl,"P",{});var OK=s(Bc);m7r=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nJ=n(OK,"A",{href:!0});var YMt=s(nJ);g7r=r(YMt,"from_pretrained()"),YMt.forEach(t),h7r=r(OK," class method or the "),sJ=n(OK,"A",{href:!0});var KMt=s(sJ);p7r=r(KMt,"from_config()"),KMt.forEach(t),u7r=r(OK,` class
method.`),OK.forEach(t),_7r=i(Vl),O7=n(Vl,"P",{});var nNe=s(O7);b7r=r(nNe,"This class cannot be instantiated directly using "),yTe=n(nNe,"CODE",{});var ZMt=s(yTe);v7r=r(ZMt,"__init__()"),ZMt.forEach(t),F7r=r(nNe," (throws an error)."),nNe.forEach(t),T7r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var nA=s(Ot);T(V7.$$.fragment,nA),M7r=i(nA),LTe=n(nA,"P",{});var e4t=s(LTe);E7r=r(e4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e4t.forEach(t),C7r=i(nA),Pc=n(nA,"P",{});var VK=s(Pc);w7r=r(VK,`Note:
Loading a model from its configuration file does `),xTe=n(VK,"STRONG",{});var o4t=s(xTe);A7r=r(o4t,"not"),o4t.forEach(t),y7r=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(VK,"A",{href:!0});var r4t=s(lJ);L7r=r(r4t,"from_pretrained()"),r4t.forEach(t),x7r=r(VK," to load the model weights."),VK.forEach(t),$7r=i(nA),T(e5.$$.fragment,nA),nA.forEach(t),k7r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(X7.$$.fragment,Xl),S7r=i(Xl),$Te=n(Xl,"P",{});var t4t=s($Te);R7r=r(t4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t4t.forEach(t),B7r=i(Xl),gn=n(Xl,"P",{});var sA=s(gn);P7r=r(sA,"The model class to instantiate is selected based on the "),kTe=n(sA,"CODE",{});var a4t=s(kTe);I7r=r(a4t,"model_type"),a4t.forEach(t),q7r=r(sA,` property of the config object (either
passed as an argument or loaded from `),STe=n(sA,"CODE",{});var n4t=s(STe);N7r=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),j7r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(sA,"CODE",{});var s4t=s(RTe);D7r=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),G7r=r(sA,":"),sA.forEach(t),O7r=i(Xl),xe=n(Xl,"UL",{});var Ie=s(xe);o5=n(Ie,"LI",{});var yRe=s(o5);BTe=n(yRe,"STRONG",{});var l4t=s(BTe);V7r=r(l4t,"albert"),l4t.forEach(t),X7r=r(yRe," \u2014 "),iJ=n(yRe,"A",{href:!0});var i4t=s(iJ);z7r=r(i4t,"FlaxAlbertForSequenceClassification"),i4t.forEach(t),W7r=r(yRe," (ALBERT model)"),yRe.forEach(t),Q7r=i(Ie),r5=n(Ie,"LI",{});var LRe=s(r5);PTe=n(LRe,"STRONG",{});var d4t=s(PTe);H7r=r(d4t,"bart"),d4t.forEach(t),U7r=r(LRe," \u2014 "),dJ=n(LRe,"A",{href:!0});var c4t=s(dJ);J7r=r(c4t,"FlaxBartForSequenceClassification"),c4t.forEach(t),Y7r=r(LRe," (BART model)"),LRe.forEach(t),K7r=i(Ie),t5=n(Ie,"LI",{});var xRe=s(t5);ITe=n(xRe,"STRONG",{});var f4t=s(ITe);Z7r=r(f4t,"bert"),f4t.forEach(t),exr=r(xRe," \u2014 "),cJ=n(xRe,"A",{href:!0});var m4t=s(cJ);oxr=r(m4t,"FlaxBertForSequenceClassification"),m4t.forEach(t),rxr=r(xRe," (BERT model)"),xRe.forEach(t),txr=i(Ie),a5=n(Ie,"LI",{});var $Re=s(a5);qTe=n($Re,"STRONG",{});var g4t=s(qTe);axr=r(g4t,"big_bird"),g4t.forEach(t),nxr=r($Re," \u2014 "),fJ=n($Re,"A",{href:!0});var h4t=s(fJ);sxr=r(h4t,"FlaxBigBirdForSequenceClassification"),h4t.forEach(t),lxr=r($Re," (BigBird model)"),$Re.forEach(t),ixr=i(Ie),n5=n(Ie,"LI",{});var kRe=s(n5);NTe=n(kRe,"STRONG",{});var p4t=s(NTe);dxr=r(p4t,"distilbert"),p4t.forEach(t),cxr=r(kRe," \u2014 "),mJ=n(kRe,"A",{href:!0});var u4t=s(mJ);fxr=r(u4t,"FlaxDistilBertForSequenceClassification"),u4t.forEach(t),mxr=r(kRe," (DistilBERT model)"),kRe.forEach(t),gxr=i(Ie),s5=n(Ie,"LI",{});var SRe=s(s5);jTe=n(SRe,"STRONG",{});var _4t=s(jTe);hxr=r(_4t,"electra"),_4t.forEach(t),pxr=r(SRe," \u2014 "),gJ=n(SRe,"A",{href:!0});var b4t=s(gJ);uxr=r(b4t,"FlaxElectraForSequenceClassification"),b4t.forEach(t),_xr=r(SRe," (ELECTRA model)"),SRe.forEach(t),bxr=i(Ie),l5=n(Ie,"LI",{});var RRe=s(l5);DTe=n(RRe,"STRONG",{});var v4t=s(DTe);vxr=r(v4t,"mbart"),v4t.forEach(t),Fxr=r(RRe," \u2014 "),hJ=n(RRe,"A",{href:!0});var F4t=s(hJ);Txr=r(F4t,"FlaxMBartForSequenceClassification"),F4t.forEach(t),Mxr=r(RRe," (mBART model)"),RRe.forEach(t),Exr=i(Ie),i5=n(Ie,"LI",{});var BRe=s(i5);GTe=n(BRe,"STRONG",{});var T4t=s(GTe);Cxr=r(T4t,"roberta"),T4t.forEach(t),wxr=r(BRe," \u2014 "),pJ=n(BRe,"A",{href:!0});var M4t=s(pJ);Axr=r(M4t,"FlaxRobertaForSequenceClassification"),M4t.forEach(t),yxr=r(BRe," (RoBERTa model)"),BRe.forEach(t),Lxr=i(Ie),d5=n(Ie,"LI",{});var PRe=s(d5);OTe=n(PRe,"STRONG",{});var E4t=s(OTe);xxr=r(E4t,"roformer"),E4t.forEach(t),$xr=r(PRe," \u2014 "),uJ=n(PRe,"A",{href:!0});var C4t=s(uJ);kxr=r(C4t,"FlaxRoFormerForSequenceClassification"),C4t.forEach(t),Sxr=r(PRe," (RoFormer model)"),PRe.forEach(t),Rxr=i(Ie),c5=n(Ie,"LI",{});var IRe=s(c5);VTe=n(IRe,"STRONG",{});var w4t=s(VTe);Bxr=r(w4t,"xlm-roberta"),w4t.forEach(t),Pxr=r(IRe," \u2014 "),_J=n(IRe,"A",{href:!0});var A4t=s(_J);Ixr=r(A4t,"FlaxXLMRobertaForSequenceClassification"),A4t.forEach(t),qxr=r(IRe," (XLM-RoBERTa model)"),IRe.forEach(t),Ie.forEach(t),Nxr=i(Xl),T(f5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),rIe=i(f),Ic=n(f,"H2",{class:!0});var sNe=s(Ic);m5=n(sNe,"A",{id:!0,class:!0,href:!0});var y4t=s(m5);XTe=n(y4t,"SPAN",{});var L4t=s(XTe);T(z7.$$.fragment,L4t),L4t.forEach(t),y4t.forEach(t),jxr=i(sNe),zTe=n(sNe,"SPAN",{});var x4t=s(zTe);Dxr=r(x4t,"FlaxAutoModelForQuestionAnswering"),x4t.forEach(t),sNe.forEach(t),tIe=i(f),hr=n(f,"DIV",{class:!0});var zl=s(hr);T(W7.$$.fragment,zl),Gxr=i(zl),qc=n(zl,"P",{});var XK=s(qc);Oxr=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bJ=n(XK,"A",{href:!0});var $4t=s(bJ);Vxr=r($4t,"from_pretrained()"),$4t.forEach(t),Xxr=r(XK," class method or the "),vJ=n(XK,"A",{href:!0});var k4t=s(vJ);zxr=r(k4t,"from_config()"),k4t.forEach(t),Wxr=r(XK,` class
method.`),XK.forEach(t),Qxr=i(zl),Q7=n(zl,"P",{});var lNe=s(Q7);Hxr=r(lNe,"This class cannot be instantiated directly using "),WTe=n(lNe,"CODE",{});var S4t=s(WTe);Uxr=r(S4t,"__init__()"),S4t.forEach(t),Jxr=r(lNe," (throws an error)."),lNe.forEach(t),Yxr=i(zl),Vt=n(zl,"DIV",{class:!0});var lA=s(Vt);T(H7.$$.fragment,lA),Kxr=i(lA),QTe=n(lA,"P",{});var R4t=s(QTe);Zxr=r(R4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R4t.forEach(t),e9r=i(lA),Nc=n(lA,"P",{});var zK=s(Nc);o9r=r(zK,`Note:
Loading a model from its configuration file does `),HTe=n(zK,"STRONG",{});var B4t=s(HTe);r9r=r(B4t,"not"),B4t.forEach(t),t9r=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(zK,"A",{href:!0});var P4t=s(FJ);a9r=r(P4t,"from_pretrained()"),P4t.forEach(t),n9r=r(zK," to load the model weights."),zK.forEach(t),s9r=i(lA),T(g5.$$.fragment,lA),lA.forEach(t),l9r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(U7.$$.fragment,Wl),i9r=i(Wl),UTe=n(Wl,"P",{});var I4t=s(UTe);d9r=r(I4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I4t.forEach(t),c9r=i(Wl),hn=n(Wl,"P",{});var iA=s(hn);f9r=r(iA,"The model class to instantiate is selected based on the "),JTe=n(iA,"CODE",{});var q4t=s(JTe);m9r=r(q4t,"model_type"),q4t.forEach(t),g9r=r(iA,` property of the config object (either
passed as an argument or loaded from `),YTe=n(iA,"CODE",{});var N4t=s(YTe);h9r=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),p9r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(iA,"CODE",{});var j4t=s(KTe);u9r=r(j4t,"pretrained_model_name_or_path"),j4t.forEach(t),_9r=r(iA,":"),iA.forEach(t),b9r=i(Wl),$e=n(Wl,"UL",{});var qe=s($e);h5=n(qe,"LI",{});var qRe=s(h5);ZTe=n(qRe,"STRONG",{});var D4t=s(ZTe);v9r=r(D4t,"albert"),D4t.forEach(t),F9r=r(qRe," \u2014 "),TJ=n(qRe,"A",{href:!0});var G4t=s(TJ);T9r=r(G4t,"FlaxAlbertForQuestionAnswering"),G4t.forEach(t),M9r=r(qRe," (ALBERT model)"),qRe.forEach(t),E9r=i(qe),p5=n(qe,"LI",{});var NRe=s(p5);e8e=n(NRe,"STRONG",{});var O4t=s(e8e);C9r=r(O4t,"bart"),O4t.forEach(t),w9r=r(NRe," \u2014 "),MJ=n(NRe,"A",{href:!0});var V4t=s(MJ);A9r=r(V4t,"FlaxBartForQuestionAnswering"),V4t.forEach(t),y9r=r(NRe," (BART model)"),NRe.forEach(t),L9r=i(qe),u5=n(qe,"LI",{});var jRe=s(u5);o8e=n(jRe,"STRONG",{});var X4t=s(o8e);x9r=r(X4t,"bert"),X4t.forEach(t),$9r=r(jRe," \u2014 "),EJ=n(jRe,"A",{href:!0});var z4t=s(EJ);k9r=r(z4t,"FlaxBertForQuestionAnswering"),z4t.forEach(t),S9r=r(jRe," (BERT model)"),jRe.forEach(t),R9r=i(qe),_5=n(qe,"LI",{});var DRe=s(_5);r8e=n(DRe,"STRONG",{});var W4t=s(r8e);B9r=r(W4t,"big_bird"),W4t.forEach(t),P9r=r(DRe," \u2014 "),CJ=n(DRe,"A",{href:!0});var Q4t=s(CJ);I9r=r(Q4t,"FlaxBigBirdForQuestionAnswering"),Q4t.forEach(t),q9r=r(DRe," (BigBird model)"),DRe.forEach(t),N9r=i(qe),b5=n(qe,"LI",{});var GRe=s(b5);t8e=n(GRe,"STRONG",{});var H4t=s(t8e);j9r=r(H4t,"distilbert"),H4t.forEach(t),D9r=r(GRe," \u2014 "),wJ=n(GRe,"A",{href:!0});var U4t=s(wJ);G9r=r(U4t,"FlaxDistilBertForQuestionAnswering"),U4t.forEach(t),O9r=r(GRe," (DistilBERT model)"),GRe.forEach(t),V9r=i(qe),v5=n(qe,"LI",{});var ORe=s(v5);a8e=n(ORe,"STRONG",{});var J4t=s(a8e);X9r=r(J4t,"electra"),J4t.forEach(t),z9r=r(ORe," \u2014 "),AJ=n(ORe,"A",{href:!0});var Y4t=s(AJ);W9r=r(Y4t,"FlaxElectraForQuestionAnswering"),Y4t.forEach(t),Q9r=r(ORe," (ELECTRA model)"),ORe.forEach(t),H9r=i(qe),F5=n(qe,"LI",{});var VRe=s(F5);n8e=n(VRe,"STRONG",{});var K4t=s(n8e);U9r=r(K4t,"mbart"),K4t.forEach(t),J9r=r(VRe," \u2014 "),yJ=n(VRe,"A",{href:!0});var Z4t=s(yJ);Y9r=r(Z4t,"FlaxMBartForQuestionAnswering"),Z4t.forEach(t),K9r=r(VRe," (mBART model)"),VRe.forEach(t),Z9r=i(qe),T5=n(qe,"LI",{});var XRe=s(T5);s8e=n(XRe,"STRONG",{});var eEt=s(s8e);e$r=r(eEt,"roberta"),eEt.forEach(t),o$r=r(XRe," \u2014 "),LJ=n(XRe,"A",{href:!0});var oEt=s(LJ);r$r=r(oEt,"FlaxRobertaForQuestionAnswering"),oEt.forEach(t),t$r=r(XRe," (RoBERTa model)"),XRe.forEach(t),a$r=i(qe),M5=n(qe,"LI",{});var zRe=s(M5);l8e=n(zRe,"STRONG",{});var rEt=s(l8e);n$r=r(rEt,"roformer"),rEt.forEach(t),s$r=r(zRe," \u2014 "),xJ=n(zRe,"A",{href:!0});var tEt=s(xJ);l$r=r(tEt,"FlaxRoFormerForQuestionAnswering"),tEt.forEach(t),i$r=r(zRe," (RoFormer model)"),zRe.forEach(t),d$r=i(qe),E5=n(qe,"LI",{});var WRe=s(E5);i8e=n(WRe,"STRONG",{});var aEt=s(i8e);c$r=r(aEt,"xlm-roberta"),aEt.forEach(t),f$r=r(WRe," \u2014 "),$J=n(WRe,"A",{href:!0});var nEt=s($J);m$r=r(nEt,"FlaxXLMRobertaForQuestionAnswering"),nEt.forEach(t),g$r=r(WRe," (XLM-RoBERTa model)"),WRe.forEach(t),qe.forEach(t),h$r=i(Wl),T(C5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),aIe=i(f),jc=n(f,"H2",{class:!0});var iNe=s(jc);w5=n(iNe,"A",{id:!0,class:!0,href:!0});var sEt=s(w5);d8e=n(sEt,"SPAN",{});var lEt=s(d8e);T(J7.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),p$r=i(iNe),c8e=n(iNe,"SPAN",{});var iEt=s(c8e);u$r=r(iEt,"FlaxAutoModelForTokenClassification"),iEt.forEach(t),iNe.forEach(t),nIe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(Y7.$$.fragment,Ql),_$r=i(Ql),Dc=n(Ql,"P",{});var WK=s(Dc);b$r=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kJ=n(WK,"A",{href:!0});var dEt=s(kJ);v$r=r(dEt,"from_pretrained()"),dEt.forEach(t),F$r=r(WK," class method or the "),SJ=n(WK,"A",{href:!0});var cEt=s(SJ);T$r=r(cEt,"from_config()"),cEt.forEach(t),M$r=r(WK,` class
method.`),WK.forEach(t),E$r=i(Ql),K7=n(Ql,"P",{});var dNe=s(K7);C$r=r(dNe,"This class cannot be instantiated directly using "),f8e=n(dNe,"CODE",{});var fEt=s(f8e);w$r=r(fEt,"__init__()"),fEt.forEach(t),A$r=r(dNe," (throws an error)."),dNe.forEach(t),y$r=i(Ql),Xt=n(Ql,"DIV",{class:!0});var dA=s(Xt);T(Z7.$$.fragment,dA),L$r=i(dA),m8e=n(dA,"P",{});var mEt=s(m8e);x$r=r(mEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mEt.forEach(t),$$r=i(dA),Gc=n(dA,"P",{});var QK=s(Gc);k$r=r(QK,`Note:
Loading a model from its configuration file does `),g8e=n(QK,"STRONG",{});var gEt=s(g8e);S$r=r(gEt,"not"),gEt.forEach(t),R$r=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(QK,"A",{href:!0});var hEt=s(RJ);B$r=r(hEt,"from_pretrained()"),hEt.forEach(t),P$r=r(QK," to load the model weights."),QK.forEach(t),I$r=i(dA),T(A5.$$.fragment,dA),dA.forEach(t),q$r=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(ex.$$.fragment,Hl),N$r=i(Hl),h8e=n(Hl,"P",{});var pEt=s(h8e);j$r=r(pEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pEt.forEach(t),D$r=i(Hl),pn=n(Hl,"P",{});var cA=s(pn);G$r=r(cA,"The model class to instantiate is selected based on the "),p8e=n(cA,"CODE",{});var uEt=s(p8e);O$r=r(uEt,"model_type"),uEt.forEach(t),V$r=r(cA,` property of the config object (either
passed as an argument or loaded from `),u8e=n(cA,"CODE",{});var _Et=s(u8e);X$r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),z$r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=n(cA,"CODE",{});var bEt=s(_8e);W$r=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),Q$r=r(cA,":"),cA.forEach(t),H$r=i(Hl),je=n(Hl,"UL",{});var bo=s(je);y5=n(bo,"LI",{});var QRe=s(y5);b8e=n(QRe,"STRONG",{});var vEt=s(b8e);U$r=r(vEt,"albert"),vEt.forEach(t),J$r=r(QRe," \u2014 "),BJ=n(QRe,"A",{href:!0});var FEt=s(BJ);Y$r=r(FEt,"FlaxAlbertForTokenClassification"),FEt.forEach(t),K$r=r(QRe," (ALBERT model)"),QRe.forEach(t),Z$r=i(bo),L5=n(bo,"LI",{});var HRe=s(L5);v8e=n(HRe,"STRONG",{});var TEt=s(v8e);ekr=r(TEt,"bert"),TEt.forEach(t),okr=r(HRe," \u2014 "),PJ=n(HRe,"A",{href:!0});var MEt=s(PJ);rkr=r(MEt,"FlaxBertForTokenClassification"),MEt.forEach(t),tkr=r(HRe," (BERT model)"),HRe.forEach(t),akr=i(bo),x5=n(bo,"LI",{});var URe=s(x5);F8e=n(URe,"STRONG",{});var EEt=s(F8e);nkr=r(EEt,"big_bird"),EEt.forEach(t),skr=r(URe," \u2014 "),IJ=n(URe,"A",{href:!0});var CEt=s(IJ);lkr=r(CEt,"FlaxBigBirdForTokenClassification"),CEt.forEach(t),ikr=r(URe," (BigBird model)"),URe.forEach(t),dkr=i(bo),$5=n(bo,"LI",{});var JRe=s($5);T8e=n(JRe,"STRONG",{});var wEt=s(T8e);ckr=r(wEt,"distilbert"),wEt.forEach(t),fkr=r(JRe," \u2014 "),qJ=n(JRe,"A",{href:!0});var AEt=s(qJ);mkr=r(AEt,"FlaxDistilBertForTokenClassification"),AEt.forEach(t),gkr=r(JRe," (DistilBERT model)"),JRe.forEach(t),hkr=i(bo),k5=n(bo,"LI",{});var YRe=s(k5);M8e=n(YRe,"STRONG",{});var yEt=s(M8e);pkr=r(yEt,"electra"),yEt.forEach(t),ukr=r(YRe," \u2014 "),NJ=n(YRe,"A",{href:!0});var LEt=s(NJ);_kr=r(LEt,"FlaxElectraForTokenClassification"),LEt.forEach(t),bkr=r(YRe," (ELECTRA model)"),YRe.forEach(t),vkr=i(bo),S5=n(bo,"LI",{});var KRe=s(S5);E8e=n(KRe,"STRONG",{});var xEt=s(E8e);Fkr=r(xEt,"roberta"),xEt.forEach(t),Tkr=r(KRe," \u2014 "),jJ=n(KRe,"A",{href:!0});var $Et=s(jJ);Mkr=r($Et,"FlaxRobertaForTokenClassification"),$Et.forEach(t),Ekr=r(KRe," (RoBERTa model)"),KRe.forEach(t),Ckr=i(bo),R5=n(bo,"LI",{});var ZRe=s(R5);C8e=n(ZRe,"STRONG",{});var kEt=s(C8e);wkr=r(kEt,"roformer"),kEt.forEach(t),Akr=r(ZRe," \u2014 "),DJ=n(ZRe,"A",{href:!0});var SEt=s(DJ);ykr=r(SEt,"FlaxRoFormerForTokenClassification"),SEt.forEach(t),Lkr=r(ZRe," (RoFormer model)"),ZRe.forEach(t),xkr=i(bo),B5=n(bo,"LI",{});var eBe=s(B5);w8e=n(eBe,"STRONG",{});var REt=s(w8e);$kr=r(REt,"xlm-roberta"),REt.forEach(t),kkr=r(eBe," \u2014 "),GJ=n(eBe,"A",{href:!0});var BEt=s(GJ);Skr=r(BEt,"FlaxXLMRobertaForTokenClassification"),BEt.forEach(t),Rkr=r(eBe," (XLM-RoBERTa model)"),eBe.forEach(t),bo.forEach(t),Bkr=i(Hl),T(P5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),sIe=i(f),Oc=n(f,"H2",{class:!0});var cNe=s(Oc);I5=n(cNe,"A",{id:!0,class:!0,href:!0});var PEt=s(I5);A8e=n(PEt,"SPAN",{});var IEt=s(A8e);T(ox.$$.fragment,IEt),IEt.forEach(t),PEt.forEach(t),Pkr=i(cNe),y8e=n(cNe,"SPAN",{});var qEt=s(y8e);Ikr=r(qEt,"FlaxAutoModelForMultipleChoice"),qEt.forEach(t),cNe.forEach(t),lIe=i(f),ur=n(f,"DIV",{class:!0});var Ul=s(ur);T(rx.$$.fragment,Ul),qkr=i(Ul),Vc=n(Ul,"P",{});var HK=s(Vc);Nkr=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OJ=n(HK,"A",{href:!0});var NEt=s(OJ);jkr=r(NEt,"from_pretrained()"),NEt.forEach(t),Dkr=r(HK," class method or the "),VJ=n(HK,"A",{href:!0});var jEt=s(VJ);Gkr=r(jEt,"from_config()"),jEt.forEach(t),Okr=r(HK,` class
method.`),HK.forEach(t),Vkr=i(Ul),tx=n(Ul,"P",{});var fNe=s(tx);Xkr=r(fNe,"This class cannot be instantiated directly using "),L8e=n(fNe,"CODE",{});var DEt=s(L8e);zkr=r(DEt,"__init__()"),DEt.forEach(t),Wkr=r(fNe," (throws an error)."),fNe.forEach(t),Qkr=i(Ul),zt=n(Ul,"DIV",{class:!0});var fA=s(zt);T(ax.$$.fragment,fA),Hkr=i(fA),x8e=n(fA,"P",{});var GEt=s(x8e);Ukr=r(GEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GEt.forEach(t),Jkr=i(fA),Xc=n(fA,"P",{});var UK=s(Xc);Ykr=r(UK,`Note:
Loading a model from its configuration file does `),$8e=n(UK,"STRONG",{});var OEt=s($8e);Kkr=r(OEt,"not"),OEt.forEach(t),Zkr=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(UK,"A",{href:!0});var VEt=s(XJ);eSr=r(VEt,"from_pretrained()"),VEt.forEach(t),oSr=r(UK," to load the model weights."),UK.forEach(t),rSr=i(fA),T(q5.$$.fragment,fA),fA.forEach(t),tSr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(nx.$$.fragment,Jl),aSr=i(Jl),k8e=n(Jl,"P",{});var XEt=s(k8e);nSr=r(XEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XEt.forEach(t),sSr=i(Jl),un=n(Jl,"P",{});var mA=s(un);lSr=r(mA,"The model class to instantiate is selected based on the "),S8e=n(mA,"CODE",{});var zEt=s(S8e);iSr=r(zEt,"model_type"),zEt.forEach(t),dSr=r(mA,` property of the config object (either
passed as an argument or loaded from `),R8e=n(mA,"CODE",{});var WEt=s(R8e);cSr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),fSr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B8e=n(mA,"CODE",{});var QEt=s(B8e);mSr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),gSr=r(mA,":"),mA.forEach(t),hSr=i(Jl),De=n(Jl,"UL",{});var vo=s(De);N5=n(vo,"LI",{});var oBe=s(N5);P8e=n(oBe,"STRONG",{});var HEt=s(P8e);pSr=r(HEt,"albert"),HEt.forEach(t),uSr=r(oBe," \u2014 "),zJ=n(oBe,"A",{href:!0});var UEt=s(zJ);_Sr=r(UEt,"FlaxAlbertForMultipleChoice"),UEt.forEach(t),bSr=r(oBe," (ALBERT model)"),oBe.forEach(t),vSr=i(vo),j5=n(vo,"LI",{});var rBe=s(j5);I8e=n(rBe,"STRONG",{});var JEt=s(I8e);FSr=r(JEt,"bert"),JEt.forEach(t),TSr=r(rBe," \u2014 "),WJ=n(rBe,"A",{href:!0});var YEt=s(WJ);MSr=r(YEt,"FlaxBertForMultipleChoice"),YEt.forEach(t),ESr=r(rBe," (BERT model)"),rBe.forEach(t),CSr=i(vo),D5=n(vo,"LI",{});var tBe=s(D5);q8e=n(tBe,"STRONG",{});var KEt=s(q8e);wSr=r(KEt,"big_bird"),KEt.forEach(t),ASr=r(tBe," \u2014 "),QJ=n(tBe,"A",{href:!0});var ZEt=s(QJ);ySr=r(ZEt,"FlaxBigBirdForMultipleChoice"),ZEt.forEach(t),LSr=r(tBe," (BigBird model)"),tBe.forEach(t),xSr=i(vo),G5=n(vo,"LI",{});var aBe=s(G5);N8e=n(aBe,"STRONG",{});var eCt=s(N8e);$Sr=r(eCt,"distilbert"),eCt.forEach(t),kSr=r(aBe," \u2014 "),HJ=n(aBe,"A",{href:!0});var oCt=s(HJ);SSr=r(oCt,"FlaxDistilBertForMultipleChoice"),oCt.forEach(t),RSr=r(aBe," (DistilBERT model)"),aBe.forEach(t),BSr=i(vo),O5=n(vo,"LI",{});var nBe=s(O5);j8e=n(nBe,"STRONG",{});var rCt=s(j8e);PSr=r(rCt,"electra"),rCt.forEach(t),ISr=r(nBe," \u2014 "),UJ=n(nBe,"A",{href:!0});var tCt=s(UJ);qSr=r(tCt,"FlaxElectraForMultipleChoice"),tCt.forEach(t),NSr=r(nBe," (ELECTRA model)"),nBe.forEach(t),jSr=i(vo),V5=n(vo,"LI",{});var sBe=s(V5);D8e=n(sBe,"STRONG",{});var aCt=s(D8e);DSr=r(aCt,"roberta"),aCt.forEach(t),GSr=r(sBe," \u2014 "),JJ=n(sBe,"A",{href:!0});var nCt=s(JJ);OSr=r(nCt,"FlaxRobertaForMultipleChoice"),nCt.forEach(t),VSr=r(sBe," (RoBERTa model)"),sBe.forEach(t),XSr=i(vo),X5=n(vo,"LI",{});var lBe=s(X5);G8e=n(lBe,"STRONG",{});var sCt=s(G8e);zSr=r(sCt,"roformer"),sCt.forEach(t),WSr=r(lBe," \u2014 "),YJ=n(lBe,"A",{href:!0});var lCt=s(YJ);QSr=r(lCt,"FlaxRoFormerForMultipleChoice"),lCt.forEach(t),HSr=r(lBe," (RoFormer model)"),lBe.forEach(t),USr=i(vo),z5=n(vo,"LI",{});var iBe=s(z5);O8e=n(iBe,"STRONG",{});var iCt=s(O8e);JSr=r(iCt,"xlm-roberta"),iCt.forEach(t),YSr=r(iBe," \u2014 "),KJ=n(iBe,"A",{href:!0});var dCt=s(KJ);KSr=r(dCt,"FlaxXLMRobertaForMultipleChoice"),dCt.forEach(t),ZSr=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),vo.forEach(t),eRr=i(Jl),T(W5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),iIe=i(f),zc=n(f,"H2",{class:!0});var mNe=s(zc);Q5=n(mNe,"A",{id:!0,class:!0,href:!0});var cCt=s(Q5);V8e=n(cCt,"SPAN",{});var fCt=s(V8e);T(sx.$$.fragment,fCt),fCt.forEach(t),cCt.forEach(t),oRr=i(mNe),X8e=n(mNe,"SPAN",{});var mCt=s(X8e);rRr=r(mCt,"FlaxAutoModelForNextSentencePrediction"),mCt.forEach(t),mNe.forEach(t),dIe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(lx.$$.fragment,Yl),tRr=i(Yl),Wc=n(Yl,"P",{});var JK=s(Wc);aRr=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZJ=n(JK,"A",{href:!0});var gCt=s(ZJ);nRr=r(gCt,"from_pretrained()"),gCt.forEach(t),sRr=r(JK," class method or the "),eY=n(JK,"A",{href:!0});var hCt=s(eY);lRr=r(hCt,"from_config()"),hCt.forEach(t),iRr=r(JK,` class
method.`),JK.forEach(t),dRr=i(Yl),ix=n(Yl,"P",{});var gNe=s(ix);cRr=r(gNe,"This class cannot be instantiated directly using "),z8e=n(gNe,"CODE",{});var pCt=s(z8e);fRr=r(pCt,"__init__()"),pCt.forEach(t),mRr=r(gNe," (throws an error)."),gNe.forEach(t),gRr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var gA=s(Wt);T(dx.$$.fragment,gA),hRr=i(gA),W8e=n(gA,"P",{});var uCt=s(W8e);pRr=r(uCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uCt.forEach(t),uRr=i(gA),Qc=n(gA,"P",{});var YK=s(Qc);_Rr=r(YK,`Note:
Loading a model from its configuration file does `),Q8e=n(YK,"STRONG",{});var _Ct=s(Q8e);bRr=r(_Ct,"not"),_Ct.forEach(t),vRr=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(YK,"A",{href:!0});var bCt=s(oY);FRr=r(bCt,"from_pretrained()"),bCt.forEach(t),TRr=r(YK," to load the model weights."),YK.forEach(t),MRr=i(gA),T(H5.$$.fragment,gA),gA.forEach(t),ERr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(cx.$$.fragment,Kl),CRr=i(Kl),H8e=n(Kl,"P",{});var vCt=s(H8e);wRr=r(vCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vCt.forEach(t),ARr=i(Kl),_n=n(Kl,"P",{});var hA=s(_n);yRr=r(hA,"The model class to instantiate is selected based on the "),U8e=n(hA,"CODE",{});var FCt=s(U8e);LRr=r(FCt,"model_type"),FCt.forEach(t),xRr=r(hA,` property of the config object (either
passed as an argument or loaded from `),J8e=n(hA,"CODE",{});var TCt=s(J8e);$Rr=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),kRr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=n(hA,"CODE",{});var MCt=s(Y8e);SRr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),RRr=r(hA,":"),hA.forEach(t),BRr=i(Kl),K8e=n(Kl,"UL",{});var ECt=s(K8e);U5=n(ECt,"LI",{});var dBe=s(U5);Z8e=n(dBe,"STRONG",{});var CCt=s(Z8e);PRr=r(CCt,"bert"),CCt.forEach(t),IRr=r(dBe," \u2014 "),rY=n(dBe,"A",{href:!0});var wCt=s(rY);qRr=r(wCt,"FlaxBertForNextSentencePrediction"),wCt.forEach(t),NRr=r(dBe," (BERT model)"),dBe.forEach(t),ECt.forEach(t),jRr=i(Kl),T(J5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),cIe=i(f),Hc=n(f,"H2",{class:!0});var hNe=s(Hc);Y5=n(hNe,"A",{id:!0,class:!0,href:!0});var ACt=s(Y5);eMe=n(ACt,"SPAN",{});var yCt=s(eMe);T(fx.$$.fragment,yCt),yCt.forEach(t),ACt.forEach(t),DRr=i(hNe),oMe=n(hNe,"SPAN",{});var LCt=s(oMe);GRr=r(LCt,"FlaxAutoModelForImageClassification"),LCt.forEach(t),hNe.forEach(t),fIe=i(f),br=n(f,"DIV",{class:!0});var Zl=s(br);T(mx.$$.fragment,Zl),ORr=i(Zl),Uc=n(Zl,"P",{});var KK=s(Uc);VRr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tY=n(KK,"A",{href:!0});var xCt=s(tY);XRr=r(xCt,"from_pretrained()"),xCt.forEach(t),zRr=r(KK," class method or the "),aY=n(KK,"A",{href:!0});var $Ct=s(aY);WRr=r($Ct,"from_config()"),$Ct.forEach(t),QRr=r(KK,` class
method.`),KK.forEach(t),HRr=i(Zl),gx=n(Zl,"P",{});var pNe=s(gx);URr=r(pNe,"This class cannot be instantiated directly using "),rMe=n(pNe,"CODE",{});var kCt=s(rMe);JRr=r(kCt,"__init__()"),kCt.forEach(t),YRr=r(pNe," (throws an error)."),pNe.forEach(t),KRr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var pA=s(Qt);T(hx.$$.fragment,pA),ZRr=i(pA),tMe=n(pA,"P",{});var SCt=s(tMe);eBr=r(SCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SCt.forEach(t),oBr=i(pA),Jc=n(pA,"P",{});var ZK=s(Jc);rBr=r(ZK,`Note:
Loading a model from its configuration file does `),aMe=n(ZK,"STRONG",{});var RCt=s(aMe);tBr=r(RCt,"not"),RCt.forEach(t),aBr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(ZK,"A",{href:!0});var BCt=s(nY);nBr=r(BCt,"from_pretrained()"),BCt.forEach(t),sBr=r(ZK," to load the model weights."),ZK.forEach(t),lBr=i(pA),T(K5.$$.fragment,pA),pA.forEach(t),iBr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(px.$$.fragment,ei),dBr=i(ei),nMe=n(ei,"P",{});var PCt=s(nMe);cBr=r(PCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PCt.forEach(t),fBr=i(ei),bn=n(ei,"P",{});var uA=s(bn);mBr=r(uA,"The model class to instantiate is selected based on the "),sMe=n(uA,"CODE",{});var ICt=s(sMe);gBr=r(ICt,"model_type"),ICt.forEach(t),hBr=r(uA,` property of the config object (either
passed as an argument or loaded from `),lMe=n(uA,"CODE",{});var qCt=s(lMe);pBr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),uBr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(uA,"CODE",{});var NCt=s(iMe);_Br=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),bBr=r(uA,":"),uA.forEach(t),vBr=i(ei),ux=n(ei,"UL",{});var uNe=s(ux);Z5=n(uNe,"LI",{});var cBe=s(Z5);dMe=n(cBe,"STRONG",{});var jCt=s(dMe);FBr=r(jCt,"beit"),jCt.forEach(t),TBr=r(cBe," \u2014 "),sY=n(cBe,"A",{href:!0});var DCt=s(sY);MBr=r(DCt,"FlaxBeitForImageClassification"),DCt.forEach(t),EBr=r(cBe," (BEiT model)"),cBe.forEach(t),CBr=i(uNe),e3=n(uNe,"LI",{});var fBe=s(e3);cMe=n(fBe,"STRONG",{});var GCt=s(cMe);wBr=r(GCt,"vit"),GCt.forEach(t),ABr=r(fBe," \u2014 "),lY=n(fBe,"A",{href:!0});var OCt=s(lY);yBr=r(OCt,"FlaxViTForImageClassification"),OCt.forEach(t),LBr=r(fBe," (ViT model)"),fBe.forEach(t),uNe.forEach(t),xBr=i(ei),T(o3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),mIe=i(f),Yc=n(f,"H2",{class:!0});var _Ne=s(Yc);r3=n(_Ne,"A",{id:!0,class:!0,href:!0});var VCt=s(r3);fMe=n(VCt,"SPAN",{});var XCt=s(fMe);T(_x.$$.fragment,XCt),XCt.forEach(t),VCt.forEach(t),$Br=i(_Ne),mMe=n(_Ne,"SPAN",{});var zCt=s(mMe);kBr=r(zCt,"FlaxAutoModelForVision2Seq"),zCt.forEach(t),_Ne.forEach(t),gIe=i(f),vr=n(f,"DIV",{class:!0});var oi=s(vr);T(bx.$$.fragment,oi),SBr=i(oi),Kc=n(oi,"P",{});var eZ=s(Kc);RBr=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iY=n(eZ,"A",{href:!0});var WCt=s(iY);BBr=r(WCt,"from_pretrained()"),WCt.forEach(t),PBr=r(eZ," class method or the "),dY=n(eZ,"A",{href:!0});var QCt=s(dY);IBr=r(QCt,"from_config()"),QCt.forEach(t),qBr=r(eZ,` class
method.`),eZ.forEach(t),NBr=i(oi),vx=n(oi,"P",{});var bNe=s(vx);jBr=r(bNe,"This class cannot be instantiated directly using "),gMe=n(bNe,"CODE",{});var HCt=s(gMe);DBr=r(HCt,"__init__()"),HCt.forEach(t),GBr=r(bNe," (throws an error)."),bNe.forEach(t),OBr=i(oi),Ht=n(oi,"DIV",{class:!0});var _A=s(Ht);T(Fx.$$.fragment,_A),VBr=i(_A),hMe=n(_A,"P",{});var UCt=s(hMe);XBr=r(UCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UCt.forEach(t),zBr=i(_A),Zc=n(_A,"P",{});var oZ=s(Zc);WBr=r(oZ,`Note:
Loading a model from its configuration file does `),pMe=n(oZ,"STRONG",{});var JCt=s(pMe);QBr=r(JCt,"not"),JCt.forEach(t),HBr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(oZ,"A",{href:!0});var YCt=s(cY);UBr=r(YCt,"from_pretrained()"),YCt.forEach(t),JBr=r(oZ," to load the model weights."),oZ.forEach(t),YBr=i(_A),T(t3.$$.fragment,_A),_A.forEach(t),KBr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(Tx.$$.fragment,ri),ZBr=i(ri),uMe=n(ri,"P",{});var KCt=s(uMe);ePr=r(KCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KCt.forEach(t),oPr=i(ri),vn=n(ri,"P",{});var bA=s(vn);rPr=r(bA,"The model class to instantiate is selected based on the "),_Me=n(bA,"CODE",{});var ZCt=s(_Me);tPr=r(ZCt,"model_type"),ZCt.forEach(t),aPr=r(bA,` property of the config object (either
passed as an argument or loaded from `),bMe=n(bA,"CODE",{});var e5t=s(bMe);nPr=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),sPr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(bA,"CODE",{});var o5t=s(vMe);lPr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),iPr=r(bA,":"),bA.forEach(t),dPr=i(ri),FMe=n(ri,"UL",{});var r5t=s(FMe);a3=n(r5t,"LI",{});var mBe=s(a3);TMe=n(mBe,"STRONG",{});var t5t=s(TMe);cPr=r(t5t,"vision-encoder-decoder"),t5t.forEach(t),fPr=r(mBe," \u2014 "),fY=n(mBe,"A",{href:!0});var a5t=s(fY);mPr=r(a5t,"FlaxVisionEncoderDecoderModel"),a5t.forEach(t),gPr=r(mBe," (Vision Encoder decoder model)"),mBe.forEach(t),r5t.forEach(t),hPr=i(ri),T(n3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(swt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Tn,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoConfig"),c(En,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoModel"),c(Cn,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoTokenizer"),c(di,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertModel"),c(lf,"id","extending-the-auto-classes"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#extending-the-auto-classes"),c(ci,"class","relative group"),c(cf,"id","transformers.AutoConfig"),c(cf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cf,"href","#transformers.AutoConfig"),c(fi,"class","relative group"),c(D9,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(G9,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertConfig"),c(O9,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig"),c(V9,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitConfig"),c(X9,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertConfig"),c(z9,"href","/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(W9,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Q9,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(H9,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(U9,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(J9,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertConfig"),c(Y9,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineConfig"),c(K9,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPConfig"),c(Z9,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertConfig"),c(e$,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextConfig"),c(o$,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLConfig"),c(r$,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(t$,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(a$,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(n$,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaConfig"),c(s$,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(l$,"href","/docs/transformers/pr_16812/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(i$,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTConfig"),c(d$,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrConfig"),c(c$,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertConfig"),c(f$,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRConfig"),c(m$,"href","/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTConfig"),c(g$,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraConfig"),c(h$,"href","/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(p$,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertConfig"),c(u$,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetConfig"),c(_$,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTConfig"),c(b$,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelConfig"),c(v$,"href","/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNConfig"),c(F$,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Config"),c(T$,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(M$,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJConfig"),c(E$,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertConfig"),c(C$,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertConfig"),c(w$,"href","/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(A$,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(y$,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(L$,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDConfig"),c(x$,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerConfig"),c($$,"href","/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeConfig"),c(k$,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertConfig"),c(S$,"href","/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Config"),c(R$,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianConfig"),c(B$,"href","/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(P$,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartConfig"),c(I$,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(q$,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(N$,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetConfig"),c(j$,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Config"),c(D$,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(G$,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(O$,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusConfig"),c(V$,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverConfig"),c(X$,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartConfig"),c(z$,"href","/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(W$,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Q$,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(H$,"href","/docs/transformers/pr_16812/en/model_doc/rag#transformers.RagConfig"),c(U$,"href","/docs/transformers/pr_16812/en/model_doc/realm#transformers.RealmConfig"),c(J$,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerConfig"),c(Y$,"href","/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetConfig"),c(K$,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertConfig"),c(Z$,"href","/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetConfig"),c(ek,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertConfig"),c(ok,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaConfig"),c(rk,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerConfig"),c(tk,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerConfig"),c(ak,"href","/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWConfig"),c(nk,"href","/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDConfig"),c(sk,"href","/docs/transformers/pr_16812/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(lk,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(ik,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(dk,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterConfig"),c(ck,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(fk,"href","/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinConfig"),c(mk,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Config"),c(gk,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasConfig"),c(hk,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartConfig"),c(pk,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(uk,"href","/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRConfig"),c(_k,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(bk,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(vk,"href","/docs/transformers/pr_16812/en/model_doc/van#transformers.VanConfig"),c(Fk,"href","/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltConfig"),c(Tk,"href","/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Mk,"href","/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Ek,"href","/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Ck,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTConfig"),c(wk,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Ak,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(yk,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(Lk,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMConfig"),c(xk,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMConfig"),c($k,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMConfig"),c(kk,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Sk,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Rk,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Bk,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetConfig"),c(Pk,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoConfig"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ig,"id","transformers.AutoTokenizer"),c(ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ig,"href","#transformers.AutoTokenizer"),c(gi,"class","relative group"),c(Ik,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(qk,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizer"),c(Nk,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(jk,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartTokenizer"),c(Dk,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartTokenizerFast"),c(Gk,"href","/docs/transformers/pr_16812/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Ok,"href","/docs/transformers/pr_16812/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Vk,"href","/docs/transformers/pr_16812/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Xk,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizer"),c(zk,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizerFast"),c(Wk,"href","/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Qk,"href","/docs/transformers/pr_16812/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Hk,"href","/docs/transformers/pr_16812/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Uk,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Jk,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Yk,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Kk,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Zk,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(eS,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(oS,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(rS,"href","/docs/transformers/pr_16812/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(tS,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertTokenizer"),c(aS,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(nS,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineTokenizer"),c(sS,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPTokenizer"),c(lS,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(iS,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(dS,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(cS,"href","/docs/transformers/pr_16812/en/model_doc/cpm#transformers.CpmTokenizer"),c(fS,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(mS,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gS,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hS,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaTokenizer"),c(pS,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(uS,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(_S,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(bS,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(vS,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(FS,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(TS,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(MS,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraTokenizer"),c(ES,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(CS,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(wS,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetTokenizer"),c(AS,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(yS,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(LS,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelTokenizer"),c(xS,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c($S,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kS,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SS,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RS,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BS,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PS,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(IS,"href","/docs/transformers/pr_16812/en/model_doc/herbert#transformers.HerbertTokenizer"),c(qS,"href","/docs/transformers/pr_16812/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(NS,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jS,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DS,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GS,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(OS,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(VS,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(XS,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(zS,"href","/docs/transformers/pr_16812/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(WS,"href","/docs/transformers/pr_16812/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(QS,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDTokenizer"),c(HS,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDTokenizerFast"),c(US,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerTokenizer"),c(JS,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(YS,"href","/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeTokenizer"),c(KS,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(ZS,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(eR,"href","/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(oR,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianTokenizer"),c(rR,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartTokenizer"),c(tR,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(aR,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(nR,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(sR,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizer"),c(lR,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizerFast"),c(iR,"href","/docs/transformers/pr_16812/en/model_doc/mluke#transformers.MLukeTokenizer"),c(dR,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(cR,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(fR,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(mR,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(gR,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.T5Tokenizer"),c(hR,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.T5TokenizerFast"),c(pR,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizer"),c(uR,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_R,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bR,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vR,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FR,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TR,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(MR,"href","/docs/transformers/pr_16812/en/model_doc/phobert#transformers.PhobertTokenizer"),c(ER,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartTokenizer"),c(CR,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(wR,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizer"),c(AR,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizerFast"),c(yR,"href","/docs/transformers/pr_16812/en/model_doc/rag#transformers.RagTokenizer"),c(LR,"href","/docs/transformers/pr_16812/en/model_doc/realm#transformers.RealmTokenizer"),c(xR,"href","/docs/transformers/pr_16812/en/model_doc/realm#transformers.RealmTokenizerFast"),c($R,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerTokenizer"),c(kR,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(SR,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertTokenizer"),c(RR,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(BR,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(PR,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(IR,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qR,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NR,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(jR,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(DR,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(GR,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(OR,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterTokenizer"),c(VR,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(XR,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(zR,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(WR,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.T5Tokenizer"),c(QR,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.T5TokenizerFast"),c(HR,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasTokenizer"),c(UR,"href","/docs/transformers/pr_16812/en/model_doc/tapex#transformers.TapexTokenizer"),c(JR,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(YR,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizer"),c(KR,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(rB,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMTokenizer"),c(tB,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(aB,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMTokenizer"),c(nB,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(sB,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(lB,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(iB,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dB,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(fB,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mB,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizer"),c(gB,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoFeatureExtractor"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoFeatureExtractor"),c(hi,"class","relative group"),c(hB,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(pB,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uB,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vB,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wB,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(AB,"href","/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(SB,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(RB,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(BB,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(NB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ph,"id","transformers.AutoProcessor"),c(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ph,"href","#transformers.AutoProcessor"),c(pi,"class","relative group"),c(jB,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(DB,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPProcessor"),c(GB,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(OB,"href","/docs/transformers/pr_16812/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(VB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zB,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(WB,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(QB,"href","/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRProcessor"),c(HB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltProcessor"),c(YB,"href","/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(KB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZB,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eP,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoModel"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoModel"),c(_i,"class","relative group"),c(oP,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rP,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tP,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aP,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertModel"),c(nP,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartModel"),c(sP,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitModel"),c(lP,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertModel"),c(iP,"href","/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(dP,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdModel"),c(cP,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(fP,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mP,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(gP,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertModel"),c(hP,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineModel"),c(pP,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.CLIPModel"),c(uP,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertModel"),c(_P,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextModel"),c(bP,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLModel"),c(vP,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(FP,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(TP,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(MP,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaModel"),c(EP,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(CP,"href","/docs/transformers/pr_16812/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(wP,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTModel"),c(AP,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrModel"),c(yP,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertModel"),c(LP,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(xP,"href","/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTModel"),c($P,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraModel"),c(kP,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertModel"),c(SP,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetModel"),c(RP,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTModel"),c(BP,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelModel"),c(PP,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelBaseModel"),c(IP,"href","/docs/transformers/pr_16812/en/model_doc/glpn#transformers.GLPNModel"),c(qP,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2Model"),c(NP,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(jP,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJModel"),c(DP,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertModel"),c(GP,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertModel"),c(OP,"href","/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(VP,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(XP,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zP,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDModel"),c(WP,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerModel"),c(QP,"href","/docs/transformers/pr_16812/en/model_doc/luke#transformers.LukeModel"),c(HP,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertModel"),c(UP,"href","/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100Model"),c(JP,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianModel"),c(YP,"href","/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerModel"),c(KP,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartModel"),c(ZP,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(eI,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertModel"),c(oI,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetModel"),c(rI,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5Model"),c(tI,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerModel"),c(aI,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(nI,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusModel"),c(sI,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverModel"),c(lI,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartModel"),c(iI,"href","/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerModel"),c(dI,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(cI,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertModel"),c(fI,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerModel"),c(mI,"href","/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetModel"),c(gI,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertModel"),c(hI,"href","/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetModel"),c(pI,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertModel"),c(uI,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaModel"),c(_I,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerModel"),c(bI,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerModel"),c(vI,"href","/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWModel"),c(FI,"href","/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDModel"),c(TI,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(MI,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterModel"),c(EI,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(CI,"href","/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinModel"),c(wI,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5Model"),c(AI,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasModel"),c(yI,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(LI,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xI,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($I,"href","/docs/transformers/pr_16812/en/model_doc/van#transformers.VanModel"),c(kI,"href","/docs/transformers/pr_16812/en/model_doc/vilt#transformers.ViltModel"),c(SI,"href","/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(RI,"href","/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertModel"),c(BI,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTModel"),c(PI,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(II,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qI,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(NI,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMModel"),c(jI,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMModel"),c(DI,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMModel"),c(GI,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(OI,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(VI,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(XI,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetModel"),c(zI,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cu,"id","transformers.AutoModelForPreTraining"),c(Cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cu,"href","#transformers.AutoModelForPreTraining"),c(Fi,"class","relative group"),c(WI,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QI,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HI,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UI,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForPreTraining"),c(JI,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YI,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForPreTraining"),c(KI,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(ZI,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eq,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oq,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rq,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tq,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aq,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nq,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForPreTraining"),c(sq,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lq,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForPreTraining"),c(iq,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dq,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(cq,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fq,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mq,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gq,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hq,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(pq,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(uq,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(_q,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bq,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(vq,"href","/docs/transformers/pr_16812/en/model_doc/retribert#transformers.RetriBertModel"),c(Fq,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Tq,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Mq,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Eq,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Cq,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wq,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Aq,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(yq,"href","/docs/transformers/pr_16812/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Lq,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xq,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($q,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(kq,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Sq,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Rq,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Bq,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h_,"id","transformers.AutoModelForCausalLM"),c(h_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h_,"href","#transformers.AutoModelForCausalLM"),c(Ei,"class","relative group"),c(Pq,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iq,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qq,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nq,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForCausalLM"),c(jq,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertLMHeadModel"),c(Dq,"href","/docs/transformers/pr_16812/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Gq,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Oq,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Vq,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Xq,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zq,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Wq,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Qq,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Hq,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Uq,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Jq,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Yq,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Kq,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianForCausalLM"),c(Zq,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForCausalLM"),c(eN,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(oN,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rN,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(tN,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(aN,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(nN,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(sN,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(lN,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(iN,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(dN,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(cN,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(fN,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mN,"href","/docs/transformers/pr_16812/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(gN,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(hN,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pN,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(uN,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(_N,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(bN,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z_,"id","transformers.AutoModelForMaskedLM"),c(Z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z_,"href","#transformers.AutoModelForMaskedLM"),c(Ai,"class","relative group"),c(vN,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FN,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TN,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MN,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(EN,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CN,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForMaskedLM"),c(wN,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(AN,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(yN,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(LN,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(xN,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c($N,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(kN,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(RN,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(BN,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(PN,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(IN,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(NN,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(jN,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(DN,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(GN,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ON,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(VN,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(XN,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(zN,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(WN,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(QN,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(UN,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(JN,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(YN,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(KN,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ZN,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ej,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(oj,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N1,"id","transformers.AutoModelForSeq2SeqLM"),c(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N1,"href","#transformers.AutoModelForSeq2SeqLM"),c(xi,"class","relative group"),c(rj,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tj,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aj,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nj,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(cj,"href","/docs/transformers/pr_16812/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_16812/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.MarianMTModel"),c(hj,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(uj,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_16812/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_16812/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n2,"id","transformers.AutoModelForSequenceClassification"),c(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n2,"href","#transformers.AutoModelForSequenceClassification"),c(Si,"class","relative group"),c(Mj,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c($j,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16812/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rb,"id","transformers.AutoModelForMultipleChoice"),c(rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rb,"href","#transformers.AutoModelForMultipleChoice"),c(Pi,"class","relative group"),c(bD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TD,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c($D,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(PD,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(ID,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(qD,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(ND,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(jD,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(DD,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(GD,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(OD,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(VD,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(XD,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(zD,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(WD,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(QD,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(HD,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bb,"id","transformers.AutoModelForNextSentencePrediction"),c(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ni,"class","relative group"),c(UD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YD,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KD,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(ZD,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(eG,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(oG,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(rG,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForTokenClassification"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForTokenClassification"),c(Gi,"class","relative group"),c(tG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sG,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(lG,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForTokenClassification"),c(iG,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(dG,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(cG,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForTokenClassification"),c(fG,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(mG,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(gG,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(hG,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(pG,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(uG,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(_G,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(bG,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(vG,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(FG,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(TG,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(MG,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(EG,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(CG,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(wG,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(AG,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(yG,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(LG,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xG,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($G,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kG,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(SG,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(RG,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(BG,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(PG,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(IG,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(qG,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(NG,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForQuestionAnswering"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForQuestionAnswering"),c(Xi,"class","relative group"),c(jG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GG,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OG,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16812/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16812/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rO,"href","/docs/transformers/pr_16812/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16812/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16812/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16812/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_16812/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_16812/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_16812/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16812/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16812/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(EO,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AO,"href","/docs/transformers/pr_16812/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForTableQuestionAnswering"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Qi,"class","relative group"),c(yO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($O,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForImageClassification"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForImageClassification"),c(Ji,"class","relative group"),c(kO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BO,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitForImageClassification"),c(PO,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(IO,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(qO,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForImageClassification"),c(NO,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jO,"href","/docs/transformers/pr_16812/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DO,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(GO,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(OO,"href","/docs/transformers/pr_16812/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(VO,"href","/docs/transformers/pr_16812/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(XO,"href","/docs/transformers/pr_16812/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(zO,"href","/docs/transformers/pr_16812/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(WO,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(QO,"href","/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinForImageClassification"),c(HO,"href","/docs/transformers/pr_16812/en/model_doc/van#transformers.VanForImageClassification"),c(UO,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForVision2Seq"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForVision2Seq"),c(Zi,"class","relative group"),c(JO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KO,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZO,"href","/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForAudioClassification"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForAudioClassification"),c(rd,"class","relative group"),c(eV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tV,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(aV,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(nV,"href","/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(sV,"href","/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(lV,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(iV,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(dV,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(cV,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(fV,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForAudioFrameClassification"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForAudioFrameClassification"),c(nd,"class","relative group"),c(mV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(uV,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(_V,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(bV,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(vV,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i6,"id","transformers.AutoModelForCTC"),c(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i6,"href","#transformers.AutoModelForCTC"),c(id,"class","relative group"),c(FV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(CV,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.HubertForCTC"),c(wV,"href","/docs/transformers/pr_16812/en/model_doc/sew#transformers.SEWForCTC"),c(AV,"href","/docs/transformers/pr_16812/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yV,"href","/docs/transformers/pr_16812/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LV,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(xV,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c($V,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(kV,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(T6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(fd,"class","relative group"),c(SV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_16812/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(IV,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y6,"id","transformers.AutoModelForAudioXVector"),c(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y6,"href","#transformers.AutoModelForAudioXVector"),c(hd,"class","relative group"),c(qV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(GV,"href","/docs/transformers/pr_16812/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(OV,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(VV,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(XV,"href","/docs/transformers/pr_16812/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.AutoModelForMaskedImageModeling"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.AutoModelForMaskedImageModeling"),c(_d,"class","relative group"),c(zV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HV,"href","/docs/transformers/pr_16812/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(UV,"href","/docs/transformers/pr_16812/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(JV,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V6,"id","transformers.AutoModelForObjectDetection"),c(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V6,"href","#transformers.AutoModelForObjectDetection"),c(Td,"class","relative group"),c(YV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H6,"id","transformers.AutoModelForImageSegmentation"),c(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H6,"href","#transformers.AutoModelForImageSegmentation"),c(Cd,"class","relative group"),c(oX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_16812/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z6,"id","transformers.AutoModelForSemanticSegmentation"),c(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z6,"href","#transformers.AutoModelForSemanticSegmentation"),c(yd,"class","relative group"),c(nX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(dX,"href","/docs/transformers/pr_16812/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(cX,"href","/docs/transformers/pr_16812/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(fX,"href","/docs/transformers/pr_16812/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.AutoModelForInstanceSegmentation"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForInstanceSegmentation"),c($d,"class","relative group"),c(mX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_16812/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.TFAutoModel"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.TFAutoModel"),c(Rd,"class","relative group"),c(uX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertModel"),c(FX,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartModel"),c(TX,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertModel"),c(MX,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(EX,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(CX,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertModel"),c(wX,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.TFCLIPModel"),c(AX,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertModel"),c(yX,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.TFConvNextModel"),c(LX,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLModel"),c(xX,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaModel"),c($X,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kX,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(SX,"href","/docs/transformers/pr_16812/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(RX,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraModel"),c(BX,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(PX,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelModel"),c(IX,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qX,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2Model"),c(NX,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJModel"),c(jX,"href","/docs/transformers/pr_16812/en/model_doc/hubert#transformers.TFHubertModel"),c(DX,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(GX,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.TFLEDModel"),c(OX,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerModel"),c(VX,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.TFLxmertModel"),c(XX,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.TFMarianModel"),c(zX,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.TFMBartModel"),c(WX,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(QX,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetModel"),c(HX,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.TFMT5Model"),c(UX,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(JX,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.TFPegasusModel"),c(YX,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertModel"),c(KX,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZX,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerModel"),c(ez,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(oz,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5Model"),c(rz,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasModel"),c(tz,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(az,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.TFViTModel"),c(nz,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(sz,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(lz,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMModel"),c(iz,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(dz,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a8,"id","transformers.TFAutoModelForPreTraining"),c(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a8,"href","#transformers.TFAutoModelForPreTraining"),c(Id,"class","relative group"),c(cz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(hz,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(pz,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForPreTraining"),c(uz,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_z,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(bz,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vz,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Fz,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Tz,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Mz,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Ez,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Cz,"href","/docs/transformers/pr_16812/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(wz,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Az,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(yz,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Lz,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xz,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($z,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kz,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Sz,"href","/docs/transformers/pr_16812/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Rz,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Bz,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Pz,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($8,"id","transformers.TFAutoModelForCausalLM"),c($8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($8,"href","#transformers.TFAutoModelForCausalLM"),c(jd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Dz,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Gz,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Oz,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Vz,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Xz,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zz,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Wz,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Qz,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Hz,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Uz,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Jz,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z8,"id","transformers.TFAutoModelForImageClassification"),c(z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z8,"href","#transformers.TFAutoModelForImageClassification"),c(Od,"class","relative group"),c(Yz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_16812/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(oW,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J8,"id","transformers.TFAutoModelForMaskedLM"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.TFAutoModelForMaskedLM"),c(zd,"class","relative group"),c(rW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(sW,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(lW,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iW,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(dW,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(cW,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(fW,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mW,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(gW,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hW,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(pW,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uW,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(_W,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(bW,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(vW,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(FW,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(TW,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(MW,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(EW,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CW,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Hd,"class","relative group"),c(wW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xW,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c($W,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(kW,"href","/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(SW,"href","/docs/transformers/pr_16812/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(RW,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.TFMarianMTModel"),c(BW,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(PW,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(IW,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(qW,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.TFAutoModelForSequenceClassification"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Yd,"class","relative group"),c(NW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(OW,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(VW,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(XW,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(zW,"href","/docs/transformers/pr_16812/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(WW,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(QW,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(HW,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(JW,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(YW,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(KW,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(eQ,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(oQ,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(rQ,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(tQ,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(aQ,"href","/docs/transformers/pr_16812/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(nQ,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(sQ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(lQ,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(iQ,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(dQ,"href","/docs/transformers/pr_16812/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(cQ,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(fQ,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(mQ,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l4,"id","transformers.TFAutoModelForMultipleChoice"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.TFAutoModelForMultipleChoice"),c(ec,"class","relative group"),c(gQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(_Q,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(bQ,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(vQ,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(FQ,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(TQ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(MQ,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(EQ,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(CQ,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(wQ,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(AQ,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(yQ,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(LQ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(xQ,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c($Q,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(kQ,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(SQ,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(tc,"class","relative group"),c(RQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IQ,"href","/docs/transformers/pr_16812/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.TFAutoModelForTokenClassification"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.TFAutoModelForTokenClassification"),c(sc,"class","relative group"),c(qQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jQ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DQ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(GQ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(OQ,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(VQ,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(XQ,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(zQ,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(WQ,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(QQ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(HQ,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(UQ,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(JQ,"href","/docs/transformers/pr_16812/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(YQ,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(KQ,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(eH,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(oH,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(rH,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(tH,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(aH,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(nH,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForQuestionAnswering"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(dc,"class","relative group"),c(sH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_16812/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_16812/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_16812/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_16812/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_16812/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(bH,"href","/docs/transformers/pr_16812/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_16812/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_16812/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_16812/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_16812/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_16812/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(yH,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_16812/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForVision2Seq"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForVision2Seq"),c(mc,"class","relative group"),c(xH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(pc,"class","relative group"),c(RH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_16812/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.FlaxAutoModel"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.FlaxAutoModel"),c(bc,"class","relative group"),c(qH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertModel"),c(GH,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartModel"),c(OH,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.FlaxBeitModel"),c(VH,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertModel"),c(XH,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(zH,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(WH,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(QH,"href","/docs/transformers/pr_16812/en/model_doc/clip#transformers.FlaxCLIPModel"),c(HH,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(UH,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraModel"),c(JH,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(YH,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(KH,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ZH,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.FlaxMarianModel"),c(eU,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartModel"),c(oU,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5Model"),c(rU,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(tU,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(aU,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(nU,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5Model"),c(sU,"href","/docs/transformers/pr_16812/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(lU,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.FlaxViTModel"),c(iU,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(dU,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(cU,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.FlaxAutoModelForCausalLM"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Tc,"class","relative group"),c(fU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(pU,"href","/docs/transformers/pr_16812/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(uU,"href","/docs/transformers/pr_16812/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(_U,"href","/docs/transformers/pr_16812/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(bU,"href","/docs/transformers/pr_16812/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.FlaxAutoModelForPreTraining"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Cc,"class","relative group"),c(vU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(EU,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CU,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(wU,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(AU,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(yU,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LU,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xU,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c($U,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(kU,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(SU,"href","/docs/transformers/pr_16812/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(RU,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.FlaxAutoModelForMaskedLM"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(yc,"class","relative group"),c(BU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(NU,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(DU,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(GU,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(OU,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(VU,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XU,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(zU,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WU,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c($c,"class","relative group"),c(QU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YU,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(KU,"href","/docs/transformers/pr_16812/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(ZU,"href","/docs/transformers/pr_16812/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(eJ,"href","/docs/transformers/pr_16812/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(oJ,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rJ,"href","/docs/transformers/pr_16812/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_16812/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_16812/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Rc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(dJ,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(cJ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(fJ,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(mJ,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(_J,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Ic,"class","relative group"),c(bJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_16812/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_16812/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c($J,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.FlaxAutoModelForTokenClassification"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(jc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(PJ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(IJ,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(qJ,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(NJ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(jJ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(DJ,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(GJ,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(I5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Oc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_16812/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_16812/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_16812/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_16812/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_16812/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_16812/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_16812/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(zc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_16812/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.FlaxAutoModelForImageClassification"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.FlaxAutoModelForImageClassification"),c(Hc,"class","relative group"),c(tY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_16812/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(lY,"href","/docs/transformers/pr_16812/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.FlaxAutoModelForVision2Seq"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Yc,"class","relative group"),c(iY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_16812/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_16812/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Fo),e(Fo,ti),b(f,tf,_),b(f,Zr,_),e(Zr,ai),e(Zr,ni),e(ni,vA),e(Zr,af),b(f,Ne,_),b(f,Xe,_),e(Xe,si),e(Xe,Tn),e(Tn,FA),e(Xe,Mn),e(Xe,En),e(En,TA),e(Xe,li),e(Xe,Cn),e(Cn,MA),e(Xe,ii),b(f,nf,_),M(Fa,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,B9),e(Ae,di),e(di,P9),e(Ae,I9),b(f,To,_),b(f,Ta,_),e(Ta,q9),e(Ta,sf),e(sf,N9),e(Ta,vNe),b(f,gBe,_),b(f,ci,_),e(ci,lf),e(lf,rZ),M(EA,rZ,null),e(ci,FNe),e(ci,tZ),e(tZ,TNe),b(f,hBe,_),b(f,wn,_),e(wn,MNe),e(wn,aZ),e(aZ,ENe),e(wn,CNe),e(wn,nZ),e(nZ,wNe),e(wn,ANe),b(f,pBe,_),M(CA,f,_),b(f,uBe,_),b(f,j9,_),e(j9,yNe),b(f,_Be,_),M(df,f,_),b(f,bBe,_),b(f,fi,_),e(fi,cf),e(cf,sZ),M(wA,sZ,null),e(fi,LNe),e(fi,lZ),e(lZ,xNe),b(f,vBe,_),b(f,Mo,_),M(AA,Mo,null),e(Mo,$Ne),e(Mo,yA),e(yA,kNe),e(yA,D9),e(D9,SNe),e(yA,RNe),e(Mo,BNe),e(Mo,LA),e(LA,PNe),e(LA,iZ),e(iZ,INe),e(LA,qNe),e(Mo,NNe),e(Mo,Fr),M(xA,Fr,null),e(Fr,jNe),e(Fr,dZ),e(dZ,DNe),e(Fr,GNe),e(Fr,mi),e(mi,ONe),e(mi,cZ),e(cZ,VNe),e(mi,XNe),e(mi,fZ),e(fZ,zNe),e(mi,WNe),e(Fr,QNe),e(Fr,A),e(A,ff),e(ff,mZ),e(mZ,HNe),e(ff,UNe),e(ff,G9),e(G9,JNe),e(ff,YNe),e(A,KNe),e(A,mf),e(mf,gZ),e(gZ,ZNe),e(mf,eje),e(mf,O9),e(O9,oje),e(mf,rje),e(A,tje),e(A,gf),e(gf,hZ),e(hZ,aje),e(gf,nje),e(gf,V9),e(V9,sje),e(gf,lje),e(A,ije),e(A,hf),e(hf,pZ),e(pZ,dje),e(hf,cje),e(hf,X9),e(X9,fje),e(hf,mje),e(A,gje),e(A,pf),e(pf,uZ),e(uZ,hje),e(pf,pje),e(pf,z9),e(z9,uje),e(pf,_je),e(A,bje),e(A,uf),e(uf,_Z),e(_Z,vje),e(uf,Fje),e(uf,W9),e(W9,Tje),e(uf,Mje),e(A,Eje),e(A,_f),e(_f,bZ),e(bZ,Cje),e(_f,wje),e(_f,Q9),e(Q9,Aje),e(_f,yje),e(A,Lje),e(A,bf),e(bf,vZ),e(vZ,xje),e(bf,$je),e(bf,H9),e(H9,kje),e(bf,Sje),e(A,Rje),e(A,vf),e(vf,FZ),e(FZ,Bje),e(vf,Pje),e(vf,U9),e(U9,Ije),e(vf,qje),e(A,Nje),e(A,Ff),e(Ff,TZ),e(TZ,jje),e(Ff,Dje),e(Ff,J9),e(J9,Gje),e(Ff,Oje),e(A,Vje),e(A,Tf),e(Tf,MZ),e(MZ,Xje),e(Tf,zje),e(Tf,Y9),e(Y9,Wje),e(Tf,Qje),e(A,Hje),e(A,Mf),e(Mf,EZ),e(EZ,Uje),e(Mf,Jje),e(Mf,K9),e(K9,Yje),e(Mf,Kje),e(A,Zje),e(A,Ef),e(Ef,CZ),e(CZ,eDe),e(Ef,oDe),e(Ef,Z9),e(Z9,rDe),e(Ef,tDe),e(A,aDe),e(A,Cf),e(Cf,wZ),e(wZ,nDe),e(Cf,sDe),e(Cf,e$),e(e$,lDe),e(Cf,iDe),e(A,dDe),e(A,wf),e(wf,AZ),e(AZ,cDe),e(wf,fDe),e(wf,o$),e(o$,mDe),e(wf,gDe),e(A,hDe),e(A,Af),e(Af,yZ),e(yZ,pDe),e(Af,uDe),e(Af,r$),e(r$,_De),e(Af,bDe),e(A,vDe),e(A,yf),e(yf,LZ),e(LZ,FDe),e(yf,TDe),e(yf,t$),e(t$,MDe),e(yf,EDe),e(A,CDe),e(A,Lf),e(Lf,xZ),e(xZ,wDe),e(Lf,ADe),e(Lf,a$),e(a$,yDe),e(Lf,LDe),e(A,xDe),e(A,xf),e(xf,$Z),e($Z,$De),e(xf,kDe),e(xf,n$),e(n$,SDe),e(xf,RDe),e(A,BDe),e(A,$f),e($f,kZ),e(kZ,PDe),e($f,IDe),e($f,s$),e(s$,qDe),e($f,NDe),e(A,jDe),e(A,kf),e(kf,SZ),e(SZ,DDe),e(kf,GDe),e(kf,l$),e(l$,ODe),e(kf,VDe),e(A,XDe),e(A,Sf),e(Sf,RZ),e(RZ,zDe),e(Sf,WDe),e(Sf,i$),e(i$,QDe),e(Sf,HDe),e(A,UDe),e(A,Rf),e(Rf,BZ),e(BZ,JDe),e(Rf,YDe),e(Rf,d$),e(d$,KDe),e(Rf,ZDe),e(A,eGe),e(A,Bf),e(Bf,PZ),e(PZ,oGe),e(Bf,rGe),e(Bf,c$),e(c$,tGe),e(Bf,aGe),e(A,nGe),e(A,Pf),e(Pf,IZ),e(IZ,sGe),e(Pf,lGe),e(Pf,f$),e(f$,iGe),e(Pf,dGe),e(A,cGe),e(A,If),e(If,qZ),e(qZ,fGe),e(If,mGe),e(If,m$),e(m$,gGe),e(If,hGe),e(A,pGe),e(A,qf),e(qf,NZ),e(NZ,uGe),e(qf,_Ge),e(qf,g$),e(g$,bGe),e(qf,vGe),e(A,FGe),e(A,Nf),e(Nf,jZ),e(jZ,TGe),e(Nf,MGe),e(Nf,h$),e(h$,EGe),e(Nf,CGe),e(A,wGe),e(A,jf),e(jf,DZ),e(DZ,AGe),e(jf,yGe),e(jf,p$),e(p$,LGe),e(jf,xGe),e(A,$Ge),e(A,Df),e(Df,GZ),e(GZ,kGe),e(Df,SGe),e(Df,u$),e(u$,RGe),e(Df,BGe),e(A,PGe),e(A,Gf),e(Gf,OZ),e(OZ,IGe),e(Gf,qGe),e(Gf,_$),e(_$,NGe),e(Gf,jGe),e(A,DGe),e(A,Of),e(Of,VZ),e(VZ,GGe),e(Of,OGe),e(Of,b$),e(b$,VGe),e(Of,XGe),e(A,zGe),e(A,Vf),e(Vf,XZ),e(XZ,WGe),e(Vf,QGe),e(Vf,v$),e(v$,HGe),e(Vf,UGe),e(A,JGe),e(A,Xf),e(Xf,zZ),e(zZ,YGe),e(Xf,KGe),e(Xf,F$),e(F$,ZGe),e(Xf,eOe),e(A,oOe),e(A,zf),e(zf,WZ),e(WZ,rOe),e(zf,tOe),e(zf,T$),e(T$,aOe),e(zf,nOe),e(A,sOe),e(A,Wf),e(Wf,QZ),e(QZ,lOe),e(Wf,iOe),e(Wf,M$),e(M$,dOe),e(Wf,cOe),e(A,fOe),e(A,Qf),e(Qf,HZ),e(HZ,mOe),e(Qf,gOe),e(Qf,E$),e(E$,hOe),e(Qf,pOe),e(A,uOe),e(A,Hf),e(Hf,UZ),e(UZ,_Oe),e(Hf,bOe),e(Hf,C$),e(C$,vOe),e(Hf,FOe),e(A,TOe),e(A,Uf),e(Uf,JZ),e(JZ,MOe),e(Uf,EOe),e(Uf,w$),e(w$,COe),e(Uf,wOe),e(A,AOe),e(A,Jf),e(Jf,YZ),e(YZ,yOe),e(Jf,LOe),e(Jf,A$),e(A$,xOe),e(Jf,$Oe),e(A,kOe),e(A,Yf),e(Yf,KZ),e(KZ,SOe),e(Yf,ROe),e(Yf,y$),e(y$,BOe),e(Yf,POe),e(A,IOe),e(A,Kf),e(Kf,ZZ),e(ZZ,qOe),e(Kf,NOe),e(Kf,L$),e(L$,jOe),e(Kf,DOe),e(A,GOe),e(A,Zf),e(Zf,eee),e(eee,OOe),e(Zf,VOe),e(Zf,x$),e(x$,XOe),e(Zf,zOe),e(A,WOe),e(A,em),e(em,oee),e(oee,QOe),e(em,HOe),e(em,$$),e($$,UOe),e(em,JOe),e(A,YOe),e(A,om),e(om,ree),e(ree,KOe),e(om,ZOe),e(om,k$),e(k$,eVe),e(om,oVe),e(A,rVe),e(A,rm),e(rm,tee),e(tee,tVe),e(rm,aVe),e(rm,S$),e(S$,nVe),e(rm,sVe),e(A,lVe),e(A,tm),e(tm,aee),e(aee,iVe),e(tm,dVe),e(tm,R$),e(R$,cVe),e(tm,fVe),e(A,mVe),e(A,am),e(am,nee),e(nee,gVe),e(am,hVe),e(am,B$),e(B$,pVe),e(am,uVe),e(A,_Ve),e(A,nm),e(nm,see),e(see,bVe),e(nm,vVe),e(nm,P$),e(P$,FVe),e(nm,TVe),e(A,MVe),e(A,sm),e(sm,lee),e(lee,EVe),e(sm,CVe),e(sm,I$),e(I$,wVe),e(sm,AVe),e(A,yVe),e(A,lm),e(lm,iee),e(iee,LVe),e(lm,xVe),e(lm,q$),e(q$,$Ve),e(lm,kVe),e(A,SVe),e(A,im),e(im,dee),e(dee,RVe),e(im,BVe),e(im,N$),e(N$,PVe),e(im,IVe),e(A,qVe),e(A,dm),e(dm,cee),e(cee,NVe),e(dm,jVe),e(dm,j$),e(j$,DVe),e(dm,GVe),e(A,OVe),e(A,cm),e(cm,fee),e(fee,VVe),e(cm,XVe),e(cm,D$),e(D$,zVe),e(cm,WVe),e(A,QVe),e(A,fm),e(fm,mee),e(mee,HVe),e(fm,UVe),e(fm,G$),e(G$,JVe),e(fm,YVe),e(A,KVe),e(A,mm),e(mm,gee),e(gee,ZVe),e(mm,eXe),e(mm,O$),e(O$,oXe),e(mm,rXe),e(A,tXe),e(A,gm),e(gm,hee),e(hee,aXe),e(gm,nXe),e(gm,V$),e(V$,sXe),e(gm,lXe),e(A,iXe),e(A,hm),e(hm,pee),e(pee,dXe),e(hm,cXe),e(hm,X$),e(X$,fXe),e(hm,mXe),e(A,gXe),e(A,pm),e(pm,uee),e(uee,hXe),e(pm,pXe),e(pm,z$),e(z$,uXe),e(pm,_Xe),e(A,bXe),e(A,um),e(um,_ee),e(_ee,vXe),e(um,FXe),e(um,W$),e(W$,TXe),e(um,MXe),e(A,EXe),e(A,_m),e(_m,bee),e(bee,CXe),e(_m,wXe),e(_m,Q$),e(Q$,AXe),e(_m,yXe),e(A,LXe),e(A,bm),e(bm,vee),e(vee,xXe),e(bm,$Xe),e(bm,H$),e(H$,kXe),e(bm,SXe),e(A,RXe),e(A,vm),e(vm,Fee),e(Fee,BXe),e(vm,PXe),e(vm,U$),e(U$,IXe),e(vm,qXe),e(A,NXe),e(A,Fm),e(Fm,Tee),e(Tee,jXe),e(Fm,DXe),e(Fm,J$),e(J$,GXe),e(Fm,OXe),e(A,VXe),e(A,Tm),e(Tm,Mee),e(Mee,XXe),e(Tm,zXe),e(Tm,Y$),e(Y$,WXe),e(Tm,QXe),e(A,HXe),e(A,Mm),e(Mm,Eee),e(Eee,UXe),e(Mm,JXe),e(Mm,K$),e(K$,YXe),e(Mm,KXe),e(A,ZXe),e(A,Em),e(Em,Cee),e(Cee,eze),e(Em,oze),e(Em,Z$),e(Z$,rze),e(Em,tze),e(A,aze),e(A,Cm),e(Cm,wee),e(wee,nze),e(Cm,sze),e(Cm,ek),e(ek,lze),e(Cm,ize),e(A,dze),e(A,wm),e(wm,Aee),e(Aee,cze),e(wm,fze),e(wm,ok),e(ok,mze),e(wm,gze),e(A,hze),e(A,Am),e(Am,yee),e(yee,pze),e(Am,uze),e(Am,rk),e(rk,_ze),e(Am,bze),e(A,vze),e(A,ym),e(ym,Lee),e(Lee,Fze),e(ym,Tze),e(ym,tk),e(tk,Mze),e(ym,Eze),e(A,Cze),e(A,Lm),e(Lm,xee),e(xee,wze),e(Lm,Aze),e(Lm,ak),e(ak,yze),e(Lm,Lze),e(A,xze),e(A,xm),e(xm,$ee),e($ee,$ze),e(xm,kze),e(xm,nk),e(nk,Sze),e(xm,Rze),e(A,Bze),e(A,$m),e($m,kee),e(kee,Pze),e($m,Ize),e($m,sk),e(sk,qze),e($m,Nze),e(A,jze),e(A,km),e(km,See),e(See,Dze),e(km,Gze),e(km,lk),e(lk,Oze),e(km,Vze),e(A,Xze),e(A,Sm),e(Sm,Ree),e(Ree,zze),e(Sm,Wze),e(Sm,ik),e(ik,Qze),e(Sm,Hze),e(A,Uze),e(A,Rm),e(Rm,Bee),e(Bee,Jze),e(Rm,Yze),e(Rm,dk),e(dk,Kze),e(Rm,Zze),e(A,eWe),e(A,Bm),e(Bm,Pee),e(Pee,oWe),e(Bm,rWe),e(Bm,ck),e(ck,tWe),e(Bm,aWe),e(A,nWe),e(A,Pm),e(Pm,Iee),e(Iee,sWe),e(Pm,lWe),e(Pm,fk),e(fk,iWe),e(Pm,dWe),e(A,cWe),e(A,Im),e(Im,qee),e(qee,fWe),e(Im,mWe),e(Im,mk),e(mk,gWe),e(Im,hWe),e(A,pWe),e(A,qm),e(qm,Nee),e(Nee,uWe),e(qm,_We),e(qm,gk),e(gk,bWe),e(qm,vWe),e(A,FWe),e(A,Nm),e(Nm,jee),e(jee,TWe),e(Nm,MWe),e(Nm,hk),e(hk,EWe),e(Nm,CWe),e(A,wWe),e(A,jm),e(jm,Dee),e(Dee,AWe),e(jm,yWe),e(jm,pk),e(pk,LWe),e(jm,xWe),e(A,$We),e(A,Dm),e(Dm,Gee),e(Gee,kWe),e(Dm,SWe),e(Dm,uk),e(uk,RWe),e(Dm,BWe),e(A,PWe),e(A,Gm),e(Gm,Oee),e(Oee,IWe),e(Gm,qWe),e(Gm,_k),e(_k,NWe),e(Gm,jWe),e(A,DWe),e(A,Om),e(Om,Vee),e(Vee,GWe),e(Om,OWe),e(Om,bk),e(bk,VWe),e(Om,XWe),e(A,zWe),e(A,Vm),e(Vm,Xee),e(Xee,WWe),e(Vm,QWe),e(Vm,vk),e(vk,HWe),e(Vm,UWe),e(A,JWe),e(A,Xm),e(Xm,zee),e(zee,YWe),e(Xm,KWe),e(Xm,Fk),e(Fk,ZWe),e(Xm,eQe),e(A,oQe),e(A,zm),e(zm,Wee),e(Wee,rQe),e(zm,tQe),e(zm,Tk),e(Tk,aQe),e(zm,nQe),e(A,sQe),e(A,Wm),e(Wm,Qee),e(Qee,lQe),e(Wm,iQe),e(Wm,Mk),e(Mk,dQe),e(Wm,cQe),e(A,fQe),e(A,Qm),e(Qm,Hee),e(Hee,mQe),e(Qm,gQe),e(Qm,Ek),e(Ek,hQe),e(Qm,pQe),e(A,uQe),e(A,Hm),e(Hm,Uee),e(Uee,_Qe),e(Hm,bQe),e(Hm,Ck),e(Ck,vQe),e(Hm,FQe),e(A,TQe),e(A,Um),e(Um,Jee),e(Jee,MQe),e(Um,EQe),e(Um,wk),e(wk,CQe),e(Um,wQe),e(A,AQe),e(A,Jm),e(Jm,Yee),e(Yee,yQe),e(Jm,LQe),e(Jm,Ak),e(Ak,xQe),e(Jm,$Qe),e(A,kQe),e(A,Ym),e(Ym,Kee),e(Kee,SQe),e(Ym,RQe),e(Ym,yk),e(yk,BQe),e(Ym,PQe),e(A,IQe),e(A,Km),e(Km,Zee),e(Zee,qQe),e(Km,NQe),e(Km,Lk),e(Lk,jQe),e(Km,DQe),e(A,GQe),e(A,Zm),e(Zm,eoe),e(eoe,OQe),e(Zm,VQe),e(Zm,xk),e(xk,XQe),e(Zm,zQe),e(A,WQe),e(A,eg),e(eg,ooe),e(ooe,QQe),e(eg,HQe),e(eg,$k),e($k,UQe),e(eg,JQe),e(A,YQe),e(A,og),e(og,roe),e(roe,KQe),e(og,ZQe),e(og,kk),e(kk,eHe),e(og,oHe),e(A,rHe),e(A,rg),e(rg,toe),e(toe,tHe),e(rg,aHe),e(rg,Sk),e(Sk,nHe),e(rg,sHe),e(A,lHe),e(A,tg),e(tg,aoe),e(aoe,iHe),e(tg,dHe),e(tg,Rk),e(Rk,cHe),e(tg,fHe),e(A,mHe),e(A,ag),e(ag,noe),e(noe,gHe),e(ag,hHe),e(ag,Bk),e(Bk,pHe),e(ag,uHe),e(A,_He),e(A,ng),e(ng,soe),e(soe,bHe),e(ng,vHe),e(ng,Pk),e(Pk,FHe),e(ng,THe),e(Fr,MHe),M(sg,Fr,null),e(Mo,EHe),e(Mo,lg),M($A,lg,null),e(lg,CHe),e(lg,loe),e(loe,wHe),b(f,FBe,_),b(f,gi,_),e(gi,ig),e(ig,ioe),M(kA,ioe,null),e(gi,AHe),e(gi,doe),e(doe,yHe),b(f,TBe,_),b(f,Eo,_),M(SA,Eo,null),e(Eo,LHe),e(Eo,RA),e(RA,xHe),e(RA,Ik),e(Ik,$He),e(RA,kHe),e(Eo,SHe),e(Eo,BA),e(BA,RHe),e(BA,coe),e(coe,BHe),e(BA,PHe),e(Eo,IHe),e(Eo,Tr),M(PA,Tr,null),e(Tr,qHe),e(Tr,foe),e(foe,NHe),e(Tr,jHe),e(Tr,Ma),e(Ma,DHe),e(Ma,moe),e(moe,GHe),e(Ma,OHe),e(Ma,goe),e(goe,VHe),e(Ma,XHe),e(Ma,hoe),e(hoe,zHe),e(Ma,WHe),e(Tr,QHe),e(Tr,k),e(k,An),e(An,poe),e(poe,HHe),e(An,UHe),e(An,qk),e(qk,JHe),e(An,YHe),e(An,Nk),e(Nk,KHe),e(An,ZHe),e(k,eUe),e(k,yn),e(yn,uoe),e(uoe,oUe),e(yn,rUe),e(yn,jk),e(jk,tUe),e(yn,aUe),e(yn,Dk),e(Dk,nUe),e(yn,sUe),e(k,lUe),e(k,Ln),e(Ln,_oe),e(_oe,iUe),e(Ln,dUe),e(Ln,Gk),e(Gk,cUe),e(Ln,fUe),e(Ln,Ok),e(Ok,mUe),e(Ln,gUe),e(k,hUe),e(k,dg),e(dg,boe),e(boe,pUe),e(dg,uUe),e(dg,Vk),e(Vk,_Ue),e(dg,bUe),e(k,vUe),e(k,xn),e(xn,voe),e(voe,FUe),e(xn,TUe),e(xn,Xk),e(Xk,MUe),e(xn,EUe),e(xn,zk),e(zk,CUe),e(xn,wUe),e(k,AUe),e(k,cg),e(cg,Foe),e(Foe,yUe),e(cg,LUe),e(cg,Wk),e(Wk,xUe),e(cg,$Ue),e(k,kUe),e(k,fg),e(fg,Toe),e(Toe,SUe),e(fg,RUe),e(fg,Qk),e(Qk,BUe),e(fg,PUe),e(k,IUe),e(k,mg),e(mg,Moe),e(Moe,qUe),e(mg,NUe),e(mg,Hk),e(Hk,jUe),e(mg,DUe),e(k,GUe),e(k,$n),e($n,Eoe),e(Eoe,OUe),e($n,VUe),e($n,Uk),e(Uk,XUe),e($n,zUe),e($n,Jk),e(Jk,WUe),e($n,QUe),e(k,HUe),e(k,kn),e(kn,Coe),e(Coe,UUe),e(kn,JUe),e(kn,Yk),e(Yk,YUe),e(kn,KUe),e(kn,Kk),e(Kk,ZUe),e(kn,eJe),e(k,oJe),e(k,Sn),e(Sn,woe),e(woe,rJe),e(Sn,tJe),e(Sn,Zk),e(Zk,aJe),e(Sn,nJe),e(Sn,eS),e(eS,sJe),e(Sn,lJe),e(k,iJe),e(k,gg),e(gg,Aoe),e(Aoe,dJe),e(gg,cJe),e(gg,oS),e(oS,fJe),e(gg,mJe),e(k,gJe),e(k,hg),e(hg,yoe),e(yoe,hJe),e(hg,pJe),e(hg,rS),e(rS,uJe),e(hg,_Je),e(k,bJe),e(k,Rn),e(Rn,Loe),e(Loe,vJe),e(Rn,FJe),e(Rn,tS),e(tS,TJe),e(Rn,MJe),e(Rn,aS),e(aS,EJe),e(Rn,CJe),e(k,wJe),e(k,pg),e(pg,xoe),e(xoe,AJe),e(pg,yJe),e(pg,nS),e(nS,LJe),e(pg,xJe),e(k,$Je),e(k,Bn),e(Bn,$oe),e($oe,kJe),e(Bn,SJe),e(Bn,sS),e(sS,RJe),e(Bn,BJe),e(Bn,lS),e(lS,PJe),e(Bn,IJe),e(k,qJe),e(k,Pn),e(Pn,koe),e(koe,NJe),e(Pn,jJe),e(Pn,iS),e(iS,DJe),e(Pn,GJe),e(Pn,dS),e(dS,OJe),e(Pn,VJe),e(k,XJe),e(k,In),e(In,Soe),e(Soe,zJe),e(In,WJe),e(In,cS),e(cS,QJe),e(In,HJe),e(In,Roe),e(Roe,UJe),e(In,JJe),e(k,YJe),e(k,ug),e(ug,Boe),e(Boe,KJe),e(ug,ZJe),e(ug,fS),e(fS,eYe),e(ug,oYe),e(k,rYe),e(k,qn),e(qn,Poe),e(Poe,tYe),e(qn,aYe),e(qn,mS),e(mS,nYe),e(qn,sYe),e(qn,gS),e(gS,lYe),e(qn,iYe),e(k,dYe),e(k,Nn),e(Nn,Ioe),e(Ioe,cYe),e(Nn,fYe),e(Nn,hS),e(hS,mYe),e(Nn,gYe),e(Nn,pS),e(pS,hYe),e(Nn,pYe),e(k,uYe),e(k,jn),e(jn,qoe),e(qoe,_Ye),e(jn,bYe),e(jn,uS),e(uS,vYe),e(jn,FYe),e(jn,_S),e(_S,TYe),e(jn,MYe),e(k,EYe),e(k,Dn),e(Dn,Noe),e(Noe,CYe),e(Dn,wYe),e(Dn,bS),e(bS,AYe),e(Dn,yYe),e(Dn,vS),e(vS,LYe),e(Dn,xYe),e(k,$Ye),e(k,Gn),e(Gn,joe),e(joe,kYe),e(Gn,SYe),e(Gn,FS),e(FS,RYe),e(Gn,BYe),e(Gn,TS),e(TS,PYe),e(Gn,IYe),e(k,qYe),e(k,On),e(On,Doe),e(Doe,NYe),e(On,jYe),e(On,MS),e(MS,DYe),e(On,GYe),e(On,ES),e(ES,OYe),e(On,VYe),e(k,XYe),e(k,_g),e(_g,Goe),e(Goe,zYe),e(_g,WYe),e(_g,CS),e(CS,QYe),e(_g,HYe),e(k,UYe),e(k,Vn),e(Vn,Ooe),e(Ooe,JYe),e(Vn,YYe),e(Vn,wS),e(wS,KYe),e(Vn,ZYe),e(Vn,AS),e(AS,eKe),e(Vn,oKe),e(k,rKe),e(k,bg),e(bg,Voe),e(Voe,tKe),e(bg,aKe),e(bg,yS),e(yS,nKe),e(bg,sKe),e(k,lKe),e(k,Xn),e(Xn,Xoe),e(Xoe,iKe),e(Xn,dKe),e(Xn,LS),e(LS,cKe),e(Xn,fKe),e(Xn,xS),e(xS,mKe),e(Xn,gKe),e(k,hKe),e(k,zn),e(zn,zoe),e(zoe,pKe),e(zn,uKe),e(zn,$S),e($S,_Ke),e(zn,bKe),e(zn,kS),e(kS,vKe),e(zn,FKe),e(k,TKe),e(k,Wn),e(Wn,Woe),e(Woe,MKe),e(Wn,EKe),e(Wn,SS),e(SS,CKe),e(Wn,wKe),e(Wn,RS),e(RS,AKe),e(Wn,yKe),e(k,LKe),e(k,Qn),e(Qn,Qoe),e(Qoe,xKe),e(Qn,$Ke),e(Qn,BS),e(BS,kKe),e(Qn,SKe),e(Qn,PS),e(PS,RKe),e(Qn,BKe),e(k,PKe),e(k,Hn),e(Hn,Hoe),e(Hoe,IKe),e(Hn,qKe),e(Hn,IS),e(IS,NKe),e(Hn,jKe),e(Hn,qS),e(qS,DKe),e(Hn,GKe),e(k,OKe),e(k,vg),e(vg,Uoe),e(Uoe,VKe),e(vg,XKe),e(vg,NS),e(NS,zKe),e(vg,WKe),e(k,QKe),e(k,Un),e(Un,Joe),e(Joe,HKe),e(Un,UKe),e(Un,jS),e(jS,JKe),e(Un,YKe),e(Un,DS),e(DS,KKe),e(Un,ZKe),e(k,eZe),e(k,Jn),e(Jn,Yoe),e(Yoe,oZe),e(Jn,rZe),e(Jn,GS),e(GS,tZe),e(Jn,aZe),e(Jn,OS),e(OS,nZe),e(Jn,sZe),e(k,lZe),e(k,Yn),e(Yn,Koe),e(Koe,iZe),e(Yn,dZe),e(Yn,VS),e(VS,cZe),e(Yn,fZe),e(Yn,XS),e(XS,mZe),e(Yn,gZe),e(k,hZe),e(k,Kn),e(Kn,Zoe),e(Zoe,pZe),e(Kn,uZe),e(Kn,zS),e(zS,_Ze),e(Kn,bZe),e(Kn,WS),e(WS,vZe),e(Kn,FZe),e(k,TZe),e(k,Zn),e(Zn,ere),e(ere,MZe),e(Zn,EZe),e(Zn,QS),e(QS,CZe),e(Zn,wZe),e(Zn,HS),e(HS,AZe),e(Zn,yZe),e(k,LZe),e(k,es),e(es,ore),e(ore,xZe),e(es,$Ze),e(es,US),e(US,kZe),e(es,SZe),e(es,JS),e(JS,RZe),e(es,BZe),e(k,PZe),e(k,Fg),e(Fg,rre),e(rre,IZe),e(Fg,qZe),e(Fg,YS),e(YS,NZe),e(Fg,jZe),e(k,DZe),e(k,os),e(os,tre),e(tre,GZe),e(os,OZe),e(os,KS),e(KS,VZe),e(os,XZe),e(os,ZS),e(ZS,zZe),e(os,WZe),e(k,QZe),e(k,Tg),e(Tg,are),e(are,HZe),e(Tg,UZe),e(Tg,eR),e(eR,JZe),e(Tg,YZe),e(k,KZe),e(k,Mg),e(Mg,nre),e(nre,ZZe),e(Mg,eeo),e(Mg,oR),e(oR,oeo),e(Mg,reo),e(k,teo),e(k,rs),e(rs,sre),e(sre,aeo),e(rs,neo),e(rs,rR),e(rR,seo),e(rs,leo),e(rs,tR),e(tR,ieo),e(rs,deo),e(k,ceo),e(k,ts),e(ts,lre),e(lre,feo),e(ts,meo),e(ts,aR),e(aR,geo),e(ts,heo),e(ts,nR),e(nR,peo),e(ts,ueo),e(k,_eo),e(k,as),e(as,ire),e(ire,beo),e(as,veo),e(as,sR),e(sR,Feo),e(as,Teo),e(as,lR),e(lR,Meo),e(as,Eeo),e(k,Ceo),e(k,Eg),e(Eg,dre),e(dre,weo),e(Eg,Aeo),e(Eg,iR),e(iR,yeo),e(Eg,Leo),e(k,xeo),e(k,ns),e(ns,cre),e(cre,$eo),e(ns,keo),e(ns,dR),e(dR,Seo),e(ns,Reo),e(ns,cR),e(cR,Beo),e(ns,Peo),e(k,Ieo),e(k,ss),e(ss,fre),e(fre,qeo),e(ss,Neo),e(ss,fR),e(fR,jeo),e(ss,Deo),e(ss,mR),e(mR,Geo),e(ss,Oeo),e(k,Veo),e(k,ls),e(ls,mre),e(mre,Xeo),e(ls,zeo),e(ls,gR),e(gR,Weo),e(ls,Qeo),e(ls,hR),e(hR,Heo),e(ls,Ueo),e(k,Jeo),e(k,is),e(is,gre),e(gre,Yeo),e(is,Keo),e(is,pR),e(pR,Zeo),e(is,eoo),e(is,uR),e(uR,ooo),e(is,roo),e(k,too),e(k,ds),e(ds,hre),e(hre,aoo),e(ds,noo),e(ds,_R),e(_R,soo),e(ds,loo),e(ds,bR),e(bR,ioo),e(ds,doo),e(k,coo),e(k,cs),e(cs,pre),e(pre,foo),e(cs,moo),e(cs,vR),e(vR,goo),e(cs,hoo),e(cs,FR),e(FR,poo),e(cs,uoo),e(k,_oo),e(k,Cg),e(Cg,ure),e(ure,boo),e(Cg,voo),e(Cg,TR),e(TR,Foo),e(Cg,Too),e(k,Moo),e(k,wg),e(wg,_re),e(_re,Eoo),e(wg,Coo),e(wg,MR),e(MR,woo),e(wg,Aoo),e(k,yoo),e(k,Ag),e(Ag,bre),e(bre,Loo),e(Ag,xoo),e(Ag,ER),e(ER,$oo),e(Ag,koo),e(k,Soo),e(k,yg),e(yg,vre),e(vre,Roo),e(yg,Boo),e(yg,CR),e(CR,Poo),e(yg,Ioo),e(k,qoo),e(k,fs),e(fs,Fre),e(Fre,Noo),e(fs,joo),e(fs,wR),e(wR,Doo),e(fs,Goo),e(fs,AR),e(AR,Ooo),e(fs,Voo),e(k,Xoo),e(k,Lg),e(Lg,Tre),e(Tre,zoo),e(Lg,Woo),e(Lg,yR),e(yR,Qoo),e(Lg,Hoo),e(k,Uoo),e(k,ms),e(ms,Mre),e(Mre,Joo),e(ms,Yoo),e(ms,LR),e(LR,Koo),e(ms,Zoo),e(ms,xR),e(xR,ero),e(ms,oro),e(k,rro),e(k,gs),e(gs,Ere),e(Ere,tro),e(gs,aro),e(gs,$R),e($R,nro),e(gs,sro),e(gs,kR),e(kR,lro),e(gs,iro),e(k,dro),e(k,hs),e(hs,Cre),e(Cre,cro),e(hs,fro),e(hs,SR),e(SR,mro),e(hs,gro),e(hs,RR),e(RR,hro),e(hs,pro),e(k,uro),e(k,ps),e(ps,wre),e(wre,_ro),e(ps,bro),e(ps,BR),e(BR,vro),e(ps,Fro),e(ps,PR),e(PR,Tro),e(ps,Mro),e(k,Ero),e(k,us),e(us,Are),e(Are,Cro),e(us,wro),e(us,IR),e(IR,Aro),e(us,yro),e(us,qR),e(qR,Lro),e(us,xro),e(k,$ro),e(k,_s),e(_s,yre),e(yre,kro),e(_s,Sro),e(_s,NR),e(NR,Rro),e(_s,Bro),e(_s,jR),e(jR,Pro),e(_s,Iro),e(k,qro),e(k,xg),e(xg,Lre),e(Lre,Nro),e(xg,jro),e(xg,DR),e(DR,Dro),e(xg,Gro),e(k,Oro),e(k,$g),e($g,xre),e(xre,Vro),e($g,Xro),e($g,GR),e(GR,zro),e($g,Wro),e(k,Qro),e(k,bs),e(bs,$re),e($re,Hro),e(bs,Uro),e(bs,OR),e(OR,Jro),e(bs,Yro),e(bs,VR),e(VR,Kro),e(bs,Zro),e(k,eto),e(k,vs),e(vs,kre),e(kre,oto),e(vs,rto),e(vs,XR),e(XR,tto),e(vs,ato),e(vs,zR),e(zR,nto),e(vs,sto),e(k,lto),e(k,Fs),e(Fs,Sre),e(Sre,ito),e(Fs,dto),e(Fs,WR),e(WR,cto),e(Fs,fto),e(Fs,QR),e(QR,mto),e(Fs,gto),e(k,hto),e(k,kg),e(kg,Rre),e(Rre,pto),e(kg,uto),e(kg,HR),e(HR,_to),e(kg,bto),e(k,vto),e(k,Sg),e(Sg,Bre),e(Bre,Fto),e(Sg,Tto),e(Sg,UR),e(UR,Mto),e(Sg,Eto),e(k,Cto),e(k,Rg),e(Rg,Pre),e(Pre,wto),e(Rg,Ato),e(Rg,JR),e(JR,yto),e(Rg,Lto),e(k,xto),e(k,Ts),e(Ts,Ire),e(Ire,$to),e(Ts,kto),e(Ts,YR),e(YR,Sto),e(Ts,Rto),e(Ts,KR),e(KR,Bto),e(Ts,Pto),e(k,Ito),e(k,Bg),e(Bg,qre),e(qre,qto),e(Bg,Nto),e(Bg,ZR),e(ZR,jto),e(Bg,Dto),e(k,Gto),e(k,Pg),e(Pg,Nre),e(Nre,Oto),e(Pg,Vto),e(Pg,eB),e(eB,Xto),e(Pg,zto),e(k,Wto),e(k,Ig),e(Ig,jre),e(jre,Qto),e(Ig,Hto),e(Ig,oB),e(oB,Uto),e(Ig,Jto),e(k,Yto),e(k,Ms),e(Ms,Dre),e(Dre,Kto),e(Ms,Zto),e(Ms,rB),e(rB,eao),e(Ms,oao),e(Ms,tB),e(tB,rao),e(Ms,tao),e(k,aao),e(k,qg),e(qg,Gre),e(Gre,nao),e(qg,sao),e(qg,aB),e(aB,lao),e(qg,iao),e(k,dao),e(k,Ng),e(Ng,Ore),e(Ore,cao),e(Ng,fao),e(Ng,nB),e(nB,mao),e(Ng,gao),e(k,hao),e(k,Es),e(Es,Vre),e(Vre,pao),e(Es,uao),e(Es,sB),e(sB,_ao),e(Es,bao),e(Es,lB),e(lB,vao),e(Es,Fao),e(k,Tao),e(k,Cs),e(Cs,Xre),e(Xre,Mao),e(Cs,Eao),e(Cs,iB),e(iB,Cao),e(Cs,wao),e(Cs,dB),e(dB,Aao),e(Cs,yao),e(k,Lao),e(k,ws),e(ws,zre),e(zre,xao),e(ws,$ao),e(ws,cB),e(cB,kao),e(ws,Sao),e(ws,fB),e(fB,Rao),e(ws,Bao),e(k,Pao),e(k,As),e(As,Wre),e(Wre,Iao),e(As,qao),e(As,mB),e(mB,Nao),e(As,jao),e(As,gB),e(gB,Dao),e(As,Gao),e(Tr,Oao),M(jg,Tr,null),e(Eo,Vao),e(Eo,Dg),M(IA,Dg,null),e(Dg,Xao),e(Dg,Qre),e(Qre,zao),b(f,MBe,_),b(f,hi,_),e(hi,Gg),e(Gg,Hre),M(qA,Hre,null),e(hi,Wao),e(hi,Ure),e(Ure,Qao),b(f,EBe,_),b(f,Co,_),M(NA,Co,null),e(Co,Hao),e(Co,jA),e(jA,Uao),e(jA,hB),e(hB,Jao),e(jA,Yao),e(Co,Kao),e(Co,DA),e(DA,Zao),e(DA,Jre),e(Jre,eno),e(DA,ono),e(Co,rno),e(Co,We),M(GA,We,null),e(We,tno),e(We,Yre),e(Yre,ano),e(We,nno),e(We,Ea),e(Ea,sno),e(Ea,Kre),e(Kre,lno),e(Ea,ino),e(Ea,Zre),e(Zre,dno),e(Ea,cno),e(Ea,ete),e(ete,fno),e(Ea,mno),e(We,gno),e(We,te),e(te,Og),e(Og,ote),e(ote,hno),e(Og,pno),e(Og,pB),e(pB,uno),e(Og,_no),e(te,bno),e(te,Vg),e(Vg,rte),e(rte,vno),e(Vg,Fno),e(Vg,uB),e(uB,Tno),e(Vg,Mno),e(te,Eno),e(te,Xg),e(Xg,tte),e(tte,Cno),e(Xg,wno),e(Xg,_B),e(_B,Ano),e(Xg,yno),e(te,Lno),e(te,zg),e(zg,ate),e(ate,xno),e(zg,$no),e(zg,bB),e(bB,kno),e(zg,Sno),e(te,Rno),e(te,Wg),e(Wg,nte),e(nte,Bno),e(Wg,Pno),e(Wg,vB),e(vB,Ino),e(Wg,qno),e(te,Nno),e(te,Qg),e(Qg,ste),e(ste,jno),e(Qg,Dno),e(Qg,FB),e(FB,Gno),e(Qg,Ono),e(te,Vno),e(te,Hg),e(Hg,lte),e(lte,Xno),e(Hg,zno),e(Hg,TB),e(TB,Wno),e(Hg,Qno),e(te,Hno),e(te,Ug),e(Ug,ite),e(ite,Uno),e(Ug,Jno),e(Ug,MB),e(MB,Yno),e(Ug,Kno),e(te,Zno),e(te,Jg),e(Jg,dte),e(dte,eso),e(Jg,oso),e(Jg,EB),e(EB,rso),e(Jg,tso),e(te,aso),e(te,Yg),e(Yg,cte),e(cte,nso),e(Yg,sso),e(Yg,CB),e(CB,lso),e(Yg,iso),e(te,dso),e(te,Kg),e(Kg,fte),e(fte,cso),e(Kg,fso),e(Kg,wB),e(wB,mso),e(Kg,gso),e(te,hso),e(te,Zg),e(Zg,mte),e(mte,pso),e(Zg,uso),e(Zg,AB),e(AB,_so),e(Zg,bso),e(te,vso),e(te,eh),e(eh,gte),e(gte,Fso),e(eh,Tso),e(eh,yB),e(yB,Mso),e(eh,Eso),e(te,Cso),e(te,oh),e(oh,hte),e(hte,wso),e(oh,Aso),e(oh,LB),e(LB,yso),e(oh,Lso),e(te,xso),e(te,rh),e(rh,pte),e(pte,$so),e(rh,kso),e(rh,xB),e(xB,Sso),e(rh,Rso),e(te,Bso),e(te,th),e(th,ute),e(ute,Pso),e(th,Iso),e(th,$B),e($B,qso),e(th,Nso),e(te,jso),e(te,ah),e(ah,_te),e(_te,Dso),e(ah,Gso),e(ah,kB),e(kB,Oso),e(ah,Vso),e(te,Xso),e(te,nh),e(nh,bte),e(bte,zso),e(nh,Wso),e(nh,SB),e(SB,Qso),e(nh,Hso),e(te,Uso),e(te,sh),e(sh,vte),e(vte,Jso),e(sh,Yso),e(sh,RB),e(RB,Kso),e(sh,Zso),e(te,elo),e(te,lh),e(lh,Fte),e(Fte,olo),e(lh,rlo),e(lh,BB),e(BB,tlo),e(lh,alo),e(te,nlo),e(te,ih),e(ih,Tte),e(Tte,slo),e(ih,llo),e(ih,PB),e(PB,ilo),e(ih,dlo),e(te,clo),e(te,dh),e(dh,Mte),e(Mte,flo),e(dh,mlo),e(dh,IB),e(IB,glo),e(dh,hlo),e(te,plo),e(te,ch),e(ch,Ete),e(Ete,ulo),e(ch,_lo),e(ch,qB),e(qB,blo),e(ch,vlo),e(te,Flo),e(te,fh),e(fh,Cte),e(Cte,Tlo),e(fh,Mlo),e(fh,NB),e(NB,Elo),e(fh,Clo),e(We,wlo),M(mh,We,null),e(We,Alo),M(gh,We,null),e(Co,ylo),e(Co,hh),M(OA,hh,null),e(hh,Llo),e(hh,wte),e(wte,xlo),b(f,CBe,_),b(f,pi,_),e(pi,ph),e(ph,Ate),M(VA,Ate,null),e(pi,$lo),e(pi,yte),e(yte,klo),b(f,wBe,_),b(f,wo,_),M(XA,wo,null),e(wo,Slo),e(wo,zA),e(zA,Rlo),e(zA,jB),e(jB,Blo),e(zA,Plo),e(wo,Ilo),e(wo,WA),e(WA,qlo),e(WA,Lte),e(Lte,Nlo),e(WA,jlo),e(wo,Dlo),e(wo,Qe),M(QA,Qe,null),e(Qe,Glo),e(Qe,xte),e(xte,Olo),e(Qe,Vlo),e(Qe,ui),e(ui,Xlo),e(ui,$te),e($te,zlo),e(ui,Wlo),e(ui,kte),e(kte,Qlo),e(ui,Hlo),e(Qe,Ulo),e(Qe,be),e(be,uh),e(uh,Ste),e(Ste,Jlo),e(uh,Ylo),e(uh,DB),e(DB,Klo),e(uh,Zlo),e(be,eio),e(be,_h),e(_h,Rte),e(Rte,oio),e(_h,rio),e(_h,GB),e(GB,tio),e(_h,aio),e(be,nio),e(be,bh),e(bh,Bte),e(Bte,sio),e(bh,lio),e(bh,OB),e(OB,iio),e(bh,dio),e(be,cio),e(be,vh),e(vh,Pte),e(Pte,fio),e(vh,mio),e(vh,VB),e(VB,gio),e(vh,hio),e(be,pio),e(be,Fh),e(Fh,Ite),e(Ite,uio),e(Fh,_io),e(Fh,XB),e(XB,bio),e(Fh,vio),e(be,Fio),e(be,Th),e(Th,qte),e(qte,Tio),e(Th,Mio),e(Th,zB),e(zB,Eio),e(Th,Cio),e(be,wio),e(be,Mh),e(Mh,Nte),e(Nte,Aio),e(Mh,yio),e(Mh,WB),e(WB,Lio),e(Mh,xio),e(be,$io),e(be,Eh),e(Eh,jte),e(jte,kio),e(Eh,Sio),e(Eh,QB),e(QB,Rio),e(Eh,Bio),e(be,Pio),e(be,Ch),e(Ch,Dte),e(Dte,Iio),e(Ch,qio),e(Ch,HB),e(HB,Nio),e(Ch,jio),e(be,Dio),e(be,wh),e(wh,Gte),e(Gte,Gio),e(wh,Oio),e(wh,UB),e(UB,Vio),e(wh,Xio),e(be,zio),e(be,Ah),e(Ah,Ote),e(Ote,Wio),e(Ah,Qio),e(Ah,JB),e(JB,Hio),e(Ah,Uio),e(be,Jio),e(be,yh),e(yh,Vte),e(Vte,Yio),e(yh,Kio),e(yh,YB),e(YB,Zio),e(yh,edo),e(be,odo),e(be,Lh),e(Lh,Xte),e(Xte,rdo),e(Lh,tdo),e(Lh,KB),e(KB,ado),e(Lh,ndo),e(be,sdo),e(be,xh),e(xh,zte),e(zte,ldo),e(xh,ido),e(xh,ZB),e(ZB,ddo),e(xh,cdo),e(be,fdo),e(be,$h),e($h,Wte),e(Wte,mdo),e($h,gdo),e($h,eP),e(eP,hdo),e($h,pdo),e(Qe,udo),M(kh,Qe,null),e(Qe,_do),M(Sh,Qe,null),e(wo,bdo),e(wo,Rh),M(HA,Rh,null),e(Rh,vdo),e(Rh,Qte),e(Qte,Fdo),b(f,ABe,_),b(f,_i,_),e(_i,Bh),e(Bh,Hte),M(UA,Hte,null),e(_i,Tdo),e(_i,Ute),e(Ute,Mdo),b(f,yBe,_),b(f,Ao,_),M(JA,Ao,null),e(Ao,Edo),e(Ao,bi),e(bi,Cdo),e(bi,oP),e(oP,wdo),e(bi,Ado),e(bi,rP),e(rP,ydo),e(bi,Ldo),e(Ao,xdo),e(Ao,YA),e(YA,$do),e(YA,Jte),e(Jte,kdo),e(YA,Sdo),e(Ao,Rdo),e(Ao,et),M(KA,et,null),e(et,Bdo),e(et,Yte),e(Yte,Pdo),e(et,Ido),e(et,vi),e(vi,qdo),e(vi,Kte),e(Kte,Ndo),e(vi,jdo),e(vi,tP),e(tP,Ddo),e(vi,Gdo),e(et,Odo),M(Ph,et,null),e(Ao,Vdo),e(Ao,He),M(ZA,He,null),e(He,Xdo),e(He,Zte),e(Zte,zdo),e(He,Wdo),e(He,Ca),e(Ca,Qdo),e(Ca,eae),e(eae,Hdo),e(Ca,Udo),e(Ca,oae),e(oae,Jdo),e(Ca,Ydo),e(Ca,rae),e(rae,Kdo),e(Ca,Zdo),e(He,eco),e(He,x),e(x,Ih),e(Ih,tae),e(tae,oco),e(Ih,rco),e(Ih,aP),e(aP,tco),e(Ih,aco),e(x,nco),e(x,qh),e(qh,aae),e(aae,sco),e(qh,lco),e(qh,nP),e(nP,ico),e(qh,dco),e(x,cco),e(x,Nh),e(Nh,nae),e(nae,fco),e(Nh,mco),e(Nh,sP),e(sP,gco),e(Nh,hco),e(x,pco),e(x,jh),e(jh,sae),e(sae,uco),e(jh,_co),e(jh,lP),e(lP,bco),e(jh,vco),e(x,Fco),e(x,Dh),e(Dh,lae),e(lae,Tco),e(Dh,Mco),e(Dh,iP),e(iP,Eco),e(Dh,Cco),e(x,wco),e(x,Gh),e(Gh,iae),e(iae,Aco),e(Gh,yco),e(Gh,dP),e(dP,Lco),e(Gh,xco),e(x,$co),e(x,Oh),e(Oh,dae),e(dae,kco),e(Oh,Sco),e(Oh,cP),e(cP,Rco),e(Oh,Bco),e(x,Pco),e(x,Vh),e(Vh,cae),e(cae,Ico),e(Vh,qco),e(Vh,fP),e(fP,Nco),e(Vh,jco),e(x,Dco),e(x,Xh),e(Xh,fae),e(fae,Gco),e(Xh,Oco),e(Xh,mP),e(mP,Vco),e(Xh,Xco),e(x,zco),e(x,zh),e(zh,mae),e(mae,Wco),e(zh,Qco),e(zh,gP),e(gP,Hco),e(zh,Uco),e(x,Jco),e(x,Wh),e(Wh,gae),e(gae,Yco),e(Wh,Kco),e(Wh,hP),e(hP,Zco),e(Wh,efo),e(x,ofo),e(x,Qh),e(Qh,hae),e(hae,rfo),e(Qh,tfo),e(Qh,pP),e(pP,afo),e(Qh,nfo),e(x,sfo),e(x,Hh),e(Hh,pae),e(pae,lfo),e(Hh,ifo),e(Hh,uP),e(uP,dfo),e(Hh,cfo),e(x,ffo),e(x,Uh),e(Uh,uae),e(uae,mfo),e(Uh,gfo),e(Uh,_P),e(_P,hfo),e(Uh,pfo),e(x,ufo),e(x,Jh),e(Jh,_ae),e(_ae,_fo),e(Jh,bfo),e(Jh,bP),e(bP,vfo),e(Jh,Ffo),e(x,Tfo),e(x,Yh),e(Yh,bae),e(bae,Mfo),e(Yh,Efo),e(Yh,vP),e(vP,Cfo),e(Yh,wfo),e(x,Afo),e(x,Kh),e(Kh,vae),e(vae,yfo),e(Kh,Lfo),e(Kh,FP),e(FP,xfo),e(Kh,$fo),e(x,kfo),e(x,Zh),e(Zh,Fae),e(Fae,Sfo),e(Zh,Rfo),e(Zh,TP),e(TP,Bfo),e(Zh,Pfo),e(x,Ifo),e(x,ep),e(ep,Tae),e(Tae,qfo),e(ep,Nfo),e(ep,MP),e(MP,jfo),e(ep,Dfo),e(x,Gfo),e(x,op),e(op,Mae),e(Mae,Ofo),e(op,Vfo),e(op,EP),e(EP,Xfo),e(op,zfo),e(x,Wfo),e(x,rp),e(rp,Eae),e(Eae,Qfo),e(rp,Hfo),e(rp,CP),e(CP,Ufo),e(rp,Jfo),e(x,Yfo),e(x,tp),e(tp,Cae),e(Cae,Kfo),e(tp,Zfo),e(tp,wP),e(wP,emo),e(tp,omo),e(x,rmo),e(x,ap),e(ap,wae),e(wae,tmo),e(ap,amo),e(ap,AP),e(AP,nmo),e(ap,smo),e(x,lmo),e(x,np),e(np,Aae),e(Aae,imo),e(np,dmo),e(np,yP),e(yP,cmo),e(np,fmo),e(x,mmo),e(x,sp),e(sp,yae),e(yae,gmo),e(sp,hmo),e(sp,LP),e(LP,pmo),e(sp,umo),e(x,_mo),e(x,lp),e(lp,Lae),e(Lae,bmo),e(lp,vmo),e(lp,xP),e(xP,Fmo),e(lp,Tmo),e(x,Mmo),e(x,ip),e(ip,xae),e(xae,Emo),e(ip,Cmo),e(ip,$P),e($P,wmo),e(ip,Amo),e(x,ymo),e(x,dp),e(dp,$ae),e($ae,Lmo),e(dp,xmo),e(dp,kP),e(kP,$mo),e(dp,kmo),e(x,Smo),e(x,cp),e(cp,kae),e(kae,Rmo),e(cp,Bmo),e(cp,SP),e(SP,Pmo),e(cp,Imo),e(x,qmo),e(x,fp),e(fp,Sae),e(Sae,Nmo),e(fp,jmo),e(fp,RP),e(RP,Dmo),e(fp,Gmo),e(x,Omo),e(x,ys),e(ys,Rae),e(Rae,Vmo),e(ys,Xmo),e(ys,BP),e(BP,zmo),e(ys,Wmo),e(ys,PP),e(PP,Qmo),e(ys,Hmo),e(x,Umo),e(x,mp),e(mp,Bae),e(Bae,Jmo),e(mp,Ymo),e(mp,IP),e(IP,Kmo),e(mp,Zmo),e(x,ego),e(x,gp),e(gp,Pae),e(Pae,ogo),e(gp,rgo),e(gp,qP),e(qP,tgo),e(gp,ago),e(x,ngo),e(x,hp),e(hp,Iae),e(Iae,sgo),e(hp,lgo),e(hp,NP),e(NP,igo),e(hp,dgo),e(x,cgo),e(x,pp),e(pp,qae),e(qae,fgo),e(pp,mgo),e(pp,jP),e(jP,ggo),e(pp,hgo),e(x,pgo),e(x,up),e(up,Nae),e(Nae,ugo),e(up,_go),e(up,DP),e(DP,bgo),e(up,vgo),e(x,Fgo),e(x,_p),e(_p,jae),e(jae,Tgo),e(_p,Mgo),e(_p,GP),e(GP,Ego),e(_p,Cgo),e(x,wgo),e(x,bp),e(bp,Dae),e(Dae,Ago),e(bp,ygo),e(bp,OP),e(OP,Lgo),e(bp,xgo),e(x,$go),e(x,vp),e(vp,Gae),e(Gae,kgo),e(vp,Sgo),e(vp,VP),e(VP,Rgo),e(vp,Bgo),e(x,Pgo),e(x,Fp),e(Fp,Oae),e(Oae,Igo),e(Fp,qgo),e(Fp,XP),e(XP,Ngo),e(Fp,jgo),e(x,Dgo),e(x,Tp),e(Tp,Vae),e(Vae,Ggo),e(Tp,Ogo),e(Tp,zP),e(zP,Vgo),e(Tp,Xgo),e(x,zgo),e(x,Mp),e(Mp,Xae),e(Xae,Wgo),e(Mp,Qgo),e(Mp,WP),e(WP,Hgo),e(Mp,Ugo),e(x,Jgo),e(x,Ep),e(Ep,zae),e(zae,Ygo),e(Ep,Kgo),e(Ep,QP),e(QP,Zgo),e(Ep,eho),e(x,oho),e(x,Cp),e(Cp,Wae),e(Wae,rho),e(Cp,tho),e(Cp,HP),e(HP,aho),e(Cp,nho),e(x,sho),e(x,wp),e(wp,Qae),e(Qae,lho),e(wp,iho),e(wp,UP),e(UP,dho),e(wp,cho),e(x,fho),e(x,Ap),e(Ap,Hae),e(Hae,mho),e(Ap,gho),e(Ap,JP),e(JP,hho),e(Ap,pho),e(x,uho),e(x,yp),e(yp,Uae),e(Uae,_ho),e(yp,bho),e(yp,YP),e(YP,vho),e(yp,Fho),e(x,Tho),e(x,Lp),e(Lp,Jae),e(Jae,Mho),e(Lp,Eho),e(Lp,KP),e(KP,Cho),e(Lp,who),e(x,Aho),e(x,xp),e(xp,Yae),e(Yae,yho),e(xp,Lho),e(xp,ZP),e(ZP,xho),e(xp,$ho),e(x,kho),e(x,$p),e($p,Kae),e(Kae,Sho),e($p,Rho),e($p,eI),e(eI,Bho),e($p,Pho),e(x,Iho),e(x,kp),e(kp,Zae),e(Zae,qho),e(kp,Nho),e(kp,oI),e(oI,jho),e(kp,Dho),e(x,Gho),e(x,Sp),e(Sp,ene),e(ene,Oho),e(Sp,Vho),e(Sp,rI),e(rI,Xho),e(Sp,zho),e(x,Who),e(x,Rp),e(Rp,one),e(one,Qho),e(Rp,Hho),e(Rp,tI),e(tI,Uho),e(Rp,Jho),e(x,Yho),e(x,Bp),e(Bp,rne),e(rne,Kho),e(Bp,Zho),e(Bp,aI),e(aI,epo),e(Bp,opo),e(x,rpo),e(x,Pp),e(Pp,tne),e(tne,tpo),e(Pp,apo),e(Pp,nI),e(nI,npo),e(Pp,spo),e(x,lpo),e(x,Ip),e(Ip,ane),e(ane,ipo),e(Ip,dpo),e(Ip,sI),e(sI,cpo),e(Ip,fpo),e(x,mpo),e(x,qp),e(qp,nne),e(nne,gpo),e(qp,hpo),e(qp,lI),e(lI,ppo),e(qp,upo),e(x,_po),e(x,Np),e(Np,sne),e(sne,bpo),e(Np,vpo),e(Np,iI),e(iI,Fpo),e(Np,Tpo),e(x,Mpo),e(x,jp),e(jp,lne),e(lne,Epo),e(jp,Cpo),e(jp,dI),e(dI,wpo),e(jp,Apo),e(x,ypo),e(x,Dp),e(Dp,ine),e(ine,Lpo),e(Dp,xpo),e(Dp,cI),e(cI,$po),e(Dp,kpo),e(x,Spo),e(x,Gp),e(Gp,dne),e(dne,Rpo),e(Gp,Bpo),e(Gp,fI),e(fI,Ppo),e(Gp,Ipo),e(x,qpo),e(x,Op),e(Op,cne),e(cne,Npo),e(Op,jpo),e(Op,mI),e(mI,Dpo),e(Op,Gpo),e(x,Opo),e(x,Vp),e(Vp,fne),e(fne,Vpo),e(Vp,Xpo),e(Vp,gI),e(gI,zpo),e(Vp,Wpo),e(x,Qpo),e(x,Xp),e(Xp,mne),e(mne,Hpo),e(Xp,Upo),e(Xp,hI),e(hI,Jpo),e(Xp,Ypo),e(x,Kpo),e(x,zp),e(zp,gne),e(gne,Zpo),e(zp,euo),e(zp,pI),e(pI,ouo),e(zp,ruo),e(x,tuo),e(x,Wp),e(Wp,hne),e(hne,auo),e(Wp,nuo),e(Wp,uI),e(uI,suo),e(Wp,luo),e(x,iuo),e(x,Qp),e(Qp,pne),e(pne,duo),e(Qp,cuo),e(Qp,_I),e(_I,fuo),e(Qp,muo),e(x,guo),e(x,Hp),e(Hp,une),e(une,huo),e(Hp,puo),e(Hp,bI),e(bI,uuo),e(Hp,_uo),e(x,buo),e(x,Up),e(Up,_ne),e(_ne,vuo),e(Up,Fuo),e(Up,vI),e(vI,Tuo),e(Up,Muo),e(x,Euo),e(x,Jp),e(Jp,bne),e(bne,Cuo),e(Jp,wuo),e(Jp,FI),e(FI,Auo),e(Jp,yuo),e(x,Luo),e(x,Yp),e(Yp,vne),e(vne,xuo),e(Yp,$uo),e(Yp,TI),e(TI,kuo),e(Yp,Suo),e(x,Ruo),e(x,Kp),e(Kp,Fne),e(Fne,Buo),e(Kp,Puo),e(Kp,MI),e(MI,Iuo),e(Kp,quo),e(x,Nuo),e(x,Zp),e(Zp,Tne),e(Tne,juo),e(Zp,Duo),e(Zp,EI),e(EI,Guo),e(Zp,Ouo),e(x,Vuo),e(x,eu),e(eu,Mne),e(Mne,Xuo),e(eu,zuo),e(eu,CI),e(CI,Wuo),e(eu,Quo),e(x,Huo),e(x,ou),e(ou,Ene),e(Ene,Uuo),e(ou,Juo),e(ou,wI),e(wI,Yuo),e(ou,Kuo),e(x,Zuo),e(x,ru),e(ru,Cne),e(Cne,e_o),e(ru,o_o),e(ru,AI),e(AI,r_o),e(ru,t_o),e(x,a_o),e(x,tu),e(tu,wne),e(wne,n_o),e(tu,s_o),e(tu,yI),e(yI,l_o),e(tu,i_o),e(x,d_o),e(x,au),e(au,Ane),e(Ane,c_o),e(au,f_o),e(au,LI),e(LI,m_o),e(au,g_o),e(x,h_o),e(x,nu),e(nu,yne),e(yne,p_o),e(nu,u_o),e(nu,xI),e(xI,__o),e(nu,b_o),e(x,v_o),e(x,su),e(su,Lne),e(Lne,F_o),e(su,T_o),e(su,$I),e($I,M_o),e(su,E_o),e(x,C_o),e(x,lu),e(lu,xne),e(xne,w_o),e(lu,A_o),e(lu,kI),e(kI,y_o),e(lu,L_o),e(x,x_o),e(x,iu),e(iu,$ne),e($ne,$_o),e(iu,k_o),e(iu,SI),e(SI,S_o),e(iu,R_o),e(x,B_o),e(x,du),e(du,kne),e(kne,P_o),e(du,I_o),e(du,RI),e(RI,q_o),e(du,N_o),e(x,j_o),e(x,cu),e(cu,Sne),e(Sne,D_o),e(cu,G_o),e(cu,BI),e(BI,O_o),e(cu,V_o),e(x,X_o),e(x,fu),e(fu,Rne),e(Rne,z_o),e(fu,W_o),e(fu,PI),e(PI,Q_o),e(fu,H_o),e(x,U_o),e(x,mu),e(mu,Bne),e(Bne,J_o),e(mu,Y_o),e(mu,II),e(II,K_o),e(mu,Z_o),e(x,e1o),e(x,gu),e(gu,Pne),e(Pne,o1o),e(gu,r1o),e(gu,qI),e(qI,t1o),e(gu,a1o),e(x,n1o),e(x,hu),e(hu,Ine),e(Ine,s1o),e(hu,l1o),e(hu,NI),e(NI,i1o),e(hu,d1o),e(x,c1o),e(x,pu),e(pu,qne),e(qne,f1o),e(pu,m1o),e(pu,jI),e(jI,g1o),e(pu,h1o),e(x,p1o),e(x,uu),e(uu,Nne),e(Nne,u1o),e(uu,_1o),e(uu,DI),e(DI,b1o),e(uu,v1o),e(x,F1o),e(x,_u),e(_u,jne),e(jne,T1o),e(_u,M1o),e(_u,GI),e(GI,E1o),e(_u,C1o),e(x,w1o),e(x,bu),e(bu,Dne),e(Dne,A1o),e(bu,y1o),e(bu,OI),e(OI,L1o),e(bu,x1o),e(x,$1o),e(x,vu),e(vu,Gne),e(Gne,k1o),e(vu,S1o),e(vu,VI),e(VI,R1o),e(vu,B1o),e(x,P1o),e(x,Fu),e(Fu,One),e(One,I1o),e(Fu,q1o),e(Fu,XI),e(XI,N1o),e(Fu,j1o),e(x,D1o),e(x,Tu),e(Tu,Vne),e(Vne,G1o),e(Tu,O1o),e(Tu,zI),e(zI,V1o),e(Tu,X1o),e(He,z1o),e(He,Mu),e(Mu,W1o),e(Mu,Xne),e(Xne,Q1o),e(Mu,H1o),e(Mu,zne),e(zne,U1o),e(He,J1o),M(Eu,He,null),b(f,LBe,_),b(f,Fi,_),e(Fi,Cu),e(Cu,Wne),M(e0,Wne,null),e(Fi,Y1o),e(Fi,Qne),e(Qne,K1o),b(f,xBe,_),b(f,yo,_),M(o0,yo,null),e(yo,Z1o),e(yo,Ti),e(Ti,e2o),e(Ti,WI),e(WI,o2o),e(Ti,r2o),e(Ti,QI),e(QI,t2o),e(Ti,a2o),e(yo,n2o),e(yo,r0),e(r0,s2o),e(r0,Hne),e(Hne,l2o),e(r0,i2o),e(yo,d2o),e(yo,ot),M(t0,ot,null),e(ot,c2o),e(ot,Une),e(Une,f2o),e(ot,m2o),e(ot,Mi),e(Mi,g2o),e(Mi,Jne),e(Jne,h2o),e(Mi,p2o),e(Mi,HI),e(HI,u2o),e(Mi,_2o),e(ot,b2o),M(wu,ot,null),e(yo,v2o),e(yo,Ue),M(a0,Ue,null),e(Ue,F2o),e(Ue,Yne),e(Yne,T2o),e(Ue,M2o),e(Ue,wa),e(wa,E2o),e(wa,Kne),e(Kne,C2o),e(wa,w2o),e(wa,Zne),e(Zne,A2o),e(wa,y2o),e(wa,ese),e(ese,L2o),e(wa,x2o),e(Ue,$2o),e(Ue,G),e(G,Au),e(Au,ose),e(ose,k2o),e(Au,S2o),e(Au,UI),e(UI,R2o),e(Au,B2o),e(G,P2o),e(G,yu),e(yu,rse),e(rse,I2o),e(yu,q2o),e(yu,JI),e(JI,N2o),e(yu,j2o),e(G,D2o),e(G,Lu),e(Lu,tse),e(tse,G2o),e(Lu,O2o),e(Lu,YI),e(YI,V2o),e(Lu,X2o),e(G,z2o),e(G,xu),e(xu,ase),e(ase,W2o),e(xu,Q2o),e(xu,KI),e(KI,H2o),e(xu,U2o),e(G,J2o),e(G,$u),e($u,nse),e(nse,Y2o),e($u,K2o),e($u,ZI),e(ZI,Z2o),e($u,ebo),e(G,obo),e(G,ku),e(ku,sse),e(sse,rbo),e(ku,tbo),e(ku,eq),e(eq,abo),e(ku,nbo),e(G,sbo),e(G,Su),e(Su,lse),e(lse,lbo),e(Su,ibo),e(Su,oq),e(oq,dbo),e(Su,cbo),e(G,fbo),e(G,Ru),e(Ru,ise),e(ise,mbo),e(Ru,gbo),e(Ru,rq),e(rq,hbo),e(Ru,pbo),e(G,ubo),e(G,Bu),e(Bu,dse),e(dse,_bo),e(Bu,bbo),e(Bu,tq),e(tq,vbo),e(Bu,Fbo),e(G,Tbo),e(G,Pu),e(Pu,cse),e(cse,Mbo),e(Pu,Ebo),e(Pu,aq),e(aq,Cbo),e(Pu,wbo),e(G,Abo),e(G,Iu),e(Iu,fse),e(fse,ybo),e(Iu,Lbo),e(Iu,nq),e(nq,xbo),e(Iu,$bo),e(G,kbo),e(G,qu),e(qu,mse),e(mse,Sbo),e(qu,Rbo),e(qu,sq),e(sq,Bbo),e(qu,Pbo),e(G,Ibo),e(G,Nu),e(Nu,gse),e(gse,qbo),e(Nu,Nbo),e(Nu,lq),e(lq,jbo),e(Nu,Dbo),e(G,Gbo),e(G,ju),e(ju,hse),e(hse,Obo),e(ju,Vbo),e(ju,iq),e(iq,Xbo),e(ju,zbo),e(G,Wbo),e(G,Du),e(Du,pse),e(pse,Qbo),e(Du,Hbo),e(Du,dq),e(dq,Ubo),e(Du,Jbo),e(G,Ybo),e(G,Gu),e(Gu,use),e(use,Kbo),e(Gu,Zbo),e(Gu,cq),e(cq,evo),e(Gu,ovo),e(G,rvo),e(G,Ou),e(Ou,_se),e(_se,tvo),e(Ou,avo),e(Ou,fq),e(fq,nvo),e(Ou,svo),e(G,lvo),e(G,Vu),e(Vu,bse),e(bse,ivo),e(Vu,dvo),e(Vu,mq),e(mq,cvo),e(Vu,fvo),e(G,mvo),e(G,Xu),e(Xu,vse),e(vse,gvo),e(Xu,hvo),e(Xu,gq),e(gq,pvo),e(Xu,uvo),e(G,_vo),e(G,zu),e(zu,Fse),e(Fse,bvo),e(zu,vvo),e(zu,hq),e(hq,Fvo),e(zu,Tvo),e(G,Mvo),e(G,Wu),e(Wu,Tse),e(Tse,Evo),e(Wu,Cvo),e(Wu,pq),e(pq,wvo),e(Wu,Avo),e(G,yvo),e(G,Qu),e(Qu,Mse),e(Mse,Lvo),e(Qu,xvo),e(Qu,uq),e(uq,$vo),e(Qu,kvo),e(G,Svo),e(G,Hu),e(Hu,Ese),e(Ese,Rvo),e(Hu,Bvo),e(Hu,_q),e(_q,Pvo),e(Hu,Ivo),e(G,qvo),e(G,Uu),e(Uu,Cse),e(Cse,Nvo),e(Uu,jvo),e(Uu,bq),e(bq,Dvo),e(Uu,Gvo),e(G,Ovo),e(G,Ju),e(Ju,wse),e(wse,Vvo),e(Ju,Xvo),e(Ju,vq),e(vq,zvo),e(Ju,Wvo),e(G,Qvo),e(G,Yu),e(Yu,Ase),e(Ase,Hvo),e(Yu,Uvo),e(Yu,Fq),e(Fq,Jvo),e(Yu,Yvo),e(G,Kvo),e(G,Ku),e(Ku,yse),e(yse,Zvo),e(Ku,eFo),e(Ku,Tq),e(Tq,oFo),e(Ku,rFo),e(G,tFo),e(G,Zu),e(Zu,Lse),e(Lse,aFo),e(Zu,nFo),e(Zu,Mq),e(Mq,sFo),e(Zu,lFo),e(G,iFo),e(G,e_),e(e_,xse),e(xse,dFo),e(e_,cFo),e(e_,Eq),e(Eq,fFo),e(e_,mFo),e(G,gFo),e(G,o_),e(o_,$se),e($se,hFo),e(o_,pFo),e(o_,Cq),e(Cq,uFo),e(o_,_Fo),e(G,bFo),e(G,r_),e(r_,kse),e(kse,vFo),e(r_,FFo),e(r_,wq),e(wq,TFo),e(r_,MFo),e(G,EFo),e(G,t_),e(t_,Sse),e(Sse,CFo),e(t_,wFo),e(t_,Aq),e(Aq,AFo),e(t_,yFo),e(G,LFo),e(G,a_),e(a_,Rse),e(Rse,xFo),e(a_,$Fo),e(a_,yq),e(yq,kFo),e(a_,SFo),e(G,RFo),e(G,n_),e(n_,Bse),e(Bse,BFo),e(n_,PFo),e(n_,Lq),e(Lq,IFo),e(n_,qFo),e(G,NFo),e(G,s_),e(s_,Pse),e(Pse,jFo),e(s_,DFo),e(s_,xq),e(xq,GFo),e(s_,OFo),e(G,VFo),e(G,l_),e(l_,Ise),e(Ise,XFo),e(l_,zFo),e(l_,$q),e($q,WFo),e(l_,QFo),e(G,HFo),e(G,i_),e(i_,qse),e(qse,UFo),e(i_,JFo),e(i_,kq),e(kq,YFo),e(i_,KFo),e(G,ZFo),e(G,d_),e(d_,Nse),e(Nse,e6o),e(d_,o6o),e(d_,Sq),e(Sq,r6o),e(d_,t6o),e(G,a6o),e(G,c_),e(c_,jse),e(jse,n6o),e(c_,s6o),e(c_,Rq),e(Rq,l6o),e(c_,i6o),e(G,d6o),e(G,f_),e(f_,Dse),e(Dse,c6o),e(f_,f6o),e(f_,Bq),e(Bq,m6o),e(f_,g6o),e(Ue,h6o),e(Ue,m_),e(m_,p6o),e(m_,Gse),e(Gse,u6o),e(m_,_6o),e(m_,Ose),e(Ose,b6o),e(Ue,v6o),M(g_,Ue,null),b(f,$Be,_),b(f,Ei,_),e(Ei,h_),e(h_,Vse),M(n0,Vse,null),e(Ei,F6o),e(Ei,Xse),e(Xse,T6o),b(f,kBe,_),b(f,Lo,_),M(s0,Lo,null),e(Lo,M6o),e(Lo,Ci),e(Ci,E6o),e(Ci,Pq),e(Pq,C6o),e(Ci,w6o),e(Ci,Iq),e(Iq,A6o),e(Ci,y6o),e(Lo,L6o),e(Lo,l0),e(l0,x6o),e(l0,zse),e(zse,$6o),e(l0,k6o),e(Lo,S6o),e(Lo,rt),M(i0,rt,null),e(rt,R6o),e(rt,Wse),e(Wse,B6o),e(rt,P6o),e(rt,wi),e(wi,I6o),e(wi,Qse),e(Qse,q6o),e(wi,N6o),e(wi,qq),e(qq,j6o),e(wi,D6o),e(rt,G6o),M(p_,rt,null),e(Lo,O6o),e(Lo,Je),M(d0,Je,null),e(Je,V6o),e(Je,Hse),e(Hse,X6o),e(Je,z6o),e(Je,Aa),e(Aa,W6o),e(Aa,Use),e(Use,Q6o),e(Aa,H6o),e(Aa,Jse),e(Jse,U6o),e(Aa,J6o),e(Aa,Yse),e(Yse,Y6o),e(Aa,K6o),e(Je,Z6o),e(Je,z),e(z,u_),e(u_,Kse),e(Kse,eTo),e(u_,oTo),e(u_,Nq),e(Nq,rTo),e(u_,tTo),e(z,aTo),e(z,__),e(__,Zse),e(Zse,nTo),e(__,sTo),e(__,jq),e(jq,lTo),e(__,iTo),e(z,dTo),e(z,b_),e(b_,ele),e(ele,cTo),e(b_,fTo),e(b_,Dq),e(Dq,mTo),e(b_,gTo),e(z,hTo),e(z,v_),e(v_,ole),e(ole,pTo),e(v_,uTo),e(v_,Gq),e(Gq,_To),e(v_,bTo),e(z,vTo),e(z,F_),e(F_,rle),e(rle,FTo),e(F_,TTo),e(F_,Oq),e(Oq,MTo),e(F_,ETo),e(z,CTo),e(z,T_),e(T_,tle),e(tle,wTo),e(T_,ATo),e(T_,Vq),e(Vq,yTo),e(T_,LTo),e(z,xTo),e(z,M_),e(M_,ale),e(ale,$To),e(M_,kTo),e(M_,Xq),e(Xq,STo),e(M_,RTo),e(z,BTo),e(z,E_),e(E_,nle),e(nle,PTo),e(E_,ITo),e(E_,zq),e(zq,qTo),e(E_,NTo),e(z,jTo),e(z,C_),e(C_,sle),e(sle,DTo),e(C_,GTo),e(C_,Wq),e(Wq,OTo),e(C_,VTo),e(z,XTo),e(z,w_),e(w_,lle),e(lle,zTo),e(w_,WTo),e(w_,Qq),e(Qq,QTo),e(w_,HTo),e(z,UTo),e(z,A_),e(A_,ile),e(ile,JTo),e(A_,YTo),e(A_,Hq),e(Hq,KTo),e(A_,ZTo),e(z,e8o),e(z,y_),e(y_,dle),e(dle,o8o),e(y_,r8o),e(y_,Uq),e(Uq,t8o),e(y_,a8o),e(z,n8o),e(z,L_),e(L_,cle),e(cle,s8o),e(L_,l8o),e(L_,Jq),e(Jq,i8o),e(L_,d8o),e(z,c8o),e(z,x_),e(x_,fle),e(fle,f8o),e(x_,m8o),e(x_,Yq),e(Yq,g8o),e(x_,h8o),e(z,p8o),e(z,$_),e($_,mle),e(mle,u8o),e($_,_8o),e($_,Kq),e(Kq,b8o),e($_,v8o),e(z,F8o),e(z,k_),e(k_,gle),e(gle,T8o),e(k_,M8o),e(k_,Zq),e(Zq,E8o),e(k_,C8o),e(z,w8o),e(z,S_),e(S_,hle),e(hle,A8o),e(S_,y8o),e(S_,eN),e(eN,L8o),e(S_,x8o),e(z,$8o),e(z,R_),e(R_,ple),e(ple,k8o),e(R_,S8o),e(R_,oN),e(oN,R8o),e(R_,B8o),e(z,P8o),e(z,B_),e(B_,ule),e(ule,I8o),e(B_,q8o),e(B_,rN),e(rN,N8o),e(B_,j8o),e(z,D8o),e(z,P_),e(P_,_le),e(_le,G8o),e(P_,O8o),e(P_,tN),e(tN,V8o),e(P_,X8o),e(z,z8o),e(z,I_),e(I_,ble),e(ble,W8o),e(I_,Q8o),e(I_,aN),e(aN,H8o),e(I_,U8o),e(z,J8o),e(z,q_),e(q_,vle),e(vle,Y8o),e(q_,K8o),e(q_,nN),e(nN,Z8o),e(q_,eMo),e(z,oMo),e(z,N_),e(N_,Fle),e(Fle,rMo),e(N_,tMo),e(N_,sN),e(sN,aMo),e(N_,nMo),e(z,sMo),e(z,j_),e(j_,Tle),e(Tle,lMo),e(j_,iMo),e(j_,lN),e(lN,dMo),e(j_,cMo),e(z,fMo),e(z,D_),e(D_,Mle),e(Mle,mMo),e(D_,gMo),e(D_,iN),e(iN,hMo),e(D_,pMo),e(z,uMo),e(z,G_),e(G_,Ele),e(Ele,_Mo),e(G_,bMo),e(G_,dN),e(dN,vMo),e(G_,FMo),e(z,TMo),e(z,O_),e(O_,Cle),e(Cle,MMo),e(O_,EMo),e(O_,cN),e(cN,CMo),e(O_,wMo),e(z,AMo),e(z,V_),e(V_,wle),e(wle,yMo),e(V_,LMo),e(V_,fN),e(fN,xMo),e(V_,$Mo),e(z,kMo),e(z,X_),e(X_,Ale),e(Ale,SMo),e(X_,RMo),e(X_,mN),e(mN,BMo),e(X_,PMo),e(z,IMo),e(z,z_),e(z_,yle),e(yle,qMo),e(z_,NMo),e(z_,gN),e(gN,jMo),e(z_,DMo),e(z,GMo),e(z,W_),e(W_,Lle),e(Lle,OMo),e(W_,VMo),e(W_,hN),e(hN,XMo),e(W_,zMo),e(z,WMo),e(z,Q_),e(Q_,xle),e(xle,QMo),e(Q_,HMo),e(Q_,pN),e(pN,UMo),e(Q_,JMo),e(z,YMo),e(z,H_),e(H_,$le),e($le,KMo),e(H_,ZMo),e(H_,uN),e(uN,e4o),e(H_,o4o),e(z,r4o),e(z,U_),e(U_,kle),e(kle,t4o),e(U_,a4o),e(U_,_N),e(_N,n4o),e(U_,s4o),e(z,l4o),e(z,J_),e(J_,Sle),e(Sle,i4o),e(J_,d4o),e(J_,bN),e(bN,c4o),e(J_,f4o),e(Je,m4o),e(Je,Y_),e(Y_,g4o),e(Y_,Rle),e(Rle,h4o),e(Y_,p4o),e(Y_,Ble),e(Ble,u4o),e(Je,_4o),M(K_,Je,null),b(f,SBe,_),b(f,Ai,_),e(Ai,Z_),e(Z_,Ple),M(c0,Ple,null),e(Ai,b4o),e(Ai,Ile),e(Ile,v4o),b(f,RBe,_),b(f,xo,_),M(f0,xo,null),e(xo,F4o),e(xo,yi),e(yi,T4o),e(yi,vN),e(vN,M4o),e(yi,E4o),e(yi,FN),e(FN,C4o),e(yi,w4o),e(xo,A4o),e(xo,m0),e(m0,y4o),e(m0,qle),e(qle,L4o),e(m0,x4o),e(xo,$4o),e(xo,tt),M(g0,tt,null),e(tt,k4o),e(tt,Nle),e(Nle,S4o),e(tt,R4o),e(tt,Li),e(Li,B4o),e(Li,jle),e(jle,P4o),e(Li,I4o),e(Li,TN),e(TN,q4o),e(Li,N4o),e(tt,j4o),M(e1,tt,null),e(xo,D4o),e(xo,Ye),M(h0,Ye,null),e(Ye,G4o),e(Ye,Dle),e(Dle,O4o),e(Ye,V4o),e(Ye,ya),e(ya,X4o),e(ya,Gle),e(Gle,z4o),e(ya,W4o),e(ya,Ole),e(Ole,Q4o),e(ya,H4o),e(ya,Vle),e(Vle,U4o),e(ya,J4o),e(Ye,Y4o),e(Ye,W),e(W,o1),e(o1,Xle),e(Xle,K4o),e(o1,Z4o),e(o1,MN),e(MN,eEo),e(o1,oEo),e(W,rEo),e(W,r1),e(r1,zle),e(zle,tEo),e(r1,aEo),e(r1,EN),e(EN,nEo),e(r1,sEo),e(W,lEo),e(W,t1),e(t1,Wle),e(Wle,iEo),e(t1,dEo),e(t1,CN),e(CN,cEo),e(t1,fEo),e(W,mEo),e(W,a1),e(a1,Qle),e(Qle,gEo),e(a1,hEo),e(a1,wN),e(wN,pEo),e(a1,uEo),e(W,_Eo),e(W,n1),e(n1,Hle),e(Hle,bEo),e(n1,vEo),e(n1,AN),e(AN,FEo),e(n1,TEo),e(W,MEo),e(W,s1),e(s1,Ule),e(Ule,EEo),e(s1,CEo),e(s1,yN),e(yN,wEo),e(s1,AEo),e(W,yEo),e(W,l1),e(l1,Jle),e(Jle,LEo),e(l1,xEo),e(l1,LN),e(LN,$Eo),e(l1,kEo),e(W,SEo),e(W,i1),e(i1,Yle),e(Yle,REo),e(i1,BEo),e(i1,xN),e(xN,PEo),e(i1,IEo),e(W,qEo),e(W,d1),e(d1,Kle),e(Kle,NEo),e(d1,jEo),e(d1,$N),e($N,DEo),e(d1,GEo),e(W,OEo),e(W,c1),e(c1,Zle),e(Zle,VEo),e(c1,XEo),e(c1,kN),e(kN,zEo),e(c1,WEo),e(W,QEo),e(W,f1),e(f1,eie),e(eie,HEo),e(f1,UEo),e(f1,SN),e(SN,JEo),e(f1,YEo),e(W,KEo),e(W,m1),e(m1,oie),e(oie,ZEo),e(m1,eCo),e(m1,RN),e(RN,oCo),e(m1,rCo),e(W,tCo),e(W,g1),e(g1,rie),e(rie,aCo),e(g1,nCo),e(g1,BN),e(BN,sCo),e(g1,lCo),e(W,iCo),e(W,h1),e(h1,tie),e(tie,dCo),e(h1,cCo),e(h1,PN),e(PN,fCo),e(h1,mCo),e(W,gCo),e(W,p1),e(p1,aie),e(aie,hCo),e(p1,pCo),e(p1,IN),e(IN,uCo),e(p1,_Co),e(W,bCo),e(W,u1),e(u1,nie),e(nie,vCo),e(u1,FCo),e(u1,qN),e(qN,TCo),e(u1,MCo),e(W,ECo),e(W,_1),e(_1,sie),e(sie,CCo),e(_1,wCo),e(_1,NN),e(NN,ACo),e(_1,yCo),e(W,LCo),e(W,b1),e(b1,lie),e(lie,xCo),e(b1,$Co),e(b1,jN),e(jN,kCo),e(b1,SCo),e(W,RCo),e(W,v1),e(v1,iie),e(iie,BCo),e(v1,PCo),e(v1,DN),e(DN,ICo),e(v1,qCo),e(W,NCo),e(W,F1),e(F1,die),e(die,jCo),e(F1,DCo),e(F1,GN),e(GN,GCo),e(F1,OCo),e(W,VCo),e(W,T1),e(T1,cie),e(cie,XCo),e(T1,zCo),e(T1,ON),e(ON,WCo),e(T1,QCo),e(W,HCo),e(W,M1),e(M1,fie),e(fie,UCo),e(M1,JCo),e(M1,VN),e(VN,YCo),e(M1,KCo),e(W,ZCo),e(W,E1),e(E1,mie),e(mie,e5o),e(E1,o5o),e(E1,XN),e(XN,r5o),e(E1,t5o),e(W,a5o),e(W,C1),e(C1,gie),e(gie,n5o),e(C1,s5o),e(C1,zN),e(zN,l5o),e(C1,i5o),e(W,d5o),e(W,w1),e(w1,hie),e(hie,c5o),e(w1,f5o),e(w1,WN),e(WN,m5o),e(w1,g5o),e(W,h5o),e(W,A1),e(A1,pie),e(pie,p5o),e(A1,u5o),e(A1,QN),e(QN,_5o),e(A1,b5o),e(W,v5o),e(W,y1),e(y1,uie),e(uie,F5o),e(y1,T5o),e(y1,HN),e(HN,M5o),e(y1,E5o),e(W,C5o),e(W,L1),e(L1,_ie),e(_ie,w5o),e(L1,A5o),e(L1,UN),e(UN,y5o),e(L1,L5o),e(W,x5o),e(W,x1),e(x1,bie),e(bie,$5o),e(x1,k5o),e(x1,JN),e(JN,S5o),e(x1,R5o),e(W,B5o),e(W,$1),e($1,vie),e(vie,P5o),e($1,I5o),e($1,YN),e(YN,q5o),e($1,N5o),e(W,j5o),e(W,k1),e(k1,Fie),e(Fie,D5o),e(k1,G5o),e(k1,Tie),e(Tie,O5o),e(k1,V5o),e(W,X5o),e(W,S1),e(S1,Mie),e(Mie,z5o),e(S1,W5o),e(S1,KN),e(KN,Q5o),e(S1,H5o),e(W,U5o),e(W,R1),e(R1,Eie),e(Eie,J5o),e(R1,Y5o),e(R1,ZN),e(ZN,K5o),e(R1,Z5o),e(W,e3o),e(W,B1),e(B1,Cie),e(Cie,o3o),e(B1,r3o),e(B1,ej),e(ej,t3o),e(B1,a3o),e(W,n3o),e(W,P1),e(P1,wie),e(wie,s3o),e(P1,l3o),e(P1,oj),e(oj,i3o),e(P1,d3o),e(Ye,c3o),e(Ye,I1),e(I1,f3o),e(I1,Aie),e(Aie,m3o),e(I1,g3o),e(I1,yie),e(yie,h3o),e(Ye,p3o),M(q1,Ye,null),b(f,BBe,_),b(f,xi,_),e(xi,N1),e(N1,Lie),M(p0,Lie,null),e(xi,u3o),e(xi,xie),e(xie,_3o),b(f,PBe,_),b(f,$o,_),M(u0,$o,null),e($o,b3o),e($o,$i),e($i,v3o),e($i,rj),e(rj,F3o),e($i,T3o),e($i,tj),e(tj,M3o),e($i,E3o),e($o,C3o),e($o,_0),e(_0,w3o),e(_0,$ie),e($ie,A3o),e(_0,y3o),e($o,L3o),e($o,at),M(b0,at,null),e(at,x3o),e(at,kie),e(kie,$3o),e(at,k3o),e(at,ki),e(ki,S3o),e(ki,Sie),e(Sie,R3o),e(ki,B3o),e(ki,aj),e(aj,P3o),e(ki,I3o),e(at,q3o),M(j1,at,null),e($o,N3o),e($o,Ke),M(v0,Ke,null),e(Ke,j3o),e(Ke,Rie),e(Rie,D3o),e(Ke,G3o),e(Ke,La),e(La,O3o),e(La,Bie),e(Bie,V3o),e(La,X3o),e(La,Pie),e(Pie,z3o),e(La,W3o),e(La,Iie),e(Iie,Q3o),e(La,H3o),e(Ke,U3o),e(Ke,he),e(he,D1),e(D1,qie),e(qie,J3o),e(D1,Y3o),e(D1,nj),e(nj,K3o),e(D1,Z3o),e(he,ewo),e(he,G1),e(G1,Nie),e(Nie,owo),e(G1,rwo),e(G1,sj),e(sj,two),e(G1,awo),e(he,nwo),e(he,O1),e(O1,jie),e(jie,swo),e(O1,lwo),e(O1,lj),e(lj,iwo),e(O1,dwo),e(he,cwo),e(he,V1),e(V1,Die),e(Die,fwo),e(V1,mwo),e(V1,ij),e(ij,gwo),e(V1,hwo),e(he,pwo),e(he,X1),e(X1,Gie),e(Gie,uwo),e(X1,_wo),e(X1,dj),e(dj,bwo),e(X1,vwo),e(he,Fwo),e(he,z1),e(z1,Oie),e(Oie,Two),e(z1,Mwo),e(z1,cj),e(cj,Ewo),e(z1,Cwo),e(he,wwo),e(he,W1),e(W1,Vie),e(Vie,Awo),e(W1,ywo),e(W1,fj),e(fj,Lwo),e(W1,xwo),e(he,$wo),e(he,Q1),e(Q1,Xie),e(Xie,kwo),e(Q1,Swo),e(Q1,mj),e(mj,Rwo),e(Q1,Bwo),e(he,Pwo),e(he,H1),e(H1,zie),e(zie,Iwo),e(H1,qwo),e(H1,gj),e(gj,Nwo),e(H1,jwo),e(he,Dwo),e(he,U1),e(U1,Wie),e(Wie,Gwo),e(U1,Owo),e(U1,hj),e(hj,Vwo),e(U1,Xwo),e(he,zwo),e(he,J1),e(J1,Qie),e(Qie,Wwo),e(J1,Qwo),e(J1,pj),e(pj,Hwo),e(J1,Uwo),e(he,Jwo),e(he,Y1),e(Y1,Hie),e(Hie,Ywo),e(Y1,Kwo),e(Y1,uj),e(uj,Zwo),e(Y1,eAo),e(he,oAo),e(he,K1),e(K1,Uie),e(Uie,rAo),e(K1,tAo),e(K1,_j),e(_j,aAo),e(K1,nAo),e(he,sAo),e(he,Z1),e(Z1,Jie),e(Jie,lAo),e(Z1,iAo),e(Z1,bj),e(bj,dAo),e(Z1,cAo),e(he,fAo),e(he,e2),e(e2,Yie),e(Yie,mAo),e(e2,gAo),e(e2,vj),e(vj,hAo),e(e2,pAo),e(he,uAo),e(he,o2),e(o2,Kie),e(Kie,_Ao),e(o2,bAo),e(o2,Fj),e(Fj,vAo),e(o2,FAo),e(he,TAo),e(he,r2),e(r2,Zie),e(Zie,MAo),e(r2,EAo),e(r2,Tj),e(Tj,CAo),e(r2,wAo),e(Ke,AAo),e(Ke,t2),e(t2,yAo),e(t2,ede),e(ede,LAo),e(t2,xAo),e(t2,ode),e(ode,$Ao),e(Ke,kAo),M(a2,Ke,null),b(f,IBe,_),b(f,Si,_),e(Si,n2),e(n2,rde),M(F0,rde,null),e(Si,SAo),e(Si,tde),e(tde,RAo),b(f,qBe,_),b(f,ko,_),M(T0,ko,null),e(ko,BAo),e(ko,Ri),e(Ri,PAo),e(Ri,Mj),e(Mj,IAo),e(Ri,qAo),e(Ri,Ej),e(Ej,NAo),e(Ri,jAo),e(ko,DAo),e(ko,M0),e(M0,GAo),e(M0,ade),e(ade,OAo),e(M0,VAo),e(ko,XAo),e(ko,nt),M(E0,nt,null),e(nt,zAo),e(nt,nde),e(nde,WAo),e(nt,QAo),e(nt,Bi),e(Bi,HAo),e(Bi,sde),e(sde,UAo),e(Bi,JAo),e(Bi,Cj),e(Cj,YAo),e(Bi,KAo),e(nt,ZAo),M(s2,nt,null),e(ko,e0o),e(ko,Ze),M(C0,Ze,null),e(Ze,o0o),e(Ze,lde),e(lde,r0o),e(Ze,t0o),e(Ze,xa),e(xa,a0o),e(xa,ide),e(ide,n0o),e(xa,s0o),e(xa,dde),e(dde,l0o),e(xa,i0o),e(xa,cde),e(cde,d0o),e(xa,c0o),e(Ze,f0o),e(Ze,q),e(q,l2),e(l2,fde),e(fde,m0o),e(l2,g0o),e(l2,wj),e(wj,h0o),e(l2,p0o),e(q,u0o),e(q,i2),e(i2,mde),e(mde,_0o),e(i2,b0o),e(i2,Aj),e(Aj,v0o),e(i2,F0o),e(q,T0o),e(q,d2),e(d2,gde),e(gde,M0o),e(d2,E0o),e(d2,yj),e(yj,C0o),e(d2,w0o),e(q,A0o),e(q,c2),e(c2,hde),e(hde,y0o),e(c2,L0o),e(c2,Lj),e(Lj,x0o),e(c2,$0o),e(q,k0o),e(q,f2),e(f2,pde),e(pde,S0o),e(f2,R0o),e(f2,xj),e(xj,B0o),e(f2,P0o),e(q,I0o),e(q,m2),e(m2,ude),e(ude,q0o),e(m2,N0o),e(m2,$j),e($j,j0o),e(m2,D0o),e(q,G0o),e(q,g2),e(g2,_de),e(_de,O0o),e(g2,V0o),e(g2,kj),e(kj,X0o),e(g2,z0o),e(q,W0o),e(q,h2),e(h2,bde),e(bde,Q0o),e(h2,H0o),e(h2,Sj),e(Sj,U0o),e(h2,J0o),e(q,Y0o),e(q,p2),e(p2,vde),e(vde,K0o),e(p2,Z0o),e(p2,Rj),e(Rj,eyo),e(p2,oyo),e(q,ryo),e(q,u2),e(u2,Fde),e(Fde,tyo),e(u2,ayo),e(u2,Bj),e(Bj,nyo),e(u2,syo),e(q,lyo),e(q,_2),e(_2,Tde),e(Tde,iyo),e(_2,dyo),e(_2,Pj),e(Pj,cyo),e(_2,fyo),e(q,myo),e(q,b2),e(b2,Mde),e(Mde,gyo),e(b2,hyo),e(b2,Ij),e(Ij,pyo),e(b2,uyo),e(q,_yo),e(q,v2),e(v2,Ede),e(Ede,byo),e(v2,vyo),e(v2,qj),e(qj,Fyo),e(v2,Tyo),e(q,Myo),e(q,F2),e(F2,Cde),e(Cde,Eyo),e(F2,Cyo),e(F2,Nj),e(Nj,wyo),e(F2,Ayo),e(q,yyo),e(q,T2),e(T2,wde),e(wde,Lyo),e(T2,xyo),e(T2,jj),e(jj,$yo),e(T2,kyo),e(q,Syo),e(q,M2),e(M2,Ade),e(Ade,Ryo),e(M2,Byo),e(M2,Dj),e(Dj,Pyo),e(M2,Iyo),e(q,qyo),e(q,E2),e(E2,yde),e(yde,Nyo),e(E2,jyo),e(E2,Gj),e(Gj,Dyo),e(E2,Gyo),e(q,Oyo),e(q,C2),e(C2,Lde),e(Lde,Vyo),e(C2,Xyo),e(C2,Oj),e(Oj,zyo),e(C2,Wyo),e(q,Qyo),e(q,w2),e(w2,xde),e(xde,Hyo),e(w2,Uyo),e(w2,Vj),e(Vj,Jyo),e(w2,Yyo),e(q,Kyo),e(q,A2),e(A2,$de),e($de,Zyo),e(A2,eLo),e(A2,Xj),e(Xj,oLo),e(A2,rLo),e(q,tLo),e(q,y2),e(y2,kde),e(kde,aLo),e(y2,nLo),e(y2,zj),e(zj,sLo),e(y2,lLo),e(q,iLo),e(q,L2),e(L2,Sde),e(Sde,dLo),e(L2,cLo),e(L2,Wj),e(Wj,fLo),e(L2,mLo),e(q,gLo),e(q,x2),e(x2,Rde),e(Rde,hLo),e(x2,pLo),e(x2,Qj),e(Qj,uLo),e(x2,_Lo),e(q,bLo),e(q,$2),e($2,Bde),e(Bde,vLo),e($2,FLo),e($2,Hj),e(Hj,TLo),e($2,MLo),e(q,ELo),e(q,k2),e(k2,Pde),e(Pde,CLo),e(k2,wLo),e(k2,Uj),e(Uj,ALo),e(k2,yLo),e(q,LLo),e(q,S2),e(S2,Ide),e(Ide,xLo),e(S2,$Lo),e(S2,Jj),e(Jj,kLo),e(S2,SLo),e(q,RLo),e(q,R2),e(R2,qde),e(qde,BLo),e(R2,PLo),e(R2,Yj),e(Yj,ILo),e(R2,qLo),e(q,NLo),e(q,B2),e(B2,Nde),e(Nde,jLo),e(B2,DLo),e(B2,Kj),e(Kj,GLo),e(B2,OLo),e(q,VLo),e(q,P2),e(P2,jde),e(jde,XLo),e(P2,zLo),e(P2,Zj),e(Zj,WLo),e(P2,QLo),e(q,HLo),e(q,I2),e(I2,Dde),e(Dde,ULo),e(I2,JLo),e(I2,eD),e(eD,YLo),e(I2,KLo),e(q,ZLo),e(q,q2),e(q2,Gde),e(Gde,e7o),e(q2,o7o),e(q2,oD),e(oD,r7o),e(q2,t7o),e(q,a7o),e(q,N2),e(N2,Ode),e(Ode,n7o),e(N2,s7o),e(N2,rD),e(rD,l7o),e(N2,i7o),e(q,d7o),e(q,j2),e(j2,Vde),e(Vde,c7o),e(j2,f7o),e(j2,tD),e(tD,m7o),e(j2,g7o),e(q,h7o),e(q,D2),e(D2,Xde),e(Xde,p7o),e(D2,u7o),e(D2,aD),e(aD,_7o),e(D2,b7o),e(q,v7o),e(q,G2),e(G2,zde),e(zde,F7o),e(G2,T7o),e(G2,nD),e(nD,M7o),e(G2,E7o),e(q,C7o),e(q,O2),e(O2,Wde),e(Wde,w7o),e(O2,A7o),e(O2,sD),e(sD,y7o),e(O2,L7o),e(q,x7o),e(q,V2),e(V2,Qde),e(Qde,$7o),e(V2,k7o),e(V2,lD),e(lD,S7o),e(V2,R7o),e(q,B7o),e(q,X2),e(X2,Hde),e(Hde,P7o),e(X2,I7o),e(X2,iD),e(iD,q7o),e(X2,N7o),e(q,j7o),e(q,z2),e(z2,Ude),e(Ude,D7o),e(z2,G7o),e(z2,dD),e(dD,O7o),e(z2,V7o),e(q,X7o),e(q,W2),e(W2,Jde),e(Jde,z7o),e(W2,W7o),e(W2,cD),e(cD,Q7o),e(W2,H7o),e(q,U7o),e(q,Q2),e(Q2,Yde),e(Yde,J7o),e(Q2,Y7o),e(Q2,fD),e(fD,K7o),e(Q2,Z7o),e(q,exo),e(q,H2),e(H2,Kde),e(Kde,oxo),e(H2,rxo),e(H2,mD),e(mD,txo),e(H2,axo),e(q,nxo),e(q,U2),e(U2,Zde),e(Zde,sxo),e(U2,lxo),e(U2,gD),e(gD,ixo),e(U2,dxo),e(q,cxo),e(q,J2),e(J2,ece),e(ece,fxo),e(J2,mxo),e(J2,hD),e(hD,gxo),e(J2,hxo),e(q,pxo),e(q,Y2),e(Y2,oce),e(oce,uxo),e(Y2,_xo),e(Y2,pD),e(pD,bxo),e(Y2,vxo),e(q,Fxo),e(q,K2),e(K2,rce),e(rce,Txo),e(K2,Mxo),e(K2,uD),e(uD,Exo),e(K2,Cxo),e(q,wxo),e(q,Z2),e(Z2,tce),e(tce,Axo),e(Z2,yxo),e(Z2,_D),e(_D,Lxo),e(Z2,xxo),e(Ze,$xo),e(Ze,eb),e(eb,kxo),e(eb,ace),e(ace,Sxo),e(eb,Rxo),e(eb,nce),e(nce,Bxo),e(Ze,Pxo),M(ob,Ze,null),b(f,NBe,_),b(f,Pi,_),e(Pi,rb),e(rb,sce),M(w0,sce,null),e(Pi,Ixo),e(Pi,lce),e(lce,qxo),b(f,jBe,_),b(f,So,_),M(A0,So,null),e(So,Nxo),e(So,Ii),e(Ii,jxo),e(Ii,bD),e(bD,Dxo),e(Ii,Gxo),e(Ii,vD),e(vD,Oxo),e(Ii,Vxo),e(So,Xxo),e(So,y0),e(y0,zxo),e(y0,ice),e(ice,Wxo),e(y0,Qxo),e(So,Hxo),e(So,st),M(L0,st,null),e(st,Uxo),e(st,dce),e(dce,Jxo),e(st,Yxo),e(st,qi),e(qi,Kxo),e(qi,cce),e(cce,Zxo),e(qi,e9o),e(qi,FD),e(FD,o9o),e(qi,r9o),e(st,t9o),M(tb,st,null),e(So,a9o),e(So,eo),M(x0,eo,null),e(eo,n9o),e(eo,fce),e(fce,s9o),e(eo,l9o),e(eo,$a),e($a,i9o),e($a,mce),e(mce,d9o),e($a,c9o),e($a,gce),e(gce,f9o),e($a,m9o),e($a,hce),e(hce,g9o),e($a,h9o),e(eo,p9o),e(eo,Y),e(Y,ab),e(ab,pce),e(pce,u9o),e(ab,_9o),e(ab,TD),e(TD,b9o),e(ab,v9o),e(Y,F9o),e(Y,nb),e(nb,uce),e(uce,T9o),e(nb,M9o),e(nb,MD),e(MD,E9o),e(nb,C9o),e(Y,w9o),e(Y,sb),e(sb,_ce),e(_ce,A9o),e(sb,y9o),e(sb,ED),e(ED,L9o),e(sb,x9o),e(Y,$9o),e(Y,lb),e(lb,bce),e(bce,k9o),e(lb,S9o),e(lb,CD),e(CD,R9o),e(lb,B9o),e(Y,P9o),e(Y,ib),e(ib,vce),e(vce,I9o),e(ib,q9o),e(ib,wD),e(wD,N9o),e(ib,j9o),e(Y,D9o),e(Y,db),e(db,Fce),e(Fce,G9o),e(db,O9o),e(db,AD),e(AD,V9o),e(db,X9o),e(Y,z9o),e(Y,cb),e(cb,Tce),e(Tce,W9o),e(cb,Q9o),e(cb,yD),e(yD,H9o),e(cb,U9o),e(Y,J9o),e(Y,fb),e(fb,Mce),e(Mce,Y9o),e(fb,K9o),e(fb,LD),e(LD,Z9o),e(fb,e$o),e(Y,o$o),e(Y,mb),e(mb,Ece),e(Ece,r$o),e(mb,t$o),e(mb,xD),e(xD,a$o),e(mb,n$o),e(Y,s$o),e(Y,gb),e(gb,Cce),e(Cce,l$o),e(gb,i$o),e(gb,$D),e($D,d$o),e(gb,c$o),e(Y,f$o),e(Y,hb),e(hb,wce),e(wce,m$o),e(hb,g$o),e(hb,kD),e(kD,h$o),e(hb,p$o),e(Y,u$o),e(Y,pb),e(pb,Ace),e(Ace,_$o),e(pb,b$o),e(pb,SD),e(SD,v$o),e(pb,F$o),e(Y,T$o),e(Y,ub),e(ub,yce),e(yce,M$o),e(ub,E$o),e(ub,RD),e(RD,C$o),e(ub,w$o),e(Y,A$o),e(Y,_b),e(_b,Lce),e(Lce,y$o),e(_b,L$o),e(_b,BD),e(BD,x$o),e(_b,$$o),e(Y,k$o),e(Y,bb),e(bb,xce),e(xce,S$o),e(bb,R$o),e(bb,PD),e(PD,B$o),e(bb,P$o),e(Y,I$o),e(Y,vb),e(vb,$ce),e($ce,q$o),e(vb,N$o),e(vb,ID),e(ID,j$o),e(vb,D$o),e(Y,G$o),e(Y,Fb),e(Fb,kce),e(kce,O$o),e(Fb,V$o),e(Fb,qD),e(qD,X$o),e(Fb,z$o),e(Y,W$o),e(Y,Tb),e(Tb,Sce),e(Sce,Q$o),e(Tb,H$o),e(Tb,ND),e(ND,U$o),e(Tb,J$o),e(Y,Y$o),e(Y,Mb),e(Mb,Rce),e(Rce,K$o),e(Mb,Z$o),e(Mb,jD),e(jD,eko),e(Mb,oko),e(Y,rko),e(Y,Eb),e(Eb,Bce),e(Bce,tko),e(Eb,ako),e(Eb,DD),e(DD,nko),e(Eb,sko),e(Y,lko),e(Y,Cb),e(Cb,Pce),e(Pce,iko),e(Cb,dko),e(Cb,GD),e(GD,cko),e(Cb,fko),e(Y,mko),e(Y,wb),e(wb,Ice),e(Ice,gko),e(wb,hko),e(wb,OD),e(OD,pko),e(wb,uko),e(Y,_ko),e(Y,Ab),e(Ab,qce),e(qce,bko),e(Ab,vko),e(Ab,VD),e(VD,Fko),e(Ab,Tko),e(Y,Mko),e(Y,yb),e(yb,Nce),e(Nce,Eko),e(yb,Cko),e(yb,XD),e(XD,wko),e(yb,Ako),e(Y,yko),e(Y,Lb),e(Lb,jce),e(jce,Lko),e(Lb,xko),e(Lb,zD),e(zD,$ko),e(Lb,kko),e(Y,Sko),e(Y,xb),e(xb,Dce),e(Dce,Rko),e(xb,Bko),e(xb,WD),e(WD,Pko),e(xb,Iko),e(Y,qko),e(Y,$b),e($b,Gce),e(Gce,Nko),e($b,jko),e($b,QD),e(QD,Dko),e($b,Gko),e(Y,Oko),e(Y,kb),e(kb,Oce),e(Oce,Vko),e(kb,Xko),e(kb,HD),e(HD,zko),e(kb,Wko),e(eo,Qko),e(eo,Sb),e(Sb,Hko),e(Sb,Vce),e(Vce,Uko),e(Sb,Jko),e(Sb,Xce),e(Xce,Yko),e(eo,Kko),M(Rb,eo,null),b(f,DBe,_),b(f,Ni,_),e(Ni,Bb),e(Bb,zce),M($0,zce,null),e(Ni,Zko),e(Ni,Wce),e(Wce,eSo),b(f,GBe,_),b(f,Ro,_),M(k0,Ro,null),e(Ro,oSo),e(Ro,ji),e(ji,rSo),e(ji,UD),e(UD,tSo),e(ji,aSo),e(ji,JD),e(JD,nSo),e(ji,sSo),e(Ro,lSo),e(Ro,S0),e(S0,iSo),e(S0,Qce),e(Qce,dSo),e(S0,cSo),e(Ro,fSo),e(Ro,lt),M(R0,lt,null),e(lt,mSo),e(lt,Hce),e(Hce,gSo),e(lt,hSo),e(lt,Di),e(Di,pSo),e(Di,Uce),e(Uce,uSo),e(Di,_So),e(Di,YD),e(YD,bSo),e(Di,vSo),e(lt,FSo),M(Pb,lt,null),e(Ro,TSo),e(Ro,oo),M(B0,oo,null),e(oo,MSo),e(oo,Jce),e(Jce,ESo),e(oo,CSo),e(oo,ka),e(ka,wSo),e(ka,Yce),e(Yce,ASo),e(ka,ySo),e(ka,Kce),e(Kce,LSo),e(ka,xSo),e(ka,Zce),e(Zce,$So),e(ka,kSo),e(oo,SSo),e(oo,Qr),e(Qr,Ib),e(Ib,efe),e(efe,RSo),e(Ib,BSo),e(Ib,KD),e(KD,PSo),e(Ib,ISo),e(Qr,qSo),e(Qr,qb),e(qb,ofe),e(ofe,NSo),e(qb,jSo),e(qb,ZD),e(ZD,DSo),e(qb,GSo),e(Qr,OSo),e(Qr,Nb),e(Nb,rfe),e(rfe,VSo),e(Nb,XSo),e(Nb,eG),e(eG,zSo),e(Nb,WSo),e(Qr,QSo),e(Qr,jb),e(jb,tfe),e(tfe,HSo),e(jb,USo),e(jb,oG),e(oG,JSo),e(jb,YSo),e(Qr,KSo),e(Qr,Db),e(Db,afe),e(afe,ZSo),e(Db,eRo),e(Db,rG),e(rG,oRo),e(Db,rRo),e(oo,tRo),e(oo,Gb),e(Gb,aRo),e(Gb,nfe),e(nfe,nRo),e(Gb,sRo),e(Gb,sfe),e(sfe,lRo),e(oo,iRo),M(Ob,oo,null),b(f,OBe,_),b(f,Gi,_),e(Gi,Vb),e(Vb,lfe),M(P0,lfe,null),e(Gi,dRo),e(Gi,ife),e(ife,cRo),b(f,VBe,_),b(f,Bo,_),M(I0,Bo,null),e(Bo,fRo),e(Bo,Oi),e(Oi,mRo),e(Oi,tG),e(tG,gRo),e(Oi,hRo),e(Oi,aG),e(aG,pRo),e(Oi,uRo),e(Bo,_Ro),e(Bo,q0),e(q0,bRo),e(q0,dfe),e(dfe,vRo),e(q0,FRo),e(Bo,TRo),e(Bo,it),M(N0,it,null),e(it,MRo),e(it,cfe),e(cfe,ERo),e(it,CRo),e(it,Vi),e(Vi,wRo),e(Vi,ffe),e(ffe,ARo),e(Vi,yRo),e(Vi,nG),e(nG,LRo),e(Vi,xRo),e(it,$Ro),M(Xb,it,null),e(Bo,kRo),e(Bo,ro),M(j0,ro,null),e(ro,SRo),e(ro,mfe),e(mfe,RRo),e(ro,BRo),e(ro,Sa),e(Sa,PRo),e(Sa,gfe),e(gfe,IRo),e(Sa,qRo),e(Sa,hfe),e(hfe,NRo),e(Sa,jRo),e(Sa,pfe),e(pfe,DRo),e(Sa,GRo),e(ro,ORo),e(ro,U),e(U,zb),e(zb,ufe),e(ufe,VRo),e(zb,XRo),e(zb,sG),e(sG,zRo),e(zb,WRo),e(U,QRo),e(U,Wb),e(Wb,_fe),e(_fe,HRo),e(Wb,URo),e(Wb,lG),e(lG,JRo),e(Wb,YRo),e(U,KRo),e(U,Qb),e(Qb,bfe),e(bfe,ZRo),e(Qb,eBo),e(Qb,iG),e(iG,oBo),e(Qb,rBo),e(U,tBo),e(U,Hb),e(Hb,vfe),e(vfe,aBo),e(Hb,nBo),e(Hb,dG),e(dG,sBo),e(Hb,lBo),e(U,iBo),e(U,Ub),e(Ub,Ffe),e(Ffe,dBo),e(Ub,cBo),e(Ub,cG),e(cG,fBo),e(Ub,mBo),e(U,gBo),e(U,Jb),e(Jb,Tfe),e(Tfe,hBo),e(Jb,pBo),e(Jb,fG),e(fG,uBo),e(Jb,_Bo),e(U,bBo),e(U,Yb),e(Yb,Mfe),e(Mfe,vBo),e(Yb,FBo),e(Yb,mG),e(mG,TBo),e(Yb,MBo),e(U,EBo),e(U,Kb),e(Kb,Efe),e(Efe,CBo),e(Kb,wBo),e(Kb,gG),e(gG,ABo),e(Kb,yBo),e(U,LBo),e(U,Zb),e(Zb,Cfe),e(Cfe,xBo),e(Zb,$Bo),e(Zb,hG),e(hG,kBo),e(Zb,SBo),e(U,RBo),e(U,ev),e(ev,wfe),e(wfe,BBo),e(ev,PBo),e(ev,pG),e(pG,IBo),e(ev,qBo),e(U,NBo),e(U,ov),e(ov,Afe),e(Afe,jBo),e(ov,DBo),e(ov,uG),e(uG,GBo),e(ov,OBo),e(U,VBo),e(U,rv),e(rv,yfe),e(yfe,XBo),e(rv,zBo),e(rv,_G),e(_G,WBo),e(rv,QBo),e(U,HBo),e(U,tv),e(tv,Lfe),e(Lfe,UBo),e(tv,JBo),e(tv,bG),e(bG,YBo),e(tv,KBo),e(U,ZBo),e(U,av),e(av,xfe),e(xfe,ePo),e(av,oPo),e(av,vG),e(vG,rPo),e(av,tPo),e(U,aPo),e(U,nv),e(nv,$fe),e($fe,nPo),e(nv,sPo),e(nv,FG),e(FG,lPo),e(nv,iPo),e(U,dPo),e(U,sv),e(sv,kfe),e(kfe,cPo),e(sv,fPo),e(sv,TG),e(TG,mPo),e(sv,gPo),e(U,hPo),e(U,lv),e(lv,Sfe),e(Sfe,pPo),e(lv,uPo),e(lv,MG),e(MG,_Po),e(lv,bPo),e(U,vPo),e(U,iv),e(iv,Rfe),e(Rfe,FPo),e(iv,TPo),e(iv,EG),e(EG,MPo),e(iv,EPo),e(U,CPo),e(U,dv),e(dv,Bfe),e(Bfe,wPo),e(dv,APo),e(dv,CG),e(CG,yPo),e(dv,LPo),e(U,xPo),e(U,cv),e(cv,Pfe),e(Pfe,$Po),e(cv,kPo),e(cv,wG),e(wG,SPo),e(cv,RPo),e(U,BPo),e(U,fv),e(fv,Ife),e(Ife,PPo),e(fv,IPo),e(fv,AG),e(AG,qPo),e(fv,NPo),e(U,jPo),e(U,mv),e(mv,qfe),e(qfe,DPo),e(mv,GPo),e(mv,yG),e(yG,OPo),e(mv,VPo),e(U,XPo),e(U,gv),e(gv,Nfe),e(Nfe,zPo),e(gv,WPo),e(gv,LG),e(LG,QPo),e(gv,HPo),e(U,UPo),e(U,hv),e(hv,jfe),e(jfe,JPo),e(hv,YPo),e(hv,xG),e(xG,KPo),e(hv,ZPo),e(U,eIo),e(U,pv),e(pv,Dfe),e(Dfe,oIo),e(pv,rIo),e(pv,$G),e($G,tIo),e(pv,aIo),e(U,nIo),e(U,uv),e(uv,Gfe),e(Gfe,sIo),e(uv,lIo),e(uv,kG),e(kG,iIo),e(uv,dIo),e(U,cIo),e(U,_v),e(_v,Ofe),e(Ofe,fIo),e(_v,mIo),e(_v,SG),e(SG,gIo),e(_v,hIo),e(U,pIo),e(U,bv),e(bv,Vfe),e(Vfe,uIo),e(bv,_Io),e(bv,RG),e(RG,bIo),e(bv,vIo),e(U,FIo),e(U,vv),e(vv,Xfe),e(Xfe,TIo),e(vv,MIo),e(vv,BG),e(BG,EIo),e(vv,CIo),e(U,wIo),e(U,Fv),e(Fv,zfe),e(zfe,AIo),e(Fv,yIo),e(Fv,PG),e(PG,LIo),e(Fv,xIo),e(U,$Io),e(U,Tv),e(Tv,Wfe),e(Wfe,kIo),e(Tv,SIo),e(Tv,IG),e(IG,RIo),e(Tv,BIo),e(U,PIo),e(U,Mv),e(Mv,Qfe),e(Qfe,IIo),e(Mv,qIo),e(Mv,qG),e(qG,NIo),e(Mv,jIo),e(U,DIo),e(U,Ev),e(Ev,Hfe),e(Hfe,GIo),e(Ev,OIo),e(Ev,NG),e(NG,VIo),e(Ev,XIo),e(ro,zIo),e(ro,Cv),e(Cv,WIo),e(Cv,Ufe),e(Ufe,QIo),e(Cv,HIo),e(Cv,Jfe),e(Jfe,UIo),e(ro,JIo),M(wv,ro,null),b(f,XBe,_),b(f,Xi,_),e(Xi,Av),e(Av,Yfe),M(D0,Yfe,null),e(Xi,YIo),e(Xi,Kfe),e(Kfe,KIo),b(f,zBe,_),b(f,Po,_),M(G0,Po,null),e(Po,ZIo),e(Po,zi),e(zi,eqo),e(zi,jG),e(jG,oqo),e(zi,rqo),e(zi,DG),e(DG,tqo),e(zi,aqo),e(Po,nqo),e(Po,O0),e(O0,sqo),e(O0,Zfe),e(Zfe,lqo),e(O0,iqo),e(Po,dqo),e(Po,dt),M(V0,dt,null),e(dt,cqo),e(dt,eme),e(eme,fqo),e(dt,mqo),e(dt,Wi),e(Wi,gqo),e(Wi,ome),e(ome,hqo),e(Wi,pqo),e(Wi,GG),e(GG,uqo),e(Wi,_qo),e(dt,bqo),M(yv,dt,null),e(Po,vqo),e(Po,to),M(X0,to,null),e(to,Fqo),e(to,rme),e(rme,Tqo),e(to,Mqo),e(to,Ra),e(Ra,Eqo),e(Ra,tme),e(tme,Cqo),e(Ra,wqo),e(Ra,ame),e(ame,Aqo),e(Ra,yqo),e(Ra,nme),e(nme,Lqo),e(Ra,xqo),e(to,$qo),e(to,O),e(O,Lv),e(Lv,sme),e(sme,kqo),e(Lv,Sqo),e(Lv,OG),e(OG,Rqo),e(Lv,Bqo),e(O,Pqo),e(O,xv),e(xv,lme),e(lme,Iqo),e(xv,qqo),e(xv,VG),e(VG,Nqo),e(xv,jqo),e(O,Dqo),e(O,$v),e($v,ime),e(ime,Gqo),e($v,Oqo),e($v,XG),e(XG,Vqo),e($v,Xqo),e(O,zqo),e(O,kv),e(kv,dme),e(dme,Wqo),e(kv,Qqo),e(kv,zG),e(zG,Hqo),e(kv,Uqo),e(O,Jqo),e(O,Sv),e(Sv,cme),e(cme,Yqo),e(Sv,Kqo),e(Sv,WG),e(WG,Zqo),e(Sv,eNo),e(O,oNo),e(O,Rv),e(Rv,fme),e(fme,rNo),e(Rv,tNo),e(Rv,QG),e(QG,aNo),e(Rv,nNo),e(O,sNo),e(O,Bv),e(Bv,mme),e(mme,lNo),e(Bv,iNo),e(Bv,HG),e(HG,dNo),e(Bv,cNo),e(O,fNo),e(O,Pv),e(Pv,gme),e(gme,mNo),e(Pv,gNo),e(Pv,UG),e(UG,hNo),e(Pv,pNo),e(O,uNo),e(O,Iv),e(Iv,hme),e(hme,_No),e(Iv,bNo),e(Iv,JG),e(JG,vNo),e(Iv,FNo),e(O,TNo),e(O,qv),e(qv,pme),e(pme,MNo),e(qv,ENo),e(qv,YG),e(YG,CNo),e(qv,wNo),e(O,ANo),e(O,Nv),e(Nv,ume),e(ume,yNo),e(Nv,LNo),e(Nv,KG),e(KG,xNo),e(Nv,$No),e(O,kNo),e(O,jv),e(jv,_me),e(_me,SNo),e(jv,RNo),e(jv,ZG),e(ZG,BNo),e(jv,PNo),e(O,INo),e(O,Dv),e(Dv,bme),e(bme,qNo),e(Dv,NNo),e(Dv,eO),e(eO,jNo),e(Dv,DNo),e(O,GNo),e(O,Gv),e(Gv,vme),e(vme,ONo),e(Gv,VNo),e(Gv,oO),e(oO,XNo),e(Gv,zNo),e(O,WNo),e(O,Ov),e(Ov,Fme),e(Fme,QNo),e(Ov,HNo),e(Ov,rO),e(rO,UNo),e(Ov,JNo),e(O,YNo),e(O,Vv),e(Vv,Tme),e(Tme,KNo),e(Vv,ZNo),e(Vv,tO),e(tO,ejo),e(Vv,ojo),e(O,rjo),e(O,Xv),e(Xv,Mme),e(Mme,tjo),e(Xv,ajo),e(Xv,aO),e(aO,njo),e(Xv,sjo),e(O,ljo),e(O,zv),e(zv,Eme),e(Eme,ijo),e(zv,djo),e(zv,nO),e(nO,cjo),e(zv,fjo),e(O,mjo),e(O,Wv),e(Wv,Cme),e(Cme,gjo),e(Wv,hjo),e(Wv,sO),e(sO,pjo),e(Wv,ujo),e(O,_jo),e(O,Qv),e(Qv,wme),e(wme,bjo),e(Qv,vjo),e(Qv,lO),e(lO,Fjo),e(Qv,Tjo),e(O,Mjo),e(O,Hv),e(Hv,Ame),e(Ame,Ejo),e(Hv,Cjo),e(Hv,iO),e(iO,wjo),e(Hv,Ajo),e(O,yjo),e(O,Uv),e(Uv,yme),e(yme,Ljo),e(Uv,xjo),e(Uv,dO),e(dO,$jo),e(Uv,kjo),e(O,Sjo),e(O,Jv),e(Jv,Lme),e(Lme,Rjo),e(Jv,Bjo),e(Jv,cO),e(cO,Pjo),e(Jv,Ijo),e(O,qjo),e(O,Yv),e(Yv,xme),e(xme,Njo),e(Yv,jjo),e(Yv,fO),e(fO,Djo),e(Yv,Gjo),e(O,Ojo),e(O,Kv),e(Kv,$me),e($me,Vjo),e(Kv,Xjo),e(Kv,mO),e(mO,zjo),e(Kv,Wjo),e(O,Qjo),e(O,Zv),e(Zv,kme),e(kme,Hjo),e(Zv,Ujo),e(Zv,gO),e(gO,Jjo),e(Zv,Yjo),e(O,Kjo),e(O,eF),e(eF,Sme),e(Sme,Zjo),e(eF,eDo),e(eF,hO),e(hO,oDo),e(eF,rDo),e(O,tDo),e(O,oF),e(oF,Rme),e(Rme,aDo),e(oF,nDo),e(oF,pO),e(pO,sDo),e(oF,lDo),e(O,iDo),e(O,rF),e(rF,Bme),e(Bme,dDo),e(rF,cDo),e(rF,uO),e(uO,fDo),e(rF,mDo),e(O,gDo),e(O,tF),e(tF,Pme),e(Pme,hDo),e(tF,pDo),e(tF,_O),e(_O,uDo),e(tF,_Do),e(O,bDo),e(O,aF),e(aF,Ime),e(Ime,vDo),e(aF,FDo),e(aF,bO),e(bO,TDo),e(aF,MDo),e(O,EDo),e(O,nF),e(nF,qme),e(qme,CDo),e(nF,wDo),e(nF,vO),e(vO,ADo),e(nF,yDo),e(O,LDo),e(O,sF),e(sF,Nme),e(Nme,xDo),e(sF,$Do),e(sF,FO),e(FO,kDo),e(sF,SDo),e(O,RDo),e(O,lF),e(lF,jme),e(jme,BDo),e(lF,PDo),e(lF,TO),e(TO,IDo),e(lF,qDo),e(O,NDo),e(O,iF),e(iF,Dme),e(Dme,jDo),e(iF,DDo),e(iF,MO),e(MO,GDo),e(iF,ODo),e(O,VDo),e(O,dF),e(dF,Gme),e(Gme,XDo),e(dF,zDo),e(dF,EO),e(EO,WDo),e(dF,QDo),e(O,HDo),e(O,cF),e(cF,Ome),e(Ome,UDo),e(cF,JDo),e(cF,CO),e(CO,YDo),e(cF,KDo),e(O,ZDo),e(O,fF),e(fF,Vme),e(Vme,eGo),e(fF,oGo),e(fF,wO),e(wO,rGo),e(fF,tGo),e(O,aGo),e(O,mF),e(mF,Xme),e(Xme,nGo),e(mF,sGo),e(mF,AO),e(AO,lGo),e(mF,iGo),e(to,dGo),e(to,gF),e(gF,cGo),e(gF,zme),e(zme,fGo),e(gF,mGo),e(gF,Wme),e(Wme,gGo),e(to,hGo),M(hF,to,null),b(f,WBe,_),b(f,Qi,_),e(Qi,pF),e(pF,Qme),M(z0,Qme,null),e(Qi,pGo),e(Qi,Hme),e(Hme,uGo),b(f,QBe,_),b(f,Io,_),M(W0,Io,null),e(Io,_Go),e(Io,Hi),e(Hi,bGo),e(Hi,yO),e(yO,vGo),e(Hi,FGo),e(Hi,LO),e(LO,TGo),e(Hi,MGo),e(Io,EGo),e(Io,Q0),e(Q0,CGo),e(Q0,Ume),e(Ume,wGo),e(Q0,AGo),e(Io,yGo),e(Io,ct),M(H0,ct,null),e(ct,LGo),e(ct,Jme),e(Jme,xGo),e(ct,$Go),e(ct,Ui),e(Ui,kGo),e(Ui,Yme),e(Yme,SGo),e(Ui,RGo),e(Ui,xO),e(xO,BGo),e(Ui,PGo),e(ct,IGo),M(uF,ct,null),e(Io,qGo),e(Io,ao),M(U0,ao,null),e(ao,NGo),e(ao,Kme),e(Kme,jGo),e(ao,DGo),e(ao,Ba),e(Ba,GGo),e(Ba,Zme),e(Zme,OGo),e(Ba,VGo),e(Ba,ege),e(ege,XGo),e(Ba,zGo),e(Ba,oge),e(oge,WGo),e(Ba,QGo),e(ao,HGo),e(ao,rge),e(rge,_F),e(_F,tge),e(tge,UGo),e(_F,JGo),e(_F,$O),e($O,YGo),e(_F,KGo),e(ao,ZGo),e(ao,bF),e(bF,eOo),e(bF,age),e(age,oOo),e(bF,rOo),e(bF,nge),e(nge,tOo),e(ao,aOo),M(vF,ao,null),b(f,HBe,_),b(f,Ji,_),e(Ji,FF),e(FF,sge),M(J0,sge,null),e(Ji,nOo),e(Ji,lge),e(lge,sOo),b(f,UBe,_),b(f,qo,_),M(Y0,qo,null),e(qo,lOo),e(qo,Yi),e(Yi,iOo),e(Yi,kO),e(kO,dOo),e(Yi,cOo),e(Yi,SO),e(SO,fOo),e(Yi,mOo),e(qo,gOo),e(qo,K0),e(K0,hOo),e(K0,ige),e(ige,pOo),e(K0,uOo),e(qo,_Oo),e(qo,ft),M(Z0,ft,null),e(ft,bOo),e(ft,dge),e(dge,vOo),e(ft,FOo),e(ft,Ki),e(Ki,TOo),e(Ki,cge),e(cge,MOo),e(Ki,EOo),e(Ki,RO),e(RO,COo),e(Ki,wOo),e(ft,AOo),M(TF,ft,null),e(qo,yOo),e(qo,no),M(ey,no,null),e(no,LOo),e(no,fge),e(fge,xOo),e(no,$Oo),e(no,Pa),e(Pa,kOo),e(Pa,mge),e(mge,SOo),e(Pa,ROo),e(Pa,gge),e(gge,BOo),e(Pa,POo),e(Pa,hge),e(hge,IOo),e(Pa,qOo),e(no,NOo),e(no,Fe),e(Fe,MF),e(MF,pge),e(pge,jOo),e(MF,DOo),e(MF,BO),e(BO,GOo),e(MF,OOo),e(Fe,VOo),e(Fe,EF),e(EF,uge),e(uge,XOo),e(EF,zOo),e(EF,PO),e(PO,WOo),e(EF,QOo),e(Fe,HOo),e(Fe,CF),e(CF,_ge),e(_ge,UOo),e(CF,JOo),e(CF,IO),e(IO,YOo),e(CF,KOo),e(Fe,ZOo),e(Fe,Ls),e(Ls,bge),e(bge,eVo),e(Ls,oVo),e(Ls,qO),e(qO,rVo),e(Ls,tVo),e(Ls,NO),e(NO,aVo),e(Ls,nVo),e(Fe,sVo),e(Fe,wF),e(wF,vge),e(vge,lVo),e(wF,iVo),e(wF,jO),e(jO,dVo),e(wF,cVo),e(Fe,fVo),e(Fe,mt),e(mt,Fge),e(Fge,mVo),e(mt,gVo),e(mt,DO),e(DO,hVo),e(mt,pVo),e(mt,GO),e(GO,uVo),e(mt,_Vo),e(mt,OO),e(OO,bVo),e(mt,vVo),e(Fe,FVo),e(Fe,AF),e(AF,Tge),e(Tge,TVo),e(AF,MVo),e(AF,VO),e(VO,EVo),e(AF,CVo),e(Fe,wVo),e(Fe,yF),e(yF,Mge),e(Mge,AVo),e(yF,yVo),e(yF,XO),e(XO,LVo),e(yF,xVo),e(Fe,$Vo),e(Fe,LF),e(LF,Ege),e(Ege,kVo),e(LF,SVo),e(LF,zO),e(zO,RVo),e(LF,BVo),e(Fe,PVo),e(Fe,xF),e(xF,Cge),e(Cge,IVo),e(xF,qVo),e(xF,WO),e(WO,NVo),e(xF,jVo),e(Fe,DVo),e(Fe,$F),e($F,wge),e(wge,GVo),e($F,OVo),e($F,QO),e(QO,VVo),e($F,XVo),e(Fe,zVo),e(Fe,kF),e(kF,Age),e(Age,WVo),e(kF,QVo),e(kF,HO),e(HO,HVo),e(kF,UVo),e(Fe,JVo),e(Fe,SF),e(SF,yge),e(yge,YVo),e(SF,KVo),e(SF,UO),e(UO,ZVo),e(SF,eXo),e(no,oXo),e(no,RF),e(RF,rXo),e(RF,Lge),e(Lge,tXo),e(RF,aXo),e(RF,xge),e(xge,nXo),e(no,sXo),M(BF,no,null),b(f,JBe,_),b(f,Zi,_),e(Zi,PF),e(PF,$ge),M(oy,$ge,null),e(Zi,lXo),e(Zi,kge),e(kge,iXo),b(f,YBe,_),b(f,No,_),M(ry,No,null),e(No,dXo),e(No,ed),e(ed,cXo),e(ed,JO),e(JO,fXo),e(ed,mXo),e(ed,YO),e(YO,gXo),e(ed,hXo),e(No,pXo),e(No,ty),e(ty,uXo),e(ty,Sge),e(Sge,_Xo),e(ty,bXo),e(No,vXo),e(No,gt),M(ay,gt,null),e(gt,FXo),e(gt,Rge),e(Rge,TXo),e(gt,MXo),e(gt,od),e(od,EXo),e(od,Bge),e(Bge,CXo),e(od,wXo),e(od,KO),e(KO,AXo),e(od,yXo),e(gt,LXo),M(IF,gt,null),e(No,xXo),e(No,so),M(ny,so,null),e(so,$Xo),e(so,Pge),e(Pge,kXo),e(so,SXo),e(so,Ia),e(Ia,RXo),e(Ia,Ige),e(Ige,BXo),e(Ia,PXo),e(Ia,qge),e(qge,IXo),e(Ia,qXo),e(Ia,Nge),e(Nge,NXo),e(Ia,jXo),e(so,DXo),e(so,jge),e(jge,qF),e(qF,Dge),e(Dge,GXo),e(qF,OXo),e(qF,ZO),e(ZO,VXo),e(qF,XXo),e(so,zXo),e(so,NF),e(NF,WXo),e(NF,Gge),e(Gge,QXo),e(NF,HXo),e(NF,Oge),e(Oge,UXo),e(so,JXo),M(jF,so,null),b(f,KBe,_),b(f,rd,_),e(rd,DF),e(DF,Vge),M(sy,Vge,null),e(rd,YXo),e(rd,Xge),e(Xge,KXo),b(f,ZBe,_),b(f,jo,_),M(ly,jo,null),e(jo,ZXo),e(jo,td),e(td,ezo),e(td,eV),e(eV,ozo),e(td,rzo),e(td,oV),e(oV,tzo),e(td,azo),e(jo,nzo),e(jo,iy),e(iy,szo),e(iy,zge),e(zge,lzo),e(iy,izo),e(jo,dzo),e(jo,ht),M(dy,ht,null),e(ht,czo),e(ht,Wge),e(Wge,fzo),e(ht,mzo),e(ht,ad),e(ad,gzo),e(ad,Qge),e(Qge,hzo),e(ad,pzo),e(ad,rV),e(rV,uzo),e(ad,_zo),e(ht,bzo),M(GF,ht,null),e(jo,vzo),e(jo,lo),M(cy,lo,null),e(lo,Fzo),e(lo,Hge),e(Hge,Tzo),e(lo,Mzo),e(lo,qa),e(qa,Ezo),e(qa,Uge),e(Uge,Czo),e(qa,wzo),e(qa,Jge),e(Jge,Azo),e(qa,yzo),e(qa,Yge),e(Yge,Lzo),e(qa,xzo),e(lo,$zo),e(lo,ke),e(ke,OF),e(OF,Kge),e(Kge,kzo),e(OF,Szo),e(OF,tV),e(tV,Rzo),e(OF,Bzo),e(ke,Pzo),e(ke,VF),e(VF,Zge),e(Zge,Izo),e(VF,qzo),e(VF,aV),e(aV,Nzo),e(VF,jzo),e(ke,Dzo),e(ke,XF),e(XF,ehe),e(ehe,Gzo),e(XF,Ozo),e(XF,nV),e(nV,Vzo),e(XF,Xzo),e(ke,zzo),e(ke,zF),e(zF,ohe),e(ohe,Wzo),e(zF,Qzo),e(zF,sV),e(sV,Hzo),e(zF,Uzo),e(ke,Jzo),e(ke,WF),e(WF,rhe),e(rhe,Yzo),e(WF,Kzo),e(WF,lV),e(lV,Zzo),e(WF,eWo),e(ke,oWo),e(ke,QF),e(QF,the),e(the,rWo),e(QF,tWo),e(QF,iV),e(iV,aWo),e(QF,nWo),e(ke,sWo),e(ke,HF),e(HF,ahe),e(ahe,lWo),e(HF,iWo),e(HF,dV),e(dV,dWo),e(HF,cWo),e(ke,fWo),e(ke,UF),e(UF,nhe),e(nhe,mWo),e(UF,gWo),e(UF,cV),e(cV,hWo),e(UF,pWo),e(ke,uWo),e(ke,JF),e(JF,she),e(she,_Wo),e(JF,bWo),e(JF,fV),e(fV,vWo),e(JF,FWo),e(lo,TWo),e(lo,YF),e(YF,MWo),e(YF,lhe),e(lhe,EWo),e(YF,CWo),e(YF,ihe),e(ihe,wWo),e(lo,AWo),M(KF,lo,null),b(f,ePe,_),b(f,nd,_),e(nd,ZF),e(ZF,dhe),M(fy,dhe,null),e(nd,yWo),e(nd,che),e(che,LWo),b(f,oPe,_),b(f,Do,_),M(my,Do,null),e(Do,xWo),e(Do,sd),e(sd,$Wo),e(sd,mV),e(mV,kWo),e(sd,SWo),e(sd,gV),e(gV,RWo),e(sd,BWo),e(Do,PWo),e(Do,gy),e(gy,IWo),e(gy,fhe),e(fhe,qWo),e(gy,NWo),e(Do,jWo),e(Do,pt),M(hy,pt,null),e(pt,DWo),e(pt,mhe),e(mhe,GWo),e(pt,OWo),e(pt,ld),e(ld,VWo),e(ld,ghe),e(ghe,XWo),e(ld,zWo),e(ld,hV),e(hV,WWo),e(ld,QWo),e(pt,HWo),M(e6,pt,null),e(Do,UWo),e(Do,io),M(py,io,null),e(io,JWo),e(io,hhe),e(hhe,YWo),e(io,KWo),e(io,Na),e(Na,ZWo),e(Na,phe),e(phe,eQo),e(Na,oQo),e(Na,uhe),e(uhe,rQo),e(Na,tQo),e(Na,_he),e(_he,aQo),e(Na,nQo),e(io,sQo),e(io,Hr),e(Hr,o6),e(o6,bhe),e(bhe,lQo),e(o6,iQo),e(o6,pV),e(pV,dQo),e(o6,cQo),e(Hr,fQo),e(Hr,r6),e(r6,vhe),e(vhe,mQo),e(r6,gQo),e(r6,uV),e(uV,hQo),e(r6,pQo),e(Hr,uQo),e(Hr,t6),e(t6,Fhe),e(Fhe,_Qo),e(t6,bQo),e(t6,_V),e(_V,vQo),e(t6,FQo),e(Hr,TQo),e(Hr,a6),e(a6,The),e(The,MQo),e(a6,EQo),e(a6,bV),e(bV,CQo),e(a6,wQo),e(Hr,AQo),e(Hr,n6),e(n6,Mhe),e(Mhe,yQo),e(n6,LQo),e(n6,vV),e(vV,xQo),e(n6,$Qo),e(io,kQo),e(io,s6),e(s6,SQo),e(s6,Ehe),e(Ehe,RQo),e(s6,BQo),e(s6,Che),e(Che,PQo),e(io,IQo),M(l6,io,null),b(f,rPe,_),b(f,id,_),e(id,i6),e(i6,whe),M(uy,whe,null),e(id,qQo),e(id,Ahe),e(Ahe,NQo),b(f,tPe,_),b(f,Go,_),M(_y,Go,null),e(Go,jQo),e(Go,dd),e(dd,DQo),e(dd,FV),e(FV,GQo),e(dd,OQo),e(dd,TV),e(TV,VQo),e(dd,XQo),e(Go,zQo),e(Go,by),e(by,WQo),e(by,yhe),e(yhe,QQo),e(by,HQo),e(Go,UQo),e(Go,ut),M(vy,ut,null),e(ut,JQo),e(ut,Lhe),e(Lhe,YQo),e(ut,KQo),e(ut,cd),e(cd,ZQo),e(cd,xhe),e(xhe,eHo),e(cd,oHo),e(cd,MV),e(MV,rHo),e(cd,tHo),e(ut,aHo),M(d6,ut,null),e(Go,nHo),e(Go,co),M(Fy,co,null),e(co,sHo),e(co,$he),e($he,lHo),e(co,iHo),e(co,ja),e(ja,dHo),e(ja,khe),e(khe,cHo),e(ja,fHo),e(ja,She),e(She,mHo),e(ja,gHo),e(ja,Rhe),e(Rhe,hHo),e(ja,pHo),e(co,uHo),e(co,Se),e(Se,c6),e(c6,Bhe),e(Bhe,_Ho),e(c6,bHo),e(c6,EV),e(EV,vHo),e(c6,FHo),e(Se,THo),e(Se,f6),e(f6,Phe),e(Phe,MHo),e(f6,EHo),e(f6,CV),e(CV,CHo),e(f6,wHo),e(Se,AHo),e(Se,m6),e(m6,Ihe),e(Ihe,yHo),e(m6,LHo),e(m6,wV),e(wV,xHo),e(m6,$Ho),e(Se,kHo),e(Se,g6),e(g6,qhe),e(qhe,SHo),e(g6,RHo),e(g6,AV),e(AV,BHo),e(g6,PHo),e(Se,IHo),e(Se,h6),e(h6,Nhe),e(Nhe,qHo),e(h6,NHo),e(h6,yV),e(yV,jHo),e(h6,DHo),e(Se,GHo),e(Se,p6),e(p6,jhe),e(jhe,OHo),e(p6,VHo),e(p6,LV),e(LV,XHo),e(p6,zHo),e(Se,WHo),e(Se,u6),e(u6,Dhe),e(Dhe,QHo),e(u6,HHo),e(u6,xV),e(xV,UHo),e(u6,JHo),e(Se,YHo),e(Se,_6),e(_6,Ghe),e(Ghe,KHo),e(_6,ZHo),e(_6,$V),e($V,eUo),e(_6,oUo),e(Se,rUo),e(Se,b6),e(b6,Ohe),e(Ohe,tUo),e(b6,aUo),e(b6,kV),e(kV,nUo),e(b6,sUo),e(co,lUo),e(co,v6),e(v6,iUo),e(v6,Vhe),e(Vhe,dUo),e(v6,cUo),e(v6,Xhe),e(Xhe,fUo),e(co,mUo),M(F6,co,null),b(f,aPe,_),b(f,fd,_),e(fd,T6),e(T6,zhe),M(Ty,zhe,null),e(fd,gUo),e(fd,Whe),e(Whe,hUo),b(f,nPe,_),b(f,Oo,_),M(My,Oo,null),e(Oo,pUo),e(Oo,md),e(md,uUo),e(md,SV),e(SV,_Uo),e(md,bUo),e(md,RV),e(RV,vUo),e(md,FUo),e(Oo,TUo),e(Oo,Ey),e(Ey,MUo),e(Ey,Qhe),e(Qhe,EUo),e(Ey,CUo),e(Oo,wUo),e(Oo,_t),M(Cy,_t,null),e(_t,AUo),e(_t,Hhe),e(Hhe,yUo),e(_t,LUo),e(_t,gd),e(gd,xUo),e(gd,Uhe),e(Uhe,$Uo),e(gd,kUo),e(gd,BV),e(BV,SUo),e(gd,RUo),e(_t,BUo),M(M6,_t,null),e(Oo,PUo),e(Oo,fo),M(wy,fo,null),e(fo,IUo),e(fo,Jhe),e(Jhe,qUo),e(fo,NUo),e(fo,Da),e(Da,jUo),e(Da,Yhe),e(Yhe,DUo),e(Da,GUo),e(Da,Khe),e(Khe,OUo),e(Da,VUo),e(Da,Zhe),e(Zhe,XUo),e(Da,zUo),e(fo,WUo),e(fo,Ay),e(Ay,E6),e(E6,epe),e(epe,QUo),e(E6,HUo),e(E6,PV),e(PV,UUo),e(E6,JUo),e(Ay,YUo),e(Ay,C6),e(C6,ope),e(ope,KUo),e(C6,ZUo),e(C6,IV),e(IV,eJo),e(C6,oJo),e(fo,rJo),e(fo,w6),e(w6,tJo),e(w6,rpe),e(rpe,aJo),e(w6,nJo),e(w6,tpe),e(tpe,sJo),e(fo,lJo),M(A6,fo,null),b(f,sPe,_),b(f,hd,_),e(hd,y6),e(y6,ape),M(yy,ape,null),e(hd,iJo),e(hd,npe),e(npe,dJo),b(f,lPe,_),b(f,Vo,_),M(Ly,Vo,null),e(Vo,cJo),e(Vo,pd),e(pd,fJo),e(pd,qV),e(qV,mJo),e(pd,gJo),e(pd,NV),e(NV,hJo),e(pd,pJo),e(Vo,uJo),e(Vo,xy),e(xy,_Jo),e(xy,spe),e(spe,bJo),e(xy,vJo),e(Vo,FJo),e(Vo,bt),M($y,bt,null),e(bt,TJo),e(bt,lpe),e(lpe,MJo),e(bt,EJo),e(bt,ud),e(ud,CJo),e(ud,ipe),e(ipe,wJo),e(ud,AJo),e(ud,jV),e(jV,yJo),e(ud,LJo),e(bt,xJo),M(L6,bt,null),e(Vo,$Jo),e(Vo,mo),M(ky,mo,null),e(mo,kJo),e(mo,dpe),e(dpe,SJo),e(mo,RJo),e(mo,Ga),e(Ga,BJo),e(Ga,cpe),e(cpe,PJo),e(Ga,IJo),e(Ga,fpe),e(fpe,qJo),e(Ga,NJo),e(Ga,mpe),e(mpe,jJo),e(Ga,DJo),e(mo,GJo),e(mo,Ur),e(Ur,x6),e(x6,gpe),e(gpe,OJo),e(x6,VJo),e(x6,DV),e(DV,XJo),e(x6,zJo),e(Ur,WJo),e(Ur,$6),e($6,hpe),e(hpe,QJo),e($6,HJo),e($6,GV),e(GV,UJo),e($6,JJo),e(Ur,YJo),e(Ur,k6),e(k6,ppe),e(ppe,KJo),e(k6,ZJo),e(k6,OV),e(OV,eYo),e(k6,oYo),e(Ur,rYo),e(Ur,S6),e(S6,upe),e(upe,tYo),e(S6,aYo),e(S6,VV),e(VV,nYo),e(S6,sYo),e(Ur,lYo),e(Ur,R6),e(R6,_pe),e(_pe,iYo),e(R6,dYo),e(R6,XV),e(XV,cYo),e(R6,fYo),e(mo,mYo),e(mo,B6),e(B6,gYo),e(B6,bpe),e(bpe,hYo),e(B6,pYo),e(B6,vpe),e(vpe,uYo),e(mo,_Yo),M(P6,mo,null),b(f,iPe,_),b(f,_d,_),e(_d,I6),e(I6,Fpe),M(Sy,Fpe,null),e(_d,bYo),e(_d,Tpe),e(Tpe,vYo),b(f,dPe,_),b(f,Xo,_),M(Ry,Xo,null),e(Xo,FYo),e(Xo,bd),e(bd,TYo),e(bd,zV),e(zV,MYo),e(bd,EYo),e(bd,WV),e(WV,CYo),e(bd,wYo),e(Xo,AYo),e(Xo,By),e(By,yYo),e(By,Mpe),e(Mpe,LYo),e(By,xYo),e(Xo,$Yo),e(Xo,vt),M(Py,vt,null),e(vt,kYo),e(vt,Epe),e(Epe,SYo),e(vt,RYo),e(vt,vd),e(vd,BYo),e(vd,Cpe),e(Cpe,PYo),e(vd,IYo),e(vd,QV),e(QV,qYo),e(vd,NYo),e(vt,jYo),M(q6,vt,null),e(Xo,DYo),e(Xo,go),M(Iy,go,null),e(go,GYo),e(go,wpe),e(wpe,OYo),e(go,VYo),e(go,Oa),e(Oa,XYo),e(Oa,Ape),e(Ape,zYo),e(Oa,WYo),e(Oa,ype),e(ype,QYo),e(Oa,HYo),e(Oa,Lpe),e(Lpe,UYo),e(Oa,JYo),e(go,YYo),e(go,Fd),e(Fd,N6),e(N6,xpe),e(xpe,KYo),e(N6,ZYo),e(N6,HV),e(HV,eKo),e(N6,oKo),e(Fd,rKo),e(Fd,j6),e(j6,$pe),e($pe,tKo),e(j6,aKo),e(j6,UV),e(UV,nKo),e(j6,sKo),e(Fd,lKo),e(Fd,D6),e(D6,kpe),e(kpe,iKo),e(D6,dKo),e(D6,JV),e(JV,cKo),e(D6,fKo),e(go,mKo),e(go,G6),e(G6,gKo),e(G6,Spe),e(Spe,hKo),e(G6,pKo),e(G6,Rpe),e(Rpe,uKo),e(go,_Ko),M(O6,go,null),b(f,cPe,_),b(f,Td,_),e(Td,V6),e(V6,Bpe),M(qy,Bpe,null),e(Td,bKo),e(Td,Ppe),e(Ppe,vKo),b(f,fPe,_),b(f,zo,_),M(Ny,zo,null),e(zo,FKo),e(zo,Md),e(Md,TKo),e(Md,YV),e(YV,MKo),e(Md,EKo),e(Md,KV),e(KV,CKo),e(Md,wKo),e(zo,AKo),e(zo,jy),e(jy,yKo),e(jy,Ipe),e(Ipe,LKo),e(jy,xKo),e(zo,$Ko),e(zo,Ft),M(Dy,Ft,null),e(Ft,kKo),e(Ft,qpe),e(qpe,SKo),e(Ft,RKo),e(Ft,Ed),e(Ed,BKo),e(Ed,Npe),e(Npe,PKo),e(Ed,IKo),e(Ed,ZV),e(ZV,qKo),e(Ed,NKo),e(Ft,jKo),M(X6,Ft,null),e(zo,DKo),e(zo,ho),M(Gy,ho,null),e(ho,GKo),e(ho,jpe),e(jpe,OKo),e(ho,VKo),e(ho,Va),e(Va,XKo),e(Va,Dpe),e(Dpe,zKo),e(Va,WKo),e(Va,Gpe),e(Gpe,QKo),e(Va,HKo),e(Va,Ope),e(Ope,UKo),e(Va,JKo),e(ho,YKo),e(ho,Vpe),e(Vpe,z6),e(z6,Xpe),e(Xpe,KKo),e(z6,ZKo),e(z6,eX),e(eX,eZo),e(z6,oZo),e(ho,rZo),e(ho,W6),e(W6,tZo),e(W6,zpe),e(zpe,aZo),e(W6,nZo),e(W6,Wpe),e(Wpe,sZo),e(ho,lZo),M(Q6,ho,null),b(f,mPe,_),b(f,Cd,_),e(Cd,H6),e(H6,Qpe),M(Oy,Qpe,null),e(Cd,iZo),e(Cd,Hpe),e(Hpe,dZo),b(f,gPe,_),b(f,Wo,_),M(Vy,Wo,null),e(Wo,cZo),e(Wo,wd),e(wd,fZo),e(wd,oX),e(oX,mZo),e(wd,gZo),e(wd,rX),e(rX,hZo),e(wd,pZo),e(Wo,uZo),e(Wo,Xy),e(Xy,_Zo),e(Xy,Upe),e(Upe,bZo),e(Xy,vZo),e(Wo,FZo),e(Wo,Tt),M(zy,Tt,null),e(Tt,TZo),e(Tt,Jpe),e(Jpe,MZo),e(Tt,EZo),e(Tt,Ad),e(Ad,CZo),e(Ad,Ype),e(Ype,wZo),e(Ad,AZo),e(Ad,tX),e(tX,yZo),e(Ad,LZo),e(Tt,xZo),M(U6,Tt,null),e(Wo,$Zo),e(Wo,po),M(Wy,po,null),e(po,kZo),e(po,Kpe),e(Kpe,SZo),e(po,RZo),e(po,Xa),e(Xa,BZo),e(Xa,Zpe),e(Zpe,PZo),e(Xa,IZo),e(Xa,eue),e(eue,qZo),e(Xa,NZo),e(Xa,oue),e(oue,jZo),e(Xa,DZo),e(po,GZo),e(po,rue),e(rue,J6),e(J6,tue),e(tue,OZo),e(J6,VZo),e(J6,aX),e(aX,XZo),e(J6,zZo),e(po,WZo),e(po,Y6),e(Y6,QZo),e(Y6,aue),e(aue,HZo),e(Y6,UZo),e(Y6,nue),e(nue,JZo),e(po,YZo),M(K6,po,null),b(f,hPe,_),b(f,yd,_),e(yd,Z6),e(Z6,sue),M(Qy,sue,null),e(yd,KZo),e(yd,lue),e(lue,ZZo),b(f,pPe,_),b(f,Qo,_),M(Hy,Qo,null),e(Qo,eer),e(Qo,Ld),e(Ld,oer),e(Ld,nX),e(nX,rer),e(Ld,ter),e(Ld,sX),e(sX,aer),e(Ld,ner),e(Qo,ser),e(Qo,Uy),e(Uy,ler),e(Uy,iue),e(iue,ier),e(Uy,der),e(Qo,cer),e(Qo,Mt),M(Jy,Mt,null),e(Mt,fer),e(Mt,due),e(due,mer),e(Mt,ger),e(Mt,xd),e(xd,her),e(xd,cue),e(cue,per),e(xd,uer),e(xd,lX),e(lX,_er),e(xd,ber),e(Mt,ver),M(eT,Mt,null),e(Qo,Fer),e(Qo,uo),M(Yy,uo,null),e(uo,Ter),e(uo,fue),e(fue,Mer),e(uo,Eer),e(uo,za),e(za,Cer),e(za,mue),e(mue,wer),e(za,Aer),e(za,gue),e(gue,yer),e(za,Ler),e(za,hue),e(hue,xer),e(za,$er),e(uo,ker),e(uo,Wa),e(Wa,oT),e(oT,pue),e(pue,Ser),e(oT,Rer),e(oT,iX),e(iX,Ber),e(oT,Per),e(Wa,Ier),e(Wa,rT),e(rT,uue),e(uue,qer),e(rT,Ner),e(rT,dX),e(dX,jer),e(rT,Der),e(Wa,Ger),e(Wa,tT),e(tT,_ue),e(_ue,Oer),e(tT,Ver),e(tT,cX),e(cX,Xer),e(tT,zer),e(Wa,Wer),e(Wa,aT),e(aT,bue),e(bue,Qer),e(aT,Her),e(aT,fX),e(fX,Uer),e(aT,Jer),e(uo,Yer),e(uo,nT),e(nT,Ker),e(nT,vue),e(vue,Zer),e(nT,eor),e(nT,Fue),e(Fue,oor),e(uo,ror),M(sT,uo,null),b(f,uPe,_),b(f,$d,_),e($d,lT),e(lT,Tue),M(Ky,Tue,null),e($d,tor),e($d,Mue),e(Mue,aor),b(f,_Pe,_),b(f,Ho,_),M(Zy,Ho,null),e(Ho,nor),e(Ho,kd),e(kd,sor),e(kd,mX),e(mX,lor),e(kd,ior),e(kd,gX),e(gX,dor),e(kd,cor),e(Ho,mor),e(Ho,eL),e(eL,gor),e(eL,Eue),e(Eue,hor),e(eL,por),e(Ho,uor),e(Ho,Et),M(oL,Et,null),e(Et,_or),e(Et,Cue),e(Cue,bor),e(Et,vor),e(Et,Sd),e(Sd,For),e(Sd,wue),e(wue,Tor),e(Sd,Mor),e(Sd,hX),e(hX,Eor),e(Sd,Cor),e(Et,wor),M(iT,Et,null),e(Ho,Aor),e(Ho,_o),M(rL,_o,null),e(_o,yor),e(_o,Aue),e(Aue,Lor),e(_o,xor),e(_o,Qa),e(Qa,$or),e(Qa,yue),e(yue,kor),e(Qa,Sor),e(Qa,Lue),e(Lue,Ror),e(Qa,Bor),e(Qa,xue),e(xue,Por),e(Qa,Ior),e(_o,qor),e(_o,$ue),e($ue,dT),e(dT,kue),e(kue,Nor),e(dT,jor),e(dT,pX),e(pX,Dor),e(dT,Gor),e(_o,Oor),e(_o,cT),e(cT,Vor),e(cT,Sue),e(Sue,Xor),e(cT,zor),e(cT,Rue),e(Rue,Wor),e(_o,Qor),M(fT,_o,null),b(f,bPe,_),b(f,Rd,_),e(Rd,mT),e(mT,Bue),M(tL,Bue,null),e(Rd,Hor),e(Rd,Pue),e(Pue,Uor),b(f,vPe,_),b(f,Uo,_),M(aL,Uo,null),e(Uo,Jor),e(Uo,Bd),e(Bd,Yor),e(Bd,uX),e(uX,Kor),e(Bd,Zor),e(Bd,_X),e(_X,err),e(Bd,orr),e(Uo,rrr),e(Uo,nL),e(nL,trr),e(nL,Iue),e(Iue,arr),e(nL,nrr),e(Uo,srr),e(Uo,Ct),M(sL,Ct,null),e(Ct,lrr),e(Ct,que),e(que,irr),e(Ct,drr),e(Ct,Pd),e(Pd,crr),e(Pd,Nue),e(Nue,frr),e(Pd,mrr),e(Pd,bX),e(bX,grr),e(Pd,hrr),e(Ct,prr),M(gT,Ct,null),e(Uo,urr),e(Uo,Mr),M(lL,Mr,null),e(Mr,_rr),e(Mr,jue),e(jue,brr),e(Mr,vrr),e(Mr,Ha),e(Ha,Frr),e(Ha,Due),e(Due,Trr),e(Ha,Mrr),e(Ha,Gue),e(Gue,Err),e(Ha,Crr),e(Ha,Oue),e(Oue,wrr),e(Ha,Arr),e(Mr,yrr),e(Mr,j),e(j,hT),e(hT,Vue),e(Vue,Lrr),e(hT,xrr),e(hT,vX),e(vX,$rr),e(hT,krr),e(j,Srr),e(j,pT),e(pT,Xue),e(Xue,Rrr),e(pT,Brr),e(pT,FX),e(FX,Prr),e(pT,Irr),e(j,qrr),e(j,uT),e(uT,zue),e(zue,Nrr),e(uT,jrr),e(uT,TX),e(TX,Drr),e(uT,Grr),e(j,Orr),e(j,_T),e(_T,Wue),e(Wue,Vrr),e(_T,Xrr),e(_T,MX),e(MX,zrr),e(_T,Wrr),e(j,Qrr),e(j,bT),e(bT,Que),e(Que,Hrr),e(bT,Urr),e(bT,EX),e(EX,Jrr),e(bT,Yrr),e(j,Krr),e(j,vT),e(vT,Hue),e(Hue,Zrr),e(vT,etr),e(vT,CX),e(CX,otr),e(vT,rtr),e(j,ttr),e(j,FT),e(FT,Uue),e(Uue,atr),e(FT,ntr),e(FT,wX),e(wX,str),e(FT,ltr),e(j,itr),e(j,TT),e(TT,Jue),e(Jue,dtr),e(TT,ctr),e(TT,AX),e(AX,ftr),e(TT,mtr),e(j,gtr),e(j,MT),e(MT,Yue),e(Yue,htr),e(MT,ptr),e(MT,yX),e(yX,utr),e(MT,_tr),e(j,btr),e(j,ET),e(ET,Kue),e(Kue,vtr),e(ET,Ftr),e(ET,LX),e(LX,Ttr),e(ET,Mtr),e(j,Etr),e(j,CT),e(CT,Zue),e(Zue,Ctr),e(CT,wtr),e(CT,xX),e(xX,Atr),e(CT,ytr),e(j,Ltr),e(j,wT),e(wT,e_e),e(e_e,xtr),e(wT,$tr),e(wT,$X),e($X,ktr),e(wT,Str),e(j,Rtr),e(j,AT),e(AT,o_e),e(o_e,Btr),e(AT,Ptr),e(AT,kX),e(kX,Itr),e(AT,qtr),e(j,Ntr),e(j,yT),e(yT,r_e),e(r_e,jtr),e(yT,Dtr),e(yT,SX),e(SX,Gtr),e(yT,Otr),e(j,Vtr),e(j,LT),e(LT,t_e),e(t_e,Xtr),e(LT,ztr),e(LT,RX),e(RX,Wtr),e(LT,Qtr),e(j,Htr),e(j,xT),e(xT,a_e),e(a_e,Utr),e(xT,Jtr),e(xT,BX),e(BX,Ytr),e(xT,Ktr),e(j,Ztr),e(j,xs),e(xs,n_e),e(n_e,ear),e(xs,oar),e(xs,PX),e(PX,rar),e(xs,tar),e(xs,IX),e(IX,aar),e(xs,nar),e(j,sar),e(j,$T),e($T,s_e),e(s_e,lar),e($T,iar),e($T,qX),e(qX,dar),e($T,car),e(j,far),e(j,kT),e(kT,l_e),e(l_e,mar),e(kT,gar),e(kT,NX),e(NX,har),e(kT,par),e(j,uar),e(j,ST),e(ST,i_e),e(i_e,_ar),e(ST,bar),e(ST,jX),e(jX,Far),e(ST,Tar),e(j,Mar),e(j,RT),e(RT,d_e),e(d_e,Ear),e(RT,Car),e(RT,DX),e(DX,war),e(RT,Aar),e(j,yar),e(j,BT),e(BT,c_e),e(c_e,Lar),e(BT,xar),e(BT,GX),e(GX,$ar),e(BT,kar),e(j,Sar),e(j,PT),e(PT,f_e),e(f_e,Rar),e(PT,Bar),e(PT,OX),e(OX,Par),e(PT,Iar),e(j,qar),e(j,IT),e(IT,m_e),e(m_e,Nar),e(IT,jar),e(IT,VX),e(VX,Dar),e(IT,Gar),e(j,Oar),e(j,qT),e(qT,g_e),e(g_e,Var),e(qT,Xar),e(qT,XX),e(XX,zar),e(qT,War),e(j,Qar),e(j,NT),e(NT,h_e),e(h_e,Har),e(NT,Uar),e(NT,zX),e(zX,Jar),e(NT,Yar),e(j,Kar),e(j,jT),e(jT,p_e),e(p_e,Zar),e(jT,enr),e(jT,WX),e(WX,onr),e(jT,rnr),e(j,tnr),e(j,DT),e(DT,u_e),e(u_e,anr),e(DT,nnr),e(DT,QX),e(QX,snr),e(DT,lnr),e(j,inr),e(j,GT),e(GT,__e),e(__e,dnr),e(GT,cnr),e(GT,HX),e(HX,fnr),e(GT,mnr),e(j,gnr),e(j,OT),e(OT,b_e),e(b_e,hnr),e(OT,pnr),e(OT,UX),e(UX,unr),e(OT,_nr),e(j,bnr),e(j,VT),e(VT,v_e),e(v_e,vnr),e(VT,Fnr),e(VT,JX),e(JX,Tnr),e(VT,Mnr),e(j,Enr),e(j,XT),e(XT,F_e),e(F_e,Cnr),e(XT,wnr),e(XT,YX),e(YX,Anr),e(XT,ynr),e(j,Lnr),e(j,zT),e(zT,T_e),e(T_e,xnr),e(zT,$nr),e(zT,KX),e(KX,knr),e(zT,Snr),e(j,Rnr),e(j,WT),e(WT,M_e),e(M_e,Bnr),e(WT,Pnr),e(WT,ZX),e(ZX,Inr),e(WT,qnr),e(j,Nnr),e(j,QT),e(QT,E_e),e(E_e,jnr),e(QT,Dnr),e(QT,ez),e(ez,Gnr),e(QT,Onr),e(j,Vnr),e(j,HT),e(HT,C_e),e(C_e,Xnr),e(HT,znr),e(HT,oz),e(oz,Wnr),e(HT,Qnr),e(j,Hnr),e(j,UT),e(UT,w_e),e(w_e,Unr),e(UT,Jnr),e(UT,rz),e(rz,Ynr),e(UT,Knr),e(j,Znr),e(j,JT),e(JT,A_e),e(A_e,esr),e(JT,osr),e(JT,tz),e(tz,rsr),e(JT,tsr),e(j,asr),e(j,YT),e(YT,y_e),e(y_e,nsr),e(YT,ssr),e(YT,az),e(az,lsr),e(YT,isr),e(j,dsr),e(j,KT),e(KT,L_e),e(L_e,csr),e(KT,fsr),e(KT,nz),e(nz,msr),e(KT,gsr),e(j,hsr),e(j,ZT),e(ZT,x_e),e(x_e,psr),e(ZT,usr),e(ZT,sz),e(sz,_sr),e(ZT,bsr),e(j,vsr),e(j,e8),e(e8,$_e),e($_e,Fsr),e(e8,Tsr),e(e8,lz),e(lz,Msr),e(e8,Esr),e(j,Csr),e(j,o8),e(o8,k_e),e(k_e,wsr),e(o8,Asr),e(o8,iz),e(iz,ysr),e(o8,Lsr),e(j,xsr),e(j,r8),e(r8,S_e),e(S_e,$sr),e(r8,ksr),e(r8,dz),e(dz,Ssr),e(r8,Rsr),e(Mr,Bsr),M(t8,Mr,null),b(f,FPe,_),b(f,Id,_),e(Id,a8),e(a8,R_e),M(iL,R_e,null),e(Id,Psr),e(Id,B_e),e(B_e,Isr),b(f,TPe,_),b(f,Jo,_),M(dL,Jo,null),e(Jo,qsr),e(Jo,qd),e(qd,Nsr),e(qd,cz),e(cz,jsr),e(qd,Dsr),e(qd,fz),e(fz,Gsr),e(qd,Osr),e(Jo,Vsr),e(Jo,cL),e(cL,Xsr),e(cL,P_e),e(P_e,zsr),e(cL,Wsr),e(Jo,Qsr),e(Jo,wt),M(fL,wt,null),e(wt,Hsr),e(wt,I_e),e(I_e,Usr),e(wt,Jsr),e(wt,Nd),e(Nd,Ysr),e(Nd,q_e),e(q_e,Ksr),e(Nd,Zsr),e(Nd,mz),e(mz,elr),e(Nd,olr),e(wt,rlr),M(n8,wt,null),e(Jo,tlr),e(Jo,Er),M(mL,Er,null),e(Er,alr),e(Er,N_e),e(N_e,nlr),e(Er,slr),e(Er,Ua),e(Ua,llr),e(Ua,j_e),e(j_e,ilr),e(Ua,dlr),e(Ua,D_e),e(D_e,clr),e(Ua,flr),e(Ua,G_e),e(G_e,mlr),e(Ua,glr),e(Er,hlr),e(Er,ne),e(ne,s8),e(s8,O_e),e(O_e,plr),e(s8,ulr),e(s8,gz),e(gz,_lr),e(s8,blr),e(ne,vlr),e(ne,l8),e(l8,V_e),e(V_e,Flr),e(l8,Tlr),e(l8,hz),e(hz,Mlr),e(l8,Elr),e(ne,Clr),e(ne,i8),e(i8,X_e),e(X_e,wlr),e(i8,Alr),e(i8,pz),e(pz,ylr),e(i8,Llr),e(ne,xlr),e(ne,d8),e(d8,z_e),e(z_e,$lr),e(d8,klr),e(d8,uz),e(uz,Slr),e(d8,Rlr),e(ne,Blr),e(ne,c8),e(c8,W_e),e(W_e,Plr),e(c8,Ilr),e(c8,_z),e(_z,qlr),e(c8,Nlr),e(ne,jlr),e(ne,f8),e(f8,Q_e),e(Q_e,Dlr),e(f8,Glr),e(f8,bz),e(bz,Olr),e(f8,Vlr),e(ne,Xlr),e(ne,m8),e(m8,H_e),e(H_e,zlr),e(m8,Wlr),e(m8,vz),e(vz,Qlr),e(m8,Hlr),e(ne,Ulr),e(ne,g8),e(g8,U_e),e(U_e,Jlr),e(g8,Ylr),e(g8,Fz),e(Fz,Klr),e(g8,Zlr),e(ne,eir),e(ne,h8),e(h8,J_e),e(J_e,oir),e(h8,rir),e(h8,Tz),e(Tz,tir),e(h8,air),e(ne,nir),e(ne,p8),e(p8,Y_e),e(Y_e,sir),e(p8,lir),e(p8,Mz),e(Mz,iir),e(p8,dir),e(ne,cir),e(ne,u8),e(u8,K_e),e(K_e,fir),e(u8,mir),e(u8,Ez),e(Ez,gir),e(u8,hir),e(ne,pir),e(ne,_8),e(_8,Z_e),e(Z_e,uir),e(_8,_ir),e(_8,Cz),e(Cz,bir),e(_8,vir),e(ne,Fir),e(ne,b8),e(b8,e1e),e(e1e,Tir),e(b8,Mir),e(b8,wz),e(wz,Eir),e(b8,Cir),e(ne,wir),e(ne,v8),e(v8,o1e),e(o1e,Air),e(v8,yir),e(v8,Az),e(Az,Lir),e(v8,xir),e(ne,$ir),e(ne,F8),e(F8,r1e),e(r1e,kir),e(F8,Sir),e(F8,yz),e(yz,Rir),e(F8,Bir),e(ne,Pir),e(ne,T8),e(T8,t1e),e(t1e,Iir),e(T8,qir),e(T8,Lz),e(Lz,Nir),e(T8,jir),e(ne,Dir),e(ne,M8),e(M8,a1e),e(a1e,Gir),e(M8,Oir),e(M8,xz),e(xz,Vir),e(M8,Xir),e(ne,zir),e(ne,E8),e(E8,n1e),e(n1e,Wir),e(E8,Qir),e(E8,$z),e($z,Hir),e(E8,Uir),e(ne,Jir),e(ne,C8),e(C8,s1e),e(s1e,Yir),e(C8,Kir),e(C8,kz),e(kz,Zir),e(C8,edr),e(ne,odr),e(ne,w8),e(w8,l1e),e(l1e,rdr),e(w8,tdr),e(w8,Sz),e(Sz,adr),e(w8,ndr),e(ne,sdr),e(ne,A8),e(A8,i1e),e(i1e,ldr),e(A8,idr),e(A8,Rz),e(Rz,ddr),e(A8,cdr),e(ne,fdr),e(ne,y8),e(y8,d1e),e(d1e,mdr),e(y8,gdr),e(y8,Bz),e(Bz,hdr),e(y8,pdr),e(ne,udr),e(ne,L8),e(L8,c1e),e(c1e,_dr),e(L8,bdr),e(L8,Pz),e(Pz,vdr),e(L8,Fdr),e(Er,Tdr),M(x8,Er,null),b(f,MPe,_),b(f,jd,_),e(jd,$8),e($8,f1e),M(gL,f1e,null),e(jd,Mdr),e(jd,m1e),e(m1e,Edr),b(f,EPe,_),b(f,Yo,_),M(hL,Yo,null),e(Yo,Cdr),e(Yo,Dd),e(Dd,wdr),e(Dd,Iz),e(Iz,Adr),e(Dd,ydr),e(Dd,qz),e(qz,Ldr),e(Dd,xdr),e(Yo,$dr),e(Yo,pL),e(pL,kdr),e(pL,g1e),e(g1e,Sdr),e(pL,Rdr),e(Yo,Bdr),e(Yo,At),M(uL,At,null),e(At,Pdr),e(At,h1e),e(h1e,Idr),e(At,qdr),e(At,Gd),e(Gd,Ndr),e(Gd,p1e),e(p1e,jdr),e(Gd,Ddr),e(Gd,Nz),e(Nz,Gdr),e(Gd,Odr),e(At,Vdr),M(k8,At,null),e(Yo,Xdr),e(Yo,Cr),M(_L,Cr,null),e(Cr,zdr),e(Cr,u1e),e(u1e,Wdr),e(Cr,Qdr),e(Cr,Ja),e(Ja,Hdr),e(Ja,_1e),e(_1e,Udr),e(Ja,Jdr),e(Ja,b1e),e(b1e,Ydr),e(Ja,Kdr),e(Ja,v1e),e(v1e,Zdr),e(Ja,ecr),e(Cr,ocr),e(Cr,Te),e(Te,S8),e(S8,F1e),e(F1e,rcr),e(S8,tcr),e(S8,jz),e(jz,acr),e(S8,ncr),e(Te,scr),e(Te,R8),e(R8,T1e),e(T1e,lcr),e(R8,icr),e(R8,Dz),e(Dz,dcr),e(R8,ccr),e(Te,fcr),e(Te,B8),e(B8,M1e),e(M1e,mcr),e(B8,gcr),e(B8,Gz),e(Gz,hcr),e(B8,pcr),e(Te,ucr),e(Te,P8),e(P8,E1e),e(E1e,_cr),e(P8,bcr),e(P8,Oz),e(Oz,vcr),e(P8,Fcr),e(Te,Tcr),e(Te,I8),e(I8,C1e),e(C1e,Mcr),e(I8,Ecr),e(I8,Vz),e(Vz,Ccr),e(I8,wcr),e(Te,Acr),e(Te,q8),e(q8,w1e),e(w1e,ycr),e(q8,Lcr),e(q8,Xz),e(Xz,xcr),e(q8,$cr),e(Te,kcr),e(Te,N8),e(N8,A1e),e(A1e,Scr),e(N8,Rcr),e(N8,zz),e(zz,Bcr),e(N8,Pcr),e(Te,Icr),e(Te,j8),e(j8,y1e),e(y1e,qcr),e(j8,Ncr),e(j8,Wz),e(Wz,jcr),e(j8,Dcr),e(Te,Gcr),e(Te,D8),e(D8,L1e),e(L1e,Ocr),e(D8,Vcr),e(D8,Qz),e(Qz,Xcr),e(D8,zcr),e(Te,Wcr),e(Te,G8),e(G8,x1e),e(x1e,Qcr),e(G8,Hcr),e(G8,Hz),e(Hz,Ucr),e(G8,Jcr),e(Te,Ycr),e(Te,O8),e(O8,$1e),e($1e,Kcr),e(O8,Zcr),e(O8,Uz),e(Uz,efr),e(O8,ofr),e(Te,rfr),e(Te,V8),e(V8,k1e),e(k1e,tfr),e(V8,afr),e(V8,Jz),e(Jz,nfr),e(V8,sfr),e(Cr,lfr),M(X8,Cr,null),b(f,CPe,_),b(f,Od,_),e(Od,z8),e(z8,S1e),M(bL,S1e,null),e(Od,ifr),e(Od,R1e),e(R1e,dfr),b(f,wPe,_),b(f,Ko,_),M(vL,Ko,null),e(Ko,cfr),e(Ko,Vd),e(Vd,ffr),e(Vd,Yz),e(Yz,mfr),e(Vd,gfr),e(Vd,Kz),e(Kz,hfr),e(Vd,pfr),e(Ko,ufr),e(Ko,FL),e(FL,_fr),e(FL,B1e),e(B1e,bfr),e(FL,vfr),e(Ko,Ffr),e(Ko,yt),M(TL,yt,null),e(yt,Tfr),e(yt,P1e),e(P1e,Mfr),e(yt,Efr),e(yt,Xd),e(Xd,Cfr),e(Xd,I1e),e(I1e,wfr),e(Xd,Afr),e(Xd,Zz),e(Zz,yfr),e(Xd,Lfr),e(yt,xfr),M(W8,yt,null),e(Ko,$fr),e(Ko,wr),M(ML,wr,null),e(wr,kfr),e(wr,q1e),e(q1e,Sfr),e(wr,Rfr),e(wr,Ya),e(Ya,Bfr),e(Ya,N1e),e(N1e,Pfr),e(Ya,Ifr),e(Ya,j1e),e(j1e,qfr),e(Ya,Nfr),e(Ya,D1e),e(D1e,jfr),e(Ya,Dfr),e(wr,Gfr),e(wr,EL),e(EL,Q8),e(Q8,G1e),e(G1e,Ofr),e(Q8,Vfr),e(Q8,eW),e(eW,Xfr),e(Q8,zfr),e(EL,Wfr),e(EL,H8),e(H8,O1e),e(O1e,Qfr),e(H8,Hfr),e(H8,oW),e(oW,Ufr),e(H8,Jfr),e(wr,Yfr),M(U8,wr,null),b(f,APe,_),b(f,zd,_),e(zd,J8),e(J8,V1e),M(CL,V1e,null),e(zd,Kfr),e(zd,X1e),e(X1e,Zfr),b(f,yPe,_),b(f,Zo,_),M(wL,Zo,null),e(Zo,emr),e(Zo,Wd),e(Wd,omr),e(Wd,rW),e(rW,rmr),e(Wd,tmr),e(Wd,tW),e(tW,amr),e(Wd,nmr),e(Zo,smr),e(Zo,AL),e(AL,lmr),e(AL,z1e),e(z1e,imr),e(AL,dmr),e(Zo,cmr),e(Zo,Lt),M(yL,Lt,null),e(Lt,fmr),e(Lt,W1e),e(W1e,mmr),e(Lt,gmr),e(Lt,Qd),e(Qd,hmr),e(Qd,Q1e),e(Q1e,pmr),e(Qd,umr),e(Qd,aW),e(aW,_mr),e(Qd,bmr),e(Lt,vmr),M(Y8,Lt,null),e(Zo,Fmr),e(Zo,Ar),M(LL,Ar,null),e(Ar,Tmr),e(Ar,H1e),e(H1e,Mmr),e(Ar,Emr),e(Ar,Ka),e(Ka,Cmr),e(Ka,U1e),e(U1e,wmr),e(Ka,Amr),e(Ka,J1e),e(J1e,ymr),e(Ka,Lmr),e(Ka,Y1e),e(Y1e,xmr),e(Ka,$mr),e(Ar,kmr),e(Ar,ie),e(ie,K8),e(K8,K1e),e(K1e,Smr),e(K8,Rmr),e(K8,nW),e(nW,Bmr),e(K8,Pmr),e(ie,Imr),e(ie,Z8),e(Z8,Z1e),e(Z1e,qmr),e(Z8,Nmr),e(Z8,sW),e(sW,jmr),e(Z8,Dmr),e(ie,Gmr),e(ie,eM),e(eM,e2e),e(e2e,Omr),e(eM,Vmr),e(eM,lW),e(lW,Xmr),e(eM,zmr),e(ie,Wmr),e(ie,oM),e(oM,o2e),e(o2e,Qmr),e(oM,Hmr),e(oM,iW),e(iW,Umr),e(oM,Jmr),e(ie,Ymr),e(ie,rM),e(rM,r2e),e(r2e,Kmr),e(rM,Zmr),e(rM,dW),e(dW,egr),e(rM,ogr),e(ie,rgr),e(ie,tM),e(tM,t2e),e(t2e,tgr),e(tM,agr),e(tM,cW),e(cW,ngr),e(tM,sgr),e(ie,lgr),e(ie,aM),e(aM,a2e),e(a2e,igr),e(aM,dgr),e(aM,fW),e(fW,cgr),e(aM,fgr),e(ie,mgr),e(ie,nM),e(nM,n2e),e(n2e,ggr),e(nM,hgr),e(nM,mW),e(mW,pgr),e(nM,ugr),e(ie,_gr),e(ie,sM),e(sM,s2e),e(s2e,bgr),e(sM,vgr),e(sM,gW),e(gW,Fgr),e(sM,Tgr),e(ie,Mgr),e(ie,lM),e(lM,l2e),e(l2e,Egr),e(lM,Cgr),e(lM,hW),e(hW,wgr),e(lM,Agr),e(ie,ygr),e(ie,iM),e(iM,i2e),e(i2e,Lgr),e(iM,xgr),e(iM,pW),e(pW,$gr),e(iM,kgr),e(ie,Sgr),e(ie,dM),e(dM,d2e),e(d2e,Rgr),e(dM,Bgr),e(dM,uW),e(uW,Pgr),e(dM,Igr),e(ie,qgr),e(ie,cM),e(cM,c2e),e(c2e,Ngr),e(cM,jgr),e(cM,_W),e(_W,Dgr),e(cM,Ggr),e(ie,Ogr),e(ie,fM),e(fM,f2e),e(f2e,Vgr),e(fM,Xgr),e(fM,bW),e(bW,zgr),e(fM,Wgr),e(ie,Qgr),e(ie,mM),e(mM,m2e),e(m2e,Hgr),e(mM,Ugr),e(mM,vW),e(vW,Jgr),e(mM,Ygr),e(ie,Kgr),e(ie,gM),e(gM,g2e),e(g2e,Zgr),e(gM,ehr),e(gM,FW),e(FW,ohr),e(gM,rhr),e(ie,thr),e(ie,hM),e(hM,h2e),e(h2e,ahr),e(hM,nhr),e(hM,TW),e(TW,shr),e(hM,lhr),e(ie,ihr),e(ie,pM),e(pM,p2e),e(p2e,dhr),e(pM,chr),e(pM,MW),e(MW,fhr),e(pM,mhr),e(ie,ghr),e(ie,uM),e(uM,u2e),e(u2e,hhr),e(uM,phr),e(uM,EW),e(EW,uhr),e(uM,_hr),e(ie,bhr),e(ie,_M),e(_M,_2e),e(_2e,vhr),e(_M,Fhr),e(_M,CW),e(CW,Thr),e(_M,Mhr),e(Ar,Ehr),M(bM,Ar,null),b(f,LPe,_),b(f,Hd,_),e(Hd,vM),e(vM,b2e),M(xL,b2e,null),e(Hd,Chr),e(Hd,v2e),e(v2e,whr),b(f,xPe,_),b(f,er,_),M($L,er,null),e(er,Ahr),e(er,Ud),e(Ud,yhr),e(Ud,wW),e(wW,Lhr),e(Ud,xhr),e(Ud,AW),e(AW,$hr),e(Ud,khr),e(er,Shr),e(er,kL),e(kL,Rhr),e(kL,F2e),e(F2e,Bhr),e(kL,Phr),e(er,Ihr),e(er,xt),M(SL,xt,null),e(xt,qhr),e(xt,T2e),e(T2e,Nhr),e(xt,jhr),e(xt,Jd),e(Jd,Dhr),e(Jd,M2e),e(M2e,Ghr),e(Jd,Ohr),e(Jd,yW),e(yW,Vhr),e(Jd,Xhr),e(xt,zhr),M(FM,xt,null),e(er,Whr),e(er,yr),M(RL,yr,null),e(yr,Qhr),e(yr,E2e),e(E2e,Hhr),e(yr,Uhr),e(yr,Za),e(Za,Jhr),e(Za,C2e),e(C2e,Yhr),e(Za,Khr),e(Za,w2e),e(w2e,Zhr),e(Za,epr),e(Za,A2e),e(A2e,opr),e(Za,rpr),e(yr,tpr),e(yr,ye),e(ye,TM),e(TM,y2e),e(y2e,apr),e(TM,npr),e(TM,LW),e(LW,spr),e(TM,lpr),e(ye,ipr),e(ye,MM),e(MM,L2e),e(L2e,dpr),e(MM,cpr),e(MM,xW),e(xW,fpr),e(MM,mpr),e(ye,gpr),e(ye,EM),e(EM,x2e),e(x2e,hpr),e(EM,ppr),e(EM,$W),e($W,upr),e(EM,_pr),e(ye,bpr),e(ye,CM),e(CM,$2e),e($2e,vpr),e(CM,Fpr),e(CM,kW),e(kW,Tpr),e(CM,Mpr),e(ye,Epr),e(ye,wM),e(wM,k2e),e(k2e,Cpr),e(wM,wpr),e(wM,SW),e(SW,Apr),e(wM,ypr),e(ye,Lpr),e(ye,AM),e(AM,S2e),e(S2e,xpr),e(AM,$pr),e(AM,RW),e(RW,kpr),e(AM,Spr),e(ye,Rpr),e(ye,yM),e(yM,R2e),e(R2e,Bpr),e(yM,Ppr),e(yM,BW),e(BW,Ipr),e(yM,qpr),e(ye,Npr),e(ye,LM),e(LM,B2e),e(B2e,jpr),e(LM,Dpr),e(LM,PW),e(PW,Gpr),e(LM,Opr),e(ye,Vpr),e(ye,xM),e(xM,P2e),e(P2e,Xpr),e(xM,zpr),e(xM,IW),e(IW,Wpr),e(xM,Qpr),e(ye,Hpr),e(ye,$M),e($M,I2e),e(I2e,Upr),e($M,Jpr),e($M,qW),e(qW,Ypr),e($M,Kpr),e(yr,Zpr),M(kM,yr,null),b(f,$Pe,_),b(f,Yd,_),e(Yd,SM),e(SM,q2e),M(BL,q2e,null),e(Yd,eur),e(Yd,N2e),e(N2e,our),b(f,kPe,_),b(f,or,_),M(PL,or,null),e(or,rur),e(or,Kd),e(Kd,tur),e(Kd,NW),e(NW,aur),e(Kd,nur),e(Kd,jW),e(jW,sur),e(Kd,lur),e(or,iur),e(or,IL),e(IL,dur),e(IL,j2e),e(j2e,cur),e(IL,fur),e(or,mur),e(or,$t),M(qL,$t,null),e($t,gur),e($t,D2e),e(D2e,hur),e($t,pur),e($t,Zd),e(Zd,uur),e(Zd,G2e),e(G2e,_ur),e(Zd,bur),e(Zd,DW),e(DW,vur),e(Zd,Fur),e($t,Tur),M(RM,$t,null),e(or,Mur),e(or,Lr),M(NL,Lr,null),e(Lr,Eur),e(Lr,O2e),e(O2e,Cur),e(Lr,wur),e(Lr,en),e(en,Aur),e(en,V2e),e(V2e,yur),e(en,Lur),e(en,X2e),e(X2e,xur),e(en,$ur),e(en,z2e),e(z2e,kur),e(en,Sur),e(Lr,Rur),e(Lr,Z),e(Z,BM),e(BM,W2e),e(W2e,Bur),e(BM,Pur),e(BM,GW),e(GW,Iur),e(BM,qur),e(Z,Nur),e(Z,PM),e(PM,Q2e),e(Q2e,jur),e(PM,Dur),e(PM,OW),e(OW,Gur),e(PM,Our),e(Z,Vur),e(Z,IM),e(IM,H2e),e(H2e,Xur),e(IM,zur),e(IM,VW),e(VW,Wur),e(IM,Qur),e(Z,Hur),e(Z,qM),e(qM,U2e),e(U2e,Uur),e(qM,Jur),e(qM,XW),e(XW,Yur),e(qM,Kur),e(Z,Zur),e(Z,NM),e(NM,J2e),e(J2e,e_r),e(NM,o_r),e(NM,zW),e(zW,r_r),e(NM,t_r),e(Z,a_r),e(Z,jM),e(jM,Y2e),e(Y2e,n_r),e(jM,s_r),e(jM,WW),e(WW,l_r),e(jM,i_r),e(Z,d_r),e(Z,DM),e(DM,K2e),e(K2e,c_r),e(DM,f_r),e(DM,QW),e(QW,m_r),e(DM,g_r),e(Z,h_r),e(Z,GM),e(GM,Z2e),e(Z2e,p_r),e(GM,u_r),e(GM,HW),e(HW,__r),e(GM,b_r),e(Z,v_r),e(Z,OM),e(OM,ebe),e(ebe,F_r),e(OM,T_r),e(OM,UW),e(UW,M_r),e(OM,E_r),e(Z,C_r),e(Z,VM),e(VM,obe),e(obe,w_r),e(VM,A_r),e(VM,JW),e(JW,y_r),e(VM,L_r),e(Z,x_r),e(Z,XM),e(XM,rbe),e(rbe,$_r),e(XM,k_r),e(XM,YW),e(YW,S_r),e(XM,R_r),e(Z,B_r),e(Z,zM),e(zM,tbe),e(tbe,P_r),e(zM,I_r),e(zM,KW),e(KW,q_r),e(zM,N_r),e(Z,j_r),e(Z,WM),e(WM,abe),e(abe,D_r),e(WM,G_r),e(WM,ZW),e(ZW,O_r),e(WM,V_r),e(Z,X_r),e(Z,QM),e(QM,nbe),e(nbe,z_r),e(QM,W_r),e(QM,eQ),e(eQ,Q_r),e(QM,H_r),e(Z,U_r),e(Z,HM),e(HM,sbe),e(sbe,J_r),e(HM,Y_r),e(HM,oQ),e(oQ,K_r),e(HM,Z_r),e(Z,e1r),e(Z,UM),e(UM,lbe),e(lbe,o1r),e(UM,r1r),e(UM,rQ),e(rQ,t1r),e(UM,a1r),e(Z,n1r),e(Z,JM),e(JM,ibe),e(ibe,s1r),e(JM,l1r),e(JM,tQ),e(tQ,i1r),e(JM,d1r),e(Z,c1r),e(Z,YM),e(YM,dbe),e(dbe,f1r),e(YM,m1r),e(YM,aQ),e(aQ,g1r),e(YM,h1r),e(Z,p1r),e(Z,KM),e(KM,cbe),e(cbe,u1r),e(KM,_1r),e(KM,nQ),e(nQ,b1r),e(KM,v1r),e(Z,F1r),e(Z,ZM),e(ZM,fbe),e(fbe,T1r),e(ZM,M1r),e(ZM,sQ),e(sQ,E1r),e(ZM,C1r),e(Z,w1r),e(Z,e4),e(e4,mbe),e(mbe,A1r),e(e4,y1r),e(e4,lQ),e(lQ,L1r),e(e4,x1r),e(Z,$1r),e(Z,o4),e(o4,gbe),e(gbe,k1r),e(o4,S1r),e(o4,iQ),e(iQ,R1r),e(o4,B1r),e(Z,P1r),e(Z,r4),e(r4,hbe),e(hbe,I1r),e(r4,q1r),e(r4,dQ),e(dQ,N1r),e(r4,j1r),e(Z,D1r),e(Z,t4),e(t4,pbe),e(pbe,G1r),e(t4,O1r),e(t4,cQ),e(cQ,V1r),e(t4,X1r),e(Z,z1r),e(Z,a4),e(a4,ube),e(ube,W1r),e(a4,Q1r),e(a4,fQ),e(fQ,H1r),e(a4,U1r),e(Z,J1r),e(Z,n4),e(n4,_be),e(_be,Y1r),e(n4,K1r),e(n4,mQ),e(mQ,Z1r),e(n4,e2r),e(Lr,o2r),M(s4,Lr,null),b(f,SPe,_),b(f,ec,_),e(ec,l4),e(l4,bbe),M(jL,bbe,null),e(ec,r2r),e(ec,vbe),e(vbe,t2r),b(f,RPe,_),b(f,rr,_),M(DL,rr,null),e(rr,a2r),e(rr,oc),e(oc,n2r),e(oc,gQ),e(gQ,s2r),e(oc,l2r),e(oc,hQ),e(hQ,i2r),e(oc,d2r),e(rr,c2r),e(rr,GL),e(GL,f2r),e(GL,Fbe),e(Fbe,m2r),e(GL,g2r),e(rr,h2r),e(rr,kt),M(OL,kt,null),e(kt,p2r),e(kt,Tbe),e(Tbe,u2r),e(kt,_2r),e(kt,rc),e(rc,b2r),e(rc,Mbe),e(Mbe,v2r),e(rc,F2r),e(rc,pQ),e(pQ,T2r),e(rc,M2r),e(kt,E2r),M(i4,kt,null),e(rr,C2r),e(rr,xr),M(VL,xr,null),e(xr,w2r),e(xr,Ebe),e(Ebe,A2r),e(xr,y2r),e(xr,on),e(on,L2r),e(on,Cbe),e(Cbe,x2r),e(on,$2r),e(on,wbe),e(wbe,k2r),e(on,S2r),e(on,Abe),e(Abe,R2r),e(on,B2r),e(xr,P2r),e(xr,pe),e(pe,d4),e(d4,ybe),e(ybe,I2r),e(d4,q2r),e(d4,uQ),e(uQ,N2r),e(d4,j2r),e(pe,D2r),e(pe,c4),e(c4,Lbe),e(Lbe,G2r),e(c4,O2r),e(c4,_Q),e(_Q,V2r),e(c4,X2r),e(pe,z2r),e(pe,f4),e(f4,xbe),e(xbe,W2r),e(f4,Q2r),e(f4,bQ),e(bQ,H2r),e(f4,U2r),e(pe,J2r),e(pe,m4),e(m4,$be),e($be,Y2r),e(m4,K2r),e(m4,vQ),e(vQ,Z2r),e(m4,ebr),e(pe,obr),e(pe,g4),e(g4,kbe),e(kbe,rbr),e(g4,tbr),e(g4,FQ),e(FQ,abr),e(g4,nbr),e(pe,sbr),e(pe,h4),e(h4,Sbe),e(Sbe,lbr),e(h4,ibr),e(h4,TQ),e(TQ,dbr),e(h4,cbr),e(pe,fbr),e(pe,p4),e(p4,Rbe),e(Rbe,mbr),e(p4,gbr),e(p4,MQ),e(MQ,hbr),e(p4,pbr),e(pe,ubr),e(pe,u4),e(u4,Bbe),e(Bbe,_br),e(u4,bbr),e(u4,EQ),e(EQ,vbr),e(u4,Fbr),e(pe,Tbr),e(pe,_4),e(_4,Pbe),e(Pbe,Mbr),e(_4,Ebr),e(_4,CQ),e(CQ,Cbr),e(_4,wbr),e(pe,Abr),e(pe,b4),e(b4,Ibe),e(Ibe,ybr),e(b4,Lbr),e(b4,wQ),e(wQ,xbr),e(b4,$br),e(pe,kbr),e(pe,v4),e(v4,qbe),e(qbe,Sbr),e(v4,Rbr),e(v4,AQ),e(AQ,Bbr),e(v4,Pbr),e(pe,Ibr),e(pe,F4),e(F4,Nbe),e(Nbe,qbr),e(F4,Nbr),e(F4,yQ),e(yQ,jbr),e(F4,Dbr),e(pe,Gbr),e(pe,T4),e(T4,jbe),e(jbe,Obr),e(T4,Vbr),e(T4,LQ),e(LQ,Xbr),e(T4,zbr),e(pe,Wbr),e(pe,M4),e(M4,Dbe),e(Dbe,Qbr),e(M4,Hbr),e(M4,xQ),e(xQ,Ubr),e(M4,Jbr),e(pe,Ybr),e(pe,E4),e(E4,Gbe),e(Gbe,Kbr),e(E4,Zbr),e(E4,$Q),e($Q,evr),e(E4,ovr),e(pe,rvr),e(pe,C4),e(C4,Obe),e(Obe,tvr),e(C4,avr),e(C4,kQ),e(kQ,nvr),e(C4,svr),e(pe,lvr),e(pe,w4),e(w4,Vbe),e(Vbe,ivr),e(w4,dvr),e(w4,SQ),e(SQ,cvr),e(w4,fvr),e(xr,mvr),M(A4,xr,null),b(f,BPe,_),b(f,tc,_),e(tc,y4),e(y4,Xbe),M(XL,Xbe,null),e(tc,gvr),e(tc,zbe),e(zbe,hvr),b(f,PPe,_),b(f,tr,_),M(zL,tr,null),e(tr,pvr),e(tr,ac),e(ac,uvr),e(ac,RQ),e(RQ,_vr),e(ac,bvr),e(ac,BQ),e(BQ,vvr),e(ac,Fvr),e(tr,Tvr),e(tr,WL),e(WL,Mvr),e(WL,Wbe),e(Wbe,Evr),e(WL,Cvr),e(tr,wvr),e(tr,St),M(QL,St,null),e(St,Avr),e(St,Qbe),e(Qbe,yvr),e(St,Lvr),e(St,nc),e(nc,xvr),e(nc,Hbe),e(Hbe,$vr),e(nc,kvr),e(nc,PQ),e(PQ,Svr),e(nc,Rvr),e(St,Bvr),M(L4,St,null),e(tr,Pvr),e(tr,$r),M(HL,$r,null),e($r,Ivr),e($r,Ube),e(Ube,qvr),e($r,Nvr),e($r,rn),e(rn,jvr),e(rn,Jbe),e(Jbe,Dvr),e(rn,Gvr),e(rn,Ybe),e(Ybe,Ovr),e(rn,Vvr),e(rn,Kbe),e(Kbe,Xvr),e(rn,zvr),e($r,Wvr),e($r,Zbe),e(Zbe,x4),e(x4,eve),e(eve,Qvr),e(x4,Hvr),e(x4,IQ),e(IQ,Uvr),e(x4,Jvr),e($r,Yvr),M($4,$r,null),b(f,IPe,_),b(f,sc,_),e(sc,k4),e(k4,ove),M(UL,ove,null),e(sc,Kvr),e(sc,rve),e(rve,Zvr),b(f,qPe,_),b(f,ar,_),M(JL,ar,null),e(ar,eFr),e(ar,lc),e(lc,oFr),e(lc,qQ),e(qQ,rFr),e(lc,tFr),e(lc,NQ),e(NQ,aFr),e(lc,nFr),e(ar,sFr),e(ar,YL),e(YL,lFr),e(YL,tve),e(tve,iFr),e(YL,dFr),e(ar,cFr),e(ar,Rt),M(KL,Rt,null),e(Rt,fFr),e(Rt,ave),e(ave,mFr),e(Rt,gFr),e(Rt,ic),e(ic,hFr),e(ic,nve),e(nve,pFr),e(ic,uFr),e(ic,jQ),e(jQ,_Fr),e(ic,bFr),e(Rt,vFr),M(S4,Rt,null),e(ar,FFr),e(ar,kr),M(ZL,kr,null),e(kr,TFr),e(kr,sve),e(sve,MFr),e(kr,EFr),e(kr,tn),e(tn,CFr),e(tn,lve),e(lve,wFr),e(tn,AFr),e(tn,ive),e(ive,yFr),e(tn,LFr),e(tn,dve),e(dve,xFr),e(tn,$Fr),e(kr,kFr),e(kr,de),e(de,R4),e(R4,cve),e(cve,SFr),e(R4,RFr),e(R4,DQ),e(DQ,BFr),e(R4,PFr),e(de,IFr),e(de,B4),e(B4,fve),e(fve,qFr),e(B4,NFr),e(B4,GQ),e(GQ,jFr),e(B4,DFr),e(de,GFr),e(de,P4),e(P4,mve),e(mve,OFr),e(P4,VFr),e(P4,OQ),e(OQ,XFr),e(P4,zFr),e(de,WFr),e(de,I4),e(I4,gve),e(gve,QFr),e(I4,HFr),e(I4,VQ),e(VQ,UFr),e(I4,JFr),e(de,YFr),e(de,q4),e(q4,hve),e(hve,KFr),e(q4,ZFr),e(q4,XQ),e(XQ,e6r),e(q4,o6r),e(de,r6r),e(de,N4),e(N4,pve),e(pve,t6r),e(N4,a6r),e(N4,zQ),e(zQ,n6r),e(N4,s6r),e(de,l6r),e(de,j4),e(j4,uve),e(uve,i6r),e(j4,d6r),e(j4,WQ),e(WQ,c6r),e(j4,f6r),e(de,m6r),e(de,D4),e(D4,_ve),e(_ve,g6r),e(D4,h6r),e(D4,QQ),e(QQ,p6r),e(D4,u6r),e(de,_6r),e(de,G4),e(G4,bve),e(bve,b6r),e(G4,v6r),e(G4,HQ),e(HQ,F6r),e(G4,T6r),e(de,M6r),e(de,O4),e(O4,vve),e(vve,E6r),e(O4,C6r),e(O4,UQ),e(UQ,w6r),e(O4,A6r),e(de,y6r),e(de,V4),e(V4,Fve),e(Fve,L6r),e(V4,x6r),e(V4,JQ),e(JQ,$6r),e(V4,k6r),e(de,S6r),e(de,X4),e(X4,Tve),e(Tve,R6r),e(X4,B6r),e(X4,YQ),e(YQ,P6r),e(X4,I6r),e(de,q6r),e(de,z4),e(z4,Mve),e(Mve,N6r),e(z4,j6r),e(z4,KQ),e(KQ,D6r),e(z4,G6r),e(de,O6r),e(de,W4),e(W4,Eve),e(Eve,V6r),e(W4,X6r),e(W4,ZQ),e(ZQ,z6r),e(W4,W6r),e(de,Q6r),e(de,Q4),e(Q4,Cve),e(Cve,H6r),e(Q4,U6r),e(Q4,eH),e(eH,J6r),e(Q4,Y6r),e(de,K6r),e(de,H4),e(H4,wve),e(wve,Z6r),e(H4,eTr),e(H4,oH),e(oH,oTr),e(H4,rTr),e(de,tTr),e(de,U4),e(U4,Ave),e(Ave,aTr),e(U4,nTr),e(U4,rH),e(rH,sTr),e(U4,lTr),e(de,iTr),e(de,J4),e(J4,yve),e(yve,dTr),e(J4,cTr),e(J4,tH),e(tH,fTr),e(J4,mTr),e(de,gTr),e(de,Y4),e(Y4,Lve),e(Lve,hTr),e(Y4,pTr),e(Y4,aH),e(aH,uTr),e(Y4,_Tr),e(de,bTr),e(de,K4),e(K4,xve),e(xve,vTr),e(K4,FTr),e(K4,nH),e(nH,TTr),e(K4,MTr),e(kr,ETr),M(Z4,kr,null),b(f,NPe,_),b(f,dc,_),e(dc,eE),e(eE,$ve),M(e7,$ve,null),e(dc,CTr),e(dc,kve),e(kve,wTr),b(f,jPe,_),b(f,nr,_),M(o7,nr,null),e(nr,ATr),e(nr,cc),e(cc,yTr),e(cc,sH),e(sH,LTr),e(cc,xTr),e(cc,lH),e(lH,$Tr),e(cc,kTr),e(nr,STr),e(nr,r7),e(r7,RTr),e(r7,Sve),e(Sve,BTr),e(r7,PTr),e(nr,ITr),e(nr,Bt),M(t7,Bt,null),e(Bt,qTr),e(Bt,Rve),e(Rve,NTr),e(Bt,jTr),e(Bt,fc),e(fc,DTr),e(fc,Bve),e(Bve,GTr),e(fc,OTr),e(fc,iH),e(iH,VTr),e(fc,XTr),e(Bt,zTr),M(oE,Bt,null),e(nr,WTr),e(nr,Sr),M(a7,Sr,null),e(Sr,QTr),e(Sr,Pve),e(Pve,HTr),e(Sr,UTr),e(Sr,an),e(an,JTr),e(an,Ive),e(Ive,YTr),e(an,KTr),e(an,qve),e(qve,ZTr),e(an,e8r),e(an,Nve),e(Nve,o8r),e(an,r8r),e(Sr,t8r),e(Sr,ce),e(ce,rE),e(rE,jve),e(jve,a8r),e(rE,n8r),e(rE,dH),e(dH,s8r),e(rE,l8r),e(ce,i8r),e(ce,tE),e(tE,Dve),e(Dve,d8r),e(tE,c8r),e(tE,cH),e(cH,f8r),e(tE,m8r),e(ce,g8r),e(ce,aE),e(aE,Gve),e(Gve,h8r),e(aE,p8r),e(aE,fH),e(fH,u8r),e(aE,_8r),e(ce,b8r),e(ce,nE),e(nE,Ove),e(Ove,v8r),e(nE,F8r),e(nE,mH),e(mH,T8r),e(nE,M8r),e(ce,E8r),e(ce,sE),e(sE,Vve),e(Vve,C8r),e(sE,w8r),e(sE,gH),e(gH,A8r),e(sE,y8r),e(ce,L8r),e(ce,lE),e(lE,Xve),e(Xve,x8r),e(lE,$8r),e(lE,hH),e(hH,k8r),e(lE,S8r),e(ce,R8r),e(ce,iE),e(iE,zve),e(zve,B8r),e(iE,P8r),e(iE,pH),e(pH,I8r),e(iE,q8r),e(ce,N8r),e(ce,dE),e(dE,Wve),e(Wve,j8r),e(dE,D8r),e(dE,uH),e(uH,G8r),e(dE,O8r),e(ce,V8r),e(ce,cE),e(cE,Qve),e(Qve,X8r),e(cE,z8r),e(cE,_H),e(_H,W8r),e(cE,Q8r),e(ce,H8r),e(ce,fE),e(fE,Hve),e(Hve,U8r),e(fE,J8r),e(fE,bH),e(bH,Y8r),e(fE,K8r),e(ce,Z8r),e(ce,mE),e(mE,Uve),e(Uve,eMr),e(mE,oMr),e(mE,vH),e(vH,rMr),e(mE,tMr),e(ce,aMr),e(ce,gE),e(gE,Jve),e(Jve,nMr),e(gE,sMr),e(gE,FH),e(FH,lMr),e(gE,iMr),e(ce,dMr),e(ce,hE),e(hE,Yve),e(Yve,cMr),e(hE,fMr),e(hE,TH),e(TH,mMr),e(hE,gMr),e(ce,hMr),e(ce,pE),e(pE,Kve),e(Kve,pMr),e(pE,uMr),e(pE,MH),e(MH,_Mr),e(pE,bMr),e(ce,vMr),e(ce,uE),e(uE,Zve),e(Zve,FMr),e(uE,TMr),e(uE,EH),e(EH,MMr),e(uE,EMr),e(ce,CMr),e(ce,_E),e(_E,eFe),e(eFe,wMr),e(_E,AMr),e(_E,CH),e(CH,yMr),e(_E,LMr),e(ce,xMr),e(ce,bE),e(bE,oFe),e(oFe,$Mr),e(bE,kMr),e(bE,wH),e(wH,SMr),e(bE,RMr),e(ce,BMr),e(ce,vE),e(vE,rFe),e(rFe,PMr),e(vE,IMr),e(vE,AH),e(AH,qMr),e(vE,NMr),e(ce,jMr),e(ce,FE),e(FE,tFe),e(tFe,DMr),e(FE,GMr),e(FE,yH),e(yH,OMr),e(FE,VMr),e(ce,XMr),e(ce,TE),e(TE,aFe),e(aFe,zMr),e(TE,WMr),e(TE,LH),e(LH,QMr),e(TE,HMr),e(Sr,UMr),M(ME,Sr,null),b(f,DPe,_),b(f,mc,_),e(mc,EE),e(EE,nFe),M(n7,nFe,null),e(mc,JMr),e(mc,sFe),e(sFe,YMr),b(f,GPe,_),b(f,sr,_),M(s7,sr,null),e(sr,KMr),e(sr,gc),e(gc,ZMr),e(gc,xH),e(xH,e4r),e(gc,o4r),e(gc,$H),e($H,r4r),e(gc,t4r),e(sr,a4r),e(sr,l7),e(l7,n4r),e(l7,lFe),e(lFe,s4r),e(l7,l4r),e(sr,i4r),e(sr,Pt),M(i7,Pt,null),e(Pt,d4r),e(Pt,iFe),e(iFe,c4r),e(Pt,f4r),e(Pt,hc),e(hc,m4r),e(hc,dFe),e(dFe,g4r),e(hc,h4r),e(hc,kH),e(kH,p4r),e(hc,u4r),e(Pt,_4r),M(CE,Pt,null),e(sr,b4r),e(sr,Rr),M(d7,Rr,null),e(Rr,v4r),e(Rr,cFe),e(cFe,F4r),e(Rr,T4r),e(Rr,nn),e(nn,M4r),e(nn,fFe),e(fFe,E4r),e(nn,C4r),e(nn,mFe),e(mFe,w4r),e(nn,A4r),e(nn,gFe),e(gFe,y4r),e(nn,L4r),e(Rr,x4r),e(Rr,hFe),e(hFe,wE),e(wE,pFe),e(pFe,$4r),e(wE,k4r),e(wE,SH),e(SH,S4r),e(wE,R4r),e(Rr,B4r),M(AE,Rr,null),b(f,OPe,_),b(f,pc,_),e(pc,yE),e(yE,uFe),M(c7,uFe,null),e(pc,P4r),e(pc,_Fe),e(_Fe,I4r),b(f,VPe,_),b(f,lr,_),M(f7,lr,null),e(lr,q4r),e(lr,uc),e(uc,N4r),e(uc,RH),e(RH,j4r),e(uc,D4r),e(uc,BH),e(BH,G4r),e(uc,O4r),e(lr,V4r),e(lr,m7),e(m7,X4r),e(m7,bFe),e(bFe,z4r),e(m7,W4r),e(lr,Q4r),e(lr,It),M(g7,It,null),e(It,H4r),e(It,vFe),e(vFe,U4r),e(It,J4r),e(It,_c),e(_c,Y4r),e(_c,FFe),e(FFe,K4r),e(_c,Z4r),e(_c,PH),e(PH,eEr),e(_c,oEr),e(It,rEr),M(LE,It,null),e(lr,tEr),e(lr,Br),M(h7,Br,null),e(Br,aEr),e(Br,TFe),e(TFe,nEr),e(Br,sEr),e(Br,sn),e(sn,lEr),e(sn,MFe),e(MFe,iEr),e(sn,dEr),e(sn,EFe),e(EFe,cEr),e(sn,fEr),e(sn,CFe),e(CFe,mEr),e(sn,gEr),e(Br,hEr),e(Br,wFe),e(wFe,xE),e(xE,AFe),e(AFe,pEr),e(xE,uEr),e(xE,IH),e(IH,_Er),e(xE,bEr),e(Br,vEr),M($E,Br,null),b(f,XPe,_),b(f,bc,_),e(bc,kE),e(kE,yFe),M(p7,yFe,null),e(bc,FEr),e(bc,LFe),e(LFe,TEr),b(f,zPe,_),b(f,ir,_),M(u7,ir,null),e(ir,MEr),e(ir,vc),e(vc,EEr),e(vc,qH),e(qH,CEr),e(vc,wEr),e(vc,NH),e(NH,AEr),e(vc,yEr),e(ir,LEr),e(ir,_7),e(_7,xEr),e(_7,xFe),e(xFe,$Er),e(_7,kEr),e(ir,SEr),e(ir,qt),M(b7,qt,null),e(qt,REr),e(qt,$Fe),e($Fe,BEr),e(qt,PEr),e(qt,Fc),e(Fc,IEr),e(Fc,kFe),e(kFe,qEr),e(Fc,NEr),e(Fc,jH),e(jH,jEr),e(Fc,DEr),e(qt,GEr),M(SE,qt,null),e(ir,OEr),e(ir,Pr),M(v7,Pr,null),e(Pr,VEr),e(Pr,SFe),e(SFe,XEr),e(Pr,zEr),e(Pr,ln),e(ln,WEr),e(ln,RFe),e(RFe,QEr),e(ln,HEr),e(ln,BFe),e(BFe,UEr),e(ln,JEr),e(ln,PFe),e(PFe,YEr),e(ln,KEr),e(Pr,ZEr),e(Pr,oe),e(oe,RE),e(RE,IFe),e(IFe,eCr),e(RE,oCr),e(RE,DH),e(DH,rCr),e(RE,tCr),e(oe,aCr),e(oe,BE),e(BE,qFe),e(qFe,nCr),e(BE,sCr),e(BE,GH),e(GH,lCr),e(BE,iCr),e(oe,dCr),e(oe,PE),e(PE,NFe),e(NFe,cCr),e(PE,fCr),e(PE,OH),e(OH,mCr),e(PE,gCr),e(oe,hCr),e(oe,IE),e(IE,jFe),e(jFe,pCr),e(IE,uCr),e(IE,VH),e(VH,_Cr),e(IE,bCr),e(oe,vCr),e(oe,qE),e(qE,DFe),e(DFe,FCr),e(qE,TCr),e(qE,XH),e(XH,MCr),e(qE,ECr),e(oe,CCr),e(oe,NE),e(NE,GFe),e(GFe,wCr),e(NE,ACr),e(NE,zH),e(zH,yCr),e(NE,LCr),e(oe,xCr),e(oe,jE),e(jE,OFe),e(OFe,$Cr),e(jE,kCr),e(jE,WH),e(WH,SCr),e(jE,RCr),e(oe,BCr),e(oe,DE),e(DE,VFe),e(VFe,PCr),e(DE,ICr),e(DE,QH),e(QH,qCr),e(DE,NCr),e(oe,jCr),e(oe,GE),e(GE,XFe),e(XFe,DCr),e(GE,GCr),e(GE,HH),e(HH,OCr),e(GE,VCr),e(oe,XCr),e(oe,OE),e(OE,zFe),e(zFe,zCr),e(OE,WCr),e(OE,UH),e(UH,QCr),e(OE,HCr),e(oe,UCr),e(oe,VE),e(VE,WFe),e(WFe,JCr),e(VE,YCr),e(VE,JH),e(JH,KCr),e(VE,ZCr),e(oe,e5r),e(oe,XE),e(XE,QFe),e(QFe,o5r),e(XE,r5r),e(XE,YH),e(YH,t5r),e(XE,a5r),e(oe,n5r),e(oe,zE),e(zE,HFe),e(HFe,s5r),e(zE,l5r),e(zE,KH),e(KH,i5r),e(zE,d5r),e(oe,c5r),e(oe,WE),e(WE,UFe),e(UFe,f5r),e(WE,m5r),e(WE,ZH),e(ZH,g5r),e(WE,h5r),e(oe,p5r),e(oe,QE),e(QE,JFe),e(JFe,u5r),e(QE,_5r),e(QE,eU),e(eU,b5r),e(QE,v5r),e(oe,F5r),e(oe,HE),e(HE,YFe),e(YFe,T5r),e(HE,M5r),e(HE,oU),e(oU,E5r),e(HE,C5r),e(oe,w5r),e(oe,UE),e(UE,KFe),e(KFe,A5r),e(UE,y5r),e(UE,rU),e(rU,L5r),e(UE,x5r),e(oe,$5r),e(oe,JE),e(JE,ZFe),e(ZFe,k5r),e(JE,S5r),e(JE,tU),e(tU,R5r),e(JE,B5r),e(oe,P5r),e(oe,YE),e(YE,e6e),e(e6e,I5r),e(YE,q5r),e(YE,aU),e(aU,N5r),e(YE,j5r),e(oe,D5r),e(oe,KE),e(KE,o6e),e(o6e,G5r),e(KE,O5r),e(KE,nU),e(nU,V5r),e(KE,X5r),e(oe,z5r),e(oe,ZE),e(ZE,r6e),e(r6e,W5r),e(ZE,Q5r),e(ZE,sU),e(sU,H5r),e(ZE,U5r),e(oe,J5r),e(oe,eC),e(eC,t6e),e(t6e,Y5r),e(eC,K5r),e(eC,lU),e(lU,Z5r),e(eC,e3r),e(oe,o3r),e(oe,oC),e(oC,a6e),e(a6e,r3r),e(oC,t3r),e(oC,iU),e(iU,a3r),e(oC,n3r),e(oe,s3r),e(oe,rC),e(rC,n6e),e(n6e,l3r),e(rC,i3r),e(rC,dU),e(dU,d3r),e(rC,c3r),e(oe,f3r),e(oe,tC),e(tC,s6e),e(s6e,m3r),e(tC,g3r),e(tC,cU),e(cU,h3r),e(tC,p3r),e(Pr,u3r),M(aC,Pr,null),b(f,WPe,_),b(f,Tc,_),e(Tc,nC),e(nC,l6e),M(F7,l6e,null),e(Tc,_3r),e(Tc,i6e),e(i6e,b3r),b(f,QPe,_),b(f,dr,_),M(T7,dr,null),e(dr,v3r),e(dr,Mc),e(Mc,F3r),e(Mc,fU),e(fU,T3r),e(Mc,M3r),e(Mc,mU),e(mU,E3r),e(Mc,C3r),e(dr,w3r),e(dr,M7),e(M7,A3r),e(M7,d6e),e(d6e,y3r),e(M7,L3r),e(dr,x3r),e(dr,Nt),M(E7,Nt,null),e(Nt,$3r),e(Nt,c6e),e(c6e,k3r),e(Nt,S3r),e(Nt,Ec),e(Ec,R3r),e(Ec,f6e),e(f6e,B3r),e(Ec,P3r),e(Ec,gU),e(gU,I3r),e(Ec,q3r),e(Nt,N3r),M(sC,Nt,null),e(dr,j3r),e(dr,Ir),M(C7,Ir,null),e(Ir,D3r),e(Ir,m6e),e(m6e,G3r),e(Ir,O3r),e(Ir,dn),e(dn,V3r),e(dn,g6e),e(g6e,X3r),e(dn,z3r),e(dn,h6e),e(h6e,W3r),e(dn,Q3r),e(dn,p6e),e(p6e,H3r),e(dn,U3r),e(Ir,J3r),e(Ir,Jr),e(Jr,lC),e(lC,u6e),e(u6e,Y3r),e(lC,K3r),e(lC,hU),e(hU,Z3r),e(lC,ewr),e(Jr,owr),e(Jr,iC),e(iC,_6e),e(_6e,rwr),e(iC,twr),e(iC,pU),e(pU,awr),e(iC,nwr),e(Jr,swr),e(Jr,dC),e(dC,b6e),e(b6e,lwr),e(dC,iwr),e(dC,uU),e(uU,dwr),e(dC,cwr),e(Jr,fwr),e(Jr,cC),e(cC,v6e),e(v6e,mwr),e(cC,gwr),e(cC,_U),e(_U,hwr),e(cC,pwr),e(Jr,uwr),e(Jr,fC),e(fC,F6e),e(F6e,_wr),e(fC,bwr),e(fC,bU),e(bU,vwr),e(fC,Fwr),e(Ir,Twr),M(mC,Ir,null),b(f,HPe,_),b(f,Cc,_),e(Cc,gC),e(gC,T6e),M(w7,T6e,null),e(Cc,Mwr),e(Cc,M6e),e(M6e,Ewr),b(f,UPe,_),b(f,cr,_),M(A7,cr,null),e(cr,Cwr),e(cr,wc),e(wc,wwr),e(wc,vU),e(vU,Awr),e(wc,ywr),e(wc,FU),e(FU,Lwr),e(wc,xwr),e(cr,$wr),e(cr,y7),e(y7,kwr),e(y7,E6e),e(E6e,Swr),e(y7,Rwr),e(cr,Bwr),e(cr,jt),M(L7,jt,null),e(jt,Pwr),e(jt,C6e),e(C6e,Iwr),e(jt,qwr),e(jt,Ac),e(Ac,Nwr),e(Ac,w6e),e(w6e,jwr),e(Ac,Dwr),e(Ac,TU),e(TU,Gwr),e(Ac,Owr),e(jt,Vwr),M(hC,jt,null),e(cr,Xwr),e(cr,qr),M(x7,qr,null),e(qr,zwr),e(qr,A6e),e(A6e,Wwr),e(qr,Qwr),e(qr,cn),e(cn,Hwr),e(cn,y6e),e(y6e,Uwr),e(cn,Jwr),e(cn,L6e),e(L6e,Ywr),e(cn,Kwr),e(cn,x6e),e(x6e,Zwr),e(cn,eAr),e(qr,oAr),e(qr,Me),e(Me,pC),e(pC,$6e),e($6e,rAr),e(pC,tAr),e(pC,MU),e(MU,aAr),e(pC,nAr),e(Me,sAr),e(Me,uC),e(uC,k6e),e(k6e,lAr),e(uC,iAr),e(uC,EU),e(EU,dAr),e(uC,cAr),e(Me,fAr),e(Me,_C),e(_C,S6e),e(S6e,mAr),e(_C,gAr),e(_C,CU),e(CU,hAr),e(_C,pAr),e(Me,uAr),e(Me,bC),e(bC,R6e),e(R6e,_Ar),e(bC,bAr),e(bC,wU),e(wU,vAr),e(bC,FAr),e(Me,TAr),e(Me,vC),e(vC,B6e),e(B6e,MAr),e(vC,EAr),e(vC,AU),e(AU,CAr),e(vC,wAr),e(Me,AAr),e(Me,FC),e(FC,P6e),e(P6e,yAr),e(FC,LAr),e(FC,yU),e(yU,xAr),e(FC,$Ar),e(Me,kAr),e(Me,TC),e(TC,I6e),e(I6e,SAr),e(TC,RAr),e(TC,LU),e(LU,BAr),e(TC,PAr),e(Me,IAr),e(Me,MC),e(MC,q6e),e(q6e,qAr),e(MC,NAr),e(MC,xU),e(xU,jAr),e(MC,DAr),e(Me,GAr),e(Me,EC),e(EC,N6e),e(N6e,OAr),e(EC,VAr),e(EC,$U),e($U,XAr),e(EC,zAr),e(Me,WAr),e(Me,CC),e(CC,j6e),e(j6e,QAr),e(CC,HAr),e(CC,kU),e(kU,UAr),e(CC,JAr),e(Me,YAr),e(Me,wC),e(wC,D6e),e(D6e,KAr),e(wC,ZAr),e(wC,SU),e(SU,e0r),e(wC,o0r),e(Me,r0r),e(Me,AC),e(AC,G6e),e(G6e,t0r),e(AC,a0r),e(AC,RU),e(RU,n0r),e(AC,s0r),e(qr,l0r),M(yC,qr,null),b(f,JPe,_),b(f,yc,_),e(yc,LC),e(LC,O6e),M($7,O6e,null),e(yc,i0r),e(yc,V6e),e(V6e,d0r),b(f,YPe,_),b(f,fr,_),M(k7,fr,null),e(fr,c0r),e(fr,Lc),e(Lc,f0r),e(Lc,BU),e(BU,m0r),e(Lc,g0r),e(Lc,PU),e(PU,h0r),e(Lc,p0r),e(fr,u0r),e(fr,S7),e(S7,_0r),e(S7,X6e),e(X6e,b0r),e(S7,v0r),e(fr,F0r),e(fr,Dt),M(R7,Dt,null),e(Dt,T0r),e(Dt,z6e),e(z6e,M0r),e(Dt,E0r),e(Dt,xc),e(xc,C0r),e(xc,W6e),e(W6e,w0r),e(xc,A0r),e(xc,IU),e(IU,y0r),e(xc,L0r),e(Dt,x0r),M(xC,Dt,null),e(fr,$0r),e(fr,Nr),M(B7,Nr,null),e(Nr,k0r),e(Nr,Q6e),e(Q6e,S0r),e(Nr,R0r),e(Nr,fn),e(fn,B0r),e(fn,H6e),e(H6e,P0r),e(fn,I0r),e(fn,U6e),e(U6e,q0r),e(fn,N0r),e(fn,J6e),e(J6e,j0r),e(fn,D0r),e(Nr,G0r),e(Nr,Le),e(Le,$C),e($C,Y6e),e(Y6e,O0r),e($C,V0r),e($C,qU),e(qU,X0r),e($C,z0r),e(Le,W0r),e(Le,kC),e(kC,K6e),e(K6e,Q0r),e(kC,H0r),e(kC,NU),e(NU,U0r),e(kC,J0r),e(Le,Y0r),e(Le,SC),e(SC,Z6e),e(Z6e,K0r),e(SC,Z0r),e(SC,jU),e(jU,eyr),e(SC,oyr),e(Le,ryr),e(Le,RC),e(RC,eTe),e(eTe,tyr),e(RC,ayr),e(RC,DU),e(DU,nyr),e(RC,syr),e(Le,lyr),e(Le,BC),e(BC,oTe),e(oTe,iyr),e(BC,dyr),e(BC,GU),e(GU,cyr),e(BC,fyr),e(Le,myr),e(Le,PC),e(PC,rTe),e(rTe,gyr),e(PC,hyr),e(PC,OU),e(OU,pyr),e(PC,uyr),e(Le,_yr),e(Le,IC),e(IC,tTe),e(tTe,byr),e(IC,vyr),e(IC,VU),e(VU,Fyr),e(IC,Tyr),e(Le,Myr),e(Le,qC),e(qC,aTe),e(aTe,Eyr),e(qC,Cyr),e(qC,XU),e(XU,wyr),e(qC,Ayr),e(Le,yyr),e(Le,NC),e(NC,nTe),e(nTe,Lyr),e(NC,xyr),e(NC,zU),e(zU,$yr),e(NC,kyr),e(Le,Syr),e(Le,jC),e(jC,sTe),e(sTe,Ryr),e(jC,Byr),e(jC,WU),e(WU,Pyr),e(jC,Iyr),e(Nr,qyr),M(DC,Nr,null),b(f,KPe,_),b(f,$c,_),e($c,GC),e(GC,lTe),M(P7,lTe,null),e($c,Nyr),e($c,iTe),e(iTe,jyr),b(f,ZPe,_),b(f,mr,_),M(I7,mr,null),e(mr,Dyr),e(mr,kc),e(kc,Gyr),e(kc,QU),e(QU,Oyr),e(kc,Vyr),e(kc,HU),e(HU,Xyr),e(kc,zyr),e(mr,Wyr),e(mr,q7),e(q7,Qyr),e(q7,dTe),e(dTe,Hyr),e(q7,Uyr),e(mr,Jyr),e(mr,Gt),M(N7,Gt,null),e(Gt,Yyr),e(Gt,cTe),e(cTe,Kyr),e(Gt,Zyr),e(Gt,Sc),e(Sc,eLr),e(Sc,fTe),e(fTe,oLr),e(Sc,rLr),e(Sc,UU),e(UU,tLr),e(Sc,aLr),e(Gt,nLr),M(OC,Gt,null),e(mr,sLr),e(mr,jr),M(j7,jr,null),e(jr,lLr),e(jr,mTe),e(mTe,iLr),e(jr,dLr),e(jr,mn),e(mn,cLr),e(mn,gTe),e(gTe,fLr),e(mn,mLr),e(mn,hTe),e(hTe,gLr),e(mn,hLr),e(mn,pTe),e(pTe,pLr),e(mn,uLr),e(jr,_Lr),e(jr,Re),e(Re,VC),e(VC,uTe),e(uTe,bLr),e(VC,vLr),e(VC,JU),e(JU,FLr),e(VC,TLr),e(Re,MLr),e(Re,XC),e(XC,_Te),e(_Te,ELr),e(XC,CLr),e(XC,YU),e(YU,wLr),e(XC,ALr),e(Re,yLr),e(Re,zC),e(zC,bTe),e(bTe,LLr),e(zC,xLr),e(zC,KU),e(KU,$Lr),e(zC,kLr),e(Re,SLr),e(Re,WC),e(WC,vTe),e(vTe,RLr),e(WC,BLr),e(WC,ZU),e(ZU,PLr),e(WC,ILr),e(Re,qLr),e(Re,QC),e(QC,FTe),e(FTe,NLr),e(QC,jLr),e(QC,eJ),e(eJ,DLr),e(QC,GLr),e(Re,OLr),e(Re,HC),e(HC,TTe),e(TTe,VLr),e(HC,XLr),e(HC,oJ),e(oJ,zLr),e(HC,WLr),e(Re,QLr),e(Re,UC),e(UC,MTe),e(MTe,HLr),e(UC,ULr),e(UC,rJ),e(rJ,JLr),e(UC,YLr),e(Re,KLr),e(Re,JC),e(JC,ETe),e(ETe,ZLr),e(JC,e7r),e(JC,tJ),e(tJ,o7r),e(JC,r7r),e(Re,t7r),e(Re,YC),e(YC,CTe),e(CTe,a7r),e(YC,n7r),e(YC,aJ),e(aJ,s7r),e(YC,l7r),e(jr,i7r),M(KC,jr,null),b(f,eIe,_),b(f,Rc,_),e(Rc,ZC),e(ZC,wTe),M(D7,wTe,null),e(Rc,d7r),e(Rc,ATe),e(ATe,c7r),b(f,oIe,_),b(f,gr,_),M(G7,gr,null),e(gr,f7r),e(gr,Bc),e(Bc,m7r),e(Bc,nJ),e(nJ,g7r),e(Bc,h7r),e(Bc,sJ),e(sJ,p7r),e(Bc,u7r),e(gr,_7r),e(gr,O7),e(O7,b7r),e(O7,yTe),e(yTe,v7r),e(O7,F7r),e(gr,T7r),e(gr,Ot),M(V7,Ot,null),e(Ot,M7r),e(Ot,LTe),e(LTe,E7r),e(Ot,C7r),e(Ot,Pc),e(Pc,w7r),e(Pc,xTe),e(xTe,A7r),e(Pc,y7r),e(Pc,lJ),e(lJ,L7r),e(Pc,x7r),e(Ot,$7r),M(e5,Ot,null),e(gr,k7r),e(gr,Dr),M(X7,Dr,null),e(Dr,S7r),e(Dr,$Te),e($Te,R7r),e(Dr,B7r),e(Dr,gn),e(gn,P7r),e(gn,kTe),e(kTe,I7r),e(gn,q7r),e(gn,STe),e(STe,N7r),e(gn,j7r),e(gn,RTe),e(RTe,D7r),e(gn,G7r),e(Dr,O7r),e(Dr,xe),e(xe,o5),e(o5,BTe),e(BTe,V7r),e(o5,X7r),e(o5,iJ),e(iJ,z7r),e(o5,W7r),e(xe,Q7r),e(xe,r5),e(r5,PTe),e(PTe,H7r),e(r5,U7r),e(r5,dJ),e(dJ,J7r),e(r5,Y7r),e(xe,K7r),e(xe,t5),e(t5,ITe),e(ITe,Z7r),e(t5,exr),e(t5,cJ),e(cJ,oxr),e(t5,rxr),e(xe,txr),e(xe,a5),e(a5,qTe),e(qTe,axr),e(a5,nxr),e(a5,fJ),e(fJ,sxr),e(a5,lxr),e(xe,ixr),e(xe,n5),e(n5,NTe),e(NTe,dxr),e(n5,cxr),e(n5,mJ),e(mJ,fxr),e(n5,mxr),e(xe,gxr),e(xe,s5),e(s5,jTe),e(jTe,hxr),e(s5,pxr),e(s5,gJ),e(gJ,uxr),e(s5,_xr),e(xe,bxr),e(xe,l5),e(l5,DTe),e(DTe,vxr),e(l5,Fxr),e(l5,hJ),e(hJ,Txr),e(l5,Mxr),e(xe,Exr),e(xe,i5),e(i5,GTe),e(GTe,Cxr),e(i5,wxr),e(i5,pJ),e(pJ,Axr),e(i5,yxr),e(xe,Lxr),e(xe,d5),e(d5,OTe),e(OTe,xxr),e(d5,$xr),e(d5,uJ),e(uJ,kxr),e(d5,Sxr),e(xe,Rxr),e(xe,c5),e(c5,VTe),e(VTe,Bxr),e(c5,Pxr),e(c5,_J),e(_J,Ixr),e(c5,qxr),e(Dr,Nxr),M(f5,Dr,null),b(f,rIe,_),b(f,Ic,_),e(Ic,m5),e(m5,XTe),M(z7,XTe,null),e(Ic,jxr),e(Ic,zTe),e(zTe,Dxr),b(f,tIe,_),b(f,hr,_),M(W7,hr,null),e(hr,Gxr),e(hr,qc),e(qc,Oxr),e(qc,bJ),e(bJ,Vxr),e(qc,Xxr),e(qc,vJ),e(vJ,zxr),e(qc,Wxr),e(hr,Qxr),e(hr,Q7),e(Q7,Hxr),e(Q7,WTe),e(WTe,Uxr),e(Q7,Jxr),e(hr,Yxr),e(hr,Vt),M(H7,Vt,null),e(Vt,Kxr),e(Vt,QTe),e(QTe,Zxr),e(Vt,e9r),e(Vt,Nc),e(Nc,o9r),e(Nc,HTe),e(HTe,r9r),e(Nc,t9r),e(Nc,FJ),e(FJ,a9r),e(Nc,n9r),e(Vt,s9r),M(g5,Vt,null),e(hr,l9r),e(hr,Gr),M(U7,Gr,null),e(Gr,i9r),e(Gr,UTe),e(UTe,d9r),e(Gr,c9r),e(Gr,hn),e(hn,f9r),e(hn,JTe),e(JTe,m9r),e(hn,g9r),e(hn,YTe),e(YTe,h9r),e(hn,p9r),e(hn,KTe),e(KTe,u9r),e(hn,_9r),e(Gr,b9r),e(Gr,$e),e($e,h5),e(h5,ZTe),e(ZTe,v9r),e(h5,F9r),e(h5,TJ),e(TJ,T9r),e(h5,M9r),e($e,E9r),e($e,p5),e(p5,e8e),e(e8e,C9r),e(p5,w9r),e(p5,MJ),e(MJ,A9r),e(p5,y9r),e($e,L9r),e($e,u5),e(u5,o8e),e(o8e,x9r),e(u5,$9r),e(u5,EJ),e(EJ,k9r),e(u5,S9r),e($e,R9r),e($e,_5),e(_5,r8e),e(r8e,B9r),e(_5,P9r),e(_5,CJ),e(CJ,I9r),e(_5,q9r),e($e,N9r),e($e,b5),e(b5,t8e),e(t8e,j9r),e(b5,D9r),e(b5,wJ),e(wJ,G9r),e(b5,O9r),e($e,V9r),e($e,v5),e(v5,a8e),e(a8e,X9r),e(v5,z9r),e(v5,AJ),e(AJ,W9r),e(v5,Q9r),e($e,H9r),e($e,F5),e(F5,n8e),e(n8e,U9r),e(F5,J9r),e(F5,yJ),e(yJ,Y9r),e(F5,K9r),e($e,Z9r),e($e,T5),e(T5,s8e),e(s8e,e$r),e(T5,o$r),e(T5,LJ),e(LJ,r$r),e(T5,t$r),e($e,a$r),e($e,M5),e(M5,l8e),e(l8e,n$r),e(M5,s$r),e(M5,xJ),e(xJ,l$r),e(M5,i$r),e($e,d$r),e($e,E5),e(E5,i8e),e(i8e,c$r),e(E5,f$r),e(E5,$J),e($J,m$r),e(E5,g$r),e(Gr,h$r),M(C5,Gr,null),b(f,aIe,_),b(f,jc,_),e(jc,w5),e(w5,d8e),M(J7,d8e,null),e(jc,p$r),e(jc,c8e),e(c8e,u$r),b(f,nIe,_),b(f,pr,_),M(Y7,pr,null),e(pr,_$r),e(pr,Dc),e(Dc,b$r),e(Dc,kJ),e(kJ,v$r),e(Dc,F$r),e(Dc,SJ),e(SJ,T$r),e(Dc,M$r),e(pr,E$r),e(pr,K7),e(K7,C$r),e(K7,f8e),e(f8e,w$r),e(K7,A$r),e(pr,y$r),e(pr,Xt),M(Z7,Xt,null),e(Xt,L$r),e(Xt,m8e),e(m8e,x$r),e(Xt,$$r),e(Xt,Gc),e(Gc,k$r),e(Gc,g8e),e(g8e,S$r),e(Gc,R$r),e(Gc,RJ),e(RJ,B$r),e(Gc,P$r),e(Xt,I$r),M(A5,Xt,null),e(pr,q$r),e(pr,Or),M(ex,Or,null),e(Or,N$r),e(Or,h8e),e(h8e,j$r),e(Or,D$r),e(Or,pn),e(pn,G$r),e(pn,p8e),e(p8e,O$r),e(pn,V$r),e(pn,u8e),e(u8e,X$r),e(pn,z$r),e(pn,_8e),e(_8e,W$r),e(pn,Q$r),e(Or,H$r),e(Or,je),e(je,y5),e(y5,b8e),e(b8e,U$r),e(y5,J$r),e(y5,BJ),e(BJ,Y$r),e(y5,K$r),e(je,Z$r),e(je,L5),e(L5,v8e),e(v8e,ekr),e(L5,okr),e(L5,PJ),e(PJ,rkr),e(L5,tkr),e(je,akr),e(je,x5),e(x5,F8e),e(F8e,nkr),e(x5,skr),e(x5,IJ),e(IJ,lkr),e(x5,ikr),e(je,dkr),e(je,$5),e($5,T8e),e(T8e,ckr),e($5,fkr),e($5,qJ),e(qJ,mkr),e($5,gkr),e(je,hkr),e(je,k5),e(k5,M8e),e(M8e,pkr),e(k5,ukr),e(k5,NJ),e(NJ,_kr),e(k5,bkr),e(je,vkr),e(je,S5),e(S5,E8e),e(E8e,Fkr),e(S5,Tkr),e(S5,jJ),e(jJ,Mkr),e(S5,Ekr),e(je,Ckr),e(je,R5),e(R5,C8e),e(C8e,wkr),e(R5,Akr),e(R5,DJ),e(DJ,ykr),e(R5,Lkr),e(je,xkr),e(je,B5),e(B5,w8e),e(w8e,$kr),e(B5,kkr),e(B5,GJ),e(GJ,Skr),e(B5,Rkr),e(Or,Bkr),M(P5,Or,null),b(f,sIe,_),b(f,Oc,_),e(Oc,I5),e(I5,A8e),M(ox,A8e,null),e(Oc,Pkr),e(Oc,y8e),e(y8e,Ikr),b(f,lIe,_),b(f,ur,_),M(rx,ur,null),e(ur,qkr),e(ur,Vc),e(Vc,Nkr),e(Vc,OJ),e(OJ,jkr),e(Vc,Dkr),e(Vc,VJ),e(VJ,Gkr),e(Vc,Okr),e(ur,Vkr),e(ur,tx),e(tx,Xkr),e(tx,L8e),e(L8e,zkr),e(tx,Wkr),e(ur,Qkr),e(ur,zt),M(ax,zt,null),e(zt,Hkr),e(zt,x8e),e(x8e,Ukr),e(zt,Jkr),e(zt,Xc),e(Xc,Ykr),e(Xc,$8e),e($8e,Kkr),e(Xc,Zkr),e(Xc,XJ),e(XJ,eSr),e(Xc,oSr),e(zt,rSr),M(q5,zt,null),e(ur,tSr),e(ur,Vr),M(nx,Vr,null),e(Vr,aSr),e(Vr,k8e),e(k8e,nSr),e(Vr,sSr),e(Vr,un),e(un,lSr),e(un,S8e),e(S8e,iSr),e(un,dSr),e(un,R8e),e(R8e,cSr),e(un,fSr),e(un,B8e),e(B8e,mSr),e(un,gSr),e(Vr,hSr),e(Vr,De),e(De,N5),e(N5,P8e),e(P8e,pSr),e(N5,uSr),e(N5,zJ),e(zJ,_Sr),e(N5,bSr),e(De,vSr),e(De,j5),e(j5,I8e),e(I8e,FSr),e(j5,TSr),e(j5,WJ),e(WJ,MSr),e(j5,ESr),e(De,CSr),e(De,D5),e(D5,q8e),e(q8e,wSr),e(D5,ASr),e(D5,QJ),e(QJ,ySr),e(D5,LSr),e(De,xSr),e(De,G5),e(G5,N8e),e(N8e,$Sr),e(G5,kSr),e(G5,HJ),e(HJ,SSr),e(G5,RSr),e(De,BSr),e(De,O5),e(O5,j8e),e(j8e,PSr),e(O5,ISr),e(O5,UJ),e(UJ,qSr),e(O5,NSr),e(De,jSr),e(De,V5),e(V5,D8e),e(D8e,DSr),e(V5,GSr),e(V5,JJ),e(JJ,OSr),e(V5,VSr),e(De,XSr),e(De,X5),e(X5,G8e),e(G8e,zSr),e(X5,WSr),e(X5,YJ),e(YJ,QSr),e(X5,HSr),e(De,USr),e(De,z5),e(z5,O8e),e(O8e,JSr),e(z5,YSr),e(z5,KJ),e(KJ,KSr),e(z5,ZSr),e(Vr,eRr),M(W5,Vr,null),b(f,iIe,_),b(f,zc,_),e(zc,Q5),e(Q5,V8e),M(sx,V8e,null),e(zc,oRr),e(zc,X8e),e(X8e,rRr),b(f,dIe,_),b(f,_r,_),M(lx,_r,null),e(_r,tRr),e(_r,Wc),e(Wc,aRr),e(Wc,ZJ),e(ZJ,nRr),e(Wc,sRr),e(Wc,eY),e(eY,lRr),e(Wc,iRr),e(_r,dRr),e(_r,ix),e(ix,cRr),e(ix,z8e),e(z8e,fRr),e(ix,mRr),e(_r,gRr),e(_r,Wt),M(dx,Wt,null),e(Wt,hRr),e(Wt,W8e),e(W8e,pRr),e(Wt,uRr),e(Wt,Qc),e(Qc,_Rr),e(Qc,Q8e),e(Q8e,bRr),e(Qc,vRr),e(Qc,oY),e(oY,FRr),e(Qc,TRr),e(Wt,MRr),M(H5,Wt,null),e(_r,ERr),e(_r,Xr),M(cx,Xr,null),e(Xr,CRr),e(Xr,H8e),e(H8e,wRr),e(Xr,ARr),e(Xr,_n),e(_n,yRr),e(_n,U8e),e(U8e,LRr),e(_n,xRr),e(_n,J8e),e(J8e,$Rr),e(_n,kRr),e(_n,Y8e),e(Y8e,SRr),e(_n,RRr),e(Xr,BRr),e(Xr,K8e),e(K8e,U5),e(U5,Z8e),e(Z8e,PRr),e(U5,IRr),e(U5,rY),e(rY,qRr),e(U5,NRr),e(Xr,jRr),M(J5,Xr,null),b(f,cIe,_),b(f,Hc,_),e(Hc,Y5),e(Y5,eMe),M(fx,eMe,null),e(Hc,DRr),e(Hc,oMe),e(oMe,GRr),b(f,fIe,_),b(f,br,_),M(mx,br,null),e(br,ORr),e(br,Uc),e(Uc,VRr),e(Uc,tY),e(tY,XRr),e(Uc,zRr),e(Uc,aY),e(aY,WRr),e(Uc,QRr),e(br,HRr),e(br,gx),e(gx,URr),e(gx,rMe),e(rMe,JRr),e(gx,YRr),e(br,KRr),e(br,Qt),M(hx,Qt,null),e(Qt,ZRr),e(Qt,tMe),e(tMe,eBr),e(Qt,oBr),e(Qt,Jc),e(Jc,rBr),e(Jc,aMe),e(aMe,tBr),e(Jc,aBr),e(Jc,nY),e(nY,nBr),e(Jc,sBr),e(Qt,lBr),M(K5,Qt,null),e(br,iBr),e(br,zr),M(px,zr,null),e(zr,dBr),e(zr,nMe),e(nMe,cBr),e(zr,fBr),e(zr,bn),e(bn,mBr),e(bn,sMe),e(sMe,gBr),e(bn,hBr),e(bn,lMe),e(lMe,pBr),e(bn,uBr),e(bn,iMe),e(iMe,_Br),e(bn,bBr),e(zr,vBr),e(zr,ux),e(ux,Z5),e(Z5,dMe),e(dMe,FBr),e(Z5,TBr),e(Z5,sY),e(sY,MBr),e(Z5,EBr),e(ux,CBr),e(ux,e3),e(e3,cMe),e(cMe,wBr),e(e3,ABr),e(e3,lY),e(lY,yBr),e(e3,LBr),e(zr,xBr),M(o3,zr,null),b(f,mIe,_),b(f,Yc,_),e(Yc,r3),e(r3,fMe),M(_x,fMe,null),e(Yc,$Br),e(Yc,mMe),e(mMe,kBr),b(f,gIe,_),b(f,vr,_),M(bx,vr,null),e(vr,SBr),e(vr,Kc),e(Kc,RBr),e(Kc,iY),e(iY,BBr),e(Kc,PBr),e(Kc,dY),e(dY,IBr),e(Kc,qBr),e(vr,NBr),e(vr,vx),e(vx,jBr),e(vx,gMe),e(gMe,DBr),e(vx,GBr),e(vr,OBr),e(vr,Ht),M(Fx,Ht,null),e(Ht,VBr),e(Ht,hMe),e(hMe,XBr),e(Ht,zBr),e(Ht,Zc),e(Zc,WBr),e(Zc,pMe),e(pMe,QBr),e(Zc,HBr),e(Zc,cY),e(cY,UBr),e(Zc,JBr),e(Ht,YBr),M(t3,Ht,null),e(vr,KBr),e(vr,Wr),M(Tx,Wr,null),e(Wr,ZBr),e(Wr,uMe),e(uMe,ePr),e(Wr,oPr),e(Wr,vn),e(vn,rPr),e(vn,_Me),e(_Me,tPr),e(vn,aPr),e(vn,bMe),e(bMe,nPr),e(vn,sPr),e(vn,vMe),e(vMe,lPr),e(vn,iPr),e(Wr,dPr),e(Wr,FMe),e(FMe,a3),e(a3,TMe),e(TMe,cPr),e(a3,fPr),e(a3,fY),e(fY,mPr),e(a3,gPr),e(Wr,hPr),M(n3,Wr,null),hIe=!0},p(f,[_]){const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:f}),df.$set(Mx);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),sg.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),jg.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),mh.$set(CMe);const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:f}),gh.$set(Ex);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),kh.$set(wMe);const Fn={};_&2&&(Fn.$$scope={dirty:_,ctx:f}),Sh.$set(Fn);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),Ph.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),Eu.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),wu.$set(LMe);const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:f}),g_.$set(Cx);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),p_.$set(xMe);const wx={};_&2&&(wx.$$scope={dirty:_,ctx:f}),K_.$set(wx);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),e1.$set($Me);const Ax={};_&2&&(Ax.$$scope={dirty:_,ctx:f}),q1.$set(Ax);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),j1.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),a2.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),s2.$set(RMe);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),ob.$set(ef);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),tb.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),Rb.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),Pb.$set(IMe);const yx={};_&2&&(yx.$$scope={dirty:_,ctx:f}),Ob.$set(yx);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),Xb.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),wv.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),yv.$set(jMe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),hF.$set(Yr);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),uF.$set(Lx);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),vF.$set(DMe);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),TF.$set(xx);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),BF.$set(GMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),IF.$set(Kr);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),jF.$set(OMe);const of={};_&2&&(of.$$scope={dirty:_,ctx:f}),GF.$set(of);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),KF.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),e6.$set(XMe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),l6.$set(y);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),d6.$set(s3);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),F6.$set(zMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),M6.$set(WMe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),A6.$set(l3);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),L6.$set(QMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),P6.$set(HMe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),q6.$set(i3);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),O6.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),X6.$set(JMe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),Q6.$set(d3);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),U6.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),K6.$set(KMe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),eT.$set(c3);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),sT.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),iT.$set(e4e);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),fT.$set(f3);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),gT.$set(o4e);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),t8.$set(r4e);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),n8.$set(m3);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),x8.$set(t4e);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),k8.$set(a4e);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),X8.$set(g3);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),W8.$set(n4e);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),U8.$set(s4e);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),Y8.$set(h3);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),bM.$set(l4e);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),FM.$set(i4e);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),kM.$set(p3);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),RM.$set(d4e);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),s4.$set(c4e);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),i4.$set(u3);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),A4.$set(f4e);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),L4.$set(m4e);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),$4.$set(_3);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),S4.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),Z4.$set(h4e);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),oE.$set(b3);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),ME.$set(p4e);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),CE.$set(u4e);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),AE.$set(v3);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),LE.$set(_4e);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),$E.$set(b4e);const F3={};_&2&&(F3.$$scope={dirty:_,ctx:f}),SE.$set(F3);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),aC.$set(v4e);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),sC.$set(F4e);const T3={};_&2&&(T3.$$scope={dirty:_,ctx:f}),mC.$set(T3);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),hC.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),yC.$set(M4e);const M3={};_&2&&(M3.$$scope={dirty:_,ctx:f}),xC.$set(M3);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),DC.$set(E4e);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),OC.$set(C4e);const E3={};_&2&&(E3.$$scope={dirty:_,ctx:f}),KC.$set(E3);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),e5.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),f5.$set(A4e);const C3={};_&2&&(C3.$$scope={dirty:_,ctx:f}),g5.$set(C3);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),C5.$set(y4e);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),A5.$set(L4e);const w3={};_&2&&(w3.$$scope={dirty:_,ctx:f}),P5.$set(w3);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),q5.$set(x4e);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),W5.$set($4e);const A3={};_&2&&(A3.$$scope={dirty:_,ctx:f}),H5.$set(A3);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),J5.$set(k4e);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),K5.$set(S4e);const y3={};_&2&&(y3.$$scope={dirty:_,ctx:f}),o3.$set(y3);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),t3.$set(R4e);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),n3.$set(B4e)},i(f){hIe||(E(d.$$.fragment,f),E(Fa.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(df.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(sg.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(PA.$$.fragment,f),E(jg.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(GA.$$.fragment,f),E(mh.$$.fragment,f),E(gh.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(kh.$$.fragment,f),E(Sh.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(Ph.$$.fragment,f),E(ZA.$$.fragment,f),E(Eu.$$.fragment,f),E(e0.$$.fragment,f),E(o0.$$.fragment,f),E(t0.$$.fragment,f),E(wu.$$.fragment,f),E(a0.$$.fragment,f),E(g_.$$.fragment,f),E(n0.$$.fragment,f),E(s0.$$.fragment,f),E(i0.$$.fragment,f),E(p_.$$.fragment,f),E(d0.$$.fragment,f),E(K_.$$.fragment,f),E(c0.$$.fragment,f),E(f0.$$.fragment,f),E(g0.$$.fragment,f),E(e1.$$.fragment,f),E(h0.$$.fragment,f),E(q1.$$.fragment,f),E(p0.$$.fragment,f),E(u0.$$.fragment,f),E(b0.$$.fragment,f),E(j1.$$.fragment,f),E(v0.$$.fragment,f),E(a2.$$.fragment,f),E(F0.$$.fragment,f),E(T0.$$.fragment,f),E(E0.$$.fragment,f),E(s2.$$.fragment,f),E(C0.$$.fragment,f),E(ob.$$.fragment,f),E(w0.$$.fragment,f),E(A0.$$.fragment,f),E(L0.$$.fragment,f),E(tb.$$.fragment,f),E(x0.$$.fragment,f),E(Rb.$$.fragment,f),E($0.$$.fragment,f),E(k0.$$.fragment,f),E(R0.$$.fragment,f),E(Pb.$$.fragment,f),E(B0.$$.fragment,f),E(Ob.$$.fragment,f),E(P0.$$.fragment,f),E(I0.$$.fragment,f),E(N0.$$.fragment,f),E(Xb.$$.fragment,f),E(j0.$$.fragment,f),E(wv.$$.fragment,f),E(D0.$$.fragment,f),E(G0.$$.fragment,f),E(V0.$$.fragment,f),E(yv.$$.fragment,f),E(X0.$$.fragment,f),E(hF.$$.fragment,f),E(z0.$$.fragment,f),E(W0.$$.fragment,f),E(H0.$$.fragment,f),E(uF.$$.fragment,f),E(U0.$$.fragment,f),E(vF.$$.fragment,f),E(J0.$$.fragment,f),E(Y0.$$.fragment,f),E(Z0.$$.fragment,f),E(TF.$$.fragment,f),E(ey.$$.fragment,f),E(BF.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(IF.$$.fragment,f),E(ny.$$.fragment,f),E(jF.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(GF.$$.fragment,f),E(cy.$$.fragment,f),E(KF.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(e6.$$.fragment,f),E(py.$$.fragment,f),E(l6.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(d6.$$.fragment,f),E(Fy.$$.fragment,f),E(F6.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(M6.$$.fragment,f),E(wy.$$.fragment,f),E(A6.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(L6.$$.fragment,f),E(ky.$$.fragment,f),E(P6.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(q6.$$.fragment,f),E(Iy.$$.fragment,f),E(O6.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(X6.$$.fragment,f),E(Gy.$$.fragment,f),E(Q6.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(U6.$$.fragment,f),E(Wy.$$.fragment,f),E(K6.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(eT.$$.fragment,f),E(Yy.$$.fragment,f),E(sT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(iT.$$.fragment,f),E(rL.$$.fragment,f),E(fT.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(gT.$$.fragment,f),E(lL.$$.fragment,f),E(t8.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(n8.$$.fragment,f),E(mL.$$.fragment,f),E(x8.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(k8.$$.fragment,f),E(_L.$$.fragment,f),E(X8.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(W8.$$.fragment,f),E(ML.$$.fragment,f),E(U8.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(Y8.$$.fragment,f),E(LL.$$.fragment,f),E(bM.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(FM.$$.fragment,f),E(RL.$$.fragment,f),E(kM.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(RM.$$.fragment,f),E(NL.$$.fragment,f),E(s4.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(i4.$$.fragment,f),E(VL.$$.fragment,f),E(A4.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(L4.$$.fragment,f),E(HL.$$.fragment,f),E($4.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(S4.$$.fragment,f),E(ZL.$$.fragment,f),E(Z4.$$.fragment,f),E(e7.$$.fragment,f),E(o7.$$.fragment,f),E(t7.$$.fragment,f),E(oE.$$.fragment,f),E(a7.$$.fragment,f),E(ME.$$.fragment,f),E(n7.$$.fragment,f),E(s7.$$.fragment,f),E(i7.$$.fragment,f),E(CE.$$.fragment,f),E(d7.$$.fragment,f),E(AE.$$.fragment,f),E(c7.$$.fragment,f),E(f7.$$.fragment,f),E(g7.$$.fragment,f),E(LE.$$.fragment,f),E(h7.$$.fragment,f),E($E.$$.fragment,f),E(p7.$$.fragment,f),E(u7.$$.fragment,f),E(b7.$$.fragment,f),E(SE.$$.fragment,f),E(v7.$$.fragment,f),E(aC.$$.fragment,f),E(F7.$$.fragment,f),E(T7.$$.fragment,f),E(E7.$$.fragment,f),E(sC.$$.fragment,f),E(C7.$$.fragment,f),E(mC.$$.fragment,f),E(w7.$$.fragment,f),E(A7.$$.fragment,f),E(L7.$$.fragment,f),E(hC.$$.fragment,f),E(x7.$$.fragment,f),E(yC.$$.fragment,f),E($7.$$.fragment,f),E(k7.$$.fragment,f),E(R7.$$.fragment,f),E(xC.$$.fragment,f),E(B7.$$.fragment,f),E(DC.$$.fragment,f),E(P7.$$.fragment,f),E(I7.$$.fragment,f),E(N7.$$.fragment,f),E(OC.$$.fragment,f),E(j7.$$.fragment,f),E(KC.$$.fragment,f),E(D7.$$.fragment,f),E(G7.$$.fragment,f),E(V7.$$.fragment,f),E(e5.$$.fragment,f),E(X7.$$.fragment,f),E(f5.$$.fragment,f),E(z7.$$.fragment,f),E(W7.$$.fragment,f),E(H7.$$.fragment,f),E(g5.$$.fragment,f),E(U7.$$.fragment,f),E(C5.$$.fragment,f),E(J7.$$.fragment,f),E(Y7.$$.fragment,f),E(Z7.$$.fragment,f),E(A5.$$.fragment,f),E(ex.$$.fragment,f),E(P5.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(q5.$$.fragment,f),E(nx.$$.fragment,f),E(W5.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(H5.$$.fragment,f),E(cx.$$.fragment,f),E(J5.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(K5.$$.fragment,f),E(px.$$.fragment,f),E(o3.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(t3.$$.fragment,f),E(Tx.$$.fragment,f),E(n3.$$.fragment,f),hIe=!0)},o(f){C(d.$$.fragment,f),C(Fa.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(df.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(sg.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(PA.$$.fragment,f),C(jg.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(GA.$$.fragment,f),C(mh.$$.fragment,f),C(gh.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(kh.$$.fragment,f),C(Sh.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(Ph.$$.fragment,f),C(ZA.$$.fragment,f),C(Eu.$$.fragment,f),C(e0.$$.fragment,f),C(o0.$$.fragment,f),C(t0.$$.fragment,f),C(wu.$$.fragment,f),C(a0.$$.fragment,f),C(g_.$$.fragment,f),C(n0.$$.fragment,f),C(s0.$$.fragment,f),C(i0.$$.fragment,f),C(p_.$$.fragment,f),C(d0.$$.fragment,f),C(K_.$$.fragment,f),C(c0.$$.fragment,f),C(f0.$$.fragment,f),C(g0.$$.fragment,f),C(e1.$$.fragment,f),C(h0.$$.fragment,f),C(q1.$$.fragment,f),C(p0.$$.fragment,f),C(u0.$$.fragment,f),C(b0.$$.fragment,f),C(j1.$$.fragment,f),C(v0.$$.fragment,f),C(a2.$$.fragment,f),C(F0.$$.fragment,f),C(T0.$$.fragment,f),C(E0.$$.fragment,f),C(s2.$$.fragment,f),C(C0.$$.fragment,f),C(ob.$$.fragment,f),C(w0.$$.fragment,f),C(A0.$$.fragment,f),C(L0.$$.fragment,f),C(tb.$$.fragment,f),C(x0.$$.fragment,f),C(Rb.$$.fragment,f),C($0.$$.fragment,f),C(k0.$$.fragment,f),C(R0.$$.fragment,f),C(Pb.$$.fragment,f),C(B0.$$.fragment,f),C(Ob.$$.fragment,f),C(P0.$$.fragment,f),C(I0.$$.fragment,f),C(N0.$$.fragment,f),C(Xb.$$.fragment,f),C(j0.$$.fragment,f),C(wv.$$.fragment,f),C(D0.$$.fragment,f),C(G0.$$.fragment,f),C(V0.$$.fragment,f),C(yv.$$.fragment,f),C(X0.$$.fragment,f),C(hF.$$.fragment,f),C(z0.$$.fragment,f),C(W0.$$.fragment,f),C(H0.$$.fragment,f),C(uF.$$.fragment,f),C(U0.$$.fragment,f),C(vF.$$.fragment,f),C(J0.$$.fragment,f),C(Y0.$$.fragment,f),C(Z0.$$.fragment,f),C(TF.$$.fragment,f),C(ey.$$.fragment,f),C(BF.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(IF.$$.fragment,f),C(ny.$$.fragment,f),C(jF.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(GF.$$.fragment,f),C(cy.$$.fragment,f),C(KF.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(e6.$$.fragment,f),C(py.$$.fragment,f),C(l6.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(d6.$$.fragment,f),C(Fy.$$.fragment,f),C(F6.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(M6.$$.fragment,f),C(wy.$$.fragment,f),C(A6.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(L6.$$.fragment,f),C(ky.$$.fragment,f),C(P6.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(q6.$$.fragment,f),C(Iy.$$.fragment,f),C(O6.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(X6.$$.fragment,f),C(Gy.$$.fragment,f),C(Q6.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(U6.$$.fragment,f),C(Wy.$$.fragment,f),C(K6.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(eT.$$.fragment,f),C(Yy.$$.fragment,f),C(sT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(iT.$$.fragment,f),C(rL.$$.fragment,f),C(fT.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(gT.$$.fragment,f),C(lL.$$.fragment,f),C(t8.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(n8.$$.fragment,f),C(mL.$$.fragment,f),C(x8.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(k8.$$.fragment,f),C(_L.$$.fragment,f),C(X8.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(W8.$$.fragment,f),C(ML.$$.fragment,f),C(U8.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(Y8.$$.fragment,f),C(LL.$$.fragment,f),C(bM.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(FM.$$.fragment,f),C(RL.$$.fragment,f),C(kM.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(RM.$$.fragment,f),C(NL.$$.fragment,f),C(s4.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(i4.$$.fragment,f),C(VL.$$.fragment,f),C(A4.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(L4.$$.fragment,f),C(HL.$$.fragment,f),C($4.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(S4.$$.fragment,f),C(ZL.$$.fragment,f),C(Z4.$$.fragment,f),C(e7.$$.fragment,f),C(o7.$$.fragment,f),C(t7.$$.fragment,f),C(oE.$$.fragment,f),C(a7.$$.fragment,f),C(ME.$$.fragment,f),C(n7.$$.fragment,f),C(s7.$$.fragment,f),C(i7.$$.fragment,f),C(CE.$$.fragment,f),C(d7.$$.fragment,f),C(AE.$$.fragment,f),C(c7.$$.fragment,f),C(f7.$$.fragment,f),C(g7.$$.fragment,f),C(LE.$$.fragment,f),C(h7.$$.fragment,f),C($E.$$.fragment,f),C(p7.$$.fragment,f),C(u7.$$.fragment,f),C(b7.$$.fragment,f),C(SE.$$.fragment,f),C(v7.$$.fragment,f),C(aC.$$.fragment,f),C(F7.$$.fragment,f),C(T7.$$.fragment,f),C(E7.$$.fragment,f),C(sC.$$.fragment,f),C(C7.$$.fragment,f),C(mC.$$.fragment,f),C(w7.$$.fragment,f),C(A7.$$.fragment,f),C(L7.$$.fragment,f),C(hC.$$.fragment,f),C(x7.$$.fragment,f),C(yC.$$.fragment,f),C($7.$$.fragment,f),C(k7.$$.fragment,f),C(R7.$$.fragment,f),C(xC.$$.fragment,f),C(B7.$$.fragment,f),C(DC.$$.fragment,f),C(P7.$$.fragment,f),C(I7.$$.fragment,f),C(N7.$$.fragment,f),C(OC.$$.fragment,f),C(j7.$$.fragment,f),C(KC.$$.fragment,f),C(D7.$$.fragment,f),C(G7.$$.fragment,f),C(V7.$$.fragment,f),C(e5.$$.fragment,f),C(X7.$$.fragment,f),C(f5.$$.fragment,f),C(z7.$$.fragment,f),C(W7.$$.fragment,f),C(H7.$$.fragment,f),C(g5.$$.fragment,f),C(U7.$$.fragment,f),C(C5.$$.fragment,f),C(J7.$$.fragment,f),C(Y7.$$.fragment,f),C(Z7.$$.fragment,f),C(A5.$$.fragment,f),C(ex.$$.fragment,f),C(P5.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(q5.$$.fragment,f),C(nx.$$.fragment,f),C(W5.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(H5.$$.fragment,f),C(cx.$$.fragment,f),C(J5.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(K5.$$.fragment,f),C(px.$$.fragment,f),C(o3.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(t3.$$.fragment,f),C(Tx.$$.fragment,f),C(n3.$$.fragment,f),hIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(tf),f&&t(Zr),f&&t(Ne),f&&t(Xe),f&&t(nf),w(Fa,f),f&&t(ze),f&&t(Ae),f&&t(To),f&&t(Ta),f&&t(gBe),f&&t(ci),w(EA),f&&t(hBe),f&&t(wn),f&&t(pBe),w(CA,f),f&&t(uBe),f&&t(j9),f&&t(_Be),w(df,f),f&&t(bBe),f&&t(fi),w(wA),f&&t(vBe),f&&t(Mo),w(AA),w(xA),w(sg),w($A),f&&t(FBe),f&&t(gi),w(kA),f&&t(TBe),f&&t(Eo),w(SA),w(PA),w(jg),w(IA),f&&t(MBe),f&&t(hi),w(qA),f&&t(EBe),f&&t(Co),w(NA),w(GA),w(mh),w(gh),w(OA),f&&t(CBe),f&&t(pi),w(VA),f&&t(wBe),f&&t(wo),w(XA),w(QA),w(kh),w(Sh),w(HA),f&&t(ABe),f&&t(_i),w(UA),f&&t(yBe),f&&t(Ao),w(JA),w(KA),w(Ph),w(ZA),w(Eu),f&&t(LBe),f&&t(Fi),w(e0),f&&t(xBe),f&&t(yo),w(o0),w(t0),w(wu),w(a0),w(g_),f&&t($Be),f&&t(Ei),w(n0),f&&t(kBe),f&&t(Lo),w(s0),w(i0),w(p_),w(d0),w(K_),f&&t(SBe),f&&t(Ai),w(c0),f&&t(RBe),f&&t(xo),w(f0),w(g0),w(e1),w(h0),w(q1),f&&t(BBe),f&&t(xi),w(p0),f&&t(PBe),f&&t($o),w(u0),w(b0),w(j1),w(v0),w(a2),f&&t(IBe),f&&t(Si),w(F0),f&&t(qBe),f&&t(ko),w(T0),w(E0),w(s2),w(C0),w(ob),f&&t(NBe),f&&t(Pi),w(w0),f&&t(jBe),f&&t(So),w(A0),w(L0),w(tb),w(x0),w(Rb),f&&t(DBe),f&&t(Ni),w($0),f&&t(GBe),f&&t(Ro),w(k0),w(R0),w(Pb),w(B0),w(Ob),f&&t(OBe),f&&t(Gi),w(P0),f&&t(VBe),f&&t(Bo),w(I0),w(N0),w(Xb),w(j0),w(wv),f&&t(XBe),f&&t(Xi),w(D0),f&&t(zBe),f&&t(Po),w(G0),w(V0),w(yv),w(X0),w(hF),f&&t(WBe),f&&t(Qi),w(z0),f&&t(QBe),f&&t(Io),w(W0),w(H0),w(uF),w(U0),w(vF),f&&t(HBe),f&&t(Ji),w(J0),f&&t(UBe),f&&t(qo),w(Y0),w(Z0),w(TF),w(ey),w(BF),f&&t(JBe),f&&t(Zi),w(oy),f&&t(YBe),f&&t(No),w(ry),w(ay),w(IF),w(ny),w(jF),f&&t(KBe),f&&t(rd),w(sy),f&&t(ZBe),f&&t(jo),w(ly),w(dy),w(GF),w(cy),w(KF),f&&t(ePe),f&&t(nd),w(fy),f&&t(oPe),f&&t(Do),w(my),w(hy),w(e6),w(py),w(l6),f&&t(rPe),f&&t(id),w(uy),f&&t(tPe),f&&t(Go),w(_y),w(vy),w(d6),w(Fy),w(F6),f&&t(aPe),f&&t(fd),w(Ty),f&&t(nPe),f&&t(Oo),w(My),w(Cy),w(M6),w(wy),w(A6),f&&t(sPe),f&&t(hd),w(yy),f&&t(lPe),f&&t(Vo),w(Ly),w($y),w(L6),w(ky),w(P6),f&&t(iPe),f&&t(_d),w(Sy),f&&t(dPe),f&&t(Xo),w(Ry),w(Py),w(q6),w(Iy),w(O6),f&&t(cPe),f&&t(Td),w(qy),f&&t(fPe),f&&t(zo),w(Ny),w(Dy),w(X6),w(Gy),w(Q6),f&&t(mPe),f&&t(Cd),w(Oy),f&&t(gPe),f&&t(Wo),w(Vy),w(zy),w(U6),w(Wy),w(K6),f&&t(hPe),f&&t(yd),w(Qy),f&&t(pPe),f&&t(Qo),w(Hy),w(Jy),w(eT),w(Yy),w(sT),f&&t(uPe),f&&t($d),w(Ky),f&&t(_Pe),f&&t(Ho),w(Zy),w(oL),w(iT),w(rL),w(fT),f&&t(bPe),f&&t(Rd),w(tL),f&&t(vPe),f&&t(Uo),w(aL),w(sL),w(gT),w(lL),w(t8),f&&t(FPe),f&&t(Id),w(iL),f&&t(TPe),f&&t(Jo),w(dL),w(fL),w(n8),w(mL),w(x8),f&&t(MPe),f&&t(jd),w(gL),f&&t(EPe),f&&t(Yo),w(hL),w(uL),w(k8),w(_L),w(X8),f&&t(CPe),f&&t(Od),w(bL),f&&t(wPe),f&&t(Ko),w(vL),w(TL),w(W8),w(ML),w(U8),f&&t(APe),f&&t(zd),w(CL),f&&t(yPe),f&&t(Zo),w(wL),w(yL),w(Y8),w(LL),w(bM),f&&t(LPe),f&&t(Hd),w(xL),f&&t(xPe),f&&t(er),w($L),w(SL),w(FM),w(RL),w(kM),f&&t($Pe),f&&t(Yd),w(BL),f&&t(kPe),f&&t(or),w(PL),w(qL),w(RM),w(NL),w(s4),f&&t(SPe),f&&t(ec),w(jL),f&&t(RPe),f&&t(rr),w(DL),w(OL),w(i4),w(VL),w(A4),f&&t(BPe),f&&t(tc),w(XL),f&&t(PPe),f&&t(tr),w(zL),w(QL),w(L4),w(HL),w($4),f&&t(IPe),f&&t(sc),w(UL),f&&t(qPe),f&&t(ar),w(JL),w(KL),w(S4),w(ZL),w(Z4),f&&t(NPe),f&&t(dc),w(e7),f&&t(jPe),f&&t(nr),w(o7),w(t7),w(oE),w(a7),w(ME),f&&t(DPe),f&&t(mc),w(n7),f&&t(GPe),f&&t(sr),w(s7),w(i7),w(CE),w(d7),w(AE),f&&t(OPe),f&&t(pc),w(c7),f&&t(VPe),f&&t(lr),w(f7),w(g7),w(LE),w(h7),w($E),f&&t(XPe),f&&t(bc),w(p7),f&&t(zPe),f&&t(ir),w(u7),w(b7),w(SE),w(v7),w(aC),f&&t(WPe),f&&t(Tc),w(F7),f&&t(QPe),f&&t(dr),w(T7),w(E7),w(sC),w(C7),w(mC),f&&t(HPe),f&&t(Cc),w(w7),f&&t(UPe),f&&t(cr),w(A7),w(L7),w(hC),w(x7),w(yC),f&&t(JPe),f&&t(yc),w($7),f&&t(YPe),f&&t(fr),w(k7),w(R7),w(xC),w(B7),w(DC),f&&t(KPe),f&&t($c),w(P7),f&&t(ZPe),f&&t(mr),w(I7),w(N7),w(OC),w(j7),w(KC),f&&t(eIe),f&&t(Rc),w(D7),f&&t(oIe),f&&t(gr),w(G7),w(V7),w(e5),w(X7),w(f5),f&&t(rIe),f&&t(Ic),w(z7),f&&t(tIe),f&&t(hr),w(W7),w(H7),w(g5),w(U7),w(C5),f&&t(aIe),f&&t(jc),w(J7),f&&t(nIe),f&&t(pr),w(Y7),w(Z7),w(A5),w(ex),w(P5),f&&t(sIe),f&&t(Oc),w(ox),f&&t(lIe),f&&t(ur),w(rx),w(ax),w(q5),w(nx),w(W5),f&&t(iIe),f&&t(zc),w(sx),f&&t(dIe),f&&t(_r),w(lx),w(dx),w(H5),w(cx),w(J5),f&&t(cIe),f&&t(Hc),w(fx),f&&t(fIe),f&&t(br),w(mx),w(hx),w(K5),w(px),w(o3),f&&t(mIe),f&&t(Yc),w(_x),f&&t(gIe),f&&t(vr),w(bx),w(Fx),w(t3),w(Tx),w(n3)}}}const swt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function lwt(L){return d5t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class hwt extends n5t{constructor(g){super();s5t(this,g,lwt,nwt,l5t,{})}}export{hwt as default,swt as metadata};
