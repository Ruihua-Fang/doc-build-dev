import{S as qCt,i as NCt,s as jCt,e as a,k as l,w as F,t as o,M as DCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as GCt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as IIr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function OCt(A){let g,v,p,m,u,d,h,Mo,li,ff,et,ii,di,Bw,mf,qe,Xe,ci,An,Pw,yn,Ln,Iw,fi,xn,qw,mi,gf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),ff=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),Bw=o(")."),mf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),Pw=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),Iw=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),qw=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),gf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var r$=s(p);m=r(r$,"NewModelConfig"),r$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var t$=s(li);ff=r(t$,"model_type"),t$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var a$=s(ii);di=r(a$,'"new-model"'),a$.forEach(t),Bw=r(Ae,")."),Ae.forEach(t),mf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),Pw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var n$=s(yn);Ln=r(n$,"PreTrainedModel"),n$.forEach(t),Iw=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var hf=s(fi);xn=r(hf,"config_class"),hf.forEach(t),qw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var s$=s(mi);gf=r(s$,"NewModelConfig"),s$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,ff),e(g,et),e(g,ii),e(ii,di),e(g,Bw),b(ze,mf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,Pw),e(qe,yn),e(yn,Ln),e(qe,Iw),e(qe,fi),e(fi,xn),e(qe,qw),e(qe,mi),e(mi,gf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(mf),ze&&t(qe)}}}function VCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function QCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function HCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(A){let g,v,p,m,u,d,h,Mo,li,ff,et,ii,di,Bw,mf,qe,Xe,ci,An,Pw,yn,Ln,Iw,fi,xn,qw,mi,gf,Ma,ze,Ae,r$,gi,t$,a$,Eo,Ea,n$,hf,s$,sje,HBe,hi,pf,$Z,Nw,lje,kZ,ije,UBe,$n,dje,SZ,cje,fje,RZ,mje,gje,JBe,jw,YBe,l$,hje,KBe,uf,ZBe,pi,_f,BZ,Dw,pje,PZ,uje,ePe,Co,Gw,_je,Ow,bje,i$,vje,Fje,Tje,Vw,Mje,IZ,Eje,Cje,wje,Er,Xw,Aje,qZ,yje,Lje,ui,xje,NZ,$je,kje,jZ,Sje,Rje,Bje,y,bf,DZ,Pje,Ije,d$,qje,Nje,jje,vf,GZ,Dje,Gje,c$,Oje,Vje,Xje,Ff,OZ,zje,Qje,f$,Wje,Hje,Uje,Tf,VZ,Jje,Yje,m$,Kje,Zje,eDe,Mf,XZ,oDe,rDe,g$,tDe,aDe,nDe,Ef,zZ,sDe,lDe,h$,iDe,dDe,cDe,Cf,QZ,fDe,mDe,p$,gDe,hDe,pDe,wf,WZ,uDe,_De,u$,bDe,vDe,FDe,Af,HZ,TDe,MDe,_$,EDe,CDe,wDe,yf,UZ,ADe,yDe,b$,LDe,xDe,$De,Lf,JZ,kDe,SDe,v$,RDe,BDe,PDe,xf,YZ,IDe,qDe,F$,NDe,jDe,DDe,$f,KZ,GDe,ODe,T$,VDe,XDe,zDe,kf,ZZ,QDe,WDe,M$,HDe,UDe,JDe,Sf,eee,YDe,KDe,E$,ZDe,eGe,oGe,Rf,oee,rGe,tGe,C$,aGe,nGe,sGe,Bf,ree,lGe,iGe,w$,dGe,cGe,fGe,Pf,tee,mGe,gGe,A$,hGe,pGe,uGe,If,aee,_Ge,bGe,y$,vGe,FGe,TGe,qf,nee,MGe,EGe,L$,CGe,wGe,AGe,Nf,see,yGe,LGe,x$,xGe,$Ge,kGe,jf,lee,SGe,RGe,$$,BGe,PGe,IGe,Df,iee,qGe,NGe,k$,jGe,DGe,GGe,Gf,dee,OGe,VGe,S$,XGe,zGe,QGe,Of,cee,WGe,HGe,R$,UGe,JGe,YGe,Vf,fee,KGe,ZGe,B$,eOe,oOe,rOe,Xf,mee,tOe,aOe,P$,nOe,sOe,lOe,zf,gee,iOe,dOe,I$,cOe,fOe,mOe,Qf,hee,gOe,hOe,q$,pOe,uOe,_Oe,Wf,pee,bOe,vOe,N$,FOe,TOe,MOe,Hf,uee,EOe,COe,j$,wOe,AOe,yOe,Uf,_ee,LOe,xOe,D$,$Oe,kOe,SOe,Jf,bee,ROe,BOe,G$,POe,IOe,qOe,Yf,vee,NOe,jOe,O$,DOe,GOe,OOe,Kf,Fee,VOe,XOe,V$,zOe,QOe,WOe,Zf,Tee,HOe,UOe,X$,JOe,YOe,KOe,em,Mee,ZOe,eVe,z$,oVe,rVe,tVe,om,Eee,aVe,nVe,Q$,sVe,lVe,iVe,rm,Cee,dVe,cVe,W$,fVe,mVe,gVe,tm,wee,hVe,pVe,H$,uVe,_Ve,bVe,am,Aee,vVe,FVe,U$,TVe,MVe,EVe,nm,yee,CVe,wVe,J$,AVe,yVe,LVe,sm,Lee,xVe,$Ve,Y$,kVe,SVe,RVe,lm,xee,BVe,PVe,K$,IVe,qVe,NVe,im,$ee,jVe,DVe,Z$,GVe,OVe,VVe,dm,kee,XVe,zVe,ek,QVe,WVe,HVe,cm,See,UVe,JVe,ok,YVe,KVe,ZVe,fm,Ree,eXe,oXe,rk,rXe,tXe,aXe,mm,Bee,nXe,sXe,tk,lXe,iXe,dXe,gm,Pee,cXe,fXe,ak,mXe,gXe,hXe,hm,Iee,pXe,uXe,nk,_Xe,bXe,vXe,pm,qee,FXe,TXe,sk,MXe,EXe,CXe,um,Nee,wXe,AXe,lk,yXe,LXe,xXe,_m,jee,$Xe,kXe,ik,SXe,RXe,BXe,bm,Dee,PXe,IXe,dk,qXe,NXe,jXe,vm,Gee,DXe,GXe,ck,OXe,VXe,XXe,Fm,Oee,zXe,QXe,fk,WXe,HXe,UXe,Tm,Vee,JXe,YXe,mk,KXe,ZXe,eze,Mm,Xee,oze,rze,gk,tze,aze,nze,Em,zee,sze,lze,hk,ize,dze,cze,Cm,Qee,fze,mze,pk,gze,hze,pze,wm,Wee,uze,_ze,uk,bze,vze,Fze,Am,Hee,Tze,Mze,_k,Eze,Cze,wze,ym,Uee,Aze,yze,bk,Lze,xze,$ze,Lm,Jee,kze,Sze,vk,Rze,Bze,Pze,xm,Yee,Ize,qze,Fk,Nze,jze,Dze,$m,Kee,Gze,Oze,Tk,Vze,Xze,zze,km,Zee,Qze,Wze,Mk,Hze,Uze,Jze,Sm,eoe,Yze,Kze,Ek,Zze,eQe,oQe,Rm,ooe,rQe,tQe,Ck,aQe,nQe,sQe,Bm,roe,lQe,iQe,wk,dQe,cQe,fQe,Pm,toe,mQe,gQe,Ak,hQe,pQe,uQe,Im,aoe,_Qe,bQe,yk,vQe,FQe,TQe,qm,noe,MQe,EQe,Lk,CQe,wQe,AQe,Nm,soe,yQe,LQe,xk,xQe,$Qe,kQe,jm,loe,SQe,RQe,$k,BQe,PQe,IQe,Dm,ioe,qQe,NQe,kk,jQe,DQe,GQe,Gm,doe,OQe,VQe,Sk,XQe,zQe,QQe,Om,coe,WQe,HQe,Rk,UQe,JQe,YQe,Vm,foe,KQe,ZQe,Bk,eWe,oWe,rWe,Xm,moe,tWe,aWe,Pk,nWe,sWe,lWe,zm,goe,iWe,dWe,Ik,cWe,fWe,mWe,Qm,hoe,gWe,hWe,qk,pWe,uWe,_We,Wm,poe,bWe,vWe,Nk,FWe,TWe,MWe,Hm,uoe,EWe,CWe,jk,wWe,AWe,yWe,Um,_oe,LWe,xWe,Dk,$We,kWe,SWe,Jm,boe,RWe,BWe,Gk,PWe,IWe,qWe,Ym,voe,NWe,jWe,Ok,DWe,GWe,OWe,Km,Foe,VWe,XWe,Vk,zWe,QWe,WWe,Zm,Toe,HWe,UWe,Xk,JWe,YWe,KWe,eg,Moe,ZWe,eHe,zk,oHe,rHe,tHe,og,Eoe,aHe,nHe,Qk,sHe,lHe,iHe,rg,Coe,dHe,cHe,Wk,fHe,mHe,gHe,tg,woe,hHe,pHe,Hk,uHe,_He,bHe,ag,Aoe,vHe,FHe,Uk,THe,MHe,EHe,ng,yoe,CHe,wHe,Jk,AHe,yHe,LHe,sg,Loe,xHe,$He,Yk,kHe,SHe,RHe,lg,xoe,BHe,PHe,Kk,IHe,qHe,NHe,ig,$oe,jHe,DHe,Zk,GHe,OHe,VHe,dg,koe,XHe,zHe,eS,QHe,WHe,HHe,cg,Soe,UHe,JHe,oS,YHe,KHe,ZHe,fg,Roe,eUe,oUe,rS,rUe,tUe,aUe,mg,Boe,nUe,sUe,tS,lUe,iUe,dUe,gg,cUe,hg,zw,fUe,Poe,mUe,oPe,_i,pg,Ioe,Qw,gUe,qoe,hUe,rPe,wo,Ww,pUe,Hw,uUe,aS,_Ue,bUe,vUe,Uw,FUe,Noe,TUe,MUe,EUe,Cr,Jw,CUe,joe,wUe,AUe,Ca,yUe,Doe,LUe,xUe,Goe,$Ue,kUe,Ooe,SUe,RUe,BUe,k,kn,Voe,PUe,IUe,nS,qUe,NUe,sS,jUe,DUe,GUe,Sn,Xoe,OUe,VUe,lS,XUe,zUe,iS,QUe,WUe,HUe,Rn,zoe,UUe,JUe,dS,YUe,KUe,cS,ZUe,eJe,oJe,ug,Qoe,rJe,tJe,fS,aJe,nJe,sJe,Bn,Woe,lJe,iJe,mS,dJe,cJe,gS,fJe,mJe,gJe,_g,Hoe,hJe,pJe,hS,uJe,_Je,bJe,bg,Uoe,vJe,FJe,pS,TJe,MJe,EJe,vg,Joe,CJe,wJe,uS,AJe,yJe,LJe,Pn,Yoe,xJe,$Je,_S,kJe,SJe,bS,RJe,BJe,PJe,In,Koe,IJe,qJe,vS,NJe,jJe,FS,DJe,GJe,OJe,qn,Zoe,VJe,XJe,TS,zJe,QJe,MS,WJe,HJe,UJe,Fg,ere,JJe,YJe,ES,KJe,ZJe,eYe,Tg,ore,oYe,rYe,CS,tYe,aYe,nYe,Nn,rre,sYe,lYe,wS,iYe,dYe,AS,cYe,fYe,mYe,Mg,tre,gYe,hYe,yS,pYe,uYe,_Ye,jn,are,bYe,vYe,LS,FYe,TYe,xS,MYe,EYe,CYe,Dn,nre,wYe,AYe,$S,yYe,LYe,kS,xYe,$Ye,kYe,Gn,sre,SYe,RYe,SS,BYe,PYe,RS,IYe,qYe,NYe,Eg,lre,jYe,DYe,BS,GYe,OYe,VYe,On,ire,XYe,zYe,PS,QYe,WYe,IS,HYe,UYe,JYe,Vn,dre,YYe,KYe,qS,ZYe,eKe,NS,oKe,rKe,tKe,Xn,cre,aKe,nKe,jS,sKe,lKe,DS,iKe,dKe,cKe,zn,fre,fKe,mKe,GS,gKe,hKe,OS,pKe,uKe,_Ke,Qn,mre,bKe,vKe,VS,FKe,TKe,XS,MKe,EKe,CKe,Wn,gre,wKe,AKe,zS,yKe,LKe,QS,xKe,$Ke,kKe,Cg,hre,SKe,RKe,WS,BKe,PKe,IKe,Hn,pre,qKe,NKe,HS,jKe,DKe,US,GKe,OKe,VKe,wg,ure,XKe,zKe,JS,QKe,WKe,HKe,Un,_re,UKe,JKe,YS,YKe,KKe,KS,ZKe,eZe,oZe,Jn,bre,rZe,tZe,ZS,aZe,nZe,eR,sZe,lZe,iZe,Yn,vre,dZe,cZe,oR,fZe,mZe,rR,gZe,hZe,pZe,Kn,Fre,uZe,_Ze,tR,bZe,vZe,aR,FZe,TZe,MZe,Zn,Tre,EZe,CZe,nR,wZe,AZe,sR,yZe,LZe,xZe,Ag,Mre,$Ze,kZe,lR,SZe,RZe,BZe,es,Ere,PZe,IZe,iR,qZe,NZe,dR,jZe,DZe,GZe,os,Cre,OZe,VZe,cR,XZe,zZe,fR,QZe,WZe,HZe,rs,wre,UZe,JZe,mR,YZe,KZe,gR,ZZe,eeo,oeo,ts,Are,reo,teo,hR,aeo,neo,pR,seo,leo,ieo,as,yre,deo,ceo,uR,feo,meo,_R,geo,heo,peo,ns,Lre,ueo,_eo,bR,beo,veo,vR,Feo,Teo,Meo,yg,xre,Eeo,Ceo,FR,weo,Aeo,yeo,ss,$re,Leo,xeo,TR,$eo,keo,MR,Seo,Reo,Beo,Lg,kre,Peo,Ieo,ER,qeo,Neo,jeo,xg,Sre,Deo,Geo,CR,Oeo,Veo,Xeo,ls,Rre,zeo,Qeo,wR,Weo,Heo,AR,Ueo,Jeo,Yeo,is,Bre,Keo,Zeo,yR,eoo,ooo,LR,roo,too,aoo,ds,Pre,noo,soo,xR,loo,ioo,$R,doo,coo,foo,$g,Ire,moo,goo,kR,hoo,poo,uoo,cs,qre,_oo,boo,SR,voo,Foo,RR,Too,Moo,Eoo,fs,Nre,Coo,woo,BR,Aoo,yoo,PR,Loo,xoo,$oo,ms,jre,koo,Soo,IR,Roo,Boo,qR,Poo,Ioo,qoo,gs,Dre,Noo,joo,NR,Doo,Goo,jR,Ooo,Voo,Xoo,hs,Gre,zoo,Qoo,DR,Woo,Hoo,GR,Uoo,Joo,Yoo,ps,Ore,Koo,Zoo,OR,ero,oro,VR,rro,tro,aro,kg,Vre,nro,sro,XR,lro,iro,dro,Sg,Xre,cro,fro,zR,mro,gro,hro,Rg,zre,pro,uro,QR,_ro,bro,vro,Bg,Qre,Fro,Tro,WR,Mro,Ero,Cro,us,Wre,wro,Aro,HR,yro,Lro,UR,xro,$ro,kro,Pg,Hre,Sro,Rro,JR,Bro,Pro,Iro,_s,Ure,qro,Nro,YR,jro,Dro,KR,Gro,Oro,Vro,bs,Jre,Xro,zro,ZR,Qro,Wro,eB,Hro,Uro,Jro,vs,Yre,Yro,Kro,oB,Zro,eto,rB,oto,rto,tto,Fs,Kre,ato,nto,tB,sto,lto,aB,ito,dto,cto,Ts,Zre,fto,mto,nB,gto,hto,sB,pto,uto,_to,Ms,ete,bto,vto,lB,Fto,Tto,iB,Mto,Eto,Cto,Ig,ote,wto,Ato,dB,yto,Lto,xto,qg,rte,$to,kto,cB,Sto,Rto,Bto,Es,tte,Pto,Ito,fB,qto,Nto,mB,jto,Dto,Gto,Cs,ate,Oto,Vto,gB,Xto,zto,hB,Qto,Wto,Hto,ws,nte,Uto,Jto,pB,Yto,Kto,uB,Zto,eao,oao,Ng,ste,rao,tao,_B,aao,nao,sao,jg,lte,lao,iao,bB,dao,cao,fao,Dg,ite,mao,gao,vB,hao,pao,uao,As,dte,_ao,bao,FB,vao,Fao,TB,Tao,Mao,Eao,Gg,cte,Cao,wao,MB,Aao,yao,Lao,Og,fte,xao,$ao,EB,kao,Sao,Rao,ys,mte,Bao,Pao,CB,Iao,qao,wB,Nao,jao,Dao,Vg,gte,Gao,Oao,AB,Vao,Xao,zao,Xg,hte,Qao,Wao,yB,Hao,Uao,Jao,Ls,pte,Yao,Kao,LB,Zao,eno,xB,ono,rno,tno,xs,ute,ano,nno,$B,sno,lno,kB,ino,dno,cno,$s,_te,fno,mno,SB,gno,hno,RB,pno,uno,_no,ks,bte,bno,vno,BB,Fno,Tno,PB,Mno,Eno,Cno,zg,wno,Qg,Yw,Ano,vte,yno,tPe,bi,Wg,Fte,Kw,Lno,Tte,xno,aPe,Ao,Zw,$no,eA,kno,IB,Sno,Rno,Bno,oA,Pno,Mte,Ino,qno,Nno,Qe,rA,jno,Ete,Dno,Gno,wa,Ono,Cte,Vno,Xno,wte,zno,Qno,Ate,Wno,Hno,Uno,te,Hg,yte,Jno,Yno,qB,Kno,Zno,eso,Ug,Lte,oso,rso,NB,tso,aso,nso,Jg,xte,sso,lso,jB,iso,dso,cso,Yg,$te,fso,mso,DB,gso,hso,pso,Kg,kte,uso,_so,GB,bso,vso,Fso,Zg,Ste,Tso,Mso,OB,Eso,Cso,wso,eh,Rte,Aso,yso,VB,Lso,xso,$so,oh,Bte,kso,Sso,XB,Rso,Bso,Pso,rh,Pte,Iso,qso,zB,Nso,jso,Dso,th,Ite,Gso,Oso,QB,Vso,Xso,zso,ah,qte,Qso,Wso,WB,Hso,Uso,Jso,nh,Nte,Yso,Kso,HB,Zso,elo,olo,sh,jte,rlo,tlo,UB,alo,nlo,slo,lh,Dte,llo,ilo,JB,dlo,clo,flo,ih,Gte,mlo,glo,YB,hlo,plo,ulo,dh,Ote,_lo,blo,KB,vlo,Flo,Tlo,ch,Vte,Mlo,Elo,ZB,Clo,wlo,Alo,fh,Xte,ylo,Llo,eP,xlo,$lo,klo,mh,zte,Slo,Rlo,oP,Blo,Plo,Ilo,gh,Qte,qlo,Nlo,rP,jlo,Dlo,Glo,hh,Wte,Olo,Vlo,tP,Xlo,zlo,Qlo,ph,Hte,Wlo,Hlo,aP,Ulo,Jlo,Ylo,uh,Ute,Klo,Zlo,nP,eio,oio,rio,_h,Jte,tio,aio,sP,nio,sio,lio,bh,iio,vh,dio,Fh,tA,cio,Yte,fio,nPe,vi,Th,Kte,aA,mio,Zte,gio,sPe,yo,nA,hio,sA,pio,lP,uio,_io,bio,lA,vio,eae,Fio,Tio,Mio,We,iA,Eio,oae,Cio,wio,Fi,Aio,rae,yio,Lio,tae,xio,$io,kio,be,Mh,aae,Sio,Rio,iP,Bio,Pio,Iio,Eh,nae,qio,Nio,dP,jio,Dio,Gio,Ch,sae,Oio,Vio,cP,Xio,zio,Qio,wh,lae,Wio,Hio,fP,Uio,Jio,Yio,Ah,iae,Kio,Zio,mP,edo,odo,rdo,yh,dae,tdo,ado,gP,ndo,sdo,ldo,Lh,cae,ido,ddo,hP,cdo,fdo,mdo,xh,fae,gdo,hdo,pP,pdo,udo,_do,$h,mae,bdo,vdo,uP,Fdo,Tdo,Mdo,kh,gae,Edo,Cdo,_P,wdo,Ado,ydo,Sh,hae,Ldo,xdo,bP,$do,kdo,Sdo,Rh,pae,Rdo,Bdo,vP,Pdo,Ido,qdo,Bh,uae,Ndo,jdo,FP,Ddo,Gdo,Odo,Ph,_ae,Vdo,Xdo,TP,zdo,Qdo,Wdo,Ih,Hdo,qh,Udo,Nh,dA,Jdo,bae,Ydo,lPe,Ti,jh,vae,cA,Kdo,Fae,Zdo,iPe,Lo,fA,eco,Mi,oco,MP,rco,tco,EP,aco,nco,sco,mA,lco,Tae,ico,dco,cco,ot,gA,fco,Mae,mco,gco,Ei,hco,Eae,pco,uco,CP,_co,bco,vco,Dh,Fco,He,hA,Tco,Cae,Mco,Eco,Aa,Cco,wae,wco,Aco,Aae,yco,Lco,yae,xco,$co,kco,x,Gh,Lae,Sco,Rco,wP,Bco,Pco,Ico,Oh,xae,qco,Nco,AP,jco,Dco,Gco,Vh,$ae,Oco,Vco,yP,Xco,zco,Qco,Xh,kae,Wco,Hco,LP,Uco,Jco,Yco,zh,Sae,Kco,Zco,xP,efo,ofo,rfo,Qh,Rae,tfo,afo,$P,nfo,sfo,lfo,Wh,Bae,ifo,dfo,kP,cfo,ffo,mfo,Hh,Pae,gfo,hfo,SP,pfo,ufo,_fo,Uh,Iae,bfo,vfo,RP,Ffo,Tfo,Mfo,Jh,qae,Efo,Cfo,BP,wfo,Afo,yfo,Yh,Nae,Lfo,xfo,PP,$fo,kfo,Sfo,Kh,jae,Rfo,Bfo,IP,Pfo,Ifo,qfo,Zh,Dae,Nfo,jfo,qP,Dfo,Gfo,Ofo,ep,Gae,Vfo,Xfo,NP,zfo,Qfo,Wfo,op,Oae,Hfo,Ufo,jP,Jfo,Yfo,Kfo,rp,Vae,Zfo,emo,DP,omo,rmo,tmo,tp,Xae,amo,nmo,GP,smo,lmo,imo,ap,zae,dmo,cmo,OP,fmo,mmo,gmo,np,Qae,hmo,pmo,VP,umo,_mo,bmo,sp,Wae,vmo,Fmo,XP,Tmo,Mmo,Emo,lp,Hae,Cmo,wmo,zP,Amo,ymo,Lmo,ip,Uae,xmo,$mo,QP,kmo,Smo,Rmo,dp,Jae,Bmo,Pmo,WP,Imo,qmo,Nmo,cp,Yae,jmo,Dmo,HP,Gmo,Omo,Vmo,fp,Kae,Xmo,zmo,UP,Qmo,Wmo,Hmo,mp,Zae,Umo,Jmo,JP,Ymo,Kmo,Zmo,gp,ene,ego,ogo,YP,rgo,tgo,ago,hp,one,ngo,sgo,KP,lgo,igo,dgo,pp,rne,cgo,fgo,ZP,mgo,ggo,hgo,up,tne,pgo,ugo,eI,_go,bgo,vgo,Ss,ane,Fgo,Tgo,oI,Mgo,Ego,rI,Cgo,wgo,Ago,_p,nne,ygo,Lgo,tI,xgo,$go,kgo,bp,sne,Sgo,Rgo,aI,Bgo,Pgo,Igo,vp,lne,qgo,Ngo,nI,jgo,Dgo,Ggo,Fp,ine,Ogo,Vgo,sI,Xgo,zgo,Qgo,Tp,dne,Wgo,Hgo,lI,Ugo,Jgo,Ygo,Mp,cne,Kgo,Zgo,iI,eho,oho,rho,Ep,fne,tho,aho,dI,nho,sho,lho,Cp,mne,iho,dho,cI,cho,fho,mho,wp,gne,gho,hho,fI,pho,uho,_ho,Ap,hne,bho,vho,mI,Fho,Tho,Mho,yp,pne,Eho,Cho,gI,who,Aho,yho,Lp,une,Lho,xho,hI,$ho,kho,Sho,xp,_ne,Rho,Bho,pI,Pho,Iho,qho,$p,bne,Nho,jho,uI,Dho,Gho,Oho,kp,vne,Vho,Xho,_I,zho,Qho,Who,Sp,Fne,Hho,Uho,bI,Jho,Yho,Kho,Rp,Tne,Zho,epo,vI,opo,rpo,tpo,Bp,Mne,apo,npo,FI,spo,lpo,ipo,Pp,Ene,dpo,cpo,TI,fpo,mpo,gpo,Ip,Cne,hpo,ppo,MI,upo,_po,bpo,qp,wne,vpo,Fpo,EI,Tpo,Mpo,Epo,Np,Ane,Cpo,wpo,CI,Apo,ypo,Lpo,jp,yne,xpo,$po,wI,kpo,Spo,Rpo,Dp,Lne,Bpo,Ppo,AI,Ipo,qpo,Npo,Gp,xne,jpo,Dpo,yI,Gpo,Opo,Vpo,Op,$ne,Xpo,zpo,LI,Qpo,Wpo,Hpo,Vp,kne,Upo,Jpo,xI,Ypo,Kpo,Zpo,Xp,Sne,euo,ouo,$I,ruo,tuo,auo,zp,Rne,nuo,suo,kI,luo,iuo,duo,Qp,Bne,cuo,fuo,SI,muo,guo,huo,Wp,Pne,puo,uuo,RI,_uo,buo,vuo,Hp,Ine,Fuo,Tuo,BI,Muo,Euo,Cuo,Up,qne,wuo,Auo,PI,yuo,Luo,xuo,Jp,Nne,$uo,kuo,II,Suo,Ruo,Buo,Yp,jne,Puo,Iuo,qI,quo,Nuo,juo,Kp,Dne,Duo,Guo,NI,Ouo,Vuo,Xuo,Zp,Gne,zuo,Quo,jI,Wuo,Huo,Uuo,eu,One,Juo,Yuo,DI,Kuo,Zuo,e_o,ou,Vne,o_o,r_o,GI,t_o,a_o,n_o,ru,Xne,s_o,l_o,OI,i_o,d_o,c_o,tu,zne,f_o,m_o,VI,g_o,h_o,p_o,au,Qne,u_o,__o,XI,b_o,v_o,F_o,nu,Wne,T_o,M_o,zI,E_o,C_o,w_o,su,Hne,A_o,y_o,QI,L_o,x_o,$_o,lu,Une,k_o,S_o,WI,R_o,B_o,P_o,iu,Jne,I_o,q_o,HI,N_o,j_o,D_o,du,Yne,G_o,O_o,UI,V_o,X_o,z_o,cu,Kne,Q_o,W_o,JI,H_o,U_o,J_o,fu,Zne,Y_o,K_o,YI,Z_o,e2o,o2o,mu,ese,r2o,t2o,KI,a2o,n2o,s2o,gu,ose,l2o,i2o,ZI,d2o,c2o,f2o,hu,rse,m2o,g2o,eq,h2o,p2o,u2o,pu,tse,_2o,b2o,oq,v2o,F2o,T2o,uu,ase,M2o,E2o,rq,C2o,w2o,A2o,_u,nse,y2o,L2o,tq,x2o,$2o,k2o,bu,sse,S2o,R2o,aq,B2o,P2o,I2o,vu,lse,q2o,N2o,nq,j2o,D2o,G2o,Fu,ise,O2o,V2o,sq,X2o,z2o,Q2o,Tu,dse,W2o,H2o,lq,U2o,J2o,Y2o,Mu,cse,K2o,Z2o,iq,e1o,o1o,r1o,Eu,fse,t1o,a1o,dq,n1o,s1o,l1o,Cu,mse,i1o,d1o,cq,c1o,f1o,m1o,wu,gse,g1o,h1o,fq,p1o,u1o,_1o,Au,hse,b1o,v1o,mq,F1o,T1o,M1o,yu,E1o,pse,C1o,w1o,use,A1o,y1o,Lu,dPe,Ci,xu,_se,pA,L1o,bse,x1o,cPe,xo,uA,$1o,wi,k1o,gq,S1o,R1o,hq,B1o,P1o,I1o,_A,q1o,vse,N1o,j1o,D1o,rt,bA,G1o,Fse,O1o,V1o,Ai,X1o,Tse,z1o,Q1o,pq,W1o,H1o,U1o,$u,J1o,Ue,vA,Y1o,Mse,K1o,Z1o,ya,ebo,Ese,obo,rbo,Cse,tbo,abo,wse,nbo,sbo,lbo,G,ku,Ase,ibo,dbo,uq,cbo,fbo,mbo,Su,yse,gbo,hbo,_q,pbo,ubo,_bo,Ru,Lse,bbo,vbo,bq,Fbo,Tbo,Mbo,Bu,xse,Ebo,Cbo,vq,wbo,Abo,ybo,Pu,$se,Lbo,xbo,Fq,$bo,kbo,Sbo,Iu,kse,Rbo,Bbo,Tq,Pbo,Ibo,qbo,qu,Sse,Nbo,jbo,Mq,Dbo,Gbo,Obo,Nu,Rse,Vbo,Xbo,Eq,zbo,Qbo,Wbo,ju,Bse,Hbo,Ubo,Cq,Jbo,Ybo,Kbo,Du,Pse,Zbo,evo,wq,ovo,rvo,tvo,Gu,Ise,avo,nvo,Aq,svo,lvo,ivo,Ou,qse,dvo,cvo,yq,fvo,mvo,gvo,Vu,Nse,hvo,pvo,Lq,uvo,_vo,bvo,Xu,jse,vvo,Fvo,xq,Tvo,Mvo,Evo,zu,Dse,Cvo,wvo,$q,Avo,yvo,Lvo,Qu,Gse,xvo,$vo,kq,kvo,Svo,Rvo,Wu,Ose,Bvo,Pvo,Sq,Ivo,qvo,Nvo,Hu,Vse,jvo,Dvo,Rq,Gvo,Ovo,Vvo,Uu,Xse,Xvo,zvo,Bq,Qvo,Wvo,Hvo,Ju,zse,Uvo,Jvo,Pq,Yvo,Kvo,Zvo,Yu,Qse,eFo,oFo,Iq,rFo,tFo,aFo,Ku,Wse,nFo,sFo,qq,lFo,iFo,dFo,Zu,Hse,cFo,fFo,Nq,mFo,gFo,hFo,e_,Use,pFo,uFo,jq,_Fo,bFo,vFo,o_,Jse,FFo,TFo,Dq,MFo,EFo,CFo,r_,Yse,wFo,AFo,Gq,yFo,LFo,xFo,t_,Kse,$Fo,kFo,Oq,SFo,RFo,BFo,a_,Zse,PFo,IFo,Vq,qFo,NFo,jFo,n_,ele,DFo,GFo,Xq,OFo,VFo,XFo,s_,ole,zFo,QFo,zq,WFo,HFo,UFo,l_,rle,JFo,YFo,Qq,KFo,ZFo,e0o,i_,tle,o0o,r0o,Wq,t0o,a0o,n0o,d_,ale,s0o,l0o,Hq,i0o,d0o,c0o,c_,nle,f0o,m0o,Uq,g0o,h0o,p0o,f_,sle,u0o,_0o,Jq,b0o,v0o,F0o,m_,lle,T0o,M0o,Yq,E0o,C0o,w0o,g_,ile,A0o,y0o,Kq,L0o,x0o,$0o,h_,dle,k0o,S0o,Zq,R0o,B0o,P0o,p_,cle,I0o,q0o,eN,N0o,j0o,D0o,u_,G0o,fle,O0o,V0o,mle,X0o,z0o,__,fPe,yi,b_,gle,FA,Q0o,hle,W0o,mPe,$o,TA,H0o,Li,U0o,oN,J0o,Y0o,rN,K0o,Z0o,eTo,MA,oTo,ple,rTo,tTo,aTo,tt,EA,nTo,ule,sTo,lTo,xi,iTo,_le,dTo,cTo,tN,fTo,mTo,gTo,v_,hTo,Je,CA,pTo,ble,uTo,_To,La,bTo,vle,vTo,FTo,Fle,TTo,MTo,Tle,ETo,CTo,wTo,z,F_,Mle,ATo,yTo,aN,LTo,xTo,$To,T_,Ele,kTo,STo,nN,RTo,BTo,PTo,M_,Cle,ITo,qTo,sN,NTo,jTo,DTo,E_,wle,GTo,OTo,lN,VTo,XTo,zTo,C_,Ale,QTo,WTo,iN,HTo,UTo,JTo,w_,yle,YTo,KTo,dN,ZTo,e7o,o7o,A_,Lle,r7o,t7o,cN,a7o,n7o,s7o,y_,xle,l7o,i7o,fN,d7o,c7o,f7o,L_,$le,m7o,g7o,mN,h7o,p7o,u7o,x_,kle,_7o,b7o,gN,v7o,F7o,T7o,$_,Sle,M7o,E7o,hN,C7o,w7o,A7o,k_,Rle,y7o,L7o,pN,x7o,$7o,k7o,S_,Ble,S7o,R7o,uN,B7o,P7o,I7o,R_,Ple,q7o,N7o,_N,j7o,D7o,G7o,B_,Ile,O7o,V7o,bN,X7o,z7o,Q7o,P_,qle,W7o,H7o,vN,U7o,J7o,Y7o,I_,Nle,K7o,Z7o,FN,e9o,o9o,r9o,q_,jle,t9o,a9o,TN,n9o,s9o,l9o,N_,Dle,i9o,d9o,MN,c9o,f9o,m9o,j_,Gle,g9o,h9o,EN,p9o,u9o,_9o,D_,Ole,b9o,v9o,CN,F9o,T9o,M9o,G_,Vle,E9o,C9o,wN,w9o,A9o,y9o,O_,Xle,L9o,x9o,AN,$9o,k9o,S9o,V_,zle,R9o,B9o,yN,P9o,I9o,q9o,X_,Qle,N9o,j9o,LN,D9o,G9o,O9o,z_,Wle,V9o,X9o,xN,z9o,Q9o,W9o,Q_,Hle,H9o,U9o,$N,J9o,Y9o,K9o,W_,Ule,Z9o,eMo,kN,oMo,rMo,tMo,H_,Jle,aMo,nMo,SN,sMo,lMo,iMo,U_,Yle,dMo,cMo,RN,fMo,mMo,gMo,J_,Kle,hMo,pMo,BN,uMo,_Mo,bMo,Y_,Zle,vMo,FMo,PN,TMo,MMo,EMo,K_,eie,CMo,wMo,IN,AMo,yMo,LMo,Z_,oie,xMo,$Mo,qN,kMo,SMo,RMo,e2,rie,BMo,PMo,NN,IMo,qMo,NMo,o2,jMo,tie,DMo,GMo,aie,OMo,VMo,r2,gPe,$i,t2,nie,wA,XMo,sie,zMo,hPe,ko,AA,QMo,ki,WMo,jN,HMo,UMo,DN,JMo,YMo,KMo,yA,ZMo,lie,e4o,o4o,r4o,at,LA,t4o,iie,a4o,n4o,Si,s4o,die,l4o,i4o,GN,d4o,c4o,f4o,a2,m4o,Ye,xA,g4o,cie,h4o,p4o,xa,u4o,fie,_4o,b4o,mie,v4o,F4o,gie,T4o,M4o,E4o,Q,n2,hie,C4o,w4o,ON,A4o,y4o,L4o,s2,pie,x4o,$4o,VN,k4o,S4o,R4o,l2,uie,B4o,P4o,XN,I4o,q4o,N4o,i2,_ie,j4o,D4o,zN,G4o,O4o,V4o,d2,bie,X4o,z4o,QN,Q4o,W4o,H4o,c2,vie,U4o,J4o,WN,Y4o,K4o,Z4o,f2,Fie,eEo,oEo,HN,rEo,tEo,aEo,m2,Tie,nEo,sEo,UN,lEo,iEo,dEo,g2,Mie,cEo,fEo,JN,mEo,gEo,hEo,h2,Eie,pEo,uEo,YN,_Eo,bEo,vEo,p2,Cie,FEo,TEo,KN,MEo,EEo,CEo,u2,wie,wEo,AEo,ZN,yEo,LEo,xEo,_2,Aie,$Eo,kEo,ej,SEo,REo,BEo,b2,yie,PEo,IEo,oj,qEo,NEo,jEo,v2,Lie,DEo,GEo,rj,OEo,VEo,XEo,F2,xie,zEo,QEo,tj,WEo,HEo,UEo,T2,$ie,JEo,YEo,aj,KEo,ZEo,e5o,M2,kie,o5o,r5o,nj,t5o,a5o,n5o,E2,Sie,s5o,l5o,sj,i5o,d5o,c5o,C2,Rie,f5o,m5o,lj,g5o,h5o,p5o,w2,Bie,u5o,_5o,ij,b5o,v5o,F5o,A2,Pie,T5o,M5o,dj,E5o,C5o,w5o,y2,Iie,A5o,y5o,cj,L5o,x5o,$5o,L2,qie,k5o,S5o,fj,R5o,B5o,P5o,x2,Nie,I5o,q5o,mj,N5o,j5o,D5o,$2,jie,G5o,O5o,gj,V5o,X5o,z5o,k2,Die,Q5o,W5o,hj,H5o,U5o,J5o,S2,Gie,Y5o,K5o,pj,Z5o,eCo,oCo,R2,Oie,rCo,tCo,uj,aCo,nCo,sCo,B2,Vie,lCo,iCo,_j,dCo,cCo,fCo,P2,Xie,mCo,gCo,zie,hCo,pCo,uCo,I2,Qie,_Co,bCo,bj,vCo,FCo,TCo,q2,Wie,MCo,ECo,vj,CCo,wCo,ACo,N2,Hie,yCo,LCo,Fj,xCo,$Co,kCo,j2,Uie,SCo,RCo,Tj,BCo,PCo,ICo,D2,qCo,Jie,NCo,jCo,Yie,DCo,GCo,G2,pPe,Ri,O2,Kie,$A,OCo,Zie,VCo,uPe,So,kA,XCo,Bi,zCo,Mj,QCo,WCo,Ej,HCo,UCo,JCo,SA,YCo,ede,KCo,ZCo,e3o,nt,RA,o3o,ode,r3o,t3o,Pi,a3o,rde,n3o,s3o,Cj,l3o,i3o,d3o,V2,c3o,Ke,BA,f3o,tde,m3o,g3o,$a,h3o,ade,p3o,u3o,nde,_3o,b3o,sde,v3o,F3o,T3o,he,X2,lde,M3o,E3o,wj,C3o,w3o,A3o,z2,ide,y3o,L3o,Aj,x3o,$3o,k3o,Q2,dde,S3o,R3o,yj,B3o,P3o,I3o,W2,cde,q3o,N3o,Lj,j3o,D3o,G3o,H2,fde,O3o,V3o,xj,X3o,z3o,Q3o,U2,mde,W3o,H3o,$j,U3o,J3o,Y3o,J2,gde,K3o,Z3o,kj,ewo,owo,rwo,Y2,hde,two,awo,Sj,nwo,swo,lwo,K2,pde,iwo,dwo,Rj,cwo,fwo,mwo,Z2,ude,gwo,hwo,Bj,pwo,uwo,_wo,e1,_de,bwo,vwo,Pj,Fwo,Two,Mwo,o1,bde,Ewo,Cwo,Ij,wwo,Awo,ywo,r1,vde,Lwo,xwo,qj,$wo,kwo,Swo,t1,Fde,Rwo,Bwo,Nj,Pwo,Iwo,qwo,a1,Tde,Nwo,jwo,jj,Dwo,Gwo,Owo,n1,Mde,Vwo,Xwo,Dj,zwo,Qwo,Wwo,s1,Ede,Hwo,Uwo,Gj,Jwo,Ywo,Kwo,l1,Zwo,Cde,eAo,oAo,wde,rAo,tAo,i1,_Pe,Ii,d1,Ade,PA,aAo,yde,nAo,bPe,Ro,IA,sAo,qi,lAo,Oj,iAo,dAo,Vj,cAo,fAo,mAo,qA,gAo,Lde,hAo,pAo,uAo,st,NA,_Ao,xde,bAo,vAo,Ni,FAo,$de,TAo,MAo,Xj,EAo,CAo,wAo,c1,AAo,Ze,jA,yAo,kde,LAo,xAo,ka,$Ao,Sde,kAo,SAo,Rde,RAo,BAo,Bde,PAo,IAo,qAo,q,f1,Pde,NAo,jAo,zj,DAo,GAo,OAo,m1,Ide,VAo,XAo,Qj,zAo,QAo,WAo,g1,qde,HAo,UAo,Wj,JAo,YAo,KAo,h1,Nde,ZAo,e6o,Hj,o6o,r6o,t6o,p1,jde,a6o,n6o,Uj,s6o,l6o,i6o,u1,Dde,d6o,c6o,Jj,f6o,m6o,g6o,_1,Gde,h6o,p6o,Yj,u6o,_6o,b6o,b1,Ode,v6o,F6o,Kj,T6o,M6o,E6o,v1,Vde,C6o,w6o,Zj,A6o,y6o,L6o,F1,Xde,x6o,$6o,eD,k6o,S6o,R6o,T1,zde,B6o,P6o,oD,I6o,q6o,N6o,M1,Qde,j6o,D6o,rD,G6o,O6o,V6o,E1,Wde,X6o,z6o,tD,Q6o,W6o,H6o,C1,Hde,U6o,J6o,aD,Y6o,K6o,Z6o,w1,Ude,eyo,oyo,nD,ryo,tyo,ayo,A1,Jde,nyo,syo,sD,lyo,iyo,dyo,y1,Yde,cyo,fyo,lD,myo,gyo,hyo,L1,Kde,pyo,uyo,iD,_yo,byo,vyo,x1,Zde,Fyo,Tyo,dD,Myo,Eyo,Cyo,$1,ece,wyo,Ayo,cD,yyo,Lyo,xyo,k1,oce,$yo,kyo,fD,Syo,Ryo,Byo,S1,rce,Pyo,Iyo,mD,qyo,Nyo,jyo,R1,tce,Dyo,Gyo,gD,Oyo,Vyo,Xyo,B1,ace,zyo,Qyo,hD,Wyo,Hyo,Uyo,P1,nce,Jyo,Yyo,pD,Kyo,Zyo,eLo,I1,sce,oLo,rLo,uD,tLo,aLo,nLo,q1,lce,sLo,lLo,_D,iLo,dLo,cLo,N1,ice,fLo,mLo,bD,gLo,hLo,pLo,j1,dce,uLo,_Lo,vD,bLo,vLo,FLo,D1,cce,TLo,MLo,FD,ELo,CLo,wLo,G1,fce,ALo,yLo,TD,LLo,xLo,$Lo,O1,mce,kLo,SLo,MD,RLo,BLo,PLo,V1,gce,ILo,qLo,ED,NLo,jLo,DLo,X1,hce,GLo,OLo,CD,VLo,XLo,zLo,z1,pce,QLo,WLo,wD,HLo,ULo,JLo,Q1,uce,YLo,KLo,AD,ZLo,e8o,o8o,W1,_ce,r8o,t8o,yD,a8o,n8o,s8o,H1,bce,l8o,i8o,LD,d8o,c8o,f8o,U1,vce,m8o,g8o,xD,h8o,p8o,u8o,J1,Fce,_8o,b8o,$D,v8o,F8o,T8o,Y1,Tce,M8o,E8o,kD,C8o,w8o,A8o,K1,Mce,y8o,L8o,SD,x8o,$8o,k8o,Z1,Ece,S8o,R8o,RD,B8o,P8o,I8o,eb,Cce,q8o,N8o,BD,j8o,D8o,G8o,ob,wce,O8o,V8o,PD,X8o,z8o,Q8o,rb,Ace,W8o,H8o,ID,U8o,J8o,Y8o,tb,yce,K8o,Z8o,qD,exo,oxo,rxo,ab,txo,Lce,axo,nxo,xce,sxo,lxo,nb,vPe,ji,sb,$ce,DA,ixo,kce,dxo,FPe,Bo,GA,cxo,Di,fxo,ND,mxo,gxo,jD,hxo,pxo,uxo,OA,_xo,Sce,bxo,vxo,Fxo,lt,VA,Txo,Rce,Mxo,Exo,Gi,Cxo,Bce,wxo,Axo,DD,yxo,Lxo,xxo,lb,$xo,eo,XA,kxo,Pce,Sxo,Rxo,Sa,Bxo,Ice,Pxo,Ixo,qce,qxo,Nxo,Nce,jxo,Dxo,Gxo,Y,ib,jce,Oxo,Vxo,GD,Xxo,zxo,Qxo,db,Dce,Wxo,Hxo,OD,Uxo,Jxo,Yxo,cb,Gce,Kxo,Zxo,VD,e$o,o$o,r$o,fb,Oce,t$o,a$o,XD,n$o,s$o,l$o,mb,Vce,i$o,d$o,zD,c$o,f$o,m$o,gb,Xce,g$o,h$o,QD,p$o,u$o,_$o,hb,zce,b$o,v$o,WD,F$o,T$o,M$o,pb,Qce,E$o,C$o,HD,w$o,A$o,y$o,ub,Wce,L$o,x$o,UD,$$o,k$o,S$o,_b,Hce,R$o,B$o,JD,P$o,I$o,q$o,bb,Uce,N$o,j$o,YD,D$o,G$o,O$o,vb,Jce,V$o,X$o,KD,z$o,Q$o,W$o,Fb,Yce,H$o,U$o,ZD,J$o,Y$o,K$o,Tb,Kce,Z$o,eko,eG,oko,rko,tko,Mb,Zce,ako,nko,oG,sko,lko,iko,Eb,efe,dko,cko,rG,fko,mko,gko,Cb,ofe,hko,pko,tG,uko,_ko,bko,wb,rfe,vko,Fko,aG,Tko,Mko,Eko,Ab,tfe,Cko,wko,nG,Ako,yko,Lko,yb,afe,xko,$ko,sG,kko,Sko,Rko,Lb,nfe,Bko,Pko,lG,Iko,qko,Nko,xb,sfe,jko,Dko,iG,Gko,Oko,Vko,$b,lfe,Xko,zko,dG,Qko,Wko,Hko,kb,ife,Uko,Jko,cG,Yko,Kko,Zko,Sb,dfe,eSo,oSo,fG,rSo,tSo,aSo,Rb,cfe,nSo,sSo,mG,lSo,iSo,dSo,Bb,ffe,cSo,fSo,gG,mSo,gSo,hSo,Pb,mfe,pSo,uSo,hG,_So,bSo,vSo,Ib,FSo,gfe,TSo,MSo,hfe,ESo,CSo,qb,TPe,Oi,Nb,pfe,zA,wSo,ufe,ASo,MPe,Po,QA,ySo,Vi,LSo,pG,xSo,$So,uG,kSo,SSo,RSo,WA,BSo,_fe,PSo,ISo,qSo,it,HA,NSo,bfe,jSo,DSo,Xi,GSo,vfe,OSo,VSo,_G,XSo,zSo,QSo,jb,WSo,oo,UA,HSo,Ffe,USo,JSo,Ra,YSo,Tfe,KSo,ZSo,Mfe,eRo,oRo,Efe,rRo,tRo,aRo,Yr,Db,Cfe,nRo,sRo,bG,lRo,iRo,dRo,Gb,wfe,cRo,fRo,vG,mRo,gRo,hRo,Ob,Afe,pRo,uRo,FG,_Ro,bRo,vRo,Vb,yfe,FRo,TRo,TG,MRo,ERo,CRo,Xb,Lfe,wRo,ARo,MG,yRo,LRo,xRo,zb,$Ro,xfe,kRo,SRo,$fe,RRo,BRo,Qb,EPe,zi,Wb,kfe,JA,PRo,Sfe,IRo,CPe,Io,YA,qRo,Qi,NRo,EG,jRo,DRo,CG,GRo,ORo,VRo,KA,XRo,Rfe,zRo,QRo,WRo,dt,ZA,HRo,Bfe,URo,JRo,Wi,YRo,Pfe,KRo,ZRo,wG,eBo,oBo,rBo,Hb,tBo,ro,e6,aBo,Ife,nBo,sBo,Ba,lBo,qfe,iBo,dBo,Nfe,cBo,fBo,jfe,mBo,gBo,hBo,U,Ub,Dfe,pBo,uBo,AG,_Bo,bBo,vBo,Jb,Gfe,FBo,TBo,yG,MBo,EBo,CBo,Yb,Ofe,wBo,ABo,LG,yBo,LBo,xBo,Kb,Vfe,$Bo,kBo,xG,SBo,RBo,BBo,Zb,Xfe,PBo,IBo,$G,qBo,NBo,jBo,ev,zfe,DBo,GBo,kG,OBo,VBo,XBo,ov,Qfe,zBo,QBo,SG,WBo,HBo,UBo,rv,Wfe,JBo,YBo,RG,KBo,ZBo,ePo,tv,Hfe,oPo,rPo,BG,tPo,aPo,nPo,av,Ufe,sPo,lPo,PG,iPo,dPo,cPo,nv,Jfe,fPo,mPo,IG,gPo,hPo,pPo,sv,Yfe,uPo,_Po,qG,bPo,vPo,FPo,lv,Kfe,TPo,MPo,NG,EPo,CPo,wPo,iv,Zfe,APo,yPo,jG,LPo,xPo,$Po,dv,eme,kPo,SPo,DG,RPo,BPo,PPo,cv,ome,IPo,qPo,GG,NPo,jPo,DPo,fv,rme,GPo,OPo,OG,VPo,XPo,zPo,mv,tme,QPo,WPo,VG,HPo,UPo,JPo,gv,ame,YPo,KPo,XG,ZPo,eIo,oIo,hv,nme,rIo,tIo,zG,aIo,nIo,sIo,pv,sme,lIo,iIo,QG,dIo,cIo,fIo,uv,lme,mIo,gIo,WG,hIo,pIo,uIo,_v,ime,_Io,bIo,HG,vIo,FIo,TIo,bv,dme,MIo,EIo,UG,CIo,wIo,AIo,vv,cme,yIo,LIo,JG,xIo,$Io,kIo,Fv,fme,SIo,RIo,YG,BIo,PIo,IIo,Tv,mme,qIo,NIo,KG,jIo,DIo,GIo,Mv,gme,OIo,VIo,ZG,XIo,zIo,QIo,Ev,hme,WIo,HIo,eO,UIo,JIo,YIo,Cv,pme,KIo,ZIo,oO,eqo,oqo,rqo,wv,ume,tqo,aqo,rO,nqo,sqo,lqo,Av,_me,iqo,dqo,tO,cqo,fqo,mqo,yv,bme,gqo,hqo,aO,pqo,uqo,_qo,Lv,bqo,vme,vqo,Fqo,Fme,Tqo,Mqo,xv,wPe,Hi,$v,Tme,o6,Eqo,Mme,Cqo,APe,qo,r6,wqo,Ui,Aqo,nO,yqo,Lqo,sO,xqo,$qo,kqo,t6,Sqo,Eme,Rqo,Bqo,Pqo,ct,a6,Iqo,Cme,qqo,Nqo,Ji,jqo,wme,Dqo,Gqo,lO,Oqo,Vqo,Xqo,kv,zqo,to,n6,Qqo,Ame,Wqo,Hqo,Pa,Uqo,yme,Jqo,Yqo,Lme,Kqo,Zqo,xme,eNo,oNo,rNo,O,Sv,$me,tNo,aNo,iO,nNo,sNo,lNo,Rv,kme,iNo,dNo,dO,cNo,fNo,mNo,Bv,Sme,gNo,hNo,cO,pNo,uNo,_No,Pv,Rme,bNo,vNo,fO,FNo,TNo,MNo,Iv,Bme,ENo,CNo,mO,wNo,ANo,yNo,qv,Pme,LNo,xNo,gO,$No,kNo,SNo,Nv,Ime,RNo,BNo,hO,PNo,INo,qNo,jv,qme,NNo,jNo,pO,DNo,GNo,ONo,Dv,Nme,VNo,XNo,uO,zNo,QNo,WNo,Gv,jme,HNo,UNo,_O,JNo,YNo,KNo,Ov,Dme,ZNo,ejo,bO,ojo,rjo,tjo,Vv,Gme,ajo,njo,vO,sjo,ljo,ijo,Xv,Ome,djo,cjo,FO,fjo,mjo,gjo,zv,Vme,hjo,pjo,TO,ujo,_jo,bjo,Qv,Xme,vjo,Fjo,MO,Tjo,Mjo,Ejo,Wv,zme,Cjo,wjo,EO,Ajo,yjo,Ljo,Hv,Qme,xjo,$jo,CO,kjo,Sjo,Rjo,Uv,Wme,Bjo,Pjo,wO,Ijo,qjo,Njo,Jv,Hme,jjo,Djo,AO,Gjo,Ojo,Vjo,Yv,Ume,Xjo,zjo,yO,Qjo,Wjo,Hjo,Kv,Jme,Ujo,Jjo,LO,Yjo,Kjo,Zjo,Zv,Yme,eDo,oDo,xO,rDo,tDo,aDo,eF,Kme,nDo,sDo,$O,lDo,iDo,dDo,oF,Zme,cDo,fDo,kO,mDo,gDo,hDo,rF,ege,pDo,uDo,SO,_Do,bDo,vDo,tF,oge,FDo,TDo,RO,MDo,EDo,CDo,aF,rge,wDo,ADo,BO,yDo,LDo,xDo,nF,tge,$Do,kDo,PO,SDo,RDo,BDo,sF,age,PDo,IDo,IO,qDo,NDo,jDo,lF,nge,DDo,GDo,qO,ODo,VDo,XDo,iF,sge,zDo,QDo,NO,WDo,HDo,UDo,dF,lge,JDo,YDo,jO,KDo,ZDo,eGo,cF,ige,oGo,rGo,DO,tGo,aGo,nGo,fF,dge,sGo,lGo,GO,iGo,dGo,cGo,mF,cge,fGo,mGo,OO,gGo,hGo,pGo,gF,fge,uGo,_Go,VO,bGo,vGo,FGo,hF,mge,TGo,MGo,XO,EGo,CGo,wGo,pF,gge,AGo,yGo,zO,LGo,xGo,$Go,uF,hge,kGo,SGo,QO,RGo,BGo,PGo,_F,IGo,pge,qGo,NGo,uge,jGo,DGo,bF,yPe,Yi,vF,_ge,s6,GGo,bge,OGo,LPe,No,l6,VGo,Ki,XGo,WO,zGo,QGo,HO,WGo,HGo,UGo,i6,JGo,vge,YGo,KGo,ZGo,ft,d6,eOo,Fge,oOo,rOo,Zi,tOo,Tge,aOo,nOo,UO,sOo,lOo,iOo,FF,dOo,ao,c6,cOo,Mge,fOo,mOo,Ia,gOo,Ege,hOo,pOo,Cge,uOo,_Oo,wge,bOo,vOo,FOo,Age,TF,yge,TOo,MOo,JO,EOo,COo,wOo,MF,AOo,Lge,yOo,LOo,xge,xOo,$Oo,EF,xPe,ed,CF,$ge,f6,kOo,kge,SOo,$Pe,jo,m6,ROo,od,BOo,YO,POo,IOo,KO,qOo,NOo,jOo,g6,DOo,Sge,GOo,OOo,VOo,mt,h6,XOo,Rge,zOo,QOo,rd,WOo,Bge,HOo,UOo,ZO,JOo,YOo,KOo,wF,ZOo,no,p6,eVo,Pge,oVo,rVo,qa,tVo,Ige,aVo,nVo,qge,sVo,lVo,Nge,iVo,dVo,cVo,ve,AF,jge,fVo,mVo,eV,gVo,hVo,pVo,yF,Dge,uVo,_Vo,oV,bVo,vVo,FVo,LF,Gge,TVo,MVo,rV,EVo,CVo,wVo,Rs,Oge,AVo,yVo,tV,LVo,xVo,aV,$Vo,kVo,SVo,xF,Vge,RVo,BVo,nV,PVo,IVo,qVo,gt,Xge,NVo,jVo,sV,DVo,GVo,lV,OVo,VVo,iV,XVo,zVo,QVo,$F,zge,WVo,HVo,dV,UVo,JVo,YVo,kF,Qge,KVo,ZVo,cV,eXo,oXo,rXo,SF,Wge,tXo,aXo,fV,nXo,sXo,lXo,RF,Hge,iXo,dXo,mV,cXo,fXo,mXo,BF,Uge,gXo,hXo,gV,pXo,uXo,_Xo,PF,Jge,bXo,vXo,hV,FXo,TXo,MXo,IF,Yge,EXo,CXo,pV,wXo,AXo,yXo,qF,LXo,Kge,xXo,$Xo,Zge,kXo,SXo,NF,kPe,td,jF,ehe,u6,RXo,ohe,BXo,SPe,Do,_6,PXo,ad,IXo,uV,qXo,NXo,_V,jXo,DXo,GXo,b6,OXo,rhe,VXo,XXo,zXo,ht,v6,QXo,the,WXo,HXo,nd,UXo,ahe,JXo,YXo,bV,KXo,ZXo,ezo,DF,ozo,so,F6,rzo,nhe,tzo,azo,Na,nzo,she,szo,lzo,lhe,izo,dzo,ihe,czo,fzo,mzo,dhe,GF,che,gzo,hzo,vV,pzo,uzo,_zo,OF,bzo,fhe,vzo,Fzo,mhe,Tzo,Mzo,VF,RPe,sd,XF,ghe,T6,Ezo,hhe,Czo,BPe,Go,M6,wzo,ld,Azo,FV,yzo,Lzo,TV,xzo,$zo,kzo,E6,Szo,phe,Rzo,Bzo,Pzo,pt,C6,Izo,uhe,qzo,Nzo,id,jzo,_he,Dzo,Gzo,MV,Ozo,Vzo,Xzo,zF,zzo,lo,w6,Qzo,bhe,Wzo,Hzo,ja,Uzo,vhe,Jzo,Yzo,Fhe,Kzo,Zzo,The,eQo,oQo,rQo,Ne,QF,Mhe,tQo,aQo,EV,nQo,sQo,lQo,WF,Ehe,iQo,dQo,CV,cQo,fQo,mQo,HF,Che,gQo,hQo,wV,pQo,uQo,_Qo,UF,whe,bQo,vQo,AV,FQo,TQo,MQo,JF,Ahe,EQo,CQo,yV,wQo,AQo,yQo,YF,yhe,LQo,xQo,LV,$Qo,kQo,SQo,KF,Lhe,RQo,BQo,xV,PQo,IQo,qQo,ZF,xhe,NQo,jQo,$V,DQo,GQo,OQo,e0,VQo,$he,XQo,zQo,khe,QQo,WQo,o0,PPe,dd,r0,She,A6,HQo,Rhe,UQo,IPe,Oo,y6,JQo,cd,YQo,kV,KQo,ZQo,SV,eWo,oWo,rWo,L6,tWo,Bhe,aWo,nWo,sWo,ut,x6,lWo,Phe,iWo,dWo,fd,cWo,Ihe,fWo,mWo,RV,gWo,hWo,pWo,t0,uWo,io,$6,_Wo,qhe,bWo,vWo,Da,FWo,Nhe,TWo,MWo,jhe,EWo,CWo,Dhe,wWo,AWo,yWo,Ga,a0,Ghe,LWo,xWo,BV,$Wo,kWo,SWo,n0,Ohe,RWo,BWo,PV,PWo,IWo,qWo,s0,Vhe,NWo,jWo,IV,DWo,GWo,OWo,l0,Xhe,VWo,XWo,qV,zWo,QWo,WWo,i0,HWo,zhe,UWo,JWo,Qhe,YWo,KWo,d0,qPe,md,c0,Whe,k6,ZWo,Hhe,eHo,NPe,Vo,S6,oHo,gd,rHo,NV,tHo,aHo,jV,nHo,sHo,lHo,R6,iHo,Uhe,dHo,cHo,fHo,_t,B6,mHo,Jhe,gHo,hHo,hd,pHo,Yhe,uHo,_Ho,DV,bHo,vHo,FHo,f0,THo,co,P6,MHo,Khe,EHo,CHo,Oa,wHo,Zhe,AHo,yHo,epe,LHo,xHo,ope,$Ho,kHo,SHo,je,m0,rpe,RHo,BHo,GV,PHo,IHo,qHo,g0,tpe,NHo,jHo,OV,DHo,GHo,OHo,h0,ape,VHo,XHo,VV,zHo,QHo,WHo,p0,npe,HHo,UHo,XV,JHo,YHo,KHo,u0,spe,ZHo,eUo,zV,oUo,rUo,tUo,_0,lpe,aUo,nUo,QV,sUo,lUo,iUo,b0,ipe,dUo,cUo,WV,fUo,mUo,gUo,v0,dpe,hUo,pUo,HV,uUo,_Uo,bUo,F0,vUo,cpe,FUo,TUo,fpe,MUo,EUo,T0,jPe,pd,M0,mpe,I6,CUo,gpe,wUo,DPe,Xo,q6,AUo,ud,yUo,UV,LUo,xUo,JV,$Uo,kUo,SUo,N6,RUo,hpe,BUo,PUo,IUo,bt,j6,qUo,ppe,NUo,jUo,_d,DUo,upe,GUo,OUo,YV,VUo,XUo,zUo,E0,QUo,fo,D6,WUo,_pe,HUo,UUo,Va,JUo,bpe,YUo,KUo,vpe,ZUo,eJo,Fpe,oJo,rJo,tJo,G6,C0,Tpe,aJo,nJo,KV,sJo,lJo,iJo,w0,Mpe,dJo,cJo,ZV,fJo,mJo,gJo,A0,hJo,Epe,pJo,uJo,Cpe,_Jo,bJo,y0,GPe,bd,L0,wpe,O6,vJo,Ape,FJo,OPe,zo,V6,TJo,vd,MJo,eX,EJo,CJo,oX,wJo,AJo,yJo,X6,LJo,ype,xJo,$Jo,kJo,vt,z6,SJo,Lpe,RJo,BJo,Fd,PJo,xpe,IJo,qJo,rX,NJo,jJo,DJo,x0,GJo,mo,Q6,OJo,$pe,VJo,XJo,Xa,zJo,kpe,QJo,WJo,Spe,HJo,UJo,Rpe,JJo,YJo,KJo,za,$0,Bpe,ZJo,eYo,tX,oYo,rYo,tYo,k0,Ppe,aYo,nYo,aX,sYo,lYo,iYo,S0,Ipe,dYo,cYo,nX,fYo,mYo,gYo,R0,qpe,hYo,pYo,sX,uYo,_Yo,bYo,B0,vYo,Npe,FYo,TYo,jpe,MYo,EYo,P0,VPe,Td,I0,Dpe,W6,CYo,Gpe,wYo,XPe,Qo,H6,AYo,Md,yYo,lX,LYo,xYo,iX,$Yo,kYo,SYo,U6,RYo,Ope,BYo,PYo,IYo,Ft,J6,qYo,Vpe,NYo,jYo,Ed,DYo,Xpe,GYo,OYo,dX,VYo,XYo,zYo,q0,QYo,go,Y6,WYo,zpe,HYo,UYo,Qa,JYo,Qpe,YYo,KYo,Wpe,ZYo,eKo,Hpe,oKo,rKo,tKo,Cd,N0,Upe,aKo,nKo,cX,sKo,lKo,iKo,j0,Jpe,dKo,cKo,fX,fKo,mKo,gKo,D0,Ype,hKo,pKo,mX,uKo,_Ko,bKo,G0,vKo,Kpe,FKo,TKo,Zpe,MKo,EKo,O0,zPe,wd,V0,eue,K6,CKo,oue,wKo,QPe,Wo,Z6,AKo,Ad,yKo,gX,LKo,xKo,hX,$Ko,kKo,SKo,ey,RKo,rue,BKo,PKo,IKo,Tt,oy,qKo,tue,NKo,jKo,yd,DKo,aue,GKo,OKo,pX,VKo,XKo,zKo,X0,QKo,ho,ry,WKo,nue,HKo,UKo,Wa,JKo,sue,YKo,KKo,lue,ZKo,eZo,iue,oZo,rZo,tZo,ty,z0,due,aZo,nZo,uX,sZo,lZo,iZo,Q0,cue,dZo,cZo,_X,fZo,mZo,gZo,W0,hZo,fue,pZo,uZo,mue,_Zo,bZo,H0,WPe,Ld,U0,gue,ay,vZo,hue,FZo,HPe,Ho,ny,TZo,xd,MZo,bX,EZo,CZo,vX,wZo,AZo,yZo,sy,LZo,pue,xZo,$Zo,kZo,Mt,ly,SZo,uue,RZo,BZo,$d,PZo,_ue,IZo,qZo,FX,NZo,jZo,DZo,J0,GZo,po,iy,OZo,bue,VZo,XZo,Ha,zZo,vue,QZo,WZo,Fue,HZo,UZo,Tue,JZo,YZo,KZo,Mue,Y0,Eue,ZZo,eer,TX,oer,rer,ter,K0,aer,Cue,ner,ser,wue,ler,ier,Z0,UPe,kd,eT,Aue,dy,der,yue,cer,JPe,Uo,cy,fer,Sd,mer,MX,ger,her,EX,per,uer,_er,fy,ber,Lue,ver,Fer,Ter,Et,my,Mer,xue,Eer,Cer,Rd,wer,$ue,Aer,yer,CX,Ler,xer,$er,oT,ker,uo,gy,Ser,kue,Rer,Ber,Ua,Per,Sue,Ier,qer,Rue,Ner,jer,Bue,Der,Ger,Oer,Ja,rT,Pue,Ver,Xer,wX,zer,Qer,Wer,tT,Iue,Her,Uer,AX,Jer,Yer,Ker,aT,que,Zer,eor,yX,oor,ror,tor,nT,Nue,aor,nor,LX,sor,lor,ior,sT,dor,jue,cor,mor,Due,gor,hor,lT,YPe,Bd,iT,Gue,hy,por,Oue,uor,KPe,Jo,py,_or,Pd,bor,xX,vor,For,$X,Tor,Mor,Eor,uy,Cor,Vue,wor,Aor,yor,Ct,_y,Lor,Xue,xor,$or,Id,kor,zue,Sor,Ror,kX,Bor,Por,Ior,dT,qor,_o,by,Nor,Que,jor,Dor,Ya,Gor,Wue,Oor,Vor,Hue,Xor,zor,Uue,Qor,Wor,Hor,Jue,cT,Yue,Uor,Jor,SX,Yor,Kor,Zor,fT,err,Kue,orr,rrr,Zue,trr,arr,mT,ZPe,qd,gT,e_e,vy,nrr,o_e,srr,eIe,Yo,Fy,lrr,Nd,irr,RX,drr,crr,BX,frr,mrr,grr,Ty,hrr,r_e,prr,urr,_rr,wt,My,brr,t_e,vrr,Frr,jd,Trr,a_e,Mrr,Err,PX,Crr,wrr,Arr,hT,yrr,wr,Ey,Lrr,n_e,xrr,$rr,Ka,krr,s_e,Srr,Rrr,l_e,Brr,Prr,i_e,Irr,qrr,Nrr,j,pT,d_e,jrr,Drr,IX,Grr,Orr,Vrr,uT,c_e,Xrr,zrr,qX,Qrr,Wrr,Hrr,_T,f_e,Urr,Jrr,NX,Yrr,Krr,Zrr,bT,m_e,etr,otr,jX,rtr,ttr,atr,vT,g_e,ntr,str,DX,ltr,itr,dtr,FT,h_e,ctr,ftr,GX,mtr,gtr,htr,TT,p_e,ptr,utr,OX,_tr,btr,vtr,MT,u_e,Ftr,Ttr,VX,Mtr,Etr,Ctr,ET,__e,wtr,Atr,XX,ytr,Ltr,xtr,CT,b_e,$tr,ktr,zX,Str,Rtr,Btr,wT,v_e,Ptr,Itr,QX,qtr,Ntr,jtr,AT,F_e,Dtr,Gtr,WX,Otr,Vtr,Xtr,yT,T_e,ztr,Qtr,HX,Wtr,Htr,Utr,LT,M_e,Jtr,Ytr,UX,Ktr,Ztr,ear,xT,E_e,oar,rar,JX,tar,aar,nar,$T,C_e,sar,lar,YX,iar,dar,car,Bs,w_e,far,mar,KX,gar,har,ZX,par,uar,_ar,kT,A_e,bar,Far,ez,Tar,Mar,Ear,ST,y_e,Car,war,oz,Aar,yar,Lar,RT,L_e,xar,$ar,rz,kar,Sar,Rar,BT,x_e,Bar,Par,tz,Iar,qar,Nar,PT,$_e,jar,Dar,az,Gar,Oar,Var,IT,k_e,Xar,zar,nz,Qar,War,Har,qT,S_e,Uar,Jar,sz,Yar,Kar,Zar,NT,R_e,enr,onr,lz,rnr,tnr,anr,jT,B_e,nnr,snr,iz,lnr,inr,dnr,DT,P_e,cnr,fnr,dz,mnr,gnr,hnr,GT,I_e,pnr,unr,cz,_nr,bnr,vnr,OT,q_e,Fnr,Tnr,fz,Mnr,Enr,Cnr,VT,N_e,wnr,Anr,mz,ynr,Lnr,xnr,XT,j_e,$nr,knr,gz,Snr,Rnr,Bnr,zT,D_e,Pnr,Inr,hz,qnr,Nnr,jnr,QT,G_e,Dnr,Gnr,pz,Onr,Vnr,Xnr,WT,O_e,znr,Qnr,uz,Wnr,Hnr,Unr,HT,V_e,Jnr,Ynr,_z,Knr,Znr,esr,UT,X_e,osr,rsr,bz,tsr,asr,nsr,JT,z_e,ssr,lsr,vz,isr,dsr,csr,YT,Q_e,fsr,msr,Fz,gsr,hsr,psr,KT,W_e,usr,_sr,Tz,bsr,vsr,Fsr,ZT,H_e,Tsr,Msr,Mz,Esr,Csr,wsr,e7,U_e,Asr,ysr,Ez,Lsr,xsr,$sr,o7,J_e,ksr,Ssr,Cz,Rsr,Bsr,Psr,r7,Y_e,Isr,qsr,wz,Nsr,jsr,Dsr,t7,K_e,Gsr,Osr,Az,Vsr,Xsr,zsr,a7,oIe,Dd,n7,Z_e,Cy,Qsr,e2e,Wsr,rIe,Ko,wy,Hsr,Gd,Usr,yz,Jsr,Ysr,Lz,Ksr,Zsr,elr,Ay,olr,o2e,rlr,tlr,alr,At,yy,nlr,r2e,slr,llr,Od,ilr,t2e,dlr,clr,xz,flr,mlr,glr,s7,hlr,Ar,Ly,plr,a2e,ulr,_lr,Za,blr,n2e,vlr,Flr,s2e,Tlr,Mlr,l2e,Elr,Clr,wlr,ne,l7,i2e,Alr,ylr,$z,Llr,xlr,$lr,i7,d2e,klr,Slr,kz,Rlr,Blr,Plr,d7,c2e,Ilr,qlr,Sz,Nlr,jlr,Dlr,c7,f2e,Glr,Olr,Rz,Vlr,Xlr,zlr,f7,m2e,Qlr,Wlr,Bz,Hlr,Ulr,Jlr,m7,g2e,Ylr,Klr,Pz,Zlr,eir,oir,g7,h2e,rir,tir,Iz,air,nir,sir,h7,p2e,lir,iir,qz,dir,cir,fir,p7,u2e,mir,gir,Nz,hir,pir,uir,u7,_2e,_ir,bir,jz,vir,Fir,Tir,_7,b2e,Mir,Eir,Dz,Cir,wir,Air,b7,v2e,yir,Lir,Gz,xir,$ir,kir,v7,F2e,Sir,Rir,Oz,Bir,Pir,Iir,F7,T2e,qir,Nir,Vz,jir,Dir,Gir,T7,M2e,Oir,Vir,Xz,Xir,zir,Qir,M7,E2e,Wir,Hir,zz,Uir,Jir,Yir,E7,C2e,Kir,Zir,Qz,edr,odr,rdr,C7,w2e,tdr,adr,Wz,ndr,sdr,ldr,w7,A2e,idr,ddr,Hz,cdr,fdr,mdr,A7,y2e,gdr,hdr,Uz,pdr,udr,_dr,y7,L2e,bdr,vdr,Jz,Fdr,Tdr,Mdr,L7,x2e,Edr,Cdr,Yz,wdr,Adr,ydr,x7,$2e,Ldr,xdr,Kz,$dr,kdr,Sdr,$7,tIe,Vd,k7,k2e,xy,Rdr,S2e,Bdr,aIe,Zo,$y,Pdr,Xd,Idr,Zz,qdr,Ndr,eQ,jdr,Ddr,Gdr,ky,Odr,R2e,Vdr,Xdr,zdr,yt,Sy,Qdr,B2e,Wdr,Hdr,zd,Udr,P2e,Jdr,Ydr,oQ,Kdr,Zdr,ecr,S7,ocr,yr,Ry,rcr,I2e,tcr,acr,en,ncr,q2e,scr,lcr,N2e,icr,dcr,j2e,ccr,fcr,mcr,Te,R7,D2e,gcr,hcr,rQ,pcr,ucr,_cr,B7,G2e,bcr,vcr,tQ,Fcr,Tcr,Mcr,P7,O2e,Ecr,Ccr,aQ,wcr,Acr,ycr,I7,V2e,Lcr,xcr,nQ,$cr,kcr,Scr,q7,X2e,Rcr,Bcr,sQ,Pcr,Icr,qcr,N7,z2e,Ncr,jcr,lQ,Dcr,Gcr,Ocr,j7,Q2e,Vcr,Xcr,iQ,zcr,Qcr,Wcr,D7,W2e,Hcr,Ucr,dQ,Jcr,Ycr,Kcr,G7,H2e,Zcr,efr,cQ,ofr,rfr,tfr,O7,U2e,afr,nfr,fQ,sfr,lfr,ifr,V7,J2e,dfr,cfr,mQ,ffr,mfr,gfr,X7,Y2e,hfr,pfr,gQ,ufr,_fr,bfr,z7,nIe,Qd,Q7,K2e,By,vfr,Z2e,Ffr,sIe,er,Py,Tfr,Wd,Mfr,hQ,Efr,Cfr,pQ,wfr,Afr,yfr,Iy,Lfr,e1e,xfr,$fr,kfr,Lt,qy,Sfr,o1e,Rfr,Bfr,Hd,Pfr,r1e,Ifr,qfr,uQ,Nfr,jfr,Dfr,W7,Gfr,Lr,Ny,Ofr,t1e,Vfr,Xfr,on,zfr,a1e,Qfr,Wfr,n1e,Hfr,Ufr,s1e,Jfr,Yfr,Kfr,jy,H7,l1e,Zfr,emr,_Q,omr,rmr,tmr,U7,i1e,amr,nmr,bQ,smr,lmr,imr,J7,lIe,Ud,Y7,d1e,Dy,dmr,c1e,cmr,iIe,or,Gy,fmr,Jd,mmr,vQ,gmr,hmr,FQ,pmr,umr,_mr,Oy,bmr,f1e,vmr,Fmr,Tmr,xt,Vy,Mmr,m1e,Emr,Cmr,Yd,wmr,g1e,Amr,ymr,TQ,Lmr,xmr,$mr,K7,kmr,xr,Xy,Smr,h1e,Rmr,Bmr,rn,Pmr,p1e,Imr,qmr,u1e,Nmr,jmr,_1e,Dmr,Gmr,Omr,ie,Z7,b1e,Vmr,Xmr,MQ,zmr,Qmr,Wmr,e9,v1e,Hmr,Umr,EQ,Jmr,Ymr,Kmr,o9,F1e,Zmr,egr,CQ,ogr,rgr,tgr,r9,T1e,agr,ngr,wQ,sgr,lgr,igr,t9,M1e,dgr,cgr,AQ,fgr,mgr,ggr,a9,E1e,hgr,pgr,yQ,ugr,_gr,bgr,n9,C1e,vgr,Fgr,LQ,Tgr,Mgr,Egr,s9,w1e,Cgr,wgr,xQ,Agr,ygr,Lgr,l9,A1e,xgr,$gr,$Q,kgr,Sgr,Rgr,i9,y1e,Bgr,Pgr,kQ,Igr,qgr,Ngr,d9,L1e,jgr,Dgr,SQ,Ggr,Ogr,Vgr,c9,x1e,Xgr,zgr,RQ,Qgr,Wgr,Hgr,f9,$1e,Ugr,Jgr,BQ,Ygr,Kgr,Zgr,m9,k1e,ehr,ohr,PQ,rhr,thr,ahr,g9,S1e,nhr,shr,IQ,lhr,ihr,dhr,h9,R1e,chr,fhr,qQ,mhr,ghr,hhr,p9,B1e,phr,uhr,NQ,_hr,bhr,vhr,u9,P1e,Fhr,Thr,jQ,Mhr,Ehr,Chr,_9,I1e,whr,Ahr,DQ,yhr,Lhr,xhr,b9,q1e,$hr,khr,GQ,Shr,Rhr,Bhr,v9,dIe,Kd,F9,N1e,zy,Phr,j1e,Ihr,cIe,rr,Qy,qhr,Zd,Nhr,OQ,jhr,Dhr,VQ,Ghr,Ohr,Vhr,Wy,Xhr,D1e,zhr,Qhr,Whr,$t,Hy,Hhr,G1e,Uhr,Jhr,ec,Yhr,O1e,Khr,Zhr,XQ,epr,opr,rpr,T9,tpr,$r,Uy,apr,V1e,npr,spr,tn,lpr,X1e,ipr,dpr,z1e,cpr,fpr,Q1e,mpr,gpr,hpr,ye,M9,W1e,ppr,upr,zQ,_pr,bpr,vpr,E9,H1e,Fpr,Tpr,QQ,Mpr,Epr,Cpr,C9,U1e,wpr,Apr,WQ,ypr,Lpr,xpr,w9,J1e,$pr,kpr,HQ,Spr,Rpr,Bpr,A9,Y1e,Ppr,Ipr,UQ,qpr,Npr,jpr,y9,K1e,Dpr,Gpr,JQ,Opr,Vpr,Xpr,L9,Z1e,zpr,Qpr,YQ,Wpr,Hpr,Upr,x9,ebe,Jpr,Ypr,KQ,Kpr,Zpr,eur,$9,obe,our,rur,ZQ,tur,aur,nur,k9,rbe,sur,lur,eW,iur,dur,cur,S9,fIe,oc,R9,tbe,Jy,fur,abe,mur,mIe,tr,Yy,gur,rc,hur,oW,pur,uur,rW,_ur,bur,vur,Ky,Fur,nbe,Tur,Mur,Eur,kt,Zy,Cur,sbe,wur,Aur,tc,yur,lbe,Lur,xur,tW,$ur,kur,Sur,B9,Rur,kr,eL,Bur,ibe,Pur,Iur,an,qur,dbe,Nur,jur,cbe,Dur,Gur,fbe,Our,Vur,Xur,Z,P9,mbe,zur,Qur,aW,Wur,Hur,Uur,I9,gbe,Jur,Yur,nW,Kur,Zur,e_r,q9,hbe,o_r,r_r,sW,t_r,a_r,n_r,N9,pbe,s_r,l_r,lW,i_r,d_r,c_r,j9,ube,f_r,m_r,iW,g_r,h_r,p_r,D9,_be,u_r,__r,dW,b_r,v_r,F_r,G9,bbe,T_r,M_r,cW,E_r,C_r,w_r,O9,vbe,A_r,y_r,fW,L_r,x_r,$_r,V9,Fbe,k_r,S_r,mW,R_r,B_r,P_r,X9,Tbe,I_r,q_r,gW,N_r,j_r,D_r,z9,Mbe,G_r,O_r,hW,V_r,X_r,z_r,Q9,Ebe,Q_r,W_r,pW,H_r,U_r,J_r,W9,Cbe,Y_r,K_r,uW,Z_r,e2r,o2r,H9,wbe,r2r,t2r,_W,a2r,n2r,s2r,U9,Abe,l2r,i2r,bW,d2r,c2r,f2r,J9,ybe,m2r,g2r,vW,h2r,p2r,u2r,Y9,Lbe,_2r,b2r,FW,v2r,F2r,T2r,K9,xbe,M2r,E2r,TW,C2r,w2r,A2r,Z9,$be,y2r,L2r,MW,x2r,$2r,k2r,eM,kbe,S2r,R2r,EW,B2r,P2r,I2r,oM,Sbe,q2r,N2r,CW,j2r,D2r,G2r,rM,Rbe,O2r,V2r,wW,X2r,z2r,Q2r,tM,Bbe,W2r,H2r,AW,U2r,J2r,Y2r,aM,Pbe,K2r,Z2r,yW,e1r,o1r,r1r,nM,Ibe,t1r,a1r,LW,n1r,s1r,l1r,sM,qbe,i1r,d1r,xW,c1r,f1r,m1r,lM,gIe,ac,iM,Nbe,oL,g1r,jbe,h1r,hIe,ar,rL,p1r,nc,u1r,$W,_1r,b1r,kW,v1r,F1r,T1r,tL,M1r,Dbe,E1r,C1r,w1r,St,aL,A1r,Gbe,y1r,L1r,sc,x1r,Obe,$1r,k1r,SW,S1r,R1r,B1r,dM,P1r,Sr,nL,I1r,Vbe,q1r,N1r,nn,j1r,Xbe,D1r,G1r,zbe,O1r,V1r,Qbe,X1r,z1r,Q1r,pe,cM,Wbe,W1r,H1r,RW,U1r,J1r,Y1r,fM,Hbe,K1r,Z1r,BW,ebr,obr,rbr,mM,Ube,tbr,abr,PW,nbr,sbr,lbr,gM,Jbe,ibr,dbr,IW,cbr,fbr,mbr,hM,Ybe,gbr,hbr,qW,pbr,ubr,_br,pM,Kbe,bbr,vbr,NW,Fbr,Tbr,Mbr,uM,Zbe,Ebr,Cbr,jW,wbr,Abr,ybr,_M,eve,Lbr,xbr,DW,$br,kbr,Sbr,bM,ove,Rbr,Bbr,GW,Pbr,Ibr,qbr,vM,rve,Nbr,jbr,OW,Dbr,Gbr,Obr,FM,tve,Vbr,Xbr,VW,zbr,Qbr,Wbr,TM,ave,Hbr,Ubr,XW,Jbr,Ybr,Kbr,MM,nve,Zbr,evr,zW,ovr,rvr,tvr,EM,sve,avr,nvr,QW,svr,lvr,ivr,CM,lve,dvr,cvr,WW,fvr,mvr,gvr,wM,ive,hvr,pvr,HW,uvr,_vr,bvr,AM,dve,vvr,Fvr,UW,Tvr,Mvr,Evr,yM,pIe,lc,LM,cve,sL,Cvr,fve,wvr,uIe,nr,lL,Avr,ic,yvr,JW,Lvr,xvr,YW,$vr,kvr,Svr,iL,Rvr,mve,Bvr,Pvr,Ivr,Rt,dL,qvr,gve,Nvr,jvr,dc,Dvr,hve,Gvr,Ovr,KW,Vvr,Xvr,zvr,xM,Qvr,Rr,cL,Wvr,pve,Hvr,Uvr,sn,Jvr,uve,Yvr,Kvr,_ve,Zvr,eFr,bve,oFr,rFr,tFr,fL,$M,vve,aFr,nFr,ZW,sFr,lFr,iFr,kM,Fve,dFr,cFr,eH,fFr,mFr,gFr,SM,_Ie,cc,RM,Tve,mL,hFr,Mve,pFr,bIe,sr,gL,uFr,fc,_Fr,oH,bFr,vFr,rH,FFr,TFr,MFr,hL,EFr,Eve,CFr,wFr,AFr,Bt,pL,yFr,Cve,LFr,xFr,mc,$Fr,wve,kFr,SFr,tH,RFr,BFr,PFr,BM,IFr,Br,uL,qFr,Ave,NFr,jFr,ln,DFr,yve,GFr,OFr,Lve,VFr,XFr,xve,zFr,QFr,WFr,$ve,PM,kve,HFr,UFr,aH,JFr,YFr,KFr,IM,vIe,gc,qM,Sve,_L,ZFr,Rve,e0r,FIe,lr,bL,o0r,hc,r0r,nH,t0r,a0r,sH,n0r,s0r,l0r,vL,i0r,Bve,d0r,c0r,f0r,Pt,FL,m0r,Pve,g0r,h0r,pc,p0r,Ive,u0r,_0r,lH,b0r,v0r,F0r,NM,T0r,Pr,TL,M0r,qve,E0r,C0r,dn,w0r,Nve,A0r,y0r,jve,L0r,x0r,Dve,$0r,k0r,S0r,de,jM,Gve,R0r,B0r,iH,P0r,I0r,q0r,DM,Ove,N0r,j0r,dH,D0r,G0r,O0r,GM,Vve,V0r,X0r,cH,z0r,Q0r,W0r,OM,Xve,H0r,U0r,fH,J0r,Y0r,K0r,VM,zve,Z0r,eTr,mH,oTr,rTr,tTr,XM,Qve,aTr,nTr,gH,sTr,lTr,iTr,zM,Wve,dTr,cTr,hH,fTr,mTr,gTr,QM,Hve,hTr,pTr,pH,uTr,_Tr,bTr,WM,Uve,vTr,FTr,uH,TTr,MTr,ETr,HM,Jve,CTr,wTr,_H,ATr,yTr,LTr,UM,Yve,xTr,$Tr,bH,kTr,STr,RTr,JM,Kve,BTr,PTr,vH,ITr,qTr,NTr,YM,Zve,jTr,DTr,FH,GTr,OTr,VTr,KM,eFe,XTr,zTr,TH,QTr,WTr,HTr,ZM,oFe,UTr,JTr,MH,YTr,KTr,ZTr,e4,rFe,e7r,o7r,EH,r7r,t7r,a7r,o4,tFe,n7r,s7r,CH,l7r,i7r,d7r,r4,aFe,c7r,f7r,wH,m7r,g7r,h7r,t4,nFe,p7r,u7r,AH,_7r,b7r,v7r,a4,sFe,F7r,T7r,yH,M7r,E7r,C7r,n4,TIe,uc,s4,lFe,ML,w7r,iFe,A7r,MIe,ir,EL,y7r,_c,L7r,LH,x7r,$7r,xH,k7r,S7r,R7r,CL,B7r,dFe,P7r,I7r,q7r,It,wL,N7r,cFe,j7r,D7r,bc,G7r,fFe,O7r,V7r,$H,X7r,z7r,Q7r,l4,W7r,Ir,AL,H7r,mFe,U7r,J7r,cn,Y7r,gFe,K7r,Z7r,hFe,e9r,o9r,pFe,r9r,t9r,a9r,ce,i4,uFe,n9r,s9r,kH,l9r,i9r,d9r,d4,_Fe,c9r,f9r,SH,m9r,g9r,h9r,c4,bFe,p9r,u9r,RH,_9r,b9r,v9r,f4,vFe,F9r,T9r,BH,M9r,E9r,C9r,m4,FFe,w9r,A9r,PH,y9r,L9r,x9r,g4,TFe,$9r,k9r,IH,S9r,R9r,B9r,h4,MFe,P9r,I9r,qH,q9r,N9r,j9r,p4,EFe,D9r,G9r,NH,O9r,V9r,X9r,u4,CFe,z9r,Q9r,jH,W9r,H9r,U9r,_4,wFe,J9r,Y9r,DH,K9r,Z9r,eMr,b4,AFe,oMr,rMr,GH,tMr,aMr,nMr,v4,yFe,sMr,lMr,OH,iMr,dMr,cMr,F4,LFe,fMr,mMr,VH,gMr,hMr,pMr,T4,xFe,uMr,_Mr,XH,bMr,vMr,FMr,M4,$Fe,TMr,MMr,zH,EMr,CMr,wMr,E4,kFe,AMr,yMr,QH,LMr,xMr,$Mr,C4,SFe,kMr,SMr,WH,RMr,BMr,PMr,w4,RFe,IMr,qMr,HH,NMr,jMr,DMr,A4,BFe,GMr,OMr,UH,VMr,XMr,zMr,y4,PFe,QMr,WMr,JH,HMr,UMr,JMr,L4,EIe,vc,x4,IFe,yL,YMr,qFe,KMr,CIe,dr,LL,ZMr,Fc,e4r,YH,o4r,r4r,KH,t4r,a4r,n4r,xL,s4r,NFe,l4r,i4r,d4r,qt,$L,c4r,jFe,f4r,m4r,Tc,g4r,DFe,h4r,p4r,ZH,u4r,_4r,b4r,$4,v4r,qr,kL,F4r,GFe,T4r,M4r,fn,E4r,OFe,C4r,w4r,VFe,A4r,y4r,XFe,L4r,x4r,$4r,zFe,k4,QFe,k4r,S4r,eU,R4r,B4r,P4r,S4,wIe,Mc,R4,WFe,SL,I4r,HFe,q4r,AIe,cr,RL,N4r,Ec,j4r,oU,D4r,G4r,rU,O4r,V4r,X4r,BL,z4r,UFe,Q4r,W4r,H4r,Nt,PL,U4r,JFe,J4r,Y4r,Cc,K4r,YFe,Z4r,eEr,tU,oEr,rEr,tEr,B4,aEr,Nr,IL,nEr,KFe,sEr,lEr,mn,iEr,ZFe,dEr,cEr,e0e,fEr,mEr,o0e,gEr,hEr,pEr,r0e,P4,t0e,uEr,_Er,aU,bEr,vEr,FEr,I4,yIe,wc,q4,a0e,qL,TEr,n0e,MEr,LIe,fr,NL,EEr,Ac,CEr,nU,wEr,AEr,sU,yEr,LEr,xEr,jL,$Er,s0e,kEr,SEr,REr,jt,DL,BEr,l0e,PEr,IEr,yc,qEr,i0e,NEr,jEr,lU,DEr,GEr,OEr,N4,VEr,jr,GL,XEr,d0e,zEr,QEr,gn,WEr,c0e,HEr,UEr,f0e,JEr,YEr,m0e,KEr,ZEr,e5r,oe,j4,g0e,o5r,r5r,iU,t5r,a5r,n5r,D4,h0e,s5r,l5r,dU,i5r,d5r,c5r,G4,p0e,f5r,m5r,cU,g5r,h5r,p5r,O4,u0e,u5r,_5r,fU,b5r,v5r,F5r,V4,_0e,T5r,M5r,mU,E5r,C5r,w5r,X4,b0e,A5r,y5r,gU,L5r,x5r,$5r,z4,v0e,k5r,S5r,hU,R5r,B5r,P5r,Q4,F0e,I5r,q5r,pU,N5r,j5r,D5r,W4,T0e,G5r,O5r,uU,V5r,X5r,z5r,H4,M0e,Q5r,W5r,_U,H5r,U5r,J5r,U4,E0e,Y5r,K5r,bU,Z5r,eCr,oCr,J4,C0e,rCr,tCr,vU,aCr,nCr,sCr,Y4,w0e,lCr,iCr,FU,dCr,cCr,fCr,K4,A0e,mCr,gCr,TU,hCr,pCr,uCr,Z4,y0e,_Cr,bCr,MU,vCr,FCr,TCr,eE,L0e,MCr,ECr,EU,CCr,wCr,ACr,oE,x0e,yCr,LCr,CU,xCr,$Cr,kCr,rE,$0e,SCr,RCr,wU,BCr,PCr,ICr,tE,k0e,qCr,NCr,AU,jCr,DCr,GCr,aE,S0e,OCr,VCr,yU,XCr,zCr,QCr,nE,R0e,WCr,HCr,LU,UCr,JCr,YCr,sE,B0e,KCr,ZCr,xU,e3r,o3r,r3r,lE,P0e,t3r,a3r,$U,n3r,s3r,l3r,iE,I0e,i3r,d3r,kU,c3r,f3r,m3r,dE,q0e,g3r,h3r,SU,p3r,u3r,_3r,cE,xIe,Lc,fE,N0e,OL,b3r,j0e,v3r,$Ie,mr,VL,F3r,xc,T3r,RU,M3r,E3r,BU,C3r,w3r,A3r,XL,y3r,D0e,L3r,x3r,$3r,Dt,zL,k3r,G0e,S3r,R3r,$c,B3r,O0e,P3r,I3r,PU,q3r,N3r,j3r,mE,D3r,Dr,QL,G3r,V0e,O3r,V3r,hn,X3r,X0e,z3r,Q3r,z0e,W3r,H3r,Q0e,U3r,J3r,Y3r,ke,gE,W0e,K3r,Z3r,IU,ewr,owr,rwr,hE,H0e,twr,awr,qU,nwr,swr,lwr,pE,U0e,iwr,dwr,NU,cwr,fwr,mwr,uE,J0e,gwr,hwr,jU,pwr,uwr,_wr,_E,Y0e,bwr,vwr,DU,Fwr,Twr,Mwr,bE,K0e,Ewr,Cwr,GU,wwr,Awr,ywr,vE,Z0e,Lwr,xwr,OU,$wr,kwr,Swr,FE,eTe,Rwr,Bwr,VU,Pwr,Iwr,qwr,TE,oTe,Nwr,jwr,XU,Dwr,Gwr,Owr,ME,kIe,kc,EE,rTe,WL,Vwr,tTe,Xwr,SIe,gr,HL,zwr,Sc,Qwr,zU,Wwr,Hwr,QU,Uwr,Jwr,Ywr,UL,Kwr,aTe,Zwr,eAr,oAr,Gt,JL,rAr,nTe,tAr,aAr,Rc,nAr,sTe,sAr,lAr,WU,iAr,dAr,cAr,CE,fAr,Gr,YL,mAr,lTe,gAr,hAr,pn,pAr,iTe,uAr,_Ar,dTe,bAr,vAr,cTe,FAr,TAr,MAr,Me,wE,fTe,EAr,CAr,HU,wAr,AAr,yAr,AE,mTe,LAr,xAr,UU,$Ar,kAr,SAr,yE,gTe,RAr,BAr,JU,PAr,IAr,qAr,LE,hTe,NAr,jAr,YU,DAr,GAr,OAr,xE,pTe,VAr,XAr,KU,zAr,QAr,WAr,$E,uTe,HAr,UAr,ZU,JAr,YAr,KAr,kE,_Te,ZAr,e6r,eJ,o6r,r6r,t6r,SE,bTe,a6r,n6r,oJ,s6r,l6r,i6r,RE,vTe,d6r,c6r,rJ,f6r,m6r,g6r,BE,FTe,h6r,p6r,tJ,u6r,_6r,b6r,PE,TTe,v6r,F6r,aJ,T6r,M6r,E6r,IE,MTe,C6r,w6r,nJ,A6r,y6r,L6r,qE,RIe,Bc,NE,ETe,KL,x6r,CTe,$6r,BIe,hr,ZL,k6r,Pc,S6r,sJ,R6r,B6r,lJ,P6r,I6r,q6r,e8,N6r,wTe,j6r,D6r,G6r,Ot,o8,O6r,ATe,V6r,X6r,Ic,z6r,yTe,Q6r,W6r,iJ,H6r,U6r,J6r,jE,Y6r,Or,r8,K6r,LTe,Z6r,eyr,un,oyr,xTe,ryr,tyr,$Te,ayr,nyr,kTe,syr,lyr,iyr,Le,DE,STe,dyr,cyr,dJ,fyr,myr,gyr,GE,RTe,hyr,pyr,cJ,uyr,_yr,byr,OE,BTe,vyr,Fyr,fJ,Tyr,Myr,Eyr,VE,PTe,Cyr,wyr,mJ,Ayr,yyr,Lyr,XE,ITe,xyr,$yr,gJ,kyr,Syr,Ryr,zE,qTe,Byr,Pyr,hJ,Iyr,qyr,Nyr,QE,NTe,jyr,Dyr,pJ,Gyr,Oyr,Vyr,WE,jTe,Xyr,zyr,uJ,Qyr,Wyr,Hyr,HE,DTe,Uyr,Jyr,_J,Yyr,Kyr,Zyr,UE,GTe,eLr,oLr,bJ,rLr,tLr,aLr,JE,PIe,qc,YE,OTe,t8,nLr,VTe,sLr,IIe,pr,a8,lLr,Nc,iLr,vJ,dLr,cLr,FJ,fLr,mLr,gLr,n8,hLr,XTe,pLr,uLr,_Lr,Vt,s8,bLr,zTe,vLr,FLr,jc,TLr,QTe,MLr,ELr,TJ,CLr,wLr,ALr,KE,yLr,Vr,l8,LLr,WTe,xLr,$Lr,_n,kLr,HTe,SLr,RLr,UTe,BLr,PLr,JTe,ILr,qLr,NLr,Se,ZE,YTe,jLr,DLr,MJ,GLr,OLr,VLr,e5,KTe,XLr,zLr,EJ,QLr,WLr,HLr,o5,ZTe,ULr,JLr,CJ,YLr,KLr,ZLr,r5,e7e,e8r,o8r,wJ,r8r,t8r,a8r,t5,o7e,n8r,s8r,AJ,l8r,i8r,d8r,a5,r7e,c8r,f8r,yJ,m8r,g8r,h8r,n5,t7e,p8r,u8r,LJ,_8r,b8r,v8r,s5,a7e,F8r,T8r,xJ,M8r,E8r,C8r,l5,n7e,w8r,A8r,$J,y8r,L8r,x8r,i5,qIe,Dc,d5,s7e,i8,$8r,l7e,k8r,NIe,ur,d8,S8r,Gc,R8r,kJ,B8r,P8r,SJ,I8r,q8r,N8r,c8,j8r,i7e,D8r,G8r,O8r,Xt,f8,V8r,d7e,X8r,z8r,Oc,Q8r,c7e,W8r,H8r,RJ,U8r,J8r,Y8r,c5,K8r,Xr,m8,Z8r,f7e,exr,oxr,bn,rxr,m7e,txr,axr,g7e,nxr,sxr,h7e,lxr,ixr,dxr,xe,f5,p7e,cxr,fxr,BJ,mxr,gxr,hxr,m5,u7e,pxr,uxr,PJ,_xr,bxr,vxr,g5,_7e,Fxr,Txr,IJ,Mxr,Exr,Cxr,h5,b7e,wxr,Axr,qJ,yxr,Lxr,xxr,p5,v7e,$xr,kxr,NJ,Sxr,Rxr,Bxr,u5,F7e,Pxr,Ixr,jJ,qxr,Nxr,jxr,_5,T7e,Dxr,Gxr,DJ,Oxr,Vxr,Xxr,b5,M7e,zxr,Qxr,GJ,Wxr,Hxr,Uxr,v5,E7e,Jxr,Yxr,OJ,Kxr,Zxr,e$r,F5,C7e,o$r,r$r,VJ,t$r,a$r,n$r,T5,jIe,Vc,M5,w7e,g8,s$r,A7e,l$r,DIe,_r,h8,i$r,Xc,d$r,XJ,c$r,f$r,zJ,m$r,g$r,h$r,p8,p$r,y7e,u$r,_$r,b$r,zt,u8,v$r,L7e,F$r,T$r,zc,M$r,x7e,E$r,C$r,QJ,w$r,A$r,y$r,E5,L$r,zr,_8,x$r,$7e,$$r,k$r,vn,S$r,k7e,R$r,B$r,S7e,P$r,I$r,R7e,q$r,N$r,j$r,$e,C5,B7e,D$r,G$r,WJ,O$r,V$r,X$r,w5,P7e,z$r,Q$r,HJ,W$r,H$r,U$r,A5,I7e,J$r,Y$r,UJ,K$r,Z$r,ekr,y5,q7e,okr,rkr,JJ,tkr,akr,nkr,L5,N7e,skr,lkr,YJ,ikr,dkr,ckr,x5,j7e,fkr,mkr,KJ,gkr,hkr,pkr,$5,D7e,ukr,_kr,ZJ,bkr,vkr,Fkr,k5,G7e,Tkr,Mkr,eY,Ekr,Ckr,wkr,S5,O7e,Akr,ykr,oY,Lkr,xkr,$kr,R5,V7e,kkr,Skr,rY,Rkr,Bkr,Pkr,B5,GIe,Qc,P5,X7e,b8,Ikr,z7e,qkr,OIe,br,v8,Nkr,Wc,jkr,tY,Dkr,Gkr,aY,Okr,Vkr,Xkr,F8,zkr,Q7e,Qkr,Wkr,Hkr,Qt,T8,Ukr,W7e,Jkr,Ykr,Hc,Kkr,H7e,Zkr,eSr,nY,oSr,rSr,tSr,I5,aSr,Qr,M8,nSr,U7e,sSr,lSr,Fn,iSr,J7e,dSr,cSr,Y7e,fSr,mSr,K7e,gSr,hSr,pSr,De,q5,Z7e,uSr,_Sr,sY,bSr,vSr,FSr,N5,e9e,TSr,MSr,lY,ESr,CSr,wSr,j5,o9e,ASr,ySr,iY,LSr,xSr,$Sr,D5,r9e,kSr,SSr,dY,RSr,BSr,PSr,G5,t9e,ISr,qSr,cY,NSr,jSr,DSr,O5,a9e,GSr,OSr,fY,VSr,XSr,zSr,V5,n9e,QSr,WSr,mY,HSr,USr,JSr,X5,s9e,YSr,KSr,gY,ZSr,eRr,oRr,z5,VIe,Uc,Q5,l9e,E8,rRr,i9e,tRr,XIe,vr,C8,aRr,Jc,nRr,hY,sRr,lRr,pY,iRr,dRr,cRr,w8,fRr,d9e,mRr,gRr,hRr,Wt,A8,pRr,c9e,uRr,_Rr,Yc,bRr,f9e,vRr,FRr,uY,TRr,MRr,ERr,W5,CRr,Wr,y8,wRr,m9e,ARr,yRr,Tn,LRr,g9e,xRr,$Rr,h9e,kRr,SRr,p9e,RRr,BRr,PRr,Ge,H5,u9e,IRr,qRr,_Y,NRr,jRr,DRr,U5,_9e,GRr,ORr,bY,VRr,XRr,zRr,J5,b9e,QRr,WRr,vY,HRr,URr,JRr,Y5,v9e,YRr,KRr,FY,ZRr,eBr,oBr,K5,F9e,rBr,tBr,TY,aBr,nBr,sBr,Z5,T9e,lBr,iBr,MY,dBr,cBr,fBr,eC,M9e,mBr,gBr,EY,hBr,pBr,uBr,oC,E9e,_Br,bBr,CY,vBr,FBr,TBr,rC,zIe,Kc,tC,C9e,L8,MBr,w9e,EBr,QIe,Fr,x8,CBr,Zc,wBr,wY,ABr,yBr,AY,LBr,xBr,$Br,$8,kBr,A9e,SBr,RBr,BBr,Ht,k8,PBr,y9e,IBr,qBr,ef,NBr,L9e,jBr,DBr,yY,GBr,OBr,VBr,aC,XBr,Hr,S8,zBr,x9e,QBr,WBr,Mn,HBr,$9e,UBr,JBr,k9e,YBr,KBr,S9e,ZBr,ePr,oPr,R9e,nC,B9e,rPr,tPr,LY,aPr,nPr,sPr,sC,WIe,of,lC,P9e,R8,lPr,I9e,iPr,HIe,Tr,B8,dPr,rf,cPr,xY,fPr,mPr,$Y,gPr,hPr,pPr,P8,uPr,q9e,_Pr,bPr,vPr,Ut,I8,FPr,N9e,TPr,MPr,tf,EPr,j9e,CPr,wPr,kY,APr,yPr,LPr,iC,xPr,Ur,q8,$Pr,D9e,kPr,SPr,En,RPr,G9e,BPr,PPr,O9e,IPr,qPr,V9e,NPr,jPr,DPr,N8,dC,X9e,GPr,OPr,SY,VPr,XPr,zPr,cC,z9e,QPr,WPr,RY,HPr,UPr,JPr,fC,UIe,af,mC,Q9e,j8,YPr,W9e,KPr,JIe,Mr,D8,ZPr,nf,eIr,BY,oIr,rIr,PY,tIr,aIr,nIr,G8,sIr,H9e,lIr,iIr,dIr,Jt,O8,cIr,U9e,fIr,mIr,sf,gIr,J9e,hIr,pIr,IY,uIr,_Ir,bIr,gC,vIr,Jr,V8,FIr,Y9e,TIr,MIr,Cn,EIr,K9e,CIr,wIr,Z9e,AIr,yIr,eMe,LIr,xIr,$Ir,oMe,hC,rMe,kIr,SIr,qY,RIr,BIr,PIr,pC,YIe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Nw=new ee({}),jw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),uf=new IIr({props:{warning:!0,$$slots:{default:[OCt]},$$scope:{ctx:A}}}),Dw=new ee({}),Gw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/configuration_auto.py#L563"}}),Xw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/configuration_auto.py#L586"}}),gg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[VCt]},$$scope:{ctx:A}}}),zw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/configuration_auto.py#L708"}}),Qw=new ee({}),Ww=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/tokenization_auto.py#L377"}}),Jw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17029/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/tokenization_auto.py#L391"}}),zg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[XCt]},$$scope:{ctx:A}}}),Yw=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/tokenization_auto.py#L587"}}),Kw=new ee({}),Zw=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),rA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17029/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),bh=new IIr({props:{$$slots:{default:[zCt]},$$scope:{ctx:A}}}),vh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[QCt]},$$scope:{ctx:A}}}),tA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),aA=new ee({}),nA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/processing_auto.py#L76"}}),iA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/processing_auto.py#L90"}}),Ih=new IIr({props:{$$slots:{default:[WCt]},$$scope:{ctx:A}}}),qh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[HCt]},$$scope:{ctx:A}}}),dA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/processing_auto.py#L243"}}),cA=new ee({}),fA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L716"}}),gA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),Dh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[UCt]},$$scope:{ctx:A}}}),hA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),Lu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[JCt]},$$scope:{ctx:A}}}),pA=new ee({}),uA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L723"}}),bA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),$u=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[YCt]},$$scope:{ctx:A}}}),vA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),__=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[KCt]},$$scope:{ctx:A}}}),FA=new ee({}),TA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L738"}}),EA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),v_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[ZCt]},$$scope:{ctx:A}}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[e3t]},$$scope:{ctx:A}}}),wA=new ee({}),AA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L745"}}),LA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[o3t]},$$scope:{ctx:A}}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[r3t]},$$scope:{ctx:A}}}),$A=new ee({}),kA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L752"}}),RA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[t3t]},$$scope:{ctx:A}}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),i1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[a3t]},$$scope:{ctx:A}}}),PA=new ee({}),IA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L761"}}),NA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),c1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[n3t]},$$scope:{ctx:A}}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),nb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[s3t]},$$scope:{ctx:A}}}),DA=new ee({}),GA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L795"}}),VA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),lb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[l3t]},$$scope:{ctx:A}}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[i3t]},$$scope:{ctx:A}}}),zA=new ee({}),QA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L802"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),jb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[d3t]},$$scope:{ctx:A}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),Qb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[c3t]},$$scope:{ctx:A}}}),JA=new ee({}),YA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L788"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),Hb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[f3t]},$$scope:{ctx:A}}}),e6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[m3t]},$$scope:{ctx:A}}}),o6=new ee({}),r6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L770"}}),a6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[g3t]},$$scope:{ctx:A}}}),n6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[h3t]},$$scope:{ctx:A}}}),s6=new ee({}),l6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L777"}}),d6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[p3t]},$$scope:{ctx:A}}}),c6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[u3t]},$$scope:{ctx:A}}}),f6=new ee({}),m6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L811"}}),h6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[_3t]},$$scope:{ctx:A}}}),p6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[b3t]},$$scope:{ctx:A}}}),u6=new ee({}),_6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L850"}}),v6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[v3t]},$$scope:{ctx:A}}}),F6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[F3t]},$$scope:{ctx:A}}}),T6=new ee({}),M6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L857"}}),C6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[T3t]},$$scope:{ctx:A}}}),w6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[M3t]},$$scope:{ctx:A}}}),A6=new ee({}),y6=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L880"}}),x6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[E3t]},$$scope:{ctx:A}}}),$6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[C3t]},$$scope:{ctx:A}}}),k6=new ee({}),S6=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L864"}}),B6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[w3t]},$$scope:{ctx:A}}}),P6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[A3t]},$$scope:{ctx:A}}}),I6=new ee({}),q6=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L871"}}),j6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[y3t]},$$scope:{ctx:A}}}),D6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[L3t]},$$scope:{ctx:A}}}),O6=new ee({}),V6=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L889"}}),z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[x3t]},$$scope:{ctx:A}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$3t]},$$scope:{ctx:A}}}),W6=new ee({}),H6=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L896"}}),J6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[k3t]},$$scope:{ctx:A}}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[S3t]},$$scope:{ctx:A}}}),K6=new ee({}),Z6=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L843"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[R3t]},$$scope:{ctx:A}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[B3t]},$$scope:{ctx:A}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L818"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[P3t]},$$scope:{ctx:A}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[I3t]},$$scope:{ctx:A}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L825"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[q3t]},$$scope:{ctx:A}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[N3t]},$$scope:{ctx:A}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_auto.py#L834"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[j3t]},$$scope:{ctx:A}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[D3t]},$$scope:{ctx:A}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),My=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[G3t]},$$scope:{ctx:A}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[O3t]},$$scope:{ctx:A}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),yy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[V3t]},$$scope:{ctx:A}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:A}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[z3t]},$$scope:{ctx:A}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),z7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Q3t]},$$scope:{ctx:A}}}),By=new ee({}),Py=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),qy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[W3t]},$$scope:{ctx:A}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:A}}}),Dy=new ee({}),Gy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:A}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),v9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:A}}}),zy=new ee({}),Qy=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),T9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:A}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),S9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:A}}}),Jy=new ee({}),Yy=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),B9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:A}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:A}}}),oL=new ee({}),rL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),aL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:A}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),yM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:A}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),xM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:A}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:A}}}),mL=new ee({}),gL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),pL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nwt]},$$scope:{ctx:A}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[swt]},$$scope:{ctx:A}}}),_L=new ee({}),bL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),FL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[lwt]},$$scope:{ctx:A}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iwt]},$$scope:{ctx:A}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),wL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dwt]},$$scope:{ctx:A}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cwt]},$$scope:{ctx:A}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[fwt]},$$scope:{ctx:A}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mwt]},$$scope:{ctx:A}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[gwt]},$$scope:{ctx:A}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[hwt]},$$scope:{ctx:A}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),DL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[pwt]},$$scope:{ctx:A}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[uwt]},$$scope:{ctx:A}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),zL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[_wt]},$$scope:{ctx:A}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bwt]},$$scope:{ctx:A}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),JL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[vwt]},$$scope:{ctx:A}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Fwt]},$$scope:{ctx:A}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),o8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Twt]},$$scope:{ctx:A}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Mwt]},$$scope:{ctx:A}}}),t8=new ee({}),a8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),s8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ewt]},$$scope:{ctx:A}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Cwt]},$$scope:{ctx:A}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),f8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wwt]},$$scope:{ctx:A}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Awt]},$$scope:{ctx:A}}}),g8=new ee({}),h8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),u8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ywt]},$$scope:{ctx:A}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Lwt]},$$scope:{ctx:A}}}),b8=new ee({}),v8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),T8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[xwt]},$$scope:{ctx:A}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$wt]},$$scope:{ctx:A}}}),E8=new ee({}),C8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),A8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[kwt]},$$scope:{ctx:A}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Swt]},$$scope:{ctx:A}}}),L8=new ee({}),x8=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),k8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Rwt]},$$scope:{ctx:A}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Bwt]},$$scope:{ctx:A}}}),R8=new ee({}),B8=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),I8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Pwt]},$$scope:{ctx:A}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Iwt]},$$scope:{ctx:A}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),O8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[qwt]},$$scope:{ctx:A}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17029/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17029/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17029/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),ff=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),Bw=o("from_pretrained()"),mf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),Pw=o("AutoConfig"),yn=o(", "),Ln=a("a"),Iw=o("AutoModel"),fi=o(`, and
`),xn=a("a"),qw=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),gf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),r$=o("will create a model that is an instance of "),gi=a("a"),t$=o("BertModel"),a$=o("."),Eo=l(),Ea=a("p"),n$=o("There is one class of "),hf=a("code"),s$=o("AutoModel"),sje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),HBe=l(),hi=a("h2"),pf=a("a"),$Z=a("span"),F(Nw.$$.fragment),lje=l(),kZ=a("span"),ije=o("Extending the Auto Classes"),UBe=l(),$n=a("p"),dje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),SZ=a("code"),cje=o("NewModel"),fje=o(", make sure you have a "),RZ=a("code"),mje=o("NewModelConfig"),gje=o(` then you can add those to the auto
classes like this:`),JBe=l(),F(jw.$$.fragment),YBe=l(),l$=a("p"),hje=o("You will then be able to use the auto classes like you would usually do!"),KBe=l(),F(uf.$$.fragment),ZBe=l(),pi=a("h2"),_f=a("a"),BZ=a("span"),F(Dw.$$.fragment),pje=l(),PZ=a("span"),uje=o("AutoConfig"),ePe=l(),Co=a("div"),F(Gw.$$.fragment),_je=l(),Ow=a("p"),bje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i$=a("a"),vje=o("from_pretrained()"),Fje=o(" class method."),Tje=l(),Vw=a("p"),Mje=o("This class cannot be instantiated directly using "),IZ=a("code"),Eje=o("__init__()"),Cje=o(" (throws an error)."),wje=l(),Er=a("div"),F(Xw.$$.fragment),Aje=l(),qZ=a("p"),yje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Lje=l(),ui=a("p"),xje=o("The configuration class to instantiate is selected based on the "),NZ=a("code"),$je=o("model_type"),kje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),jZ=a("code"),Sje=o("pretrained_model_name_or_path"),Rje=o(":"),Bje=l(),y=a("ul"),bf=a("li"),DZ=a("strong"),Pje=o("albert"),Ije=o(" \u2014 "),d$=a("a"),qje=o("AlbertConfig"),Nje=o(" (ALBERT model)"),jje=l(),vf=a("li"),GZ=a("strong"),Dje=o("bart"),Gje=o(" \u2014 "),c$=a("a"),Oje=o("BartConfig"),Vje=o(" (BART model)"),Xje=l(),Ff=a("li"),OZ=a("strong"),zje=o("beit"),Qje=o(" \u2014 "),f$=a("a"),Wje=o("BeitConfig"),Hje=o(" (BEiT model)"),Uje=l(),Tf=a("li"),VZ=a("strong"),Jje=o("bert"),Yje=o(" \u2014 "),m$=a("a"),Kje=o("BertConfig"),Zje=o(" (BERT model)"),eDe=l(),Mf=a("li"),XZ=a("strong"),oDe=o("bert-generation"),rDe=o(" \u2014 "),g$=a("a"),tDe=o("BertGenerationConfig"),aDe=o(" (Bert Generation model)"),nDe=l(),Ef=a("li"),zZ=a("strong"),sDe=o("big_bird"),lDe=o(" \u2014 "),h$=a("a"),iDe=o("BigBirdConfig"),dDe=o(" (BigBird model)"),cDe=l(),Cf=a("li"),QZ=a("strong"),fDe=o("bigbird_pegasus"),mDe=o(" \u2014 "),p$=a("a"),gDe=o("BigBirdPegasusConfig"),hDe=o(" (BigBirdPegasus model)"),pDe=l(),wf=a("li"),WZ=a("strong"),uDe=o("blenderbot"),_De=o(" \u2014 "),u$=a("a"),bDe=o("BlenderbotConfig"),vDe=o(" (Blenderbot model)"),FDe=l(),Af=a("li"),HZ=a("strong"),TDe=o("blenderbot-small"),MDe=o(" \u2014 "),_$=a("a"),EDe=o("BlenderbotSmallConfig"),CDe=o(" (BlenderbotSmall model)"),wDe=l(),yf=a("li"),UZ=a("strong"),ADe=o("camembert"),yDe=o(" \u2014 "),b$=a("a"),LDe=o("CamembertConfig"),xDe=o(" (CamemBERT model)"),$De=l(),Lf=a("li"),JZ=a("strong"),kDe=o("canine"),SDe=o(" \u2014 "),v$=a("a"),RDe=o("CanineConfig"),BDe=o(" (Canine model)"),PDe=l(),xf=a("li"),YZ=a("strong"),IDe=o("clip"),qDe=o(" \u2014 "),F$=a("a"),NDe=o("CLIPConfig"),jDe=o(" (CLIP model)"),DDe=l(),$f=a("li"),KZ=a("strong"),GDe=o("convbert"),ODe=o(" \u2014 "),T$=a("a"),VDe=o("ConvBertConfig"),XDe=o(" (ConvBERT model)"),zDe=l(),kf=a("li"),ZZ=a("strong"),QDe=o("convnext"),WDe=o(" \u2014 "),M$=a("a"),HDe=o("ConvNextConfig"),UDe=o(" (ConvNext model)"),JDe=l(),Sf=a("li"),eee=a("strong"),YDe=o("ctrl"),KDe=o(" \u2014 "),E$=a("a"),ZDe=o("CTRLConfig"),eGe=o(" (CTRL model)"),oGe=l(),Rf=a("li"),oee=a("strong"),rGe=o("data2vec-audio"),tGe=o(" \u2014 "),C$=a("a"),aGe=o("Data2VecAudioConfig"),nGe=o(" (Data2VecAudio model)"),sGe=l(),Bf=a("li"),ree=a("strong"),lGe=o("data2vec-text"),iGe=o(" \u2014 "),w$=a("a"),dGe=o("Data2VecTextConfig"),cGe=o(" (Data2VecText model)"),fGe=l(),Pf=a("li"),tee=a("strong"),mGe=o("data2vec-vision"),gGe=o(" \u2014 "),A$=a("a"),hGe=o("Data2VecVisionConfig"),pGe=o(" (Data2VecVision model)"),uGe=l(),If=a("li"),aee=a("strong"),_Ge=o("deberta"),bGe=o(" \u2014 "),y$=a("a"),vGe=o("DebertaConfig"),FGe=o(" (DeBERTa model)"),TGe=l(),qf=a("li"),nee=a("strong"),MGe=o("deberta-v2"),EGe=o(" \u2014 "),L$=a("a"),CGe=o("DebertaV2Config"),wGe=o(" (DeBERTa-v2 model)"),AGe=l(),Nf=a("li"),see=a("strong"),yGe=o("decision_transformer"),LGe=o(" \u2014 "),x$=a("a"),xGe=o("DecisionTransformerConfig"),$Ge=o(" (Decision Transformer model)"),kGe=l(),jf=a("li"),lee=a("strong"),SGe=o("deit"),RGe=o(" \u2014 "),$$=a("a"),BGe=o("DeiTConfig"),PGe=o(" (DeiT model)"),IGe=l(),Df=a("li"),iee=a("strong"),qGe=o("detr"),NGe=o(" \u2014 "),k$=a("a"),jGe=o("DetrConfig"),DGe=o(" (DETR model)"),GGe=l(),Gf=a("li"),dee=a("strong"),OGe=o("distilbert"),VGe=o(" \u2014 "),S$=a("a"),XGe=o("DistilBertConfig"),zGe=o(" (DistilBERT model)"),QGe=l(),Of=a("li"),cee=a("strong"),WGe=o("dpr"),HGe=o(" \u2014 "),R$=a("a"),UGe=o("DPRConfig"),JGe=o(" (DPR model)"),YGe=l(),Vf=a("li"),fee=a("strong"),KGe=o("dpt"),ZGe=o(" \u2014 "),B$=a("a"),eOe=o("DPTConfig"),oOe=o(" (DPT model)"),rOe=l(),Xf=a("li"),mee=a("strong"),tOe=o("electra"),aOe=o(" \u2014 "),P$=a("a"),nOe=o("ElectraConfig"),sOe=o(" (ELECTRA model)"),lOe=l(),zf=a("li"),gee=a("strong"),iOe=o("encoder-decoder"),dOe=o(" \u2014 "),I$=a("a"),cOe=o("EncoderDecoderConfig"),fOe=o(" (Encoder decoder model)"),mOe=l(),Qf=a("li"),hee=a("strong"),gOe=o("flaubert"),hOe=o(" \u2014 "),q$=a("a"),pOe=o("FlaubertConfig"),uOe=o(" (FlauBERT model)"),_Oe=l(),Wf=a("li"),pee=a("strong"),bOe=o("fnet"),vOe=o(" \u2014 "),N$=a("a"),FOe=o("FNetConfig"),TOe=o(" (FNet model)"),MOe=l(),Hf=a("li"),uee=a("strong"),EOe=o("fsmt"),COe=o(" \u2014 "),j$=a("a"),wOe=o("FSMTConfig"),AOe=o(" (FairSeq Machine-Translation model)"),yOe=l(),Uf=a("li"),_ee=a("strong"),LOe=o("funnel"),xOe=o(" \u2014 "),D$=a("a"),$Oe=o("FunnelConfig"),kOe=o(" (Funnel Transformer model)"),SOe=l(),Jf=a("li"),bee=a("strong"),ROe=o("glpn"),BOe=o(" \u2014 "),G$=a("a"),POe=o("GLPNConfig"),IOe=o(" (GLPN model)"),qOe=l(),Yf=a("li"),vee=a("strong"),NOe=o("gpt2"),jOe=o(" \u2014 "),O$=a("a"),DOe=o("GPT2Config"),GOe=o(" (OpenAI GPT-2 model)"),OOe=l(),Kf=a("li"),Fee=a("strong"),VOe=o("gpt_neo"),XOe=o(" \u2014 "),V$=a("a"),zOe=o("GPTNeoConfig"),QOe=o(" (GPT Neo model)"),WOe=l(),Zf=a("li"),Tee=a("strong"),HOe=o("gptj"),UOe=o(" \u2014 "),X$=a("a"),JOe=o("GPTJConfig"),YOe=o(" (GPT-J model)"),KOe=l(),em=a("li"),Mee=a("strong"),ZOe=o("hubert"),eVe=o(" \u2014 "),z$=a("a"),oVe=o("HubertConfig"),rVe=o(" (Hubert model)"),tVe=l(),om=a("li"),Eee=a("strong"),aVe=o("ibert"),nVe=o(" \u2014 "),Q$=a("a"),sVe=o("IBertConfig"),lVe=o(" (I-BERT model)"),iVe=l(),rm=a("li"),Cee=a("strong"),dVe=o("imagegpt"),cVe=o(" \u2014 "),W$=a("a"),fVe=o("ImageGPTConfig"),mVe=o(" (ImageGPT model)"),gVe=l(),tm=a("li"),wee=a("strong"),hVe=o("layoutlm"),pVe=o(" \u2014 "),H$=a("a"),uVe=o("LayoutLMConfig"),_Ve=o(" (LayoutLM model)"),bVe=l(),am=a("li"),Aee=a("strong"),vVe=o("layoutlmv2"),FVe=o(" \u2014 "),U$=a("a"),TVe=o("LayoutLMv2Config"),MVe=o(" (LayoutLMv2 model)"),EVe=l(),nm=a("li"),yee=a("strong"),CVe=o("led"),wVe=o(" \u2014 "),J$=a("a"),AVe=o("LEDConfig"),yVe=o(" (LED model)"),LVe=l(),sm=a("li"),Lee=a("strong"),xVe=o("longformer"),$Ve=o(" \u2014 "),Y$=a("a"),kVe=o("LongformerConfig"),SVe=o(" (Longformer model)"),RVe=l(),lm=a("li"),xee=a("strong"),BVe=o("luke"),PVe=o(" \u2014 "),K$=a("a"),IVe=o("LukeConfig"),qVe=o(" (LUKE model)"),NVe=l(),im=a("li"),$ee=a("strong"),jVe=o("lxmert"),DVe=o(" \u2014 "),Z$=a("a"),GVe=o("LxmertConfig"),OVe=o(" (LXMERT model)"),VVe=l(),dm=a("li"),kee=a("strong"),XVe=o("m2m_100"),zVe=o(" \u2014 "),ek=a("a"),QVe=o("M2M100Config"),WVe=o(" (M2M100 model)"),HVe=l(),cm=a("li"),See=a("strong"),UVe=o("marian"),JVe=o(" \u2014 "),ok=a("a"),YVe=o("MarianConfig"),KVe=o(" (Marian model)"),ZVe=l(),fm=a("li"),Ree=a("strong"),eXe=o("maskformer"),oXe=o(" \u2014 "),rk=a("a"),rXe=o("MaskFormerConfig"),tXe=o(" (MaskFormer model)"),aXe=l(),mm=a("li"),Bee=a("strong"),nXe=o("mbart"),sXe=o(" \u2014 "),tk=a("a"),lXe=o("MBartConfig"),iXe=o(" (mBART model)"),dXe=l(),gm=a("li"),Pee=a("strong"),cXe=o("megatron-bert"),fXe=o(" \u2014 "),ak=a("a"),mXe=o("MegatronBertConfig"),gXe=o(" (MegatronBert model)"),hXe=l(),hm=a("li"),Iee=a("strong"),pXe=o("mobilebert"),uXe=o(" \u2014 "),nk=a("a"),_Xe=o("MobileBertConfig"),bXe=o(" (MobileBERT model)"),vXe=l(),pm=a("li"),qee=a("strong"),FXe=o("mpnet"),TXe=o(" \u2014 "),sk=a("a"),MXe=o("MPNetConfig"),EXe=o(" (MPNet model)"),CXe=l(),um=a("li"),Nee=a("strong"),wXe=o("mt5"),AXe=o(" \u2014 "),lk=a("a"),yXe=o("MT5Config"),LXe=o(" (mT5 model)"),xXe=l(),_m=a("li"),jee=a("strong"),$Xe=o("nystromformer"),kXe=o(" \u2014 "),ik=a("a"),SXe=o("NystromformerConfig"),RXe=o(" (Nystromformer model)"),BXe=l(),bm=a("li"),Dee=a("strong"),PXe=o("openai-gpt"),IXe=o(" \u2014 "),dk=a("a"),qXe=o("OpenAIGPTConfig"),NXe=o(" (OpenAI GPT model)"),jXe=l(),vm=a("li"),Gee=a("strong"),DXe=o("pegasus"),GXe=o(" \u2014 "),ck=a("a"),OXe=o("PegasusConfig"),VXe=o(" (Pegasus model)"),XXe=l(),Fm=a("li"),Oee=a("strong"),zXe=o("perceiver"),QXe=o(" \u2014 "),fk=a("a"),WXe=o("PerceiverConfig"),HXe=o(" (Perceiver model)"),UXe=l(),Tm=a("li"),Vee=a("strong"),JXe=o("plbart"),YXe=o(" \u2014 "),mk=a("a"),KXe=o("PLBartConfig"),ZXe=o(" (PLBart model)"),eze=l(),Mm=a("li"),Xee=a("strong"),oze=o("poolformer"),rze=o(" \u2014 "),gk=a("a"),tze=o("PoolFormerConfig"),aze=o(" (PoolFormer model)"),nze=l(),Em=a("li"),zee=a("strong"),sze=o("prophetnet"),lze=o(" \u2014 "),hk=a("a"),ize=o("ProphetNetConfig"),dze=o(" (ProphetNet model)"),cze=l(),Cm=a("li"),Qee=a("strong"),fze=o("qdqbert"),mze=o(" \u2014 "),pk=a("a"),gze=o("QDQBertConfig"),hze=o(" (QDQBert model)"),pze=l(),wm=a("li"),Wee=a("strong"),uze=o("rag"),_ze=o(" \u2014 "),uk=a("a"),bze=o("RagConfig"),vze=o(" (RAG model)"),Fze=l(),Am=a("li"),Hee=a("strong"),Tze=o("realm"),Mze=o(" \u2014 "),_k=a("a"),Eze=o("RealmConfig"),Cze=o(" (Realm model)"),wze=l(),ym=a("li"),Uee=a("strong"),Aze=o("reformer"),yze=o(" \u2014 "),bk=a("a"),Lze=o("ReformerConfig"),xze=o(" (Reformer model)"),$ze=l(),Lm=a("li"),Jee=a("strong"),kze=o("regnet"),Sze=o(" \u2014 "),vk=a("a"),Rze=o("RegNetConfig"),Bze=o(" (RegNet model)"),Pze=l(),xm=a("li"),Yee=a("strong"),Ize=o("rembert"),qze=o(" \u2014 "),Fk=a("a"),Nze=o("RemBertConfig"),jze=o(" (RemBERT model)"),Dze=l(),$m=a("li"),Kee=a("strong"),Gze=o("resnet"),Oze=o(" \u2014 "),Tk=a("a"),Vze=o("ResNetConfig"),Xze=o(" (ResNet model)"),zze=l(),km=a("li"),Zee=a("strong"),Qze=o("retribert"),Wze=o(" \u2014 "),Mk=a("a"),Hze=o("RetriBertConfig"),Uze=o(" (RetriBERT model)"),Jze=l(),Sm=a("li"),eoe=a("strong"),Yze=o("roberta"),Kze=o(" \u2014 "),Ek=a("a"),Zze=o("RobertaConfig"),eQe=o(" (RoBERTa model)"),oQe=l(),Rm=a("li"),ooe=a("strong"),rQe=o("roformer"),tQe=o(" \u2014 "),Ck=a("a"),aQe=o("RoFormerConfig"),nQe=o(" (RoFormer model)"),sQe=l(),Bm=a("li"),roe=a("strong"),lQe=o("segformer"),iQe=o(" \u2014 "),wk=a("a"),dQe=o("SegformerConfig"),cQe=o(" (SegFormer model)"),fQe=l(),Pm=a("li"),toe=a("strong"),mQe=o("sew"),gQe=o(" \u2014 "),Ak=a("a"),hQe=o("SEWConfig"),pQe=o(" (SEW model)"),uQe=l(),Im=a("li"),aoe=a("strong"),_Qe=o("sew-d"),bQe=o(" \u2014 "),yk=a("a"),vQe=o("SEWDConfig"),FQe=o(" (SEW-D model)"),TQe=l(),qm=a("li"),noe=a("strong"),MQe=o("speech-encoder-decoder"),EQe=o(" \u2014 "),Lk=a("a"),CQe=o("SpeechEncoderDecoderConfig"),wQe=o(" (Speech Encoder decoder model)"),AQe=l(),Nm=a("li"),soe=a("strong"),yQe=o("speech_to_text"),LQe=o(" \u2014 "),xk=a("a"),xQe=o("Speech2TextConfig"),$Qe=o(" (Speech2Text model)"),kQe=l(),jm=a("li"),loe=a("strong"),SQe=o("speech_to_text_2"),RQe=o(" \u2014 "),$k=a("a"),BQe=o("Speech2Text2Config"),PQe=o(" (Speech2Text2 model)"),IQe=l(),Dm=a("li"),ioe=a("strong"),qQe=o("splinter"),NQe=o(" \u2014 "),kk=a("a"),jQe=o("SplinterConfig"),DQe=o(" (Splinter model)"),GQe=l(),Gm=a("li"),doe=a("strong"),OQe=o("squeezebert"),VQe=o(" \u2014 "),Sk=a("a"),XQe=o("SqueezeBertConfig"),zQe=o(" (SqueezeBERT model)"),QQe=l(),Om=a("li"),coe=a("strong"),WQe=o("swin"),HQe=o(" \u2014 "),Rk=a("a"),UQe=o("SwinConfig"),JQe=o(" (Swin model)"),YQe=l(),Vm=a("li"),foe=a("strong"),KQe=o("t5"),ZQe=o(" \u2014 "),Bk=a("a"),eWe=o("T5Config"),oWe=o(" (T5 model)"),rWe=l(),Xm=a("li"),moe=a("strong"),tWe=o("tapas"),aWe=o(" \u2014 "),Pk=a("a"),nWe=o("TapasConfig"),sWe=o(" (TAPAS model)"),lWe=l(),zm=a("li"),goe=a("strong"),iWe=o("tapex"),dWe=o(" \u2014 "),Ik=a("a"),cWe=o("BartConfig"),fWe=o(" (TAPEX model)"),mWe=l(),Qm=a("li"),hoe=a("strong"),gWe=o("transfo-xl"),hWe=o(" \u2014 "),qk=a("a"),pWe=o("TransfoXLConfig"),uWe=o(" (Transformer-XL model)"),_We=l(),Wm=a("li"),poe=a("strong"),bWe=o("trocr"),vWe=o(" \u2014 "),Nk=a("a"),FWe=o("TrOCRConfig"),TWe=o(" (TrOCR model)"),MWe=l(),Hm=a("li"),uoe=a("strong"),EWe=o("unispeech"),CWe=o(" \u2014 "),jk=a("a"),wWe=o("UniSpeechConfig"),AWe=o(" (UniSpeech model)"),yWe=l(),Um=a("li"),_oe=a("strong"),LWe=o("unispeech-sat"),xWe=o(" \u2014 "),Dk=a("a"),$We=o("UniSpeechSatConfig"),kWe=o(" (UniSpeechSat model)"),SWe=l(),Jm=a("li"),boe=a("strong"),RWe=o("van"),BWe=o(" \u2014 "),Gk=a("a"),PWe=o("VanConfig"),IWe=o(" (VAN model)"),qWe=l(),Ym=a("li"),voe=a("strong"),NWe=o("vilt"),jWe=o(" \u2014 "),Ok=a("a"),DWe=o("ViltConfig"),GWe=o(" (ViLT model)"),OWe=l(),Km=a("li"),Foe=a("strong"),VWe=o("vision-encoder-decoder"),XWe=o(" \u2014 "),Vk=a("a"),zWe=o("VisionEncoderDecoderConfig"),QWe=o(" (Vision Encoder decoder model)"),WWe=l(),Zm=a("li"),Toe=a("strong"),HWe=o("vision-text-dual-encoder"),UWe=o(" \u2014 "),Xk=a("a"),JWe=o("VisionTextDualEncoderConfig"),YWe=o(" (VisionTextDualEncoder model)"),KWe=l(),eg=a("li"),Moe=a("strong"),ZWe=o("visual_bert"),eHe=o(" \u2014 "),zk=a("a"),oHe=o("VisualBertConfig"),rHe=o(" (VisualBert model)"),tHe=l(),og=a("li"),Eoe=a("strong"),aHe=o("vit"),nHe=o(" \u2014 "),Qk=a("a"),sHe=o("ViTConfig"),lHe=o(" (ViT model)"),iHe=l(),rg=a("li"),Coe=a("strong"),dHe=o("vit_mae"),cHe=o(" \u2014 "),Wk=a("a"),fHe=o("ViTMAEConfig"),mHe=o(" (ViTMAE model)"),gHe=l(),tg=a("li"),woe=a("strong"),hHe=o("wav2vec2"),pHe=o(" \u2014 "),Hk=a("a"),uHe=o("Wav2Vec2Config"),_He=o(" (Wav2Vec2 model)"),bHe=l(),ag=a("li"),Aoe=a("strong"),vHe=o("wavlm"),FHe=o(" \u2014 "),Uk=a("a"),THe=o("WavLMConfig"),MHe=o(" (WavLM model)"),EHe=l(),ng=a("li"),yoe=a("strong"),CHe=o("xglm"),wHe=o(" \u2014 "),Jk=a("a"),AHe=o("XGLMConfig"),yHe=o(" (XGLM model)"),LHe=l(),sg=a("li"),Loe=a("strong"),xHe=o("xlm"),$He=o(" \u2014 "),Yk=a("a"),kHe=o("XLMConfig"),SHe=o(" (XLM model)"),RHe=l(),lg=a("li"),xoe=a("strong"),BHe=o("xlm-prophetnet"),PHe=o(" \u2014 "),Kk=a("a"),IHe=o("XLMProphetNetConfig"),qHe=o(" (XLMProphetNet model)"),NHe=l(),ig=a("li"),$oe=a("strong"),jHe=o("xlm-roberta"),DHe=o(" \u2014 "),Zk=a("a"),GHe=o("XLMRobertaConfig"),OHe=o(" (XLM-RoBERTa model)"),VHe=l(),dg=a("li"),koe=a("strong"),XHe=o("xlm-roberta-xl"),zHe=o(" \u2014 "),eS=a("a"),QHe=o("XLMRobertaXLConfig"),WHe=o(" (XLM-RoBERTa-XL model)"),HHe=l(),cg=a("li"),Soe=a("strong"),UHe=o("xlnet"),JHe=o(" \u2014 "),oS=a("a"),YHe=o("XLNetConfig"),KHe=o(" (XLNet model)"),ZHe=l(),fg=a("li"),Roe=a("strong"),eUe=o("yolos"),oUe=o(" \u2014 "),rS=a("a"),rUe=o("YolosConfig"),tUe=o(" (YOLOS model)"),aUe=l(),mg=a("li"),Boe=a("strong"),nUe=o("yoso"),sUe=o(" \u2014 "),tS=a("a"),lUe=o("YosoConfig"),iUe=o(" (YOSO model)"),dUe=l(),F(gg.$$.fragment),cUe=l(),hg=a("div"),F(zw.$$.fragment),fUe=l(),Poe=a("p"),mUe=o("Register a new configuration for this class."),oPe=l(),_i=a("h2"),pg=a("a"),Ioe=a("span"),F(Qw.$$.fragment),gUe=l(),qoe=a("span"),hUe=o("AutoTokenizer"),rPe=l(),wo=a("div"),F(Ww.$$.fragment),pUe=l(),Hw=a("p"),uUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aS=a("a"),_Ue=o("AutoTokenizer.from_pretrained()"),bUe=o(" class method."),vUe=l(),Uw=a("p"),FUe=o("This class cannot be instantiated directly using "),Noe=a("code"),TUe=o("__init__()"),MUe=o(" (throws an error)."),EUe=l(),Cr=a("div"),F(Jw.$$.fragment),CUe=l(),joe=a("p"),wUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),AUe=l(),Ca=a("p"),yUe=o("The tokenizer class to instantiate is selected based on the "),Doe=a("code"),LUe=o("model_type"),xUe=o(` property of the config object (either
passed as an argument or loaded from `),Goe=a("code"),$Ue=o("pretrained_model_name_or_path"),kUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ooe=a("code"),SUe=o("pretrained_model_name_or_path"),RUe=o(":"),BUe=l(),k=a("ul"),kn=a("li"),Voe=a("strong"),PUe=o("albert"),IUe=o(" \u2014 "),nS=a("a"),qUe=o("AlbertTokenizer"),NUe=o(" or "),sS=a("a"),jUe=o("AlbertTokenizerFast"),DUe=o(" (ALBERT model)"),GUe=l(),Sn=a("li"),Xoe=a("strong"),OUe=o("bart"),VUe=o(" \u2014 "),lS=a("a"),XUe=o("BartTokenizer"),zUe=o(" or "),iS=a("a"),QUe=o("BartTokenizerFast"),WUe=o(" (BART model)"),HUe=l(),Rn=a("li"),zoe=a("strong"),UUe=o("barthez"),JUe=o(" \u2014 "),dS=a("a"),YUe=o("BarthezTokenizer"),KUe=o(" or "),cS=a("a"),ZUe=o("BarthezTokenizerFast"),eJe=o(" (BARThez model)"),oJe=l(),ug=a("li"),Qoe=a("strong"),rJe=o("bartpho"),tJe=o(" \u2014 "),fS=a("a"),aJe=o("BartphoTokenizer"),nJe=o(" (BARTpho model)"),sJe=l(),Bn=a("li"),Woe=a("strong"),lJe=o("bert"),iJe=o(" \u2014 "),mS=a("a"),dJe=o("BertTokenizer"),cJe=o(" or "),gS=a("a"),fJe=o("BertTokenizerFast"),mJe=o(" (BERT model)"),gJe=l(),_g=a("li"),Hoe=a("strong"),hJe=o("bert-generation"),pJe=o(" \u2014 "),hS=a("a"),uJe=o("BertGenerationTokenizer"),_Je=o(" (Bert Generation model)"),bJe=l(),bg=a("li"),Uoe=a("strong"),vJe=o("bert-japanese"),FJe=o(" \u2014 "),pS=a("a"),TJe=o("BertJapaneseTokenizer"),MJe=o(" (BertJapanese model)"),EJe=l(),vg=a("li"),Joe=a("strong"),CJe=o("bertweet"),wJe=o(" \u2014 "),uS=a("a"),AJe=o("BertweetTokenizer"),yJe=o(" (Bertweet model)"),LJe=l(),Pn=a("li"),Yoe=a("strong"),xJe=o("big_bird"),$Je=o(" \u2014 "),_S=a("a"),kJe=o("BigBirdTokenizer"),SJe=o(" or "),bS=a("a"),RJe=o("BigBirdTokenizerFast"),BJe=o(" (BigBird model)"),PJe=l(),In=a("li"),Koe=a("strong"),IJe=o("bigbird_pegasus"),qJe=o(" \u2014 "),vS=a("a"),NJe=o("PegasusTokenizer"),jJe=o(" or "),FS=a("a"),DJe=o("PegasusTokenizerFast"),GJe=o(" (BigBirdPegasus model)"),OJe=l(),qn=a("li"),Zoe=a("strong"),VJe=o("blenderbot"),XJe=o(" \u2014 "),TS=a("a"),zJe=o("BlenderbotTokenizer"),QJe=o(" or "),MS=a("a"),WJe=o("BlenderbotTokenizerFast"),HJe=o(" (Blenderbot model)"),UJe=l(),Fg=a("li"),ere=a("strong"),JJe=o("blenderbot-small"),YJe=o(" \u2014 "),ES=a("a"),KJe=o("BlenderbotSmallTokenizer"),ZJe=o(" (BlenderbotSmall model)"),eYe=l(),Tg=a("li"),ore=a("strong"),oYe=o("byt5"),rYe=o(" \u2014 "),CS=a("a"),tYe=o("ByT5Tokenizer"),aYe=o(" (ByT5 model)"),nYe=l(),Nn=a("li"),rre=a("strong"),sYe=o("camembert"),lYe=o(" \u2014 "),wS=a("a"),iYe=o("CamembertTokenizer"),dYe=o(" or "),AS=a("a"),cYe=o("CamembertTokenizerFast"),fYe=o(" (CamemBERT model)"),mYe=l(),Mg=a("li"),tre=a("strong"),gYe=o("canine"),hYe=o(" \u2014 "),yS=a("a"),pYe=o("CanineTokenizer"),uYe=o(" (Canine model)"),_Ye=l(),jn=a("li"),are=a("strong"),bYe=o("clip"),vYe=o(" \u2014 "),LS=a("a"),FYe=o("CLIPTokenizer"),TYe=o(" or "),xS=a("a"),MYe=o("CLIPTokenizerFast"),EYe=o(" (CLIP model)"),CYe=l(),Dn=a("li"),nre=a("strong"),wYe=o("convbert"),AYe=o(" \u2014 "),$S=a("a"),yYe=o("ConvBertTokenizer"),LYe=o(" or "),kS=a("a"),xYe=o("ConvBertTokenizerFast"),$Ye=o(" (ConvBERT model)"),kYe=l(),Gn=a("li"),sre=a("strong"),SYe=o("cpm"),RYe=o(" \u2014 "),SS=a("a"),BYe=o("CpmTokenizer"),PYe=o(" or "),RS=a("a"),IYe=o("CpmTokenizerFast"),qYe=o(" (CPM model)"),NYe=l(),Eg=a("li"),lre=a("strong"),jYe=o("ctrl"),DYe=o(" \u2014 "),BS=a("a"),GYe=o("CTRLTokenizer"),OYe=o(" (CTRL model)"),VYe=l(),On=a("li"),ire=a("strong"),XYe=o("data2vec-text"),zYe=o(" \u2014 "),PS=a("a"),QYe=o("RobertaTokenizer"),WYe=o(" or "),IS=a("a"),HYe=o("RobertaTokenizerFast"),UYe=o(" (Data2VecText model)"),JYe=l(),Vn=a("li"),dre=a("strong"),YYe=o("deberta"),KYe=o(" \u2014 "),qS=a("a"),ZYe=o("DebertaTokenizer"),eKe=o(" or "),NS=a("a"),oKe=o("DebertaTokenizerFast"),rKe=o(" (DeBERTa model)"),tKe=l(),Xn=a("li"),cre=a("strong"),aKe=o("deberta-v2"),nKe=o(" \u2014 "),jS=a("a"),sKe=o("DebertaV2Tokenizer"),lKe=o(" or "),DS=a("a"),iKe=o("DebertaV2TokenizerFast"),dKe=o(" (DeBERTa-v2 model)"),cKe=l(),zn=a("li"),fre=a("strong"),fKe=o("distilbert"),mKe=o(" \u2014 "),GS=a("a"),gKe=o("DistilBertTokenizer"),hKe=o(" or "),OS=a("a"),pKe=o("DistilBertTokenizerFast"),uKe=o(" (DistilBERT model)"),_Ke=l(),Qn=a("li"),mre=a("strong"),bKe=o("dpr"),vKe=o(" \u2014 "),VS=a("a"),FKe=o("DPRQuestionEncoderTokenizer"),TKe=o(" or "),XS=a("a"),MKe=o("DPRQuestionEncoderTokenizerFast"),EKe=o(" (DPR model)"),CKe=l(),Wn=a("li"),gre=a("strong"),wKe=o("electra"),AKe=o(" \u2014 "),zS=a("a"),yKe=o("ElectraTokenizer"),LKe=o(" or "),QS=a("a"),xKe=o("ElectraTokenizerFast"),$Ke=o(" (ELECTRA model)"),kKe=l(),Cg=a("li"),hre=a("strong"),SKe=o("flaubert"),RKe=o(" \u2014 "),WS=a("a"),BKe=o("FlaubertTokenizer"),PKe=o(" (FlauBERT model)"),IKe=l(),Hn=a("li"),pre=a("strong"),qKe=o("fnet"),NKe=o(" \u2014 "),HS=a("a"),jKe=o("FNetTokenizer"),DKe=o(" or "),US=a("a"),GKe=o("FNetTokenizerFast"),OKe=o(" (FNet model)"),VKe=l(),wg=a("li"),ure=a("strong"),XKe=o("fsmt"),zKe=o(" \u2014 "),JS=a("a"),QKe=o("FSMTTokenizer"),WKe=o(" (FairSeq Machine-Translation model)"),HKe=l(),Un=a("li"),_re=a("strong"),UKe=o("funnel"),JKe=o(" \u2014 "),YS=a("a"),YKe=o("FunnelTokenizer"),KKe=o(" or "),KS=a("a"),ZKe=o("FunnelTokenizerFast"),eZe=o(" (Funnel Transformer model)"),oZe=l(),Jn=a("li"),bre=a("strong"),rZe=o("gpt2"),tZe=o(" \u2014 "),ZS=a("a"),aZe=o("GPT2Tokenizer"),nZe=o(" or "),eR=a("a"),sZe=o("GPT2TokenizerFast"),lZe=o(" (OpenAI GPT-2 model)"),iZe=l(),Yn=a("li"),vre=a("strong"),dZe=o("gpt_neo"),cZe=o(" \u2014 "),oR=a("a"),fZe=o("GPT2Tokenizer"),mZe=o(" or "),rR=a("a"),gZe=o("GPT2TokenizerFast"),hZe=o(" (GPT Neo model)"),pZe=l(),Kn=a("li"),Fre=a("strong"),uZe=o("gptj"),_Ze=o(" \u2014 "),tR=a("a"),bZe=o("GPT2Tokenizer"),vZe=o(" or "),aR=a("a"),FZe=o("GPT2TokenizerFast"),TZe=o(" (GPT-J model)"),MZe=l(),Zn=a("li"),Tre=a("strong"),EZe=o("herbert"),CZe=o(" \u2014 "),nR=a("a"),wZe=o("HerbertTokenizer"),AZe=o(" or "),sR=a("a"),yZe=o("HerbertTokenizerFast"),LZe=o(" (HerBERT model)"),xZe=l(),Ag=a("li"),Mre=a("strong"),$Ze=o("hubert"),kZe=o(" \u2014 "),lR=a("a"),SZe=o("Wav2Vec2CTCTokenizer"),RZe=o(" (Hubert model)"),BZe=l(),es=a("li"),Ere=a("strong"),PZe=o("ibert"),IZe=o(" \u2014 "),iR=a("a"),qZe=o("RobertaTokenizer"),NZe=o(" or "),dR=a("a"),jZe=o("RobertaTokenizerFast"),DZe=o(" (I-BERT model)"),GZe=l(),os=a("li"),Cre=a("strong"),OZe=o("layoutlm"),VZe=o(" \u2014 "),cR=a("a"),XZe=o("LayoutLMTokenizer"),zZe=o(" or "),fR=a("a"),QZe=o("LayoutLMTokenizerFast"),WZe=o(" (LayoutLM model)"),HZe=l(),rs=a("li"),wre=a("strong"),UZe=o("layoutlmv2"),JZe=o(" \u2014 "),mR=a("a"),YZe=o("LayoutLMv2Tokenizer"),KZe=o(" or "),gR=a("a"),ZZe=o("LayoutLMv2TokenizerFast"),eeo=o(" (LayoutLMv2 model)"),oeo=l(),ts=a("li"),Are=a("strong"),reo=o("layoutxlm"),teo=o(" \u2014 "),hR=a("a"),aeo=o("LayoutXLMTokenizer"),neo=o(" or "),pR=a("a"),seo=o("LayoutXLMTokenizerFast"),leo=o(" (LayoutXLM model)"),ieo=l(),as=a("li"),yre=a("strong"),deo=o("led"),ceo=o(" \u2014 "),uR=a("a"),feo=o("LEDTokenizer"),meo=o(" or "),_R=a("a"),geo=o("LEDTokenizerFast"),heo=o(" (LED model)"),peo=l(),ns=a("li"),Lre=a("strong"),ueo=o("longformer"),_eo=o(" \u2014 "),bR=a("a"),beo=o("LongformerTokenizer"),veo=o(" or "),vR=a("a"),Feo=o("LongformerTokenizerFast"),Teo=o(" (Longformer model)"),Meo=l(),yg=a("li"),xre=a("strong"),Eeo=o("luke"),Ceo=o(" \u2014 "),FR=a("a"),weo=o("LukeTokenizer"),Aeo=o(" (LUKE model)"),yeo=l(),ss=a("li"),$re=a("strong"),Leo=o("lxmert"),xeo=o(" \u2014 "),TR=a("a"),$eo=o("LxmertTokenizer"),keo=o(" or "),MR=a("a"),Seo=o("LxmertTokenizerFast"),Reo=o(" (LXMERT model)"),Beo=l(),Lg=a("li"),kre=a("strong"),Peo=o("m2m_100"),Ieo=o(" \u2014 "),ER=a("a"),qeo=o("M2M100Tokenizer"),Neo=o(" (M2M100 model)"),jeo=l(),xg=a("li"),Sre=a("strong"),Deo=o("marian"),Geo=o(" \u2014 "),CR=a("a"),Oeo=o("MarianTokenizer"),Veo=o(" (Marian model)"),Xeo=l(),ls=a("li"),Rre=a("strong"),zeo=o("mbart"),Qeo=o(" \u2014 "),wR=a("a"),Weo=o("MBartTokenizer"),Heo=o(" or "),AR=a("a"),Ueo=o("MBartTokenizerFast"),Jeo=o(" (mBART model)"),Yeo=l(),is=a("li"),Bre=a("strong"),Keo=o("mbart50"),Zeo=o(" \u2014 "),yR=a("a"),eoo=o("MBart50Tokenizer"),ooo=o(" or "),LR=a("a"),roo=o("MBart50TokenizerFast"),too=o(" (mBART-50 model)"),aoo=l(),ds=a("li"),Pre=a("strong"),noo=o("megatron-bert"),soo=o(" \u2014 "),xR=a("a"),loo=o("BertTokenizer"),ioo=o(" or "),$R=a("a"),doo=o("BertTokenizerFast"),coo=o(" (MegatronBert model)"),foo=l(),$g=a("li"),Ire=a("strong"),moo=o("mluke"),goo=o(" \u2014 "),kR=a("a"),hoo=o("MLukeTokenizer"),poo=o(" (mLUKE model)"),uoo=l(),cs=a("li"),qre=a("strong"),_oo=o("mobilebert"),boo=o(" \u2014 "),SR=a("a"),voo=o("MobileBertTokenizer"),Foo=o(" or "),RR=a("a"),Too=o("MobileBertTokenizerFast"),Moo=o(" (MobileBERT model)"),Eoo=l(),fs=a("li"),Nre=a("strong"),Coo=o("mpnet"),woo=o(" \u2014 "),BR=a("a"),Aoo=o("MPNetTokenizer"),yoo=o(" or "),PR=a("a"),Loo=o("MPNetTokenizerFast"),xoo=o(" (MPNet model)"),$oo=l(),ms=a("li"),jre=a("strong"),koo=o("mt5"),Soo=o(" \u2014 "),IR=a("a"),Roo=o("MT5Tokenizer"),Boo=o(" or "),qR=a("a"),Poo=o("MT5TokenizerFast"),Ioo=o(" (mT5 model)"),qoo=l(),gs=a("li"),Dre=a("strong"),Noo=o("nystromformer"),joo=o(" \u2014 "),NR=a("a"),Doo=o("AlbertTokenizer"),Goo=o(" or "),jR=a("a"),Ooo=o("AlbertTokenizerFast"),Voo=o(" (Nystromformer model)"),Xoo=l(),hs=a("li"),Gre=a("strong"),zoo=o("openai-gpt"),Qoo=o(" \u2014 "),DR=a("a"),Woo=o("OpenAIGPTTokenizer"),Hoo=o(" or "),GR=a("a"),Uoo=o("OpenAIGPTTokenizerFast"),Joo=o(" (OpenAI GPT model)"),Yoo=l(),ps=a("li"),Ore=a("strong"),Koo=o("pegasus"),Zoo=o(" \u2014 "),OR=a("a"),ero=o("PegasusTokenizer"),oro=o(" or "),VR=a("a"),rro=o("PegasusTokenizerFast"),tro=o(" (Pegasus model)"),aro=l(),kg=a("li"),Vre=a("strong"),nro=o("perceiver"),sro=o(" \u2014 "),XR=a("a"),lro=o("PerceiverTokenizer"),iro=o(" (Perceiver model)"),dro=l(),Sg=a("li"),Xre=a("strong"),cro=o("phobert"),fro=o(" \u2014 "),zR=a("a"),mro=o("PhobertTokenizer"),gro=o(" (PhoBERT model)"),hro=l(),Rg=a("li"),zre=a("strong"),pro=o("plbart"),uro=o(" \u2014 "),QR=a("a"),_ro=o("PLBartTokenizer"),bro=o(" (PLBart model)"),vro=l(),Bg=a("li"),Qre=a("strong"),Fro=o("prophetnet"),Tro=o(" \u2014 "),WR=a("a"),Mro=o("ProphetNetTokenizer"),Ero=o(" (ProphetNet model)"),Cro=l(),us=a("li"),Wre=a("strong"),wro=o("qdqbert"),Aro=o(" \u2014 "),HR=a("a"),yro=o("BertTokenizer"),Lro=o(" or "),UR=a("a"),xro=o("BertTokenizerFast"),$ro=o(" (QDQBert model)"),kro=l(),Pg=a("li"),Hre=a("strong"),Sro=o("rag"),Rro=o(" \u2014 "),JR=a("a"),Bro=o("RagTokenizer"),Pro=o(" (RAG model)"),Iro=l(),_s=a("li"),Ure=a("strong"),qro=o("realm"),Nro=o(" \u2014 "),YR=a("a"),jro=o("RealmTokenizer"),Dro=o(" or "),KR=a("a"),Gro=o("RealmTokenizerFast"),Oro=o(" (Realm model)"),Vro=l(),bs=a("li"),Jre=a("strong"),Xro=o("reformer"),zro=o(" \u2014 "),ZR=a("a"),Qro=o("ReformerTokenizer"),Wro=o(" or "),eB=a("a"),Hro=o("ReformerTokenizerFast"),Uro=o(" (Reformer model)"),Jro=l(),vs=a("li"),Yre=a("strong"),Yro=o("rembert"),Kro=o(" \u2014 "),oB=a("a"),Zro=o("RemBertTokenizer"),eto=o(" or "),rB=a("a"),oto=o("RemBertTokenizerFast"),rto=o(" (RemBERT model)"),tto=l(),Fs=a("li"),Kre=a("strong"),ato=o("retribert"),nto=o(" \u2014 "),tB=a("a"),sto=o("RetriBertTokenizer"),lto=o(" or "),aB=a("a"),ito=o("RetriBertTokenizerFast"),dto=o(" (RetriBERT model)"),cto=l(),Ts=a("li"),Zre=a("strong"),fto=o("roberta"),mto=o(" \u2014 "),nB=a("a"),gto=o("RobertaTokenizer"),hto=o(" or "),sB=a("a"),pto=o("RobertaTokenizerFast"),uto=o(" (RoBERTa model)"),_to=l(),Ms=a("li"),ete=a("strong"),bto=o("roformer"),vto=o(" \u2014 "),lB=a("a"),Fto=o("RoFormerTokenizer"),Tto=o(" or "),iB=a("a"),Mto=o("RoFormerTokenizerFast"),Eto=o(" (RoFormer model)"),Cto=l(),Ig=a("li"),ote=a("strong"),wto=o("speech_to_text"),Ato=o(" \u2014 "),dB=a("a"),yto=o("Speech2TextTokenizer"),Lto=o(" (Speech2Text model)"),xto=l(),qg=a("li"),rte=a("strong"),$to=o("speech_to_text_2"),kto=o(" \u2014 "),cB=a("a"),Sto=o("Speech2Text2Tokenizer"),Rto=o(" (Speech2Text2 model)"),Bto=l(),Es=a("li"),tte=a("strong"),Pto=o("splinter"),Ito=o(" \u2014 "),fB=a("a"),qto=o("SplinterTokenizer"),Nto=o(" or "),mB=a("a"),jto=o("SplinterTokenizerFast"),Dto=o(" (Splinter model)"),Gto=l(),Cs=a("li"),ate=a("strong"),Oto=o("squeezebert"),Vto=o(" \u2014 "),gB=a("a"),Xto=o("SqueezeBertTokenizer"),zto=o(" or "),hB=a("a"),Qto=o("SqueezeBertTokenizerFast"),Wto=o(" (SqueezeBERT model)"),Hto=l(),ws=a("li"),nte=a("strong"),Uto=o("t5"),Jto=o(" \u2014 "),pB=a("a"),Yto=o("T5Tokenizer"),Kto=o(" or "),uB=a("a"),Zto=o("T5TokenizerFast"),eao=o(" (T5 model)"),oao=l(),Ng=a("li"),ste=a("strong"),rao=o("tapas"),tao=o(" \u2014 "),_B=a("a"),aao=o("TapasTokenizer"),nao=o(" (TAPAS model)"),sao=l(),jg=a("li"),lte=a("strong"),lao=o("tapex"),iao=o(" \u2014 "),bB=a("a"),dao=o("TapexTokenizer"),cao=o(" (TAPEX model)"),fao=l(),Dg=a("li"),ite=a("strong"),mao=o("transfo-xl"),gao=o(" \u2014 "),vB=a("a"),hao=o("TransfoXLTokenizer"),pao=o(" (Transformer-XL model)"),uao=l(),As=a("li"),dte=a("strong"),_ao=o("visual_bert"),bao=o(" \u2014 "),FB=a("a"),vao=o("BertTokenizer"),Fao=o(" or "),TB=a("a"),Tao=o("BertTokenizerFast"),Mao=o(" (VisualBert model)"),Eao=l(),Gg=a("li"),cte=a("strong"),Cao=o("wav2vec2"),wao=o(" \u2014 "),MB=a("a"),Aao=o("Wav2Vec2CTCTokenizer"),yao=o(" (Wav2Vec2 model)"),Lao=l(),Og=a("li"),fte=a("strong"),xao=o("wav2vec2_phoneme"),$ao=o(" \u2014 "),EB=a("a"),kao=o("Wav2Vec2PhonemeCTCTokenizer"),Sao=o(" (Wav2Vec2Phoneme model)"),Rao=l(),ys=a("li"),mte=a("strong"),Bao=o("xglm"),Pao=o(" \u2014 "),CB=a("a"),Iao=o("XGLMTokenizer"),qao=o(" or "),wB=a("a"),Nao=o("XGLMTokenizerFast"),jao=o(" (XGLM model)"),Dao=l(),Vg=a("li"),gte=a("strong"),Gao=o("xlm"),Oao=o(" \u2014 "),AB=a("a"),Vao=o("XLMTokenizer"),Xao=o(" (XLM model)"),zao=l(),Xg=a("li"),hte=a("strong"),Qao=o("xlm-prophetnet"),Wao=o(" \u2014 "),yB=a("a"),Hao=o("XLMProphetNetTokenizer"),Uao=o(" (XLMProphetNet model)"),Jao=l(),Ls=a("li"),pte=a("strong"),Yao=o("xlm-roberta"),Kao=o(" \u2014 "),LB=a("a"),Zao=o("XLMRobertaTokenizer"),eno=o(" or "),xB=a("a"),ono=o("XLMRobertaTokenizerFast"),rno=o(" (XLM-RoBERTa model)"),tno=l(),xs=a("li"),ute=a("strong"),ano=o("xlm-roberta-xl"),nno=o(" \u2014 "),$B=a("a"),sno=o("RobertaTokenizer"),lno=o(" or "),kB=a("a"),ino=o("RobertaTokenizerFast"),dno=o(" (XLM-RoBERTa-XL model)"),cno=l(),$s=a("li"),_te=a("strong"),fno=o("xlnet"),mno=o(" \u2014 "),SB=a("a"),gno=o("XLNetTokenizer"),hno=o(" or "),RB=a("a"),pno=o("XLNetTokenizerFast"),uno=o(" (XLNet model)"),_no=l(),ks=a("li"),bte=a("strong"),bno=o("yoso"),vno=o(" \u2014 "),BB=a("a"),Fno=o("AlbertTokenizer"),Tno=o(" or "),PB=a("a"),Mno=o("AlbertTokenizerFast"),Eno=o(" (YOSO model)"),Cno=l(),F(zg.$$.fragment),wno=l(),Qg=a("div"),F(Yw.$$.fragment),Ano=l(),vte=a("p"),yno=o("Register a new tokenizer in this mapping."),tPe=l(),bi=a("h2"),Wg=a("a"),Fte=a("span"),F(Kw.$$.fragment),Lno=l(),Tte=a("span"),xno=o("AutoFeatureExtractor"),aPe=l(),Ao=a("div"),F(Zw.$$.fragment),$no=l(),eA=a("p"),kno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=a("a"),Sno=o("AutoFeatureExtractor.from_pretrained()"),Rno=o(" class method."),Bno=l(),oA=a("p"),Pno=o("This class cannot be instantiated directly using "),Mte=a("code"),Ino=o("__init__()"),qno=o(" (throws an error)."),Nno=l(),Qe=a("div"),F(rA.$$.fragment),jno=l(),Ete=a("p"),Dno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Gno=l(),wa=a("p"),Ono=o("The feature extractor class to instantiate is selected based on the "),Cte=a("code"),Vno=o("model_type"),Xno=o(` property of the config object
(either passed as an argument or loaded from `),wte=a("code"),zno=o("pretrained_model_name_or_path"),Qno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ate=a("code"),Wno=o("pretrained_model_name_or_path"),Hno=o(":"),Uno=l(),te=a("ul"),Hg=a("li"),yte=a("strong"),Jno=o("beit"),Yno=o(" \u2014 "),qB=a("a"),Kno=o("BeitFeatureExtractor"),Zno=o(" (BEiT model)"),eso=l(),Ug=a("li"),Lte=a("strong"),oso=o("clip"),rso=o(" \u2014 "),NB=a("a"),tso=o("CLIPFeatureExtractor"),aso=o(" (CLIP model)"),nso=l(),Jg=a("li"),xte=a("strong"),sso=o("convnext"),lso=o(" \u2014 "),jB=a("a"),iso=o("ConvNextFeatureExtractor"),dso=o(" (ConvNext model)"),cso=l(),Yg=a("li"),$te=a("strong"),fso=o("data2vec-audio"),mso=o(" \u2014 "),DB=a("a"),gso=o("Wav2Vec2FeatureExtractor"),hso=o(" (Data2VecAudio model)"),pso=l(),Kg=a("li"),kte=a("strong"),uso=o("data2vec-vision"),_so=o(" \u2014 "),GB=a("a"),bso=o("BeitFeatureExtractor"),vso=o(" (Data2VecVision model)"),Fso=l(),Zg=a("li"),Ste=a("strong"),Tso=o("deit"),Mso=o(" \u2014 "),OB=a("a"),Eso=o("DeiTFeatureExtractor"),Cso=o(" (DeiT model)"),wso=l(),eh=a("li"),Rte=a("strong"),Aso=o("detr"),yso=o(" \u2014 "),VB=a("a"),Lso=o("DetrFeatureExtractor"),xso=o(" (DETR model)"),$so=l(),oh=a("li"),Bte=a("strong"),kso=o("dpt"),Sso=o(" \u2014 "),XB=a("a"),Rso=o("DPTFeatureExtractor"),Bso=o(" (DPT model)"),Pso=l(),rh=a("li"),Pte=a("strong"),Iso=o("glpn"),qso=o(" \u2014 "),zB=a("a"),Nso=o("GLPNFeatureExtractor"),jso=o(" (GLPN model)"),Dso=l(),th=a("li"),Ite=a("strong"),Gso=o("hubert"),Oso=o(" \u2014 "),QB=a("a"),Vso=o("Wav2Vec2FeatureExtractor"),Xso=o(" (Hubert model)"),zso=l(),ah=a("li"),qte=a("strong"),Qso=o("layoutlmv2"),Wso=o(" \u2014 "),WB=a("a"),Hso=o("LayoutLMv2FeatureExtractor"),Uso=o(" (LayoutLMv2 model)"),Jso=l(),nh=a("li"),Nte=a("strong"),Yso=o("maskformer"),Kso=o(" \u2014 "),HB=a("a"),Zso=o("MaskFormerFeatureExtractor"),elo=o(" (MaskFormer model)"),olo=l(),sh=a("li"),jte=a("strong"),rlo=o("perceiver"),tlo=o(" \u2014 "),UB=a("a"),alo=o("PerceiverFeatureExtractor"),nlo=o(" (Perceiver model)"),slo=l(),lh=a("li"),Dte=a("strong"),llo=o("poolformer"),ilo=o(" \u2014 "),JB=a("a"),dlo=o("PoolFormerFeatureExtractor"),clo=o(" (PoolFormer model)"),flo=l(),ih=a("li"),Gte=a("strong"),mlo=o("regnet"),glo=o(" \u2014 "),YB=a("a"),hlo=o("ConvNextFeatureExtractor"),plo=o(" (RegNet model)"),ulo=l(),dh=a("li"),Ote=a("strong"),_lo=o("resnet"),blo=o(" \u2014 "),KB=a("a"),vlo=o("ConvNextFeatureExtractor"),Flo=o(" (ResNet model)"),Tlo=l(),ch=a("li"),Vte=a("strong"),Mlo=o("segformer"),Elo=o(" \u2014 "),ZB=a("a"),Clo=o("SegformerFeatureExtractor"),wlo=o(" (SegFormer model)"),Alo=l(),fh=a("li"),Xte=a("strong"),ylo=o("speech_to_text"),Llo=o(" \u2014 "),eP=a("a"),xlo=o("Speech2TextFeatureExtractor"),$lo=o(" (Speech2Text model)"),klo=l(),mh=a("li"),zte=a("strong"),Slo=o("swin"),Rlo=o(" \u2014 "),oP=a("a"),Blo=o("ViTFeatureExtractor"),Plo=o(" (Swin model)"),Ilo=l(),gh=a("li"),Qte=a("strong"),qlo=o("van"),Nlo=o(" \u2014 "),rP=a("a"),jlo=o("ConvNextFeatureExtractor"),Dlo=o(" (VAN model)"),Glo=l(),hh=a("li"),Wte=a("strong"),Olo=o("vit"),Vlo=o(" \u2014 "),tP=a("a"),Xlo=o("ViTFeatureExtractor"),zlo=o(" (ViT model)"),Qlo=l(),ph=a("li"),Hte=a("strong"),Wlo=o("vit_mae"),Hlo=o(" \u2014 "),aP=a("a"),Ulo=o("ViTFeatureExtractor"),Jlo=o(" (ViTMAE model)"),Ylo=l(),uh=a("li"),Ute=a("strong"),Klo=o("wav2vec2"),Zlo=o(" \u2014 "),nP=a("a"),eio=o("Wav2Vec2FeatureExtractor"),oio=o(" (Wav2Vec2 model)"),rio=l(),_h=a("li"),Jte=a("strong"),tio=o("yolos"),aio=o(" \u2014 "),sP=a("a"),nio=o("YolosFeatureExtractor"),sio=o(" (YOLOS model)"),lio=l(),F(bh.$$.fragment),iio=l(),F(vh.$$.fragment),dio=l(),Fh=a("div"),F(tA.$$.fragment),cio=l(),Yte=a("p"),fio=o("Register a new feature extractor for this class."),nPe=l(),vi=a("h2"),Th=a("a"),Kte=a("span"),F(aA.$$.fragment),mio=l(),Zte=a("span"),gio=o("AutoProcessor"),sPe=l(),yo=a("div"),F(nA.$$.fragment),hio=l(),sA=a("p"),pio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lP=a("a"),uio=o("AutoProcessor.from_pretrained()"),_io=o(" class method."),bio=l(),lA=a("p"),vio=o("This class cannot be instantiated directly using "),eae=a("code"),Fio=o("__init__()"),Tio=o(" (throws an error)."),Mio=l(),We=a("div"),F(iA.$$.fragment),Eio=l(),oae=a("p"),Cio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wio=l(),Fi=a("p"),Aio=o("The processor class to instantiate is selected based on the "),rae=a("code"),yio=o("model_type"),Lio=o(` property of the config object (either
passed as an argument or loaded from `),tae=a("code"),xio=o("pretrained_model_name_or_path"),$io=o(" if possible):"),kio=l(),be=a("ul"),Mh=a("li"),aae=a("strong"),Sio=o("clip"),Rio=o(" \u2014 "),iP=a("a"),Bio=o("CLIPProcessor"),Pio=o(" (CLIP model)"),Iio=l(),Eh=a("li"),nae=a("strong"),qio=o("layoutlmv2"),Nio=o(" \u2014 "),dP=a("a"),jio=o("LayoutLMv2Processor"),Dio=o(" (LayoutLMv2 model)"),Gio=l(),Ch=a("li"),sae=a("strong"),Oio=o("layoutxlm"),Vio=o(" \u2014 "),cP=a("a"),Xio=o("LayoutXLMProcessor"),zio=o(" (LayoutXLM model)"),Qio=l(),wh=a("li"),lae=a("strong"),Wio=o("sew"),Hio=o(" \u2014 "),fP=a("a"),Uio=o("Wav2Vec2Processor"),Jio=o(" (SEW model)"),Yio=l(),Ah=a("li"),iae=a("strong"),Kio=o("sew-d"),Zio=o(" \u2014 "),mP=a("a"),edo=o("Wav2Vec2Processor"),odo=o(" (SEW-D model)"),rdo=l(),yh=a("li"),dae=a("strong"),tdo=o("speech_to_text"),ado=o(" \u2014 "),gP=a("a"),ndo=o("Speech2TextProcessor"),sdo=o(" (Speech2Text model)"),ldo=l(),Lh=a("li"),cae=a("strong"),ido=o("speech_to_text_2"),ddo=o(" \u2014 "),hP=a("a"),cdo=o("Speech2Text2Processor"),fdo=o(" (Speech2Text2 model)"),mdo=l(),xh=a("li"),fae=a("strong"),gdo=o("trocr"),hdo=o(" \u2014 "),pP=a("a"),pdo=o("TrOCRProcessor"),udo=o(" (TrOCR model)"),_do=l(),$h=a("li"),mae=a("strong"),bdo=o("unispeech"),vdo=o(" \u2014 "),uP=a("a"),Fdo=o("Wav2Vec2Processor"),Tdo=o(" (UniSpeech model)"),Mdo=l(),kh=a("li"),gae=a("strong"),Edo=o("unispeech-sat"),Cdo=o(" \u2014 "),_P=a("a"),wdo=o("Wav2Vec2Processor"),Ado=o(" (UniSpeechSat model)"),ydo=l(),Sh=a("li"),hae=a("strong"),Ldo=o("vilt"),xdo=o(" \u2014 "),bP=a("a"),$do=o("ViltProcessor"),kdo=o(" (ViLT model)"),Sdo=l(),Rh=a("li"),pae=a("strong"),Rdo=o("vision-text-dual-encoder"),Bdo=o(" \u2014 "),vP=a("a"),Pdo=o("VisionTextDualEncoderProcessor"),Ido=o(" (VisionTextDualEncoder model)"),qdo=l(),Bh=a("li"),uae=a("strong"),Ndo=o("wav2vec2"),jdo=o(" \u2014 "),FP=a("a"),Ddo=o("Wav2Vec2Processor"),Gdo=o(" (Wav2Vec2 model)"),Odo=l(),Ph=a("li"),_ae=a("strong"),Vdo=o("wavlm"),Xdo=o(" \u2014 "),TP=a("a"),zdo=o("Wav2Vec2Processor"),Qdo=o(" (WavLM model)"),Wdo=l(),F(Ih.$$.fragment),Hdo=l(),F(qh.$$.fragment),Udo=l(),Nh=a("div"),F(dA.$$.fragment),Jdo=l(),bae=a("p"),Ydo=o("Register a new processor for this class."),lPe=l(),Ti=a("h2"),jh=a("a"),vae=a("span"),F(cA.$$.fragment),Kdo=l(),Fae=a("span"),Zdo=o("AutoModel"),iPe=l(),Lo=a("div"),F(fA.$$.fragment),eco=l(),Mi=a("p"),oco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MP=a("a"),rco=o("from_pretrained()"),tco=o(" class method or the "),EP=a("a"),aco=o("from_config()"),nco=o(` class
method.`),sco=l(),mA=a("p"),lco=o("This class cannot be instantiated directly using "),Tae=a("code"),ico=o("__init__()"),dco=o(" (throws an error)."),cco=l(),ot=a("div"),F(gA.$$.fragment),fco=l(),Mae=a("p"),mco=o("Instantiates one of the base model classes of the library from a configuration."),gco=l(),Ei=a("p"),hco=o(`Note:
Loading a model from its configuration file does `),Eae=a("strong"),pco=o("not"),uco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CP=a("a"),_co=o("from_pretrained()"),bco=o(" to load the model weights."),vco=l(),F(Dh.$$.fragment),Fco=l(),He=a("div"),F(hA.$$.fragment),Tco=l(),Cae=a("p"),Mco=o("Instantiate one of the base model classes of the library from a pretrained model."),Eco=l(),Aa=a("p"),Cco=o("The model class to instantiate is selected based on the "),wae=a("code"),wco=o("model_type"),Aco=o(` property of the config object (either
passed as an argument or loaded from `),Aae=a("code"),yco=o("pretrained_model_name_or_path"),Lco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=a("code"),xco=o("pretrained_model_name_or_path"),$co=o(":"),kco=l(),x=a("ul"),Gh=a("li"),Lae=a("strong"),Sco=o("albert"),Rco=o(" \u2014 "),wP=a("a"),Bco=o("AlbertModel"),Pco=o(" (ALBERT model)"),Ico=l(),Oh=a("li"),xae=a("strong"),qco=o("bart"),Nco=o(" \u2014 "),AP=a("a"),jco=o("BartModel"),Dco=o(" (BART model)"),Gco=l(),Vh=a("li"),$ae=a("strong"),Oco=o("beit"),Vco=o(" \u2014 "),yP=a("a"),Xco=o("BeitModel"),zco=o(" (BEiT model)"),Qco=l(),Xh=a("li"),kae=a("strong"),Wco=o("bert"),Hco=o(" \u2014 "),LP=a("a"),Uco=o("BertModel"),Jco=o(" (BERT model)"),Yco=l(),zh=a("li"),Sae=a("strong"),Kco=o("bert-generation"),Zco=o(" \u2014 "),xP=a("a"),efo=o("BertGenerationEncoder"),ofo=o(" (Bert Generation model)"),rfo=l(),Qh=a("li"),Rae=a("strong"),tfo=o("big_bird"),afo=o(" \u2014 "),$P=a("a"),nfo=o("BigBirdModel"),sfo=o(" (BigBird model)"),lfo=l(),Wh=a("li"),Bae=a("strong"),ifo=o("bigbird_pegasus"),dfo=o(" \u2014 "),kP=a("a"),cfo=o("BigBirdPegasusModel"),ffo=o(" (BigBirdPegasus model)"),mfo=l(),Hh=a("li"),Pae=a("strong"),gfo=o("blenderbot"),hfo=o(" \u2014 "),SP=a("a"),pfo=o("BlenderbotModel"),ufo=o(" (Blenderbot model)"),_fo=l(),Uh=a("li"),Iae=a("strong"),bfo=o("blenderbot-small"),vfo=o(" \u2014 "),RP=a("a"),Ffo=o("BlenderbotSmallModel"),Tfo=o(" (BlenderbotSmall model)"),Mfo=l(),Jh=a("li"),qae=a("strong"),Efo=o("camembert"),Cfo=o(" \u2014 "),BP=a("a"),wfo=o("CamembertModel"),Afo=o(" (CamemBERT model)"),yfo=l(),Yh=a("li"),Nae=a("strong"),Lfo=o("canine"),xfo=o(" \u2014 "),PP=a("a"),$fo=o("CanineModel"),kfo=o(" (Canine model)"),Sfo=l(),Kh=a("li"),jae=a("strong"),Rfo=o("clip"),Bfo=o(" \u2014 "),IP=a("a"),Pfo=o("CLIPModel"),Ifo=o(" (CLIP model)"),qfo=l(),Zh=a("li"),Dae=a("strong"),Nfo=o("convbert"),jfo=o(" \u2014 "),qP=a("a"),Dfo=o("ConvBertModel"),Gfo=o(" (ConvBERT model)"),Ofo=l(),ep=a("li"),Gae=a("strong"),Vfo=o("convnext"),Xfo=o(" \u2014 "),NP=a("a"),zfo=o("ConvNextModel"),Qfo=o(" (ConvNext model)"),Wfo=l(),op=a("li"),Oae=a("strong"),Hfo=o("ctrl"),Ufo=o(" \u2014 "),jP=a("a"),Jfo=o("CTRLModel"),Yfo=o(" (CTRL model)"),Kfo=l(),rp=a("li"),Vae=a("strong"),Zfo=o("data2vec-audio"),emo=o(" \u2014 "),DP=a("a"),omo=o("Data2VecAudioModel"),rmo=o(" (Data2VecAudio model)"),tmo=l(),tp=a("li"),Xae=a("strong"),amo=o("data2vec-text"),nmo=o(" \u2014 "),GP=a("a"),smo=o("Data2VecTextModel"),lmo=o(" (Data2VecText model)"),imo=l(),ap=a("li"),zae=a("strong"),dmo=o("data2vec-vision"),cmo=o(" \u2014 "),OP=a("a"),fmo=o("Data2VecVisionModel"),mmo=o(" (Data2VecVision model)"),gmo=l(),np=a("li"),Qae=a("strong"),hmo=o("deberta"),pmo=o(" \u2014 "),VP=a("a"),umo=o("DebertaModel"),_mo=o(" (DeBERTa model)"),bmo=l(),sp=a("li"),Wae=a("strong"),vmo=o("deberta-v2"),Fmo=o(" \u2014 "),XP=a("a"),Tmo=o("DebertaV2Model"),Mmo=o(" (DeBERTa-v2 model)"),Emo=l(),lp=a("li"),Hae=a("strong"),Cmo=o("decision_transformer"),wmo=o(" \u2014 "),zP=a("a"),Amo=o("DecisionTransformerModel"),ymo=o(" (Decision Transformer model)"),Lmo=l(),ip=a("li"),Uae=a("strong"),xmo=o("deit"),$mo=o(" \u2014 "),QP=a("a"),kmo=o("DeiTModel"),Smo=o(" (DeiT model)"),Rmo=l(),dp=a("li"),Jae=a("strong"),Bmo=o("detr"),Pmo=o(" \u2014 "),WP=a("a"),Imo=o("DetrModel"),qmo=o(" (DETR model)"),Nmo=l(),cp=a("li"),Yae=a("strong"),jmo=o("distilbert"),Dmo=o(" \u2014 "),HP=a("a"),Gmo=o("DistilBertModel"),Omo=o(" (DistilBERT model)"),Vmo=l(),fp=a("li"),Kae=a("strong"),Xmo=o("dpr"),zmo=o(" \u2014 "),UP=a("a"),Qmo=o("DPRQuestionEncoder"),Wmo=o(" (DPR model)"),Hmo=l(),mp=a("li"),Zae=a("strong"),Umo=o("dpt"),Jmo=o(" \u2014 "),JP=a("a"),Ymo=o("DPTModel"),Kmo=o(" (DPT model)"),Zmo=l(),gp=a("li"),ene=a("strong"),ego=o("electra"),ogo=o(" \u2014 "),YP=a("a"),rgo=o("ElectraModel"),tgo=o(" (ELECTRA model)"),ago=l(),hp=a("li"),one=a("strong"),ngo=o("flaubert"),sgo=o(" \u2014 "),KP=a("a"),lgo=o("FlaubertModel"),igo=o(" (FlauBERT model)"),dgo=l(),pp=a("li"),rne=a("strong"),cgo=o("fnet"),fgo=o(" \u2014 "),ZP=a("a"),mgo=o("FNetModel"),ggo=o(" (FNet model)"),hgo=l(),up=a("li"),tne=a("strong"),pgo=o("fsmt"),ugo=o(" \u2014 "),eI=a("a"),_go=o("FSMTModel"),bgo=o(" (FairSeq Machine-Translation model)"),vgo=l(),Ss=a("li"),ane=a("strong"),Fgo=o("funnel"),Tgo=o(" \u2014 "),oI=a("a"),Mgo=o("FunnelModel"),Ego=o(" or "),rI=a("a"),Cgo=o("FunnelBaseModel"),wgo=o(" (Funnel Transformer model)"),Ago=l(),_p=a("li"),nne=a("strong"),ygo=o("glpn"),Lgo=o(" \u2014 "),tI=a("a"),xgo=o("GLPNModel"),$go=o(" (GLPN model)"),kgo=l(),bp=a("li"),sne=a("strong"),Sgo=o("gpt2"),Rgo=o(" \u2014 "),aI=a("a"),Bgo=o("GPT2Model"),Pgo=o(" (OpenAI GPT-2 model)"),Igo=l(),vp=a("li"),lne=a("strong"),qgo=o("gpt_neo"),Ngo=o(" \u2014 "),nI=a("a"),jgo=o("GPTNeoModel"),Dgo=o(" (GPT Neo model)"),Ggo=l(),Fp=a("li"),ine=a("strong"),Ogo=o("gptj"),Vgo=o(" \u2014 "),sI=a("a"),Xgo=o("GPTJModel"),zgo=o(" (GPT-J model)"),Qgo=l(),Tp=a("li"),dne=a("strong"),Wgo=o("hubert"),Hgo=o(" \u2014 "),lI=a("a"),Ugo=o("HubertModel"),Jgo=o(" (Hubert model)"),Ygo=l(),Mp=a("li"),cne=a("strong"),Kgo=o("ibert"),Zgo=o(" \u2014 "),iI=a("a"),eho=o("IBertModel"),oho=o(" (I-BERT model)"),rho=l(),Ep=a("li"),fne=a("strong"),tho=o("imagegpt"),aho=o(" \u2014 "),dI=a("a"),nho=o("ImageGPTModel"),sho=o(" (ImageGPT model)"),lho=l(),Cp=a("li"),mne=a("strong"),iho=o("layoutlm"),dho=o(" \u2014 "),cI=a("a"),cho=o("LayoutLMModel"),fho=o(" (LayoutLM model)"),mho=l(),wp=a("li"),gne=a("strong"),gho=o("layoutlmv2"),hho=o(" \u2014 "),fI=a("a"),pho=o("LayoutLMv2Model"),uho=o(" (LayoutLMv2 model)"),_ho=l(),Ap=a("li"),hne=a("strong"),bho=o("led"),vho=o(" \u2014 "),mI=a("a"),Fho=o("LEDModel"),Tho=o(" (LED model)"),Mho=l(),yp=a("li"),pne=a("strong"),Eho=o("longformer"),Cho=o(" \u2014 "),gI=a("a"),who=o("LongformerModel"),Aho=o(" (Longformer model)"),yho=l(),Lp=a("li"),une=a("strong"),Lho=o("luke"),xho=o(" \u2014 "),hI=a("a"),$ho=o("LukeModel"),kho=o(" (LUKE model)"),Sho=l(),xp=a("li"),_ne=a("strong"),Rho=o("lxmert"),Bho=o(" \u2014 "),pI=a("a"),Pho=o("LxmertModel"),Iho=o(" (LXMERT model)"),qho=l(),$p=a("li"),bne=a("strong"),Nho=o("m2m_100"),jho=o(" \u2014 "),uI=a("a"),Dho=o("M2M100Model"),Gho=o(" (M2M100 model)"),Oho=l(),kp=a("li"),vne=a("strong"),Vho=o("marian"),Xho=o(" \u2014 "),_I=a("a"),zho=o("MarianModel"),Qho=o(" (Marian model)"),Who=l(),Sp=a("li"),Fne=a("strong"),Hho=o("maskformer"),Uho=o(" \u2014 "),bI=a("a"),Jho=o("MaskFormerModel"),Yho=o(" (MaskFormer model)"),Kho=l(),Rp=a("li"),Tne=a("strong"),Zho=o("mbart"),epo=o(" \u2014 "),vI=a("a"),opo=o("MBartModel"),rpo=o(" (mBART model)"),tpo=l(),Bp=a("li"),Mne=a("strong"),apo=o("megatron-bert"),npo=o(" \u2014 "),FI=a("a"),spo=o("MegatronBertModel"),lpo=o(" (MegatronBert model)"),ipo=l(),Pp=a("li"),Ene=a("strong"),dpo=o("mobilebert"),cpo=o(" \u2014 "),TI=a("a"),fpo=o("MobileBertModel"),mpo=o(" (MobileBERT model)"),gpo=l(),Ip=a("li"),Cne=a("strong"),hpo=o("mpnet"),ppo=o(" \u2014 "),MI=a("a"),upo=o("MPNetModel"),_po=o(" (MPNet model)"),bpo=l(),qp=a("li"),wne=a("strong"),vpo=o("mt5"),Fpo=o(" \u2014 "),EI=a("a"),Tpo=o("MT5Model"),Mpo=o(" (mT5 model)"),Epo=l(),Np=a("li"),Ane=a("strong"),Cpo=o("nystromformer"),wpo=o(" \u2014 "),CI=a("a"),Apo=o("NystromformerModel"),ypo=o(" (Nystromformer model)"),Lpo=l(),jp=a("li"),yne=a("strong"),xpo=o("openai-gpt"),$po=o(" \u2014 "),wI=a("a"),kpo=o("OpenAIGPTModel"),Spo=o(" (OpenAI GPT model)"),Rpo=l(),Dp=a("li"),Lne=a("strong"),Bpo=o("pegasus"),Ppo=o(" \u2014 "),AI=a("a"),Ipo=o("PegasusModel"),qpo=o(" (Pegasus model)"),Npo=l(),Gp=a("li"),xne=a("strong"),jpo=o("perceiver"),Dpo=o(" \u2014 "),yI=a("a"),Gpo=o("PerceiverModel"),Opo=o(" (Perceiver model)"),Vpo=l(),Op=a("li"),$ne=a("strong"),Xpo=o("plbart"),zpo=o(" \u2014 "),LI=a("a"),Qpo=o("PLBartModel"),Wpo=o(" (PLBart model)"),Hpo=l(),Vp=a("li"),kne=a("strong"),Upo=o("poolformer"),Jpo=o(" \u2014 "),xI=a("a"),Ypo=o("PoolFormerModel"),Kpo=o(" (PoolFormer model)"),Zpo=l(),Xp=a("li"),Sne=a("strong"),euo=o("prophetnet"),ouo=o(" \u2014 "),$I=a("a"),ruo=o("ProphetNetModel"),tuo=o(" (ProphetNet model)"),auo=l(),zp=a("li"),Rne=a("strong"),nuo=o("qdqbert"),suo=o(" \u2014 "),kI=a("a"),luo=o("QDQBertModel"),iuo=o(" (QDQBert model)"),duo=l(),Qp=a("li"),Bne=a("strong"),cuo=o("reformer"),fuo=o(" \u2014 "),SI=a("a"),muo=o("ReformerModel"),guo=o(" (Reformer model)"),huo=l(),Wp=a("li"),Pne=a("strong"),puo=o("regnet"),uuo=o(" \u2014 "),RI=a("a"),_uo=o("RegNetModel"),buo=o(" (RegNet model)"),vuo=l(),Hp=a("li"),Ine=a("strong"),Fuo=o("rembert"),Tuo=o(" \u2014 "),BI=a("a"),Muo=o("RemBertModel"),Euo=o(" (RemBERT model)"),Cuo=l(),Up=a("li"),qne=a("strong"),wuo=o("resnet"),Auo=o(" \u2014 "),PI=a("a"),yuo=o("ResNetModel"),Luo=o(" (ResNet model)"),xuo=l(),Jp=a("li"),Nne=a("strong"),$uo=o("retribert"),kuo=o(" \u2014 "),II=a("a"),Suo=o("RetriBertModel"),Ruo=o(" (RetriBERT model)"),Buo=l(),Yp=a("li"),jne=a("strong"),Puo=o("roberta"),Iuo=o(" \u2014 "),qI=a("a"),quo=o("RobertaModel"),Nuo=o(" (RoBERTa model)"),juo=l(),Kp=a("li"),Dne=a("strong"),Duo=o("roformer"),Guo=o(" \u2014 "),NI=a("a"),Ouo=o("RoFormerModel"),Vuo=o(" (RoFormer model)"),Xuo=l(),Zp=a("li"),Gne=a("strong"),zuo=o("segformer"),Quo=o(" \u2014 "),jI=a("a"),Wuo=o("SegformerModel"),Huo=o(" (SegFormer model)"),Uuo=l(),eu=a("li"),One=a("strong"),Juo=o("sew"),Yuo=o(" \u2014 "),DI=a("a"),Kuo=o("SEWModel"),Zuo=o(" (SEW model)"),e_o=l(),ou=a("li"),Vne=a("strong"),o_o=o("sew-d"),r_o=o(" \u2014 "),GI=a("a"),t_o=o("SEWDModel"),a_o=o(" (SEW-D model)"),n_o=l(),ru=a("li"),Xne=a("strong"),s_o=o("speech_to_text"),l_o=o(" \u2014 "),OI=a("a"),i_o=o("Speech2TextModel"),d_o=o(" (Speech2Text model)"),c_o=l(),tu=a("li"),zne=a("strong"),f_o=o("splinter"),m_o=o(" \u2014 "),VI=a("a"),g_o=o("SplinterModel"),h_o=o(" (Splinter model)"),p_o=l(),au=a("li"),Qne=a("strong"),u_o=o("squeezebert"),__o=o(" \u2014 "),XI=a("a"),b_o=o("SqueezeBertModel"),v_o=o(" (SqueezeBERT model)"),F_o=l(),nu=a("li"),Wne=a("strong"),T_o=o("swin"),M_o=o(" \u2014 "),zI=a("a"),E_o=o("SwinModel"),C_o=o(" (Swin model)"),w_o=l(),su=a("li"),Hne=a("strong"),A_o=o("t5"),y_o=o(" \u2014 "),QI=a("a"),L_o=o("T5Model"),x_o=o(" (T5 model)"),$_o=l(),lu=a("li"),Une=a("strong"),k_o=o("tapas"),S_o=o(" \u2014 "),WI=a("a"),R_o=o("TapasModel"),B_o=o(" (TAPAS model)"),P_o=l(),iu=a("li"),Jne=a("strong"),I_o=o("transfo-xl"),q_o=o(" \u2014 "),HI=a("a"),N_o=o("TransfoXLModel"),j_o=o(" (Transformer-XL model)"),D_o=l(),du=a("li"),Yne=a("strong"),G_o=o("unispeech"),O_o=o(" \u2014 "),UI=a("a"),V_o=o("UniSpeechModel"),X_o=o(" (UniSpeech model)"),z_o=l(),cu=a("li"),Kne=a("strong"),Q_o=o("unispeech-sat"),W_o=o(" \u2014 "),JI=a("a"),H_o=o("UniSpeechSatModel"),U_o=o(" (UniSpeechSat model)"),J_o=l(),fu=a("li"),Zne=a("strong"),Y_o=o("van"),K_o=o(" \u2014 "),YI=a("a"),Z_o=o("VanModel"),e2o=o(" (VAN model)"),o2o=l(),mu=a("li"),ese=a("strong"),r2o=o("vilt"),t2o=o(" \u2014 "),KI=a("a"),a2o=o("ViltModel"),n2o=o(" (ViLT model)"),s2o=l(),gu=a("li"),ose=a("strong"),l2o=o("vision-text-dual-encoder"),i2o=o(" \u2014 "),ZI=a("a"),d2o=o("VisionTextDualEncoderModel"),c2o=o(" (VisionTextDualEncoder model)"),f2o=l(),hu=a("li"),rse=a("strong"),m2o=o("visual_bert"),g2o=o(" \u2014 "),eq=a("a"),h2o=o("VisualBertModel"),p2o=o(" (VisualBert model)"),u2o=l(),pu=a("li"),tse=a("strong"),_2o=o("vit"),b2o=o(" \u2014 "),oq=a("a"),v2o=o("ViTModel"),F2o=o(" (ViT model)"),T2o=l(),uu=a("li"),ase=a("strong"),M2o=o("vit_mae"),E2o=o(" \u2014 "),rq=a("a"),C2o=o("ViTMAEModel"),w2o=o(" (ViTMAE model)"),A2o=l(),_u=a("li"),nse=a("strong"),y2o=o("wav2vec2"),L2o=o(" \u2014 "),tq=a("a"),x2o=o("Wav2Vec2Model"),$2o=o(" (Wav2Vec2 model)"),k2o=l(),bu=a("li"),sse=a("strong"),S2o=o("wavlm"),R2o=o(" \u2014 "),aq=a("a"),B2o=o("WavLMModel"),P2o=o(" (WavLM model)"),I2o=l(),vu=a("li"),lse=a("strong"),q2o=o("xglm"),N2o=o(" \u2014 "),nq=a("a"),j2o=o("XGLMModel"),D2o=o(" (XGLM model)"),G2o=l(),Fu=a("li"),ise=a("strong"),O2o=o("xlm"),V2o=o(" \u2014 "),sq=a("a"),X2o=o("XLMModel"),z2o=o(" (XLM model)"),Q2o=l(),Tu=a("li"),dse=a("strong"),W2o=o("xlm-prophetnet"),H2o=o(" \u2014 "),lq=a("a"),U2o=o("XLMProphetNetModel"),J2o=o(" (XLMProphetNet model)"),Y2o=l(),Mu=a("li"),cse=a("strong"),K2o=o("xlm-roberta"),Z2o=o(" \u2014 "),iq=a("a"),e1o=o("XLMRobertaModel"),o1o=o(" (XLM-RoBERTa model)"),r1o=l(),Eu=a("li"),fse=a("strong"),t1o=o("xlm-roberta-xl"),a1o=o(" \u2014 "),dq=a("a"),n1o=o("XLMRobertaXLModel"),s1o=o(" (XLM-RoBERTa-XL model)"),l1o=l(),Cu=a("li"),mse=a("strong"),i1o=o("xlnet"),d1o=o(" \u2014 "),cq=a("a"),c1o=o("XLNetModel"),f1o=o(" (XLNet model)"),m1o=l(),wu=a("li"),gse=a("strong"),g1o=o("yolos"),h1o=o(" \u2014 "),fq=a("a"),p1o=o("YolosModel"),u1o=o(" (YOLOS model)"),_1o=l(),Au=a("li"),hse=a("strong"),b1o=o("yoso"),v1o=o(" \u2014 "),mq=a("a"),F1o=o("YosoModel"),T1o=o(" (YOSO model)"),M1o=l(),yu=a("p"),E1o=o("The model is set in evaluation mode by default using "),pse=a("code"),C1o=o("model.eval()"),w1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=a("code"),A1o=o("model.train()"),y1o=l(),F(Lu.$$.fragment),dPe=l(),Ci=a("h2"),xu=a("a"),_se=a("span"),F(pA.$$.fragment),L1o=l(),bse=a("span"),x1o=o("AutoModelForPreTraining"),cPe=l(),xo=a("div"),F(uA.$$.fragment),$1o=l(),wi=a("p"),k1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gq=a("a"),S1o=o("from_pretrained()"),R1o=o(" class method or the "),hq=a("a"),B1o=o("from_config()"),P1o=o(` class
method.`),I1o=l(),_A=a("p"),q1o=o("This class cannot be instantiated directly using "),vse=a("code"),N1o=o("__init__()"),j1o=o(" (throws an error)."),D1o=l(),rt=a("div"),F(bA.$$.fragment),G1o=l(),Fse=a("p"),O1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V1o=l(),Ai=a("p"),X1o=o(`Note:
Loading a model from its configuration file does `),Tse=a("strong"),z1o=o("not"),Q1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pq=a("a"),W1o=o("from_pretrained()"),H1o=o(" to load the model weights."),U1o=l(),F($u.$$.fragment),J1o=l(),Ue=a("div"),F(vA.$$.fragment),Y1o=l(),Mse=a("p"),K1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z1o=l(),ya=a("p"),ebo=o("The model class to instantiate is selected based on the "),Ese=a("code"),obo=o("model_type"),rbo=o(` property of the config object (either
passed as an argument or loaded from `),Cse=a("code"),tbo=o("pretrained_model_name_or_path"),abo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wse=a("code"),nbo=o("pretrained_model_name_or_path"),sbo=o(":"),lbo=l(),G=a("ul"),ku=a("li"),Ase=a("strong"),ibo=o("albert"),dbo=o(" \u2014 "),uq=a("a"),cbo=o("AlbertForPreTraining"),fbo=o(" (ALBERT model)"),mbo=l(),Su=a("li"),yse=a("strong"),gbo=o("bart"),hbo=o(" \u2014 "),_q=a("a"),pbo=o("BartForConditionalGeneration"),ubo=o(" (BART model)"),_bo=l(),Ru=a("li"),Lse=a("strong"),bbo=o("bert"),vbo=o(" \u2014 "),bq=a("a"),Fbo=o("BertForPreTraining"),Tbo=o(" (BERT model)"),Mbo=l(),Bu=a("li"),xse=a("strong"),Ebo=o("big_bird"),Cbo=o(" \u2014 "),vq=a("a"),wbo=o("BigBirdForPreTraining"),Abo=o(" (BigBird model)"),ybo=l(),Pu=a("li"),$se=a("strong"),Lbo=o("camembert"),xbo=o(" \u2014 "),Fq=a("a"),$bo=o("CamembertForMaskedLM"),kbo=o(" (CamemBERT model)"),Sbo=l(),Iu=a("li"),kse=a("strong"),Rbo=o("ctrl"),Bbo=o(" \u2014 "),Tq=a("a"),Pbo=o("CTRLLMHeadModel"),Ibo=o(" (CTRL model)"),qbo=l(),qu=a("li"),Sse=a("strong"),Nbo=o("data2vec-text"),jbo=o(" \u2014 "),Mq=a("a"),Dbo=o("Data2VecTextForMaskedLM"),Gbo=o(" (Data2VecText model)"),Obo=l(),Nu=a("li"),Rse=a("strong"),Vbo=o("deberta"),Xbo=o(" \u2014 "),Eq=a("a"),zbo=o("DebertaForMaskedLM"),Qbo=o(" (DeBERTa model)"),Wbo=l(),ju=a("li"),Bse=a("strong"),Hbo=o("deberta-v2"),Ubo=o(" \u2014 "),Cq=a("a"),Jbo=o("DebertaV2ForMaskedLM"),Ybo=o(" (DeBERTa-v2 model)"),Kbo=l(),Du=a("li"),Pse=a("strong"),Zbo=o("distilbert"),evo=o(" \u2014 "),wq=a("a"),ovo=o("DistilBertForMaskedLM"),rvo=o(" (DistilBERT model)"),tvo=l(),Gu=a("li"),Ise=a("strong"),avo=o("electra"),nvo=o(" \u2014 "),Aq=a("a"),svo=o("ElectraForPreTraining"),lvo=o(" (ELECTRA model)"),ivo=l(),Ou=a("li"),qse=a("strong"),dvo=o("flaubert"),cvo=o(" \u2014 "),yq=a("a"),fvo=o("FlaubertWithLMHeadModel"),mvo=o(" (FlauBERT model)"),gvo=l(),Vu=a("li"),Nse=a("strong"),hvo=o("fnet"),pvo=o(" \u2014 "),Lq=a("a"),uvo=o("FNetForPreTraining"),_vo=o(" (FNet model)"),bvo=l(),Xu=a("li"),jse=a("strong"),vvo=o("fsmt"),Fvo=o(" \u2014 "),xq=a("a"),Tvo=o("FSMTForConditionalGeneration"),Mvo=o(" (FairSeq Machine-Translation model)"),Evo=l(),zu=a("li"),Dse=a("strong"),Cvo=o("funnel"),wvo=o(" \u2014 "),$q=a("a"),Avo=o("FunnelForPreTraining"),yvo=o(" (Funnel Transformer model)"),Lvo=l(),Qu=a("li"),Gse=a("strong"),xvo=o("gpt2"),$vo=o(" \u2014 "),kq=a("a"),kvo=o("GPT2LMHeadModel"),Svo=o(" (OpenAI GPT-2 model)"),Rvo=l(),Wu=a("li"),Ose=a("strong"),Bvo=o("ibert"),Pvo=o(" \u2014 "),Sq=a("a"),Ivo=o("IBertForMaskedLM"),qvo=o(" (I-BERT model)"),Nvo=l(),Hu=a("li"),Vse=a("strong"),jvo=o("layoutlm"),Dvo=o(" \u2014 "),Rq=a("a"),Gvo=o("LayoutLMForMaskedLM"),Ovo=o(" (LayoutLM model)"),Vvo=l(),Uu=a("li"),Xse=a("strong"),Xvo=o("longformer"),zvo=o(" \u2014 "),Bq=a("a"),Qvo=o("LongformerForMaskedLM"),Wvo=o(" (Longformer model)"),Hvo=l(),Ju=a("li"),zse=a("strong"),Uvo=o("lxmert"),Jvo=o(" \u2014 "),Pq=a("a"),Yvo=o("LxmertForPreTraining"),Kvo=o(" (LXMERT model)"),Zvo=l(),Yu=a("li"),Qse=a("strong"),eFo=o("megatron-bert"),oFo=o(" \u2014 "),Iq=a("a"),rFo=o("MegatronBertForPreTraining"),tFo=o(" (MegatronBert model)"),aFo=l(),Ku=a("li"),Wse=a("strong"),nFo=o("mobilebert"),sFo=o(" \u2014 "),qq=a("a"),lFo=o("MobileBertForPreTraining"),iFo=o(" (MobileBERT model)"),dFo=l(),Zu=a("li"),Hse=a("strong"),cFo=o("mpnet"),fFo=o(" \u2014 "),Nq=a("a"),mFo=o("MPNetForMaskedLM"),gFo=o(" (MPNet model)"),hFo=l(),e_=a("li"),Use=a("strong"),pFo=o("openai-gpt"),uFo=o(" \u2014 "),jq=a("a"),_Fo=o("OpenAIGPTLMHeadModel"),bFo=o(" (OpenAI GPT model)"),vFo=l(),o_=a("li"),Jse=a("strong"),FFo=o("retribert"),TFo=o(" \u2014 "),Dq=a("a"),MFo=o("RetriBertModel"),EFo=o(" (RetriBERT model)"),CFo=l(),r_=a("li"),Yse=a("strong"),wFo=o("roberta"),AFo=o(" \u2014 "),Gq=a("a"),yFo=o("RobertaForMaskedLM"),LFo=o(" (RoBERTa model)"),xFo=l(),t_=a("li"),Kse=a("strong"),$Fo=o("squeezebert"),kFo=o(" \u2014 "),Oq=a("a"),SFo=o("SqueezeBertForMaskedLM"),RFo=o(" (SqueezeBERT model)"),BFo=l(),a_=a("li"),Zse=a("strong"),PFo=o("t5"),IFo=o(" \u2014 "),Vq=a("a"),qFo=o("T5ForConditionalGeneration"),NFo=o(" (T5 model)"),jFo=l(),n_=a("li"),ele=a("strong"),DFo=o("tapas"),GFo=o(" \u2014 "),Xq=a("a"),OFo=o("TapasForMaskedLM"),VFo=o(" (TAPAS model)"),XFo=l(),s_=a("li"),ole=a("strong"),zFo=o("transfo-xl"),QFo=o(" \u2014 "),zq=a("a"),WFo=o("TransfoXLLMHeadModel"),HFo=o(" (Transformer-XL model)"),UFo=l(),l_=a("li"),rle=a("strong"),JFo=o("unispeech"),YFo=o(" \u2014 "),Qq=a("a"),KFo=o("UniSpeechForPreTraining"),ZFo=o(" (UniSpeech model)"),e0o=l(),i_=a("li"),tle=a("strong"),o0o=o("unispeech-sat"),r0o=o(" \u2014 "),Wq=a("a"),t0o=o("UniSpeechSatForPreTraining"),a0o=o(" (UniSpeechSat model)"),n0o=l(),d_=a("li"),ale=a("strong"),s0o=o("visual_bert"),l0o=o(" \u2014 "),Hq=a("a"),i0o=o("VisualBertForPreTraining"),d0o=o(" (VisualBert model)"),c0o=l(),c_=a("li"),nle=a("strong"),f0o=o("vit_mae"),m0o=o(" \u2014 "),Uq=a("a"),g0o=o("ViTMAEForPreTraining"),h0o=o(" (ViTMAE model)"),p0o=l(),f_=a("li"),sle=a("strong"),u0o=o("wav2vec2"),_0o=o(" \u2014 "),Jq=a("a"),b0o=o("Wav2Vec2ForPreTraining"),v0o=o(" (Wav2Vec2 model)"),F0o=l(),m_=a("li"),lle=a("strong"),T0o=o("xlm"),M0o=o(" \u2014 "),Yq=a("a"),E0o=o("XLMWithLMHeadModel"),C0o=o(" (XLM model)"),w0o=l(),g_=a("li"),ile=a("strong"),A0o=o("xlm-roberta"),y0o=o(" \u2014 "),Kq=a("a"),L0o=o("XLMRobertaForMaskedLM"),x0o=o(" (XLM-RoBERTa model)"),$0o=l(),h_=a("li"),dle=a("strong"),k0o=o("xlm-roberta-xl"),S0o=o(" \u2014 "),Zq=a("a"),R0o=o("XLMRobertaXLForMaskedLM"),B0o=o(" (XLM-RoBERTa-XL model)"),P0o=l(),p_=a("li"),cle=a("strong"),I0o=o("xlnet"),q0o=o(" \u2014 "),eN=a("a"),N0o=o("XLNetLMHeadModel"),j0o=o(" (XLNet model)"),D0o=l(),u_=a("p"),G0o=o("The model is set in evaluation mode by default using "),fle=a("code"),O0o=o("model.eval()"),V0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=a("code"),X0o=o("model.train()"),z0o=l(),F(__.$$.fragment),fPe=l(),yi=a("h2"),b_=a("a"),gle=a("span"),F(FA.$$.fragment),Q0o=l(),hle=a("span"),W0o=o("AutoModelForCausalLM"),mPe=l(),$o=a("div"),F(TA.$$.fragment),H0o=l(),Li=a("p"),U0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oN=a("a"),J0o=o("from_pretrained()"),Y0o=o(" class method or the "),rN=a("a"),K0o=o("from_config()"),Z0o=o(` class
method.`),eTo=l(),MA=a("p"),oTo=o("This class cannot be instantiated directly using "),ple=a("code"),rTo=o("__init__()"),tTo=o(" (throws an error)."),aTo=l(),tt=a("div"),F(EA.$$.fragment),nTo=l(),ule=a("p"),sTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lTo=l(),xi=a("p"),iTo=o(`Note:
Loading a model from its configuration file does `),_le=a("strong"),dTo=o("not"),cTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tN=a("a"),fTo=o("from_pretrained()"),mTo=o(" to load the model weights."),gTo=l(),F(v_.$$.fragment),hTo=l(),Je=a("div"),F(CA.$$.fragment),pTo=l(),ble=a("p"),uTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_To=l(),La=a("p"),bTo=o("The model class to instantiate is selected based on the "),vle=a("code"),vTo=o("model_type"),FTo=o(` property of the config object (either
passed as an argument or loaded from `),Fle=a("code"),TTo=o("pretrained_model_name_or_path"),MTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=a("code"),ETo=o("pretrained_model_name_or_path"),CTo=o(":"),wTo=l(),z=a("ul"),F_=a("li"),Mle=a("strong"),ATo=o("bart"),yTo=o(" \u2014 "),aN=a("a"),LTo=o("BartForCausalLM"),xTo=o(" (BART model)"),$To=l(),T_=a("li"),Ele=a("strong"),kTo=o("bert"),STo=o(" \u2014 "),nN=a("a"),RTo=o("BertLMHeadModel"),BTo=o(" (BERT model)"),PTo=l(),M_=a("li"),Cle=a("strong"),ITo=o("bert-generation"),qTo=o(" \u2014 "),sN=a("a"),NTo=o("BertGenerationDecoder"),jTo=o(" (Bert Generation model)"),DTo=l(),E_=a("li"),wle=a("strong"),GTo=o("big_bird"),OTo=o(" \u2014 "),lN=a("a"),VTo=o("BigBirdForCausalLM"),XTo=o(" (BigBird model)"),zTo=l(),C_=a("li"),Ale=a("strong"),QTo=o("bigbird_pegasus"),WTo=o(" \u2014 "),iN=a("a"),HTo=o("BigBirdPegasusForCausalLM"),UTo=o(" (BigBirdPegasus model)"),JTo=l(),w_=a("li"),yle=a("strong"),YTo=o("blenderbot"),KTo=o(" \u2014 "),dN=a("a"),ZTo=o("BlenderbotForCausalLM"),e7o=o(" (Blenderbot model)"),o7o=l(),A_=a("li"),Lle=a("strong"),r7o=o("blenderbot-small"),t7o=o(" \u2014 "),cN=a("a"),a7o=o("BlenderbotSmallForCausalLM"),n7o=o(" (BlenderbotSmall model)"),s7o=l(),y_=a("li"),xle=a("strong"),l7o=o("camembert"),i7o=o(" \u2014 "),fN=a("a"),d7o=o("CamembertForCausalLM"),c7o=o(" (CamemBERT model)"),f7o=l(),L_=a("li"),$le=a("strong"),m7o=o("ctrl"),g7o=o(" \u2014 "),mN=a("a"),h7o=o("CTRLLMHeadModel"),p7o=o(" (CTRL model)"),u7o=l(),x_=a("li"),kle=a("strong"),_7o=o("data2vec-text"),b7o=o(" \u2014 "),gN=a("a"),v7o=o("Data2VecTextForCausalLM"),F7o=o(" (Data2VecText model)"),T7o=l(),$_=a("li"),Sle=a("strong"),M7o=o("electra"),E7o=o(" \u2014 "),hN=a("a"),C7o=o("ElectraForCausalLM"),w7o=o(" (ELECTRA model)"),A7o=l(),k_=a("li"),Rle=a("strong"),y7o=o("gpt2"),L7o=o(" \u2014 "),pN=a("a"),x7o=o("GPT2LMHeadModel"),$7o=o(" (OpenAI GPT-2 model)"),k7o=l(),S_=a("li"),Ble=a("strong"),S7o=o("gpt_neo"),R7o=o(" \u2014 "),uN=a("a"),B7o=o("GPTNeoForCausalLM"),P7o=o(" (GPT Neo model)"),I7o=l(),R_=a("li"),Ple=a("strong"),q7o=o("gptj"),N7o=o(" \u2014 "),_N=a("a"),j7o=o("GPTJForCausalLM"),D7o=o(" (GPT-J model)"),G7o=l(),B_=a("li"),Ile=a("strong"),O7o=o("marian"),V7o=o(" \u2014 "),bN=a("a"),X7o=o("MarianForCausalLM"),z7o=o(" (Marian model)"),Q7o=l(),P_=a("li"),qle=a("strong"),W7o=o("mbart"),H7o=o(" \u2014 "),vN=a("a"),U7o=o("MBartForCausalLM"),J7o=o(" (mBART model)"),Y7o=l(),I_=a("li"),Nle=a("strong"),K7o=o("megatron-bert"),Z7o=o(" \u2014 "),FN=a("a"),e9o=o("MegatronBertForCausalLM"),o9o=o(" (MegatronBert model)"),r9o=l(),q_=a("li"),jle=a("strong"),t9o=o("openai-gpt"),a9o=o(" \u2014 "),TN=a("a"),n9o=o("OpenAIGPTLMHeadModel"),s9o=o(" (OpenAI GPT model)"),l9o=l(),N_=a("li"),Dle=a("strong"),i9o=o("pegasus"),d9o=o(" \u2014 "),MN=a("a"),c9o=o("PegasusForCausalLM"),f9o=o(" (Pegasus model)"),m9o=l(),j_=a("li"),Gle=a("strong"),g9o=o("plbart"),h9o=o(" \u2014 "),EN=a("a"),p9o=o("PLBartForCausalLM"),u9o=o(" (PLBart model)"),_9o=l(),D_=a("li"),Ole=a("strong"),b9o=o("prophetnet"),v9o=o(" \u2014 "),CN=a("a"),F9o=o("ProphetNetForCausalLM"),T9o=o(" (ProphetNet model)"),M9o=l(),G_=a("li"),Vle=a("strong"),E9o=o("qdqbert"),C9o=o(" \u2014 "),wN=a("a"),w9o=o("QDQBertLMHeadModel"),A9o=o(" (QDQBert model)"),y9o=l(),O_=a("li"),Xle=a("strong"),L9o=o("reformer"),x9o=o(" \u2014 "),AN=a("a"),$9o=o("ReformerModelWithLMHead"),k9o=o(" (Reformer model)"),S9o=l(),V_=a("li"),zle=a("strong"),R9o=o("rembert"),B9o=o(" \u2014 "),yN=a("a"),P9o=o("RemBertForCausalLM"),I9o=o(" (RemBERT model)"),q9o=l(),X_=a("li"),Qle=a("strong"),N9o=o("roberta"),j9o=o(" \u2014 "),LN=a("a"),D9o=o("RobertaForCausalLM"),G9o=o(" (RoBERTa model)"),O9o=l(),z_=a("li"),Wle=a("strong"),V9o=o("roformer"),X9o=o(" \u2014 "),xN=a("a"),z9o=o("RoFormerForCausalLM"),Q9o=o(" (RoFormer model)"),W9o=l(),Q_=a("li"),Hle=a("strong"),H9o=o("speech_to_text_2"),U9o=o(" \u2014 "),$N=a("a"),J9o=o("Speech2Text2ForCausalLM"),Y9o=o(" (Speech2Text2 model)"),K9o=l(),W_=a("li"),Ule=a("strong"),Z9o=o("transfo-xl"),eMo=o(" \u2014 "),kN=a("a"),oMo=o("TransfoXLLMHeadModel"),rMo=o(" (Transformer-XL model)"),tMo=l(),H_=a("li"),Jle=a("strong"),aMo=o("trocr"),nMo=o(" \u2014 "),SN=a("a"),sMo=o("TrOCRForCausalLM"),lMo=o(" (TrOCR model)"),iMo=l(),U_=a("li"),Yle=a("strong"),dMo=o("xglm"),cMo=o(" \u2014 "),RN=a("a"),fMo=o("XGLMForCausalLM"),mMo=o(" (XGLM model)"),gMo=l(),J_=a("li"),Kle=a("strong"),hMo=o("xlm"),pMo=o(" \u2014 "),BN=a("a"),uMo=o("XLMWithLMHeadModel"),_Mo=o(" (XLM model)"),bMo=l(),Y_=a("li"),Zle=a("strong"),vMo=o("xlm-prophetnet"),FMo=o(" \u2014 "),PN=a("a"),TMo=o("XLMProphetNetForCausalLM"),MMo=o(" (XLMProphetNet model)"),EMo=l(),K_=a("li"),eie=a("strong"),CMo=o("xlm-roberta"),wMo=o(" \u2014 "),IN=a("a"),AMo=o("XLMRobertaForCausalLM"),yMo=o(" (XLM-RoBERTa model)"),LMo=l(),Z_=a("li"),oie=a("strong"),xMo=o("xlm-roberta-xl"),$Mo=o(" \u2014 "),qN=a("a"),kMo=o("XLMRobertaXLForCausalLM"),SMo=o(" (XLM-RoBERTa-XL model)"),RMo=l(),e2=a("li"),rie=a("strong"),BMo=o("xlnet"),PMo=o(" \u2014 "),NN=a("a"),IMo=o("XLNetLMHeadModel"),qMo=o(" (XLNet model)"),NMo=l(),o2=a("p"),jMo=o("The model is set in evaluation mode by default using "),tie=a("code"),DMo=o("model.eval()"),GMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=a("code"),OMo=o("model.train()"),VMo=l(),F(r2.$$.fragment),gPe=l(),$i=a("h2"),t2=a("a"),nie=a("span"),F(wA.$$.fragment),XMo=l(),sie=a("span"),zMo=o("AutoModelForMaskedLM"),hPe=l(),ko=a("div"),F(AA.$$.fragment),QMo=l(),ki=a("p"),WMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jN=a("a"),HMo=o("from_pretrained()"),UMo=o(" class method or the "),DN=a("a"),JMo=o("from_config()"),YMo=o(` class
method.`),KMo=l(),yA=a("p"),ZMo=o("This class cannot be instantiated directly using "),lie=a("code"),e4o=o("__init__()"),o4o=o(" (throws an error)."),r4o=l(),at=a("div"),F(LA.$$.fragment),t4o=l(),iie=a("p"),a4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),n4o=l(),Si=a("p"),s4o=o(`Note:
Loading a model from its configuration file does `),die=a("strong"),l4o=o("not"),i4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GN=a("a"),d4o=o("from_pretrained()"),c4o=o(" to load the model weights."),f4o=l(),F(a2.$$.fragment),m4o=l(),Ye=a("div"),F(xA.$$.fragment),g4o=l(),cie=a("p"),h4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),p4o=l(),xa=a("p"),u4o=o("The model class to instantiate is selected based on the "),fie=a("code"),_4o=o("model_type"),b4o=o(` property of the config object (either
passed as an argument or loaded from `),mie=a("code"),v4o=o("pretrained_model_name_or_path"),F4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=a("code"),T4o=o("pretrained_model_name_or_path"),M4o=o(":"),E4o=l(),Q=a("ul"),n2=a("li"),hie=a("strong"),C4o=o("albert"),w4o=o(" \u2014 "),ON=a("a"),A4o=o("AlbertForMaskedLM"),y4o=o(" (ALBERT model)"),L4o=l(),s2=a("li"),pie=a("strong"),x4o=o("bart"),$4o=o(" \u2014 "),VN=a("a"),k4o=o("BartForConditionalGeneration"),S4o=o(" (BART model)"),R4o=l(),l2=a("li"),uie=a("strong"),B4o=o("bert"),P4o=o(" \u2014 "),XN=a("a"),I4o=o("BertForMaskedLM"),q4o=o(" (BERT model)"),N4o=l(),i2=a("li"),_ie=a("strong"),j4o=o("big_bird"),D4o=o(" \u2014 "),zN=a("a"),G4o=o("BigBirdForMaskedLM"),O4o=o(" (BigBird model)"),V4o=l(),d2=a("li"),bie=a("strong"),X4o=o("camembert"),z4o=o(" \u2014 "),QN=a("a"),Q4o=o("CamembertForMaskedLM"),W4o=o(" (CamemBERT model)"),H4o=l(),c2=a("li"),vie=a("strong"),U4o=o("convbert"),J4o=o(" \u2014 "),WN=a("a"),Y4o=o("ConvBertForMaskedLM"),K4o=o(" (ConvBERT model)"),Z4o=l(),f2=a("li"),Fie=a("strong"),eEo=o("data2vec-text"),oEo=o(" \u2014 "),HN=a("a"),rEo=o("Data2VecTextForMaskedLM"),tEo=o(" (Data2VecText model)"),aEo=l(),m2=a("li"),Tie=a("strong"),nEo=o("deberta"),sEo=o(" \u2014 "),UN=a("a"),lEo=o("DebertaForMaskedLM"),iEo=o(" (DeBERTa model)"),dEo=l(),g2=a("li"),Mie=a("strong"),cEo=o("deberta-v2"),fEo=o(" \u2014 "),JN=a("a"),mEo=o("DebertaV2ForMaskedLM"),gEo=o(" (DeBERTa-v2 model)"),hEo=l(),h2=a("li"),Eie=a("strong"),pEo=o("distilbert"),uEo=o(" \u2014 "),YN=a("a"),_Eo=o("DistilBertForMaskedLM"),bEo=o(" (DistilBERT model)"),vEo=l(),p2=a("li"),Cie=a("strong"),FEo=o("electra"),TEo=o(" \u2014 "),KN=a("a"),MEo=o("ElectraForMaskedLM"),EEo=o(" (ELECTRA model)"),CEo=l(),u2=a("li"),wie=a("strong"),wEo=o("flaubert"),AEo=o(" \u2014 "),ZN=a("a"),yEo=o("FlaubertWithLMHeadModel"),LEo=o(" (FlauBERT model)"),xEo=l(),_2=a("li"),Aie=a("strong"),$Eo=o("fnet"),kEo=o(" \u2014 "),ej=a("a"),SEo=o("FNetForMaskedLM"),REo=o(" (FNet model)"),BEo=l(),b2=a("li"),yie=a("strong"),PEo=o("funnel"),IEo=o(" \u2014 "),oj=a("a"),qEo=o("FunnelForMaskedLM"),NEo=o(" (Funnel Transformer model)"),jEo=l(),v2=a("li"),Lie=a("strong"),DEo=o("ibert"),GEo=o(" \u2014 "),rj=a("a"),OEo=o("IBertForMaskedLM"),VEo=o(" (I-BERT model)"),XEo=l(),F2=a("li"),xie=a("strong"),zEo=o("layoutlm"),QEo=o(" \u2014 "),tj=a("a"),WEo=o("LayoutLMForMaskedLM"),HEo=o(" (LayoutLM model)"),UEo=l(),T2=a("li"),$ie=a("strong"),JEo=o("longformer"),YEo=o(" \u2014 "),aj=a("a"),KEo=o("LongformerForMaskedLM"),ZEo=o(" (Longformer model)"),e5o=l(),M2=a("li"),kie=a("strong"),o5o=o("mbart"),r5o=o(" \u2014 "),nj=a("a"),t5o=o("MBartForConditionalGeneration"),a5o=o(" (mBART model)"),n5o=l(),E2=a("li"),Sie=a("strong"),s5o=o("megatron-bert"),l5o=o(" \u2014 "),sj=a("a"),i5o=o("MegatronBertForMaskedLM"),d5o=o(" (MegatronBert model)"),c5o=l(),C2=a("li"),Rie=a("strong"),f5o=o("mobilebert"),m5o=o(" \u2014 "),lj=a("a"),g5o=o("MobileBertForMaskedLM"),h5o=o(" (MobileBERT model)"),p5o=l(),w2=a("li"),Bie=a("strong"),u5o=o("mpnet"),_5o=o(" \u2014 "),ij=a("a"),b5o=o("MPNetForMaskedLM"),v5o=o(" (MPNet model)"),F5o=l(),A2=a("li"),Pie=a("strong"),T5o=o("nystromformer"),M5o=o(" \u2014 "),dj=a("a"),E5o=o("NystromformerForMaskedLM"),C5o=o(" (Nystromformer model)"),w5o=l(),y2=a("li"),Iie=a("strong"),A5o=o("perceiver"),y5o=o(" \u2014 "),cj=a("a"),L5o=o("PerceiverForMaskedLM"),x5o=o(" (Perceiver model)"),$5o=l(),L2=a("li"),qie=a("strong"),k5o=o("qdqbert"),S5o=o(" \u2014 "),fj=a("a"),R5o=o("QDQBertForMaskedLM"),B5o=o(" (QDQBert model)"),P5o=l(),x2=a("li"),Nie=a("strong"),I5o=o("reformer"),q5o=o(" \u2014 "),mj=a("a"),N5o=o("ReformerForMaskedLM"),j5o=o(" (Reformer model)"),D5o=l(),$2=a("li"),jie=a("strong"),G5o=o("rembert"),O5o=o(" \u2014 "),gj=a("a"),V5o=o("RemBertForMaskedLM"),X5o=o(" (RemBERT model)"),z5o=l(),k2=a("li"),Die=a("strong"),Q5o=o("roberta"),W5o=o(" \u2014 "),hj=a("a"),H5o=o("RobertaForMaskedLM"),U5o=o(" (RoBERTa model)"),J5o=l(),S2=a("li"),Gie=a("strong"),Y5o=o("roformer"),K5o=o(" \u2014 "),pj=a("a"),Z5o=o("RoFormerForMaskedLM"),eCo=o(" (RoFormer model)"),oCo=l(),R2=a("li"),Oie=a("strong"),rCo=o("squeezebert"),tCo=o(" \u2014 "),uj=a("a"),aCo=o("SqueezeBertForMaskedLM"),nCo=o(" (SqueezeBERT model)"),sCo=l(),B2=a("li"),Vie=a("strong"),lCo=o("tapas"),iCo=o(" \u2014 "),_j=a("a"),dCo=o("TapasForMaskedLM"),cCo=o(" (TAPAS model)"),fCo=l(),P2=a("li"),Xie=a("strong"),mCo=o("wav2vec2"),gCo=o(" \u2014 "),zie=a("code"),hCo=o("Wav2Vec2ForMaskedLM"),pCo=o(" (Wav2Vec2 model)"),uCo=l(),I2=a("li"),Qie=a("strong"),_Co=o("xlm"),bCo=o(" \u2014 "),bj=a("a"),vCo=o("XLMWithLMHeadModel"),FCo=o(" (XLM model)"),TCo=l(),q2=a("li"),Wie=a("strong"),MCo=o("xlm-roberta"),ECo=o(" \u2014 "),vj=a("a"),CCo=o("XLMRobertaForMaskedLM"),wCo=o(" (XLM-RoBERTa model)"),ACo=l(),N2=a("li"),Hie=a("strong"),yCo=o("xlm-roberta-xl"),LCo=o(" \u2014 "),Fj=a("a"),xCo=o("XLMRobertaXLForMaskedLM"),$Co=o(" (XLM-RoBERTa-XL model)"),kCo=l(),j2=a("li"),Uie=a("strong"),SCo=o("yoso"),RCo=o(" \u2014 "),Tj=a("a"),BCo=o("YosoForMaskedLM"),PCo=o(" (YOSO model)"),ICo=l(),D2=a("p"),qCo=o("The model is set in evaluation mode by default using "),Jie=a("code"),NCo=o("model.eval()"),jCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yie=a("code"),DCo=o("model.train()"),GCo=l(),F(G2.$$.fragment),pPe=l(),Ri=a("h2"),O2=a("a"),Kie=a("span"),F($A.$$.fragment),OCo=l(),Zie=a("span"),VCo=o("AutoModelForSeq2SeqLM"),uPe=l(),So=a("div"),F(kA.$$.fragment),XCo=l(),Bi=a("p"),zCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Mj=a("a"),QCo=o("from_pretrained()"),WCo=o(" class method or the "),Ej=a("a"),HCo=o("from_config()"),UCo=o(` class
method.`),JCo=l(),SA=a("p"),YCo=o("This class cannot be instantiated directly using "),ede=a("code"),KCo=o("__init__()"),ZCo=o(" (throws an error)."),e3o=l(),nt=a("div"),F(RA.$$.fragment),o3o=l(),ode=a("p"),r3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),t3o=l(),Pi=a("p"),a3o=o(`Note:
Loading a model from its configuration file does `),rde=a("strong"),n3o=o("not"),s3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),l3o=o("from_pretrained()"),i3o=o(" to load the model weights."),d3o=l(),F(V2.$$.fragment),c3o=l(),Ke=a("div"),F(BA.$$.fragment),f3o=l(),tde=a("p"),m3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),g3o=l(),$a=a("p"),h3o=o("The model class to instantiate is selected based on the "),ade=a("code"),p3o=o("model_type"),u3o=o(` property of the config object (either
passed as an argument or loaded from `),nde=a("code"),_3o=o("pretrained_model_name_or_path"),b3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=a("code"),v3o=o("pretrained_model_name_or_path"),F3o=o(":"),T3o=l(),he=a("ul"),X2=a("li"),lde=a("strong"),M3o=o("bart"),E3o=o(" \u2014 "),wj=a("a"),C3o=o("BartForConditionalGeneration"),w3o=o(" (BART model)"),A3o=l(),z2=a("li"),ide=a("strong"),y3o=o("bigbird_pegasus"),L3o=o(" \u2014 "),Aj=a("a"),x3o=o("BigBirdPegasusForConditionalGeneration"),$3o=o(" (BigBirdPegasus model)"),k3o=l(),Q2=a("li"),dde=a("strong"),S3o=o("blenderbot"),R3o=o(" \u2014 "),yj=a("a"),B3o=o("BlenderbotForConditionalGeneration"),P3o=o(" (Blenderbot model)"),I3o=l(),W2=a("li"),cde=a("strong"),q3o=o("blenderbot-small"),N3o=o(" \u2014 "),Lj=a("a"),j3o=o("BlenderbotSmallForConditionalGeneration"),D3o=o(" (BlenderbotSmall model)"),G3o=l(),H2=a("li"),fde=a("strong"),O3o=o("encoder-decoder"),V3o=o(" \u2014 "),xj=a("a"),X3o=o("EncoderDecoderModel"),z3o=o(" (Encoder decoder model)"),Q3o=l(),U2=a("li"),mde=a("strong"),W3o=o("fsmt"),H3o=o(" \u2014 "),$j=a("a"),U3o=o("FSMTForConditionalGeneration"),J3o=o(" (FairSeq Machine-Translation model)"),Y3o=l(),J2=a("li"),gde=a("strong"),K3o=o("led"),Z3o=o(" \u2014 "),kj=a("a"),ewo=o("LEDForConditionalGeneration"),owo=o(" (LED model)"),rwo=l(),Y2=a("li"),hde=a("strong"),two=o("m2m_100"),awo=o(" \u2014 "),Sj=a("a"),nwo=o("M2M100ForConditionalGeneration"),swo=o(" (M2M100 model)"),lwo=l(),K2=a("li"),pde=a("strong"),iwo=o("marian"),dwo=o(" \u2014 "),Rj=a("a"),cwo=o("MarianMTModel"),fwo=o(" (Marian model)"),mwo=l(),Z2=a("li"),ude=a("strong"),gwo=o("mbart"),hwo=o(" \u2014 "),Bj=a("a"),pwo=o("MBartForConditionalGeneration"),uwo=o(" (mBART model)"),_wo=l(),e1=a("li"),_de=a("strong"),bwo=o("mt5"),vwo=o(" \u2014 "),Pj=a("a"),Fwo=o("MT5ForConditionalGeneration"),Two=o(" (mT5 model)"),Mwo=l(),o1=a("li"),bde=a("strong"),Ewo=o("pegasus"),Cwo=o(" \u2014 "),Ij=a("a"),wwo=o("PegasusForConditionalGeneration"),Awo=o(" (Pegasus model)"),ywo=l(),r1=a("li"),vde=a("strong"),Lwo=o("plbart"),xwo=o(" \u2014 "),qj=a("a"),$wo=o("PLBartForConditionalGeneration"),kwo=o(" (PLBart model)"),Swo=l(),t1=a("li"),Fde=a("strong"),Rwo=o("prophetnet"),Bwo=o(" \u2014 "),Nj=a("a"),Pwo=o("ProphetNetForConditionalGeneration"),Iwo=o(" (ProphetNet model)"),qwo=l(),a1=a("li"),Tde=a("strong"),Nwo=o("t5"),jwo=o(" \u2014 "),jj=a("a"),Dwo=o("T5ForConditionalGeneration"),Gwo=o(" (T5 model)"),Owo=l(),n1=a("li"),Mde=a("strong"),Vwo=o("tapex"),Xwo=o(" \u2014 "),Dj=a("a"),zwo=o("BartForConditionalGeneration"),Qwo=o(" (TAPEX model)"),Wwo=l(),s1=a("li"),Ede=a("strong"),Hwo=o("xlm-prophetnet"),Uwo=o(" \u2014 "),Gj=a("a"),Jwo=o("XLMProphetNetForConditionalGeneration"),Ywo=o(" (XLMProphetNet model)"),Kwo=l(),l1=a("p"),Zwo=o("The model is set in evaluation mode by default using "),Cde=a("code"),eAo=o("model.eval()"),oAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=a("code"),rAo=o("model.train()"),tAo=l(),F(i1.$$.fragment),_Pe=l(),Ii=a("h2"),d1=a("a"),Ade=a("span"),F(PA.$$.fragment),aAo=l(),yde=a("span"),nAo=o("AutoModelForSequenceClassification"),bPe=l(),Ro=a("div"),F(IA.$$.fragment),sAo=l(),qi=a("p"),lAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Oj=a("a"),iAo=o("from_pretrained()"),dAo=o(" class method or the "),Vj=a("a"),cAo=o("from_config()"),fAo=o(` class
method.`),mAo=l(),qA=a("p"),gAo=o("This class cannot be instantiated directly using "),Lde=a("code"),hAo=o("__init__()"),pAo=o(" (throws an error)."),uAo=l(),st=a("div"),F(NA.$$.fragment),_Ao=l(),xde=a("p"),bAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vAo=l(),Ni=a("p"),FAo=o(`Note:
Loading a model from its configuration file does `),$de=a("strong"),TAo=o("not"),MAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xj=a("a"),EAo=o("from_pretrained()"),CAo=o(" to load the model weights."),wAo=l(),F(c1.$$.fragment),AAo=l(),Ze=a("div"),F(jA.$$.fragment),yAo=l(),kde=a("p"),LAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xAo=l(),ka=a("p"),$Ao=o("The model class to instantiate is selected based on the "),Sde=a("code"),kAo=o("model_type"),SAo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),RAo=o("pretrained_model_name_or_path"),BAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bde=a("code"),PAo=o("pretrained_model_name_or_path"),IAo=o(":"),qAo=l(),q=a("ul"),f1=a("li"),Pde=a("strong"),NAo=o("albert"),jAo=o(" \u2014 "),zj=a("a"),DAo=o("AlbertForSequenceClassification"),GAo=o(" (ALBERT model)"),OAo=l(),m1=a("li"),Ide=a("strong"),VAo=o("bart"),XAo=o(" \u2014 "),Qj=a("a"),zAo=o("BartForSequenceClassification"),QAo=o(" (BART model)"),WAo=l(),g1=a("li"),qde=a("strong"),HAo=o("bert"),UAo=o(" \u2014 "),Wj=a("a"),JAo=o("BertForSequenceClassification"),YAo=o(" (BERT model)"),KAo=l(),h1=a("li"),Nde=a("strong"),ZAo=o("big_bird"),e6o=o(" \u2014 "),Hj=a("a"),o6o=o("BigBirdForSequenceClassification"),r6o=o(" (BigBird model)"),t6o=l(),p1=a("li"),jde=a("strong"),a6o=o("bigbird_pegasus"),n6o=o(" \u2014 "),Uj=a("a"),s6o=o("BigBirdPegasusForSequenceClassification"),l6o=o(" (BigBirdPegasus model)"),i6o=l(),u1=a("li"),Dde=a("strong"),d6o=o("camembert"),c6o=o(" \u2014 "),Jj=a("a"),f6o=o("CamembertForSequenceClassification"),m6o=o(" (CamemBERT model)"),g6o=l(),_1=a("li"),Gde=a("strong"),h6o=o("canine"),p6o=o(" \u2014 "),Yj=a("a"),u6o=o("CanineForSequenceClassification"),_6o=o(" (Canine model)"),b6o=l(),b1=a("li"),Ode=a("strong"),v6o=o("convbert"),F6o=o(" \u2014 "),Kj=a("a"),T6o=o("ConvBertForSequenceClassification"),M6o=o(" (ConvBERT model)"),E6o=l(),v1=a("li"),Vde=a("strong"),C6o=o("ctrl"),w6o=o(" \u2014 "),Zj=a("a"),A6o=o("CTRLForSequenceClassification"),y6o=o(" (CTRL model)"),L6o=l(),F1=a("li"),Xde=a("strong"),x6o=o("data2vec-text"),$6o=o(" \u2014 "),eD=a("a"),k6o=o("Data2VecTextForSequenceClassification"),S6o=o(" (Data2VecText model)"),R6o=l(),T1=a("li"),zde=a("strong"),B6o=o("deberta"),P6o=o(" \u2014 "),oD=a("a"),I6o=o("DebertaForSequenceClassification"),q6o=o(" (DeBERTa model)"),N6o=l(),M1=a("li"),Qde=a("strong"),j6o=o("deberta-v2"),D6o=o(" \u2014 "),rD=a("a"),G6o=o("DebertaV2ForSequenceClassification"),O6o=o(" (DeBERTa-v2 model)"),V6o=l(),E1=a("li"),Wde=a("strong"),X6o=o("distilbert"),z6o=o(" \u2014 "),tD=a("a"),Q6o=o("DistilBertForSequenceClassification"),W6o=o(" (DistilBERT model)"),H6o=l(),C1=a("li"),Hde=a("strong"),U6o=o("electra"),J6o=o(" \u2014 "),aD=a("a"),Y6o=o("ElectraForSequenceClassification"),K6o=o(" (ELECTRA model)"),Z6o=l(),w1=a("li"),Ude=a("strong"),eyo=o("flaubert"),oyo=o(" \u2014 "),nD=a("a"),ryo=o("FlaubertForSequenceClassification"),tyo=o(" (FlauBERT model)"),ayo=l(),A1=a("li"),Jde=a("strong"),nyo=o("fnet"),syo=o(" \u2014 "),sD=a("a"),lyo=o("FNetForSequenceClassification"),iyo=o(" (FNet model)"),dyo=l(),y1=a("li"),Yde=a("strong"),cyo=o("funnel"),fyo=o(" \u2014 "),lD=a("a"),myo=o("FunnelForSequenceClassification"),gyo=o(" (Funnel Transformer model)"),hyo=l(),L1=a("li"),Kde=a("strong"),pyo=o("gpt2"),uyo=o(" \u2014 "),iD=a("a"),_yo=o("GPT2ForSequenceClassification"),byo=o(" (OpenAI GPT-2 model)"),vyo=l(),x1=a("li"),Zde=a("strong"),Fyo=o("gpt_neo"),Tyo=o(" \u2014 "),dD=a("a"),Myo=o("GPTNeoForSequenceClassification"),Eyo=o(" (GPT Neo model)"),Cyo=l(),$1=a("li"),ece=a("strong"),wyo=o("gptj"),Ayo=o(" \u2014 "),cD=a("a"),yyo=o("GPTJForSequenceClassification"),Lyo=o(" (GPT-J model)"),xyo=l(),k1=a("li"),oce=a("strong"),$yo=o("ibert"),kyo=o(" \u2014 "),fD=a("a"),Syo=o("IBertForSequenceClassification"),Ryo=o(" (I-BERT model)"),Byo=l(),S1=a("li"),rce=a("strong"),Pyo=o("layoutlm"),Iyo=o(" \u2014 "),mD=a("a"),qyo=o("LayoutLMForSequenceClassification"),Nyo=o(" (LayoutLM model)"),jyo=l(),R1=a("li"),tce=a("strong"),Dyo=o("layoutlmv2"),Gyo=o(" \u2014 "),gD=a("a"),Oyo=o("LayoutLMv2ForSequenceClassification"),Vyo=o(" (LayoutLMv2 model)"),Xyo=l(),B1=a("li"),ace=a("strong"),zyo=o("led"),Qyo=o(" \u2014 "),hD=a("a"),Wyo=o("LEDForSequenceClassification"),Hyo=o(" (LED model)"),Uyo=l(),P1=a("li"),nce=a("strong"),Jyo=o("longformer"),Yyo=o(" \u2014 "),pD=a("a"),Kyo=o("LongformerForSequenceClassification"),Zyo=o(" (Longformer model)"),eLo=l(),I1=a("li"),sce=a("strong"),oLo=o("mbart"),rLo=o(" \u2014 "),uD=a("a"),tLo=o("MBartForSequenceClassification"),aLo=o(" (mBART model)"),nLo=l(),q1=a("li"),lce=a("strong"),sLo=o("megatron-bert"),lLo=o(" \u2014 "),_D=a("a"),iLo=o("MegatronBertForSequenceClassification"),dLo=o(" (MegatronBert model)"),cLo=l(),N1=a("li"),ice=a("strong"),fLo=o("mobilebert"),mLo=o(" \u2014 "),bD=a("a"),gLo=o("MobileBertForSequenceClassification"),hLo=o(" (MobileBERT model)"),pLo=l(),j1=a("li"),dce=a("strong"),uLo=o("mpnet"),_Lo=o(" \u2014 "),vD=a("a"),bLo=o("MPNetForSequenceClassification"),vLo=o(" (MPNet model)"),FLo=l(),D1=a("li"),cce=a("strong"),TLo=o("nystromformer"),MLo=o(" \u2014 "),FD=a("a"),ELo=o("NystromformerForSequenceClassification"),CLo=o(" (Nystromformer model)"),wLo=l(),G1=a("li"),fce=a("strong"),ALo=o("openai-gpt"),yLo=o(" \u2014 "),TD=a("a"),LLo=o("OpenAIGPTForSequenceClassification"),xLo=o(" (OpenAI GPT model)"),$Lo=l(),O1=a("li"),mce=a("strong"),kLo=o("perceiver"),SLo=o(" \u2014 "),MD=a("a"),RLo=o("PerceiverForSequenceClassification"),BLo=o(" (Perceiver model)"),PLo=l(),V1=a("li"),gce=a("strong"),ILo=o("plbart"),qLo=o(" \u2014 "),ED=a("a"),NLo=o("PLBartForSequenceClassification"),jLo=o(" (PLBart model)"),DLo=l(),X1=a("li"),hce=a("strong"),GLo=o("qdqbert"),OLo=o(" \u2014 "),CD=a("a"),VLo=o("QDQBertForSequenceClassification"),XLo=o(" (QDQBert model)"),zLo=l(),z1=a("li"),pce=a("strong"),QLo=o("reformer"),WLo=o(" \u2014 "),wD=a("a"),HLo=o("ReformerForSequenceClassification"),ULo=o(" (Reformer model)"),JLo=l(),Q1=a("li"),uce=a("strong"),YLo=o("rembert"),KLo=o(" \u2014 "),AD=a("a"),ZLo=o("RemBertForSequenceClassification"),e8o=o(" (RemBERT model)"),o8o=l(),W1=a("li"),_ce=a("strong"),r8o=o("roberta"),t8o=o(" \u2014 "),yD=a("a"),a8o=o("RobertaForSequenceClassification"),n8o=o(" (RoBERTa model)"),s8o=l(),H1=a("li"),bce=a("strong"),l8o=o("roformer"),i8o=o(" \u2014 "),LD=a("a"),d8o=o("RoFormerForSequenceClassification"),c8o=o(" (RoFormer model)"),f8o=l(),U1=a("li"),vce=a("strong"),m8o=o("squeezebert"),g8o=o(" \u2014 "),xD=a("a"),h8o=o("SqueezeBertForSequenceClassification"),p8o=o(" (SqueezeBERT model)"),u8o=l(),J1=a("li"),Fce=a("strong"),_8o=o("tapas"),b8o=o(" \u2014 "),$D=a("a"),v8o=o("TapasForSequenceClassification"),F8o=o(" (TAPAS model)"),T8o=l(),Y1=a("li"),Tce=a("strong"),M8o=o("tapex"),E8o=o(" \u2014 "),kD=a("a"),C8o=o("BartForSequenceClassification"),w8o=o(" (TAPEX model)"),A8o=l(),K1=a("li"),Mce=a("strong"),y8o=o("transfo-xl"),L8o=o(" \u2014 "),SD=a("a"),x8o=o("TransfoXLForSequenceClassification"),$8o=o(" (Transformer-XL model)"),k8o=l(),Z1=a("li"),Ece=a("strong"),S8o=o("xlm"),R8o=o(" \u2014 "),RD=a("a"),B8o=o("XLMForSequenceClassification"),P8o=o(" (XLM model)"),I8o=l(),eb=a("li"),Cce=a("strong"),q8o=o("xlm-roberta"),N8o=o(" \u2014 "),BD=a("a"),j8o=o("XLMRobertaForSequenceClassification"),D8o=o(" (XLM-RoBERTa model)"),G8o=l(),ob=a("li"),wce=a("strong"),O8o=o("xlm-roberta-xl"),V8o=o(" \u2014 "),PD=a("a"),X8o=o("XLMRobertaXLForSequenceClassification"),z8o=o(" (XLM-RoBERTa-XL model)"),Q8o=l(),rb=a("li"),Ace=a("strong"),W8o=o("xlnet"),H8o=o(" \u2014 "),ID=a("a"),U8o=o("XLNetForSequenceClassification"),J8o=o(" (XLNet model)"),Y8o=l(),tb=a("li"),yce=a("strong"),K8o=o("yoso"),Z8o=o(" \u2014 "),qD=a("a"),exo=o("YosoForSequenceClassification"),oxo=o(" (YOSO model)"),rxo=l(),ab=a("p"),txo=o("The model is set in evaluation mode by default using "),Lce=a("code"),axo=o("model.eval()"),nxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),sxo=o("model.train()"),lxo=l(),F(nb.$$.fragment),vPe=l(),ji=a("h2"),sb=a("a"),$ce=a("span"),F(DA.$$.fragment),ixo=l(),kce=a("span"),dxo=o("AutoModelForMultipleChoice"),FPe=l(),Bo=a("div"),F(GA.$$.fragment),cxo=l(),Di=a("p"),fxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ND=a("a"),mxo=o("from_pretrained()"),gxo=o(" class method or the "),jD=a("a"),hxo=o("from_config()"),pxo=o(` class
method.`),uxo=l(),OA=a("p"),_xo=o("This class cannot be instantiated directly using "),Sce=a("code"),bxo=o("__init__()"),vxo=o(" (throws an error)."),Fxo=l(),lt=a("div"),F(VA.$$.fragment),Txo=l(),Rce=a("p"),Mxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Exo=l(),Gi=a("p"),Cxo=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),wxo=o("not"),Axo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=a("a"),yxo=o("from_pretrained()"),Lxo=o(" to load the model weights."),xxo=l(),F(lb.$$.fragment),$xo=l(),eo=a("div"),F(XA.$$.fragment),kxo=l(),Pce=a("p"),Sxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Rxo=l(),Sa=a("p"),Bxo=o("The model class to instantiate is selected based on the "),Ice=a("code"),Pxo=o("model_type"),Ixo=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),qxo=o("pretrained_model_name_or_path"),Nxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=a("code"),jxo=o("pretrained_model_name_or_path"),Dxo=o(":"),Gxo=l(),Y=a("ul"),ib=a("li"),jce=a("strong"),Oxo=o("albert"),Vxo=o(" \u2014 "),GD=a("a"),Xxo=o("AlbertForMultipleChoice"),zxo=o(" (ALBERT model)"),Qxo=l(),db=a("li"),Dce=a("strong"),Wxo=o("bert"),Hxo=o(" \u2014 "),OD=a("a"),Uxo=o("BertForMultipleChoice"),Jxo=o(" (BERT model)"),Yxo=l(),cb=a("li"),Gce=a("strong"),Kxo=o("big_bird"),Zxo=o(" \u2014 "),VD=a("a"),e$o=o("BigBirdForMultipleChoice"),o$o=o(" (BigBird model)"),r$o=l(),fb=a("li"),Oce=a("strong"),t$o=o("camembert"),a$o=o(" \u2014 "),XD=a("a"),n$o=o("CamembertForMultipleChoice"),s$o=o(" (CamemBERT model)"),l$o=l(),mb=a("li"),Vce=a("strong"),i$o=o("canine"),d$o=o(" \u2014 "),zD=a("a"),c$o=o("CanineForMultipleChoice"),f$o=o(" (Canine model)"),m$o=l(),gb=a("li"),Xce=a("strong"),g$o=o("convbert"),h$o=o(" \u2014 "),QD=a("a"),p$o=o("ConvBertForMultipleChoice"),u$o=o(" (ConvBERT model)"),_$o=l(),hb=a("li"),zce=a("strong"),b$o=o("data2vec-text"),v$o=o(" \u2014 "),WD=a("a"),F$o=o("Data2VecTextForMultipleChoice"),T$o=o(" (Data2VecText model)"),M$o=l(),pb=a("li"),Qce=a("strong"),E$o=o("distilbert"),C$o=o(" \u2014 "),HD=a("a"),w$o=o("DistilBertForMultipleChoice"),A$o=o(" (DistilBERT model)"),y$o=l(),ub=a("li"),Wce=a("strong"),L$o=o("electra"),x$o=o(" \u2014 "),UD=a("a"),$$o=o("ElectraForMultipleChoice"),k$o=o(" (ELECTRA model)"),S$o=l(),_b=a("li"),Hce=a("strong"),R$o=o("flaubert"),B$o=o(" \u2014 "),JD=a("a"),P$o=o("FlaubertForMultipleChoice"),I$o=o(" (FlauBERT model)"),q$o=l(),bb=a("li"),Uce=a("strong"),N$o=o("fnet"),j$o=o(" \u2014 "),YD=a("a"),D$o=o("FNetForMultipleChoice"),G$o=o(" (FNet model)"),O$o=l(),vb=a("li"),Jce=a("strong"),V$o=o("funnel"),X$o=o(" \u2014 "),KD=a("a"),z$o=o("FunnelForMultipleChoice"),Q$o=o(" (Funnel Transformer model)"),W$o=l(),Fb=a("li"),Yce=a("strong"),H$o=o("ibert"),U$o=o(" \u2014 "),ZD=a("a"),J$o=o("IBertForMultipleChoice"),Y$o=o(" (I-BERT model)"),K$o=l(),Tb=a("li"),Kce=a("strong"),Z$o=o("longformer"),eko=o(" \u2014 "),eG=a("a"),oko=o("LongformerForMultipleChoice"),rko=o(" (Longformer model)"),tko=l(),Mb=a("li"),Zce=a("strong"),ako=o("megatron-bert"),nko=o(" \u2014 "),oG=a("a"),sko=o("MegatronBertForMultipleChoice"),lko=o(" (MegatronBert model)"),iko=l(),Eb=a("li"),efe=a("strong"),dko=o("mobilebert"),cko=o(" \u2014 "),rG=a("a"),fko=o("MobileBertForMultipleChoice"),mko=o(" (MobileBERT model)"),gko=l(),Cb=a("li"),ofe=a("strong"),hko=o("mpnet"),pko=o(" \u2014 "),tG=a("a"),uko=o("MPNetForMultipleChoice"),_ko=o(" (MPNet model)"),bko=l(),wb=a("li"),rfe=a("strong"),vko=o("nystromformer"),Fko=o(" \u2014 "),aG=a("a"),Tko=o("NystromformerForMultipleChoice"),Mko=o(" (Nystromformer model)"),Eko=l(),Ab=a("li"),tfe=a("strong"),Cko=o("qdqbert"),wko=o(" \u2014 "),nG=a("a"),Ako=o("QDQBertForMultipleChoice"),yko=o(" (QDQBert model)"),Lko=l(),yb=a("li"),afe=a("strong"),xko=o("rembert"),$ko=o(" \u2014 "),sG=a("a"),kko=o("RemBertForMultipleChoice"),Sko=o(" (RemBERT model)"),Rko=l(),Lb=a("li"),nfe=a("strong"),Bko=o("roberta"),Pko=o(" \u2014 "),lG=a("a"),Iko=o("RobertaForMultipleChoice"),qko=o(" (RoBERTa model)"),Nko=l(),xb=a("li"),sfe=a("strong"),jko=o("roformer"),Dko=o(" \u2014 "),iG=a("a"),Gko=o("RoFormerForMultipleChoice"),Oko=o(" (RoFormer model)"),Vko=l(),$b=a("li"),lfe=a("strong"),Xko=o("squeezebert"),zko=o(" \u2014 "),dG=a("a"),Qko=o("SqueezeBertForMultipleChoice"),Wko=o(" (SqueezeBERT model)"),Hko=l(),kb=a("li"),ife=a("strong"),Uko=o("xlm"),Jko=o(" \u2014 "),cG=a("a"),Yko=o("XLMForMultipleChoice"),Kko=o(" (XLM model)"),Zko=l(),Sb=a("li"),dfe=a("strong"),eSo=o("xlm-roberta"),oSo=o(" \u2014 "),fG=a("a"),rSo=o("XLMRobertaForMultipleChoice"),tSo=o(" (XLM-RoBERTa model)"),aSo=l(),Rb=a("li"),cfe=a("strong"),nSo=o("xlm-roberta-xl"),sSo=o(" \u2014 "),mG=a("a"),lSo=o("XLMRobertaXLForMultipleChoice"),iSo=o(" (XLM-RoBERTa-XL model)"),dSo=l(),Bb=a("li"),ffe=a("strong"),cSo=o("xlnet"),fSo=o(" \u2014 "),gG=a("a"),mSo=o("XLNetForMultipleChoice"),gSo=o(" (XLNet model)"),hSo=l(),Pb=a("li"),mfe=a("strong"),pSo=o("yoso"),uSo=o(" \u2014 "),hG=a("a"),_So=o("YosoForMultipleChoice"),bSo=o(" (YOSO model)"),vSo=l(),Ib=a("p"),FSo=o("The model is set in evaluation mode by default using "),gfe=a("code"),TSo=o("model.eval()"),MSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=a("code"),ESo=o("model.train()"),CSo=l(),F(qb.$$.fragment),TPe=l(),Oi=a("h2"),Nb=a("a"),pfe=a("span"),F(zA.$$.fragment),wSo=l(),ufe=a("span"),ASo=o("AutoModelForNextSentencePrediction"),MPe=l(),Po=a("div"),F(QA.$$.fragment),ySo=l(),Vi=a("p"),LSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pG=a("a"),xSo=o("from_pretrained()"),$So=o(" class method or the "),uG=a("a"),kSo=o("from_config()"),SSo=o(` class
method.`),RSo=l(),WA=a("p"),BSo=o("This class cannot be instantiated directly using "),_fe=a("code"),PSo=o("__init__()"),ISo=o(" (throws an error)."),qSo=l(),it=a("div"),F(HA.$$.fragment),NSo=l(),bfe=a("p"),jSo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DSo=l(),Xi=a("p"),GSo=o(`Note:
Loading a model from its configuration file does `),vfe=a("strong"),OSo=o("not"),VSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=a("a"),XSo=o("from_pretrained()"),zSo=o(" to load the model weights."),QSo=l(),F(jb.$$.fragment),WSo=l(),oo=a("div"),F(UA.$$.fragment),HSo=l(),Ffe=a("p"),USo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JSo=l(),Ra=a("p"),YSo=o("The model class to instantiate is selected based on the "),Tfe=a("code"),KSo=o("model_type"),ZSo=o(` property of the config object (either
passed as an argument or loaded from `),Mfe=a("code"),eRo=o("pretrained_model_name_or_path"),oRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Efe=a("code"),rRo=o("pretrained_model_name_or_path"),tRo=o(":"),aRo=l(),Yr=a("ul"),Db=a("li"),Cfe=a("strong"),nRo=o("bert"),sRo=o(" \u2014 "),bG=a("a"),lRo=o("BertForNextSentencePrediction"),iRo=o(" (BERT model)"),dRo=l(),Gb=a("li"),wfe=a("strong"),cRo=o("fnet"),fRo=o(" \u2014 "),vG=a("a"),mRo=o("FNetForNextSentencePrediction"),gRo=o(" (FNet model)"),hRo=l(),Ob=a("li"),Afe=a("strong"),pRo=o("megatron-bert"),uRo=o(" \u2014 "),FG=a("a"),_Ro=o("MegatronBertForNextSentencePrediction"),bRo=o(" (MegatronBert model)"),vRo=l(),Vb=a("li"),yfe=a("strong"),FRo=o("mobilebert"),TRo=o(" \u2014 "),TG=a("a"),MRo=o("MobileBertForNextSentencePrediction"),ERo=o(" (MobileBERT model)"),CRo=l(),Xb=a("li"),Lfe=a("strong"),wRo=o("qdqbert"),ARo=o(" \u2014 "),MG=a("a"),yRo=o("QDQBertForNextSentencePrediction"),LRo=o(" (QDQBert model)"),xRo=l(),zb=a("p"),$Ro=o("The model is set in evaluation mode by default using "),xfe=a("code"),kRo=o("model.eval()"),SRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=a("code"),RRo=o("model.train()"),BRo=l(),F(Qb.$$.fragment),EPe=l(),zi=a("h2"),Wb=a("a"),kfe=a("span"),F(JA.$$.fragment),PRo=l(),Sfe=a("span"),IRo=o("AutoModelForTokenClassification"),CPe=l(),Io=a("div"),F(YA.$$.fragment),qRo=l(),Qi=a("p"),NRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EG=a("a"),jRo=o("from_pretrained()"),DRo=o(" class method or the "),CG=a("a"),GRo=o("from_config()"),ORo=o(` class
method.`),VRo=l(),KA=a("p"),XRo=o("This class cannot be instantiated directly using "),Rfe=a("code"),zRo=o("__init__()"),QRo=o(" (throws an error)."),WRo=l(),dt=a("div"),F(ZA.$$.fragment),HRo=l(),Bfe=a("p"),URo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JRo=l(),Wi=a("p"),YRo=o(`Note:
Loading a model from its configuration file does `),Pfe=a("strong"),KRo=o("not"),ZRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),eBo=o("from_pretrained()"),oBo=o(" to load the model weights."),rBo=l(),F(Hb.$$.fragment),tBo=l(),ro=a("div"),F(e6.$$.fragment),aBo=l(),Ife=a("p"),nBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sBo=l(),Ba=a("p"),lBo=o("The model class to instantiate is selected based on the "),qfe=a("code"),iBo=o("model_type"),dBo=o(` property of the config object (either
passed as an argument or loaded from `),Nfe=a("code"),cBo=o("pretrained_model_name_or_path"),fBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=a("code"),mBo=o("pretrained_model_name_or_path"),gBo=o(":"),hBo=l(),U=a("ul"),Ub=a("li"),Dfe=a("strong"),pBo=o("albert"),uBo=o(" \u2014 "),AG=a("a"),_Bo=o("AlbertForTokenClassification"),bBo=o(" (ALBERT model)"),vBo=l(),Jb=a("li"),Gfe=a("strong"),FBo=o("bert"),TBo=o(" \u2014 "),yG=a("a"),MBo=o("BertForTokenClassification"),EBo=o(" (BERT model)"),CBo=l(),Yb=a("li"),Ofe=a("strong"),wBo=o("big_bird"),ABo=o(" \u2014 "),LG=a("a"),yBo=o("BigBirdForTokenClassification"),LBo=o(" (BigBird model)"),xBo=l(),Kb=a("li"),Vfe=a("strong"),$Bo=o("camembert"),kBo=o(" \u2014 "),xG=a("a"),SBo=o("CamembertForTokenClassification"),RBo=o(" (CamemBERT model)"),BBo=l(),Zb=a("li"),Xfe=a("strong"),PBo=o("canine"),IBo=o(" \u2014 "),$G=a("a"),qBo=o("CanineForTokenClassification"),NBo=o(" (Canine model)"),jBo=l(),ev=a("li"),zfe=a("strong"),DBo=o("convbert"),GBo=o(" \u2014 "),kG=a("a"),OBo=o("ConvBertForTokenClassification"),VBo=o(" (ConvBERT model)"),XBo=l(),ov=a("li"),Qfe=a("strong"),zBo=o("data2vec-text"),QBo=o(" \u2014 "),SG=a("a"),WBo=o("Data2VecTextForTokenClassification"),HBo=o(" (Data2VecText model)"),UBo=l(),rv=a("li"),Wfe=a("strong"),JBo=o("deberta"),YBo=o(" \u2014 "),RG=a("a"),KBo=o("DebertaForTokenClassification"),ZBo=o(" (DeBERTa model)"),ePo=l(),tv=a("li"),Hfe=a("strong"),oPo=o("deberta-v2"),rPo=o(" \u2014 "),BG=a("a"),tPo=o("DebertaV2ForTokenClassification"),aPo=o(" (DeBERTa-v2 model)"),nPo=l(),av=a("li"),Ufe=a("strong"),sPo=o("distilbert"),lPo=o(" \u2014 "),PG=a("a"),iPo=o("DistilBertForTokenClassification"),dPo=o(" (DistilBERT model)"),cPo=l(),nv=a("li"),Jfe=a("strong"),fPo=o("electra"),mPo=o(" \u2014 "),IG=a("a"),gPo=o("ElectraForTokenClassification"),hPo=o(" (ELECTRA model)"),pPo=l(),sv=a("li"),Yfe=a("strong"),uPo=o("flaubert"),_Po=o(" \u2014 "),qG=a("a"),bPo=o("FlaubertForTokenClassification"),vPo=o(" (FlauBERT model)"),FPo=l(),lv=a("li"),Kfe=a("strong"),TPo=o("fnet"),MPo=o(" \u2014 "),NG=a("a"),EPo=o("FNetForTokenClassification"),CPo=o(" (FNet model)"),wPo=l(),iv=a("li"),Zfe=a("strong"),APo=o("funnel"),yPo=o(" \u2014 "),jG=a("a"),LPo=o("FunnelForTokenClassification"),xPo=o(" (Funnel Transformer model)"),$Po=l(),dv=a("li"),eme=a("strong"),kPo=o("gpt2"),SPo=o(" \u2014 "),DG=a("a"),RPo=o("GPT2ForTokenClassification"),BPo=o(" (OpenAI GPT-2 model)"),PPo=l(),cv=a("li"),ome=a("strong"),IPo=o("ibert"),qPo=o(" \u2014 "),GG=a("a"),NPo=o("IBertForTokenClassification"),jPo=o(" (I-BERT model)"),DPo=l(),fv=a("li"),rme=a("strong"),GPo=o("layoutlm"),OPo=o(" \u2014 "),OG=a("a"),VPo=o("LayoutLMForTokenClassification"),XPo=o(" (LayoutLM model)"),zPo=l(),mv=a("li"),tme=a("strong"),QPo=o("layoutlmv2"),WPo=o(" \u2014 "),VG=a("a"),HPo=o("LayoutLMv2ForTokenClassification"),UPo=o(" (LayoutLMv2 model)"),JPo=l(),gv=a("li"),ame=a("strong"),YPo=o("longformer"),KPo=o(" \u2014 "),XG=a("a"),ZPo=o("LongformerForTokenClassification"),eIo=o(" (Longformer model)"),oIo=l(),hv=a("li"),nme=a("strong"),rIo=o("megatron-bert"),tIo=o(" \u2014 "),zG=a("a"),aIo=o("MegatronBertForTokenClassification"),nIo=o(" (MegatronBert model)"),sIo=l(),pv=a("li"),sme=a("strong"),lIo=o("mobilebert"),iIo=o(" \u2014 "),QG=a("a"),dIo=o("MobileBertForTokenClassification"),cIo=o(" (MobileBERT model)"),fIo=l(),uv=a("li"),lme=a("strong"),mIo=o("mpnet"),gIo=o(" \u2014 "),WG=a("a"),hIo=o("MPNetForTokenClassification"),pIo=o(" (MPNet model)"),uIo=l(),_v=a("li"),ime=a("strong"),_Io=o("nystromformer"),bIo=o(" \u2014 "),HG=a("a"),vIo=o("NystromformerForTokenClassification"),FIo=o(" (Nystromformer model)"),TIo=l(),bv=a("li"),dme=a("strong"),MIo=o("qdqbert"),EIo=o(" \u2014 "),UG=a("a"),CIo=o("QDQBertForTokenClassification"),wIo=o(" (QDQBert model)"),AIo=l(),vv=a("li"),cme=a("strong"),yIo=o("rembert"),LIo=o(" \u2014 "),JG=a("a"),xIo=o("RemBertForTokenClassification"),$Io=o(" (RemBERT model)"),kIo=l(),Fv=a("li"),fme=a("strong"),SIo=o("roberta"),RIo=o(" \u2014 "),YG=a("a"),BIo=o("RobertaForTokenClassification"),PIo=o(" (RoBERTa model)"),IIo=l(),Tv=a("li"),mme=a("strong"),qIo=o("roformer"),NIo=o(" \u2014 "),KG=a("a"),jIo=o("RoFormerForTokenClassification"),DIo=o(" (RoFormer model)"),GIo=l(),Mv=a("li"),gme=a("strong"),OIo=o("squeezebert"),VIo=o(" \u2014 "),ZG=a("a"),XIo=o("SqueezeBertForTokenClassification"),zIo=o(" (SqueezeBERT model)"),QIo=l(),Ev=a("li"),hme=a("strong"),WIo=o("xlm"),HIo=o(" \u2014 "),eO=a("a"),UIo=o("XLMForTokenClassification"),JIo=o(" (XLM model)"),YIo=l(),Cv=a("li"),pme=a("strong"),KIo=o("xlm-roberta"),ZIo=o(" \u2014 "),oO=a("a"),eqo=o("XLMRobertaForTokenClassification"),oqo=o(" (XLM-RoBERTa model)"),rqo=l(),wv=a("li"),ume=a("strong"),tqo=o("xlm-roberta-xl"),aqo=o(" \u2014 "),rO=a("a"),nqo=o("XLMRobertaXLForTokenClassification"),sqo=o(" (XLM-RoBERTa-XL model)"),lqo=l(),Av=a("li"),_me=a("strong"),iqo=o("xlnet"),dqo=o(" \u2014 "),tO=a("a"),cqo=o("XLNetForTokenClassification"),fqo=o(" (XLNet model)"),mqo=l(),yv=a("li"),bme=a("strong"),gqo=o("yoso"),hqo=o(" \u2014 "),aO=a("a"),pqo=o("YosoForTokenClassification"),uqo=o(" (YOSO model)"),_qo=l(),Lv=a("p"),bqo=o("The model is set in evaluation mode by default using "),vme=a("code"),vqo=o("model.eval()"),Fqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=a("code"),Tqo=o("model.train()"),Mqo=l(),F(xv.$$.fragment),wPe=l(),Hi=a("h2"),$v=a("a"),Tme=a("span"),F(o6.$$.fragment),Eqo=l(),Mme=a("span"),Cqo=o("AutoModelForQuestionAnswering"),APe=l(),qo=a("div"),F(r6.$$.fragment),wqo=l(),Ui=a("p"),Aqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nO=a("a"),yqo=o("from_pretrained()"),Lqo=o(" class method or the "),sO=a("a"),xqo=o("from_config()"),$qo=o(` class
method.`),kqo=l(),t6=a("p"),Sqo=o("This class cannot be instantiated directly using "),Eme=a("code"),Rqo=o("__init__()"),Bqo=o(" (throws an error)."),Pqo=l(),ct=a("div"),F(a6.$$.fragment),Iqo=l(),Cme=a("p"),qqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Nqo=l(),Ji=a("p"),jqo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),Dqo=o("not"),Gqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),Oqo=o("from_pretrained()"),Vqo=o(" to load the model weights."),Xqo=l(),F(kv.$$.fragment),zqo=l(),to=a("div"),F(n6.$$.fragment),Qqo=l(),Ame=a("p"),Wqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hqo=l(),Pa=a("p"),Uqo=o("The model class to instantiate is selected based on the "),yme=a("code"),Jqo=o("model_type"),Yqo=o(` property of the config object (either
passed as an argument or loaded from `),Lme=a("code"),Kqo=o("pretrained_model_name_or_path"),Zqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=a("code"),eNo=o("pretrained_model_name_or_path"),oNo=o(":"),rNo=l(),O=a("ul"),Sv=a("li"),$me=a("strong"),tNo=o("albert"),aNo=o(" \u2014 "),iO=a("a"),nNo=o("AlbertForQuestionAnswering"),sNo=o(" (ALBERT model)"),lNo=l(),Rv=a("li"),kme=a("strong"),iNo=o("bart"),dNo=o(" \u2014 "),dO=a("a"),cNo=o("BartForQuestionAnswering"),fNo=o(" (BART model)"),mNo=l(),Bv=a("li"),Sme=a("strong"),gNo=o("bert"),hNo=o(" \u2014 "),cO=a("a"),pNo=o("BertForQuestionAnswering"),uNo=o(" (BERT model)"),_No=l(),Pv=a("li"),Rme=a("strong"),bNo=o("big_bird"),vNo=o(" \u2014 "),fO=a("a"),FNo=o("BigBirdForQuestionAnswering"),TNo=o(" (BigBird model)"),MNo=l(),Iv=a("li"),Bme=a("strong"),ENo=o("bigbird_pegasus"),CNo=o(" \u2014 "),mO=a("a"),wNo=o("BigBirdPegasusForQuestionAnswering"),ANo=o(" (BigBirdPegasus model)"),yNo=l(),qv=a("li"),Pme=a("strong"),LNo=o("camembert"),xNo=o(" \u2014 "),gO=a("a"),$No=o("CamembertForQuestionAnswering"),kNo=o(" (CamemBERT model)"),SNo=l(),Nv=a("li"),Ime=a("strong"),RNo=o("canine"),BNo=o(" \u2014 "),hO=a("a"),PNo=o("CanineForQuestionAnswering"),INo=o(" (Canine model)"),qNo=l(),jv=a("li"),qme=a("strong"),NNo=o("convbert"),jNo=o(" \u2014 "),pO=a("a"),DNo=o("ConvBertForQuestionAnswering"),GNo=o(" (ConvBERT model)"),ONo=l(),Dv=a("li"),Nme=a("strong"),VNo=o("data2vec-text"),XNo=o(" \u2014 "),uO=a("a"),zNo=o("Data2VecTextForQuestionAnswering"),QNo=o(" (Data2VecText model)"),WNo=l(),Gv=a("li"),jme=a("strong"),HNo=o("deberta"),UNo=o(" \u2014 "),_O=a("a"),JNo=o("DebertaForQuestionAnswering"),YNo=o(" (DeBERTa model)"),KNo=l(),Ov=a("li"),Dme=a("strong"),ZNo=o("deberta-v2"),ejo=o(" \u2014 "),bO=a("a"),ojo=o("DebertaV2ForQuestionAnswering"),rjo=o(" (DeBERTa-v2 model)"),tjo=l(),Vv=a("li"),Gme=a("strong"),ajo=o("distilbert"),njo=o(" \u2014 "),vO=a("a"),sjo=o("DistilBertForQuestionAnswering"),ljo=o(" (DistilBERT model)"),ijo=l(),Xv=a("li"),Ome=a("strong"),djo=o("electra"),cjo=o(" \u2014 "),FO=a("a"),fjo=o("ElectraForQuestionAnswering"),mjo=o(" (ELECTRA model)"),gjo=l(),zv=a("li"),Vme=a("strong"),hjo=o("flaubert"),pjo=o(" \u2014 "),TO=a("a"),ujo=o("FlaubertForQuestionAnsweringSimple"),_jo=o(" (FlauBERT model)"),bjo=l(),Qv=a("li"),Xme=a("strong"),vjo=o("fnet"),Fjo=o(" \u2014 "),MO=a("a"),Tjo=o("FNetForQuestionAnswering"),Mjo=o(" (FNet model)"),Ejo=l(),Wv=a("li"),zme=a("strong"),Cjo=o("funnel"),wjo=o(" \u2014 "),EO=a("a"),Ajo=o("FunnelForQuestionAnswering"),yjo=o(" (Funnel Transformer model)"),Ljo=l(),Hv=a("li"),Qme=a("strong"),xjo=o("gptj"),$jo=o(" \u2014 "),CO=a("a"),kjo=o("GPTJForQuestionAnswering"),Sjo=o(" (GPT-J model)"),Rjo=l(),Uv=a("li"),Wme=a("strong"),Bjo=o("ibert"),Pjo=o(" \u2014 "),wO=a("a"),Ijo=o("IBertForQuestionAnswering"),qjo=o(" (I-BERT model)"),Njo=l(),Jv=a("li"),Hme=a("strong"),jjo=o("layoutlmv2"),Djo=o(" \u2014 "),AO=a("a"),Gjo=o("LayoutLMv2ForQuestionAnswering"),Ojo=o(" (LayoutLMv2 model)"),Vjo=l(),Yv=a("li"),Ume=a("strong"),Xjo=o("led"),zjo=o(" \u2014 "),yO=a("a"),Qjo=o("LEDForQuestionAnswering"),Wjo=o(" (LED model)"),Hjo=l(),Kv=a("li"),Jme=a("strong"),Ujo=o("longformer"),Jjo=o(" \u2014 "),LO=a("a"),Yjo=o("LongformerForQuestionAnswering"),Kjo=o(" (Longformer model)"),Zjo=l(),Zv=a("li"),Yme=a("strong"),eDo=o("lxmert"),oDo=o(" \u2014 "),xO=a("a"),rDo=o("LxmertForQuestionAnswering"),tDo=o(" (LXMERT model)"),aDo=l(),eF=a("li"),Kme=a("strong"),nDo=o("mbart"),sDo=o(" \u2014 "),$O=a("a"),lDo=o("MBartForQuestionAnswering"),iDo=o(" (mBART model)"),dDo=l(),oF=a("li"),Zme=a("strong"),cDo=o("megatron-bert"),fDo=o(" \u2014 "),kO=a("a"),mDo=o("MegatronBertForQuestionAnswering"),gDo=o(" (MegatronBert model)"),hDo=l(),rF=a("li"),ege=a("strong"),pDo=o("mobilebert"),uDo=o(" \u2014 "),SO=a("a"),_Do=o("MobileBertForQuestionAnswering"),bDo=o(" (MobileBERT model)"),vDo=l(),tF=a("li"),oge=a("strong"),FDo=o("mpnet"),TDo=o(" \u2014 "),RO=a("a"),MDo=o("MPNetForQuestionAnswering"),EDo=o(" (MPNet model)"),CDo=l(),aF=a("li"),rge=a("strong"),wDo=o("nystromformer"),ADo=o(" \u2014 "),BO=a("a"),yDo=o("NystromformerForQuestionAnswering"),LDo=o(" (Nystromformer model)"),xDo=l(),nF=a("li"),tge=a("strong"),$Do=o("qdqbert"),kDo=o(" \u2014 "),PO=a("a"),SDo=o("QDQBertForQuestionAnswering"),RDo=o(" (QDQBert model)"),BDo=l(),sF=a("li"),age=a("strong"),PDo=o("reformer"),IDo=o(" \u2014 "),IO=a("a"),qDo=o("ReformerForQuestionAnswering"),NDo=o(" (Reformer model)"),jDo=l(),lF=a("li"),nge=a("strong"),DDo=o("rembert"),GDo=o(" \u2014 "),qO=a("a"),ODo=o("RemBertForQuestionAnswering"),VDo=o(" (RemBERT model)"),XDo=l(),iF=a("li"),sge=a("strong"),zDo=o("roberta"),QDo=o(" \u2014 "),NO=a("a"),WDo=o("RobertaForQuestionAnswering"),HDo=o(" (RoBERTa model)"),UDo=l(),dF=a("li"),lge=a("strong"),JDo=o("roformer"),YDo=o(" \u2014 "),jO=a("a"),KDo=o("RoFormerForQuestionAnswering"),ZDo=o(" (RoFormer model)"),eGo=l(),cF=a("li"),ige=a("strong"),oGo=o("splinter"),rGo=o(" \u2014 "),DO=a("a"),tGo=o("SplinterForQuestionAnswering"),aGo=o(" (Splinter model)"),nGo=l(),fF=a("li"),dge=a("strong"),sGo=o("squeezebert"),lGo=o(" \u2014 "),GO=a("a"),iGo=o("SqueezeBertForQuestionAnswering"),dGo=o(" (SqueezeBERT model)"),cGo=l(),mF=a("li"),cge=a("strong"),fGo=o("xlm"),mGo=o(" \u2014 "),OO=a("a"),gGo=o("XLMForQuestionAnsweringSimple"),hGo=o(" (XLM model)"),pGo=l(),gF=a("li"),fge=a("strong"),uGo=o("xlm-roberta"),_Go=o(" \u2014 "),VO=a("a"),bGo=o("XLMRobertaForQuestionAnswering"),vGo=o(" (XLM-RoBERTa model)"),FGo=l(),hF=a("li"),mge=a("strong"),TGo=o("xlm-roberta-xl"),MGo=o(" \u2014 "),XO=a("a"),EGo=o("XLMRobertaXLForQuestionAnswering"),CGo=o(" (XLM-RoBERTa-XL model)"),wGo=l(),pF=a("li"),gge=a("strong"),AGo=o("xlnet"),yGo=o(" \u2014 "),zO=a("a"),LGo=o("XLNetForQuestionAnsweringSimple"),xGo=o(" (XLNet model)"),$Go=l(),uF=a("li"),hge=a("strong"),kGo=o("yoso"),SGo=o(" \u2014 "),QO=a("a"),RGo=o("YosoForQuestionAnswering"),BGo=o(" (YOSO model)"),PGo=l(),_F=a("p"),IGo=o("The model is set in evaluation mode by default using "),pge=a("code"),qGo=o("model.eval()"),NGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),jGo=o("model.train()"),DGo=l(),F(bF.$$.fragment),yPe=l(),Yi=a("h2"),vF=a("a"),_ge=a("span"),F(s6.$$.fragment),GGo=l(),bge=a("span"),OGo=o("AutoModelForTableQuestionAnswering"),LPe=l(),No=a("div"),F(l6.$$.fragment),VGo=l(),Ki=a("p"),XGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WO=a("a"),zGo=o("from_pretrained()"),QGo=o(" class method or the "),HO=a("a"),WGo=o("from_config()"),HGo=o(` class
method.`),UGo=l(),i6=a("p"),JGo=o("This class cannot be instantiated directly using "),vge=a("code"),YGo=o("__init__()"),KGo=o(" (throws an error)."),ZGo=l(),ft=a("div"),F(d6.$$.fragment),eOo=l(),Fge=a("p"),oOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rOo=l(),Zi=a("p"),tOo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),aOo=o("not"),nOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),sOo=o("from_pretrained()"),lOo=o(" to load the model weights."),iOo=l(),F(FF.$$.fragment),dOo=l(),ao=a("div"),F(c6.$$.fragment),cOo=l(),Mge=a("p"),fOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mOo=l(),Ia=a("p"),gOo=o("The model class to instantiate is selected based on the "),Ege=a("code"),hOo=o("model_type"),pOo=o(` property of the config object (either
passed as an argument or loaded from `),Cge=a("code"),uOo=o("pretrained_model_name_or_path"),_Oo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),bOo=o("pretrained_model_name_or_path"),vOo=o(":"),FOo=l(),Age=a("ul"),TF=a("li"),yge=a("strong"),TOo=o("tapas"),MOo=o(" \u2014 "),JO=a("a"),EOo=o("TapasForQuestionAnswering"),COo=o(" (TAPAS model)"),wOo=l(),MF=a("p"),AOo=o("The model is set in evaluation mode by default using "),Lge=a("code"),yOo=o("model.eval()"),LOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),xOo=o("model.train()"),$Oo=l(),F(EF.$$.fragment),xPe=l(),ed=a("h2"),CF=a("a"),$ge=a("span"),F(f6.$$.fragment),kOo=l(),kge=a("span"),SOo=o("AutoModelForImageClassification"),$Pe=l(),jo=a("div"),F(m6.$$.fragment),ROo=l(),od=a("p"),BOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YO=a("a"),POo=o("from_pretrained()"),IOo=o(" class method or the "),KO=a("a"),qOo=o("from_config()"),NOo=o(` class
method.`),jOo=l(),g6=a("p"),DOo=o("This class cannot be instantiated directly using "),Sge=a("code"),GOo=o("__init__()"),OOo=o(" (throws an error)."),VOo=l(),mt=a("div"),F(h6.$$.fragment),XOo=l(),Rge=a("p"),zOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QOo=l(),rd=a("p"),WOo=o(`Note:
Loading a model from its configuration file does `),Bge=a("strong"),HOo=o("not"),UOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),JOo=o("from_pretrained()"),YOo=o(" to load the model weights."),KOo=l(),F(wF.$$.fragment),ZOo=l(),no=a("div"),F(p6.$$.fragment),eVo=l(),Pge=a("p"),oVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rVo=l(),qa=a("p"),tVo=o("The model class to instantiate is selected based on the "),Ige=a("code"),aVo=o("model_type"),nVo=o(` property of the config object (either
passed as an argument or loaded from `),qge=a("code"),sVo=o("pretrained_model_name_or_path"),lVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=a("code"),iVo=o("pretrained_model_name_or_path"),dVo=o(":"),cVo=l(),ve=a("ul"),AF=a("li"),jge=a("strong"),fVo=o("beit"),mVo=o(" \u2014 "),eV=a("a"),gVo=o("BeitForImageClassification"),hVo=o(" (BEiT model)"),pVo=l(),yF=a("li"),Dge=a("strong"),uVo=o("convnext"),_Vo=o(" \u2014 "),oV=a("a"),bVo=o("ConvNextForImageClassification"),vVo=o(" (ConvNext model)"),FVo=l(),LF=a("li"),Gge=a("strong"),TVo=o("data2vec-vision"),MVo=o(" \u2014 "),rV=a("a"),EVo=o("Data2VecVisionForImageClassification"),CVo=o(" (Data2VecVision model)"),wVo=l(),Rs=a("li"),Oge=a("strong"),AVo=o("deit"),yVo=o(" \u2014 "),tV=a("a"),LVo=o("DeiTForImageClassification"),xVo=o(" or "),aV=a("a"),$Vo=o("DeiTForImageClassificationWithTeacher"),kVo=o(" (DeiT model)"),SVo=l(),xF=a("li"),Vge=a("strong"),RVo=o("imagegpt"),BVo=o(" \u2014 "),nV=a("a"),PVo=o("ImageGPTForImageClassification"),IVo=o(" (ImageGPT model)"),qVo=l(),gt=a("li"),Xge=a("strong"),NVo=o("perceiver"),jVo=o(" \u2014 "),sV=a("a"),DVo=o("PerceiverForImageClassificationLearned"),GVo=o(" or "),lV=a("a"),OVo=o("PerceiverForImageClassificationFourier"),VVo=o(" or "),iV=a("a"),XVo=o("PerceiverForImageClassificationConvProcessing"),zVo=o(" (Perceiver model)"),QVo=l(),$F=a("li"),zge=a("strong"),WVo=o("poolformer"),HVo=o(" \u2014 "),dV=a("a"),UVo=o("PoolFormerForImageClassification"),JVo=o(" (PoolFormer model)"),YVo=l(),kF=a("li"),Qge=a("strong"),KVo=o("regnet"),ZVo=o(" \u2014 "),cV=a("a"),eXo=o("RegNetForImageClassification"),oXo=o(" (RegNet model)"),rXo=l(),SF=a("li"),Wge=a("strong"),tXo=o("resnet"),aXo=o(" \u2014 "),fV=a("a"),nXo=o("ResNetForImageClassification"),sXo=o(" (ResNet model)"),lXo=l(),RF=a("li"),Hge=a("strong"),iXo=o("segformer"),dXo=o(" \u2014 "),mV=a("a"),cXo=o("SegformerForImageClassification"),fXo=o(" (SegFormer model)"),mXo=l(),BF=a("li"),Uge=a("strong"),gXo=o("swin"),hXo=o(" \u2014 "),gV=a("a"),pXo=o("SwinForImageClassification"),uXo=o(" (Swin model)"),_Xo=l(),PF=a("li"),Jge=a("strong"),bXo=o("van"),vXo=o(" \u2014 "),hV=a("a"),FXo=o("VanForImageClassification"),TXo=o(" (VAN model)"),MXo=l(),IF=a("li"),Yge=a("strong"),EXo=o("vit"),CXo=o(" \u2014 "),pV=a("a"),wXo=o("ViTForImageClassification"),AXo=o(" (ViT model)"),yXo=l(),qF=a("p"),LXo=o("The model is set in evaluation mode by default using "),Kge=a("code"),xXo=o("model.eval()"),$Xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=a("code"),kXo=o("model.train()"),SXo=l(),F(NF.$$.fragment),kPe=l(),td=a("h2"),jF=a("a"),ehe=a("span"),F(u6.$$.fragment),RXo=l(),ohe=a("span"),BXo=o("AutoModelForVision2Seq"),SPe=l(),Do=a("div"),F(_6.$$.fragment),PXo=l(),ad=a("p"),IXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uV=a("a"),qXo=o("from_pretrained()"),NXo=o(" class method or the "),_V=a("a"),jXo=o("from_config()"),DXo=o(` class
method.`),GXo=l(),b6=a("p"),OXo=o("This class cannot be instantiated directly using "),rhe=a("code"),VXo=o("__init__()"),XXo=o(" (throws an error)."),zXo=l(),ht=a("div"),F(v6.$$.fragment),QXo=l(),the=a("p"),WXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HXo=l(),nd=a("p"),UXo=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),JXo=o("not"),YXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=a("a"),KXo=o("from_pretrained()"),ZXo=o(" to load the model weights."),ezo=l(),F(DF.$$.fragment),ozo=l(),so=a("div"),F(F6.$$.fragment),rzo=l(),nhe=a("p"),tzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),azo=l(),Na=a("p"),nzo=o("The model class to instantiate is selected based on the "),she=a("code"),szo=o("model_type"),lzo=o(` property of the config object (either
passed as an argument or loaded from `),lhe=a("code"),izo=o("pretrained_model_name_or_path"),dzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=a("code"),czo=o("pretrained_model_name_or_path"),fzo=o(":"),mzo=l(),dhe=a("ul"),GF=a("li"),che=a("strong"),gzo=o("vision-encoder-decoder"),hzo=o(" \u2014 "),vV=a("a"),pzo=o("VisionEncoderDecoderModel"),uzo=o(" (Vision Encoder decoder model)"),_zo=l(),OF=a("p"),bzo=o("The model is set in evaluation mode by default using "),fhe=a("code"),vzo=o("model.eval()"),Fzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=a("code"),Tzo=o("model.train()"),Mzo=l(),F(VF.$$.fragment),RPe=l(),sd=a("h2"),XF=a("a"),ghe=a("span"),F(T6.$$.fragment),Ezo=l(),hhe=a("span"),Czo=o("AutoModelForAudioClassification"),BPe=l(),Go=a("div"),F(M6.$$.fragment),wzo=l(),ld=a("p"),Azo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FV=a("a"),yzo=o("from_pretrained()"),Lzo=o(" class method or the "),TV=a("a"),xzo=o("from_config()"),$zo=o(` class
method.`),kzo=l(),E6=a("p"),Szo=o("This class cannot be instantiated directly using "),phe=a("code"),Rzo=o("__init__()"),Bzo=o(" (throws an error)."),Pzo=l(),pt=a("div"),F(C6.$$.fragment),Izo=l(),uhe=a("p"),qzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Nzo=l(),id=a("p"),jzo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),Dzo=o("not"),Gzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),Ozo=o("from_pretrained()"),Vzo=o(" to load the model weights."),Xzo=l(),F(zF.$$.fragment),zzo=l(),lo=a("div"),F(w6.$$.fragment),Qzo=l(),bhe=a("p"),Wzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Hzo=l(),ja=a("p"),Uzo=o("The model class to instantiate is selected based on the "),vhe=a("code"),Jzo=o("model_type"),Yzo=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),Kzo=o("pretrained_model_name_or_path"),Zzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(":"),rQo=l(),Ne=a("ul"),QF=a("li"),Mhe=a("strong"),tQo=o("data2vec-audio"),aQo=o(" \u2014 "),EV=a("a"),nQo=o("Data2VecAudioForSequenceClassification"),sQo=o(" (Data2VecAudio model)"),lQo=l(),WF=a("li"),Ehe=a("strong"),iQo=o("hubert"),dQo=o(" \u2014 "),CV=a("a"),cQo=o("HubertForSequenceClassification"),fQo=o(" (Hubert model)"),mQo=l(),HF=a("li"),Che=a("strong"),gQo=o("sew"),hQo=o(" \u2014 "),wV=a("a"),pQo=o("SEWForSequenceClassification"),uQo=o(" (SEW model)"),_Qo=l(),UF=a("li"),whe=a("strong"),bQo=o("sew-d"),vQo=o(" \u2014 "),AV=a("a"),FQo=o("SEWDForSequenceClassification"),TQo=o(" (SEW-D model)"),MQo=l(),JF=a("li"),Ahe=a("strong"),EQo=o("unispeech"),CQo=o(" \u2014 "),yV=a("a"),wQo=o("UniSpeechForSequenceClassification"),AQo=o(" (UniSpeech model)"),yQo=l(),YF=a("li"),yhe=a("strong"),LQo=o("unispeech-sat"),xQo=o(" \u2014 "),LV=a("a"),$Qo=o("UniSpeechSatForSequenceClassification"),kQo=o(" (UniSpeechSat model)"),SQo=l(),KF=a("li"),Lhe=a("strong"),RQo=o("wav2vec2"),BQo=o(" \u2014 "),xV=a("a"),PQo=o("Wav2Vec2ForSequenceClassification"),IQo=o(" (Wav2Vec2 model)"),qQo=l(),ZF=a("li"),xhe=a("strong"),NQo=o("wavlm"),jQo=o(" \u2014 "),$V=a("a"),DQo=o("WavLMForSequenceClassification"),GQo=o(" (WavLM model)"),OQo=l(),e0=a("p"),VQo=o("The model is set in evaluation mode by default using "),$he=a("code"),XQo=o("model.eval()"),zQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),QQo=o("model.train()"),WQo=l(),F(o0.$$.fragment),PPe=l(),dd=a("h2"),r0=a("a"),She=a("span"),F(A6.$$.fragment),HQo=l(),Rhe=a("span"),UQo=o("AutoModelForAudioFrameClassification"),IPe=l(),Oo=a("div"),F(y6.$$.fragment),JQo=l(),cd=a("p"),YQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),kV=a("a"),KQo=o("from_pretrained()"),ZQo=o(" class method or the "),SV=a("a"),eWo=o("from_config()"),oWo=o(` class
method.`),rWo=l(),L6=a("p"),tWo=o("This class cannot be instantiated directly using "),Bhe=a("code"),aWo=o("__init__()"),nWo=o(" (throws an error)."),sWo=l(),ut=a("div"),F(x6.$$.fragment),lWo=l(),Phe=a("p"),iWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),dWo=l(),fd=a("p"),cWo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),fWo=o("not"),mWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),gWo=o("from_pretrained()"),hWo=o(" to load the model weights."),pWo=l(),F(t0.$$.fragment),uWo=l(),io=a("div"),F($6.$$.fragment),_Wo=l(),qhe=a("p"),bWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vWo=l(),Da=a("p"),FWo=o("The model class to instantiate is selected based on the "),Nhe=a("code"),TWo=o("model_type"),MWo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),EWo=o("pretrained_model_name_or_path"),CWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(":"),yWo=l(),Ga=a("ul"),a0=a("li"),Ghe=a("strong"),LWo=o("data2vec-audio"),xWo=o(" \u2014 "),BV=a("a"),$Wo=o("Data2VecAudioForAudioFrameClassification"),kWo=o(" (Data2VecAudio model)"),SWo=l(),n0=a("li"),Ohe=a("strong"),RWo=o("unispeech-sat"),BWo=o(" \u2014 "),PV=a("a"),PWo=o("UniSpeechSatForAudioFrameClassification"),IWo=o(" (UniSpeechSat model)"),qWo=l(),s0=a("li"),Vhe=a("strong"),NWo=o("wav2vec2"),jWo=o(" \u2014 "),IV=a("a"),DWo=o("Wav2Vec2ForAudioFrameClassification"),GWo=o(" (Wav2Vec2 model)"),OWo=l(),l0=a("li"),Xhe=a("strong"),VWo=o("wavlm"),XWo=o(" \u2014 "),qV=a("a"),zWo=o("WavLMForAudioFrameClassification"),QWo=o(" (WavLM model)"),WWo=l(),i0=a("p"),HWo=o("The model is set in evaluation mode by default using "),zhe=a("code"),UWo=o("model.eval()"),JWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=a("code"),YWo=o("model.train()"),KWo=l(),F(d0.$$.fragment),qPe=l(),md=a("h2"),c0=a("a"),Whe=a("span"),F(k6.$$.fragment),ZWo=l(),Hhe=a("span"),eHo=o("AutoModelForCTC"),NPe=l(),Vo=a("div"),F(S6.$$.fragment),oHo=l(),gd=a("p"),rHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NV=a("a"),tHo=o("from_pretrained()"),aHo=o(" class method or the "),jV=a("a"),nHo=o("from_config()"),sHo=o(` class
method.`),lHo=l(),R6=a("p"),iHo=o("This class cannot be instantiated directly using "),Uhe=a("code"),dHo=o("__init__()"),cHo=o(" (throws an error)."),fHo=l(),_t=a("div"),F(B6.$$.fragment),mHo=l(),Jhe=a("p"),gHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),hHo=l(),hd=a("p"),pHo=o(`Note:
Loading a model from its configuration file does `),Yhe=a("strong"),uHo=o("not"),_Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),bHo=o("from_pretrained()"),vHo=o(" to load the model weights."),FHo=l(),F(f0.$$.fragment),THo=l(),co=a("div"),F(P6.$$.fragment),MHo=l(),Khe=a("p"),EHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),CHo=l(),Oa=a("p"),wHo=o("The model class to instantiate is selected based on the "),Zhe=a("code"),AHo=o("model_type"),yHo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),LHo=o("pretrained_model_name_or_path"),xHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),$Ho=o("pretrained_model_name_or_path"),kHo=o(":"),SHo=l(),je=a("ul"),m0=a("li"),rpe=a("strong"),RHo=o("data2vec-audio"),BHo=o(" \u2014 "),GV=a("a"),PHo=o("Data2VecAudioForCTC"),IHo=o(" (Data2VecAudio model)"),qHo=l(),g0=a("li"),tpe=a("strong"),NHo=o("hubert"),jHo=o(" \u2014 "),OV=a("a"),DHo=o("HubertForCTC"),GHo=o(" (Hubert model)"),OHo=l(),h0=a("li"),ape=a("strong"),VHo=o("sew"),XHo=o(" \u2014 "),VV=a("a"),zHo=o("SEWForCTC"),QHo=o(" (SEW model)"),WHo=l(),p0=a("li"),npe=a("strong"),HHo=o("sew-d"),UHo=o(" \u2014 "),XV=a("a"),JHo=o("SEWDForCTC"),YHo=o(" (SEW-D model)"),KHo=l(),u0=a("li"),spe=a("strong"),ZHo=o("unispeech"),eUo=o(" \u2014 "),zV=a("a"),oUo=o("UniSpeechForCTC"),rUo=o(" (UniSpeech model)"),tUo=l(),_0=a("li"),lpe=a("strong"),aUo=o("unispeech-sat"),nUo=o(" \u2014 "),QV=a("a"),sUo=o("UniSpeechSatForCTC"),lUo=o(" (UniSpeechSat model)"),iUo=l(),b0=a("li"),ipe=a("strong"),dUo=o("wav2vec2"),cUo=o(" \u2014 "),WV=a("a"),fUo=o("Wav2Vec2ForCTC"),mUo=o(" (Wav2Vec2 model)"),gUo=l(),v0=a("li"),dpe=a("strong"),hUo=o("wavlm"),pUo=o(" \u2014 "),HV=a("a"),uUo=o("WavLMForCTC"),_Uo=o(" (WavLM model)"),bUo=l(),F0=a("p"),vUo=o("The model is set in evaluation mode by default using "),cpe=a("code"),FUo=o("model.eval()"),TUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=a("code"),MUo=o("model.train()"),EUo=l(),F(T0.$$.fragment),jPe=l(),pd=a("h2"),M0=a("a"),mpe=a("span"),F(I6.$$.fragment),CUo=l(),gpe=a("span"),wUo=o("AutoModelForSpeechSeq2Seq"),DPe=l(),Xo=a("div"),F(q6.$$.fragment),AUo=l(),ud=a("p"),yUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UV=a("a"),LUo=o("from_pretrained()"),xUo=o(" class method or the "),JV=a("a"),$Uo=o("from_config()"),kUo=o(` class
method.`),SUo=l(),N6=a("p"),RUo=o("This class cannot be instantiated directly using "),hpe=a("code"),BUo=o("__init__()"),PUo=o(" (throws an error)."),IUo=l(),bt=a("div"),F(j6.$$.fragment),qUo=l(),ppe=a("p"),NUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jUo=l(),_d=a("p"),DUo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),GUo=o("not"),OUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),VUo=o("from_pretrained()"),XUo=o(" to load the model weights."),zUo=l(),F(E0.$$.fragment),QUo=l(),fo=a("div"),F(D6.$$.fragment),WUo=l(),_pe=a("p"),HUo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UUo=l(),Va=a("p"),JUo=o("The model class to instantiate is selected based on the "),bpe=a("code"),YUo=o("model_type"),KUo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),ZUo=o("pretrained_model_name_or_path"),eJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),oJo=o("pretrained_model_name_or_path"),rJo=o(":"),tJo=l(),G6=a("ul"),C0=a("li"),Tpe=a("strong"),aJo=o("speech-encoder-decoder"),nJo=o(" \u2014 "),KV=a("a"),sJo=o("SpeechEncoderDecoderModel"),lJo=o(" (Speech Encoder decoder model)"),iJo=l(),w0=a("li"),Mpe=a("strong"),dJo=o("speech_to_text"),cJo=o(" \u2014 "),ZV=a("a"),fJo=o("Speech2TextForConditionalGeneration"),mJo=o(" (Speech2Text model)"),gJo=l(),A0=a("p"),hJo=o("The model is set in evaluation mode by default using "),Epe=a("code"),pJo=o("model.eval()"),uJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),_Jo=o("model.train()"),bJo=l(),F(y0.$$.fragment),GPe=l(),bd=a("h2"),L0=a("a"),wpe=a("span"),F(O6.$$.fragment),vJo=l(),Ape=a("span"),FJo=o("AutoModelForAudioXVector"),OPe=l(),zo=a("div"),F(V6.$$.fragment),TJo=l(),vd=a("p"),MJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eX=a("a"),EJo=o("from_pretrained()"),CJo=o(" class method or the "),oX=a("a"),wJo=o("from_config()"),AJo=o(` class
method.`),yJo=l(),X6=a("p"),LJo=o("This class cannot be instantiated directly using "),ype=a("code"),xJo=o("__init__()"),$Jo=o(" (throws an error)."),kJo=l(),vt=a("div"),F(z6.$$.fragment),SJo=l(),Lpe=a("p"),RJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),BJo=l(),Fd=a("p"),PJo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),IJo=o("not"),qJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),NJo=o("from_pretrained()"),jJo=o(" to load the model weights."),DJo=l(),F(x0.$$.fragment),GJo=l(),mo=a("div"),F(Q6.$$.fragment),OJo=l(),$pe=a("p"),VJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),XJo=l(),Xa=a("p"),zJo=o("The model class to instantiate is selected based on the "),kpe=a("code"),QJo=o("model_type"),WJo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),HJo=o("pretrained_model_name_or_path"),UJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),JJo=o("pretrained_model_name_or_path"),YJo=o(":"),KJo=l(),za=a("ul"),$0=a("li"),Bpe=a("strong"),ZJo=o("data2vec-audio"),eYo=o(" \u2014 "),tX=a("a"),oYo=o("Data2VecAudioForXVector"),rYo=o(" (Data2VecAudio model)"),tYo=l(),k0=a("li"),Ppe=a("strong"),aYo=o("unispeech-sat"),nYo=o(" \u2014 "),aX=a("a"),sYo=o("UniSpeechSatForXVector"),lYo=o(" (UniSpeechSat model)"),iYo=l(),S0=a("li"),Ipe=a("strong"),dYo=o("wav2vec2"),cYo=o(" \u2014 "),nX=a("a"),fYo=o("Wav2Vec2ForXVector"),mYo=o(" (Wav2Vec2 model)"),gYo=l(),R0=a("li"),qpe=a("strong"),hYo=o("wavlm"),pYo=o(" \u2014 "),sX=a("a"),uYo=o("WavLMForXVector"),_Yo=o(" (WavLM model)"),bYo=l(),B0=a("p"),vYo=o("The model is set in evaluation mode by default using "),Npe=a("code"),FYo=o("model.eval()"),TYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=a("code"),MYo=o("model.train()"),EYo=l(),F(P0.$$.fragment),VPe=l(),Td=a("h2"),I0=a("a"),Dpe=a("span"),F(W6.$$.fragment),CYo=l(),Gpe=a("span"),wYo=o("AutoModelForMaskedImageModeling"),XPe=l(),Qo=a("div"),F(H6.$$.fragment),AYo=l(),Md=a("p"),yYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lX=a("a"),LYo=o("from_pretrained()"),xYo=o(" class method or the "),iX=a("a"),$Yo=o("from_config()"),kYo=o(` class
method.`),SYo=l(),U6=a("p"),RYo=o("This class cannot be instantiated directly using "),Ope=a("code"),BYo=o("__init__()"),PYo=o(" (throws an error)."),IYo=l(),Ft=a("div"),F(J6.$$.fragment),qYo=l(),Vpe=a("p"),NYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),jYo=l(),Ed=a("p"),DYo=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),GYo=o("not"),OYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),VYo=o("from_pretrained()"),XYo=o(" to load the model weights."),zYo=l(),F(q0.$$.fragment),QYo=l(),go=a("div"),F(Y6.$$.fragment),WYo=l(),zpe=a("p"),HYo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),UYo=l(),Qa=a("p"),JYo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),YYo=o("model_type"),KYo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),ZYo=o("pretrained_model_name_or_path"),eKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(":"),tKo=l(),Cd=a("ul"),N0=a("li"),Upe=a("strong"),aKo=o("deit"),nKo=o(" \u2014 "),cX=a("a"),sKo=o("DeiTForMaskedImageModeling"),lKo=o(" (DeiT model)"),iKo=l(),j0=a("li"),Jpe=a("strong"),dKo=o("swin"),cKo=o(" \u2014 "),fX=a("a"),fKo=o("SwinForMaskedImageModeling"),mKo=o(" (Swin model)"),gKo=l(),D0=a("li"),Ype=a("strong"),hKo=o("vit"),pKo=o(" \u2014 "),mX=a("a"),uKo=o("ViTForMaskedImageModeling"),_Ko=o(" (ViT model)"),bKo=l(),G0=a("p"),vKo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),FKo=o("model.eval()"),TKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),MKo=o("model.train()"),EKo=l(),F(O0.$$.fragment),zPe=l(),wd=a("h2"),V0=a("a"),eue=a("span"),F(K6.$$.fragment),CKo=l(),oue=a("span"),wKo=o("AutoModelForObjectDetection"),QPe=l(),Wo=a("div"),F(Z6.$$.fragment),AKo=l(),Ad=a("p"),yKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gX=a("a"),LKo=o("from_pretrained()"),xKo=o(" class method or the "),hX=a("a"),$Ko=o("from_config()"),kKo=o(` class
method.`),SKo=l(),ey=a("p"),RKo=o("This class cannot be instantiated directly using "),rue=a("code"),BKo=o("__init__()"),PKo=o(" (throws an error)."),IKo=l(),Tt=a("div"),F(oy.$$.fragment),qKo=l(),tue=a("p"),NKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),jKo=l(),yd=a("p"),DKo=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),GKo=o("not"),OKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),VKo=o("from_pretrained()"),XKo=o(" to load the model weights."),zKo=l(),F(X0.$$.fragment),QKo=l(),ho=a("div"),F(ry.$$.fragment),WKo=l(),nue=a("p"),HKo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),UKo=l(),Wa=a("p"),JKo=o("The model class to instantiate is selected based on the "),sue=a("code"),YKo=o("model_type"),KKo=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),ZKo=o("pretrained_model_name_or_path"),eZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(":"),tZo=l(),ty=a("ul"),z0=a("li"),due=a("strong"),aZo=o("detr"),nZo=o(" \u2014 "),uX=a("a"),sZo=o("DetrForObjectDetection"),lZo=o(" (DETR model)"),iZo=l(),Q0=a("li"),cue=a("strong"),dZo=o("yolos"),cZo=o(" \u2014 "),_X=a("a"),fZo=o("YolosForObjectDetection"),mZo=o(" (YOLOS model)"),gZo=l(),W0=a("p"),hZo=o("The model is set in evaluation mode by default using "),fue=a("code"),pZo=o("model.eval()"),uZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=a("code"),_Zo=o("model.train()"),bZo=l(),F(H0.$$.fragment),WPe=l(),Ld=a("h2"),U0=a("a"),gue=a("span"),F(ay.$$.fragment),vZo=l(),hue=a("span"),FZo=o("AutoModelForImageSegmentation"),HPe=l(),Ho=a("div"),F(ny.$$.fragment),TZo=l(),xd=a("p"),MZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bX=a("a"),EZo=o("from_pretrained()"),CZo=o(" class method or the "),vX=a("a"),wZo=o("from_config()"),AZo=o(` class
method.`),yZo=l(),sy=a("p"),LZo=o("This class cannot be instantiated directly using "),pue=a("code"),xZo=o("__init__()"),$Zo=o(" (throws an error)."),kZo=l(),Mt=a("div"),F(ly.$$.fragment),SZo=l(),uue=a("p"),RZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),BZo=l(),$d=a("p"),PZo=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),IZo=o("not"),qZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),NZo=o("from_pretrained()"),jZo=o(" to load the model weights."),DZo=l(),F(J0.$$.fragment),GZo=l(),po=a("div"),F(iy.$$.fragment),OZo=l(),bue=a("p"),VZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),XZo=l(),Ha=a("p"),zZo=o("The model class to instantiate is selected based on the "),vue=a("code"),QZo=o("model_type"),WZo=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),HZo=o("pretrained_model_name_or_path"),UZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),JZo=o("pretrained_model_name_or_path"),YZo=o(":"),KZo=l(),Mue=a("ul"),Y0=a("li"),Eue=a("strong"),ZZo=o("detr"),eer=o(" \u2014 "),TX=a("a"),oer=o("DetrForSegmentation"),rer=o(" (DETR model)"),ter=l(),K0=a("p"),aer=o("The model is set in evaluation mode by default using "),Cue=a("code"),ner=o("model.eval()"),ser=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),ler=o("model.train()"),ier=l(),F(Z0.$$.fragment),UPe=l(),kd=a("h2"),eT=a("a"),Aue=a("span"),F(dy.$$.fragment),der=l(),yue=a("span"),cer=o("AutoModelForSemanticSegmentation"),JPe=l(),Uo=a("div"),F(cy.$$.fragment),fer=l(),Sd=a("p"),mer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),MX=a("a"),ger=o("from_pretrained()"),her=o(" class method or the "),EX=a("a"),per=o("from_config()"),uer=o(` class
method.`),_er=l(),fy=a("p"),ber=o("This class cannot be instantiated directly using "),Lue=a("code"),ver=o("__init__()"),Fer=o(" (throws an error)."),Ter=l(),Et=a("div"),F(my.$$.fragment),Mer=l(),xue=a("p"),Eer=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Cer=l(),Rd=a("p"),wer=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),Aer=o("not"),yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),Ler=o("from_pretrained()"),xer=o(" to load the model weights."),$er=l(),F(oT.$$.fragment),ker=l(),uo=a("div"),F(gy.$$.fragment),Ser=l(),kue=a("p"),Rer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ber=l(),Ua=a("p"),Per=o("The model class to instantiate is selected based on the "),Sue=a("code"),Ier=o("model_type"),qer=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),Ner=o("pretrained_model_name_or_path"),jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(":"),Oer=l(),Ja=a("ul"),rT=a("li"),Pue=a("strong"),Ver=o("beit"),Xer=o(" \u2014 "),wX=a("a"),zer=o("BeitForSemanticSegmentation"),Qer=o(" (BEiT model)"),Wer=l(),tT=a("li"),Iue=a("strong"),Her=o("data2vec-vision"),Uer=o(" \u2014 "),AX=a("a"),Jer=o("Data2VecVisionForSemanticSegmentation"),Yer=o(" (Data2VecVision model)"),Ker=l(),aT=a("li"),que=a("strong"),Zer=o("dpt"),eor=o(" \u2014 "),yX=a("a"),oor=o("DPTForSemanticSegmentation"),ror=o(" (DPT model)"),tor=l(),nT=a("li"),Nue=a("strong"),aor=o("segformer"),nor=o(" \u2014 "),LX=a("a"),sor=o("SegformerForSemanticSegmentation"),lor=o(" (SegFormer model)"),ior=l(),sT=a("p"),dor=o("The model is set in evaluation mode by default using "),jue=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),gor=o("model.train()"),hor=l(),F(lT.$$.fragment),YPe=l(),Bd=a("h2"),iT=a("a"),Gue=a("span"),F(hy.$$.fragment),por=l(),Oue=a("span"),uor=o("AutoModelForInstanceSegmentation"),KPe=l(),Jo=a("div"),F(py.$$.fragment),_or=l(),Pd=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xX=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),$X=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),uy=a("p"),Cor=o("This class cannot be instantiated directly using "),Vue=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),yor=l(),Ct=a("div"),F(_y.$$.fragment),Lor=l(),Xue=a("p"),xor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$or=l(),Id=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),Bor=o("from_pretrained()"),Por=o(" to load the model weights."),Ior=l(),F(dT.$$.fragment),qor=l(),_o=a("div"),F(by.$$.fragment),Nor=l(),Que=a("p"),jor=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Dor=l(),Ya=a("p"),Gor=o("The model class to instantiate is selected based on the "),Wue=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),Qor=o("pretrained_model_name_or_path"),Wor=o(":"),Hor=l(),Jue=a("ul"),cT=a("li"),Yue=a("strong"),Uor=o("maskformer"),Jor=o(" \u2014 "),SX=a("a"),Yor=o("MaskFormerForInstanceSegmentation"),Kor=o(" (MaskFormer model)"),Zor=l(),fT=a("p"),err=o("The model is set in evaluation mode by default using "),Kue=a("code"),orr=o("model.eval()"),rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=a("code"),trr=o("model.train()"),arr=l(),F(mT.$$.fragment),ZPe=l(),qd=a("h2"),gT=a("a"),e_e=a("span"),F(vy.$$.fragment),nrr=l(),o_e=a("span"),srr=o("TFAutoModel"),eIe=l(),Yo=a("div"),F(Fy.$$.fragment),lrr=l(),Nd=a("p"),irr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RX=a("a"),drr=o("from_pretrained()"),crr=o(" class method or the "),BX=a("a"),frr=o("from_config()"),mrr=o(` class
method.`),grr=l(),Ty=a("p"),hrr=o("This class cannot be instantiated directly using "),r_e=a("code"),prr=o("__init__()"),urr=o(" (throws an error)."),_rr=l(),wt=a("div"),F(My.$$.fragment),brr=l(),t_e=a("p"),vrr=o("Instantiates one of the base model classes of the library from a configuration."),Frr=l(),jd=a("p"),Trr=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),Mrr=o("not"),Err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),Crr=o("from_pretrained()"),wrr=o(" to load the model weights."),Arr=l(),F(hT.$$.fragment),yrr=l(),wr=a("div"),F(Ey.$$.fragment),Lrr=l(),n_e=a("p"),xrr=o("Instantiate one of the base model classes of the library from a pretrained model."),$rr=l(),Ka=a("p"),krr=o("The model class to instantiate is selected based on the "),s_e=a("code"),Srr=o("model_type"),Rrr=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),Brr=o("pretrained_model_name_or_path"),Prr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),Irr=o("pretrained_model_name_or_path"),qrr=o(":"),Nrr=l(),j=a("ul"),pT=a("li"),d_e=a("strong"),jrr=o("albert"),Drr=o(" \u2014 "),IX=a("a"),Grr=o("TFAlbertModel"),Orr=o(" (ALBERT model)"),Vrr=l(),uT=a("li"),c_e=a("strong"),Xrr=o("bart"),zrr=o(" \u2014 "),qX=a("a"),Qrr=o("TFBartModel"),Wrr=o(" (BART model)"),Hrr=l(),_T=a("li"),f_e=a("strong"),Urr=o("bert"),Jrr=o(" \u2014 "),NX=a("a"),Yrr=o("TFBertModel"),Krr=o(" (BERT model)"),Zrr=l(),bT=a("li"),m_e=a("strong"),etr=o("blenderbot"),otr=o(" \u2014 "),jX=a("a"),rtr=o("TFBlenderbotModel"),ttr=o(" (Blenderbot model)"),atr=l(),vT=a("li"),g_e=a("strong"),ntr=o("blenderbot-small"),str=o(" \u2014 "),DX=a("a"),ltr=o("TFBlenderbotSmallModel"),itr=o(" (BlenderbotSmall model)"),dtr=l(),FT=a("li"),h_e=a("strong"),ctr=o("camembert"),ftr=o(" \u2014 "),GX=a("a"),mtr=o("TFCamembertModel"),gtr=o(" (CamemBERT model)"),htr=l(),TT=a("li"),p_e=a("strong"),ptr=o("clip"),utr=o(" \u2014 "),OX=a("a"),_tr=o("TFCLIPModel"),btr=o(" (CLIP model)"),vtr=l(),MT=a("li"),u_e=a("strong"),Ftr=o("convbert"),Ttr=o(" \u2014 "),VX=a("a"),Mtr=o("TFConvBertModel"),Etr=o(" (ConvBERT model)"),Ctr=l(),ET=a("li"),__e=a("strong"),wtr=o("convnext"),Atr=o(" \u2014 "),XX=a("a"),ytr=o("TFConvNextModel"),Ltr=o(" (ConvNext model)"),xtr=l(),CT=a("li"),b_e=a("strong"),$tr=o("ctrl"),ktr=o(" \u2014 "),zX=a("a"),Str=o("TFCTRLModel"),Rtr=o(" (CTRL model)"),Btr=l(),wT=a("li"),v_e=a("strong"),Ptr=o("deberta"),Itr=o(" \u2014 "),QX=a("a"),qtr=o("TFDebertaModel"),Ntr=o(" (DeBERTa model)"),jtr=l(),AT=a("li"),F_e=a("strong"),Dtr=o("deberta-v2"),Gtr=o(" \u2014 "),WX=a("a"),Otr=o("TFDebertaV2Model"),Vtr=o(" (DeBERTa-v2 model)"),Xtr=l(),yT=a("li"),T_e=a("strong"),ztr=o("distilbert"),Qtr=o(" \u2014 "),HX=a("a"),Wtr=o("TFDistilBertModel"),Htr=o(" (DistilBERT model)"),Utr=l(),LT=a("li"),M_e=a("strong"),Jtr=o("dpr"),Ytr=o(" \u2014 "),UX=a("a"),Ktr=o("TFDPRQuestionEncoder"),Ztr=o(" (DPR model)"),ear=l(),xT=a("li"),E_e=a("strong"),oar=o("electra"),rar=o(" \u2014 "),JX=a("a"),tar=o("TFElectraModel"),aar=o(" (ELECTRA model)"),nar=l(),$T=a("li"),C_e=a("strong"),sar=o("flaubert"),lar=o(" \u2014 "),YX=a("a"),iar=o("TFFlaubertModel"),dar=o(" (FlauBERT model)"),car=l(),Bs=a("li"),w_e=a("strong"),far=o("funnel"),mar=o(" \u2014 "),KX=a("a"),gar=o("TFFunnelModel"),har=o(" or "),ZX=a("a"),par=o("TFFunnelBaseModel"),uar=o(" (Funnel Transformer model)"),_ar=l(),kT=a("li"),A_e=a("strong"),bar=o("gpt2"),Far=o(" \u2014 "),ez=a("a"),Tar=o("TFGPT2Model"),Mar=o(" (OpenAI GPT-2 model)"),Ear=l(),ST=a("li"),y_e=a("strong"),Car=o("gptj"),war=o(" \u2014 "),oz=a("a"),Aar=o("TFGPTJModel"),yar=o(" (GPT-J model)"),Lar=l(),RT=a("li"),L_e=a("strong"),xar=o("hubert"),$ar=o(" \u2014 "),rz=a("a"),kar=o("TFHubertModel"),Sar=o(" (Hubert model)"),Rar=l(),BT=a("li"),x_e=a("strong"),Bar=o("layoutlm"),Par=o(" \u2014 "),tz=a("a"),Iar=o("TFLayoutLMModel"),qar=o(" (LayoutLM model)"),Nar=l(),PT=a("li"),$_e=a("strong"),jar=o("led"),Dar=o(" \u2014 "),az=a("a"),Gar=o("TFLEDModel"),Oar=o(" (LED model)"),Var=l(),IT=a("li"),k_e=a("strong"),Xar=o("longformer"),zar=o(" \u2014 "),nz=a("a"),Qar=o("TFLongformerModel"),War=o(" (Longformer model)"),Har=l(),qT=a("li"),S_e=a("strong"),Uar=o("lxmert"),Jar=o(" \u2014 "),sz=a("a"),Yar=o("TFLxmertModel"),Kar=o(" (LXMERT model)"),Zar=l(),NT=a("li"),R_e=a("strong"),enr=o("marian"),onr=o(" \u2014 "),lz=a("a"),rnr=o("TFMarianModel"),tnr=o(" (Marian model)"),anr=l(),jT=a("li"),B_e=a("strong"),nnr=o("mbart"),snr=o(" \u2014 "),iz=a("a"),lnr=o("TFMBartModel"),inr=o(" (mBART model)"),dnr=l(),DT=a("li"),P_e=a("strong"),cnr=o("mobilebert"),fnr=o(" \u2014 "),dz=a("a"),mnr=o("TFMobileBertModel"),gnr=o(" (MobileBERT model)"),hnr=l(),GT=a("li"),I_e=a("strong"),pnr=o("mpnet"),unr=o(" \u2014 "),cz=a("a"),_nr=o("TFMPNetModel"),bnr=o(" (MPNet model)"),vnr=l(),OT=a("li"),q_e=a("strong"),Fnr=o("mt5"),Tnr=o(" \u2014 "),fz=a("a"),Mnr=o("TFMT5Model"),Enr=o(" (mT5 model)"),Cnr=l(),VT=a("li"),N_e=a("strong"),wnr=o("openai-gpt"),Anr=o(" \u2014 "),mz=a("a"),ynr=o("TFOpenAIGPTModel"),Lnr=o(" (OpenAI GPT model)"),xnr=l(),XT=a("li"),j_e=a("strong"),$nr=o("pegasus"),knr=o(" \u2014 "),gz=a("a"),Snr=o("TFPegasusModel"),Rnr=o(" (Pegasus model)"),Bnr=l(),zT=a("li"),D_e=a("strong"),Pnr=o("rembert"),Inr=o(" \u2014 "),hz=a("a"),qnr=o("TFRemBertModel"),Nnr=o(" (RemBERT model)"),jnr=l(),QT=a("li"),G_e=a("strong"),Dnr=o("roberta"),Gnr=o(" \u2014 "),pz=a("a"),Onr=o("TFRobertaModel"),Vnr=o(" (RoBERTa model)"),Xnr=l(),WT=a("li"),O_e=a("strong"),znr=o("roformer"),Qnr=o(" \u2014 "),uz=a("a"),Wnr=o("TFRoFormerModel"),Hnr=o(" (RoFormer model)"),Unr=l(),HT=a("li"),V_e=a("strong"),Jnr=o("speech_to_text"),Ynr=o(" \u2014 "),_z=a("a"),Knr=o("TFSpeech2TextModel"),Znr=o(" (Speech2Text model)"),esr=l(),UT=a("li"),X_e=a("strong"),osr=o("t5"),rsr=o(" \u2014 "),bz=a("a"),tsr=o("TFT5Model"),asr=o(" (T5 model)"),nsr=l(),JT=a("li"),z_e=a("strong"),ssr=o("tapas"),lsr=o(" \u2014 "),vz=a("a"),isr=o("TFTapasModel"),dsr=o(" (TAPAS model)"),csr=l(),YT=a("li"),Q_e=a("strong"),fsr=o("transfo-xl"),msr=o(" \u2014 "),Fz=a("a"),gsr=o("TFTransfoXLModel"),hsr=o(" (Transformer-XL model)"),psr=l(),KT=a("li"),W_e=a("strong"),usr=o("vit"),_sr=o(" \u2014 "),Tz=a("a"),bsr=o("TFViTModel"),vsr=o(" (ViT model)"),Fsr=l(),ZT=a("li"),H_e=a("strong"),Tsr=o("vit_mae"),Msr=o(" \u2014 "),Mz=a("a"),Esr=o("TFViTMAEModel"),Csr=o(" (ViTMAE model)"),wsr=l(),e7=a("li"),U_e=a("strong"),Asr=o("wav2vec2"),ysr=o(" \u2014 "),Ez=a("a"),Lsr=o("TFWav2Vec2Model"),xsr=o(" (Wav2Vec2 model)"),$sr=l(),o7=a("li"),J_e=a("strong"),ksr=o("xlm"),Ssr=o(" \u2014 "),Cz=a("a"),Rsr=o("TFXLMModel"),Bsr=o(" (XLM model)"),Psr=l(),r7=a("li"),Y_e=a("strong"),Isr=o("xlm-roberta"),qsr=o(" \u2014 "),wz=a("a"),Nsr=o("TFXLMRobertaModel"),jsr=o(" (XLM-RoBERTa model)"),Dsr=l(),t7=a("li"),K_e=a("strong"),Gsr=o("xlnet"),Osr=o(" \u2014 "),Az=a("a"),Vsr=o("TFXLNetModel"),Xsr=o(" (XLNet model)"),zsr=l(),F(a7.$$.fragment),oIe=l(),Dd=a("h2"),n7=a("a"),Z_e=a("span"),F(Cy.$$.fragment),Qsr=l(),e2e=a("span"),Wsr=o("TFAutoModelForPreTraining"),rIe=l(),Ko=a("div"),F(wy.$$.fragment),Hsr=l(),Gd=a("p"),Usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yz=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" class method or the "),Lz=a("a"),Ksr=o("from_config()"),Zsr=o(` class
method.`),elr=l(),Ay=a("p"),olr=o("This class cannot be instantiated directly using "),o2e=a("code"),rlr=o("__init__()"),tlr=o(" (throws an error)."),alr=l(),At=a("div"),F(yy.$$.fragment),nlr=l(),r2e=a("p"),slr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),llr=l(),Od=a("p"),ilr=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),dlr=o("not"),clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),flr=o("from_pretrained()"),mlr=o(" to load the model weights."),glr=l(),F(s7.$$.fragment),hlr=l(),Ar=a("div"),F(Ly.$$.fragment),plr=l(),a2e=a("p"),ulr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_lr=l(),Za=a("p"),blr=o("The model class to instantiate is selected based on the "),n2e=a("code"),vlr=o("model_type"),Flr=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),Tlr=o("pretrained_model_name_or_path"),Mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),Elr=o("pretrained_model_name_or_path"),Clr=o(":"),wlr=l(),ne=a("ul"),l7=a("li"),i2e=a("strong"),Alr=o("albert"),ylr=o(" \u2014 "),$z=a("a"),Llr=o("TFAlbertForPreTraining"),xlr=o(" (ALBERT model)"),$lr=l(),i7=a("li"),d2e=a("strong"),klr=o("bart"),Slr=o(" \u2014 "),kz=a("a"),Rlr=o("TFBartForConditionalGeneration"),Blr=o(" (BART model)"),Plr=l(),d7=a("li"),c2e=a("strong"),Ilr=o("bert"),qlr=o(" \u2014 "),Sz=a("a"),Nlr=o("TFBertForPreTraining"),jlr=o(" (BERT model)"),Dlr=l(),c7=a("li"),f2e=a("strong"),Glr=o("camembert"),Olr=o(" \u2014 "),Rz=a("a"),Vlr=o("TFCamembertForMaskedLM"),Xlr=o(" (CamemBERT model)"),zlr=l(),f7=a("li"),m2e=a("strong"),Qlr=o("ctrl"),Wlr=o(" \u2014 "),Bz=a("a"),Hlr=o("TFCTRLLMHeadModel"),Ulr=o(" (CTRL model)"),Jlr=l(),m7=a("li"),g2e=a("strong"),Ylr=o("distilbert"),Klr=o(" \u2014 "),Pz=a("a"),Zlr=o("TFDistilBertForMaskedLM"),eir=o(" (DistilBERT model)"),oir=l(),g7=a("li"),h2e=a("strong"),rir=o("electra"),tir=o(" \u2014 "),Iz=a("a"),air=o("TFElectraForPreTraining"),nir=o(" (ELECTRA model)"),sir=l(),h7=a("li"),p2e=a("strong"),lir=o("flaubert"),iir=o(" \u2014 "),qz=a("a"),dir=o("TFFlaubertWithLMHeadModel"),cir=o(" (FlauBERT model)"),fir=l(),p7=a("li"),u2e=a("strong"),mir=o("funnel"),gir=o(" \u2014 "),Nz=a("a"),hir=o("TFFunnelForPreTraining"),pir=o(" (Funnel Transformer model)"),uir=l(),u7=a("li"),_2e=a("strong"),_ir=o("gpt2"),bir=o(" \u2014 "),jz=a("a"),vir=o("TFGPT2LMHeadModel"),Fir=o(" (OpenAI GPT-2 model)"),Tir=l(),_7=a("li"),b2e=a("strong"),Mir=o("layoutlm"),Eir=o(" \u2014 "),Dz=a("a"),Cir=o("TFLayoutLMForMaskedLM"),wir=o(" (LayoutLM model)"),Air=l(),b7=a("li"),v2e=a("strong"),yir=o("lxmert"),Lir=o(" \u2014 "),Gz=a("a"),xir=o("TFLxmertForPreTraining"),$ir=o(" (LXMERT model)"),kir=l(),v7=a("li"),F2e=a("strong"),Sir=o("mobilebert"),Rir=o(" \u2014 "),Oz=a("a"),Bir=o("TFMobileBertForPreTraining"),Pir=o(" (MobileBERT model)"),Iir=l(),F7=a("li"),T2e=a("strong"),qir=o("mpnet"),Nir=o(" \u2014 "),Vz=a("a"),jir=o("TFMPNetForMaskedLM"),Dir=o(" (MPNet model)"),Gir=l(),T7=a("li"),M2e=a("strong"),Oir=o("openai-gpt"),Vir=o(" \u2014 "),Xz=a("a"),Xir=o("TFOpenAIGPTLMHeadModel"),zir=o(" (OpenAI GPT model)"),Qir=l(),M7=a("li"),E2e=a("strong"),Wir=o("roberta"),Hir=o(" \u2014 "),zz=a("a"),Uir=o("TFRobertaForMaskedLM"),Jir=o(" (RoBERTa model)"),Yir=l(),E7=a("li"),C2e=a("strong"),Kir=o("t5"),Zir=o(" \u2014 "),Qz=a("a"),edr=o("TFT5ForConditionalGeneration"),odr=o(" (T5 model)"),rdr=l(),C7=a("li"),w2e=a("strong"),tdr=o("tapas"),adr=o(" \u2014 "),Wz=a("a"),ndr=o("TFTapasForMaskedLM"),sdr=o(" (TAPAS model)"),ldr=l(),w7=a("li"),A2e=a("strong"),idr=o("transfo-xl"),ddr=o(" \u2014 "),Hz=a("a"),cdr=o("TFTransfoXLLMHeadModel"),fdr=o(" (Transformer-XL model)"),mdr=l(),A7=a("li"),y2e=a("strong"),gdr=o("vit_mae"),hdr=o(" \u2014 "),Uz=a("a"),pdr=o("TFViTMAEForPreTraining"),udr=o(" (ViTMAE model)"),_dr=l(),y7=a("li"),L2e=a("strong"),bdr=o("xlm"),vdr=o(" \u2014 "),Jz=a("a"),Fdr=o("TFXLMWithLMHeadModel"),Tdr=o(" (XLM model)"),Mdr=l(),L7=a("li"),x2e=a("strong"),Edr=o("xlm-roberta"),Cdr=o(" \u2014 "),Yz=a("a"),wdr=o("TFXLMRobertaForMaskedLM"),Adr=o(" (XLM-RoBERTa model)"),ydr=l(),x7=a("li"),$2e=a("strong"),Ldr=o("xlnet"),xdr=o(" \u2014 "),Kz=a("a"),$dr=o("TFXLNetLMHeadModel"),kdr=o(" (XLNet model)"),Sdr=l(),F($7.$$.fragment),tIe=l(),Vd=a("h2"),k7=a("a"),k2e=a("span"),F(xy.$$.fragment),Rdr=l(),S2e=a("span"),Bdr=o("TFAutoModelForCausalLM"),aIe=l(),Zo=a("div"),F($y.$$.fragment),Pdr=l(),Xd=a("p"),Idr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Zz=a("a"),qdr=o("from_pretrained()"),Ndr=o(" class method or the "),eQ=a("a"),jdr=o("from_config()"),Ddr=o(` class
method.`),Gdr=l(),ky=a("p"),Odr=o("This class cannot be instantiated directly using "),R2e=a("code"),Vdr=o("__init__()"),Xdr=o(" (throws an error)."),zdr=l(),yt=a("div"),F(Sy.$$.fragment),Qdr=l(),B2e=a("p"),Wdr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hdr=l(),zd=a("p"),Udr=o(`Note:
Loading a model from its configuration file does `),P2e=a("strong"),Jdr=o("not"),Ydr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),Kdr=o("from_pretrained()"),Zdr=o(" to load the model weights."),ecr=l(),F(S7.$$.fragment),ocr=l(),yr=a("div"),F(Ry.$$.fragment),rcr=l(),I2e=a("p"),tcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),acr=l(),en=a("p"),ncr=o("The model class to instantiate is selected based on the "),q2e=a("code"),scr=o("model_type"),lcr=o(` property of the config object (either
passed as an argument or loaded from `),N2e=a("code"),icr=o("pretrained_model_name_or_path"),dcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(":"),mcr=l(),Te=a("ul"),R7=a("li"),D2e=a("strong"),gcr=o("bert"),hcr=o(" \u2014 "),rQ=a("a"),pcr=o("TFBertLMHeadModel"),ucr=o(" (BERT model)"),_cr=l(),B7=a("li"),G2e=a("strong"),bcr=o("camembert"),vcr=o(" \u2014 "),tQ=a("a"),Fcr=o("TFCamembertForCausalLM"),Tcr=o(" (CamemBERT model)"),Mcr=l(),P7=a("li"),O2e=a("strong"),Ecr=o("ctrl"),Ccr=o(" \u2014 "),aQ=a("a"),wcr=o("TFCTRLLMHeadModel"),Acr=o(" (CTRL model)"),ycr=l(),I7=a("li"),V2e=a("strong"),Lcr=o("gpt2"),xcr=o(" \u2014 "),nQ=a("a"),$cr=o("TFGPT2LMHeadModel"),kcr=o(" (OpenAI GPT-2 model)"),Scr=l(),q7=a("li"),X2e=a("strong"),Rcr=o("gptj"),Bcr=o(" \u2014 "),sQ=a("a"),Pcr=o("TFGPTJForCausalLM"),Icr=o(" (GPT-J model)"),qcr=l(),N7=a("li"),z2e=a("strong"),Ncr=o("openai-gpt"),jcr=o(" \u2014 "),lQ=a("a"),Dcr=o("TFOpenAIGPTLMHeadModel"),Gcr=o(" (OpenAI GPT model)"),Ocr=l(),j7=a("li"),Q2e=a("strong"),Vcr=o("rembert"),Xcr=o(" \u2014 "),iQ=a("a"),zcr=o("TFRemBertForCausalLM"),Qcr=o(" (RemBERT model)"),Wcr=l(),D7=a("li"),W2e=a("strong"),Hcr=o("roberta"),Ucr=o(" \u2014 "),dQ=a("a"),Jcr=o("TFRobertaForCausalLM"),Ycr=o(" (RoBERTa model)"),Kcr=l(),G7=a("li"),H2e=a("strong"),Zcr=o("roformer"),efr=o(" \u2014 "),cQ=a("a"),ofr=o("TFRoFormerForCausalLM"),rfr=o(" (RoFormer model)"),tfr=l(),O7=a("li"),U2e=a("strong"),afr=o("transfo-xl"),nfr=o(" \u2014 "),fQ=a("a"),sfr=o("TFTransfoXLLMHeadModel"),lfr=o(" (Transformer-XL model)"),ifr=l(),V7=a("li"),J2e=a("strong"),dfr=o("xlm"),cfr=o(" \u2014 "),mQ=a("a"),ffr=o("TFXLMWithLMHeadModel"),mfr=o(" (XLM model)"),gfr=l(),X7=a("li"),Y2e=a("strong"),hfr=o("xlnet"),pfr=o(" \u2014 "),gQ=a("a"),ufr=o("TFXLNetLMHeadModel"),_fr=o(" (XLNet model)"),bfr=l(),F(z7.$$.fragment),nIe=l(),Qd=a("h2"),Q7=a("a"),K2e=a("span"),F(By.$$.fragment),vfr=l(),Z2e=a("span"),Ffr=o("TFAutoModelForImageClassification"),sIe=l(),er=a("div"),F(Py.$$.fragment),Tfr=l(),Wd=a("p"),Mfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hQ=a("a"),Efr=o("from_pretrained()"),Cfr=o(" class method or the "),pQ=a("a"),wfr=o("from_config()"),Afr=o(` class
method.`),yfr=l(),Iy=a("p"),Lfr=o("This class cannot be instantiated directly using "),e1e=a("code"),xfr=o("__init__()"),$fr=o(" (throws an error)."),kfr=l(),Lt=a("div"),F(qy.$$.fragment),Sfr=l(),o1e=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Bfr=l(),Hd=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),Ifr=o("not"),qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),Nfr=o("from_pretrained()"),jfr=o(" to load the model weights."),Dfr=l(),F(W7.$$.fragment),Gfr=l(),Lr=a("div"),F(Ny.$$.fragment),Ofr=l(),t1e=a("p"),Vfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xfr=l(),on=a("p"),zfr=o("The model class to instantiate is selected based on the "),a1e=a("code"),Qfr=o("model_type"),Wfr=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),Hfr=o("pretrained_model_name_or_path"),Ufr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),jy=a("ul"),H7=a("li"),l1e=a("strong"),Zfr=o("convnext"),emr=o(" \u2014 "),_Q=a("a"),omr=o("TFConvNextForImageClassification"),rmr=o(" (ConvNext model)"),tmr=l(),U7=a("li"),i1e=a("strong"),amr=o("vit"),nmr=o(" \u2014 "),bQ=a("a"),smr=o("TFViTForImageClassification"),lmr=o(" (ViT model)"),imr=l(),F(J7.$$.fragment),lIe=l(),Ud=a("h2"),Y7=a("a"),d1e=a("span"),F(Dy.$$.fragment),dmr=l(),c1e=a("span"),cmr=o("TFAutoModelForMaskedLM"),iIe=l(),or=a("div"),F(Gy.$$.fragment),fmr=l(),Jd=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vQ=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),FQ=a("a"),pmr=o("from_config()"),umr=o(` class
method.`),_mr=l(),Oy=a("p"),bmr=o("This class cannot be instantiated directly using "),f1e=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),xt=a("div"),F(Vy.$$.fragment),Mmr=l(),m1e=a("p"),Emr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cmr=l(),Yd=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),Amr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Lmr=o("from_pretrained()"),xmr=o(" to load the model weights."),$mr=l(),F(K7.$$.fragment),kmr=l(),xr=a("div"),F(Xy.$$.fragment),Smr=l(),h1e=a("p"),Rmr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bmr=l(),rn=a("p"),Pmr=o("The model class to instantiate is selected based on the "),p1e=a("code"),Imr=o("model_type"),qmr=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),Nmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),ie=a("ul"),Z7=a("li"),b1e=a("strong"),Vmr=o("albert"),Xmr=o(" \u2014 "),MQ=a("a"),zmr=o("TFAlbertForMaskedLM"),Qmr=o(" (ALBERT model)"),Wmr=l(),e9=a("li"),v1e=a("strong"),Hmr=o("bert"),Umr=o(" \u2014 "),EQ=a("a"),Jmr=o("TFBertForMaskedLM"),Ymr=o(" (BERT model)"),Kmr=l(),o9=a("li"),F1e=a("strong"),Zmr=o("camembert"),egr=o(" \u2014 "),CQ=a("a"),ogr=o("TFCamembertForMaskedLM"),rgr=o(" (CamemBERT model)"),tgr=l(),r9=a("li"),T1e=a("strong"),agr=o("convbert"),ngr=o(" \u2014 "),wQ=a("a"),sgr=o("TFConvBertForMaskedLM"),lgr=o(" (ConvBERT model)"),igr=l(),t9=a("li"),M1e=a("strong"),dgr=o("deberta"),cgr=o(" \u2014 "),AQ=a("a"),fgr=o("TFDebertaForMaskedLM"),mgr=o(" (DeBERTa model)"),ggr=l(),a9=a("li"),E1e=a("strong"),hgr=o("deberta-v2"),pgr=o(" \u2014 "),yQ=a("a"),ugr=o("TFDebertaV2ForMaskedLM"),_gr=o(" (DeBERTa-v2 model)"),bgr=l(),n9=a("li"),C1e=a("strong"),vgr=o("distilbert"),Fgr=o(" \u2014 "),LQ=a("a"),Tgr=o("TFDistilBertForMaskedLM"),Mgr=o(" (DistilBERT model)"),Egr=l(),s9=a("li"),w1e=a("strong"),Cgr=o("electra"),wgr=o(" \u2014 "),xQ=a("a"),Agr=o("TFElectraForMaskedLM"),ygr=o(" (ELECTRA model)"),Lgr=l(),l9=a("li"),A1e=a("strong"),xgr=o("flaubert"),$gr=o(" \u2014 "),$Q=a("a"),kgr=o("TFFlaubertWithLMHeadModel"),Sgr=o(" (FlauBERT model)"),Rgr=l(),i9=a("li"),y1e=a("strong"),Bgr=o("funnel"),Pgr=o(" \u2014 "),kQ=a("a"),Igr=o("TFFunnelForMaskedLM"),qgr=o(" (Funnel Transformer model)"),Ngr=l(),d9=a("li"),L1e=a("strong"),jgr=o("layoutlm"),Dgr=o(" \u2014 "),SQ=a("a"),Ggr=o("TFLayoutLMForMaskedLM"),Ogr=o(" (LayoutLM model)"),Vgr=l(),c9=a("li"),x1e=a("strong"),Xgr=o("longformer"),zgr=o(" \u2014 "),RQ=a("a"),Qgr=o("TFLongformerForMaskedLM"),Wgr=o(" (Longformer model)"),Hgr=l(),f9=a("li"),$1e=a("strong"),Ugr=o("mobilebert"),Jgr=o(" \u2014 "),BQ=a("a"),Ygr=o("TFMobileBertForMaskedLM"),Kgr=o(" (MobileBERT model)"),Zgr=l(),m9=a("li"),k1e=a("strong"),ehr=o("mpnet"),ohr=o(" \u2014 "),PQ=a("a"),rhr=o("TFMPNetForMaskedLM"),thr=o(" (MPNet model)"),ahr=l(),g9=a("li"),S1e=a("strong"),nhr=o("rembert"),shr=o(" \u2014 "),IQ=a("a"),lhr=o("TFRemBertForMaskedLM"),ihr=o(" (RemBERT model)"),dhr=l(),h9=a("li"),R1e=a("strong"),chr=o("roberta"),fhr=o(" \u2014 "),qQ=a("a"),mhr=o("TFRobertaForMaskedLM"),ghr=o(" (RoBERTa model)"),hhr=l(),p9=a("li"),B1e=a("strong"),phr=o("roformer"),uhr=o(" \u2014 "),NQ=a("a"),_hr=o("TFRoFormerForMaskedLM"),bhr=o(" (RoFormer model)"),vhr=l(),u9=a("li"),P1e=a("strong"),Fhr=o("tapas"),Thr=o(" \u2014 "),jQ=a("a"),Mhr=o("TFTapasForMaskedLM"),Ehr=o(" (TAPAS model)"),Chr=l(),_9=a("li"),I1e=a("strong"),whr=o("xlm"),Ahr=o(" \u2014 "),DQ=a("a"),yhr=o("TFXLMWithLMHeadModel"),Lhr=o(" (XLM model)"),xhr=l(),b9=a("li"),q1e=a("strong"),$hr=o("xlm-roberta"),khr=o(" \u2014 "),GQ=a("a"),Shr=o("TFXLMRobertaForMaskedLM"),Rhr=o(" (XLM-RoBERTa model)"),Bhr=l(),F(v9.$$.fragment),dIe=l(),Kd=a("h2"),F9=a("a"),N1e=a("span"),F(zy.$$.fragment),Phr=l(),j1e=a("span"),Ihr=o("TFAutoModelForSeq2SeqLM"),cIe=l(),rr=a("div"),F(Qy.$$.fragment),qhr=l(),Zd=a("p"),Nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OQ=a("a"),jhr=o("from_pretrained()"),Dhr=o(" class method or the "),VQ=a("a"),Ghr=o("from_config()"),Ohr=o(` class
method.`),Vhr=l(),Wy=a("p"),Xhr=o("This class cannot be instantiated directly using "),D1e=a("code"),zhr=o("__init__()"),Qhr=o(" (throws an error)."),Whr=l(),$t=a("div"),F(Hy.$$.fragment),Hhr=l(),G1e=a("p"),Uhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jhr=l(),ec=a("p"),Yhr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),Khr=o("not"),Zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),epr=o("from_pretrained()"),opr=o(" to load the model weights."),rpr=l(),F(T9.$$.fragment),tpr=l(),$r=a("div"),F(Uy.$$.fragment),apr=l(),V1e=a("p"),npr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),spr=l(),tn=a("p"),lpr=o("The model class to instantiate is selected based on the "),X1e=a("code"),ipr=o("model_type"),dpr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),mpr=o("pretrained_model_name_or_path"),gpr=o(":"),hpr=l(),ye=a("ul"),M9=a("li"),W1e=a("strong"),ppr=o("bart"),upr=o(" \u2014 "),zQ=a("a"),_pr=o("TFBartForConditionalGeneration"),bpr=o(" (BART model)"),vpr=l(),E9=a("li"),H1e=a("strong"),Fpr=o("blenderbot"),Tpr=o(" \u2014 "),QQ=a("a"),Mpr=o("TFBlenderbotForConditionalGeneration"),Epr=o(" (Blenderbot model)"),Cpr=l(),C9=a("li"),U1e=a("strong"),wpr=o("blenderbot-small"),Apr=o(" \u2014 "),WQ=a("a"),ypr=o("TFBlenderbotSmallForConditionalGeneration"),Lpr=o(" (BlenderbotSmall model)"),xpr=l(),w9=a("li"),J1e=a("strong"),$pr=o("encoder-decoder"),kpr=o(" \u2014 "),HQ=a("a"),Spr=o("TFEncoderDecoderModel"),Rpr=o(" (Encoder decoder model)"),Bpr=l(),A9=a("li"),Y1e=a("strong"),Ppr=o("led"),Ipr=o(" \u2014 "),UQ=a("a"),qpr=o("TFLEDForConditionalGeneration"),Npr=o(" (LED model)"),jpr=l(),y9=a("li"),K1e=a("strong"),Dpr=o("marian"),Gpr=o(" \u2014 "),JQ=a("a"),Opr=o("TFMarianMTModel"),Vpr=o(" (Marian model)"),Xpr=l(),L9=a("li"),Z1e=a("strong"),zpr=o("mbart"),Qpr=o(" \u2014 "),YQ=a("a"),Wpr=o("TFMBartForConditionalGeneration"),Hpr=o(" (mBART model)"),Upr=l(),x9=a("li"),ebe=a("strong"),Jpr=o("mt5"),Ypr=o(" \u2014 "),KQ=a("a"),Kpr=o("TFMT5ForConditionalGeneration"),Zpr=o(" (mT5 model)"),eur=l(),$9=a("li"),obe=a("strong"),our=o("pegasus"),rur=o(" \u2014 "),ZQ=a("a"),tur=o("TFPegasusForConditionalGeneration"),aur=o(" (Pegasus model)"),nur=l(),k9=a("li"),rbe=a("strong"),sur=o("t5"),lur=o(" \u2014 "),eW=a("a"),iur=o("TFT5ForConditionalGeneration"),dur=o(" (T5 model)"),cur=l(),F(S9.$$.fragment),fIe=l(),oc=a("h2"),R9=a("a"),tbe=a("span"),F(Jy.$$.fragment),fur=l(),abe=a("span"),mur=o("TFAutoModelForSequenceClassification"),mIe=l(),tr=a("div"),F(Yy.$$.fragment),gur=l(),rc=a("p"),hur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oW=a("a"),pur=o("from_pretrained()"),uur=o(" class method or the "),rW=a("a"),_ur=o("from_config()"),bur=o(` class
method.`),vur=l(),Ky=a("p"),Fur=o("This class cannot be instantiated directly using "),nbe=a("code"),Tur=o("__init__()"),Mur=o(" (throws an error)."),Eur=l(),kt=a("div"),F(Zy.$$.fragment),Cur=l(),sbe=a("p"),wur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Aur=l(),tc=a("p"),yur=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),Lur=o("not"),xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),$ur=o("from_pretrained()"),kur=o(" to load the model weights."),Sur=l(),F(B9.$$.fragment),Rur=l(),kr=a("div"),F(eL.$$.fragment),Bur=l(),ibe=a("p"),Pur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Iur=l(),an=a("p"),qur=o("The model class to instantiate is selected based on the "),dbe=a("code"),Nur=o("model_type"),jur=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),Dur=o("pretrained_model_name_or_path"),Gur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),Our=o("pretrained_model_name_or_path"),Vur=o(":"),Xur=l(),Z=a("ul"),P9=a("li"),mbe=a("strong"),zur=o("albert"),Qur=o(" \u2014 "),aW=a("a"),Wur=o("TFAlbertForSequenceClassification"),Hur=o(" (ALBERT model)"),Uur=l(),I9=a("li"),gbe=a("strong"),Jur=o("bert"),Yur=o(" \u2014 "),nW=a("a"),Kur=o("TFBertForSequenceClassification"),Zur=o(" (BERT model)"),e_r=l(),q9=a("li"),hbe=a("strong"),o_r=o("camembert"),r_r=o(" \u2014 "),sW=a("a"),t_r=o("TFCamembertForSequenceClassification"),a_r=o(" (CamemBERT model)"),n_r=l(),N9=a("li"),pbe=a("strong"),s_r=o("convbert"),l_r=o(" \u2014 "),lW=a("a"),i_r=o("TFConvBertForSequenceClassification"),d_r=o(" (ConvBERT model)"),c_r=l(),j9=a("li"),ube=a("strong"),f_r=o("ctrl"),m_r=o(" \u2014 "),iW=a("a"),g_r=o("TFCTRLForSequenceClassification"),h_r=o(" (CTRL model)"),p_r=l(),D9=a("li"),_be=a("strong"),u_r=o("deberta"),__r=o(" \u2014 "),dW=a("a"),b_r=o("TFDebertaForSequenceClassification"),v_r=o(" (DeBERTa model)"),F_r=l(),G9=a("li"),bbe=a("strong"),T_r=o("deberta-v2"),M_r=o(" \u2014 "),cW=a("a"),E_r=o("TFDebertaV2ForSequenceClassification"),C_r=o(" (DeBERTa-v2 model)"),w_r=l(),O9=a("li"),vbe=a("strong"),A_r=o("distilbert"),y_r=o(" \u2014 "),fW=a("a"),L_r=o("TFDistilBertForSequenceClassification"),x_r=o(" (DistilBERT model)"),$_r=l(),V9=a("li"),Fbe=a("strong"),k_r=o("electra"),S_r=o(" \u2014 "),mW=a("a"),R_r=o("TFElectraForSequenceClassification"),B_r=o(" (ELECTRA model)"),P_r=l(),X9=a("li"),Tbe=a("strong"),I_r=o("flaubert"),q_r=o(" \u2014 "),gW=a("a"),N_r=o("TFFlaubertForSequenceClassification"),j_r=o(" (FlauBERT model)"),D_r=l(),z9=a("li"),Mbe=a("strong"),G_r=o("funnel"),O_r=o(" \u2014 "),hW=a("a"),V_r=o("TFFunnelForSequenceClassification"),X_r=o(" (Funnel Transformer model)"),z_r=l(),Q9=a("li"),Ebe=a("strong"),Q_r=o("gpt2"),W_r=o(" \u2014 "),pW=a("a"),H_r=o("TFGPT2ForSequenceClassification"),U_r=o(" (OpenAI GPT-2 model)"),J_r=l(),W9=a("li"),Cbe=a("strong"),Y_r=o("gptj"),K_r=o(" \u2014 "),uW=a("a"),Z_r=o("TFGPTJForSequenceClassification"),e2r=o(" (GPT-J model)"),o2r=l(),H9=a("li"),wbe=a("strong"),r2r=o("layoutlm"),t2r=o(" \u2014 "),_W=a("a"),a2r=o("TFLayoutLMForSequenceClassification"),n2r=o(" (LayoutLM model)"),s2r=l(),U9=a("li"),Abe=a("strong"),l2r=o("longformer"),i2r=o(" \u2014 "),bW=a("a"),d2r=o("TFLongformerForSequenceClassification"),c2r=o(" (Longformer model)"),f2r=l(),J9=a("li"),ybe=a("strong"),m2r=o("mobilebert"),g2r=o(" \u2014 "),vW=a("a"),h2r=o("TFMobileBertForSequenceClassification"),p2r=o(" (MobileBERT model)"),u2r=l(),Y9=a("li"),Lbe=a("strong"),_2r=o("mpnet"),b2r=o(" \u2014 "),FW=a("a"),v2r=o("TFMPNetForSequenceClassification"),F2r=o(" (MPNet model)"),T2r=l(),K9=a("li"),xbe=a("strong"),M2r=o("openai-gpt"),E2r=o(" \u2014 "),TW=a("a"),C2r=o("TFOpenAIGPTForSequenceClassification"),w2r=o(" (OpenAI GPT model)"),A2r=l(),Z9=a("li"),$be=a("strong"),y2r=o("rembert"),L2r=o(" \u2014 "),MW=a("a"),x2r=o("TFRemBertForSequenceClassification"),$2r=o(" (RemBERT model)"),k2r=l(),eM=a("li"),kbe=a("strong"),S2r=o("roberta"),R2r=o(" \u2014 "),EW=a("a"),B2r=o("TFRobertaForSequenceClassification"),P2r=o(" (RoBERTa model)"),I2r=l(),oM=a("li"),Sbe=a("strong"),q2r=o("roformer"),N2r=o(" \u2014 "),CW=a("a"),j2r=o("TFRoFormerForSequenceClassification"),D2r=o(" (RoFormer model)"),G2r=l(),rM=a("li"),Rbe=a("strong"),O2r=o("tapas"),V2r=o(" \u2014 "),wW=a("a"),X2r=o("TFTapasForSequenceClassification"),z2r=o(" (TAPAS model)"),Q2r=l(),tM=a("li"),Bbe=a("strong"),W2r=o("transfo-xl"),H2r=o(" \u2014 "),AW=a("a"),U2r=o("TFTransfoXLForSequenceClassification"),J2r=o(" (Transformer-XL model)"),Y2r=l(),aM=a("li"),Pbe=a("strong"),K2r=o("xlm"),Z2r=o(" \u2014 "),yW=a("a"),e1r=o("TFXLMForSequenceClassification"),o1r=o(" (XLM model)"),r1r=l(),nM=a("li"),Ibe=a("strong"),t1r=o("xlm-roberta"),a1r=o(" \u2014 "),LW=a("a"),n1r=o("TFXLMRobertaForSequenceClassification"),s1r=o(" (XLM-RoBERTa model)"),l1r=l(),sM=a("li"),qbe=a("strong"),i1r=o("xlnet"),d1r=o(" \u2014 "),xW=a("a"),c1r=o("TFXLNetForSequenceClassification"),f1r=o(" (XLNet model)"),m1r=l(),F(lM.$$.fragment),gIe=l(),ac=a("h2"),iM=a("a"),Nbe=a("span"),F(oL.$$.fragment),g1r=l(),jbe=a("span"),h1r=o("TFAutoModelForMultipleChoice"),hIe=l(),ar=a("div"),F(rL.$$.fragment),p1r=l(),nc=a("p"),u1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$W=a("a"),_1r=o("from_pretrained()"),b1r=o(" class method or the "),kW=a("a"),v1r=o("from_config()"),F1r=o(` class
method.`),T1r=l(),tL=a("p"),M1r=o("This class cannot be instantiated directly using "),Dbe=a("code"),E1r=o("__init__()"),C1r=o(" (throws an error)."),w1r=l(),St=a("div"),F(aL.$$.fragment),A1r=l(),Gbe=a("p"),y1r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),L1r=l(),sc=a("p"),x1r=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),$1r=o("not"),k1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=a("a"),S1r=o("from_pretrained()"),R1r=o(" to load the model weights."),B1r=l(),F(dM.$$.fragment),P1r=l(),Sr=a("div"),F(nL.$$.fragment),I1r=l(),Vbe=a("p"),q1r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),N1r=l(),nn=a("p"),j1r=o("The model class to instantiate is selected based on the "),Xbe=a("code"),D1r=o("model_type"),G1r=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),O1r=o("pretrained_model_name_or_path"),V1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),X1r=o("pretrained_model_name_or_path"),z1r=o(":"),Q1r=l(),pe=a("ul"),cM=a("li"),Wbe=a("strong"),W1r=o("albert"),H1r=o(" \u2014 "),RW=a("a"),U1r=o("TFAlbertForMultipleChoice"),J1r=o(" (ALBERT model)"),Y1r=l(),fM=a("li"),Hbe=a("strong"),K1r=o("bert"),Z1r=o(" \u2014 "),BW=a("a"),ebr=o("TFBertForMultipleChoice"),obr=o(" (BERT model)"),rbr=l(),mM=a("li"),Ube=a("strong"),tbr=o("camembert"),abr=o(" \u2014 "),PW=a("a"),nbr=o("TFCamembertForMultipleChoice"),sbr=o(" (CamemBERT model)"),lbr=l(),gM=a("li"),Jbe=a("strong"),ibr=o("convbert"),dbr=o(" \u2014 "),IW=a("a"),cbr=o("TFConvBertForMultipleChoice"),fbr=o(" (ConvBERT model)"),mbr=l(),hM=a("li"),Ybe=a("strong"),gbr=o("distilbert"),hbr=o(" \u2014 "),qW=a("a"),pbr=o("TFDistilBertForMultipleChoice"),ubr=o(" (DistilBERT model)"),_br=l(),pM=a("li"),Kbe=a("strong"),bbr=o("electra"),vbr=o(" \u2014 "),NW=a("a"),Fbr=o("TFElectraForMultipleChoice"),Tbr=o(" (ELECTRA model)"),Mbr=l(),uM=a("li"),Zbe=a("strong"),Ebr=o("flaubert"),Cbr=o(" \u2014 "),jW=a("a"),wbr=o("TFFlaubertForMultipleChoice"),Abr=o(" (FlauBERT model)"),ybr=l(),_M=a("li"),eve=a("strong"),Lbr=o("funnel"),xbr=o(" \u2014 "),DW=a("a"),$br=o("TFFunnelForMultipleChoice"),kbr=o(" (Funnel Transformer model)"),Sbr=l(),bM=a("li"),ove=a("strong"),Rbr=o("longformer"),Bbr=o(" \u2014 "),GW=a("a"),Pbr=o("TFLongformerForMultipleChoice"),Ibr=o(" (Longformer model)"),qbr=l(),vM=a("li"),rve=a("strong"),Nbr=o("mobilebert"),jbr=o(" \u2014 "),OW=a("a"),Dbr=o("TFMobileBertForMultipleChoice"),Gbr=o(" (MobileBERT model)"),Obr=l(),FM=a("li"),tve=a("strong"),Vbr=o("mpnet"),Xbr=o(" \u2014 "),VW=a("a"),zbr=o("TFMPNetForMultipleChoice"),Qbr=o(" (MPNet model)"),Wbr=l(),TM=a("li"),ave=a("strong"),Hbr=o("rembert"),Ubr=o(" \u2014 "),XW=a("a"),Jbr=o("TFRemBertForMultipleChoice"),Ybr=o(" (RemBERT model)"),Kbr=l(),MM=a("li"),nve=a("strong"),Zbr=o("roberta"),evr=o(" \u2014 "),zW=a("a"),ovr=o("TFRobertaForMultipleChoice"),rvr=o(" (RoBERTa model)"),tvr=l(),EM=a("li"),sve=a("strong"),avr=o("roformer"),nvr=o(" \u2014 "),QW=a("a"),svr=o("TFRoFormerForMultipleChoice"),lvr=o(" (RoFormer model)"),ivr=l(),CM=a("li"),lve=a("strong"),dvr=o("xlm"),cvr=o(" \u2014 "),WW=a("a"),fvr=o("TFXLMForMultipleChoice"),mvr=o(" (XLM model)"),gvr=l(),wM=a("li"),ive=a("strong"),hvr=o("xlm-roberta"),pvr=o(" \u2014 "),HW=a("a"),uvr=o("TFXLMRobertaForMultipleChoice"),_vr=o(" (XLM-RoBERTa model)"),bvr=l(),AM=a("li"),dve=a("strong"),vvr=o("xlnet"),Fvr=o(" \u2014 "),UW=a("a"),Tvr=o("TFXLNetForMultipleChoice"),Mvr=o(" (XLNet model)"),Evr=l(),F(yM.$$.fragment),pIe=l(),lc=a("h2"),LM=a("a"),cve=a("span"),F(sL.$$.fragment),Cvr=l(),fve=a("span"),wvr=o("TFAutoModelForNextSentencePrediction"),uIe=l(),nr=a("div"),F(lL.$$.fragment),Avr=l(),ic=a("p"),yvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JW=a("a"),Lvr=o("from_pretrained()"),xvr=o(" class method or the "),YW=a("a"),$vr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),iL=a("p"),Rvr=o("This class cannot be instantiated directly using "),mve=a("code"),Bvr=o("__init__()"),Pvr=o(" (throws an error)."),Ivr=l(),Rt=a("div"),F(dL.$$.fragment),qvr=l(),gve=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jvr=l(),dc=a("p"),Dvr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),Gvr=o("not"),Ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" to load the model weights."),zvr=l(),F(xM.$$.fragment),Qvr=l(),Rr=a("div"),F(cL.$$.fragment),Wvr=l(),pve=a("p"),Hvr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Uvr=l(),sn=a("p"),Jvr=o("The model class to instantiate is selected based on the "),uve=a("code"),Yvr=o("model_type"),Kvr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),Zvr=o("pretrained_model_name_or_path"),eFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),oFr=o("pretrained_model_name_or_path"),rFr=o(":"),tFr=l(),fL=a("ul"),$M=a("li"),vve=a("strong"),aFr=o("bert"),nFr=o(" \u2014 "),ZW=a("a"),sFr=o("TFBertForNextSentencePrediction"),lFr=o(" (BERT model)"),iFr=l(),kM=a("li"),Fve=a("strong"),dFr=o("mobilebert"),cFr=o(" \u2014 "),eH=a("a"),fFr=o("TFMobileBertForNextSentencePrediction"),mFr=o(" (MobileBERT model)"),gFr=l(),F(SM.$$.fragment),_Ie=l(),cc=a("h2"),RM=a("a"),Tve=a("span"),F(mL.$$.fragment),hFr=l(),Mve=a("span"),pFr=o("TFAutoModelForTableQuestionAnswering"),bIe=l(),sr=a("div"),F(gL.$$.fragment),uFr=l(),fc=a("p"),_Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),oH=a("a"),bFr=o("from_pretrained()"),vFr=o(" class method or the "),rH=a("a"),FFr=o("from_config()"),TFr=o(` class
method.`),MFr=l(),hL=a("p"),EFr=o("This class cannot be instantiated directly using "),Eve=a("code"),CFr=o("__init__()"),wFr=o(" (throws an error)."),AFr=l(),Bt=a("div"),F(pL.$$.fragment),yFr=l(),Cve=a("p"),LFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xFr=l(),mc=a("p"),$Fr=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),kFr=o("not"),SFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),RFr=o("from_pretrained()"),BFr=o(" to load the model weights."),PFr=l(),F(BM.$$.fragment),IFr=l(),Br=a("div"),F(uL.$$.fragment),qFr=l(),Ave=a("p"),NFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jFr=l(),ln=a("p"),DFr=o("The model class to instantiate is selected based on the "),yve=a("code"),GFr=o("model_type"),OFr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),VFr=o("pretrained_model_name_or_path"),XFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),zFr=o("pretrained_model_name_or_path"),QFr=o(":"),WFr=l(),$ve=a("ul"),PM=a("li"),kve=a("strong"),HFr=o("tapas"),UFr=o(" \u2014 "),aH=a("a"),JFr=o("TFTapasForQuestionAnswering"),YFr=o(" (TAPAS model)"),KFr=l(),F(IM.$$.fragment),vIe=l(),gc=a("h2"),qM=a("a"),Sve=a("span"),F(_L.$$.fragment),ZFr=l(),Rve=a("span"),e0r=o("TFAutoModelForTokenClassification"),FIe=l(),lr=a("div"),F(bL.$$.fragment),o0r=l(),hc=a("p"),r0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nH=a("a"),t0r=o("from_pretrained()"),a0r=o(" class method or the "),sH=a("a"),n0r=o("from_config()"),s0r=o(` class
method.`),l0r=l(),vL=a("p"),i0r=o("This class cannot be instantiated directly using "),Bve=a("code"),d0r=o("__init__()"),c0r=o(" (throws an error)."),f0r=l(),Pt=a("div"),F(FL.$$.fragment),m0r=l(),Pve=a("p"),g0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h0r=l(),pc=a("p"),p0r=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),u0r=o("not"),_0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),b0r=o("from_pretrained()"),v0r=o(" to load the model weights."),F0r=l(),F(NM.$$.fragment),T0r=l(),Pr=a("div"),F(TL.$$.fragment),M0r=l(),qve=a("p"),E0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C0r=l(),dn=a("p"),w0r=o("The model class to instantiate is selected based on the "),Nve=a("code"),A0r=o("model_type"),y0r=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),L0r=o("pretrained_model_name_or_path"),x0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),$0r=o("pretrained_model_name_or_path"),k0r=o(":"),S0r=l(),de=a("ul"),jM=a("li"),Gve=a("strong"),R0r=o("albert"),B0r=o(" \u2014 "),iH=a("a"),P0r=o("TFAlbertForTokenClassification"),I0r=o(" (ALBERT model)"),q0r=l(),DM=a("li"),Ove=a("strong"),N0r=o("bert"),j0r=o(" \u2014 "),dH=a("a"),D0r=o("TFBertForTokenClassification"),G0r=o(" (BERT model)"),O0r=l(),GM=a("li"),Vve=a("strong"),V0r=o("camembert"),X0r=o(" \u2014 "),cH=a("a"),z0r=o("TFCamembertForTokenClassification"),Q0r=o(" (CamemBERT model)"),W0r=l(),OM=a("li"),Xve=a("strong"),H0r=o("convbert"),U0r=o(" \u2014 "),fH=a("a"),J0r=o("TFConvBertForTokenClassification"),Y0r=o(" (ConvBERT model)"),K0r=l(),VM=a("li"),zve=a("strong"),Z0r=o("deberta"),eTr=o(" \u2014 "),mH=a("a"),oTr=o("TFDebertaForTokenClassification"),rTr=o(" (DeBERTa model)"),tTr=l(),XM=a("li"),Qve=a("strong"),aTr=o("deberta-v2"),nTr=o(" \u2014 "),gH=a("a"),sTr=o("TFDebertaV2ForTokenClassification"),lTr=o(" (DeBERTa-v2 model)"),iTr=l(),zM=a("li"),Wve=a("strong"),dTr=o("distilbert"),cTr=o(" \u2014 "),hH=a("a"),fTr=o("TFDistilBertForTokenClassification"),mTr=o(" (DistilBERT model)"),gTr=l(),QM=a("li"),Hve=a("strong"),hTr=o("electra"),pTr=o(" \u2014 "),pH=a("a"),uTr=o("TFElectraForTokenClassification"),_Tr=o(" (ELECTRA model)"),bTr=l(),WM=a("li"),Uve=a("strong"),vTr=o("flaubert"),FTr=o(" \u2014 "),uH=a("a"),TTr=o("TFFlaubertForTokenClassification"),MTr=o(" (FlauBERT model)"),ETr=l(),HM=a("li"),Jve=a("strong"),CTr=o("funnel"),wTr=o(" \u2014 "),_H=a("a"),ATr=o("TFFunnelForTokenClassification"),yTr=o(" (Funnel Transformer model)"),LTr=l(),UM=a("li"),Yve=a("strong"),xTr=o("layoutlm"),$Tr=o(" \u2014 "),bH=a("a"),kTr=o("TFLayoutLMForTokenClassification"),STr=o(" (LayoutLM model)"),RTr=l(),JM=a("li"),Kve=a("strong"),BTr=o("longformer"),PTr=o(" \u2014 "),vH=a("a"),ITr=o("TFLongformerForTokenClassification"),qTr=o(" (Longformer model)"),NTr=l(),YM=a("li"),Zve=a("strong"),jTr=o("mobilebert"),DTr=o(" \u2014 "),FH=a("a"),GTr=o("TFMobileBertForTokenClassification"),OTr=o(" (MobileBERT model)"),VTr=l(),KM=a("li"),eFe=a("strong"),XTr=o("mpnet"),zTr=o(" \u2014 "),TH=a("a"),QTr=o("TFMPNetForTokenClassification"),WTr=o(" (MPNet model)"),HTr=l(),ZM=a("li"),oFe=a("strong"),UTr=o("rembert"),JTr=o(" \u2014 "),MH=a("a"),YTr=o("TFRemBertForTokenClassification"),KTr=o(" (RemBERT model)"),ZTr=l(),e4=a("li"),rFe=a("strong"),e7r=o("roberta"),o7r=o(" \u2014 "),EH=a("a"),r7r=o("TFRobertaForTokenClassification"),t7r=o(" (RoBERTa model)"),a7r=l(),o4=a("li"),tFe=a("strong"),n7r=o("roformer"),s7r=o(" \u2014 "),CH=a("a"),l7r=o("TFRoFormerForTokenClassification"),i7r=o(" (RoFormer model)"),d7r=l(),r4=a("li"),aFe=a("strong"),c7r=o("xlm"),f7r=o(" \u2014 "),wH=a("a"),m7r=o("TFXLMForTokenClassification"),g7r=o(" (XLM model)"),h7r=l(),t4=a("li"),nFe=a("strong"),p7r=o("xlm-roberta"),u7r=o(" \u2014 "),AH=a("a"),_7r=o("TFXLMRobertaForTokenClassification"),b7r=o(" (XLM-RoBERTa model)"),v7r=l(),a4=a("li"),sFe=a("strong"),F7r=o("xlnet"),T7r=o(" \u2014 "),yH=a("a"),M7r=o("TFXLNetForTokenClassification"),E7r=o(" (XLNet model)"),C7r=l(),F(n4.$$.fragment),TIe=l(),uc=a("h2"),s4=a("a"),lFe=a("span"),F(ML.$$.fragment),w7r=l(),iFe=a("span"),A7r=o("TFAutoModelForQuestionAnswering"),MIe=l(),ir=a("div"),F(EL.$$.fragment),y7r=l(),_c=a("p"),L7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LH=a("a"),x7r=o("from_pretrained()"),$7r=o(" class method or the "),xH=a("a"),k7r=o("from_config()"),S7r=o(` class
method.`),R7r=l(),CL=a("p"),B7r=o("This class cannot be instantiated directly using "),dFe=a("code"),P7r=o("__init__()"),I7r=o(" (throws an error)."),q7r=l(),It=a("div"),F(wL.$$.fragment),N7r=l(),cFe=a("p"),j7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D7r=l(),bc=a("p"),G7r=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),O7r=o("not"),V7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),X7r=o("from_pretrained()"),z7r=o(" to load the model weights."),Q7r=l(),F(l4.$$.fragment),W7r=l(),Ir=a("div"),F(AL.$$.fragment),H7r=l(),mFe=a("p"),U7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),J7r=l(),cn=a("p"),Y7r=o("The model class to instantiate is selected based on the "),gFe=a("code"),K7r=o("model_type"),Z7r=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),e9r=o("pretrained_model_name_or_path"),o9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),r9r=o("pretrained_model_name_or_path"),t9r=o(":"),a9r=l(),ce=a("ul"),i4=a("li"),uFe=a("strong"),n9r=o("albert"),s9r=o(" \u2014 "),kH=a("a"),l9r=o("TFAlbertForQuestionAnswering"),i9r=o(" (ALBERT model)"),d9r=l(),d4=a("li"),_Fe=a("strong"),c9r=o("bert"),f9r=o(" \u2014 "),SH=a("a"),m9r=o("TFBertForQuestionAnswering"),g9r=o(" (BERT model)"),h9r=l(),c4=a("li"),bFe=a("strong"),p9r=o("camembert"),u9r=o(" \u2014 "),RH=a("a"),_9r=o("TFCamembertForQuestionAnswering"),b9r=o(" (CamemBERT model)"),v9r=l(),f4=a("li"),vFe=a("strong"),F9r=o("convbert"),T9r=o(" \u2014 "),BH=a("a"),M9r=o("TFConvBertForQuestionAnswering"),E9r=o(" (ConvBERT model)"),C9r=l(),m4=a("li"),FFe=a("strong"),w9r=o("deberta"),A9r=o(" \u2014 "),PH=a("a"),y9r=o("TFDebertaForQuestionAnswering"),L9r=o(" (DeBERTa model)"),x9r=l(),g4=a("li"),TFe=a("strong"),$9r=o("deberta-v2"),k9r=o(" \u2014 "),IH=a("a"),S9r=o("TFDebertaV2ForQuestionAnswering"),R9r=o(" (DeBERTa-v2 model)"),B9r=l(),h4=a("li"),MFe=a("strong"),P9r=o("distilbert"),I9r=o(" \u2014 "),qH=a("a"),q9r=o("TFDistilBertForQuestionAnswering"),N9r=o(" (DistilBERT model)"),j9r=l(),p4=a("li"),EFe=a("strong"),D9r=o("electra"),G9r=o(" \u2014 "),NH=a("a"),O9r=o("TFElectraForQuestionAnswering"),V9r=o(" (ELECTRA model)"),X9r=l(),u4=a("li"),CFe=a("strong"),z9r=o("flaubert"),Q9r=o(" \u2014 "),jH=a("a"),W9r=o("TFFlaubertForQuestionAnsweringSimple"),H9r=o(" (FlauBERT model)"),U9r=l(),_4=a("li"),wFe=a("strong"),J9r=o("funnel"),Y9r=o(" \u2014 "),DH=a("a"),K9r=o("TFFunnelForQuestionAnswering"),Z9r=o(" (Funnel Transformer model)"),eMr=l(),b4=a("li"),AFe=a("strong"),oMr=o("gptj"),rMr=o(" \u2014 "),GH=a("a"),tMr=o("TFGPTJForQuestionAnswering"),aMr=o(" (GPT-J model)"),nMr=l(),v4=a("li"),yFe=a("strong"),sMr=o("longformer"),lMr=o(" \u2014 "),OH=a("a"),iMr=o("TFLongformerForQuestionAnswering"),dMr=o(" (Longformer model)"),cMr=l(),F4=a("li"),LFe=a("strong"),fMr=o("mobilebert"),mMr=o(" \u2014 "),VH=a("a"),gMr=o("TFMobileBertForQuestionAnswering"),hMr=o(" (MobileBERT model)"),pMr=l(),T4=a("li"),xFe=a("strong"),uMr=o("mpnet"),_Mr=o(" \u2014 "),XH=a("a"),bMr=o("TFMPNetForQuestionAnswering"),vMr=o(" (MPNet model)"),FMr=l(),M4=a("li"),$Fe=a("strong"),TMr=o("rembert"),MMr=o(" \u2014 "),zH=a("a"),EMr=o("TFRemBertForQuestionAnswering"),CMr=o(" (RemBERT model)"),wMr=l(),E4=a("li"),kFe=a("strong"),AMr=o("roberta"),yMr=o(" \u2014 "),QH=a("a"),LMr=o("TFRobertaForQuestionAnswering"),xMr=o(" (RoBERTa model)"),$Mr=l(),C4=a("li"),SFe=a("strong"),kMr=o("roformer"),SMr=o(" \u2014 "),WH=a("a"),RMr=o("TFRoFormerForQuestionAnswering"),BMr=o(" (RoFormer model)"),PMr=l(),w4=a("li"),RFe=a("strong"),IMr=o("xlm"),qMr=o(" \u2014 "),HH=a("a"),NMr=o("TFXLMForQuestionAnsweringSimple"),jMr=o(" (XLM model)"),DMr=l(),A4=a("li"),BFe=a("strong"),GMr=o("xlm-roberta"),OMr=o(" \u2014 "),UH=a("a"),VMr=o("TFXLMRobertaForQuestionAnswering"),XMr=o(" (XLM-RoBERTa model)"),zMr=l(),y4=a("li"),PFe=a("strong"),QMr=o("xlnet"),WMr=o(" \u2014 "),JH=a("a"),HMr=o("TFXLNetForQuestionAnsweringSimple"),UMr=o(" (XLNet model)"),JMr=l(),F(L4.$$.fragment),EIe=l(),vc=a("h2"),x4=a("a"),IFe=a("span"),F(yL.$$.fragment),YMr=l(),qFe=a("span"),KMr=o("TFAutoModelForVision2Seq"),CIe=l(),dr=a("div"),F(LL.$$.fragment),ZMr=l(),Fc=a("p"),e4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YH=a("a"),o4r=o("from_pretrained()"),r4r=o(" class method or the "),KH=a("a"),t4r=o("from_config()"),a4r=o(` class
method.`),n4r=l(),xL=a("p"),s4r=o("This class cannot be instantiated directly using "),NFe=a("code"),l4r=o("__init__()"),i4r=o(" (throws an error)."),d4r=l(),qt=a("div"),F($L.$$.fragment),c4r=l(),jFe=a("p"),f4r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m4r=l(),Tc=a("p"),g4r=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),h4r=o("not"),p4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),u4r=o("from_pretrained()"),_4r=o(" to load the model weights."),b4r=l(),F($4.$$.fragment),v4r=l(),qr=a("div"),F(kL.$$.fragment),F4r=l(),GFe=a("p"),T4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M4r=l(),fn=a("p"),E4r=o("The model class to instantiate is selected based on the "),OFe=a("code"),C4r=o("model_type"),w4r=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),A4r=o("pretrained_model_name_or_path"),y4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),L4r=o("pretrained_model_name_or_path"),x4r=o(":"),$4r=l(),zFe=a("ul"),k4=a("li"),QFe=a("strong"),k4r=o("vision-encoder-decoder"),S4r=o(" \u2014 "),eU=a("a"),R4r=o("TFVisionEncoderDecoderModel"),B4r=o(" (Vision Encoder decoder model)"),P4r=l(),F(S4.$$.fragment),wIe=l(),Mc=a("h2"),R4=a("a"),WFe=a("span"),F(SL.$$.fragment),I4r=l(),HFe=a("span"),q4r=o("TFAutoModelForSpeechSeq2Seq"),AIe=l(),cr=a("div"),F(RL.$$.fragment),N4r=l(),Ec=a("p"),j4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),oU=a("a"),D4r=o("from_pretrained()"),G4r=o(" class method or the "),rU=a("a"),O4r=o("from_config()"),V4r=o(` class
method.`),X4r=l(),BL=a("p"),z4r=o("This class cannot be instantiated directly using "),UFe=a("code"),Q4r=o("__init__()"),W4r=o(" (throws an error)."),H4r=l(),Nt=a("div"),F(PL.$$.fragment),U4r=l(),JFe=a("p"),J4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Y4r=l(),Cc=a("p"),K4r=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),Z4r=o("not"),eEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),oEr=o("from_pretrained()"),rEr=o(" to load the model weights."),tEr=l(),F(B4.$$.fragment),aEr=l(),Nr=a("div"),F(IL.$$.fragment),nEr=l(),KFe=a("p"),sEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lEr=l(),mn=a("p"),iEr=o("The model class to instantiate is selected based on the "),ZFe=a("code"),dEr=o("model_type"),cEr=o(` property of the config object (either
passed as an argument or loaded from `),e0e=a("code"),fEr=o("pretrained_model_name_or_path"),mEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=a("code"),gEr=o("pretrained_model_name_or_path"),hEr=o(":"),pEr=l(),r0e=a("ul"),P4=a("li"),t0e=a("strong"),uEr=o("speech_to_text"),_Er=o(" \u2014 "),aU=a("a"),bEr=o("TFSpeech2TextForConditionalGeneration"),vEr=o(" (Speech2Text model)"),FEr=l(),F(I4.$$.fragment),yIe=l(),wc=a("h2"),q4=a("a"),a0e=a("span"),F(qL.$$.fragment),TEr=l(),n0e=a("span"),MEr=o("FlaxAutoModel"),LIe=l(),fr=a("div"),F(NL.$$.fragment),EEr=l(),Ac=a("p"),CEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nU=a("a"),wEr=o("from_pretrained()"),AEr=o(" class method or the "),sU=a("a"),yEr=o("from_config()"),LEr=o(` class
method.`),xEr=l(),jL=a("p"),$Er=o("This class cannot be instantiated directly using "),s0e=a("code"),kEr=o("__init__()"),SEr=o(" (throws an error)."),REr=l(),jt=a("div"),F(DL.$$.fragment),BEr=l(),l0e=a("p"),PEr=o("Instantiates one of the base model classes of the library from a configuration."),IEr=l(),yc=a("p"),qEr=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),NEr=o("not"),jEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),DEr=o("from_pretrained()"),GEr=o(" to load the model weights."),OEr=l(),F(N4.$$.fragment),VEr=l(),jr=a("div"),F(GL.$$.fragment),XEr=l(),d0e=a("p"),zEr=o("Instantiate one of the base model classes of the library from a pretrained model."),QEr=l(),gn=a("p"),WEr=o("The model class to instantiate is selected based on the "),c0e=a("code"),HEr=o("model_type"),UEr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),KEr=o("pretrained_model_name_or_path"),ZEr=o(":"),e5r=l(),oe=a("ul"),j4=a("li"),g0e=a("strong"),o5r=o("albert"),r5r=o(" \u2014 "),iU=a("a"),t5r=o("FlaxAlbertModel"),a5r=o(" (ALBERT model)"),n5r=l(),D4=a("li"),h0e=a("strong"),s5r=o("bart"),l5r=o(" \u2014 "),dU=a("a"),i5r=o("FlaxBartModel"),d5r=o(" (BART model)"),c5r=l(),G4=a("li"),p0e=a("strong"),f5r=o("beit"),m5r=o(" \u2014 "),cU=a("a"),g5r=o("FlaxBeitModel"),h5r=o(" (BEiT model)"),p5r=l(),O4=a("li"),u0e=a("strong"),u5r=o("bert"),_5r=o(" \u2014 "),fU=a("a"),b5r=o("FlaxBertModel"),v5r=o(" (BERT model)"),F5r=l(),V4=a("li"),_0e=a("strong"),T5r=o("big_bird"),M5r=o(" \u2014 "),mU=a("a"),E5r=o("FlaxBigBirdModel"),C5r=o(" (BigBird model)"),w5r=l(),X4=a("li"),b0e=a("strong"),A5r=o("blenderbot"),y5r=o(" \u2014 "),gU=a("a"),L5r=o("FlaxBlenderbotModel"),x5r=o(" (Blenderbot model)"),$5r=l(),z4=a("li"),v0e=a("strong"),k5r=o("blenderbot-small"),S5r=o(" \u2014 "),hU=a("a"),R5r=o("FlaxBlenderbotSmallModel"),B5r=o(" (BlenderbotSmall model)"),P5r=l(),Q4=a("li"),F0e=a("strong"),I5r=o("clip"),q5r=o(" \u2014 "),pU=a("a"),N5r=o("FlaxCLIPModel"),j5r=o(" (CLIP model)"),D5r=l(),W4=a("li"),T0e=a("strong"),G5r=o("distilbert"),O5r=o(" \u2014 "),uU=a("a"),V5r=o("FlaxDistilBertModel"),X5r=o(" (DistilBERT model)"),z5r=l(),H4=a("li"),M0e=a("strong"),Q5r=o("electra"),W5r=o(" \u2014 "),_U=a("a"),H5r=o("FlaxElectraModel"),U5r=o(" (ELECTRA model)"),J5r=l(),U4=a("li"),E0e=a("strong"),Y5r=o("gpt2"),K5r=o(" \u2014 "),bU=a("a"),Z5r=o("FlaxGPT2Model"),eCr=o(" (OpenAI GPT-2 model)"),oCr=l(),J4=a("li"),C0e=a("strong"),rCr=o("gpt_neo"),tCr=o(" \u2014 "),vU=a("a"),aCr=o("FlaxGPTNeoModel"),nCr=o(" (GPT Neo model)"),sCr=l(),Y4=a("li"),w0e=a("strong"),lCr=o("gptj"),iCr=o(" \u2014 "),FU=a("a"),dCr=o("FlaxGPTJModel"),cCr=o(" (GPT-J model)"),fCr=l(),K4=a("li"),A0e=a("strong"),mCr=o("marian"),gCr=o(" \u2014 "),TU=a("a"),hCr=o("FlaxMarianModel"),pCr=o(" (Marian model)"),uCr=l(),Z4=a("li"),y0e=a("strong"),_Cr=o("mbart"),bCr=o(" \u2014 "),MU=a("a"),vCr=o("FlaxMBartModel"),FCr=o(" (mBART model)"),TCr=l(),eE=a("li"),L0e=a("strong"),MCr=o("mt5"),ECr=o(" \u2014 "),EU=a("a"),CCr=o("FlaxMT5Model"),wCr=o(" (mT5 model)"),ACr=l(),oE=a("li"),x0e=a("strong"),yCr=o("pegasus"),LCr=o(" \u2014 "),CU=a("a"),xCr=o("FlaxPegasusModel"),$Cr=o(" (Pegasus model)"),kCr=l(),rE=a("li"),$0e=a("strong"),SCr=o("roberta"),RCr=o(" \u2014 "),wU=a("a"),BCr=o("FlaxRobertaModel"),PCr=o(" (RoBERTa model)"),ICr=l(),tE=a("li"),k0e=a("strong"),qCr=o("roformer"),NCr=o(" \u2014 "),AU=a("a"),jCr=o("FlaxRoFormerModel"),DCr=o(" (RoFormer model)"),GCr=l(),aE=a("li"),S0e=a("strong"),OCr=o("t5"),VCr=o(" \u2014 "),yU=a("a"),XCr=o("FlaxT5Model"),zCr=o(" (T5 model)"),QCr=l(),nE=a("li"),R0e=a("strong"),WCr=o("vision-text-dual-encoder"),HCr=o(" \u2014 "),LU=a("a"),UCr=o("FlaxVisionTextDualEncoderModel"),JCr=o(" (VisionTextDualEncoder model)"),YCr=l(),sE=a("li"),B0e=a("strong"),KCr=o("vit"),ZCr=o(" \u2014 "),xU=a("a"),e3r=o("FlaxViTModel"),o3r=o(" (ViT model)"),r3r=l(),lE=a("li"),P0e=a("strong"),t3r=o("wav2vec2"),a3r=o(" \u2014 "),$U=a("a"),n3r=o("FlaxWav2Vec2Model"),s3r=o(" (Wav2Vec2 model)"),l3r=l(),iE=a("li"),I0e=a("strong"),i3r=o("xglm"),d3r=o(" \u2014 "),kU=a("a"),c3r=o("FlaxXGLMModel"),f3r=o(" (XGLM model)"),m3r=l(),dE=a("li"),q0e=a("strong"),g3r=o("xlm-roberta"),h3r=o(" \u2014 "),SU=a("a"),p3r=o("FlaxXLMRobertaModel"),u3r=o(" (XLM-RoBERTa model)"),_3r=l(),F(cE.$$.fragment),xIe=l(),Lc=a("h2"),fE=a("a"),N0e=a("span"),F(OL.$$.fragment),b3r=l(),j0e=a("span"),v3r=o("FlaxAutoModelForCausalLM"),$Ie=l(),mr=a("div"),F(VL.$$.fragment),F3r=l(),xc=a("p"),T3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RU=a("a"),M3r=o("from_pretrained()"),E3r=o(" class method or the "),BU=a("a"),C3r=o("from_config()"),w3r=o(` class
method.`),A3r=l(),XL=a("p"),y3r=o("This class cannot be instantiated directly using "),D0e=a("code"),L3r=o("__init__()"),x3r=o(" (throws an error)."),$3r=l(),Dt=a("div"),F(zL.$$.fragment),k3r=l(),G0e=a("p"),S3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R3r=l(),$c=a("p"),B3r=o(`Note:
Loading a model from its configuration file does `),O0e=a("strong"),P3r=o("not"),I3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),q3r=o("from_pretrained()"),N3r=o(" to load the model weights."),j3r=l(),F(mE.$$.fragment),D3r=l(),Dr=a("div"),F(QL.$$.fragment),G3r=l(),V0e=a("p"),O3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V3r=l(),hn=a("p"),X3r=o("The model class to instantiate is selected based on the "),X0e=a("code"),z3r=o("model_type"),Q3r=o(` property of the config object (either
passed as an argument or loaded from `),z0e=a("code"),W3r=o("pretrained_model_name_or_path"),H3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=a("code"),U3r=o("pretrained_model_name_or_path"),J3r=o(":"),Y3r=l(),ke=a("ul"),gE=a("li"),W0e=a("strong"),K3r=o("bart"),Z3r=o(" \u2014 "),IU=a("a"),ewr=o("FlaxBartForCausalLM"),owr=o(" (BART model)"),rwr=l(),hE=a("li"),H0e=a("strong"),twr=o("bert"),awr=o(" \u2014 "),qU=a("a"),nwr=o("FlaxBertForCausalLM"),swr=o(" (BERT model)"),lwr=l(),pE=a("li"),U0e=a("strong"),iwr=o("big_bird"),dwr=o(" \u2014 "),NU=a("a"),cwr=o("FlaxBigBirdForCausalLM"),fwr=o(" (BigBird model)"),mwr=l(),uE=a("li"),J0e=a("strong"),gwr=o("electra"),hwr=o(" \u2014 "),jU=a("a"),pwr=o("FlaxElectraForCausalLM"),uwr=o(" (ELECTRA model)"),_wr=l(),_E=a("li"),Y0e=a("strong"),bwr=o("gpt2"),vwr=o(" \u2014 "),DU=a("a"),Fwr=o("FlaxGPT2LMHeadModel"),Twr=o(" (OpenAI GPT-2 model)"),Mwr=l(),bE=a("li"),K0e=a("strong"),Ewr=o("gpt_neo"),Cwr=o(" \u2014 "),GU=a("a"),wwr=o("FlaxGPTNeoForCausalLM"),Awr=o(" (GPT Neo model)"),ywr=l(),vE=a("li"),Z0e=a("strong"),Lwr=o("gptj"),xwr=o(" \u2014 "),OU=a("a"),$wr=o("FlaxGPTJForCausalLM"),kwr=o(" (GPT-J model)"),Swr=l(),FE=a("li"),eTe=a("strong"),Rwr=o("roberta"),Bwr=o(" \u2014 "),VU=a("a"),Pwr=o("FlaxRobertaForCausalLM"),Iwr=o(" (RoBERTa model)"),qwr=l(),TE=a("li"),oTe=a("strong"),Nwr=o("xglm"),jwr=o(" \u2014 "),XU=a("a"),Dwr=o("FlaxXGLMForCausalLM"),Gwr=o(" (XGLM model)"),Owr=l(),F(ME.$$.fragment),kIe=l(),kc=a("h2"),EE=a("a"),rTe=a("span"),F(WL.$$.fragment),Vwr=l(),tTe=a("span"),Xwr=o("FlaxAutoModelForPreTraining"),SIe=l(),gr=a("div"),F(HL.$$.fragment),zwr=l(),Sc=a("p"),Qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zU=a("a"),Wwr=o("from_pretrained()"),Hwr=o(" class method or the "),QU=a("a"),Uwr=o("from_config()"),Jwr=o(` class
method.`),Ywr=l(),UL=a("p"),Kwr=o("This class cannot be instantiated directly using "),aTe=a("code"),Zwr=o("__init__()"),eAr=o(" (throws an error)."),oAr=l(),Gt=a("div"),F(JL.$$.fragment),rAr=l(),nTe=a("p"),tAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aAr=l(),Rc=a("p"),nAr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),sAr=o("not"),lAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),iAr=o("from_pretrained()"),dAr=o(" to load the model weights."),cAr=l(),F(CE.$$.fragment),fAr=l(),Gr=a("div"),F(YL.$$.fragment),mAr=l(),lTe=a("p"),gAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hAr=l(),pn=a("p"),pAr=o("The model class to instantiate is selected based on the "),iTe=a("code"),uAr=o("model_type"),_Ar=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(":"),MAr=l(),Me=a("ul"),wE=a("li"),fTe=a("strong"),EAr=o("albert"),CAr=o(" \u2014 "),HU=a("a"),wAr=o("FlaxAlbertForPreTraining"),AAr=o(" (ALBERT model)"),yAr=l(),AE=a("li"),mTe=a("strong"),LAr=o("bart"),xAr=o(" \u2014 "),UU=a("a"),$Ar=o("FlaxBartForConditionalGeneration"),kAr=o(" (BART model)"),SAr=l(),yE=a("li"),gTe=a("strong"),RAr=o("bert"),BAr=o(" \u2014 "),JU=a("a"),PAr=o("FlaxBertForPreTraining"),IAr=o(" (BERT model)"),qAr=l(),LE=a("li"),hTe=a("strong"),NAr=o("big_bird"),jAr=o(" \u2014 "),YU=a("a"),DAr=o("FlaxBigBirdForPreTraining"),GAr=o(" (BigBird model)"),OAr=l(),xE=a("li"),pTe=a("strong"),VAr=o("electra"),XAr=o(" \u2014 "),KU=a("a"),zAr=o("FlaxElectraForPreTraining"),QAr=o(" (ELECTRA model)"),WAr=l(),$E=a("li"),uTe=a("strong"),HAr=o("mbart"),UAr=o(" \u2014 "),ZU=a("a"),JAr=o("FlaxMBartForConditionalGeneration"),YAr=o(" (mBART model)"),KAr=l(),kE=a("li"),_Te=a("strong"),ZAr=o("mt5"),e6r=o(" \u2014 "),eJ=a("a"),o6r=o("FlaxMT5ForConditionalGeneration"),r6r=o(" (mT5 model)"),t6r=l(),SE=a("li"),bTe=a("strong"),a6r=o("roberta"),n6r=o(" \u2014 "),oJ=a("a"),s6r=o("FlaxRobertaForMaskedLM"),l6r=o(" (RoBERTa model)"),i6r=l(),RE=a("li"),vTe=a("strong"),d6r=o("roformer"),c6r=o(" \u2014 "),rJ=a("a"),f6r=o("FlaxRoFormerForMaskedLM"),m6r=o(" (RoFormer model)"),g6r=l(),BE=a("li"),FTe=a("strong"),h6r=o("t5"),p6r=o(" \u2014 "),tJ=a("a"),u6r=o("FlaxT5ForConditionalGeneration"),_6r=o(" (T5 model)"),b6r=l(),PE=a("li"),TTe=a("strong"),v6r=o("wav2vec2"),F6r=o(" \u2014 "),aJ=a("a"),T6r=o("FlaxWav2Vec2ForPreTraining"),M6r=o(" (Wav2Vec2 model)"),E6r=l(),IE=a("li"),MTe=a("strong"),C6r=o("xlm-roberta"),w6r=o(" \u2014 "),nJ=a("a"),A6r=o("FlaxXLMRobertaForMaskedLM"),y6r=o(" (XLM-RoBERTa model)"),L6r=l(),F(qE.$$.fragment),RIe=l(),Bc=a("h2"),NE=a("a"),ETe=a("span"),F(KL.$$.fragment),x6r=l(),CTe=a("span"),$6r=o("FlaxAutoModelForMaskedLM"),BIe=l(),hr=a("div"),F(ZL.$$.fragment),k6r=l(),Pc=a("p"),S6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sJ=a("a"),R6r=o("from_pretrained()"),B6r=o(" class method or the "),lJ=a("a"),P6r=o("from_config()"),I6r=o(` class
method.`),q6r=l(),e8=a("p"),N6r=o("This class cannot be instantiated directly using "),wTe=a("code"),j6r=o("__init__()"),D6r=o(" (throws an error)."),G6r=l(),Ot=a("div"),F(o8.$$.fragment),O6r=l(),ATe=a("p"),V6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X6r=l(),Ic=a("p"),z6r=o(`Note:
Loading a model from its configuration file does `),yTe=a("strong"),Q6r=o("not"),W6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),H6r=o("from_pretrained()"),U6r=o(" to load the model weights."),J6r=l(),F(jE.$$.fragment),Y6r=l(),Or=a("div"),F(r8.$$.fragment),K6r=l(),LTe=a("p"),Z6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eyr=l(),un=a("p"),oyr=o("The model class to instantiate is selected based on the "),xTe=a("code"),ryr=o("model_type"),tyr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),ayr=o("pretrained_model_name_or_path"),nyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),syr=o("pretrained_model_name_or_path"),lyr=o(":"),iyr=l(),Le=a("ul"),DE=a("li"),STe=a("strong"),dyr=o("albert"),cyr=o(" \u2014 "),dJ=a("a"),fyr=o("FlaxAlbertForMaskedLM"),myr=o(" (ALBERT model)"),gyr=l(),GE=a("li"),RTe=a("strong"),hyr=o("bart"),pyr=o(" \u2014 "),cJ=a("a"),uyr=o("FlaxBartForConditionalGeneration"),_yr=o(" (BART model)"),byr=l(),OE=a("li"),BTe=a("strong"),vyr=o("bert"),Fyr=o(" \u2014 "),fJ=a("a"),Tyr=o("FlaxBertForMaskedLM"),Myr=o(" (BERT model)"),Eyr=l(),VE=a("li"),PTe=a("strong"),Cyr=o("big_bird"),wyr=o(" \u2014 "),mJ=a("a"),Ayr=o("FlaxBigBirdForMaskedLM"),yyr=o(" (BigBird model)"),Lyr=l(),XE=a("li"),ITe=a("strong"),xyr=o("distilbert"),$yr=o(" \u2014 "),gJ=a("a"),kyr=o("FlaxDistilBertForMaskedLM"),Syr=o(" (DistilBERT model)"),Ryr=l(),zE=a("li"),qTe=a("strong"),Byr=o("electra"),Pyr=o(" \u2014 "),hJ=a("a"),Iyr=o("FlaxElectraForMaskedLM"),qyr=o(" (ELECTRA model)"),Nyr=l(),QE=a("li"),NTe=a("strong"),jyr=o("mbart"),Dyr=o(" \u2014 "),pJ=a("a"),Gyr=o("FlaxMBartForConditionalGeneration"),Oyr=o(" (mBART model)"),Vyr=l(),WE=a("li"),jTe=a("strong"),Xyr=o("roberta"),zyr=o(" \u2014 "),uJ=a("a"),Qyr=o("FlaxRobertaForMaskedLM"),Wyr=o(" (RoBERTa model)"),Hyr=l(),HE=a("li"),DTe=a("strong"),Uyr=o("roformer"),Jyr=o(" \u2014 "),_J=a("a"),Yyr=o("FlaxRoFormerForMaskedLM"),Kyr=o(" (RoFormer model)"),Zyr=l(),UE=a("li"),GTe=a("strong"),eLr=o("xlm-roberta"),oLr=o(" \u2014 "),bJ=a("a"),rLr=o("FlaxXLMRobertaForMaskedLM"),tLr=o(" (XLM-RoBERTa model)"),aLr=l(),F(JE.$$.fragment),PIe=l(),qc=a("h2"),YE=a("a"),OTe=a("span"),F(t8.$$.fragment),nLr=l(),VTe=a("span"),sLr=o("FlaxAutoModelForSeq2SeqLM"),IIe=l(),pr=a("div"),F(a8.$$.fragment),lLr=l(),Nc=a("p"),iLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vJ=a("a"),dLr=o("from_pretrained()"),cLr=o(" class method or the "),FJ=a("a"),fLr=o("from_config()"),mLr=o(` class
method.`),gLr=l(),n8=a("p"),hLr=o("This class cannot be instantiated directly using "),XTe=a("code"),pLr=o("__init__()"),uLr=o(" (throws an error)."),_Lr=l(),Vt=a("div"),F(s8.$$.fragment),bLr=l(),zTe=a("p"),vLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FLr=l(),jc=a("p"),TLr=o(`Note:
Loading a model from its configuration file does `),QTe=a("strong"),MLr=o("not"),ELr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),CLr=o("from_pretrained()"),wLr=o(" to load the model weights."),ALr=l(),F(KE.$$.fragment),yLr=l(),Vr=a("div"),F(l8.$$.fragment),LLr=l(),WTe=a("p"),xLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Lr=l(),_n=a("p"),kLr=o("The model class to instantiate is selected based on the "),HTe=a("code"),SLr=o("model_type"),RLr=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),BLr=o("pretrained_model_name_or_path"),PLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),ILr=o("pretrained_model_name_or_path"),qLr=o(":"),NLr=l(),Se=a("ul"),ZE=a("li"),YTe=a("strong"),jLr=o("bart"),DLr=o(" \u2014 "),MJ=a("a"),GLr=o("FlaxBartForConditionalGeneration"),OLr=o(" (BART model)"),VLr=l(),e5=a("li"),KTe=a("strong"),XLr=o("blenderbot"),zLr=o(" \u2014 "),EJ=a("a"),QLr=o("FlaxBlenderbotForConditionalGeneration"),WLr=o(" (Blenderbot model)"),HLr=l(),o5=a("li"),ZTe=a("strong"),ULr=o("blenderbot-small"),JLr=o(" \u2014 "),CJ=a("a"),YLr=o("FlaxBlenderbotSmallForConditionalGeneration"),KLr=o(" (BlenderbotSmall model)"),ZLr=l(),r5=a("li"),e7e=a("strong"),e8r=o("encoder-decoder"),o8r=o(" \u2014 "),wJ=a("a"),r8r=o("FlaxEncoderDecoderModel"),t8r=o(" (Encoder decoder model)"),a8r=l(),t5=a("li"),o7e=a("strong"),n8r=o("marian"),s8r=o(" \u2014 "),AJ=a("a"),l8r=o("FlaxMarianMTModel"),i8r=o(" (Marian model)"),d8r=l(),a5=a("li"),r7e=a("strong"),c8r=o("mbart"),f8r=o(" \u2014 "),yJ=a("a"),m8r=o("FlaxMBartForConditionalGeneration"),g8r=o(" (mBART model)"),h8r=l(),n5=a("li"),t7e=a("strong"),p8r=o("mt5"),u8r=o(" \u2014 "),LJ=a("a"),_8r=o("FlaxMT5ForConditionalGeneration"),b8r=o(" (mT5 model)"),v8r=l(),s5=a("li"),a7e=a("strong"),F8r=o("pegasus"),T8r=o(" \u2014 "),xJ=a("a"),M8r=o("FlaxPegasusForConditionalGeneration"),E8r=o(" (Pegasus model)"),C8r=l(),l5=a("li"),n7e=a("strong"),w8r=o("t5"),A8r=o(" \u2014 "),$J=a("a"),y8r=o("FlaxT5ForConditionalGeneration"),L8r=o(" (T5 model)"),x8r=l(),F(i5.$$.fragment),qIe=l(),Dc=a("h2"),d5=a("a"),s7e=a("span"),F(i8.$$.fragment),$8r=l(),l7e=a("span"),k8r=o("FlaxAutoModelForSequenceClassification"),NIe=l(),ur=a("div"),F(d8.$$.fragment),S8r=l(),Gc=a("p"),R8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kJ=a("a"),B8r=o("from_pretrained()"),P8r=o(" class method or the "),SJ=a("a"),I8r=o("from_config()"),q8r=o(` class
method.`),N8r=l(),c8=a("p"),j8r=o("This class cannot be instantiated directly using "),i7e=a("code"),D8r=o("__init__()"),G8r=o(" (throws an error)."),O8r=l(),Xt=a("div"),F(f8.$$.fragment),V8r=l(),d7e=a("p"),X8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z8r=l(),Oc=a("p"),Q8r=o(`Note:
Loading a model from its configuration file does `),c7e=a("strong"),W8r=o("not"),H8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),U8r=o("from_pretrained()"),J8r=o(" to load the model weights."),Y8r=l(),F(c5.$$.fragment),K8r=l(),Xr=a("div"),F(m8.$$.fragment),Z8r=l(),f7e=a("p"),exr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oxr=l(),bn=a("p"),rxr=o("The model class to instantiate is selected based on the "),m7e=a("code"),txr=o("model_type"),axr=o(` property of the config object (either
passed as an argument or loaded from `),g7e=a("code"),nxr=o("pretrained_model_name_or_path"),sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(":"),dxr=l(),xe=a("ul"),f5=a("li"),p7e=a("strong"),cxr=o("albert"),fxr=o(" \u2014 "),BJ=a("a"),mxr=o("FlaxAlbertForSequenceClassification"),gxr=o(" (ALBERT model)"),hxr=l(),m5=a("li"),u7e=a("strong"),pxr=o("bart"),uxr=o(" \u2014 "),PJ=a("a"),_xr=o("FlaxBartForSequenceClassification"),bxr=o(" (BART model)"),vxr=l(),g5=a("li"),_7e=a("strong"),Fxr=o("bert"),Txr=o(" \u2014 "),IJ=a("a"),Mxr=o("FlaxBertForSequenceClassification"),Exr=o(" (BERT model)"),Cxr=l(),h5=a("li"),b7e=a("strong"),wxr=o("big_bird"),Axr=o(" \u2014 "),qJ=a("a"),yxr=o("FlaxBigBirdForSequenceClassification"),Lxr=o(" (BigBird model)"),xxr=l(),p5=a("li"),v7e=a("strong"),$xr=o("distilbert"),kxr=o(" \u2014 "),NJ=a("a"),Sxr=o("FlaxDistilBertForSequenceClassification"),Rxr=o(" (DistilBERT model)"),Bxr=l(),u5=a("li"),F7e=a("strong"),Pxr=o("electra"),Ixr=o(" \u2014 "),jJ=a("a"),qxr=o("FlaxElectraForSequenceClassification"),Nxr=o(" (ELECTRA model)"),jxr=l(),_5=a("li"),T7e=a("strong"),Dxr=o("mbart"),Gxr=o(" \u2014 "),DJ=a("a"),Oxr=o("FlaxMBartForSequenceClassification"),Vxr=o(" (mBART model)"),Xxr=l(),b5=a("li"),M7e=a("strong"),zxr=o("roberta"),Qxr=o(" \u2014 "),GJ=a("a"),Wxr=o("FlaxRobertaForSequenceClassification"),Hxr=o(" (RoBERTa model)"),Uxr=l(),v5=a("li"),E7e=a("strong"),Jxr=o("roformer"),Yxr=o(" \u2014 "),OJ=a("a"),Kxr=o("FlaxRoFormerForSequenceClassification"),Zxr=o(" (RoFormer model)"),e$r=l(),F5=a("li"),C7e=a("strong"),o$r=o("xlm-roberta"),r$r=o(" \u2014 "),VJ=a("a"),t$r=o("FlaxXLMRobertaForSequenceClassification"),a$r=o(" (XLM-RoBERTa model)"),n$r=l(),F(T5.$$.fragment),jIe=l(),Vc=a("h2"),M5=a("a"),w7e=a("span"),F(g8.$$.fragment),s$r=l(),A7e=a("span"),l$r=o("FlaxAutoModelForQuestionAnswering"),DIe=l(),_r=a("div"),F(h8.$$.fragment),i$r=l(),Xc=a("p"),d$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XJ=a("a"),c$r=o("from_pretrained()"),f$r=o(" class method or the "),zJ=a("a"),m$r=o("from_config()"),g$r=o(` class
method.`),h$r=l(),p8=a("p"),p$r=o("This class cannot be instantiated directly using "),y7e=a("code"),u$r=o("__init__()"),_$r=o(" (throws an error)."),b$r=l(),zt=a("div"),F(u8.$$.fragment),v$r=l(),L7e=a("p"),F$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),T$r=l(),zc=a("p"),M$r=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),E$r=o("not"),C$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),w$r=o("from_pretrained()"),A$r=o(" to load the model weights."),y$r=l(),F(E5.$$.fragment),L$r=l(),zr=a("div"),F(_8.$$.fragment),x$r=l(),$7e=a("p"),$$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),k$r=l(),vn=a("p"),S$r=o("The model class to instantiate is selected based on the "),k7e=a("code"),R$r=o("model_type"),B$r=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),P$r=o("pretrained_model_name_or_path"),I$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),q$r=o("pretrained_model_name_or_path"),N$r=o(":"),j$r=l(),$e=a("ul"),C5=a("li"),B7e=a("strong"),D$r=o("albert"),G$r=o(" \u2014 "),WJ=a("a"),O$r=o("FlaxAlbertForQuestionAnswering"),V$r=o(" (ALBERT model)"),X$r=l(),w5=a("li"),P7e=a("strong"),z$r=o("bart"),Q$r=o(" \u2014 "),HJ=a("a"),W$r=o("FlaxBartForQuestionAnswering"),H$r=o(" (BART model)"),U$r=l(),A5=a("li"),I7e=a("strong"),J$r=o("bert"),Y$r=o(" \u2014 "),UJ=a("a"),K$r=o("FlaxBertForQuestionAnswering"),Z$r=o(" (BERT model)"),ekr=l(),y5=a("li"),q7e=a("strong"),okr=o("big_bird"),rkr=o(" \u2014 "),JJ=a("a"),tkr=o("FlaxBigBirdForQuestionAnswering"),akr=o(" (BigBird model)"),nkr=l(),L5=a("li"),N7e=a("strong"),skr=o("distilbert"),lkr=o(" \u2014 "),YJ=a("a"),ikr=o("FlaxDistilBertForQuestionAnswering"),dkr=o(" (DistilBERT model)"),ckr=l(),x5=a("li"),j7e=a("strong"),fkr=o("electra"),mkr=o(" \u2014 "),KJ=a("a"),gkr=o("FlaxElectraForQuestionAnswering"),hkr=o(" (ELECTRA model)"),pkr=l(),$5=a("li"),D7e=a("strong"),ukr=o("mbart"),_kr=o(" \u2014 "),ZJ=a("a"),bkr=o("FlaxMBartForQuestionAnswering"),vkr=o(" (mBART model)"),Fkr=l(),k5=a("li"),G7e=a("strong"),Tkr=o("roberta"),Mkr=o(" \u2014 "),eY=a("a"),Ekr=o("FlaxRobertaForQuestionAnswering"),Ckr=o(" (RoBERTa model)"),wkr=l(),S5=a("li"),O7e=a("strong"),Akr=o("roformer"),ykr=o(" \u2014 "),oY=a("a"),Lkr=o("FlaxRoFormerForQuestionAnswering"),xkr=o(" (RoFormer model)"),$kr=l(),R5=a("li"),V7e=a("strong"),kkr=o("xlm-roberta"),Skr=o(" \u2014 "),rY=a("a"),Rkr=o("FlaxXLMRobertaForQuestionAnswering"),Bkr=o(" (XLM-RoBERTa model)"),Pkr=l(),F(B5.$$.fragment),GIe=l(),Qc=a("h2"),P5=a("a"),X7e=a("span"),F(b8.$$.fragment),Ikr=l(),z7e=a("span"),qkr=o("FlaxAutoModelForTokenClassification"),OIe=l(),br=a("div"),F(v8.$$.fragment),Nkr=l(),Wc=a("p"),jkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tY=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" class method or the "),aY=a("a"),Okr=o("from_config()"),Vkr=o(` class
method.`),Xkr=l(),F8=a("p"),zkr=o("This class cannot be instantiated directly using "),Q7e=a("code"),Qkr=o("__init__()"),Wkr=o(" (throws an error)."),Hkr=l(),Qt=a("div"),F(T8.$$.fragment),Ukr=l(),W7e=a("p"),Jkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ykr=l(),Hc=a("p"),Kkr=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),Zkr=o("not"),eSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),oSr=o("from_pretrained()"),rSr=o(" to load the model weights."),tSr=l(),F(I5.$$.fragment),aSr=l(),Qr=a("div"),F(M8.$$.fragment),nSr=l(),U7e=a("p"),sSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lSr=l(),Fn=a("p"),iSr=o("The model class to instantiate is selected based on the "),J7e=a("code"),dSr=o("model_type"),cSr=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),fSr=o("pretrained_model_name_or_path"),mSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),gSr=o("pretrained_model_name_or_path"),hSr=o(":"),pSr=l(),De=a("ul"),q5=a("li"),Z7e=a("strong"),uSr=o("albert"),_Sr=o(" \u2014 "),sY=a("a"),bSr=o("FlaxAlbertForTokenClassification"),vSr=o(" (ALBERT model)"),FSr=l(),N5=a("li"),e9e=a("strong"),TSr=o("bert"),MSr=o(" \u2014 "),lY=a("a"),ESr=o("FlaxBertForTokenClassification"),CSr=o(" (BERT model)"),wSr=l(),j5=a("li"),o9e=a("strong"),ASr=o("big_bird"),ySr=o(" \u2014 "),iY=a("a"),LSr=o("FlaxBigBirdForTokenClassification"),xSr=o(" (BigBird model)"),$Sr=l(),D5=a("li"),r9e=a("strong"),kSr=o("distilbert"),SSr=o(" \u2014 "),dY=a("a"),RSr=o("FlaxDistilBertForTokenClassification"),BSr=o(" (DistilBERT model)"),PSr=l(),G5=a("li"),t9e=a("strong"),ISr=o("electra"),qSr=o(" \u2014 "),cY=a("a"),NSr=o("FlaxElectraForTokenClassification"),jSr=o(" (ELECTRA model)"),DSr=l(),O5=a("li"),a9e=a("strong"),GSr=o("roberta"),OSr=o(" \u2014 "),fY=a("a"),VSr=o("FlaxRobertaForTokenClassification"),XSr=o(" (RoBERTa model)"),zSr=l(),V5=a("li"),n9e=a("strong"),QSr=o("roformer"),WSr=o(" \u2014 "),mY=a("a"),HSr=o("FlaxRoFormerForTokenClassification"),USr=o(" (RoFormer model)"),JSr=l(),X5=a("li"),s9e=a("strong"),YSr=o("xlm-roberta"),KSr=o(" \u2014 "),gY=a("a"),ZSr=o("FlaxXLMRobertaForTokenClassification"),eRr=o(" (XLM-RoBERTa model)"),oRr=l(),F(z5.$$.fragment),VIe=l(),Uc=a("h2"),Q5=a("a"),l9e=a("span"),F(E8.$$.fragment),rRr=l(),i9e=a("span"),tRr=o("FlaxAutoModelForMultipleChoice"),XIe=l(),vr=a("div"),F(C8.$$.fragment),aRr=l(),Jc=a("p"),nRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hY=a("a"),sRr=o("from_pretrained()"),lRr=o(" class method or the "),pY=a("a"),iRr=o("from_config()"),dRr=o(` class
method.`),cRr=l(),w8=a("p"),fRr=o("This class cannot be instantiated directly using "),d9e=a("code"),mRr=o("__init__()"),gRr=o(" (throws an error)."),hRr=l(),Wt=a("div"),F(A8.$$.fragment),pRr=l(),c9e=a("p"),uRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Rr=l(),Yc=a("p"),bRr=o(`Note:
Loading a model from its configuration file does `),f9e=a("strong"),vRr=o("not"),FRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),TRr=o("from_pretrained()"),MRr=o(" to load the model weights."),ERr=l(),F(W5.$$.fragment),CRr=l(),Wr=a("div"),F(y8.$$.fragment),wRr=l(),m9e=a("p"),ARr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yRr=l(),Tn=a("p"),LRr=o("The model class to instantiate is selected based on the "),g9e=a("code"),xRr=o("model_type"),$Rr=o(` property of the config object (either
passed as an argument or loaded from `),h9e=a("code"),kRr=o("pretrained_model_name_or_path"),SRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p9e=a("code"),RRr=o("pretrained_model_name_or_path"),BRr=o(":"),PRr=l(),Ge=a("ul"),H5=a("li"),u9e=a("strong"),IRr=o("albert"),qRr=o(" \u2014 "),_Y=a("a"),NRr=o("FlaxAlbertForMultipleChoice"),jRr=o(" (ALBERT model)"),DRr=l(),U5=a("li"),_9e=a("strong"),GRr=o("bert"),ORr=o(" \u2014 "),bY=a("a"),VRr=o("FlaxBertForMultipleChoice"),XRr=o(" (BERT model)"),zRr=l(),J5=a("li"),b9e=a("strong"),QRr=o("big_bird"),WRr=o(" \u2014 "),vY=a("a"),HRr=o("FlaxBigBirdForMultipleChoice"),URr=o(" (BigBird model)"),JRr=l(),Y5=a("li"),v9e=a("strong"),YRr=o("distilbert"),KRr=o(" \u2014 "),FY=a("a"),ZRr=o("FlaxDistilBertForMultipleChoice"),eBr=o(" (DistilBERT model)"),oBr=l(),K5=a("li"),F9e=a("strong"),rBr=o("electra"),tBr=o(" \u2014 "),TY=a("a"),aBr=o("FlaxElectraForMultipleChoice"),nBr=o(" (ELECTRA model)"),sBr=l(),Z5=a("li"),T9e=a("strong"),lBr=o("roberta"),iBr=o(" \u2014 "),MY=a("a"),dBr=o("FlaxRobertaForMultipleChoice"),cBr=o(" (RoBERTa model)"),fBr=l(),eC=a("li"),M9e=a("strong"),mBr=o("roformer"),gBr=o(" \u2014 "),EY=a("a"),hBr=o("FlaxRoFormerForMultipleChoice"),pBr=o(" (RoFormer model)"),uBr=l(),oC=a("li"),E9e=a("strong"),_Br=o("xlm-roberta"),bBr=o(" \u2014 "),CY=a("a"),vBr=o("FlaxXLMRobertaForMultipleChoice"),FBr=o(" (XLM-RoBERTa model)"),TBr=l(),F(rC.$$.fragment),zIe=l(),Kc=a("h2"),tC=a("a"),C9e=a("span"),F(L8.$$.fragment),MBr=l(),w9e=a("span"),EBr=o("FlaxAutoModelForNextSentencePrediction"),QIe=l(),Fr=a("div"),F(x8.$$.fragment),CBr=l(),Zc=a("p"),wBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wY=a("a"),ABr=o("from_pretrained()"),yBr=o(" class method or the "),AY=a("a"),LBr=o("from_config()"),xBr=o(` class
method.`),$Br=l(),$8=a("p"),kBr=o("This class cannot be instantiated directly using "),A9e=a("code"),SBr=o("__init__()"),RBr=o(" (throws an error)."),BBr=l(),Ht=a("div"),F(k8.$$.fragment),PBr=l(),y9e=a("p"),IBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qBr=l(),ef=a("p"),NBr=o(`Note:
Loading a model from its configuration file does `),L9e=a("strong"),jBr=o("not"),DBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),GBr=o("from_pretrained()"),OBr=o(" to load the model weights."),VBr=l(),F(aC.$$.fragment),XBr=l(),Hr=a("div"),F(S8.$$.fragment),zBr=l(),x9e=a("p"),QBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WBr=l(),Mn=a("p"),HBr=o("The model class to instantiate is selected based on the "),$9e=a("code"),UBr=o("model_type"),JBr=o(` property of the config object (either
passed as an argument or loaded from `),k9e=a("code"),YBr=o("pretrained_model_name_or_path"),KBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=a("code"),ZBr=o("pretrained_model_name_or_path"),ePr=o(":"),oPr=l(),R9e=a("ul"),nC=a("li"),B9e=a("strong"),rPr=o("bert"),tPr=o(" \u2014 "),LY=a("a"),aPr=o("FlaxBertForNextSentencePrediction"),nPr=o(" (BERT model)"),sPr=l(),F(sC.$$.fragment),WIe=l(),of=a("h2"),lC=a("a"),P9e=a("span"),F(R8.$$.fragment),lPr=l(),I9e=a("span"),iPr=o("FlaxAutoModelForImageClassification"),HIe=l(),Tr=a("div"),F(B8.$$.fragment),dPr=l(),rf=a("p"),cPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xY=a("a"),fPr=o("from_pretrained()"),mPr=o(" class method or the "),$Y=a("a"),gPr=o("from_config()"),hPr=o(` class
method.`),pPr=l(),P8=a("p"),uPr=o("This class cannot be instantiated directly using "),q9e=a("code"),_Pr=o("__init__()"),bPr=o(" (throws an error)."),vPr=l(),Ut=a("div"),F(I8.$$.fragment),FPr=l(),N9e=a("p"),TPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MPr=l(),tf=a("p"),EPr=o(`Note:
Loading a model from its configuration file does `),j9e=a("strong"),CPr=o("not"),wPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),APr=o("from_pretrained()"),yPr=o(" to load the model weights."),LPr=l(),F(iC.$$.fragment),xPr=l(),Ur=a("div"),F(q8.$$.fragment),$Pr=l(),D9e=a("p"),kPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SPr=l(),En=a("p"),RPr=o("The model class to instantiate is selected based on the "),G9e=a("code"),BPr=o("model_type"),PPr=o(` property of the config object (either
passed as an argument or loaded from `),O9e=a("code"),IPr=o("pretrained_model_name_or_path"),qPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V9e=a("code"),NPr=o("pretrained_model_name_or_path"),jPr=o(":"),DPr=l(),N8=a("ul"),dC=a("li"),X9e=a("strong"),GPr=o("beit"),OPr=o(" \u2014 "),SY=a("a"),VPr=o("FlaxBeitForImageClassification"),XPr=o(" (BEiT model)"),zPr=l(),cC=a("li"),z9e=a("strong"),QPr=o("vit"),WPr=o(" \u2014 "),RY=a("a"),HPr=o("FlaxViTForImageClassification"),UPr=o(" (ViT model)"),JPr=l(),F(fC.$$.fragment),UIe=l(),af=a("h2"),mC=a("a"),Q9e=a("span"),F(j8.$$.fragment),YPr=l(),W9e=a("span"),KPr=o("FlaxAutoModelForVision2Seq"),JIe=l(),Mr=a("div"),F(D8.$$.fragment),ZPr=l(),nf=a("p"),eIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BY=a("a"),oIr=o("from_pretrained()"),rIr=o(" class method or the "),PY=a("a"),tIr=o("from_config()"),aIr=o(` class
method.`),nIr=l(),G8=a("p"),sIr=o("This class cannot be instantiated directly using "),H9e=a("code"),lIr=o("__init__()"),iIr=o(" (throws an error)."),dIr=l(),Jt=a("div"),F(O8.$$.fragment),cIr=l(),U9e=a("p"),fIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mIr=l(),sf=a("p"),gIr=o(`Note:
Loading a model from its configuration file does `),J9e=a("strong"),hIr=o("not"),pIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),uIr=o("from_pretrained()"),_Ir=o(" to load the model weights."),bIr=l(),F(gC.$$.fragment),vIr=l(),Jr=a("div"),F(V8.$$.fragment),FIr=l(),Y9e=a("p"),TIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MIr=l(),Cn=a("p"),EIr=o("The model class to instantiate is selected based on the "),K9e=a("code"),CIr=o("model_type"),wIr=o(` property of the config object (either
passed as an argument or loaded from `),Z9e=a("code"),AIr=o("pretrained_model_name_or_path"),yIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),LIr=o("pretrained_model_name_or_path"),xIr=o(":"),$Ir=l(),oMe=a("ul"),hC=a("li"),rMe=a("strong"),kIr=o("vision-encoder-decoder"),SIr=o(" \u2014 "),qY=a("a"),RIr=o("FlaxVisionEncoderDecoderModel"),BIr=o(" (Vision Encoder decoder model)"),PIr=l(),F(pC.$$.fragment),this.h()},l(f){const _=DCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var X8=s(p);m=n(X8,"A",{id:!0,class:!0,href:!0});var tMe=s(m);u=n(tMe,"SPAN",{});var aMe=s(u);T(d.$$.fragment,aMe),aMe.forEach(t),tMe.forEach(t),h=i(X8),Mo=n(X8,"SPAN",{});var nMe=s(Mo);li=r(nMe,"Auto Classes"),nMe.forEach(t),X8.forEach(t),ff=i(f),et=n(f,"P",{});var z8=s(et);ii=r(z8,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(z8,"CODE",{});var sMe=s(di);Bw=r(sMe,"from_pretrained()"),sMe.forEach(t),mf=r(z8,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),z8.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var lMe=s(An);Pw=r(lMe,"AutoConfig"),lMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var iMe=s(Ln);Iw=r(iMe,"AutoModel"),iMe.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var dMe=s(xn);qw=r(dMe,"AutoTokenizer"),dMe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),gf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Q8=s(Ae);r$=r(Q8,"will create a model that is an instance of "),gi=n(Q8,"A",{href:!0});var cMe=s(gi);t$=r(cMe,"BertModel"),cMe.forEach(t),a$=r(Q8,"."),Q8.forEach(t),Eo=i(f),Ea=n(f,"P",{});var W8=s(Ea);n$=r(W8,"There is one class of "),hf=n(W8,"CODE",{});var fMe=s(hf);s$=r(fMe,"AutoModel"),fMe.forEach(t),sje=r(W8," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),W8.forEach(t),HBe=i(f),hi=n(f,"H2",{class:!0});var H8=s(hi);pf=n(H8,"A",{id:!0,class:!0,href:!0});var mMe=s(pf);$Z=n(mMe,"SPAN",{});var gMe=s($Z);T(Nw.$$.fragment,gMe),gMe.forEach(t),mMe.forEach(t),lje=i(H8),kZ=n(H8,"SPAN",{});var hMe=s(kZ);ije=r(hMe,"Extending the Auto Classes"),hMe.forEach(t),H8.forEach(t),UBe=i(f),$n=n(f,"P",{});var lf=s($n);dje=r(lf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),SZ=n(lf,"CODE",{});var pMe=s(SZ);cje=r(pMe,"NewModel"),pMe.forEach(t),fje=r(lf,", make sure you have a "),RZ=n(lf,"CODE",{});var uMe=s(RZ);mje=r(uMe,"NewModelConfig"),uMe.forEach(t),gje=r(lf,` then you can add those to the auto
classes like this:`),lf.forEach(t),JBe=i(f),T(jw.$$.fragment,f),YBe=i(f),l$=n(f,"P",{});var _Me=s(l$);hje=r(_Me,"You will then be able to use the auto classes like you would usually do!"),_Me.forEach(t),KBe=i(f),T(uf.$$.fragment,f),ZBe=i(f),pi=n(f,"H2",{class:!0});var U8=s(pi);_f=n(U8,"A",{id:!0,class:!0,href:!0});var bMe=s(_f);BZ=n(bMe,"SPAN",{});var vMe=s(BZ);T(Dw.$$.fragment,vMe),vMe.forEach(t),bMe.forEach(t),pje=i(U8),PZ=n(U8,"SPAN",{});var FMe=s(PZ);uje=r(FMe,"AutoConfig"),FMe.forEach(t),U8.forEach(t),ePe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(Gw.$$.fragment,Kr),_je=i(Kr),Ow=n(Kr,"P",{});var J8=s(Ow);bje=r(J8,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i$=n(J8,"A",{href:!0});var TMe=s(i$);vje=r(TMe,"from_pretrained()"),TMe.forEach(t),Fje=r(J8," class method."),J8.forEach(t),Tje=i(Kr),Vw=n(Kr,"P",{});var Y8=s(Vw);Mje=r(Y8,"This class cannot be instantiated directly using "),IZ=n(Y8,"CODE",{});var MMe=s(IZ);Eje=r(MMe,"__init__()"),MMe.forEach(t),Cje=r(Y8," (throws an error)."),Y8.forEach(t),wje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(Xw.$$.fragment,Zr),Aje=i(Zr),qZ=n(Zr,"P",{});var EMe=s(qZ);yje=r(EMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),EMe.forEach(t),Lje=i(Zr),ui=n(Zr,"P",{});var df=s(ui);xje=r(df,"The configuration class to instantiate is selected based on the "),NZ=n(df,"CODE",{});var CMe=s(NZ);$je=r(CMe,"model_type"),CMe.forEach(t),kje=r(df,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),jZ=n(df,"CODE",{});var wMe=s(jZ);Sje=r(wMe,"pretrained_model_name_or_path"),wMe.forEach(t),Rje=r(df,":"),df.forEach(t),Bje=i(Zr),y=n(Zr,"UL",{});var L=s(y);bf=n(L,"LI",{});var uC=s(bf);DZ=n(uC,"STRONG",{});var AMe=s(DZ);Pje=r(AMe,"albert"),AMe.forEach(t),Ije=r(uC," \u2014 "),d$=n(uC,"A",{href:!0});var yMe=s(d$);qje=r(yMe,"AlbertConfig"),yMe.forEach(t),Nje=r(uC," (ALBERT model)"),uC.forEach(t),jje=i(L),vf=n(L,"LI",{});var _C=s(vf);GZ=n(_C,"STRONG",{});var LMe=s(GZ);Dje=r(LMe,"bart"),LMe.forEach(t),Gje=r(_C," \u2014 "),c$=n(_C,"A",{href:!0});var xMe=s(c$);Oje=r(xMe,"BartConfig"),xMe.forEach(t),Vje=r(_C," (BART model)"),_C.forEach(t),Xje=i(L),Ff=n(L,"LI",{});var bC=s(Ff);OZ=n(bC,"STRONG",{});var $Me=s(OZ);zje=r($Me,"beit"),$Me.forEach(t),Qje=r(bC," \u2014 "),f$=n(bC,"A",{href:!0});var kMe=s(f$);Wje=r(kMe,"BeitConfig"),kMe.forEach(t),Hje=r(bC," (BEiT model)"),bC.forEach(t),Uje=i(L),Tf=n(L,"LI",{});var vC=s(Tf);VZ=n(vC,"STRONG",{});var SMe=s(VZ);Jje=r(SMe,"bert"),SMe.forEach(t),Yje=r(vC," \u2014 "),m$=n(vC,"A",{href:!0});var RMe=s(m$);Kje=r(RMe,"BertConfig"),RMe.forEach(t),Zje=r(vC," (BERT model)"),vC.forEach(t),eDe=i(L),Mf=n(L,"LI",{});var FC=s(Mf);XZ=n(FC,"STRONG",{});var BMe=s(XZ);oDe=r(BMe,"bert-generation"),BMe.forEach(t),rDe=r(FC," \u2014 "),g$=n(FC,"A",{href:!0});var PMe=s(g$);tDe=r(PMe,"BertGenerationConfig"),PMe.forEach(t),aDe=r(FC," (Bert Generation model)"),FC.forEach(t),nDe=i(L),Ef=n(L,"LI",{});var TC=s(Ef);zZ=n(TC,"STRONG",{});var IMe=s(zZ);sDe=r(IMe,"big_bird"),IMe.forEach(t),lDe=r(TC," \u2014 "),h$=n(TC,"A",{href:!0});var qMe=s(h$);iDe=r(qMe,"BigBirdConfig"),qMe.forEach(t),dDe=r(TC," (BigBird model)"),TC.forEach(t),cDe=i(L),Cf=n(L,"LI",{});var MC=s(Cf);QZ=n(MC,"STRONG",{});var NMe=s(QZ);fDe=r(NMe,"bigbird_pegasus"),NMe.forEach(t),mDe=r(MC," \u2014 "),p$=n(MC,"A",{href:!0});var jMe=s(p$);gDe=r(jMe,"BigBirdPegasusConfig"),jMe.forEach(t),hDe=r(MC," (BigBirdPegasus model)"),MC.forEach(t),pDe=i(L),wf=n(L,"LI",{});var EC=s(wf);WZ=n(EC,"STRONG",{});var DMe=s(WZ);uDe=r(DMe,"blenderbot"),DMe.forEach(t),_De=r(EC," \u2014 "),u$=n(EC,"A",{href:!0});var GMe=s(u$);bDe=r(GMe,"BlenderbotConfig"),GMe.forEach(t),vDe=r(EC," (Blenderbot model)"),EC.forEach(t),FDe=i(L),Af=n(L,"LI",{});var CC=s(Af);HZ=n(CC,"STRONG",{});var OMe=s(HZ);TDe=r(OMe,"blenderbot-small"),OMe.forEach(t),MDe=r(CC," \u2014 "),_$=n(CC,"A",{href:!0});var VMe=s(_$);EDe=r(VMe,"BlenderbotSmallConfig"),VMe.forEach(t),CDe=r(CC," (BlenderbotSmall model)"),CC.forEach(t),wDe=i(L),yf=n(L,"LI",{});var wC=s(yf);UZ=n(wC,"STRONG",{});var XMe=s(UZ);ADe=r(XMe,"camembert"),XMe.forEach(t),yDe=r(wC," \u2014 "),b$=n(wC,"A",{href:!0});var zMe=s(b$);LDe=r(zMe,"CamembertConfig"),zMe.forEach(t),xDe=r(wC," (CamemBERT model)"),wC.forEach(t),$De=i(L),Lf=n(L,"LI",{});var AC=s(Lf);JZ=n(AC,"STRONG",{});var QMe=s(JZ);kDe=r(QMe,"canine"),QMe.forEach(t),SDe=r(AC," \u2014 "),v$=n(AC,"A",{href:!0});var WMe=s(v$);RDe=r(WMe,"CanineConfig"),WMe.forEach(t),BDe=r(AC," (Canine model)"),AC.forEach(t),PDe=i(L),xf=n(L,"LI",{});var yC=s(xf);YZ=n(yC,"STRONG",{});var HMe=s(YZ);IDe=r(HMe,"clip"),HMe.forEach(t),qDe=r(yC," \u2014 "),F$=n(yC,"A",{href:!0});var UMe=s(F$);NDe=r(UMe,"CLIPConfig"),UMe.forEach(t),jDe=r(yC," (CLIP model)"),yC.forEach(t),DDe=i(L),$f=n(L,"LI",{});var LC=s($f);KZ=n(LC,"STRONG",{});var JMe=s(KZ);GDe=r(JMe,"convbert"),JMe.forEach(t),ODe=r(LC," \u2014 "),T$=n(LC,"A",{href:!0});var YMe=s(T$);VDe=r(YMe,"ConvBertConfig"),YMe.forEach(t),XDe=r(LC," (ConvBERT model)"),LC.forEach(t),zDe=i(L),kf=n(L,"LI",{});var xC=s(kf);ZZ=n(xC,"STRONG",{});var KMe=s(ZZ);QDe=r(KMe,"convnext"),KMe.forEach(t),WDe=r(xC," \u2014 "),M$=n(xC,"A",{href:!0});var ZMe=s(M$);HDe=r(ZMe,"ConvNextConfig"),ZMe.forEach(t),UDe=r(xC," (ConvNext model)"),xC.forEach(t),JDe=i(L),Sf=n(L,"LI",{});var $C=s(Sf);eee=n($C,"STRONG",{});var e4e=s(eee);YDe=r(e4e,"ctrl"),e4e.forEach(t),KDe=r($C," \u2014 "),E$=n($C,"A",{href:!0});var o4e=s(E$);ZDe=r(o4e,"CTRLConfig"),o4e.forEach(t),eGe=r($C," (CTRL model)"),$C.forEach(t),oGe=i(L),Rf=n(L,"LI",{});var kC=s(Rf);oee=n(kC,"STRONG",{});var r4e=s(oee);rGe=r(r4e,"data2vec-audio"),r4e.forEach(t),tGe=r(kC," \u2014 "),C$=n(kC,"A",{href:!0});var t4e=s(C$);aGe=r(t4e,"Data2VecAudioConfig"),t4e.forEach(t),nGe=r(kC," (Data2VecAudio model)"),kC.forEach(t),sGe=i(L),Bf=n(L,"LI",{});var SC=s(Bf);ree=n(SC,"STRONG",{});var a4e=s(ree);lGe=r(a4e,"data2vec-text"),a4e.forEach(t),iGe=r(SC," \u2014 "),w$=n(SC,"A",{href:!0});var n4e=s(w$);dGe=r(n4e,"Data2VecTextConfig"),n4e.forEach(t),cGe=r(SC," (Data2VecText model)"),SC.forEach(t),fGe=i(L),Pf=n(L,"LI",{});var RC=s(Pf);tee=n(RC,"STRONG",{});var s4e=s(tee);mGe=r(s4e,"data2vec-vision"),s4e.forEach(t),gGe=r(RC," \u2014 "),A$=n(RC,"A",{href:!0});var l4e=s(A$);hGe=r(l4e,"Data2VecVisionConfig"),l4e.forEach(t),pGe=r(RC," (Data2VecVision model)"),RC.forEach(t),uGe=i(L),If=n(L,"LI",{});var BC=s(If);aee=n(BC,"STRONG",{});var i4e=s(aee);_Ge=r(i4e,"deberta"),i4e.forEach(t),bGe=r(BC," \u2014 "),y$=n(BC,"A",{href:!0});var d4e=s(y$);vGe=r(d4e,"DebertaConfig"),d4e.forEach(t),FGe=r(BC," (DeBERTa model)"),BC.forEach(t),TGe=i(L),qf=n(L,"LI",{});var PC=s(qf);nee=n(PC,"STRONG",{});var c4e=s(nee);MGe=r(c4e,"deberta-v2"),c4e.forEach(t),EGe=r(PC," \u2014 "),L$=n(PC,"A",{href:!0});var f4e=s(L$);CGe=r(f4e,"DebertaV2Config"),f4e.forEach(t),wGe=r(PC," (DeBERTa-v2 model)"),PC.forEach(t),AGe=i(L),Nf=n(L,"LI",{});var IC=s(Nf);see=n(IC,"STRONG",{});var m4e=s(see);yGe=r(m4e,"decision_transformer"),m4e.forEach(t),LGe=r(IC," \u2014 "),x$=n(IC,"A",{href:!0});var g4e=s(x$);xGe=r(g4e,"DecisionTransformerConfig"),g4e.forEach(t),$Ge=r(IC," (Decision Transformer model)"),IC.forEach(t),kGe=i(L),jf=n(L,"LI",{});var qC=s(jf);lee=n(qC,"STRONG",{});var h4e=s(lee);SGe=r(h4e,"deit"),h4e.forEach(t),RGe=r(qC," \u2014 "),$$=n(qC,"A",{href:!0});var p4e=s($$);BGe=r(p4e,"DeiTConfig"),p4e.forEach(t),PGe=r(qC," (DeiT model)"),qC.forEach(t),IGe=i(L),Df=n(L,"LI",{});var NC=s(Df);iee=n(NC,"STRONG",{});var u4e=s(iee);qGe=r(u4e,"detr"),u4e.forEach(t),NGe=r(NC," \u2014 "),k$=n(NC,"A",{href:!0});var qIr=s(k$);jGe=r(qIr,"DetrConfig"),qIr.forEach(t),DGe=r(NC," (DETR model)"),NC.forEach(t),GGe=i(L),Gf=n(L,"LI",{});var _4e=s(Gf);dee=n(_4e,"STRONG",{});var NIr=s(dee);OGe=r(NIr,"distilbert"),NIr.forEach(t),VGe=r(_4e," \u2014 "),S$=n(_4e,"A",{href:!0});var jIr=s(S$);XGe=r(jIr,"DistilBertConfig"),jIr.forEach(t),zGe=r(_4e," (DistilBERT model)"),_4e.forEach(t),QGe=i(L),Of=n(L,"LI",{});var b4e=s(Of);cee=n(b4e,"STRONG",{});var DIr=s(cee);WGe=r(DIr,"dpr"),DIr.forEach(t),HGe=r(b4e," \u2014 "),R$=n(b4e,"A",{href:!0});var GIr=s(R$);UGe=r(GIr,"DPRConfig"),GIr.forEach(t),JGe=r(b4e," (DPR model)"),b4e.forEach(t),YGe=i(L),Vf=n(L,"LI",{});var v4e=s(Vf);fee=n(v4e,"STRONG",{});var OIr=s(fee);KGe=r(OIr,"dpt"),OIr.forEach(t),ZGe=r(v4e," \u2014 "),B$=n(v4e,"A",{href:!0});var VIr=s(B$);eOe=r(VIr,"DPTConfig"),VIr.forEach(t),oOe=r(v4e," (DPT model)"),v4e.forEach(t),rOe=i(L),Xf=n(L,"LI",{});var F4e=s(Xf);mee=n(F4e,"STRONG",{});var XIr=s(mee);tOe=r(XIr,"electra"),XIr.forEach(t),aOe=r(F4e," \u2014 "),P$=n(F4e,"A",{href:!0});var zIr=s(P$);nOe=r(zIr,"ElectraConfig"),zIr.forEach(t),sOe=r(F4e," (ELECTRA model)"),F4e.forEach(t),lOe=i(L),zf=n(L,"LI",{});var T4e=s(zf);gee=n(T4e,"STRONG",{});var QIr=s(gee);iOe=r(QIr,"encoder-decoder"),QIr.forEach(t),dOe=r(T4e," \u2014 "),I$=n(T4e,"A",{href:!0});var WIr=s(I$);cOe=r(WIr,"EncoderDecoderConfig"),WIr.forEach(t),fOe=r(T4e," (Encoder decoder model)"),T4e.forEach(t),mOe=i(L),Qf=n(L,"LI",{});var M4e=s(Qf);hee=n(M4e,"STRONG",{});var HIr=s(hee);gOe=r(HIr,"flaubert"),HIr.forEach(t),hOe=r(M4e," \u2014 "),q$=n(M4e,"A",{href:!0});var UIr=s(q$);pOe=r(UIr,"FlaubertConfig"),UIr.forEach(t),uOe=r(M4e," (FlauBERT model)"),M4e.forEach(t),_Oe=i(L),Wf=n(L,"LI",{});var E4e=s(Wf);pee=n(E4e,"STRONG",{});var JIr=s(pee);bOe=r(JIr,"fnet"),JIr.forEach(t),vOe=r(E4e," \u2014 "),N$=n(E4e,"A",{href:!0});var YIr=s(N$);FOe=r(YIr,"FNetConfig"),YIr.forEach(t),TOe=r(E4e," (FNet model)"),E4e.forEach(t),MOe=i(L),Hf=n(L,"LI",{});var C4e=s(Hf);uee=n(C4e,"STRONG",{});var KIr=s(uee);EOe=r(KIr,"fsmt"),KIr.forEach(t),COe=r(C4e," \u2014 "),j$=n(C4e,"A",{href:!0});var ZIr=s(j$);wOe=r(ZIr,"FSMTConfig"),ZIr.forEach(t),AOe=r(C4e," (FairSeq Machine-Translation model)"),C4e.forEach(t),yOe=i(L),Uf=n(L,"LI",{});var w4e=s(Uf);_ee=n(w4e,"STRONG",{});var eqr=s(_ee);LOe=r(eqr,"funnel"),eqr.forEach(t),xOe=r(w4e," \u2014 "),D$=n(w4e,"A",{href:!0});var oqr=s(D$);$Oe=r(oqr,"FunnelConfig"),oqr.forEach(t),kOe=r(w4e," (Funnel Transformer model)"),w4e.forEach(t),SOe=i(L),Jf=n(L,"LI",{});var A4e=s(Jf);bee=n(A4e,"STRONG",{});var rqr=s(bee);ROe=r(rqr,"glpn"),rqr.forEach(t),BOe=r(A4e," \u2014 "),G$=n(A4e,"A",{href:!0});var tqr=s(G$);POe=r(tqr,"GLPNConfig"),tqr.forEach(t),IOe=r(A4e," (GLPN model)"),A4e.forEach(t),qOe=i(L),Yf=n(L,"LI",{});var y4e=s(Yf);vee=n(y4e,"STRONG",{});var aqr=s(vee);NOe=r(aqr,"gpt2"),aqr.forEach(t),jOe=r(y4e," \u2014 "),O$=n(y4e,"A",{href:!0});var nqr=s(O$);DOe=r(nqr,"GPT2Config"),nqr.forEach(t),GOe=r(y4e," (OpenAI GPT-2 model)"),y4e.forEach(t),OOe=i(L),Kf=n(L,"LI",{});var L4e=s(Kf);Fee=n(L4e,"STRONG",{});var sqr=s(Fee);VOe=r(sqr,"gpt_neo"),sqr.forEach(t),XOe=r(L4e," \u2014 "),V$=n(L4e,"A",{href:!0});var lqr=s(V$);zOe=r(lqr,"GPTNeoConfig"),lqr.forEach(t),QOe=r(L4e," (GPT Neo model)"),L4e.forEach(t),WOe=i(L),Zf=n(L,"LI",{});var x4e=s(Zf);Tee=n(x4e,"STRONG",{});var iqr=s(Tee);HOe=r(iqr,"gptj"),iqr.forEach(t),UOe=r(x4e," \u2014 "),X$=n(x4e,"A",{href:!0});var dqr=s(X$);JOe=r(dqr,"GPTJConfig"),dqr.forEach(t),YOe=r(x4e," (GPT-J model)"),x4e.forEach(t),KOe=i(L),em=n(L,"LI",{});var $4e=s(em);Mee=n($4e,"STRONG",{});var cqr=s(Mee);ZOe=r(cqr,"hubert"),cqr.forEach(t),eVe=r($4e," \u2014 "),z$=n($4e,"A",{href:!0});var fqr=s(z$);oVe=r(fqr,"HubertConfig"),fqr.forEach(t),rVe=r($4e," (Hubert model)"),$4e.forEach(t),tVe=i(L),om=n(L,"LI",{});var k4e=s(om);Eee=n(k4e,"STRONG",{});var mqr=s(Eee);aVe=r(mqr,"ibert"),mqr.forEach(t),nVe=r(k4e," \u2014 "),Q$=n(k4e,"A",{href:!0});var gqr=s(Q$);sVe=r(gqr,"IBertConfig"),gqr.forEach(t),lVe=r(k4e," (I-BERT model)"),k4e.forEach(t),iVe=i(L),rm=n(L,"LI",{});var S4e=s(rm);Cee=n(S4e,"STRONG",{});var hqr=s(Cee);dVe=r(hqr,"imagegpt"),hqr.forEach(t),cVe=r(S4e," \u2014 "),W$=n(S4e,"A",{href:!0});var pqr=s(W$);fVe=r(pqr,"ImageGPTConfig"),pqr.forEach(t),mVe=r(S4e," (ImageGPT model)"),S4e.forEach(t),gVe=i(L),tm=n(L,"LI",{});var R4e=s(tm);wee=n(R4e,"STRONG",{});var uqr=s(wee);hVe=r(uqr,"layoutlm"),uqr.forEach(t),pVe=r(R4e," \u2014 "),H$=n(R4e,"A",{href:!0});var _qr=s(H$);uVe=r(_qr,"LayoutLMConfig"),_qr.forEach(t),_Ve=r(R4e," (LayoutLM model)"),R4e.forEach(t),bVe=i(L),am=n(L,"LI",{});var B4e=s(am);Aee=n(B4e,"STRONG",{});var bqr=s(Aee);vVe=r(bqr,"layoutlmv2"),bqr.forEach(t),FVe=r(B4e," \u2014 "),U$=n(B4e,"A",{href:!0});var vqr=s(U$);TVe=r(vqr,"LayoutLMv2Config"),vqr.forEach(t),MVe=r(B4e," (LayoutLMv2 model)"),B4e.forEach(t),EVe=i(L),nm=n(L,"LI",{});var P4e=s(nm);yee=n(P4e,"STRONG",{});var Fqr=s(yee);CVe=r(Fqr,"led"),Fqr.forEach(t),wVe=r(P4e," \u2014 "),J$=n(P4e,"A",{href:!0});var Tqr=s(J$);AVe=r(Tqr,"LEDConfig"),Tqr.forEach(t),yVe=r(P4e," (LED model)"),P4e.forEach(t),LVe=i(L),sm=n(L,"LI",{});var I4e=s(sm);Lee=n(I4e,"STRONG",{});var Mqr=s(Lee);xVe=r(Mqr,"longformer"),Mqr.forEach(t),$Ve=r(I4e," \u2014 "),Y$=n(I4e,"A",{href:!0});var Eqr=s(Y$);kVe=r(Eqr,"LongformerConfig"),Eqr.forEach(t),SVe=r(I4e," (Longformer model)"),I4e.forEach(t),RVe=i(L),lm=n(L,"LI",{});var q4e=s(lm);xee=n(q4e,"STRONG",{});var Cqr=s(xee);BVe=r(Cqr,"luke"),Cqr.forEach(t),PVe=r(q4e," \u2014 "),K$=n(q4e,"A",{href:!0});var wqr=s(K$);IVe=r(wqr,"LukeConfig"),wqr.forEach(t),qVe=r(q4e," (LUKE model)"),q4e.forEach(t),NVe=i(L),im=n(L,"LI",{});var N4e=s(im);$ee=n(N4e,"STRONG",{});var Aqr=s($ee);jVe=r(Aqr,"lxmert"),Aqr.forEach(t),DVe=r(N4e," \u2014 "),Z$=n(N4e,"A",{href:!0});var yqr=s(Z$);GVe=r(yqr,"LxmertConfig"),yqr.forEach(t),OVe=r(N4e," (LXMERT model)"),N4e.forEach(t),VVe=i(L),dm=n(L,"LI",{});var j4e=s(dm);kee=n(j4e,"STRONG",{});var Lqr=s(kee);XVe=r(Lqr,"m2m_100"),Lqr.forEach(t),zVe=r(j4e," \u2014 "),ek=n(j4e,"A",{href:!0});var xqr=s(ek);QVe=r(xqr,"M2M100Config"),xqr.forEach(t),WVe=r(j4e," (M2M100 model)"),j4e.forEach(t),HVe=i(L),cm=n(L,"LI",{});var D4e=s(cm);See=n(D4e,"STRONG",{});var $qr=s(See);UVe=r($qr,"marian"),$qr.forEach(t),JVe=r(D4e," \u2014 "),ok=n(D4e,"A",{href:!0});var kqr=s(ok);YVe=r(kqr,"MarianConfig"),kqr.forEach(t),KVe=r(D4e," (Marian model)"),D4e.forEach(t),ZVe=i(L),fm=n(L,"LI",{});var G4e=s(fm);Ree=n(G4e,"STRONG",{});var Sqr=s(Ree);eXe=r(Sqr,"maskformer"),Sqr.forEach(t),oXe=r(G4e," \u2014 "),rk=n(G4e,"A",{href:!0});var Rqr=s(rk);rXe=r(Rqr,"MaskFormerConfig"),Rqr.forEach(t),tXe=r(G4e," (MaskFormer model)"),G4e.forEach(t),aXe=i(L),mm=n(L,"LI",{});var O4e=s(mm);Bee=n(O4e,"STRONG",{});var Bqr=s(Bee);nXe=r(Bqr,"mbart"),Bqr.forEach(t),sXe=r(O4e," \u2014 "),tk=n(O4e,"A",{href:!0});var Pqr=s(tk);lXe=r(Pqr,"MBartConfig"),Pqr.forEach(t),iXe=r(O4e," (mBART model)"),O4e.forEach(t),dXe=i(L),gm=n(L,"LI",{});var V4e=s(gm);Pee=n(V4e,"STRONG",{});var Iqr=s(Pee);cXe=r(Iqr,"megatron-bert"),Iqr.forEach(t),fXe=r(V4e," \u2014 "),ak=n(V4e,"A",{href:!0});var qqr=s(ak);mXe=r(qqr,"MegatronBertConfig"),qqr.forEach(t),gXe=r(V4e," (MegatronBert model)"),V4e.forEach(t),hXe=i(L),hm=n(L,"LI",{});var X4e=s(hm);Iee=n(X4e,"STRONG",{});var Nqr=s(Iee);pXe=r(Nqr,"mobilebert"),Nqr.forEach(t),uXe=r(X4e," \u2014 "),nk=n(X4e,"A",{href:!0});var jqr=s(nk);_Xe=r(jqr,"MobileBertConfig"),jqr.forEach(t),bXe=r(X4e," (MobileBERT model)"),X4e.forEach(t),vXe=i(L),pm=n(L,"LI",{});var z4e=s(pm);qee=n(z4e,"STRONG",{});var Dqr=s(qee);FXe=r(Dqr,"mpnet"),Dqr.forEach(t),TXe=r(z4e," \u2014 "),sk=n(z4e,"A",{href:!0});var Gqr=s(sk);MXe=r(Gqr,"MPNetConfig"),Gqr.forEach(t),EXe=r(z4e," (MPNet model)"),z4e.forEach(t),CXe=i(L),um=n(L,"LI",{});var Q4e=s(um);Nee=n(Q4e,"STRONG",{});var Oqr=s(Nee);wXe=r(Oqr,"mt5"),Oqr.forEach(t),AXe=r(Q4e," \u2014 "),lk=n(Q4e,"A",{href:!0});var Vqr=s(lk);yXe=r(Vqr,"MT5Config"),Vqr.forEach(t),LXe=r(Q4e," (mT5 model)"),Q4e.forEach(t),xXe=i(L),_m=n(L,"LI",{});var W4e=s(_m);jee=n(W4e,"STRONG",{});var Xqr=s(jee);$Xe=r(Xqr,"nystromformer"),Xqr.forEach(t),kXe=r(W4e," \u2014 "),ik=n(W4e,"A",{href:!0});var zqr=s(ik);SXe=r(zqr,"NystromformerConfig"),zqr.forEach(t),RXe=r(W4e," (Nystromformer model)"),W4e.forEach(t),BXe=i(L),bm=n(L,"LI",{});var H4e=s(bm);Dee=n(H4e,"STRONG",{});var Qqr=s(Dee);PXe=r(Qqr,"openai-gpt"),Qqr.forEach(t),IXe=r(H4e," \u2014 "),dk=n(H4e,"A",{href:!0});var Wqr=s(dk);qXe=r(Wqr,"OpenAIGPTConfig"),Wqr.forEach(t),NXe=r(H4e," (OpenAI GPT model)"),H4e.forEach(t),jXe=i(L),vm=n(L,"LI",{});var U4e=s(vm);Gee=n(U4e,"STRONG",{});var Hqr=s(Gee);DXe=r(Hqr,"pegasus"),Hqr.forEach(t),GXe=r(U4e," \u2014 "),ck=n(U4e,"A",{href:!0});var Uqr=s(ck);OXe=r(Uqr,"PegasusConfig"),Uqr.forEach(t),VXe=r(U4e," (Pegasus model)"),U4e.forEach(t),XXe=i(L),Fm=n(L,"LI",{});var J4e=s(Fm);Oee=n(J4e,"STRONG",{});var Jqr=s(Oee);zXe=r(Jqr,"perceiver"),Jqr.forEach(t),QXe=r(J4e," \u2014 "),fk=n(J4e,"A",{href:!0});var Yqr=s(fk);WXe=r(Yqr,"PerceiverConfig"),Yqr.forEach(t),HXe=r(J4e," (Perceiver model)"),J4e.forEach(t),UXe=i(L),Tm=n(L,"LI",{});var Y4e=s(Tm);Vee=n(Y4e,"STRONG",{});var Kqr=s(Vee);JXe=r(Kqr,"plbart"),Kqr.forEach(t),YXe=r(Y4e," \u2014 "),mk=n(Y4e,"A",{href:!0});var Zqr=s(mk);KXe=r(Zqr,"PLBartConfig"),Zqr.forEach(t),ZXe=r(Y4e," (PLBart model)"),Y4e.forEach(t),eze=i(L),Mm=n(L,"LI",{});var K4e=s(Mm);Xee=n(K4e,"STRONG",{});var eNr=s(Xee);oze=r(eNr,"poolformer"),eNr.forEach(t),rze=r(K4e," \u2014 "),gk=n(K4e,"A",{href:!0});var oNr=s(gk);tze=r(oNr,"PoolFormerConfig"),oNr.forEach(t),aze=r(K4e," (PoolFormer model)"),K4e.forEach(t),nze=i(L),Em=n(L,"LI",{});var Z4e=s(Em);zee=n(Z4e,"STRONG",{});var rNr=s(zee);sze=r(rNr,"prophetnet"),rNr.forEach(t),lze=r(Z4e," \u2014 "),hk=n(Z4e,"A",{href:!0});var tNr=s(hk);ize=r(tNr,"ProphetNetConfig"),tNr.forEach(t),dze=r(Z4e," (ProphetNet model)"),Z4e.forEach(t),cze=i(L),Cm=n(L,"LI",{});var eEe=s(Cm);Qee=n(eEe,"STRONG",{});var aNr=s(Qee);fze=r(aNr,"qdqbert"),aNr.forEach(t),mze=r(eEe," \u2014 "),pk=n(eEe,"A",{href:!0});var nNr=s(pk);gze=r(nNr,"QDQBertConfig"),nNr.forEach(t),hze=r(eEe," (QDQBert model)"),eEe.forEach(t),pze=i(L),wm=n(L,"LI",{});var oEe=s(wm);Wee=n(oEe,"STRONG",{});var sNr=s(Wee);uze=r(sNr,"rag"),sNr.forEach(t),_ze=r(oEe," \u2014 "),uk=n(oEe,"A",{href:!0});var lNr=s(uk);bze=r(lNr,"RagConfig"),lNr.forEach(t),vze=r(oEe," (RAG model)"),oEe.forEach(t),Fze=i(L),Am=n(L,"LI",{});var rEe=s(Am);Hee=n(rEe,"STRONG",{});var iNr=s(Hee);Tze=r(iNr,"realm"),iNr.forEach(t),Mze=r(rEe," \u2014 "),_k=n(rEe,"A",{href:!0});var dNr=s(_k);Eze=r(dNr,"RealmConfig"),dNr.forEach(t),Cze=r(rEe," (Realm model)"),rEe.forEach(t),wze=i(L),ym=n(L,"LI",{});var tEe=s(ym);Uee=n(tEe,"STRONG",{});var cNr=s(Uee);Aze=r(cNr,"reformer"),cNr.forEach(t),yze=r(tEe," \u2014 "),bk=n(tEe,"A",{href:!0});var fNr=s(bk);Lze=r(fNr,"ReformerConfig"),fNr.forEach(t),xze=r(tEe," (Reformer model)"),tEe.forEach(t),$ze=i(L),Lm=n(L,"LI",{});var aEe=s(Lm);Jee=n(aEe,"STRONG",{});var mNr=s(Jee);kze=r(mNr,"regnet"),mNr.forEach(t),Sze=r(aEe," \u2014 "),vk=n(aEe,"A",{href:!0});var gNr=s(vk);Rze=r(gNr,"RegNetConfig"),gNr.forEach(t),Bze=r(aEe," (RegNet model)"),aEe.forEach(t),Pze=i(L),xm=n(L,"LI",{});var nEe=s(xm);Yee=n(nEe,"STRONG",{});var hNr=s(Yee);Ize=r(hNr,"rembert"),hNr.forEach(t),qze=r(nEe," \u2014 "),Fk=n(nEe,"A",{href:!0});var pNr=s(Fk);Nze=r(pNr,"RemBertConfig"),pNr.forEach(t),jze=r(nEe," (RemBERT model)"),nEe.forEach(t),Dze=i(L),$m=n(L,"LI",{});var sEe=s($m);Kee=n(sEe,"STRONG",{});var uNr=s(Kee);Gze=r(uNr,"resnet"),uNr.forEach(t),Oze=r(sEe," \u2014 "),Tk=n(sEe,"A",{href:!0});var _Nr=s(Tk);Vze=r(_Nr,"ResNetConfig"),_Nr.forEach(t),Xze=r(sEe," (ResNet model)"),sEe.forEach(t),zze=i(L),km=n(L,"LI",{});var lEe=s(km);Zee=n(lEe,"STRONG",{});var bNr=s(Zee);Qze=r(bNr,"retribert"),bNr.forEach(t),Wze=r(lEe," \u2014 "),Mk=n(lEe,"A",{href:!0});var vNr=s(Mk);Hze=r(vNr,"RetriBertConfig"),vNr.forEach(t),Uze=r(lEe," (RetriBERT model)"),lEe.forEach(t),Jze=i(L),Sm=n(L,"LI",{});var iEe=s(Sm);eoe=n(iEe,"STRONG",{});var FNr=s(eoe);Yze=r(FNr,"roberta"),FNr.forEach(t),Kze=r(iEe," \u2014 "),Ek=n(iEe,"A",{href:!0});var TNr=s(Ek);Zze=r(TNr,"RobertaConfig"),TNr.forEach(t),eQe=r(iEe," (RoBERTa model)"),iEe.forEach(t),oQe=i(L),Rm=n(L,"LI",{});var dEe=s(Rm);ooe=n(dEe,"STRONG",{});var MNr=s(ooe);rQe=r(MNr,"roformer"),MNr.forEach(t),tQe=r(dEe," \u2014 "),Ck=n(dEe,"A",{href:!0});var ENr=s(Ck);aQe=r(ENr,"RoFormerConfig"),ENr.forEach(t),nQe=r(dEe," (RoFormer model)"),dEe.forEach(t),sQe=i(L),Bm=n(L,"LI",{});var cEe=s(Bm);roe=n(cEe,"STRONG",{});var CNr=s(roe);lQe=r(CNr,"segformer"),CNr.forEach(t),iQe=r(cEe," \u2014 "),wk=n(cEe,"A",{href:!0});var wNr=s(wk);dQe=r(wNr,"SegformerConfig"),wNr.forEach(t),cQe=r(cEe," (SegFormer model)"),cEe.forEach(t),fQe=i(L),Pm=n(L,"LI",{});var fEe=s(Pm);toe=n(fEe,"STRONG",{});var ANr=s(toe);mQe=r(ANr,"sew"),ANr.forEach(t),gQe=r(fEe," \u2014 "),Ak=n(fEe,"A",{href:!0});var yNr=s(Ak);hQe=r(yNr,"SEWConfig"),yNr.forEach(t),pQe=r(fEe," (SEW model)"),fEe.forEach(t),uQe=i(L),Im=n(L,"LI",{});var mEe=s(Im);aoe=n(mEe,"STRONG",{});var LNr=s(aoe);_Qe=r(LNr,"sew-d"),LNr.forEach(t),bQe=r(mEe," \u2014 "),yk=n(mEe,"A",{href:!0});var xNr=s(yk);vQe=r(xNr,"SEWDConfig"),xNr.forEach(t),FQe=r(mEe," (SEW-D model)"),mEe.forEach(t),TQe=i(L),qm=n(L,"LI",{});var gEe=s(qm);noe=n(gEe,"STRONG",{});var $Nr=s(noe);MQe=r($Nr,"speech-encoder-decoder"),$Nr.forEach(t),EQe=r(gEe," \u2014 "),Lk=n(gEe,"A",{href:!0});var kNr=s(Lk);CQe=r(kNr,"SpeechEncoderDecoderConfig"),kNr.forEach(t),wQe=r(gEe," (Speech Encoder decoder model)"),gEe.forEach(t),AQe=i(L),Nm=n(L,"LI",{});var hEe=s(Nm);soe=n(hEe,"STRONG",{});var SNr=s(soe);yQe=r(SNr,"speech_to_text"),SNr.forEach(t),LQe=r(hEe," \u2014 "),xk=n(hEe,"A",{href:!0});var RNr=s(xk);xQe=r(RNr,"Speech2TextConfig"),RNr.forEach(t),$Qe=r(hEe," (Speech2Text model)"),hEe.forEach(t),kQe=i(L),jm=n(L,"LI",{});var pEe=s(jm);loe=n(pEe,"STRONG",{});var BNr=s(loe);SQe=r(BNr,"speech_to_text_2"),BNr.forEach(t),RQe=r(pEe," \u2014 "),$k=n(pEe,"A",{href:!0});var PNr=s($k);BQe=r(PNr,"Speech2Text2Config"),PNr.forEach(t),PQe=r(pEe," (Speech2Text2 model)"),pEe.forEach(t),IQe=i(L),Dm=n(L,"LI",{});var uEe=s(Dm);ioe=n(uEe,"STRONG",{});var INr=s(ioe);qQe=r(INr,"splinter"),INr.forEach(t),NQe=r(uEe," \u2014 "),kk=n(uEe,"A",{href:!0});var qNr=s(kk);jQe=r(qNr,"SplinterConfig"),qNr.forEach(t),DQe=r(uEe," (Splinter model)"),uEe.forEach(t),GQe=i(L),Gm=n(L,"LI",{});var _Ee=s(Gm);doe=n(_Ee,"STRONG",{});var NNr=s(doe);OQe=r(NNr,"squeezebert"),NNr.forEach(t),VQe=r(_Ee," \u2014 "),Sk=n(_Ee,"A",{href:!0});var jNr=s(Sk);XQe=r(jNr,"SqueezeBertConfig"),jNr.forEach(t),zQe=r(_Ee," (SqueezeBERT model)"),_Ee.forEach(t),QQe=i(L),Om=n(L,"LI",{});var bEe=s(Om);coe=n(bEe,"STRONG",{});var DNr=s(coe);WQe=r(DNr,"swin"),DNr.forEach(t),HQe=r(bEe," \u2014 "),Rk=n(bEe,"A",{href:!0});var GNr=s(Rk);UQe=r(GNr,"SwinConfig"),GNr.forEach(t),JQe=r(bEe," (Swin model)"),bEe.forEach(t),YQe=i(L),Vm=n(L,"LI",{});var vEe=s(Vm);foe=n(vEe,"STRONG",{});var ONr=s(foe);KQe=r(ONr,"t5"),ONr.forEach(t),ZQe=r(vEe," \u2014 "),Bk=n(vEe,"A",{href:!0});var VNr=s(Bk);eWe=r(VNr,"T5Config"),VNr.forEach(t),oWe=r(vEe," (T5 model)"),vEe.forEach(t),rWe=i(L),Xm=n(L,"LI",{});var FEe=s(Xm);moe=n(FEe,"STRONG",{});var XNr=s(moe);tWe=r(XNr,"tapas"),XNr.forEach(t),aWe=r(FEe," \u2014 "),Pk=n(FEe,"A",{href:!0});var zNr=s(Pk);nWe=r(zNr,"TapasConfig"),zNr.forEach(t),sWe=r(FEe," (TAPAS model)"),FEe.forEach(t),lWe=i(L),zm=n(L,"LI",{});var TEe=s(zm);goe=n(TEe,"STRONG",{});var QNr=s(goe);iWe=r(QNr,"tapex"),QNr.forEach(t),dWe=r(TEe," \u2014 "),Ik=n(TEe,"A",{href:!0});var WNr=s(Ik);cWe=r(WNr,"BartConfig"),WNr.forEach(t),fWe=r(TEe," (TAPEX model)"),TEe.forEach(t),mWe=i(L),Qm=n(L,"LI",{});var MEe=s(Qm);hoe=n(MEe,"STRONG",{});var HNr=s(hoe);gWe=r(HNr,"transfo-xl"),HNr.forEach(t),hWe=r(MEe," \u2014 "),qk=n(MEe,"A",{href:!0});var UNr=s(qk);pWe=r(UNr,"TransfoXLConfig"),UNr.forEach(t),uWe=r(MEe," (Transformer-XL model)"),MEe.forEach(t),_We=i(L),Wm=n(L,"LI",{});var EEe=s(Wm);poe=n(EEe,"STRONG",{});var JNr=s(poe);bWe=r(JNr,"trocr"),JNr.forEach(t),vWe=r(EEe," \u2014 "),Nk=n(EEe,"A",{href:!0});var YNr=s(Nk);FWe=r(YNr,"TrOCRConfig"),YNr.forEach(t),TWe=r(EEe," (TrOCR model)"),EEe.forEach(t),MWe=i(L),Hm=n(L,"LI",{});var CEe=s(Hm);uoe=n(CEe,"STRONG",{});var KNr=s(uoe);EWe=r(KNr,"unispeech"),KNr.forEach(t),CWe=r(CEe," \u2014 "),jk=n(CEe,"A",{href:!0});var ZNr=s(jk);wWe=r(ZNr,"UniSpeechConfig"),ZNr.forEach(t),AWe=r(CEe," (UniSpeech model)"),CEe.forEach(t),yWe=i(L),Um=n(L,"LI",{});var wEe=s(Um);_oe=n(wEe,"STRONG",{});var ejr=s(_oe);LWe=r(ejr,"unispeech-sat"),ejr.forEach(t),xWe=r(wEe," \u2014 "),Dk=n(wEe,"A",{href:!0});var ojr=s(Dk);$We=r(ojr,"UniSpeechSatConfig"),ojr.forEach(t),kWe=r(wEe," (UniSpeechSat model)"),wEe.forEach(t),SWe=i(L),Jm=n(L,"LI",{});var AEe=s(Jm);boe=n(AEe,"STRONG",{});var rjr=s(boe);RWe=r(rjr,"van"),rjr.forEach(t),BWe=r(AEe," \u2014 "),Gk=n(AEe,"A",{href:!0});var tjr=s(Gk);PWe=r(tjr,"VanConfig"),tjr.forEach(t),IWe=r(AEe," (VAN model)"),AEe.forEach(t),qWe=i(L),Ym=n(L,"LI",{});var yEe=s(Ym);voe=n(yEe,"STRONG",{});var ajr=s(voe);NWe=r(ajr,"vilt"),ajr.forEach(t),jWe=r(yEe," \u2014 "),Ok=n(yEe,"A",{href:!0});var njr=s(Ok);DWe=r(njr,"ViltConfig"),njr.forEach(t),GWe=r(yEe," (ViLT model)"),yEe.forEach(t),OWe=i(L),Km=n(L,"LI",{});var LEe=s(Km);Foe=n(LEe,"STRONG",{});var sjr=s(Foe);VWe=r(sjr,"vision-encoder-decoder"),sjr.forEach(t),XWe=r(LEe," \u2014 "),Vk=n(LEe,"A",{href:!0});var ljr=s(Vk);zWe=r(ljr,"VisionEncoderDecoderConfig"),ljr.forEach(t),QWe=r(LEe," (Vision Encoder decoder model)"),LEe.forEach(t),WWe=i(L),Zm=n(L,"LI",{});var xEe=s(Zm);Toe=n(xEe,"STRONG",{});var ijr=s(Toe);HWe=r(ijr,"vision-text-dual-encoder"),ijr.forEach(t),UWe=r(xEe," \u2014 "),Xk=n(xEe,"A",{href:!0});var djr=s(Xk);JWe=r(djr,"VisionTextDualEncoderConfig"),djr.forEach(t),YWe=r(xEe," (VisionTextDualEncoder model)"),xEe.forEach(t),KWe=i(L),eg=n(L,"LI",{});var $Ee=s(eg);Moe=n($Ee,"STRONG",{});var cjr=s(Moe);ZWe=r(cjr,"visual_bert"),cjr.forEach(t),eHe=r($Ee," \u2014 "),zk=n($Ee,"A",{href:!0});var fjr=s(zk);oHe=r(fjr,"VisualBertConfig"),fjr.forEach(t),rHe=r($Ee," (VisualBert model)"),$Ee.forEach(t),tHe=i(L),og=n(L,"LI",{});var kEe=s(og);Eoe=n(kEe,"STRONG",{});var mjr=s(Eoe);aHe=r(mjr,"vit"),mjr.forEach(t),nHe=r(kEe," \u2014 "),Qk=n(kEe,"A",{href:!0});var gjr=s(Qk);sHe=r(gjr,"ViTConfig"),gjr.forEach(t),lHe=r(kEe," (ViT model)"),kEe.forEach(t),iHe=i(L),rg=n(L,"LI",{});var SEe=s(rg);Coe=n(SEe,"STRONG",{});var hjr=s(Coe);dHe=r(hjr,"vit_mae"),hjr.forEach(t),cHe=r(SEe," \u2014 "),Wk=n(SEe,"A",{href:!0});var pjr=s(Wk);fHe=r(pjr,"ViTMAEConfig"),pjr.forEach(t),mHe=r(SEe," (ViTMAE model)"),SEe.forEach(t),gHe=i(L),tg=n(L,"LI",{});var REe=s(tg);woe=n(REe,"STRONG",{});var ujr=s(woe);hHe=r(ujr,"wav2vec2"),ujr.forEach(t),pHe=r(REe," \u2014 "),Hk=n(REe,"A",{href:!0});var _jr=s(Hk);uHe=r(_jr,"Wav2Vec2Config"),_jr.forEach(t),_He=r(REe," (Wav2Vec2 model)"),REe.forEach(t),bHe=i(L),ag=n(L,"LI",{});var BEe=s(ag);Aoe=n(BEe,"STRONG",{});var bjr=s(Aoe);vHe=r(bjr,"wavlm"),bjr.forEach(t),FHe=r(BEe," \u2014 "),Uk=n(BEe,"A",{href:!0});var vjr=s(Uk);THe=r(vjr,"WavLMConfig"),vjr.forEach(t),MHe=r(BEe," (WavLM model)"),BEe.forEach(t),EHe=i(L),ng=n(L,"LI",{});var PEe=s(ng);yoe=n(PEe,"STRONG",{});var Fjr=s(yoe);CHe=r(Fjr,"xglm"),Fjr.forEach(t),wHe=r(PEe," \u2014 "),Jk=n(PEe,"A",{href:!0});var Tjr=s(Jk);AHe=r(Tjr,"XGLMConfig"),Tjr.forEach(t),yHe=r(PEe," (XGLM model)"),PEe.forEach(t),LHe=i(L),sg=n(L,"LI",{});var IEe=s(sg);Loe=n(IEe,"STRONG",{});var Mjr=s(Loe);xHe=r(Mjr,"xlm"),Mjr.forEach(t),$He=r(IEe," \u2014 "),Yk=n(IEe,"A",{href:!0});var Ejr=s(Yk);kHe=r(Ejr,"XLMConfig"),Ejr.forEach(t),SHe=r(IEe," (XLM model)"),IEe.forEach(t),RHe=i(L),lg=n(L,"LI",{});var qEe=s(lg);xoe=n(qEe,"STRONG",{});var Cjr=s(xoe);BHe=r(Cjr,"xlm-prophetnet"),Cjr.forEach(t),PHe=r(qEe," \u2014 "),Kk=n(qEe,"A",{href:!0});var wjr=s(Kk);IHe=r(wjr,"XLMProphetNetConfig"),wjr.forEach(t),qHe=r(qEe," (XLMProphetNet model)"),qEe.forEach(t),NHe=i(L),ig=n(L,"LI",{});var NEe=s(ig);$oe=n(NEe,"STRONG",{});var Ajr=s($oe);jHe=r(Ajr,"xlm-roberta"),Ajr.forEach(t),DHe=r(NEe," \u2014 "),Zk=n(NEe,"A",{href:!0});var yjr=s(Zk);GHe=r(yjr,"XLMRobertaConfig"),yjr.forEach(t),OHe=r(NEe," (XLM-RoBERTa model)"),NEe.forEach(t),VHe=i(L),dg=n(L,"LI",{});var jEe=s(dg);koe=n(jEe,"STRONG",{});var Ljr=s(koe);XHe=r(Ljr,"xlm-roberta-xl"),Ljr.forEach(t),zHe=r(jEe," \u2014 "),eS=n(jEe,"A",{href:!0});var xjr=s(eS);QHe=r(xjr,"XLMRobertaXLConfig"),xjr.forEach(t),WHe=r(jEe," (XLM-RoBERTa-XL model)"),jEe.forEach(t),HHe=i(L),cg=n(L,"LI",{});var DEe=s(cg);Soe=n(DEe,"STRONG",{});var $jr=s(Soe);UHe=r($jr,"xlnet"),$jr.forEach(t),JHe=r(DEe," \u2014 "),oS=n(DEe,"A",{href:!0});var kjr=s(oS);YHe=r(kjr,"XLNetConfig"),kjr.forEach(t),KHe=r(DEe," (XLNet model)"),DEe.forEach(t),ZHe=i(L),fg=n(L,"LI",{});var GEe=s(fg);Roe=n(GEe,"STRONG",{});var Sjr=s(Roe);eUe=r(Sjr,"yolos"),Sjr.forEach(t),oUe=r(GEe," \u2014 "),rS=n(GEe,"A",{href:!0});var Rjr=s(rS);rUe=r(Rjr,"YolosConfig"),Rjr.forEach(t),tUe=r(GEe," (YOLOS model)"),GEe.forEach(t),aUe=i(L),mg=n(L,"LI",{});var OEe=s(mg);Boe=n(OEe,"STRONG",{});var Bjr=s(Boe);nUe=r(Bjr,"yoso"),Bjr.forEach(t),sUe=r(OEe," \u2014 "),tS=n(OEe,"A",{href:!0});var Pjr=s(tS);lUe=r(Pjr,"YosoConfig"),Pjr.forEach(t),iUe=r(OEe," (YOSO model)"),OEe.forEach(t),L.forEach(t),dUe=i(Zr),T(gg.$$.fragment,Zr),Zr.forEach(t),cUe=i(Kr),hg=n(Kr,"DIV",{class:!0});var KIe=s(hg);T(zw.$$.fragment,KIe),fUe=i(KIe),Poe=n(KIe,"P",{});var Ijr=s(Poe);mUe=r(Ijr,"Register a new configuration for this class."),Ijr.forEach(t),KIe.forEach(t),Kr.forEach(t),oPe=i(f),_i=n(f,"H2",{class:!0});var ZIe=s(_i);pg=n(ZIe,"A",{id:!0,class:!0,href:!0});var qjr=s(pg);Ioe=n(qjr,"SPAN",{});var Njr=s(Ioe);T(Qw.$$.fragment,Njr),Njr.forEach(t),qjr.forEach(t),gUe=i(ZIe),qoe=n(ZIe,"SPAN",{});var jjr=s(qoe);hUe=r(jjr,"AutoTokenizer"),jjr.forEach(t),ZIe.forEach(t),rPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(Ww.$$.fragment,Ps),pUe=i(Ps),Hw=n(Ps,"P",{});var eqe=s(Hw);uUe=r(eqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aS=n(eqe,"A",{href:!0});var Djr=s(aS);_Ue=r(Djr,"AutoTokenizer.from_pretrained()"),Djr.forEach(t),bUe=r(eqe," class method."),eqe.forEach(t),vUe=i(Ps),Uw=n(Ps,"P",{});var oqe=s(Uw);FUe=r(oqe,"This class cannot be instantiated directly using "),Noe=n(oqe,"CODE",{});var Gjr=s(Noe);TUe=r(Gjr,"__init__()"),Gjr.forEach(t),MUe=r(oqe," (throws an error)."),oqe.forEach(t),EUe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(Jw.$$.fragment,Is),CUe=i(Is),joe=n(Is,"P",{});var Ojr=s(joe);wUe=r(Ojr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ojr.forEach(t),AUe=i(Is),Ca=n(Is,"P",{});var jC=s(Ca);yUe=r(jC,"The tokenizer class to instantiate is selected based on the "),Doe=n(jC,"CODE",{});var Vjr=s(Doe);LUe=r(Vjr,"model_type"),Vjr.forEach(t),xUe=r(jC,` property of the config object (either
passed as an argument or loaded from `),Goe=n(jC,"CODE",{});var Xjr=s(Goe);$Ue=r(Xjr,"pretrained_model_name_or_path"),Xjr.forEach(t),kUe=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ooe=n(jC,"CODE",{});var zjr=s(Ooe);SUe=r(zjr,"pretrained_model_name_or_path"),zjr.forEach(t),RUe=r(jC,":"),jC.forEach(t),BUe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var K8=s(kn);Voe=n(K8,"STRONG",{});var Qjr=s(Voe);PUe=r(Qjr,"albert"),Qjr.forEach(t),IUe=r(K8," \u2014 "),nS=n(K8,"A",{href:!0});var Wjr=s(nS);qUe=r(Wjr,"AlbertTokenizer"),Wjr.forEach(t),NUe=r(K8," or "),sS=n(K8,"A",{href:!0});var Hjr=s(sS);jUe=r(Hjr,"AlbertTokenizerFast"),Hjr.forEach(t),DUe=r(K8," (ALBERT model)"),K8.forEach(t),GUe=i(S),Sn=n(S,"LI",{});var Z8=s(Sn);Xoe=n(Z8,"STRONG",{});var Ujr=s(Xoe);OUe=r(Ujr,"bart"),Ujr.forEach(t),VUe=r(Z8," \u2014 "),lS=n(Z8,"A",{href:!0});var Jjr=s(lS);XUe=r(Jjr,"BartTokenizer"),Jjr.forEach(t),zUe=r(Z8," or "),iS=n(Z8,"A",{href:!0});var Yjr=s(iS);QUe=r(Yjr,"BartTokenizerFast"),Yjr.forEach(t),WUe=r(Z8," (BART model)"),Z8.forEach(t),HUe=i(S),Rn=n(S,"LI",{});var ex=s(Rn);zoe=n(ex,"STRONG",{});var Kjr=s(zoe);UUe=r(Kjr,"barthez"),Kjr.forEach(t),JUe=r(ex," \u2014 "),dS=n(ex,"A",{href:!0});var Zjr=s(dS);YUe=r(Zjr,"BarthezTokenizer"),Zjr.forEach(t),KUe=r(ex," or "),cS=n(ex,"A",{href:!0});var eDr=s(cS);ZUe=r(eDr,"BarthezTokenizerFast"),eDr.forEach(t),eJe=r(ex," (BARThez model)"),ex.forEach(t),oJe=i(S),ug=n(S,"LI",{});var VEe=s(ug);Qoe=n(VEe,"STRONG",{});var oDr=s(Qoe);rJe=r(oDr,"bartpho"),oDr.forEach(t),tJe=r(VEe," \u2014 "),fS=n(VEe,"A",{href:!0});var rDr=s(fS);aJe=r(rDr,"BartphoTokenizer"),rDr.forEach(t),nJe=r(VEe," (BARTpho model)"),VEe.forEach(t),sJe=i(S),Bn=n(S,"LI",{});var ox=s(Bn);Woe=n(ox,"STRONG",{});var tDr=s(Woe);lJe=r(tDr,"bert"),tDr.forEach(t),iJe=r(ox," \u2014 "),mS=n(ox,"A",{href:!0});var aDr=s(mS);dJe=r(aDr,"BertTokenizer"),aDr.forEach(t),cJe=r(ox," or "),gS=n(ox,"A",{href:!0});var nDr=s(gS);fJe=r(nDr,"BertTokenizerFast"),nDr.forEach(t),mJe=r(ox," (BERT model)"),ox.forEach(t),gJe=i(S),_g=n(S,"LI",{});var XEe=s(_g);Hoe=n(XEe,"STRONG",{});var sDr=s(Hoe);hJe=r(sDr,"bert-generation"),sDr.forEach(t),pJe=r(XEe," \u2014 "),hS=n(XEe,"A",{href:!0});var lDr=s(hS);uJe=r(lDr,"BertGenerationTokenizer"),lDr.forEach(t),_Je=r(XEe," (Bert Generation model)"),XEe.forEach(t),bJe=i(S),bg=n(S,"LI",{});var zEe=s(bg);Uoe=n(zEe,"STRONG",{});var iDr=s(Uoe);vJe=r(iDr,"bert-japanese"),iDr.forEach(t),FJe=r(zEe," \u2014 "),pS=n(zEe,"A",{href:!0});var dDr=s(pS);TJe=r(dDr,"BertJapaneseTokenizer"),dDr.forEach(t),MJe=r(zEe," (BertJapanese model)"),zEe.forEach(t),EJe=i(S),vg=n(S,"LI",{});var QEe=s(vg);Joe=n(QEe,"STRONG",{});var cDr=s(Joe);CJe=r(cDr,"bertweet"),cDr.forEach(t),wJe=r(QEe," \u2014 "),uS=n(QEe,"A",{href:!0});var fDr=s(uS);AJe=r(fDr,"BertweetTokenizer"),fDr.forEach(t),yJe=r(QEe," (Bertweet model)"),QEe.forEach(t),LJe=i(S),Pn=n(S,"LI",{});var rx=s(Pn);Yoe=n(rx,"STRONG",{});var mDr=s(Yoe);xJe=r(mDr,"big_bird"),mDr.forEach(t),$Je=r(rx," \u2014 "),_S=n(rx,"A",{href:!0});var gDr=s(_S);kJe=r(gDr,"BigBirdTokenizer"),gDr.forEach(t),SJe=r(rx," or "),bS=n(rx,"A",{href:!0});var hDr=s(bS);RJe=r(hDr,"BigBirdTokenizerFast"),hDr.forEach(t),BJe=r(rx," (BigBird model)"),rx.forEach(t),PJe=i(S),In=n(S,"LI",{});var tx=s(In);Koe=n(tx,"STRONG",{});var pDr=s(Koe);IJe=r(pDr,"bigbird_pegasus"),pDr.forEach(t),qJe=r(tx," \u2014 "),vS=n(tx,"A",{href:!0});var uDr=s(vS);NJe=r(uDr,"PegasusTokenizer"),uDr.forEach(t),jJe=r(tx," or "),FS=n(tx,"A",{href:!0});var _Dr=s(FS);DJe=r(_Dr,"PegasusTokenizerFast"),_Dr.forEach(t),GJe=r(tx," (BigBirdPegasus model)"),tx.forEach(t),OJe=i(S),qn=n(S,"LI",{});var ax=s(qn);Zoe=n(ax,"STRONG",{});var bDr=s(Zoe);VJe=r(bDr,"blenderbot"),bDr.forEach(t),XJe=r(ax," \u2014 "),TS=n(ax,"A",{href:!0});var vDr=s(TS);zJe=r(vDr,"BlenderbotTokenizer"),vDr.forEach(t),QJe=r(ax," or "),MS=n(ax,"A",{href:!0});var FDr=s(MS);WJe=r(FDr,"BlenderbotTokenizerFast"),FDr.forEach(t),HJe=r(ax," (Blenderbot model)"),ax.forEach(t),UJe=i(S),Fg=n(S,"LI",{});var WEe=s(Fg);ere=n(WEe,"STRONG",{});var TDr=s(ere);JJe=r(TDr,"blenderbot-small"),TDr.forEach(t),YJe=r(WEe," \u2014 "),ES=n(WEe,"A",{href:!0});var MDr=s(ES);KJe=r(MDr,"BlenderbotSmallTokenizer"),MDr.forEach(t),ZJe=r(WEe," (BlenderbotSmall model)"),WEe.forEach(t),eYe=i(S),Tg=n(S,"LI",{});var HEe=s(Tg);ore=n(HEe,"STRONG",{});var EDr=s(ore);oYe=r(EDr,"byt5"),EDr.forEach(t),rYe=r(HEe," \u2014 "),CS=n(HEe,"A",{href:!0});var CDr=s(CS);tYe=r(CDr,"ByT5Tokenizer"),CDr.forEach(t),aYe=r(HEe," (ByT5 model)"),HEe.forEach(t),nYe=i(S),Nn=n(S,"LI",{});var nx=s(Nn);rre=n(nx,"STRONG",{});var wDr=s(rre);sYe=r(wDr,"camembert"),wDr.forEach(t),lYe=r(nx," \u2014 "),wS=n(nx,"A",{href:!0});var ADr=s(wS);iYe=r(ADr,"CamembertTokenizer"),ADr.forEach(t),dYe=r(nx," or "),AS=n(nx,"A",{href:!0});var yDr=s(AS);cYe=r(yDr,"CamembertTokenizerFast"),yDr.forEach(t),fYe=r(nx," (CamemBERT model)"),nx.forEach(t),mYe=i(S),Mg=n(S,"LI",{});var UEe=s(Mg);tre=n(UEe,"STRONG",{});var LDr=s(tre);gYe=r(LDr,"canine"),LDr.forEach(t),hYe=r(UEe," \u2014 "),yS=n(UEe,"A",{href:!0});var xDr=s(yS);pYe=r(xDr,"CanineTokenizer"),xDr.forEach(t),uYe=r(UEe," (Canine model)"),UEe.forEach(t),_Ye=i(S),jn=n(S,"LI",{});var sx=s(jn);are=n(sx,"STRONG",{});var $Dr=s(are);bYe=r($Dr,"clip"),$Dr.forEach(t),vYe=r(sx," \u2014 "),LS=n(sx,"A",{href:!0});var kDr=s(LS);FYe=r(kDr,"CLIPTokenizer"),kDr.forEach(t),TYe=r(sx," or "),xS=n(sx,"A",{href:!0});var SDr=s(xS);MYe=r(SDr,"CLIPTokenizerFast"),SDr.forEach(t),EYe=r(sx," (CLIP model)"),sx.forEach(t),CYe=i(S),Dn=n(S,"LI",{});var lx=s(Dn);nre=n(lx,"STRONG",{});var RDr=s(nre);wYe=r(RDr,"convbert"),RDr.forEach(t),AYe=r(lx," \u2014 "),$S=n(lx,"A",{href:!0});var BDr=s($S);yYe=r(BDr,"ConvBertTokenizer"),BDr.forEach(t),LYe=r(lx," or "),kS=n(lx,"A",{href:!0});var PDr=s(kS);xYe=r(PDr,"ConvBertTokenizerFast"),PDr.forEach(t),$Ye=r(lx," (ConvBERT model)"),lx.forEach(t),kYe=i(S),Gn=n(S,"LI",{});var ix=s(Gn);sre=n(ix,"STRONG",{});var IDr=s(sre);SYe=r(IDr,"cpm"),IDr.forEach(t),RYe=r(ix," \u2014 "),SS=n(ix,"A",{href:!0});var qDr=s(SS);BYe=r(qDr,"CpmTokenizer"),qDr.forEach(t),PYe=r(ix," or "),RS=n(ix,"A",{href:!0});var NDr=s(RS);IYe=r(NDr,"CpmTokenizerFast"),NDr.forEach(t),qYe=r(ix," (CPM model)"),ix.forEach(t),NYe=i(S),Eg=n(S,"LI",{});var JEe=s(Eg);lre=n(JEe,"STRONG",{});var jDr=s(lre);jYe=r(jDr,"ctrl"),jDr.forEach(t),DYe=r(JEe," \u2014 "),BS=n(JEe,"A",{href:!0});var DDr=s(BS);GYe=r(DDr,"CTRLTokenizer"),DDr.forEach(t),OYe=r(JEe," (CTRL model)"),JEe.forEach(t),VYe=i(S),On=n(S,"LI",{});var dx=s(On);ire=n(dx,"STRONG",{});var GDr=s(ire);XYe=r(GDr,"data2vec-text"),GDr.forEach(t),zYe=r(dx," \u2014 "),PS=n(dx,"A",{href:!0});var ODr=s(PS);QYe=r(ODr,"RobertaTokenizer"),ODr.forEach(t),WYe=r(dx," or "),IS=n(dx,"A",{href:!0});var VDr=s(IS);HYe=r(VDr,"RobertaTokenizerFast"),VDr.forEach(t),UYe=r(dx," (Data2VecText model)"),dx.forEach(t),JYe=i(S),Vn=n(S,"LI",{});var cx=s(Vn);dre=n(cx,"STRONG",{});var XDr=s(dre);YYe=r(XDr,"deberta"),XDr.forEach(t),KYe=r(cx," \u2014 "),qS=n(cx,"A",{href:!0});var zDr=s(qS);ZYe=r(zDr,"DebertaTokenizer"),zDr.forEach(t),eKe=r(cx," or "),NS=n(cx,"A",{href:!0});var QDr=s(NS);oKe=r(QDr,"DebertaTokenizerFast"),QDr.forEach(t),rKe=r(cx," (DeBERTa model)"),cx.forEach(t),tKe=i(S),Xn=n(S,"LI",{});var fx=s(Xn);cre=n(fx,"STRONG",{});var WDr=s(cre);aKe=r(WDr,"deberta-v2"),WDr.forEach(t),nKe=r(fx," \u2014 "),jS=n(fx,"A",{href:!0});var HDr=s(jS);sKe=r(HDr,"DebertaV2Tokenizer"),HDr.forEach(t),lKe=r(fx," or "),DS=n(fx,"A",{href:!0});var UDr=s(DS);iKe=r(UDr,"DebertaV2TokenizerFast"),UDr.forEach(t),dKe=r(fx," (DeBERTa-v2 model)"),fx.forEach(t),cKe=i(S),zn=n(S,"LI",{});var mx=s(zn);fre=n(mx,"STRONG",{});var JDr=s(fre);fKe=r(JDr,"distilbert"),JDr.forEach(t),mKe=r(mx," \u2014 "),GS=n(mx,"A",{href:!0});var YDr=s(GS);gKe=r(YDr,"DistilBertTokenizer"),YDr.forEach(t),hKe=r(mx," or "),OS=n(mx,"A",{href:!0});var KDr=s(OS);pKe=r(KDr,"DistilBertTokenizerFast"),KDr.forEach(t),uKe=r(mx," (DistilBERT model)"),mx.forEach(t),_Ke=i(S),Qn=n(S,"LI",{});var gx=s(Qn);mre=n(gx,"STRONG",{});var ZDr=s(mre);bKe=r(ZDr,"dpr"),ZDr.forEach(t),vKe=r(gx," \u2014 "),VS=n(gx,"A",{href:!0});var eGr=s(VS);FKe=r(eGr,"DPRQuestionEncoderTokenizer"),eGr.forEach(t),TKe=r(gx," or "),XS=n(gx,"A",{href:!0});var oGr=s(XS);MKe=r(oGr,"DPRQuestionEncoderTokenizerFast"),oGr.forEach(t),EKe=r(gx," (DPR model)"),gx.forEach(t),CKe=i(S),Wn=n(S,"LI",{});var hx=s(Wn);gre=n(hx,"STRONG",{});var rGr=s(gre);wKe=r(rGr,"electra"),rGr.forEach(t),AKe=r(hx," \u2014 "),zS=n(hx,"A",{href:!0});var tGr=s(zS);yKe=r(tGr,"ElectraTokenizer"),tGr.forEach(t),LKe=r(hx," or "),QS=n(hx,"A",{href:!0});var aGr=s(QS);xKe=r(aGr,"ElectraTokenizerFast"),aGr.forEach(t),$Ke=r(hx," (ELECTRA model)"),hx.forEach(t),kKe=i(S),Cg=n(S,"LI",{});var YEe=s(Cg);hre=n(YEe,"STRONG",{});var nGr=s(hre);SKe=r(nGr,"flaubert"),nGr.forEach(t),RKe=r(YEe," \u2014 "),WS=n(YEe,"A",{href:!0});var sGr=s(WS);BKe=r(sGr,"FlaubertTokenizer"),sGr.forEach(t),PKe=r(YEe," (FlauBERT model)"),YEe.forEach(t),IKe=i(S),Hn=n(S,"LI",{});var px=s(Hn);pre=n(px,"STRONG",{});var lGr=s(pre);qKe=r(lGr,"fnet"),lGr.forEach(t),NKe=r(px," \u2014 "),HS=n(px,"A",{href:!0});var iGr=s(HS);jKe=r(iGr,"FNetTokenizer"),iGr.forEach(t),DKe=r(px," or "),US=n(px,"A",{href:!0});var dGr=s(US);GKe=r(dGr,"FNetTokenizerFast"),dGr.forEach(t),OKe=r(px," (FNet model)"),px.forEach(t),VKe=i(S),wg=n(S,"LI",{});var KEe=s(wg);ure=n(KEe,"STRONG",{});var cGr=s(ure);XKe=r(cGr,"fsmt"),cGr.forEach(t),zKe=r(KEe," \u2014 "),JS=n(KEe,"A",{href:!0});var fGr=s(JS);QKe=r(fGr,"FSMTTokenizer"),fGr.forEach(t),WKe=r(KEe," (FairSeq Machine-Translation model)"),KEe.forEach(t),HKe=i(S),Un=n(S,"LI",{});var ux=s(Un);_re=n(ux,"STRONG",{});var mGr=s(_re);UKe=r(mGr,"funnel"),mGr.forEach(t),JKe=r(ux," \u2014 "),YS=n(ux,"A",{href:!0});var gGr=s(YS);YKe=r(gGr,"FunnelTokenizer"),gGr.forEach(t),KKe=r(ux," or "),KS=n(ux,"A",{href:!0});var hGr=s(KS);ZKe=r(hGr,"FunnelTokenizerFast"),hGr.forEach(t),eZe=r(ux," (Funnel Transformer model)"),ux.forEach(t),oZe=i(S),Jn=n(S,"LI",{});var _x=s(Jn);bre=n(_x,"STRONG",{});var pGr=s(bre);rZe=r(pGr,"gpt2"),pGr.forEach(t),tZe=r(_x," \u2014 "),ZS=n(_x,"A",{href:!0});var uGr=s(ZS);aZe=r(uGr,"GPT2Tokenizer"),uGr.forEach(t),nZe=r(_x," or "),eR=n(_x,"A",{href:!0});var _Gr=s(eR);sZe=r(_Gr,"GPT2TokenizerFast"),_Gr.forEach(t),lZe=r(_x," (OpenAI GPT-2 model)"),_x.forEach(t),iZe=i(S),Yn=n(S,"LI",{});var bx=s(Yn);vre=n(bx,"STRONG",{});var bGr=s(vre);dZe=r(bGr,"gpt_neo"),bGr.forEach(t),cZe=r(bx," \u2014 "),oR=n(bx,"A",{href:!0});var vGr=s(oR);fZe=r(vGr,"GPT2Tokenizer"),vGr.forEach(t),mZe=r(bx," or "),rR=n(bx,"A",{href:!0});var FGr=s(rR);gZe=r(FGr,"GPT2TokenizerFast"),FGr.forEach(t),hZe=r(bx," (GPT Neo model)"),bx.forEach(t),pZe=i(S),Kn=n(S,"LI",{});var vx=s(Kn);Fre=n(vx,"STRONG",{});var TGr=s(Fre);uZe=r(TGr,"gptj"),TGr.forEach(t),_Ze=r(vx," \u2014 "),tR=n(vx,"A",{href:!0});var MGr=s(tR);bZe=r(MGr,"GPT2Tokenizer"),MGr.forEach(t),vZe=r(vx," or "),aR=n(vx,"A",{href:!0});var EGr=s(aR);FZe=r(EGr,"GPT2TokenizerFast"),EGr.forEach(t),TZe=r(vx," (GPT-J model)"),vx.forEach(t),MZe=i(S),Zn=n(S,"LI",{});var Fx=s(Zn);Tre=n(Fx,"STRONG",{});var CGr=s(Tre);EZe=r(CGr,"herbert"),CGr.forEach(t),CZe=r(Fx," \u2014 "),nR=n(Fx,"A",{href:!0});var wGr=s(nR);wZe=r(wGr,"HerbertTokenizer"),wGr.forEach(t),AZe=r(Fx," or "),sR=n(Fx,"A",{href:!0});var AGr=s(sR);yZe=r(AGr,"HerbertTokenizerFast"),AGr.forEach(t),LZe=r(Fx," (HerBERT model)"),Fx.forEach(t),xZe=i(S),Ag=n(S,"LI",{});var ZEe=s(Ag);Mre=n(ZEe,"STRONG",{});var yGr=s(Mre);$Ze=r(yGr,"hubert"),yGr.forEach(t),kZe=r(ZEe," \u2014 "),lR=n(ZEe,"A",{href:!0});var LGr=s(lR);SZe=r(LGr,"Wav2Vec2CTCTokenizer"),LGr.forEach(t),RZe=r(ZEe," (Hubert model)"),ZEe.forEach(t),BZe=i(S),es=n(S,"LI",{});var Tx=s(es);Ere=n(Tx,"STRONG",{});var xGr=s(Ere);PZe=r(xGr,"ibert"),xGr.forEach(t),IZe=r(Tx," \u2014 "),iR=n(Tx,"A",{href:!0});var $Gr=s(iR);qZe=r($Gr,"RobertaTokenizer"),$Gr.forEach(t),NZe=r(Tx," or "),dR=n(Tx,"A",{href:!0});var kGr=s(dR);jZe=r(kGr,"RobertaTokenizerFast"),kGr.forEach(t),DZe=r(Tx," (I-BERT model)"),Tx.forEach(t),GZe=i(S),os=n(S,"LI",{});var Mx=s(os);Cre=n(Mx,"STRONG",{});var SGr=s(Cre);OZe=r(SGr,"layoutlm"),SGr.forEach(t),VZe=r(Mx," \u2014 "),cR=n(Mx,"A",{href:!0});var RGr=s(cR);XZe=r(RGr,"LayoutLMTokenizer"),RGr.forEach(t),zZe=r(Mx," or "),fR=n(Mx,"A",{href:!0});var BGr=s(fR);QZe=r(BGr,"LayoutLMTokenizerFast"),BGr.forEach(t),WZe=r(Mx," (LayoutLM model)"),Mx.forEach(t),HZe=i(S),rs=n(S,"LI",{});var Ex=s(rs);wre=n(Ex,"STRONG",{});var PGr=s(wre);UZe=r(PGr,"layoutlmv2"),PGr.forEach(t),JZe=r(Ex," \u2014 "),mR=n(Ex,"A",{href:!0});var IGr=s(mR);YZe=r(IGr,"LayoutLMv2Tokenizer"),IGr.forEach(t),KZe=r(Ex," or "),gR=n(Ex,"A",{href:!0});var qGr=s(gR);ZZe=r(qGr,"LayoutLMv2TokenizerFast"),qGr.forEach(t),eeo=r(Ex," (LayoutLMv2 model)"),Ex.forEach(t),oeo=i(S),ts=n(S,"LI",{});var Cx=s(ts);Are=n(Cx,"STRONG",{});var NGr=s(Are);reo=r(NGr,"layoutxlm"),NGr.forEach(t),teo=r(Cx," \u2014 "),hR=n(Cx,"A",{href:!0});var jGr=s(hR);aeo=r(jGr,"LayoutXLMTokenizer"),jGr.forEach(t),neo=r(Cx," or "),pR=n(Cx,"A",{href:!0});var DGr=s(pR);seo=r(DGr,"LayoutXLMTokenizerFast"),DGr.forEach(t),leo=r(Cx," (LayoutXLM model)"),Cx.forEach(t),ieo=i(S),as=n(S,"LI",{});var wx=s(as);yre=n(wx,"STRONG",{});var GGr=s(yre);deo=r(GGr,"led"),GGr.forEach(t),ceo=r(wx," \u2014 "),uR=n(wx,"A",{href:!0});var OGr=s(uR);feo=r(OGr,"LEDTokenizer"),OGr.forEach(t),meo=r(wx," or "),_R=n(wx,"A",{href:!0});var VGr=s(_R);geo=r(VGr,"LEDTokenizerFast"),VGr.forEach(t),heo=r(wx," (LED model)"),wx.forEach(t),peo=i(S),ns=n(S,"LI",{});var Ax=s(ns);Lre=n(Ax,"STRONG",{});var XGr=s(Lre);ueo=r(XGr,"longformer"),XGr.forEach(t),_eo=r(Ax," \u2014 "),bR=n(Ax,"A",{href:!0});var zGr=s(bR);beo=r(zGr,"LongformerTokenizer"),zGr.forEach(t),veo=r(Ax," or "),vR=n(Ax,"A",{href:!0});var QGr=s(vR);Feo=r(QGr,"LongformerTokenizerFast"),QGr.forEach(t),Teo=r(Ax," (Longformer model)"),Ax.forEach(t),Meo=i(S),yg=n(S,"LI",{});var e5e=s(yg);xre=n(e5e,"STRONG",{});var WGr=s(xre);Eeo=r(WGr,"luke"),WGr.forEach(t),Ceo=r(e5e," \u2014 "),FR=n(e5e,"A",{href:!0});var HGr=s(FR);weo=r(HGr,"LukeTokenizer"),HGr.forEach(t),Aeo=r(e5e," (LUKE model)"),e5e.forEach(t),yeo=i(S),ss=n(S,"LI",{});var yx=s(ss);$re=n(yx,"STRONG",{});var UGr=s($re);Leo=r(UGr,"lxmert"),UGr.forEach(t),xeo=r(yx," \u2014 "),TR=n(yx,"A",{href:!0});var JGr=s(TR);$eo=r(JGr,"LxmertTokenizer"),JGr.forEach(t),keo=r(yx," or "),MR=n(yx,"A",{href:!0});var YGr=s(MR);Seo=r(YGr,"LxmertTokenizerFast"),YGr.forEach(t),Reo=r(yx," (LXMERT model)"),yx.forEach(t),Beo=i(S),Lg=n(S,"LI",{});var o5e=s(Lg);kre=n(o5e,"STRONG",{});var KGr=s(kre);Peo=r(KGr,"m2m_100"),KGr.forEach(t),Ieo=r(o5e," \u2014 "),ER=n(o5e,"A",{href:!0});var ZGr=s(ER);qeo=r(ZGr,"M2M100Tokenizer"),ZGr.forEach(t),Neo=r(o5e," (M2M100 model)"),o5e.forEach(t),jeo=i(S),xg=n(S,"LI",{});var r5e=s(xg);Sre=n(r5e,"STRONG",{});var eOr=s(Sre);Deo=r(eOr,"marian"),eOr.forEach(t),Geo=r(r5e," \u2014 "),CR=n(r5e,"A",{href:!0});var oOr=s(CR);Oeo=r(oOr,"MarianTokenizer"),oOr.forEach(t),Veo=r(r5e," (Marian model)"),r5e.forEach(t),Xeo=i(S),ls=n(S,"LI",{});var Lx=s(ls);Rre=n(Lx,"STRONG",{});var rOr=s(Rre);zeo=r(rOr,"mbart"),rOr.forEach(t),Qeo=r(Lx," \u2014 "),wR=n(Lx,"A",{href:!0});var tOr=s(wR);Weo=r(tOr,"MBartTokenizer"),tOr.forEach(t),Heo=r(Lx," or "),AR=n(Lx,"A",{href:!0});var aOr=s(AR);Ueo=r(aOr,"MBartTokenizerFast"),aOr.forEach(t),Jeo=r(Lx," (mBART model)"),Lx.forEach(t),Yeo=i(S),is=n(S,"LI",{});var xx=s(is);Bre=n(xx,"STRONG",{});var nOr=s(Bre);Keo=r(nOr,"mbart50"),nOr.forEach(t),Zeo=r(xx," \u2014 "),yR=n(xx,"A",{href:!0});var sOr=s(yR);eoo=r(sOr,"MBart50Tokenizer"),sOr.forEach(t),ooo=r(xx," or "),LR=n(xx,"A",{href:!0});var lOr=s(LR);roo=r(lOr,"MBart50TokenizerFast"),lOr.forEach(t),too=r(xx," (mBART-50 model)"),xx.forEach(t),aoo=i(S),ds=n(S,"LI",{});var $x=s(ds);Pre=n($x,"STRONG",{});var iOr=s(Pre);noo=r(iOr,"megatron-bert"),iOr.forEach(t),soo=r($x," \u2014 "),xR=n($x,"A",{href:!0});var dOr=s(xR);loo=r(dOr,"BertTokenizer"),dOr.forEach(t),ioo=r($x," or "),$R=n($x,"A",{href:!0});var cOr=s($R);doo=r(cOr,"BertTokenizerFast"),cOr.forEach(t),coo=r($x," (MegatronBert model)"),$x.forEach(t),foo=i(S),$g=n(S,"LI",{});var t5e=s($g);Ire=n(t5e,"STRONG",{});var fOr=s(Ire);moo=r(fOr,"mluke"),fOr.forEach(t),goo=r(t5e," \u2014 "),kR=n(t5e,"A",{href:!0});var mOr=s(kR);hoo=r(mOr,"MLukeTokenizer"),mOr.forEach(t),poo=r(t5e," (mLUKE model)"),t5e.forEach(t),uoo=i(S),cs=n(S,"LI",{});var kx=s(cs);qre=n(kx,"STRONG",{});var gOr=s(qre);_oo=r(gOr,"mobilebert"),gOr.forEach(t),boo=r(kx," \u2014 "),SR=n(kx,"A",{href:!0});var hOr=s(SR);voo=r(hOr,"MobileBertTokenizer"),hOr.forEach(t),Foo=r(kx," or "),RR=n(kx,"A",{href:!0});var pOr=s(RR);Too=r(pOr,"MobileBertTokenizerFast"),pOr.forEach(t),Moo=r(kx," (MobileBERT model)"),kx.forEach(t),Eoo=i(S),fs=n(S,"LI",{});var Sx=s(fs);Nre=n(Sx,"STRONG",{});var uOr=s(Nre);Coo=r(uOr,"mpnet"),uOr.forEach(t),woo=r(Sx," \u2014 "),BR=n(Sx,"A",{href:!0});var _Or=s(BR);Aoo=r(_Or,"MPNetTokenizer"),_Or.forEach(t),yoo=r(Sx," or "),PR=n(Sx,"A",{href:!0});var bOr=s(PR);Loo=r(bOr,"MPNetTokenizerFast"),bOr.forEach(t),xoo=r(Sx," (MPNet model)"),Sx.forEach(t),$oo=i(S),ms=n(S,"LI",{});var Rx=s(ms);jre=n(Rx,"STRONG",{});var vOr=s(jre);koo=r(vOr,"mt5"),vOr.forEach(t),Soo=r(Rx," \u2014 "),IR=n(Rx,"A",{href:!0});var FOr=s(IR);Roo=r(FOr,"MT5Tokenizer"),FOr.forEach(t),Boo=r(Rx," or "),qR=n(Rx,"A",{href:!0});var TOr=s(qR);Poo=r(TOr,"MT5TokenizerFast"),TOr.forEach(t),Ioo=r(Rx," (mT5 model)"),Rx.forEach(t),qoo=i(S),gs=n(S,"LI",{});var Bx=s(gs);Dre=n(Bx,"STRONG",{});var MOr=s(Dre);Noo=r(MOr,"nystromformer"),MOr.forEach(t),joo=r(Bx," \u2014 "),NR=n(Bx,"A",{href:!0});var EOr=s(NR);Doo=r(EOr,"AlbertTokenizer"),EOr.forEach(t),Goo=r(Bx," or "),jR=n(Bx,"A",{href:!0});var COr=s(jR);Ooo=r(COr,"AlbertTokenizerFast"),COr.forEach(t),Voo=r(Bx," (Nystromformer model)"),Bx.forEach(t),Xoo=i(S),hs=n(S,"LI",{});var Px=s(hs);Gre=n(Px,"STRONG",{});var wOr=s(Gre);zoo=r(wOr,"openai-gpt"),wOr.forEach(t),Qoo=r(Px," \u2014 "),DR=n(Px,"A",{href:!0});var AOr=s(DR);Woo=r(AOr,"OpenAIGPTTokenizer"),AOr.forEach(t),Hoo=r(Px," or "),GR=n(Px,"A",{href:!0});var yOr=s(GR);Uoo=r(yOr,"OpenAIGPTTokenizerFast"),yOr.forEach(t),Joo=r(Px," (OpenAI GPT model)"),Px.forEach(t),Yoo=i(S),ps=n(S,"LI",{});var Ix=s(ps);Ore=n(Ix,"STRONG",{});var LOr=s(Ore);Koo=r(LOr,"pegasus"),LOr.forEach(t),Zoo=r(Ix," \u2014 "),OR=n(Ix,"A",{href:!0});var xOr=s(OR);ero=r(xOr,"PegasusTokenizer"),xOr.forEach(t),oro=r(Ix," or "),VR=n(Ix,"A",{href:!0});var $Or=s(VR);rro=r($Or,"PegasusTokenizerFast"),$Or.forEach(t),tro=r(Ix," (Pegasus model)"),Ix.forEach(t),aro=i(S),kg=n(S,"LI",{});var a5e=s(kg);Vre=n(a5e,"STRONG",{});var kOr=s(Vre);nro=r(kOr,"perceiver"),kOr.forEach(t),sro=r(a5e," \u2014 "),XR=n(a5e,"A",{href:!0});var SOr=s(XR);lro=r(SOr,"PerceiverTokenizer"),SOr.forEach(t),iro=r(a5e," (Perceiver model)"),a5e.forEach(t),dro=i(S),Sg=n(S,"LI",{});var n5e=s(Sg);Xre=n(n5e,"STRONG",{});var ROr=s(Xre);cro=r(ROr,"phobert"),ROr.forEach(t),fro=r(n5e," \u2014 "),zR=n(n5e,"A",{href:!0});var BOr=s(zR);mro=r(BOr,"PhobertTokenizer"),BOr.forEach(t),gro=r(n5e," (PhoBERT model)"),n5e.forEach(t),hro=i(S),Rg=n(S,"LI",{});var s5e=s(Rg);zre=n(s5e,"STRONG",{});var POr=s(zre);pro=r(POr,"plbart"),POr.forEach(t),uro=r(s5e," \u2014 "),QR=n(s5e,"A",{href:!0});var IOr=s(QR);_ro=r(IOr,"PLBartTokenizer"),IOr.forEach(t),bro=r(s5e," (PLBart model)"),s5e.forEach(t),vro=i(S),Bg=n(S,"LI",{});var l5e=s(Bg);Qre=n(l5e,"STRONG",{});var qOr=s(Qre);Fro=r(qOr,"prophetnet"),qOr.forEach(t),Tro=r(l5e," \u2014 "),WR=n(l5e,"A",{href:!0});var NOr=s(WR);Mro=r(NOr,"ProphetNetTokenizer"),NOr.forEach(t),Ero=r(l5e," (ProphetNet model)"),l5e.forEach(t),Cro=i(S),us=n(S,"LI",{});var qx=s(us);Wre=n(qx,"STRONG",{});var jOr=s(Wre);wro=r(jOr,"qdqbert"),jOr.forEach(t),Aro=r(qx," \u2014 "),HR=n(qx,"A",{href:!0});var DOr=s(HR);yro=r(DOr,"BertTokenizer"),DOr.forEach(t),Lro=r(qx," or "),UR=n(qx,"A",{href:!0});var GOr=s(UR);xro=r(GOr,"BertTokenizerFast"),GOr.forEach(t),$ro=r(qx," (QDQBert model)"),qx.forEach(t),kro=i(S),Pg=n(S,"LI",{});var i5e=s(Pg);Hre=n(i5e,"STRONG",{});var OOr=s(Hre);Sro=r(OOr,"rag"),OOr.forEach(t),Rro=r(i5e," \u2014 "),JR=n(i5e,"A",{href:!0});var VOr=s(JR);Bro=r(VOr,"RagTokenizer"),VOr.forEach(t),Pro=r(i5e," (RAG model)"),i5e.forEach(t),Iro=i(S),_s=n(S,"LI",{});var Nx=s(_s);Ure=n(Nx,"STRONG",{});var XOr=s(Ure);qro=r(XOr,"realm"),XOr.forEach(t),Nro=r(Nx," \u2014 "),YR=n(Nx,"A",{href:!0});var zOr=s(YR);jro=r(zOr,"RealmTokenizer"),zOr.forEach(t),Dro=r(Nx," or "),KR=n(Nx,"A",{href:!0});var QOr=s(KR);Gro=r(QOr,"RealmTokenizerFast"),QOr.forEach(t),Oro=r(Nx," (Realm model)"),Nx.forEach(t),Vro=i(S),bs=n(S,"LI",{});var jx=s(bs);Jre=n(jx,"STRONG",{});var WOr=s(Jre);Xro=r(WOr,"reformer"),WOr.forEach(t),zro=r(jx," \u2014 "),ZR=n(jx,"A",{href:!0});var HOr=s(ZR);Qro=r(HOr,"ReformerTokenizer"),HOr.forEach(t),Wro=r(jx," or "),eB=n(jx,"A",{href:!0});var UOr=s(eB);Hro=r(UOr,"ReformerTokenizerFast"),UOr.forEach(t),Uro=r(jx," (Reformer model)"),jx.forEach(t),Jro=i(S),vs=n(S,"LI",{});var Dx=s(vs);Yre=n(Dx,"STRONG",{});var JOr=s(Yre);Yro=r(JOr,"rembert"),JOr.forEach(t),Kro=r(Dx," \u2014 "),oB=n(Dx,"A",{href:!0});var YOr=s(oB);Zro=r(YOr,"RemBertTokenizer"),YOr.forEach(t),eto=r(Dx," or "),rB=n(Dx,"A",{href:!0});var KOr=s(rB);oto=r(KOr,"RemBertTokenizerFast"),KOr.forEach(t),rto=r(Dx," (RemBERT model)"),Dx.forEach(t),tto=i(S),Fs=n(S,"LI",{});var Gx=s(Fs);Kre=n(Gx,"STRONG",{});var ZOr=s(Kre);ato=r(ZOr,"retribert"),ZOr.forEach(t),nto=r(Gx," \u2014 "),tB=n(Gx,"A",{href:!0});var eVr=s(tB);sto=r(eVr,"RetriBertTokenizer"),eVr.forEach(t),lto=r(Gx," or "),aB=n(Gx,"A",{href:!0});var oVr=s(aB);ito=r(oVr,"RetriBertTokenizerFast"),oVr.forEach(t),dto=r(Gx," (RetriBERT model)"),Gx.forEach(t),cto=i(S),Ts=n(S,"LI",{});var Ox=s(Ts);Zre=n(Ox,"STRONG",{});var rVr=s(Zre);fto=r(rVr,"roberta"),rVr.forEach(t),mto=r(Ox," \u2014 "),nB=n(Ox,"A",{href:!0});var tVr=s(nB);gto=r(tVr,"RobertaTokenizer"),tVr.forEach(t),hto=r(Ox," or "),sB=n(Ox,"A",{href:!0});var aVr=s(sB);pto=r(aVr,"RobertaTokenizerFast"),aVr.forEach(t),uto=r(Ox," (RoBERTa model)"),Ox.forEach(t),_to=i(S),Ms=n(S,"LI",{});var Vx=s(Ms);ete=n(Vx,"STRONG",{});var nVr=s(ete);bto=r(nVr,"roformer"),nVr.forEach(t),vto=r(Vx," \u2014 "),lB=n(Vx,"A",{href:!0});var sVr=s(lB);Fto=r(sVr,"RoFormerTokenizer"),sVr.forEach(t),Tto=r(Vx," or "),iB=n(Vx,"A",{href:!0});var lVr=s(iB);Mto=r(lVr,"RoFormerTokenizerFast"),lVr.forEach(t),Eto=r(Vx," (RoFormer model)"),Vx.forEach(t),Cto=i(S),Ig=n(S,"LI",{});var d5e=s(Ig);ote=n(d5e,"STRONG",{});var iVr=s(ote);wto=r(iVr,"speech_to_text"),iVr.forEach(t),Ato=r(d5e," \u2014 "),dB=n(d5e,"A",{href:!0});var dVr=s(dB);yto=r(dVr,"Speech2TextTokenizer"),dVr.forEach(t),Lto=r(d5e," (Speech2Text model)"),d5e.forEach(t),xto=i(S),qg=n(S,"LI",{});var c5e=s(qg);rte=n(c5e,"STRONG",{});var cVr=s(rte);$to=r(cVr,"speech_to_text_2"),cVr.forEach(t),kto=r(c5e," \u2014 "),cB=n(c5e,"A",{href:!0});var fVr=s(cB);Sto=r(fVr,"Speech2Text2Tokenizer"),fVr.forEach(t),Rto=r(c5e," (Speech2Text2 model)"),c5e.forEach(t),Bto=i(S),Es=n(S,"LI",{});var Xx=s(Es);tte=n(Xx,"STRONG",{});var mVr=s(tte);Pto=r(mVr,"splinter"),mVr.forEach(t),Ito=r(Xx," \u2014 "),fB=n(Xx,"A",{href:!0});var gVr=s(fB);qto=r(gVr,"SplinterTokenizer"),gVr.forEach(t),Nto=r(Xx," or "),mB=n(Xx,"A",{href:!0});var hVr=s(mB);jto=r(hVr,"SplinterTokenizerFast"),hVr.forEach(t),Dto=r(Xx," (Splinter model)"),Xx.forEach(t),Gto=i(S),Cs=n(S,"LI",{});var zx=s(Cs);ate=n(zx,"STRONG",{});var pVr=s(ate);Oto=r(pVr,"squeezebert"),pVr.forEach(t),Vto=r(zx," \u2014 "),gB=n(zx,"A",{href:!0});var uVr=s(gB);Xto=r(uVr,"SqueezeBertTokenizer"),uVr.forEach(t),zto=r(zx," or "),hB=n(zx,"A",{href:!0});var _Vr=s(hB);Qto=r(_Vr,"SqueezeBertTokenizerFast"),_Vr.forEach(t),Wto=r(zx," (SqueezeBERT model)"),zx.forEach(t),Hto=i(S),ws=n(S,"LI",{});var Qx=s(ws);nte=n(Qx,"STRONG",{});var bVr=s(nte);Uto=r(bVr,"t5"),bVr.forEach(t),Jto=r(Qx," \u2014 "),pB=n(Qx,"A",{href:!0});var vVr=s(pB);Yto=r(vVr,"T5Tokenizer"),vVr.forEach(t),Kto=r(Qx," or "),uB=n(Qx,"A",{href:!0});var FVr=s(uB);Zto=r(FVr,"T5TokenizerFast"),FVr.forEach(t),eao=r(Qx," (T5 model)"),Qx.forEach(t),oao=i(S),Ng=n(S,"LI",{});var f5e=s(Ng);ste=n(f5e,"STRONG",{});var TVr=s(ste);rao=r(TVr,"tapas"),TVr.forEach(t),tao=r(f5e," \u2014 "),_B=n(f5e,"A",{href:!0});var MVr=s(_B);aao=r(MVr,"TapasTokenizer"),MVr.forEach(t),nao=r(f5e," (TAPAS model)"),f5e.forEach(t),sao=i(S),jg=n(S,"LI",{});var m5e=s(jg);lte=n(m5e,"STRONG",{});var EVr=s(lte);lao=r(EVr,"tapex"),EVr.forEach(t),iao=r(m5e," \u2014 "),bB=n(m5e,"A",{href:!0});var CVr=s(bB);dao=r(CVr,"TapexTokenizer"),CVr.forEach(t),cao=r(m5e," (TAPEX model)"),m5e.forEach(t),fao=i(S),Dg=n(S,"LI",{});var g5e=s(Dg);ite=n(g5e,"STRONG",{});var wVr=s(ite);mao=r(wVr,"transfo-xl"),wVr.forEach(t),gao=r(g5e," \u2014 "),vB=n(g5e,"A",{href:!0});var AVr=s(vB);hao=r(AVr,"TransfoXLTokenizer"),AVr.forEach(t),pao=r(g5e," (Transformer-XL model)"),g5e.forEach(t),uao=i(S),As=n(S,"LI",{});var Wx=s(As);dte=n(Wx,"STRONG",{});var yVr=s(dte);_ao=r(yVr,"visual_bert"),yVr.forEach(t),bao=r(Wx," \u2014 "),FB=n(Wx,"A",{href:!0});var LVr=s(FB);vao=r(LVr,"BertTokenizer"),LVr.forEach(t),Fao=r(Wx," or "),TB=n(Wx,"A",{href:!0});var xVr=s(TB);Tao=r(xVr,"BertTokenizerFast"),xVr.forEach(t),Mao=r(Wx," (VisualBert model)"),Wx.forEach(t),Eao=i(S),Gg=n(S,"LI",{});var h5e=s(Gg);cte=n(h5e,"STRONG",{});var $Vr=s(cte);Cao=r($Vr,"wav2vec2"),$Vr.forEach(t),wao=r(h5e," \u2014 "),MB=n(h5e,"A",{href:!0});var kVr=s(MB);Aao=r(kVr,"Wav2Vec2CTCTokenizer"),kVr.forEach(t),yao=r(h5e," (Wav2Vec2 model)"),h5e.forEach(t),Lao=i(S),Og=n(S,"LI",{});var p5e=s(Og);fte=n(p5e,"STRONG",{});var SVr=s(fte);xao=r(SVr,"wav2vec2_phoneme"),SVr.forEach(t),$ao=r(p5e," \u2014 "),EB=n(p5e,"A",{href:!0});var RVr=s(EB);kao=r(RVr,"Wav2Vec2PhonemeCTCTokenizer"),RVr.forEach(t),Sao=r(p5e," (Wav2Vec2Phoneme model)"),p5e.forEach(t),Rao=i(S),ys=n(S,"LI",{});var Hx=s(ys);mte=n(Hx,"STRONG",{});var BVr=s(mte);Bao=r(BVr,"xglm"),BVr.forEach(t),Pao=r(Hx," \u2014 "),CB=n(Hx,"A",{href:!0});var PVr=s(CB);Iao=r(PVr,"XGLMTokenizer"),PVr.forEach(t),qao=r(Hx," or "),wB=n(Hx,"A",{href:!0});var IVr=s(wB);Nao=r(IVr,"XGLMTokenizerFast"),IVr.forEach(t),jao=r(Hx," (XGLM model)"),Hx.forEach(t),Dao=i(S),Vg=n(S,"LI",{});var u5e=s(Vg);gte=n(u5e,"STRONG",{});var qVr=s(gte);Gao=r(qVr,"xlm"),qVr.forEach(t),Oao=r(u5e," \u2014 "),AB=n(u5e,"A",{href:!0});var NVr=s(AB);Vao=r(NVr,"XLMTokenizer"),NVr.forEach(t),Xao=r(u5e," (XLM model)"),u5e.forEach(t),zao=i(S),Xg=n(S,"LI",{});var _5e=s(Xg);hte=n(_5e,"STRONG",{});var jVr=s(hte);Qao=r(jVr,"xlm-prophetnet"),jVr.forEach(t),Wao=r(_5e," \u2014 "),yB=n(_5e,"A",{href:!0});var DVr=s(yB);Hao=r(DVr,"XLMProphetNetTokenizer"),DVr.forEach(t),Uao=r(_5e," (XLMProphetNet model)"),_5e.forEach(t),Jao=i(S),Ls=n(S,"LI",{});var Ux=s(Ls);pte=n(Ux,"STRONG",{});var GVr=s(pte);Yao=r(GVr,"xlm-roberta"),GVr.forEach(t),Kao=r(Ux," \u2014 "),LB=n(Ux,"A",{href:!0});var OVr=s(LB);Zao=r(OVr,"XLMRobertaTokenizer"),OVr.forEach(t),eno=r(Ux," or "),xB=n(Ux,"A",{href:!0});var VVr=s(xB);ono=r(VVr,"XLMRobertaTokenizerFast"),VVr.forEach(t),rno=r(Ux," (XLM-RoBERTa model)"),Ux.forEach(t),tno=i(S),xs=n(S,"LI",{});var Jx=s(xs);ute=n(Jx,"STRONG",{});var XVr=s(ute);ano=r(XVr,"xlm-roberta-xl"),XVr.forEach(t),nno=r(Jx," \u2014 "),$B=n(Jx,"A",{href:!0});var zVr=s($B);sno=r(zVr,"RobertaTokenizer"),zVr.forEach(t),lno=r(Jx," or "),kB=n(Jx,"A",{href:!0});var QVr=s(kB);ino=r(QVr,"RobertaTokenizerFast"),QVr.forEach(t),dno=r(Jx," (XLM-RoBERTa-XL model)"),Jx.forEach(t),cno=i(S),$s=n(S,"LI",{});var Yx=s($s);_te=n(Yx,"STRONG",{});var WVr=s(_te);fno=r(WVr,"xlnet"),WVr.forEach(t),mno=r(Yx," \u2014 "),SB=n(Yx,"A",{href:!0});var HVr=s(SB);gno=r(HVr,"XLNetTokenizer"),HVr.forEach(t),hno=r(Yx," or "),RB=n(Yx,"A",{href:!0});var UVr=s(RB);pno=r(UVr,"XLNetTokenizerFast"),UVr.forEach(t),uno=r(Yx," (XLNet model)"),Yx.forEach(t),_no=i(S),ks=n(S,"LI",{});var Kx=s(ks);bte=n(Kx,"STRONG",{});var JVr=s(bte);bno=r(JVr,"yoso"),JVr.forEach(t),vno=r(Kx," \u2014 "),BB=n(Kx,"A",{href:!0});var YVr=s(BB);Fno=r(YVr,"AlbertTokenizer"),YVr.forEach(t),Tno=r(Kx," or "),PB=n(Kx,"A",{href:!0});var KVr=s(PB);Mno=r(KVr,"AlbertTokenizerFast"),KVr.forEach(t),Eno=r(Kx," (YOSO model)"),Kx.forEach(t),S.forEach(t),Cno=i(Is),T(zg.$$.fragment,Is),Is.forEach(t),wno=i(Ps),Qg=n(Ps,"DIV",{class:!0});var rqe=s(Qg);T(Yw.$$.fragment,rqe),Ano=i(rqe),vte=n(rqe,"P",{});var ZVr=s(vte);yno=r(ZVr,"Register a new tokenizer in this mapping."),ZVr.forEach(t),rqe.forEach(t),Ps.forEach(t),tPe=i(f),bi=n(f,"H2",{class:!0});var tqe=s(bi);Wg=n(tqe,"A",{id:!0,class:!0,href:!0});var eXr=s(Wg);Fte=n(eXr,"SPAN",{});var oXr=s(Fte);T(Kw.$$.fragment,oXr),oXr.forEach(t),eXr.forEach(t),Lno=i(tqe),Tte=n(tqe,"SPAN",{});var rXr=s(Tte);xno=r(rXr,"AutoFeatureExtractor"),rXr.forEach(t),tqe.forEach(t),aPe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(Zw.$$.fragment,qs),$no=i(qs),eA=n(qs,"P",{});var aqe=s(eA);kno=r(aqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=n(aqe,"A",{href:!0});var tXr=s(IB);Sno=r(tXr,"AutoFeatureExtractor.from_pretrained()"),tXr.forEach(t),Rno=r(aqe," class method."),aqe.forEach(t),Bno=i(qs),oA=n(qs,"P",{});var nqe=s(oA);Pno=r(nqe,"This class cannot be instantiated directly using "),Mte=n(nqe,"CODE",{});var aXr=s(Mte);Ino=r(aXr,"__init__()"),aXr.forEach(t),qno=r(nqe," (throws an error)."),nqe.forEach(t),Nno=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(rA.$$.fragment,Yt),jno=i(Yt),Ete=n(Yt,"P",{});var nXr=s(Ete);Dno=r(nXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),nXr.forEach(t),Gno=i(Yt),wa=n(Yt,"P",{});var DC=s(wa);Ono=r(DC,"The feature extractor class to instantiate is selected based on the "),Cte=n(DC,"CODE",{});var sXr=s(Cte);Vno=r(sXr,"model_type"),sXr.forEach(t),Xno=r(DC,` property of the config object
(either passed as an argument or loaded from `),wte=n(DC,"CODE",{});var lXr=s(wte);zno=r(lXr,"pretrained_model_name_or_path"),lXr.forEach(t),Qno=r(DC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ate=n(DC,"CODE",{});var iXr=s(Ate);Wno=r(iXr,"pretrained_model_name_or_path"),iXr.forEach(t),Hno=r(DC,":"),DC.forEach(t),Uno=i(Yt),te=n(Yt,"UL",{});var se=s(te);Hg=n(se,"LI",{});var b5e=s(Hg);yte=n(b5e,"STRONG",{});var dXr=s(yte);Jno=r(dXr,"beit"),dXr.forEach(t),Yno=r(b5e," \u2014 "),qB=n(b5e,"A",{href:!0});var cXr=s(qB);Kno=r(cXr,"BeitFeatureExtractor"),cXr.forEach(t),Zno=r(b5e," (BEiT model)"),b5e.forEach(t),eso=i(se),Ug=n(se,"LI",{});var v5e=s(Ug);Lte=n(v5e,"STRONG",{});var fXr=s(Lte);oso=r(fXr,"clip"),fXr.forEach(t),rso=r(v5e," \u2014 "),NB=n(v5e,"A",{href:!0});var mXr=s(NB);tso=r(mXr,"CLIPFeatureExtractor"),mXr.forEach(t),aso=r(v5e," (CLIP model)"),v5e.forEach(t),nso=i(se),Jg=n(se,"LI",{});var F5e=s(Jg);xte=n(F5e,"STRONG",{});var gXr=s(xte);sso=r(gXr,"convnext"),gXr.forEach(t),lso=r(F5e," \u2014 "),jB=n(F5e,"A",{href:!0});var hXr=s(jB);iso=r(hXr,"ConvNextFeatureExtractor"),hXr.forEach(t),dso=r(F5e," (ConvNext model)"),F5e.forEach(t),cso=i(se),Yg=n(se,"LI",{});var T5e=s(Yg);$te=n(T5e,"STRONG",{});var pXr=s($te);fso=r(pXr,"data2vec-audio"),pXr.forEach(t),mso=r(T5e," \u2014 "),DB=n(T5e,"A",{href:!0});var uXr=s(DB);gso=r(uXr,"Wav2Vec2FeatureExtractor"),uXr.forEach(t),hso=r(T5e," (Data2VecAudio model)"),T5e.forEach(t),pso=i(se),Kg=n(se,"LI",{});var M5e=s(Kg);kte=n(M5e,"STRONG",{});var _Xr=s(kte);uso=r(_Xr,"data2vec-vision"),_Xr.forEach(t),_so=r(M5e," \u2014 "),GB=n(M5e,"A",{href:!0});var bXr=s(GB);bso=r(bXr,"BeitFeatureExtractor"),bXr.forEach(t),vso=r(M5e," (Data2VecVision model)"),M5e.forEach(t),Fso=i(se),Zg=n(se,"LI",{});var E5e=s(Zg);Ste=n(E5e,"STRONG",{});var vXr=s(Ste);Tso=r(vXr,"deit"),vXr.forEach(t),Mso=r(E5e," \u2014 "),OB=n(E5e,"A",{href:!0});var FXr=s(OB);Eso=r(FXr,"DeiTFeatureExtractor"),FXr.forEach(t),Cso=r(E5e," (DeiT model)"),E5e.forEach(t),wso=i(se),eh=n(se,"LI",{});var C5e=s(eh);Rte=n(C5e,"STRONG",{});var TXr=s(Rte);Aso=r(TXr,"detr"),TXr.forEach(t),yso=r(C5e," \u2014 "),VB=n(C5e,"A",{href:!0});var MXr=s(VB);Lso=r(MXr,"DetrFeatureExtractor"),MXr.forEach(t),xso=r(C5e," (DETR model)"),C5e.forEach(t),$so=i(se),oh=n(se,"LI",{});var w5e=s(oh);Bte=n(w5e,"STRONG",{});var EXr=s(Bte);kso=r(EXr,"dpt"),EXr.forEach(t),Sso=r(w5e," \u2014 "),XB=n(w5e,"A",{href:!0});var CXr=s(XB);Rso=r(CXr,"DPTFeatureExtractor"),CXr.forEach(t),Bso=r(w5e," (DPT model)"),w5e.forEach(t),Pso=i(se),rh=n(se,"LI",{});var A5e=s(rh);Pte=n(A5e,"STRONG",{});var wXr=s(Pte);Iso=r(wXr,"glpn"),wXr.forEach(t),qso=r(A5e," \u2014 "),zB=n(A5e,"A",{href:!0});var AXr=s(zB);Nso=r(AXr,"GLPNFeatureExtractor"),AXr.forEach(t),jso=r(A5e," (GLPN model)"),A5e.forEach(t),Dso=i(se),th=n(se,"LI",{});var y5e=s(th);Ite=n(y5e,"STRONG",{});var yXr=s(Ite);Gso=r(yXr,"hubert"),yXr.forEach(t),Oso=r(y5e," \u2014 "),QB=n(y5e,"A",{href:!0});var LXr=s(QB);Vso=r(LXr,"Wav2Vec2FeatureExtractor"),LXr.forEach(t),Xso=r(y5e," (Hubert model)"),y5e.forEach(t),zso=i(se),ah=n(se,"LI",{});var L5e=s(ah);qte=n(L5e,"STRONG",{});var xXr=s(qte);Qso=r(xXr,"layoutlmv2"),xXr.forEach(t),Wso=r(L5e," \u2014 "),WB=n(L5e,"A",{href:!0});var $Xr=s(WB);Hso=r($Xr,"LayoutLMv2FeatureExtractor"),$Xr.forEach(t),Uso=r(L5e," (LayoutLMv2 model)"),L5e.forEach(t),Jso=i(se),nh=n(se,"LI",{});var x5e=s(nh);Nte=n(x5e,"STRONG",{});var kXr=s(Nte);Yso=r(kXr,"maskformer"),kXr.forEach(t),Kso=r(x5e," \u2014 "),HB=n(x5e,"A",{href:!0});var SXr=s(HB);Zso=r(SXr,"MaskFormerFeatureExtractor"),SXr.forEach(t),elo=r(x5e," (MaskFormer model)"),x5e.forEach(t),olo=i(se),sh=n(se,"LI",{});var $5e=s(sh);jte=n($5e,"STRONG",{});var RXr=s(jte);rlo=r(RXr,"perceiver"),RXr.forEach(t),tlo=r($5e," \u2014 "),UB=n($5e,"A",{href:!0});var BXr=s(UB);alo=r(BXr,"PerceiverFeatureExtractor"),BXr.forEach(t),nlo=r($5e," (Perceiver model)"),$5e.forEach(t),slo=i(se),lh=n(se,"LI",{});var k5e=s(lh);Dte=n(k5e,"STRONG",{});var PXr=s(Dte);llo=r(PXr,"poolformer"),PXr.forEach(t),ilo=r(k5e," \u2014 "),JB=n(k5e,"A",{href:!0});var IXr=s(JB);dlo=r(IXr,"PoolFormerFeatureExtractor"),IXr.forEach(t),clo=r(k5e," (PoolFormer model)"),k5e.forEach(t),flo=i(se),ih=n(se,"LI",{});var S5e=s(ih);Gte=n(S5e,"STRONG",{});var qXr=s(Gte);mlo=r(qXr,"regnet"),qXr.forEach(t),glo=r(S5e," \u2014 "),YB=n(S5e,"A",{href:!0});var NXr=s(YB);hlo=r(NXr,"ConvNextFeatureExtractor"),NXr.forEach(t),plo=r(S5e," (RegNet model)"),S5e.forEach(t),ulo=i(se),dh=n(se,"LI",{});var R5e=s(dh);Ote=n(R5e,"STRONG",{});var jXr=s(Ote);_lo=r(jXr,"resnet"),jXr.forEach(t),blo=r(R5e," \u2014 "),KB=n(R5e,"A",{href:!0});var DXr=s(KB);vlo=r(DXr,"ConvNextFeatureExtractor"),DXr.forEach(t),Flo=r(R5e," (ResNet model)"),R5e.forEach(t),Tlo=i(se),ch=n(se,"LI",{});var B5e=s(ch);Vte=n(B5e,"STRONG",{});var GXr=s(Vte);Mlo=r(GXr,"segformer"),GXr.forEach(t),Elo=r(B5e," \u2014 "),ZB=n(B5e,"A",{href:!0});var OXr=s(ZB);Clo=r(OXr,"SegformerFeatureExtractor"),OXr.forEach(t),wlo=r(B5e," (SegFormer model)"),B5e.forEach(t),Alo=i(se),fh=n(se,"LI",{});var P5e=s(fh);Xte=n(P5e,"STRONG",{});var VXr=s(Xte);ylo=r(VXr,"speech_to_text"),VXr.forEach(t),Llo=r(P5e," \u2014 "),eP=n(P5e,"A",{href:!0});var XXr=s(eP);xlo=r(XXr,"Speech2TextFeatureExtractor"),XXr.forEach(t),$lo=r(P5e," (Speech2Text model)"),P5e.forEach(t),klo=i(se),mh=n(se,"LI",{});var I5e=s(mh);zte=n(I5e,"STRONG",{});var zXr=s(zte);Slo=r(zXr,"swin"),zXr.forEach(t),Rlo=r(I5e," \u2014 "),oP=n(I5e,"A",{href:!0});var QXr=s(oP);Blo=r(QXr,"ViTFeatureExtractor"),QXr.forEach(t),Plo=r(I5e," (Swin model)"),I5e.forEach(t),Ilo=i(se),gh=n(se,"LI",{});var q5e=s(gh);Qte=n(q5e,"STRONG",{});var WXr=s(Qte);qlo=r(WXr,"van"),WXr.forEach(t),Nlo=r(q5e," \u2014 "),rP=n(q5e,"A",{href:!0});var HXr=s(rP);jlo=r(HXr,"ConvNextFeatureExtractor"),HXr.forEach(t),Dlo=r(q5e," (VAN model)"),q5e.forEach(t),Glo=i(se),hh=n(se,"LI",{});var N5e=s(hh);Wte=n(N5e,"STRONG",{});var UXr=s(Wte);Olo=r(UXr,"vit"),UXr.forEach(t),Vlo=r(N5e," \u2014 "),tP=n(N5e,"A",{href:!0});var JXr=s(tP);Xlo=r(JXr,"ViTFeatureExtractor"),JXr.forEach(t),zlo=r(N5e," (ViT model)"),N5e.forEach(t),Qlo=i(se),ph=n(se,"LI",{});var j5e=s(ph);Hte=n(j5e,"STRONG",{});var YXr=s(Hte);Wlo=r(YXr,"vit_mae"),YXr.forEach(t),Hlo=r(j5e," \u2014 "),aP=n(j5e,"A",{href:!0});var KXr=s(aP);Ulo=r(KXr,"ViTFeatureExtractor"),KXr.forEach(t),Jlo=r(j5e," (ViTMAE model)"),j5e.forEach(t),Ylo=i(se),uh=n(se,"LI",{});var D5e=s(uh);Ute=n(D5e,"STRONG",{});var ZXr=s(Ute);Klo=r(ZXr,"wav2vec2"),ZXr.forEach(t),Zlo=r(D5e," \u2014 "),nP=n(D5e,"A",{href:!0});var ezr=s(nP);eio=r(ezr,"Wav2Vec2FeatureExtractor"),ezr.forEach(t),oio=r(D5e," (Wav2Vec2 model)"),D5e.forEach(t),rio=i(se),_h=n(se,"LI",{});var G5e=s(_h);Jte=n(G5e,"STRONG",{});var ozr=s(Jte);tio=r(ozr,"yolos"),ozr.forEach(t),aio=r(G5e," \u2014 "),sP=n(G5e,"A",{href:!0});var rzr=s(sP);nio=r(rzr,"YolosFeatureExtractor"),rzr.forEach(t),sio=r(G5e," (YOLOS model)"),G5e.forEach(t),se.forEach(t),lio=i(Yt),T(bh.$$.fragment,Yt),iio=i(Yt),T(vh.$$.fragment,Yt),Yt.forEach(t),dio=i(qs),Fh=n(qs,"DIV",{class:!0});var sqe=s(Fh);T(tA.$$.fragment,sqe),cio=i(sqe),Yte=n(sqe,"P",{});var tzr=s(Yte);fio=r(tzr,"Register a new feature extractor for this class."),tzr.forEach(t),sqe.forEach(t),qs.forEach(t),nPe=i(f),vi=n(f,"H2",{class:!0});var lqe=s(vi);Th=n(lqe,"A",{id:!0,class:!0,href:!0});var azr=s(Th);Kte=n(azr,"SPAN",{});var nzr=s(Kte);T(aA.$$.fragment,nzr),nzr.forEach(t),azr.forEach(t),mio=i(lqe),Zte=n(lqe,"SPAN",{});var szr=s(Zte);gio=r(szr,"AutoProcessor"),szr.forEach(t),lqe.forEach(t),sPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(nA.$$.fragment,Ns),hio=i(Ns),sA=n(Ns,"P",{});var iqe=s(sA);pio=r(iqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lP=n(iqe,"A",{href:!0});var lzr=s(lP);uio=r(lzr,"AutoProcessor.from_pretrained()"),lzr.forEach(t),_io=r(iqe," class method."),iqe.forEach(t),bio=i(Ns),lA=n(Ns,"P",{});var dqe=s(lA);vio=r(dqe,"This class cannot be instantiated directly using "),eae=n(dqe,"CODE",{});var izr=s(eae);Fio=r(izr,"__init__()"),izr.forEach(t),Tio=r(dqe," (throws an error)."),dqe.forEach(t),Mio=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(iA.$$.fragment,Kt),Eio=i(Kt),oae=n(Kt,"P",{});var dzr=s(oae);Cio=r(dzr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dzr.forEach(t),wio=i(Kt),Fi=n(Kt,"P",{});var NY=s(Fi);Aio=r(NY,"The processor class to instantiate is selected based on the "),rae=n(NY,"CODE",{});var czr=s(rae);yio=r(czr,"model_type"),czr.forEach(t),Lio=r(NY,` property of the config object (either
passed as an argument or loaded from `),tae=n(NY,"CODE",{});var fzr=s(tae);xio=r(fzr,"pretrained_model_name_or_path"),fzr.forEach(t),$io=r(NY," if possible):"),NY.forEach(t),kio=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);Mh=n(Fe,"LI",{});var O5e=s(Mh);aae=n(O5e,"STRONG",{});var mzr=s(aae);Sio=r(mzr,"clip"),mzr.forEach(t),Rio=r(O5e," \u2014 "),iP=n(O5e,"A",{href:!0});var gzr=s(iP);Bio=r(gzr,"CLIPProcessor"),gzr.forEach(t),Pio=r(O5e," (CLIP model)"),O5e.forEach(t),Iio=i(Fe),Eh=n(Fe,"LI",{});var V5e=s(Eh);nae=n(V5e,"STRONG",{});var hzr=s(nae);qio=r(hzr,"layoutlmv2"),hzr.forEach(t),Nio=r(V5e," \u2014 "),dP=n(V5e,"A",{href:!0});var pzr=s(dP);jio=r(pzr,"LayoutLMv2Processor"),pzr.forEach(t),Dio=r(V5e," (LayoutLMv2 model)"),V5e.forEach(t),Gio=i(Fe),Ch=n(Fe,"LI",{});var X5e=s(Ch);sae=n(X5e,"STRONG",{});var uzr=s(sae);Oio=r(uzr,"layoutxlm"),uzr.forEach(t),Vio=r(X5e," \u2014 "),cP=n(X5e,"A",{href:!0});var _zr=s(cP);Xio=r(_zr,"LayoutXLMProcessor"),_zr.forEach(t),zio=r(X5e," (LayoutXLM model)"),X5e.forEach(t),Qio=i(Fe),wh=n(Fe,"LI",{});var z5e=s(wh);lae=n(z5e,"STRONG",{});var bzr=s(lae);Wio=r(bzr,"sew"),bzr.forEach(t),Hio=r(z5e," \u2014 "),fP=n(z5e,"A",{href:!0});var vzr=s(fP);Uio=r(vzr,"Wav2Vec2Processor"),vzr.forEach(t),Jio=r(z5e," (SEW model)"),z5e.forEach(t),Yio=i(Fe),Ah=n(Fe,"LI",{});var Q5e=s(Ah);iae=n(Q5e,"STRONG",{});var Fzr=s(iae);Kio=r(Fzr,"sew-d"),Fzr.forEach(t),Zio=r(Q5e," \u2014 "),mP=n(Q5e,"A",{href:!0});var Tzr=s(mP);edo=r(Tzr,"Wav2Vec2Processor"),Tzr.forEach(t),odo=r(Q5e," (SEW-D model)"),Q5e.forEach(t),rdo=i(Fe),yh=n(Fe,"LI",{});var W5e=s(yh);dae=n(W5e,"STRONG",{});var Mzr=s(dae);tdo=r(Mzr,"speech_to_text"),Mzr.forEach(t),ado=r(W5e," \u2014 "),gP=n(W5e,"A",{href:!0});var Ezr=s(gP);ndo=r(Ezr,"Speech2TextProcessor"),Ezr.forEach(t),sdo=r(W5e," (Speech2Text model)"),W5e.forEach(t),ldo=i(Fe),Lh=n(Fe,"LI",{});var H5e=s(Lh);cae=n(H5e,"STRONG",{});var Czr=s(cae);ido=r(Czr,"speech_to_text_2"),Czr.forEach(t),ddo=r(H5e," \u2014 "),hP=n(H5e,"A",{href:!0});var wzr=s(hP);cdo=r(wzr,"Speech2Text2Processor"),wzr.forEach(t),fdo=r(H5e," (Speech2Text2 model)"),H5e.forEach(t),mdo=i(Fe),xh=n(Fe,"LI",{});var U5e=s(xh);fae=n(U5e,"STRONG",{});var Azr=s(fae);gdo=r(Azr,"trocr"),Azr.forEach(t),hdo=r(U5e," \u2014 "),pP=n(U5e,"A",{href:!0});var yzr=s(pP);pdo=r(yzr,"TrOCRProcessor"),yzr.forEach(t),udo=r(U5e," (TrOCR model)"),U5e.forEach(t),_do=i(Fe),$h=n(Fe,"LI",{});var J5e=s($h);mae=n(J5e,"STRONG",{});var Lzr=s(mae);bdo=r(Lzr,"unispeech"),Lzr.forEach(t),vdo=r(J5e," \u2014 "),uP=n(J5e,"A",{href:!0});var xzr=s(uP);Fdo=r(xzr,"Wav2Vec2Processor"),xzr.forEach(t),Tdo=r(J5e," (UniSpeech model)"),J5e.forEach(t),Mdo=i(Fe),kh=n(Fe,"LI",{});var Y5e=s(kh);gae=n(Y5e,"STRONG",{});var $zr=s(gae);Edo=r($zr,"unispeech-sat"),$zr.forEach(t),Cdo=r(Y5e," \u2014 "),_P=n(Y5e,"A",{href:!0});var kzr=s(_P);wdo=r(kzr,"Wav2Vec2Processor"),kzr.forEach(t),Ado=r(Y5e," (UniSpeechSat model)"),Y5e.forEach(t),ydo=i(Fe),Sh=n(Fe,"LI",{});var K5e=s(Sh);hae=n(K5e,"STRONG",{});var Szr=s(hae);Ldo=r(Szr,"vilt"),Szr.forEach(t),xdo=r(K5e," \u2014 "),bP=n(K5e,"A",{href:!0});var Rzr=s(bP);$do=r(Rzr,"ViltProcessor"),Rzr.forEach(t),kdo=r(K5e," (ViLT model)"),K5e.forEach(t),Sdo=i(Fe),Rh=n(Fe,"LI",{});var Z5e=s(Rh);pae=n(Z5e,"STRONG",{});var Bzr=s(pae);Rdo=r(Bzr,"vision-text-dual-encoder"),Bzr.forEach(t),Bdo=r(Z5e," \u2014 "),vP=n(Z5e,"A",{href:!0});var Pzr=s(vP);Pdo=r(Pzr,"VisionTextDualEncoderProcessor"),Pzr.forEach(t),Ido=r(Z5e," (VisionTextDualEncoder model)"),Z5e.forEach(t),qdo=i(Fe),Bh=n(Fe,"LI",{});var eCe=s(Bh);uae=n(eCe,"STRONG",{});var Izr=s(uae);Ndo=r(Izr,"wav2vec2"),Izr.forEach(t),jdo=r(eCe," \u2014 "),FP=n(eCe,"A",{href:!0});var qzr=s(FP);Ddo=r(qzr,"Wav2Vec2Processor"),qzr.forEach(t),Gdo=r(eCe," (Wav2Vec2 model)"),eCe.forEach(t),Odo=i(Fe),Ph=n(Fe,"LI",{});var oCe=s(Ph);_ae=n(oCe,"STRONG",{});var Nzr=s(_ae);Vdo=r(Nzr,"wavlm"),Nzr.forEach(t),Xdo=r(oCe," \u2014 "),TP=n(oCe,"A",{href:!0});var jzr=s(TP);zdo=r(jzr,"Wav2Vec2Processor"),jzr.forEach(t),Qdo=r(oCe," (WavLM model)"),oCe.forEach(t),Fe.forEach(t),Wdo=i(Kt),T(Ih.$$.fragment,Kt),Hdo=i(Kt),T(qh.$$.fragment,Kt),Kt.forEach(t),Udo=i(Ns),Nh=n(Ns,"DIV",{class:!0});var cqe=s(Nh);T(dA.$$.fragment,cqe),Jdo=i(cqe),bae=n(cqe,"P",{});var Dzr=s(bae);Ydo=r(Dzr,"Register a new processor for this class."),Dzr.forEach(t),cqe.forEach(t),Ns.forEach(t),lPe=i(f),Ti=n(f,"H2",{class:!0});var fqe=s(Ti);jh=n(fqe,"A",{id:!0,class:!0,href:!0});var Gzr=s(jh);vae=n(Gzr,"SPAN",{});var Ozr=s(vae);T(cA.$$.fragment,Ozr),Ozr.forEach(t),Gzr.forEach(t),Kdo=i(fqe),Fae=n(fqe,"SPAN",{});var Vzr=s(Fae);Zdo=r(Vzr,"AutoModel"),Vzr.forEach(t),fqe.forEach(t),iPe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(fA.$$.fragment,js),eco=i(js),Mi=n(js,"P",{});var jY=s(Mi);oco=r(jY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MP=n(jY,"A",{href:!0});var Xzr=s(MP);rco=r(Xzr,"from_pretrained()"),Xzr.forEach(t),tco=r(jY," class method or the "),EP=n(jY,"A",{href:!0});var zzr=s(EP);aco=r(zzr,"from_config()"),zzr.forEach(t),nco=r(jY,` class
method.`),jY.forEach(t),sco=i(js),mA=n(js,"P",{});var mqe=s(mA);lco=r(mqe,"This class cannot be instantiated directly using "),Tae=n(mqe,"CODE",{});var Qzr=s(Tae);ico=r(Qzr,"__init__()"),Qzr.forEach(t),dco=r(mqe," (throws an error)."),mqe.forEach(t),cco=i(js),ot=n(js,"DIV",{class:!0});var GC=s(ot);T(gA.$$.fragment,GC),fco=i(GC),Mae=n(GC,"P",{});var Wzr=s(Mae);mco=r(Wzr,"Instantiates one of the base model classes of the library from a configuration."),Wzr.forEach(t),gco=i(GC),Ei=n(GC,"P",{});var DY=s(Ei);hco=r(DY,`Note:
Loading a model from its configuration file does `),Eae=n(DY,"STRONG",{});var Hzr=s(Eae);pco=r(Hzr,"not"),Hzr.forEach(t),uco=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),CP=n(DY,"A",{href:!0});var Uzr=s(CP);_co=r(Uzr,"from_pretrained()"),Uzr.forEach(t),bco=r(DY," to load the model weights."),DY.forEach(t),vco=i(GC),T(Dh.$$.fragment,GC),GC.forEach(t),Fco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(hA.$$.fragment,Zt),Tco=i(Zt),Cae=n(Zt,"P",{});var Jzr=s(Cae);Mco=r(Jzr,"Instantiate one of the base model classes of the library from a pretrained model."),Jzr.forEach(t),Eco=i(Zt),Aa=n(Zt,"P",{});var OC=s(Aa);Cco=r(OC,"The model class to instantiate is selected based on the "),wae=n(OC,"CODE",{});var Yzr=s(wae);wco=r(Yzr,"model_type"),Yzr.forEach(t),Aco=r(OC,` property of the config object (either
passed as an argument or loaded from `),Aae=n(OC,"CODE",{});var Kzr=s(Aae);yco=r(Kzr,"pretrained_model_name_or_path"),Kzr.forEach(t),Lco=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=n(OC,"CODE",{});var Zzr=s(yae);xco=r(Zzr,"pretrained_model_name_or_path"),Zzr.forEach(t),$co=r(OC,":"),OC.forEach(t),kco=i(Zt),x=n(Zt,"UL",{});var $=s(x);Gh=n($,"LI",{});var rCe=s(Gh);Lae=n(rCe,"STRONG",{});var eQr=s(Lae);Sco=r(eQr,"albert"),eQr.forEach(t),Rco=r(rCe," \u2014 "),wP=n(rCe,"A",{href:!0});var oQr=s(wP);Bco=r(oQr,"AlbertModel"),oQr.forEach(t),Pco=r(rCe," (ALBERT model)"),rCe.forEach(t),Ico=i($),Oh=n($,"LI",{});var tCe=s(Oh);xae=n(tCe,"STRONG",{});var rQr=s(xae);qco=r(rQr,"bart"),rQr.forEach(t),Nco=r(tCe," \u2014 "),AP=n(tCe,"A",{href:!0});var tQr=s(AP);jco=r(tQr,"BartModel"),tQr.forEach(t),Dco=r(tCe," (BART model)"),tCe.forEach(t),Gco=i($),Vh=n($,"LI",{});var aCe=s(Vh);$ae=n(aCe,"STRONG",{});var aQr=s($ae);Oco=r(aQr,"beit"),aQr.forEach(t),Vco=r(aCe," \u2014 "),yP=n(aCe,"A",{href:!0});var nQr=s(yP);Xco=r(nQr,"BeitModel"),nQr.forEach(t),zco=r(aCe," (BEiT model)"),aCe.forEach(t),Qco=i($),Xh=n($,"LI",{});var nCe=s(Xh);kae=n(nCe,"STRONG",{});var sQr=s(kae);Wco=r(sQr,"bert"),sQr.forEach(t),Hco=r(nCe," \u2014 "),LP=n(nCe,"A",{href:!0});var lQr=s(LP);Uco=r(lQr,"BertModel"),lQr.forEach(t),Jco=r(nCe," (BERT model)"),nCe.forEach(t),Yco=i($),zh=n($,"LI",{});var sCe=s(zh);Sae=n(sCe,"STRONG",{});var iQr=s(Sae);Kco=r(iQr,"bert-generation"),iQr.forEach(t),Zco=r(sCe," \u2014 "),xP=n(sCe,"A",{href:!0});var dQr=s(xP);efo=r(dQr,"BertGenerationEncoder"),dQr.forEach(t),ofo=r(sCe," (Bert Generation model)"),sCe.forEach(t),rfo=i($),Qh=n($,"LI",{});var lCe=s(Qh);Rae=n(lCe,"STRONG",{});var cQr=s(Rae);tfo=r(cQr,"big_bird"),cQr.forEach(t),afo=r(lCe," \u2014 "),$P=n(lCe,"A",{href:!0});var fQr=s($P);nfo=r(fQr,"BigBirdModel"),fQr.forEach(t),sfo=r(lCe," (BigBird model)"),lCe.forEach(t),lfo=i($),Wh=n($,"LI",{});var iCe=s(Wh);Bae=n(iCe,"STRONG",{});var mQr=s(Bae);ifo=r(mQr,"bigbird_pegasus"),mQr.forEach(t),dfo=r(iCe," \u2014 "),kP=n(iCe,"A",{href:!0});var gQr=s(kP);cfo=r(gQr,"BigBirdPegasusModel"),gQr.forEach(t),ffo=r(iCe," (BigBirdPegasus model)"),iCe.forEach(t),mfo=i($),Hh=n($,"LI",{});var dCe=s(Hh);Pae=n(dCe,"STRONG",{});var hQr=s(Pae);gfo=r(hQr,"blenderbot"),hQr.forEach(t),hfo=r(dCe," \u2014 "),SP=n(dCe,"A",{href:!0});var pQr=s(SP);pfo=r(pQr,"BlenderbotModel"),pQr.forEach(t),ufo=r(dCe," (Blenderbot model)"),dCe.forEach(t),_fo=i($),Uh=n($,"LI",{});var cCe=s(Uh);Iae=n(cCe,"STRONG",{});var uQr=s(Iae);bfo=r(uQr,"blenderbot-small"),uQr.forEach(t),vfo=r(cCe," \u2014 "),RP=n(cCe,"A",{href:!0});var _Qr=s(RP);Ffo=r(_Qr,"BlenderbotSmallModel"),_Qr.forEach(t),Tfo=r(cCe," (BlenderbotSmall model)"),cCe.forEach(t),Mfo=i($),Jh=n($,"LI",{});var fCe=s(Jh);qae=n(fCe,"STRONG",{});var bQr=s(qae);Efo=r(bQr,"camembert"),bQr.forEach(t),Cfo=r(fCe," \u2014 "),BP=n(fCe,"A",{href:!0});var vQr=s(BP);wfo=r(vQr,"CamembertModel"),vQr.forEach(t),Afo=r(fCe," (CamemBERT model)"),fCe.forEach(t),yfo=i($),Yh=n($,"LI",{});var mCe=s(Yh);Nae=n(mCe,"STRONG",{});var FQr=s(Nae);Lfo=r(FQr,"canine"),FQr.forEach(t),xfo=r(mCe," \u2014 "),PP=n(mCe,"A",{href:!0});var TQr=s(PP);$fo=r(TQr,"CanineModel"),TQr.forEach(t),kfo=r(mCe," (Canine model)"),mCe.forEach(t),Sfo=i($),Kh=n($,"LI",{});var gCe=s(Kh);jae=n(gCe,"STRONG",{});var MQr=s(jae);Rfo=r(MQr,"clip"),MQr.forEach(t),Bfo=r(gCe," \u2014 "),IP=n(gCe,"A",{href:!0});var EQr=s(IP);Pfo=r(EQr,"CLIPModel"),EQr.forEach(t),Ifo=r(gCe," (CLIP model)"),gCe.forEach(t),qfo=i($),Zh=n($,"LI",{});var hCe=s(Zh);Dae=n(hCe,"STRONG",{});var CQr=s(Dae);Nfo=r(CQr,"convbert"),CQr.forEach(t),jfo=r(hCe," \u2014 "),qP=n(hCe,"A",{href:!0});var wQr=s(qP);Dfo=r(wQr,"ConvBertModel"),wQr.forEach(t),Gfo=r(hCe," (ConvBERT model)"),hCe.forEach(t),Ofo=i($),ep=n($,"LI",{});var pCe=s(ep);Gae=n(pCe,"STRONG",{});var AQr=s(Gae);Vfo=r(AQr,"convnext"),AQr.forEach(t),Xfo=r(pCe," \u2014 "),NP=n(pCe,"A",{href:!0});var yQr=s(NP);zfo=r(yQr,"ConvNextModel"),yQr.forEach(t),Qfo=r(pCe," (ConvNext model)"),pCe.forEach(t),Wfo=i($),op=n($,"LI",{});var uCe=s(op);Oae=n(uCe,"STRONG",{});var LQr=s(Oae);Hfo=r(LQr,"ctrl"),LQr.forEach(t),Ufo=r(uCe," \u2014 "),jP=n(uCe,"A",{href:!0});var xQr=s(jP);Jfo=r(xQr,"CTRLModel"),xQr.forEach(t),Yfo=r(uCe," (CTRL model)"),uCe.forEach(t),Kfo=i($),rp=n($,"LI",{});var _Ce=s(rp);Vae=n(_Ce,"STRONG",{});var $Qr=s(Vae);Zfo=r($Qr,"data2vec-audio"),$Qr.forEach(t),emo=r(_Ce," \u2014 "),DP=n(_Ce,"A",{href:!0});var kQr=s(DP);omo=r(kQr,"Data2VecAudioModel"),kQr.forEach(t),rmo=r(_Ce," (Data2VecAudio model)"),_Ce.forEach(t),tmo=i($),tp=n($,"LI",{});var bCe=s(tp);Xae=n(bCe,"STRONG",{});var SQr=s(Xae);amo=r(SQr,"data2vec-text"),SQr.forEach(t),nmo=r(bCe," \u2014 "),GP=n(bCe,"A",{href:!0});var RQr=s(GP);smo=r(RQr,"Data2VecTextModel"),RQr.forEach(t),lmo=r(bCe," (Data2VecText model)"),bCe.forEach(t),imo=i($),ap=n($,"LI",{});var vCe=s(ap);zae=n(vCe,"STRONG",{});var BQr=s(zae);dmo=r(BQr,"data2vec-vision"),BQr.forEach(t),cmo=r(vCe," \u2014 "),OP=n(vCe,"A",{href:!0});var PQr=s(OP);fmo=r(PQr,"Data2VecVisionModel"),PQr.forEach(t),mmo=r(vCe," (Data2VecVision model)"),vCe.forEach(t),gmo=i($),np=n($,"LI",{});var FCe=s(np);Qae=n(FCe,"STRONG",{});var IQr=s(Qae);hmo=r(IQr,"deberta"),IQr.forEach(t),pmo=r(FCe," \u2014 "),VP=n(FCe,"A",{href:!0});var qQr=s(VP);umo=r(qQr,"DebertaModel"),qQr.forEach(t),_mo=r(FCe," (DeBERTa model)"),FCe.forEach(t),bmo=i($),sp=n($,"LI",{});var TCe=s(sp);Wae=n(TCe,"STRONG",{});var NQr=s(Wae);vmo=r(NQr,"deberta-v2"),NQr.forEach(t),Fmo=r(TCe," \u2014 "),XP=n(TCe,"A",{href:!0});var jQr=s(XP);Tmo=r(jQr,"DebertaV2Model"),jQr.forEach(t),Mmo=r(TCe," (DeBERTa-v2 model)"),TCe.forEach(t),Emo=i($),lp=n($,"LI",{});var MCe=s(lp);Hae=n(MCe,"STRONG",{});var DQr=s(Hae);Cmo=r(DQr,"decision_transformer"),DQr.forEach(t),wmo=r(MCe," \u2014 "),zP=n(MCe,"A",{href:!0});var GQr=s(zP);Amo=r(GQr,"DecisionTransformerModel"),GQr.forEach(t),ymo=r(MCe," (Decision Transformer model)"),MCe.forEach(t),Lmo=i($),ip=n($,"LI",{});var ECe=s(ip);Uae=n(ECe,"STRONG",{});var OQr=s(Uae);xmo=r(OQr,"deit"),OQr.forEach(t),$mo=r(ECe," \u2014 "),QP=n(ECe,"A",{href:!0});var VQr=s(QP);kmo=r(VQr,"DeiTModel"),VQr.forEach(t),Smo=r(ECe," (DeiT model)"),ECe.forEach(t),Rmo=i($),dp=n($,"LI",{});var CCe=s(dp);Jae=n(CCe,"STRONG",{});var XQr=s(Jae);Bmo=r(XQr,"detr"),XQr.forEach(t),Pmo=r(CCe," \u2014 "),WP=n(CCe,"A",{href:!0});var zQr=s(WP);Imo=r(zQr,"DetrModel"),zQr.forEach(t),qmo=r(CCe," (DETR model)"),CCe.forEach(t),Nmo=i($),cp=n($,"LI",{});var wCe=s(cp);Yae=n(wCe,"STRONG",{});var QQr=s(Yae);jmo=r(QQr,"distilbert"),QQr.forEach(t),Dmo=r(wCe," \u2014 "),HP=n(wCe,"A",{href:!0});var WQr=s(HP);Gmo=r(WQr,"DistilBertModel"),WQr.forEach(t),Omo=r(wCe," (DistilBERT model)"),wCe.forEach(t),Vmo=i($),fp=n($,"LI",{});var ACe=s(fp);Kae=n(ACe,"STRONG",{});var HQr=s(Kae);Xmo=r(HQr,"dpr"),HQr.forEach(t),zmo=r(ACe," \u2014 "),UP=n(ACe,"A",{href:!0});var UQr=s(UP);Qmo=r(UQr,"DPRQuestionEncoder"),UQr.forEach(t),Wmo=r(ACe," (DPR model)"),ACe.forEach(t),Hmo=i($),mp=n($,"LI",{});var yCe=s(mp);Zae=n(yCe,"STRONG",{});var JQr=s(Zae);Umo=r(JQr,"dpt"),JQr.forEach(t),Jmo=r(yCe," \u2014 "),JP=n(yCe,"A",{href:!0});var YQr=s(JP);Ymo=r(YQr,"DPTModel"),YQr.forEach(t),Kmo=r(yCe," (DPT model)"),yCe.forEach(t),Zmo=i($),gp=n($,"LI",{});var LCe=s(gp);ene=n(LCe,"STRONG",{});var KQr=s(ene);ego=r(KQr,"electra"),KQr.forEach(t),ogo=r(LCe," \u2014 "),YP=n(LCe,"A",{href:!0});var ZQr=s(YP);rgo=r(ZQr,"ElectraModel"),ZQr.forEach(t),tgo=r(LCe," (ELECTRA model)"),LCe.forEach(t),ago=i($),hp=n($,"LI",{});var xCe=s(hp);one=n(xCe,"STRONG",{});var eWr=s(one);ngo=r(eWr,"flaubert"),eWr.forEach(t),sgo=r(xCe," \u2014 "),KP=n(xCe,"A",{href:!0});var oWr=s(KP);lgo=r(oWr,"FlaubertModel"),oWr.forEach(t),igo=r(xCe," (FlauBERT model)"),xCe.forEach(t),dgo=i($),pp=n($,"LI",{});var $Ce=s(pp);rne=n($Ce,"STRONG",{});var rWr=s(rne);cgo=r(rWr,"fnet"),rWr.forEach(t),fgo=r($Ce," \u2014 "),ZP=n($Ce,"A",{href:!0});var tWr=s(ZP);mgo=r(tWr,"FNetModel"),tWr.forEach(t),ggo=r($Ce," (FNet model)"),$Ce.forEach(t),hgo=i($),up=n($,"LI",{});var kCe=s(up);tne=n(kCe,"STRONG",{});var aWr=s(tne);pgo=r(aWr,"fsmt"),aWr.forEach(t),ugo=r(kCe," \u2014 "),eI=n(kCe,"A",{href:!0});var nWr=s(eI);_go=r(nWr,"FSMTModel"),nWr.forEach(t),bgo=r(kCe," (FairSeq Machine-Translation model)"),kCe.forEach(t),vgo=i($),Ss=n($,"LI",{});var Zx=s(Ss);ane=n(Zx,"STRONG",{});var sWr=s(ane);Fgo=r(sWr,"funnel"),sWr.forEach(t),Tgo=r(Zx," \u2014 "),oI=n(Zx,"A",{href:!0});var lWr=s(oI);Mgo=r(lWr,"FunnelModel"),lWr.forEach(t),Ego=r(Zx," or "),rI=n(Zx,"A",{href:!0});var iWr=s(rI);Cgo=r(iWr,"FunnelBaseModel"),iWr.forEach(t),wgo=r(Zx," (Funnel Transformer model)"),Zx.forEach(t),Ago=i($),_p=n($,"LI",{});var SCe=s(_p);nne=n(SCe,"STRONG",{});var dWr=s(nne);ygo=r(dWr,"glpn"),dWr.forEach(t),Lgo=r(SCe," \u2014 "),tI=n(SCe,"A",{href:!0});var cWr=s(tI);xgo=r(cWr,"GLPNModel"),cWr.forEach(t),$go=r(SCe," (GLPN model)"),SCe.forEach(t),kgo=i($),bp=n($,"LI",{});var RCe=s(bp);sne=n(RCe,"STRONG",{});var fWr=s(sne);Sgo=r(fWr,"gpt2"),fWr.forEach(t),Rgo=r(RCe," \u2014 "),aI=n(RCe,"A",{href:!0});var mWr=s(aI);Bgo=r(mWr,"GPT2Model"),mWr.forEach(t),Pgo=r(RCe," (OpenAI GPT-2 model)"),RCe.forEach(t),Igo=i($),vp=n($,"LI",{});var BCe=s(vp);lne=n(BCe,"STRONG",{});var gWr=s(lne);qgo=r(gWr,"gpt_neo"),gWr.forEach(t),Ngo=r(BCe," \u2014 "),nI=n(BCe,"A",{href:!0});var hWr=s(nI);jgo=r(hWr,"GPTNeoModel"),hWr.forEach(t),Dgo=r(BCe," (GPT Neo model)"),BCe.forEach(t),Ggo=i($),Fp=n($,"LI",{});var PCe=s(Fp);ine=n(PCe,"STRONG",{});var pWr=s(ine);Ogo=r(pWr,"gptj"),pWr.forEach(t),Vgo=r(PCe," \u2014 "),sI=n(PCe,"A",{href:!0});var uWr=s(sI);Xgo=r(uWr,"GPTJModel"),uWr.forEach(t),zgo=r(PCe," (GPT-J model)"),PCe.forEach(t),Qgo=i($),Tp=n($,"LI",{});var ICe=s(Tp);dne=n(ICe,"STRONG",{});var _Wr=s(dne);Wgo=r(_Wr,"hubert"),_Wr.forEach(t),Hgo=r(ICe," \u2014 "),lI=n(ICe,"A",{href:!0});var bWr=s(lI);Ugo=r(bWr,"HubertModel"),bWr.forEach(t),Jgo=r(ICe," (Hubert model)"),ICe.forEach(t),Ygo=i($),Mp=n($,"LI",{});var qCe=s(Mp);cne=n(qCe,"STRONG",{});var vWr=s(cne);Kgo=r(vWr,"ibert"),vWr.forEach(t),Zgo=r(qCe," \u2014 "),iI=n(qCe,"A",{href:!0});var FWr=s(iI);eho=r(FWr,"IBertModel"),FWr.forEach(t),oho=r(qCe," (I-BERT model)"),qCe.forEach(t),rho=i($),Ep=n($,"LI",{});var NCe=s(Ep);fne=n(NCe,"STRONG",{});var TWr=s(fne);tho=r(TWr,"imagegpt"),TWr.forEach(t),aho=r(NCe," \u2014 "),dI=n(NCe,"A",{href:!0});var MWr=s(dI);nho=r(MWr,"ImageGPTModel"),MWr.forEach(t),sho=r(NCe," (ImageGPT model)"),NCe.forEach(t),lho=i($),Cp=n($,"LI",{});var jCe=s(Cp);mne=n(jCe,"STRONG",{});var EWr=s(mne);iho=r(EWr,"layoutlm"),EWr.forEach(t),dho=r(jCe," \u2014 "),cI=n(jCe,"A",{href:!0});var CWr=s(cI);cho=r(CWr,"LayoutLMModel"),CWr.forEach(t),fho=r(jCe," (LayoutLM model)"),jCe.forEach(t),mho=i($),wp=n($,"LI",{});var DCe=s(wp);gne=n(DCe,"STRONG",{});var wWr=s(gne);gho=r(wWr,"layoutlmv2"),wWr.forEach(t),hho=r(DCe," \u2014 "),fI=n(DCe,"A",{href:!0});var AWr=s(fI);pho=r(AWr,"LayoutLMv2Model"),AWr.forEach(t),uho=r(DCe," (LayoutLMv2 model)"),DCe.forEach(t),_ho=i($),Ap=n($,"LI",{});var GCe=s(Ap);hne=n(GCe,"STRONG",{});var yWr=s(hne);bho=r(yWr,"led"),yWr.forEach(t),vho=r(GCe," \u2014 "),mI=n(GCe,"A",{href:!0});var LWr=s(mI);Fho=r(LWr,"LEDModel"),LWr.forEach(t),Tho=r(GCe," (LED model)"),GCe.forEach(t),Mho=i($),yp=n($,"LI",{});var OCe=s(yp);pne=n(OCe,"STRONG",{});var xWr=s(pne);Eho=r(xWr,"longformer"),xWr.forEach(t),Cho=r(OCe," \u2014 "),gI=n(OCe,"A",{href:!0});var $Wr=s(gI);who=r($Wr,"LongformerModel"),$Wr.forEach(t),Aho=r(OCe," (Longformer model)"),OCe.forEach(t),yho=i($),Lp=n($,"LI",{});var VCe=s(Lp);une=n(VCe,"STRONG",{});var kWr=s(une);Lho=r(kWr,"luke"),kWr.forEach(t),xho=r(VCe," \u2014 "),hI=n(VCe,"A",{href:!0});var SWr=s(hI);$ho=r(SWr,"LukeModel"),SWr.forEach(t),kho=r(VCe," (LUKE model)"),VCe.forEach(t),Sho=i($),xp=n($,"LI",{});var XCe=s(xp);_ne=n(XCe,"STRONG",{});var RWr=s(_ne);Rho=r(RWr,"lxmert"),RWr.forEach(t),Bho=r(XCe," \u2014 "),pI=n(XCe,"A",{href:!0});var BWr=s(pI);Pho=r(BWr,"LxmertModel"),BWr.forEach(t),Iho=r(XCe," (LXMERT model)"),XCe.forEach(t),qho=i($),$p=n($,"LI",{});var zCe=s($p);bne=n(zCe,"STRONG",{});var PWr=s(bne);Nho=r(PWr,"m2m_100"),PWr.forEach(t),jho=r(zCe," \u2014 "),uI=n(zCe,"A",{href:!0});var IWr=s(uI);Dho=r(IWr,"M2M100Model"),IWr.forEach(t),Gho=r(zCe," (M2M100 model)"),zCe.forEach(t),Oho=i($),kp=n($,"LI",{});var QCe=s(kp);vne=n(QCe,"STRONG",{});var qWr=s(vne);Vho=r(qWr,"marian"),qWr.forEach(t),Xho=r(QCe," \u2014 "),_I=n(QCe,"A",{href:!0});var NWr=s(_I);zho=r(NWr,"MarianModel"),NWr.forEach(t),Qho=r(QCe," (Marian model)"),QCe.forEach(t),Who=i($),Sp=n($,"LI",{});var WCe=s(Sp);Fne=n(WCe,"STRONG",{});var jWr=s(Fne);Hho=r(jWr,"maskformer"),jWr.forEach(t),Uho=r(WCe," \u2014 "),bI=n(WCe,"A",{href:!0});var DWr=s(bI);Jho=r(DWr,"MaskFormerModel"),DWr.forEach(t),Yho=r(WCe," (MaskFormer model)"),WCe.forEach(t),Kho=i($),Rp=n($,"LI",{});var HCe=s(Rp);Tne=n(HCe,"STRONG",{});var GWr=s(Tne);Zho=r(GWr,"mbart"),GWr.forEach(t),epo=r(HCe," \u2014 "),vI=n(HCe,"A",{href:!0});var OWr=s(vI);opo=r(OWr,"MBartModel"),OWr.forEach(t),rpo=r(HCe," (mBART model)"),HCe.forEach(t),tpo=i($),Bp=n($,"LI",{});var UCe=s(Bp);Mne=n(UCe,"STRONG",{});var VWr=s(Mne);apo=r(VWr,"megatron-bert"),VWr.forEach(t),npo=r(UCe," \u2014 "),FI=n(UCe,"A",{href:!0});var XWr=s(FI);spo=r(XWr,"MegatronBertModel"),XWr.forEach(t),lpo=r(UCe," (MegatronBert model)"),UCe.forEach(t),ipo=i($),Pp=n($,"LI",{});var JCe=s(Pp);Ene=n(JCe,"STRONG",{});var zWr=s(Ene);dpo=r(zWr,"mobilebert"),zWr.forEach(t),cpo=r(JCe," \u2014 "),TI=n(JCe,"A",{href:!0});var QWr=s(TI);fpo=r(QWr,"MobileBertModel"),QWr.forEach(t),mpo=r(JCe," (MobileBERT model)"),JCe.forEach(t),gpo=i($),Ip=n($,"LI",{});var YCe=s(Ip);Cne=n(YCe,"STRONG",{});var WWr=s(Cne);hpo=r(WWr,"mpnet"),WWr.forEach(t),ppo=r(YCe," \u2014 "),MI=n(YCe,"A",{href:!0});var HWr=s(MI);upo=r(HWr,"MPNetModel"),HWr.forEach(t),_po=r(YCe," (MPNet model)"),YCe.forEach(t),bpo=i($),qp=n($,"LI",{});var KCe=s(qp);wne=n(KCe,"STRONG",{});var UWr=s(wne);vpo=r(UWr,"mt5"),UWr.forEach(t),Fpo=r(KCe," \u2014 "),EI=n(KCe,"A",{href:!0});var JWr=s(EI);Tpo=r(JWr,"MT5Model"),JWr.forEach(t),Mpo=r(KCe," (mT5 model)"),KCe.forEach(t),Epo=i($),Np=n($,"LI",{});var ZCe=s(Np);Ane=n(ZCe,"STRONG",{});var YWr=s(Ane);Cpo=r(YWr,"nystromformer"),YWr.forEach(t),wpo=r(ZCe," \u2014 "),CI=n(ZCe,"A",{href:!0});var KWr=s(CI);Apo=r(KWr,"NystromformerModel"),KWr.forEach(t),ypo=r(ZCe," (Nystromformer model)"),ZCe.forEach(t),Lpo=i($),jp=n($,"LI",{});var e3e=s(jp);yne=n(e3e,"STRONG",{});var ZWr=s(yne);xpo=r(ZWr,"openai-gpt"),ZWr.forEach(t),$po=r(e3e," \u2014 "),wI=n(e3e,"A",{href:!0});var eHr=s(wI);kpo=r(eHr,"OpenAIGPTModel"),eHr.forEach(t),Spo=r(e3e," (OpenAI GPT model)"),e3e.forEach(t),Rpo=i($),Dp=n($,"LI",{});var o3e=s(Dp);Lne=n(o3e,"STRONG",{});var oHr=s(Lne);Bpo=r(oHr,"pegasus"),oHr.forEach(t),Ppo=r(o3e," \u2014 "),AI=n(o3e,"A",{href:!0});var rHr=s(AI);Ipo=r(rHr,"PegasusModel"),rHr.forEach(t),qpo=r(o3e," (Pegasus model)"),o3e.forEach(t),Npo=i($),Gp=n($,"LI",{});var r3e=s(Gp);xne=n(r3e,"STRONG",{});var tHr=s(xne);jpo=r(tHr,"perceiver"),tHr.forEach(t),Dpo=r(r3e," \u2014 "),yI=n(r3e,"A",{href:!0});var aHr=s(yI);Gpo=r(aHr,"PerceiverModel"),aHr.forEach(t),Opo=r(r3e," (Perceiver model)"),r3e.forEach(t),Vpo=i($),Op=n($,"LI",{});var t3e=s(Op);$ne=n(t3e,"STRONG",{});var nHr=s($ne);Xpo=r(nHr,"plbart"),nHr.forEach(t),zpo=r(t3e," \u2014 "),LI=n(t3e,"A",{href:!0});var sHr=s(LI);Qpo=r(sHr,"PLBartModel"),sHr.forEach(t),Wpo=r(t3e," (PLBart model)"),t3e.forEach(t),Hpo=i($),Vp=n($,"LI",{});var a3e=s(Vp);kne=n(a3e,"STRONG",{});var lHr=s(kne);Upo=r(lHr,"poolformer"),lHr.forEach(t),Jpo=r(a3e," \u2014 "),xI=n(a3e,"A",{href:!0});var iHr=s(xI);Ypo=r(iHr,"PoolFormerModel"),iHr.forEach(t),Kpo=r(a3e," (PoolFormer model)"),a3e.forEach(t),Zpo=i($),Xp=n($,"LI",{});var n3e=s(Xp);Sne=n(n3e,"STRONG",{});var dHr=s(Sne);euo=r(dHr,"prophetnet"),dHr.forEach(t),ouo=r(n3e," \u2014 "),$I=n(n3e,"A",{href:!0});var cHr=s($I);ruo=r(cHr,"ProphetNetModel"),cHr.forEach(t),tuo=r(n3e," (ProphetNet model)"),n3e.forEach(t),auo=i($),zp=n($,"LI",{});var s3e=s(zp);Rne=n(s3e,"STRONG",{});var fHr=s(Rne);nuo=r(fHr,"qdqbert"),fHr.forEach(t),suo=r(s3e," \u2014 "),kI=n(s3e,"A",{href:!0});var mHr=s(kI);luo=r(mHr,"QDQBertModel"),mHr.forEach(t),iuo=r(s3e," (QDQBert model)"),s3e.forEach(t),duo=i($),Qp=n($,"LI",{});var l3e=s(Qp);Bne=n(l3e,"STRONG",{});var gHr=s(Bne);cuo=r(gHr,"reformer"),gHr.forEach(t),fuo=r(l3e," \u2014 "),SI=n(l3e,"A",{href:!0});var hHr=s(SI);muo=r(hHr,"ReformerModel"),hHr.forEach(t),guo=r(l3e," (Reformer model)"),l3e.forEach(t),huo=i($),Wp=n($,"LI",{});var i3e=s(Wp);Pne=n(i3e,"STRONG",{});var pHr=s(Pne);puo=r(pHr,"regnet"),pHr.forEach(t),uuo=r(i3e," \u2014 "),RI=n(i3e,"A",{href:!0});var uHr=s(RI);_uo=r(uHr,"RegNetModel"),uHr.forEach(t),buo=r(i3e," (RegNet model)"),i3e.forEach(t),vuo=i($),Hp=n($,"LI",{});var d3e=s(Hp);Ine=n(d3e,"STRONG",{});var _Hr=s(Ine);Fuo=r(_Hr,"rembert"),_Hr.forEach(t),Tuo=r(d3e," \u2014 "),BI=n(d3e,"A",{href:!0});var bHr=s(BI);Muo=r(bHr,"RemBertModel"),bHr.forEach(t),Euo=r(d3e," (RemBERT model)"),d3e.forEach(t),Cuo=i($),Up=n($,"LI",{});var c3e=s(Up);qne=n(c3e,"STRONG",{});var vHr=s(qne);wuo=r(vHr,"resnet"),vHr.forEach(t),Auo=r(c3e," \u2014 "),PI=n(c3e,"A",{href:!0});var FHr=s(PI);yuo=r(FHr,"ResNetModel"),FHr.forEach(t),Luo=r(c3e," (ResNet model)"),c3e.forEach(t),xuo=i($),Jp=n($,"LI",{});var f3e=s(Jp);Nne=n(f3e,"STRONG",{});var THr=s(Nne);$uo=r(THr,"retribert"),THr.forEach(t),kuo=r(f3e," \u2014 "),II=n(f3e,"A",{href:!0});var MHr=s(II);Suo=r(MHr,"RetriBertModel"),MHr.forEach(t),Ruo=r(f3e," (RetriBERT model)"),f3e.forEach(t),Buo=i($),Yp=n($,"LI",{});var m3e=s(Yp);jne=n(m3e,"STRONG",{});var EHr=s(jne);Puo=r(EHr,"roberta"),EHr.forEach(t),Iuo=r(m3e," \u2014 "),qI=n(m3e,"A",{href:!0});var CHr=s(qI);quo=r(CHr,"RobertaModel"),CHr.forEach(t),Nuo=r(m3e," (RoBERTa model)"),m3e.forEach(t),juo=i($),Kp=n($,"LI",{});var g3e=s(Kp);Dne=n(g3e,"STRONG",{});var wHr=s(Dne);Duo=r(wHr,"roformer"),wHr.forEach(t),Guo=r(g3e," \u2014 "),NI=n(g3e,"A",{href:!0});var AHr=s(NI);Ouo=r(AHr,"RoFormerModel"),AHr.forEach(t),Vuo=r(g3e," (RoFormer model)"),g3e.forEach(t),Xuo=i($),Zp=n($,"LI",{});var h3e=s(Zp);Gne=n(h3e,"STRONG",{});var yHr=s(Gne);zuo=r(yHr,"segformer"),yHr.forEach(t),Quo=r(h3e," \u2014 "),jI=n(h3e,"A",{href:!0});var LHr=s(jI);Wuo=r(LHr,"SegformerModel"),LHr.forEach(t),Huo=r(h3e," (SegFormer model)"),h3e.forEach(t),Uuo=i($),eu=n($,"LI",{});var p3e=s(eu);One=n(p3e,"STRONG",{});var xHr=s(One);Juo=r(xHr,"sew"),xHr.forEach(t),Yuo=r(p3e," \u2014 "),DI=n(p3e,"A",{href:!0});var $Hr=s(DI);Kuo=r($Hr,"SEWModel"),$Hr.forEach(t),Zuo=r(p3e," (SEW model)"),p3e.forEach(t),e_o=i($),ou=n($,"LI",{});var u3e=s(ou);Vne=n(u3e,"STRONG",{});var kHr=s(Vne);o_o=r(kHr,"sew-d"),kHr.forEach(t),r_o=r(u3e," \u2014 "),GI=n(u3e,"A",{href:!0});var SHr=s(GI);t_o=r(SHr,"SEWDModel"),SHr.forEach(t),a_o=r(u3e," (SEW-D model)"),u3e.forEach(t),n_o=i($),ru=n($,"LI",{});var _3e=s(ru);Xne=n(_3e,"STRONG",{});var RHr=s(Xne);s_o=r(RHr,"speech_to_text"),RHr.forEach(t),l_o=r(_3e," \u2014 "),OI=n(_3e,"A",{href:!0});var BHr=s(OI);i_o=r(BHr,"Speech2TextModel"),BHr.forEach(t),d_o=r(_3e," (Speech2Text model)"),_3e.forEach(t),c_o=i($),tu=n($,"LI",{});var b3e=s(tu);zne=n(b3e,"STRONG",{});var PHr=s(zne);f_o=r(PHr,"splinter"),PHr.forEach(t),m_o=r(b3e," \u2014 "),VI=n(b3e,"A",{href:!0});var IHr=s(VI);g_o=r(IHr,"SplinterModel"),IHr.forEach(t),h_o=r(b3e," (Splinter model)"),b3e.forEach(t),p_o=i($),au=n($,"LI",{});var v3e=s(au);Qne=n(v3e,"STRONG",{});var qHr=s(Qne);u_o=r(qHr,"squeezebert"),qHr.forEach(t),__o=r(v3e," \u2014 "),XI=n(v3e,"A",{href:!0});var NHr=s(XI);b_o=r(NHr,"SqueezeBertModel"),NHr.forEach(t),v_o=r(v3e," (SqueezeBERT model)"),v3e.forEach(t),F_o=i($),nu=n($,"LI",{});var F3e=s(nu);Wne=n(F3e,"STRONG",{});var jHr=s(Wne);T_o=r(jHr,"swin"),jHr.forEach(t),M_o=r(F3e," \u2014 "),zI=n(F3e,"A",{href:!0});var DHr=s(zI);E_o=r(DHr,"SwinModel"),DHr.forEach(t),C_o=r(F3e," (Swin model)"),F3e.forEach(t),w_o=i($),su=n($,"LI",{});var T3e=s(su);Hne=n(T3e,"STRONG",{});var GHr=s(Hne);A_o=r(GHr,"t5"),GHr.forEach(t),y_o=r(T3e," \u2014 "),QI=n(T3e,"A",{href:!0});var OHr=s(QI);L_o=r(OHr,"T5Model"),OHr.forEach(t),x_o=r(T3e," (T5 model)"),T3e.forEach(t),$_o=i($),lu=n($,"LI",{});var M3e=s(lu);Une=n(M3e,"STRONG",{});var VHr=s(Une);k_o=r(VHr,"tapas"),VHr.forEach(t),S_o=r(M3e," \u2014 "),WI=n(M3e,"A",{href:!0});var XHr=s(WI);R_o=r(XHr,"TapasModel"),XHr.forEach(t),B_o=r(M3e," (TAPAS model)"),M3e.forEach(t),P_o=i($),iu=n($,"LI",{});var E3e=s(iu);Jne=n(E3e,"STRONG",{});var zHr=s(Jne);I_o=r(zHr,"transfo-xl"),zHr.forEach(t),q_o=r(E3e," \u2014 "),HI=n(E3e,"A",{href:!0});var QHr=s(HI);N_o=r(QHr,"TransfoXLModel"),QHr.forEach(t),j_o=r(E3e," (Transformer-XL model)"),E3e.forEach(t),D_o=i($),du=n($,"LI",{});var C3e=s(du);Yne=n(C3e,"STRONG",{});var WHr=s(Yne);G_o=r(WHr,"unispeech"),WHr.forEach(t),O_o=r(C3e," \u2014 "),UI=n(C3e,"A",{href:!0});var HHr=s(UI);V_o=r(HHr,"UniSpeechModel"),HHr.forEach(t),X_o=r(C3e," (UniSpeech model)"),C3e.forEach(t),z_o=i($),cu=n($,"LI",{});var w3e=s(cu);Kne=n(w3e,"STRONG",{});var UHr=s(Kne);Q_o=r(UHr,"unispeech-sat"),UHr.forEach(t),W_o=r(w3e," \u2014 "),JI=n(w3e,"A",{href:!0});var JHr=s(JI);H_o=r(JHr,"UniSpeechSatModel"),JHr.forEach(t),U_o=r(w3e," (UniSpeechSat model)"),w3e.forEach(t),J_o=i($),fu=n($,"LI",{});var A3e=s(fu);Zne=n(A3e,"STRONG",{});var YHr=s(Zne);Y_o=r(YHr,"van"),YHr.forEach(t),K_o=r(A3e," \u2014 "),YI=n(A3e,"A",{href:!0});var KHr=s(YI);Z_o=r(KHr,"VanModel"),KHr.forEach(t),e2o=r(A3e," (VAN model)"),A3e.forEach(t),o2o=i($),mu=n($,"LI",{});var y3e=s(mu);ese=n(y3e,"STRONG",{});var ZHr=s(ese);r2o=r(ZHr,"vilt"),ZHr.forEach(t),t2o=r(y3e," \u2014 "),KI=n(y3e,"A",{href:!0});var eUr=s(KI);a2o=r(eUr,"ViltModel"),eUr.forEach(t),n2o=r(y3e," (ViLT model)"),y3e.forEach(t),s2o=i($),gu=n($,"LI",{});var L3e=s(gu);ose=n(L3e,"STRONG",{});var oUr=s(ose);l2o=r(oUr,"vision-text-dual-encoder"),oUr.forEach(t),i2o=r(L3e," \u2014 "),ZI=n(L3e,"A",{href:!0});var rUr=s(ZI);d2o=r(rUr,"VisionTextDualEncoderModel"),rUr.forEach(t),c2o=r(L3e," (VisionTextDualEncoder model)"),L3e.forEach(t),f2o=i($),hu=n($,"LI",{});var x3e=s(hu);rse=n(x3e,"STRONG",{});var tUr=s(rse);m2o=r(tUr,"visual_bert"),tUr.forEach(t),g2o=r(x3e," \u2014 "),eq=n(x3e,"A",{href:!0});var aUr=s(eq);h2o=r(aUr,"VisualBertModel"),aUr.forEach(t),p2o=r(x3e," (VisualBert model)"),x3e.forEach(t),u2o=i($),pu=n($,"LI",{});var $3e=s(pu);tse=n($3e,"STRONG",{});var nUr=s(tse);_2o=r(nUr,"vit"),nUr.forEach(t),b2o=r($3e," \u2014 "),oq=n($3e,"A",{href:!0});var sUr=s(oq);v2o=r(sUr,"ViTModel"),sUr.forEach(t),F2o=r($3e," (ViT model)"),$3e.forEach(t),T2o=i($),uu=n($,"LI",{});var k3e=s(uu);ase=n(k3e,"STRONG",{});var lUr=s(ase);M2o=r(lUr,"vit_mae"),lUr.forEach(t),E2o=r(k3e," \u2014 "),rq=n(k3e,"A",{href:!0});var iUr=s(rq);C2o=r(iUr,"ViTMAEModel"),iUr.forEach(t),w2o=r(k3e," (ViTMAE model)"),k3e.forEach(t),A2o=i($),_u=n($,"LI",{});var S3e=s(_u);nse=n(S3e,"STRONG",{});var dUr=s(nse);y2o=r(dUr,"wav2vec2"),dUr.forEach(t),L2o=r(S3e," \u2014 "),tq=n(S3e,"A",{href:!0});var cUr=s(tq);x2o=r(cUr,"Wav2Vec2Model"),cUr.forEach(t),$2o=r(S3e," (Wav2Vec2 model)"),S3e.forEach(t),k2o=i($),bu=n($,"LI",{});var R3e=s(bu);sse=n(R3e,"STRONG",{});var fUr=s(sse);S2o=r(fUr,"wavlm"),fUr.forEach(t),R2o=r(R3e," \u2014 "),aq=n(R3e,"A",{href:!0});var mUr=s(aq);B2o=r(mUr,"WavLMModel"),mUr.forEach(t),P2o=r(R3e," (WavLM model)"),R3e.forEach(t),I2o=i($),vu=n($,"LI",{});var B3e=s(vu);lse=n(B3e,"STRONG",{});var gUr=s(lse);q2o=r(gUr,"xglm"),gUr.forEach(t),N2o=r(B3e," \u2014 "),nq=n(B3e,"A",{href:!0});var hUr=s(nq);j2o=r(hUr,"XGLMModel"),hUr.forEach(t),D2o=r(B3e," (XGLM model)"),B3e.forEach(t),G2o=i($),Fu=n($,"LI",{});var P3e=s(Fu);ise=n(P3e,"STRONG",{});var pUr=s(ise);O2o=r(pUr,"xlm"),pUr.forEach(t),V2o=r(P3e," \u2014 "),sq=n(P3e,"A",{href:!0});var uUr=s(sq);X2o=r(uUr,"XLMModel"),uUr.forEach(t),z2o=r(P3e," (XLM model)"),P3e.forEach(t),Q2o=i($),Tu=n($,"LI",{});var I3e=s(Tu);dse=n(I3e,"STRONG",{});var _Ur=s(dse);W2o=r(_Ur,"xlm-prophetnet"),_Ur.forEach(t),H2o=r(I3e," \u2014 "),lq=n(I3e,"A",{href:!0});var bUr=s(lq);U2o=r(bUr,"XLMProphetNetModel"),bUr.forEach(t),J2o=r(I3e," (XLMProphetNet model)"),I3e.forEach(t),Y2o=i($),Mu=n($,"LI",{});var q3e=s(Mu);cse=n(q3e,"STRONG",{});var vUr=s(cse);K2o=r(vUr,"xlm-roberta"),vUr.forEach(t),Z2o=r(q3e," \u2014 "),iq=n(q3e,"A",{href:!0});var FUr=s(iq);e1o=r(FUr,"XLMRobertaModel"),FUr.forEach(t),o1o=r(q3e," (XLM-RoBERTa model)"),q3e.forEach(t),r1o=i($),Eu=n($,"LI",{});var N3e=s(Eu);fse=n(N3e,"STRONG",{});var TUr=s(fse);t1o=r(TUr,"xlm-roberta-xl"),TUr.forEach(t),a1o=r(N3e," \u2014 "),dq=n(N3e,"A",{href:!0});var MUr=s(dq);n1o=r(MUr,"XLMRobertaXLModel"),MUr.forEach(t),s1o=r(N3e," (XLM-RoBERTa-XL model)"),N3e.forEach(t),l1o=i($),Cu=n($,"LI",{});var j3e=s(Cu);mse=n(j3e,"STRONG",{});var EUr=s(mse);i1o=r(EUr,"xlnet"),EUr.forEach(t),d1o=r(j3e," \u2014 "),cq=n(j3e,"A",{href:!0});var CUr=s(cq);c1o=r(CUr,"XLNetModel"),CUr.forEach(t),f1o=r(j3e," (XLNet model)"),j3e.forEach(t),m1o=i($),wu=n($,"LI",{});var D3e=s(wu);gse=n(D3e,"STRONG",{});var wUr=s(gse);g1o=r(wUr,"yolos"),wUr.forEach(t),h1o=r(D3e," \u2014 "),fq=n(D3e,"A",{href:!0});var AUr=s(fq);p1o=r(AUr,"YolosModel"),AUr.forEach(t),u1o=r(D3e," (YOLOS model)"),D3e.forEach(t),_1o=i($),Au=n($,"LI",{});var G3e=s(Au);hse=n(G3e,"STRONG",{});var yUr=s(hse);b1o=r(yUr,"yoso"),yUr.forEach(t),v1o=r(G3e," \u2014 "),mq=n(G3e,"A",{href:!0});var LUr=s(mq);F1o=r(LUr,"YosoModel"),LUr.forEach(t),T1o=r(G3e," (YOSO model)"),G3e.forEach(t),$.forEach(t),M1o=i(Zt),yu=n(Zt,"P",{});var O3e=s(yu);E1o=r(O3e,"The model is set in evaluation mode by default using "),pse=n(O3e,"CODE",{});var xUr=s(pse);C1o=r(xUr,"model.eval()"),xUr.forEach(t),w1o=r(O3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=n(O3e,"CODE",{});var $Ur=s(use);A1o=r($Ur,"model.train()"),$Ur.forEach(t),O3e.forEach(t),y1o=i(Zt),T(Lu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),dPe=i(f),Ci=n(f,"H2",{class:!0});var gqe=s(Ci);xu=n(gqe,"A",{id:!0,class:!0,href:!0});var kUr=s(xu);_se=n(kUr,"SPAN",{});var SUr=s(_se);T(pA.$$.fragment,SUr),SUr.forEach(t),kUr.forEach(t),L1o=i(gqe),bse=n(gqe,"SPAN",{});var RUr=s(bse);x1o=r(RUr,"AutoModelForPreTraining"),RUr.forEach(t),gqe.forEach(t),cPe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(uA.$$.fragment,Ds),$1o=i(Ds),wi=n(Ds,"P",{});var GY=s(wi);k1o=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gq=n(GY,"A",{href:!0});var BUr=s(gq);S1o=r(BUr,"from_pretrained()"),BUr.forEach(t),R1o=r(GY," class method or the "),hq=n(GY,"A",{href:!0});var PUr=s(hq);B1o=r(PUr,"from_config()"),PUr.forEach(t),P1o=r(GY,` class
method.`),GY.forEach(t),I1o=i(Ds),_A=n(Ds,"P",{});var hqe=s(_A);q1o=r(hqe,"This class cannot be instantiated directly using "),vse=n(hqe,"CODE",{});var IUr=s(vse);N1o=r(IUr,"__init__()"),IUr.forEach(t),j1o=r(hqe," (throws an error)."),hqe.forEach(t),D1o=i(Ds),rt=n(Ds,"DIV",{class:!0});var VC=s(rt);T(bA.$$.fragment,VC),G1o=i(VC),Fse=n(VC,"P",{});var qUr=s(Fse);O1o=r(qUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qUr.forEach(t),V1o=i(VC),Ai=n(VC,"P",{});var OY=s(Ai);X1o=r(OY,`Note:
Loading a model from its configuration file does `),Tse=n(OY,"STRONG",{});var NUr=s(Tse);z1o=r(NUr,"not"),NUr.forEach(t),Q1o=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pq=n(OY,"A",{href:!0});var jUr=s(pq);W1o=r(jUr,"from_pretrained()"),jUr.forEach(t),H1o=r(OY," to load the model weights."),OY.forEach(t),U1o=i(VC),T($u.$$.fragment,VC),VC.forEach(t),J1o=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(vA.$$.fragment,ea),Y1o=i(ea),Mse=n(ea,"P",{});var DUr=s(Mse);K1o=r(DUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DUr.forEach(t),Z1o=i(ea),ya=n(ea,"P",{});var XC=s(ya);ebo=r(XC,"The model class to instantiate is selected based on the "),Ese=n(XC,"CODE",{});var GUr=s(Ese);obo=r(GUr,"model_type"),GUr.forEach(t),rbo=r(XC,` property of the config object (either
passed as an argument or loaded from `),Cse=n(XC,"CODE",{});var OUr=s(Cse);tbo=r(OUr,"pretrained_model_name_or_path"),OUr.forEach(t),abo=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wse=n(XC,"CODE",{});var VUr=s(wse);nbo=r(VUr,"pretrained_model_name_or_path"),VUr.forEach(t),sbo=r(XC,":"),XC.forEach(t),lbo=i(ea),G=n(ea,"UL",{});var V=s(G);ku=n(V,"LI",{});var V3e=s(ku);Ase=n(V3e,"STRONG",{});var XUr=s(Ase);ibo=r(XUr,"albert"),XUr.forEach(t),dbo=r(V3e," \u2014 "),uq=n(V3e,"A",{href:!0});var zUr=s(uq);cbo=r(zUr,"AlbertForPreTraining"),zUr.forEach(t),fbo=r(V3e," (ALBERT model)"),V3e.forEach(t),mbo=i(V),Su=n(V,"LI",{});var X3e=s(Su);yse=n(X3e,"STRONG",{});var QUr=s(yse);gbo=r(QUr,"bart"),QUr.forEach(t),hbo=r(X3e," \u2014 "),_q=n(X3e,"A",{href:!0});var WUr=s(_q);pbo=r(WUr,"BartForConditionalGeneration"),WUr.forEach(t),ubo=r(X3e," (BART model)"),X3e.forEach(t),_bo=i(V),Ru=n(V,"LI",{});var z3e=s(Ru);Lse=n(z3e,"STRONG",{});var HUr=s(Lse);bbo=r(HUr,"bert"),HUr.forEach(t),vbo=r(z3e," \u2014 "),bq=n(z3e,"A",{href:!0});var UUr=s(bq);Fbo=r(UUr,"BertForPreTraining"),UUr.forEach(t),Tbo=r(z3e," (BERT model)"),z3e.forEach(t),Mbo=i(V),Bu=n(V,"LI",{});var Q3e=s(Bu);xse=n(Q3e,"STRONG",{});var JUr=s(xse);Ebo=r(JUr,"big_bird"),JUr.forEach(t),Cbo=r(Q3e," \u2014 "),vq=n(Q3e,"A",{href:!0});var YUr=s(vq);wbo=r(YUr,"BigBirdForPreTraining"),YUr.forEach(t),Abo=r(Q3e," (BigBird model)"),Q3e.forEach(t),ybo=i(V),Pu=n(V,"LI",{});var W3e=s(Pu);$se=n(W3e,"STRONG",{});var KUr=s($se);Lbo=r(KUr,"camembert"),KUr.forEach(t),xbo=r(W3e," \u2014 "),Fq=n(W3e,"A",{href:!0});var ZUr=s(Fq);$bo=r(ZUr,"CamembertForMaskedLM"),ZUr.forEach(t),kbo=r(W3e," (CamemBERT model)"),W3e.forEach(t),Sbo=i(V),Iu=n(V,"LI",{});var H3e=s(Iu);kse=n(H3e,"STRONG",{});var eJr=s(kse);Rbo=r(eJr,"ctrl"),eJr.forEach(t),Bbo=r(H3e," \u2014 "),Tq=n(H3e,"A",{href:!0});var oJr=s(Tq);Pbo=r(oJr,"CTRLLMHeadModel"),oJr.forEach(t),Ibo=r(H3e," (CTRL model)"),H3e.forEach(t),qbo=i(V),qu=n(V,"LI",{});var U3e=s(qu);Sse=n(U3e,"STRONG",{});var rJr=s(Sse);Nbo=r(rJr,"data2vec-text"),rJr.forEach(t),jbo=r(U3e," \u2014 "),Mq=n(U3e,"A",{href:!0});var tJr=s(Mq);Dbo=r(tJr,"Data2VecTextForMaskedLM"),tJr.forEach(t),Gbo=r(U3e," (Data2VecText model)"),U3e.forEach(t),Obo=i(V),Nu=n(V,"LI",{});var J3e=s(Nu);Rse=n(J3e,"STRONG",{});var aJr=s(Rse);Vbo=r(aJr,"deberta"),aJr.forEach(t),Xbo=r(J3e," \u2014 "),Eq=n(J3e,"A",{href:!0});var nJr=s(Eq);zbo=r(nJr,"DebertaForMaskedLM"),nJr.forEach(t),Qbo=r(J3e," (DeBERTa model)"),J3e.forEach(t),Wbo=i(V),ju=n(V,"LI",{});var Y3e=s(ju);Bse=n(Y3e,"STRONG",{});var sJr=s(Bse);Hbo=r(sJr,"deberta-v2"),sJr.forEach(t),Ubo=r(Y3e," \u2014 "),Cq=n(Y3e,"A",{href:!0});var lJr=s(Cq);Jbo=r(lJr,"DebertaV2ForMaskedLM"),lJr.forEach(t),Ybo=r(Y3e," (DeBERTa-v2 model)"),Y3e.forEach(t),Kbo=i(V),Du=n(V,"LI",{});var K3e=s(Du);Pse=n(K3e,"STRONG",{});var iJr=s(Pse);Zbo=r(iJr,"distilbert"),iJr.forEach(t),evo=r(K3e," \u2014 "),wq=n(K3e,"A",{href:!0});var dJr=s(wq);ovo=r(dJr,"DistilBertForMaskedLM"),dJr.forEach(t),rvo=r(K3e," (DistilBERT model)"),K3e.forEach(t),tvo=i(V),Gu=n(V,"LI",{});var Z3e=s(Gu);Ise=n(Z3e,"STRONG",{});var cJr=s(Ise);avo=r(cJr,"electra"),cJr.forEach(t),nvo=r(Z3e," \u2014 "),Aq=n(Z3e,"A",{href:!0});var fJr=s(Aq);svo=r(fJr,"ElectraForPreTraining"),fJr.forEach(t),lvo=r(Z3e," (ELECTRA model)"),Z3e.forEach(t),ivo=i(V),Ou=n(V,"LI",{});var ewe=s(Ou);qse=n(ewe,"STRONG",{});var mJr=s(qse);dvo=r(mJr,"flaubert"),mJr.forEach(t),cvo=r(ewe," \u2014 "),yq=n(ewe,"A",{href:!0});var gJr=s(yq);fvo=r(gJr,"FlaubertWithLMHeadModel"),gJr.forEach(t),mvo=r(ewe," (FlauBERT model)"),ewe.forEach(t),gvo=i(V),Vu=n(V,"LI",{});var owe=s(Vu);Nse=n(owe,"STRONG",{});var hJr=s(Nse);hvo=r(hJr,"fnet"),hJr.forEach(t),pvo=r(owe," \u2014 "),Lq=n(owe,"A",{href:!0});var pJr=s(Lq);uvo=r(pJr,"FNetForPreTraining"),pJr.forEach(t),_vo=r(owe," (FNet model)"),owe.forEach(t),bvo=i(V),Xu=n(V,"LI",{});var rwe=s(Xu);jse=n(rwe,"STRONG",{});var uJr=s(jse);vvo=r(uJr,"fsmt"),uJr.forEach(t),Fvo=r(rwe," \u2014 "),xq=n(rwe,"A",{href:!0});var _Jr=s(xq);Tvo=r(_Jr,"FSMTForConditionalGeneration"),_Jr.forEach(t),Mvo=r(rwe," (FairSeq Machine-Translation model)"),rwe.forEach(t),Evo=i(V),zu=n(V,"LI",{});var twe=s(zu);Dse=n(twe,"STRONG",{});var bJr=s(Dse);Cvo=r(bJr,"funnel"),bJr.forEach(t),wvo=r(twe," \u2014 "),$q=n(twe,"A",{href:!0});var vJr=s($q);Avo=r(vJr,"FunnelForPreTraining"),vJr.forEach(t),yvo=r(twe," (Funnel Transformer model)"),twe.forEach(t),Lvo=i(V),Qu=n(V,"LI",{});var awe=s(Qu);Gse=n(awe,"STRONG",{});var FJr=s(Gse);xvo=r(FJr,"gpt2"),FJr.forEach(t),$vo=r(awe," \u2014 "),kq=n(awe,"A",{href:!0});var TJr=s(kq);kvo=r(TJr,"GPT2LMHeadModel"),TJr.forEach(t),Svo=r(awe," (OpenAI GPT-2 model)"),awe.forEach(t),Rvo=i(V),Wu=n(V,"LI",{});var nwe=s(Wu);Ose=n(nwe,"STRONG",{});var MJr=s(Ose);Bvo=r(MJr,"ibert"),MJr.forEach(t),Pvo=r(nwe," \u2014 "),Sq=n(nwe,"A",{href:!0});var EJr=s(Sq);Ivo=r(EJr,"IBertForMaskedLM"),EJr.forEach(t),qvo=r(nwe," (I-BERT model)"),nwe.forEach(t),Nvo=i(V),Hu=n(V,"LI",{});var swe=s(Hu);Vse=n(swe,"STRONG",{});var CJr=s(Vse);jvo=r(CJr,"layoutlm"),CJr.forEach(t),Dvo=r(swe," \u2014 "),Rq=n(swe,"A",{href:!0});var wJr=s(Rq);Gvo=r(wJr,"LayoutLMForMaskedLM"),wJr.forEach(t),Ovo=r(swe," (LayoutLM model)"),swe.forEach(t),Vvo=i(V),Uu=n(V,"LI",{});var lwe=s(Uu);Xse=n(lwe,"STRONG",{});var AJr=s(Xse);Xvo=r(AJr,"longformer"),AJr.forEach(t),zvo=r(lwe," \u2014 "),Bq=n(lwe,"A",{href:!0});var yJr=s(Bq);Qvo=r(yJr,"LongformerForMaskedLM"),yJr.forEach(t),Wvo=r(lwe," (Longformer model)"),lwe.forEach(t),Hvo=i(V),Ju=n(V,"LI",{});var iwe=s(Ju);zse=n(iwe,"STRONG",{});var LJr=s(zse);Uvo=r(LJr,"lxmert"),LJr.forEach(t),Jvo=r(iwe," \u2014 "),Pq=n(iwe,"A",{href:!0});var xJr=s(Pq);Yvo=r(xJr,"LxmertForPreTraining"),xJr.forEach(t),Kvo=r(iwe," (LXMERT model)"),iwe.forEach(t),Zvo=i(V),Yu=n(V,"LI",{});var dwe=s(Yu);Qse=n(dwe,"STRONG",{});var $Jr=s(Qse);eFo=r($Jr,"megatron-bert"),$Jr.forEach(t),oFo=r(dwe," \u2014 "),Iq=n(dwe,"A",{href:!0});var kJr=s(Iq);rFo=r(kJr,"MegatronBertForPreTraining"),kJr.forEach(t),tFo=r(dwe," (MegatronBert model)"),dwe.forEach(t),aFo=i(V),Ku=n(V,"LI",{});var cwe=s(Ku);Wse=n(cwe,"STRONG",{});var SJr=s(Wse);nFo=r(SJr,"mobilebert"),SJr.forEach(t),sFo=r(cwe," \u2014 "),qq=n(cwe,"A",{href:!0});var RJr=s(qq);lFo=r(RJr,"MobileBertForPreTraining"),RJr.forEach(t),iFo=r(cwe," (MobileBERT model)"),cwe.forEach(t),dFo=i(V),Zu=n(V,"LI",{});var fwe=s(Zu);Hse=n(fwe,"STRONG",{});var BJr=s(Hse);cFo=r(BJr,"mpnet"),BJr.forEach(t),fFo=r(fwe," \u2014 "),Nq=n(fwe,"A",{href:!0});var PJr=s(Nq);mFo=r(PJr,"MPNetForMaskedLM"),PJr.forEach(t),gFo=r(fwe," (MPNet model)"),fwe.forEach(t),hFo=i(V),e_=n(V,"LI",{});var mwe=s(e_);Use=n(mwe,"STRONG",{});var IJr=s(Use);pFo=r(IJr,"openai-gpt"),IJr.forEach(t),uFo=r(mwe," \u2014 "),jq=n(mwe,"A",{href:!0});var qJr=s(jq);_Fo=r(qJr,"OpenAIGPTLMHeadModel"),qJr.forEach(t),bFo=r(mwe," (OpenAI GPT model)"),mwe.forEach(t),vFo=i(V),o_=n(V,"LI",{});var gwe=s(o_);Jse=n(gwe,"STRONG",{});var NJr=s(Jse);FFo=r(NJr,"retribert"),NJr.forEach(t),TFo=r(gwe," \u2014 "),Dq=n(gwe,"A",{href:!0});var jJr=s(Dq);MFo=r(jJr,"RetriBertModel"),jJr.forEach(t),EFo=r(gwe," (RetriBERT model)"),gwe.forEach(t),CFo=i(V),r_=n(V,"LI",{});var hwe=s(r_);Yse=n(hwe,"STRONG",{});var DJr=s(Yse);wFo=r(DJr,"roberta"),DJr.forEach(t),AFo=r(hwe," \u2014 "),Gq=n(hwe,"A",{href:!0});var GJr=s(Gq);yFo=r(GJr,"RobertaForMaskedLM"),GJr.forEach(t),LFo=r(hwe," (RoBERTa model)"),hwe.forEach(t),xFo=i(V),t_=n(V,"LI",{});var pwe=s(t_);Kse=n(pwe,"STRONG",{});var OJr=s(Kse);$Fo=r(OJr,"squeezebert"),OJr.forEach(t),kFo=r(pwe," \u2014 "),Oq=n(pwe,"A",{href:!0});var VJr=s(Oq);SFo=r(VJr,"SqueezeBertForMaskedLM"),VJr.forEach(t),RFo=r(pwe," (SqueezeBERT model)"),pwe.forEach(t),BFo=i(V),a_=n(V,"LI",{});var uwe=s(a_);Zse=n(uwe,"STRONG",{});var XJr=s(Zse);PFo=r(XJr,"t5"),XJr.forEach(t),IFo=r(uwe," \u2014 "),Vq=n(uwe,"A",{href:!0});var zJr=s(Vq);qFo=r(zJr,"T5ForConditionalGeneration"),zJr.forEach(t),NFo=r(uwe," (T5 model)"),uwe.forEach(t),jFo=i(V),n_=n(V,"LI",{});var _we=s(n_);ele=n(_we,"STRONG",{});var QJr=s(ele);DFo=r(QJr,"tapas"),QJr.forEach(t),GFo=r(_we," \u2014 "),Xq=n(_we,"A",{href:!0});var WJr=s(Xq);OFo=r(WJr,"TapasForMaskedLM"),WJr.forEach(t),VFo=r(_we," (TAPAS model)"),_we.forEach(t),XFo=i(V),s_=n(V,"LI",{});var bwe=s(s_);ole=n(bwe,"STRONG",{});var HJr=s(ole);zFo=r(HJr,"transfo-xl"),HJr.forEach(t),QFo=r(bwe," \u2014 "),zq=n(bwe,"A",{href:!0});var UJr=s(zq);WFo=r(UJr,"TransfoXLLMHeadModel"),UJr.forEach(t),HFo=r(bwe," (Transformer-XL model)"),bwe.forEach(t),UFo=i(V),l_=n(V,"LI",{});var vwe=s(l_);rle=n(vwe,"STRONG",{});var JJr=s(rle);JFo=r(JJr,"unispeech"),JJr.forEach(t),YFo=r(vwe," \u2014 "),Qq=n(vwe,"A",{href:!0});var YJr=s(Qq);KFo=r(YJr,"UniSpeechForPreTraining"),YJr.forEach(t),ZFo=r(vwe," (UniSpeech model)"),vwe.forEach(t),e0o=i(V),i_=n(V,"LI",{});var Fwe=s(i_);tle=n(Fwe,"STRONG",{});var KJr=s(tle);o0o=r(KJr,"unispeech-sat"),KJr.forEach(t),r0o=r(Fwe," \u2014 "),Wq=n(Fwe,"A",{href:!0});var ZJr=s(Wq);t0o=r(ZJr,"UniSpeechSatForPreTraining"),ZJr.forEach(t),a0o=r(Fwe," (UniSpeechSat model)"),Fwe.forEach(t),n0o=i(V),d_=n(V,"LI",{});var Twe=s(d_);ale=n(Twe,"STRONG",{});var eYr=s(ale);s0o=r(eYr,"visual_bert"),eYr.forEach(t),l0o=r(Twe," \u2014 "),Hq=n(Twe,"A",{href:!0});var oYr=s(Hq);i0o=r(oYr,"VisualBertForPreTraining"),oYr.forEach(t),d0o=r(Twe," (VisualBert model)"),Twe.forEach(t),c0o=i(V),c_=n(V,"LI",{});var Mwe=s(c_);nle=n(Mwe,"STRONG",{});var rYr=s(nle);f0o=r(rYr,"vit_mae"),rYr.forEach(t),m0o=r(Mwe," \u2014 "),Uq=n(Mwe,"A",{href:!0});var tYr=s(Uq);g0o=r(tYr,"ViTMAEForPreTraining"),tYr.forEach(t),h0o=r(Mwe," (ViTMAE model)"),Mwe.forEach(t),p0o=i(V),f_=n(V,"LI",{});var Ewe=s(f_);sle=n(Ewe,"STRONG",{});var aYr=s(sle);u0o=r(aYr,"wav2vec2"),aYr.forEach(t),_0o=r(Ewe," \u2014 "),Jq=n(Ewe,"A",{href:!0});var nYr=s(Jq);b0o=r(nYr,"Wav2Vec2ForPreTraining"),nYr.forEach(t),v0o=r(Ewe," (Wav2Vec2 model)"),Ewe.forEach(t),F0o=i(V),m_=n(V,"LI",{});var Cwe=s(m_);lle=n(Cwe,"STRONG",{});var sYr=s(lle);T0o=r(sYr,"xlm"),sYr.forEach(t),M0o=r(Cwe," \u2014 "),Yq=n(Cwe,"A",{href:!0});var lYr=s(Yq);E0o=r(lYr,"XLMWithLMHeadModel"),lYr.forEach(t),C0o=r(Cwe," (XLM model)"),Cwe.forEach(t),w0o=i(V),g_=n(V,"LI",{});var wwe=s(g_);ile=n(wwe,"STRONG",{});var iYr=s(ile);A0o=r(iYr,"xlm-roberta"),iYr.forEach(t),y0o=r(wwe," \u2014 "),Kq=n(wwe,"A",{href:!0});var dYr=s(Kq);L0o=r(dYr,"XLMRobertaForMaskedLM"),dYr.forEach(t),x0o=r(wwe," (XLM-RoBERTa model)"),wwe.forEach(t),$0o=i(V),h_=n(V,"LI",{});var Awe=s(h_);dle=n(Awe,"STRONG",{});var cYr=s(dle);k0o=r(cYr,"xlm-roberta-xl"),cYr.forEach(t),S0o=r(Awe," \u2014 "),Zq=n(Awe,"A",{href:!0});var fYr=s(Zq);R0o=r(fYr,"XLMRobertaXLForMaskedLM"),fYr.forEach(t),B0o=r(Awe," (XLM-RoBERTa-XL model)"),Awe.forEach(t),P0o=i(V),p_=n(V,"LI",{});var ywe=s(p_);cle=n(ywe,"STRONG",{});var mYr=s(cle);I0o=r(mYr,"xlnet"),mYr.forEach(t),q0o=r(ywe," \u2014 "),eN=n(ywe,"A",{href:!0});var gYr=s(eN);N0o=r(gYr,"XLNetLMHeadModel"),gYr.forEach(t),j0o=r(ywe," (XLNet model)"),ywe.forEach(t),V.forEach(t),D0o=i(ea),u_=n(ea,"P",{});var Lwe=s(u_);G0o=r(Lwe,"The model is set in evaluation mode by default using "),fle=n(Lwe,"CODE",{});var hYr=s(fle);O0o=r(hYr,"model.eval()"),hYr.forEach(t),V0o=r(Lwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=n(Lwe,"CODE",{});var pYr=s(mle);X0o=r(pYr,"model.train()"),pYr.forEach(t),Lwe.forEach(t),z0o=i(ea),T(__.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),fPe=i(f),yi=n(f,"H2",{class:!0});var pqe=s(yi);b_=n(pqe,"A",{id:!0,class:!0,href:!0});var uYr=s(b_);gle=n(uYr,"SPAN",{});var _Yr=s(gle);T(FA.$$.fragment,_Yr),_Yr.forEach(t),uYr.forEach(t),Q0o=i(pqe),hle=n(pqe,"SPAN",{});var bYr=s(hle);W0o=r(bYr,"AutoModelForCausalLM"),bYr.forEach(t),pqe.forEach(t),mPe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(TA.$$.fragment,Gs),H0o=i(Gs),Li=n(Gs,"P",{});var VY=s(Li);U0o=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oN=n(VY,"A",{href:!0});var vYr=s(oN);J0o=r(vYr,"from_pretrained()"),vYr.forEach(t),Y0o=r(VY," class method or the "),rN=n(VY,"A",{href:!0});var FYr=s(rN);K0o=r(FYr,"from_config()"),FYr.forEach(t),Z0o=r(VY,` class
method.`),VY.forEach(t),eTo=i(Gs),MA=n(Gs,"P",{});var uqe=s(MA);oTo=r(uqe,"This class cannot be instantiated directly using "),ple=n(uqe,"CODE",{});var TYr=s(ple);rTo=r(TYr,"__init__()"),TYr.forEach(t),tTo=r(uqe," (throws an error)."),uqe.forEach(t),aTo=i(Gs),tt=n(Gs,"DIV",{class:!0});var zC=s(tt);T(EA.$$.fragment,zC),nTo=i(zC),ule=n(zC,"P",{});var MYr=s(ule);sTo=r(MYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MYr.forEach(t),lTo=i(zC),xi=n(zC,"P",{});var XY=s(xi);iTo=r(XY,`Note:
Loading a model from its configuration file does `),_le=n(XY,"STRONG",{});var EYr=s(_le);dTo=r(EYr,"not"),EYr.forEach(t),cTo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tN=n(XY,"A",{href:!0});var CYr=s(tN);fTo=r(CYr,"from_pretrained()"),CYr.forEach(t),mTo=r(XY," to load the model weights."),XY.forEach(t),gTo=i(zC),T(v_.$$.fragment,zC),zC.forEach(t),hTo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(CA.$$.fragment,oa),pTo=i(oa),ble=n(oa,"P",{});var wYr=s(ble);uTo=r(wYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wYr.forEach(t),_To=i(oa),La=n(oa,"P",{});var QC=s(La);bTo=r(QC,"The model class to instantiate is selected based on the "),vle=n(QC,"CODE",{});var AYr=s(vle);vTo=r(AYr,"model_type"),AYr.forEach(t),FTo=r(QC,` property of the config object (either
passed as an argument or loaded from `),Fle=n(QC,"CODE",{});var yYr=s(Fle);TTo=r(yYr,"pretrained_model_name_or_path"),yYr.forEach(t),MTo=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=n(QC,"CODE",{});var LYr=s(Tle);ETo=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),CTo=r(QC,":"),QC.forEach(t),wTo=i(oa),z=n(oa,"UL",{});var W=s(z);F_=n(W,"LI",{});var xwe=s(F_);Mle=n(xwe,"STRONG",{});var xYr=s(Mle);ATo=r(xYr,"bart"),xYr.forEach(t),yTo=r(xwe," \u2014 "),aN=n(xwe,"A",{href:!0});var $Yr=s(aN);LTo=r($Yr,"BartForCausalLM"),$Yr.forEach(t),xTo=r(xwe," (BART model)"),xwe.forEach(t),$To=i(W),T_=n(W,"LI",{});var $we=s(T_);Ele=n($we,"STRONG",{});var kYr=s(Ele);kTo=r(kYr,"bert"),kYr.forEach(t),STo=r($we," \u2014 "),nN=n($we,"A",{href:!0});var SYr=s(nN);RTo=r(SYr,"BertLMHeadModel"),SYr.forEach(t),BTo=r($we," (BERT model)"),$we.forEach(t),PTo=i(W),M_=n(W,"LI",{});var kwe=s(M_);Cle=n(kwe,"STRONG",{});var RYr=s(Cle);ITo=r(RYr,"bert-generation"),RYr.forEach(t),qTo=r(kwe," \u2014 "),sN=n(kwe,"A",{href:!0});var BYr=s(sN);NTo=r(BYr,"BertGenerationDecoder"),BYr.forEach(t),jTo=r(kwe," (Bert Generation model)"),kwe.forEach(t),DTo=i(W),E_=n(W,"LI",{});var Swe=s(E_);wle=n(Swe,"STRONG",{});var PYr=s(wle);GTo=r(PYr,"big_bird"),PYr.forEach(t),OTo=r(Swe," \u2014 "),lN=n(Swe,"A",{href:!0});var IYr=s(lN);VTo=r(IYr,"BigBirdForCausalLM"),IYr.forEach(t),XTo=r(Swe," (BigBird model)"),Swe.forEach(t),zTo=i(W),C_=n(W,"LI",{});var Rwe=s(C_);Ale=n(Rwe,"STRONG",{});var qYr=s(Ale);QTo=r(qYr,"bigbird_pegasus"),qYr.forEach(t),WTo=r(Rwe," \u2014 "),iN=n(Rwe,"A",{href:!0});var NYr=s(iN);HTo=r(NYr,"BigBirdPegasusForCausalLM"),NYr.forEach(t),UTo=r(Rwe," (BigBirdPegasus model)"),Rwe.forEach(t),JTo=i(W),w_=n(W,"LI",{});var Bwe=s(w_);yle=n(Bwe,"STRONG",{});var jYr=s(yle);YTo=r(jYr,"blenderbot"),jYr.forEach(t),KTo=r(Bwe," \u2014 "),dN=n(Bwe,"A",{href:!0});var DYr=s(dN);ZTo=r(DYr,"BlenderbotForCausalLM"),DYr.forEach(t),e7o=r(Bwe," (Blenderbot model)"),Bwe.forEach(t),o7o=i(W),A_=n(W,"LI",{});var Pwe=s(A_);Lle=n(Pwe,"STRONG",{});var GYr=s(Lle);r7o=r(GYr,"blenderbot-small"),GYr.forEach(t),t7o=r(Pwe," \u2014 "),cN=n(Pwe,"A",{href:!0});var OYr=s(cN);a7o=r(OYr,"BlenderbotSmallForCausalLM"),OYr.forEach(t),n7o=r(Pwe," (BlenderbotSmall model)"),Pwe.forEach(t),s7o=i(W),y_=n(W,"LI",{});var Iwe=s(y_);xle=n(Iwe,"STRONG",{});var VYr=s(xle);l7o=r(VYr,"camembert"),VYr.forEach(t),i7o=r(Iwe," \u2014 "),fN=n(Iwe,"A",{href:!0});var XYr=s(fN);d7o=r(XYr,"CamembertForCausalLM"),XYr.forEach(t),c7o=r(Iwe," (CamemBERT model)"),Iwe.forEach(t),f7o=i(W),L_=n(W,"LI",{});var qwe=s(L_);$le=n(qwe,"STRONG",{});var zYr=s($le);m7o=r(zYr,"ctrl"),zYr.forEach(t),g7o=r(qwe," \u2014 "),mN=n(qwe,"A",{href:!0});var QYr=s(mN);h7o=r(QYr,"CTRLLMHeadModel"),QYr.forEach(t),p7o=r(qwe," (CTRL model)"),qwe.forEach(t),u7o=i(W),x_=n(W,"LI",{});var Nwe=s(x_);kle=n(Nwe,"STRONG",{});var WYr=s(kle);_7o=r(WYr,"data2vec-text"),WYr.forEach(t),b7o=r(Nwe," \u2014 "),gN=n(Nwe,"A",{href:!0});var HYr=s(gN);v7o=r(HYr,"Data2VecTextForCausalLM"),HYr.forEach(t),F7o=r(Nwe," (Data2VecText model)"),Nwe.forEach(t),T7o=i(W),$_=n(W,"LI",{});var jwe=s($_);Sle=n(jwe,"STRONG",{});var UYr=s(Sle);M7o=r(UYr,"electra"),UYr.forEach(t),E7o=r(jwe," \u2014 "),hN=n(jwe,"A",{href:!0});var JYr=s(hN);C7o=r(JYr,"ElectraForCausalLM"),JYr.forEach(t),w7o=r(jwe," (ELECTRA model)"),jwe.forEach(t),A7o=i(W),k_=n(W,"LI",{});var Dwe=s(k_);Rle=n(Dwe,"STRONG",{});var YYr=s(Rle);y7o=r(YYr,"gpt2"),YYr.forEach(t),L7o=r(Dwe," \u2014 "),pN=n(Dwe,"A",{href:!0});var KYr=s(pN);x7o=r(KYr,"GPT2LMHeadModel"),KYr.forEach(t),$7o=r(Dwe," (OpenAI GPT-2 model)"),Dwe.forEach(t),k7o=i(W),S_=n(W,"LI",{});var Gwe=s(S_);Ble=n(Gwe,"STRONG",{});var ZYr=s(Ble);S7o=r(ZYr,"gpt_neo"),ZYr.forEach(t),R7o=r(Gwe," \u2014 "),uN=n(Gwe,"A",{href:!0});var eKr=s(uN);B7o=r(eKr,"GPTNeoForCausalLM"),eKr.forEach(t),P7o=r(Gwe," (GPT Neo model)"),Gwe.forEach(t),I7o=i(W),R_=n(W,"LI",{});var Owe=s(R_);Ple=n(Owe,"STRONG",{});var oKr=s(Ple);q7o=r(oKr,"gptj"),oKr.forEach(t),N7o=r(Owe," \u2014 "),_N=n(Owe,"A",{href:!0});var rKr=s(_N);j7o=r(rKr,"GPTJForCausalLM"),rKr.forEach(t),D7o=r(Owe," (GPT-J model)"),Owe.forEach(t),G7o=i(W),B_=n(W,"LI",{});var Vwe=s(B_);Ile=n(Vwe,"STRONG",{});var tKr=s(Ile);O7o=r(tKr,"marian"),tKr.forEach(t),V7o=r(Vwe," \u2014 "),bN=n(Vwe,"A",{href:!0});var aKr=s(bN);X7o=r(aKr,"MarianForCausalLM"),aKr.forEach(t),z7o=r(Vwe," (Marian model)"),Vwe.forEach(t),Q7o=i(W),P_=n(W,"LI",{});var Xwe=s(P_);qle=n(Xwe,"STRONG",{});var nKr=s(qle);W7o=r(nKr,"mbart"),nKr.forEach(t),H7o=r(Xwe," \u2014 "),vN=n(Xwe,"A",{href:!0});var sKr=s(vN);U7o=r(sKr,"MBartForCausalLM"),sKr.forEach(t),J7o=r(Xwe," (mBART model)"),Xwe.forEach(t),Y7o=i(W),I_=n(W,"LI",{});var zwe=s(I_);Nle=n(zwe,"STRONG",{});var lKr=s(Nle);K7o=r(lKr,"megatron-bert"),lKr.forEach(t),Z7o=r(zwe," \u2014 "),FN=n(zwe,"A",{href:!0});var iKr=s(FN);e9o=r(iKr,"MegatronBertForCausalLM"),iKr.forEach(t),o9o=r(zwe," (MegatronBert model)"),zwe.forEach(t),r9o=i(W),q_=n(W,"LI",{});var Qwe=s(q_);jle=n(Qwe,"STRONG",{});var dKr=s(jle);t9o=r(dKr,"openai-gpt"),dKr.forEach(t),a9o=r(Qwe," \u2014 "),TN=n(Qwe,"A",{href:!0});var cKr=s(TN);n9o=r(cKr,"OpenAIGPTLMHeadModel"),cKr.forEach(t),s9o=r(Qwe," (OpenAI GPT model)"),Qwe.forEach(t),l9o=i(W),N_=n(W,"LI",{});var Wwe=s(N_);Dle=n(Wwe,"STRONG",{});var fKr=s(Dle);i9o=r(fKr,"pegasus"),fKr.forEach(t),d9o=r(Wwe," \u2014 "),MN=n(Wwe,"A",{href:!0});var mKr=s(MN);c9o=r(mKr,"PegasusForCausalLM"),mKr.forEach(t),f9o=r(Wwe," (Pegasus model)"),Wwe.forEach(t),m9o=i(W),j_=n(W,"LI",{});var Hwe=s(j_);Gle=n(Hwe,"STRONG",{});var gKr=s(Gle);g9o=r(gKr,"plbart"),gKr.forEach(t),h9o=r(Hwe," \u2014 "),EN=n(Hwe,"A",{href:!0});var hKr=s(EN);p9o=r(hKr,"PLBartForCausalLM"),hKr.forEach(t),u9o=r(Hwe," (PLBart model)"),Hwe.forEach(t),_9o=i(W),D_=n(W,"LI",{});var Uwe=s(D_);Ole=n(Uwe,"STRONG",{});var pKr=s(Ole);b9o=r(pKr,"prophetnet"),pKr.forEach(t),v9o=r(Uwe," \u2014 "),CN=n(Uwe,"A",{href:!0});var uKr=s(CN);F9o=r(uKr,"ProphetNetForCausalLM"),uKr.forEach(t),T9o=r(Uwe," (ProphetNet model)"),Uwe.forEach(t),M9o=i(W),G_=n(W,"LI",{});var Jwe=s(G_);Vle=n(Jwe,"STRONG",{});var _Kr=s(Vle);E9o=r(_Kr,"qdqbert"),_Kr.forEach(t),C9o=r(Jwe," \u2014 "),wN=n(Jwe,"A",{href:!0});var bKr=s(wN);w9o=r(bKr,"QDQBertLMHeadModel"),bKr.forEach(t),A9o=r(Jwe," (QDQBert model)"),Jwe.forEach(t),y9o=i(W),O_=n(W,"LI",{});var Ywe=s(O_);Xle=n(Ywe,"STRONG",{});var vKr=s(Xle);L9o=r(vKr,"reformer"),vKr.forEach(t),x9o=r(Ywe," \u2014 "),AN=n(Ywe,"A",{href:!0});var FKr=s(AN);$9o=r(FKr,"ReformerModelWithLMHead"),FKr.forEach(t),k9o=r(Ywe," (Reformer model)"),Ywe.forEach(t),S9o=i(W),V_=n(W,"LI",{});var Kwe=s(V_);zle=n(Kwe,"STRONG",{});var TKr=s(zle);R9o=r(TKr,"rembert"),TKr.forEach(t),B9o=r(Kwe," \u2014 "),yN=n(Kwe,"A",{href:!0});var MKr=s(yN);P9o=r(MKr,"RemBertForCausalLM"),MKr.forEach(t),I9o=r(Kwe," (RemBERT model)"),Kwe.forEach(t),q9o=i(W),X_=n(W,"LI",{});var Zwe=s(X_);Qle=n(Zwe,"STRONG",{});var EKr=s(Qle);N9o=r(EKr,"roberta"),EKr.forEach(t),j9o=r(Zwe," \u2014 "),LN=n(Zwe,"A",{href:!0});var CKr=s(LN);D9o=r(CKr,"RobertaForCausalLM"),CKr.forEach(t),G9o=r(Zwe," (RoBERTa model)"),Zwe.forEach(t),O9o=i(W),z_=n(W,"LI",{});var eAe=s(z_);Wle=n(eAe,"STRONG",{});var wKr=s(Wle);V9o=r(wKr,"roformer"),wKr.forEach(t),X9o=r(eAe," \u2014 "),xN=n(eAe,"A",{href:!0});var AKr=s(xN);z9o=r(AKr,"RoFormerForCausalLM"),AKr.forEach(t),Q9o=r(eAe," (RoFormer model)"),eAe.forEach(t),W9o=i(W),Q_=n(W,"LI",{});var oAe=s(Q_);Hle=n(oAe,"STRONG",{});var yKr=s(Hle);H9o=r(yKr,"speech_to_text_2"),yKr.forEach(t),U9o=r(oAe," \u2014 "),$N=n(oAe,"A",{href:!0});var LKr=s($N);J9o=r(LKr,"Speech2Text2ForCausalLM"),LKr.forEach(t),Y9o=r(oAe," (Speech2Text2 model)"),oAe.forEach(t),K9o=i(W),W_=n(W,"LI",{});var rAe=s(W_);Ule=n(rAe,"STRONG",{});var xKr=s(Ule);Z9o=r(xKr,"transfo-xl"),xKr.forEach(t),eMo=r(rAe," \u2014 "),kN=n(rAe,"A",{href:!0});var $Kr=s(kN);oMo=r($Kr,"TransfoXLLMHeadModel"),$Kr.forEach(t),rMo=r(rAe," (Transformer-XL model)"),rAe.forEach(t),tMo=i(W),H_=n(W,"LI",{});var tAe=s(H_);Jle=n(tAe,"STRONG",{});var kKr=s(Jle);aMo=r(kKr,"trocr"),kKr.forEach(t),nMo=r(tAe," \u2014 "),SN=n(tAe,"A",{href:!0});var SKr=s(SN);sMo=r(SKr,"TrOCRForCausalLM"),SKr.forEach(t),lMo=r(tAe," (TrOCR model)"),tAe.forEach(t),iMo=i(W),U_=n(W,"LI",{});var aAe=s(U_);Yle=n(aAe,"STRONG",{});var RKr=s(Yle);dMo=r(RKr,"xglm"),RKr.forEach(t),cMo=r(aAe," \u2014 "),RN=n(aAe,"A",{href:!0});var BKr=s(RN);fMo=r(BKr,"XGLMForCausalLM"),BKr.forEach(t),mMo=r(aAe," (XGLM model)"),aAe.forEach(t),gMo=i(W),J_=n(W,"LI",{});var nAe=s(J_);Kle=n(nAe,"STRONG",{});var PKr=s(Kle);hMo=r(PKr,"xlm"),PKr.forEach(t),pMo=r(nAe," \u2014 "),BN=n(nAe,"A",{href:!0});var IKr=s(BN);uMo=r(IKr,"XLMWithLMHeadModel"),IKr.forEach(t),_Mo=r(nAe," (XLM model)"),nAe.forEach(t),bMo=i(W),Y_=n(W,"LI",{});var sAe=s(Y_);Zle=n(sAe,"STRONG",{});var qKr=s(Zle);vMo=r(qKr,"xlm-prophetnet"),qKr.forEach(t),FMo=r(sAe," \u2014 "),PN=n(sAe,"A",{href:!0});var NKr=s(PN);TMo=r(NKr,"XLMProphetNetForCausalLM"),NKr.forEach(t),MMo=r(sAe," (XLMProphetNet model)"),sAe.forEach(t),EMo=i(W),K_=n(W,"LI",{});var lAe=s(K_);eie=n(lAe,"STRONG",{});var jKr=s(eie);CMo=r(jKr,"xlm-roberta"),jKr.forEach(t),wMo=r(lAe," \u2014 "),IN=n(lAe,"A",{href:!0});var DKr=s(IN);AMo=r(DKr,"XLMRobertaForCausalLM"),DKr.forEach(t),yMo=r(lAe," (XLM-RoBERTa model)"),lAe.forEach(t),LMo=i(W),Z_=n(W,"LI",{});var iAe=s(Z_);oie=n(iAe,"STRONG",{});var GKr=s(oie);xMo=r(GKr,"xlm-roberta-xl"),GKr.forEach(t),$Mo=r(iAe," \u2014 "),qN=n(iAe,"A",{href:!0});var OKr=s(qN);kMo=r(OKr,"XLMRobertaXLForCausalLM"),OKr.forEach(t),SMo=r(iAe," (XLM-RoBERTa-XL model)"),iAe.forEach(t),RMo=i(W),e2=n(W,"LI",{});var dAe=s(e2);rie=n(dAe,"STRONG",{});var VKr=s(rie);BMo=r(VKr,"xlnet"),VKr.forEach(t),PMo=r(dAe," \u2014 "),NN=n(dAe,"A",{href:!0});var XKr=s(NN);IMo=r(XKr,"XLNetLMHeadModel"),XKr.forEach(t),qMo=r(dAe," (XLNet model)"),dAe.forEach(t),W.forEach(t),NMo=i(oa),o2=n(oa,"P",{});var cAe=s(o2);jMo=r(cAe,"The model is set in evaluation mode by default using "),tie=n(cAe,"CODE",{});var zKr=s(tie);DMo=r(zKr,"model.eval()"),zKr.forEach(t),GMo=r(cAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=n(cAe,"CODE",{});var QKr=s(aie);OMo=r(QKr,"model.train()"),QKr.forEach(t),cAe.forEach(t),VMo=i(oa),T(r2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),gPe=i(f),$i=n(f,"H2",{class:!0});var _qe=s($i);t2=n(_qe,"A",{id:!0,class:!0,href:!0});var WKr=s(t2);nie=n(WKr,"SPAN",{});var HKr=s(nie);T(wA.$$.fragment,HKr),HKr.forEach(t),WKr.forEach(t),XMo=i(_qe),sie=n(_qe,"SPAN",{});var UKr=s(sie);zMo=r(UKr,"AutoModelForMaskedLM"),UKr.forEach(t),_qe.forEach(t),hPe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(AA.$$.fragment,Os),QMo=i(Os),ki=n(Os,"P",{});var zY=s(ki);WMo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jN=n(zY,"A",{href:!0});var JKr=s(jN);HMo=r(JKr,"from_pretrained()"),JKr.forEach(t),UMo=r(zY," class method or the "),DN=n(zY,"A",{href:!0});var YKr=s(DN);JMo=r(YKr,"from_config()"),YKr.forEach(t),YMo=r(zY,` class
method.`),zY.forEach(t),KMo=i(Os),yA=n(Os,"P",{});var bqe=s(yA);ZMo=r(bqe,"This class cannot be instantiated directly using "),lie=n(bqe,"CODE",{});var KKr=s(lie);e4o=r(KKr,"__init__()"),KKr.forEach(t),o4o=r(bqe," (throws an error)."),bqe.forEach(t),r4o=i(Os),at=n(Os,"DIV",{class:!0});var WC=s(at);T(LA.$$.fragment,WC),t4o=i(WC),iie=n(WC,"P",{});var ZKr=s(iie);a4o=r(ZKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ZKr.forEach(t),n4o=i(WC),Si=n(WC,"P",{});var QY=s(Si);s4o=r(QY,`Note:
Loading a model from its configuration file does `),die=n(QY,"STRONG",{});var eZr=s(die);l4o=r(eZr,"not"),eZr.forEach(t),i4o=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GN=n(QY,"A",{href:!0});var oZr=s(GN);d4o=r(oZr,"from_pretrained()"),oZr.forEach(t),c4o=r(QY," to load the model weights."),QY.forEach(t),f4o=i(WC),T(a2.$$.fragment,WC),WC.forEach(t),m4o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(xA.$$.fragment,ra),g4o=i(ra),cie=n(ra,"P",{});var rZr=s(cie);h4o=r(rZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rZr.forEach(t),p4o=i(ra),xa=n(ra,"P",{});var HC=s(xa);u4o=r(HC,"The model class to instantiate is selected based on the "),fie=n(HC,"CODE",{});var tZr=s(fie);_4o=r(tZr,"model_type"),tZr.forEach(t),b4o=r(HC,` property of the config object (either
passed as an argument or loaded from `),mie=n(HC,"CODE",{});var aZr=s(mie);v4o=r(aZr,"pretrained_model_name_or_path"),aZr.forEach(t),F4o=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=n(HC,"CODE",{});var nZr=s(gie);T4o=r(nZr,"pretrained_model_name_or_path"),nZr.forEach(t),M4o=r(HC,":"),HC.forEach(t),E4o=i(ra),Q=n(ra,"UL",{});var H=s(Q);n2=n(H,"LI",{});var fAe=s(n2);hie=n(fAe,"STRONG",{});var sZr=s(hie);C4o=r(sZr,"albert"),sZr.forEach(t),w4o=r(fAe," \u2014 "),ON=n(fAe,"A",{href:!0});var lZr=s(ON);A4o=r(lZr,"AlbertForMaskedLM"),lZr.forEach(t),y4o=r(fAe," (ALBERT model)"),fAe.forEach(t),L4o=i(H),s2=n(H,"LI",{});var mAe=s(s2);pie=n(mAe,"STRONG",{});var iZr=s(pie);x4o=r(iZr,"bart"),iZr.forEach(t),$4o=r(mAe," \u2014 "),VN=n(mAe,"A",{href:!0});var dZr=s(VN);k4o=r(dZr,"BartForConditionalGeneration"),dZr.forEach(t),S4o=r(mAe," (BART model)"),mAe.forEach(t),R4o=i(H),l2=n(H,"LI",{});var gAe=s(l2);uie=n(gAe,"STRONG",{});var cZr=s(uie);B4o=r(cZr,"bert"),cZr.forEach(t),P4o=r(gAe," \u2014 "),XN=n(gAe,"A",{href:!0});var fZr=s(XN);I4o=r(fZr,"BertForMaskedLM"),fZr.forEach(t),q4o=r(gAe," (BERT model)"),gAe.forEach(t),N4o=i(H),i2=n(H,"LI",{});var hAe=s(i2);_ie=n(hAe,"STRONG",{});var mZr=s(_ie);j4o=r(mZr,"big_bird"),mZr.forEach(t),D4o=r(hAe," \u2014 "),zN=n(hAe,"A",{href:!0});var gZr=s(zN);G4o=r(gZr,"BigBirdForMaskedLM"),gZr.forEach(t),O4o=r(hAe," (BigBird model)"),hAe.forEach(t),V4o=i(H),d2=n(H,"LI",{});var pAe=s(d2);bie=n(pAe,"STRONG",{});var hZr=s(bie);X4o=r(hZr,"camembert"),hZr.forEach(t),z4o=r(pAe," \u2014 "),QN=n(pAe,"A",{href:!0});var pZr=s(QN);Q4o=r(pZr,"CamembertForMaskedLM"),pZr.forEach(t),W4o=r(pAe," (CamemBERT model)"),pAe.forEach(t),H4o=i(H),c2=n(H,"LI",{});var uAe=s(c2);vie=n(uAe,"STRONG",{});var uZr=s(vie);U4o=r(uZr,"convbert"),uZr.forEach(t),J4o=r(uAe," \u2014 "),WN=n(uAe,"A",{href:!0});var _Zr=s(WN);Y4o=r(_Zr,"ConvBertForMaskedLM"),_Zr.forEach(t),K4o=r(uAe," (ConvBERT model)"),uAe.forEach(t),Z4o=i(H),f2=n(H,"LI",{});var _Ae=s(f2);Fie=n(_Ae,"STRONG",{});var bZr=s(Fie);eEo=r(bZr,"data2vec-text"),bZr.forEach(t),oEo=r(_Ae," \u2014 "),HN=n(_Ae,"A",{href:!0});var vZr=s(HN);rEo=r(vZr,"Data2VecTextForMaskedLM"),vZr.forEach(t),tEo=r(_Ae," (Data2VecText model)"),_Ae.forEach(t),aEo=i(H),m2=n(H,"LI",{});var bAe=s(m2);Tie=n(bAe,"STRONG",{});var FZr=s(Tie);nEo=r(FZr,"deberta"),FZr.forEach(t),sEo=r(bAe," \u2014 "),UN=n(bAe,"A",{href:!0});var TZr=s(UN);lEo=r(TZr,"DebertaForMaskedLM"),TZr.forEach(t),iEo=r(bAe," (DeBERTa model)"),bAe.forEach(t),dEo=i(H),g2=n(H,"LI",{});var vAe=s(g2);Mie=n(vAe,"STRONG",{});var MZr=s(Mie);cEo=r(MZr,"deberta-v2"),MZr.forEach(t),fEo=r(vAe," \u2014 "),JN=n(vAe,"A",{href:!0});var EZr=s(JN);mEo=r(EZr,"DebertaV2ForMaskedLM"),EZr.forEach(t),gEo=r(vAe," (DeBERTa-v2 model)"),vAe.forEach(t),hEo=i(H),h2=n(H,"LI",{});var FAe=s(h2);Eie=n(FAe,"STRONG",{});var CZr=s(Eie);pEo=r(CZr,"distilbert"),CZr.forEach(t),uEo=r(FAe," \u2014 "),YN=n(FAe,"A",{href:!0});var wZr=s(YN);_Eo=r(wZr,"DistilBertForMaskedLM"),wZr.forEach(t),bEo=r(FAe," (DistilBERT model)"),FAe.forEach(t),vEo=i(H),p2=n(H,"LI",{});var TAe=s(p2);Cie=n(TAe,"STRONG",{});var AZr=s(Cie);FEo=r(AZr,"electra"),AZr.forEach(t),TEo=r(TAe," \u2014 "),KN=n(TAe,"A",{href:!0});var yZr=s(KN);MEo=r(yZr,"ElectraForMaskedLM"),yZr.forEach(t),EEo=r(TAe," (ELECTRA model)"),TAe.forEach(t),CEo=i(H),u2=n(H,"LI",{});var MAe=s(u2);wie=n(MAe,"STRONG",{});var LZr=s(wie);wEo=r(LZr,"flaubert"),LZr.forEach(t),AEo=r(MAe," \u2014 "),ZN=n(MAe,"A",{href:!0});var xZr=s(ZN);yEo=r(xZr,"FlaubertWithLMHeadModel"),xZr.forEach(t),LEo=r(MAe," (FlauBERT model)"),MAe.forEach(t),xEo=i(H),_2=n(H,"LI",{});var EAe=s(_2);Aie=n(EAe,"STRONG",{});var $Zr=s(Aie);$Eo=r($Zr,"fnet"),$Zr.forEach(t),kEo=r(EAe," \u2014 "),ej=n(EAe,"A",{href:!0});var kZr=s(ej);SEo=r(kZr,"FNetForMaskedLM"),kZr.forEach(t),REo=r(EAe," (FNet model)"),EAe.forEach(t),BEo=i(H),b2=n(H,"LI",{});var CAe=s(b2);yie=n(CAe,"STRONG",{});var SZr=s(yie);PEo=r(SZr,"funnel"),SZr.forEach(t),IEo=r(CAe," \u2014 "),oj=n(CAe,"A",{href:!0});var RZr=s(oj);qEo=r(RZr,"FunnelForMaskedLM"),RZr.forEach(t),NEo=r(CAe," (Funnel Transformer model)"),CAe.forEach(t),jEo=i(H),v2=n(H,"LI",{});var wAe=s(v2);Lie=n(wAe,"STRONG",{});var BZr=s(Lie);DEo=r(BZr,"ibert"),BZr.forEach(t),GEo=r(wAe," \u2014 "),rj=n(wAe,"A",{href:!0});var PZr=s(rj);OEo=r(PZr,"IBertForMaskedLM"),PZr.forEach(t),VEo=r(wAe," (I-BERT model)"),wAe.forEach(t),XEo=i(H),F2=n(H,"LI",{});var AAe=s(F2);xie=n(AAe,"STRONG",{});var IZr=s(xie);zEo=r(IZr,"layoutlm"),IZr.forEach(t),QEo=r(AAe," \u2014 "),tj=n(AAe,"A",{href:!0});var qZr=s(tj);WEo=r(qZr,"LayoutLMForMaskedLM"),qZr.forEach(t),HEo=r(AAe," (LayoutLM model)"),AAe.forEach(t),UEo=i(H),T2=n(H,"LI",{});var yAe=s(T2);$ie=n(yAe,"STRONG",{});var NZr=s($ie);JEo=r(NZr,"longformer"),NZr.forEach(t),YEo=r(yAe," \u2014 "),aj=n(yAe,"A",{href:!0});var jZr=s(aj);KEo=r(jZr,"LongformerForMaskedLM"),jZr.forEach(t),ZEo=r(yAe," (Longformer model)"),yAe.forEach(t),e5o=i(H),M2=n(H,"LI",{});var LAe=s(M2);kie=n(LAe,"STRONG",{});var DZr=s(kie);o5o=r(DZr,"mbart"),DZr.forEach(t),r5o=r(LAe," \u2014 "),nj=n(LAe,"A",{href:!0});var GZr=s(nj);t5o=r(GZr,"MBartForConditionalGeneration"),GZr.forEach(t),a5o=r(LAe," (mBART model)"),LAe.forEach(t),n5o=i(H),E2=n(H,"LI",{});var xAe=s(E2);Sie=n(xAe,"STRONG",{});var OZr=s(Sie);s5o=r(OZr,"megatron-bert"),OZr.forEach(t),l5o=r(xAe," \u2014 "),sj=n(xAe,"A",{href:!0});var VZr=s(sj);i5o=r(VZr,"MegatronBertForMaskedLM"),VZr.forEach(t),d5o=r(xAe," (MegatronBert model)"),xAe.forEach(t),c5o=i(H),C2=n(H,"LI",{});var $Ae=s(C2);Rie=n($Ae,"STRONG",{});var XZr=s(Rie);f5o=r(XZr,"mobilebert"),XZr.forEach(t),m5o=r($Ae," \u2014 "),lj=n($Ae,"A",{href:!0});var zZr=s(lj);g5o=r(zZr,"MobileBertForMaskedLM"),zZr.forEach(t),h5o=r($Ae," (MobileBERT model)"),$Ae.forEach(t),p5o=i(H),w2=n(H,"LI",{});var kAe=s(w2);Bie=n(kAe,"STRONG",{});var QZr=s(Bie);u5o=r(QZr,"mpnet"),QZr.forEach(t),_5o=r(kAe," \u2014 "),ij=n(kAe,"A",{href:!0});var WZr=s(ij);b5o=r(WZr,"MPNetForMaskedLM"),WZr.forEach(t),v5o=r(kAe," (MPNet model)"),kAe.forEach(t),F5o=i(H),A2=n(H,"LI",{});var SAe=s(A2);Pie=n(SAe,"STRONG",{});var HZr=s(Pie);T5o=r(HZr,"nystromformer"),HZr.forEach(t),M5o=r(SAe," \u2014 "),dj=n(SAe,"A",{href:!0});var UZr=s(dj);E5o=r(UZr,"NystromformerForMaskedLM"),UZr.forEach(t),C5o=r(SAe," (Nystromformer model)"),SAe.forEach(t),w5o=i(H),y2=n(H,"LI",{});var RAe=s(y2);Iie=n(RAe,"STRONG",{});var JZr=s(Iie);A5o=r(JZr,"perceiver"),JZr.forEach(t),y5o=r(RAe," \u2014 "),cj=n(RAe,"A",{href:!0});var YZr=s(cj);L5o=r(YZr,"PerceiverForMaskedLM"),YZr.forEach(t),x5o=r(RAe," (Perceiver model)"),RAe.forEach(t),$5o=i(H),L2=n(H,"LI",{});var BAe=s(L2);qie=n(BAe,"STRONG",{});var KZr=s(qie);k5o=r(KZr,"qdqbert"),KZr.forEach(t),S5o=r(BAe," \u2014 "),fj=n(BAe,"A",{href:!0});var ZZr=s(fj);R5o=r(ZZr,"QDQBertForMaskedLM"),ZZr.forEach(t),B5o=r(BAe," (QDQBert model)"),BAe.forEach(t),P5o=i(H),x2=n(H,"LI",{});var PAe=s(x2);Nie=n(PAe,"STRONG",{});var eet=s(Nie);I5o=r(eet,"reformer"),eet.forEach(t),q5o=r(PAe," \u2014 "),mj=n(PAe,"A",{href:!0});var oet=s(mj);N5o=r(oet,"ReformerForMaskedLM"),oet.forEach(t),j5o=r(PAe," (Reformer model)"),PAe.forEach(t),D5o=i(H),$2=n(H,"LI",{});var IAe=s($2);jie=n(IAe,"STRONG",{});var ret=s(jie);G5o=r(ret,"rembert"),ret.forEach(t),O5o=r(IAe," \u2014 "),gj=n(IAe,"A",{href:!0});var tet=s(gj);V5o=r(tet,"RemBertForMaskedLM"),tet.forEach(t),X5o=r(IAe," (RemBERT model)"),IAe.forEach(t),z5o=i(H),k2=n(H,"LI",{});var qAe=s(k2);Die=n(qAe,"STRONG",{});var aet=s(Die);Q5o=r(aet,"roberta"),aet.forEach(t),W5o=r(qAe," \u2014 "),hj=n(qAe,"A",{href:!0});var net=s(hj);H5o=r(net,"RobertaForMaskedLM"),net.forEach(t),U5o=r(qAe," (RoBERTa model)"),qAe.forEach(t),J5o=i(H),S2=n(H,"LI",{});var NAe=s(S2);Gie=n(NAe,"STRONG",{});var set=s(Gie);Y5o=r(set,"roformer"),set.forEach(t),K5o=r(NAe," \u2014 "),pj=n(NAe,"A",{href:!0});var iet=s(pj);Z5o=r(iet,"RoFormerForMaskedLM"),iet.forEach(t),eCo=r(NAe," (RoFormer model)"),NAe.forEach(t),oCo=i(H),R2=n(H,"LI",{});var jAe=s(R2);Oie=n(jAe,"STRONG",{});var det=s(Oie);rCo=r(det,"squeezebert"),det.forEach(t),tCo=r(jAe," \u2014 "),uj=n(jAe,"A",{href:!0});var cet=s(uj);aCo=r(cet,"SqueezeBertForMaskedLM"),cet.forEach(t),nCo=r(jAe," (SqueezeBERT model)"),jAe.forEach(t),sCo=i(H),B2=n(H,"LI",{});var DAe=s(B2);Vie=n(DAe,"STRONG",{});var fet=s(Vie);lCo=r(fet,"tapas"),fet.forEach(t),iCo=r(DAe," \u2014 "),_j=n(DAe,"A",{href:!0});var met=s(_j);dCo=r(met,"TapasForMaskedLM"),met.forEach(t),cCo=r(DAe," (TAPAS model)"),DAe.forEach(t),fCo=i(H),P2=n(H,"LI",{});var GAe=s(P2);Xie=n(GAe,"STRONG",{});var get=s(Xie);mCo=r(get,"wav2vec2"),get.forEach(t),gCo=r(GAe," \u2014 "),zie=n(GAe,"CODE",{});var het=s(zie);hCo=r(het,"Wav2Vec2ForMaskedLM"),het.forEach(t),pCo=r(GAe," (Wav2Vec2 model)"),GAe.forEach(t),uCo=i(H),I2=n(H,"LI",{});var OAe=s(I2);Qie=n(OAe,"STRONG",{});var pet=s(Qie);_Co=r(pet,"xlm"),pet.forEach(t),bCo=r(OAe," \u2014 "),bj=n(OAe,"A",{href:!0});var uet=s(bj);vCo=r(uet,"XLMWithLMHeadModel"),uet.forEach(t),FCo=r(OAe," (XLM model)"),OAe.forEach(t),TCo=i(H),q2=n(H,"LI",{});var VAe=s(q2);Wie=n(VAe,"STRONG",{});var _et=s(Wie);MCo=r(_et,"xlm-roberta"),_et.forEach(t),ECo=r(VAe," \u2014 "),vj=n(VAe,"A",{href:!0});var bet=s(vj);CCo=r(bet,"XLMRobertaForMaskedLM"),bet.forEach(t),wCo=r(VAe," (XLM-RoBERTa model)"),VAe.forEach(t),ACo=i(H),N2=n(H,"LI",{});var XAe=s(N2);Hie=n(XAe,"STRONG",{});var vet=s(Hie);yCo=r(vet,"xlm-roberta-xl"),vet.forEach(t),LCo=r(XAe," \u2014 "),Fj=n(XAe,"A",{href:!0});var Fet=s(Fj);xCo=r(Fet,"XLMRobertaXLForMaskedLM"),Fet.forEach(t),$Co=r(XAe," (XLM-RoBERTa-XL model)"),XAe.forEach(t),kCo=i(H),j2=n(H,"LI",{});var zAe=s(j2);Uie=n(zAe,"STRONG",{});var Tet=s(Uie);SCo=r(Tet,"yoso"),Tet.forEach(t),RCo=r(zAe," \u2014 "),Tj=n(zAe,"A",{href:!0});var Met=s(Tj);BCo=r(Met,"YosoForMaskedLM"),Met.forEach(t),PCo=r(zAe," (YOSO model)"),zAe.forEach(t),H.forEach(t),ICo=i(ra),D2=n(ra,"P",{});var QAe=s(D2);qCo=r(QAe,"The model is set in evaluation mode by default using "),Jie=n(QAe,"CODE",{});var Eet=s(Jie);NCo=r(Eet,"model.eval()"),Eet.forEach(t),jCo=r(QAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yie=n(QAe,"CODE",{});var Cet=s(Yie);DCo=r(Cet,"model.train()"),Cet.forEach(t),QAe.forEach(t),GCo=i(ra),T(G2.$$.fragment,ra),ra.forEach(t),Os.forEach(t),pPe=i(f),Ri=n(f,"H2",{class:!0});var vqe=s(Ri);O2=n(vqe,"A",{id:!0,class:!0,href:!0});var wet=s(O2);Kie=n(wet,"SPAN",{});var Aet=s(Kie);T($A.$$.fragment,Aet),Aet.forEach(t),wet.forEach(t),OCo=i(vqe),Zie=n(vqe,"SPAN",{});var yet=s(Zie);VCo=r(yet,"AutoModelForSeq2SeqLM"),yet.forEach(t),vqe.forEach(t),uPe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(kA.$$.fragment,Vs),XCo=i(Vs),Bi=n(Vs,"P",{});var WY=s(Bi);zCo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Mj=n(WY,"A",{href:!0});var Let=s(Mj);QCo=r(Let,"from_pretrained()"),Let.forEach(t),WCo=r(WY," class method or the "),Ej=n(WY,"A",{href:!0});var xet=s(Ej);HCo=r(xet,"from_config()"),xet.forEach(t),UCo=r(WY,` class
method.`),WY.forEach(t),JCo=i(Vs),SA=n(Vs,"P",{});var Fqe=s(SA);YCo=r(Fqe,"This class cannot be instantiated directly using "),ede=n(Fqe,"CODE",{});var $et=s(ede);KCo=r($et,"__init__()"),$et.forEach(t),ZCo=r(Fqe," (throws an error)."),Fqe.forEach(t),e3o=i(Vs),nt=n(Vs,"DIV",{class:!0});var UC=s(nt);T(RA.$$.fragment,UC),o3o=i(UC),ode=n(UC,"P",{});var ket=s(ode);r3o=r(ket,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ket.forEach(t),t3o=i(UC),Pi=n(UC,"P",{});var HY=s(Pi);a3o=r(HY,`Note:
Loading a model from its configuration file does `),rde=n(HY,"STRONG",{});var Set=s(rde);n3o=r(Set,"not"),Set.forEach(t),s3o=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(HY,"A",{href:!0});var Ret=s(Cj);l3o=r(Ret,"from_pretrained()"),Ret.forEach(t),i3o=r(HY," to load the model weights."),HY.forEach(t),d3o=i(UC),T(V2.$$.fragment,UC),UC.forEach(t),c3o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(BA.$$.fragment,ta),f3o=i(ta),tde=n(ta,"P",{});var Bet=s(tde);m3o=r(Bet,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bet.forEach(t),g3o=i(ta),$a=n(ta,"P",{});var JC=s($a);h3o=r(JC,"The model class to instantiate is selected based on the "),ade=n(JC,"CODE",{});var Pet=s(ade);p3o=r(Pet,"model_type"),Pet.forEach(t),u3o=r(JC,` property of the config object (either
passed as an argument or loaded from `),nde=n(JC,"CODE",{});var Iet=s(nde);_3o=r(Iet,"pretrained_model_name_or_path"),Iet.forEach(t),b3o=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=n(JC,"CODE",{});var qet=s(sde);v3o=r(qet,"pretrained_model_name_or_path"),qet.forEach(t),F3o=r(JC,":"),JC.forEach(t),T3o=i(ta),he=n(ta,"UL",{});var ue=s(he);X2=n(ue,"LI",{});var WAe=s(X2);lde=n(WAe,"STRONG",{});var Net=s(lde);M3o=r(Net,"bart"),Net.forEach(t),E3o=r(WAe," \u2014 "),wj=n(WAe,"A",{href:!0});var jet=s(wj);C3o=r(jet,"BartForConditionalGeneration"),jet.forEach(t),w3o=r(WAe," (BART model)"),WAe.forEach(t),A3o=i(ue),z2=n(ue,"LI",{});var HAe=s(z2);ide=n(HAe,"STRONG",{});var Det=s(ide);y3o=r(Det,"bigbird_pegasus"),Det.forEach(t),L3o=r(HAe," \u2014 "),Aj=n(HAe,"A",{href:!0});var Get=s(Aj);x3o=r(Get,"BigBirdPegasusForConditionalGeneration"),Get.forEach(t),$3o=r(HAe," (BigBirdPegasus model)"),HAe.forEach(t),k3o=i(ue),Q2=n(ue,"LI",{});var UAe=s(Q2);dde=n(UAe,"STRONG",{});var Oet=s(dde);S3o=r(Oet,"blenderbot"),Oet.forEach(t),R3o=r(UAe," \u2014 "),yj=n(UAe,"A",{href:!0});var Vet=s(yj);B3o=r(Vet,"BlenderbotForConditionalGeneration"),Vet.forEach(t),P3o=r(UAe," (Blenderbot model)"),UAe.forEach(t),I3o=i(ue),W2=n(ue,"LI",{});var JAe=s(W2);cde=n(JAe,"STRONG",{});var Xet=s(cde);q3o=r(Xet,"blenderbot-small"),Xet.forEach(t),N3o=r(JAe," \u2014 "),Lj=n(JAe,"A",{href:!0});var zet=s(Lj);j3o=r(zet,"BlenderbotSmallForConditionalGeneration"),zet.forEach(t),D3o=r(JAe," (BlenderbotSmall model)"),JAe.forEach(t),G3o=i(ue),H2=n(ue,"LI",{});var YAe=s(H2);fde=n(YAe,"STRONG",{});var Qet=s(fde);O3o=r(Qet,"encoder-decoder"),Qet.forEach(t),V3o=r(YAe," \u2014 "),xj=n(YAe,"A",{href:!0});var Wet=s(xj);X3o=r(Wet,"EncoderDecoderModel"),Wet.forEach(t),z3o=r(YAe," (Encoder decoder model)"),YAe.forEach(t),Q3o=i(ue),U2=n(ue,"LI",{});var KAe=s(U2);mde=n(KAe,"STRONG",{});var Het=s(mde);W3o=r(Het,"fsmt"),Het.forEach(t),H3o=r(KAe," \u2014 "),$j=n(KAe,"A",{href:!0});var Uet=s($j);U3o=r(Uet,"FSMTForConditionalGeneration"),Uet.forEach(t),J3o=r(KAe," (FairSeq Machine-Translation model)"),KAe.forEach(t),Y3o=i(ue),J2=n(ue,"LI",{});var ZAe=s(J2);gde=n(ZAe,"STRONG",{});var Jet=s(gde);K3o=r(Jet,"led"),Jet.forEach(t),Z3o=r(ZAe," \u2014 "),kj=n(ZAe,"A",{href:!0});var Yet=s(kj);ewo=r(Yet,"LEDForConditionalGeneration"),Yet.forEach(t),owo=r(ZAe," (LED model)"),ZAe.forEach(t),rwo=i(ue),Y2=n(ue,"LI",{});var e6e=s(Y2);hde=n(e6e,"STRONG",{});var Ket=s(hde);two=r(Ket,"m2m_100"),Ket.forEach(t),awo=r(e6e," \u2014 "),Sj=n(e6e,"A",{href:!0});var Zet=s(Sj);nwo=r(Zet,"M2M100ForConditionalGeneration"),Zet.forEach(t),swo=r(e6e," (M2M100 model)"),e6e.forEach(t),lwo=i(ue),K2=n(ue,"LI",{});var o6e=s(K2);pde=n(o6e,"STRONG",{});var eot=s(pde);iwo=r(eot,"marian"),eot.forEach(t),dwo=r(o6e," \u2014 "),Rj=n(o6e,"A",{href:!0});var oot=s(Rj);cwo=r(oot,"MarianMTModel"),oot.forEach(t),fwo=r(o6e," (Marian model)"),o6e.forEach(t),mwo=i(ue),Z2=n(ue,"LI",{});var r6e=s(Z2);ude=n(r6e,"STRONG",{});var rot=s(ude);gwo=r(rot,"mbart"),rot.forEach(t),hwo=r(r6e," \u2014 "),Bj=n(r6e,"A",{href:!0});var tot=s(Bj);pwo=r(tot,"MBartForConditionalGeneration"),tot.forEach(t),uwo=r(r6e," (mBART model)"),r6e.forEach(t),_wo=i(ue),e1=n(ue,"LI",{});var t6e=s(e1);_de=n(t6e,"STRONG",{});var aot=s(_de);bwo=r(aot,"mt5"),aot.forEach(t),vwo=r(t6e," \u2014 "),Pj=n(t6e,"A",{href:!0});var not=s(Pj);Fwo=r(not,"MT5ForConditionalGeneration"),not.forEach(t),Two=r(t6e," (mT5 model)"),t6e.forEach(t),Mwo=i(ue),o1=n(ue,"LI",{});var a6e=s(o1);bde=n(a6e,"STRONG",{});var sot=s(bde);Ewo=r(sot,"pegasus"),sot.forEach(t),Cwo=r(a6e," \u2014 "),Ij=n(a6e,"A",{href:!0});var lot=s(Ij);wwo=r(lot,"PegasusForConditionalGeneration"),lot.forEach(t),Awo=r(a6e," (Pegasus model)"),a6e.forEach(t),ywo=i(ue),r1=n(ue,"LI",{});var n6e=s(r1);vde=n(n6e,"STRONG",{});var iot=s(vde);Lwo=r(iot,"plbart"),iot.forEach(t),xwo=r(n6e," \u2014 "),qj=n(n6e,"A",{href:!0});var dot=s(qj);$wo=r(dot,"PLBartForConditionalGeneration"),dot.forEach(t),kwo=r(n6e," (PLBart model)"),n6e.forEach(t),Swo=i(ue),t1=n(ue,"LI",{});var s6e=s(t1);Fde=n(s6e,"STRONG",{});var cot=s(Fde);Rwo=r(cot,"prophetnet"),cot.forEach(t),Bwo=r(s6e," \u2014 "),Nj=n(s6e,"A",{href:!0});var fot=s(Nj);Pwo=r(fot,"ProphetNetForConditionalGeneration"),fot.forEach(t),Iwo=r(s6e," (ProphetNet model)"),s6e.forEach(t),qwo=i(ue),a1=n(ue,"LI",{});var l6e=s(a1);Tde=n(l6e,"STRONG",{});var mot=s(Tde);Nwo=r(mot,"t5"),mot.forEach(t),jwo=r(l6e," \u2014 "),jj=n(l6e,"A",{href:!0});var got=s(jj);Dwo=r(got,"T5ForConditionalGeneration"),got.forEach(t),Gwo=r(l6e," (T5 model)"),l6e.forEach(t),Owo=i(ue),n1=n(ue,"LI",{});var i6e=s(n1);Mde=n(i6e,"STRONG",{});var hot=s(Mde);Vwo=r(hot,"tapex"),hot.forEach(t),Xwo=r(i6e," \u2014 "),Dj=n(i6e,"A",{href:!0});var pot=s(Dj);zwo=r(pot,"BartForConditionalGeneration"),pot.forEach(t),Qwo=r(i6e," (TAPEX model)"),i6e.forEach(t),Wwo=i(ue),s1=n(ue,"LI",{});var d6e=s(s1);Ede=n(d6e,"STRONG",{});var uot=s(Ede);Hwo=r(uot,"xlm-prophetnet"),uot.forEach(t),Uwo=r(d6e," \u2014 "),Gj=n(d6e,"A",{href:!0});var _ot=s(Gj);Jwo=r(_ot,"XLMProphetNetForConditionalGeneration"),_ot.forEach(t),Ywo=r(d6e," (XLMProphetNet model)"),d6e.forEach(t),ue.forEach(t),Kwo=i(ta),l1=n(ta,"P",{});var c6e=s(l1);Zwo=r(c6e,"The model is set in evaluation mode by default using "),Cde=n(c6e,"CODE",{});var bot=s(Cde);eAo=r(bot,"model.eval()"),bot.forEach(t),oAo=r(c6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=n(c6e,"CODE",{});var vot=s(wde);rAo=r(vot,"model.train()"),vot.forEach(t),c6e.forEach(t),tAo=i(ta),T(i1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),_Pe=i(f),Ii=n(f,"H2",{class:!0});var Tqe=s(Ii);d1=n(Tqe,"A",{id:!0,class:!0,href:!0});var Fot=s(d1);Ade=n(Fot,"SPAN",{});var Tot=s(Ade);T(PA.$$.fragment,Tot),Tot.forEach(t),Fot.forEach(t),aAo=i(Tqe),yde=n(Tqe,"SPAN",{});var Mot=s(yde);nAo=r(Mot,"AutoModelForSequenceClassification"),Mot.forEach(t),Tqe.forEach(t),bPe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(IA.$$.fragment,Xs),sAo=i(Xs),qi=n(Xs,"P",{});var UY=s(qi);lAo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Oj=n(UY,"A",{href:!0});var Eot=s(Oj);iAo=r(Eot,"from_pretrained()"),Eot.forEach(t),dAo=r(UY," class method or the "),Vj=n(UY,"A",{href:!0});var Cot=s(Vj);cAo=r(Cot,"from_config()"),Cot.forEach(t),fAo=r(UY,` class
method.`),UY.forEach(t),mAo=i(Xs),qA=n(Xs,"P",{});var Mqe=s(qA);gAo=r(Mqe,"This class cannot be instantiated directly using "),Lde=n(Mqe,"CODE",{});var wot=s(Lde);hAo=r(wot,"__init__()"),wot.forEach(t),pAo=r(Mqe," (throws an error)."),Mqe.forEach(t),uAo=i(Xs),st=n(Xs,"DIV",{class:!0});var YC=s(st);T(NA.$$.fragment,YC),_Ao=i(YC),xde=n(YC,"P",{});var Aot=s(xde);bAo=r(Aot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Aot.forEach(t),vAo=i(YC),Ni=n(YC,"P",{});var JY=s(Ni);FAo=r(JY,`Note:
Loading a model from its configuration file does `),$de=n(JY,"STRONG",{});var yot=s($de);TAo=r(yot,"not"),yot.forEach(t),MAo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xj=n(JY,"A",{href:!0});var Lot=s(Xj);EAo=r(Lot,"from_pretrained()"),Lot.forEach(t),CAo=r(JY," to load the model weights."),JY.forEach(t),wAo=i(YC),T(c1.$$.fragment,YC),YC.forEach(t),AAo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(jA.$$.fragment,aa),yAo=i(aa),kde=n(aa,"P",{});var xot=s(kde);LAo=r(xot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xot.forEach(t),xAo=i(aa),ka=n(aa,"P",{});var KC=s(ka);$Ao=r(KC,"The model class to instantiate is selected based on the "),Sde=n(KC,"CODE",{});var $ot=s(Sde);kAo=r($ot,"model_type"),$ot.forEach(t),SAo=r(KC,` property of the config object (either
passed as an argument or loaded from `),Rde=n(KC,"CODE",{});var kot=s(Rde);RAo=r(kot,"pretrained_model_name_or_path"),kot.forEach(t),BAo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bde=n(KC,"CODE",{});var Sot=s(Bde);PAo=r(Sot,"pretrained_model_name_or_path"),Sot.forEach(t),IAo=r(KC,":"),KC.forEach(t),qAo=i(aa),q=n(aa,"UL",{});var N=s(q);f1=n(N,"LI",{});var f6e=s(f1);Pde=n(f6e,"STRONG",{});var Rot=s(Pde);NAo=r(Rot,"albert"),Rot.forEach(t),jAo=r(f6e," \u2014 "),zj=n(f6e,"A",{href:!0});var Bot=s(zj);DAo=r(Bot,"AlbertForSequenceClassification"),Bot.forEach(t),GAo=r(f6e," (ALBERT model)"),f6e.forEach(t),OAo=i(N),m1=n(N,"LI",{});var m6e=s(m1);Ide=n(m6e,"STRONG",{});var Pot=s(Ide);VAo=r(Pot,"bart"),Pot.forEach(t),XAo=r(m6e," \u2014 "),Qj=n(m6e,"A",{href:!0});var Iot=s(Qj);zAo=r(Iot,"BartForSequenceClassification"),Iot.forEach(t),QAo=r(m6e," (BART model)"),m6e.forEach(t),WAo=i(N),g1=n(N,"LI",{});var g6e=s(g1);qde=n(g6e,"STRONG",{});var qot=s(qde);HAo=r(qot,"bert"),qot.forEach(t),UAo=r(g6e," \u2014 "),Wj=n(g6e,"A",{href:!0});var Not=s(Wj);JAo=r(Not,"BertForSequenceClassification"),Not.forEach(t),YAo=r(g6e," (BERT model)"),g6e.forEach(t),KAo=i(N),h1=n(N,"LI",{});var h6e=s(h1);Nde=n(h6e,"STRONG",{});var jot=s(Nde);ZAo=r(jot,"big_bird"),jot.forEach(t),e6o=r(h6e," \u2014 "),Hj=n(h6e,"A",{href:!0});var Dot=s(Hj);o6o=r(Dot,"BigBirdForSequenceClassification"),Dot.forEach(t),r6o=r(h6e," (BigBird model)"),h6e.forEach(t),t6o=i(N),p1=n(N,"LI",{});var p6e=s(p1);jde=n(p6e,"STRONG",{});var Got=s(jde);a6o=r(Got,"bigbird_pegasus"),Got.forEach(t),n6o=r(p6e," \u2014 "),Uj=n(p6e,"A",{href:!0});var Oot=s(Uj);s6o=r(Oot,"BigBirdPegasusForSequenceClassification"),Oot.forEach(t),l6o=r(p6e," (BigBirdPegasus model)"),p6e.forEach(t),i6o=i(N),u1=n(N,"LI",{});var u6e=s(u1);Dde=n(u6e,"STRONG",{});var Vot=s(Dde);d6o=r(Vot,"camembert"),Vot.forEach(t),c6o=r(u6e," \u2014 "),Jj=n(u6e,"A",{href:!0});var Xot=s(Jj);f6o=r(Xot,"CamembertForSequenceClassification"),Xot.forEach(t),m6o=r(u6e," (CamemBERT model)"),u6e.forEach(t),g6o=i(N),_1=n(N,"LI",{});var _6e=s(_1);Gde=n(_6e,"STRONG",{});var zot=s(Gde);h6o=r(zot,"canine"),zot.forEach(t),p6o=r(_6e," \u2014 "),Yj=n(_6e,"A",{href:!0});var Qot=s(Yj);u6o=r(Qot,"CanineForSequenceClassification"),Qot.forEach(t),_6o=r(_6e," (Canine model)"),_6e.forEach(t),b6o=i(N),b1=n(N,"LI",{});var b6e=s(b1);Ode=n(b6e,"STRONG",{});var Wot=s(Ode);v6o=r(Wot,"convbert"),Wot.forEach(t),F6o=r(b6e," \u2014 "),Kj=n(b6e,"A",{href:!0});var Hot=s(Kj);T6o=r(Hot,"ConvBertForSequenceClassification"),Hot.forEach(t),M6o=r(b6e," (ConvBERT model)"),b6e.forEach(t),E6o=i(N),v1=n(N,"LI",{});var v6e=s(v1);Vde=n(v6e,"STRONG",{});var Uot=s(Vde);C6o=r(Uot,"ctrl"),Uot.forEach(t),w6o=r(v6e," \u2014 "),Zj=n(v6e,"A",{href:!0});var Jot=s(Zj);A6o=r(Jot,"CTRLForSequenceClassification"),Jot.forEach(t),y6o=r(v6e," (CTRL model)"),v6e.forEach(t),L6o=i(N),F1=n(N,"LI",{});var F6e=s(F1);Xde=n(F6e,"STRONG",{});var Yot=s(Xde);x6o=r(Yot,"data2vec-text"),Yot.forEach(t),$6o=r(F6e," \u2014 "),eD=n(F6e,"A",{href:!0});var Kot=s(eD);k6o=r(Kot,"Data2VecTextForSequenceClassification"),Kot.forEach(t),S6o=r(F6e," (Data2VecText model)"),F6e.forEach(t),R6o=i(N),T1=n(N,"LI",{});var T6e=s(T1);zde=n(T6e,"STRONG",{});var Zot=s(zde);B6o=r(Zot,"deberta"),Zot.forEach(t),P6o=r(T6e," \u2014 "),oD=n(T6e,"A",{href:!0});var ert=s(oD);I6o=r(ert,"DebertaForSequenceClassification"),ert.forEach(t),q6o=r(T6e," (DeBERTa model)"),T6e.forEach(t),N6o=i(N),M1=n(N,"LI",{});var M6e=s(M1);Qde=n(M6e,"STRONG",{});var ort=s(Qde);j6o=r(ort,"deberta-v2"),ort.forEach(t),D6o=r(M6e," \u2014 "),rD=n(M6e,"A",{href:!0});var rrt=s(rD);G6o=r(rrt,"DebertaV2ForSequenceClassification"),rrt.forEach(t),O6o=r(M6e," (DeBERTa-v2 model)"),M6e.forEach(t),V6o=i(N),E1=n(N,"LI",{});var E6e=s(E1);Wde=n(E6e,"STRONG",{});var trt=s(Wde);X6o=r(trt,"distilbert"),trt.forEach(t),z6o=r(E6e," \u2014 "),tD=n(E6e,"A",{href:!0});var art=s(tD);Q6o=r(art,"DistilBertForSequenceClassification"),art.forEach(t),W6o=r(E6e," (DistilBERT model)"),E6e.forEach(t),H6o=i(N),C1=n(N,"LI",{});var C6e=s(C1);Hde=n(C6e,"STRONG",{});var nrt=s(Hde);U6o=r(nrt,"electra"),nrt.forEach(t),J6o=r(C6e," \u2014 "),aD=n(C6e,"A",{href:!0});var srt=s(aD);Y6o=r(srt,"ElectraForSequenceClassification"),srt.forEach(t),K6o=r(C6e," (ELECTRA model)"),C6e.forEach(t),Z6o=i(N),w1=n(N,"LI",{});var w6e=s(w1);Ude=n(w6e,"STRONG",{});var lrt=s(Ude);eyo=r(lrt,"flaubert"),lrt.forEach(t),oyo=r(w6e," \u2014 "),nD=n(w6e,"A",{href:!0});var irt=s(nD);ryo=r(irt,"FlaubertForSequenceClassification"),irt.forEach(t),tyo=r(w6e," (FlauBERT model)"),w6e.forEach(t),ayo=i(N),A1=n(N,"LI",{});var A6e=s(A1);Jde=n(A6e,"STRONG",{});var drt=s(Jde);nyo=r(drt,"fnet"),drt.forEach(t),syo=r(A6e," \u2014 "),sD=n(A6e,"A",{href:!0});var crt=s(sD);lyo=r(crt,"FNetForSequenceClassification"),crt.forEach(t),iyo=r(A6e," (FNet model)"),A6e.forEach(t),dyo=i(N),y1=n(N,"LI",{});var y6e=s(y1);Yde=n(y6e,"STRONG",{});var frt=s(Yde);cyo=r(frt,"funnel"),frt.forEach(t),fyo=r(y6e," \u2014 "),lD=n(y6e,"A",{href:!0});var mrt=s(lD);myo=r(mrt,"FunnelForSequenceClassification"),mrt.forEach(t),gyo=r(y6e," (Funnel Transformer model)"),y6e.forEach(t),hyo=i(N),L1=n(N,"LI",{});var L6e=s(L1);Kde=n(L6e,"STRONG",{});var grt=s(Kde);pyo=r(grt,"gpt2"),grt.forEach(t),uyo=r(L6e," \u2014 "),iD=n(L6e,"A",{href:!0});var hrt=s(iD);_yo=r(hrt,"GPT2ForSequenceClassification"),hrt.forEach(t),byo=r(L6e," (OpenAI GPT-2 model)"),L6e.forEach(t),vyo=i(N),x1=n(N,"LI",{});var x6e=s(x1);Zde=n(x6e,"STRONG",{});var prt=s(Zde);Fyo=r(prt,"gpt_neo"),prt.forEach(t),Tyo=r(x6e," \u2014 "),dD=n(x6e,"A",{href:!0});var urt=s(dD);Myo=r(urt,"GPTNeoForSequenceClassification"),urt.forEach(t),Eyo=r(x6e," (GPT Neo model)"),x6e.forEach(t),Cyo=i(N),$1=n(N,"LI",{});var $6e=s($1);ece=n($6e,"STRONG",{});var _rt=s(ece);wyo=r(_rt,"gptj"),_rt.forEach(t),Ayo=r($6e," \u2014 "),cD=n($6e,"A",{href:!0});var brt=s(cD);yyo=r(brt,"GPTJForSequenceClassification"),brt.forEach(t),Lyo=r($6e," (GPT-J model)"),$6e.forEach(t),xyo=i(N),k1=n(N,"LI",{});var k6e=s(k1);oce=n(k6e,"STRONG",{});var vrt=s(oce);$yo=r(vrt,"ibert"),vrt.forEach(t),kyo=r(k6e," \u2014 "),fD=n(k6e,"A",{href:!0});var Frt=s(fD);Syo=r(Frt,"IBertForSequenceClassification"),Frt.forEach(t),Ryo=r(k6e," (I-BERT model)"),k6e.forEach(t),Byo=i(N),S1=n(N,"LI",{});var S6e=s(S1);rce=n(S6e,"STRONG",{});var Trt=s(rce);Pyo=r(Trt,"layoutlm"),Trt.forEach(t),Iyo=r(S6e," \u2014 "),mD=n(S6e,"A",{href:!0});var Mrt=s(mD);qyo=r(Mrt,"LayoutLMForSequenceClassification"),Mrt.forEach(t),Nyo=r(S6e," (LayoutLM model)"),S6e.forEach(t),jyo=i(N),R1=n(N,"LI",{});var R6e=s(R1);tce=n(R6e,"STRONG",{});var Ert=s(tce);Dyo=r(Ert,"layoutlmv2"),Ert.forEach(t),Gyo=r(R6e," \u2014 "),gD=n(R6e,"A",{href:!0});var Crt=s(gD);Oyo=r(Crt,"LayoutLMv2ForSequenceClassification"),Crt.forEach(t),Vyo=r(R6e," (LayoutLMv2 model)"),R6e.forEach(t),Xyo=i(N),B1=n(N,"LI",{});var B6e=s(B1);ace=n(B6e,"STRONG",{});var wrt=s(ace);zyo=r(wrt,"led"),wrt.forEach(t),Qyo=r(B6e," \u2014 "),hD=n(B6e,"A",{href:!0});var Art=s(hD);Wyo=r(Art,"LEDForSequenceClassification"),Art.forEach(t),Hyo=r(B6e," (LED model)"),B6e.forEach(t),Uyo=i(N),P1=n(N,"LI",{});var P6e=s(P1);nce=n(P6e,"STRONG",{});var yrt=s(nce);Jyo=r(yrt,"longformer"),yrt.forEach(t),Yyo=r(P6e," \u2014 "),pD=n(P6e,"A",{href:!0});var Lrt=s(pD);Kyo=r(Lrt,"LongformerForSequenceClassification"),Lrt.forEach(t),Zyo=r(P6e," (Longformer model)"),P6e.forEach(t),eLo=i(N),I1=n(N,"LI",{});var I6e=s(I1);sce=n(I6e,"STRONG",{});var xrt=s(sce);oLo=r(xrt,"mbart"),xrt.forEach(t),rLo=r(I6e," \u2014 "),uD=n(I6e,"A",{href:!0});var $rt=s(uD);tLo=r($rt,"MBartForSequenceClassification"),$rt.forEach(t),aLo=r(I6e," (mBART model)"),I6e.forEach(t),nLo=i(N),q1=n(N,"LI",{});var q6e=s(q1);lce=n(q6e,"STRONG",{});var krt=s(lce);sLo=r(krt,"megatron-bert"),krt.forEach(t),lLo=r(q6e," \u2014 "),_D=n(q6e,"A",{href:!0});var Srt=s(_D);iLo=r(Srt,"MegatronBertForSequenceClassification"),Srt.forEach(t),dLo=r(q6e," (MegatronBert model)"),q6e.forEach(t),cLo=i(N),N1=n(N,"LI",{});var N6e=s(N1);ice=n(N6e,"STRONG",{});var Rrt=s(ice);fLo=r(Rrt,"mobilebert"),Rrt.forEach(t),mLo=r(N6e," \u2014 "),bD=n(N6e,"A",{href:!0});var Brt=s(bD);gLo=r(Brt,"MobileBertForSequenceClassification"),Brt.forEach(t),hLo=r(N6e," (MobileBERT model)"),N6e.forEach(t),pLo=i(N),j1=n(N,"LI",{});var j6e=s(j1);dce=n(j6e,"STRONG",{});var Prt=s(dce);uLo=r(Prt,"mpnet"),Prt.forEach(t),_Lo=r(j6e," \u2014 "),vD=n(j6e,"A",{href:!0});var Irt=s(vD);bLo=r(Irt,"MPNetForSequenceClassification"),Irt.forEach(t),vLo=r(j6e," (MPNet model)"),j6e.forEach(t),FLo=i(N),D1=n(N,"LI",{});var D6e=s(D1);cce=n(D6e,"STRONG",{});var qrt=s(cce);TLo=r(qrt,"nystromformer"),qrt.forEach(t),MLo=r(D6e," \u2014 "),FD=n(D6e,"A",{href:!0});var Nrt=s(FD);ELo=r(Nrt,"NystromformerForSequenceClassification"),Nrt.forEach(t),CLo=r(D6e," (Nystromformer model)"),D6e.forEach(t),wLo=i(N),G1=n(N,"LI",{});var G6e=s(G1);fce=n(G6e,"STRONG",{});var jrt=s(fce);ALo=r(jrt,"openai-gpt"),jrt.forEach(t),yLo=r(G6e," \u2014 "),TD=n(G6e,"A",{href:!0});var Drt=s(TD);LLo=r(Drt,"OpenAIGPTForSequenceClassification"),Drt.forEach(t),xLo=r(G6e," (OpenAI GPT model)"),G6e.forEach(t),$Lo=i(N),O1=n(N,"LI",{});var O6e=s(O1);mce=n(O6e,"STRONG",{});var Grt=s(mce);kLo=r(Grt,"perceiver"),Grt.forEach(t),SLo=r(O6e," \u2014 "),MD=n(O6e,"A",{href:!0});var Ort=s(MD);RLo=r(Ort,"PerceiverForSequenceClassification"),Ort.forEach(t),BLo=r(O6e," (Perceiver model)"),O6e.forEach(t),PLo=i(N),V1=n(N,"LI",{});var V6e=s(V1);gce=n(V6e,"STRONG",{});var Vrt=s(gce);ILo=r(Vrt,"plbart"),Vrt.forEach(t),qLo=r(V6e," \u2014 "),ED=n(V6e,"A",{href:!0});var Xrt=s(ED);NLo=r(Xrt,"PLBartForSequenceClassification"),Xrt.forEach(t),jLo=r(V6e," (PLBart model)"),V6e.forEach(t),DLo=i(N),X1=n(N,"LI",{});var X6e=s(X1);hce=n(X6e,"STRONG",{});var zrt=s(hce);GLo=r(zrt,"qdqbert"),zrt.forEach(t),OLo=r(X6e," \u2014 "),CD=n(X6e,"A",{href:!0});var Qrt=s(CD);VLo=r(Qrt,"QDQBertForSequenceClassification"),Qrt.forEach(t),XLo=r(X6e," (QDQBert model)"),X6e.forEach(t),zLo=i(N),z1=n(N,"LI",{});var z6e=s(z1);pce=n(z6e,"STRONG",{});var Wrt=s(pce);QLo=r(Wrt,"reformer"),Wrt.forEach(t),WLo=r(z6e," \u2014 "),wD=n(z6e,"A",{href:!0});var Hrt=s(wD);HLo=r(Hrt,"ReformerForSequenceClassification"),Hrt.forEach(t),ULo=r(z6e," (Reformer model)"),z6e.forEach(t),JLo=i(N),Q1=n(N,"LI",{});var Q6e=s(Q1);uce=n(Q6e,"STRONG",{});var Urt=s(uce);YLo=r(Urt,"rembert"),Urt.forEach(t),KLo=r(Q6e," \u2014 "),AD=n(Q6e,"A",{href:!0});var Jrt=s(AD);ZLo=r(Jrt,"RemBertForSequenceClassification"),Jrt.forEach(t),e8o=r(Q6e," (RemBERT model)"),Q6e.forEach(t),o8o=i(N),W1=n(N,"LI",{});var W6e=s(W1);_ce=n(W6e,"STRONG",{});var Yrt=s(_ce);r8o=r(Yrt,"roberta"),Yrt.forEach(t),t8o=r(W6e," \u2014 "),yD=n(W6e,"A",{href:!0});var Krt=s(yD);a8o=r(Krt,"RobertaForSequenceClassification"),Krt.forEach(t),n8o=r(W6e," (RoBERTa model)"),W6e.forEach(t),s8o=i(N),H1=n(N,"LI",{});var H6e=s(H1);bce=n(H6e,"STRONG",{});var Zrt=s(bce);l8o=r(Zrt,"roformer"),Zrt.forEach(t),i8o=r(H6e," \u2014 "),LD=n(H6e,"A",{href:!0});var ett=s(LD);d8o=r(ett,"RoFormerForSequenceClassification"),ett.forEach(t),c8o=r(H6e," (RoFormer model)"),H6e.forEach(t),f8o=i(N),U1=n(N,"LI",{});var U6e=s(U1);vce=n(U6e,"STRONG",{});var ott=s(vce);m8o=r(ott,"squeezebert"),ott.forEach(t),g8o=r(U6e," \u2014 "),xD=n(U6e,"A",{href:!0});var rtt=s(xD);h8o=r(rtt,"SqueezeBertForSequenceClassification"),rtt.forEach(t),p8o=r(U6e," (SqueezeBERT model)"),U6e.forEach(t),u8o=i(N),J1=n(N,"LI",{});var J6e=s(J1);Fce=n(J6e,"STRONG",{});var ttt=s(Fce);_8o=r(ttt,"tapas"),ttt.forEach(t),b8o=r(J6e," \u2014 "),$D=n(J6e,"A",{href:!0});var att=s($D);v8o=r(att,"TapasForSequenceClassification"),att.forEach(t),F8o=r(J6e," (TAPAS model)"),J6e.forEach(t),T8o=i(N),Y1=n(N,"LI",{});var Y6e=s(Y1);Tce=n(Y6e,"STRONG",{});var ntt=s(Tce);M8o=r(ntt,"tapex"),ntt.forEach(t),E8o=r(Y6e," \u2014 "),kD=n(Y6e,"A",{href:!0});var stt=s(kD);C8o=r(stt,"BartForSequenceClassification"),stt.forEach(t),w8o=r(Y6e," (TAPEX model)"),Y6e.forEach(t),A8o=i(N),K1=n(N,"LI",{});var K6e=s(K1);Mce=n(K6e,"STRONG",{});var ltt=s(Mce);y8o=r(ltt,"transfo-xl"),ltt.forEach(t),L8o=r(K6e," \u2014 "),SD=n(K6e,"A",{href:!0});var itt=s(SD);x8o=r(itt,"TransfoXLForSequenceClassification"),itt.forEach(t),$8o=r(K6e," (Transformer-XL model)"),K6e.forEach(t),k8o=i(N),Z1=n(N,"LI",{});var Z6e=s(Z1);Ece=n(Z6e,"STRONG",{});var dtt=s(Ece);S8o=r(dtt,"xlm"),dtt.forEach(t),R8o=r(Z6e," \u2014 "),RD=n(Z6e,"A",{href:!0});var ctt=s(RD);B8o=r(ctt,"XLMForSequenceClassification"),ctt.forEach(t),P8o=r(Z6e," (XLM model)"),Z6e.forEach(t),I8o=i(N),eb=n(N,"LI",{});var eye=s(eb);Cce=n(eye,"STRONG",{});var ftt=s(Cce);q8o=r(ftt,"xlm-roberta"),ftt.forEach(t),N8o=r(eye," \u2014 "),BD=n(eye,"A",{href:!0});var mtt=s(BD);j8o=r(mtt,"XLMRobertaForSequenceClassification"),mtt.forEach(t),D8o=r(eye," (XLM-RoBERTa model)"),eye.forEach(t),G8o=i(N),ob=n(N,"LI",{});var oye=s(ob);wce=n(oye,"STRONG",{});var gtt=s(wce);O8o=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),V8o=r(oye," \u2014 "),PD=n(oye,"A",{href:!0});var htt=s(PD);X8o=r(htt,"XLMRobertaXLForSequenceClassification"),htt.forEach(t),z8o=r(oye," (XLM-RoBERTa-XL model)"),oye.forEach(t),Q8o=i(N),rb=n(N,"LI",{});var rye=s(rb);Ace=n(rye,"STRONG",{});var ptt=s(Ace);W8o=r(ptt,"xlnet"),ptt.forEach(t),H8o=r(rye," \u2014 "),ID=n(rye,"A",{href:!0});var utt=s(ID);U8o=r(utt,"XLNetForSequenceClassification"),utt.forEach(t),J8o=r(rye," (XLNet model)"),rye.forEach(t),Y8o=i(N),tb=n(N,"LI",{});var tye=s(tb);yce=n(tye,"STRONG",{});var _tt=s(yce);K8o=r(_tt,"yoso"),_tt.forEach(t),Z8o=r(tye," \u2014 "),qD=n(tye,"A",{href:!0});var btt=s(qD);exo=r(btt,"YosoForSequenceClassification"),btt.forEach(t),oxo=r(tye," (YOSO model)"),tye.forEach(t),N.forEach(t),rxo=i(aa),ab=n(aa,"P",{});var aye=s(ab);txo=r(aye,"The model is set in evaluation mode by default using "),Lce=n(aye,"CODE",{});var vtt=s(Lce);axo=r(vtt,"model.eval()"),vtt.forEach(t),nxo=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=n(aye,"CODE",{});var Ftt=s(xce);sxo=r(Ftt,"model.train()"),Ftt.forEach(t),aye.forEach(t),lxo=i(aa),T(nb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),vPe=i(f),ji=n(f,"H2",{class:!0});var Eqe=s(ji);sb=n(Eqe,"A",{id:!0,class:!0,href:!0});var Ttt=s(sb);$ce=n(Ttt,"SPAN",{});var Mtt=s($ce);T(DA.$$.fragment,Mtt),Mtt.forEach(t),Ttt.forEach(t),ixo=i(Eqe),kce=n(Eqe,"SPAN",{});var Ett=s(kce);dxo=r(Ett,"AutoModelForMultipleChoice"),Ett.forEach(t),Eqe.forEach(t),FPe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(GA.$$.fragment,zs),cxo=i(zs),Di=n(zs,"P",{});var YY=s(Di);fxo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ND=n(YY,"A",{href:!0});var Ctt=s(ND);mxo=r(Ctt,"from_pretrained()"),Ctt.forEach(t),gxo=r(YY," class method or the "),jD=n(YY,"A",{href:!0});var wtt=s(jD);hxo=r(wtt,"from_config()"),wtt.forEach(t),pxo=r(YY,` class
method.`),YY.forEach(t),uxo=i(zs),OA=n(zs,"P",{});var Cqe=s(OA);_xo=r(Cqe,"This class cannot be instantiated directly using "),Sce=n(Cqe,"CODE",{});var Att=s(Sce);bxo=r(Att,"__init__()"),Att.forEach(t),vxo=r(Cqe," (throws an error)."),Cqe.forEach(t),Fxo=i(zs),lt=n(zs,"DIV",{class:!0});var ZC=s(lt);T(VA.$$.fragment,ZC),Txo=i(ZC),Rce=n(ZC,"P",{});var ytt=s(Rce);Mxo=r(ytt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ytt.forEach(t),Exo=i(ZC),Gi=n(ZC,"P",{});var KY=s(Gi);Cxo=r(KY,`Note:
Loading a model from its configuration file does `),Bce=n(KY,"STRONG",{});var Ltt=s(Bce);wxo=r(Ltt,"not"),Ltt.forEach(t),Axo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=n(KY,"A",{href:!0});var xtt=s(DD);yxo=r(xtt,"from_pretrained()"),xtt.forEach(t),Lxo=r(KY," to load the model weights."),KY.forEach(t),xxo=i(ZC),T(lb.$$.fragment,ZC),ZC.forEach(t),$xo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(XA.$$.fragment,na),kxo=i(na),Pce=n(na,"P",{});var $tt=s(Pce);Sxo=r($tt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$tt.forEach(t),Rxo=i(na),Sa=n(na,"P",{});var e3=s(Sa);Bxo=r(e3,"The model class to instantiate is selected based on the "),Ice=n(e3,"CODE",{});var ktt=s(Ice);Pxo=r(ktt,"model_type"),ktt.forEach(t),Ixo=r(e3,` property of the config object (either
passed as an argument or loaded from `),qce=n(e3,"CODE",{});var Stt=s(qce);qxo=r(Stt,"pretrained_model_name_or_path"),Stt.forEach(t),Nxo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=n(e3,"CODE",{});var Rtt=s(Nce);jxo=r(Rtt,"pretrained_model_name_or_path"),Rtt.forEach(t),Dxo=r(e3,":"),e3.forEach(t),Gxo=i(na),Y=n(na,"UL",{});var K=s(Y);ib=n(K,"LI",{});var nye=s(ib);jce=n(nye,"STRONG",{});var Btt=s(jce);Oxo=r(Btt,"albert"),Btt.forEach(t),Vxo=r(nye," \u2014 "),GD=n(nye,"A",{href:!0});var Ptt=s(GD);Xxo=r(Ptt,"AlbertForMultipleChoice"),Ptt.forEach(t),zxo=r(nye," (ALBERT model)"),nye.forEach(t),Qxo=i(K),db=n(K,"LI",{});var sye=s(db);Dce=n(sye,"STRONG",{});var Itt=s(Dce);Wxo=r(Itt,"bert"),Itt.forEach(t),Hxo=r(sye," \u2014 "),OD=n(sye,"A",{href:!0});var qtt=s(OD);Uxo=r(qtt,"BertForMultipleChoice"),qtt.forEach(t),Jxo=r(sye," (BERT model)"),sye.forEach(t),Yxo=i(K),cb=n(K,"LI",{});var lye=s(cb);Gce=n(lye,"STRONG",{});var Ntt=s(Gce);Kxo=r(Ntt,"big_bird"),Ntt.forEach(t),Zxo=r(lye," \u2014 "),VD=n(lye,"A",{href:!0});var jtt=s(VD);e$o=r(jtt,"BigBirdForMultipleChoice"),jtt.forEach(t),o$o=r(lye," (BigBird model)"),lye.forEach(t),r$o=i(K),fb=n(K,"LI",{});var iye=s(fb);Oce=n(iye,"STRONG",{});var Dtt=s(Oce);t$o=r(Dtt,"camembert"),Dtt.forEach(t),a$o=r(iye," \u2014 "),XD=n(iye,"A",{href:!0});var Gtt=s(XD);n$o=r(Gtt,"CamembertForMultipleChoice"),Gtt.forEach(t),s$o=r(iye," (CamemBERT model)"),iye.forEach(t),l$o=i(K),mb=n(K,"LI",{});var dye=s(mb);Vce=n(dye,"STRONG",{});var Ott=s(Vce);i$o=r(Ott,"canine"),Ott.forEach(t),d$o=r(dye," \u2014 "),zD=n(dye,"A",{href:!0});var Vtt=s(zD);c$o=r(Vtt,"CanineForMultipleChoice"),Vtt.forEach(t),f$o=r(dye," (Canine model)"),dye.forEach(t),m$o=i(K),gb=n(K,"LI",{});var cye=s(gb);Xce=n(cye,"STRONG",{});var Xtt=s(Xce);g$o=r(Xtt,"convbert"),Xtt.forEach(t),h$o=r(cye," \u2014 "),QD=n(cye,"A",{href:!0});var ztt=s(QD);p$o=r(ztt,"ConvBertForMultipleChoice"),ztt.forEach(t),u$o=r(cye," (ConvBERT model)"),cye.forEach(t),_$o=i(K),hb=n(K,"LI",{});var fye=s(hb);zce=n(fye,"STRONG",{});var Qtt=s(zce);b$o=r(Qtt,"data2vec-text"),Qtt.forEach(t),v$o=r(fye," \u2014 "),WD=n(fye,"A",{href:!0});var Wtt=s(WD);F$o=r(Wtt,"Data2VecTextForMultipleChoice"),Wtt.forEach(t),T$o=r(fye," (Data2VecText model)"),fye.forEach(t),M$o=i(K),pb=n(K,"LI",{});var mye=s(pb);Qce=n(mye,"STRONG",{});var Htt=s(Qce);E$o=r(Htt,"distilbert"),Htt.forEach(t),C$o=r(mye," \u2014 "),HD=n(mye,"A",{href:!0});var Utt=s(HD);w$o=r(Utt,"DistilBertForMultipleChoice"),Utt.forEach(t),A$o=r(mye," (DistilBERT model)"),mye.forEach(t),y$o=i(K),ub=n(K,"LI",{});var gye=s(ub);Wce=n(gye,"STRONG",{});var Jtt=s(Wce);L$o=r(Jtt,"electra"),Jtt.forEach(t),x$o=r(gye," \u2014 "),UD=n(gye,"A",{href:!0});var Ytt=s(UD);$$o=r(Ytt,"ElectraForMultipleChoice"),Ytt.forEach(t),k$o=r(gye," (ELECTRA model)"),gye.forEach(t),S$o=i(K),_b=n(K,"LI",{});var hye=s(_b);Hce=n(hye,"STRONG",{});var Ktt=s(Hce);R$o=r(Ktt,"flaubert"),Ktt.forEach(t),B$o=r(hye," \u2014 "),JD=n(hye,"A",{href:!0});var Ztt=s(JD);P$o=r(Ztt,"FlaubertForMultipleChoice"),Ztt.forEach(t),I$o=r(hye," (FlauBERT model)"),hye.forEach(t),q$o=i(K),bb=n(K,"LI",{});var pye=s(bb);Uce=n(pye,"STRONG",{});var eat=s(Uce);N$o=r(eat,"fnet"),eat.forEach(t),j$o=r(pye," \u2014 "),YD=n(pye,"A",{href:!0});var oat=s(YD);D$o=r(oat,"FNetForMultipleChoice"),oat.forEach(t),G$o=r(pye," (FNet model)"),pye.forEach(t),O$o=i(K),vb=n(K,"LI",{});var uye=s(vb);Jce=n(uye,"STRONG",{});var rat=s(Jce);V$o=r(rat,"funnel"),rat.forEach(t),X$o=r(uye," \u2014 "),KD=n(uye,"A",{href:!0});var tat=s(KD);z$o=r(tat,"FunnelForMultipleChoice"),tat.forEach(t),Q$o=r(uye," (Funnel Transformer model)"),uye.forEach(t),W$o=i(K),Fb=n(K,"LI",{});var _ye=s(Fb);Yce=n(_ye,"STRONG",{});var aat=s(Yce);H$o=r(aat,"ibert"),aat.forEach(t),U$o=r(_ye," \u2014 "),ZD=n(_ye,"A",{href:!0});var nat=s(ZD);J$o=r(nat,"IBertForMultipleChoice"),nat.forEach(t),Y$o=r(_ye," (I-BERT model)"),_ye.forEach(t),K$o=i(K),Tb=n(K,"LI",{});var bye=s(Tb);Kce=n(bye,"STRONG",{});var sat=s(Kce);Z$o=r(sat,"longformer"),sat.forEach(t),eko=r(bye," \u2014 "),eG=n(bye,"A",{href:!0});var lat=s(eG);oko=r(lat,"LongformerForMultipleChoice"),lat.forEach(t),rko=r(bye," (Longformer model)"),bye.forEach(t),tko=i(K),Mb=n(K,"LI",{});var vye=s(Mb);Zce=n(vye,"STRONG",{});var iat=s(Zce);ako=r(iat,"megatron-bert"),iat.forEach(t),nko=r(vye," \u2014 "),oG=n(vye,"A",{href:!0});var dat=s(oG);sko=r(dat,"MegatronBertForMultipleChoice"),dat.forEach(t),lko=r(vye," (MegatronBert model)"),vye.forEach(t),iko=i(K),Eb=n(K,"LI",{});var Fye=s(Eb);efe=n(Fye,"STRONG",{});var cat=s(efe);dko=r(cat,"mobilebert"),cat.forEach(t),cko=r(Fye," \u2014 "),rG=n(Fye,"A",{href:!0});var fat=s(rG);fko=r(fat,"MobileBertForMultipleChoice"),fat.forEach(t),mko=r(Fye," (MobileBERT model)"),Fye.forEach(t),gko=i(K),Cb=n(K,"LI",{});var Tye=s(Cb);ofe=n(Tye,"STRONG",{});var mat=s(ofe);hko=r(mat,"mpnet"),mat.forEach(t),pko=r(Tye," \u2014 "),tG=n(Tye,"A",{href:!0});var gat=s(tG);uko=r(gat,"MPNetForMultipleChoice"),gat.forEach(t),_ko=r(Tye," (MPNet model)"),Tye.forEach(t),bko=i(K),wb=n(K,"LI",{});var Mye=s(wb);rfe=n(Mye,"STRONG",{});var hat=s(rfe);vko=r(hat,"nystromformer"),hat.forEach(t),Fko=r(Mye," \u2014 "),aG=n(Mye,"A",{href:!0});var pat=s(aG);Tko=r(pat,"NystromformerForMultipleChoice"),pat.forEach(t),Mko=r(Mye," (Nystromformer model)"),Mye.forEach(t),Eko=i(K),Ab=n(K,"LI",{});var Eye=s(Ab);tfe=n(Eye,"STRONG",{});var uat=s(tfe);Cko=r(uat,"qdqbert"),uat.forEach(t),wko=r(Eye," \u2014 "),nG=n(Eye,"A",{href:!0});var _at=s(nG);Ako=r(_at,"QDQBertForMultipleChoice"),_at.forEach(t),yko=r(Eye," (QDQBert model)"),Eye.forEach(t),Lko=i(K),yb=n(K,"LI",{});var Cye=s(yb);afe=n(Cye,"STRONG",{});var bat=s(afe);xko=r(bat,"rembert"),bat.forEach(t),$ko=r(Cye," \u2014 "),sG=n(Cye,"A",{href:!0});var vat=s(sG);kko=r(vat,"RemBertForMultipleChoice"),vat.forEach(t),Sko=r(Cye," (RemBERT model)"),Cye.forEach(t),Rko=i(K),Lb=n(K,"LI",{});var wye=s(Lb);nfe=n(wye,"STRONG",{});var Fat=s(nfe);Bko=r(Fat,"roberta"),Fat.forEach(t),Pko=r(wye," \u2014 "),lG=n(wye,"A",{href:!0});var Tat=s(lG);Iko=r(Tat,"RobertaForMultipleChoice"),Tat.forEach(t),qko=r(wye," (RoBERTa model)"),wye.forEach(t),Nko=i(K),xb=n(K,"LI",{});var Aye=s(xb);sfe=n(Aye,"STRONG",{});var Mat=s(sfe);jko=r(Mat,"roformer"),Mat.forEach(t),Dko=r(Aye," \u2014 "),iG=n(Aye,"A",{href:!0});var Eat=s(iG);Gko=r(Eat,"RoFormerForMultipleChoice"),Eat.forEach(t),Oko=r(Aye," (RoFormer model)"),Aye.forEach(t),Vko=i(K),$b=n(K,"LI",{});var yye=s($b);lfe=n(yye,"STRONG",{});var Cat=s(lfe);Xko=r(Cat,"squeezebert"),Cat.forEach(t),zko=r(yye," \u2014 "),dG=n(yye,"A",{href:!0});var wat=s(dG);Qko=r(wat,"SqueezeBertForMultipleChoice"),wat.forEach(t),Wko=r(yye," (SqueezeBERT model)"),yye.forEach(t),Hko=i(K),kb=n(K,"LI",{});var Lye=s(kb);ife=n(Lye,"STRONG",{});var Aat=s(ife);Uko=r(Aat,"xlm"),Aat.forEach(t),Jko=r(Lye," \u2014 "),cG=n(Lye,"A",{href:!0});var yat=s(cG);Yko=r(yat,"XLMForMultipleChoice"),yat.forEach(t),Kko=r(Lye," (XLM model)"),Lye.forEach(t),Zko=i(K),Sb=n(K,"LI",{});var xye=s(Sb);dfe=n(xye,"STRONG",{});var Lat=s(dfe);eSo=r(Lat,"xlm-roberta"),Lat.forEach(t),oSo=r(xye," \u2014 "),fG=n(xye,"A",{href:!0});var xat=s(fG);rSo=r(xat,"XLMRobertaForMultipleChoice"),xat.forEach(t),tSo=r(xye," (XLM-RoBERTa model)"),xye.forEach(t),aSo=i(K),Rb=n(K,"LI",{});var $ye=s(Rb);cfe=n($ye,"STRONG",{});var $at=s(cfe);nSo=r($at,"xlm-roberta-xl"),$at.forEach(t),sSo=r($ye," \u2014 "),mG=n($ye,"A",{href:!0});var kat=s(mG);lSo=r(kat,"XLMRobertaXLForMultipleChoice"),kat.forEach(t),iSo=r($ye," (XLM-RoBERTa-XL model)"),$ye.forEach(t),dSo=i(K),Bb=n(K,"LI",{});var kye=s(Bb);ffe=n(kye,"STRONG",{});var Sat=s(ffe);cSo=r(Sat,"xlnet"),Sat.forEach(t),fSo=r(kye," \u2014 "),gG=n(kye,"A",{href:!0});var Rat=s(gG);mSo=r(Rat,"XLNetForMultipleChoice"),Rat.forEach(t),gSo=r(kye," (XLNet model)"),kye.forEach(t),hSo=i(K),Pb=n(K,"LI",{});var Sye=s(Pb);mfe=n(Sye,"STRONG",{});var Bat=s(mfe);pSo=r(Bat,"yoso"),Bat.forEach(t),uSo=r(Sye," \u2014 "),hG=n(Sye,"A",{href:!0});var Pat=s(hG);_So=r(Pat,"YosoForMultipleChoice"),Pat.forEach(t),bSo=r(Sye," (YOSO model)"),Sye.forEach(t),K.forEach(t),vSo=i(na),Ib=n(na,"P",{});var Rye=s(Ib);FSo=r(Rye,"The model is set in evaluation mode by default using "),gfe=n(Rye,"CODE",{});var Iat=s(gfe);TSo=r(Iat,"model.eval()"),Iat.forEach(t),MSo=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=n(Rye,"CODE",{});var qat=s(hfe);ESo=r(qat,"model.train()"),qat.forEach(t),Rye.forEach(t),CSo=i(na),T(qb.$$.fragment,na),na.forEach(t),zs.forEach(t),TPe=i(f),Oi=n(f,"H2",{class:!0});var wqe=s(Oi);Nb=n(wqe,"A",{id:!0,class:!0,href:!0});var Nat=s(Nb);pfe=n(Nat,"SPAN",{});var jat=s(pfe);T(zA.$$.fragment,jat),jat.forEach(t),Nat.forEach(t),wSo=i(wqe),ufe=n(wqe,"SPAN",{});var Dat=s(ufe);ASo=r(Dat,"AutoModelForNextSentencePrediction"),Dat.forEach(t),wqe.forEach(t),MPe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(QA.$$.fragment,Qs),ySo=i(Qs),Vi=n(Qs,"P",{});var ZY=s(Vi);LSo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pG=n(ZY,"A",{href:!0});var Gat=s(pG);xSo=r(Gat,"from_pretrained()"),Gat.forEach(t),$So=r(ZY," class method or the "),uG=n(ZY,"A",{href:!0});var Oat=s(uG);kSo=r(Oat,"from_config()"),Oat.forEach(t),SSo=r(ZY,` class
method.`),ZY.forEach(t),RSo=i(Qs),WA=n(Qs,"P",{});var Aqe=s(WA);BSo=r(Aqe,"This class cannot be instantiated directly using "),_fe=n(Aqe,"CODE",{});var Vat=s(_fe);PSo=r(Vat,"__init__()"),Vat.forEach(t),ISo=r(Aqe," (throws an error)."),Aqe.forEach(t),qSo=i(Qs),it=n(Qs,"DIV",{class:!0});var o3=s(it);T(HA.$$.fragment,o3),NSo=i(o3),bfe=n(o3,"P",{});var Xat=s(bfe);jSo=r(Xat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xat.forEach(t),DSo=i(o3),Xi=n(o3,"P",{});var eK=s(Xi);GSo=r(eK,`Note:
Loading a model from its configuration file does `),vfe=n(eK,"STRONG",{});var zat=s(vfe);OSo=r(zat,"not"),zat.forEach(t),VSo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=n(eK,"A",{href:!0});var Qat=s(_G);XSo=r(Qat,"from_pretrained()"),Qat.forEach(t),zSo=r(eK," to load the model weights."),eK.forEach(t),QSo=i(o3),T(jb.$$.fragment,o3),o3.forEach(t),WSo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(UA.$$.fragment,sa),HSo=i(sa),Ffe=n(sa,"P",{});var Wat=s(Ffe);USo=r(Wat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wat.forEach(t),JSo=i(sa),Ra=n(sa,"P",{});var r3=s(Ra);YSo=r(r3,"The model class to instantiate is selected based on the "),Tfe=n(r3,"CODE",{});var Hat=s(Tfe);KSo=r(Hat,"model_type"),Hat.forEach(t),ZSo=r(r3,` property of the config object (either
passed as an argument or loaded from `),Mfe=n(r3,"CODE",{});var Uat=s(Mfe);eRo=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),oRo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Efe=n(r3,"CODE",{});var Jat=s(Efe);rRo=r(Jat,"pretrained_model_name_or_path"),Jat.forEach(t),tRo=r(r3,":"),r3.forEach(t),aRo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Db=n(Ws,"LI",{});var Bye=s(Db);Cfe=n(Bye,"STRONG",{});var Yat=s(Cfe);nRo=r(Yat,"bert"),Yat.forEach(t),sRo=r(Bye," \u2014 "),bG=n(Bye,"A",{href:!0});var Kat=s(bG);lRo=r(Kat,"BertForNextSentencePrediction"),Kat.forEach(t),iRo=r(Bye," (BERT model)"),Bye.forEach(t),dRo=i(Ws),Gb=n(Ws,"LI",{});var Pye=s(Gb);wfe=n(Pye,"STRONG",{});var Zat=s(wfe);cRo=r(Zat,"fnet"),Zat.forEach(t),fRo=r(Pye," \u2014 "),vG=n(Pye,"A",{href:!0});var ent=s(vG);mRo=r(ent,"FNetForNextSentencePrediction"),ent.forEach(t),gRo=r(Pye," (FNet model)"),Pye.forEach(t),hRo=i(Ws),Ob=n(Ws,"LI",{});var Iye=s(Ob);Afe=n(Iye,"STRONG",{});var ont=s(Afe);pRo=r(ont,"megatron-bert"),ont.forEach(t),uRo=r(Iye," \u2014 "),FG=n(Iye,"A",{href:!0});var rnt=s(FG);_Ro=r(rnt,"MegatronBertForNextSentencePrediction"),rnt.forEach(t),bRo=r(Iye," (MegatronBert model)"),Iye.forEach(t),vRo=i(Ws),Vb=n(Ws,"LI",{});var qye=s(Vb);yfe=n(qye,"STRONG",{});var tnt=s(yfe);FRo=r(tnt,"mobilebert"),tnt.forEach(t),TRo=r(qye," \u2014 "),TG=n(qye,"A",{href:!0});var ant=s(TG);MRo=r(ant,"MobileBertForNextSentencePrediction"),ant.forEach(t),ERo=r(qye," (MobileBERT model)"),qye.forEach(t),CRo=i(Ws),Xb=n(Ws,"LI",{});var Nye=s(Xb);Lfe=n(Nye,"STRONG",{});var nnt=s(Lfe);wRo=r(nnt,"qdqbert"),nnt.forEach(t),ARo=r(Nye," \u2014 "),MG=n(Nye,"A",{href:!0});var snt=s(MG);yRo=r(snt,"QDQBertForNextSentencePrediction"),snt.forEach(t),LRo=r(Nye," (QDQBert model)"),Nye.forEach(t),Ws.forEach(t),xRo=i(sa),zb=n(sa,"P",{});var jye=s(zb);$Ro=r(jye,"The model is set in evaluation mode by default using "),xfe=n(jye,"CODE",{});var lnt=s(xfe);kRo=r(lnt,"model.eval()"),lnt.forEach(t),SRo=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=n(jye,"CODE",{});var int=s($fe);RRo=r(int,"model.train()"),int.forEach(t),jye.forEach(t),BRo=i(sa),T(Qb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),EPe=i(f),zi=n(f,"H2",{class:!0});var yqe=s(zi);Wb=n(yqe,"A",{id:!0,class:!0,href:!0});var dnt=s(Wb);kfe=n(dnt,"SPAN",{});var cnt=s(kfe);T(JA.$$.fragment,cnt),cnt.forEach(t),dnt.forEach(t),PRo=i(yqe),Sfe=n(yqe,"SPAN",{});var fnt=s(Sfe);IRo=r(fnt,"AutoModelForTokenClassification"),fnt.forEach(t),yqe.forEach(t),CPe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(YA.$$.fragment,Hs),qRo=i(Hs),Qi=n(Hs,"P",{});var oK=s(Qi);NRo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EG=n(oK,"A",{href:!0});var mnt=s(EG);jRo=r(mnt,"from_pretrained()"),mnt.forEach(t),DRo=r(oK," class method or the "),CG=n(oK,"A",{href:!0});var gnt=s(CG);GRo=r(gnt,"from_config()"),gnt.forEach(t),ORo=r(oK,` class
method.`),oK.forEach(t),VRo=i(Hs),KA=n(Hs,"P",{});var Lqe=s(KA);XRo=r(Lqe,"This class cannot be instantiated directly using "),Rfe=n(Lqe,"CODE",{});var hnt=s(Rfe);zRo=r(hnt,"__init__()"),hnt.forEach(t),QRo=r(Lqe," (throws an error)."),Lqe.forEach(t),WRo=i(Hs),dt=n(Hs,"DIV",{class:!0});var t3=s(dt);T(ZA.$$.fragment,t3),HRo=i(t3),Bfe=n(t3,"P",{});var pnt=s(Bfe);URo=r(pnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pnt.forEach(t),JRo=i(t3),Wi=n(t3,"P",{});var rK=s(Wi);YRo=r(rK,`Note:
Loading a model from its configuration file does `),Pfe=n(rK,"STRONG",{});var unt=s(Pfe);KRo=r(unt,"not"),unt.forEach(t),ZRo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(rK,"A",{href:!0});var _nt=s(wG);eBo=r(_nt,"from_pretrained()"),_nt.forEach(t),oBo=r(rK," to load the model weights."),rK.forEach(t),rBo=i(t3),T(Hb.$$.fragment,t3),t3.forEach(t),tBo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(e6.$$.fragment,la),aBo=i(la),Ife=n(la,"P",{});var bnt=s(Ife);nBo=r(bnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bnt.forEach(t),sBo=i(la),Ba=n(la,"P",{});var a3=s(Ba);lBo=r(a3,"The model class to instantiate is selected based on the "),qfe=n(a3,"CODE",{});var vnt=s(qfe);iBo=r(vnt,"model_type"),vnt.forEach(t),dBo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Nfe=n(a3,"CODE",{});var Fnt=s(Nfe);cBo=r(Fnt,"pretrained_model_name_or_path"),Fnt.forEach(t),fBo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=n(a3,"CODE",{});var Tnt=s(jfe);mBo=r(Tnt,"pretrained_model_name_or_path"),Tnt.forEach(t),gBo=r(a3,":"),a3.forEach(t),hBo=i(la),U=n(la,"UL",{});var J=s(U);Ub=n(J,"LI",{});var Dye=s(Ub);Dfe=n(Dye,"STRONG",{});var Mnt=s(Dfe);pBo=r(Mnt,"albert"),Mnt.forEach(t),uBo=r(Dye," \u2014 "),AG=n(Dye,"A",{href:!0});var Ent=s(AG);_Bo=r(Ent,"AlbertForTokenClassification"),Ent.forEach(t),bBo=r(Dye," (ALBERT model)"),Dye.forEach(t),vBo=i(J),Jb=n(J,"LI",{});var Gye=s(Jb);Gfe=n(Gye,"STRONG",{});var Cnt=s(Gfe);FBo=r(Cnt,"bert"),Cnt.forEach(t),TBo=r(Gye," \u2014 "),yG=n(Gye,"A",{href:!0});var wnt=s(yG);MBo=r(wnt,"BertForTokenClassification"),wnt.forEach(t),EBo=r(Gye," (BERT model)"),Gye.forEach(t),CBo=i(J),Yb=n(J,"LI",{});var Oye=s(Yb);Ofe=n(Oye,"STRONG",{});var Ant=s(Ofe);wBo=r(Ant,"big_bird"),Ant.forEach(t),ABo=r(Oye," \u2014 "),LG=n(Oye,"A",{href:!0});var ynt=s(LG);yBo=r(ynt,"BigBirdForTokenClassification"),ynt.forEach(t),LBo=r(Oye," (BigBird model)"),Oye.forEach(t),xBo=i(J),Kb=n(J,"LI",{});var Vye=s(Kb);Vfe=n(Vye,"STRONG",{});var Lnt=s(Vfe);$Bo=r(Lnt,"camembert"),Lnt.forEach(t),kBo=r(Vye," \u2014 "),xG=n(Vye,"A",{href:!0});var xnt=s(xG);SBo=r(xnt,"CamembertForTokenClassification"),xnt.forEach(t),RBo=r(Vye," (CamemBERT model)"),Vye.forEach(t),BBo=i(J),Zb=n(J,"LI",{});var Xye=s(Zb);Xfe=n(Xye,"STRONG",{});var $nt=s(Xfe);PBo=r($nt,"canine"),$nt.forEach(t),IBo=r(Xye," \u2014 "),$G=n(Xye,"A",{href:!0});var knt=s($G);qBo=r(knt,"CanineForTokenClassification"),knt.forEach(t),NBo=r(Xye," (Canine model)"),Xye.forEach(t),jBo=i(J),ev=n(J,"LI",{});var zye=s(ev);zfe=n(zye,"STRONG",{});var Snt=s(zfe);DBo=r(Snt,"convbert"),Snt.forEach(t),GBo=r(zye," \u2014 "),kG=n(zye,"A",{href:!0});var Rnt=s(kG);OBo=r(Rnt,"ConvBertForTokenClassification"),Rnt.forEach(t),VBo=r(zye," (ConvBERT model)"),zye.forEach(t),XBo=i(J),ov=n(J,"LI",{});var Qye=s(ov);Qfe=n(Qye,"STRONG",{});var Bnt=s(Qfe);zBo=r(Bnt,"data2vec-text"),Bnt.forEach(t),QBo=r(Qye," \u2014 "),SG=n(Qye,"A",{href:!0});var Pnt=s(SG);WBo=r(Pnt,"Data2VecTextForTokenClassification"),Pnt.forEach(t),HBo=r(Qye," (Data2VecText model)"),Qye.forEach(t),UBo=i(J),rv=n(J,"LI",{});var Wye=s(rv);Wfe=n(Wye,"STRONG",{});var Int=s(Wfe);JBo=r(Int,"deberta"),Int.forEach(t),YBo=r(Wye," \u2014 "),RG=n(Wye,"A",{href:!0});var qnt=s(RG);KBo=r(qnt,"DebertaForTokenClassification"),qnt.forEach(t),ZBo=r(Wye," (DeBERTa model)"),Wye.forEach(t),ePo=i(J),tv=n(J,"LI",{});var Hye=s(tv);Hfe=n(Hye,"STRONG",{});var Nnt=s(Hfe);oPo=r(Nnt,"deberta-v2"),Nnt.forEach(t),rPo=r(Hye," \u2014 "),BG=n(Hye,"A",{href:!0});var jnt=s(BG);tPo=r(jnt,"DebertaV2ForTokenClassification"),jnt.forEach(t),aPo=r(Hye," (DeBERTa-v2 model)"),Hye.forEach(t),nPo=i(J),av=n(J,"LI",{});var Uye=s(av);Ufe=n(Uye,"STRONG",{});var Dnt=s(Ufe);sPo=r(Dnt,"distilbert"),Dnt.forEach(t),lPo=r(Uye," \u2014 "),PG=n(Uye,"A",{href:!0});var Gnt=s(PG);iPo=r(Gnt,"DistilBertForTokenClassification"),Gnt.forEach(t),dPo=r(Uye," (DistilBERT model)"),Uye.forEach(t),cPo=i(J),nv=n(J,"LI",{});var Jye=s(nv);Jfe=n(Jye,"STRONG",{});var Ont=s(Jfe);fPo=r(Ont,"electra"),Ont.forEach(t),mPo=r(Jye," \u2014 "),IG=n(Jye,"A",{href:!0});var Vnt=s(IG);gPo=r(Vnt,"ElectraForTokenClassification"),Vnt.forEach(t),hPo=r(Jye," (ELECTRA model)"),Jye.forEach(t),pPo=i(J),sv=n(J,"LI",{});var Yye=s(sv);Yfe=n(Yye,"STRONG",{});var Xnt=s(Yfe);uPo=r(Xnt,"flaubert"),Xnt.forEach(t),_Po=r(Yye," \u2014 "),qG=n(Yye,"A",{href:!0});var znt=s(qG);bPo=r(znt,"FlaubertForTokenClassification"),znt.forEach(t),vPo=r(Yye," (FlauBERT model)"),Yye.forEach(t),FPo=i(J),lv=n(J,"LI",{});var Kye=s(lv);Kfe=n(Kye,"STRONG",{});var Qnt=s(Kfe);TPo=r(Qnt,"fnet"),Qnt.forEach(t),MPo=r(Kye," \u2014 "),NG=n(Kye,"A",{href:!0});var Wnt=s(NG);EPo=r(Wnt,"FNetForTokenClassification"),Wnt.forEach(t),CPo=r(Kye," (FNet model)"),Kye.forEach(t),wPo=i(J),iv=n(J,"LI",{});var Zye=s(iv);Zfe=n(Zye,"STRONG",{});var Hnt=s(Zfe);APo=r(Hnt,"funnel"),Hnt.forEach(t),yPo=r(Zye," \u2014 "),jG=n(Zye,"A",{href:!0});var Unt=s(jG);LPo=r(Unt,"FunnelForTokenClassification"),Unt.forEach(t),xPo=r(Zye," (Funnel Transformer model)"),Zye.forEach(t),$Po=i(J),dv=n(J,"LI",{});var eLe=s(dv);eme=n(eLe,"STRONG",{});var Jnt=s(eme);kPo=r(Jnt,"gpt2"),Jnt.forEach(t),SPo=r(eLe," \u2014 "),DG=n(eLe,"A",{href:!0});var Ynt=s(DG);RPo=r(Ynt,"GPT2ForTokenClassification"),Ynt.forEach(t),BPo=r(eLe," (OpenAI GPT-2 model)"),eLe.forEach(t),PPo=i(J),cv=n(J,"LI",{});var oLe=s(cv);ome=n(oLe,"STRONG",{});var Knt=s(ome);IPo=r(Knt,"ibert"),Knt.forEach(t),qPo=r(oLe," \u2014 "),GG=n(oLe,"A",{href:!0});var Znt=s(GG);NPo=r(Znt,"IBertForTokenClassification"),Znt.forEach(t),jPo=r(oLe," (I-BERT model)"),oLe.forEach(t),DPo=i(J),fv=n(J,"LI",{});var rLe=s(fv);rme=n(rLe,"STRONG",{});var est=s(rme);GPo=r(est,"layoutlm"),est.forEach(t),OPo=r(rLe," \u2014 "),OG=n(rLe,"A",{href:!0});var ost=s(OG);VPo=r(ost,"LayoutLMForTokenClassification"),ost.forEach(t),XPo=r(rLe," (LayoutLM model)"),rLe.forEach(t),zPo=i(J),mv=n(J,"LI",{});var tLe=s(mv);tme=n(tLe,"STRONG",{});var rst=s(tme);QPo=r(rst,"layoutlmv2"),rst.forEach(t),WPo=r(tLe," \u2014 "),VG=n(tLe,"A",{href:!0});var tst=s(VG);HPo=r(tst,"LayoutLMv2ForTokenClassification"),tst.forEach(t),UPo=r(tLe," (LayoutLMv2 model)"),tLe.forEach(t),JPo=i(J),gv=n(J,"LI",{});var aLe=s(gv);ame=n(aLe,"STRONG",{});var ast=s(ame);YPo=r(ast,"longformer"),ast.forEach(t),KPo=r(aLe," \u2014 "),XG=n(aLe,"A",{href:!0});var nst=s(XG);ZPo=r(nst,"LongformerForTokenClassification"),nst.forEach(t),eIo=r(aLe," (Longformer model)"),aLe.forEach(t),oIo=i(J),hv=n(J,"LI",{});var nLe=s(hv);nme=n(nLe,"STRONG",{});var sst=s(nme);rIo=r(sst,"megatron-bert"),sst.forEach(t),tIo=r(nLe," \u2014 "),zG=n(nLe,"A",{href:!0});var lst=s(zG);aIo=r(lst,"MegatronBertForTokenClassification"),lst.forEach(t),nIo=r(nLe," (MegatronBert model)"),nLe.forEach(t),sIo=i(J),pv=n(J,"LI",{});var sLe=s(pv);sme=n(sLe,"STRONG",{});var ist=s(sme);lIo=r(ist,"mobilebert"),ist.forEach(t),iIo=r(sLe," \u2014 "),QG=n(sLe,"A",{href:!0});var dst=s(QG);dIo=r(dst,"MobileBertForTokenClassification"),dst.forEach(t),cIo=r(sLe," (MobileBERT model)"),sLe.forEach(t),fIo=i(J),uv=n(J,"LI",{});var lLe=s(uv);lme=n(lLe,"STRONG",{});var cst=s(lme);mIo=r(cst,"mpnet"),cst.forEach(t),gIo=r(lLe," \u2014 "),WG=n(lLe,"A",{href:!0});var fst=s(WG);hIo=r(fst,"MPNetForTokenClassification"),fst.forEach(t),pIo=r(lLe," (MPNet model)"),lLe.forEach(t),uIo=i(J),_v=n(J,"LI",{});var iLe=s(_v);ime=n(iLe,"STRONG",{});var mst=s(ime);_Io=r(mst,"nystromformer"),mst.forEach(t),bIo=r(iLe," \u2014 "),HG=n(iLe,"A",{href:!0});var gst=s(HG);vIo=r(gst,"NystromformerForTokenClassification"),gst.forEach(t),FIo=r(iLe," (Nystromformer model)"),iLe.forEach(t),TIo=i(J),bv=n(J,"LI",{});var dLe=s(bv);dme=n(dLe,"STRONG",{});var hst=s(dme);MIo=r(hst,"qdqbert"),hst.forEach(t),EIo=r(dLe," \u2014 "),UG=n(dLe,"A",{href:!0});var pst=s(UG);CIo=r(pst,"QDQBertForTokenClassification"),pst.forEach(t),wIo=r(dLe," (QDQBert model)"),dLe.forEach(t),AIo=i(J),vv=n(J,"LI",{});var cLe=s(vv);cme=n(cLe,"STRONG",{});var ust=s(cme);yIo=r(ust,"rembert"),ust.forEach(t),LIo=r(cLe," \u2014 "),JG=n(cLe,"A",{href:!0});var _st=s(JG);xIo=r(_st,"RemBertForTokenClassification"),_st.forEach(t),$Io=r(cLe," (RemBERT model)"),cLe.forEach(t),kIo=i(J),Fv=n(J,"LI",{});var fLe=s(Fv);fme=n(fLe,"STRONG",{});var bst=s(fme);SIo=r(bst,"roberta"),bst.forEach(t),RIo=r(fLe," \u2014 "),YG=n(fLe,"A",{href:!0});var vst=s(YG);BIo=r(vst,"RobertaForTokenClassification"),vst.forEach(t),PIo=r(fLe," (RoBERTa model)"),fLe.forEach(t),IIo=i(J),Tv=n(J,"LI",{});var mLe=s(Tv);mme=n(mLe,"STRONG",{});var Fst=s(mme);qIo=r(Fst,"roformer"),Fst.forEach(t),NIo=r(mLe," \u2014 "),KG=n(mLe,"A",{href:!0});var Tst=s(KG);jIo=r(Tst,"RoFormerForTokenClassification"),Tst.forEach(t),DIo=r(mLe," (RoFormer model)"),mLe.forEach(t),GIo=i(J),Mv=n(J,"LI",{});var gLe=s(Mv);gme=n(gLe,"STRONG",{});var Mst=s(gme);OIo=r(Mst,"squeezebert"),Mst.forEach(t),VIo=r(gLe," \u2014 "),ZG=n(gLe,"A",{href:!0});var Est=s(ZG);XIo=r(Est,"SqueezeBertForTokenClassification"),Est.forEach(t),zIo=r(gLe," (SqueezeBERT model)"),gLe.forEach(t),QIo=i(J),Ev=n(J,"LI",{});var hLe=s(Ev);hme=n(hLe,"STRONG",{});var Cst=s(hme);WIo=r(Cst,"xlm"),Cst.forEach(t),HIo=r(hLe," \u2014 "),eO=n(hLe,"A",{href:!0});var wst=s(eO);UIo=r(wst,"XLMForTokenClassification"),wst.forEach(t),JIo=r(hLe," (XLM model)"),hLe.forEach(t),YIo=i(J),Cv=n(J,"LI",{});var pLe=s(Cv);pme=n(pLe,"STRONG",{});var Ast=s(pme);KIo=r(Ast,"xlm-roberta"),Ast.forEach(t),ZIo=r(pLe," \u2014 "),oO=n(pLe,"A",{href:!0});var yst=s(oO);eqo=r(yst,"XLMRobertaForTokenClassification"),yst.forEach(t),oqo=r(pLe," (XLM-RoBERTa model)"),pLe.forEach(t),rqo=i(J),wv=n(J,"LI",{});var uLe=s(wv);ume=n(uLe,"STRONG",{});var Lst=s(ume);tqo=r(Lst,"xlm-roberta-xl"),Lst.forEach(t),aqo=r(uLe," \u2014 "),rO=n(uLe,"A",{href:!0});var xst=s(rO);nqo=r(xst,"XLMRobertaXLForTokenClassification"),xst.forEach(t),sqo=r(uLe," (XLM-RoBERTa-XL model)"),uLe.forEach(t),lqo=i(J),Av=n(J,"LI",{});var _Le=s(Av);_me=n(_Le,"STRONG",{});var $st=s(_me);iqo=r($st,"xlnet"),$st.forEach(t),dqo=r(_Le," \u2014 "),tO=n(_Le,"A",{href:!0});var kst=s(tO);cqo=r(kst,"XLNetForTokenClassification"),kst.forEach(t),fqo=r(_Le," (XLNet model)"),_Le.forEach(t),mqo=i(J),yv=n(J,"LI",{});var bLe=s(yv);bme=n(bLe,"STRONG",{});var Sst=s(bme);gqo=r(Sst,"yoso"),Sst.forEach(t),hqo=r(bLe," \u2014 "),aO=n(bLe,"A",{href:!0});var Rst=s(aO);pqo=r(Rst,"YosoForTokenClassification"),Rst.forEach(t),uqo=r(bLe," (YOSO model)"),bLe.forEach(t),J.forEach(t),_qo=i(la),Lv=n(la,"P",{});var vLe=s(Lv);bqo=r(vLe,"The model is set in evaluation mode by default using "),vme=n(vLe,"CODE",{});var Bst=s(vme);vqo=r(Bst,"model.eval()"),Bst.forEach(t),Fqo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=n(vLe,"CODE",{});var Pst=s(Fme);Tqo=r(Pst,"model.train()"),Pst.forEach(t),vLe.forEach(t),Mqo=i(la),T(xv.$$.fragment,la),la.forEach(t),Hs.forEach(t),wPe=i(f),Hi=n(f,"H2",{class:!0});var xqe=s(Hi);$v=n(xqe,"A",{id:!0,class:!0,href:!0});var Ist=s($v);Tme=n(Ist,"SPAN",{});var qst=s(Tme);T(o6.$$.fragment,qst),qst.forEach(t),Ist.forEach(t),Eqo=i(xqe),Mme=n(xqe,"SPAN",{});var Nst=s(Mme);Cqo=r(Nst,"AutoModelForQuestionAnswering"),Nst.forEach(t),xqe.forEach(t),APe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(r6.$$.fragment,Us),wqo=i(Us),Ui=n(Us,"P",{});var tK=s(Ui);Aqo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nO=n(tK,"A",{href:!0});var jst=s(nO);yqo=r(jst,"from_pretrained()"),jst.forEach(t),Lqo=r(tK," class method or the "),sO=n(tK,"A",{href:!0});var Dst=s(sO);xqo=r(Dst,"from_config()"),Dst.forEach(t),$qo=r(tK,` class
method.`),tK.forEach(t),kqo=i(Us),t6=n(Us,"P",{});var $qe=s(t6);Sqo=r($qe,"This class cannot be instantiated directly using "),Eme=n($qe,"CODE",{});var Gst=s(Eme);Rqo=r(Gst,"__init__()"),Gst.forEach(t),Bqo=r($qe," (throws an error)."),$qe.forEach(t),Pqo=i(Us),ct=n(Us,"DIV",{class:!0});var n3=s(ct);T(a6.$$.fragment,n3),Iqo=i(n3),Cme=n(n3,"P",{});var Ost=s(Cme);qqo=r(Ost,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ost.forEach(t),Nqo=i(n3),Ji=n(n3,"P",{});var aK=s(Ji);jqo=r(aK,`Note:
Loading a model from its configuration file does `),wme=n(aK,"STRONG",{});var Vst=s(wme);Dqo=r(Vst,"not"),Vst.forEach(t),Gqo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(aK,"A",{href:!0});var Xst=s(lO);Oqo=r(Xst,"from_pretrained()"),Xst.forEach(t),Vqo=r(aK," to load the model weights."),aK.forEach(t),Xqo=i(n3),T(kv.$$.fragment,n3),n3.forEach(t),zqo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(n6.$$.fragment,ia),Qqo=i(ia),Ame=n(ia,"P",{});var zst=s(Ame);Wqo=r(zst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zst.forEach(t),Hqo=i(ia),Pa=n(ia,"P",{});var s3=s(Pa);Uqo=r(s3,"The model class to instantiate is selected based on the "),yme=n(s3,"CODE",{});var Qst=s(yme);Jqo=r(Qst,"model_type"),Qst.forEach(t),Yqo=r(s3,` property of the config object (either
passed as an argument or loaded from `),Lme=n(s3,"CODE",{});var Wst=s(Lme);Kqo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),Zqo=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=n(s3,"CODE",{});var Hst=s(xme);eNo=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),oNo=r(s3,":"),s3.forEach(t),rNo=i(ia),O=n(ia,"UL",{});var X=s(O);Sv=n(X,"LI",{});var FLe=s(Sv);$me=n(FLe,"STRONG",{});var Ust=s($me);tNo=r(Ust,"albert"),Ust.forEach(t),aNo=r(FLe," \u2014 "),iO=n(FLe,"A",{href:!0});var Jst=s(iO);nNo=r(Jst,"AlbertForQuestionAnswering"),Jst.forEach(t),sNo=r(FLe," (ALBERT model)"),FLe.forEach(t),lNo=i(X),Rv=n(X,"LI",{});var TLe=s(Rv);kme=n(TLe,"STRONG",{});var Yst=s(kme);iNo=r(Yst,"bart"),Yst.forEach(t),dNo=r(TLe," \u2014 "),dO=n(TLe,"A",{href:!0});var Kst=s(dO);cNo=r(Kst,"BartForQuestionAnswering"),Kst.forEach(t),fNo=r(TLe," (BART model)"),TLe.forEach(t),mNo=i(X),Bv=n(X,"LI",{});var MLe=s(Bv);Sme=n(MLe,"STRONG",{});var Zst=s(Sme);gNo=r(Zst,"bert"),Zst.forEach(t),hNo=r(MLe," \u2014 "),cO=n(MLe,"A",{href:!0});var elt=s(cO);pNo=r(elt,"BertForQuestionAnswering"),elt.forEach(t),uNo=r(MLe," (BERT model)"),MLe.forEach(t),_No=i(X),Pv=n(X,"LI",{});var ELe=s(Pv);Rme=n(ELe,"STRONG",{});var olt=s(Rme);bNo=r(olt,"big_bird"),olt.forEach(t),vNo=r(ELe," \u2014 "),fO=n(ELe,"A",{href:!0});var rlt=s(fO);FNo=r(rlt,"BigBirdForQuestionAnswering"),rlt.forEach(t),TNo=r(ELe," (BigBird model)"),ELe.forEach(t),MNo=i(X),Iv=n(X,"LI",{});var CLe=s(Iv);Bme=n(CLe,"STRONG",{});var tlt=s(Bme);ENo=r(tlt,"bigbird_pegasus"),tlt.forEach(t),CNo=r(CLe," \u2014 "),mO=n(CLe,"A",{href:!0});var alt=s(mO);wNo=r(alt,"BigBirdPegasusForQuestionAnswering"),alt.forEach(t),ANo=r(CLe," (BigBirdPegasus model)"),CLe.forEach(t),yNo=i(X),qv=n(X,"LI",{});var wLe=s(qv);Pme=n(wLe,"STRONG",{});var nlt=s(Pme);LNo=r(nlt,"camembert"),nlt.forEach(t),xNo=r(wLe," \u2014 "),gO=n(wLe,"A",{href:!0});var slt=s(gO);$No=r(slt,"CamembertForQuestionAnswering"),slt.forEach(t),kNo=r(wLe," (CamemBERT model)"),wLe.forEach(t),SNo=i(X),Nv=n(X,"LI",{});var ALe=s(Nv);Ime=n(ALe,"STRONG",{});var llt=s(Ime);RNo=r(llt,"canine"),llt.forEach(t),BNo=r(ALe," \u2014 "),hO=n(ALe,"A",{href:!0});var ilt=s(hO);PNo=r(ilt,"CanineForQuestionAnswering"),ilt.forEach(t),INo=r(ALe," (Canine model)"),ALe.forEach(t),qNo=i(X),jv=n(X,"LI",{});var yLe=s(jv);qme=n(yLe,"STRONG",{});var dlt=s(qme);NNo=r(dlt,"convbert"),dlt.forEach(t),jNo=r(yLe," \u2014 "),pO=n(yLe,"A",{href:!0});var clt=s(pO);DNo=r(clt,"ConvBertForQuestionAnswering"),clt.forEach(t),GNo=r(yLe," (ConvBERT model)"),yLe.forEach(t),ONo=i(X),Dv=n(X,"LI",{});var LLe=s(Dv);Nme=n(LLe,"STRONG",{});var flt=s(Nme);VNo=r(flt,"data2vec-text"),flt.forEach(t),XNo=r(LLe," \u2014 "),uO=n(LLe,"A",{href:!0});var mlt=s(uO);zNo=r(mlt,"Data2VecTextForQuestionAnswering"),mlt.forEach(t),QNo=r(LLe," (Data2VecText model)"),LLe.forEach(t),WNo=i(X),Gv=n(X,"LI",{});var xLe=s(Gv);jme=n(xLe,"STRONG",{});var glt=s(jme);HNo=r(glt,"deberta"),glt.forEach(t),UNo=r(xLe," \u2014 "),_O=n(xLe,"A",{href:!0});var hlt=s(_O);JNo=r(hlt,"DebertaForQuestionAnswering"),hlt.forEach(t),YNo=r(xLe," (DeBERTa model)"),xLe.forEach(t),KNo=i(X),Ov=n(X,"LI",{});var $Le=s(Ov);Dme=n($Le,"STRONG",{});var plt=s(Dme);ZNo=r(plt,"deberta-v2"),plt.forEach(t),ejo=r($Le," \u2014 "),bO=n($Le,"A",{href:!0});var ult=s(bO);ojo=r(ult,"DebertaV2ForQuestionAnswering"),ult.forEach(t),rjo=r($Le," (DeBERTa-v2 model)"),$Le.forEach(t),tjo=i(X),Vv=n(X,"LI",{});var kLe=s(Vv);Gme=n(kLe,"STRONG",{});var _lt=s(Gme);ajo=r(_lt,"distilbert"),_lt.forEach(t),njo=r(kLe," \u2014 "),vO=n(kLe,"A",{href:!0});var blt=s(vO);sjo=r(blt,"DistilBertForQuestionAnswering"),blt.forEach(t),ljo=r(kLe," (DistilBERT model)"),kLe.forEach(t),ijo=i(X),Xv=n(X,"LI",{});var SLe=s(Xv);Ome=n(SLe,"STRONG",{});var vlt=s(Ome);djo=r(vlt,"electra"),vlt.forEach(t),cjo=r(SLe," \u2014 "),FO=n(SLe,"A",{href:!0});var Flt=s(FO);fjo=r(Flt,"ElectraForQuestionAnswering"),Flt.forEach(t),mjo=r(SLe," (ELECTRA model)"),SLe.forEach(t),gjo=i(X),zv=n(X,"LI",{});var RLe=s(zv);Vme=n(RLe,"STRONG",{});var Tlt=s(Vme);hjo=r(Tlt,"flaubert"),Tlt.forEach(t),pjo=r(RLe," \u2014 "),TO=n(RLe,"A",{href:!0});var Mlt=s(TO);ujo=r(Mlt,"FlaubertForQuestionAnsweringSimple"),Mlt.forEach(t),_jo=r(RLe," (FlauBERT model)"),RLe.forEach(t),bjo=i(X),Qv=n(X,"LI",{});var BLe=s(Qv);Xme=n(BLe,"STRONG",{});var Elt=s(Xme);vjo=r(Elt,"fnet"),Elt.forEach(t),Fjo=r(BLe," \u2014 "),MO=n(BLe,"A",{href:!0});var Clt=s(MO);Tjo=r(Clt,"FNetForQuestionAnswering"),Clt.forEach(t),Mjo=r(BLe," (FNet model)"),BLe.forEach(t),Ejo=i(X),Wv=n(X,"LI",{});var PLe=s(Wv);zme=n(PLe,"STRONG",{});var wlt=s(zme);Cjo=r(wlt,"funnel"),wlt.forEach(t),wjo=r(PLe," \u2014 "),EO=n(PLe,"A",{href:!0});var Alt=s(EO);Ajo=r(Alt,"FunnelForQuestionAnswering"),Alt.forEach(t),yjo=r(PLe," (Funnel Transformer model)"),PLe.forEach(t),Ljo=i(X),Hv=n(X,"LI",{});var ILe=s(Hv);Qme=n(ILe,"STRONG",{});var ylt=s(Qme);xjo=r(ylt,"gptj"),ylt.forEach(t),$jo=r(ILe," \u2014 "),CO=n(ILe,"A",{href:!0});var Llt=s(CO);kjo=r(Llt,"GPTJForQuestionAnswering"),Llt.forEach(t),Sjo=r(ILe," (GPT-J model)"),ILe.forEach(t),Rjo=i(X),Uv=n(X,"LI",{});var qLe=s(Uv);Wme=n(qLe,"STRONG",{});var xlt=s(Wme);Bjo=r(xlt,"ibert"),xlt.forEach(t),Pjo=r(qLe," \u2014 "),wO=n(qLe,"A",{href:!0});var $lt=s(wO);Ijo=r($lt,"IBertForQuestionAnswering"),$lt.forEach(t),qjo=r(qLe," (I-BERT model)"),qLe.forEach(t),Njo=i(X),Jv=n(X,"LI",{});var NLe=s(Jv);Hme=n(NLe,"STRONG",{});var klt=s(Hme);jjo=r(klt,"layoutlmv2"),klt.forEach(t),Djo=r(NLe," \u2014 "),AO=n(NLe,"A",{href:!0});var Slt=s(AO);Gjo=r(Slt,"LayoutLMv2ForQuestionAnswering"),Slt.forEach(t),Ojo=r(NLe," (LayoutLMv2 model)"),NLe.forEach(t),Vjo=i(X),Yv=n(X,"LI",{});var jLe=s(Yv);Ume=n(jLe,"STRONG",{});var Rlt=s(Ume);Xjo=r(Rlt,"led"),Rlt.forEach(t),zjo=r(jLe," \u2014 "),yO=n(jLe,"A",{href:!0});var Blt=s(yO);Qjo=r(Blt,"LEDForQuestionAnswering"),Blt.forEach(t),Wjo=r(jLe," (LED model)"),jLe.forEach(t),Hjo=i(X),Kv=n(X,"LI",{});var DLe=s(Kv);Jme=n(DLe,"STRONG",{});var Plt=s(Jme);Ujo=r(Plt,"longformer"),Plt.forEach(t),Jjo=r(DLe," \u2014 "),LO=n(DLe,"A",{href:!0});var Ilt=s(LO);Yjo=r(Ilt,"LongformerForQuestionAnswering"),Ilt.forEach(t),Kjo=r(DLe," (Longformer model)"),DLe.forEach(t),Zjo=i(X),Zv=n(X,"LI",{});var GLe=s(Zv);Yme=n(GLe,"STRONG",{});var qlt=s(Yme);eDo=r(qlt,"lxmert"),qlt.forEach(t),oDo=r(GLe," \u2014 "),xO=n(GLe,"A",{href:!0});var Nlt=s(xO);rDo=r(Nlt,"LxmertForQuestionAnswering"),Nlt.forEach(t),tDo=r(GLe," (LXMERT model)"),GLe.forEach(t),aDo=i(X),eF=n(X,"LI",{});var OLe=s(eF);Kme=n(OLe,"STRONG",{});var jlt=s(Kme);nDo=r(jlt,"mbart"),jlt.forEach(t),sDo=r(OLe," \u2014 "),$O=n(OLe,"A",{href:!0});var Dlt=s($O);lDo=r(Dlt,"MBartForQuestionAnswering"),Dlt.forEach(t),iDo=r(OLe," (mBART model)"),OLe.forEach(t),dDo=i(X),oF=n(X,"LI",{});var VLe=s(oF);Zme=n(VLe,"STRONG",{});var Glt=s(Zme);cDo=r(Glt,"megatron-bert"),Glt.forEach(t),fDo=r(VLe," \u2014 "),kO=n(VLe,"A",{href:!0});var Olt=s(kO);mDo=r(Olt,"MegatronBertForQuestionAnswering"),Olt.forEach(t),gDo=r(VLe," (MegatronBert model)"),VLe.forEach(t),hDo=i(X),rF=n(X,"LI",{});var XLe=s(rF);ege=n(XLe,"STRONG",{});var Vlt=s(ege);pDo=r(Vlt,"mobilebert"),Vlt.forEach(t),uDo=r(XLe," \u2014 "),SO=n(XLe,"A",{href:!0});var Xlt=s(SO);_Do=r(Xlt,"MobileBertForQuestionAnswering"),Xlt.forEach(t),bDo=r(XLe," (MobileBERT model)"),XLe.forEach(t),vDo=i(X),tF=n(X,"LI",{});var zLe=s(tF);oge=n(zLe,"STRONG",{});var zlt=s(oge);FDo=r(zlt,"mpnet"),zlt.forEach(t),TDo=r(zLe," \u2014 "),RO=n(zLe,"A",{href:!0});var Qlt=s(RO);MDo=r(Qlt,"MPNetForQuestionAnswering"),Qlt.forEach(t),EDo=r(zLe," (MPNet model)"),zLe.forEach(t),CDo=i(X),aF=n(X,"LI",{});var QLe=s(aF);rge=n(QLe,"STRONG",{});var Wlt=s(rge);wDo=r(Wlt,"nystromformer"),Wlt.forEach(t),ADo=r(QLe," \u2014 "),BO=n(QLe,"A",{href:!0});var Hlt=s(BO);yDo=r(Hlt,"NystromformerForQuestionAnswering"),Hlt.forEach(t),LDo=r(QLe," (Nystromformer model)"),QLe.forEach(t),xDo=i(X),nF=n(X,"LI",{});var WLe=s(nF);tge=n(WLe,"STRONG",{});var Ult=s(tge);$Do=r(Ult,"qdqbert"),Ult.forEach(t),kDo=r(WLe," \u2014 "),PO=n(WLe,"A",{href:!0});var Jlt=s(PO);SDo=r(Jlt,"QDQBertForQuestionAnswering"),Jlt.forEach(t),RDo=r(WLe," (QDQBert model)"),WLe.forEach(t),BDo=i(X),sF=n(X,"LI",{});var HLe=s(sF);age=n(HLe,"STRONG",{});var Ylt=s(age);PDo=r(Ylt,"reformer"),Ylt.forEach(t),IDo=r(HLe," \u2014 "),IO=n(HLe,"A",{href:!0});var Klt=s(IO);qDo=r(Klt,"ReformerForQuestionAnswering"),Klt.forEach(t),NDo=r(HLe," (Reformer model)"),HLe.forEach(t),jDo=i(X),lF=n(X,"LI",{});var ULe=s(lF);nge=n(ULe,"STRONG",{});var Zlt=s(nge);DDo=r(Zlt,"rembert"),Zlt.forEach(t),GDo=r(ULe," \u2014 "),qO=n(ULe,"A",{href:!0});var eit=s(qO);ODo=r(eit,"RemBertForQuestionAnswering"),eit.forEach(t),VDo=r(ULe," (RemBERT model)"),ULe.forEach(t),XDo=i(X),iF=n(X,"LI",{});var JLe=s(iF);sge=n(JLe,"STRONG",{});var oit=s(sge);zDo=r(oit,"roberta"),oit.forEach(t),QDo=r(JLe," \u2014 "),NO=n(JLe,"A",{href:!0});var rit=s(NO);WDo=r(rit,"RobertaForQuestionAnswering"),rit.forEach(t),HDo=r(JLe," (RoBERTa model)"),JLe.forEach(t),UDo=i(X),dF=n(X,"LI",{});var YLe=s(dF);lge=n(YLe,"STRONG",{});var tit=s(lge);JDo=r(tit,"roformer"),tit.forEach(t),YDo=r(YLe," \u2014 "),jO=n(YLe,"A",{href:!0});var ait=s(jO);KDo=r(ait,"RoFormerForQuestionAnswering"),ait.forEach(t),ZDo=r(YLe," (RoFormer model)"),YLe.forEach(t),eGo=i(X),cF=n(X,"LI",{});var KLe=s(cF);ige=n(KLe,"STRONG",{});var nit=s(ige);oGo=r(nit,"splinter"),nit.forEach(t),rGo=r(KLe," \u2014 "),DO=n(KLe,"A",{href:!0});var sit=s(DO);tGo=r(sit,"SplinterForQuestionAnswering"),sit.forEach(t),aGo=r(KLe," (Splinter model)"),KLe.forEach(t),nGo=i(X),fF=n(X,"LI",{});var ZLe=s(fF);dge=n(ZLe,"STRONG",{});var lit=s(dge);sGo=r(lit,"squeezebert"),lit.forEach(t),lGo=r(ZLe," \u2014 "),GO=n(ZLe,"A",{href:!0});var iit=s(GO);iGo=r(iit,"SqueezeBertForQuestionAnswering"),iit.forEach(t),dGo=r(ZLe," (SqueezeBERT model)"),ZLe.forEach(t),cGo=i(X),mF=n(X,"LI",{});var e8e=s(mF);cge=n(e8e,"STRONG",{});var dit=s(cge);fGo=r(dit,"xlm"),dit.forEach(t),mGo=r(e8e," \u2014 "),OO=n(e8e,"A",{href:!0});var cit=s(OO);gGo=r(cit,"XLMForQuestionAnsweringSimple"),cit.forEach(t),hGo=r(e8e," (XLM model)"),e8e.forEach(t),pGo=i(X),gF=n(X,"LI",{});var o8e=s(gF);fge=n(o8e,"STRONG",{});var fit=s(fge);uGo=r(fit,"xlm-roberta"),fit.forEach(t),_Go=r(o8e," \u2014 "),VO=n(o8e,"A",{href:!0});var mit=s(VO);bGo=r(mit,"XLMRobertaForQuestionAnswering"),mit.forEach(t),vGo=r(o8e," (XLM-RoBERTa model)"),o8e.forEach(t),FGo=i(X),hF=n(X,"LI",{});var r8e=s(hF);mge=n(r8e,"STRONG",{});var git=s(mge);TGo=r(git,"xlm-roberta-xl"),git.forEach(t),MGo=r(r8e," \u2014 "),XO=n(r8e,"A",{href:!0});var hit=s(XO);EGo=r(hit,"XLMRobertaXLForQuestionAnswering"),hit.forEach(t),CGo=r(r8e," (XLM-RoBERTa-XL model)"),r8e.forEach(t),wGo=i(X),pF=n(X,"LI",{});var t8e=s(pF);gge=n(t8e,"STRONG",{});var pit=s(gge);AGo=r(pit,"xlnet"),pit.forEach(t),yGo=r(t8e," \u2014 "),zO=n(t8e,"A",{href:!0});var uit=s(zO);LGo=r(uit,"XLNetForQuestionAnsweringSimple"),uit.forEach(t),xGo=r(t8e," (XLNet model)"),t8e.forEach(t),$Go=i(X),uF=n(X,"LI",{});var a8e=s(uF);hge=n(a8e,"STRONG",{});var _it=s(hge);kGo=r(_it,"yoso"),_it.forEach(t),SGo=r(a8e," \u2014 "),QO=n(a8e,"A",{href:!0});var bit=s(QO);RGo=r(bit,"YosoForQuestionAnswering"),bit.forEach(t),BGo=r(a8e," (YOSO model)"),a8e.forEach(t),X.forEach(t),PGo=i(ia),_F=n(ia,"P",{});var n8e=s(_F);IGo=r(n8e,"The model is set in evaluation mode by default using "),pge=n(n8e,"CODE",{});var vit=s(pge);qGo=r(vit,"model.eval()"),vit.forEach(t),NGo=r(n8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(n8e,"CODE",{});var Fit=s(uge);jGo=r(Fit,"model.train()"),Fit.forEach(t),n8e.forEach(t),DGo=i(ia),T(bF.$$.fragment,ia),ia.forEach(t),Us.forEach(t),yPe=i(f),Yi=n(f,"H2",{class:!0});var kqe=s(Yi);vF=n(kqe,"A",{id:!0,class:!0,href:!0});var Tit=s(vF);_ge=n(Tit,"SPAN",{});var Mit=s(_ge);T(s6.$$.fragment,Mit),Mit.forEach(t),Tit.forEach(t),GGo=i(kqe),bge=n(kqe,"SPAN",{});var Eit=s(bge);OGo=r(Eit,"AutoModelForTableQuestionAnswering"),Eit.forEach(t),kqe.forEach(t),LPe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(l6.$$.fragment,Js),VGo=i(Js),Ki=n(Js,"P",{});var nK=s(Ki);XGo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WO=n(nK,"A",{href:!0});var Cit=s(WO);zGo=r(Cit,"from_pretrained()"),Cit.forEach(t),QGo=r(nK," class method or the "),HO=n(nK,"A",{href:!0});var wit=s(HO);WGo=r(wit,"from_config()"),wit.forEach(t),HGo=r(nK,` class
method.`),nK.forEach(t),UGo=i(Js),i6=n(Js,"P",{});var Sqe=s(i6);JGo=r(Sqe,"This class cannot be instantiated directly using "),vge=n(Sqe,"CODE",{});var Ait=s(vge);YGo=r(Ait,"__init__()"),Ait.forEach(t),KGo=r(Sqe," (throws an error)."),Sqe.forEach(t),ZGo=i(Js),ft=n(Js,"DIV",{class:!0});var l3=s(ft);T(d6.$$.fragment,l3),eOo=i(l3),Fge=n(l3,"P",{});var yit=s(Fge);oOo=r(yit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yit.forEach(t),rOo=i(l3),Zi=n(l3,"P",{});var sK=s(Zi);tOo=r(sK,`Note:
Loading a model from its configuration file does `),Tge=n(sK,"STRONG",{});var Lit=s(Tge);aOo=r(Lit,"not"),Lit.forEach(t),nOo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(sK,"A",{href:!0});var xit=s(UO);sOo=r(xit,"from_pretrained()"),xit.forEach(t),lOo=r(sK," to load the model weights."),sK.forEach(t),iOo=i(l3),T(FF.$$.fragment,l3),l3.forEach(t),dOo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(c6.$$.fragment,da),cOo=i(da),Mge=n(da,"P",{});var $it=s(Mge);fOo=r($it,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$it.forEach(t),mOo=i(da),Ia=n(da,"P",{});var i3=s(Ia);gOo=r(i3,"The model class to instantiate is selected based on the "),Ege=n(i3,"CODE",{});var kit=s(Ege);hOo=r(kit,"model_type"),kit.forEach(t),pOo=r(i3,` property of the config object (either
passed as an argument or loaded from `),Cge=n(i3,"CODE",{});var Sit=s(Cge);uOo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),_Oo=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(i3,"CODE",{});var Rit=s(wge);bOo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),vOo=r(i3,":"),i3.forEach(t),FOo=i(da),Age=n(da,"UL",{});var Bit=s(Age);TF=n(Bit,"LI",{});var s8e=s(TF);yge=n(s8e,"STRONG",{});var Pit=s(yge);TOo=r(Pit,"tapas"),Pit.forEach(t),MOo=r(s8e," \u2014 "),JO=n(s8e,"A",{href:!0});var Iit=s(JO);EOo=r(Iit,"TapasForQuestionAnswering"),Iit.forEach(t),COo=r(s8e," (TAPAS model)"),s8e.forEach(t),Bit.forEach(t),wOo=i(da),MF=n(da,"P",{});var l8e=s(MF);AOo=r(l8e,"The model is set in evaluation mode by default using "),Lge=n(l8e,"CODE",{});var qit=s(Lge);yOo=r(qit,"model.eval()"),qit.forEach(t),LOo=r(l8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(l8e,"CODE",{});var Nit=s(xge);xOo=r(Nit,"model.train()"),Nit.forEach(t),l8e.forEach(t),$Oo=i(da),T(EF.$$.fragment,da),da.forEach(t),Js.forEach(t),xPe=i(f),ed=n(f,"H2",{class:!0});var Rqe=s(ed);CF=n(Rqe,"A",{id:!0,class:!0,href:!0});var jit=s(CF);$ge=n(jit,"SPAN",{});var Dit=s($ge);T(f6.$$.fragment,Dit),Dit.forEach(t),jit.forEach(t),kOo=i(Rqe),kge=n(Rqe,"SPAN",{});var Git=s(kge);SOo=r(Git,"AutoModelForImageClassification"),Git.forEach(t),Rqe.forEach(t),$Pe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(m6.$$.fragment,Ys),ROo=i(Ys),od=n(Ys,"P",{});var lK=s(od);BOo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YO=n(lK,"A",{href:!0});var Oit=s(YO);POo=r(Oit,"from_pretrained()"),Oit.forEach(t),IOo=r(lK," class method or the "),KO=n(lK,"A",{href:!0});var Vit=s(KO);qOo=r(Vit,"from_config()"),Vit.forEach(t),NOo=r(lK,` class
method.`),lK.forEach(t),jOo=i(Ys),g6=n(Ys,"P",{});var Bqe=s(g6);DOo=r(Bqe,"This class cannot be instantiated directly using "),Sge=n(Bqe,"CODE",{});var Xit=s(Sge);GOo=r(Xit,"__init__()"),Xit.forEach(t),OOo=r(Bqe," (throws an error)."),Bqe.forEach(t),VOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var d3=s(mt);T(h6.$$.fragment,d3),XOo=i(d3),Rge=n(d3,"P",{});var zit=s(Rge);zOo=r(zit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zit.forEach(t),QOo=i(d3),rd=n(d3,"P",{});var iK=s(rd);WOo=r(iK,`Note:
Loading a model from its configuration file does `),Bge=n(iK,"STRONG",{});var Qit=s(Bge);HOo=r(Qit,"not"),Qit.forEach(t),UOo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(iK,"A",{href:!0});var Wit=s(ZO);JOo=r(Wit,"from_pretrained()"),Wit.forEach(t),YOo=r(iK," to load the model weights."),iK.forEach(t),KOo=i(d3),T(wF.$$.fragment,d3),d3.forEach(t),ZOo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(p6.$$.fragment,ca),eVo=i(ca),Pge=n(ca,"P",{});var Hit=s(Pge);oVo=r(Hit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hit.forEach(t),rVo=i(ca),qa=n(ca,"P",{});var c3=s(qa);tVo=r(c3,"The model class to instantiate is selected based on the "),Ige=n(c3,"CODE",{});var Uit=s(Ige);aVo=r(Uit,"model_type"),Uit.forEach(t),nVo=r(c3,` property of the config object (either
passed as an argument or loaded from `),qge=n(c3,"CODE",{});var Jit=s(qge);sVo=r(Jit,"pretrained_model_name_or_path"),Jit.forEach(t),lVo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=n(c3,"CODE",{});var Yit=s(Nge);iVo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),dVo=r(c3,":"),c3.forEach(t),cVo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);AF=n(Ee,"LI",{});var i8e=s(AF);jge=n(i8e,"STRONG",{});var Kit=s(jge);fVo=r(Kit,"beit"),Kit.forEach(t),mVo=r(i8e," \u2014 "),eV=n(i8e,"A",{href:!0});var Zit=s(eV);gVo=r(Zit,"BeitForImageClassification"),Zit.forEach(t),hVo=r(i8e," (BEiT model)"),i8e.forEach(t),pVo=i(Ee),yF=n(Ee,"LI",{});var d8e=s(yF);Dge=n(d8e,"STRONG",{});var edt=s(Dge);uVo=r(edt,"convnext"),edt.forEach(t),_Vo=r(d8e," \u2014 "),oV=n(d8e,"A",{href:!0});var odt=s(oV);bVo=r(odt,"ConvNextForImageClassification"),odt.forEach(t),vVo=r(d8e," (ConvNext model)"),d8e.forEach(t),FVo=i(Ee),LF=n(Ee,"LI",{});var c8e=s(LF);Gge=n(c8e,"STRONG",{});var rdt=s(Gge);TVo=r(rdt,"data2vec-vision"),rdt.forEach(t),MVo=r(c8e," \u2014 "),rV=n(c8e,"A",{href:!0});var tdt=s(rV);EVo=r(tdt,"Data2VecVisionForImageClassification"),tdt.forEach(t),CVo=r(c8e," (Data2VecVision model)"),c8e.forEach(t),wVo=i(Ee),Rs=n(Ee,"LI",{});var e$=s(Rs);Oge=n(e$,"STRONG",{});var adt=s(Oge);AVo=r(adt,"deit"),adt.forEach(t),yVo=r(e$," \u2014 "),tV=n(e$,"A",{href:!0});var ndt=s(tV);LVo=r(ndt,"DeiTForImageClassification"),ndt.forEach(t),xVo=r(e$," or "),aV=n(e$,"A",{href:!0});var sdt=s(aV);$Vo=r(sdt,"DeiTForImageClassificationWithTeacher"),sdt.forEach(t),kVo=r(e$," (DeiT model)"),e$.forEach(t),SVo=i(Ee),xF=n(Ee,"LI",{});var f8e=s(xF);Vge=n(f8e,"STRONG",{});var ldt=s(Vge);RVo=r(ldt,"imagegpt"),ldt.forEach(t),BVo=r(f8e," \u2014 "),nV=n(f8e,"A",{href:!0});var idt=s(nV);PVo=r(idt,"ImageGPTForImageClassification"),idt.forEach(t),IVo=r(f8e," (ImageGPT model)"),f8e.forEach(t),qVo=i(Ee),gt=n(Ee,"LI",{});var cf=s(gt);Xge=n(cf,"STRONG",{});var ddt=s(Xge);NVo=r(ddt,"perceiver"),ddt.forEach(t),jVo=r(cf," \u2014 "),sV=n(cf,"A",{href:!0});var cdt=s(sV);DVo=r(cdt,"PerceiverForImageClassificationLearned"),cdt.forEach(t),GVo=r(cf," or "),lV=n(cf,"A",{href:!0});var fdt=s(lV);OVo=r(fdt,"PerceiverForImageClassificationFourier"),fdt.forEach(t),VVo=r(cf," or "),iV=n(cf,"A",{href:!0});var mdt=s(iV);XVo=r(mdt,"PerceiverForImageClassificationConvProcessing"),mdt.forEach(t),zVo=r(cf," (Perceiver model)"),cf.forEach(t),QVo=i(Ee),$F=n(Ee,"LI",{});var m8e=s($F);zge=n(m8e,"STRONG",{});var gdt=s(zge);WVo=r(gdt,"poolformer"),gdt.forEach(t),HVo=r(m8e," \u2014 "),dV=n(m8e,"A",{href:!0});var hdt=s(dV);UVo=r(hdt,"PoolFormerForImageClassification"),hdt.forEach(t),JVo=r(m8e," (PoolFormer model)"),m8e.forEach(t),YVo=i(Ee),kF=n(Ee,"LI",{});var g8e=s(kF);Qge=n(g8e,"STRONG",{});var pdt=s(Qge);KVo=r(pdt,"regnet"),pdt.forEach(t),ZVo=r(g8e," \u2014 "),cV=n(g8e,"A",{href:!0});var udt=s(cV);eXo=r(udt,"RegNetForImageClassification"),udt.forEach(t),oXo=r(g8e," (RegNet model)"),g8e.forEach(t),rXo=i(Ee),SF=n(Ee,"LI",{});var h8e=s(SF);Wge=n(h8e,"STRONG",{});var _dt=s(Wge);tXo=r(_dt,"resnet"),_dt.forEach(t),aXo=r(h8e," \u2014 "),fV=n(h8e,"A",{href:!0});var bdt=s(fV);nXo=r(bdt,"ResNetForImageClassification"),bdt.forEach(t),sXo=r(h8e," (ResNet model)"),h8e.forEach(t),lXo=i(Ee),RF=n(Ee,"LI",{});var p8e=s(RF);Hge=n(p8e,"STRONG",{});var vdt=s(Hge);iXo=r(vdt,"segformer"),vdt.forEach(t),dXo=r(p8e," \u2014 "),mV=n(p8e,"A",{href:!0});var Fdt=s(mV);cXo=r(Fdt,"SegformerForImageClassification"),Fdt.forEach(t),fXo=r(p8e," (SegFormer model)"),p8e.forEach(t),mXo=i(Ee),BF=n(Ee,"LI",{});var u8e=s(BF);Uge=n(u8e,"STRONG",{});var Tdt=s(Uge);gXo=r(Tdt,"swin"),Tdt.forEach(t),hXo=r(u8e," \u2014 "),gV=n(u8e,"A",{href:!0});var Mdt=s(gV);pXo=r(Mdt,"SwinForImageClassification"),Mdt.forEach(t),uXo=r(u8e," (Swin model)"),u8e.forEach(t),_Xo=i(Ee),PF=n(Ee,"LI",{});var _8e=s(PF);Jge=n(_8e,"STRONG",{});var Edt=s(Jge);bXo=r(Edt,"van"),Edt.forEach(t),vXo=r(_8e," \u2014 "),hV=n(_8e,"A",{href:!0});var Cdt=s(hV);FXo=r(Cdt,"VanForImageClassification"),Cdt.forEach(t),TXo=r(_8e," (VAN model)"),_8e.forEach(t),MXo=i(Ee),IF=n(Ee,"LI",{});var b8e=s(IF);Yge=n(b8e,"STRONG",{});var wdt=s(Yge);EXo=r(wdt,"vit"),wdt.forEach(t),CXo=r(b8e," \u2014 "),pV=n(b8e,"A",{href:!0});var Adt=s(pV);wXo=r(Adt,"ViTForImageClassification"),Adt.forEach(t),AXo=r(b8e," (ViT model)"),b8e.forEach(t),Ee.forEach(t),yXo=i(ca),qF=n(ca,"P",{});var v8e=s(qF);LXo=r(v8e,"The model is set in evaluation mode by default using "),Kge=n(v8e,"CODE",{});var ydt=s(Kge);xXo=r(ydt,"model.eval()"),ydt.forEach(t),$Xo=r(v8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=n(v8e,"CODE",{});var Ldt=s(Zge);kXo=r(Ldt,"model.train()"),Ldt.forEach(t),v8e.forEach(t),SXo=i(ca),T(NF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),kPe=i(f),td=n(f,"H2",{class:!0});var Pqe=s(td);jF=n(Pqe,"A",{id:!0,class:!0,href:!0});var xdt=s(jF);ehe=n(xdt,"SPAN",{});var $dt=s(ehe);T(u6.$$.fragment,$dt),$dt.forEach(t),xdt.forEach(t),RXo=i(Pqe),ohe=n(Pqe,"SPAN",{});var kdt=s(ohe);BXo=r(kdt,"AutoModelForVision2Seq"),kdt.forEach(t),Pqe.forEach(t),SPe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(_6.$$.fragment,Ks),PXo=i(Ks),ad=n(Ks,"P",{});var dK=s(ad);IXo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uV=n(dK,"A",{href:!0});var Sdt=s(uV);qXo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),NXo=r(dK," class method or the "),_V=n(dK,"A",{href:!0});var Rdt=s(_V);jXo=r(Rdt,"from_config()"),Rdt.forEach(t),DXo=r(dK,` class
method.`),dK.forEach(t),GXo=i(Ks),b6=n(Ks,"P",{});var Iqe=s(b6);OXo=r(Iqe,"This class cannot be instantiated directly using "),rhe=n(Iqe,"CODE",{});var Bdt=s(rhe);VXo=r(Bdt,"__init__()"),Bdt.forEach(t),XXo=r(Iqe," (throws an error)."),Iqe.forEach(t),zXo=i(Ks),ht=n(Ks,"DIV",{class:!0});var f3=s(ht);T(v6.$$.fragment,f3),QXo=i(f3),the=n(f3,"P",{});var Pdt=s(the);WXo=r(Pdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pdt.forEach(t),HXo=i(f3),nd=n(f3,"P",{});var cK=s(nd);UXo=r(cK,`Note:
Loading a model from its configuration file does `),ahe=n(cK,"STRONG",{});var Idt=s(ahe);JXo=r(Idt,"not"),Idt.forEach(t),YXo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=n(cK,"A",{href:!0});var qdt=s(bV);KXo=r(qdt,"from_pretrained()"),qdt.forEach(t),ZXo=r(cK," to load the model weights."),cK.forEach(t),ezo=i(f3),T(DF.$$.fragment,f3),f3.forEach(t),ozo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(F6.$$.fragment,fa),rzo=i(fa),nhe=n(fa,"P",{});var Ndt=s(nhe);tzo=r(Ndt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ndt.forEach(t),azo=i(fa),Na=n(fa,"P",{});var m3=s(Na);nzo=r(m3,"The model class to instantiate is selected based on the "),she=n(m3,"CODE",{});var jdt=s(she);szo=r(jdt,"model_type"),jdt.forEach(t),lzo=r(m3,` property of the config object (either
passed as an argument or loaded from `),lhe=n(m3,"CODE",{});var Ddt=s(lhe);izo=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),dzo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=n(m3,"CODE",{});var Gdt=s(ihe);czo=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),fzo=r(m3,":"),m3.forEach(t),mzo=i(fa),dhe=n(fa,"UL",{});var Odt=s(dhe);GF=n(Odt,"LI",{});var F8e=s(GF);che=n(F8e,"STRONG",{});var Vdt=s(che);gzo=r(Vdt,"vision-encoder-decoder"),Vdt.forEach(t),hzo=r(F8e," \u2014 "),vV=n(F8e,"A",{href:!0});var Xdt=s(vV);pzo=r(Xdt,"VisionEncoderDecoderModel"),Xdt.forEach(t),uzo=r(F8e," (Vision Encoder decoder model)"),F8e.forEach(t),Odt.forEach(t),_zo=i(fa),OF=n(fa,"P",{});var T8e=s(OF);bzo=r(T8e,"The model is set in evaluation mode by default using "),fhe=n(T8e,"CODE",{});var zdt=s(fhe);vzo=r(zdt,"model.eval()"),zdt.forEach(t),Fzo=r(T8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=n(T8e,"CODE",{});var Qdt=s(mhe);Tzo=r(Qdt,"model.train()"),Qdt.forEach(t),T8e.forEach(t),Mzo=i(fa),T(VF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),RPe=i(f),sd=n(f,"H2",{class:!0});var qqe=s(sd);XF=n(qqe,"A",{id:!0,class:!0,href:!0});var Wdt=s(XF);ghe=n(Wdt,"SPAN",{});var Hdt=s(ghe);T(T6.$$.fragment,Hdt),Hdt.forEach(t),Wdt.forEach(t),Ezo=i(qqe),hhe=n(qqe,"SPAN",{});var Udt=s(hhe);Czo=r(Udt,"AutoModelForAudioClassification"),Udt.forEach(t),qqe.forEach(t),BPe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(M6.$$.fragment,Zs),wzo=i(Zs),ld=n(Zs,"P",{});var fK=s(ld);Azo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FV=n(fK,"A",{href:!0});var Jdt=s(FV);yzo=r(Jdt,"from_pretrained()"),Jdt.forEach(t),Lzo=r(fK," class method or the "),TV=n(fK,"A",{href:!0});var Ydt=s(TV);xzo=r(Ydt,"from_config()"),Ydt.forEach(t),$zo=r(fK,` class
method.`),fK.forEach(t),kzo=i(Zs),E6=n(Zs,"P",{});var Nqe=s(E6);Szo=r(Nqe,"This class cannot be instantiated directly using "),phe=n(Nqe,"CODE",{});var Kdt=s(phe);Rzo=r(Kdt,"__init__()"),Kdt.forEach(t),Bzo=r(Nqe," (throws an error)."),Nqe.forEach(t),Pzo=i(Zs),pt=n(Zs,"DIV",{class:!0});var g3=s(pt);T(C6.$$.fragment,g3),Izo=i(g3),uhe=n(g3,"P",{});var Zdt=s(uhe);qzo=r(Zdt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Zdt.forEach(t),Nzo=i(g3),id=n(g3,"P",{});var mK=s(id);jzo=r(mK,`Note:
Loading a model from its configuration file does `),_he=n(mK,"STRONG",{});var ect=s(_he);Dzo=r(ect,"not"),ect.forEach(t),Gzo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(mK,"A",{href:!0});var oct=s(MV);Ozo=r(oct,"from_pretrained()"),oct.forEach(t),Vzo=r(mK," to load the model weights."),mK.forEach(t),Xzo=i(g3),T(zF.$$.fragment,g3),g3.forEach(t),zzo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(w6.$$.fragment,ma),Qzo=i(ma),bhe=n(ma,"P",{});var rct=s(bhe);Wzo=r(rct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rct.forEach(t),Hzo=i(ma),ja=n(ma,"P",{});var h3=s(ja);Uzo=r(h3,"The model class to instantiate is selected based on the "),vhe=n(h3,"CODE",{});var tct=s(vhe);Jzo=r(tct,"model_type"),tct.forEach(t),Yzo=r(h3,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(h3,"CODE",{});var act=s(Fhe);Kzo=r(act,"pretrained_model_name_or_path"),act.forEach(t),Zzo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=n(h3,"CODE",{});var nct=s(The);eQo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),oQo=r(h3,":"),h3.forEach(t),rQo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);QF=n(bo,"LI",{});var M8e=s(QF);Mhe=n(M8e,"STRONG",{});var sct=s(Mhe);tQo=r(sct,"data2vec-audio"),sct.forEach(t),aQo=r(M8e," \u2014 "),EV=n(M8e,"A",{href:!0});var lct=s(EV);nQo=r(lct,"Data2VecAudioForSequenceClassification"),lct.forEach(t),sQo=r(M8e," (Data2VecAudio model)"),M8e.forEach(t),lQo=i(bo),WF=n(bo,"LI",{});var E8e=s(WF);Ehe=n(E8e,"STRONG",{});var ict=s(Ehe);iQo=r(ict,"hubert"),ict.forEach(t),dQo=r(E8e," \u2014 "),CV=n(E8e,"A",{href:!0});var dct=s(CV);cQo=r(dct,"HubertForSequenceClassification"),dct.forEach(t),fQo=r(E8e," (Hubert model)"),E8e.forEach(t),mQo=i(bo),HF=n(bo,"LI",{});var C8e=s(HF);Che=n(C8e,"STRONG",{});var cct=s(Che);gQo=r(cct,"sew"),cct.forEach(t),hQo=r(C8e," \u2014 "),wV=n(C8e,"A",{href:!0});var fct=s(wV);pQo=r(fct,"SEWForSequenceClassification"),fct.forEach(t),uQo=r(C8e," (SEW model)"),C8e.forEach(t),_Qo=i(bo),UF=n(bo,"LI",{});var w8e=s(UF);whe=n(w8e,"STRONG",{});var mct=s(whe);bQo=r(mct,"sew-d"),mct.forEach(t),vQo=r(w8e," \u2014 "),AV=n(w8e,"A",{href:!0});var gct=s(AV);FQo=r(gct,"SEWDForSequenceClassification"),gct.forEach(t),TQo=r(w8e," (SEW-D model)"),w8e.forEach(t),MQo=i(bo),JF=n(bo,"LI",{});var A8e=s(JF);Ahe=n(A8e,"STRONG",{});var hct=s(Ahe);EQo=r(hct,"unispeech"),hct.forEach(t),CQo=r(A8e," \u2014 "),yV=n(A8e,"A",{href:!0});var pct=s(yV);wQo=r(pct,"UniSpeechForSequenceClassification"),pct.forEach(t),AQo=r(A8e," (UniSpeech model)"),A8e.forEach(t),yQo=i(bo),YF=n(bo,"LI",{});var y8e=s(YF);yhe=n(y8e,"STRONG",{});var uct=s(yhe);LQo=r(uct,"unispeech-sat"),uct.forEach(t),xQo=r(y8e," \u2014 "),LV=n(y8e,"A",{href:!0});var _ct=s(LV);$Qo=r(_ct,"UniSpeechSatForSequenceClassification"),_ct.forEach(t),kQo=r(y8e," (UniSpeechSat model)"),y8e.forEach(t),SQo=i(bo),KF=n(bo,"LI",{});var L8e=s(KF);Lhe=n(L8e,"STRONG",{});var bct=s(Lhe);RQo=r(bct,"wav2vec2"),bct.forEach(t),BQo=r(L8e," \u2014 "),xV=n(L8e,"A",{href:!0});var vct=s(xV);PQo=r(vct,"Wav2Vec2ForSequenceClassification"),vct.forEach(t),IQo=r(L8e," (Wav2Vec2 model)"),L8e.forEach(t),qQo=i(bo),ZF=n(bo,"LI",{});var x8e=s(ZF);xhe=n(x8e,"STRONG",{});var Fct=s(xhe);NQo=r(Fct,"wavlm"),Fct.forEach(t),jQo=r(x8e," \u2014 "),$V=n(x8e,"A",{href:!0});var Tct=s($V);DQo=r(Tct,"WavLMForSequenceClassification"),Tct.forEach(t),GQo=r(x8e," (WavLM model)"),x8e.forEach(t),bo.forEach(t),OQo=i(ma),e0=n(ma,"P",{});var $8e=s(e0);VQo=r($8e,"The model is set in evaluation mode by default using "),$he=n($8e,"CODE",{});var Mct=s($he);XQo=r(Mct,"model.eval()"),Mct.forEach(t),zQo=r($8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n($8e,"CODE",{});var Ect=s(khe);QQo=r(Ect,"model.train()"),Ect.forEach(t),$8e.forEach(t),WQo=i(ma),T(o0.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),PPe=i(f),dd=n(f,"H2",{class:!0});var jqe=s(dd);r0=n(jqe,"A",{id:!0,class:!0,href:!0});var Cct=s(r0);She=n(Cct,"SPAN",{});var wct=s(She);T(A6.$$.fragment,wct),wct.forEach(t),Cct.forEach(t),HQo=i(jqe),Rhe=n(jqe,"SPAN",{});var Act=s(Rhe);UQo=r(Act,"AutoModelForAudioFrameClassification"),Act.forEach(t),jqe.forEach(t),IPe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(y6.$$.fragment,el),JQo=i(el),cd=n(el,"P",{});var gK=s(cd);YQo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),kV=n(gK,"A",{href:!0});var yct=s(kV);KQo=r(yct,"from_pretrained()"),yct.forEach(t),ZQo=r(gK," class method or the "),SV=n(gK,"A",{href:!0});var Lct=s(SV);eWo=r(Lct,"from_config()"),Lct.forEach(t),oWo=r(gK,` class
method.`),gK.forEach(t),rWo=i(el),L6=n(el,"P",{});var Dqe=s(L6);tWo=r(Dqe,"This class cannot be instantiated directly using "),Bhe=n(Dqe,"CODE",{});var xct=s(Bhe);aWo=r(xct,"__init__()"),xct.forEach(t),nWo=r(Dqe," (throws an error)."),Dqe.forEach(t),sWo=i(el),ut=n(el,"DIV",{class:!0});var p3=s(ut);T(x6.$$.fragment,p3),lWo=i(p3),Phe=n(p3,"P",{});var $ct=s(Phe);iWo=r($ct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$ct.forEach(t),dWo=i(p3),fd=n(p3,"P",{});var hK=s(fd);cWo=r(hK,`Note:
Loading a model from its configuration file does `),Ihe=n(hK,"STRONG",{});var kct=s(Ihe);fWo=r(kct,"not"),kct.forEach(t),mWo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(hK,"A",{href:!0});var Sct=s(RV);gWo=r(Sct,"from_pretrained()"),Sct.forEach(t),hWo=r(hK," to load the model weights."),hK.forEach(t),pWo=i(p3),T(t0.$$.fragment,p3),p3.forEach(t),uWo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T($6.$$.fragment,ga),_Wo=i(ga),qhe=n(ga,"P",{});var Rct=s(qhe);bWo=r(Rct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Rct.forEach(t),vWo=i(ga),Da=n(ga,"P",{});var u3=s(Da);FWo=r(u3,"The model class to instantiate is selected based on the "),Nhe=n(u3,"CODE",{});var Bct=s(Nhe);TWo=r(Bct,"model_type"),Bct.forEach(t),MWo=r(u3,` property of the config object (either
passed as an argument or loaded from `),jhe=n(u3,"CODE",{});var Pct=s(jhe);EWo=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),CWo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(u3,"CODE",{});var Ict=s(Dhe);wWo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),AWo=r(u3,":"),u3.forEach(t),yWo=i(ga),Ga=n(ga,"UL",{});var _3=s(Ga);a0=n(_3,"LI",{});var k8e=s(a0);Ghe=n(k8e,"STRONG",{});var qct=s(Ghe);LWo=r(qct,"data2vec-audio"),qct.forEach(t),xWo=r(k8e," \u2014 "),BV=n(k8e,"A",{href:!0});var Nct=s(BV);$Wo=r(Nct,"Data2VecAudioForAudioFrameClassification"),Nct.forEach(t),kWo=r(k8e," (Data2VecAudio model)"),k8e.forEach(t),SWo=i(_3),n0=n(_3,"LI",{});var S8e=s(n0);Ohe=n(S8e,"STRONG",{});var jct=s(Ohe);RWo=r(jct,"unispeech-sat"),jct.forEach(t),BWo=r(S8e," \u2014 "),PV=n(S8e,"A",{href:!0});var Dct=s(PV);PWo=r(Dct,"UniSpeechSatForAudioFrameClassification"),Dct.forEach(t),IWo=r(S8e," (UniSpeechSat model)"),S8e.forEach(t),qWo=i(_3),s0=n(_3,"LI",{});var R8e=s(s0);Vhe=n(R8e,"STRONG",{});var Gct=s(Vhe);NWo=r(Gct,"wav2vec2"),Gct.forEach(t),jWo=r(R8e," \u2014 "),IV=n(R8e,"A",{href:!0});var Oct=s(IV);DWo=r(Oct,"Wav2Vec2ForAudioFrameClassification"),Oct.forEach(t),GWo=r(R8e," (Wav2Vec2 model)"),R8e.forEach(t),OWo=i(_3),l0=n(_3,"LI",{});var B8e=s(l0);Xhe=n(B8e,"STRONG",{});var Vct=s(Xhe);VWo=r(Vct,"wavlm"),Vct.forEach(t),XWo=r(B8e," \u2014 "),qV=n(B8e,"A",{href:!0});var Xct=s(qV);zWo=r(Xct,"WavLMForAudioFrameClassification"),Xct.forEach(t),QWo=r(B8e," (WavLM model)"),B8e.forEach(t),_3.forEach(t),WWo=i(ga),i0=n(ga,"P",{});var P8e=s(i0);HWo=r(P8e,"The model is set in evaluation mode by default using "),zhe=n(P8e,"CODE",{});var zct=s(zhe);UWo=r(zct,"model.eval()"),zct.forEach(t),JWo=r(P8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=n(P8e,"CODE",{});var Qct=s(Qhe);YWo=r(Qct,"model.train()"),Qct.forEach(t),P8e.forEach(t),KWo=i(ga),T(d0.$$.fragment,ga),ga.forEach(t),el.forEach(t),qPe=i(f),md=n(f,"H2",{class:!0});var Gqe=s(md);c0=n(Gqe,"A",{id:!0,class:!0,href:!0});var Wct=s(c0);Whe=n(Wct,"SPAN",{});var Hct=s(Whe);T(k6.$$.fragment,Hct),Hct.forEach(t),Wct.forEach(t),ZWo=i(Gqe),Hhe=n(Gqe,"SPAN",{});var Uct=s(Hhe);eHo=r(Uct,"AutoModelForCTC"),Uct.forEach(t),Gqe.forEach(t),NPe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(S6.$$.fragment,ol),oHo=i(ol),gd=n(ol,"P",{});var pK=s(gd);rHo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NV=n(pK,"A",{href:!0});var Jct=s(NV);tHo=r(Jct,"from_pretrained()"),Jct.forEach(t),aHo=r(pK," class method or the "),jV=n(pK,"A",{href:!0});var Yct=s(jV);nHo=r(Yct,"from_config()"),Yct.forEach(t),sHo=r(pK,` class
method.`),pK.forEach(t),lHo=i(ol),R6=n(ol,"P",{});var Oqe=s(R6);iHo=r(Oqe,"This class cannot be instantiated directly using "),Uhe=n(Oqe,"CODE",{});var Kct=s(Uhe);dHo=r(Kct,"__init__()"),Kct.forEach(t),cHo=r(Oqe," (throws an error)."),Oqe.forEach(t),fHo=i(ol),_t=n(ol,"DIV",{class:!0});var b3=s(_t);T(B6.$$.fragment,b3),mHo=i(b3),Jhe=n(b3,"P",{});var Zct=s(Jhe);gHo=r(Zct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Zct.forEach(t),hHo=i(b3),hd=n(b3,"P",{});var uK=s(hd);pHo=r(uK,`Note:
Loading a model from its configuration file does `),Yhe=n(uK,"STRONG",{});var eft=s(Yhe);uHo=r(eft,"not"),eft.forEach(t),_Ho=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(uK,"A",{href:!0});var oft=s(DV);bHo=r(oft,"from_pretrained()"),oft.forEach(t),vHo=r(uK," to load the model weights."),uK.forEach(t),FHo=i(b3),T(f0.$$.fragment,b3),b3.forEach(t),THo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(P6.$$.fragment,ha),MHo=i(ha),Khe=n(ha,"P",{});var rft=s(Khe);EHo=r(rft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),rft.forEach(t),CHo=i(ha),Oa=n(ha,"P",{});var v3=s(Oa);wHo=r(v3,"The model class to instantiate is selected based on the "),Zhe=n(v3,"CODE",{});var tft=s(Zhe);AHo=r(tft,"model_type"),tft.forEach(t),yHo=r(v3,` property of the config object (either
passed as an argument or loaded from `),epe=n(v3,"CODE",{});var aft=s(epe);LHo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),xHo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(v3,"CODE",{});var nft=s(ope);$Ho=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),kHo=r(v3,":"),v3.forEach(t),SHo=i(ha),je=n(ha,"UL",{});var vo=s(je);m0=n(vo,"LI",{});var I8e=s(m0);rpe=n(I8e,"STRONG",{});var sft=s(rpe);RHo=r(sft,"data2vec-audio"),sft.forEach(t),BHo=r(I8e," \u2014 "),GV=n(I8e,"A",{href:!0});var lft=s(GV);PHo=r(lft,"Data2VecAudioForCTC"),lft.forEach(t),IHo=r(I8e," (Data2VecAudio model)"),I8e.forEach(t),qHo=i(vo),g0=n(vo,"LI",{});var q8e=s(g0);tpe=n(q8e,"STRONG",{});var ift=s(tpe);NHo=r(ift,"hubert"),ift.forEach(t),jHo=r(q8e," \u2014 "),OV=n(q8e,"A",{href:!0});var dft=s(OV);DHo=r(dft,"HubertForCTC"),dft.forEach(t),GHo=r(q8e," (Hubert model)"),q8e.forEach(t),OHo=i(vo),h0=n(vo,"LI",{});var N8e=s(h0);ape=n(N8e,"STRONG",{});var cft=s(ape);VHo=r(cft,"sew"),cft.forEach(t),XHo=r(N8e," \u2014 "),VV=n(N8e,"A",{href:!0});var fft=s(VV);zHo=r(fft,"SEWForCTC"),fft.forEach(t),QHo=r(N8e," (SEW model)"),N8e.forEach(t),WHo=i(vo),p0=n(vo,"LI",{});var j8e=s(p0);npe=n(j8e,"STRONG",{});var mft=s(npe);HHo=r(mft,"sew-d"),mft.forEach(t),UHo=r(j8e," \u2014 "),XV=n(j8e,"A",{href:!0});var gft=s(XV);JHo=r(gft,"SEWDForCTC"),gft.forEach(t),YHo=r(j8e," (SEW-D model)"),j8e.forEach(t),KHo=i(vo),u0=n(vo,"LI",{});var D8e=s(u0);spe=n(D8e,"STRONG",{});var hft=s(spe);ZHo=r(hft,"unispeech"),hft.forEach(t),eUo=r(D8e," \u2014 "),zV=n(D8e,"A",{href:!0});var pft=s(zV);oUo=r(pft,"UniSpeechForCTC"),pft.forEach(t),rUo=r(D8e," (UniSpeech model)"),D8e.forEach(t),tUo=i(vo),_0=n(vo,"LI",{});var G8e=s(_0);lpe=n(G8e,"STRONG",{});var uft=s(lpe);aUo=r(uft,"unispeech-sat"),uft.forEach(t),nUo=r(G8e," \u2014 "),QV=n(G8e,"A",{href:!0});var _ft=s(QV);sUo=r(_ft,"UniSpeechSatForCTC"),_ft.forEach(t),lUo=r(G8e," (UniSpeechSat model)"),G8e.forEach(t),iUo=i(vo),b0=n(vo,"LI",{});var O8e=s(b0);ipe=n(O8e,"STRONG",{});var bft=s(ipe);dUo=r(bft,"wav2vec2"),bft.forEach(t),cUo=r(O8e," \u2014 "),WV=n(O8e,"A",{href:!0});var vft=s(WV);fUo=r(vft,"Wav2Vec2ForCTC"),vft.forEach(t),mUo=r(O8e," (Wav2Vec2 model)"),O8e.forEach(t),gUo=i(vo),v0=n(vo,"LI",{});var V8e=s(v0);dpe=n(V8e,"STRONG",{});var Fft=s(dpe);hUo=r(Fft,"wavlm"),Fft.forEach(t),pUo=r(V8e," \u2014 "),HV=n(V8e,"A",{href:!0});var Tft=s(HV);uUo=r(Tft,"WavLMForCTC"),Tft.forEach(t),_Uo=r(V8e," (WavLM model)"),V8e.forEach(t),vo.forEach(t),bUo=i(ha),F0=n(ha,"P",{});var X8e=s(F0);vUo=r(X8e,"The model is set in evaluation mode by default using "),cpe=n(X8e,"CODE",{});var Mft=s(cpe);FUo=r(Mft,"model.eval()"),Mft.forEach(t),TUo=r(X8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=n(X8e,"CODE",{});var Eft=s(fpe);MUo=r(Eft,"model.train()"),Eft.forEach(t),X8e.forEach(t),EUo=i(ha),T(T0.$$.fragment,ha),ha.forEach(t),ol.forEach(t),jPe=i(f),pd=n(f,"H2",{class:!0});var Vqe=s(pd);M0=n(Vqe,"A",{id:!0,class:!0,href:!0});var Cft=s(M0);mpe=n(Cft,"SPAN",{});var wft=s(mpe);T(I6.$$.fragment,wft),wft.forEach(t),Cft.forEach(t),CUo=i(Vqe),gpe=n(Vqe,"SPAN",{});var Aft=s(gpe);wUo=r(Aft,"AutoModelForSpeechSeq2Seq"),Aft.forEach(t),Vqe.forEach(t),DPe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(q6.$$.fragment,rl),AUo=i(rl),ud=n(rl,"P",{});var _K=s(ud);yUo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UV=n(_K,"A",{href:!0});var yft=s(UV);LUo=r(yft,"from_pretrained()"),yft.forEach(t),xUo=r(_K," class method or the "),JV=n(_K,"A",{href:!0});var Lft=s(JV);$Uo=r(Lft,"from_config()"),Lft.forEach(t),kUo=r(_K,` class
method.`),_K.forEach(t),SUo=i(rl),N6=n(rl,"P",{});var Xqe=s(N6);RUo=r(Xqe,"This class cannot be instantiated directly using "),hpe=n(Xqe,"CODE",{});var xft=s(hpe);BUo=r(xft,"__init__()"),xft.forEach(t),PUo=r(Xqe," (throws an error)."),Xqe.forEach(t),IUo=i(rl),bt=n(rl,"DIV",{class:!0});var F3=s(bt);T(j6.$$.fragment,F3),qUo=i(F3),ppe=n(F3,"P",{});var $ft=s(ppe);NUo=r($ft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$ft.forEach(t),jUo=i(F3),_d=n(F3,"P",{});var bK=s(_d);DUo=r(bK,`Note:
Loading a model from its configuration file does `),upe=n(bK,"STRONG",{});var kft=s(upe);GUo=r(kft,"not"),kft.forEach(t),OUo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(bK,"A",{href:!0});var Sft=s(YV);VUo=r(Sft,"from_pretrained()"),Sft.forEach(t),XUo=r(bK," to load the model weights."),bK.forEach(t),zUo=i(F3),T(E0.$$.fragment,F3),F3.forEach(t),QUo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(D6.$$.fragment,pa),WUo=i(pa),_pe=n(pa,"P",{});var Rft=s(_pe);HUo=r(Rft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Rft.forEach(t),UUo=i(pa),Va=n(pa,"P",{});var T3=s(Va);JUo=r(T3,"The model class to instantiate is selected based on the "),bpe=n(T3,"CODE",{});var Bft=s(bpe);YUo=r(Bft,"model_type"),Bft.forEach(t),KUo=r(T3,` property of the config object (either
passed as an argument or loaded from `),vpe=n(T3,"CODE",{});var Pft=s(vpe);ZUo=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),eJo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(T3,"CODE",{});var Ift=s(Fpe);oJo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),rJo=r(T3,":"),T3.forEach(t),tJo=i(pa),G6=n(pa,"UL",{});var zqe=s(G6);C0=n(zqe,"LI",{});var z8e=s(C0);Tpe=n(z8e,"STRONG",{});var qft=s(Tpe);aJo=r(qft,"speech-encoder-decoder"),qft.forEach(t),nJo=r(z8e," \u2014 "),KV=n(z8e,"A",{href:!0});var Nft=s(KV);sJo=r(Nft,"SpeechEncoderDecoderModel"),Nft.forEach(t),lJo=r(z8e," (Speech Encoder decoder model)"),z8e.forEach(t),iJo=i(zqe),w0=n(zqe,"LI",{});var Q8e=s(w0);Mpe=n(Q8e,"STRONG",{});var jft=s(Mpe);dJo=r(jft,"speech_to_text"),jft.forEach(t),cJo=r(Q8e," \u2014 "),ZV=n(Q8e,"A",{href:!0});var Dft=s(ZV);fJo=r(Dft,"Speech2TextForConditionalGeneration"),Dft.forEach(t),mJo=r(Q8e," (Speech2Text model)"),Q8e.forEach(t),zqe.forEach(t),gJo=i(pa),A0=n(pa,"P",{});var W8e=s(A0);hJo=r(W8e,"The model is set in evaluation mode by default using "),Epe=n(W8e,"CODE",{});var Gft=s(Epe);pJo=r(Gft,"model.eval()"),Gft.forEach(t),uJo=r(W8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(W8e,"CODE",{});var Oft=s(Cpe);_Jo=r(Oft,"model.train()"),Oft.forEach(t),W8e.forEach(t),bJo=i(pa),T(y0.$$.fragment,pa),pa.forEach(t),rl.forEach(t),GPe=i(f),bd=n(f,"H2",{class:!0});var Qqe=s(bd);L0=n(Qqe,"A",{id:!0,class:!0,href:!0});var Vft=s(L0);wpe=n(Vft,"SPAN",{});var Xft=s(wpe);T(O6.$$.fragment,Xft),Xft.forEach(t),Vft.forEach(t),vJo=i(Qqe),Ape=n(Qqe,"SPAN",{});var zft=s(Ape);FJo=r(zft,"AutoModelForAudioXVector"),zft.forEach(t),Qqe.forEach(t),OPe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(V6.$$.fragment,tl),TJo=i(tl),vd=n(tl,"P",{});var vK=s(vd);MJo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),eX=n(vK,"A",{href:!0});var Qft=s(eX);EJo=r(Qft,"from_pretrained()"),Qft.forEach(t),CJo=r(vK," class method or the "),oX=n(vK,"A",{href:!0});var Wft=s(oX);wJo=r(Wft,"from_config()"),Wft.forEach(t),AJo=r(vK,` class
method.`),vK.forEach(t),yJo=i(tl),X6=n(tl,"P",{});var Wqe=s(X6);LJo=r(Wqe,"This class cannot be instantiated directly using "),ype=n(Wqe,"CODE",{});var Hft=s(ype);xJo=r(Hft,"__init__()"),Hft.forEach(t),$Jo=r(Wqe," (throws an error)."),Wqe.forEach(t),kJo=i(tl),vt=n(tl,"DIV",{class:!0});var M3=s(vt);T(z6.$$.fragment,M3),SJo=i(M3),Lpe=n(M3,"P",{});var Uft=s(Lpe);RJo=r(Uft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Uft.forEach(t),BJo=i(M3),Fd=n(M3,"P",{});var FK=s(Fd);PJo=r(FK,`Note:
Loading a model from its configuration file does `),xpe=n(FK,"STRONG",{});var Jft=s(xpe);IJo=r(Jft,"not"),Jft.forEach(t),qJo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(FK,"A",{href:!0});var Yft=s(rX);NJo=r(Yft,"from_pretrained()"),Yft.forEach(t),jJo=r(FK," to load the model weights."),FK.forEach(t),DJo=i(M3),T(x0.$$.fragment,M3),M3.forEach(t),GJo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(Q6.$$.fragment,ua),OJo=i(ua),$pe=n(ua,"P",{});var Kft=s($pe);VJo=r(Kft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Kft.forEach(t),XJo=i(ua),Xa=n(ua,"P",{});var E3=s(Xa);zJo=r(E3,"The model class to instantiate is selected based on the "),kpe=n(E3,"CODE",{});var Zft=s(kpe);QJo=r(Zft,"model_type"),Zft.forEach(t),WJo=r(E3,` property of the config object (either
passed as an argument or loaded from `),Spe=n(E3,"CODE",{});var emt=s(Spe);HJo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),UJo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(E3,"CODE",{});var omt=s(Rpe);JJo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),YJo=r(E3,":"),E3.forEach(t),KJo=i(ua),za=n(ua,"UL",{});var C3=s(za);$0=n(C3,"LI",{});var H8e=s($0);Bpe=n(H8e,"STRONG",{});var rmt=s(Bpe);ZJo=r(rmt,"data2vec-audio"),rmt.forEach(t),eYo=r(H8e," \u2014 "),tX=n(H8e,"A",{href:!0});var tmt=s(tX);oYo=r(tmt,"Data2VecAudioForXVector"),tmt.forEach(t),rYo=r(H8e," (Data2VecAudio model)"),H8e.forEach(t),tYo=i(C3),k0=n(C3,"LI",{});var U8e=s(k0);Ppe=n(U8e,"STRONG",{});var amt=s(Ppe);aYo=r(amt,"unispeech-sat"),amt.forEach(t),nYo=r(U8e," \u2014 "),aX=n(U8e,"A",{href:!0});var nmt=s(aX);sYo=r(nmt,"UniSpeechSatForXVector"),nmt.forEach(t),lYo=r(U8e," (UniSpeechSat model)"),U8e.forEach(t),iYo=i(C3),S0=n(C3,"LI",{});var J8e=s(S0);Ipe=n(J8e,"STRONG",{});var smt=s(Ipe);dYo=r(smt,"wav2vec2"),smt.forEach(t),cYo=r(J8e," \u2014 "),nX=n(J8e,"A",{href:!0});var lmt=s(nX);fYo=r(lmt,"Wav2Vec2ForXVector"),lmt.forEach(t),mYo=r(J8e," (Wav2Vec2 model)"),J8e.forEach(t),gYo=i(C3),R0=n(C3,"LI",{});var Y8e=s(R0);qpe=n(Y8e,"STRONG",{});var imt=s(qpe);hYo=r(imt,"wavlm"),imt.forEach(t),pYo=r(Y8e," \u2014 "),sX=n(Y8e,"A",{href:!0});var dmt=s(sX);uYo=r(dmt,"WavLMForXVector"),dmt.forEach(t),_Yo=r(Y8e," (WavLM model)"),Y8e.forEach(t),C3.forEach(t),bYo=i(ua),B0=n(ua,"P",{});var K8e=s(B0);vYo=r(K8e,"The model is set in evaluation mode by default using "),Npe=n(K8e,"CODE",{});var cmt=s(Npe);FYo=r(cmt,"model.eval()"),cmt.forEach(t),TYo=r(K8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=n(K8e,"CODE",{});var fmt=s(jpe);MYo=r(fmt,"model.train()"),fmt.forEach(t),K8e.forEach(t),EYo=i(ua),T(P0.$$.fragment,ua),ua.forEach(t),tl.forEach(t),VPe=i(f),Td=n(f,"H2",{class:!0});var Hqe=s(Td);I0=n(Hqe,"A",{id:!0,class:!0,href:!0});var mmt=s(I0);Dpe=n(mmt,"SPAN",{});var gmt=s(Dpe);T(W6.$$.fragment,gmt),gmt.forEach(t),mmt.forEach(t),CYo=i(Hqe),Gpe=n(Hqe,"SPAN",{});var hmt=s(Gpe);wYo=r(hmt,"AutoModelForMaskedImageModeling"),hmt.forEach(t),Hqe.forEach(t),XPe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(H6.$$.fragment,al),AYo=i(al),Md=n(al,"P",{});var TK=s(Md);yYo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lX=n(TK,"A",{href:!0});var pmt=s(lX);LYo=r(pmt,"from_pretrained()"),pmt.forEach(t),xYo=r(TK," class method or the "),iX=n(TK,"A",{href:!0});var umt=s(iX);$Yo=r(umt,"from_config()"),umt.forEach(t),kYo=r(TK,` class
method.`),TK.forEach(t),SYo=i(al),U6=n(al,"P",{});var Uqe=s(U6);RYo=r(Uqe,"This class cannot be instantiated directly using "),Ope=n(Uqe,"CODE",{});var _mt=s(Ope);BYo=r(_mt,"__init__()"),_mt.forEach(t),PYo=r(Uqe," (throws an error)."),Uqe.forEach(t),IYo=i(al),Ft=n(al,"DIV",{class:!0});var w3=s(Ft);T(J6.$$.fragment,w3),qYo=i(w3),Vpe=n(w3,"P",{});var bmt=s(Vpe);NYo=r(bmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bmt.forEach(t),jYo=i(w3),Ed=n(w3,"P",{});var MK=s(Ed);DYo=r(MK,`Note:
Loading a model from its configuration file does `),Xpe=n(MK,"STRONG",{});var vmt=s(Xpe);GYo=r(vmt,"not"),vmt.forEach(t),OYo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(MK,"A",{href:!0});var Fmt=s(dX);VYo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),XYo=r(MK," to load the model weights."),MK.forEach(t),zYo=i(w3),T(q0.$$.fragment,w3),w3.forEach(t),QYo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(Y6.$$.fragment,_a),WYo=i(_a),zpe=n(_a,"P",{});var Tmt=s(zpe);HYo=r(Tmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Tmt.forEach(t),UYo=i(_a),Qa=n(_a,"P",{});var A3=s(Qa);JYo=r(A3,"The model class to instantiate is selected based on the "),Qpe=n(A3,"CODE",{});var Mmt=s(Qpe);YYo=r(Mmt,"model_type"),Mmt.forEach(t),KYo=r(A3,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(A3,"CODE",{});var Emt=s(Wpe);ZYo=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),eKo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(A3,"CODE",{});var Cmt=s(Hpe);oKo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),rKo=r(A3,":"),A3.forEach(t),tKo=i(_a),Cd=n(_a,"UL",{});var EK=s(Cd);N0=n(EK,"LI",{});var Z8e=s(N0);Upe=n(Z8e,"STRONG",{});var wmt=s(Upe);aKo=r(wmt,"deit"),wmt.forEach(t),nKo=r(Z8e," \u2014 "),cX=n(Z8e,"A",{href:!0});var Amt=s(cX);sKo=r(Amt,"DeiTForMaskedImageModeling"),Amt.forEach(t),lKo=r(Z8e," (DeiT model)"),Z8e.forEach(t),iKo=i(EK),j0=n(EK,"LI",{});var exe=s(j0);Jpe=n(exe,"STRONG",{});var ymt=s(Jpe);dKo=r(ymt,"swin"),ymt.forEach(t),cKo=r(exe," \u2014 "),fX=n(exe,"A",{href:!0});var Lmt=s(fX);fKo=r(Lmt,"SwinForMaskedImageModeling"),Lmt.forEach(t),mKo=r(exe," (Swin model)"),exe.forEach(t),gKo=i(EK),D0=n(EK,"LI",{});var oxe=s(D0);Ype=n(oxe,"STRONG",{});var xmt=s(Ype);hKo=r(xmt,"vit"),xmt.forEach(t),pKo=r(oxe," \u2014 "),mX=n(oxe,"A",{href:!0});var $mt=s(mX);uKo=r($mt,"ViTForMaskedImageModeling"),$mt.forEach(t),_Ko=r(oxe," (ViT model)"),oxe.forEach(t),EK.forEach(t),bKo=i(_a),G0=n(_a,"P",{});var rxe=s(G0);vKo=r(rxe,"The model is set in evaluation mode by default using "),Kpe=n(rxe,"CODE",{});var kmt=s(Kpe);FKo=r(kmt,"model.eval()"),kmt.forEach(t),TKo=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(rxe,"CODE",{});var Smt=s(Zpe);MKo=r(Smt,"model.train()"),Smt.forEach(t),rxe.forEach(t),EKo=i(_a),T(O0.$$.fragment,_a),_a.forEach(t),al.forEach(t),zPe=i(f),wd=n(f,"H2",{class:!0});var Jqe=s(wd);V0=n(Jqe,"A",{id:!0,class:!0,href:!0});var Rmt=s(V0);eue=n(Rmt,"SPAN",{});var Bmt=s(eue);T(K6.$$.fragment,Bmt),Bmt.forEach(t),Rmt.forEach(t),CKo=i(Jqe),oue=n(Jqe,"SPAN",{});var Pmt=s(oue);wKo=r(Pmt,"AutoModelForObjectDetection"),Pmt.forEach(t),Jqe.forEach(t),QPe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(Z6.$$.fragment,nl),AKo=i(nl),Ad=n(nl,"P",{});var CK=s(Ad);yKo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gX=n(CK,"A",{href:!0});var Imt=s(gX);LKo=r(Imt,"from_pretrained()"),Imt.forEach(t),xKo=r(CK," class method or the "),hX=n(CK,"A",{href:!0});var qmt=s(hX);$Ko=r(qmt,"from_config()"),qmt.forEach(t),kKo=r(CK,` class
method.`),CK.forEach(t),SKo=i(nl),ey=n(nl,"P",{});var Yqe=s(ey);RKo=r(Yqe,"This class cannot be instantiated directly using "),rue=n(Yqe,"CODE",{});var Nmt=s(rue);BKo=r(Nmt,"__init__()"),Nmt.forEach(t),PKo=r(Yqe," (throws an error)."),Yqe.forEach(t),IKo=i(nl),Tt=n(nl,"DIV",{class:!0});var y3=s(Tt);T(oy.$$.fragment,y3),qKo=i(y3),tue=n(y3,"P",{});var jmt=s(tue);NKo=r(jmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),jmt.forEach(t),jKo=i(y3),yd=n(y3,"P",{});var wK=s(yd);DKo=r(wK,`Note:
Loading a model from its configuration file does `),aue=n(wK,"STRONG",{});var Dmt=s(aue);GKo=r(Dmt,"not"),Dmt.forEach(t),OKo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(wK,"A",{href:!0});var Gmt=s(pX);VKo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),XKo=r(wK," to load the model weights."),wK.forEach(t),zKo=i(y3),T(X0.$$.fragment,y3),y3.forEach(t),QKo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(ry.$$.fragment,ba),WKo=i(ba),nue=n(ba,"P",{});var Omt=s(nue);HKo=r(Omt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Omt.forEach(t),UKo=i(ba),Wa=n(ba,"P",{});var L3=s(Wa);JKo=r(L3,"The model class to instantiate is selected based on the "),sue=n(L3,"CODE",{});var Vmt=s(sue);YKo=r(Vmt,"model_type"),Vmt.forEach(t),KKo=r(L3,` property of the config object (either
passed as an argument or loaded from `),lue=n(L3,"CODE",{});var Xmt=s(lue);ZKo=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),eZo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(L3,"CODE",{});var zmt=s(iue);oZo=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),rZo=r(L3,":"),L3.forEach(t),tZo=i(ba),ty=n(ba,"UL",{});var Kqe=s(ty);z0=n(Kqe,"LI",{});var txe=s(z0);due=n(txe,"STRONG",{});var Qmt=s(due);aZo=r(Qmt,"detr"),Qmt.forEach(t),nZo=r(txe," \u2014 "),uX=n(txe,"A",{href:!0});var Wmt=s(uX);sZo=r(Wmt,"DetrForObjectDetection"),Wmt.forEach(t),lZo=r(txe," (DETR model)"),txe.forEach(t),iZo=i(Kqe),Q0=n(Kqe,"LI",{});var axe=s(Q0);cue=n(axe,"STRONG",{});var Hmt=s(cue);dZo=r(Hmt,"yolos"),Hmt.forEach(t),cZo=r(axe," \u2014 "),_X=n(axe,"A",{href:!0});var Umt=s(_X);fZo=r(Umt,"YolosForObjectDetection"),Umt.forEach(t),mZo=r(axe," (YOLOS model)"),axe.forEach(t),Kqe.forEach(t),gZo=i(ba),W0=n(ba,"P",{});var nxe=s(W0);hZo=r(nxe,"The model is set in evaluation mode by default using "),fue=n(nxe,"CODE",{});var Jmt=s(fue);pZo=r(Jmt,"model.eval()"),Jmt.forEach(t),uZo=r(nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=n(nxe,"CODE",{});var Ymt=s(mue);_Zo=r(Ymt,"model.train()"),Ymt.forEach(t),nxe.forEach(t),bZo=i(ba),T(H0.$$.fragment,ba),ba.forEach(t),nl.forEach(t),WPe=i(f),Ld=n(f,"H2",{class:!0});var Zqe=s(Ld);U0=n(Zqe,"A",{id:!0,class:!0,href:!0});var Kmt=s(U0);gue=n(Kmt,"SPAN",{});var Zmt=s(gue);T(ay.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),vZo=i(Zqe),hue=n(Zqe,"SPAN",{});var egt=s(hue);FZo=r(egt,"AutoModelForImageSegmentation"),egt.forEach(t),Zqe.forEach(t),HPe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(ny.$$.fragment,sl),TZo=i(sl),xd=n(sl,"P",{});var AK=s(xd);MZo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bX=n(AK,"A",{href:!0});var ogt=s(bX);EZo=r(ogt,"from_pretrained()"),ogt.forEach(t),CZo=r(AK," class method or the "),vX=n(AK,"A",{href:!0});var rgt=s(vX);wZo=r(rgt,"from_config()"),rgt.forEach(t),AZo=r(AK,` class
method.`),AK.forEach(t),yZo=i(sl),sy=n(sl,"P",{});var eNe=s(sy);LZo=r(eNe,"This class cannot be instantiated directly using "),pue=n(eNe,"CODE",{});var tgt=s(pue);xZo=r(tgt,"__init__()"),tgt.forEach(t),$Zo=r(eNe," (throws an error)."),eNe.forEach(t),kZo=i(sl),Mt=n(sl,"DIV",{class:!0});var x3=s(Mt);T(ly.$$.fragment,x3),SZo=i(x3),uue=n(x3,"P",{});var agt=s(uue);RZo=r(agt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),agt.forEach(t),BZo=i(x3),$d=n(x3,"P",{});var yK=s($d);PZo=r(yK,`Note:
Loading a model from its configuration file does `),_ue=n(yK,"STRONG",{});var ngt=s(_ue);IZo=r(ngt,"not"),ngt.forEach(t),qZo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(yK,"A",{href:!0});var sgt=s(FX);NZo=r(sgt,"from_pretrained()"),sgt.forEach(t),jZo=r(yK," to load the model weights."),yK.forEach(t),DZo=i(x3),T(J0.$$.fragment,x3),x3.forEach(t),GZo=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(iy.$$.fragment,va),OZo=i(va),bue=n(va,"P",{});var lgt=s(bue);VZo=r(lgt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lgt.forEach(t),XZo=i(va),Ha=n(va,"P",{});var $3=s(Ha);zZo=r($3,"The model class to instantiate is selected based on the "),vue=n($3,"CODE",{});var igt=s(vue);QZo=r(igt,"model_type"),igt.forEach(t),WZo=r($3,` property of the config object (either
passed as an argument or loaded from `),Fue=n($3,"CODE",{});var dgt=s(Fue);HZo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),UZo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n($3,"CODE",{});var cgt=s(Tue);JZo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),YZo=r($3,":"),$3.forEach(t),KZo=i(va),Mue=n(va,"UL",{});var fgt=s(Mue);Y0=n(fgt,"LI",{});var sxe=s(Y0);Eue=n(sxe,"STRONG",{});var mgt=s(Eue);ZZo=r(mgt,"detr"),mgt.forEach(t),eer=r(sxe," \u2014 "),TX=n(sxe,"A",{href:!0});var ggt=s(TX);oer=r(ggt,"DetrForSegmentation"),ggt.forEach(t),rer=r(sxe," (DETR model)"),sxe.forEach(t),fgt.forEach(t),ter=i(va),K0=n(va,"P",{});var lxe=s(K0);aer=r(lxe,"The model is set in evaluation mode by default using "),Cue=n(lxe,"CODE",{});var hgt=s(Cue);ner=r(hgt,"model.eval()"),hgt.forEach(t),ser=r(lxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(lxe,"CODE",{});var pgt=s(wue);ler=r(pgt,"model.train()"),pgt.forEach(t),lxe.forEach(t),ier=i(va),T(Z0.$$.fragment,va),va.forEach(t),sl.forEach(t),UPe=i(f),kd=n(f,"H2",{class:!0});var oNe=s(kd);eT=n(oNe,"A",{id:!0,class:!0,href:!0});var ugt=s(eT);Aue=n(ugt,"SPAN",{});var _gt=s(Aue);T(dy.$$.fragment,_gt),_gt.forEach(t),ugt.forEach(t),der=i(oNe),yue=n(oNe,"SPAN",{});var bgt=s(yue);cer=r(bgt,"AutoModelForSemanticSegmentation"),bgt.forEach(t),oNe.forEach(t),JPe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(cy.$$.fragment,ll),fer=i(ll),Sd=n(ll,"P",{});var LK=s(Sd);mer=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),MX=n(LK,"A",{href:!0});var vgt=s(MX);ger=r(vgt,"from_pretrained()"),vgt.forEach(t),her=r(LK," class method or the "),EX=n(LK,"A",{href:!0});var Fgt=s(EX);per=r(Fgt,"from_config()"),Fgt.forEach(t),uer=r(LK,` class
method.`),LK.forEach(t),_er=i(ll),fy=n(ll,"P",{});var rNe=s(fy);ber=r(rNe,"This class cannot be instantiated directly using "),Lue=n(rNe,"CODE",{});var Tgt=s(Lue);ver=r(Tgt,"__init__()"),Tgt.forEach(t),Fer=r(rNe," (throws an error)."),rNe.forEach(t),Ter=i(ll),Et=n(ll,"DIV",{class:!0});var k3=s(Et);T(my.$$.fragment,k3),Mer=i(k3),xue=n(k3,"P",{});var Mgt=s(xue);Eer=r(Mgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Mgt.forEach(t),Cer=i(k3),Rd=n(k3,"P",{});var xK=s(Rd);wer=r(xK,`Note:
Loading a model from its configuration file does `),$ue=n(xK,"STRONG",{});var Egt=s($ue);Aer=r(Egt,"not"),Egt.forEach(t),yer=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(xK,"A",{href:!0});var Cgt=s(CX);Ler=r(Cgt,"from_pretrained()"),Cgt.forEach(t),xer=r(xK," to load the model weights."),xK.forEach(t),$er=i(k3),T(oT.$$.fragment,k3),k3.forEach(t),ker=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(gy.$$.fragment,Fa),Ser=i(Fa),kue=n(Fa,"P",{});var wgt=s(kue);Rer=r(wgt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),wgt.forEach(t),Ber=i(Fa),Ua=n(Fa,"P",{});var S3=s(Ua);Per=r(S3,"The model class to instantiate is selected based on the "),Sue=n(S3,"CODE",{});var Agt=s(Sue);Ier=r(Agt,"model_type"),Agt.forEach(t),qer=r(S3,` property of the config object (either
passed as an argument or loaded from `),Rue=n(S3,"CODE",{});var ygt=s(Rue);Ner=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),jer=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(S3,"CODE",{});var Lgt=s(Bue);Der=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),Ger=r(S3,":"),S3.forEach(t),Oer=i(Fa),Ja=n(Fa,"UL",{});var R3=s(Ja);rT=n(R3,"LI",{});var ixe=s(rT);Pue=n(ixe,"STRONG",{});var xgt=s(Pue);Ver=r(xgt,"beit"),xgt.forEach(t),Xer=r(ixe," \u2014 "),wX=n(ixe,"A",{href:!0});var $gt=s(wX);zer=r($gt,"BeitForSemanticSegmentation"),$gt.forEach(t),Qer=r(ixe," (BEiT model)"),ixe.forEach(t),Wer=i(R3),tT=n(R3,"LI",{});var dxe=s(tT);Iue=n(dxe,"STRONG",{});var kgt=s(Iue);Her=r(kgt,"data2vec-vision"),kgt.forEach(t),Uer=r(dxe," \u2014 "),AX=n(dxe,"A",{href:!0});var Sgt=s(AX);Jer=r(Sgt,"Data2VecVisionForSemanticSegmentation"),Sgt.forEach(t),Yer=r(dxe," (Data2VecVision model)"),dxe.forEach(t),Ker=i(R3),aT=n(R3,"LI",{});var cxe=s(aT);que=n(cxe,"STRONG",{});var Rgt=s(que);Zer=r(Rgt,"dpt"),Rgt.forEach(t),eor=r(cxe," \u2014 "),yX=n(cxe,"A",{href:!0});var Bgt=s(yX);oor=r(Bgt,"DPTForSemanticSegmentation"),Bgt.forEach(t),ror=r(cxe," (DPT model)"),cxe.forEach(t),tor=i(R3),nT=n(R3,"LI",{});var fxe=s(nT);Nue=n(fxe,"STRONG",{});var Pgt=s(Nue);aor=r(Pgt,"segformer"),Pgt.forEach(t),nor=r(fxe," \u2014 "),LX=n(fxe,"A",{href:!0});var Igt=s(LX);sor=r(Igt,"SegformerForSemanticSegmentation"),Igt.forEach(t),lor=r(fxe," (SegFormer model)"),fxe.forEach(t),R3.forEach(t),ior=i(Fa),sT=n(Fa,"P",{});var mxe=s(sT);dor=r(mxe,"The model is set in evaluation mode by default using "),jue=n(mxe,"CODE",{});var qgt=s(jue);cor=r(qgt,"model.eval()"),qgt.forEach(t),mor=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(mxe,"CODE",{});var Ngt=s(Due);gor=r(Ngt,"model.train()"),Ngt.forEach(t),mxe.forEach(t),hor=i(Fa),T(lT.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),YPe=i(f),Bd=n(f,"H2",{class:!0});var tNe=s(Bd);iT=n(tNe,"A",{id:!0,class:!0,href:!0});var jgt=s(iT);Gue=n(jgt,"SPAN",{});var Dgt=s(Gue);T(hy.$$.fragment,Dgt),Dgt.forEach(t),jgt.forEach(t),por=i(tNe),Oue=n(tNe,"SPAN",{});var Ggt=s(Oue);uor=r(Ggt,"AutoModelForInstanceSegmentation"),Ggt.forEach(t),tNe.forEach(t),KPe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(py.$$.fragment,il),_or=i(il),Pd=n(il,"P",{});var $K=s(Pd);bor=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xX=n($K,"A",{href:!0});var Ogt=s(xX);vor=r(Ogt,"from_pretrained()"),Ogt.forEach(t),For=r($K," class method or the "),$X=n($K,"A",{href:!0});var Vgt=s($X);Tor=r(Vgt,"from_config()"),Vgt.forEach(t),Mor=r($K,` class
method.`),$K.forEach(t),Eor=i(il),uy=n(il,"P",{});var aNe=s(uy);Cor=r(aNe,"This class cannot be instantiated directly using "),Vue=n(aNe,"CODE",{});var Xgt=s(Vue);wor=r(Xgt,"__init__()"),Xgt.forEach(t),Aor=r(aNe," (throws an error)."),aNe.forEach(t),yor=i(il),Ct=n(il,"DIV",{class:!0});var B3=s(Ct);T(_y.$$.fragment,B3),Lor=i(B3),Xue=n(B3,"P",{});var zgt=s(Xue);xor=r(zgt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zgt.forEach(t),$or=i(B3),Id=n(B3,"P",{});var kK=s(Id);kor=r(kK,`Note:
Loading a model from its configuration file does `),zue=n(kK,"STRONG",{});var Qgt=s(zue);Sor=r(Qgt,"not"),Qgt.forEach(t),Ror=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(kK,"A",{href:!0});var Wgt=s(kX);Bor=r(Wgt,"from_pretrained()"),Wgt.forEach(t),Por=r(kK," to load the model weights."),kK.forEach(t),Ior=i(B3),T(dT.$$.fragment,B3),B3.forEach(t),qor=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(by.$$.fragment,Ta),Nor=i(Ta),Que=n(Ta,"P",{});var Hgt=s(Que);jor=r(Hgt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Hgt.forEach(t),Dor=i(Ta),Ya=n(Ta,"P",{});var P3=s(Ya);Gor=r(P3,"The model class to instantiate is selected based on the "),Wue=n(P3,"CODE",{});var Ugt=s(Wue);Oor=r(Ugt,"model_type"),Ugt.forEach(t),Vor=r(P3,` property of the config object (either
passed as an argument or loaded from `),Hue=n(P3,"CODE",{});var Jgt=s(Hue);Xor=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),zor=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(P3,"CODE",{});var Ygt=s(Uue);Qor=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),Wor=r(P3,":"),P3.forEach(t),Hor=i(Ta),Jue=n(Ta,"UL",{});var Kgt=s(Jue);cT=n(Kgt,"LI",{});var gxe=s(cT);Yue=n(gxe,"STRONG",{});var Zgt=s(Yue);Uor=r(Zgt,"maskformer"),Zgt.forEach(t),Jor=r(gxe," \u2014 "),SX=n(gxe,"A",{href:!0});var eht=s(SX);Yor=r(eht,"MaskFormerForInstanceSegmentation"),eht.forEach(t),Kor=r(gxe," (MaskFormer model)"),gxe.forEach(t),Kgt.forEach(t),Zor=i(Ta),fT=n(Ta,"P",{});var hxe=s(fT);err=r(hxe,"The model is set in evaluation mode by default using "),Kue=n(hxe,"CODE",{});var oht=s(Kue);orr=r(oht,"model.eval()"),oht.forEach(t),rrr=r(hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=n(hxe,"CODE",{});var rht=s(Zue);trr=r(rht,"model.train()"),rht.forEach(t),hxe.forEach(t),arr=i(Ta),T(mT.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),ZPe=i(f),qd=n(f,"H2",{class:!0});var nNe=s(qd);gT=n(nNe,"A",{id:!0,class:!0,href:!0});var tht=s(gT);e_e=n(tht,"SPAN",{});var aht=s(e_e);T(vy.$$.fragment,aht),aht.forEach(t),tht.forEach(t),nrr=i(nNe),o_e=n(nNe,"SPAN",{});var nht=s(o_e);srr=r(nht,"TFAutoModel"),nht.forEach(t),nNe.forEach(t),eIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(Fy.$$.fragment,dl),lrr=i(dl),Nd=n(dl,"P",{});var SK=s(Nd);irr=r(SK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RX=n(SK,"A",{href:!0});var sht=s(RX);drr=r(sht,"from_pretrained()"),sht.forEach(t),crr=r(SK," class method or the "),BX=n(SK,"A",{href:!0});var lht=s(BX);frr=r(lht,"from_config()"),lht.forEach(t),mrr=r(SK,` class
method.`),SK.forEach(t),grr=i(dl),Ty=n(dl,"P",{});var sNe=s(Ty);hrr=r(sNe,"This class cannot be instantiated directly using "),r_e=n(sNe,"CODE",{});var iht=s(r_e);prr=r(iht,"__init__()"),iht.forEach(t),urr=r(sNe," (throws an error)."),sNe.forEach(t),_rr=i(dl),wt=n(dl,"DIV",{class:!0});var I3=s(wt);T(My.$$.fragment,I3),brr=i(I3),t_e=n(I3,"P",{});var dht=s(t_e);vrr=r(dht,"Instantiates one of the base model classes of the library from a configuration."),dht.forEach(t),Frr=i(I3),jd=n(I3,"P",{});var RK=s(jd);Trr=r(RK,`Note:
Loading a model from its configuration file does `),a_e=n(RK,"STRONG",{});var cht=s(a_e);Mrr=r(cht,"not"),cht.forEach(t),Err=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(RK,"A",{href:!0});var fht=s(PX);Crr=r(fht,"from_pretrained()"),fht.forEach(t),wrr=r(RK," to load the model weights."),RK.forEach(t),Arr=i(I3),T(hT.$$.fragment,I3),I3.forEach(t),yrr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(Ey.$$.fragment,cl),Lrr=i(cl),n_e=n(cl,"P",{});var mht=s(n_e);xrr=r(mht,"Instantiate one of the base model classes of the library from a pretrained model."),mht.forEach(t),$rr=i(cl),Ka=n(cl,"P",{});var q3=s(Ka);krr=r(q3,"The model class to instantiate is selected based on the "),s_e=n(q3,"CODE",{});var ght=s(s_e);Srr=r(ght,"model_type"),ght.forEach(t),Rrr=r(q3,` property of the config object (either
passed as an argument or loaded from `),l_e=n(q3,"CODE",{});var hht=s(l_e);Brr=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),Prr=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(q3,"CODE",{});var pht=s(i_e);Irr=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),qrr=r(q3,":"),q3.forEach(t),Nrr=i(cl),j=n(cl,"UL",{});var D=s(j);pT=n(D,"LI",{});var pxe=s(pT);d_e=n(pxe,"STRONG",{});var uht=s(d_e);jrr=r(uht,"albert"),uht.forEach(t),Drr=r(pxe," \u2014 "),IX=n(pxe,"A",{href:!0});var _ht=s(IX);Grr=r(_ht,"TFAlbertModel"),_ht.forEach(t),Orr=r(pxe," (ALBERT model)"),pxe.forEach(t),Vrr=i(D),uT=n(D,"LI",{});var uxe=s(uT);c_e=n(uxe,"STRONG",{});var bht=s(c_e);Xrr=r(bht,"bart"),bht.forEach(t),zrr=r(uxe," \u2014 "),qX=n(uxe,"A",{href:!0});var vht=s(qX);Qrr=r(vht,"TFBartModel"),vht.forEach(t),Wrr=r(uxe," (BART model)"),uxe.forEach(t),Hrr=i(D),_T=n(D,"LI",{});var _xe=s(_T);f_e=n(_xe,"STRONG",{});var Fht=s(f_e);Urr=r(Fht,"bert"),Fht.forEach(t),Jrr=r(_xe," \u2014 "),NX=n(_xe,"A",{href:!0});var Tht=s(NX);Yrr=r(Tht,"TFBertModel"),Tht.forEach(t),Krr=r(_xe," (BERT model)"),_xe.forEach(t),Zrr=i(D),bT=n(D,"LI",{});var bxe=s(bT);m_e=n(bxe,"STRONG",{});var Mht=s(m_e);etr=r(Mht,"blenderbot"),Mht.forEach(t),otr=r(bxe," \u2014 "),jX=n(bxe,"A",{href:!0});var Eht=s(jX);rtr=r(Eht,"TFBlenderbotModel"),Eht.forEach(t),ttr=r(bxe," (Blenderbot model)"),bxe.forEach(t),atr=i(D),vT=n(D,"LI",{});var vxe=s(vT);g_e=n(vxe,"STRONG",{});var Cht=s(g_e);ntr=r(Cht,"blenderbot-small"),Cht.forEach(t),str=r(vxe," \u2014 "),DX=n(vxe,"A",{href:!0});var wht=s(DX);ltr=r(wht,"TFBlenderbotSmallModel"),wht.forEach(t),itr=r(vxe," (BlenderbotSmall model)"),vxe.forEach(t),dtr=i(D),FT=n(D,"LI",{});var Fxe=s(FT);h_e=n(Fxe,"STRONG",{});var Aht=s(h_e);ctr=r(Aht,"camembert"),Aht.forEach(t),ftr=r(Fxe," \u2014 "),GX=n(Fxe,"A",{href:!0});var yht=s(GX);mtr=r(yht,"TFCamembertModel"),yht.forEach(t),gtr=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),htr=i(D),TT=n(D,"LI",{});var Txe=s(TT);p_e=n(Txe,"STRONG",{});var Lht=s(p_e);ptr=r(Lht,"clip"),Lht.forEach(t),utr=r(Txe," \u2014 "),OX=n(Txe,"A",{href:!0});var xht=s(OX);_tr=r(xht,"TFCLIPModel"),xht.forEach(t),btr=r(Txe," (CLIP model)"),Txe.forEach(t),vtr=i(D),MT=n(D,"LI",{});var Mxe=s(MT);u_e=n(Mxe,"STRONG",{});var $ht=s(u_e);Ftr=r($ht,"convbert"),$ht.forEach(t),Ttr=r(Mxe," \u2014 "),VX=n(Mxe,"A",{href:!0});var kht=s(VX);Mtr=r(kht,"TFConvBertModel"),kht.forEach(t),Etr=r(Mxe," (ConvBERT model)"),Mxe.forEach(t),Ctr=i(D),ET=n(D,"LI",{});var Exe=s(ET);__e=n(Exe,"STRONG",{});var Sht=s(__e);wtr=r(Sht,"convnext"),Sht.forEach(t),Atr=r(Exe," \u2014 "),XX=n(Exe,"A",{href:!0});var Rht=s(XX);ytr=r(Rht,"TFConvNextModel"),Rht.forEach(t),Ltr=r(Exe," (ConvNext model)"),Exe.forEach(t),xtr=i(D),CT=n(D,"LI",{});var Cxe=s(CT);b_e=n(Cxe,"STRONG",{});var Bht=s(b_e);$tr=r(Bht,"ctrl"),Bht.forEach(t),ktr=r(Cxe," \u2014 "),zX=n(Cxe,"A",{href:!0});var Pht=s(zX);Str=r(Pht,"TFCTRLModel"),Pht.forEach(t),Rtr=r(Cxe," (CTRL model)"),Cxe.forEach(t),Btr=i(D),wT=n(D,"LI",{});var wxe=s(wT);v_e=n(wxe,"STRONG",{});var Iht=s(v_e);Ptr=r(Iht,"deberta"),Iht.forEach(t),Itr=r(wxe," \u2014 "),QX=n(wxe,"A",{href:!0});var qht=s(QX);qtr=r(qht,"TFDebertaModel"),qht.forEach(t),Ntr=r(wxe," (DeBERTa model)"),wxe.forEach(t),jtr=i(D),AT=n(D,"LI",{});var Axe=s(AT);F_e=n(Axe,"STRONG",{});var Nht=s(F_e);Dtr=r(Nht,"deberta-v2"),Nht.forEach(t),Gtr=r(Axe," \u2014 "),WX=n(Axe,"A",{href:!0});var jht=s(WX);Otr=r(jht,"TFDebertaV2Model"),jht.forEach(t),Vtr=r(Axe," (DeBERTa-v2 model)"),Axe.forEach(t),Xtr=i(D),yT=n(D,"LI",{});var yxe=s(yT);T_e=n(yxe,"STRONG",{});var Dht=s(T_e);ztr=r(Dht,"distilbert"),Dht.forEach(t),Qtr=r(yxe," \u2014 "),HX=n(yxe,"A",{href:!0});var Ght=s(HX);Wtr=r(Ght,"TFDistilBertModel"),Ght.forEach(t),Htr=r(yxe," (DistilBERT model)"),yxe.forEach(t),Utr=i(D),LT=n(D,"LI",{});var Lxe=s(LT);M_e=n(Lxe,"STRONG",{});var Oht=s(M_e);Jtr=r(Oht,"dpr"),Oht.forEach(t),Ytr=r(Lxe," \u2014 "),UX=n(Lxe,"A",{href:!0});var Vht=s(UX);Ktr=r(Vht,"TFDPRQuestionEncoder"),Vht.forEach(t),Ztr=r(Lxe," (DPR model)"),Lxe.forEach(t),ear=i(D),xT=n(D,"LI",{});var xxe=s(xT);E_e=n(xxe,"STRONG",{});var Xht=s(E_e);oar=r(Xht,"electra"),Xht.forEach(t),rar=r(xxe," \u2014 "),JX=n(xxe,"A",{href:!0});var zht=s(JX);tar=r(zht,"TFElectraModel"),zht.forEach(t),aar=r(xxe," (ELECTRA model)"),xxe.forEach(t),nar=i(D),$T=n(D,"LI",{});var $xe=s($T);C_e=n($xe,"STRONG",{});var Qht=s(C_e);sar=r(Qht,"flaubert"),Qht.forEach(t),lar=r($xe," \u2014 "),YX=n($xe,"A",{href:!0});var Wht=s(YX);iar=r(Wht,"TFFlaubertModel"),Wht.forEach(t),dar=r($xe," (FlauBERT model)"),$xe.forEach(t),car=i(D),Bs=n(D,"LI",{});var o$=s(Bs);w_e=n(o$,"STRONG",{});var Hht=s(w_e);far=r(Hht,"funnel"),Hht.forEach(t),mar=r(o$," \u2014 "),KX=n(o$,"A",{href:!0});var Uht=s(KX);gar=r(Uht,"TFFunnelModel"),Uht.forEach(t),har=r(o$," or "),ZX=n(o$,"A",{href:!0});var Jht=s(ZX);par=r(Jht,"TFFunnelBaseModel"),Jht.forEach(t),uar=r(o$," (Funnel Transformer model)"),o$.forEach(t),_ar=i(D),kT=n(D,"LI",{});var kxe=s(kT);A_e=n(kxe,"STRONG",{});var Yht=s(A_e);bar=r(Yht,"gpt2"),Yht.forEach(t),Far=r(kxe," \u2014 "),ez=n(kxe,"A",{href:!0});var Kht=s(ez);Tar=r(Kht,"TFGPT2Model"),Kht.forEach(t),Mar=r(kxe," (OpenAI GPT-2 model)"),kxe.forEach(t),Ear=i(D),ST=n(D,"LI",{});var Sxe=s(ST);y_e=n(Sxe,"STRONG",{});var Zht=s(y_e);Car=r(Zht,"gptj"),Zht.forEach(t),war=r(Sxe," \u2014 "),oz=n(Sxe,"A",{href:!0});var ept=s(oz);Aar=r(ept,"TFGPTJModel"),ept.forEach(t),yar=r(Sxe," (GPT-J model)"),Sxe.forEach(t),Lar=i(D),RT=n(D,"LI",{});var Rxe=s(RT);L_e=n(Rxe,"STRONG",{});var opt=s(L_e);xar=r(opt,"hubert"),opt.forEach(t),$ar=r(Rxe," \u2014 "),rz=n(Rxe,"A",{href:!0});var rpt=s(rz);kar=r(rpt,"TFHubertModel"),rpt.forEach(t),Sar=r(Rxe," (Hubert model)"),Rxe.forEach(t),Rar=i(D),BT=n(D,"LI",{});var Bxe=s(BT);x_e=n(Bxe,"STRONG",{});var tpt=s(x_e);Bar=r(tpt,"layoutlm"),tpt.forEach(t),Par=r(Bxe," \u2014 "),tz=n(Bxe,"A",{href:!0});var apt=s(tz);Iar=r(apt,"TFLayoutLMModel"),apt.forEach(t),qar=r(Bxe," (LayoutLM model)"),Bxe.forEach(t),Nar=i(D),PT=n(D,"LI",{});var Pxe=s(PT);$_e=n(Pxe,"STRONG",{});var npt=s($_e);jar=r(npt,"led"),npt.forEach(t),Dar=r(Pxe," \u2014 "),az=n(Pxe,"A",{href:!0});var spt=s(az);Gar=r(spt,"TFLEDModel"),spt.forEach(t),Oar=r(Pxe," (LED model)"),Pxe.forEach(t),Var=i(D),IT=n(D,"LI",{});var Ixe=s(IT);k_e=n(Ixe,"STRONG",{});var lpt=s(k_e);Xar=r(lpt,"longformer"),lpt.forEach(t),zar=r(Ixe," \u2014 "),nz=n(Ixe,"A",{href:!0});var ipt=s(nz);Qar=r(ipt,"TFLongformerModel"),ipt.forEach(t),War=r(Ixe," (Longformer model)"),Ixe.forEach(t),Har=i(D),qT=n(D,"LI",{});var qxe=s(qT);S_e=n(qxe,"STRONG",{});var dpt=s(S_e);Uar=r(dpt,"lxmert"),dpt.forEach(t),Jar=r(qxe," \u2014 "),sz=n(qxe,"A",{href:!0});var cpt=s(sz);Yar=r(cpt,"TFLxmertModel"),cpt.forEach(t),Kar=r(qxe," (LXMERT model)"),qxe.forEach(t),Zar=i(D),NT=n(D,"LI",{});var Nxe=s(NT);R_e=n(Nxe,"STRONG",{});var fpt=s(R_e);enr=r(fpt,"marian"),fpt.forEach(t),onr=r(Nxe," \u2014 "),lz=n(Nxe,"A",{href:!0});var mpt=s(lz);rnr=r(mpt,"TFMarianModel"),mpt.forEach(t),tnr=r(Nxe," (Marian model)"),Nxe.forEach(t),anr=i(D),jT=n(D,"LI",{});var jxe=s(jT);B_e=n(jxe,"STRONG",{});var gpt=s(B_e);nnr=r(gpt,"mbart"),gpt.forEach(t),snr=r(jxe," \u2014 "),iz=n(jxe,"A",{href:!0});var hpt=s(iz);lnr=r(hpt,"TFMBartModel"),hpt.forEach(t),inr=r(jxe," (mBART model)"),jxe.forEach(t),dnr=i(D),DT=n(D,"LI",{});var Dxe=s(DT);P_e=n(Dxe,"STRONG",{});var ppt=s(P_e);cnr=r(ppt,"mobilebert"),ppt.forEach(t),fnr=r(Dxe," \u2014 "),dz=n(Dxe,"A",{href:!0});var upt=s(dz);mnr=r(upt,"TFMobileBertModel"),upt.forEach(t),gnr=r(Dxe," (MobileBERT model)"),Dxe.forEach(t),hnr=i(D),GT=n(D,"LI",{});var Gxe=s(GT);I_e=n(Gxe,"STRONG",{});var _pt=s(I_e);pnr=r(_pt,"mpnet"),_pt.forEach(t),unr=r(Gxe," \u2014 "),cz=n(Gxe,"A",{href:!0});var bpt=s(cz);_nr=r(bpt,"TFMPNetModel"),bpt.forEach(t),bnr=r(Gxe," (MPNet model)"),Gxe.forEach(t),vnr=i(D),OT=n(D,"LI",{});var Oxe=s(OT);q_e=n(Oxe,"STRONG",{});var vpt=s(q_e);Fnr=r(vpt,"mt5"),vpt.forEach(t),Tnr=r(Oxe," \u2014 "),fz=n(Oxe,"A",{href:!0});var Fpt=s(fz);Mnr=r(Fpt,"TFMT5Model"),Fpt.forEach(t),Enr=r(Oxe," (mT5 model)"),Oxe.forEach(t),Cnr=i(D),VT=n(D,"LI",{});var Vxe=s(VT);N_e=n(Vxe,"STRONG",{});var Tpt=s(N_e);wnr=r(Tpt,"openai-gpt"),Tpt.forEach(t),Anr=r(Vxe," \u2014 "),mz=n(Vxe,"A",{href:!0});var Mpt=s(mz);ynr=r(Mpt,"TFOpenAIGPTModel"),Mpt.forEach(t),Lnr=r(Vxe," (OpenAI GPT model)"),Vxe.forEach(t),xnr=i(D),XT=n(D,"LI",{});var Xxe=s(XT);j_e=n(Xxe,"STRONG",{});var Ept=s(j_e);$nr=r(Ept,"pegasus"),Ept.forEach(t),knr=r(Xxe," \u2014 "),gz=n(Xxe,"A",{href:!0});var Cpt=s(gz);Snr=r(Cpt,"TFPegasusModel"),Cpt.forEach(t),Rnr=r(Xxe," (Pegasus model)"),Xxe.forEach(t),Bnr=i(D),zT=n(D,"LI",{});var zxe=s(zT);D_e=n(zxe,"STRONG",{});var wpt=s(D_e);Pnr=r(wpt,"rembert"),wpt.forEach(t),Inr=r(zxe," \u2014 "),hz=n(zxe,"A",{href:!0});var Apt=s(hz);qnr=r(Apt,"TFRemBertModel"),Apt.forEach(t),Nnr=r(zxe," (RemBERT model)"),zxe.forEach(t),jnr=i(D),QT=n(D,"LI",{});var Qxe=s(QT);G_e=n(Qxe,"STRONG",{});var ypt=s(G_e);Dnr=r(ypt,"roberta"),ypt.forEach(t),Gnr=r(Qxe," \u2014 "),pz=n(Qxe,"A",{href:!0});var Lpt=s(pz);Onr=r(Lpt,"TFRobertaModel"),Lpt.forEach(t),Vnr=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),Xnr=i(D),WT=n(D,"LI",{});var Wxe=s(WT);O_e=n(Wxe,"STRONG",{});var xpt=s(O_e);znr=r(xpt,"roformer"),xpt.forEach(t),Qnr=r(Wxe," \u2014 "),uz=n(Wxe,"A",{href:!0});var $pt=s(uz);Wnr=r($pt,"TFRoFormerModel"),$pt.forEach(t),Hnr=r(Wxe," (RoFormer model)"),Wxe.forEach(t),Unr=i(D),HT=n(D,"LI",{});var Hxe=s(HT);V_e=n(Hxe,"STRONG",{});var kpt=s(V_e);Jnr=r(kpt,"speech_to_text"),kpt.forEach(t),Ynr=r(Hxe," \u2014 "),_z=n(Hxe,"A",{href:!0});var Spt=s(_z);Knr=r(Spt,"TFSpeech2TextModel"),Spt.forEach(t),Znr=r(Hxe," (Speech2Text model)"),Hxe.forEach(t),esr=i(D),UT=n(D,"LI",{});var Uxe=s(UT);X_e=n(Uxe,"STRONG",{});var Rpt=s(X_e);osr=r(Rpt,"t5"),Rpt.forEach(t),rsr=r(Uxe," \u2014 "),bz=n(Uxe,"A",{href:!0});var Bpt=s(bz);tsr=r(Bpt,"TFT5Model"),Bpt.forEach(t),asr=r(Uxe," (T5 model)"),Uxe.forEach(t),nsr=i(D),JT=n(D,"LI",{});var Jxe=s(JT);z_e=n(Jxe,"STRONG",{});var Ppt=s(z_e);ssr=r(Ppt,"tapas"),Ppt.forEach(t),lsr=r(Jxe," \u2014 "),vz=n(Jxe,"A",{href:!0});var Ipt=s(vz);isr=r(Ipt,"TFTapasModel"),Ipt.forEach(t),dsr=r(Jxe," (TAPAS model)"),Jxe.forEach(t),csr=i(D),YT=n(D,"LI",{});var Yxe=s(YT);Q_e=n(Yxe,"STRONG",{});var qpt=s(Q_e);fsr=r(qpt,"transfo-xl"),qpt.forEach(t),msr=r(Yxe," \u2014 "),Fz=n(Yxe,"A",{href:!0});var Npt=s(Fz);gsr=r(Npt,"TFTransfoXLModel"),Npt.forEach(t),hsr=r(Yxe," (Transformer-XL model)"),Yxe.forEach(t),psr=i(D),KT=n(D,"LI",{});var Kxe=s(KT);W_e=n(Kxe,"STRONG",{});var jpt=s(W_e);usr=r(jpt,"vit"),jpt.forEach(t),_sr=r(Kxe," \u2014 "),Tz=n(Kxe,"A",{href:!0});var Dpt=s(Tz);bsr=r(Dpt,"TFViTModel"),Dpt.forEach(t),vsr=r(Kxe," (ViT model)"),Kxe.forEach(t),Fsr=i(D),ZT=n(D,"LI",{});var Zxe=s(ZT);H_e=n(Zxe,"STRONG",{});var Gpt=s(H_e);Tsr=r(Gpt,"vit_mae"),Gpt.forEach(t),Msr=r(Zxe," \u2014 "),Mz=n(Zxe,"A",{href:!0});var Opt=s(Mz);Esr=r(Opt,"TFViTMAEModel"),Opt.forEach(t),Csr=r(Zxe," (ViTMAE model)"),Zxe.forEach(t),wsr=i(D),e7=n(D,"LI",{});var e$e=s(e7);U_e=n(e$e,"STRONG",{});var Vpt=s(U_e);Asr=r(Vpt,"wav2vec2"),Vpt.forEach(t),ysr=r(e$e," \u2014 "),Ez=n(e$e,"A",{href:!0});var Xpt=s(Ez);Lsr=r(Xpt,"TFWav2Vec2Model"),Xpt.forEach(t),xsr=r(e$e," (Wav2Vec2 model)"),e$e.forEach(t),$sr=i(D),o7=n(D,"LI",{});var o$e=s(o7);J_e=n(o$e,"STRONG",{});var zpt=s(J_e);ksr=r(zpt,"xlm"),zpt.forEach(t),Ssr=r(o$e," \u2014 "),Cz=n(o$e,"A",{href:!0});var Qpt=s(Cz);Rsr=r(Qpt,"TFXLMModel"),Qpt.forEach(t),Bsr=r(o$e," (XLM model)"),o$e.forEach(t),Psr=i(D),r7=n(D,"LI",{});var r$e=s(r7);Y_e=n(r$e,"STRONG",{});var Wpt=s(Y_e);Isr=r(Wpt,"xlm-roberta"),Wpt.forEach(t),qsr=r(r$e," \u2014 "),wz=n(r$e,"A",{href:!0});var Hpt=s(wz);Nsr=r(Hpt,"TFXLMRobertaModel"),Hpt.forEach(t),jsr=r(r$e," (XLM-RoBERTa model)"),r$e.forEach(t),Dsr=i(D),t7=n(D,"LI",{});var t$e=s(t7);K_e=n(t$e,"STRONG",{});var Upt=s(K_e);Gsr=r(Upt,"xlnet"),Upt.forEach(t),Osr=r(t$e," \u2014 "),Az=n(t$e,"A",{href:!0});var Jpt=s(Az);Vsr=r(Jpt,"TFXLNetModel"),Jpt.forEach(t),Xsr=r(t$e," (XLNet model)"),t$e.forEach(t),D.forEach(t),zsr=i(cl),T(a7.$$.fragment,cl),cl.forEach(t),dl.forEach(t),oIe=i(f),Dd=n(f,"H2",{class:!0});var lNe=s(Dd);n7=n(lNe,"A",{id:!0,class:!0,href:!0});var Ypt=s(n7);Z_e=n(Ypt,"SPAN",{});var Kpt=s(Z_e);T(Cy.$$.fragment,Kpt),Kpt.forEach(t),Ypt.forEach(t),Qsr=i(lNe),e2e=n(lNe,"SPAN",{});var Zpt=s(e2e);Wsr=r(Zpt,"TFAutoModelForPreTraining"),Zpt.forEach(t),lNe.forEach(t),rIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(wy.$$.fragment,fl),Hsr=i(fl),Gd=n(fl,"P",{});var BK=s(Gd);Usr=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yz=n(BK,"A",{href:!0});var eut=s(yz);Jsr=r(eut,"from_pretrained()"),eut.forEach(t),Ysr=r(BK," class method or the "),Lz=n(BK,"A",{href:!0});var out=s(Lz);Ksr=r(out,"from_config()"),out.forEach(t),Zsr=r(BK,` class
method.`),BK.forEach(t),elr=i(fl),Ay=n(fl,"P",{});var iNe=s(Ay);olr=r(iNe,"This class cannot be instantiated directly using "),o2e=n(iNe,"CODE",{});var rut=s(o2e);rlr=r(rut,"__init__()"),rut.forEach(t),tlr=r(iNe," (throws an error)."),iNe.forEach(t),alr=i(fl),At=n(fl,"DIV",{class:!0});var N3=s(At);T(yy.$$.fragment,N3),nlr=i(N3),r2e=n(N3,"P",{});var tut=s(r2e);slr=r(tut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tut.forEach(t),llr=i(N3),Od=n(N3,"P",{});var PK=s(Od);ilr=r(PK,`Note:
Loading a model from its configuration file does `),t2e=n(PK,"STRONG",{});var aut=s(t2e);dlr=r(aut,"not"),aut.forEach(t),clr=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(PK,"A",{href:!0});var nut=s(xz);flr=r(nut,"from_pretrained()"),nut.forEach(t),mlr=r(PK," to load the model weights."),PK.forEach(t),glr=i(N3),T(s7.$$.fragment,N3),N3.forEach(t),hlr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(Ly.$$.fragment,ml),plr=i(ml),a2e=n(ml,"P",{});var sut=s(a2e);ulr=r(sut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sut.forEach(t),_lr=i(ml),Za=n(ml,"P",{});var j3=s(Za);blr=r(j3,"The model class to instantiate is selected based on the "),n2e=n(j3,"CODE",{});var lut=s(n2e);vlr=r(lut,"model_type"),lut.forEach(t),Flr=r(j3,` property of the config object (either
passed as an argument or loaded from `),s2e=n(j3,"CODE",{});var iut=s(s2e);Tlr=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),Mlr=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(j3,"CODE",{});var dut=s(l2e);Elr=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),Clr=r(j3,":"),j3.forEach(t),wlr=i(ml),ne=n(ml,"UL",{});var le=s(ne);l7=n(le,"LI",{});var a$e=s(l7);i2e=n(a$e,"STRONG",{});var cut=s(i2e);Alr=r(cut,"albert"),cut.forEach(t),ylr=r(a$e," \u2014 "),$z=n(a$e,"A",{href:!0});var fut=s($z);Llr=r(fut,"TFAlbertForPreTraining"),fut.forEach(t),xlr=r(a$e," (ALBERT model)"),a$e.forEach(t),$lr=i(le),i7=n(le,"LI",{});var n$e=s(i7);d2e=n(n$e,"STRONG",{});var mut=s(d2e);klr=r(mut,"bart"),mut.forEach(t),Slr=r(n$e," \u2014 "),kz=n(n$e,"A",{href:!0});var gut=s(kz);Rlr=r(gut,"TFBartForConditionalGeneration"),gut.forEach(t),Blr=r(n$e," (BART model)"),n$e.forEach(t),Plr=i(le),d7=n(le,"LI",{});var s$e=s(d7);c2e=n(s$e,"STRONG",{});var hut=s(c2e);Ilr=r(hut,"bert"),hut.forEach(t),qlr=r(s$e," \u2014 "),Sz=n(s$e,"A",{href:!0});var put=s(Sz);Nlr=r(put,"TFBertForPreTraining"),put.forEach(t),jlr=r(s$e," (BERT model)"),s$e.forEach(t),Dlr=i(le),c7=n(le,"LI",{});var l$e=s(c7);f2e=n(l$e,"STRONG",{});var uut=s(f2e);Glr=r(uut,"camembert"),uut.forEach(t),Olr=r(l$e," \u2014 "),Rz=n(l$e,"A",{href:!0});var _ut=s(Rz);Vlr=r(_ut,"TFCamembertForMaskedLM"),_ut.forEach(t),Xlr=r(l$e," (CamemBERT model)"),l$e.forEach(t),zlr=i(le),f7=n(le,"LI",{});var i$e=s(f7);m2e=n(i$e,"STRONG",{});var but=s(m2e);Qlr=r(but,"ctrl"),but.forEach(t),Wlr=r(i$e," \u2014 "),Bz=n(i$e,"A",{href:!0});var vut=s(Bz);Hlr=r(vut,"TFCTRLLMHeadModel"),vut.forEach(t),Ulr=r(i$e," (CTRL model)"),i$e.forEach(t),Jlr=i(le),m7=n(le,"LI",{});var d$e=s(m7);g2e=n(d$e,"STRONG",{});var Fut=s(g2e);Ylr=r(Fut,"distilbert"),Fut.forEach(t),Klr=r(d$e," \u2014 "),Pz=n(d$e,"A",{href:!0});var Tut=s(Pz);Zlr=r(Tut,"TFDistilBertForMaskedLM"),Tut.forEach(t),eir=r(d$e," (DistilBERT model)"),d$e.forEach(t),oir=i(le),g7=n(le,"LI",{});var c$e=s(g7);h2e=n(c$e,"STRONG",{});var Mut=s(h2e);rir=r(Mut,"electra"),Mut.forEach(t),tir=r(c$e," \u2014 "),Iz=n(c$e,"A",{href:!0});var Eut=s(Iz);air=r(Eut,"TFElectraForPreTraining"),Eut.forEach(t),nir=r(c$e," (ELECTRA model)"),c$e.forEach(t),sir=i(le),h7=n(le,"LI",{});var f$e=s(h7);p2e=n(f$e,"STRONG",{});var Cut=s(p2e);lir=r(Cut,"flaubert"),Cut.forEach(t),iir=r(f$e," \u2014 "),qz=n(f$e,"A",{href:!0});var wut=s(qz);dir=r(wut,"TFFlaubertWithLMHeadModel"),wut.forEach(t),cir=r(f$e," (FlauBERT model)"),f$e.forEach(t),fir=i(le),p7=n(le,"LI",{});var m$e=s(p7);u2e=n(m$e,"STRONG",{});var Aut=s(u2e);mir=r(Aut,"funnel"),Aut.forEach(t),gir=r(m$e," \u2014 "),Nz=n(m$e,"A",{href:!0});var yut=s(Nz);hir=r(yut,"TFFunnelForPreTraining"),yut.forEach(t),pir=r(m$e," (Funnel Transformer model)"),m$e.forEach(t),uir=i(le),u7=n(le,"LI",{});var g$e=s(u7);_2e=n(g$e,"STRONG",{});var Lut=s(_2e);_ir=r(Lut,"gpt2"),Lut.forEach(t),bir=r(g$e," \u2014 "),jz=n(g$e,"A",{href:!0});var xut=s(jz);vir=r(xut,"TFGPT2LMHeadModel"),xut.forEach(t),Fir=r(g$e," (OpenAI GPT-2 model)"),g$e.forEach(t),Tir=i(le),_7=n(le,"LI",{});var h$e=s(_7);b2e=n(h$e,"STRONG",{});var $ut=s(b2e);Mir=r($ut,"layoutlm"),$ut.forEach(t),Eir=r(h$e," \u2014 "),Dz=n(h$e,"A",{href:!0});var kut=s(Dz);Cir=r(kut,"TFLayoutLMForMaskedLM"),kut.forEach(t),wir=r(h$e," (LayoutLM model)"),h$e.forEach(t),Air=i(le),b7=n(le,"LI",{});var p$e=s(b7);v2e=n(p$e,"STRONG",{});var Sut=s(v2e);yir=r(Sut,"lxmert"),Sut.forEach(t),Lir=r(p$e," \u2014 "),Gz=n(p$e,"A",{href:!0});var Rut=s(Gz);xir=r(Rut,"TFLxmertForPreTraining"),Rut.forEach(t),$ir=r(p$e," (LXMERT model)"),p$e.forEach(t),kir=i(le),v7=n(le,"LI",{});var u$e=s(v7);F2e=n(u$e,"STRONG",{});var But=s(F2e);Sir=r(But,"mobilebert"),But.forEach(t),Rir=r(u$e," \u2014 "),Oz=n(u$e,"A",{href:!0});var Put=s(Oz);Bir=r(Put,"TFMobileBertForPreTraining"),Put.forEach(t),Pir=r(u$e," (MobileBERT model)"),u$e.forEach(t),Iir=i(le),F7=n(le,"LI",{});var _$e=s(F7);T2e=n(_$e,"STRONG",{});var Iut=s(T2e);qir=r(Iut,"mpnet"),Iut.forEach(t),Nir=r(_$e," \u2014 "),Vz=n(_$e,"A",{href:!0});var qut=s(Vz);jir=r(qut,"TFMPNetForMaskedLM"),qut.forEach(t),Dir=r(_$e," (MPNet model)"),_$e.forEach(t),Gir=i(le),T7=n(le,"LI",{});var b$e=s(T7);M2e=n(b$e,"STRONG",{});var Nut=s(M2e);Oir=r(Nut,"openai-gpt"),Nut.forEach(t),Vir=r(b$e," \u2014 "),Xz=n(b$e,"A",{href:!0});var jut=s(Xz);Xir=r(jut,"TFOpenAIGPTLMHeadModel"),jut.forEach(t),zir=r(b$e," (OpenAI GPT model)"),b$e.forEach(t),Qir=i(le),M7=n(le,"LI",{});var v$e=s(M7);E2e=n(v$e,"STRONG",{});var Dut=s(E2e);Wir=r(Dut,"roberta"),Dut.forEach(t),Hir=r(v$e," \u2014 "),zz=n(v$e,"A",{href:!0});var Gut=s(zz);Uir=r(Gut,"TFRobertaForMaskedLM"),Gut.forEach(t),Jir=r(v$e," (RoBERTa model)"),v$e.forEach(t),Yir=i(le),E7=n(le,"LI",{});var F$e=s(E7);C2e=n(F$e,"STRONG",{});var Out=s(C2e);Kir=r(Out,"t5"),Out.forEach(t),Zir=r(F$e," \u2014 "),Qz=n(F$e,"A",{href:!0});var Vut=s(Qz);edr=r(Vut,"TFT5ForConditionalGeneration"),Vut.forEach(t),odr=r(F$e," (T5 model)"),F$e.forEach(t),rdr=i(le),C7=n(le,"LI",{});var T$e=s(C7);w2e=n(T$e,"STRONG",{});var Xut=s(w2e);tdr=r(Xut,"tapas"),Xut.forEach(t),adr=r(T$e," \u2014 "),Wz=n(T$e,"A",{href:!0});var zut=s(Wz);ndr=r(zut,"TFTapasForMaskedLM"),zut.forEach(t),sdr=r(T$e," (TAPAS model)"),T$e.forEach(t),ldr=i(le),w7=n(le,"LI",{});var M$e=s(w7);A2e=n(M$e,"STRONG",{});var Qut=s(A2e);idr=r(Qut,"transfo-xl"),Qut.forEach(t),ddr=r(M$e," \u2014 "),Hz=n(M$e,"A",{href:!0});var Wut=s(Hz);cdr=r(Wut,"TFTransfoXLLMHeadModel"),Wut.forEach(t),fdr=r(M$e," (Transformer-XL model)"),M$e.forEach(t),mdr=i(le),A7=n(le,"LI",{});var E$e=s(A7);y2e=n(E$e,"STRONG",{});var Hut=s(y2e);gdr=r(Hut,"vit_mae"),Hut.forEach(t),hdr=r(E$e," \u2014 "),Uz=n(E$e,"A",{href:!0});var Uut=s(Uz);pdr=r(Uut,"TFViTMAEForPreTraining"),Uut.forEach(t),udr=r(E$e," (ViTMAE model)"),E$e.forEach(t),_dr=i(le),y7=n(le,"LI",{});var C$e=s(y7);L2e=n(C$e,"STRONG",{});var Jut=s(L2e);bdr=r(Jut,"xlm"),Jut.forEach(t),vdr=r(C$e," \u2014 "),Jz=n(C$e,"A",{href:!0});var Yut=s(Jz);Fdr=r(Yut,"TFXLMWithLMHeadModel"),Yut.forEach(t),Tdr=r(C$e," (XLM model)"),C$e.forEach(t),Mdr=i(le),L7=n(le,"LI",{});var w$e=s(L7);x2e=n(w$e,"STRONG",{});var Kut=s(x2e);Edr=r(Kut,"xlm-roberta"),Kut.forEach(t),Cdr=r(w$e," \u2014 "),Yz=n(w$e,"A",{href:!0});var Zut=s(Yz);wdr=r(Zut,"TFXLMRobertaForMaskedLM"),Zut.forEach(t),Adr=r(w$e," (XLM-RoBERTa model)"),w$e.forEach(t),ydr=i(le),x7=n(le,"LI",{});var A$e=s(x7);$2e=n(A$e,"STRONG",{});var e_t=s($2e);Ldr=r(e_t,"xlnet"),e_t.forEach(t),xdr=r(A$e," \u2014 "),Kz=n(A$e,"A",{href:!0});var o_t=s(Kz);$dr=r(o_t,"TFXLNetLMHeadModel"),o_t.forEach(t),kdr=r(A$e," (XLNet model)"),A$e.forEach(t),le.forEach(t),Sdr=i(ml),T($7.$$.fragment,ml),ml.forEach(t),fl.forEach(t),tIe=i(f),Vd=n(f,"H2",{class:!0});var dNe=s(Vd);k7=n(dNe,"A",{id:!0,class:!0,href:!0});var r_t=s(k7);k2e=n(r_t,"SPAN",{});var t_t=s(k2e);T(xy.$$.fragment,t_t),t_t.forEach(t),r_t.forEach(t),Rdr=i(dNe),S2e=n(dNe,"SPAN",{});var a_t=s(S2e);Bdr=r(a_t,"TFAutoModelForCausalLM"),a_t.forEach(t),dNe.forEach(t),aIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T($y.$$.fragment,gl),Pdr=i(gl),Xd=n(gl,"P",{});var IK=s(Xd);Idr=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Zz=n(IK,"A",{href:!0});var n_t=s(Zz);qdr=r(n_t,"from_pretrained()"),n_t.forEach(t),Ndr=r(IK," class method or the "),eQ=n(IK,"A",{href:!0});var s_t=s(eQ);jdr=r(s_t,"from_config()"),s_t.forEach(t),Ddr=r(IK,` class
method.`),IK.forEach(t),Gdr=i(gl),ky=n(gl,"P",{});var cNe=s(ky);Odr=r(cNe,"This class cannot be instantiated directly using "),R2e=n(cNe,"CODE",{});var l_t=s(R2e);Vdr=r(l_t,"__init__()"),l_t.forEach(t),Xdr=r(cNe," (throws an error)."),cNe.forEach(t),zdr=i(gl),yt=n(gl,"DIV",{class:!0});var D3=s(yt);T(Sy.$$.fragment,D3),Qdr=i(D3),B2e=n(D3,"P",{});var i_t=s(B2e);Wdr=r(i_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i_t.forEach(t),Hdr=i(D3),zd=n(D3,"P",{});var qK=s(zd);Udr=r(qK,`Note:
Loading a model from its configuration file does `),P2e=n(qK,"STRONG",{});var d_t=s(P2e);Jdr=r(d_t,"not"),d_t.forEach(t),Ydr=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(qK,"A",{href:!0});var c_t=s(oQ);Kdr=r(c_t,"from_pretrained()"),c_t.forEach(t),Zdr=r(qK," to load the model weights."),qK.forEach(t),ecr=i(D3),T(S7.$$.fragment,D3),D3.forEach(t),ocr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(Ry.$$.fragment,hl),rcr=i(hl),I2e=n(hl,"P",{});var f_t=s(I2e);tcr=r(f_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),f_t.forEach(t),acr=i(hl),en=n(hl,"P",{});var G3=s(en);ncr=r(G3,"The model class to instantiate is selected based on the "),q2e=n(G3,"CODE",{});var m_t=s(q2e);scr=r(m_t,"model_type"),m_t.forEach(t),lcr=r(G3,` property of the config object (either
passed as an argument or loaded from `),N2e=n(G3,"CODE",{});var g_t=s(N2e);icr=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),dcr=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(G3,"CODE",{});var h_t=s(j2e);ccr=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),fcr=r(G3,":"),G3.forEach(t),mcr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);R7=n(Ce,"LI",{});var y$e=s(R7);D2e=n(y$e,"STRONG",{});var p_t=s(D2e);gcr=r(p_t,"bert"),p_t.forEach(t),hcr=r(y$e," \u2014 "),rQ=n(y$e,"A",{href:!0});var u_t=s(rQ);pcr=r(u_t,"TFBertLMHeadModel"),u_t.forEach(t),ucr=r(y$e," (BERT model)"),y$e.forEach(t),_cr=i(Ce),B7=n(Ce,"LI",{});var L$e=s(B7);G2e=n(L$e,"STRONG",{});var __t=s(G2e);bcr=r(__t,"camembert"),__t.forEach(t),vcr=r(L$e," \u2014 "),tQ=n(L$e,"A",{href:!0});var b_t=s(tQ);Fcr=r(b_t,"TFCamembertForCausalLM"),b_t.forEach(t),Tcr=r(L$e," (CamemBERT model)"),L$e.forEach(t),Mcr=i(Ce),P7=n(Ce,"LI",{});var x$e=s(P7);O2e=n(x$e,"STRONG",{});var v_t=s(O2e);Ecr=r(v_t,"ctrl"),v_t.forEach(t),Ccr=r(x$e," \u2014 "),aQ=n(x$e,"A",{href:!0});var F_t=s(aQ);wcr=r(F_t,"TFCTRLLMHeadModel"),F_t.forEach(t),Acr=r(x$e," (CTRL model)"),x$e.forEach(t),ycr=i(Ce),I7=n(Ce,"LI",{});var $$e=s(I7);V2e=n($$e,"STRONG",{});var T_t=s(V2e);Lcr=r(T_t,"gpt2"),T_t.forEach(t),xcr=r($$e," \u2014 "),nQ=n($$e,"A",{href:!0});var M_t=s(nQ);$cr=r(M_t,"TFGPT2LMHeadModel"),M_t.forEach(t),kcr=r($$e," (OpenAI GPT-2 model)"),$$e.forEach(t),Scr=i(Ce),q7=n(Ce,"LI",{});var k$e=s(q7);X2e=n(k$e,"STRONG",{});var E_t=s(X2e);Rcr=r(E_t,"gptj"),E_t.forEach(t),Bcr=r(k$e," \u2014 "),sQ=n(k$e,"A",{href:!0});var C_t=s(sQ);Pcr=r(C_t,"TFGPTJForCausalLM"),C_t.forEach(t),Icr=r(k$e," (GPT-J model)"),k$e.forEach(t),qcr=i(Ce),N7=n(Ce,"LI",{});var S$e=s(N7);z2e=n(S$e,"STRONG",{});var w_t=s(z2e);Ncr=r(w_t,"openai-gpt"),w_t.forEach(t),jcr=r(S$e," \u2014 "),lQ=n(S$e,"A",{href:!0});var A_t=s(lQ);Dcr=r(A_t,"TFOpenAIGPTLMHeadModel"),A_t.forEach(t),Gcr=r(S$e," (OpenAI GPT model)"),S$e.forEach(t),Ocr=i(Ce),j7=n(Ce,"LI",{});var R$e=s(j7);Q2e=n(R$e,"STRONG",{});var y_t=s(Q2e);Vcr=r(y_t,"rembert"),y_t.forEach(t),Xcr=r(R$e," \u2014 "),iQ=n(R$e,"A",{href:!0});var L_t=s(iQ);zcr=r(L_t,"TFRemBertForCausalLM"),L_t.forEach(t),Qcr=r(R$e," (RemBERT model)"),R$e.forEach(t),Wcr=i(Ce),D7=n(Ce,"LI",{});var B$e=s(D7);W2e=n(B$e,"STRONG",{});var x_t=s(W2e);Hcr=r(x_t,"roberta"),x_t.forEach(t),Ucr=r(B$e," \u2014 "),dQ=n(B$e,"A",{href:!0});var $_t=s(dQ);Jcr=r($_t,"TFRobertaForCausalLM"),$_t.forEach(t),Ycr=r(B$e," (RoBERTa model)"),B$e.forEach(t),Kcr=i(Ce),G7=n(Ce,"LI",{});var P$e=s(G7);H2e=n(P$e,"STRONG",{});var k_t=s(H2e);Zcr=r(k_t,"roformer"),k_t.forEach(t),efr=r(P$e," \u2014 "),cQ=n(P$e,"A",{href:!0});var S_t=s(cQ);ofr=r(S_t,"TFRoFormerForCausalLM"),S_t.forEach(t),rfr=r(P$e," (RoFormer model)"),P$e.forEach(t),tfr=i(Ce),O7=n(Ce,"LI",{});var I$e=s(O7);U2e=n(I$e,"STRONG",{});var R_t=s(U2e);afr=r(R_t,"transfo-xl"),R_t.forEach(t),nfr=r(I$e," \u2014 "),fQ=n(I$e,"A",{href:!0});var B_t=s(fQ);sfr=r(B_t,"TFTransfoXLLMHeadModel"),B_t.forEach(t),lfr=r(I$e," (Transformer-XL model)"),I$e.forEach(t),ifr=i(Ce),V7=n(Ce,"LI",{});var q$e=s(V7);J2e=n(q$e,"STRONG",{});var P_t=s(J2e);dfr=r(P_t,"xlm"),P_t.forEach(t),cfr=r(q$e," \u2014 "),mQ=n(q$e,"A",{href:!0});var I_t=s(mQ);ffr=r(I_t,"TFXLMWithLMHeadModel"),I_t.forEach(t),mfr=r(q$e," (XLM model)"),q$e.forEach(t),gfr=i(Ce),X7=n(Ce,"LI",{});var N$e=s(X7);Y2e=n(N$e,"STRONG",{});var q_t=s(Y2e);hfr=r(q_t,"xlnet"),q_t.forEach(t),pfr=r(N$e," \u2014 "),gQ=n(N$e,"A",{href:!0});var N_t=s(gQ);ufr=r(N_t,"TFXLNetLMHeadModel"),N_t.forEach(t),_fr=r(N$e," (XLNet model)"),N$e.forEach(t),Ce.forEach(t),bfr=i(hl),T(z7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),nIe=i(f),Qd=n(f,"H2",{class:!0});var fNe=s(Qd);Q7=n(fNe,"A",{id:!0,class:!0,href:!0});var j_t=s(Q7);K2e=n(j_t,"SPAN",{});var D_t=s(K2e);T(By.$$.fragment,D_t),D_t.forEach(t),j_t.forEach(t),vfr=i(fNe),Z2e=n(fNe,"SPAN",{});var G_t=s(Z2e);Ffr=r(G_t,"TFAutoModelForImageClassification"),G_t.forEach(t),fNe.forEach(t),sIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(Py.$$.fragment,pl),Tfr=i(pl),Wd=n(pl,"P",{});var NK=s(Wd);Mfr=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hQ=n(NK,"A",{href:!0});var O_t=s(hQ);Efr=r(O_t,"from_pretrained()"),O_t.forEach(t),Cfr=r(NK," class method or the "),pQ=n(NK,"A",{href:!0});var V_t=s(pQ);wfr=r(V_t,"from_config()"),V_t.forEach(t),Afr=r(NK,` class
method.`),NK.forEach(t),yfr=i(pl),Iy=n(pl,"P",{});var mNe=s(Iy);Lfr=r(mNe,"This class cannot be instantiated directly using "),e1e=n(mNe,"CODE",{});var X_t=s(e1e);xfr=r(X_t,"__init__()"),X_t.forEach(t),$fr=r(mNe," (throws an error)."),mNe.forEach(t),kfr=i(pl),Lt=n(pl,"DIV",{class:!0});var O3=s(Lt);T(qy.$$.fragment,O3),Sfr=i(O3),o1e=n(O3,"P",{});var z_t=s(o1e);Rfr=r(z_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),z_t.forEach(t),Bfr=i(O3),Hd=n(O3,"P",{});var jK=s(Hd);Pfr=r(jK,`Note:
Loading a model from its configuration file does `),r1e=n(jK,"STRONG",{});var Q_t=s(r1e);Ifr=r(Q_t,"not"),Q_t.forEach(t),qfr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(jK,"A",{href:!0});var W_t=s(uQ);Nfr=r(W_t,"from_pretrained()"),W_t.forEach(t),jfr=r(jK," to load the model weights."),jK.forEach(t),Dfr=i(O3),T(W7.$$.fragment,O3),O3.forEach(t),Gfr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(Ny.$$.fragment,ul),Ofr=i(ul),t1e=n(ul,"P",{});var H_t=s(t1e);Vfr=r(H_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),H_t.forEach(t),Xfr=i(ul),on=n(ul,"P",{});var V3=s(on);zfr=r(V3,"The model class to instantiate is selected based on the "),a1e=n(V3,"CODE",{});var U_t=s(a1e);Qfr=r(U_t,"model_type"),U_t.forEach(t),Wfr=r(V3,` property of the config object (either
passed as an argument or loaded from `),n1e=n(V3,"CODE",{});var J_t=s(n1e);Hfr=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),Ufr=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(V3,"CODE",{});var Y_t=s(s1e);Jfr=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),Yfr=r(V3,":"),V3.forEach(t),Kfr=i(ul),jy=n(ul,"UL",{});var gNe=s(jy);H7=n(gNe,"LI",{});var j$e=s(H7);l1e=n(j$e,"STRONG",{});var K_t=s(l1e);Zfr=r(K_t,"convnext"),K_t.forEach(t),emr=r(j$e," \u2014 "),_Q=n(j$e,"A",{href:!0});var Z_t=s(_Q);omr=r(Z_t,"TFConvNextForImageClassification"),Z_t.forEach(t),rmr=r(j$e," (ConvNext model)"),j$e.forEach(t),tmr=i(gNe),U7=n(gNe,"LI",{});var D$e=s(U7);i1e=n(D$e,"STRONG",{});var e2t=s(i1e);amr=r(e2t,"vit"),e2t.forEach(t),nmr=r(D$e," \u2014 "),bQ=n(D$e,"A",{href:!0});var o2t=s(bQ);smr=r(o2t,"TFViTForImageClassification"),o2t.forEach(t),lmr=r(D$e," (ViT model)"),D$e.forEach(t),gNe.forEach(t),imr=i(ul),T(J7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),lIe=i(f),Ud=n(f,"H2",{class:!0});var hNe=s(Ud);Y7=n(hNe,"A",{id:!0,class:!0,href:!0});var r2t=s(Y7);d1e=n(r2t,"SPAN",{});var t2t=s(d1e);T(Dy.$$.fragment,t2t),t2t.forEach(t),r2t.forEach(t),dmr=i(hNe),c1e=n(hNe,"SPAN",{});var a2t=s(c1e);cmr=r(a2t,"TFAutoModelForMaskedLM"),a2t.forEach(t),hNe.forEach(t),iIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(Gy.$$.fragment,_l),fmr=i(_l),Jd=n(_l,"P",{});var DK=s(Jd);mmr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vQ=n(DK,"A",{href:!0});var n2t=s(vQ);gmr=r(n2t,"from_pretrained()"),n2t.forEach(t),hmr=r(DK," class method or the "),FQ=n(DK,"A",{href:!0});var s2t=s(FQ);pmr=r(s2t,"from_config()"),s2t.forEach(t),umr=r(DK,` class
method.`),DK.forEach(t),_mr=i(_l),Oy=n(_l,"P",{});var pNe=s(Oy);bmr=r(pNe,"This class cannot be instantiated directly using "),f1e=n(pNe,"CODE",{});var l2t=s(f1e);vmr=r(l2t,"__init__()"),l2t.forEach(t),Fmr=r(pNe," (throws an error)."),pNe.forEach(t),Tmr=i(_l),xt=n(_l,"DIV",{class:!0});var X3=s(xt);T(Vy.$$.fragment,X3),Mmr=i(X3),m1e=n(X3,"P",{});var i2t=s(m1e);Emr=r(i2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i2t.forEach(t),Cmr=i(X3),Yd=n(X3,"P",{});var GK=s(Yd);wmr=r(GK,`Note:
Loading a model from its configuration file does `),g1e=n(GK,"STRONG",{});var d2t=s(g1e);Amr=r(d2t,"not"),d2t.forEach(t),ymr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(GK,"A",{href:!0});var c2t=s(TQ);Lmr=r(c2t,"from_pretrained()"),c2t.forEach(t),xmr=r(GK," to load the model weights."),GK.forEach(t),$mr=i(X3),T(K7.$$.fragment,X3),X3.forEach(t),kmr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(Xy.$$.fragment,bl),Smr=i(bl),h1e=n(bl,"P",{});var f2t=s(h1e);Rmr=r(f2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),f2t.forEach(t),Bmr=i(bl),rn=n(bl,"P",{});var z3=s(rn);Pmr=r(z3,"The model class to instantiate is selected based on the "),p1e=n(z3,"CODE",{});var m2t=s(p1e);Imr=r(m2t,"model_type"),m2t.forEach(t),qmr=r(z3,` property of the config object (either
passed as an argument or loaded from `),u1e=n(z3,"CODE",{});var g2t=s(u1e);Nmr=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),jmr=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(z3,"CODE",{});var h2t=s(_1e);Dmr=r(h2t,"pretrained_model_name_or_path"),h2t.forEach(t),Gmr=r(z3,":"),z3.forEach(t),Omr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);Z7=n(fe,"LI",{});var G$e=s(Z7);b1e=n(G$e,"STRONG",{});var p2t=s(b1e);Vmr=r(p2t,"albert"),p2t.forEach(t),Xmr=r(G$e," \u2014 "),MQ=n(G$e,"A",{href:!0});var u2t=s(MQ);zmr=r(u2t,"TFAlbertForMaskedLM"),u2t.forEach(t),Qmr=r(G$e," (ALBERT model)"),G$e.forEach(t),Wmr=i(fe),e9=n(fe,"LI",{});var O$e=s(e9);v1e=n(O$e,"STRONG",{});var _2t=s(v1e);Hmr=r(_2t,"bert"),_2t.forEach(t),Umr=r(O$e," \u2014 "),EQ=n(O$e,"A",{href:!0});var b2t=s(EQ);Jmr=r(b2t,"TFBertForMaskedLM"),b2t.forEach(t),Ymr=r(O$e," (BERT model)"),O$e.forEach(t),Kmr=i(fe),o9=n(fe,"LI",{});var V$e=s(o9);F1e=n(V$e,"STRONG",{});var v2t=s(F1e);Zmr=r(v2t,"camembert"),v2t.forEach(t),egr=r(V$e," \u2014 "),CQ=n(V$e,"A",{href:!0});var F2t=s(CQ);ogr=r(F2t,"TFCamembertForMaskedLM"),F2t.forEach(t),rgr=r(V$e," (CamemBERT model)"),V$e.forEach(t),tgr=i(fe),r9=n(fe,"LI",{});var X$e=s(r9);T1e=n(X$e,"STRONG",{});var T2t=s(T1e);agr=r(T2t,"convbert"),T2t.forEach(t),ngr=r(X$e," \u2014 "),wQ=n(X$e,"A",{href:!0});var M2t=s(wQ);sgr=r(M2t,"TFConvBertForMaskedLM"),M2t.forEach(t),lgr=r(X$e," (ConvBERT model)"),X$e.forEach(t),igr=i(fe),t9=n(fe,"LI",{});var z$e=s(t9);M1e=n(z$e,"STRONG",{});var E2t=s(M1e);dgr=r(E2t,"deberta"),E2t.forEach(t),cgr=r(z$e," \u2014 "),AQ=n(z$e,"A",{href:!0});var C2t=s(AQ);fgr=r(C2t,"TFDebertaForMaskedLM"),C2t.forEach(t),mgr=r(z$e," (DeBERTa model)"),z$e.forEach(t),ggr=i(fe),a9=n(fe,"LI",{});var Q$e=s(a9);E1e=n(Q$e,"STRONG",{});var w2t=s(E1e);hgr=r(w2t,"deberta-v2"),w2t.forEach(t),pgr=r(Q$e," \u2014 "),yQ=n(Q$e,"A",{href:!0});var A2t=s(yQ);ugr=r(A2t,"TFDebertaV2ForMaskedLM"),A2t.forEach(t),_gr=r(Q$e," (DeBERTa-v2 model)"),Q$e.forEach(t),bgr=i(fe),n9=n(fe,"LI",{});var W$e=s(n9);C1e=n(W$e,"STRONG",{});var y2t=s(C1e);vgr=r(y2t,"distilbert"),y2t.forEach(t),Fgr=r(W$e," \u2014 "),LQ=n(W$e,"A",{href:!0});var L2t=s(LQ);Tgr=r(L2t,"TFDistilBertForMaskedLM"),L2t.forEach(t),Mgr=r(W$e," (DistilBERT model)"),W$e.forEach(t),Egr=i(fe),s9=n(fe,"LI",{});var H$e=s(s9);w1e=n(H$e,"STRONG",{});var x2t=s(w1e);Cgr=r(x2t,"electra"),x2t.forEach(t),wgr=r(H$e," \u2014 "),xQ=n(H$e,"A",{href:!0});var $2t=s(xQ);Agr=r($2t,"TFElectraForMaskedLM"),$2t.forEach(t),ygr=r(H$e," (ELECTRA model)"),H$e.forEach(t),Lgr=i(fe),l9=n(fe,"LI",{});var U$e=s(l9);A1e=n(U$e,"STRONG",{});var k2t=s(A1e);xgr=r(k2t,"flaubert"),k2t.forEach(t),$gr=r(U$e," \u2014 "),$Q=n(U$e,"A",{href:!0});var S2t=s($Q);kgr=r(S2t,"TFFlaubertWithLMHeadModel"),S2t.forEach(t),Sgr=r(U$e," (FlauBERT model)"),U$e.forEach(t),Rgr=i(fe),i9=n(fe,"LI",{});var J$e=s(i9);y1e=n(J$e,"STRONG",{});var R2t=s(y1e);Bgr=r(R2t,"funnel"),R2t.forEach(t),Pgr=r(J$e," \u2014 "),kQ=n(J$e,"A",{href:!0});var B2t=s(kQ);Igr=r(B2t,"TFFunnelForMaskedLM"),B2t.forEach(t),qgr=r(J$e," (Funnel Transformer model)"),J$e.forEach(t),Ngr=i(fe),d9=n(fe,"LI",{});var Y$e=s(d9);L1e=n(Y$e,"STRONG",{});var P2t=s(L1e);jgr=r(P2t,"layoutlm"),P2t.forEach(t),Dgr=r(Y$e," \u2014 "),SQ=n(Y$e,"A",{href:!0});var I2t=s(SQ);Ggr=r(I2t,"TFLayoutLMForMaskedLM"),I2t.forEach(t),Ogr=r(Y$e," (LayoutLM model)"),Y$e.forEach(t),Vgr=i(fe),c9=n(fe,"LI",{});var K$e=s(c9);x1e=n(K$e,"STRONG",{});var q2t=s(x1e);Xgr=r(q2t,"longformer"),q2t.forEach(t),zgr=r(K$e," \u2014 "),RQ=n(K$e,"A",{href:!0});var N2t=s(RQ);Qgr=r(N2t,"TFLongformerForMaskedLM"),N2t.forEach(t),Wgr=r(K$e," (Longformer model)"),K$e.forEach(t),Hgr=i(fe),f9=n(fe,"LI",{});var Z$e=s(f9);$1e=n(Z$e,"STRONG",{});var j2t=s($1e);Ugr=r(j2t,"mobilebert"),j2t.forEach(t),Jgr=r(Z$e," \u2014 "),BQ=n(Z$e,"A",{href:!0});var D2t=s(BQ);Ygr=r(D2t,"TFMobileBertForMaskedLM"),D2t.forEach(t),Kgr=r(Z$e," (MobileBERT model)"),Z$e.forEach(t),Zgr=i(fe),m9=n(fe,"LI",{});var eke=s(m9);k1e=n(eke,"STRONG",{});var G2t=s(k1e);ehr=r(G2t,"mpnet"),G2t.forEach(t),ohr=r(eke," \u2014 "),PQ=n(eke,"A",{href:!0});var O2t=s(PQ);rhr=r(O2t,"TFMPNetForMaskedLM"),O2t.forEach(t),thr=r(eke," (MPNet model)"),eke.forEach(t),ahr=i(fe),g9=n(fe,"LI",{});var oke=s(g9);S1e=n(oke,"STRONG",{});var V2t=s(S1e);nhr=r(V2t,"rembert"),V2t.forEach(t),shr=r(oke," \u2014 "),IQ=n(oke,"A",{href:!0});var X2t=s(IQ);lhr=r(X2t,"TFRemBertForMaskedLM"),X2t.forEach(t),ihr=r(oke," (RemBERT model)"),oke.forEach(t),dhr=i(fe),h9=n(fe,"LI",{});var rke=s(h9);R1e=n(rke,"STRONG",{});var z2t=s(R1e);chr=r(z2t,"roberta"),z2t.forEach(t),fhr=r(rke," \u2014 "),qQ=n(rke,"A",{href:!0});var Q2t=s(qQ);mhr=r(Q2t,"TFRobertaForMaskedLM"),Q2t.forEach(t),ghr=r(rke," (RoBERTa model)"),rke.forEach(t),hhr=i(fe),p9=n(fe,"LI",{});var tke=s(p9);B1e=n(tke,"STRONG",{});var W2t=s(B1e);phr=r(W2t,"roformer"),W2t.forEach(t),uhr=r(tke," \u2014 "),NQ=n(tke,"A",{href:!0});var H2t=s(NQ);_hr=r(H2t,"TFRoFormerForMaskedLM"),H2t.forEach(t),bhr=r(tke," (RoFormer model)"),tke.forEach(t),vhr=i(fe),u9=n(fe,"LI",{});var ake=s(u9);P1e=n(ake,"STRONG",{});var U2t=s(P1e);Fhr=r(U2t,"tapas"),U2t.forEach(t),Thr=r(ake," \u2014 "),jQ=n(ake,"A",{href:!0});var J2t=s(jQ);Mhr=r(J2t,"TFTapasForMaskedLM"),J2t.forEach(t),Ehr=r(ake," (TAPAS model)"),ake.forEach(t),Chr=i(fe),_9=n(fe,"LI",{});var nke=s(_9);I1e=n(nke,"STRONG",{});var Y2t=s(I1e);whr=r(Y2t,"xlm"),Y2t.forEach(t),Ahr=r(nke," \u2014 "),DQ=n(nke,"A",{href:!0});var K2t=s(DQ);yhr=r(K2t,"TFXLMWithLMHeadModel"),K2t.forEach(t),Lhr=r(nke," (XLM model)"),nke.forEach(t),xhr=i(fe),b9=n(fe,"LI",{});var ske=s(b9);q1e=n(ske,"STRONG",{});var Z2t=s(q1e);$hr=r(Z2t,"xlm-roberta"),Z2t.forEach(t),khr=r(ske," \u2014 "),GQ=n(ske,"A",{href:!0});var e1t=s(GQ);Shr=r(e1t,"TFXLMRobertaForMaskedLM"),e1t.forEach(t),Rhr=r(ske," (XLM-RoBERTa model)"),ske.forEach(t),fe.forEach(t),Bhr=i(bl),T(v9.$$.fragment,bl),bl.forEach(t),_l.forEach(t),dIe=i(f),Kd=n(f,"H2",{class:!0});var uNe=s(Kd);F9=n(uNe,"A",{id:!0,class:!0,href:!0});var o1t=s(F9);N1e=n(o1t,"SPAN",{});var r1t=s(N1e);T(zy.$$.fragment,r1t),r1t.forEach(t),o1t.forEach(t),Phr=i(uNe),j1e=n(uNe,"SPAN",{});var t1t=s(j1e);Ihr=r(t1t,"TFAutoModelForSeq2SeqLM"),t1t.forEach(t),uNe.forEach(t),cIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(Qy.$$.fragment,vl),qhr=i(vl),Zd=n(vl,"P",{});var OK=s(Zd);Nhr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OQ=n(OK,"A",{href:!0});var a1t=s(OQ);jhr=r(a1t,"from_pretrained()"),a1t.forEach(t),Dhr=r(OK," class method or the "),VQ=n(OK,"A",{href:!0});var n1t=s(VQ);Ghr=r(n1t,"from_config()"),n1t.forEach(t),Ohr=r(OK,` class
method.`),OK.forEach(t),Vhr=i(vl),Wy=n(vl,"P",{});var _Ne=s(Wy);Xhr=r(_Ne,"This class cannot be instantiated directly using "),D1e=n(_Ne,"CODE",{});var s1t=s(D1e);zhr=r(s1t,"__init__()"),s1t.forEach(t),Qhr=r(_Ne," (throws an error)."),_Ne.forEach(t),Whr=i(vl),$t=n(vl,"DIV",{class:!0});var Q3=s($t);T(Hy.$$.fragment,Q3),Hhr=i(Q3),G1e=n(Q3,"P",{});var l1t=s(G1e);Uhr=r(l1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l1t.forEach(t),Jhr=i(Q3),ec=n(Q3,"P",{});var VK=s(ec);Yhr=r(VK,`Note:
Loading a model from its configuration file does `),O1e=n(VK,"STRONG",{});var i1t=s(O1e);Khr=r(i1t,"not"),i1t.forEach(t),Zhr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(VK,"A",{href:!0});var d1t=s(XQ);epr=r(d1t,"from_pretrained()"),d1t.forEach(t),opr=r(VK," to load the model weights."),VK.forEach(t),rpr=i(Q3),T(T9.$$.fragment,Q3),Q3.forEach(t),tpr=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(Uy.$$.fragment,Fl),apr=i(Fl),V1e=n(Fl,"P",{});var c1t=s(V1e);npr=r(c1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),c1t.forEach(t),spr=i(Fl),tn=n(Fl,"P",{});var W3=s(tn);lpr=r(W3,"The model class to instantiate is selected based on the "),X1e=n(W3,"CODE",{});var f1t=s(X1e);ipr=r(f1t,"model_type"),f1t.forEach(t),dpr=r(W3,` property of the config object (either
passed as an argument or loaded from `),z1e=n(W3,"CODE",{});var m1t=s(z1e);cpr=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),fpr=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(W3,"CODE",{});var g1t=s(Q1e);mpr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),gpr=r(W3,":"),W3.forEach(t),hpr=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);M9=n(Re,"LI",{});var lke=s(M9);W1e=n(lke,"STRONG",{});var h1t=s(W1e);ppr=r(h1t,"bart"),h1t.forEach(t),upr=r(lke," \u2014 "),zQ=n(lke,"A",{href:!0});var p1t=s(zQ);_pr=r(p1t,"TFBartForConditionalGeneration"),p1t.forEach(t),bpr=r(lke," (BART model)"),lke.forEach(t),vpr=i(Re),E9=n(Re,"LI",{});var ike=s(E9);H1e=n(ike,"STRONG",{});var u1t=s(H1e);Fpr=r(u1t,"blenderbot"),u1t.forEach(t),Tpr=r(ike," \u2014 "),QQ=n(ike,"A",{href:!0});var _1t=s(QQ);Mpr=r(_1t,"TFBlenderbotForConditionalGeneration"),_1t.forEach(t),Epr=r(ike," (Blenderbot model)"),ike.forEach(t),Cpr=i(Re),C9=n(Re,"LI",{});var dke=s(C9);U1e=n(dke,"STRONG",{});var b1t=s(U1e);wpr=r(b1t,"blenderbot-small"),b1t.forEach(t),Apr=r(dke," \u2014 "),WQ=n(dke,"A",{href:!0});var v1t=s(WQ);ypr=r(v1t,"TFBlenderbotSmallForConditionalGeneration"),v1t.forEach(t),Lpr=r(dke," (BlenderbotSmall model)"),dke.forEach(t),xpr=i(Re),w9=n(Re,"LI",{});var cke=s(w9);J1e=n(cke,"STRONG",{});var F1t=s(J1e);$pr=r(F1t,"encoder-decoder"),F1t.forEach(t),kpr=r(cke," \u2014 "),HQ=n(cke,"A",{href:!0});var T1t=s(HQ);Spr=r(T1t,"TFEncoderDecoderModel"),T1t.forEach(t),Rpr=r(cke," (Encoder decoder model)"),cke.forEach(t),Bpr=i(Re),A9=n(Re,"LI",{});var fke=s(A9);Y1e=n(fke,"STRONG",{});var M1t=s(Y1e);Ppr=r(M1t,"led"),M1t.forEach(t),Ipr=r(fke," \u2014 "),UQ=n(fke,"A",{href:!0});var E1t=s(UQ);qpr=r(E1t,"TFLEDForConditionalGeneration"),E1t.forEach(t),Npr=r(fke," (LED model)"),fke.forEach(t),jpr=i(Re),y9=n(Re,"LI",{});var mke=s(y9);K1e=n(mke,"STRONG",{});var C1t=s(K1e);Dpr=r(C1t,"marian"),C1t.forEach(t),Gpr=r(mke," \u2014 "),JQ=n(mke,"A",{href:!0});var w1t=s(JQ);Opr=r(w1t,"TFMarianMTModel"),w1t.forEach(t),Vpr=r(mke," (Marian model)"),mke.forEach(t),Xpr=i(Re),L9=n(Re,"LI",{});var gke=s(L9);Z1e=n(gke,"STRONG",{});var A1t=s(Z1e);zpr=r(A1t,"mbart"),A1t.forEach(t),Qpr=r(gke," \u2014 "),YQ=n(gke,"A",{href:!0});var y1t=s(YQ);Wpr=r(y1t,"TFMBartForConditionalGeneration"),y1t.forEach(t),Hpr=r(gke," (mBART model)"),gke.forEach(t),Upr=i(Re),x9=n(Re,"LI",{});var hke=s(x9);ebe=n(hke,"STRONG",{});var L1t=s(ebe);Jpr=r(L1t,"mt5"),L1t.forEach(t),Ypr=r(hke," \u2014 "),KQ=n(hke,"A",{href:!0});var x1t=s(KQ);Kpr=r(x1t,"TFMT5ForConditionalGeneration"),x1t.forEach(t),Zpr=r(hke," (mT5 model)"),hke.forEach(t),eur=i(Re),$9=n(Re,"LI",{});var pke=s($9);obe=n(pke,"STRONG",{});var $1t=s(obe);our=r($1t,"pegasus"),$1t.forEach(t),rur=r(pke," \u2014 "),ZQ=n(pke,"A",{href:!0});var k1t=s(ZQ);tur=r(k1t,"TFPegasusForConditionalGeneration"),k1t.forEach(t),aur=r(pke," (Pegasus model)"),pke.forEach(t),nur=i(Re),k9=n(Re,"LI",{});var uke=s(k9);rbe=n(uke,"STRONG",{});var S1t=s(rbe);sur=r(S1t,"t5"),S1t.forEach(t),lur=r(uke," \u2014 "),eW=n(uke,"A",{href:!0});var R1t=s(eW);iur=r(R1t,"TFT5ForConditionalGeneration"),R1t.forEach(t),dur=r(uke," (T5 model)"),uke.forEach(t),Re.forEach(t),cur=i(Fl),T(S9.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),fIe=i(f),oc=n(f,"H2",{class:!0});var bNe=s(oc);R9=n(bNe,"A",{id:!0,class:!0,href:!0});var B1t=s(R9);tbe=n(B1t,"SPAN",{});var P1t=s(tbe);T(Jy.$$.fragment,P1t),P1t.forEach(t),B1t.forEach(t),fur=i(bNe),abe=n(bNe,"SPAN",{});var I1t=s(abe);mur=r(I1t,"TFAutoModelForSequenceClassification"),I1t.forEach(t),bNe.forEach(t),mIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(Yy.$$.fragment,Tl),gur=i(Tl),rc=n(Tl,"P",{});var XK=s(rc);hur=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),oW=n(XK,"A",{href:!0});var q1t=s(oW);pur=r(q1t,"from_pretrained()"),q1t.forEach(t),uur=r(XK," class method or the "),rW=n(XK,"A",{href:!0});var N1t=s(rW);_ur=r(N1t,"from_config()"),N1t.forEach(t),bur=r(XK,` class
method.`),XK.forEach(t),vur=i(Tl),Ky=n(Tl,"P",{});var vNe=s(Ky);Fur=r(vNe,"This class cannot be instantiated directly using "),nbe=n(vNe,"CODE",{});var j1t=s(nbe);Tur=r(j1t,"__init__()"),j1t.forEach(t),Mur=r(vNe," (throws an error)."),vNe.forEach(t),Eur=i(Tl),kt=n(Tl,"DIV",{class:!0});var H3=s(kt);T(Zy.$$.fragment,H3),Cur=i(H3),sbe=n(H3,"P",{});var D1t=s(sbe);wur=r(D1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),D1t.forEach(t),Aur=i(H3),tc=n(H3,"P",{});var zK=s(tc);yur=r(zK,`Note:
Loading a model from its configuration file does `),lbe=n(zK,"STRONG",{});var G1t=s(lbe);Lur=r(G1t,"not"),G1t.forEach(t),xur=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(zK,"A",{href:!0});var O1t=s(tW);$ur=r(O1t,"from_pretrained()"),O1t.forEach(t),kur=r(zK," to load the model weights."),zK.forEach(t),Sur=i(H3),T(B9.$$.fragment,H3),H3.forEach(t),Rur=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(eL.$$.fragment,Ml),Bur=i(Ml),ibe=n(Ml,"P",{});var V1t=s(ibe);Pur=r(V1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),V1t.forEach(t),Iur=i(Ml),an=n(Ml,"P",{});var U3=s(an);qur=r(U3,"The model class to instantiate is selected based on the "),dbe=n(U3,"CODE",{});var X1t=s(dbe);Nur=r(X1t,"model_type"),X1t.forEach(t),jur=r(U3,` property of the config object (either
passed as an argument or loaded from `),cbe=n(U3,"CODE",{});var z1t=s(cbe);Dur=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),Gur=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(U3,"CODE",{});var Q1t=s(fbe);Our=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),Vur=r(U3,":"),U3.forEach(t),Xur=i(Ml),Z=n(Ml,"UL",{});var re=s(Z);P9=n(re,"LI",{});var _ke=s(P9);mbe=n(_ke,"STRONG",{});var W1t=s(mbe);zur=r(W1t,"albert"),W1t.forEach(t),Qur=r(_ke," \u2014 "),aW=n(_ke,"A",{href:!0});var H1t=s(aW);Wur=r(H1t,"TFAlbertForSequenceClassification"),H1t.forEach(t),Hur=r(_ke," (ALBERT model)"),_ke.forEach(t),Uur=i(re),I9=n(re,"LI",{});var bke=s(I9);gbe=n(bke,"STRONG",{});var U1t=s(gbe);Jur=r(U1t,"bert"),U1t.forEach(t),Yur=r(bke," \u2014 "),nW=n(bke,"A",{href:!0});var J1t=s(nW);Kur=r(J1t,"TFBertForSequenceClassification"),J1t.forEach(t),Zur=r(bke," (BERT model)"),bke.forEach(t),e_r=i(re),q9=n(re,"LI",{});var vke=s(q9);hbe=n(vke,"STRONG",{});var Y1t=s(hbe);o_r=r(Y1t,"camembert"),Y1t.forEach(t),r_r=r(vke," \u2014 "),sW=n(vke,"A",{href:!0});var K1t=s(sW);t_r=r(K1t,"TFCamembertForSequenceClassification"),K1t.forEach(t),a_r=r(vke," (CamemBERT model)"),vke.forEach(t),n_r=i(re),N9=n(re,"LI",{});var Fke=s(N9);pbe=n(Fke,"STRONG",{});var Z1t=s(pbe);s_r=r(Z1t,"convbert"),Z1t.forEach(t),l_r=r(Fke," \u2014 "),lW=n(Fke,"A",{href:!0});var ebt=s(lW);i_r=r(ebt,"TFConvBertForSequenceClassification"),ebt.forEach(t),d_r=r(Fke," (ConvBERT model)"),Fke.forEach(t),c_r=i(re),j9=n(re,"LI",{});var Tke=s(j9);ube=n(Tke,"STRONG",{});var obt=s(ube);f_r=r(obt,"ctrl"),obt.forEach(t),m_r=r(Tke," \u2014 "),iW=n(Tke,"A",{href:!0});var rbt=s(iW);g_r=r(rbt,"TFCTRLForSequenceClassification"),rbt.forEach(t),h_r=r(Tke," (CTRL model)"),Tke.forEach(t),p_r=i(re),D9=n(re,"LI",{});var Mke=s(D9);_be=n(Mke,"STRONG",{});var tbt=s(_be);u_r=r(tbt,"deberta"),tbt.forEach(t),__r=r(Mke," \u2014 "),dW=n(Mke,"A",{href:!0});var abt=s(dW);b_r=r(abt,"TFDebertaForSequenceClassification"),abt.forEach(t),v_r=r(Mke," (DeBERTa model)"),Mke.forEach(t),F_r=i(re),G9=n(re,"LI",{});var Eke=s(G9);bbe=n(Eke,"STRONG",{});var nbt=s(bbe);T_r=r(nbt,"deberta-v2"),nbt.forEach(t),M_r=r(Eke," \u2014 "),cW=n(Eke,"A",{href:!0});var sbt=s(cW);E_r=r(sbt,"TFDebertaV2ForSequenceClassification"),sbt.forEach(t),C_r=r(Eke," (DeBERTa-v2 model)"),Eke.forEach(t),w_r=i(re),O9=n(re,"LI",{});var Cke=s(O9);vbe=n(Cke,"STRONG",{});var lbt=s(vbe);A_r=r(lbt,"distilbert"),lbt.forEach(t),y_r=r(Cke," \u2014 "),fW=n(Cke,"A",{href:!0});var ibt=s(fW);L_r=r(ibt,"TFDistilBertForSequenceClassification"),ibt.forEach(t),x_r=r(Cke," (DistilBERT model)"),Cke.forEach(t),$_r=i(re),V9=n(re,"LI",{});var wke=s(V9);Fbe=n(wke,"STRONG",{});var dbt=s(Fbe);k_r=r(dbt,"electra"),dbt.forEach(t),S_r=r(wke," \u2014 "),mW=n(wke,"A",{href:!0});var cbt=s(mW);R_r=r(cbt,"TFElectraForSequenceClassification"),cbt.forEach(t),B_r=r(wke," (ELECTRA model)"),wke.forEach(t),P_r=i(re),X9=n(re,"LI",{});var Ake=s(X9);Tbe=n(Ake,"STRONG",{});var fbt=s(Tbe);I_r=r(fbt,"flaubert"),fbt.forEach(t),q_r=r(Ake," \u2014 "),gW=n(Ake,"A",{href:!0});var mbt=s(gW);N_r=r(mbt,"TFFlaubertForSequenceClassification"),mbt.forEach(t),j_r=r(Ake," (FlauBERT model)"),Ake.forEach(t),D_r=i(re),z9=n(re,"LI",{});var yke=s(z9);Mbe=n(yke,"STRONG",{});var gbt=s(Mbe);G_r=r(gbt,"funnel"),gbt.forEach(t),O_r=r(yke," \u2014 "),hW=n(yke,"A",{href:!0});var hbt=s(hW);V_r=r(hbt,"TFFunnelForSequenceClassification"),hbt.forEach(t),X_r=r(yke," (Funnel Transformer model)"),yke.forEach(t),z_r=i(re),Q9=n(re,"LI",{});var Lke=s(Q9);Ebe=n(Lke,"STRONG",{});var pbt=s(Ebe);Q_r=r(pbt,"gpt2"),pbt.forEach(t),W_r=r(Lke," \u2014 "),pW=n(Lke,"A",{href:!0});var ubt=s(pW);H_r=r(ubt,"TFGPT2ForSequenceClassification"),ubt.forEach(t),U_r=r(Lke," (OpenAI GPT-2 model)"),Lke.forEach(t),J_r=i(re),W9=n(re,"LI",{});var xke=s(W9);Cbe=n(xke,"STRONG",{});var _bt=s(Cbe);Y_r=r(_bt,"gptj"),_bt.forEach(t),K_r=r(xke," \u2014 "),uW=n(xke,"A",{href:!0});var bbt=s(uW);Z_r=r(bbt,"TFGPTJForSequenceClassification"),bbt.forEach(t),e2r=r(xke," (GPT-J model)"),xke.forEach(t),o2r=i(re),H9=n(re,"LI",{});var $ke=s(H9);wbe=n($ke,"STRONG",{});var vbt=s(wbe);r2r=r(vbt,"layoutlm"),vbt.forEach(t),t2r=r($ke," \u2014 "),_W=n($ke,"A",{href:!0});var Fbt=s(_W);a2r=r(Fbt,"TFLayoutLMForSequenceClassification"),Fbt.forEach(t),n2r=r($ke," (LayoutLM model)"),$ke.forEach(t),s2r=i(re),U9=n(re,"LI",{});var kke=s(U9);Abe=n(kke,"STRONG",{});var Tbt=s(Abe);l2r=r(Tbt,"longformer"),Tbt.forEach(t),i2r=r(kke," \u2014 "),bW=n(kke,"A",{href:!0});var Mbt=s(bW);d2r=r(Mbt,"TFLongformerForSequenceClassification"),Mbt.forEach(t),c2r=r(kke," (Longformer model)"),kke.forEach(t),f2r=i(re),J9=n(re,"LI",{});var Ske=s(J9);ybe=n(Ske,"STRONG",{});var Ebt=s(ybe);m2r=r(Ebt,"mobilebert"),Ebt.forEach(t),g2r=r(Ske," \u2014 "),vW=n(Ske,"A",{href:!0});var Cbt=s(vW);h2r=r(Cbt,"TFMobileBertForSequenceClassification"),Cbt.forEach(t),p2r=r(Ske," (MobileBERT model)"),Ske.forEach(t),u2r=i(re),Y9=n(re,"LI",{});var Rke=s(Y9);Lbe=n(Rke,"STRONG",{});var wbt=s(Lbe);_2r=r(wbt,"mpnet"),wbt.forEach(t),b2r=r(Rke," \u2014 "),FW=n(Rke,"A",{href:!0});var Abt=s(FW);v2r=r(Abt,"TFMPNetForSequenceClassification"),Abt.forEach(t),F2r=r(Rke," (MPNet model)"),Rke.forEach(t),T2r=i(re),K9=n(re,"LI",{});var Bke=s(K9);xbe=n(Bke,"STRONG",{});var ybt=s(xbe);M2r=r(ybt,"openai-gpt"),ybt.forEach(t),E2r=r(Bke," \u2014 "),TW=n(Bke,"A",{href:!0});var Lbt=s(TW);C2r=r(Lbt,"TFOpenAIGPTForSequenceClassification"),Lbt.forEach(t),w2r=r(Bke," (OpenAI GPT model)"),Bke.forEach(t),A2r=i(re),Z9=n(re,"LI",{});var Pke=s(Z9);$be=n(Pke,"STRONG",{});var xbt=s($be);y2r=r(xbt,"rembert"),xbt.forEach(t),L2r=r(Pke," \u2014 "),MW=n(Pke,"A",{href:!0});var $bt=s(MW);x2r=r($bt,"TFRemBertForSequenceClassification"),$bt.forEach(t),$2r=r(Pke," (RemBERT model)"),Pke.forEach(t),k2r=i(re),eM=n(re,"LI",{});var Ike=s(eM);kbe=n(Ike,"STRONG",{});var kbt=s(kbe);S2r=r(kbt,"roberta"),kbt.forEach(t),R2r=r(Ike," \u2014 "),EW=n(Ike,"A",{href:!0});var Sbt=s(EW);B2r=r(Sbt,"TFRobertaForSequenceClassification"),Sbt.forEach(t),P2r=r(Ike," (RoBERTa model)"),Ike.forEach(t),I2r=i(re),oM=n(re,"LI",{});var qke=s(oM);Sbe=n(qke,"STRONG",{});var Rbt=s(Sbe);q2r=r(Rbt,"roformer"),Rbt.forEach(t),N2r=r(qke," \u2014 "),CW=n(qke,"A",{href:!0});var Bbt=s(CW);j2r=r(Bbt,"TFRoFormerForSequenceClassification"),Bbt.forEach(t),D2r=r(qke," (RoFormer model)"),qke.forEach(t),G2r=i(re),rM=n(re,"LI",{});var Nke=s(rM);Rbe=n(Nke,"STRONG",{});var Pbt=s(Rbe);O2r=r(Pbt,"tapas"),Pbt.forEach(t),V2r=r(Nke," \u2014 "),wW=n(Nke,"A",{href:!0});var Ibt=s(wW);X2r=r(Ibt,"TFTapasForSequenceClassification"),Ibt.forEach(t),z2r=r(Nke," (TAPAS model)"),Nke.forEach(t),Q2r=i(re),tM=n(re,"LI",{});var jke=s(tM);Bbe=n(jke,"STRONG",{});var qbt=s(Bbe);W2r=r(qbt,"transfo-xl"),qbt.forEach(t),H2r=r(jke," \u2014 "),AW=n(jke,"A",{href:!0});var Nbt=s(AW);U2r=r(Nbt,"TFTransfoXLForSequenceClassification"),Nbt.forEach(t),J2r=r(jke," (Transformer-XL model)"),jke.forEach(t),Y2r=i(re),aM=n(re,"LI",{});var Dke=s(aM);Pbe=n(Dke,"STRONG",{});var jbt=s(Pbe);K2r=r(jbt,"xlm"),jbt.forEach(t),Z2r=r(Dke," \u2014 "),yW=n(Dke,"A",{href:!0});var Dbt=s(yW);e1r=r(Dbt,"TFXLMForSequenceClassification"),Dbt.forEach(t),o1r=r(Dke," (XLM model)"),Dke.forEach(t),r1r=i(re),nM=n(re,"LI",{});var Gke=s(nM);Ibe=n(Gke,"STRONG",{});var Gbt=s(Ibe);t1r=r(Gbt,"xlm-roberta"),Gbt.forEach(t),a1r=r(Gke," \u2014 "),LW=n(Gke,"A",{href:!0});var Obt=s(LW);n1r=r(Obt,"TFXLMRobertaForSequenceClassification"),Obt.forEach(t),s1r=r(Gke," (XLM-RoBERTa model)"),Gke.forEach(t),l1r=i(re),sM=n(re,"LI",{});var Oke=s(sM);qbe=n(Oke,"STRONG",{});var Vbt=s(qbe);i1r=r(Vbt,"xlnet"),Vbt.forEach(t),d1r=r(Oke," \u2014 "),xW=n(Oke,"A",{href:!0});var Xbt=s(xW);c1r=r(Xbt,"TFXLNetForSequenceClassification"),Xbt.forEach(t),f1r=r(Oke," (XLNet model)"),Oke.forEach(t),re.forEach(t),m1r=i(Ml),T(lM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),gIe=i(f),ac=n(f,"H2",{class:!0});var FNe=s(ac);iM=n(FNe,"A",{id:!0,class:!0,href:!0});var zbt=s(iM);Nbe=n(zbt,"SPAN",{});var Qbt=s(Nbe);T(oL.$$.fragment,Qbt),Qbt.forEach(t),zbt.forEach(t),g1r=i(FNe),jbe=n(FNe,"SPAN",{});var Wbt=s(jbe);h1r=r(Wbt,"TFAutoModelForMultipleChoice"),Wbt.forEach(t),FNe.forEach(t),hIe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(rL.$$.fragment,El),p1r=i(El),nc=n(El,"P",{});var QK=s(nc);u1r=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$W=n(QK,"A",{href:!0});var Hbt=s($W);_1r=r(Hbt,"from_pretrained()"),Hbt.forEach(t),b1r=r(QK," class method or the "),kW=n(QK,"A",{href:!0});var Ubt=s(kW);v1r=r(Ubt,"from_config()"),Ubt.forEach(t),F1r=r(QK,` class
method.`),QK.forEach(t),T1r=i(El),tL=n(El,"P",{});var TNe=s(tL);M1r=r(TNe,"This class cannot be instantiated directly using "),Dbe=n(TNe,"CODE",{});var Jbt=s(Dbe);E1r=r(Jbt,"__init__()"),Jbt.forEach(t),C1r=r(TNe," (throws an error)."),TNe.forEach(t),w1r=i(El),St=n(El,"DIV",{class:!0});var J3=s(St);T(aL.$$.fragment,J3),A1r=i(J3),Gbe=n(J3,"P",{});var Ybt=s(Gbe);y1r=r(Ybt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ybt.forEach(t),L1r=i(J3),sc=n(J3,"P",{});var WK=s(sc);x1r=r(WK,`Note:
Loading a model from its configuration file does `),Obe=n(WK,"STRONG",{});var Kbt=s(Obe);$1r=r(Kbt,"not"),Kbt.forEach(t),k1r=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=n(WK,"A",{href:!0});var Zbt=s(SW);S1r=r(Zbt,"from_pretrained()"),Zbt.forEach(t),R1r=r(WK," to load the model weights."),WK.forEach(t),B1r=i(J3),T(dM.$$.fragment,J3),J3.forEach(t),P1r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(nL.$$.fragment,Cl),I1r=i(Cl),Vbe=n(Cl,"P",{});var evt=s(Vbe);q1r=r(evt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),evt.forEach(t),N1r=i(Cl),nn=n(Cl,"P",{});var Y3=s(nn);j1r=r(Y3,"The model class to instantiate is selected based on the "),Xbe=n(Y3,"CODE",{});var ovt=s(Xbe);D1r=r(ovt,"model_type"),ovt.forEach(t),G1r=r(Y3,` property of the config object (either
passed as an argument or loaded from `),zbe=n(Y3,"CODE",{});var rvt=s(zbe);O1r=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),V1r=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(Y3,"CODE",{});var tvt=s(Qbe);X1r=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),z1r=r(Y3,":"),Y3.forEach(t),Q1r=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);cM=n(_e,"LI",{});var Vke=s(cM);Wbe=n(Vke,"STRONG",{});var avt=s(Wbe);W1r=r(avt,"albert"),avt.forEach(t),H1r=r(Vke," \u2014 "),RW=n(Vke,"A",{href:!0});var nvt=s(RW);U1r=r(nvt,"TFAlbertForMultipleChoice"),nvt.forEach(t),J1r=r(Vke," (ALBERT model)"),Vke.forEach(t),Y1r=i(_e),fM=n(_e,"LI",{});var Xke=s(fM);Hbe=n(Xke,"STRONG",{});var svt=s(Hbe);K1r=r(svt,"bert"),svt.forEach(t),Z1r=r(Xke," \u2014 "),BW=n(Xke,"A",{href:!0});var lvt=s(BW);ebr=r(lvt,"TFBertForMultipleChoice"),lvt.forEach(t),obr=r(Xke," (BERT model)"),Xke.forEach(t),rbr=i(_e),mM=n(_e,"LI",{});var zke=s(mM);Ube=n(zke,"STRONG",{});var ivt=s(Ube);tbr=r(ivt,"camembert"),ivt.forEach(t),abr=r(zke," \u2014 "),PW=n(zke,"A",{href:!0});var dvt=s(PW);nbr=r(dvt,"TFCamembertForMultipleChoice"),dvt.forEach(t),sbr=r(zke," (CamemBERT model)"),zke.forEach(t),lbr=i(_e),gM=n(_e,"LI",{});var Qke=s(gM);Jbe=n(Qke,"STRONG",{});var cvt=s(Jbe);ibr=r(cvt,"convbert"),cvt.forEach(t),dbr=r(Qke," \u2014 "),IW=n(Qke,"A",{href:!0});var fvt=s(IW);cbr=r(fvt,"TFConvBertForMultipleChoice"),fvt.forEach(t),fbr=r(Qke," (ConvBERT model)"),Qke.forEach(t),mbr=i(_e),hM=n(_e,"LI",{});var Wke=s(hM);Ybe=n(Wke,"STRONG",{});var mvt=s(Ybe);gbr=r(mvt,"distilbert"),mvt.forEach(t),hbr=r(Wke," \u2014 "),qW=n(Wke,"A",{href:!0});var gvt=s(qW);pbr=r(gvt,"TFDistilBertForMultipleChoice"),gvt.forEach(t),ubr=r(Wke," (DistilBERT model)"),Wke.forEach(t),_br=i(_e),pM=n(_e,"LI",{});var Hke=s(pM);Kbe=n(Hke,"STRONG",{});var hvt=s(Kbe);bbr=r(hvt,"electra"),hvt.forEach(t),vbr=r(Hke," \u2014 "),NW=n(Hke,"A",{href:!0});var pvt=s(NW);Fbr=r(pvt,"TFElectraForMultipleChoice"),pvt.forEach(t),Tbr=r(Hke," (ELECTRA model)"),Hke.forEach(t),Mbr=i(_e),uM=n(_e,"LI",{});var Uke=s(uM);Zbe=n(Uke,"STRONG",{});var uvt=s(Zbe);Ebr=r(uvt,"flaubert"),uvt.forEach(t),Cbr=r(Uke," \u2014 "),jW=n(Uke,"A",{href:!0});var _vt=s(jW);wbr=r(_vt,"TFFlaubertForMultipleChoice"),_vt.forEach(t),Abr=r(Uke," (FlauBERT model)"),Uke.forEach(t),ybr=i(_e),_M=n(_e,"LI",{});var Jke=s(_M);eve=n(Jke,"STRONG",{});var bvt=s(eve);Lbr=r(bvt,"funnel"),bvt.forEach(t),xbr=r(Jke," \u2014 "),DW=n(Jke,"A",{href:!0});var vvt=s(DW);$br=r(vvt,"TFFunnelForMultipleChoice"),vvt.forEach(t),kbr=r(Jke," (Funnel Transformer model)"),Jke.forEach(t),Sbr=i(_e),bM=n(_e,"LI",{});var Yke=s(bM);ove=n(Yke,"STRONG",{});var Fvt=s(ove);Rbr=r(Fvt,"longformer"),Fvt.forEach(t),Bbr=r(Yke," \u2014 "),GW=n(Yke,"A",{href:!0});var Tvt=s(GW);Pbr=r(Tvt,"TFLongformerForMultipleChoice"),Tvt.forEach(t),Ibr=r(Yke," (Longformer model)"),Yke.forEach(t),qbr=i(_e),vM=n(_e,"LI",{});var Kke=s(vM);rve=n(Kke,"STRONG",{});var Mvt=s(rve);Nbr=r(Mvt,"mobilebert"),Mvt.forEach(t),jbr=r(Kke," \u2014 "),OW=n(Kke,"A",{href:!0});var Evt=s(OW);Dbr=r(Evt,"TFMobileBertForMultipleChoice"),Evt.forEach(t),Gbr=r(Kke," (MobileBERT model)"),Kke.forEach(t),Obr=i(_e),FM=n(_e,"LI",{});var Zke=s(FM);tve=n(Zke,"STRONG",{});var Cvt=s(tve);Vbr=r(Cvt,"mpnet"),Cvt.forEach(t),Xbr=r(Zke," \u2014 "),VW=n(Zke,"A",{href:!0});var wvt=s(VW);zbr=r(wvt,"TFMPNetForMultipleChoice"),wvt.forEach(t),Qbr=r(Zke," (MPNet model)"),Zke.forEach(t),Wbr=i(_e),TM=n(_e,"LI",{});var eSe=s(TM);ave=n(eSe,"STRONG",{});var Avt=s(ave);Hbr=r(Avt,"rembert"),Avt.forEach(t),Ubr=r(eSe," \u2014 "),XW=n(eSe,"A",{href:!0});var yvt=s(XW);Jbr=r(yvt,"TFRemBertForMultipleChoice"),yvt.forEach(t),Ybr=r(eSe," (RemBERT model)"),eSe.forEach(t),Kbr=i(_e),MM=n(_e,"LI",{});var oSe=s(MM);nve=n(oSe,"STRONG",{});var Lvt=s(nve);Zbr=r(Lvt,"roberta"),Lvt.forEach(t),evr=r(oSe," \u2014 "),zW=n(oSe,"A",{href:!0});var xvt=s(zW);ovr=r(xvt,"TFRobertaForMultipleChoice"),xvt.forEach(t),rvr=r(oSe," (RoBERTa model)"),oSe.forEach(t),tvr=i(_e),EM=n(_e,"LI",{});var rSe=s(EM);sve=n(rSe,"STRONG",{});var $vt=s(sve);avr=r($vt,"roformer"),$vt.forEach(t),nvr=r(rSe," \u2014 "),QW=n(rSe,"A",{href:!0});var kvt=s(QW);svr=r(kvt,"TFRoFormerForMultipleChoice"),kvt.forEach(t),lvr=r(rSe," (RoFormer model)"),rSe.forEach(t),ivr=i(_e),CM=n(_e,"LI",{});var tSe=s(CM);lve=n(tSe,"STRONG",{});var Svt=s(lve);dvr=r(Svt,"xlm"),Svt.forEach(t),cvr=r(tSe," \u2014 "),WW=n(tSe,"A",{href:!0});var Rvt=s(WW);fvr=r(Rvt,"TFXLMForMultipleChoice"),Rvt.forEach(t),mvr=r(tSe," (XLM model)"),tSe.forEach(t),gvr=i(_e),wM=n(_e,"LI",{});var aSe=s(wM);ive=n(aSe,"STRONG",{});var Bvt=s(ive);hvr=r(Bvt,"xlm-roberta"),Bvt.forEach(t),pvr=r(aSe," \u2014 "),HW=n(aSe,"A",{href:!0});var Pvt=s(HW);uvr=r(Pvt,"TFXLMRobertaForMultipleChoice"),Pvt.forEach(t),_vr=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),bvr=i(_e),AM=n(_e,"LI",{});var nSe=s(AM);dve=n(nSe,"STRONG",{});var Ivt=s(dve);vvr=r(Ivt,"xlnet"),Ivt.forEach(t),Fvr=r(nSe," \u2014 "),UW=n(nSe,"A",{href:!0});var qvt=s(UW);Tvr=r(qvt,"TFXLNetForMultipleChoice"),qvt.forEach(t),Mvr=r(nSe," (XLNet model)"),nSe.forEach(t),_e.forEach(t),Evr=i(Cl),T(yM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),pIe=i(f),lc=n(f,"H2",{class:!0});var MNe=s(lc);LM=n(MNe,"A",{id:!0,class:!0,href:!0});var Nvt=s(LM);cve=n(Nvt,"SPAN",{});var jvt=s(cve);T(sL.$$.fragment,jvt),jvt.forEach(t),Nvt.forEach(t),Cvr=i(MNe),fve=n(MNe,"SPAN",{});var Dvt=s(fve);wvr=r(Dvt,"TFAutoModelForNextSentencePrediction"),Dvt.forEach(t),MNe.forEach(t),uIe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(lL.$$.fragment,wl),Avr=i(wl),ic=n(wl,"P",{});var HK=s(ic);yvr=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JW=n(HK,"A",{href:!0});var Gvt=s(JW);Lvr=r(Gvt,"from_pretrained()"),Gvt.forEach(t),xvr=r(HK," class method or the "),YW=n(HK,"A",{href:!0});var Ovt=s(YW);$vr=r(Ovt,"from_config()"),Ovt.forEach(t),kvr=r(HK,` class
method.`),HK.forEach(t),Svr=i(wl),iL=n(wl,"P",{});var ENe=s(iL);Rvr=r(ENe,"This class cannot be instantiated directly using "),mve=n(ENe,"CODE",{});var Vvt=s(mve);Bvr=r(Vvt,"__init__()"),Vvt.forEach(t),Pvr=r(ENe," (throws an error)."),ENe.forEach(t),Ivr=i(wl),Rt=n(wl,"DIV",{class:!0});var K3=s(Rt);T(dL.$$.fragment,K3),qvr=i(K3),gve=n(K3,"P",{});var Xvt=s(gve);Nvr=r(Xvt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xvt.forEach(t),jvr=i(K3),dc=n(K3,"P",{});var UK=s(dc);Dvr=r(UK,`Note:
Loading a model from its configuration file does `),hve=n(UK,"STRONG",{});var zvt=s(hve);Gvr=r(zvt,"not"),zvt.forEach(t),Ovr=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(UK,"A",{href:!0});var Qvt=s(KW);Vvr=r(Qvt,"from_pretrained()"),Qvt.forEach(t),Xvr=r(UK," to load the model weights."),UK.forEach(t),zvr=i(K3),T(xM.$$.fragment,K3),K3.forEach(t),Qvr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(cL.$$.fragment,Al),Wvr=i(Al),pve=n(Al,"P",{});var Wvt=s(pve);Hvr=r(Wvt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wvt.forEach(t),Uvr=i(Al),sn=n(Al,"P",{});var Z3=s(sn);Jvr=r(Z3,"The model class to instantiate is selected based on the "),uve=n(Z3,"CODE",{});var Hvt=s(uve);Yvr=r(Hvt,"model_type"),Hvt.forEach(t),Kvr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),_ve=n(Z3,"CODE",{});var Uvt=s(_ve);Zvr=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),eFr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(Z3,"CODE",{});var Jvt=s(bve);oFr=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),rFr=r(Z3,":"),Z3.forEach(t),tFr=i(Al),fL=n(Al,"UL",{});var CNe=s(fL);$M=n(CNe,"LI",{});var sSe=s($M);vve=n(sSe,"STRONG",{});var Yvt=s(vve);aFr=r(Yvt,"bert"),Yvt.forEach(t),nFr=r(sSe," \u2014 "),ZW=n(sSe,"A",{href:!0});var Kvt=s(ZW);sFr=r(Kvt,"TFBertForNextSentencePrediction"),Kvt.forEach(t),lFr=r(sSe," (BERT model)"),sSe.forEach(t),iFr=i(CNe),kM=n(CNe,"LI",{});var lSe=s(kM);Fve=n(lSe,"STRONG",{});var Zvt=s(Fve);dFr=r(Zvt,"mobilebert"),Zvt.forEach(t),cFr=r(lSe," \u2014 "),eH=n(lSe,"A",{href:!0});var eFt=s(eH);fFr=r(eFt,"TFMobileBertForNextSentencePrediction"),eFt.forEach(t),mFr=r(lSe," (MobileBERT model)"),lSe.forEach(t),CNe.forEach(t),gFr=i(Al),T(SM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),_Ie=i(f),cc=n(f,"H2",{class:!0});var wNe=s(cc);RM=n(wNe,"A",{id:!0,class:!0,href:!0});var oFt=s(RM);Tve=n(oFt,"SPAN",{});var rFt=s(Tve);T(mL.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),hFr=i(wNe),Mve=n(wNe,"SPAN",{});var tFt=s(Mve);pFr=r(tFt,"TFAutoModelForTableQuestionAnswering"),tFt.forEach(t),wNe.forEach(t),bIe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(gL.$$.fragment,yl),uFr=i(yl),fc=n(yl,"P",{});var JK=s(fc);_Fr=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),oH=n(JK,"A",{href:!0});var aFt=s(oH);bFr=r(aFt,"from_pretrained()"),aFt.forEach(t),vFr=r(JK," class method or the "),rH=n(JK,"A",{href:!0});var nFt=s(rH);FFr=r(nFt,"from_config()"),nFt.forEach(t),TFr=r(JK,` class
method.`),JK.forEach(t),MFr=i(yl),hL=n(yl,"P",{});var ANe=s(hL);EFr=r(ANe,"This class cannot be instantiated directly using "),Eve=n(ANe,"CODE",{});var sFt=s(Eve);CFr=r(sFt,"__init__()"),sFt.forEach(t),wFr=r(ANe," (throws an error)."),ANe.forEach(t),AFr=i(yl),Bt=n(yl,"DIV",{class:!0});var ew=s(Bt);T(pL.$$.fragment,ew),yFr=i(ew),Cve=n(ew,"P",{});var lFt=s(Cve);LFr=r(lFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lFt.forEach(t),xFr=i(ew),mc=n(ew,"P",{});var YK=s(mc);$Fr=r(YK,`Note:
Loading a model from its configuration file does `),wve=n(YK,"STRONG",{});var iFt=s(wve);kFr=r(iFt,"not"),iFt.forEach(t),SFr=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(YK,"A",{href:!0});var dFt=s(tH);RFr=r(dFt,"from_pretrained()"),dFt.forEach(t),BFr=r(YK," to load the model weights."),YK.forEach(t),PFr=i(ew),T(BM.$$.fragment,ew),ew.forEach(t),IFr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(uL.$$.fragment,Ll),qFr=i(Ll),Ave=n(Ll,"P",{});var cFt=s(Ave);NFr=r(cFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cFt.forEach(t),jFr=i(Ll),ln=n(Ll,"P",{});var ow=s(ln);DFr=r(ow,"The model class to instantiate is selected based on the "),yve=n(ow,"CODE",{});var fFt=s(yve);GFr=r(fFt,"model_type"),fFt.forEach(t),OFr=r(ow,` property of the config object (either
passed as an argument or loaded from `),Lve=n(ow,"CODE",{});var mFt=s(Lve);VFr=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),XFr=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(ow,"CODE",{});var gFt=s(xve);zFr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),QFr=r(ow,":"),ow.forEach(t),WFr=i(Ll),$ve=n(Ll,"UL",{});var hFt=s($ve);PM=n(hFt,"LI",{});var iSe=s(PM);kve=n(iSe,"STRONG",{});var pFt=s(kve);HFr=r(pFt,"tapas"),pFt.forEach(t),UFr=r(iSe," \u2014 "),aH=n(iSe,"A",{href:!0});var uFt=s(aH);JFr=r(uFt,"TFTapasForQuestionAnswering"),uFt.forEach(t),YFr=r(iSe," (TAPAS model)"),iSe.forEach(t),hFt.forEach(t),KFr=i(Ll),T(IM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),vIe=i(f),gc=n(f,"H2",{class:!0});var yNe=s(gc);qM=n(yNe,"A",{id:!0,class:!0,href:!0});var _Ft=s(qM);Sve=n(_Ft,"SPAN",{});var bFt=s(Sve);T(_L.$$.fragment,bFt),bFt.forEach(t),_Ft.forEach(t),ZFr=i(yNe),Rve=n(yNe,"SPAN",{});var vFt=s(Rve);e0r=r(vFt,"TFAutoModelForTokenClassification"),vFt.forEach(t),yNe.forEach(t),FIe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(bL.$$.fragment,xl),o0r=i(xl),hc=n(xl,"P",{});var KK=s(hc);r0r=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nH=n(KK,"A",{href:!0});var FFt=s(nH);t0r=r(FFt,"from_pretrained()"),FFt.forEach(t),a0r=r(KK," class method or the "),sH=n(KK,"A",{href:!0});var TFt=s(sH);n0r=r(TFt,"from_config()"),TFt.forEach(t),s0r=r(KK,` class
method.`),KK.forEach(t),l0r=i(xl),vL=n(xl,"P",{});var LNe=s(vL);i0r=r(LNe,"This class cannot be instantiated directly using "),Bve=n(LNe,"CODE",{});var MFt=s(Bve);d0r=r(MFt,"__init__()"),MFt.forEach(t),c0r=r(LNe," (throws an error)."),LNe.forEach(t),f0r=i(xl),Pt=n(xl,"DIV",{class:!0});var rw=s(Pt);T(FL.$$.fragment,rw),m0r=i(rw),Pve=n(rw,"P",{});var EFt=s(Pve);g0r=r(EFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EFt.forEach(t),h0r=i(rw),pc=n(rw,"P",{});var ZK=s(pc);p0r=r(ZK,`Note:
Loading a model from its configuration file does `),Ive=n(ZK,"STRONG",{});var CFt=s(Ive);u0r=r(CFt,"not"),CFt.forEach(t),_0r=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(ZK,"A",{href:!0});var wFt=s(lH);b0r=r(wFt,"from_pretrained()"),wFt.forEach(t),v0r=r(ZK," to load the model weights."),ZK.forEach(t),F0r=i(rw),T(NM.$$.fragment,rw),rw.forEach(t),T0r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(TL.$$.fragment,$l),M0r=i($l),qve=n($l,"P",{});var AFt=s(qve);E0r=r(AFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AFt.forEach(t),C0r=i($l),dn=n($l,"P",{});var tw=s(dn);w0r=r(tw,"The model class to instantiate is selected based on the "),Nve=n(tw,"CODE",{});var yFt=s(Nve);A0r=r(yFt,"model_type"),yFt.forEach(t),y0r=r(tw,` property of the config object (either
passed as an argument or loaded from `),jve=n(tw,"CODE",{});var LFt=s(jve);L0r=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),x0r=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(tw,"CODE",{});var xFt=s(Dve);$0r=r(xFt,"pretrained_model_name_or_path"),xFt.forEach(t),k0r=r(tw,":"),tw.forEach(t),S0r=i($l),de=n($l,"UL",{});var me=s(de);jM=n(me,"LI",{});var dSe=s(jM);Gve=n(dSe,"STRONG",{});var $Ft=s(Gve);R0r=r($Ft,"albert"),$Ft.forEach(t),B0r=r(dSe," \u2014 "),iH=n(dSe,"A",{href:!0});var kFt=s(iH);P0r=r(kFt,"TFAlbertForTokenClassification"),kFt.forEach(t),I0r=r(dSe," (ALBERT model)"),dSe.forEach(t),q0r=i(me),DM=n(me,"LI",{});var cSe=s(DM);Ove=n(cSe,"STRONG",{});var SFt=s(Ove);N0r=r(SFt,"bert"),SFt.forEach(t),j0r=r(cSe," \u2014 "),dH=n(cSe,"A",{href:!0});var RFt=s(dH);D0r=r(RFt,"TFBertForTokenClassification"),RFt.forEach(t),G0r=r(cSe," (BERT model)"),cSe.forEach(t),O0r=i(me),GM=n(me,"LI",{});var fSe=s(GM);Vve=n(fSe,"STRONG",{});var BFt=s(Vve);V0r=r(BFt,"camembert"),BFt.forEach(t),X0r=r(fSe," \u2014 "),cH=n(fSe,"A",{href:!0});var PFt=s(cH);z0r=r(PFt,"TFCamembertForTokenClassification"),PFt.forEach(t),Q0r=r(fSe," (CamemBERT model)"),fSe.forEach(t),W0r=i(me),OM=n(me,"LI",{});var mSe=s(OM);Xve=n(mSe,"STRONG",{});var IFt=s(Xve);H0r=r(IFt,"convbert"),IFt.forEach(t),U0r=r(mSe," \u2014 "),fH=n(mSe,"A",{href:!0});var qFt=s(fH);J0r=r(qFt,"TFConvBertForTokenClassification"),qFt.forEach(t),Y0r=r(mSe," (ConvBERT model)"),mSe.forEach(t),K0r=i(me),VM=n(me,"LI",{});var gSe=s(VM);zve=n(gSe,"STRONG",{});var NFt=s(zve);Z0r=r(NFt,"deberta"),NFt.forEach(t),eTr=r(gSe," \u2014 "),mH=n(gSe,"A",{href:!0});var jFt=s(mH);oTr=r(jFt,"TFDebertaForTokenClassification"),jFt.forEach(t),rTr=r(gSe," (DeBERTa model)"),gSe.forEach(t),tTr=i(me),XM=n(me,"LI",{});var hSe=s(XM);Qve=n(hSe,"STRONG",{});var DFt=s(Qve);aTr=r(DFt,"deberta-v2"),DFt.forEach(t),nTr=r(hSe," \u2014 "),gH=n(hSe,"A",{href:!0});var GFt=s(gH);sTr=r(GFt,"TFDebertaV2ForTokenClassification"),GFt.forEach(t),lTr=r(hSe," (DeBERTa-v2 model)"),hSe.forEach(t),iTr=i(me),zM=n(me,"LI",{});var pSe=s(zM);Wve=n(pSe,"STRONG",{});var OFt=s(Wve);dTr=r(OFt,"distilbert"),OFt.forEach(t),cTr=r(pSe," \u2014 "),hH=n(pSe,"A",{href:!0});var VFt=s(hH);fTr=r(VFt,"TFDistilBertForTokenClassification"),VFt.forEach(t),mTr=r(pSe," (DistilBERT model)"),pSe.forEach(t),gTr=i(me),QM=n(me,"LI",{});var uSe=s(QM);Hve=n(uSe,"STRONG",{});var XFt=s(Hve);hTr=r(XFt,"electra"),XFt.forEach(t),pTr=r(uSe," \u2014 "),pH=n(uSe,"A",{href:!0});var zFt=s(pH);uTr=r(zFt,"TFElectraForTokenClassification"),zFt.forEach(t),_Tr=r(uSe," (ELECTRA model)"),uSe.forEach(t),bTr=i(me),WM=n(me,"LI",{});var _Se=s(WM);Uve=n(_Se,"STRONG",{});var QFt=s(Uve);vTr=r(QFt,"flaubert"),QFt.forEach(t),FTr=r(_Se," \u2014 "),uH=n(_Se,"A",{href:!0});var WFt=s(uH);TTr=r(WFt,"TFFlaubertForTokenClassification"),WFt.forEach(t),MTr=r(_Se," (FlauBERT model)"),_Se.forEach(t),ETr=i(me),HM=n(me,"LI",{});var bSe=s(HM);Jve=n(bSe,"STRONG",{});var HFt=s(Jve);CTr=r(HFt,"funnel"),HFt.forEach(t),wTr=r(bSe," \u2014 "),_H=n(bSe,"A",{href:!0});var UFt=s(_H);ATr=r(UFt,"TFFunnelForTokenClassification"),UFt.forEach(t),yTr=r(bSe," (Funnel Transformer model)"),bSe.forEach(t),LTr=i(me),UM=n(me,"LI",{});var vSe=s(UM);Yve=n(vSe,"STRONG",{});var JFt=s(Yve);xTr=r(JFt,"layoutlm"),JFt.forEach(t),$Tr=r(vSe," \u2014 "),bH=n(vSe,"A",{href:!0});var YFt=s(bH);kTr=r(YFt,"TFLayoutLMForTokenClassification"),YFt.forEach(t),STr=r(vSe," (LayoutLM model)"),vSe.forEach(t),RTr=i(me),JM=n(me,"LI",{});var FSe=s(JM);Kve=n(FSe,"STRONG",{});var KFt=s(Kve);BTr=r(KFt,"longformer"),KFt.forEach(t),PTr=r(FSe," \u2014 "),vH=n(FSe,"A",{href:!0});var ZFt=s(vH);ITr=r(ZFt,"TFLongformerForTokenClassification"),ZFt.forEach(t),qTr=r(FSe," (Longformer model)"),FSe.forEach(t),NTr=i(me),YM=n(me,"LI",{});var TSe=s(YM);Zve=n(TSe,"STRONG",{});var e0t=s(Zve);jTr=r(e0t,"mobilebert"),e0t.forEach(t),DTr=r(TSe," \u2014 "),FH=n(TSe,"A",{href:!0});var o0t=s(FH);GTr=r(o0t,"TFMobileBertForTokenClassification"),o0t.forEach(t),OTr=r(TSe," (MobileBERT model)"),TSe.forEach(t),VTr=i(me),KM=n(me,"LI",{});var MSe=s(KM);eFe=n(MSe,"STRONG",{});var r0t=s(eFe);XTr=r(r0t,"mpnet"),r0t.forEach(t),zTr=r(MSe," \u2014 "),TH=n(MSe,"A",{href:!0});var t0t=s(TH);QTr=r(t0t,"TFMPNetForTokenClassification"),t0t.forEach(t),WTr=r(MSe," (MPNet model)"),MSe.forEach(t),HTr=i(me),ZM=n(me,"LI",{});var ESe=s(ZM);oFe=n(ESe,"STRONG",{});var a0t=s(oFe);UTr=r(a0t,"rembert"),a0t.forEach(t),JTr=r(ESe," \u2014 "),MH=n(ESe,"A",{href:!0});var n0t=s(MH);YTr=r(n0t,"TFRemBertForTokenClassification"),n0t.forEach(t),KTr=r(ESe," (RemBERT model)"),ESe.forEach(t),ZTr=i(me),e4=n(me,"LI",{});var CSe=s(e4);rFe=n(CSe,"STRONG",{});var s0t=s(rFe);e7r=r(s0t,"roberta"),s0t.forEach(t),o7r=r(CSe," \u2014 "),EH=n(CSe,"A",{href:!0});var l0t=s(EH);r7r=r(l0t,"TFRobertaForTokenClassification"),l0t.forEach(t),t7r=r(CSe," (RoBERTa model)"),CSe.forEach(t),a7r=i(me),o4=n(me,"LI",{});var wSe=s(o4);tFe=n(wSe,"STRONG",{});var i0t=s(tFe);n7r=r(i0t,"roformer"),i0t.forEach(t),s7r=r(wSe," \u2014 "),CH=n(wSe,"A",{href:!0});var d0t=s(CH);l7r=r(d0t,"TFRoFormerForTokenClassification"),d0t.forEach(t),i7r=r(wSe," (RoFormer model)"),wSe.forEach(t),d7r=i(me),r4=n(me,"LI",{});var ASe=s(r4);aFe=n(ASe,"STRONG",{});var c0t=s(aFe);c7r=r(c0t,"xlm"),c0t.forEach(t),f7r=r(ASe," \u2014 "),wH=n(ASe,"A",{href:!0});var f0t=s(wH);m7r=r(f0t,"TFXLMForTokenClassification"),f0t.forEach(t),g7r=r(ASe," (XLM model)"),ASe.forEach(t),h7r=i(me),t4=n(me,"LI",{});var ySe=s(t4);nFe=n(ySe,"STRONG",{});var m0t=s(nFe);p7r=r(m0t,"xlm-roberta"),m0t.forEach(t),u7r=r(ySe," \u2014 "),AH=n(ySe,"A",{href:!0});var g0t=s(AH);_7r=r(g0t,"TFXLMRobertaForTokenClassification"),g0t.forEach(t),b7r=r(ySe," (XLM-RoBERTa model)"),ySe.forEach(t),v7r=i(me),a4=n(me,"LI",{});var LSe=s(a4);sFe=n(LSe,"STRONG",{});var h0t=s(sFe);F7r=r(h0t,"xlnet"),h0t.forEach(t),T7r=r(LSe," \u2014 "),yH=n(LSe,"A",{href:!0});var p0t=s(yH);M7r=r(p0t,"TFXLNetForTokenClassification"),p0t.forEach(t),E7r=r(LSe," (XLNet model)"),LSe.forEach(t),me.forEach(t),C7r=i($l),T(n4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),TIe=i(f),uc=n(f,"H2",{class:!0});var xNe=s(uc);s4=n(xNe,"A",{id:!0,class:!0,href:!0});var u0t=s(s4);lFe=n(u0t,"SPAN",{});var _0t=s(lFe);T(ML.$$.fragment,_0t),_0t.forEach(t),u0t.forEach(t),w7r=i(xNe),iFe=n(xNe,"SPAN",{});var b0t=s(iFe);A7r=r(b0t,"TFAutoModelForQuestionAnswering"),b0t.forEach(t),xNe.forEach(t),MIe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(EL.$$.fragment,kl),y7r=i(kl),_c=n(kl,"P",{});var eZ=s(_c);L7r=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LH=n(eZ,"A",{href:!0});var v0t=s(LH);x7r=r(v0t,"from_pretrained()"),v0t.forEach(t),$7r=r(eZ," class method or the "),xH=n(eZ,"A",{href:!0});var F0t=s(xH);k7r=r(F0t,"from_config()"),F0t.forEach(t),S7r=r(eZ,` class
method.`),eZ.forEach(t),R7r=i(kl),CL=n(kl,"P",{});var $Ne=s(CL);B7r=r($Ne,"This class cannot be instantiated directly using "),dFe=n($Ne,"CODE",{});var T0t=s(dFe);P7r=r(T0t,"__init__()"),T0t.forEach(t),I7r=r($Ne," (throws an error)."),$Ne.forEach(t),q7r=i(kl),It=n(kl,"DIV",{class:!0});var aw=s(It);T(wL.$$.fragment,aw),N7r=i(aw),cFe=n(aw,"P",{});var M0t=s(cFe);j7r=r(M0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M0t.forEach(t),D7r=i(aw),bc=n(aw,"P",{});var oZ=s(bc);G7r=r(oZ,`Note:
Loading a model from its configuration file does `),fFe=n(oZ,"STRONG",{});var E0t=s(fFe);O7r=r(E0t,"not"),E0t.forEach(t),V7r=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(oZ,"A",{href:!0});var C0t=s($H);X7r=r(C0t,"from_pretrained()"),C0t.forEach(t),z7r=r(oZ," to load the model weights."),oZ.forEach(t),Q7r=i(aw),T(l4.$$.fragment,aw),aw.forEach(t),W7r=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(AL.$$.fragment,Sl),H7r=i(Sl),mFe=n(Sl,"P",{});var w0t=s(mFe);U7r=r(w0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w0t.forEach(t),J7r=i(Sl),cn=n(Sl,"P",{});var nw=s(cn);Y7r=r(nw,"The model class to instantiate is selected based on the "),gFe=n(nw,"CODE",{});var A0t=s(gFe);K7r=r(A0t,"model_type"),A0t.forEach(t),Z7r=r(nw,` property of the config object (either
passed as an argument or loaded from `),hFe=n(nw,"CODE",{});var y0t=s(hFe);e9r=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),o9r=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(nw,"CODE",{});var L0t=s(pFe);r9r=r(L0t,"pretrained_model_name_or_path"),L0t.forEach(t),t9r=r(nw,":"),nw.forEach(t),a9r=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);i4=n(ge,"LI",{});var xSe=s(i4);uFe=n(xSe,"STRONG",{});var x0t=s(uFe);n9r=r(x0t,"albert"),x0t.forEach(t),s9r=r(xSe," \u2014 "),kH=n(xSe,"A",{href:!0});var $0t=s(kH);l9r=r($0t,"TFAlbertForQuestionAnswering"),$0t.forEach(t),i9r=r(xSe," (ALBERT model)"),xSe.forEach(t),d9r=i(ge),d4=n(ge,"LI",{});var $Se=s(d4);_Fe=n($Se,"STRONG",{});var k0t=s(_Fe);c9r=r(k0t,"bert"),k0t.forEach(t),f9r=r($Se," \u2014 "),SH=n($Se,"A",{href:!0});var S0t=s(SH);m9r=r(S0t,"TFBertForQuestionAnswering"),S0t.forEach(t),g9r=r($Se," (BERT model)"),$Se.forEach(t),h9r=i(ge),c4=n(ge,"LI",{});var kSe=s(c4);bFe=n(kSe,"STRONG",{});var R0t=s(bFe);p9r=r(R0t,"camembert"),R0t.forEach(t),u9r=r(kSe," \u2014 "),RH=n(kSe,"A",{href:!0});var B0t=s(RH);_9r=r(B0t,"TFCamembertForQuestionAnswering"),B0t.forEach(t),b9r=r(kSe," (CamemBERT model)"),kSe.forEach(t),v9r=i(ge),f4=n(ge,"LI",{});var SSe=s(f4);vFe=n(SSe,"STRONG",{});var P0t=s(vFe);F9r=r(P0t,"convbert"),P0t.forEach(t),T9r=r(SSe," \u2014 "),BH=n(SSe,"A",{href:!0});var I0t=s(BH);M9r=r(I0t,"TFConvBertForQuestionAnswering"),I0t.forEach(t),E9r=r(SSe," (ConvBERT model)"),SSe.forEach(t),C9r=i(ge),m4=n(ge,"LI",{});var RSe=s(m4);FFe=n(RSe,"STRONG",{});var q0t=s(FFe);w9r=r(q0t,"deberta"),q0t.forEach(t),A9r=r(RSe," \u2014 "),PH=n(RSe,"A",{href:!0});var N0t=s(PH);y9r=r(N0t,"TFDebertaForQuestionAnswering"),N0t.forEach(t),L9r=r(RSe," (DeBERTa model)"),RSe.forEach(t),x9r=i(ge),g4=n(ge,"LI",{});var BSe=s(g4);TFe=n(BSe,"STRONG",{});var j0t=s(TFe);$9r=r(j0t,"deberta-v2"),j0t.forEach(t),k9r=r(BSe," \u2014 "),IH=n(BSe,"A",{href:!0});var D0t=s(IH);S9r=r(D0t,"TFDebertaV2ForQuestionAnswering"),D0t.forEach(t),R9r=r(BSe," (DeBERTa-v2 model)"),BSe.forEach(t),B9r=i(ge),h4=n(ge,"LI",{});var PSe=s(h4);MFe=n(PSe,"STRONG",{});var G0t=s(MFe);P9r=r(G0t,"distilbert"),G0t.forEach(t),I9r=r(PSe," \u2014 "),qH=n(PSe,"A",{href:!0});var O0t=s(qH);q9r=r(O0t,"TFDistilBertForQuestionAnswering"),O0t.forEach(t),N9r=r(PSe," (DistilBERT model)"),PSe.forEach(t),j9r=i(ge),p4=n(ge,"LI",{});var ISe=s(p4);EFe=n(ISe,"STRONG",{});var V0t=s(EFe);D9r=r(V0t,"electra"),V0t.forEach(t),G9r=r(ISe," \u2014 "),NH=n(ISe,"A",{href:!0});var X0t=s(NH);O9r=r(X0t,"TFElectraForQuestionAnswering"),X0t.forEach(t),V9r=r(ISe," (ELECTRA model)"),ISe.forEach(t),X9r=i(ge),u4=n(ge,"LI",{});var qSe=s(u4);CFe=n(qSe,"STRONG",{});var z0t=s(CFe);z9r=r(z0t,"flaubert"),z0t.forEach(t),Q9r=r(qSe," \u2014 "),jH=n(qSe,"A",{href:!0});var Q0t=s(jH);W9r=r(Q0t,"TFFlaubertForQuestionAnsweringSimple"),Q0t.forEach(t),H9r=r(qSe," (FlauBERT model)"),qSe.forEach(t),U9r=i(ge),_4=n(ge,"LI",{});var NSe=s(_4);wFe=n(NSe,"STRONG",{});var W0t=s(wFe);J9r=r(W0t,"funnel"),W0t.forEach(t),Y9r=r(NSe," \u2014 "),DH=n(NSe,"A",{href:!0});var H0t=s(DH);K9r=r(H0t,"TFFunnelForQuestionAnswering"),H0t.forEach(t),Z9r=r(NSe," (Funnel Transformer model)"),NSe.forEach(t),eMr=i(ge),b4=n(ge,"LI",{});var jSe=s(b4);AFe=n(jSe,"STRONG",{});var U0t=s(AFe);oMr=r(U0t,"gptj"),U0t.forEach(t),rMr=r(jSe," \u2014 "),GH=n(jSe,"A",{href:!0});var J0t=s(GH);tMr=r(J0t,"TFGPTJForQuestionAnswering"),J0t.forEach(t),aMr=r(jSe," (GPT-J model)"),jSe.forEach(t),nMr=i(ge),v4=n(ge,"LI",{});var DSe=s(v4);yFe=n(DSe,"STRONG",{});var Y0t=s(yFe);sMr=r(Y0t,"longformer"),Y0t.forEach(t),lMr=r(DSe," \u2014 "),OH=n(DSe,"A",{href:!0});var K0t=s(OH);iMr=r(K0t,"TFLongformerForQuestionAnswering"),K0t.forEach(t),dMr=r(DSe," (Longformer model)"),DSe.forEach(t),cMr=i(ge),F4=n(ge,"LI",{});var GSe=s(F4);LFe=n(GSe,"STRONG",{});var Z0t=s(LFe);fMr=r(Z0t,"mobilebert"),Z0t.forEach(t),mMr=r(GSe," \u2014 "),VH=n(GSe,"A",{href:!0});var eTt=s(VH);gMr=r(eTt,"TFMobileBertForQuestionAnswering"),eTt.forEach(t),hMr=r(GSe," (MobileBERT model)"),GSe.forEach(t),pMr=i(ge),T4=n(ge,"LI",{});var OSe=s(T4);xFe=n(OSe,"STRONG",{});var oTt=s(xFe);uMr=r(oTt,"mpnet"),oTt.forEach(t),_Mr=r(OSe," \u2014 "),XH=n(OSe,"A",{href:!0});var rTt=s(XH);bMr=r(rTt,"TFMPNetForQuestionAnswering"),rTt.forEach(t),vMr=r(OSe," (MPNet model)"),OSe.forEach(t),FMr=i(ge),M4=n(ge,"LI",{});var VSe=s(M4);$Fe=n(VSe,"STRONG",{});var tTt=s($Fe);TMr=r(tTt,"rembert"),tTt.forEach(t),MMr=r(VSe," \u2014 "),zH=n(VSe,"A",{href:!0});var aTt=s(zH);EMr=r(aTt,"TFRemBertForQuestionAnswering"),aTt.forEach(t),CMr=r(VSe," (RemBERT model)"),VSe.forEach(t),wMr=i(ge),E4=n(ge,"LI",{});var XSe=s(E4);kFe=n(XSe,"STRONG",{});var nTt=s(kFe);AMr=r(nTt,"roberta"),nTt.forEach(t),yMr=r(XSe," \u2014 "),QH=n(XSe,"A",{href:!0});var sTt=s(QH);LMr=r(sTt,"TFRobertaForQuestionAnswering"),sTt.forEach(t),xMr=r(XSe," (RoBERTa model)"),XSe.forEach(t),$Mr=i(ge),C4=n(ge,"LI",{});var zSe=s(C4);SFe=n(zSe,"STRONG",{});var lTt=s(SFe);kMr=r(lTt,"roformer"),lTt.forEach(t),SMr=r(zSe," \u2014 "),WH=n(zSe,"A",{href:!0});var iTt=s(WH);RMr=r(iTt,"TFRoFormerForQuestionAnswering"),iTt.forEach(t),BMr=r(zSe," (RoFormer model)"),zSe.forEach(t),PMr=i(ge),w4=n(ge,"LI",{});var QSe=s(w4);RFe=n(QSe,"STRONG",{});var dTt=s(RFe);IMr=r(dTt,"xlm"),dTt.forEach(t),qMr=r(QSe," \u2014 "),HH=n(QSe,"A",{href:!0});var cTt=s(HH);NMr=r(cTt,"TFXLMForQuestionAnsweringSimple"),cTt.forEach(t),jMr=r(QSe," (XLM model)"),QSe.forEach(t),DMr=i(ge),A4=n(ge,"LI",{});var WSe=s(A4);BFe=n(WSe,"STRONG",{});var fTt=s(BFe);GMr=r(fTt,"xlm-roberta"),fTt.forEach(t),OMr=r(WSe," \u2014 "),UH=n(WSe,"A",{href:!0});var mTt=s(UH);VMr=r(mTt,"TFXLMRobertaForQuestionAnswering"),mTt.forEach(t),XMr=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),zMr=i(ge),y4=n(ge,"LI",{});var HSe=s(y4);PFe=n(HSe,"STRONG",{});var gTt=s(PFe);QMr=r(gTt,"xlnet"),gTt.forEach(t),WMr=r(HSe," \u2014 "),JH=n(HSe,"A",{href:!0});var hTt=s(JH);HMr=r(hTt,"TFXLNetForQuestionAnsweringSimple"),hTt.forEach(t),UMr=r(HSe," (XLNet model)"),HSe.forEach(t),ge.forEach(t),JMr=i(Sl),T(L4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),EIe=i(f),vc=n(f,"H2",{class:!0});var kNe=s(vc);x4=n(kNe,"A",{id:!0,class:!0,href:!0});var pTt=s(x4);IFe=n(pTt,"SPAN",{});var uTt=s(IFe);T(yL.$$.fragment,uTt),uTt.forEach(t),pTt.forEach(t),YMr=i(kNe),qFe=n(kNe,"SPAN",{});var _Tt=s(qFe);KMr=r(_Tt,"TFAutoModelForVision2Seq"),_Tt.forEach(t),kNe.forEach(t),CIe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(LL.$$.fragment,Rl),ZMr=i(Rl),Fc=n(Rl,"P",{});var rZ=s(Fc);e4r=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YH=n(rZ,"A",{href:!0});var bTt=s(YH);o4r=r(bTt,"from_pretrained()"),bTt.forEach(t),r4r=r(rZ," class method or the "),KH=n(rZ,"A",{href:!0});var vTt=s(KH);t4r=r(vTt,"from_config()"),vTt.forEach(t),a4r=r(rZ,` class
method.`),rZ.forEach(t),n4r=i(Rl),xL=n(Rl,"P",{});var SNe=s(xL);s4r=r(SNe,"This class cannot be instantiated directly using "),NFe=n(SNe,"CODE",{});var FTt=s(NFe);l4r=r(FTt,"__init__()"),FTt.forEach(t),i4r=r(SNe," (throws an error)."),SNe.forEach(t),d4r=i(Rl),qt=n(Rl,"DIV",{class:!0});var sw=s(qt);T($L.$$.fragment,sw),c4r=i(sw),jFe=n(sw,"P",{});var TTt=s(jFe);f4r=r(TTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TTt.forEach(t),m4r=i(sw),Tc=n(sw,"P",{});var tZ=s(Tc);g4r=r(tZ,`Note:
Loading a model from its configuration file does `),DFe=n(tZ,"STRONG",{});var MTt=s(DFe);h4r=r(MTt,"not"),MTt.forEach(t),p4r=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(tZ,"A",{href:!0});var ETt=s(ZH);u4r=r(ETt,"from_pretrained()"),ETt.forEach(t),_4r=r(tZ," to load the model weights."),tZ.forEach(t),b4r=i(sw),T($4.$$.fragment,sw),sw.forEach(t),v4r=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(kL.$$.fragment,Bl),F4r=i(Bl),GFe=n(Bl,"P",{});var CTt=s(GFe);T4r=r(CTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),CTt.forEach(t),M4r=i(Bl),fn=n(Bl,"P",{});var lw=s(fn);E4r=r(lw,"The model class to instantiate is selected based on the "),OFe=n(lw,"CODE",{});var wTt=s(OFe);C4r=r(wTt,"model_type"),wTt.forEach(t),w4r=r(lw,` property of the config object (either
passed as an argument or loaded from `),VFe=n(lw,"CODE",{});var ATt=s(VFe);A4r=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),y4r=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(lw,"CODE",{});var yTt=s(XFe);L4r=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),x4r=r(lw,":"),lw.forEach(t),$4r=i(Bl),zFe=n(Bl,"UL",{});var LTt=s(zFe);k4=n(LTt,"LI",{});var USe=s(k4);QFe=n(USe,"STRONG",{});var xTt=s(QFe);k4r=r(xTt,"vision-encoder-decoder"),xTt.forEach(t),S4r=r(USe," \u2014 "),eU=n(USe,"A",{href:!0});var $Tt=s(eU);R4r=r($Tt,"TFVisionEncoderDecoderModel"),$Tt.forEach(t),B4r=r(USe," (Vision Encoder decoder model)"),USe.forEach(t),LTt.forEach(t),P4r=i(Bl),T(S4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),wIe=i(f),Mc=n(f,"H2",{class:!0});var RNe=s(Mc);R4=n(RNe,"A",{id:!0,class:!0,href:!0});var kTt=s(R4);WFe=n(kTt,"SPAN",{});var STt=s(WFe);T(SL.$$.fragment,STt),STt.forEach(t),kTt.forEach(t),I4r=i(RNe),HFe=n(RNe,"SPAN",{});var RTt=s(HFe);q4r=r(RTt,"TFAutoModelForSpeechSeq2Seq"),RTt.forEach(t),RNe.forEach(t),AIe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(RL.$$.fragment,Pl),N4r=i(Pl),Ec=n(Pl,"P",{});var aZ=s(Ec);j4r=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),oU=n(aZ,"A",{href:!0});var BTt=s(oU);D4r=r(BTt,"from_pretrained()"),BTt.forEach(t),G4r=r(aZ," class method or the "),rU=n(aZ,"A",{href:!0});var PTt=s(rU);O4r=r(PTt,"from_config()"),PTt.forEach(t),V4r=r(aZ,` class
method.`),aZ.forEach(t),X4r=i(Pl),BL=n(Pl,"P",{});var BNe=s(BL);z4r=r(BNe,"This class cannot be instantiated directly using "),UFe=n(BNe,"CODE",{});var ITt=s(UFe);Q4r=r(ITt,"__init__()"),ITt.forEach(t),W4r=r(BNe," (throws an error)."),BNe.forEach(t),H4r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var iw=s(Nt);T(PL.$$.fragment,iw),U4r=i(iw),JFe=n(iw,"P",{});var qTt=s(JFe);J4r=r(qTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qTt.forEach(t),Y4r=i(iw),Cc=n(iw,"P",{});var nZ=s(Cc);K4r=r(nZ,`Note:
Loading a model from its configuration file does `),YFe=n(nZ,"STRONG",{});var NTt=s(YFe);Z4r=r(NTt,"not"),NTt.forEach(t),eEr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(nZ,"A",{href:!0});var jTt=s(tU);oEr=r(jTt,"from_pretrained()"),jTt.forEach(t),rEr=r(nZ," to load the model weights."),nZ.forEach(t),tEr=i(iw),T(B4.$$.fragment,iw),iw.forEach(t),aEr=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(IL.$$.fragment,Il),nEr=i(Il),KFe=n(Il,"P",{});var DTt=s(KFe);sEr=r(DTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),DTt.forEach(t),lEr=i(Il),mn=n(Il,"P",{});var dw=s(mn);iEr=r(dw,"The model class to instantiate is selected based on the "),ZFe=n(dw,"CODE",{});var GTt=s(ZFe);dEr=r(GTt,"model_type"),GTt.forEach(t),cEr=r(dw,` property of the config object (either
passed as an argument or loaded from `),e0e=n(dw,"CODE",{});var OTt=s(e0e);fEr=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),mEr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=n(dw,"CODE",{});var VTt=s(o0e);gEr=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),hEr=r(dw,":"),dw.forEach(t),pEr=i(Il),r0e=n(Il,"UL",{});var XTt=s(r0e);P4=n(XTt,"LI",{});var JSe=s(P4);t0e=n(JSe,"STRONG",{});var zTt=s(t0e);uEr=r(zTt,"speech_to_text"),zTt.forEach(t),_Er=r(JSe," \u2014 "),aU=n(JSe,"A",{href:!0});var QTt=s(aU);bEr=r(QTt,"TFSpeech2TextForConditionalGeneration"),QTt.forEach(t),vEr=r(JSe," (Speech2Text model)"),JSe.forEach(t),XTt.forEach(t),FEr=i(Il),T(I4.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),yIe=i(f),wc=n(f,"H2",{class:!0});var PNe=s(wc);q4=n(PNe,"A",{id:!0,class:!0,href:!0});var WTt=s(q4);a0e=n(WTt,"SPAN",{});var HTt=s(a0e);T(qL.$$.fragment,HTt),HTt.forEach(t),WTt.forEach(t),TEr=i(PNe),n0e=n(PNe,"SPAN",{});var UTt=s(n0e);MEr=r(UTt,"FlaxAutoModel"),UTt.forEach(t),PNe.forEach(t),LIe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(NL.$$.fragment,ql),EEr=i(ql),Ac=n(ql,"P",{});var sZ=s(Ac);CEr=r(sZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nU=n(sZ,"A",{href:!0});var JTt=s(nU);wEr=r(JTt,"from_pretrained()"),JTt.forEach(t),AEr=r(sZ," class method or the "),sU=n(sZ,"A",{href:!0});var YTt=s(sU);yEr=r(YTt,"from_config()"),YTt.forEach(t),LEr=r(sZ,` class
method.`),sZ.forEach(t),xEr=i(ql),jL=n(ql,"P",{});var INe=s(jL);$Er=r(INe,"This class cannot be instantiated directly using "),s0e=n(INe,"CODE",{});var KTt=s(s0e);kEr=r(KTt,"__init__()"),KTt.forEach(t),SEr=r(INe," (throws an error)."),INe.forEach(t),REr=i(ql),jt=n(ql,"DIV",{class:!0});var cw=s(jt);T(DL.$$.fragment,cw),BEr=i(cw),l0e=n(cw,"P",{});var ZTt=s(l0e);PEr=r(ZTt,"Instantiates one of the base model classes of the library from a configuration."),ZTt.forEach(t),IEr=i(cw),yc=n(cw,"P",{});var lZ=s(yc);qEr=r(lZ,`Note:
Loading a model from its configuration file does `),i0e=n(lZ,"STRONG",{});var e7t=s(i0e);NEr=r(e7t,"not"),e7t.forEach(t),jEr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(lZ,"A",{href:!0});var o7t=s(lU);DEr=r(o7t,"from_pretrained()"),o7t.forEach(t),GEr=r(lZ," to load the model weights."),lZ.forEach(t),OEr=i(cw),T(N4.$$.fragment,cw),cw.forEach(t),VEr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(GL.$$.fragment,Nl),XEr=i(Nl),d0e=n(Nl,"P",{});var r7t=s(d0e);zEr=r(r7t,"Instantiate one of the base model classes of the library from a pretrained model."),r7t.forEach(t),QEr=i(Nl),gn=n(Nl,"P",{});var fw=s(gn);WEr=r(fw,"The model class to instantiate is selected based on the "),c0e=n(fw,"CODE",{});var t7t=s(c0e);HEr=r(t7t,"model_type"),t7t.forEach(t),UEr=r(fw,` property of the config object (either
passed as an argument or loaded from `),f0e=n(fw,"CODE",{});var a7t=s(f0e);JEr=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),YEr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(fw,"CODE",{});var n7t=s(m0e);KEr=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),ZEr=r(fw,":"),fw.forEach(t),e5r=i(Nl),oe=n(Nl,"UL",{});var ae=s(oe);j4=n(ae,"LI",{});var YSe=s(j4);g0e=n(YSe,"STRONG",{});var s7t=s(g0e);o5r=r(s7t,"albert"),s7t.forEach(t),r5r=r(YSe," \u2014 "),iU=n(YSe,"A",{href:!0});var l7t=s(iU);t5r=r(l7t,"FlaxAlbertModel"),l7t.forEach(t),a5r=r(YSe," (ALBERT model)"),YSe.forEach(t),n5r=i(ae),D4=n(ae,"LI",{});var KSe=s(D4);h0e=n(KSe,"STRONG",{});var i7t=s(h0e);s5r=r(i7t,"bart"),i7t.forEach(t),l5r=r(KSe," \u2014 "),dU=n(KSe,"A",{href:!0});var d7t=s(dU);i5r=r(d7t,"FlaxBartModel"),d7t.forEach(t),d5r=r(KSe," (BART model)"),KSe.forEach(t),c5r=i(ae),G4=n(ae,"LI",{});var ZSe=s(G4);p0e=n(ZSe,"STRONG",{});var c7t=s(p0e);f5r=r(c7t,"beit"),c7t.forEach(t),m5r=r(ZSe," \u2014 "),cU=n(ZSe,"A",{href:!0});var f7t=s(cU);g5r=r(f7t,"FlaxBeitModel"),f7t.forEach(t),h5r=r(ZSe," (BEiT model)"),ZSe.forEach(t),p5r=i(ae),O4=n(ae,"LI",{});var eRe=s(O4);u0e=n(eRe,"STRONG",{});var m7t=s(u0e);u5r=r(m7t,"bert"),m7t.forEach(t),_5r=r(eRe," \u2014 "),fU=n(eRe,"A",{href:!0});var g7t=s(fU);b5r=r(g7t,"FlaxBertModel"),g7t.forEach(t),v5r=r(eRe," (BERT model)"),eRe.forEach(t),F5r=i(ae),V4=n(ae,"LI",{});var oRe=s(V4);_0e=n(oRe,"STRONG",{});var h7t=s(_0e);T5r=r(h7t,"big_bird"),h7t.forEach(t),M5r=r(oRe," \u2014 "),mU=n(oRe,"A",{href:!0});var p7t=s(mU);E5r=r(p7t,"FlaxBigBirdModel"),p7t.forEach(t),C5r=r(oRe," (BigBird model)"),oRe.forEach(t),w5r=i(ae),X4=n(ae,"LI",{});var rRe=s(X4);b0e=n(rRe,"STRONG",{});var u7t=s(b0e);A5r=r(u7t,"blenderbot"),u7t.forEach(t),y5r=r(rRe," \u2014 "),gU=n(rRe,"A",{href:!0});var _7t=s(gU);L5r=r(_7t,"FlaxBlenderbotModel"),_7t.forEach(t),x5r=r(rRe," (Blenderbot model)"),rRe.forEach(t),$5r=i(ae),z4=n(ae,"LI",{});var tRe=s(z4);v0e=n(tRe,"STRONG",{});var b7t=s(v0e);k5r=r(b7t,"blenderbot-small"),b7t.forEach(t),S5r=r(tRe," \u2014 "),hU=n(tRe,"A",{href:!0});var v7t=s(hU);R5r=r(v7t,"FlaxBlenderbotSmallModel"),v7t.forEach(t),B5r=r(tRe," (BlenderbotSmall model)"),tRe.forEach(t),P5r=i(ae),Q4=n(ae,"LI",{});var aRe=s(Q4);F0e=n(aRe,"STRONG",{});var F7t=s(F0e);I5r=r(F7t,"clip"),F7t.forEach(t),q5r=r(aRe," \u2014 "),pU=n(aRe,"A",{href:!0});var T7t=s(pU);N5r=r(T7t,"FlaxCLIPModel"),T7t.forEach(t),j5r=r(aRe," (CLIP model)"),aRe.forEach(t),D5r=i(ae),W4=n(ae,"LI",{});var nRe=s(W4);T0e=n(nRe,"STRONG",{});var M7t=s(T0e);G5r=r(M7t,"distilbert"),M7t.forEach(t),O5r=r(nRe," \u2014 "),uU=n(nRe,"A",{href:!0});var E7t=s(uU);V5r=r(E7t,"FlaxDistilBertModel"),E7t.forEach(t),X5r=r(nRe," (DistilBERT model)"),nRe.forEach(t),z5r=i(ae),H4=n(ae,"LI",{});var sRe=s(H4);M0e=n(sRe,"STRONG",{});var C7t=s(M0e);Q5r=r(C7t,"electra"),C7t.forEach(t),W5r=r(sRe," \u2014 "),_U=n(sRe,"A",{href:!0});var w7t=s(_U);H5r=r(w7t,"FlaxElectraModel"),w7t.forEach(t),U5r=r(sRe," (ELECTRA model)"),sRe.forEach(t),J5r=i(ae),U4=n(ae,"LI",{});var lRe=s(U4);E0e=n(lRe,"STRONG",{});var A7t=s(E0e);Y5r=r(A7t,"gpt2"),A7t.forEach(t),K5r=r(lRe," \u2014 "),bU=n(lRe,"A",{href:!0});var y7t=s(bU);Z5r=r(y7t,"FlaxGPT2Model"),y7t.forEach(t),eCr=r(lRe," (OpenAI GPT-2 model)"),lRe.forEach(t),oCr=i(ae),J4=n(ae,"LI",{});var iRe=s(J4);C0e=n(iRe,"STRONG",{});var L7t=s(C0e);rCr=r(L7t,"gpt_neo"),L7t.forEach(t),tCr=r(iRe," \u2014 "),vU=n(iRe,"A",{href:!0});var x7t=s(vU);aCr=r(x7t,"FlaxGPTNeoModel"),x7t.forEach(t),nCr=r(iRe," (GPT Neo model)"),iRe.forEach(t),sCr=i(ae),Y4=n(ae,"LI",{});var dRe=s(Y4);w0e=n(dRe,"STRONG",{});var $7t=s(w0e);lCr=r($7t,"gptj"),$7t.forEach(t),iCr=r(dRe," \u2014 "),FU=n(dRe,"A",{href:!0});var k7t=s(FU);dCr=r(k7t,"FlaxGPTJModel"),k7t.forEach(t),cCr=r(dRe," (GPT-J model)"),dRe.forEach(t),fCr=i(ae),K4=n(ae,"LI",{});var cRe=s(K4);A0e=n(cRe,"STRONG",{});var S7t=s(A0e);mCr=r(S7t,"marian"),S7t.forEach(t),gCr=r(cRe," \u2014 "),TU=n(cRe,"A",{href:!0});var R7t=s(TU);hCr=r(R7t,"FlaxMarianModel"),R7t.forEach(t),pCr=r(cRe," (Marian model)"),cRe.forEach(t),uCr=i(ae),Z4=n(ae,"LI",{});var fRe=s(Z4);y0e=n(fRe,"STRONG",{});var B7t=s(y0e);_Cr=r(B7t,"mbart"),B7t.forEach(t),bCr=r(fRe," \u2014 "),MU=n(fRe,"A",{href:!0});var P7t=s(MU);vCr=r(P7t,"FlaxMBartModel"),P7t.forEach(t),FCr=r(fRe," (mBART model)"),fRe.forEach(t),TCr=i(ae),eE=n(ae,"LI",{});var mRe=s(eE);L0e=n(mRe,"STRONG",{});var I7t=s(L0e);MCr=r(I7t,"mt5"),I7t.forEach(t),ECr=r(mRe," \u2014 "),EU=n(mRe,"A",{href:!0});var q7t=s(EU);CCr=r(q7t,"FlaxMT5Model"),q7t.forEach(t),wCr=r(mRe," (mT5 model)"),mRe.forEach(t),ACr=i(ae),oE=n(ae,"LI",{});var gRe=s(oE);x0e=n(gRe,"STRONG",{});var N7t=s(x0e);yCr=r(N7t,"pegasus"),N7t.forEach(t),LCr=r(gRe," \u2014 "),CU=n(gRe,"A",{href:!0});var j7t=s(CU);xCr=r(j7t,"FlaxPegasusModel"),j7t.forEach(t),$Cr=r(gRe," (Pegasus model)"),gRe.forEach(t),kCr=i(ae),rE=n(ae,"LI",{});var hRe=s(rE);$0e=n(hRe,"STRONG",{});var D7t=s($0e);SCr=r(D7t,"roberta"),D7t.forEach(t),RCr=r(hRe," \u2014 "),wU=n(hRe,"A",{href:!0});var G7t=s(wU);BCr=r(G7t,"FlaxRobertaModel"),G7t.forEach(t),PCr=r(hRe," (RoBERTa model)"),hRe.forEach(t),ICr=i(ae),tE=n(ae,"LI",{});var pRe=s(tE);k0e=n(pRe,"STRONG",{});var O7t=s(k0e);qCr=r(O7t,"roformer"),O7t.forEach(t),NCr=r(pRe," \u2014 "),AU=n(pRe,"A",{href:!0});var V7t=s(AU);jCr=r(V7t,"FlaxRoFormerModel"),V7t.forEach(t),DCr=r(pRe," (RoFormer model)"),pRe.forEach(t),GCr=i(ae),aE=n(ae,"LI",{});var uRe=s(aE);S0e=n(uRe,"STRONG",{});var X7t=s(S0e);OCr=r(X7t,"t5"),X7t.forEach(t),VCr=r(uRe," \u2014 "),yU=n(uRe,"A",{href:!0});var z7t=s(yU);XCr=r(z7t,"FlaxT5Model"),z7t.forEach(t),zCr=r(uRe," (T5 model)"),uRe.forEach(t),QCr=i(ae),nE=n(ae,"LI",{});var _Re=s(nE);R0e=n(_Re,"STRONG",{});var Q7t=s(R0e);WCr=r(Q7t,"vision-text-dual-encoder"),Q7t.forEach(t),HCr=r(_Re," \u2014 "),LU=n(_Re,"A",{href:!0});var W7t=s(LU);UCr=r(W7t,"FlaxVisionTextDualEncoderModel"),W7t.forEach(t),JCr=r(_Re," (VisionTextDualEncoder model)"),_Re.forEach(t),YCr=i(ae),sE=n(ae,"LI",{});var bRe=s(sE);B0e=n(bRe,"STRONG",{});var H7t=s(B0e);KCr=r(H7t,"vit"),H7t.forEach(t),ZCr=r(bRe," \u2014 "),xU=n(bRe,"A",{href:!0});var U7t=s(xU);e3r=r(U7t,"FlaxViTModel"),U7t.forEach(t),o3r=r(bRe," (ViT model)"),bRe.forEach(t),r3r=i(ae),lE=n(ae,"LI",{});var vRe=s(lE);P0e=n(vRe,"STRONG",{});var J7t=s(P0e);t3r=r(J7t,"wav2vec2"),J7t.forEach(t),a3r=r(vRe," \u2014 "),$U=n(vRe,"A",{href:!0});var Y7t=s($U);n3r=r(Y7t,"FlaxWav2Vec2Model"),Y7t.forEach(t),s3r=r(vRe," (Wav2Vec2 model)"),vRe.forEach(t),l3r=i(ae),iE=n(ae,"LI",{});var FRe=s(iE);I0e=n(FRe,"STRONG",{});var K7t=s(I0e);i3r=r(K7t,"xglm"),K7t.forEach(t),d3r=r(FRe," \u2014 "),kU=n(FRe,"A",{href:!0});var Z7t=s(kU);c3r=r(Z7t,"FlaxXGLMModel"),Z7t.forEach(t),f3r=r(FRe," (XGLM model)"),FRe.forEach(t),m3r=i(ae),dE=n(ae,"LI",{});var TRe=s(dE);q0e=n(TRe,"STRONG",{});var e9t=s(q0e);g3r=r(e9t,"xlm-roberta"),e9t.forEach(t),h3r=r(TRe," \u2014 "),SU=n(TRe,"A",{href:!0});var o9t=s(SU);p3r=r(o9t,"FlaxXLMRobertaModel"),o9t.forEach(t),u3r=r(TRe," (XLM-RoBERTa model)"),TRe.forEach(t),ae.forEach(t),_3r=i(Nl),T(cE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),xIe=i(f),Lc=n(f,"H2",{class:!0});var qNe=s(Lc);fE=n(qNe,"A",{id:!0,class:!0,href:!0});var r9t=s(fE);N0e=n(r9t,"SPAN",{});var t9t=s(N0e);T(OL.$$.fragment,t9t),t9t.forEach(t),r9t.forEach(t),b3r=i(qNe),j0e=n(qNe,"SPAN",{});var a9t=s(j0e);v3r=r(a9t,"FlaxAutoModelForCausalLM"),a9t.forEach(t),qNe.forEach(t),$Ie=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(VL.$$.fragment,jl),F3r=i(jl),xc=n(jl,"P",{});var iZ=s(xc);T3r=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RU=n(iZ,"A",{href:!0});var n9t=s(RU);M3r=r(n9t,"from_pretrained()"),n9t.forEach(t),E3r=r(iZ," class method or the "),BU=n(iZ,"A",{href:!0});var s9t=s(BU);C3r=r(s9t,"from_config()"),s9t.forEach(t),w3r=r(iZ,` class
method.`),iZ.forEach(t),A3r=i(jl),XL=n(jl,"P",{});var NNe=s(XL);y3r=r(NNe,"This class cannot be instantiated directly using "),D0e=n(NNe,"CODE",{});var l9t=s(D0e);L3r=r(l9t,"__init__()"),l9t.forEach(t),x3r=r(NNe," (throws an error)."),NNe.forEach(t),$3r=i(jl),Dt=n(jl,"DIV",{class:!0});var mw=s(Dt);T(zL.$$.fragment,mw),k3r=i(mw),G0e=n(mw,"P",{});var i9t=s(G0e);S3r=r(i9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i9t.forEach(t),R3r=i(mw),$c=n(mw,"P",{});var dZ=s($c);B3r=r(dZ,`Note:
Loading a model from its configuration file does `),O0e=n(dZ,"STRONG",{});var d9t=s(O0e);P3r=r(d9t,"not"),d9t.forEach(t),I3r=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(dZ,"A",{href:!0});var c9t=s(PU);q3r=r(c9t,"from_pretrained()"),c9t.forEach(t),N3r=r(dZ," to load the model weights."),dZ.forEach(t),j3r=i(mw),T(mE.$$.fragment,mw),mw.forEach(t),D3r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(QL.$$.fragment,Dl),G3r=i(Dl),V0e=n(Dl,"P",{});var f9t=s(V0e);O3r=r(f9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),f9t.forEach(t),V3r=i(Dl),hn=n(Dl,"P",{});var gw=s(hn);X3r=r(gw,"The model class to instantiate is selected based on the "),X0e=n(gw,"CODE",{});var m9t=s(X0e);z3r=r(m9t,"model_type"),m9t.forEach(t),Q3r=r(gw,` property of the config object (either
passed as an argument or loaded from `),z0e=n(gw,"CODE",{});var g9t=s(z0e);W3r=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),H3r=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=n(gw,"CODE",{});var h9t=s(Q0e);U3r=r(h9t,"pretrained_model_name_or_path"),h9t.forEach(t),J3r=r(gw,":"),gw.forEach(t),Y3r=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);gE=n(Oe,"LI",{});var MRe=s(gE);W0e=n(MRe,"STRONG",{});var p9t=s(W0e);K3r=r(p9t,"bart"),p9t.forEach(t),Z3r=r(MRe," \u2014 "),IU=n(MRe,"A",{href:!0});var u9t=s(IU);ewr=r(u9t,"FlaxBartForCausalLM"),u9t.forEach(t),owr=r(MRe," (BART model)"),MRe.forEach(t),rwr=i(Oe),hE=n(Oe,"LI",{});var ERe=s(hE);H0e=n(ERe,"STRONG",{});var _9t=s(H0e);twr=r(_9t,"bert"),_9t.forEach(t),awr=r(ERe," \u2014 "),qU=n(ERe,"A",{href:!0});var b9t=s(qU);nwr=r(b9t,"FlaxBertForCausalLM"),b9t.forEach(t),swr=r(ERe," (BERT model)"),ERe.forEach(t),lwr=i(Oe),pE=n(Oe,"LI",{});var CRe=s(pE);U0e=n(CRe,"STRONG",{});var v9t=s(U0e);iwr=r(v9t,"big_bird"),v9t.forEach(t),dwr=r(CRe," \u2014 "),NU=n(CRe,"A",{href:!0});var F9t=s(NU);cwr=r(F9t,"FlaxBigBirdForCausalLM"),F9t.forEach(t),fwr=r(CRe," (BigBird model)"),CRe.forEach(t),mwr=i(Oe),uE=n(Oe,"LI",{});var wRe=s(uE);J0e=n(wRe,"STRONG",{});var T9t=s(J0e);gwr=r(T9t,"electra"),T9t.forEach(t),hwr=r(wRe," \u2014 "),jU=n(wRe,"A",{href:!0});var M9t=s(jU);pwr=r(M9t,"FlaxElectraForCausalLM"),M9t.forEach(t),uwr=r(wRe," (ELECTRA model)"),wRe.forEach(t),_wr=i(Oe),_E=n(Oe,"LI",{});var ARe=s(_E);Y0e=n(ARe,"STRONG",{});var E9t=s(Y0e);bwr=r(E9t,"gpt2"),E9t.forEach(t),vwr=r(ARe," \u2014 "),DU=n(ARe,"A",{href:!0});var C9t=s(DU);Fwr=r(C9t,"FlaxGPT2LMHeadModel"),C9t.forEach(t),Twr=r(ARe," (OpenAI GPT-2 model)"),ARe.forEach(t),Mwr=i(Oe),bE=n(Oe,"LI",{});var yRe=s(bE);K0e=n(yRe,"STRONG",{});var w9t=s(K0e);Ewr=r(w9t,"gpt_neo"),w9t.forEach(t),Cwr=r(yRe," \u2014 "),GU=n(yRe,"A",{href:!0});var A9t=s(GU);wwr=r(A9t,"FlaxGPTNeoForCausalLM"),A9t.forEach(t),Awr=r(yRe," (GPT Neo model)"),yRe.forEach(t),ywr=i(Oe),vE=n(Oe,"LI",{});var LRe=s(vE);Z0e=n(LRe,"STRONG",{});var y9t=s(Z0e);Lwr=r(y9t,"gptj"),y9t.forEach(t),xwr=r(LRe," \u2014 "),OU=n(LRe,"A",{href:!0});var L9t=s(OU);$wr=r(L9t,"FlaxGPTJForCausalLM"),L9t.forEach(t),kwr=r(LRe," (GPT-J model)"),LRe.forEach(t),Swr=i(Oe),FE=n(Oe,"LI",{});var xRe=s(FE);eTe=n(xRe,"STRONG",{});var x9t=s(eTe);Rwr=r(x9t,"roberta"),x9t.forEach(t),Bwr=r(xRe," \u2014 "),VU=n(xRe,"A",{href:!0});var $9t=s(VU);Pwr=r($9t,"FlaxRobertaForCausalLM"),$9t.forEach(t),Iwr=r(xRe," (RoBERTa model)"),xRe.forEach(t),qwr=i(Oe),TE=n(Oe,"LI",{});var $Re=s(TE);oTe=n($Re,"STRONG",{});var k9t=s(oTe);Nwr=r(k9t,"xglm"),k9t.forEach(t),jwr=r($Re," \u2014 "),XU=n($Re,"A",{href:!0});var S9t=s(XU);Dwr=r(S9t,"FlaxXGLMForCausalLM"),S9t.forEach(t),Gwr=r($Re," (XGLM model)"),$Re.forEach(t),Oe.forEach(t),Owr=i(Dl),T(ME.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),kIe=i(f),kc=n(f,"H2",{class:!0});var jNe=s(kc);EE=n(jNe,"A",{id:!0,class:!0,href:!0});var R9t=s(EE);rTe=n(R9t,"SPAN",{});var B9t=s(rTe);T(WL.$$.fragment,B9t),B9t.forEach(t),R9t.forEach(t),Vwr=i(jNe),tTe=n(jNe,"SPAN",{});var P9t=s(tTe);Xwr=r(P9t,"FlaxAutoModelForPreTraining"),P9t.forEach(t),jNe.forEach(t),SIe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(HL.$$.fragment,Gl),zwr=i(Gl),Sc=n(Gl,"P",{});var cZ=s(Sc);Qwr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zU=n(cZ,"A",{href:!0});var I9t=s(zU);Wwr=r(I9t,"from_pretrained()"),I9t.forEach(t),Hwr=r(cZ," class method or the "),QU=n(cZ,"A",{href:!0});var q9t=s(QU);Uwr=r(q9t,"from_config()"),q9t.forEach(t),Jwr=r(cZ,` class
method.`),cZ.forEach(t),Ywr=i(Gl),UL=n(Gl,"P",{});var DNe=s(UL);Kwr=r(DNe,"This class cannot be instantiated directly using "),aTe=n(DNe,"CODE",{});var N9t=s(aTe);Zwr=r(N9t,"__init__()"),N9t.forEach(t),eAr=r(DNe," (throws an error)."),DNe.forEach(t),oAr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var hw=s(Gt);T(JL.$$.fragment,hw),rAr=i(hw),nTe=n(hw,"P",{});var j9t=s(nTe);tAr=r(j9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),j9t.forEach(t),aAr=i(hw),Rc=n(hw,"P",{});var fZ=s(Rc);nAr=r(fZ,`Note:
Loading a model from its configuration file does `),sTe=n(fZ,"STRONG",{});var D9t=s(sTe);sAr=r(D9t,"not"),D9t.forEach(t),lAr=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(fZ,"A",{href:!0});var G9t=s(WU);iAr=r(G9t,"from_pretrained()"),G9t.forEach(t),dAr=r(fZ," to load the model weights."),fZ.forEach(t),cAr=i(hw),T(CE.$$.fragment,hw),hw.forEach(t),fAr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(YL.$$.fragment,Ol),mAr=i(Ol),lTe=n(Ol,"P",{});var O9t=s(lTe);gAr=r(O9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),O9t.forEach(t),hAr=i(Ol),pn=n(Ol,"P",{});var pw=s(pn);pAr=r(pw,"The model class to instantiate is selected based on the "),iTe=n(pw,"CODE",{});var V9t=s(iTe);uAr=r(V9t,"model_type"),V9t.forEach(t),_Ar=r(pw,` property of the config object (either
passed as an argument or loaded from `),dTe=n(pw,"CODE",{});var X9t=s(dTe);bAr=r(X9t,"pretrained_model_name_or_path"),X9t.forEach(t),vAr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(pw,"CODE",{});var z9t=s(cTe);FAr=r(z9t,"pretrained_model_name_or_path"),z9t.forEach(t),TAr=r(pw,":"),pw.forEach(t),MAr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);wE=n(we,"LI",{});var kRe=s(wE);fTe=n(kRe,"STRONG",{});var Q9t=s(fTe);EAr=r(Q9t,"albert"),Q9t.forEach(t),CAr=r(kRe," \u2014 "),HU=n(kRe,"A",{href:!0});var W9t=s(HU);wAr=r(W9t,"FlaxAlbertForPreTraining"),W9t.forEach(t),AAr=r(kRe," (ALBERT model)"),kRe.forEach(t),yAr=i(we),AE=n(we,"LI",{});var SRe=s(AE);mTe=n(SRe,"STRONG",{});var H9t=s(mTe);LAr=r(H9t,"bart"),H9t.forEach(t),xAr=r(SRe," \u2014 "),UU=n(SRe,"A",{href:!0});var U9t=s(UU);$Ar=r(U9t,"FlaxBartForConditionalGeneration"),U9t.forEach(t),kAr=r(SRe," (BART model)"),SRe.forEach(t),SAr=i(we),yE=n(we,"LI",{});var RRe=s(yE);gTe=n(RRe,"STRONG",{});var J9t=s(gTe);RAr=r(J9t,"bert"),J9t.forEach(t),BAr=r(RRe," \u2014 "),JU=n(RRe,"A",{href:!0});var Y9t=s(JU);PAr=r(Y9t,"FlaxBertForPreTraining"),Y9t.forEach(t),IAr=r(RRe," (BERT model)"),RRe.forEach(t),qAr=i(we),LE=n(we,"LI",{});var BRe=s(LE);hTe=n(BRe,"STRONG",{});var K9t=s(hTe);NAr=r(K9t,"big_bird"),K9t.forEach(t),jAr=r(BRe," \u2014 "),YU=n(BRe,"A",{href:!0});var Z9t=s(YU);DAr=r(Z9t,"FlaxBigBirdForPreTraining"),Z9t.forEach(t),GAr=r(BRe," (BigBird model)"),BRe.forEach(t),OAr=i(we),xE=n(we,"LI",{});var PRe=s(xE);pTe=n(PRe,"STRONG",{});var eMt=s(pTe);VAr=r(eMt,"electra"),eMt.forEach(t),XAr=r(PRe," \u2014 "),KU=n(PRe,"A",{href:!0});var oMt=s(KU);zAr=r(oMt,"FlaxElectraForPreTraining"),oMt.forEach(t),QAr=r(PRe," (ELECTRA model)"),PRe.forEach(t),WAr=i(we),$E=n(we,"LI",{});var IRe=s($E);uTe=n(IRe,"STRONG",{});var rMt=s(uTe);HAr=r(rMt,"mbart"),rMt.forEach(t),UAr=r(IRe," \u2014 "),ZU=n(IRe,"A",{href:!0});var tMt=s(ZU);JAr=r(tMt,"FlaxMBartForConditionalGeneration"),tMt.forEach(t),YAr=r(IRe," (mBART model)"),IRe.forEach(t),KAr=i(we),kE=n(we,"LI",{});var qRe=s(kE);_Te=n(qRe,"STRONG",{});var aMt=s(_Te);ZAr=r(aMt,"mt5"),aMt.forEach(t),e6r=r(qRe," \u2014 "),eJ=n(qRe,"A",{href:!0});var nMt=s(eJ);o6r=r(nMt,"FlaxMT5ForConditionalGeneration"),nMt.forEach(t),r6r=r(qRe," (mT5 model)"),qRe.forEach(t),t6r=i(we),SE=n(we,"LI",{});var NRe=s(SE);bTe=n(NRe,"STRONG",{});var sMt=s(bTe);a6r=r(sMt,"roberta"),sMt.forEach(t),n6r=r(NRe," \u2014 "),oJ=n(NRe,"A",{href:!0});var lMt=s(oJ);s6r=r(lMt,"FlaxRobertaForMaskedLM"),lMt.forEach(t),l6r=r(NRe," (RoBERTa model)"),NRe.forEach(t),i6r=i(we),RE=n(we,"LI",{});var jRe=s(RE);vTe=n(jRe,"STRONG",{});var iMt=s(vTe);d6r=r(iMt,"roformer"),iMt.forEach(t),c6r=r(jRe," \u2014 "),rJ=n(jRe,"A",{href:!0});var dMt=s(rJ);f6r=r(dMt,"FlaxRoFormerForMaskedLM"),dMt.forEach(t),m6r=r(jRe," (RoFormer model)"),jRe.forEach(t),g6r=i(we),BE=n(we,"LI",{});var DRe=s(BE);FTe=n(DRe,"STRONG",{});var cMt=s(FTe);h6r=r(cMt,"t5"),cMt.forEach(t),p6r=r(DRe," \u2014 "),tJ=n(DRe,"A",{href:!0});var fMt=s(tJ);u6r=r(fMt,"FlaxT5ForConditionalGeneration"),fMt.forEach(t),_6r=r(DRe," (T5 model)"),DRe.forEach(t),b6r=i(we),PE=n(we,"LI",{});var GRe=s(PE);TTe=n(GRe,"STRONG",{});var mMt=s(TTe);v6r=r(mMt,"wav2vec2"),mMt.forEach(t),F6r=r(GRe," \u2014 "),aJ=n(GRe,"A",{href:!0});var gMt=s(aJ);T6r=r(gMt,"FlaxWav2Vec2ForPreTraining"),gMt.forEach(t),M6r=r(GRe," (Wav2Vec2 model)"),GRe.forEach(t),E6r=i(we),IE=n(we,"LI",{});var ORe=s(IE);MTe=n(ORe,"STRONG",{});var hMt=s(MTe);C6r=r(hMt,"xlm-roberta"),hMt.forEach(t),w6r=r(ORe," \u2014 "),nJ=n(ORe,"A",{href:!0});var pMt=s(nJ);A6r=r(pMt,"FlaxXLMRobertaForMaskedLM"),pMt.forEach(t),y6r=r(ORe," (XLM-RoBERTa model)"),ORe.forEach(t),we.forEach(t),L6r=i(Ol),T(qE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),RIe=i(f),Bc=n(f,"H2",{class:!0});var GNe=s(Bc);NE=n(GNe,"A",{id:!0,class:!0,href:!0});var uMt=s(NE);ETe=n(uMt,"SPAN",{});var _Mt=s(ETe);T(KL.$$.fragment,_Mt),_Mt.forEach(t),uMt.forEach(t),x6r=i(GNe),CTe=n(GNe,"SPAN",{});var bMt=s(CTe);$6r=r(bMt,"FlaxAutoModelForMaskedLM"),bMt.forEach(t),GNe.forEach(t),BIe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(ZL.$$.fragment,Vl),k6r=i(Vl),Pc=n(Vl,"P",{});var mZ=s(Pc);S6r=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sJ=n(mZ,"A",{href:!0});var vMt=s(sJ);R6r=r(vMt,"from_pretrained()"),vMt.forEach(t),B6r=r(mZ," class method or the "),lJ=n(mZ,"A",{href:!0});var FMt=s(lJ);P6r=r(FMt,"from_config()"),FMt.forEach(t),I6r=r(mZ,` class
method.`),mZ.forEach(t),q6r=i(Vl),e8=n(Vl,"P",{});var ONe=s(e8);N6r=r(ONe,"This class cannot be instantiated directly using "),wTe=n(ONe,"CODE",{});var TMt=s(wTe);j6r=r(TMt,"__init__()"),TMt.forEach(t),D6r=r(ONe," (throws an error)."),ONe.forEach(t),G6r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var uw=s(Ot);T(o8.$$.fragment,uw),O6r=i(uw),ATe=n(uw,"P",{});var MMt=s(ATe);V6r=r(MMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MMt.forEach(t),X6r=i(uw),Ic=n(uw,"P",{});var gZ=s(Ic);z6r=r(gZ,`Note:
Loading a model from its configuration file does `),yTe=n(gZ,"STRONG",{});var EMt=s(yTe);Q6r=r(EMt,"not"),EMt.forEach(t),W6r=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(gZ,"A",{href:!0});var CMt=s(iJ);H6r=r(CMt,"from_pretrained()"),CMt.forEach(t),U6r=r(gZ," to load the model weights."),gZ.forEach(t),J6r=i(uw),T(jE.$$.fragment,uw),uw.forEach(t),Y6r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(r8.$$.fragment,Xl),K6r=i(Xl),LTe=n(Xl,"P",{});var wMt=s(LTe);Z6r=r(wMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wMt.forEach(t),eyr=i(Xl),un=n(Xl,"P",{});var _w=s(un);oyr=r(_w,"The model class to instantiate is selected based on the "),xTe=n(_w,"CODE",{});var AMt=s(xTe);ryr=r(AMt,"model_type"),AMt.forEach(t),tyr=r(_w,` property of the config object (either
passed as an argument or loaded from `),$Te=n(_w,"CODE",{});var yMt=s($Te);ayr=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),nyr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(_w,"CODE",{});var LMt=s(kTe);syr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),lyr=r(_w,":"),_w.forEach(t),iyr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);DE=n(Be,"LI",{});var VRe=s(DE);STe=n(VRe,"STRONG",{});var xMt=s(STe);dyr=r(xMt,"albert"),xMt.forEach(t),cyr=r(VRe," \u2014 "),dJ=n(VRe,"A",{href:!0});var $Mt=s(dJ);fyr=r($Mt,"FlaxAlbertForMaskedLM"),$Mt.forEach(t),myr=r(VRe," (ALBERT model)"),VRe.forEach(t),gyr=i(Be),GE=n(Be,"LI",{});var XRe=s(GE);RTe=n(XRe,"STRONG",{});var kMt=s(RTe);hyr=r(kMt,"bart"),kMt.forEach(t),pyr=r(XRe," \u2014 "),cJ=n(XRe,"A",{href:!0});var SMt=s(cJ);uyr=r(SMt,"FlaxBartForConditionalGeneration"),SMt.forEach(t),_yr=r(XRe," (BART model)"),XRe.forEach(t),byr=i(Be),OE=n(Be,"LI",{});var zRe=s(OE);BTe=n(zRe,"STRONG",{});var RMt=s(BTe);vyr=r(RMt,"bert"),RMt.forEach(t),Fyr=r(zRe," \u2014 "),fJ=n(zRe,"A",{href:!0});var BMt=s(fJ);Tyr=r(BMt,"FlaxBertForMaskedLM"),BMt.forEach(t),Myr=r(zRe," (BERT model)"),zRe.forEach(t),Eyr=i(Be),VE=n(Be,"LI",{});var QRe=s(VE);PTe=n(QRe,"STRONG",{});var PMt=s(PTe);Cyr=r(PMt,"big_bird"),PMt.forEach(t),wyr=r(QRe," \u2014 "),mJ=n(QRe,"A",{href:!0});var IMt=s(mJ);Ayr=r(IMt,"FlaxBigBirdForMaskedLM"),IMt.forEach(t),yyr=r(QRe," (BigBird model)"),QRe.forEach(t),Lyr=i(Be),XE=n(Be,"LI",{});var WRe=s(XE);ITe=n(WRe,"STRONG",{});var qMt=s(ITe);xyr=r(qMt,"distilbert"),qMt.forEach(t),$yr=r(WRe," \u2014 "),gJ=n(WRe,"A",{href:!0});var NMt=s(gJ);kyr=r(NMt,"FlaxDistilBertForMaskedLM"),NMt.forEach(t),Syr=r(WRe," (DistilBERT model)"),WRe.forEach(t),Ryr=i(Be),zE=n(Be,"LI",{});var HRe=s(zE);qTe=n(HRe,"STRONG",{});var jMt=s(qTe);Byr=r(jMt,"electra"),jMt.forEach(t),Pyr=r(HRe," \u2014 "),hJ=n(HRe,"A",{href:!0});var DMt=s(hJ);Iyr=r(DMt,"FlaxElectraForMaskedLM"),DMt.forEach(t),qyr=r(HRe," (ELECTRA model)"),HRe.forEach(t),Nyr=i(Be),QE=n(Be,"LI",{});var URe=s(QE);NTe=n(URe,"STRONG",{});var GMt=s(NTe);jyr=r(GMt,"mbart"),GMt.forEach(t),Dyr=r(URe," \u2014 "),pJ=n(URe,"A",{href:!0});var OMt=s(pJ);Gyr=r(OMt,"FlaxMBartForConditionalGeneration"),OMt.forEach(t),Oyr=r(URe," (mBART model)"),URe.forEach(t),Vyr=i(Be),WE=n(Be,"LI",{});var JRe=s(WE);jTe=n(JRe,"STRONG",{});var VMt=s(jTe);Xyr=r(VMt,"roberta"),VMt.forEach(t),zyr=r(JRe," \u2014 "),uJ=n(JRe,"A",{href:!0});var XMt=s(uJ);Qyr=r(XMt,"FlaxRobertaForMaskedLM"),XMt.forEach(t),Wyr=r(JRe," (RoBERTa model)"),JRe.forEach(t),Hyr=i(Be),HE=n(Be,"LI",{});var YRe=s(HE);DTe=n(YRe,"STRONG",{});var zMt=s(DTe);Uyr=r(zMt,"roformer"),zMt.forEach(t),Jyr=r(YRe," \u2014 "),_J=n(YRe,"A",{href:!0});var QMt=s(_J);Yyr=r(QMt,"FlaxRoFormerForMaskedLM"),QMt.forEach(t),Kyr=r(YRe," (RoFormer model)"),YRe.forEach(t),Zyr=i(Be),UE=n(Be,"LI",{});var KRe=s(UE);GTe=n(KRe,"STRONG",{});var WMt=s(GTe);eLr=r(WMt,"xlm-roberta"),WMt.forEach(t),oLr=r(KRe," \u2014 "),bJ=n(KRe,"A",{href:!0});var HMt=s(bJ);rLr=r(HMt,"FlaxXLMRobertaForMaskedLM"),HMt.forEach(t),tLr=r(KRe," (XLM-RoBERTa model)"),KRe.forEach(t),Be.forEach(t),aLr=i(Xl),T(JE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),PIe=i(f),qc=n(f,"H2",{class:!0});var VNe=s(qc);YE=n(VNe,"A",{id:!0,class:!0,href:!0});var UMt=s(YE);OTe=n(UMt,"SPAN",{});var JMt=s(OTe);T(t8.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),nLr=i(VNe),VTe=n(VNe,"SPAN",{});var YMt=s(VTe);sLr=r(YMt,"FlaxAutoModelForSeq2SeqLM"),YMt.forEach(t),VNe.forEach(t),IIe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(a8.$$.fragment,zl),lLr=i(zl),Nc=n(zl,"P",{});var hZ=s(Nc);iLr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vJ=n(hZ,"A",{href:!0});var KMt=s(vJ);dLr=r(KMt,"from_pretrained()"),KMt.forEach(t),cLr=r(hZ," class method or the "),FJ=n(hZ,"A",{href:!0});var ZMt=s(FJ);fLr=r(ZMt,"from_config()"),ZMt.forEach(t),mLr=r(hZ,` class
method.`),hZ.forEach(t),gLr=i(zl),n8=n(zl,"P",{});var XNe=s(n8);hLr=r(XNe,"This class cannot be instantiated directly using "),XTe=n(XNe,"CODE",{});var e4t=s(XTe);pLr=r(e4t,"__init__()"),e4t.forEach(t),uLr=r(XNe," (throws an error)."),XNe.forEach(t),_Lr=i(zl),Vt=n(zl,"DIV",{class:!0});var bw=s(Vt);T(s8.$$.fragment,bw),bLr=i(bw),zTe=n(bw,"P",{});var o4t=s(zTe);vLr=r(o4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),o4t.forEach(t),FLr=i(bw),jc=n(bw,"P",{});var pZ=s(jc);TLr=r(pZ,`Note:
Loading a model from its configuration file does `),QTe=n(pZ,"STRONG",{});var r4t=s(QTe);MLr=r(r4t,"not"),r4t.forEach(t),ELr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(pZ,"A",{href:!0});var t4t=s(TJ);CLr=r(t4t,"from_pretrained()"),t4t.forEach(t),wLr=r(pZ," to load the model weights."),pZ.forEach(t),ALr=i(bw),T(KE.$$.fragment,bw),bw.forEach(t),yLr=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(l8.$$.fragment,Ql),LLr=i(Ql),WTe=n(Ql,"P",{});var a4t=s(WTe);xLr=r(a4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),a4t.forEach(t),$Lr=i(Ql),_n=n(Ql,"P",{});var vw=s(_n);kLr=r(vw,"The model class to instantiate is selected based on the "),HTe=n(vw,"CODE",{});var n4t=s(HTe);SLr=r(n4t,"model_type"),n4t.forEach(t),RLr=r(vw,` property of the config object (either
passed as an argument or loaded from `),UTe=n(vw,"CODE",{});var s4t=s(UTe);BLr=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),PLr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(vw,"CODE",{});var l4t=s(JTe);ILr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),qLr=r(vw,":"),vw.forEach(t),NLr=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);ZE=n(Ve,"LI",{});var ZRe=s(ZE);YTe=n(ZRe,"STRONG",{});var i4t=s(YTe);jLr=r(i4t,"bart"),i4t.forEach(t),DLr=r(ZRe," \u2014 "),MJ=n(ZRe,"A",{href:!0});var d4t=s(MJ);GLr=r(d4t,"FlaxBartForConditionalGeneration"),d4t.forEach(t),OLr=r(ZRe," (BART model)"),ZRe.forEach(t),VLr=i(Ve),e5=n(Ve,"LI",{});var eBe=s(e5);KTe=n(eBe,"STRONG",{});var c4t=s(KTe);XLr=r(c4t,"blenderbot"),c4t.forEach(t),zLr=r(eBe," \u2014 "),EJ=n(eBe,"A",{href:!0});var f4t=s(EJ);QLr=r(f4t,"FlaxBlenderbotForConditionalGeneration"),f4t.forEach(t),WLr=r(eBe," (Blenderbot model)"),eBe.forEach(t),HLr=i(Ve),o5=n(Ve,"LI",{});var oBe=s(o5);ZTe=n(oBe,"STRONG",{});var m4t=s(ZTe);ULr=r(m4t,"blenderbot-small"),m4t.forEach(t),JLr=r(oBe," \u2014 "),CJ=n(oBe,"A",{href:!0});var g4t=s(CJ);YLr=r(g4t,"FlaxBlenderbotSmallForConditionalGeneration"),g4t.forEach(t),KLr=r(oBe," (BlenderbotSmall model)"),oBe.forEach(t),ZLr=i(Ve),r5=n(Ve,"LI",{});var rBe=s(r5);e7e=n(rBe,"STRONG",{});var h4t=s(e7e);e8r=r(h4t,"encoder-decoder"),h4t.forEach(t),o8r=r(rBe," \u2014 "),wJ=n(rBe,"A",{href:!0});var p4t=s(wJ);r8r=r(p4t,"FlaxEncoderDecoderModel"),p4t.forEach(t),t8r=r(rBe," (Encoder decoder model)"),rBe.forEach(t),a8r=i(Ve),t5=n(Ve,"LI",{});var tBe=s(t5);o7e=n(tBe,"STRONG",{});var u4t=s(o7e);n8r=r(u4t,"marian"),u4t.forEach(t),s8r=r(tBe," \u2014 "),AJ=n(tBe,"A",{href:!0});var _4t=s(AJ);l8r=r(_4t,"FlaxMarianMTModel"),_4t.forEach(t),i8r=r(tBe," (Marian model)"),tBe.forEach(t),d8r=i(Ve),a5=n(Ve,"LI",{});var aBe=s(a5);r7e=n(aBe,"STRONG",{});var b4t=s(r7e);c8r=r(b4t,"mbart"),b4t.forEach(t),f8r=r(aBe," \u2014 "),yJ=n(aBe,"A",{href:!0});var v4t=s(yJ);m8r=r(v4t,"FlaxMBartForConditionalGeneration"),v4t.forEach(t),g8r=r(aBe," (mBART model)"),aBe.forEach(t),h8r=i(Ve),n5=n(Ve,"LI",{});var nBe=s(n5);t7e=n(nBe,"STRONG",{});var F4t=s(t7e);p8r=r(F4t,"mt5"),F4t.forEach(t),u8r=r(nBe," \u2014 "),LJ=n(nBe,"A",{href:!0});var T4t=s(LJ);_8r=r(T4t,"FlaxMT5ForConditionalGeneration"),T4t.forEach(t),b8r=r(nBe," (mT5 model)"),nBe.forEach(t),v8r=i(Ve),s5=n(Ve,"LI",{});var sBe=s(s5);a7e=n(sBe,"STRONG",{});var M4t=s(a7e);F8r=r(M4t,"pegasus"),M4t.forEach(t),T8r=r(sBe," \u2014 "),xJ=n(sBe,"A",{href:!0});var E4t=s(xJ);M8r=r(E4t,"FlaxPegasusForConditionalGeneration"),E4t.forEach(t),E8r=r(sBe," (Pegasus model)"),sBe.forEach(t),C8r=i(Ve),l5=n(Ve,"LI",{});var lBe=s(l5);n7e=n(lBe,"STRONG",{});var C4t=s(n7e);w8r=r(C4t,"t5"),C4t.forEach(t),A8r=r(lBe," \u2014 "),$J=n(lBe,"A",{href:!0});var w4t=s($J);y8r=r(w4t,"FlaxT5ForConditionalGeneration"),w4t.forEach(t),L8r=r(lBe," (T5 model)"),lBe.forEach(t),Ve.forEach(t),x8r=i(Ql),T(i5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),qIe=i(f),Dc=n(f,"H2",{class:!0});var zNe=s(Dc);d5=n(zNe,"A",{id:!0,class:!0,href:!0});var A4t=s(d5);s7e=n(A4t,"SPAN",{});var y4t=s(s7e);T(i8.$$.fragment,y4t),y4t.forEach(t),A4t.forEach(t),$8r=i(zNe),l7e=n(zNe,"SPAN",{});var L4t=s(l7e);k8r=r(L4t,"FlaxAutoModelForSequenceClassification"),L4t.forEach(t),zNe.forEach(t),NIe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(d8.$$.fragment,Wl),S8r=i(Wl),Gc=n(Wl,"P",{});var uZ=s(Gc);R8r=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kJ=n(uZ,"A",{href:!0});var x4t=s(kJ);B8r=r(x4t,"from_pretrained()"),x4t.forEach(t),P8r=r(uZ," class method or the "),SJ=n(uZ,"A",{href:!0});var $4t=s(SJ);I8r=r($4t,"from_config()"),$4t.forEach(t),q8r=r(uZ,` class
method.`),uZ.forEach(t),N8r=i(Wl),c8=n(Wl,"P",{});var QNe=s(c8);j8r=r(QNe,"This class cannot be instantiated directly using "),i7e=n(QNe,"CODE",{});var k4t=s(i7e);D8r=r(k4t,"__init__()"),k4t.forEach(t),G8r=r(QNe," (throws an error)."),QNe.forEach(t),O8r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var Fw=s(Xt);T(f8.$$.fragment,Fw),V8r=i(Fw),d7e=n(Fw,"P",{});var S4t=s(d7e);X8r=r(S4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S4t.forEach(t),z8r=i(Fw),Oc=n(Fw,"P",{});var _Z=s(Oc);Q8r=r(_Z,`Note:
Loading a model from its configuration file does `),c7e=n(_Z,"STRONG",{});var R4t=s(c7e);W8r=r(R4t,"not"),R4t.forEach(t),H8r=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(_Z,"A",{href:!0});var B4t=s(RJ);U8r=r(B4t,"from_pretrained()"),B4t.forEach(t),J8r=r(_Z," to load the model weights."),_Z.forEach(t),Y8r=i(Fw),T(c5.$$.fragment,Fw),Fw.forEach(t),K8r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(m8.$$.fragment,Hl),Z8r=i(Hl),f7e=n(Hl,"P",{});var P4t=s(f7e);exr=r(P4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P4t.forEach(t),oxr=i(Hl),bn=n(Hl,"P",{});var Tw=s(bn);rxr=r(Tw,"The model class to instantiate is selected based on the "),m7e=n(Tw,"CODE",{});var I4t=s(m7e);txr=r(I4t,"model_type"),I4t.forEach(t),axr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),g7e=n(Tw,"CODE",{});var q4t=s(g7e);nxr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),sxr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=n(Tw,"CODE",{});var N4t=s(h7e);lxr=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),ixr=r(Tw,":"),Tw.forEach(t),dxr=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);f5=n(Pe,"LI",{});var iBe=s(f5);p7e=n(iBe,"STRONG",{});var j4t=s(p7e);cxr=r(j4t,"albert"),j4t.forEach(t),fxr=r(iBe," \u2014 "),BJ=n(iBe,"A",{href:!0});var D4t=s(BJ);mxr=r(D4t,"FlaxAlbertForSequenceClassification"),D4t.forEach(t),gxr=r(iBe," (ALBERT model)"),iBe.forEach(t),hxr=i(Pe),m5=n(Pe,"LI",{});var dBe=s(m5);u7e=n(dBe,"STRONG",{});var G4t=s(u7e);pxr=r(G4t,"bart"),G4t.forEach(t),uxr=r(dBe," \u2014 "),PJ=n(dBe,"A",{href:!0});var O4t=s(PJ);_xr=r(O4t,"FlaxBartForSequenceClassification"),O4t.forEach(t),bxr=r(dBe," (BART model)"),dBe.forEach(t),vxr=i(Pe),g5=n(Pe,"LI",{});var cBe=s(g5);_7e=n(cBe,"STRONG",{});var V4t=s(_7e);Fxr=r(V4t,"bert"),V4t.forEach(t),Txr=r(cBe," \u2014 "),IJ=n(cBe,"A",{href:!0});var X4t=s(IJ);Mxr=r(X4t,"FlaxBertForSequenceClassification"),X4t.forEach(t),Exr=r(cBe," (BERT model)"),cBe.forEach(t),Cxr=i(Pe),h5=n(Pe,"LI",{});var fBe=s(h5);b7e=n(fBe,"STRONG",{});var z4t=s(b7e);wxr=r(z4t,"big_bird"),z4t.forEach(t),Axr=r(fBe," \u2014 "),qJ=n(fBe,"A",{href:!0});var Q4t=s(qJ);yxr=r(Q4t,"FlaxBigBirdForSequenceClassification"),Q4t.forEach(t),Lxr=r(fBe," (BigBird model)"),fBe.forEach(t),xxr=i(Pe),p5=n(Pe,"LI",{});var mBe=s(p5);v7e=n(mBe,"STRONG",{});var W4t=s(v7e);$xr=r(W4t,"distilbert"),W4t.forEach(t),kxr=r(mBe," \u2014 "),NJ=n(mBe,"A",{href:!0});var H4t=s(NJ);Sxr=r(H4t,"FlaxDistilBertForSequenceClassification"),H4t.forEach(t),Rxr=r(mBe," (DistilBERT model)"),mBe.forEach(t),Bxr=i(Pe),u5=n(Pe,"LI",{});var gBe=s(u5);F7e=n(gBe,"STRONG",{});var U4t=s(F7e);Pxr=r(U4t,"electra"),U4t.forEach(t),Ixr=r(gBe," \u2014 "),jJ=n(gBe,"A",{href:!0});var J4t=s(jJ);qxr=r(J4t,"FlaxElectraForSequenceClassification"),J4t.forEach(t),Nxr=r(gBe," (ELECTRA model)"),gBe.forEach(t),jxr=i(Pe),_5=n(Pe,"LI",{});var hBe=s(_5);T7e=n(hBe,"STRONG",{});var Y4t=s(T7e);Dxr=r(Y4t,"mbart"),Y4t.forEach(t),Gxr=r(hBe," \u2014 "),DJ=n(hBe,"A",{href:!0});var K4t=s(DJ);Oxr=r(K4t,"FlaxMBartForSequenceClassification"),K4t.forEach(t),Vxr=r(hBe," (mBART model)"),hBe.forEach(t),Xxr=i(Pe),b5=n(Pe,"LI",{});var pBe=s(b5);M7e=n(pBe,"STRONG",{});var Z4t=s(M7e);zxr=r(Z4t,"roberta"),Z4t.forEach(t),Qxr=r(pBe," \u2014 "),GJ=n(pBe,"A",{href:!0});var eEt=s(GJ);Wxr=r(eEt,"FlaxRobertaForSequenceClassification"),eEt.forEach(t),Hxr=r(pBe," (RoBERTa model)"),pBe.forEach(t),Uxr=i(Pe),v5=n(Pe,"LI",{});var uBe=s(v5);E7e=n(uBe,"STRONG",{});var oEt=s(E7e);Jxr=r(oEt,"roformer"),oEt.forEach(t),Yxr=r(uBe," \u2014 "),OJ=n(uBe,"A",{href:!0});var rEt=s(OJ);Kxr=r(rEt,"FlaxRoFormerForSequenceClassification"),rEt.forEach(t),Zxr=r(uBe," (RoFormer model)"),uBe.forEach(t),e$r=i(Pe),F5=n(Pe,"LI",{});var _Be=s(F5);C7e=n(_Be,"STRONG",{});var tEt=s(C7e);o$r=r(tEt,"xlm-roberta"),tEt.forEach(t),r$r=r(_Be," \u2014 "),VJ=n(_Be,"A",{href:!0});var aEt=s(VJ);t$r=r(aEt,"FlaxXLMRobertaForSequenceClassification"),aEt.forEach(t),a$r=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),Pe.forEach(t),n$r=i(Hl),T(T5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),jIe=i(f),Vc=n(f,"H2",{class:!0});var WNe=s(Vc);M5=n(WNe,"A",{id:!0,class:!0,href:!0});var nEt=s(M5);w7e=n(nEt,"SPAN",{});var sEt=s(w7e);T(g8.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),s$r=i(WNe),A7e=n(WNe,"SPAN",{});var lEt=s(A7e);l$r=r(lEt,"FlaxAutoModelForQuestionAnswering"),lEt.forEach(t),WNe.forEach(t),DIe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(h8.$$.fragment,Ul),i$r=i(Ul),Xc=n(Ul,"P",{});var bZ=s(Xc);d$r=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XJ=n(bZ,"A",{href:!0});var iEt=s(XJ);c$r=r(iEt,"from_pretrained()"),iEt.forEach(t),f$r=r(bZ," class method or the "),zJ=n(bZ,"A",{href:!0});var dEt=s(zJ);m$r=r(dEt,"from_config()"),dEt.forEach(t),g$r=r(bZ,` class
method.`),bZ.forEach(t),h$r=i(Ul),p8=n(Ul,"P",{});var HNe=s(p8);p$r=r(HNe,"This class cannot be instantiated directly using "),y7e=n(HNe,"CODE",{});var cEt=s(y7e);u$r=r(cEt,"__init__()"),cEt.forEach(t),_$r=r(HNe," (throws an error)."),HNe.forEach(t),b$r=i(Ul),zt=n(Ul,"DIV",{class:!0});var Mw=s(zt);T(u8.$$.fragment,Mw),v$r=i(Mw),L7e=n(Mw,"P",{});var fEt=s(L7e);F$r=r(fEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fEt.forEach(t),T$r=i(Mw),zc=n(Mw,"P",{});var vZ=s(zc);M$r=r(vZ,`Note:
Loading a model from its configuration file does `),x7e=n(vZ,"STRONG",{});var mEt=s(x7e);E$r=r(mEt,"not"),mEt.forEach(t),C$r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(vZ,"A",{href:!0});var gEt=s(QJ);w$r=r(gEt,"from_pretrained()"),gEt.forEach(t),A$r=r(vZ," to load the model weights."),vZ.forEach(t),y$r=i(Mw),T(E5.$$.fragment,Mw),Mw.forEach(t),L$r=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(_8.$$.fragment,Jl),x$r=i(Jl),$7e=n(Jl,"P",{});var hEt=s($7e);$$r=r(hEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hEt.forEach(t),k$r=i(Jl),vn=n(Jl,"P",{});var Ew=s(vn);S$r=r(Ew,"The model class to instantiate is selected based on the "),k7e=n(Ew,"CODE",{});var pEt=s(k7e);R$r=r(pEt,"model_type"),pEt.forEach(t),B$r=r(Ew,` property of the config object (either
passed as an argument or loaded from `),S7e=n(Ew,"CODE",{});var uEt=s(S7e);P$r=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),I$r=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(Ew,"CODE",{});var _Et=s(R7e);q$r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),N$r=r(Ew,":"),Ew.forEach(t),j$r=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);C5=n(Ie,"LI",{});var bBe=s(C5);B7e=n(bBe,"STRONG",{});var bEt=s(B7e);D$r=r(bEt,"albert"),bEt.forEach(t),G$r=r(bBe," \u2014 "),WJ=n(bBe,"A",{href:!0});var vEt=s(WJ);O$r=r(vEt,"FlaxAlbertForQuestionAnswering"),vEt.forEach(t),V$r=r(bBe," (ALBERT model)"),bBe.forEach(t),X$r=i(Ie),w5=n(Ie,"LI",{});var vBe=s(w5);P7e=n(vBe,"STRONG",{});var FEt=s(P7e);z$r=r(FEt,"bart"),FEt.forEach(t),Q$r=r(vBe," \u2014 "),HJ=n(vBe,"A",{href:!0});var TEt=s(HJ);W$r=r(TEt,"FlaxBartForQuestionAnswering"),TEt.forEach(t),H$r=r(vBe," (BART model)"),vBe.forEach(t),U$r=i(Ie),A5=n(Ie,"LI",{});var FBe=s(A5);I7e=n(FBe,"STRONG",{});var MEt=s(I7e);J$r=r(MEt,"bert"),MEt.forEach(t),Y$r=r(FBe," \u2014 "),UJ=n(FBe,"A",{href:!0});var EEt=s(UJ);K$r=r(EEt,"FlaxBertForQuestionAnswering"),EEt.forEach(t),Z$r=r(FBe," (BERT model)"),FBe.forEach(t),ekr=i(Ie),y5=n(Ie,"LI",{});var TBe=s(y5);q7e=n(TBe,"STRONG",{});var CEt=s(q7e);okr=r(CEt,"big_bird"),CEt.forEach(t),rkr=r(TBe," \u2014 "),JJ=n(TBe,"A",{href:!0});var wEt=s(JJ);tkr=r(wEt,"FlaxBigBirdForQuestionAnswering"),wEt.forEach(t),akr=r(TBe," (BigBird model)"),TBe.forEach(t),nkr=i(Ie),L5=n(Ie,"LI",{});var MBe=s(L5);N7e=n(MBe,"STRONG",{});var AEt=s(N7e);skr=r(AEt,"distilbert"),AEt.forEach(t),lkr=r(MBe," \u2014 "),YJ=n(MBe,"A",{href:!0});var yEt=s(YJ);ikr=r(yEt,"FlaxDistilBertForQuestionAnswering"),yEt.forEach(t),dkr=r(MBe," (DistilBERT model)"),MBe.forEach(t),ckr=i(Ie),x5=n(Ie,"LI",{});var EBe=s(x5);j7e=n(EBe,"STRONG",{});var LEt=s(j7e);fkr=r(LEt,"electra"),LEt.forEach(t),mkr=r(EBe," \u2014 "),KJ=n(EBe,"A",{href:!0});var xEt=s(KJ);gkr=r(xEt,"FlaxElectraForQuestionAnswering"),xEt.forEach(t),hkr=r(EBe," (ELECTRA model)"),EBe.forEach(t),pkr=i(Ie),$5=n(Ie,"LI",{});var CBe=s($5);D7e=n(CBe,"STRONG",{});var $Et=s(D7e);ukr=r($Et,"mbart"),$Et.forEach(t),_kr=r(CBe," \u2014 "),ZJ=n(CBe,"A",{href:!0});var kEt=s(ZJ);bkr=r(kEt,"FlaxMBartForQuestionAnswering"),kEt.forEach(t),vkr=r(CBe," (mBART model)"),CBe.forEach(t),Fkr=i(Ie),k5=n(Ie,"LI",{});var wBe=s(k5);G7e=n(wBe,"STRONG",{});var SEt=s(G7e);Tkr=r(SEt,"roberta"),SEt.forEach(t),Mkr=r(wBe," \u2014 "),eY=n(wBe,"A",{href:!0});var REt=s(eY);Ekr=r(REt,"FlaxRobertaForQuestionAnswering"),REt.forEach(t),Ckr=r(wBe," (RoBERTa model)"),wBe.forEach(t),wkr=i(Ie),S5=n(Ie,"LI",{});var ABe=s(S5);O7e=n(ABe,"STRONG",{});var BEt=s(O7e);Akr=r(BEt,"roformer"),BEt.forEach(t),ykr=r(ABe," \u2014 "),oY=n(ABe,"A",{href:!0});var PEt=s(oY);Lkr=r(PEt,"FlaxRoFormerForQuestionAnswering"),PEt.forEach(t),xkr=r(ABe," (RoFormer model)"),ABe.forEach(t),$kr=i(Ie),R5=n(Ie,"LI",{});var yBe=s(R5);V7e=n(yBe,"STRONG",{});var IEt=s(V7e);kkr=r(IEt,"xlm-roberta"),IEt.forEach(t),Skr=r(yBe," \u2014 "),rY=n(yBe,"A",{href:!0});var qEt=s(rY);Rkr=r(qEt,"FlaxXLMRobertaForQuestionAnswering"),qEt.forEach(t),Bkr=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),Ie.forEach(t),Pkr=i(Jl),T(B5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),GIe=i(f),Qc=n(f,"H2",{class:!0});var UNe=s(Qc);P5=n(UNe,"A",{id:!0,class:!0,href:!0});var NEt=s(P5);X7e=n(NEt,"SPAN",{});var jEt=s(X7e);T(b8.$$.fragment,jEt),jEt.forEach(t),NEt.forEach(t),Ikr=i(UNe),z7e=n(UNe,"SPAN",{});var DEt=s(z7e);qkr=r(DEt,"FlaxAutoModelForTokenClassification"),DEt.forEach(t),UNe.forEach(t),OIe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(v8.$$.fragment,Yl),Nkr=i(Yl),Wc=n(Yl,"P",{});var FZ=s(Wc);jkr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tY=n(FZ,"A",{href:!0});var GEt=s(tY);Dkr=r(GEt,"from_pretrained()"),GEt.forEach(t),Gkr=r(FZ," class method or the "),aY=n(FZ,"A",{href:!0});var OEt=s(aY);Okr=r(OEt,"from_config()"),OEt.forEach(t),Vkr=r(FZ,` class
method.`),FZ.forEach(t),Xkr=i(Yl),F8=n(Yl,"P",{});var JNe=s(F8);zkr=r(JNe,"This class cannot be instantiated directly using "),Q7e=n(JNe,"CODE",{});var VEt=s(Q7e);Qkr=r(VEt,"__init__()"),VEt.forEach(t),Wkr=r(JNe," (throws an error)."),JNe.forEach(t),Hkr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var Cw=s(Qt);T(T8.$$.fragment,Cw),Ukr=i(Cw),W7e=n(Cw,"P",{});var XEt=s(W7e);Jkr=r(XEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XEt.forEach(t),Ykr=i(Cw),Hc=n(Cw,"P",{});var TZ=s(Hc);Kkr=r(TZ,`Note:
Loading a model from its configuration file does `),H7e=n(TZ,"STRONG",{});var zEt=s(H7e);Zkr=r(zEt,"not"),zEt.forEach(t),eSr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(TZ,"A",{href:!0});var QEt=s(nY);oSr=r(QEt,"from_pretrained()"),QEt.forEach(t),rSr=r(TZ," to load the model weights."),TZ.forEach(t),tSr=i(Cw),T(I5.$$.fragment,Cw),Cw.forEach(t),aSr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(M8.$$.fragment,Kl),nSr=i(Kl),U7e=n(Kl,"P",{});var WEt=s(U7e);sSr=r(WEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WEt.forEach(t),lSr=i(Kl),Fn=n(Kl,"P",{});var ww=s(Fn);iSr=r(ww,"The model class to instantiate is selected based on the "),J7e=n(ww,"CODE",{});var HEt=s(J7e);dSr=r(HEt,"model_type"),HEt.forEach(t),cSr=r(ww,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(ww,"CODE",{});var UEt=s(Y7e);fSr=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),mSr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(ww,"CODE",{});var JEt=s(K7e);gSr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),hSr=r(ww,":"),ww.forEach(t),pSr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);q5=n(Fo,"LI",{});var LBe=s(q5);Z7e=n(LBe,"STRONG",{});var YEt=s(Z7e);uSr=r(YEt,"albert"),YEt.forEach(t),_Sr=r(LBe," \u2014 "),sY=n(LBe,"A",{href:!0});var KEt=s(sY);bSr=r(KEt,"FlaxAlbertForTokenClassification"),KEt.forEach(t),vSr=r(LBe," (ALBERT model)"),LBe.forEach(t),FSr=i(Fo),N5=n(Fo,"LI",{});var xBe=s(N5);e9e=n(xBe,"STRONG",{});var ZEt=s(e9e);TSr=r(ZEt,"bert"),ZEt.forEach(t),MSr=r(xBe," \u2014 "),lY=n(xBe,"A",{href:!0});var e5t=s(lY);ESr=r(e5t,"FlaxBertForTokenClassification"),e5t.forEach(t),CSr=r(xBe," (BERT model)"),xBe.forEach(t),wSr=i(Fo),j5=n(Fo,"LI",{});var $Be=s(j5);o9e=n($Be,"STRONG",{});var o5t=s(o9e);ASr=r(o5t,"big_bird"),o5t.forEach(t),ySr=r($Be," \u2014 "),iY=n($Be,"A",{href:!0});var r5t=s(iY);LSr=r(r5t,"FlaxBigBirdForTokenClassification"),r5t.forEach(t),xSr=r($Be," (BigBird model)"),$Be.forEach(t),$Sr=i(Fo),D5=n(Fo,"LI",{});var kBe=s(D5);r9e=n(kBe,"STRONG",{});var t5t=s(r9e);kSr=r(t5t,"distilbert"),t5t.forEach(t),SSr=r(kBe," \u2014 "),dY=n(kBe,"A",{href:!0});var a5t=s(dY);RSr=r(a5t,"FlaxDistilBertForTokenClassification"),a5t.forEach(t),BSr=r(kBe," (DistilBERT model)"),kBe.forEach(t),PSr=i(Fo),G5=n(Fo,"LI",{});var SBe=s(G5);t9e=n(SBe,"STRONG",{});var n5t=s(t9e);ISr=r(n5t,"electra"),n5t.forEach(t),qSr=r(SBe," \u2014 "),cY=n(SBe,"A",{href:!0});var s5t=s(cY);NSr=r(s5t,"FlaxElectraForTokenClassification"),s5t.forEach(t),jSr=r(SBe," (ELECTRA model)"),SBe.forEach(t),DSr=i(Fo),O5=n(Fo,"LI",{});var RBe=s(O5);a9e=n(RBe,"STRONG",{});var l5t=s(a9e);GSr=r(l5t,"roberta"),l5t.forEach(t),OSr=r(RBe," \u2014 "),fY=n(RBe,"A",{href:!0});var i5t=s(fY);VSr=r(i5t,"FlaxRobertaForTokenClassification"),i5t.forEach(t),XSr=r(RBe," (RoBERTa model)"),RBe.forEach(t),zSr=i(Fo),V5=n(Fo,"LI",{});var BBe=s(V5);n9e=n(BBe,"STRONG",{});var d5t=s(n9e);QSr=r(d5t,"roformer"),d5t.forEach(t),WSr=r(BBe," \u2014 "),mY=n(BBe,"A",{href:!0});var c5t=s(mY);HSr=r(c5t,"FlaxRoFormerForTokenClassification"),c5t.forEach(t),USr=r(BBe," (RoFormer model)"),BBe.forEach(t),JSr=i(Fo),X5=n(Fo,"LI",{});var PBe=s(X5);s9e=n(PBe,"STRONG",{});var f5t=s(s9e);YSr=r(f5t,"xlm-roberta"),f5t.forEach(t),KSr=r(PBe," \u2014 "),gY=n(PBe,"A",{href:!0});var m5t=s(gY);ZSr=r(m5t,"FlaxXLMRobertaForTokenClassification"),m5t.forEach(t),eRr=r(PBe," (XLM-RoBERTa model)"),PBe.forEach(t),Fo.forEach(t),oRr=i(Kl),T(z5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),VIe=i(f),Uc=n(f,"H2",{class:!0});var YNe=s(Uc);Q5=n(YNe,"A",{id:!0,class:!0,href:!0});var g5t=s(Q5);l9e=n(g5t,"SPAN",{});var h5t=s(l9e);T(E8.$$.fragment,h5t),h5t.forEach(t),g5t.forEach(t),rRr=i(YNe),i9e=n(YNe,"SPAN",{});var p5t=s(i9e);tRr=r(p5t,"FlaxAutoModelForMultipleChoice"),p5t.forEach(t),YNe.forEach(t),XIe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(C8.$$.fragment,Zl),aRr=i(Zl),Jc=n(Zl,"P",{});var MZ=s(Jc);nRr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hY=n(MZ,"A",{href:!0});var u5t=s(hY);sRr=r(u5t,"from_pretrained()"),u5t.forEach(t),lRr=r(MZ," class method or the "),pY=n(MZ,"A",{href:!0});var _5t=s(pY);iRr=r(_5t,"from_config()"),_5t.forEach(t),dRr=r(MZ,` class
method.`),MZ.forEach(t),cRr=i(Zl),w8=n(Zl,"P",{});var KNe=s(w8);fRr=r(KNe,"This class cannot be instantiated directly using "),d9e=n(KNe,"CODE",{});var b5t=s(d9e);mRr=r(b5t,"__init__()"),b5t.forEach(t),gRr=r(KNe," (throws an error)."),KNe.forEach(t),hRr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var Aw=s(Wt);T(A8.$$.fragment,Aw),pRr=i(Aw),c9e=n(Aw,"P",{});var v5t=s(c9e);uRr=r(v5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v5t.forEach(t),_Rr=i(Aw),Yc=n(Aw,"P",{});var EZ=s(Yc);bRr=r(EZ,`Note:
Loading a model from its configuration file does `),f9e=n(EZ,"STRONG",{});var F5t=s(f9e);vRr=r(F5t,"not"),F5t.forEach(t),FRr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(EZ,"A",{href:!0});var T5t=s(uY);TRr=r(T5t,"from_pretrained()"),T5t.forEach(t),MRr=r(EZ," to load the model weights."),EZ.forEach(t),ERr=i(Aw),T(W5.$$.fragment,Aw),Aw.forEach(t),CRr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(y8.$$.fragment,ei),wRr=i(ei),m9e=n(ei,"P",{});var M5t=s(m9e);ARr=r(M5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M5t.forEach(t),yRr=i(ei),Tn=n(ei,"P",{});var yw=s(Tn);LRr=r(yw,"The model class to instantiate is selected based on the "),g9e=n(yw,"CODE",{});var E5t=s(g9e);xRr=r(E5t,"model_type"),E5t.forEach(t),$Rr=r(yw,` property of the config object (either
passed as an argument or loaded from `),h9e=n(yw,"CODE",{});var C5t=s(h9e);kRr=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),SRr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p9e=n(yw,"CODE",{});var w5t=s(p9e);RRr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),BRr=r(yw,":"),yw.forEach(t),PRr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);H5=n(To,"LI",{});var IBe=s(H5);u9e=n(IBe,"STRONG",{});var A5t=s(u9e);IRr=r(A5t,"albert"),A5t.forEach(t),qRr=r(IBe," \u2014 "),_Y=n(IBe,"A",{href:!0});var y5t=s(_Y);NRr=r(y5t,"FlaxAlbertForMultipleChoice"),y5t.forEach(t),jRr=r(IBe," (ALBERT model)"),IBe.forEach(t),DRr=i(To),U5=n(To,"LI",{});var qBe=s(U5);_9e=n(qBe,"STRONG",{});var L5t=s(_9e);GRr=r(L5t,"bert"),L5t.forEach(t),ORr=r(qBe," \u2014 "),bY=n(qBe,"A",{href:!0});var x5t=s(bY);VRr=r(x5t,"FlaxBertForMultipleChoice"),x5t.forEach(t),XRr=r(qBe," (BERT model)"),qBe.forEach(t),zRr=i(To),J5=n(To,"LI",{});var NBe=s(J5);b9e=n(NBe,"STRONG",{});var $5t=s(b9e);QRr=r($5t,"big_bird"),$5t.forEach(t),WRr=r(NBe," \u2014 "),vY=n(NBe,"A",{href:!0});var k5t=s(vY);HRr=r(k5t,"FlaxBigBirdForMultipleChoice"),k5t.forEach(t),URr=r(NBe," (BigBird model)"),NBe.forEach(t),JRr=i(To),Y5=n(To,"LI",{});var jBe=s(Y5);v9e=n(jBe,"STRONG",{});var S5t=s(v9e);YRr=r(S5t,"distilbert"),S5t.forEach(t),KRr=r(jBe," \u2014 "),FY=n(jBe,"A",{href:!0});var R5t=s(FY);ZRr=r(R5t,"FlaxDistilBertForMultipleChoice"),R5t.forEach(t),eBr=r(jBe," (DistilBERT model)"),jBe.forEach(t),oBr=i(To),K5=n(To,"LI",{});var DBe=s(K5);F9e=n(DBe,"STRONG",{});var B5t=s(F9e);rBr=r(B5t,"electra"),B5t.forEach(t),tBr=r(DBe," \u2014 "),TY=n(DBe,"A",{href:!0});var P5t=s(TY);aBr=r(P5t,"FlaxElectraForMultipleChoice"),P5t.forEach(t),nBr=r(DBe," (ELECTRA model)"),DBe.forEach(t),sBr=i(To),Z5=n(To,"LI",{});var GBe=s(Z5);T9e=n(GBe,"STRONG",{});var I5t=s(T9e);lBr=r(I5t,"roberta"),I5t.forEach(t),iBr=r(GBe," \u2014 "),MY=n(GBe,"A",{href:!0});var q5t=s(MY);dBr=r(q5t,"FlaxRobertaForMultipleChoice"),q5t.forEach(t),cBr=r(GBe," (RoBERTa model)"),GBe.forEach(t),fBr=i(To),eC=n(To,"LI",{});var OBe=s(eC);M9e=n(OBe,"STRONG",{});var N5t=s(M9e);mBr=r(N5t,"roformer"),N5t.forEach(t),gBr=r(OBe," \u2014 "),EY=n(OBe,"A",{href:!0});var j5t=s(EY);hBr=r(j5t,"FlaxRoFormerForMultipleChoice"),j5t.forEach(t),pBr=r(OBe," (RoFormer model)"),OBe.forEach(t),uBr=i(To),oC=n(To,"LI",{});var VBe=s(oC);E9e=n(VBe,"STRONG",{});var D5t=s(E9e);_Br=r(D5t,"xlm-roberta"),D5t.forEach(t),bBr=r(VBe," \u2014 "),CY=n(VBe,"A",{href:!0});var G5t=s(CY);vBr=r(G5t,"FlaxXLMRobertaForMultipleChoice"),G5t.forEach(t),FBr=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),To.forEach(t),TBr=i(ei),T(rC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),zIe=i(f),Kc=n(f,"H2",{class:!0});var ZNe=s(Kc);tC=n(ZNe,"A",{id:!0,class:!0,href:!0});var O5t=s(tC);C9e=n(O5t,"SPAN",{});var V5t=s(C9e);T(L8.$$.fragment,V5t),V5t.forEach(t),O5t.forEach(t),MBr=i(ZNe),w9e=n(ZNe,"SPAN",{});var X5t=s(w9e);EBr=r(X5t,"FlaxAutoModelForNextSentencePrediction"),X5t.forEach(t),ZNe.forEach(t),QIe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(x8.$$.fragment,oi),CBr=i(oi),Zc=n(oi,"P",{});var CZ=s(Zc);wBr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wY=n(CZ,"A",{href:!0});var z5t=s(wY);ABr=r(z5t,"from_pretrained()"),z5t.forEach(t),yBr=r(CZ," class method or the "),AY=n(CZ,"A",{href:!0});var Q5t=s(AY);LBr=r(Q5t,"from_config()"),Q5t.forEach(t),xBr=r(CZ,` class
method.`),CZ.forEach(t),$Br=i(oi),$8=n(oi,"P",{});var eje=s($8);kBr=r(eje,"This class cannot be instantiated directly using "),A9e=n(eje,"CODE",{});var W5t=s(A9e);SBr=r(W5t,"__init__()"),W5t.forEach(t),RBr=r(eje," (throws an error)."),eje.forEach(t),BBr=i(oi),Ht=n(oi,"DIV",{class:!0});var Lw=s(Ht);T(k8.$$.fragment,Lw),PBr=i(Lw),y9e=n(Lw,"P",{});var H5t=s(y9e);IBr=r(H5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),H5t.forEach(t),qBr=i(Lw),ef=n(Lw,"P",{});var wZ=s(ef);NBr=r(wZ,`Note:
Loading a model from its configuration file does `),L9e=n(wZ,"STRONG",{});var U5t=s(L9e);jBr=r(U5t,"not"),U5t.forEach(t),DBr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(wZ,"A",{href:!0});var J5t=s(yY);GBr=r(J5t,"from_pretrained()"),J5t.forEach(t),OBr=r(wZ," to load the model weights."),wZ.forEach(t),VBr=i(Lw),T(aC.$$.fragment,Lw),Lw.forEach(t),XBr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(S8.$$.fragment,ri),zBr=i(ri),x9e=n(ri,"P",{});var Y5t=s(x9e);QBr=r(Y5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Y5t.forEach(t),WBr=i(ri),Mn=n(ri,"P",{});var xw=s(Mn);HBr=r(xw,"The model class to instantiate is selected based on the "),$9e=n(xw,"CODE",{});var K5t=s($9e);UBr=r(K5t,"model_type"),K5t.forEach(t),JBr=r(xw,` property of the config object (either
passed as an argument or loaded from `),k9e=n(xw,"CODE",{});var Z5t=s(k9e);YBr=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),KBr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=n(xw,"CODE",{});var eCt=s(S9e);ZBr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),ePr=r(xw,":"),xw.forEach(t),oPr=i(ri),R9e=n(ri,"UL",{});var oCt=s(R9e);nC=n(oCt,"LI",{});var XBe=s(nC);B9e=n(XBe,"STRONG",{});var rCt=s(B9e);rPr=r(rCt,"bert"),rCt.forEach(t),tPr=r(XBe," \u2014 "),LY=n(XBe,"A",{href:!0});var tCt=s(LY);aPr=r(tCt,"FlaxBertForNextSentencePrediction"),tCt.forEach(t),nPr=r(XBe," (BERT model)"),XBe.forEach(t),oCt.forEach(t),sPr=i(ri),T(sC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),WIe=i(f),of=n(f,"H2",{class:!0});var oje=s(of);lC=n(oje,"A",{id:!0,class:!0,href:!0});var aCt=s(lC);P9e=n(aCt,"SPAN",{});var nCt=s(P9e);T(R8.$$.fragment,nCt),nCt.forEach(t),aCt.forEach(t),lPr=i(oje),I9e=n(oje,"SPAN",{});var sCt=s(I9e);iPr=r(sCt,"FlaxAutoModelForImageClassification"),sCt.forEach(t),oje.forEach(t),HIe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(B8.$$.fragment,ti),dPr=i(ti),rf=n(ti,"P",{});var AZ=s(rf);cPr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xY=n(AZ,"A",{href:!0});var lCt=s(xY);fPr=r(lCt,"from_pretrained()"),lCt.forEach(t),mPr=r(AZ," class method or the "),$Y=n(AZ,"A",{href:!0});var iCt=s($Y);gPr=r(iCt,"from_config()"),iCt.forEach(t),hPr=r(AZ,` class
method.`),AZ.forEach(t),pPr=i(ti),P8=n(ti,"P",{});var rje=s(P8);uPr=r(rje,"This class cannot be instantiated directly using "),q9e=n(rje,"CODE",{});var dCt=s(q9e);_Pr=r(dCt,"__init__()"),dCt.forEach(t),bPr=r(rje," (throws an error)."),rje.forEach(t),vPr=i(ti),Ut=n(ti,"DIV",{class:!0});var $w=s(Ut);T(I8.$$.fragment,$w),FPr=i($w),N9e=n($w,"P",{});var cCt=s(N9e);TPr=r(cCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cCt.forEach(t),MPr=i($w),tf=n($w,"P",{});var yZ=s(tf);EPr=r(yZ,`Note:
Loading a model from its configuration file does `),j9e=n(yZ,"STRONG",{});var fCt=s(j9e);CPr=r(fCt,"not"),fCt.forEach(t),wPr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(yZ,"A",{href:!0});var mCt=s(kY);APr=r(mCt,"from_pretrained()"),mCt.forEach(t),yPr=r(yZ," to load the model weights."),yZ.forEach(t),LPr=i($w),T(iC.$$.fragment,$w),$w.forEach(t),xPr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(q8.$$.fragment,ai),$Pr=i(ai),D9e=n(ai,"P",{});var gCt=s(D9e);kPr=r(gCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gCt.forEach(t),SPr=i(ai),En=n(ai,"P",{});var kw=s(En);RPr=r(kw,"The model class to instantiate is selected based on the "),G9e=n(kw,"CODE",{});var hCt=s(G9e);BPr=r(hCt,"model_type"),hCt.forEach(t),PPr=r(kw,` property of the config object (either
passed as an argument or loaded from `),O9e=n(kw,"CODE",{});var pCt=s(O9e);IPr=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),qPr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V9e=n(kw,"CODE",{});var uCt=s(V9e);NPr=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),jPr=r(kw,":"),kw.forEach(t),DPr=i(ai),N8=n(ai,"UL",{});var tje=s(N8);dC=n(tje,"LI",{});var zBe=s(dC);X9e=n(zBe,"STRONG",{});var _Ct=s(X9e);GPr=r(_Ct,"beit"),_Ct.forEach(t),OPr=r(zBe," \u2014 "),SY=n(zBe,"A",{href:!0});var bCt=s(SY);VPr=r(bCt,"FlaxBeitForImageClassification"),bCt.forEach(t),XPr=r(zBe," (BEiT model)"),zBe.forEach(t),zPr=i(tje),cC=n(tje,"LI",{});var QBe=s(cC);z9e=n(QBe,"STRONG",{});var vCt=s(z9e);QPr=r(vCt,"vit"),vCt.forEach(t),WPr=r(QBe," \u2014 "),RY=n(QBe,"A",{href:!0});var FCt=s(RY);HPr=r(FCt,"FlaxViTForImageClassification"),FCt.forEach(t),UPr=r(QBe," (ViT model)"),QBe.forEach(t),tje.forEach(t),JPr=i(ai),T(fC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),UIe=i(f),af=n(f,"H2",{class:!0});var aje=s(af);mC=n(aje,"A",{id:!0,class:!0,href:!0});var TCt=s(mC);Q9e=n(TCt,"SPAN",{});var MCt=s(Q9e);T(j8.$$.fragment,MCt),MCt.forEach(t),TCt.forEach(t),YPr=i(aje),W9e=n(aje,"SPAN",{});var ECt=s(W9e);KPr=r(ECt,"FlaxAutoModelForVision2Seq"),ECt.forEach(t),aje.forEach(t),JIe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(D8.$$.fragment,ni),ZPr=i(ni),nf=n(ni,"P",{});var LZ=s(nf);eIr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BY=n(LZ,"A",{href:!0});var CCt=s(BY);oIr=r(CCt,"from_pretrained()"),CCt.forEach(t),rIr=r(LZ," class method or the "),PY=n(LZ,"A",{href:!0});var wCt=s(PY);tIr=r(wCt,"from_config()"),wCt.forEach(t),aIr=r(LZ,` class
method.`),LZ.forEach(t),nIr=i(ni),G8=n(ni,"P",{});var nje=s(G8);sIr=r(nje,"This class cannot be instantiated directly using "),H9e=n(nje,"CODE",{});var ACt=s(H9e);lIr=r(ACt,"__init__()"),ACt.forEach(t),iIr=r(nje," (throws an error)."),nje.forEach(t),dIr=i(ni),Jt=n(ni,"DIV",{class:!0});var Sw=s(Jt);T(O8.$$.fragment,Sw),cIr=i(Sw),U9e=n(Sw,"P",{});var yCt=s(U9e);fIr=r(yCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yCt.forEach(t),mIr=i(Sw),sf=n(Sw,"P",{});var xZ=s(sf);gIr=r(xZ,`Note:
Loading a model from its configuration file does `),J9e=n(xZ,"STRONG",{});var LCt=s(J9e);hIr=r(LCt,"not"),LCt.forEach(t),pIr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(xZ,"A",{href:!0});var xCt=s(IY);uIr=r(xCt,"from_pretrained()"),xCt.forEach(t),_Ir=r(xZ," to load the model weights."),xZ.forEach(t),bIr=i(Sw),T(gC.$$.fragment,Sw),Sw.forEach(t),vIr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(V8.$$.fragment,si),FIr=i(si),Y9e=n(si,"P",{});var $Ct=s(Y9e);TIr=r($Ct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Ct.forEach(t),MIr=i(si),Cn=n(si,"P",{});var Rw=s(Cn);EIr=r(Rw,"The model class to instantiate is selected based on the "),K9e=n(Rw,"CODE",{});var kCt=s(K9e);CIr=r(kCt,"model_type"),kCt.forEach(t),wIr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Z9e=n(Rw,"CODE",{});var SCt=s(Z9e);AIr=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),yIr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n(Rw,"CODE",{});var RCt=s(eMe);LIr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),xIr=r(Rw,":"),Rw.forEach(t),$Ir=i(si),oMe=n(si,"UL",{});var BCt=s(oMe);hC=n(BCt,"LI",{});var WBe=s(hC);rMe=n(WBe,"STRONG",{});var PCt=s(rMe);kIr=r(PCt,"vision-encoder-decoder"),PCt.forEach(t),SIr=r(WBe," \u2014 "),qY=n(WBe,"A",{href:!0});var ICt=s(qY);RIr=r(ICt,"FlaxVisionEncoderDecoderModel"),ICt.forEach(t),BIr=r(WBe," (Vision Encoder decoder model)"),WBe.forEach(t),BCt.forEach(t),PIr=i(si),T(pC.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Dwt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertModel"),c(pf,"id","extending-the-auto-classes"),c(pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(_f,"id","transformers.AutoConfig"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(i$,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(d$,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertConfig"),c(c$,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig"),c(f$,"href","/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitConfig"),c(m$,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertConfig"),c(g$,"href","/docs/transformers/pr_17029/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(h$,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdConfig"),c(p$,"href","/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(u$,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(_$,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(b$,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertConfig"),c(v$,"href","/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineConfig"),c(F$,"href","/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPConfig"),c(T$,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertConfig"),c(M$,"href","/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextConfig"),c(E$,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLConfig"),c(C$,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(w$,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(A$,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(y$,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaConfig"),c(L$,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(x$,"href","/docs/transformers/pr_17029/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($$,"href","/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTConfig"),c(k$,"href","/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrConfig"),c(S$,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertConfig"),c(R$,"href","/docs/transformers/pr_17029/en/model_doc/dpr#transformers.DPRConfig"),c(B$,"href","/docs/transformers/pr_17029/en/model_doc/dpt#transformers.DPTConfig"),c(P$,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraConfig"),c(I$,"href","/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(q$,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertConfig"),c(N$,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetConfig"),c(j$,"href","/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTConfig"),c(D$,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelConfig"),c(G$,"href","/docs/transformers/pr_17029/en/model_doc/glpn#transformers.GLPNConfig"),c(O$,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Config"),c(V$,"href","/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(X$,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJConfig"),c(z$,"href","/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertConfig"),c(Q$,"href","/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertConfig"),c(W$,"href","/docs/transformers/pr_17029/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(H$,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(U$,"href","/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(J$,"href","/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDConfig"),c(Y$,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerConfig"),c(K$,"href","/docs/transformers/pr_17029/en/model_doc/luke#transformers.LukeConfig"),c(Z$,"href","/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertConfig"),c(ek,"href","/docs/transformers/pr_17029/en/model_doc/m2m_100#transformers.M2M100Config"),c(ok,"href","/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianConfig"),c(rk,"href","/docs/transformers/pr_17029/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(tk,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartConfig"),c(ak,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(nk,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(sk,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetConfig"),c(lk,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Config"),c(ik,"href","/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(dk,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(ck,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusConfig"),c(fk,"href","/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverConfig"),c(mk,"href","/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartConfig"),c(gk,"href","/docs/transformers/pr_17029/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hk,"href","/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(pk,"href","/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(uk,"href","/docs/transformers/pr_17029/en/model_doc/rag#transformers.RagConfig"),c(_k,"href","/docs/transformers/pr_17029/en/model_doc/realm#transformers.RealmConfig"),c(bk,"href","/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerConfig"),c(vk,"href","/docs/transformers/pr_17029/en/model_doc/regnet#transformers.RegNetConfig"),c(Fk,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertConfig"),c(Tk,"href","/docs/transformers/pr_17029/en/model_doc/resnet#transformers.ResNetConfig"),c(Mk,"href","/docs/transformers/pr_17029/en/model_doc/retribert#transformers.RetriBertConfig"),c(Ek,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaConfig"),c(Ck,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerConfig"),c(wk,"href","/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerConfig"),c(Ak,"href","/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWConfig"),c(yk,"href","/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDConfig"),c(Lk,"href","/docs/transformers/pr_17029/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xk,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($k,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kk,"href","/docs/transformers/pr_17029/en/model_doc/splinter#transformers.SplinterConfig"),c(Sk,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Rk,"href","/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinConfig"),c(Bk,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Config"),c(Pk,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasConfig"),c(Ik,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartConfig"),c(qk,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Nk,"href","/docs/transformers/pr_17029/en/model_doc/trocr#transformers.TrOCRConfig"),c(jk,"href","/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Dk,"href","/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Gk,"href","/docs/transformers/pr_17029/en/model_doc/van#transformers.VanConfig"),c(Ok,"href","/docs/transformers/pr_17029/en/model_doc/vilt#transformers.ViltConfig"),c(Vk,"href","/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Xk,"href","/docs/transformers/pr_17029/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(zk,"href","/docs/transformers/pr_17029/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Qk,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTConfig"),c(Wk,"href","/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Hk,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Uk,"href","/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMConfig"),c(Jk,"href","/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMConfig"),c(Yk,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMConfig"),c(Kk,"href","/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Zk,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(eS,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(oS,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetConfig"),c(rS,"href","/docs/transformers/pr_17029/en/model_doc/yolos#transformers.YolosConfig"),c(tS,"href","/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pg,"id","transformers.AutoTokenizer"),c(pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(aS,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(nS,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertTokenizer"),c(sS,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lS,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartTokenizer"),c(iS,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartTokenizerFast"),c(dS,"href","/docs/transformers/pr_17029/en/model_doc/barthez#transformers.BarthezTokenizer"),c(cS,"href","/docs/transformers/pr_17029/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(fS,"href","/docs/transformers/pr_17029/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(mS,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertTokenizer"),c(gS,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertTokenizerFast"),c(hS,"href","/docs/transformers/pr_17029/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(pS,"href","/docs/transformers/pr_17029/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(uS,"href","/docs/transformers/pr_17029/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(_S,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(bS,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(vS,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FS,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TS,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(MS,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(ES,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(CS,"href","/docs/transformers/pr_17029/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(wS,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertTokenizer"),c(AS,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(yS,"href","/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineTokenizer"),c(LS,"href","/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPTokenizer"),c(xS,"href","/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($S,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(kS,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(SS,"href","/docs/transformers/pr_17029/en/model_doc/cpm#transformers.CpmTokenizer"),c(RS,"href","/docs/transformers/pr_17029/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(BS,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(PS,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IS,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qS,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaTokenizer"),c(NS,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(jS,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(DS,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(GS,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(OS,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(VS,"href","/docs/transformers/pr_17029/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(XS,"href","/docs/transformers/pr_17029/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(zS,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraTokenizer"),c(QS,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(WS,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(HS,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetTokenizer"),c(US,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(JS,"href","/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(YS,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelTokenizer"),c(KS,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eR,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oR,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rR,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tR,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aR,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nR,"href","/docs/transformers/pr_17029/en/model_doc/herbert#transformers.HerbertTokenizer"),c(sR,"href","/docs/transformers/pr_17029/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(lR,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iR,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dR,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cR,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(fR,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(mR,"href","/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(gR,"href","/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(hR,"href","/docs/transformers/pr_17029/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(pR,"href","/docs/transformers/pr_17029/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(uR,"href","/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDTokenizer"),c(_R,"href","/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDTokenizerFast"),c(bR,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerTokenizer"),c(vR,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(FR,"href","/docs/transformers/pr_17029/en/model_doc/luke#transformers.LukeTokenizer"),c(TR,"href","/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(MR,"href","/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(ER,"href","/docs/transformers/pr_17029/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(CR,"href","/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianTokenizer"),c(wR,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartTokenizer"),c(AR,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(yR,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(LR,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(xR,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertTokenizer"),c($R,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertTokenizerFast"),c(kR,"href","/docs/transformers/pr_17029/en/model_doc/mluke#transformers.MLukeTokenizer"),c(SR,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(RR,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(BR,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(PR,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(IR,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.T5Tokenizer"),c(qR,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.T5TokenizerFast"),c(NR,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertTokenizer"),c(jR,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(GR,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(OR,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(VR,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(XR,"href","/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(zR,"href","/docs/transformers/pr_17029/en/model_doc/phobert#transformers.PhobertTokenizer"),c(QR,"href","/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartTokenizer"),c(WR,"href","/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(HR,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertTokenizer"),c(UR,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17029/en/model_doc/rag#transformers.RagTokenizer"),c(YR,"href","/docs/transformers/pr_17029/en/model_doc/realm#transformers.RealmTokenizer"),c(KR,"href","/docs/transformers/pr_17029/en/model_doc/realm#transformers.RealmTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerTokenizer"),c(eB,"href","/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(oB,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertTokenizer"),c(rB,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17029/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(aB,"href","/docs/transformers/pr_17029/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sB,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lB,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(iB,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(dB,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(cB,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(fB,"href","/docs/transformers/pr_17029/en/model_doc/splinter#transformers.SplinterTokenizer"),c(mB,"href","/docs/transformers/pr_17029/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(gB,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(hB,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.T5Tokenizer"),c(uB,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.T5TokenizerFast"),c(_B,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasTokenizer"),c(bB,"href","/docs/transformers/pr_17029/en/model_doc/tapex#transformers.TapexTokenizer"),c(vB,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(FB,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertTokenizer"),c(TB,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertTokenizerFast"),c(MB,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(EB,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(CB,"href","/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMTokenizer"),c(wB,"href","/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(AB,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMTokenizer"),c(yB,"href","/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(LB,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(xB,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c($B,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(RB,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(BB,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertTokenizer"),c(PB,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"id","transformers.AutoFeatureExtractor"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(IB,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(qB,"href","/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(GB,"href","/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17029/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17029/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WB,"href","/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(HB,"href","/docs/transformers/pr_17029/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17029/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(eP,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rP,"href","/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sP,"href","/docs/transformers/pr_17029/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"id","transformers.AutoProcessor"),c(Th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Th,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(lP,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(iP,"href","/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPProcessor"),c(dP,"href","/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(cP,"href","/docs/transformers/pr_17029/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(fP,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mP,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gP,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(hP,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(pP,"href","/docs/transformers/pr_17029/en/model_doc/trocr#transformers.TrOCRProcessor"),c(uP,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_P,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bP,"href","/docs/transformers/pr_17029/en/model_doc/vilt#transformers.ViltProcessor"),c(vP,"href","/docs/transformers/pr_17029/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(FP,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TP,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoModel"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(MP,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EP,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CP,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wP,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertModel"),c(AP,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartModel"),c(yP,"href","/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitModel"),c(LP,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertModel"),c(xP,"href","/docs/transformers/pr_17029/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c($P,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdModel"),c(kP,"href","/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(SP,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(RP,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(BP,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertModel"),c(PP,"href","/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineModel"),c(IP,"href","/docs/transformers/pr_17029/en/model_doc/clip#transformers.CLIPModel"),c(qP,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertModel"),c(NP,"href","/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextModel"),c(jP,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLModel"),c(DP,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(GP,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(OP,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(VP,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaModel"),c(XP,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(zP,"href","/docs/transformers/pr_17029/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(QP,"href","/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTModel"),c(WP,"href","/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrModel"),c(HP,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertModel"),c(UP,"href","/docs/transformers/pr_17029/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(JP,"href","/docs/transformers/pr_17029/en/model_doc/dpt#transformers.DPTModel"),c(YP,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraModel"),c(KP,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertModel"),c(ZP,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetModel"),c(eI,"href","/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTModel"),c(oI,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelModel"),c(rI,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelBaseModel"),c(tI,"href","/docs/transformers/pr_17029/en/model_doc/glpn#transformers.GLPNModel"),c(aI,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2Model"),c(nI,"href","/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(sI,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJModel"),c(lI,"href","/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertModel"),c(iI,"href","/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertModel"),c(dI,"href","/docs/transformers/pr_17029/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(cI,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(fI,"href","/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(mI,"href","/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDModel"),c(gI,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerModel"),c(hI,"href","/docs/transformers/pr_17029/en/model_doc/luke#transformers.LukeModel"),c(pI,"href","/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertModel"),c(uI,"href","/docs/transformers/pr_17029/en/model_doc/m2m_100#transformers.M2M100Model"),c(_I,"href","/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianModel"),c(bI,"href","/docs/transformers/pr_17029/en/model_doc/maskformer#transformers.MaskFormerModel"),c(vI,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartModel"),c(FI,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(TI,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertModel"),c(MI,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetModel"),c(EI,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5Model"),c(CI,"href","/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerModel"),c(wI,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(AI,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusModel"),c(yI,"href","/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverModel"),c(LI,"href","/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartModel"),c(xI,"href","/docs/transformers/pr_17029/en/model_doc/poolformer#transformers.PoolFormerModel"),c($I,"href","/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(kI,"href","/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertModel"),c(SI,"href","/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerModel"),c(RI,"href","/docs/transformers/pr_17029/en/model_doc/regnet#transformers.RegNetModel"),c(BI,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertModel"),c(PI,"href","/docs/transformers/pr_17029/en/model_doc/resnet#transformers.ResNetModel"),c(II,"href","/docs/transformers/pr_17029/en/model_doc/retribert#transformers.RetriBertModel"),c(qI,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaModel"),c(NI,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerModel"),c(jI,"href","/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerModel"),c(DI,"href","/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWModel"),c(GI,"href","/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDModel"),c(OI,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(VI,"href","/docs/transformers/pr_17029/en/model_doc/splinter#transformers.SplinterModel"),c(XI,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(zI,"href","/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinModel"),c(QI,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5Model"),c(WI,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasModel"),c(HI,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(UI,"href","/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechModel"),c(JI,"href","/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(YI,"href","/docs/transformers/pr_17029/en/model_doc/van#transformers.VanModel"),c(KI,"href","/docs/transformers/pr_17029/en/model_doc/vilt#transformers.ViltModel"),c(ZI,"href","/docs/transformers/pr_17029/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(eq,"href","/docs/transformers/pr_17029/en/model_doc/visual_bert#transformers.VisualBertModel"),c(oq,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTModel"),c(rq,"href","/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(tq,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(aq,"href","/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMModel"),c(nq,"href","/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMModel"),c(sq,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMModel"),c(lq,"href","/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(iq,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(dq,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(cq,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetModel"),c(fq,"href","/docs/transformers/pr_17029/en/model_doc/yolos#transformers.YolosModel"),c(mq,"href","/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xu,"id","transformers.AutoModelForPreTraining"),c(xu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xu,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(gq,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hq,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pq,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uq,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForPreTraining"),c(_q,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bq,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForPreTraining"),c(vq,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Fq,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Tq,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Mq,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Eq,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Cq,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(wq,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Aq,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForPreTraining"),c(yq,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Lq,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForPreTraining"),c(xq,"href","/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c($q,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(kq,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Sq,"href","/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Rq,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Bq,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Pq,"href","/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Iq,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(qq,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Nq,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(jq,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Dq,"href","/docs/transformers/pr_17029/en/model_doc/retribert#transformers.RetriBertModel"),c(Gq,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Xq,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zq,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Qq,"href","/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Wq,"href","/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Hq,"href","/docs/transformers/pr_17029/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Uq,"href","/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Jq,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Yq,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Kq,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eN,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b_,"id","transformers.AutoModelForCausalLM"),c(b_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(oN,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rN,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tN,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aN,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForCausalLM"),c(nN,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertLMHeadModel"),c(sN,"href","/docs/transformers/pr_17029/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(lN,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(iN,"href","/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(dN,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(cN,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(fN,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(mN,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(gN,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(hN,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForCausalLM"),c(pN,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uN,"href","/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(_N,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(bN,"href","/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianForCausalLM"),c(vN,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForCausalLM"),c(FN,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(TN,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(MN,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(EN,"href","/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(CN,"href","/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(wN,"href","/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(AN,"href","/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(yN,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(LN,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(xN,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c($N,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(kN,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SN,"href","/docs/transformers/pr_17029/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(RN,"href","/docs/transformers/pr_17029/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(BN,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PN,"href","/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(IN,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(qN,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(NN,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t2,"id","transformers.AutoModelForMaskedLM"),c(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t2,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(jN,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DN,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GN,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ON,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(VN,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(XN,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForMaskedLM"),c(zN,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(QN,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(WN,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(UN,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(JN,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(YN,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(KN,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(ZN,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ej,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(oj,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(rj,"href","/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tj,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aj,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nj,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ij,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dj,"href","/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(cj,"href","/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(fj,"href","/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(mj,"href","/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(gj,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pj,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(uj,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bj,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vj,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O2,"id","transformers.AutoModelForSeq2SeqLM"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Mj,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Aj,"href","/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Lj,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(xj,"href","/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c($j,"href","/docs/transformers/pr_17029/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_17029/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_17029/en/model_doc/marian#transformers.MarianMTModel"),c(Bj,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Pj,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Ij,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(qj,"href","/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_17029/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_17029/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d1,"id","transformers.AutoModelForSequenceClassification"),c(d1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(Oj,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vj,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xj,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zj,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(eD,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(oD,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(rD,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17029/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sb,"id","transformers.AutoModelForMultipleChoice"),c(sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(ND,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jD,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DD,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GD,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(OD,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForMultipleChoice"),c(VD,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(XD,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(zD,"href","/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(QD,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(WD,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(HD,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(UD,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(JD,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(YD,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(KD,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(eG,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(oG,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nb,"id","transformers.AutoModelForNextSentencePrediction"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(pG,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uG,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_G,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bG,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(vG,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(FG,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(TG,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(MG,"href","/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForTokenClassification"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(EG,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CG,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wG,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AG,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(yG,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForTokenClassification"),c(LG,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(xG,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c($G,"href","/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineForTokenClassification"),c(kG,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(SG,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(RG,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(BG,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(PG,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(IG,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(qG,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(NG,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(jG,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(DG,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(GG,"href","/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(OG,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(VG,"href","/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(XG,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(zG,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(QG,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(WG,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(HG,"href","/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(UG,"href","/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(JG,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(YG,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(KG,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(eO,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(oO,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(rO,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(tO,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(aO,"href","/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForQuestionAnswering"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(nO,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_17029/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_17029/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(MO,"href","/docs/transformers/pr_17029/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17029/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17029/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17029/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17029/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17029/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17029/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17029/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17029/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17029/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(VO,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(QO,"href","/docs/transformers/pr_17029/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForTableQuestionAnswering"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(WO,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForImageClassification"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(YO,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitForImageClassification"),c(oV,"href","/docs/transformers/pr_17029/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(rV,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(tV,"href","/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTForImageClassification"),c(aV,"href","/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(nV,"href","/docs/transformers/pr_17029/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(sV,"href","/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(lV,"href","/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(iV,"href","/docs/transformers/pr_17029/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(dV,"href","/docs/transformers/pr_17029/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(cV,"href","/docs/transformers/pr_17029/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(fV,"href","/docs/transformers/pr_17029/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(mV,"href","/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(gV,"href","/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinForImageClassification"),c(hV,"href","/docs/transformers/pr_17029/en/model_doc/van#transformers.VanForImageClassification"),c(pV,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForVision2Seq"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(uV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_V,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vV,"href","/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForAudioClassification"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(FV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c($V,"href","/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.AutoModelForAudioFrameClassification"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(kV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(PV,"href","/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(IV,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(qV,"href","/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.AutoModelForCTC"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(NV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(OV,"href","/docs/transformers/pr_17029/en/model_doc/hubert#transformers.HubertForCTC"),c(VV,"href","/docs/transformers/pr_17029/en/model_doc/sew#transformers.SEWForCTC"),c(XV,"href","/docs/transformers/pr_17029/en/model_doc/sew-d#transformers.SEWDForCTC"),c(zV,"href","/docs/transformers/pr_17029/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(QV,"href","/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(WV,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(HV,"href","/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(UV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17029/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(ZV,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.AutoModelForAudioXVector"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(eX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(aX,"href","/docs/transformers/pr_17029/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(nX,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(sX,"href","/docs/transformers/pr_17029/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.AutoModelForMaskedImageModeling"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(lX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cX,"href","/docs/transformers/pr_17029/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(fX,"href","/docs/transformers/pr_17029/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(mX,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.AutoModelForObjectDetection"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(gX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrForObjectDetection"),c(_X,"href","/docs/transformers/pr_17029/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.AutoModelForImageSegmentation"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(bX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17029/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForSemanticSegmentation"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(MX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17029/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(AX,"href","/docs/transformers/pr_17029/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(yX,"href","/docs/transformers/pr_17029/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(LX,"href","/docs/transformers/pr_17029/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForInstanceSegmentation"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(xX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($X,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SX,"href","/docs/transformers/pr_17029/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.TFAutoModel"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(RX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertModel"),c(qX,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.TFBartModel"),c(NX,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertModel"),c(jX,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(DX,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(GX,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertModel"),c(OX,"href","/docs/transformers/pr_17029/en/model_doc/clip#transformers.TFCLIPModel"),c(VX,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertModel"),c(XX,"href","/docs/transformers/pr_17029/en/model_doc/convnext#transformers.TFConvNextModel"),c(zX,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.TFCTRLModel"),c(QX,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaModel"),c(WX,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(HX,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(UX,"href","/docs/transformers/pr_17029/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(JX,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraModel"),c(YX,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(KX,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelModel"),c(ZX,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(ez,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.TFGPT2Model"),c(oz,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.TFGPTJModel"),c(rz,"href","/docs/transformers/pr_17029/en/model_doc/hubert#transformers.TFHubertModel"),c(tz,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(az,"href","/docs/transformers/pr_17029/en/model_doc/led#transformers.TFLEDModel"),c(nz,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerModel"),c(sz,"href","/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.TFLxmertModel"),c(lz,"href","/docs/transformers/pr_17029/en/model_doc/marian#transformers.TFMarianModel"),c(iz,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.TFMBartModel"),c(dz,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(cz,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetModel"),c(fz,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.TFMT5Model"),c(mz,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(gz,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.TFPegasusModel"),c(hz,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertModel"),c(pz,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaModel"),c(uz,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerModel"),c(_z,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(bz,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.TFT5Model"),c(vz,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasModel"),c(Fz,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Tz,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.TFViTModel"),c(Mz,"href","/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Ez,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Cz,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMModel"),c(wz,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Az,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.TFAutoModelForPreTraining"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(yz,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(kz,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Sz,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Rz,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Bz,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Pz,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Iz,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(qz,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Nz,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(jz,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Dz,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Gz,"href","/docs/transformers/pr_17029/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Oz,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Vz,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Xz,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zz,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Qz,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Wz,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Hz,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Uz,"href","/docs/transformers/pr_17029/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Jz,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Yz,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Kz,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.TFAutoModelForCausalLM"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(Zz,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(tQ,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(aQ,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sQ,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(lQ,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(dQ,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(cQ,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(fQ,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(mQ,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.TFAutoModelForImageClassification"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(hQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/pr_17029/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(bQ,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.TFAutoModelForMaskedLM"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.TFAutoModelForMaskedLM"),c(Ud,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c($Q,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GQ,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(F9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Kd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(QQ,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(UQ,"href","/docs/transformers/pr_17029/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_17029/en/model_doc/marian#transformers.TFMarianMTModel"),c(YQ,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(ZQ,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(eW,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R9,"id","transformers.TFAutoModelForSequenceClassification"),c(R9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R9,"href","#transformers.TFAutoModelForSequenceClassification"),c(oc,"class","relative group"),c(oW,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17029/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17029/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17029/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.TFAutoModelForMultipleChoice"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ac,"class","relative group"),c($W,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kW,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SW,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RW,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(BW,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(PW,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(IW,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(qW,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(NW,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(jW,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(DW,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(GW,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(OW,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(XW,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(zW,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(QW,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(WW,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(HW,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(UW,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(lc,"class","relative group"),c(JW,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(eH,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(cc,"class","relative group"),c(oH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_17029/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForTokenClassification"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForTokenClassification"),c(gc,"class","relative group"),c(nH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(dH,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(cH,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(fH,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(mH,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(gH,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(hH,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(pH,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(uH,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(_H,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(bH,"href","/docs/transformers/pr_17029/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(vH,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(FH,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(TH,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(MH,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(EH,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(CH,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(wH,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(AH,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(yH,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.TFAutoModelForQuestionAnswering"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(uc,"class","relative group"),c(LH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(SH,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(RH,"href","/docs/transformers/pr_17029/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(BH,"href","/docs/transformers/pr_17029/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(PH,"href","/docs/transformers/pr_17029/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(IH,"href","/docs/transformers/pr_17029/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(qH,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(NH,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(jH,"href","/docs/transformers/pr_17029/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(DH,"href","/docs/transformers/pr_17029/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(GH,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(OH,"href","/docs/transformers/pr_17029/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(VH,"href","/docs/transformers/pr_17029/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(XH,"href","/docs/transformers/pr_17029/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(zH,"href","/docs/transformers/pr_17029/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(QH,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(WH,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_17029/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(UH,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_17029/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.TFAutoModelForVision2Seq"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.TFAutoModelForVision2Seq"),c(vc,"class","relative group"),c(YH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Mc,"class","relative group"),c(oU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_17029/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.FlaxAutoModel"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.FlaxAutoModel"),c(wc,"class","relative group"),c(nU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertModel"),c(dU,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartModel"),c(cU,"href","/docs/transformers/pr_17029/en/model_doc/beit#transformers.FlaxBeitModel"),c(fU,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertModel"),c(mU,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(gU,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(hU,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(pU,"href","/docs/transformers/pr_17029/en/model_doc/clip#transformers.FlaxCLIPModel"),c(uU,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(_U,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraModel"),c(bU,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(vU,"href","/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(FU,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(TU,"href","/docs/transformers/pr_17029/en/model_doc/marian#transformers.FlaxMarianModel"),c(MU,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartModel"),c(EU,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.FlaxMT5Model"),c(CU,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(wU,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(AU,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(yU,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.FlaxT5Model"),c(LU,"href","/docs/transformers/pr_17029/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(xU,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.FlaxViTModel"),c($U,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(kU,"href","/docs/transformers/pr_17029/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(SU,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.FlaxAutoModelForCausalLM"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Lc,"class","relative group"),c(RU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IU,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(qU,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(NU,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(jU,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(DU,"href","/docs/transformers/pr_17029/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(GU,"href","/docs/transformers/pr_17029/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(OU,"href","/docs/transformers/pr_17029/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(VU,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(XU,"href","/docs/transformers/pr_17029/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.FlaxAutoModelForPreTraining"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.FlaxAutoModelForPreTraining"),c(kc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(UU,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JU,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(YU,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(KU,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ZU,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(rJ,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(tJ,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_17029/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(nJ,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.FlaxAutoModelForMaskedLM"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Bc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(cJ,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(mJ,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(gJ,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(hJ,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(_J,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(qc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_17029/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_17029/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(AJ,"href","/docs/transformers/pr_17029/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(yJ,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_17029/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_17029/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c($J,"href","/docs/transformers/pr_17029/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Dc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Vc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17029/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(ZJ,"href","/docs/transformers/pr_17029/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(rY,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForTokenClassification"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Qc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(lY,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(iY,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(dY,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(cY,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(fY,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(mY,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(gY,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Uc,"class","relative group"),c(hY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17029/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(bY,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(vY,"href","/docs/transformers/pr_17029/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(FY,"href","/docs/transformers/pr_17029/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(TY,"href","/docs/transformers/pr_17029/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(MY,"href","/docs/transformers/pr_17029/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(EY,"href","/docs/transformers/pr_17029/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(CY,"href","/docs/transformers/pr_17029/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Kc,"class","relative group"),c(wY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_17029/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.FlaxAutoModelForImageClassification"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModelForImageClassification"),c(of,"class","relative group"),c(xY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_17029/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(RY,"href","/docs/transformers/pr_17029/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModelForVision2Seq"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(af,"class","relative group"),c(BY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/pr_17029/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17029/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,ff,_),b(f,et,_),e(et,ii),e(et,di),e(di,Bw),e(et,mf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,Pw),e(Xe,yn),e(Xe,Ln),e(Ln,Iw),e(Xe,fi),e(Xe,xn),e(xn,qw),e(Xe,mi),b(f,gf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,r$),e(Ae,gi),e(gi,t$),e(Ae,a$),b(f,Eo,_),b(f,Ea,_),e(Ea,n$),e(Ea,hf),e(hf,s$),e(Ea,sje),b(f,HBe,_),b(f,hi,_),e(hi,pf),e(pf,$Z),M(Nw,$Z,null),e(hi,lje),e(hi,kZ),e(kZ,ije),b(f,UBe,_),b(f,$n,_),e($n,dje),e($n,SZ),e(SZ,cje),e($n,fje),e($n,RZ),e(RZ,mje),e($n,gje),b(f,JBe,_),M(jw,f,_),b(f,YBe,_),b(f,l$,_),e(l$,hje),b(f,KBe,_),M(uf,f,_),b(f,ZBe,_),b(f,pi,_),e(pi,_f),e(_f,BZ),M(Dw,BZ,null),e(pi,pje),e(pi,PZ),e(PZ,uje),b(f,ePe,_),b(f,Co,_),M(Gw,Co,null),e(Co,_je),e(Co,Ow),e(Ow,bje),e(Ow,i$),e(i$,vje),e(Ow,Fje),e(Co,Tje),e(Co,Vw),e(Vw,Mje),e(Vw,IZ),e(IZ,Eje),e(Vw,Cje),e(Co,wje),e(Co,Er),M(Xw,Er,null),e(Er,Aje),e(Er,qZ),e(qZ,yje),e(Er,Lje),e(Er,ui),e(ui,xje),e(ui,NZ),e(NZ,$je),e(ui,kje),e(ui,jZ),e(jZ,Sje),e(ui,Rje),e(Er,Bje),e(Er,y),e(y,bf),e(bf,DZ),e(DZ,Pje),e(bf,Ije),e(bf,d$),e(d$,qje),e(bf,Nje),e(y,jje),e(y,vf),e(vf,GZ),e(GZ,Dje),e(vf,Gje),e(vf,c$),e(c$,Oje),e(vf,Vje),e(y,Xje),e(y,Ff),e(Ff,OZ),e(OZ,zje),e(Ff,Qje),e(Ff,f$),e(f$,Wje),e(Ff,Hje),e(y,Uje),e(y,Tf),e(Tf,VZ),e(VZ,Jje),e(Tf,Yje),e(Tf,m$),e(m$,Kje),e(Tf,Zje),e(y,eDe),e(y,Mf),e(Mf,XZ),e(XZ,oDe),e(Mf,rDe),e(Mf,g$),e(g$,tDe),e(Mf,aDe),e(y,nDe),e(y,Ef),e(Ef,zZ),e(zZ,sDe),e(Ef,lDe),e(Ef,h$),e(h$,iDe),e(Ef,dDe),e(y,cDe),e(y,Cf),e(Cf,QZ),e(QZ,fDe),e(Cf,mDe),e(Cf,p$),e(p$,gDe),e(Cf,hDe),e(y,pDe),e(y,wf),e(wf,WZ),e(WZ,uDe),e(wf,_De),e(wf,u$),e(u$,bDe),e(wf,vDe),e(y,FDe),e(y,Af),e(Af,HZ),e(HZ,TDe),e(Af,MDe),e(Af,_$),e(_$,EDe),e(Af,CDe),e(y,wDe),e(y,yf),e(yf,UZ),e(UZ,ADe),e(yf,yDe),e(yf,b$),e(b$,LDe),e(yf,xDe),e(y,$De),e(y,Lf),e(Lf,JZ),e(JZ,kDe),e(Lf,SDe),e(Lf,v$),e(v$,RDe),e(Lf,BDe),e(y,PDe),e(y,xf),e(xf,YZ),e(YZ,IDe),e(xf,qDe),e(xf,F$),e(F$,NDe),e(xf,jDe),e(y,DDe),e(y,$f),e($f,KZ),e(KZ,GDe),e($f,ODe),e($f,T$),e(T$,VDe),e($f,XDe),e(y,zDe),e(y,kf),e(kf,ZZ),e(ZZ,QDe),e(kf,WDe),e(kf,M$),e(M$,HDe),e(kf,UDe),e(y,JDe),e(y,Sf),e(Sf,eee),e(eee,YDe),e(Sf,KDe),e(Sf,E$),e(E$,ZDe),e(Sf,eGe),e(y,oGe),e(y,Rf),e(Rf,oee),e(oee,rGe),e(Rf,tGe),e(Rf,C$),e(C$,aGe),e(Rf,nGe),e(y,sGe),e(y,Bf),e(Bf,ree),e(ree,lGe),e(Bf,iGe),e(Bf,w$),e(w$,dGe),e(Bf,cGe),e(y,fGe),e(y,Pf),e(Pf,tee),e(tee,mGe),e(Pf,gGe),e(Pf,A$),e(A$,hGe),e(Pf,pGe),e(y,uGe),e(y,If),e(If,aee),e(aee,_Ge),e(If,bGe),e(If,y$),e(y$,vGe),e(If,FGe),e(y,TGe),e(y,qf),e(qf,nee),e(nee,MGe),e(qf,EGe),e(qf,L$),e(L$,CGe),e(qf,wGe),e(y,AGe),e(y,Nf),e(Nf,see),e(see,yGe),e(Nf,LGe),e(Nf,x$),e(x$,xGe),e(Nf,$Ge),e(y,kGe),e(y,jf),e(jf,lee),e(lee,SGe),e(jf,RGe),e(jf,$$),e($$,BGe),e(jf,PGe),e(y,IGe),e(y,Df),e(Df,iee),e(iee,qGe),e(Df,NGe),e(Df,k$),e(k$,jGe),e(Df,DGe),e(y,GGe),e(y,Gf),e(Gf,dee),e(dee,OGe),e(Gf,VGe),e(Gf,S$),e(S$,XGe),e(Gf,zGe),e(y,QGe),e(y,Of),e(Of,cee),e(cee,WGe),e(Of,HGe),e(Of,R$),e(R$,UGe),e(Of,JGe),e(y,YGe),e(y,Vf),e(Vf,fee),e(fee,KGe),e(Vf,ZGe),e(Vf,B$),e(B$,eOe),e(Vf,oOe),e(y,rOe),e(y,Xf),e(Xf,mee),e(mee,tOe),e(Xf,aOe),e(Xf,P$),e(P$,nOe),e(Xf,sOe),e(y,lOe),e(y,zf),e(zf,gee),e(gee,iOe),e(zf,dOe),e(zf,I$),e(I$,cOe),e(zf,fOe),e(y,mOe),e(y,Qf),e(Qf,hee),e(hee,gOe),e(Qf,hOe),e(Qf,q$),e(q$,pOe),e(Qf,uOe),e(y,_Oe),e(y,Wf),e(Wf,pee),e(pee,bOe),e(Wf,vOe),e(Wf,N$),e(N$,FOe),e(Wf,TOe),e(y,MOe),e(y,Hf),e(Hf,uee),e(uee,EOe),e(Hf,COe),e(Hf,j$),e(j$,wOe),e(Hf,AOe),e(y,yOe),e(y,Uf),e(Uf,_ee),e(_ee,LOe),e(Uf,xOe),e(Uf,D$),e(D$,$Oe),e(Uf,kOe),e(y,SOe),e(y,Jf),e(Jf,bee),e(bee,ROe),e(Jf,BOe),e(Jf,G$),e(G$,POe),e(Jf,IOe),e(y,qOe),e(y,Yf),e(Yf,vee),e(vee,NOe),e(Yf,jOe),e(Yf,O$),e(O$,DOe),e(Yf,GOe),e(y,OOe),e(y,Kf),e(Kf,Fee),e(Fee,VOe),e(Kf,XOe),e(Kf,V$),e(V$,zOe),e(Kf,QOe),e(y,WOe),e(y,Zf),e(Zf,Tee),e(Tee,HOe),e(Zf,UOe),e(Zf,X$),e(X$,JOe),e(Zf,YOe),e(y,KOe),e(y,em),e(em,Mee),e(Mee,ZOe),e(em,eVe),e(em,z$),e(z$,oVe),e(em,rVe),e(y,tVe),e(y,om),e(om,Eee),e(Eee,aVe),e(om,nVe),e(om,Q$),e(Q$,sVe),e(om,lVe),e(y,iVe),e(y,rm),e(rm,Cee),e(Cee,dVe),e(rm,cVe),e(rm,W$),e(W$,fVe),e(rm,mVe),e(y,gVe),e(y,tm),e(tm,wee),e(wee,hVe),e(tm,pVe),e(tm,H$),e(H$,uVe),e(tm,_Ve),e(y,bVe),e(y,am),e(am,Aee),e(Aee,vVe),e(am,FVe),e(am,U$),e(U$,TVe),e(am,MVe),e(y,EVe),e(y,nm),e(nm,yee),e(yee,CVe),e(nm,wVe),e(nm,J$),e(J$,AVe),e(nm,yVe),e(y,LVe),e(y,sm),e(sm,Lee),e(Lee,xVe),e(sm,$Ve),e(sm,Y$),e(Y$,kVe),e(sm,SVe),e(y,RVe),e(y,lm),e(lm,xee),e(xee,BVe),e(lm,PVe),e(lm,K$),e(K$,IVe),e(lm,qVe),e(y,NVe),e(y,im),e(im,$ee),e($ee,jVe),e(im,DVe),e(im,Z$),e(Z$,GVe),e(im,OVe),e(y,VVe),e(y,dm),e(dm,kee),e(kee,XVe),e(dm,zVe),e(dm,ek),e(ek,QVe),e(dm,WVe),e(y,HVe),e(y,cm),e(cm,See),e(See,UVe),e(cm,JVe),e(cm,ok),e(ok,YVe),e(cm,KVe),e(y,ZVe),e(y,fm),e(fm,Ree),e(Ree,eXe),e(fm,oXe),e(fm,rk),e(rk,rXe),e(fm,tXe),e(y,aXe),e(y,mm),e(mm,Bee),e(Bee,nXe),e(mm,sXe),e(mm,tk),e(tk,lXe),e(mm,iXe),e(y,dXe),e(y,gm),e(gm,Pee),e(Pee,cXe),e(gm,fXe),e(gm,ak),e(ak,mXe),e(gm,gXe),e(y,hXe),e(y,hm),e(hm,Iee),e(Iee,pXe),e(hm,uXe),e(hm,nk),e(nk,_Xe),e(hm,bXe),e(y,vXe),e(y,pm),e(pm,qee),e(qee,FXe),e(pm,TXe),e(pm,sk),e(sk,MXe),e(pm,EXe),e(y,CXe),e(y,um),e(um,Nee),e(Nee,wXe),e(um,AXe),e(um,lk),e(lk,yXe),e(um,LXe),e(y,xXe),e(y,_m),e(_m,jee),e(jee,$Xe),e(_m,kXe),e(_m,ik),e(ik,SXe),e(_m,RXe),e(y,BXe),e(y,bm),e(bm,Dee),e(Dee,PXe),e(bm,IXe),e(bm,dk),e(dk,qXe),e(bm,NXe),e(y,jXe),e(y,vm),e(vm,Gee),e(Gee,DXe),e(vm,GXe),e(vm,ck),e(ck,OXe),e(vm,VXe),e(y,XXe),e(y,Fm),e(Fm,Oee),e(Oee,zXe),e(Fm,QXe),e(Fm,fk),e(fk,WXe),e(Fm,HXe),e(y,UXe),e(y,Tm),e(Tm,Vee),e(Vee,JXe),e(Tm,YXe),e(Tm,mk),e(mk,KXe),e(Tm,ZXe),e(y,eze),e(y,Mm),e(Mm,Xee),e(Xee,oze),e(Mm,rze),e(Mm,gk),e(gk,tze),e(Mm,aze),e(y,nze),e(y,Em),e(Em,zee),e(zee,sze),e(Em,lze),e(Em,hk),e(hk,ize),e(Em,dze),e(y,cze),e(y,Cm),e(Cm,Qee),e(Qee,fze),e(Cm,mze),e(Cm,pk),e(pk,gze),e(Cm,hze),e(y,pze),e(y,wm),e(wm,Wee),e(Wee,uze),e(wm,_ze),e(wm,uk),e(uk,bze),e(wm,vze),e(y,Fze),e(y,Am),e(Am,Hee),e(Hee,Tze),e(Am,Mze),e(Am,_k),e(_k,Eze),e(Am,Cze),e(y,wze),e(y,ym),e(ym,Uee),e(Uee,Aze),e(ym,yze),e(ym,bk),e(bk,Lze),e(ym,xze),e(y,$ze),e(y,Lm),e(Lm,Jee),e(Jee,kze),e(Lm,Sze),e(Lm,vk),e(vk,Rze),e(Lm,Bze),e(y,Pze),e(y,xm),e(xm,Yee),e(Yee,Ize),e(xm,qze),e(xm,Fk),e(Fk,Nze),e(xm,jze),e(y,Dze),e(y,$m),e($m,Kee),e(Kee,Gze),e($m,Oze),e($m,Tk),e(Tk,Vze),e($m,Xze),e(y,zze),e(y,km),e(km,Zee),e(Zee,Qze),e(km,Wze),e(km,Mk),e(Mk,Hze),e(km,Uze),e(y,Jze),e(y,Sm),e(Sm,eoe),e(eoe,Yze),e(Sm,Kze),e(Sm,Ek),e(Ek,Zze),e(Sm,eQe),e(y,oQe),e(y,Rm),e(Rm,ooe),e(ooe,rQe),e(Rm,tQe),e(Rm,Ck),e(Ck,aQe),e(Rm,nQe),e(y,sQe),e(y,Bm),e(Bm,roe),e(roe,lQe),e(Bm,iQe),e(Bm,wk),e(wk,dQe),e(Bm,cQe),e(y,fQe),e(y,Pm),e(Pm,toe),e(toe,mQe),e(Pm,gQe),e(Pm,Ak),e(Ak,hQe),e(Pm,pQe),e(y,uQe),e(y,Im),e(Im,aoe),e(aoe,_Qe),e(Im,bQe),e(Im,yk),e(yk,vQe),e(Im,FQe),e(y,TQe),e(y,qm),e(qm,noe),e(noe,MQe),e(qm,EQe),e(qm,Lk),e(Lk,CQe),e(qm,wQe),e(y,AQe),e(y,Nm),e(Nm,soe),e(soe,yQe),e(Nm,LQe),e(Nm,xk),e(xk,xQe),e(Nm,$Qe),e(y,kQe),e(y,jm),e(jm,loe),e(loe,SQe),e(jm,RQe),e(jm,$k),e($k,BQe),e(jm,PQe),e(y,IQe),e(y,Dm),e(Dm,ioe),e(ioe,qQe),e(Dm,NQe),e(Dm,kk),e(kk,jQe),e(Dm,DQe),e(y,GQe),e(y,Gm),e(Gm,doe),e(doe,OQe),e(Gm,VQe),e(Gm,Sk),e(Sk,XQe),e(Gm,zQe),e(y,QQe),e(y,Om),e(Om,coe),e(coe,WQe),e(Om,HQe),e(Om,Rk),e(Rk,UQe),e(Om,JQe),e(y,YQe),e(y,Vm),e(Vm,foe),e(foe,KQe),e(Vm,ZQe),e(Vm,Bk),e(Bk,eWe),e(Vm,oWe),e(y,rWe),e(y,Xm),e(Xm,moe),e(moe,tWe),e(Xm,aWe),e(Xm,Pk),e(Pk,nWe),e(Xm,sWe),e(y,lWe),e(y,zm),e(zm,goe),e(goe,iWe),e(zm,dWe),e(zm,Ik),e(Ik,cWe),e(zm,fWe),e(y,mWe),e(y,Qm),e(Qm,hoe),e(hoe,gWe),e(Qm,hWe),e(Qm,qk),e(qk,pWe),e(Qm,uWe),e(y,_We),e(y,Wm),e(Wm,poe),e(poe,bWe),e(Wm,vWe),e(Wm,Nk),e(Nk,FWe),e(Wm,TWe),e(y,MWe),e(y,Hm),e(Hm,uoe),e(uoe,EWe),e(Hm,CWe),e(Hm,jk),e(jk,wWe),e(Hm,AWe),e(y,yWe),e(y,Um),e(Um,_oe),e(_oe,LWe),e(Um,xWe),e(Um,Dk),e(Dk,$We),e(Um,kWe),e(y,SWe),e(y,Jm),e(Jm,boe),e(boe,RWe),e(Jm,BWe),e(Jm,Gk),e(Gk,PWe),e(Jm,IWe),e(y,qWe),e(y,Ym),e(Ym,voe),e(voe,NWe),e(Ym,jWe),e(Ym,Ok),e(Ok,DWe),e(Ym,GWe),e(y,OWe),e(y,Km),e(Km,Foe),e(Foe,VWe),e(Km,XWe),e(Km,Vk),e(Vk,zWe),e(Km,QWe),e(y,WWe),e(y,Zm),e(Zm,Toe),e(Toe,HWe),e(Zm,UWe),e(Zm,Xk),e(Xk,JWe),e(Zm,YWe),e(y,KWe),e(y,eg),e(eg,Moe),e(Moe,ZWe),e(eg,eHe),e(eg,zk),e(zk,oHe),e(eg,rHe),e(y,tHe),e(y,og),e(og,Eoe),e(Eoe,aHe),e(og,nHe),e(og,Qk),e(Qk,sHe),e(og,lHe),e(y,iHe),e(y,rg),e(rg,Coe),e(Coe,dHe),e(rg,cHe),e(rg,Wk),e(Wk,fHe),e(rg,mHe),e(y,gHe),e(y,tg),e(tg,woe),e(woe,hHe),e(tg,pHe),e(tg,Hk),e(Hk,uHe),e(tg,_He),e(y,bHe),e(y,ag),e(ag,Aoe),e(Aoe,vHe),e(ag,FHe),e(ag,Uk),e(Uk,THe),e(ag,MHe),e(y,EHe),e(y,ng),e(ng,yoe),e(yoe,CHe),e(ng,wHe),e(ng,Jk),e(Jk,AHe),e(ng,yHe),e(y,LHe),e(y,sg),e(sg,Loe),e(Loe,xHe),e(sg,$He),e(sg,Yk),e(Yk,kHe),e(sg,SHe),e(y,RHe),e(y,lg),e(lg,xoe),e(xoe,BHe),e(lg,PHe),e(lg,Kk),e(Kk,IHe),e(lg,qHe),e(y,NHe),e(y,ig),e(ig,$oe),e($oe,jHe),e(ig,DHe),e(ig,Zk),e(Zk,GHe),e(ig,OHe),e(y,VHe),e(y,dg),e(dg,koe),e(koe,XHe),e(dg,zHe),e(dg,eS),e(eS,QHe),e(dg,WHe),e(y,HHe),e(y,cg),e(cg,Soe),e(Soe,UHe),e(cg,JHe),e(cg,oS),e(oS,YHe),e(cg,KHe),e(y,ZHe),e(y,fg),e(fg,Roe),e(Roe,eUe),e(fg,oUe),e(fg,rS),e(rS,rUe),e(fg,tUe),e(y,aUe),e(y,mg),e(mg,Boe),e(Boe,nUe),e(mg,sUe),e(mg,tS),e(tS,lUe),e(mg,iUe),e(Er,dUe),M(gg,Er,null),e(Co,cUe),e(Co,hg),M(zw,hg,null),e(hg,fUe),e(hg,Poe),e(Poe,mUe),b(f,oPe,_),b(f,_i,_),e(_i,pg),e(pg,Ioe),M(Qw,Ioe,null),e(_i,gUe),e(_i,qoe),e(qoe,hUe),b(f,rPe,_),b(f,wo,_),M(Ww,wo,null),e(wo,pUe),e(wo,Hw),e(Hw,uUe),e(Hw,aS),e(aS,_Ue),e(Hw,bUe),e(wo,vUe),e(wo,Uw),e(Uw,FUe),e(Uw,Noe),e(Noe,TUe),e(Uw,MUe),e(wo,EUe),e(wo,Cr),M(Jw,Cr,null),e(Cr,CUe),e(Cr,joe),e(joe,wUe),e(Cr,AUe),e(Cr,Ca),e(Ca,yUe),e(Ca,Doe),e(Doe,LUe),e(Ca,xUe),e(Ca,Goe),e(Goe,$Ue),e(Ca,kUe),e(Ca,Ooe),e(Ooe,SUe),e(Ca,RUe),e(Cr,BUe),e(Cr,k),e(k,kn),e(kn,Voe),e(Voe,PUe),e(kn,IUe),e(kn,nS),e(nS,qUe),e(kn,NUe),e(kn,sS),e(sS,jUe),e(kn,DUe),e(k,GUe),e(k,Sn),e(Sn,Xoe),e(Xoe,OUe),e(Sn,VUe),e(Sn,lS),e(lS,XUe),e(Sn,zUe),e(Sn,iS),e(iS,QUe),e(Sn,WUe),e(k,HUe),e(k,Rn),e(Rn,zoe),e(zoe,UUe),e(Rn,JUe),e(Rn,dS),e(dS,YUe),e(Rn,KUe),e(Rn,cS),e(cS,ZUe),e(Rn,eJe),e(k,oJe),e(k,ug),e(ug,Qoe),e(Qoe,rJe),e(ug,tJe),e(ug,fS),e(fS,aJe),e(ug,nJe),e(k,sJe),e(k,Bn),e(Bn,Woe),e(Woe,lJe),e(Bn,iJe),e(Bn,mS),e(mS,dJe),e(Bn,cJe),e(Bn,gS),e(gS,fJe),e(Bn,mJe),e(k,gJe),e(k,_g),e(_g,Hoe),e(Hoe,hJe),e(_g,pJe),e(_g,hS),e(hS,uJe),e(_g,_Je),e(k,bJe),e(k,bg),e(bg,Uoe),e(Uoe,vJe),e(bg,FJe),e(bg,pS),e(pS,TJe),e(bg,MJe),e(k,EJe),e(k,vg),e(vg,Joe),e(Joe,CJe),e(vg,wJe),e(vg,uS),e(uS,AJe),e(vg,yJe),e(k,LJe),e(k,Pn),e(Pn,Yoe),e(Yoe,xJe),e(Pn,$Je),e(Pn,_S),e(_S,kJe),e(Pn,SJe),e(Pn,bS),e(bS,RJe),e(Pn,BJe),e(k,PJe),e(k,In),e(In,Koe),e(Koe,IJe),e(In,qJe),e(In,vS),e(vS,NJe),e(In,jJe),e(In,FS),e(FS,DJe),e(In,GJe),e(k,OJe),e(k,qn),e(qn,Zoe),e(Zoe,VJe),e(qn,XJe),e(qn,TS),e(TS,zJe),e(qn,QJe),e(qn,MS),e(MS,WJe),e(qn,HJe),e(k,UJe),e(k,Fg),e(Fg,ere),e(ere,JJe),e(Fg,YJe),e(Fg,ES),e(ES,KJe),e(Fg,ZJe),e(k,eYe),e(k,Tg),e(Tg,ore),e(ore,oYe),e(Tg,rYe),e(Tg,CS),e(CS,tYe),e(Tg,aYe),e(k,nYe),e(k,Nn),e(Nn,rre),e(rre,sYe),e(Nn,lYe),e(Nn,wS),e(wS,iYe),e(Nn,dYe),e(Nn,AS),e(AS,cYe),e(Nn,fYe),e(k,mYe),e(k,Mg),e(Mg,tre),e(tre,gYe),e(Mg,hYe),e(Mg,yS),e(yS,pYe),e(Mg,uYe),e(k,_Ye),e(k,jn),e(jn,are),e(are,bYe),e(jn,vYe),e(jn,LS),e(LS,FYe),e(jn,TYe),e(jn,xS),e(xS,MYe),e(jn,EYe),e(k,CYe),e(k,Dn),e(Dn,nre),e(nre,wYe),e(Dn,AYe),e(Dn,$S),e($S,yYe),e(Dn,LYe),e(Dn,kS),e(kS,xYe),e(Dn,$Ye),e(k,kYe),e(k,Gn),e(Gn,sre),e(sre,SYe),e(Gn,RYe),e(Gn,SS),e(SS,BYe),e(Gn,PYe),e(Gn,RS),e(RS,IYe),e(Gn,qYe),e(k,NYe),e(k,Eg),e(Eg,lre),e(lre,jYe),e(Eg,DYe),e(Eg,BS),e(BS,GYe),e(Eg,OYe),e(k,VYe),e(k,On),e(On,ire),e(ire,XYe),e(On,zYe),e(On,PS),e(PS,QYe),e(On,WYe),e(On,IS),e(IS,HYe),e(On,UYe),e(k,JYe),e(k,Vn),e(Vn,dre),e(dre,YYe),e(Vn,KYe),e(Vn,qS),e(qS,ZYe),e(Vn,eKe),e(Vn,NS),e(NS,oKe),e(Vn,rKe),e(k,tKe),e(k,Xn),e(Xn,cre),e(cre,aKe),e(Xn,nKe),e(Xn,jS),e(jS,sKe),e(Xn,lKe),e(Xn,DS),e(DS,iKe),e(Xn,dKe),e(k,cKe),e(k,zn),e(zn,fre),e(fre,fKe),e(zn,mKe),e(zn,GS),e(GS,gKe),e(zn,hKe),e(zn,OS),e(OS,pKe),e(zn,uKe),e(k,_Ke),e(k,Qn),e(Qn,mre),e(mre,bKe),e(Qn,vKe),e(Qn,VS),e(VS,FKe),e(Qn,TKe),e(Qn,XS),e(XS,MKe),e(Qn,EKe),e(k,CKe),e(k,Wn),e(Wn,gre),e(gre,wKe),e(Wn,AKe),e(Wn,zS),e(zS,yKe),e(Wn,LKe),e(Wn,QS),e(QS,xKe),e(Wn,$Ke),e(k,kKe),e(k,Cg),e(Cg,hre),e(hre,SKe),e(Cg,RKe),e(Cg,WS),e(WS,BKe),e(Cg,PKe),e(k,IKe),e(k,Hn),e(Hn,pre),e(pre,qKe),e(Hn,NKe),e(Hn,HS),e(HS,jKe),e(Hn,DKe),e(Hn,US),e(US,GKe),e(Hn,OKe),e(k,VKe),e(k,wg),e(wg,ure),e(ure,XKe),e(wg,zKe),e(wg,JS),e(JS,QKe),e(wg,WKe),e(k,HKe),e(k,Un),e(Un,_re),e(_re,UKe),e(Un,JKe),e(Un,YS),e(YS,YKe),e(Un,KKe),e(Un,KS),e(KS,ZKe),e(Un,eZe),e(k,oZe),e(k,Jn),e(Jn,bre),e(bre,rZe),e(Jn,tZe),e(Jn,ZS),e(ZS,aZe),e(Jn,nZe),e(Jn,eR),e(eR,sZe),e(Jn,lZe),e(k,iZe),e(k,Yn),e(Yn,vre),e(vre,dZe),e(Yn,cZe),e(Yn,oR),e(oR,fZe),e(Yn,mZe),e(Yn,rR),e(rR,gZe),e(Yn,hZe),e(k,pZe),e(k,Kn),e(Kn,Fre),e(Fre,uZe),e(Kn,_Ze),e(Kn,tR),e(tR,bZe),e(Kn,vZe),e(Kn,aR),e(aR,FZe),e(Kn,TZe),e(k,MZe),e(k,Zn),e(Zn,Tre),e(Tre,EZe),e(Zn,CZe),e(Zn,nR),e(nR,wZe),e(Zn,AZe),e(Zn,sR),e(sR,yZe),e(Zn,LZe),e(k,xZe),e(k,Ag),e(Ag,Mre),e(Mre,$Ze),e(Ag,kZe),e(Ag,lR),e(lR,SZe),e(Ag,RZe),e(k,BZe),e(k,es),e(es,Ere),e(Ere,PZe),e(es,IZe),e(es,iR),e(iR,qZe),e(es,NZe),e(es,dR),e(dR,jZe),e(es,DZe),e(k,GZe),e(k,os),e(os,Cre),e(Cre,OZe),e(os,VZe),e(os,cR),e(cR,XZe),e(os,zZe),e(os,fR),e(fR,QZe),e(os,WZe),e(k,HZe),e(k,rs),e(rs,wre),e(wre,UZe),e(rs,JZe),e(rs,mR),e(mR,YZe),e(rs,KZe),e(rs,gR),e(gR,ZZe),e(rs,eeo),e(k,oeo),e(k,ts),e(ts,Are),e(Are,reo),e(ts,teo),e(ts,hR),e(hR,aeo),e(ts,neo),e(ts,pR),e(pR,seo),e(ts,leo),e(k,ieo),e(k,as),e(as,yre),e(yre,deo),e(as,ceo),e(as,uR),e(uR,feo),e(as,meo),e(as,_R),e(_R,geo),e(as,heo),e(k,peo),e(k,ns),e(ns,Lre),e(Lre,ueo),e(ns,_eo),e(ns,bR),e(bR,beo),e(ns,veo),e(ns,vR),e(vR,Feo),e(ns,Teo),e(k,Meo),e(k,yg),e(yg,xre),e(xre,Eeo),e(yg,Ceo),e(yg,FR),e(FR,weo),e(yg,Aeo),e(k,yeo),e(k,ss),e(ss,$re),e($re,Leo),e(ss,xeo),e(ss,TR),e(TR,$eo),e(ss,keo),e(ss,MR),e(MR,Seo),e(ss,Reo),e(k,Beo),e(k,Lg),e(Lg,kre),e(kre,Peo),e(Lg,Ieo),e(Lg,ER),e(ER,qeo),e(Lg,Neo),e(k,jeo),e(k,xg),e(xg,Sre),e(Sre,Deo),e(xg,Geo),e(xg,CR),e(CR,Oeo),e(xg,Veo),e(k,Xeo),e(k,ls),e(ls,Rre),e(Rre,zeo),e(ls,Qeo),e(ls,wR),e(wR,Weo),e(ls,Heo),e(ls,AR),e(AR,Ueo),e(ls,Jeo),e(k,Yeo),e(k,is),e(is,Bre),e(Bre,Keo),e(is,Zeo),e(is,yR),e(yR,eoo),e(is,ooo),e(is,LR),e(LR,roo),e(is,too),e(k,aoo),e(k,ds),e(ds,Pre),e(Pre,noo),e(ds,soo),e(ds,xR),e(xR,loo),e(ds,ioo),e(ds,$R),e($R,doo),e(ds,coo),e(k,foo),e(k,$g),e($g,Ire),e(Ire,moo),e($g,goo),e($g,kR),e(kR,hoo),e($g,poo),e(k,uoo),e(k,cs),e(cs,qre),e(qre,_oo),e(cs,boo),e(cs,SR),e(SR,voo),e(cs,Foo),e(cs,RR),e(RR,Too),e(cs,Moo),e(k,Eoo),e(k,fs),e(fs,Nre),e(Nre,Coo),e(fs,woo),e(fs,BR),e(BR,Aoo),e(fs,yoo),e(fs,PR),e(PR,Loo),e(fs,xoo),e(k,$oo),e(k,ms),e(ms,jre),e(jre,koo),e(ms,Soo),e(ms,IR),e(IR,Roo),e(ms,Boo),e(ms,qR),e(qR,Poo),e(ms,Ioo),e(k,qoo),e(k,gs),e(gs,Dre),e(Dre,Noo),e(gs,joo),e(gs,NR),e(NR,Doo),e(gs,Goo),e(gs,jR),e(jR,Ooo),e(gs,Voo),e(k,Xoo),e(k,hs),e(hs,Gre),e(Gre,zoo),e(hs,Qoo),e(hs,DR),e(DR,Woo),e(hs,Hoo),e(hs,GR),e(GR,Uoo),e(hs,Joo),e(k,Yoo),e(k,ps),e(ps,Ore),e(Ore,Koo),e(ps,Zoo),e(ps,OR),e(OR,ero),e(ps,oro),e(ps,VR),e(VR,rro),e(ps,tro),e(k,aro),e(k,kg),e(kg,Vre),e(Vre,nro),e(kg,sro),e(kg,XR),e(XR,lro),e(kg,iro),e(k,dro),e(k,Sg),e(Sg,Xre),e(Xre,cro),e(Sg,fro),e(Sg,zR),e(zR,mro),e(Sg,gro),e(k,hro),e(k,Rg),e(Rg,zre),e(zre,pro),e(Rg,uro),e(Rg,QR),e(QR,_ro),e(Rg,bro),e(k,vro),e(k,Bg),e(Bg,Qre),e(Qre,Fro),e(Bg,Tro),e(Bg,WR),e(WR,Mro),e(Bg,Ero),e(k,Cro),e(k,us),e(us,Wre),e(Wre,wro),e(us,Aro),e(us,HR),e(HR,yro),e(us,Lro),e(us,UR),e(UR,xro),e(us,$ro),e(k,kro),e(k,Pg),e(Pg,Hre),e(Hre,Sro),e(Pg,Rro),e(Pg,JR),e(JR,Bro),e(Pg,Pro),e(k,Iro),e(k,_s),e(_s,Ure),e(Ure,qro),e(_s,Nro),e(_s,YR),e(YR,jro),e(_s,Dro),e(_s,KR),e(KR,Gro),e(_s,Oro),e(k,Vro),e(k,bs),e(bs,Jre),e(Jre,Xro),e(bs,zro),e(bs,ZR),e(ZR,Qro),e(bs,Wro),e(bs,eB),e(eB,Hro),e(bs,Uro),e(k,Jro),e(k,vs),e(vs,Yre),e(Yre,Yro),e(vs,Kro),e(vs,oB),e(oB,Zro),e(vs,eto),e(vs,rB),e(rB,oto),e(vs,rto),e(k,tto),e(k,Fs),e(Fs,Kre),e(Kre,ato),e(Fs,nto),e(Fs,tB),e(tB,sto),e(Fs,lto),e(Fs,aB),e(aB,ito),e(Fs,dto),e(k,cto),e(k,Ts),e(Ts,Zre),e(Zre,fto),e(Ts,mto),e(Ts,nB),e(nB,gto),e(Ts,hto),e(Ts,sB),e(sB,pto),e(Ts,uto),e(k,_to),e(k,Ms),e(Ms,ete),e(ete,bto),e(Ms,vto),e(Ms,lB),e(lB,Fto),e(Ms,Tto),e(Ms,iB),e(iB,Mto),e(Ms,Eto),e(k,Cto),e(k,Ig),e(Ig,ote),e(ote,wto),e(Ig,Ato),e(Ig,dB),e(dB,yto),e(Ig,Lto),e(k,xto),e(k,qg),e(qg,rte),e(rte,$to),e(qg,kto),e(qg,cB),e(cB,Sto),e(qg,Rto),e(k,Bto),e(k,Es),e(Es,tte),e(tte,Pto),e(Es,Ito),e(Es,fB),e(fB,qto),e(Es,Nto),e(Es,mB),e(mB,jto),e(Es,Dto),e(k,Gto),e(k,Cs),e(Cs,ate),e(ate,Oto),e(Cs,Vto),e(Cs,gB),e(gB,Xto),e(Cs,zto),e(Cs,hB),e(hB,Qto),e(Cs,Wto),e(k,Hto),e(k,ws),e(ws,nte),e(nte,Uto),e(ws,Jto),e(ws,pB),e(pB,Yto),e(ws,Kto),e(ws,uB),e(uB,Zto),e(ws,eao),e(k,oao),e(k,Ng),e(Ng,ste),e(ste,rao),e(Ng,tao),e(Ng,_B),e(_B,aao),e(Ng,nao),e(k,sao),e(k,jg),e(jg,lte),e(lte,lao),e(jg,iao),e(jg,bB),e(bB,dao),e(jg,cao),e(k,fao),e(k,Dg),e(Dg,ite),e(ite,mao),e(Dg,gao),e(Dg,vB),e(vB,hao),e(Dg,pao),e(k,uao),e(k,As),e(As,dte),e(dte,_ao),e(As,bao),e(As,FB),e(FB,vao),e(As,Fao),e(As,TB),e(TB,Tao),e(As,Mao),e(k,Eao),e(k,Gg),e(Gg,cte),e(cte,Cao),e(Gg,wao),e(Gg,MB),e(MB,Aao),e(Gg,yao),e(k,Lao),e(k,Og),e(Og,fte),e(fte,xao),e(Og,$ao),e(Og,EB),e(EB,kao),e(Og,Sao),e(k,Rao),e(k,ys),e(ys,mte),e(mte,Bao),e(ys,Pao),e(ys,CB),e(CB,Iao),e(ys,qao),e(ys,wB),e(wB,Nao),e(ys,jao),e(k,Dao),e(k,Vg),e(Vg,gte),e(gte,Gao),e(Vg,Oao),e(Vg,AB),e(AB,Vao),e(Vg,Xao),e(k,zao),e(k,Xg),e(Xg,hte),e(hte,Qao),e(Xg,Wao),e(Xg,yB),e(yB,Hao),e(Xg,Uao),e(k,Jao),e(k,Ls),e(Ls,pte),e(pte,Yao),e(Ls,Kao),e(Ls,LB),e(LB,Zao),e(Ls,eno),e(Ls,xB),e(xB,ono),e(Ls,rno),e(k,tno),e(k,xs),e(xs,ute),e(ute,ano),e(xs,nno),e(xs,$B),e($B,sno),e(xs,lno),e(xs,kB),e(kB,ino),e(xs,dno),e(k,cno),e(k,$s),e($s,_te),e(_te,fno),e($s,mno),e($s,SB),e(SB,gno),e($s,hno),e($s,RB),e(RB,pno),e($s,uno),e(k,_no),e(k,ks),e(ks,bte),e(bte,bno),e(ks,vno),e(ks,BB),e(BB,Fno),e(ks,Tno),e(ks,PB),e(PB,Mno),e(ks,Eno),e(Cr,Cno),M(zg,Cr,null),e(wo,wno),e(wo,Qg),M(Yw,Qg,null),e(Qg,Ano),e(Qg,vte),e(vte,yno),b(f,tPe,_),b(f,bi,_),e(bi,Wg),e(Wg,Fte),M(Kw,Fte,null),e(bi,Lno),e(bi,Tte),e(Tte,xno),b(f,aPe,_),b(f,Ao,_),M(Zw,Ao,null),e(Ao,$no),e(Ao,eA),e(eA,kno),e(eA,IB),e(IB,Sno),e(eA,Rno),e(Ao,Bno),e(Ao,oA),e(oA,Pno),e(oA,Mte),e(Mte,Ino),e(oA,qno),e(Ao,Nno),e(Ao,Qe),M(rA,Qe,null),e(Qe,jno),e(Qe,Ete),e(Ete,Dno),e(Qe,Gno),e(Qe,wa),e(wa,Ono),e(wa,Cte),e(Cte,Vno),e(wa,Xno),e(wa,wte),e(wte,zno),e(wa,Qno),e(wa,Ate),e(Ate,Wno),e(wa,Hno),e(Qe,Uno),e(Qe,te),e(te,Hg),e(Hg,yte),e(yte,Jno),e(Hg,Yno),e(Hg,qB),e(qB,Kno),e(Hg,Zno),e(te,eso),e(te,Ug),e(Ug,Lte),e(Lte,oso),e(Ug,rso),e(Ug,NB),e(NB,tso),e(Ug,aso),e(te,nso),e(te,Jg),e(Jg,xte),e(xte,sso),e(Jg,lso),e(Jg,jB),e(jB,iso),e(Jg,dso),e(te,cso),e(te,Yg),e(Yg,$te),e($te,fso),e(Yg,mso),e(Yg,DB),e(DB,gso),e(Yg,hso),e(te,pso),e(te,Kg),e(Kg,kte),e(kte,uso),e(Kg,_so),e(Kg,GB),e(GB,bso),e(Kg,vso),e(te,Fso),e(te,Zg),e(Zg,Ste),e(Ste,Tso),e(Zg,Mso),e(Zg,OB),e(OB,Eso),e(Zg,Cso),e(te,wso),e(te,eh),e(eh,Rte),e(Rte,Aso),e(eh,yso),e(eh,VB),e(VB,Lso),e(eh,xso),e(te,$so),e(te,oh),e(oh,Bte),e(Bte,kso),e(oh,Sso),e(oh,XB),e(XB,Rso),e(oh,Bso),e(te,Pso),e(te,rh),e(rh,Pte),e(Pte,Iso),e(rh,qso),e(rh,zB),e(zB,Nso),e(rh,jso),e(te,Dso),e(te,th),e(th,Ite),e(Ite,Gso),e(th,Oso),e(th,QB),e(QB,Vso),e(th,Xso),e(te,zso),e(te,ah),e(ah,qte),e(qte,Qso),e(ah,Wso),e(ah,WB),e(WB,Hso),e(ah,Uso),e(te,Jso),e(te,nh),e(nh,Nte),e(Nte,Yso),e(nh,Kso),e(nh,HB),e(HB,Zso),e(nh,elo),e(te,olo),e(te,sh),e(sh,jte),e(jte,rlo),e(sh,tlo),e(sh,UB),e(UB,alo),e(sh,nlo),e(te,slo),e(te,lh),e(lh,Dte),e(Dte,llo),e(lh,ilo),e(lh,JB),e(JB,dlo),e(lh,clo),e(te,flo),e(te,ih),e(ih,Gte),e(Gte,mlo),e(ih,glo),e(ih,YB),e(YB,hlo),e(ih,plo),e(te,ulo),e(te,dh),e(dh,Ote),e(Ote,_lo),e(dh,blo),e(dh,KB),e(KB,vlo),e(dh,Flo),e(te,Tlo),e(te,ch),e(ch,Vte),e(Vte,Mlo),e(ch,Elo),e(ch,ZB),e(ZB,Clo),e(ch,wlo),e(te,Alo),e(te,fh),e(fh,Xte),e(Xte,ylo),e(fh,Llo),e(fh,eP),e(eP,xlo),e(fh,$lo),e(te,klo),e(te,mh),e(mh,zte),e(zte,Slo),e(mh,Rlo),e(mh,oP),e(oP,Blo),e(mh,Plo),e(te,Ilo),e(te,gh),e(gh,Qte),e(Qte,qlo),e(gh,Nlo),e(gh,rP),e(rP,jlo),e(gh,Dlo),e(te,Glo),e(te,hh),e(hh,Wte),e(Wte,Olo),e(hh,Vlo),e(hh,tP),e(tP,Xlo),e(hh,zlo),e(te,Qlo),e(te,ph),e(ph,Hte),e(Hte,Wlo),e(ph,Hlo),e(ph,aP),e(aP,Ulo),e(ph,Jlo),e(te,Ylo),e(te,uh),e(uh,Ute),e(Ute,Klo),e(uh,Zlo),e(uh,nP),e(nP,eio),e(uh,oio),e(te,rio),e(te,_h),e(_h,Jte),e(Jte,tio),e(_h,aio),e(_h,sP),e(sP,nio),e(_h,sio),e(Qe,lio),M(bh,Qe,null),e(Qe,iio),M(vh,Qe,null),e(Ao,dio),e(Ao,Fh),M(tA,Fh,null),e(Fh,cio),e(Fh,Yte),e(Yte,fio),b(f,nPe,_),b(f,vi,_),e(vi,Th),e(Th,Kte),M(aA,Kte,null),e(vi,mio),e(vi,Zte),e(Zte,gio),b(f,sPe,_),b(f,yo,_),M(nA,yo,null),e(yo,hio),e(yo,sA),e(sA,pio),e(sA,lP),e(lP,uio),e(sA,_io),e(yo,bio),e(yo,lA),e(lA,vio),e(lA,eae),e(eae,Fio),e(lA,Tio),e(yo,Mio),e(yo,We),M(iA,We,null),e(We,Eio),e(We,oae),e(oae,Cio),e(We,wio),e(We,Fi),e(Fi,Aio),e(Fi,rae),e(rae,yio),e(Fi,Lio),e(Fi,tae),e(tae,xio),e(Fi,$io),e(We,kio),e(We,be),e(be,Mh),e(Mh,aae),e(aae,Sio),e(Mh,Rio),e(Mh,iP),e(iP,Bio),e(Mh,Pio),e(be,Iio),e(be,Eh),e(Eh,nae),e(nae,qio),e(Eh,Nio),e(Eh,dP),e(dP,jio),e(Eh,Dio),e(be,Gio),e(be,Ch),e(Ch,sae),e(sae,Oio),e(Ch,Vio),e(Ch,cP),e(cP,Xio),e(Ch,zio),e(be,Qio),e(be,wh),e(wh,lae),e(lae,Wio),e(wh,Hio),e(wh,fP),e(fP,Uio),e(wh,Jio),e(be,Yio),e(be,Ah),e(Ah,iae),e(iae,Kio),e(Ah,Zio),e(Ah,mP),e(mP,edo),e(Ah,odo),e(be,rdo),e(be,yh),e(yh,dae),e(dae,tdo),e(yh,ado),e(yh,gP),e(gP,ndo),e(yh,sdo),e(be,ldo),e(be,Lh),e(Lh,cae),e(cae,ido),e(Lh,ddo),e(Lh,hP),e(hP,cdo),e(Lh,fdo),e(be,mdo),e(be,xh),e(xh,fae),e(fae,gdo),e(xh,hdo),e(xh,pP),e(pP,pdo),e(xh,udo),e(be,_do),e(be,$h),e($h,mae),e(mae,bdo),e($h,vdo),e($h,uP),e(uP,Fdo),e($h,Tdo),e(be,Mdo),e(be,kh),e(kh,gae),e(gae,Edo),e(kh,Cdo),e(kh,_P),e(_P,wdo),e(kh,Ado),e(be,ydo),e(be,Sh),e(Sh,hae),e(hae,Ldo),e(Sh,xdo),e(Sh,bP),e(bP,$do),e(Sh,kdo),e(be,Sdo),e(be,Rh),e(Rh,pae),e(pae,Rdo),e(Rh,Bdo),e(Rh,vP),e(vP,Pdo),e(Rh,Ido),e(be,qdo),e(be,Bh),e(Bh,uae),e(uae,Ndo),e(Bh,jdo),e(Bh,FP),e(FP,Ddo),e(Bh,Gdo),e(be,Odo),e(be,Ph),e(Ph,_ae),e(_ae,Vdo),e(Ph,Xdo),e(Ph,TP),e(TP,zdo),e(Ph,Qdo),e(We,Wdo),M(Ih,We,null),e(We,Hdo),M(qh,We,null),e(yo,Udo),e(yo,Nh),M(dA,Nh,null),e(Nh,Jdo),e(Nh,bae),e(bae,Ydo),b(f,lPe,_),b(f,Ti,_),e(Ti,jh),e(jh,vae),M(cA,vae,null),e(Ti,Kdo),e(Ti,Fae),e(Fae,Zdo),b(f,iPe,_),b(f,Lo,_),M(fA,Lo,null),e(Lo,eco),e(Lo,Mi),e(Mi,oco),e(Mi,MP),e(MP,rco),e(Mi,tco),e(Mi,EP),e(EP,aco),e(Mi,nco),e(Lo,sco),e(Lo,mA),e(mA,lco),e(mA,Tae),e(Tae,ico),e(mA,dco),e(Lo,cco),e(Lo,ot),M(gA,ot,null),e(ot,fco),e(ot,Mae),e(Mae,mco),e(ot,gco),e(ot,Ei),e(Ei,hco),e(Ei,Eae),e(Eae,pco),e(Ei,uco),e(Ei,CP),e(CP,_co),e(Ei,bco),e(ot,vco),M(Dh,ot,null),e(Lo,Fco),e(Lo,He),M(hA,He,null),e(He,Tco),e(He,Cae),e(Cae,Mco),e(He,Eco),e(He,Aa),e(Aa,Cco),e(Aa,wae),e(wae,wco),e(Aa,Aco),e(Aa,Aae),e(Aae,yco),e(Aa,Lco),e(Aa,yae),e(yae,xco),e(Aa,$co),e(He,kco),e(He,x),e(x,Gh),e(Gh,Lae),e(Lae,Sco),e(Gh,Rco),e(Gh,wP),e(wP,Bco),e(Gh,Pco),e(x,Ico),e(x,Oh),e(Oh,xae),e(xae,qco),e(Oh,Nco),e(Oh,AP),e(AP,jco),e(Oh,Dco),e(x,Gco),e(x,Vh),e(Vh,$ae),e($ae,Oco),e(Vh,Vco),e(Vh,yP),e(yP,Xco),e(Vh,zco),e(x,Qco),e(x,Xh),e(Xh,kae),e(kae,Wco),e(Xh,Hco),e(Xh,LP),e(LP,Uco),e(Xh,Jco),e(x,Yco),e(x,zh),e(zh,Sae),e(Sae,Kco),e(zh,Zco),e(zh,xP),e(xP,efo),e(zh,ofo),e(x,rfo),e(x,Qh),e(Qh,Rae),e(Rae,tfo),e(Qh,afo),e(Qh,$P),e($P,nfo),e(Qh,sfo),e(x,lfo),e(x,Wh),e(Wh,Bae),e(Bae,ifo),e(Wh,dfo),e(Wh,kP),e(kP,cfo),e(Wh,ffo),e(x,mfo),e(x,Hh),e(Hh,Pae),e(Pae,gfo),e(Hh,hfo),e(Hh,SP),e(SP,pfo),e(Hh,ufo),e(x,_fo),e(x,Uh),e(Uh,Iae),e(Iae,bfo),e(Uh,vfo),e(Uh,RP),e(RP,Ffo),e(Uh,Tfo),e(x,Mfo),e(x,Jh),e(Jh,qae),e(qae,Efo),e(Jh,Cfo),e(Jh,BP),e(BP,wfo),e(Jh,Afo),e(x,yfo),e(x,Yh),e(Yh,Nae),e(Nae,Lfo),e(Yh,xfo),e(Yh,PP),e(PP,$fo),e(Yh,kfo),e(x,Sfo),e(x,Kh),e(Kh,jae),e(jae,Rfo),e(Kh,Bfo),e(Kh,IP),e(IP,Pfo),e(Kh,Ifo),e(x,qfo),e(x,Zh),e(Zh,Dae),e(Dae,Nfo),e(Zh,jfo),e(Zh,qP),e(qP,Dfo),e(Zh,Gfo),e(x,Ofo),e(x,ep),e(ep,Gae),e(Gae,Vfo),e(ep,Xfo),e(ep,NP),e(NP,zfo),e(ep,Qfo),e(x,Wfo),e(x,op),e(op,Oae),e(Oae,Hfo),e(op,Ufo),e(op,jP),e(jP,Jfo),e(op,Yfo),e(x,Kfo),e(x,rp),e(rp,Vae),e(Vae,Zfo),e(rp,emo),e(rp,DP),e(DP,omo),e(rp,rmo),e(x,tmo),e(x,tp),e(tp,Xae),e(Xae,amo),e(tp,nmo),e(tp,GP),e(GP,smo),e(tp,lmo),e(x,imo),e(x,ap),e(ap,zae),e(zae,dmo),e(ap,cmo),e(ap,OP),e(OP,fmo),e(ap,mmo),e(x,gmo),e(x,np),e(np,Qae),e(Qae,hmo),e(np,pmo),e(np,VP),e(VP,umo),e(np,_mo),e(x,bmo),e(x,sp),e(sp,Wae),e(Wae,vmo),e(sp,Fmo),e(sp,XP),e(XP,Tmo),e(sp,Mmo),e(x,Emo),e(x,lp),e(lp,Hae),e(Hae,Cmo),e(lp,wmo),e(lp,zP),e(zP,Amo),e(lp,ymo),e(x,Lmo),e(x,ip),e(ip,Uae),e(Uae,xmo),e(ip,$mo),e(ip,QP),e(QP,kmo),e(ip,Smo),e(x,Rmo),e(x,dp),e(dp,Jae),e(Jae,Bmo),e(dp,Pmo),e(dp,WP),e(WP,Imo),e(dp,qmo),e(x,Nmo),e(x,cp),e(cp,Yae),e(Yae,jmo),e(cp,Dmo),e(cp,HP),e(HP,Gmo),e(cp,Omo),e(x,Vmo),e(x,fp),e(fp,Kae),e(Kae,Xmo),e(fp,zmo),e(fp,UP),e(UP,Qmo),e(fp,Wmo),e(x,Hmo),e(x,mp),e(mp,Zae),e(Zae,Umo),e(mp,Jmo),e(mp,JP),e(JP,Ymo),e(mp,Kmo),e(x,Zmo),e(x,gp),e(gp,ene),e(ene,ego),e(gp,ogo),e(gp,YP),e(YP,rgo),e(gp,tgo),e(x,ago),e(x,hp),e(hp,one),e(one,ngo),e(hp,sgo),e(hp,KP),e(KP,lgo),e(hp,igo),e(x,dgo),e(x,pp),e(pp,rne),e(rne,cgo),e(pp,fgo),e(pp,ZP),e(ZP,mgo),e(pp,ggo),e(x,hgo),e(x,up),e(up,tne),e(tne,pgo),e(up,ugo),e(up,eI),e(eI,_go),e(up,bgo),e(x,vgo),e(x,Ss),e(Ss,ane),e(ane,Fgo),e(Ss,Tgo),e(Ss,oI),e(oI,Mgo),e(Ss,Ego),e(Ss,rI),e(rI,Cgo),e(Ss,wgo),e(x,Ago),e(x,_p),e(_p,nne),e(nne,ygo),e(_p,Lgo),e(_p,tI),e(tI,xgo),e(_p,$go),e(x,kgo),e(x,bp),e(bp,sne),e(sne,Sgo),e(bp,Rgo),e(bp,aI),e(aI,Bgo),e(bp,Pgo),e(x,Igo),e(x,vp),e(vp,lne),e(lne,qgo),e(vp,Ngo),e(vp,nI),e(nI,jgo),e(vp,Dgo),e(x,Ggo),e(x,Fp),e(Fp,ine),e(ine,Ogo),e(Fp,Vgo),e(Fp,sI),e(sI,Xgo),e(Fp,zgo),e(x,Qgo),e(x,Tp),e(Tp,dne),e(dne,Wgo),e(Tp,Hgo),e(Tp,lI),e(lI,Ugo),e(Tp,Jgo),e(x,Ygo),e(x,Mp),e(Mp,cne),e(cne,Kgo),e(Mp,Zgo),e(Mp,iI),e(iI,eho),e(Mp,oho),e(x,rho),e(x,Ep),e(Ep,fne),e(fne,tho),e(Ep,aho),e(Ep,dI),e(dI,nho),e(Ep,sho),e(x,lho),e(x,Cp),e(Cp,mne),e(mne,iho),e(Cp,dho),e(Cp,cI),e(cI,cho),e(Cp,fho),e(x,mho),e(x,wp),e(wp,gne),e(gne,gho),e(wp,hho),e(wp,fI),e(fI,pho),e(wp,uho),e(x,_ho),e(x,Ap),e(Ap,hne),e(hne,bho),e(Ap,vho),e(Ap,mI),e(mI,Fho),e(Ap,Tho),e(x,Mho),e(x,yp),e(yp,pne),e(pne,Eho),e(yp,Cho),e(yp,gI),e(gI,who),e(yp,Aho),e(x,yho),e(x,Lp),e(Lp,une),e(une,Lho),e(Lp,xho),e(Lp,hI),e(hI,$ho),e(Lp,kho),e(x,Sho),e(x,xp),e(xp,_ne),e(_ne,Rho),e(xp,Bho),e(xp,pI),e(pI,Pho),e(xp,Iho),e(x,qho),e(x,$p),e($p,bne),e(bne,Nho),e($p,jho),e($p,uI),e(uI,Dho),e($p,Gho),e(x,Oho),e(x,kp),e(kp,vne),e(vne,Vho),e(kp,Xho),e(kp,_I),e(_I,zho),e(kp,Qho),e(x,Who),e(x,Sp),e(Sp,Fne),e(Fne,Hho),e(Sp,Uho),e(Sp,bI),e(bI,Jho),e(Sp,Yho),e(x,Kho),e(x,Rp),e(Rp,Tne),e(Tne,Zho),e(Rp,epo),e(Rp,vI),e(vI,opo),e(Rp,rpo),e(x,tpo),e(x,Bp),e(Bp,Mne),e(Mne,apo),e(Bp,npo),e(Bp,FI),e(FI,spo),e(Bp,lpo),e(x,ipo),e(x,Pp),e(Pp,Ene),e(Ene,dpo),e(Pp,cpo),e(Pp,TI),e(TI,fpo),e(Pp,mpo),e(x,gpo),e(x,Ip),e(Ip,Cne),e(Cne,hpo),e(Ip,ppo),e(Ip,MI),e(MI,upo),e(Ip,_po),e(x,bpo),e(x,qp),e(qp,wne),e(wne,vpo),e(qp,Fpo),e(qp,EI),e(EI,Tpo),e(qp,Mpo),e(x,Epo),e(x,Np),e(Np,Ane),e(Ane,Cpo),e(Np,wpo),e(Np,CI),e(CI,Apo),e(Np,ypo),e(x,Lpo),e(x,jp),e(jp,yne),e(yne,xpo),e(jp,$po),e(jp,wI),e(wI,kpo),e(jp,Spo),e(x,Rpo),e(x,Dp),e(Dp,Lne),e(Lne,Bpo),e(Dp,Ppo),e(Dp,AI),e(AI,Ipo),e(Dp,qpo),e(x,Npo),e(x,Gp),e(Gp,xne),e(xne,jpo),e(Gp,Dpo),e(Gp,yI),e(yI,Gpo),e(Gp,Opo),e(x,Vpo),e(x,Op),e(Op,$ne),e($ne,Xpo),e(Op,zpo),e(Op,LI),e(LI,Qpo),e(Op,Wpo),e(x,Hpo),e(x,Vp),e(Vp,kne),e(kne,Upo),e(Vp,Jpo),e(Vp,xI),e(xI,Ypo),e(Vp,Kpo),e(x,Zpo),e(x,Xp),e(Xp,Sne),e(Sne,euo),e(Xp,ouo),e(Xp,$I),e($I,ruo),e(Xp,tuo),e(x,auo),e(x,zp),e(zp,Rne),e(Rne,nuo),e(zp,suo),e(zp,kI),e(kI,luo),e(zp,iuo),e(x,duo),e(x,Qp),e(Qp,Bne),e(Bne,cuo),e(Qp,fuo),e(Qp,SI),e(SI,muo),e(Qp,guo),e(x,huo),e(x,Wp),e(Wp,Pne),e(Pne,puo),e(Wp,uuo),e(Wp,RI),e(RI,_uo),e(Wp,buo),e(x,vuo),e(x,Hp),e(Hp,Ine),e(Ine,Fuo),e(Hp,Tuo),e(Hp,BI),e(BI,Muo),e(Hp,Euo),e(x,Cuo),e(x,Up),e(Up,qne),e(qne,wuo),e(Up,Auo),e(Up,PI),e(PI,yuo),e(Up,Luo),e(x,xuo),e(x,Jp),e(Jp,Nne),e(Nne,$uo),e(Jp,kuo),e(Jp,II),e(II,Suo),e(Jp,Ruo),e(x,Buo),e(x,Yp),e(Yp,jne),e(jne,Puo),e(Yp,Iuo),e(Yp,qI),e(qI,quo),e(Yp,Nuo),e(x,juo),e(x,Kp),e(Kp,Dne),e(Dne,Duo),e(Kp,Guo),e(Kp,NI),e(NI,Ouo),e(Kp,Vuo),e(x,Xuo),e(x,Zp),e(Zp,Gne),e(Gne,zuo),e(Zp,Quo),e(Zp,jI),e(jI,Wuo),e(Zp,Huo),e(x,Uuo),e(x,eu),e(eu,One),e(One,Juo),e(eu,Yuo),e(eu,DI),e(DI,Kuo),e(eu,Zuo),e(x,e_o),e(x,ou),e(ou,Vne),e(Vne,o_o),e(ou,r_o),e(ou,GI),e(GI,t_o),e(ou,a_o),e(x,n_o),e(x,ru),e(ru,Xne),e(Xne,s_o),e(ru,l_o),e(ru,OI),e(OI,i_o),e(ru,d_o),e(x,c_o),e(x,tu),e(tu,zne),e(zne,f_o),e(tu,m_o),e(tu,VI),e(VI,g_o),e(tu,h_o),e(x,p_o),e(x,au),e(au,Qne),e(Qne,u_o),e(au,__o),e(au,XI),e(XI,b_o),e(au,v_o),e(x,F_o),e(x,nu),e(nu,Wne),e(Wne,T_o),e(nu,M_o),e(nu,zI),e(zI,E_o),e(nu,C_o),e(x,w_o),e(x,su),e(su,Hne),e(Hne,A_o),e(su,y_o),e(su,QI),e(QI,L_o),e(su,x_o),e(x,$_o),e(x,lu),e(lu,Une),e(Une,k_o),e(lu,S_o),e(lu,WI),e(WI,R_o),e(lu,B_o),e(x,P_o),e(x,iu),e(iu,Jne),e(Jne,I_o),e(iu,q_o),e(iu,HI),e(HI,N_o),e(iu,j_o),e(x,D_o),e(x,du),e(du,Yne),e(Yne,G_o),e(du,O_o),e(du,UI),e(UI,V_o),e(du,X_o),e(x,z_o),e(x,cu),e(cu,Kne),e(Kne,Q_o),e(cu,W_o),e(cu,JI),e(JI,H_o),e(cu,U_o),e(x,J_o),e(x,fu),e(fu,Zne),e(Zne,Y_o),e(fu,K_o),e(fu,YI),e(YI,Z_o),e(fu,e2o),e(x,o2o),e(x,mu),e(mu,ese),e(ese,r2o),e(mu,t2o),e(mu,KI),e(KI,a2o),e(mu,n2o),e(x,s2o),e(x,gu),e(gu,ose),e(ose,l2o),e(gu,i2o),e(gu,ZI),e(ZI,d2o),e(gu,c2o),e(x,f2o),e(x,hu),e(hu,rse),e(rse,m2o),e(hu,g2o),e(hu,eq),e(eq,h2o),e(hu,p2o),e(x,u2o),e(x,pu),e(pu,tse),e(tse,_2o),e(pu,b2o),e(pu,oq),e(oq,v2o),e(pu,F2o),e(x,T2o),e(x,uu),e(uu,ase),e(ase,M2o),e(uu,E2o),e(uu,rq),e(rq,C2o),e(uu,w2o),e(x,A2o),e(x,_u),e(_u,nse),e(nse,y2o),e(_u,L2o),e(_u,tq),e(tq,x2o),e(_u,$2o),e(x,k2o),e(x,bu),e(bu,sse),e(sse,S2o),e(bu,R2o),e(bu,aq),e(aq,B2o),e(bu,P2o),e(x,I2o),e(x,vu),e(vu,lse),e(lse,q2o),e(vu,N2o),e(vu,nq),e(nq,j2o),e(vu,D2o),e(x,G2o),e(x,Fu),e(Fu,ise),e(ise,O2o),e(Fu,V2o),e(Fu,sq),e(sq,X2o),e(Fu,z2o),e(x,Q2o),e(x,Tu),e(Tu,dse),e(dse,W2o),e(Tu,H2o),e(Tu,lq),e(lq,U2o),e(Tu,J2o),e(x,Y2o),e(x,Mu),e(Mu,cse),e(cse,K2o),e(Mu,Z2o),e(Mu,iq),e(iq,e1o),e(Mu,o1o),e(x,r1o),e(x,Eu),e(Eu,fse),e(fse,t1o),e(Eu,a1o),e(Eu,dq),e(dq,n1o),e(Eu,s1o),e(x,l1o),e(x,Cu),e(Cu,mse),e(mse,i1o),e(Cu,d1o),e(Cu,cq),e(cq,c1o),e(Cu,f1o),e(x,m1o),e(x,wu),e(wu,gse),e(gse,g1o),e(wu,h1o),e(wu,fq),e(fq,p1o),e(wu,u1o),e(x,_1o),e(x,Au),e(Au,hse),e(hse,b1o),e(Au,v1o),e(Au,mq),e(mq,F1o),e(Au,T1o),e(He,M1o),e(He,yu),e(yu,E1o),e(yu,pse),e(pse,C1o),e(yu,w1o),e(yu,use),e(use,A1o),e(He,y1o),M(Lu,He,null),b(f,dPe,_),b(f,Ci,_),e(Ci,xu),e(xu,_se),M(pA,_se,null),e(Ci,L1o),e(Ci,bse),e(bse,x1o),b(f,cPe,_),b(f,xo,_),M(uA,xo,null),e(xo,$1o),e(xo,wi),e(wi,k1o),e(wi,gq),e(gq,S1o),e(wi,R1o),e(wi,hq),e(hq,B1o),e(wi,P1o),e(xo,I1o),e(xo,_A),e(_A,q1o),e(_A,vse),e(vse,N1o),e(_A,j1o),e(xo,D1o),e(xo,rt),M(bA,rt,null),e(rt,G1o),e(rt,Fse),e(Fse,O1o),e(rt,V1o),e(rt,Ai),e(Ai,X1o),e(Ai,Tse),e(Tse,z1o),e(Ai,Q1o),e(Ai,pq),e(pq,W1o),e(Ai,H1o),e(rt,U1o),M($u,rt,null),e(xo,J1o),e(xo,Ue),M(vA,Ue,null),e(Ue,Y1o),e(Ue,Mse),e(Mse,K1o),e(Ue,Z1o),e(Ue,ya),e(ya,ebo),e(ya,Ese),e(Ese,obo),e(ya,rbo),e(ya,Cse),e(Cse,tbo),e(ya,abo),e(ya,wse),e(wse,nbo),e(ya,sbo),e(Ue,lbo),e(Ue,G),e(G,ku),e(ku,Ase),e(Ase,ibo),e(ku,dbo),e(ku,uq),e(uq,cbo),e(ku,fbo),e(G,mbo),e(G,Su),e(Su,yse),e(yse,gbo),e(Su,hbo),e(Su,_q),e(_q,pbo),e(Su,ubo),e(G,_bo),e(G,Ru),e(Ru,Lse),e(Lse,bbo),e(Ru,vbo),e(Ru,bq),e(bq,Fbo),e(Ru,Tbo),e(G,Mbo),e(G,Bu),e(Bu,xse),e(xse,Ebo),e(Bu,Cbo),e(Bu,vq),e(vq,wbo),e(Bu,Abo),e(G,ybo),e(G,Pu),e(Pu,$se),e($se,Lbo),e(Pu,xbo),e(Pu,Fq),e(Fq,$bo),e(Pu,kbo),e(G,Sbo),e(G,Iu),e(Iu,kse),e(kse,Rbo),e(Iu,Bbo),e(Iu,Tq),e(Tq,Pbo),e(Iu,Ibo),e(G,qbo),e(G,qu),e(qu,Sse),e(Sse,Nbo),e(qu,jbo),e(qu,Mq),e(Mq,Dbo),e(qu,Gbo),e(G,Obo),e(G,Nu),e(Nu,Rse),e(Rse,Vbo),e(Nu,Xbo),e(Nu,Eq),e(Eq,zbo),e(Nu,Qbo),e(G,Wbo),e(G,ju),e(ju,Bse),e(Bse,Hbo),e(ju,Ubo),e(ju,Cq),e(Cq,Jbo),e(ju,Ybo),e(G,Kbo),e(G,Du),e(Du,Pse),e(Pse,Zbo),e(Du,evo),e(Du,wq),e(wq,ovo),e(Du,rvo),e(G,tvo),e(G,Gu),e(Gu,Ise),e(Ise,avo),e(Gu,nvo),e(Gu,Aq),e(Aq,svo),e(Gu,lvo),e(G,ivo),e(G,Ou),e(Ou,qse),e(qse,dvo),e(Ou,cvo),e(Ou,yq),e(yq,fvo),e(Ou,mvo),e(G,gvo),e(G,Vu),e(Vu,Nse),e(Nse,hvo),e(Vu,pvo),e(Vu,Lq),e(Lq,uvo),e(Vu,_vo),e(G,bvo),e(G,Xu),e(Xu,jse),e(jse,vvo),e(Xu,Fvo),e(Xu,xq),e(xq,Tvo),e(Xu,Mvo),e(G,Evo),e(G,zu),e(zu,Dse),e(Dse,Cvo),e(zu,wvo),e(zu,$q),e($q,Avo),e(zu,yvo),e(G,Lvo),e(G,Qu),e(Qu,Gse),e(Gse,xvo),e(Qu,$vo),e(Qu,kq),e(kq,kvo),e(Qu,Svo),e(G,Rvo),e(G,Wu),e(Wu,Ose),e(Ose,Bvo),e(Wu,Pvo),e(Wu,Sq),e(Sq,Ivo),e(Wu,qvo),e(G,Nvo),e(G,Hu),e(Hu,Vse),e(Vse,jvo),e(Hu,Dvo),e(Hu,Rq),e(Rq,Gvo),e(Hu,Ovo),e(G,Vvo),e(G,Uu),e(Uu,Xse),e(Xse,Xvo),e(Uu,zvo),e(Uu,Bq),e(Bq,Qvo),e(Uu,Wvo),e(G,Hvo),e(G,Ju),e(Ju,zse),e(zse,Uvo),e(Ju,Jvo),e(Ju,Pq),e(Pq,Yvo),e(Ju,Kvo),e(G,Zvo),e(G,Yu),e(Yu,Qse),e(Qse,eFo),e(Yu,oFo),e(Yu,Iq),e(Iq,rFo),e(Yu,tFo),e(G,aFo),e(G,Ku),e(Ku,Wse),e(Wse,nFo),e(Ku,sFo),e(Ku,qq),e(qq,lFo),e(Ku,iFo),e(G,dFo),e(G,Zu),e(Zu,Hse),e(Hse,cFo),e(Zu,fFo),e(Zu,Nq),e(Nq,mFo),e(Zu,gFo),e(G,hFo),e(G,e_),e(e_,Use),e(Use,pFo),e(e_,uFo),e(e_,jq),e(jq,_Fo),e(e_,bFo),e(G,vFo),e(G,o_),e(o_,Jse),e(Jse,FFo),e(o_,TFo),e(o_,Dq),e(Dq,MFo),e(o_,EFo),e(G,CFo),e(G,r_),e(r_,Yse),e(Yse,wFo),e(r_,AFo),e(r_,Gq),e(Gq,yFo),e(r_,LFo),e(G,xFo),e(G,t_),e(t_,Kse),e(Kse,$Fo),e(t_,kFo),e(t_,Oq),e(Oq,SFo),e(t_,RFo),e(G,BFo),e(G,a_),e(a_,Zse),e(Zse,PFo),e(a_,IFo),e(a_,Vq),e(Vq,qFo),e(a_,NFo),e(G,jFo),e(G,n_),e(n_,ele),e(ele,DFo),e(n_,GFo),e(n_,Xq),e(Xq,OFo),e(n_,VFo),e(G,XFo),e(G,s_),e(s_,ole),e(ole,zFo),e(s_,QFo),e(s_,zq),e(zq,WFo),e(s_,HFo),e(G,UFo),e(G,l_),e(l_,rle),e(rle,JFo),e(l_,YFo),e(l_,Qq),e(Qq,KFo),e(l_,ZFo),e(G,e0o),e(G,i_),e(i_,tle),e(tle,o0o),e(i_,r0o),e(i_,Wq),e(Wq,t0o),e(i_,a0o),e(G,n0o),e(G,d_),e(d_,ale),e(ale,s0o),e(d_,l0o),e(d_,Hq),e(Hq,i0o),e(d_,d0o),e(G,c0o),e(G,c_),e(c_,nle),e(nle,f0o),e(c_,m0o),e(c_,Uq),e(Uq,g0o),e(c_,h0o),e(G,p0o),e(G,f_),e(f_,sle),e(sle,u0o),e(f_,_0o),e(f_,Jq),e(Jq,b0o),e(f_,v0o),e(G,F0o),e(G,m_),e(m_,lle),e(lle,T0o),e(m_,M0o),e(m_,Yq),e(Yq,E0o),e(m_,C0o),e(G,w0o),e(G,g_),e(g_,ile),e(ile,A0o),e(g_,y0o),e(g_,Kq),e(Kq,L0o),e(g_,x0o),e(G,$0o),e(G,h_),e(h_,dle),e(dle,k0o),e(h_,S0o),e(h_,Zq),e(Zq,R0o),e(h_,B0o),e(G,P0o),e(G,p_),e(p_,cle),e(cle,I0o),e(p_,q0o),e(p_,eN),e(eN,N0o),e(p_,j0o),e(Ue,D0o),e(Ue,u_),e(u_,G0o),e(u_,fle),e(fle,O0o),e(u_,V0o),e(u_,mle),e(mle,X0o),e(Ue,z0o),M(__,Ue,null),b(f,fPe,_),b(f,yi,_),e(yi,b_),e(b_,gle),M(FA,gle,null),e(yi,Q0o),e(yi,hle),e(hle,W0o),b(f,mPe,_),b(f,$o,_),M(TA,$o,null),e($o,H0o),e($o,Li),e(Li,U0o),e(Li,oN),e(oN,J0o),e(Li,Y0o),e(Li,rN),e(rN,K0o),e(Li,Z0o),e($o,eTo),e($o,MA),e(MA,oTo),e(MA,ple),e(ple,rTo),e(MA,tTo),e($o,aTo),e($o,tt),M(EA,tt,null),e(tt,nTo),e(tt,ule),e(ule,sTo),e(tt,lTo),e(tt,xi),e(xi,iTo),e(xi,_le),e(_le,dTo),e(xi,cTo),e(xi,tN),e(tN,fTo),e(xi,mTo),e(tt,gTo),M(v_,tt,null),e($o,hTo),e($o,Je),M(CA,Je,null),e(Je,pTo),e(Je,ble),e(ble,uTo),e(Je,_To),e(Je,La),e(La,bTo),e(La,vle),e(vle,vTo),e(La,FTo),e(La,Fle),e(Fle,TTo),e(La,MTo),e(La,Tle),e(Tle,ETo),e(La,CTo),e(Je,wTo),e(Je,z),e(z,F_),e(F_,Mle),e(Mle,ATo),e(F_,yTo),e(F_,aN),e(aN,LTo),e(F_,xTo),e(z,$To),e(z,T_),e(T_,Ele),e(Ele,kTo),e(T_,STo),e(T_,nN),e(nN,RTo),e(T_,BTo),e(z,PTo),e(z,M_),e(M_,Cle),e(Cle,ITo),e(M_,qTo),e(M_,sN),e(sN,NTo),e(M_,jTo),e(z,DTo),e(z,E_),e(E_,wle),e(wle,GTo),e(E_,OTo),e(E_,lN),e(lN,VTo),e(E_,XTo),e(z,zTo),e(z,C_),e(C_,Ale),e(Ale,QTo),e(C_,WTo),e(C_,iN),e(iN,HTo),e(C_,UTo),e(z,JTo),e(z,w_),e(w_,yle),e(yle,YTo),e(w_,KTo),e(w_,dN),e(dN,ZTo),e(w_,e7o),e(z,o7o),e(z,A_),e(A_,Lle),e(Lle,r7o),e(A_,t7o),e(A_,cN),e(cN,a7o),e(A_,n7o),e(z,s7o),e(z,y_),e(y_,xle),e(xle,l7o),e(y_,i7o),e(y_,fN),e(fN,d7o),e(y_,c7o),e(z,f7o),e(z,L_),e(L_,$le),e($le,m7o),e(L_,g7o),e(L_,mN),e(mN,h7o),e(L_,p7o),e(z,u7o),e(z,x_),e(x_,kle),e(kle,_7o),e(x_,b7o),e(x_,gN),e(gN,v7o),e(x_,F7o),e(z,T7o),e(z,$_),e($_,Sle),e(Sle,M7o),e($_,E7o),e($_,hN),e(hN,C7o),e($_,w7o),e(z,A7o),e(z,k_),e(k_,Rle),e(Rle,y7o),e(k_,L7o),e(k_,pN),e(pN,x7o),e(k_,$7o),e(z,k7o),e(z,S_),e(S_,Ble),e(Ble,S7o),e(S_,R7o),e(S_,uN),e(uN,B7o),e(S_,P7o),e(z,I7o),e(z,R_),e(R_,Ple),e(Ple,q7o),e(R_,N7o),e(R_,_N),e(_N,j7o),e(R_,D7o),e(z,G7o),e(z,B_),e(B_,Ile),e(Ile,O7o),e(B_,V7o),e(B_,bN),e(bN,X7o),e(B_,z7o),e(z,Q7o),e(z,P_),e(P_,qle),e(qle,W7o),e(P_,H7o),e(P_,vN),e(vN,U7o),e(P_,J7o),e(z,Y7o),e(z,I_),e(I_,Nle),e(Nle,K7o),e(I_,Z7o),e(I_,FN),e(FN,e9o),e(I_,o9o),e(z,r9o),e(z,q_),e(q_,jle),e(jle,t9o),e(q_,a9o),e(q_,TN),e(TN,n9o),e(q_,s9o),e(z,l9o),e(z,N_),e(N_,Dle),e(Dle,i9o),e(N_,d9o),e(N_,MN),e(MN,c9o),e(N_,f9o),e(z,m9o),e(z,j_),e(j_,Gle),e(Gle,g9o),e(j_,h9o),e(j_,EN),e(EN,p9o),e(j_,u9o),e(z,_9o),e(z,D_),e(D_,Ole),e(Ole,b9o),e(D_,v9o),e(D_,CN),e(CN,F9o),e(D_,T9o),e(z,M9o),e(z,G_),e(G_,Vle),e(Vle,E9o),e(G_,C9o),e(G_,wN),e(wN,w9o),e(G_,A9o),e(z,y9o),e(z,O_),e(O_,Xle),e(Xle,L9o),e(O_,x9o),e(O_,AN),e(AN,$9o),e(O_,k9o),e(z,S9o),e(z,V_),e(V_,zle),e(zle,R9o),e(V_,B9o),e(V_,yN),e(yN,P9o),e(V_,I9o),e(z,q9o),e(z,X_),e(X_,Qle),e(Qle,N9o),e(X_,j9o),e(X_,LN),e(LN,D9o),e(X_,G9o),e(z,O9o),e(z,z_),e(z_,Wle),e(Wle,V9o),e(z_,X9o),e(z_,xN),e(xN,z9o),e(z_,Q9o),e(z,W9o),e(z,Q_),e(Q_,Hle),e(Hle,H9o),e(Q_,U9o),e(Q_,$N),e($N,J9o),e(Q_,Y9o),e(z,K9o),e(z,W_),e(W_,Ule),e(Ule,Z9o),e(W_,eMo),e(W_,kN),e(kN,oMo),e(W_,rMo),e(z,tMo),e(z,H_),e(H_,Jle),e(Jle,aMo),e(H_,nMo),e(H_,SN),e(SN,sMo),e(H_,lMo),e(z,iMo),e(z,U_),e(U_,Yle),e(Yle,dMo),e(U_,cMo),e(U_,RN),e(RN,fMo),e(U_,mMo),e(z,gMo),e(z,J_),e(J_,Kle),e(Kle,hMo),e(J_,pMo),e(J_,BN),e(BN,uMo),e(J_,_Mo),e(z,bMo),e(z,Y_),e(Y_,Zle),e(Zle,vMo),e(Y_,FMo),e(Y_,PN),e(PN,TMo),e(Y_,MMo),e(z,EMo),e(z,K_),e(K_,eie),e(eie,CMo),e(K_,wMo),e(K_,IN),e(IN,AMo),e(K_,yMo),e(z,LMo),e(z,Z_),e(Z_,oie),e(oie,xMo),e(Z_,$Mo),e(Z_,qN),e(qN,kMo),e(Z_,SMo),e(z,RMo),e(z,e2),e(e2,rie),e(rie,BMo),e(e2,PMo),e(e2,NN),e(NN,IMo),e(e2,qMo),e(Je,NMo),e(Je,o2),e(o2,jMo),e(o2,tie),e(tie,DMo),e(o2,GMo),e(o2,aie),e(aie,OMo),e(Je,VMo),M(r2,Je,null),b(f,gPe,_),b(f,$i,_),e($i,t2),e(t2,nie),M(wA,nie,null),e($i,XMo),e($i,sie),e(sie,zMo),b(f,hPe,_),b(f,ko,_),M(AA,ko,null),e(ko,QMo),e(ko,ki),e(ki,WMo),e(ki,jN),e(jN,HMo),e(ki,UMo),e(ki,DN),e(DN,JMo),e(ki,YMo),e(ko,KMo),e(ko,yA),e(yA,ZMo),e(yA,lie),e(lie,e4o),e(yA,o4o),e(ko,r4o),e(ko,at),M(LA,at,null),e(at,t4o),e(at,iie),e(iie,a4o),e(at,n4o),e(at,Si),e(Si,s4o),e(Si,die),e(die,l4o),e(Si,i4o),e(Si,GN),e(GN,d4o),e(Si,c4o),e(at,f4o),M(a2,at,null),e(ko,m4o),e(ko,Ye),M(xA,Ye,null),e(Ye,g4o),e(Ye,cie),e(cie,h4o),e(Ye,p4o),e(Ye,xa),e(xa,u4o),e(xa,fie),e(fie,_4o),e(xa,b4o),e(xa,mie),e(mie,v4o),e(xa,F4o),e(xa,gie),e(gie,T4o),e(xa,M4o),e(Ye,E4o),e(Ye,Q),e(Q,n2),e(n2,hie),e(hie,C4o),e(n2,w4o),e(n2,ON),e(ON,A4o),e(n2,y4o),e(Q,L4o),e(Q,s2),e(s2,pie),e(pie,x4o),e(s2,$4o),e(s2,VN),e(VN,k4o),e(s2,S4o),e(Q,R4o),e(Q,l2),e(l2,uie),e(uie,B4o),e(l2,P4o),e(l2,XN),e(XN,I4o),e(l2,q4o),e(Q,N4o),e(Q,i2),e(i2,_ie),e(_ie,j4o),e(i2,D4o),e(i2,zN),e(zN,G4o),e(i2,O4o),e(Q,V4o),e(Q,d2),e(d2,bie),e(bie,X4o),e(d2,z4o),e(d2,QN),e(QN,Q4o),e(d2,W4o),e(Q,H4o),e(Q,c2),e(c2,vie),e(vie,U4o),e(c2,J4o),e(c2,WN),e(WN,Y4o),e(c2,K4o),e(Q,Z4o),e(Q,f2),e(f2,Fie),e(Fie,eEo),e(f2,oEo),e(f2,HN),e(HN,rEo),e(f2,tEo),e(Q,aEo),e(Q,m2),e(m2,Tie),e(Tie,nEo),e(m2,sEo),e(m2,UN),e(UN,lEo),e(m2,iEo),e(Q,dEo),e(Q,g2),e(g2,Mie),e(Mie,cEo),e(g2,fEo),e(g2,JN),e(JN,mEo),e(g2,gEo),e(Q,hEo),e(Q,h2),e(h2,Eie),e(Eie,pEo),e(h2,uEo),e(h2,YN),e(YN,_Eo),e(h2,bEo),e(Q,vEo),e(Q,p2),e(p2,Cie),e(Cie,FEo),e(p2,TEo),e(p2,KN),e(KN,MEo),e(p2,EEo),e(Q,CEo),e(Q,u2),e(u2,wie),e(wie,wEo),e(u2,AEo),e(u2,ZN),e(ZN,yEo),e(u2,LEo),e(Q,xEo),e(Q,_2),e(_2,Aie),e(Aie,$Eo),e(_2,kEo),e(_2,ej),e(ej,SEo),e(_2,REo),e(Q,BEo),e(Q,b2),e(b2,yie),e(yie,PEo),e(b2,IEo),e(b2,oj),e(oj,qEo),e(b2,NEo),e(Q,jEo),e(Q,v2),e(v2,Lie),e(Lie,DEo),e(v2,GEo),e(v2,rj),e(rj,OEo),e(v2,VEo),e(Q,XEo),e(Q,F2),e(F2,xie),e(xie,zEo),e(F2,QEo),e(F2,tj),e(tj,WEo),e(F2,HEo),e(Q,UEo),e(Q,T2),e(T2,$ie),e($ie,JEo),e(T2,YEo),e(T2,aj),e(aj,KEo),e(T2,ZEo),e(Q,e5o),e(Q,M2),e(M2,kie),e(kie,o5o),e(M2,r5o),e(M2,nj),e(nj,t5o),e(M2,a5o),e(Q,n5o),e(Q,E2),e(E2,Sie),e(Sie,s5o),e(E2,l5o),e(E2,sj),e(sj,i5o),e(E2,d5o),e(Q,c5o),e(Q,C2),e(C2,Rie),e(Rie,f5o),e(C2,m5o),e(C2,lj),e(lj,g5o),e(C2,h5o),e(Q,p5o),e(Q,w2),e(w2,Bie),e(Bie,u5o),e(w2,_5o),e(w2,ij),e(ij,b5o),e(w2,v5o),e(Q,F5o),e(Q,A2),e(A2,Pie),e(Pie,T5o),e(A2,M5o),e(A2,dj),e(dj,E5o),e(A2,C5o),e(Q,w5o),e(Q,y2),e(y2,Iie),e(Iie,A5o),e(y2,y5o),e(y2,cj),e(cj,L5o),e(y2,x5o),e(Q,$5o),e(Q,L2),e(L2,qie),e(qie,k5o),e(L2,S5o),e(L2,fj),e(fj,R5o),e(L2,B5o),e(Q,P5o),e(Q,x2),e(x2,Nie),e(Nie,I5o),e(x2,q5o),e(x2,mj),e(mj,N5o),e(x2,j5o),e(Q,D5o),e(Q,$2),e($2,jie),e(jie,G5o),e($2,O5o),e($2,gj),e(gj,V5o),e($2,X5o),e(Q,z5o),e(Q,k2),e(k2,Die),e(Die,Q5o),e(k2,W5o),e(k2,hj),e(hj,H5o),e(k2,U5o),e(Q,J5o),e(Q,S2),e(S2,Gie),e(Gie,Y5o),e(S2,K5o),e(S2,pj),e(pj,Z5o),e(S2,eCo),e(Q,oCo),e(Q,R2),e(R2,Oie),e(Oie,rCo),e(R2,tCo),e(R2,uj),e(uj,aCo),e(R2,nCo),e(Q,sCo),e(Q,B2),e(B2,Vie),e(Vie,lCo),e(B2,iCo),e(B2,_j),e(_j,dCo),e(B2,cCo),e(Q,fCo),e(Q,P2),e(P2,Xie),e(Xie,mCo),e(P2,gCo),e(P2,zie),e(zie,hCo),e(P2,pCo),e(Q,uCo),e(Q,I2),e(I2,Qie),e(Qie,_Co),e(I2,bCo),e(I2,bj),e(bj,vCo),e(I2,FCo),e(Q,TCo),e(Q,q2),e(q2,Wie),e(Wie,MCo),e(q2,ECo),e(q2,vj),e(vj,CCo),e(q2,wCo),e(Q,ACo),e(Q,N2),e(N2,Hie),e(Hie,yCo),e(N2,LCo),e(N2,Fj),e(Fj,xCo),e(N2,$Co),e(Q,kCo),e(Q,j2),e(j2,Uie),e(Uie,SCo),e(j2,RCo),e(j2,Tj),e(Tj,BCo),e(j2,PCo),e(Ye,ICo),e(Ye,D2),e(D2,qCo),e(D2,Jie),e(Jie,NCo),e(D2,jCo),e(D2,Yie),e(Yie,DCo),e(Ye,GCo),M(G2,Ye,null),b(f,pPe,_),b(f,Ri,_),e(Ri,O2),e(O2,Kie),M($A,Kie,null),e(Ri,OCo),e(Ri,Zie),e(Zie,VCo),b(f,uPe,_),b(f,So,_),M(kA,So,null),e(So,XCo),e(So,Bi),e(Bi,zCo),e(Bi,Mj),e(Mj,QCo),e(Bi,WCo),e(Bi,Ej),e(Ej,HCo),e(Bi,UCo),e(So,JCo),e(So,SA),e(SA,YCo),e(SA,ede),e(ede,KCo),e(SA,ZCo),e(So,e3o),e(So,nt),M(RA,nt,null),e(nt,o3o),e(nt,ode),e(ode,r3o),e(nt,t3o),e(nt,Pi),e(Pi,a3o),e(Pi,rde),e(rde,n3o),e(Pi,s3o),e(Pi,Cj),e(Cj,l3o),e(Pi,i3o),e(nt,d3o),M(V2,nt,null),e(So,c3o),e(So,Ke),M(BA,Ke,null),e(Ke,f3o),e(Ke,tde),e(tde,m3o),e(Ke,g3o),e(Ke,$a),e($a,h3o),e($a,ade),e(ade,p3o),e($a,u3o),e($a,nde),e(nde,_3o),e($a,b3o),e($a,sde),e(sde,v3o),e($a,F3o),e(Ke,T3o),e(Ke,he),e(he,X2),e(X2,lde),e(lde,M3o),e(X2,E3o),e(X2,wj),e(wj,C3o),e(X2,w3o),e(he,A3o),e(he,z2),e(z2,ide),e(ide,y3o),e(z2,L3o),e(z2,Aj),e(Aj,x3o),e(z2,$3o),e(he,k3o),e(he,Q2),e(Q2,dde),e(dde,S3o),e(Q2,R3o),e(Q2,yj),e(yj,B3o),e(Q2,P3o),e(he,I3o),e(he,W2),e(W2,cde),e(cde,q3o),e(W2,N3o),e(W2,Lj),e(Lj,j3o),e(W2,D3o),e(he,G3o),e(he,H2),e(H2,fde),e(fde,O3o),e(H2,V3o),e(H2,xj),e(xj,X3o),e(H2,z3o),e(he,Q3o),e(he,U2),e(U2,mde),e(mde,W3o),e(U2,H3o),e(U2,$j),e($j,U3o),e(U2,J3o),e(he,Y3o),e(he,J2),e(J2,gde),e(gde,K3o),e(J2,Z3o),e(J2,kj),e(kj,ewo),e(J2,owo),e(he,rwo),e(he,Y2),e(Y2,hde),e(hde,two),e(Y2,awo),e(Y2,Sj),e(Sj,nwo),e(Y2,swo),e(he,lwo),e(he,K2),e(K2,pde),e(pde,iwo),e(K2,dwo),e(K2,Rj),e(Rj,cwo),e(K2,fwo),e(he,mwo),e(he,Z2),e(Z2,ude),e(ude,gwo),e(Z2,hwo),e(Z2,Bj),e(Bj,pwo),e(Z2,uwo),e(he,_wo),e(he,e1),e(e1,_de),e(_de,bwo),e(e1,vwo),e(e1,Pj),e(Pj,Fwo),e(e1,Two),e(he,Mwo),e(he,o1),e(o1,bde),e(bde,Ewo),e(o1,Cwo),e(o1,Ij),e(Ij,wwo),e(o1,Awo),e(he,ywo),e(he,r1),e(r1,vde),e(vde,Lwo),e(r1,xwo),e(r1,qj),e(qj,$wo),e(r1,kwo),e(he,Swo),e(he,t1),e(t1,Fde),e(Fde,Rwo),e(t1,Bwo),e(t1,Nj),e(Nj,Pwo),e(t1,Iwo),e(he,qwo),e(he,a1),e(a1,Tde),e(Tde,Nwo),e(a1,jwo),e(a1,jj),e(jj,Dwo),e(a1,Gwo),e(he,Owo),e(he,n1),e(n1,Mde),e(Mde,Vwo),e(n1,Xwo),e(n1,Dj),e(Dj,zwo),e(n1,Qwo),e(he,Wwo),e(he,s1),e(s1,Ede),e(Ede,Hwo),e(s1,Uwo),e(s1,Gj),e(Gj,Jwo),e(s1,Ywo),e(Ke,Kwo),e(Ke,l1),e(l1,Zwo),e(l1,Cde),e(Cde,eAo),e(l1,oAo),e(l1,wde),e(wde,rAo),e(Ke,tAo),M(i1,Ke,null),b(f,_Pe,_),b(f,Ii,_),e(Ii,d1),e(d1,Ade),M(PA,Ade,null),e(Ii,aAo),e(Ii,yde),e(yde,nAo),b(f,bPe,_),b(f,Ro,_),M(IA,Ro,null),e(Ro,sAo),e(Ro,qi),e(qi,lAo),e(qi,Oj),e(Oj,iAo),e(qi,dAo),e(qi,Vj),e(Vj,cAo),e(qi,fAo),e(Ro,mAo),e(Ro,qA),e(qA,gAo),e(qA,Lde),e(Lde,hAo),e(qA,pAo),e(Ro,uAo),e(Ro,st),M(NA,st,null),e(st,_Ao),e(st,xde),e(xde,bAo),e(st,vAo),e(st,Ni),e(Ni,FAo),e(Ni,$de),e($de,TAo),e(Ni,MAo),e(Ni,Xj),e(Xj,EAo),e(Ni,CAo),e(st,wAo),M(c1,st,null),e(Ro,AAo),e(Ro,Ze),M(jA,Ze,null),e(Ze,yAo),e(Ze,kde),e(kde,LAo),e(Ze,xAo),e(Ze,ka),e(ka,$Ao),e(ka,Sde),e(Sde,kAo),e(ka,SAo),e(ka,Rde),e(Rde,RAo),e(ka,BAo),e(ka,Bde),e(Bde,PAo),e(ka,IAo),e(Ze,qAo),e(Ze,q),e(q,f1),e(f1,Pde),e(Pde,NAo),e(f1,jAo),e(f1,zj),e(zj,DAo),e(f1,GAo),e(q,OAo),e(q,m1),e(m1,Ide),e(Ide,VAo),e(m1,XAo),e(m1,Qj),e(Qj,zAo),e(m1,QAo),e(q,WAo),e(q,g1),e(g1,qde),e(qde,HAo),e(g1,UAo),e(g1,Wj),e(Wj,JAo),e(g1,YAo),e(q,KAo),e(q,h1),e(h1,Nde),e(Nde,ZAo),e(h1,e6o),e(h1,Hj),e(Hj,o6o),e(h1,r6o),e(q,t6o),e(q,p1),e(p1,jde),e(jde,a6o),e(p1,n6o),e(p1,Uj),e(Uj,s6o),e(p1,l6o),e(q,i6o),e(q,u1),e(u1,Dde),e(Dde,d6o),e(u1,c6o),e(u1,Jj),e(Jj,f6o),e(u1,m6o),e(q,g6o),e(q,_1),e(_1,Gde),e(Gde,h6o),e(_1,p6o),e(_1,Yj),e(Yj,u6o),e(_1,_6o),e(q,b6o),e(q,b1),e(b1,Ode),e(Ode,v6o),e(b1,F6o),e(b1,Kj),e(Kj,T6o),e(b1,M6o),e(q,E6o),e(q,v1),e(v1,Vde),e(Vde,C6o),e(v1,w6o),e(v1,Zj),e(Zj,A6o),e(v1,y6o),e(q,L6o),e(q,F1),e(F1,Xde),e(Xde,x6o),e(F1,$6o),e(F1,eD),e(eD,k6o),e(F1,S6o),e(q,R6o),e(q,T1),e(T1,zde),e(zde,B6o),e(T1,P6o),e(T1,oD),e(oD,I6o),e(T1,q6o),e(q,N6o),e(q,M1),e(M1,Qde),e(Qde,j6o),e(M1,D6o),e(M1,rD),e(rD,G6o),e(M1,O6o),e(q,V6o),e(q,E1),e(E1,Wde),e(Wde,X6o),e(E1,z6o),e(E1,tD),e(tD,Q6o),e(E1,W6o),e(q,H6o),e(q,C1),e(C1,Hde),e(Hde,U6o),e(C1,J6o),e(C1,aD),e(aD,Y6o),e(C1,K6o),e(q,Z6o),e(q,w1),e(w1,Ude),e(Ude,eyo),e(w1,oyo),e(w1,nD),e(nD,ryo),e(w1,tyo),e(q,ayo),e(q,A1),e(A1,Jde),e(Jde,nyo),e(A1,syo),e(A1,sD),e(sD,lyo),e(A1,iyo),e(q,dyo),e(q,y1),e(y1,Yde),e(Yde,cyo),e(y1,fyo),e(y1,lD),e(lD,myo),e(y1,gyo),e(q,hyo),e(q,L1),e(L1,Kde),e(Kde,pyo),e(L1,uyo),e(L1,iD),e(iD,_yo),e(L1,byo),e(q,vyo),e(q,x1),e(x1,Zde),e(Zde,Fyo),e(x1,Tyo),e(x1,dD),e(dD,Myo),e(x1,Eyo),e(q,Cyo),e(q,$1),e($1,ece),e(ece,wyo),e($1,Ayo),e($1,cD),e(cD,yyo),e($1,Lyo),e(q,xyo),e(q,k1),e(k1,oce),e(oce,$yo),e(k1,kyo),e(k1,fD),e(fD,Syo),e(k1,Ryo),e(q,Byo),e(q,S1),e(S1,rce),e(rce,Pyo),e(S1,Iyo),e(S1,mD),e(mD,qyo),e(S1,Nyo),e(q,jyo),e(q,R1),e(R1,tce),e(tce,Dyo),e(R1,Gyo),e(R1,gD),e(gD,Oyo),e(R1,Vyo),e(q,Xyo),e(q,B1),e(B1,ace),e(ace,zyo),e(B1,Qyo),e(B1,hD),e(hD,Wyo),e(B1,Hyo),e(q,Uyo),e(q,P1),e(P1,nce),e(nce,Jyo),e(P1,Yyo),e(P1,pD),e(pD,Kyo),e(P1,Zyo),e(q,eLo),e(q,I1),e(I1,sce),e(sce,oLo),e(I1,rLo),e(I1,uD),e(uD,tLo),e(I1,aLo),e(q,nLo),e(q,q1),e(q1,lce),e(lce,sLo),e(q1,lLo),e(q1,_D),e(_D,iLo),e(q1,dLo),e(q,cLo),e(q,N1),e(N1,ice),e(ice,fLo),e(N1,mLo),e(N1,bD),e(bD,gLo),e(N1,hLo),e(q,pLo),e(q,j1),e(j1,dce),e(dce,uLo),e(j1,_Lo),e(j1,vD),e(vD,bLo),e(j1,vLo),e(q,FLo),e(q,D1),e(D1,cce),e(cce,TLo),e(D1,MLo),e(D1,FD),e(FD,ELo),e(D1,CLo),e(q,wLo),e(q,G1),e(G1,fce),e(fce,ALo),e(G1,yLo),e(G1,TD),e(TD,LLo),e(G1,xLo),e(q,$Lo),e(q,O1),e(O1,mce),e(mce,kLo),e(O1,SLo),e(O1,MD),e(MD,RLo),e(O1,BLo),e(q,PLo),e(q,V1),e(V1,gce),e(gce,ILo),e(V1,qLo),e(V1,ED),e(ED,NLo),e(V1,jLo),e(q,DLo),e(q,X1),e(X1,hce),e(hce,GLo),e(X1,OLo),e(X1,CD),e(CD,VLo),e(X1,XLo),e(q,zLo),e(q,z1),e(z1,pce),e(pce,QLo),e(z1,WLo),e(z1,wD),e(wD,HLo),e(z1,ULo),e(q,JLo),e(q,Q1),e(Q1,uce),e(uce,YLo),e(Q1,KLo),e(Q1,AD),e(AD,ZLo),e(Q1,e8o),e(q,o8o),e(q,W1),e(W1,_ce),e(_ce,r8o),e(W1,t8o),e(W1,yD),e(yD,a8o),e(W1,n8o),e(q,s8o),e(q,H1),e(H1,bce),e(bce,l8o),e(H1,i8o),e(H1,LD),e(LD,d8o),e(H1,c8o),e(q,f8o),e(q,U1),e(U1,vce),e(vce,m8o),e(U1,g8o),e(U1,xD),e(xD,h8o),e(U1,p8o),e(q,u8o),e(q,J1),e(J1,Fce),e(Fce,_8o),e(J1,b8o),e(J1,$D),e($D,v8o),e(J1,F8o),e(q,T8o),e(q,Y1),e(Y1,Tce),e(Tce,M8o),e(Y1,E8o),e(Y1,kD),e(kD,C8o),e(Y1,w8o),e(q,A8o),e(q,K1),e(K1,Mce),e(Mce,y8o),e(K1,L8o),e(K1,SD),e(SD,x8o),e(K1,$8o),e(q,k8o),e(q,Z1),e(Z1,Ece),e(Ece,S8o),e(Z1,R8o),e(Z1,RD),e(RD,B8o),e(Z1,P8o),e(q,I8o),e(q,eb),e(eb,Cce),e(Cce,q8o),e(eb,N8o),e(eb,BD),e(BD,j8o),e(eb,D8o),e(q,G8o),e(q,ob),e(ob,wce),e(wce,O8o),e(ob,V8o),e(ob,PD),e(PD,X8o),e(ob,z8o),e(q,Q8o),e(q,rb),e(rb,Ace),e(Ace,W8o),e(rb,H8o),e(rb,ID),e(ID,U8o),e(rb,J8o),e(q,Y8o),e(q,tb),e(tb,yce),e(yce,K8o),e(tb,Z8o),e(tb,qD),e(qD,exo),e(tb,oxo),e(Ze,rxo),e(Ze,ab),e(ab,txo),e(ab,Lce),e(Lce,axo),e(ab,nxo),e(ab,xce),e(xce,sxo),e(Ze,lxo),M(nb,Ze,null),b(f,vPe,_),b(f,ji,_),e(ji,sb),e(sb,$ce),M(DA,$ce,null),e(ji,ixo),e(ji,kce),e(kce,dxo),b(f,FPe,_),b(f,Bo,_),M(GA,Bo,null),e(Bo,cxo),e(Bo,Di),e(Di,fxo),e(Di,ND),e(ND,mxo),e(Di,gxo),e(Di,jD),e(jD,hxo),e(Di,pxo),e(Bo,uxo),e(Bo,OA),e(OA,_xo),e(OA,Sce),e(Sce,bxo),e(OA,vxo),e(Bo,Fxo),e(Bo,lt),M(VA,lt,null),e(lt,Txo),e(lt,Rce),e(Rce,Mxo),e(lt,Exo),e(lt,Gi),e(Gi,Cxo),e(Gi,Bce),e(Bce,wxo),e(Gi,Axo),e(Gi,DD),e(DD,yxo),e(Gi,Lxo),e(lt,xxo),M(lb,lt,null),e(Bo,$xo),e(Bo,eo),M(XA,eo,null),e(eo,kxo),e(eo,Pce),e(Pce,Sxo),e(eo,Rxo),e(eo,Sa),e(Sa,Bxo),e(Sa,Ice),e(Ice,Pxo),e(Sa,Ixo),e(Sa,qce),e(qce,qxo),e(Sa,Nxo),e(Sa,Nce),e(Nce,jxo),e(Sa,Dxo),e(eo,Gxo),e(eo,Y),e(Y,ib),e(ib,jce),e(jce,Oxo),e(ib,Vxo),e(ib,GD),e(GD,Xxo),e(ib,zxo),e(Y,Qxo),e(Y,db),e(db,Dce),e(Dce,Wxo),e(db,Hxo),e(db,OD),e(OD,Uxo),e(db,Jxo),e(Y,Yxo),e(Y,cb),e(cb,Gce),e(Gce,Kxo),e(cb,Zxo),e(cb,VD),e(VD,e$o),e(cb,o$o),e(Y,r$o),e(Y,fb),e(fb,Oce),e(Oce,t$o),e(fb,a$o),e(fb,XD),e(XD,n$o),e(fb,s$o),e(Y,l$o),e(Y,mb),e(mb,Vce),e(Vce,i$o),e(mb,d$o),e(mb,zD),e(zD,c$o),e(mb,f$o),e(Y,m$o),e(Y,gb),e(gb,Xce),e(Xce,g$o),e(gb,h$o),e(gb,QD),e(QD,p$o),e(gb,u$o),e(Y,_$o),e(Y,hb),e(hb,zce),e(zce,b$o),e(hb,v$o),e(hb,WD),e(WD,F$o),e(hb,T$o),e(Y,M$o),e(Y,pb),e(pb,Qce),e(Qce,E$o),e(pb,C$o),e(pb,HD),e(HD,w$o),e(pb,A$o),e(Y,y$o),e(Y,ub),e(ub,Wce),e(Wce,L$o),e(ub,x$o),e(ub,UD),e(UD,$$o),e(ub,k$o),e(Y,S$o),e(Y,_b),e(_b,Hce),e(Hce,R$o),e(_b,B$o),e(_b,JD),e(JD,P$o),e(_b,I$o),e(Y,q$o),e(Y,bb),e(bb,Uce),e(Uce,N$o),e(bb,j$o),e(bb,YD),e(YD,D$o),e(bb,G$o),e(Y,O$o),e(Y,vb),e(vb,Jce),e(Jce,V$o),e(vb,X$o),e(vb,KD),e(KD,z$o),e(vb,Q$o),e(Y,W$o),e(Y,Fb),e(Fb,Yce),e(Yce,H$o),e(Fb,U$o),e(Fb,ZD),e(ZD,J$o),e(Fb,Y$o),e(Y,K$o),e(Y,Tb),e(Tb,Kce),e(Kce,Z$o),e(Tb,eko),e(Tb,eG),e(eG,oko),e(Tb,rko),e(Y,tko),e(Y,Mb),e(Mb,Zce),e(Zce,ako),e(Mb,nko),e(Mb,oG),e(oG,sko),e(Mb,lko),e(Y,iko),e(Y,Eb),e(Eb,efe),e(efe,dko),e(Eb,cko),e(Eb,rG),e(rG,fko),e(Eb,mko),e(Y,gko),e(Y,Cb),e(Cb,ofe),e(ofe,hko),e(Cb,pko),e(Cb,tG),e(tG,uko),e(Cb,_ko),e(Y,bko),e(Y,wb),e(wb,rfe),e(rfe,vko),e(wb,Fko),e(wb,aG),e(aG,Tko),e(wb,Mko),e(Y,Eko),e(Y,Ab),e(Ab,tfe),e(tfe,Cko),e(Ab,wko),e(Ab,nG),e(nG,Ako),e(Ab,yko),e(Y,Lko),e(Y,yb),e(yb,afe),e(afe,xko),e(yb,$ko),e(yb,sG),e(sG,kko),e(yb,Sko),e(Y,Rko),e(Y,Lb),e(Lb,nfe),e(nfe,Bko),e(Lb,Pko),e(Lb,lG),e(lG,Iko),e(Lb,qko),e(Y,Nko),e(Y,xb),e(xb,sfe),e(sfe,jko),e(xb,Dko),e(xb,iG),e(iG,Gko),e(xb,Oko),e(Y,Vko),e(Y,$b),e($b,lfe),e(lfe,Xko),e($b,zko),e($b,dG),e(dG,Qko),e($b,Wko),e(Y,Hko),e(Y,kb),e(kb,ife),e(ife,Uko),e(kb,Jko),e(kb,cG),e(cG,Yko),e(kb,Kko),e(Y,Zko),e(Y,Sb),e(Sb,dfe),e(dfe,eSo),e(Sb,oSo),e(Sb,fG),e(fG,rSo),e(Sb,tSo),e(Y,aSo),e(Y,Rb),e(Rb,cfe),e(cfe,nSo),e(Rb,sSo),e(Rb,mG),e(mG,lSo),e(Rb,iSo),e(Y,dSo),e(Y,Bb),e(Bb,ffe),e(ffe,cSo),e(Bb,fSo),e(Bb,gG),e(gG,mSo),e(Bb,gSo),e(Y,hSo),e(Y,Pb),e(Pb,mfe),e(mfe,pSo),e(Pb,uSo),e(Pb,hG),e(hG,_So),e(Pb,bSo),e(eo,vSo),e(eo,Ib),e(Ib,FSo),e(Ib,gfe),e(gfe,TSo),e(Ib,MSo),e(Ib,hfe),e(hfe,ESo),e(eo,CSo),M(qb,eo,null),b(f,TPe,_),b(f,Oi,_),e(Oi,Nb),e(Nb,pfe),M(zA,pfe,null),e(Oi,wSo),e(Oi,ufe),e(ufe,ASo),b(f,MPe,_),b(f,Po,_),M(QA,Po,null),e(Po,ySo),e(Po,Vi),e(Vi,LSo),e(Vi,pG),e(pG,xSo),e(Vi,$So),e(Vi,uG),e(uG,kSo),e(Vi,SSo),e(Po,RSo),e(Po,WA),e(WA,BSo),e(WA,_fe),e(_fe,PSo),e(WA,ISo),e(Po,qSo),e(Po,it),M(HA,it,null),e(it,NSo),e(it,bfe),e(bfe,jSo),e(it,DSo),e(it,Xi),e(Xi,GSo),e(Xi,vfe),e(vfe,OSo),e(Xi,VSo),e(Xi,_G),e(_G,XSo),e(Xi,zSo),e(it,QSo),M(jb,it,null),e(Po,WSo),e(Po,oo),M(UA,oo,null),e(oo,HSo),e(oo,Ffe),e(Ffe,USo),e(oo,JSo),e(oo,Ra),e(Ra,YSo),e(Ra,Tfe),e(Tfe,KSo),e(Ra,ZSo),e(Ra,Mfe),e(Mfe,eRo),e(Ra,oRo),e(Ra,Efe),e(Efe,rRo),e(Ra,tRo),e(oo,aRo),e(oo,Yr),e(Yr,Db),e(Db,Cfe),e(Cfe,nRo),e(Db,sRo),e(Db,bG),e(bG,lRo),e(Db,iRo),e(Yr,dRo),e(Yr,Gb),e(Gb,wfe),e(wfe,cRo),e(Gb,fRo),e(Gb,vG),e(vG,mRo),e(Gb,gRo),e(Yr,hRo),e(Yr,Ob),e(Ob,Afe),e(Afe,pRo),e(Ob,uRo),e(Ob,FG),e(FG,_Ro),e(Ob,bRo),e(Yr,vRo),e(Yr,Vb),e(Vb,yfe),e(yfe,FRo),e(Vb,TRo),e(Vb,TG),e(TG,MRo),e(Vb,ERo),e(Yr,CRo),e(Yr,Xb),e(Xb,Lfe),e(Lfe,wRo),e(Xb,ARo),e(Xb,MG),e(MG,yRo),e(Xb,LRo),e(oo,xRo),e(oo,zb),e(zb,$Ro),e(zb,xfe),e(xfe,kRo),e(zb,SRo),e(zb,$fe),e($fe,RRo),e(oo,BRo),M(Qb,oo,null),b(f,EPe,_),b(f,zi,_),e(zi,Wb),e(Wb,kfe),M(JA,kfe,null),e(zi,PRo),e(zi,Sfe),e(Sfe,IRo),b(f,CPe,_),b(f,Io,_),M(YA,Io,null),e(Io,qRo),e(Io,Qi),e(Qi,NRo),e(Qi,EG),e(EG,jRo),e(Qi,DRo),e(Qi,CG),e(CG,GRo),e(Qi,ORo),e(Io,VRo),e(Io,KA),e(KA,XRo),e(KA,Rfe),e(Rfe,zRo),e(KA,QRo),e(Io,WRo),e(Io,dt),M(ZA,dt,null),e(dt,HRo),e(dt,Bfe),e(Bfe,URo),e(dt,JRo),e(dt,Wi),e(Wi,YRo),e(Wi,Pfe),e(Pfe,KRo),e(Wi,ZRo),e(Wi,wG),e(wG,eBo),e(Wi,oBo),e(dt,rBo),M(Hb,dt,null),e(Io,tBo),e(Io,ro),M(e6,ro,null),e(ro,aBo),e(ro,Ife),e(Ife,nBo),e(ro,sBo),e(ro,Ba),e(Ba,lBo),e(Ba,qfe),e(qfe,iBo),e(Ba,dBo),e(Ba,Nfe),e(Nfe,cBo),e(Ba,fBo),e(Ba,jfe),e(jfe,mBo),e(Ba,gBo),e(ro,hBo),e(ro,U),e(U,Ub),e(Ub,Dfe),e(Dfe,pBo),e(Ub,uBo),e(Ub,AG),e(AG,_Bo),e(Ub,bBo),e(U,vBo),e(U,Jb),e(Jb,Gfe),e(Gfe,FBo),e(Jb,TBo),e(Jb,yG),e(yG,MBo),e(Jb,EBo),e(U,CBo),e(U,Yb),e(Yb,Ofe),e(Ofe,wBo),e(Yb,ABo),e(Yb,LG),e(LG,yBo),e(Yb,LBo),e(U,xBo),e(U,Kb),e(Kb,Vfe),e(Vfe,$Bo),e(Kb,kBo),e(Kb,xG),e(xG,SBo),e(Kb,RBo),e(U,BBo),e(U,Zb),e(Zb,Xfe),e(Xfe,PBo),e(Zb,IBo),e(Zb,$G),e($G,qBo),e(Zb,NBo),e(U,jBo),e(U,ev),e(ev,zfe),e(zfe,DBo),e(ev,GBo),e(ev,kG),e(kG,OBo),e(ev,VBo),e(U,XBo),e(U,ov),e(ov,Qfe),e(Qfe,zBo),e(ov,QBo),e(ov,SG),e(SG,WBo),e(ov,HBo),e(U,UBo),e(U,rv),e(rv,Wfe),e(Wfe,JBo),e(rv,YBo),e(rv,RG),e(RG,KBo),e(rv,ZBo),e(U,ePo),e(U,tv),e(tv,Hfe),e(Hfe,oPo),e(tv,rPo),e(tv,BG),e(BG,tPo),e(tv,aPo),e(U,nPo),e(U,av),e(av,Ufe),e(Ufe,sPo),e(av,lPo),e(av,PG),e(PG,iPo),e(av,dPo),e(U,cPo),e(U,nv),e(nv,Jfe),e(Jfe,fPo),e(nv,mPo),e(nv,IG),e(IG,gPo),e(nv,hPo),e(U,pPo),e(U,sv),e(sv,Yfe),e(Yfe,uPo),e(sv,_Po),e(sv,qG),e(qG,bPo),e(sv,vPo),e(U,FPo),e(U,lv),e(lv,Kfe),e(Kfe,TPo),e(lv,MPo),e(lv,NG),e(NG,EPo),e(lv,CPo),e(U,wPo),e(U,iv),e(iv,Zfe),e(Zfe,APo),e(iv,yPo),e(iv,jG),e(jG,LPo),e(iv,xPo),e(U,$Po),e(U,dv),e(dv,eme),e(eme,kPo),e(dv,SPo),e(dv,DG),e(DG,RPo),e(dv,BPo),e(U,PPo),e(U,cv),e(cv,ome),e(ome,IPo),e(cv,qPo),e(cv,GG),e(GG,NPo),e(cv,jPo),e(U,DPo),e(U,fv),e(fv,rme),e(rme,GPo),e(fv,OPo),e(fv,OG),e(OG,VPo),e(fv,XPo),e(U,zPo),e(U,mv),e(mv,tme),e(tme,QPo),e(mv,WPo),e(mv,VG),e(VG,HPo),e(mv,UPo),e(U,JPo),e(U,gv),e(gv,ame),e(ame,YPo),e(gv,KPo),e(gv,XG),e(XG,ZPo),e(gv,eIo),e(U,oIo),e(U,hv),e(hv,nme),e(nme,rIo),e(hv,tIo),e(hv,zG),e(zG,aIo),e(hv,nIo),e(U,sIo),e(U,pv),e(pv,sme),e(sme,lIo),e(pv,iIo),e(pv,QG),e(QG,dIo),e(pv,cIo),e(U,fIo),e(U,uv),e(uv,lme),e(lme,mIo),e(uv,gIo),e(uv,WG),e(WG,hIo),e(uv,pIo),e(U,uIo),e(U,_v),e(_v,ime),e(ime,_Io),e(_v,bIo),e(_v,HG),e(HG,vIo),e(_v,FIo),e(U,TIo),e(U,bv),e(bv,dme),e(dme,MIo),e(bv,EIo),e(bv,UG),e(UG,CIo),e(bv,wIo),e(U,AIo),e(U,vv),e(vv,cme),e(cme,yIo),e(vv,LIo),e(vv,JG),e(JG,xIo),e(vv,$Io),e(U,kIo),e(U,Fv),e(Fv,fme),e(fme,SIo),e(Fv,RIo),e(Fv,YG),e(YG,BIo),e(Fv,PIo),e(U,IIo),e(U,Tv),e(Tv,mme),e(mme,qIo),e(Tv,NIo),e(Tv,KG),e(KG,jIo),e(Tv,DIo),e(U,GIo),e(U,Mv),e(Mv,gme),e(gme,OIo),e(Mv,VIo),e(Mv,ZG),e(ZG,XIo),e(Mv,zIo),e(U,QIo),e(U,Ev),e(Ev,hme),e(hme,WIo),e(Ev,HIo),e(Ev,eO),e(eO,UIo),e(Ev,JIo),e(U,YIo),e(U,Cv),e(Cv,pme),e(pme,KIo),e(Cv,ZIo),e(Cv,oO),e(oO,eqo),e(Cv,oqo),e(U,rqo),e(U,wv),e(wv,ume),e(ume,tqo),e(wv,aqo),e(wv,rO),e(rO,nqo),e(wv,sqo),e(U,lqo),e(U,Av),e(Av,_me),e(_me,iqo),e(Av,dqo),e(Av,tO),e(tO,cqo),e(Av,fqo),e(U,mqo),e(U,yv),e(yv,bme),e(bme,gqo),e(yv,hqo),e(yv,aO),e(aO,pqo),e(yv,uqo),e(ro,_qo),e(ro,Lv),e(Lv,bqo),e(Lv,vme),e(vme,vqo),e(Lv,Fqo),e(Lv,Fme),e(Fme,Tqo),e(ro,Mqo),M(xv,ro,null),b(f,wPe,_),b(f,Hi,_),e(Hi,$v),e($v,Tme),M(o6,Tme,null),e(Hi,Eqo),e(Hi,Mme),e(Mme,Cqo),b(f,APe,_),b(f,qo,_),M(r6,qo,null),e(qo,wqo),e(qo,Ui),e(Ui,Aqo),e(Ui,nO),e(nO,yqo),e(Ui,Lqo),e(Ui,sO),e(sO,xqo),e(Ui,$qo),e(qo,kqo),e(qo,t6),e(t6,Sqo),e(t6,Eme),e(Eme,Rqo),e(t6,Bqo),e(qo,Pqo),e(qo,ct),M(a6,ct,null),e(ct,Iqo),e(ct,Cme),e(Cme,qqo),e(ct,Nqo),e(ct,Ji),e(Ji,jqo),e(Ji,wme),e(wme,Dqo),e(Ji,Gqo),e(Ji,lO),e(lO,Oqo),e(Ji,Vqo),e(ct,Xqo),M(kv,ct,null),e(qo,zqo),e(qo,to),M(n6,to,null),e(to,Qqo),e(to,Ame),e(Ame,Wqo),e(to,Hqo),e(to,Pa),e(Pa,Uqo),e(Pa,yme),e(yme,Jqo),e(Pa,Yqo),e(Pa,Lme),e(Lme,Kqo),e(Pa,Zqo),e(Pa,xme),e(xme,eNo),e(Pa,oNo),e(to,rNo),e(to,O),e(O,Sv),e(Sv,$me),e($me,tNo),e(Sv,aNo),e(Sv,iO),e(iO,nNo),e(Sv,sNo),e(O,lNo),e(O,Rv),e(Rv,kme),e(kme,iNo),e(Rv,dNo),e(Rv,dO),e(dO,cNo),e(Rv,fNo),e(O,mNo),e(O,Bv),e(Bv,Sme),e(Sme,gNo),e(Bv,hNo),e(Bv,cO),e(cO,pNo),e(Bv,uNo),e(O,_No),e(O,Pv),e(Pv,Rme),e(Rme,bNo),e(Pv,vNo),e(Pv,fO),e(fO,FNo),e(Pv,TNo),e(O,MNo),e(O,Iv),e(Iv,Bme),e(Bme,ENo),e(Iv,CNo),e(Iv,mO),e(mO,wNo),e(Iv,ANo),e(O,yNo),e(O,qv),e(qv,Pme),e(Pme,LNo),e(qv,xNo),e(qv,gO),e(gO,$No),e(qv,kNo),e(O,SNo),e(O,Nv),e(Nv,Ime),e(Ime,RNo),e(Nv,BNo),e(Nv,hO),e(hO,PNo),e(Nv,INo),e(O,qNo),e(O,jv),e(jv,qme),e(qme,NNo),e(jv,jNo),e(jv,pO),e(pO,DNo),e(jv,GNo),e(O,ONo),e(O,Dv),e(Dv,Nme),e(Nme,VNo),e(Dv,XNo),e(Dv,uO),e(uO,zNo),e(Dv,QNo),e(O,WNo),e(O,Gv),e(Gv,jme),e(jme,HNo),e(Gv,UNo),e(Gv,_O),e(_O,JNo),e(Gv,YNo),e(O,KNo),e(O,Ov),e(Ov,Dme),e(Dme,ZNo),e(Ov,ejo),e(Ov,bO),e(bO,ojo),e(Ov,rjo),e(O,tjo),e(O,Vv),e(Vv,Gme),e(Gme,ajo),e(Vv,njo),e(Vv,vO),e(vO,sjo),e(Vv,ljo),e(O,ijo),e(O,Xv),e(Xv,Ome),e(Ome,djo),e(Xv,cjo),e(Xv,FO),e(FO,fjo),e(Xv,mjo),e(O,gjo),e(O,zv),e(zv,Vme),e(Vme,hjo),e(zv,pjo),e(zv,TO),e(TO,ujo),e(zv,_jo),e(O,bjo),e(O,Qv),e(Qv,Xme),e(Xme,vjo),e(Qv,Fjo),e(Qv,MO),e(MO,Tjo),e(Qv,Mjo),e(O,Ejo),e(O,Wv),e(Wv,zme),e(zme,Cjo),e(Wv,wjo),e(Wv,EO),e(EO,Ajo),e(Wv,yjo),e(O,Ljo),e(O,Hv),e(Hv,Qme),e(Qme,xjo),e(Hv,$jo),e(Hv,CO),e(CO,kjo),e(Hv,Sjo),e(O,Rjo),e(O,Uv),e(Uv,Wme),e(Wme,Bjo),e(Uv,Pjo),e(Uv,wO),e(wO,Ijo),e(Uv,qjo),e(O,Njo),e(O,Jv),e(Jv,Hme),e(Hme,jjo),e(Jv,Djo),e(Jv,AO),e(AO,Gjo),e(Jv,Ojo),e(O,Vjo),e(O,Yv),e(Yv,Ume),e(Ume,Xjo),e(Yv,zjo),e(Yv,yO),e(yO,Qjo),e(Yv,Wjo),e(O,Hjo),e(O,Kv),e(Kv,Jme),e(Jme,Ujo),e(Kv,Jjo),e(Kv,LO),e(LO,Yjo),e(Kv,Kjo),e(O,Zjo),e(O,Zv),e(Zv,Yme),e(Yme,eDo),e(Zv,oDo),e(Zv,xO),e(xO,rDo),e(Zv,tDo),e(O,aDo),e(O,eF),e(eF,Kme),e(Kme,nDo),e(eF,sDo),e(eF,$O),e($O,lDo),e(eF,iDo),e(O,dDo),e(O,oF),e(oF,Zme),e(Zme,cDo),e(oF,fDo),e(oF,kO),e(kO,mDo),e(oF,gDo),e(O,hDo),e(O,rF),e(rF,ege),e(ege,pDo),e(rF,uDo),e(rF,SO),e(SO,_Do),e(rF,bDo),e(O,vDo),e(O,tF),e(tF,oge),e(oge,FDo),e(tF,TDo),e(tF,RO),e(RO,MDo),e(tF,EDo),e(O,CDo),e(O,aF),e(aF,rge),e(rge,wDo),e(aF,ADo),e(aF,BO),e(BO,yDo),e(aF,LDo),e(O,xDo),e(O,nF),e(nF,tge),e(tge,$Do),e(nF,kDo),e(nF,PO),e(PO,SDo),e(nF,RDo),e(O,BDo),e(O,sF),e(sF,age),e(age,PDo),e(sF,IDo),e(sF,IO),e(IO,qDo),e(sF,NDo),e(O,jDo),e(O,lF),e(lF,nge),e(nge,DDo),e(lF,GDo),e(lF,qO),e(qO,ODo),e(lF,VDo),e(O,XDo),e(O,iF),e(iF,sge),e(sge,zDo),e(iF,QDo),e(iF,NO),e(NO,WDo),e(iF,HDo),e(O,UDo),e(O,dF),e(dF,lge),e(lge,JDo),e(dF,YDo),e(dF,jO),e(jO,KDo),e(dF,ZDo),e(O,eGo),e(O,cF),e(cF,ige),e(ige,oGo),e(cF,rGo),e(cF,DO),e(DO,tGo),e(cF,aGo),e(O,nGo),e(O,fF),e(fF,dge),e(dge,sGo),e(fF,lGo),e(fF,GO),e(GO,iGo),e(fF,dGo),e(O,cGo),e(O,mF),e(mF,cge),e(cge,fGo),e(mF,mGo),e(mF,OO),e(OO,gGo),e(mF,hGo),e(O,pGo),e(O,gF),e(gF,fge),e(fge,uGo),e(gF,_Go),e(gF,VO),e(VO,bGo),e(gF,vGo),e(O,FGo),e(O,hF),e(hF,mge),e(mge,TGo),e(hF,MGo),e(hF,XO),e(XO,EGo),e(hF,CGo),e(O,wGo),e(O,pF),e(pF,gge),e(gge,AGo),e(pF,yGo),e(pF,zO),e(zO,LGo),e(pF,xGo),e(O,$Go),e(O,uF),e(uF,hge),e(hge,kGo),e(uF,SGo),e(uF,QO),e(QO,RGo),e(uF,BGo),e(to,PGo),e(to,_F),e(_F,IGo),e(_F,pge),e(pge,qGo),e(_F,NGo),e(_F,uge),e(uge,jGo),e(to,DGo),M(bF,to,null),b(f,yPe,_),b(f,Yi,_),e(Yi,vF),e(vF,_ge),M(s6,_ge,null),e(Yi,GGo),e(Yi,bge),e(bge,OGo),b(f,LPe,_),b(f,No,_),M(l6,No,null),e(No,VGo),e(No,Ki),e(Ki,XGo),e(Ki,WO),e(WO,zGo),e(Ki,QGo),e(Ki,HO),e(HO,WGo),e(Ki,HGo),e(No,UGo),e(No,i6),e(i6,JGo),e(i6,vge),e(vge,YGo),e(i6,KGo),e(No,ZGo),e(No,ft),M(d6,ft,null),e(ft,eOo),e(ft,Fge),e(Fge,oOo),e(ft,rOo),e(ft,Zi),e(Zi,tOo),e(Zi,Tge),e(Tge,aOo),e(Zi,nOo),e(Zi,UO),e(UO,sOo),e(Zi,lOo),e(ft,iOo),M(FF,ft,null),e(No,dOo),e(No,ao),M(c6,ao,null),e(ao,cOo),e(ao,Mge),e(Mge,fOo),e(ao,mOo),e(ao,Ia),e(Ia,gOo),e(Ia,Ege),e(Ege,hOo),e(Ia,pOo),e(Ia,Cge),e(Cge,uOo),e(Ia,_Oo),e(Ia,wge),e(wge,bOo),e(Ia,vOo),e(ao,FOo),e(ao,Age),e(Age,TF),e(TF,yge),e(yge,TOo),e(TF,MOo),e(TF,JO),e(JO,EOo),e(TF,COo),e(ao,wOo),e(ao,MF),e(MF,AOo),e(MF,Lge),e(Lge,yOo),e(MF,LOo),e(MF,xge),e(xge,xOo),e(ao,$Oo),M(EF,ao,null),b(f,xPe,_),b(f,ed,_),e(ed,CF),e(CF,$ge),M(f6,$ge,null),e(ed,kOo),e(ed,kge),e(kge,SOo),b(f,$Pe,_),b(f,jo,_),M(m6,jo,null),e(jo,ROo),e(jo,od),e(od,BOo),e(od,YO),e(YO,POo),e(od,IOo),e(od,KO),e(KO,qOo),e(od,NOo),e(jo,jOo),e(jo,g6),e(g6,DOo),e(g6,Sge),e(Sge,GOo),e(g6,OOo),e(jo,VOo),e(jo,mt),M(h6,mt,null),e(mt,XOo),e(mt,Rge),e(Rge,zOo),e(mt,QOo),e(mt,rd),e(rd,WOo),e(rd,Bge),e(Bge,HOo),e(rd,UOo),e(rd,ZO),e(ZO,JOo),e(rd,YOo),e(mt,KOo),M(wF,mt,null),e(jo,ZOo),e(jo,no),M(p6,no,null),e(no,eVo),e(no,Pge),e(Pge,oVo),e(no,rVo),e(no,qa),e(qa,tVo),e(qa,Ige),e(Ige,aVo),e(qa,nVo),e(qa,qge),e(qge,sVo),e(qa,lVo),e(qa,Nge),e(Nge,iVo),e(qa,dVo),e(no,cVo),e(no,ve),e(ve,AF),e(AF,jge),e(jge,fVo),e(AF,mVo),e(AF,eV),e(eV,gVo),e(AF,hVo),e(ve,pVo),e(ve,yF),e(yF,Dge),e(Dge,uVo),e(yF,_Vo),e(yF,oV),e(oV,bVo),e(yF,vVo),e(ve,FVo),e(ve,LF),e(LF,Gge),e(Gge,TVo),e(LF,MVo),e(LF,rV),e(rV,EVo),e(LF,CVo),e(ve,wVo),e(ve,Rs),e(Rs,Oge),e(Oge,AVo),e(Rs,yVo),e(Rs,tV),e(tV,LVo),e(Rs,xVo),e(Rs,aV),e(aV,$Vo),e(Rs,kVo),e(ve,SVo),e(ve,xF),e(xF,Vge),e(Vge,RVo),e(xF,BVo),e(xF,nV),e(nV,PVo),e(xF,IVo),e(ve,qVo),e(ve,gt),e(gt,Xge),e(Xge,NVo),e(gt,jVo),e(gt,sV),e(sV,DVo),e(gt,GVo),e(gt,lV),e(lV,OVo),e(gt,VVo),e(gt,iV),e(iV,XVo),e(gt,zVo),e(ve,QVo),e(ve,$F),e($F,zge),e(zge,WVo),e($F,HVo),e($F,dV),e(dV,UVo),e($F,JVo),e(ve,YVo),e(ve,kF),e(kF,Qge),e(Qge,KVo),e(kF,ZVo),e(kF,cV),e(cV,eXo),e(kF,oXo),e(ve,rXo),e(ve,SF),e(SF,Wge),e(Wge,tXo),e(SF,aXo),e(SF,fV),e(fV,nXo),e(SF,sXo),e(ve,lXo),e(ve,RF),e(RF,Hge),e(Hge,iXo),e(RF,dXo),e(RF,mV),e(mV,cXo),e(RF,fXo),e(ve,mXo),e(ve,BF),e(BF,Uge),e(Uge,gXo),e(BF,hXo),e(BF,gV),e(gV,pXo),e(BF,uXo),e(ve,_Xo),e(ve,PF),e(PF,Jge),e(Jge,bXo),e(PF,vXo),e(PF,hV),e(hV,FXo),e(PF,TXo),e(ve,MXo),e(ve,IF),e(IF,Yge),e(Yge,EXo),e(IF,CXo),e(IF,pV),e(pV,wXo),e(IF,AXo),e(no,yXo),e(no,qF),e(qF,LXo),e(qF,Kge),e(Kge,xXo),e(qF,$Xo),e(qF,Zge),e(Zge,kXo),e(no,SXo),M(NF,no,null),b(f,kPe,_),b(f,td,_),e(td,jF),e(jF,ehe),M(u6,ehe,null),e(td,RXo),e(td,ohe),e(ohe,BXo),b(f,SPe,_),b(f,Do,_),M(_6,Do,null),e(Do,PXo),e(Do,ad),e(ad,IXo),e(ad,uV),e(uV,qXo),e(ad,NXo),e(ad,_V),e(_V,jXo),e(ad,DXo),e(Do,GXo),e(Do,b6),e(b6,OXo),e(b6,rhe),e(rhe,VXo),e(b6,XXo),e(Do,zXo),e(Do,ht),M(v6,ht,null),e(ht,QXo),e(ht,the),e(the,WXo),e(ht,HXo),e(ht,nd),e(nd,UXo),e(nd,ahe),e(ahe,JXo),e(nd,YXo),e(nd,bV),e(bV,KXo),e(nd,ZXo),e(ht,ezo),M(DF,ht,null),e(Do,ozo),e(Do,so),M(F6,so,null),e(so,rzo),e(so,nhe),e(nhe,tzo),e(so,azo),e(so,Na),e(Na,nzo),e(Na,she),e(she,szo),e(Na,lzo),e(Na,lhe),e(lhe,izo),e(Na,dzo),e(Na,ihe),e(ihe,czo),e(Na,fzo),e(so,mzo),e(so,dhe),e(dhe,GF),e(GF,che),e(che,gzo),e(GF,hzo),e(GF,vV),e(vV,pzo),e(GF,uzo),e(so,_zo),e(so,OF),e(OF,bzo),e(OF,fhe),e(fhe,vzo),e(OF,Fzo),e(OF,mhe),e(mhe,Tzo),e(so,Mzo),M(VF,so,null),b(f,RPe,_),b(f,sd,_),e(sd,XF),e(XF,ghe),M(T6,ghe,null),e(sd,Ezo),e(sd,hhe),e(hhe,Czo),b(f,BPe,_),b(f,Go,_),M(M6,Go,null),e(Go,wzo),e(Go,ld),e(ld,Azo),e(ld,FV),e(FV,yzo),e(ld,Lzo),e(ld,TV),e(TV,xzo),e(ld,$zo),e(Go,kzo),e(Go,E6),e(E6,Szo),e(E6,phe),e(phe,Rzo),e(E6,Bzo),e(Go,Pzo),e(Go,pt),M(C6,pt,null),e(pt,Izo),e(pt,uhe),e(uhe,qzo),e(pt,Nzo),e(pt,id),e(id,jzo),e(id,_he),e(_he,Dzo),e(id,Gzo),e(id,MV),e(MV,Ozo),e(id,Vzo),e(pt,Xzo),M(zF,pt,null),e(Go,zzo),e(Go,lo),M(w6,lo,null),e(lo,Qzo),e(lo,bhe),e(bhe,Wzo),e(lo,Hzo),e(lo,ja),e(ja,Uzo),e(ja,vhe),e(vhe,Jzo),e(ja,Yzo),e(ja,Fhe),e(Fhe,Kzo),e(ja,Zzo),e(ja,The),e(The,eQo),e(ja,oQo),e(lo,rQo),e(lo,Ne),e(Ne,QF),e(QF,Mhe),e(Mhe,tQo),e(QF,aQo),e(QF,EV),e(EV,nQo),e(QF,sQo),e(Ne,lQo),e(Ne,WF),e(WF,Ehe),e(Ehe,iQo),e(WF,dQo),e(WF,CV),e(CV,cQo),e(WF,fQo),e(Ne,mQo),e(Ne,HF),e(HF,Che),e(Che,gQo),e(HF,hQo),e(HF,wV),e(wV,pQo),e(HF,uQo),e(Ne,_Qo),e(Ne,UF),e(UF,whe),e(whe,bQo),e(UF,vQo),e(UF,AV),e(AV,FQo),e(UF,TQo),e(Ne,MQo),e(Ne,JF),e(JF,Ahe),e(Ahe,EQo),e(JF,CQo),e(JF,yV),e(yV,wQo),e(JF,AQo),e(Ne,yQo),e(Ne,YF),e(YF,yhe),e(yhe,LQo),e(YF,xQo),e(YF,LV),e(LV,$Qo),e(YF,kQo),e(Ne,SQo),e(Ne,KF),e(KF,Lhe),e(Lhe,RQo),e(KF,BQo),e(KF,xV),e(xV,PQo),e(KF,IQo),e(Ne,qQo),e(Ne,ZF),e(ZF,xhe),e(xhe,NQo),e(ZF,jQo),e(ZF,$V),e($V,DQo),e(ZF,GQo),e(lo,OQo),e(lo,e0),e(e0,VQo),e(e0,$he),e($he,XQo),e(e0,zQo),e(e0,khe),e(khe,QQo),e(lo,WQo),M(o0,lo,null),b(f,PPe,_),b(f,dd,_),e(dd,r0),e(r0,She),M(A6,She,null),e(dd,HQo),e(dd,Rhe),e(Rhe,UQo),b(f,IPe,_),b(f,Oo,_),M(y6,Oo,null),e(Oo,JQo),e(Oo,cd),e(cd,YQo),e(cd,kV),e(kV,KQo),e(cd,ZQo),e(cd,SV),e(SV,eWo),e(cd,oWo),e(Oo,rWo),e(Oo,L6),e(L6,tWo),e(L6,Bhe),e(Bhe,aWo),e(L6,nWo),e(Oo,sWo),e(Oo,ut),M(x6,ut,null),e(ut,lWo),e(ut,Phe),e(Phe,iWo),e(ut,dWo),e(ut,fd),e(fd,cWo),e(fd,Ihe),e(Ihe,fWo),e(fd,mWo),e(fd,RV),e(RV,gWo),e(fd,hWo),e(ut,pWo),M(t0,ut,null),e(Oo,uWo),e(Oo,io),M($6,io,null),e(io,_Wo),e(io,qhe),e(qhe,bWo),e(io,vWo),e(io,Da),e(Da,FWo),e(Da,Nhe),e(Nhe,TWo),e(Da,MWo),e(Da,jhe),e(jhe,EWo),e(Da,CWo),e(Da,Dhe),e(Dhe,wWo),e(Da,AWo),e(io,yWo),e(io,Ga),e(Ga,a0),e(a0,Ghe),e(Ghe,LWo),e(a0,xWo),e(a0,BV),e(BV,$Wo),e(a0,kWo),e(Ga,SWo),e(Ga,n0),e(n0,Ohe),e(Ohe,RWo),e(n0,BWo),e(n0,PV),e(PV,PWo),e(n0,IWo),e(Ga,qWo),e(Ga,s0),e(s0,Vhe),e(Vhe,NWo),e(s0,jWo),e(s0,IV),e(IV,DWo),e(s0,GWo),e(Ga,OWo),e(Ga,l0),e(l0,Xhe),e(Xhe,VWo),e(l0,XWo),e(l0,qV),e(qV,zWo),e(l0,QWo),e(io,WWo),e(io,i0),e(i0,HWo),e(i0,zhe),e(zhe,UWo),e(i0,JWo),e(i0,Qhe),e(Qhe,YWo),e(io,KWo),M(d0,io,null),b(f,qPe,_),b(f,md,_),e(md,c0),e(c0,Whe),M(k6,Whe,null),e(md,ZWo),e(md,Hhe),e(Hhe,eHo),b(f,NPe,_),b(f,Vo,_),M(S6,Vo,null),e(Vo,oHo),e(Vo,gd),e(gd,rHo),e(gd,NV),e(NV,tHo),e(gd,aHo),e(gd,jV),e(jV,nHo),e(gd,sHo),e(Vo,lHo),e(Vo,R6),e(R6,iHo),e(R6,Uhe),e(Uhe,dHo),e(R6,cHo),e(Vo,fHo),e(Vo,_t),M(B6,_t,null),e(_t,mHo),e(_t,Jhe),e(Jhe,gHo),e(_t,hHo),e(_t,hd),e(hd,pHo),e(hd,Yhe),e(Yhe,uHo),e(hd,_Ho),e(hd,DV),e(DV,bHo),e(hd,vHo),e(_t,FHo),M(f0,_t,null),e(Vo,THo),e(Vo,co),M(P6,co,null),e(co,MHo),e(co,Khe),e(Khe,EHo),e(co,CHo),e(co,Oa),e(Oa,wHo),e(Oa,Zhe),e(Zhe,AHo),e(Oa,yHo),e(Oa,epe),e(epe,LHo),e(Oa,xHo),e(Oa,ope),e(ope,$Ho),e(Oa,kHo),e(co,SHo),e(co,je),e(je,m0),e(m0,rpe),e(rpe,RHo),e(m0,BHo),e(m0,GV),e(GV,PHo),e(m0,IHo),e(je,qHo),e(je,g0),e(g0,tpe),e(tpe,NHo),e(g0,jHo),e(g0,OV),e(OV,DHo),e(g0,GHo),e(je,OHo),e(je,h0),e(h0,ape),e(ape,VHo),e(h0,XHo),e(h0,VV),e(VV,zHo),e(h0,QHo),e(je,WHo),e(je,p0),e(p0,npe),e(npe,HHo),e(p0,UHo),e(p0,XV),e(XV,JHo),e(p0,YHo),e(je,KHo),e(je,u0),e(u0,spe),e(spe,ZHo),e(u0,eUo),e(u0,zV),e(zV,oUo),e(u0,rUo),e(je,tUo),e(je,_0),e(_0,lpe),e(lpe,aUo),e(_0,nUo),e(_0,QV),e(QV,sUo),e(_0,lUo),e(je,iUo),e(je,b0),e(b0,ipe),e(ipe,dUo),e(b0,cUo),e(b0,WV),e(WV,fUo),e(b0,mUo),e(je,gUo),e(je,v0),e(v0,dpe),e(dpe,hUo),e(v0,pUo),e(v0,HV),e(HV,uUo),e(v0,_Uo),e(co,bUo),e(co,F0),e(F0,vUo),e(F0,cpe),e(cpe,FUo),e(F0,TUo),e(F0,fpe),e(fpe,MUo),e(co,EUo),M(T0,co,null),b(f,jPe,_),b(f,pd,_),e(pd,M0),e(M0,mpe),M(I6,mpe,null),e(pd,CUo),e(pd,gpe),e(gpe,wUo),b(f,DPe,_),b(f,Xo,_),M(q6,Xo,null),e(Xo,AUo),e(Xo,ud),e(ud,yUo),e(ud,UV),e(UV,LUo),e(ud,xUo),e(ud,JV),e(JV,$Uo),e(ud,kUo),e(Xo,SUo),e(Xo,N6),e(N6,RUo),e(N6,hpe),e(hpe,BUo),e(N6,PUo),e(Xo,IUo),e(Xo,bt),M(j6,bt,null),e(bt,qUo),e(bt,ppe),e(ppe,NUo),e(bt,jUo),e(bt,_d),e(_d,DUo),e(_d,upe),e(upe,GUo),e(_d,OUo),e(_d,YV),e(YV,VUo),e(_d,XUo),e(bt,zUo),M(E0,bt,null),e(Xo,QUo),e(Xo,fo),M(D6,fo,null),e(fo,WUo),e(fo,_pe),e(_pe,HUo),e(fo,UUo),e(fo,Va),e(Va,JUo),e(Va,bpe),e(bpe,YUo),e(Va,KUo),e(Va,vpe),e(vpe,ZUo),e(Va,eJo),e(Va,Fpe),e(Fpe,oJo),e(Va,rJo),e(fo,tJo),e(fo,G6),e(G6,C0),e(C0,Tpe),e(Tpe,aJo),e(C0,nJo),e(C0,KV),e(KV,sJo),e(C0,lJo),e(G6,iJo),e(G6,w0),e(w0,Mpe),e(Mpe,dJo),e(w0,cJo),e(w0,ZV),e(ZV,fJo),e(w0,mJo),e(fo,gJo),e(fo,A0),e(A0,hJo),e(A0,Epe),e(Epe,pJo),e(A0,uJo),e(A0,Cpe),e(Cpe,_Jo),e(fo,bJo),M(y0,fo,null),b(f,GPe,_),b(f,bd,_),e(bd,L0),e(L0,wpe),M(O6,wpe,null),e(bd,vJo),e(bd,Ape),e(Ape,FJo),b(f,OPe,_),b(f,zo,_),M(V6,zo,null),e(zo,TJo),e(zo,vd),e(vd,MJo),e(vd,eX),e(eX,EJo),e(vd,CJo),e(vd,oX),e(oX,wJo),e(vd,AJo),e(zo,yJo),e(zo,X6),e(X6,LJo),e(X6,ype),e(ype,xJo),e(X6,$Jo),e(zo,kJo),e(zo,vt),M(z6,vt,null),e(vt,SJo),e(vt,Lpe),e(Lpe,RJo),e(vt,BJo),e(vt,Fd),e(Fd,PJo),e(Fd,xpe),e(xpe,IJo),e(Fd,qJo),e(Fd,rX),e(rX,NJo),e(Fd,jJo),e(vt,DJo),M(x0,vt,null),e(zo,GJo),e(zo,mo),M(Q6,mo,null),e(mo,OJo),e(mo,$pe),e($pe,VJo),e(mo,XJo),e(mo,Xa),e(Xa,zJo),e(Xa,kpe),e(kpe,QJo),e(Xa,WJo),e(Xa,Spe),e(Spe,HJo),e(Xa,UJo),e(Xa,Rpe),e(Rpe,JJo),e(Xa,YJo),e(mo,KJo),e(mo,za),e(za,$0),e($0,Bpe),e(Bpe,ZJo),e($0,eYo),e($0,tX),e(tX,oYo),e($0,rYo),e(za,tYo),e(za,k0),e(k0,Ppe),e(Ppe,aYo),e(k0,nYo),e(k0,aX),e(aX,sYo),e(k0,lYo),e(za,iYo),e(za,S0),e(S0,Ipe),e(Ipe,dYo),e(S0,cYo),e(S0,nX),e(nX,fYo),e(S0,mYo),e(za,gYo),e(za,R0),e(R0,qpe),e(qpe,hYo),e(R0,pYo),e(R0,sX),e(sX,uYo),e(R0,_Yo),e(mo,bYo),e(mo,B0),e(B0,vYo),e(B0,Npe),e(Npe,FYo),e(B0,TYo),e(B0,jpe),e(jpe,MYo),e(mo,EYo),M(P0,mo,null),b(f,VPe,_),b(f,Td,_),e(Td,I0),e(I0,Dpe),M(W6,Dpe,null),e(Td,CYo),e(Td,Gpe),e(Gpe,wYo),b(f,XPe,_),b(f,Qo,_),M(H6,Qo,null),e(Qo,AYo),e(Qo,Md),e(Md,yYo),e(Md,lX),e(lX,LYo),e(Md,xYo),e(Md,iX),e(iX,$Yo),e(Md,kYo),e(Qo,SYo),e(Qo,U6),e(U6,RYo),e(U6,Ope),e(Ope,BYo),e(U6,PYo),e(Qo,IYo),e(Qo,Ft),M(J6,Ft,null),e(Ft,qYo),e(Ft,Vpe),e(Vpe,NYo),e(Ft,jYo),e(Ft,Ed),e(Ed,DYo),e(Ed,Xpe),e(Xpe,GYo),e(Ed,OYo),e(Ed,dX),e(dX,VYo),e(Ed,XYo),e(Ft,zYo),M(q0,Ft,null),e(Qo,QYo),e(Qo,go),M(Y6,go,null),e(go,WYo),e(go,zpe),e(zpe,HYo),e(go,UYo),e(go,Qa),e(Qa,JYo),e(Qa,Qpe),e(Qpe,YYo),e(Qa,KYo),e(Qa,Wpe),e(Wpe,ZYo),e(Qa,eKo),e(Qa,Hpe),e(Hpe,oKo),e(Qa,rKo),e(go,tKo),e(go,Cd),e(Cd,N0),e(N0,Upe),e(Upe,aKo),e(N0,nKo),e(N0,cX),e(cX,sKo),e(N0,lKo),e(Cd,iKo),e(Cd,j0),e(j0,Jpe),e(Jpe,dKo),e(j0,cKo),e(j0,fX),e(fX,fKo),e(j0,mKo),e(Cd,gKo),e(Cd,D0),e(D0,Ype),e(Ype,hKo),e(D0,pKo),e(D0,mX),e(mX,uKo),e(D0,_Ko),e(go,bKo),e(go,G0),e(G0,vKo),e(G0,Kpe),e(Kpe,FKo),e(G0,TKo),e(G0,Zpe),e(Zpe,MKo),e(go,EKo),M(O0,go,null),b(f,zPe,_),b(f,wd,_),e(wd,V0),e(V0,eue),M(K6,eue,null),e(wd,CKo),e(wd,oue),e(oue,wKo),b(f,QPe,_),b(f,Wo,_),M(Z6,Wo,null),e(Wo,AKo),e(Wo,Ad),e(Ad,yKo),e(Ad,gX),e(gX,LKo),e(Ad,xKo),e(Ad,hX),e(hX,$Ko),e(Ad,kKo),e(Wo,SKo),e(Wo,ey),e(ey,RKo),e(ey,rue),e(rue,BKo),e(ey,PKo),e(Wo,IKo),e(Wo,Tt),M(oy,Tt,null),e(Tt,qKo),e(Tt,tue),e(tue,NKo),e(Tt,jKo),e(Tt,yd),e(yd,DKo),e(yd,aue),e(aue,GKo),e(yd,OKo),e(yd,pX),e(pX,VKo),e(yd,XKo),e(Tt,zKo),M(X0,Tt,null),e(Wo,QKo),e(Wo,ho),M(ry,ho,null),e(ho,WKo),e(ho,nue),e(nue,HKo),e(ho,UKo),e(ho,Wa),e(Wa,JKo),e(Wa,sue),e(sue,YKo),e(Wa,KKo),e(Wa,lue),e(lue,ZKo),e(Wa,eZo),e(Wa,iue),e(iue,oZo),e(Wa,rZo),e(ho,tZo),e(ho,ty),e(ty,z0),e(z0,due),e(due,aZo),e(z0,nZo),e(z0,uX),e(uX,sZo),e(z0,lZo),e(ty,iZo),e(ty,Q0),e(Q0,cue),e(cue,dZo),e(Q0,cZo),e(Q0,_X),e(_X,fZo),e(Q0,mZo),e(ho,gZo),e(ho,W0),e(W0,hZo),e(W0,fue),e(fue,pZo),e(W0,uZo),e(W0,mue),e(mue,_Zo),e(ho,bZo),M(H0,ho,null),b(f,WPe,_),b(f,Ld,_),e(Ld,U0),e(U0,gue),M(ay,gue,null),e(Ld,vZo),e(Ld,hue),e(hue,FZo),b(f,HPe,_),b(f,Ho,_),M(ny,Ho,null),e(Ho,TZo),e(Ho,xd),e(xd,MZo),e(xd,bX),e(bX,EZo),e(xd,CZo),e(xd,vX),e(vX,wZo),e(xd,AZo),e(Ho,yZo),e(Ho,sy),e(sy,LZo),e(sy,pue),e(pue,xZo),e(sy,$Zo),e(Ho,kZo),e(Ho,Mt),M(ly,Mt,null),e(Mt,SZo),e(Mt,uue),e(uue,RZo),e(Mt,BZo),e(Mt,$d),e($d,PZo),e($d,_ue),e(_ue,IZo),e($d,qZo),e($d,FX),e(FX,NZo),e($d,jZo),e(Mt,DZo),M(J0,Mt,null),e(Ho,GZo),e(Ho,po),M(iy,po,null),e(po,OZo),e(po,bue),e(bue,VZo),e(po,XZo),e(po,Ha),e(Ha,zZo),e(Ha,vue),e(vue,QZo),e(Ha,WZo),e(Ha,Fue),e(Fue,HZo),e(Ha,UZo),e(Ha,Tue),e(Tue,JZo),e(Ha,YZo),e(po,KZo),e(po,Mue),e(Mue,Y0),e(Y0,Eue),e(Eue,ZZo),e(Y0,eer),e(Y0,TX),e(TX,oer),e(Y0,rer),e(po,ter),e(po,K0),e(K0,aer),e(K0,Cue),e(Cue,ner),e(K0,ser),e(K0,wue),e(wue,ler),e(po,ier),M(Z0,po,null),b(f,UPe,_),b(f,kd,_),e(kd,eT),e(eT,Aue),M(dy,Aue,null),e(kd,der),e(kd,yue),e(yue,cer),b(f,JPe,_),b(f,Uo,_),M(cy,Uo,null),e(Uo,fer),e(Uo,Sd),e(Sd,mer),e(Sd,MX),e(MX,ger),e(Sd,her),e(Sd,EX),e(EX,per),e(Sd,uer),e(Uo,_er),e(Uo,fy),e(fy,ber),e(fy,Lue),e(Lue,ver),e(fy,Fer),e(Uo,Ter),e(Uo,Et),M(my,Et,null),e(Et,Mer),e(Et,xue),e(xue,Eer),e(Et,Cer),e(Et,Rd),e(Rd,wer),e(Rd,$ue),e($ue,Aer),e(Rd,yer),e(Rd,CX),e(CX,Ler),e(Rd,xer),e(Et,$er),M(oT,Et,null),e(Uo,ker),e(Uo,uo),M(gy,uo,null),e(uo,Ser),e(uo,kue),e(kue,Rer),e(uo,Ber),e(uo,Ua),e(Ua,Per),e(Ua,Sue),e(Sue,Ier),e(Ua,qer),e(Ua,Rue),e(Rue,Ner),e(Ua,jer),e(Ua,Bue),e(Bue,Der),e(Ua,Ger),e(uo,Oer),e(uo,Ja),e(Ja,rT),e(rT,Pue),e(Pue,Ver),e(rT,Xer),e(rT,wX),e(wX,zer),e(rT,Qer),e(Ja,Wer),e(Ja,tT),e(tT,Iue),e(Iue,Her),e(tT,Uer),e(tT,AX),e(AX,Jer),e(tT,Yer),e(Ja,Ker),e(Ja,aT),e(aT,que),e(que,Zer),e(aT,eor),e(aT,yX),e(yX,oor),e(aT,ror),e(Ja,tor),e(Ja,nT),e(nT,Nue),e(Nue,aor),e(nT,nor),e(nT,LX),e(LX,sor),e(nT,lor),e(uo,ior),e(uo,sT),e(sT,dor),e(sT,jue),e(jue,cor),e(sT,mor),e(sT,Due),e(Due,gor),e(uo,hor),M(lT,uo,null),b(f,YPe,_),b(f,Bd,_),e(Bd,iT),e(iT,Gue),M(hy,Gue,null),e(Bd,por),e(Bd,Oue),e(Oue,uor),b(f,KPe,_),b(f,Jo,_),M(py,Jo,null),e(Jo,_or),e(Jo,Pd),e(Pd,bor),e(Pd,xX),e(xX,vor),e(Pd,For),e(Pd,$X),e($X,Tor),e(Pd,Mor),e(Jo,Eor),e(Jo,uy),e(uy,Cor),e(uy,Vue),e(Vue,wor),e(uy,Aor),e(Jo,yor),e(Jo,Ct),M(_y,Ct,null),e(Ct,Lor),e(Ct,Xue),e(Xue,xor),e(Ct,$or),e(Ct,Id),e(Id,kor),e(Id,zue),e(zue,Sor),e(Id,Ror),e(Id,kX),e(kX,Bor),e(Id,Por),e(Ct,Ior),M(dT,Ct,null),e(Jo,qor),e(Jo,_o),M(by,_o,null),e(_o,Nor),e(_o,Que),e(Que,jor),e(_o,Dor),e(_o,Ya),e(Ya,Gor),e(Ya,Wue),e(Wue,Oor),e(Ya,Vor),e(Ya,Hue),e(Hue,Xor),e(Ya,zor),e(Ya,Uue),e(Uue,Qor),e(Ya,Wor),e(_o,Hor),e(_o,Jue),e(Jue,cT),e(cT,Yue),e(Yue,Uor),e(cT,Jor),e(cT,SX),e(SX,Yor),e(cT,Kor),e(_o,Zor),e(_o,fT),e(fT,err),e(fT,Kue),e(Kue,orr),e(fT,rrr),e(fT,Zue),e(Zue,trr),e(_o,arr),M(mT,_o,null),b(f,ZPe,_),b(f,qd,_),e(qd,gT),e(gT,e_e),M(vy,e_e,null),e(qd,nrr),e(qd,o_e),e(o_e,srr),b(f,eIe,_),b(f,Yo,_),M(Fy,Yo,null),e(Yo,lrr),e(Yo,Nd),e(Nd,irr),e(Nd,RX),e(RX,drr),e(Nd,crr),e(Nd,BX),e(BX,frr),e(Nd,mrr),e(Yo,grr),e(Yo,Ty),e(Ty,hrr),e(Ty,r_e),e(r_e,prr),e(Ty,urr),e(Yo,_rr),e(Yo,wt),M(My,wt,null),e(wt,brr),e(wt,t_e),e(t_e,vrr),e(wt,Frr),e(wt,jd),e(jd,Trr),e(jd,a_e),e(a_e,Mrr),e(jd,Err),e(jd,PX),e(PX,Crr),e(jd,wrr),e(wt,Arr),M(hT,wt,null),e(Yo,yrr),e(Yo,wr),M(Ey,wr,null),e(wr,Lrr),e(wr,n_e),e(n_e,xrr),e(wr,$rr),e(wr,Ka),e(Ka,krr),e(Ka,s_e),e(s_e,Srr),e(Ka,Rrr),e(Ka,l_e),e(l_e,Brr),e(Ka,Prr),e(Ka,i_e),e(i_e,Irr),e(Ka,qrr),e(wr,Nrr),e(wr,j),e(j,pT),e(pT,d_e),e(d_e,jrr),e(pT,Drr),e(pT,IX),e(IX,Grr),e(pT,Orr),e(j,Vrr),e(j,uT),e(uT,c_e),e(c_e,Xrr),e(uT,zrr),e(uT,qX),e(qX,Qrr),e(uT,Wrr),e(j,Hrr),e(j,_T),e(_T,f_e),e(f_e,Urr),e(_T,Jrr),e(_T,NX),e(NX,Yrr),e(_T,Krr),e(j,Zrr),e(j,bT),e(bT,m_e),e(m_e,etr),e(bT,otr),e(bT,jX),e(jX,rtr),e(bT,ttr),e(j,atr),e(j,vT),e(vT,g_e),e(g_e,ntr),e(vT,str),e(vT,DX),e(DX,ltr),e(vT,itr),e(j,dtr),e(j,FT),e(FT,h_e),e(h_e,ctr),e(FT,ftr),e(FT,GX),e(GX,mtr),e(FT,gtr),e(j,htr),e(j,TT),e(TT,p_e),e(p_e,ptr),e(TT,utr),e(TT,OX),e(OX,_tr),e(TT,btr),e(j,vtr),e(j,MT),e(MT,u_e),e(u_e,Ftr),e(MT,Ttr),e(MT,VX),e(VX,Mtr),e(MT,Etr),e(j,Ctr),e(j,ET),e(ET,__e),e(__e,wtr),e(ET,Atr),e(ET,XX),e(XX,ytr),e(ET,Ltr),e(j,xtr),e(j,CT),e(CT,b_e),e(b_e,$tr),e(CT,ktr),e(CT,zX),e(zX,Str),e(CT,Rtr),e(j,Btr),e(j,wT),e(wT,v_e),e(v_e,Ptr),e(wT,Itr),e(wT,QX),e(QX,qtr),e(wT,Ntr),e(j,jtr),e(j,AT),e(AT,F_e),e(F_e,Dtr),e(AT,Gtr),e(AT,WX),e(WX,Otr),e(AT,Vtr),e(j,Xtr),e(j,yT),e(yT,T_e),e(T_e,ztr),e(yT,Qtr),e(yT,HX),e(HX,Wtr),e(yT,Htr),e(j,Utr),e(j,LT),e(LT,M_e),e(M_e,Jtr),e(LT,Ytr),e(LT,UX),e(UX,Ktr),e(LT,Ztr),e(j,ear),e(j,xT),e(xT,E_e),e(E_e,oar),e(xT,rar),e(xT,JX),e(JX,tar),e(xT,aar),e(j,nar),e(j,$T),e($T,C_e),e(C_e,sar),e($T,lar),e($T,YX),e(YX,iar),e($T,dar),e(j,car),e(j,Bs),e(Bs,w_e),e(w_e,far),e(Bs,mar),e(Bs,KX),e(KX,gar),e(Bs,har),e(Bs,ZX),e(ZX,par),e(Bs,uar),e(j,_ar),e(j,kT),e(kT,A_e),e(A_e,bar),e(kT,Far),e(kT,ez),e(ez,Tar),e(kT,Mar),e(j,Ear),e(j,ST),e(ST,y_e),e(y_e,Car),e(ST,war),e(ST,oz),e(oz,Aar),e(ST,yar),e(j,Lar),e(j,RT),e(RT,L_e),e(L_e,xar),e(RT,$ar),e(RT,rz),e(rz,kar),e(RT,Sar),e(j,Rar),e(j,BT),e(BT,x_e),e(x_e,Bar),e(BT,Par),e(BT,tz),e(tz,Iar),e(BT,qar),e(j,Nar),e(j,PT),e(PT,$_e),e($_e,jar),e(PT,Dar),e(PT,az),e(az,Gar),e(PT,Oar),e(j,Var),e(j,IT),e(IT,k_e),e(k_e,Xar),e(IT,zar),e(IT,nz),e(nz,Qar),e(IT,War),e(j,Har),e(j,qT),e(qT,S_e),e(S_e,Uar),e(qT,Jar),e(qT,sz),e(sz,Yar),e(qT,Kar),e(j,Zar),e(j,NT),e(NT,R_e),e(R_e,enr),e(NT,onr),e(NT,lz),e(lz,rnr),e(NT,tnr),e(j,anr),e(j,jT),e(jT,B_e),e(B_e,nnr),e(jT,snr),e(jT,iz),e(iz,lnr),e(jT,inr),e(j,dnr),e(j,DT),e(DT,P_e),e(P_e,cnr),e(DT,fnr),e(DT,dz),e(dz,mnr),e(DT,gnr),e(j,hnr),e(j,GT),e(GT,I_e),e(I_e,pnr),e(GT,unr),e(GT,cz),e(cz,_nr),e(GT,bnr),e(j,vnr),e(j,OT),e(OT,q_e),e(q_e,Fnr),e(OT,Tnr),e(OT,fz),e(fz,Mnr),e(OT,Enr),e(j,Cnr),e(j,VT),e(VT,N_e),e(N_e,wnr),e(VT,Anr),e(VT,mz),e(mz,ynr),e(VT,Lnr),e(j,xnr),e(j,XT),e(XT,j_e),e(j_e,$nr),e(XT,knr),e(XT,gz),e(gz,Snr),e(XT,Rnr),e(j,Bnr),e(j,zT),e(zT,D_e),e(D_e,Pnr),e(zT,Inr),e(zT,hz),e(hz,qnr),e(zT,Nnr),e(j,jnr),e(j,QT),e(QT,G_e),e(G_e,Dnr),e(QT,Gnr),e(QT,pz),e(pz,Onr),e(QT,Vnr),e(j,Xnr),e(j,WT),e(WT,O_e),e(O_e,znr),e(WT,Qnr),e(WT,uz),e(uz,Wnr),e(WT,Hnr),e(j,Unr),e(j,HT),e(HT,V_e),e(V_e,Jnr),e(HT,Ynr),e(HT,_z),e(_z,Knr),e(HT,Znr),e(j,esr),e(j,UT),e(UT,X_e),e(X_e,osr),e(UT,rsr),e(UT,bz),e(bz,tsr),e(UT,asr),e(j,nsr),e(j,JT),e(JT,z_e),e(z_e,ssr),e(JT,lsr),e(JT,vz),e(vz,isr),e(JT,dsr),e(j,csr),e(j,YT),e(YT,Q_e),e(Q_e,fsr),e(YT,msr),e(YT,Fz),e(Fz,gsr),e(YT,hsr),e(j,psr),e(j,KT),e(KT,W_e),e(W_e,usr),e(KT,_sr),e(KT,Tz),e(Tz,bsr),e(KT,vsr),e(j,Fsr),e(j,ZT),e(ZT,H_e),e(H_e,Tsr),e(ZT,Msr),e(ZT,Mz),e(Mz,Esr),e(ZT,Csr),e(j,wsr),e(j,e7),e(e7,U_e),e(U_e,Asr),e(e7,ysr),e(e7,Ez),e(Ez,Lsr),e(e7,xsr),e(j,$sr),e(j,o7),e(o7,J_e),e(J_e,ksr),e(o7,Ssr),e(o7,Cz),e(Cz,Rsr),e(o7,Bsr),e(j,Psr),e(j,r7),e(r7,Y_e),e(Y_e,Isr),e(r7,qsr),e(r7,wz),e(wz,Nsr),e(r7,jsr),e(j,Dsr),e(j,t7),e(t7,K_e),e(K_e,Gsr),e(t7,Osr),e(t7,Az),e(Az,Vsr),e(t7,Xsr),e(wr,zsr),M(a7,wr,null),b(f,oIe,_),b(f,Dd,_),e(Dd,n7),e(n7,Z_e),M(Cy,Z_e,null),e(Dd,Qsr),e(Dd,e2e),e(e2e,Wsr),b(f,rIe,_),b(f,Ko,_),M(wy,Ko,null),e(Ko,Hsr),e(Ko,Gd),e(Gd,Usr),e(Gd,yz),e(yz,Jsr),e(Gd,Ysr),e(Gd,Lz),e(Lz,Ksr),e(Gd,Zsr),e(Ko,elr),e(Ko,Ay),e(Ay,olr),e(Ay,o2e),e(o2e,rlr),e(Ay,tlr),e(Ko,alr),e(Ko,At),M(yy,At,null),e(At,nlr),e(At,r2e),e(r2e,slr),e(At,llr),e(At,Od),e(Od,ilr),e(Od,t2e),e(t2e,dlr),e(Od,clr),e(Od,xz),e(xz,flr),e(Od,mlr),e(At,glr),M(s7,At,null),e(Ko,hlr),e(Ko,Ar),M(Ly,Ar,null),e(Ar,plr),e(Ar,a2e),e(a2e,ulr),e(Ar,_lr),e(Ar,Za),e(Za,blr),e(Za,n2e),e(n2e,vlr),e(Za,Flr),e(Za,s2e),e(s2e,Tlr),e(Za,Mlr),e(Za,l2e),e(l2e,Elr),e(Za,Clr),e(Ar,wlr),e(Ar,ne),e(ne,l7),e(l7,i2e),e(i2e,Alr),e(l7,ylr),e(l7,$z),e($z,Llr),e(l7,xlr),e(ne,$lr),e(ne,i7),e(i7,d2e),e(d2e,klr),e(i7,Slr),e(i7,kz),e(kz,Rlr),e(i7,Blr),e(ne,Plr),e(ne,d7),e(d7,c2e),e(c2e,Ilr),e(d7,qlr),e(d7,Sz),e(Sz,Nlr),e(d7,jlr),e(ne,Dlr),e(ne,c7),e(c7,f2e),e(f2e,Glr),e(c7,Olr),e(c7,Rz),e(Rz,Vlr),e(c7,Xlr),e(ne,zlr),e(ne,f7),e(f7,m2e),e(m2e,Qlr),e(f7,Wlr),e(f7,Bz),e(Bz,Hlr),e(f7,Ulr),e(ne,Jlr),e(ne,m7),e(m7,g2e),e(g2e,Ylr),e(m7,Klr),e(m7,Pz),e(Pz,Zlr),e(m7,eir),e(ne,oir),e(ne,g7),e(g7,h2e),e(h2e,rir),e(g7,tir),e(g7,Iz),e(Iz,air),e(g7,nir),e(ne,sir),e(ne,h7),e(h7,p2e),e(p2e,lir),e(h7,iir),e(h7,qz),e(qz,dir),e(h7,cir),e(ne,fir),e(ne,p7),e(p7,u2e),e(u2e,mir),e(p7,gir),e(p7,Nz),e(Nz,hir),e(p7,pir),e(ne,uir),e(ne,u7),e(u7,_2e),e(_2e,_ir),e(u7,bir),e(u7,jz),e(jz,vir),e(u7,Fir),e(ne,Tir),e(ne,_7),e(_7,b2e),e(b2e,Mir),e(_7,Eir),e(_7,Dz),e(Dz,Cir),e(_7,wir),e(ne,Air),e(ne,b7),e(b7,v2e),e(v2e,yir),e(b7,Lir),e(b7,Gz),e(Gz,xir),e(b7,$ir),e(ne,kir),e(ne,v7),e(v7,F2e),e(F2e,Sir),e(v7,Rir),e(v7,Oz),e(Oz,Bir),e(v7,Pir),e(ne,Iir),e(ne,F7),e(F7,T2e),e(T2e,qir),e(F7,Nir),e(F7,Vz),e(Vz,jir),e(F7,Dir),e(ne,Gir),e(ne,T7),e(T7,M2e),e(M2e,Oir),e(T7,Vir),e(T7,Xz),e(Xz,Xir),e(T7,zir),e(ne,Qir),e(ne,M7),e(M7,E2e),e(E2e,Wir),e(M7,Hir),e(M7,zz),e(zz,Uir),e(M7,Jir),e(ne,Yir),e(ne,E7),e(E7,C2e),e(C2e,Kir),e(E7,Zir),e(E7,Qz),e(Qz,edr),e(E7,odr),e(ne,rdr),e(ne,C7),e(C7,w2e),e(w2e,tdr),e(C7,adr),e(C7,Wz),e(Wz,ndr),e(C7,sdr),e(ne,ldr),e(ne,w7),e(w7,A2e),e(A2e,idr),e(w7,ddr),e(w7,Hz),e(Hz,cdr),e(w7,fdr),e(ne,mdr),e(ne,A7),e(A7,y2e),e(y2e,gdr),e(A7,hdr),e(A7,Uz),e(Uz,pdr),e(A7,udr),e(ne,_dr),e(ne,y7),e(y7,L2e),e(L2e,bdr),e(y7,vdr),e(y7,Jz),e(Jz,Fdr),e(y7,Tdr),e(ne,Mdr),e(ne,L7),e(L7,x2e),e(x2e,Edr),e(L7,Cdr),e(L7,Yz),e(Yz,wdr),e(L7,Adr),e(ne,ydr),e(ne,x7),e(x7,$2e),e($2e,Ldr),e(x7,xdr),e(x7,Kz),e(Kz,$dr),e(x7,kdr),e(Ar,Sdr),M($7,Ar,null),b(f,tIe,_),b(f,Vd,_),e(Vd,k7),e(k7,k2e),M(xy,k2e,null),e(Vd,Rdr),e(Vd,S2e),e(S2e,Bdr),b(f,aIe,_),b(f,Zo,_),M($y,Zo,null),e(Zo,Pdr),e(Zo,Xd),e(Xd,Idr),e(Xd,Zz),e(Zz,qdr),e(Xd,Ndr),e(Xd,eQ),e(eQ,jdr),e(Xd,Ddr),e(Zo,Gdr),e(Zo,ky),e(ky,Odr),e(ky,R2e),e(R2e,Vdr),e(ky,Xdr),e(Zo,zdr),e(Zo,yt),M(Sy,yt,null),e(yt,Qdr),e(yt,B2e),e(B2e,Wdr),e(yt,Hdr),e(yt,zd),e(zd,Udr),e(zd,P2e),e(P2e,Jdr),e(zd,Ydr),e(zd,oQ),e(oQ,Kdr),e(zd,Zdr),e(yt,ecr),M(S7,yt,null),e(Zo,ocr),e(Zo,yr),M(Ry,yr,null),e(yr,rcr),e(yr,I2e),e(I2e,tcr),e(yr,acr),e(yr,en),e(en,ncr),e(en,q2e),e(q2e,scr),e(en,lcr),e(en,N2e),e(N2e,icr),e(en,dcr),e(en,j2e),e(j2e,ccr),e(en,fcr),e(yr,mcr),e(yr,Te),e(Te,R7),e(R7,D2e),e(D2e,gcr),e(R7,hcr),e(R7,rQ),e(rQ,pcr),e(R7,ucr),e(Te,_cr),e(Te,B7),e(B7,G2e),e(G2e,bcr),e(B7,vcr),e(B7,tQ),e(tQ,Fcr),e(B7,Tcr),e(Te,Mcr),e(Te,P7),e(P7,O2e),e(O2e,Ecr),e(P7,Ccr),e(P7,aQ),e(aQ,wcr),e(P7,Acr),e(Te,ycr),e(Te,I7),e(I7,V2e),e(V2e,Lcr),e(I7,xcr),e(I7,nQ),e(nQ,$cr),e(I7,kcr),e(Te,Scr),e(Te,q7),e(q7,X2e),e(X2e,Rcr),e(q7,Bcr),e(q7,sQ),e(sQ,Pcr),e(q7,Icr),e(Te,qcr),e(Te,N7),e(N7,z2e),e(z2e,Ncr),e(N7,jcr),e(N7,lQ),e(lQ,Dcr),e(N7,Gcr),e(Te,Ocr),e(Te,j7),e(j7,Q2e),e(Q2e,Vcr),e(j7,Xcr),e(j7,iQ),e(iQ,zcr),e(j7,Qcr),e(Te,Wcr),e(Te,D7),e(D7,W2e),e(W2e,Hcr),e(D7,Ucr),e(D7,dQ),e(dQ,Jcr),e(D7,Ycr),e(Te,Kcr),e(Te,G7),e(G7,H2e),e(H2e,Zcr),e(G7,efr),e(G7,cQ),e(cQ,ofr),e(G7,rfr),e(Te,tfr),e(Te,O7),e(O7,U2e),e(U2e,afr),e(O7,nfr),e(O7,fQ),e(fQ,sfr),e(O7,lfr),e(Te,ifr),e(Te,V7),e(V7,J2e),e(J2e,dfr),e(V7,cfr),e(V7,mQ),e(mQ,ffr),e(V7,mfr),e(Te,gfr),e(Te,X7),e(X7,Y2e),e(Y2e,hfr),e(X7,pfr),e(X7,gQ),e(gQ,ufr),e(X7,_fr),e(yr,bfr),M(z7,yr,null),b(f,nIe,_),b(f,Qd,_),e(Qd,Q7),e(Q7,K2e),M(By,K2e,null),e(Qd,vfr),e(Qd,Z2e),e(Z2e,Ffr),b(f,sIe,_),b(f,er,_),M(Py,er,null),e(er,Tfr),e(er,Wd),e(Wd,Mfr),e(Wd,hQ),e(hQ,Efr),e(Wd,Cfr),e(Wd,pQ),e(pQ,wfr),e(Wd,Afr),e(er,yfr),e(er,Iy),e(Iy,Lfr),e(Iy,e1e),e(e1e,xfr),e(Iy,$fr),e(er,kfr),e(er,Lt),M(qy,Lt,null),e(Lt,Sfr),e(Lt,o1e),e(o1e,Rfr),e(Lt,Bfr),e(Lt,Hd),e(Hd,Pfr),e(Hd,r1e),e(r1e,Ifr),e(Hd,qfr),e(Hd,uQ),e(uQ,Nfr),e(Hd,jfr),e(Lt,Dfr),M(W7,Lt,null),e(er,Gfr),e(er,Lr),M(Ny,Lr,null),e(Lr,Ofr),e(Lr,t1e),e(t1e,Vfr),e(Lr,Xfr),e(Lr,on),e(on,zfr),e(on,a1e),e(a1e,Qfr),e(on,Wfr),e(on,n1e),e(n1e,Hfr),e(on,Ufr),e(on,s1e),e(s1e,Jfr),e(on,Yfr),e(Lr,Kfr),e(Lr,jy),e(jy,H7),e(H7,l1e),e(l1e,Zfr),e(H7,emr),e(H7,_Q),e(_Q,omr),e(H7,rmr),e(jy,tmr),e(jy,U7),e(U7,i1e),e(i1e,amr),e(U7,nmr),e(U7,bQ),e(bQ,smr),e(U7,lmr),e(Lr,imr),M(J7,Lr,null),b(f,lIe,_),b(f,Ud,_),e(Ud,Y7),e(Y7,d1e),M(Dy,d1e,null),e(Ud,dmr),e(Ud,c1e),e(c1e,cmr),b(f,iIe,_),b(f,or,_),M(Gy,or,null),e(or,fmr),e(or,Jd),e(Jd,mmr),e(Jd,vQ),e(vQ,gmr),e(Jd,hmr),e(Jd,FQ),e(FQ,pmr),e(Jd,umr),e(or,_mr),e(or,Oy),e(Oy,bmr),e(Oy,f1e),e(f1e,vmr),e(Oy,Fmr),e(or,Tmr),e(or,xt),M(Vy,xt,null),e(xt,Mmr),e(xt,m1e),e(m1e,Emr),e(xt,Cmr),e(xt,Yd),e(Yd,wmr),e(Yd,g1e),e(g1e,Amr),e(Yd,ymr),e(Yd,TQ),e(TQ,Lmr),e(Yd,xmr),e(xt,$mr),M(K7,xt,null),e(or,kmr),e(or,xr),M(Xy,xr,null),e(xr,Smr),e(xr,h1e),e(h1e,Rmr),e(xr,Bmr),e(xr,rn),e(rn,Pmr),e(rn,p1e),e(p1e,Imr),e(rn,qmr),e(rn,u1e),e(u1e,Nmr),e(rn,jmr),e(rn,_1e),e(_1e,Dmr),e(rn,Gmr),e(xr,Omr),e(xr,ie),e(ie,Z7),e(Z7,b1e),e(b1e,Vmr),e(Z7,Xmr),e(Z7,MQ),e(MQ,zmr),e(Z7,Qmr),e(ie,Wmr),e(ie,e9),e(e9,v1e),e(v1e,Hmr),e(e9,Umr),e(e9,EQ),e(EQ,Jmr),e(e9,Ymr),e(ie,Kmr),e(ie,o9),e(o9,F1e),e(F1e,Zmr),e(o9,egr),e(o9,CQ),e(CQ,ogr),e(o9,rgr),e(ie,tgr),e(ie,r9),e(r9,T1e),e(T1e,agr),e(r9,ngr),e(r9,wQ),e(wQ,sgr),e(r9,lgr),e(ie,igr),e(ie,t9),e(t9,M1e),e(M1e,dgr),e(t9,cgr),e(t9,AQ),e(AQ,fgr),e(t9,mgr),e(ie,ggr),e(ie,a9),e(a9,E1e),e(E1e,hgr),e(a9,pgr),e(a9,yQ),e(yQ,ugr),e(a9,_gr),e(ie,bgr),e(ie,n9),e(n9,C1e),e(C1e,vgr),e(n9,Fgr),e(n9,LQ),e(LQ,Tgr),e(n9,Mgr),e(ie,Egr),e(ie,s9),e(s9,w1e),e(w1e,Cgr),e(s9,wgr),e(s9,xQ),e(xQ,Agr),e(s9,ygr),e(ie,Lgr),e(ie,l9),e(l9,A1e),e(A1e,xgr),e(l9,$gr),e(l9,$Q),e($Q,kgr),e(l9,Sgr),e(ie,Rgr),e(ie,i9),e(i9,y1e),e(y1e,Bgr),e(i9,Pgr),e(i9,kQ),e(kQ,Igr),e(i9,qgr),e(ie,Ngr),e(ie,d9),e(d9,L1e),e(L1e,jgr),e(d9,Dgr),e(d9,SQ),e(SQ,Ggr),e(d9,Ogr),e(ie,Vgr),e(ie,c9),e(c9,x1e),e(x1e,Xgr),e(c9,zgr),e(c9,RQ),e(RQ,Qgr),e(c9,Wgr),e(ie,Hgr),e(ie,f9),e(f9,$1e),e($1e,Ugr),e(f9,Jgr),e(f9,BQ),e(BQ,Ygr),e(f9,Kgr),e(ie,Zgr),e(ie,m9),e(m9,k1e),e(k1e,ehr),e(m9,ohr),e(m9,PQ),e(PQ,rhr),e(m9,thr),e(ie,ahr),e(ie,g9),e(g9,S1e),e(S1e,nhr),e(g9,shr),e(g9,IQ),e(IQ,lhr),e(g9,ihr),e(ie,dhr),e(ie,h9),e(h9,R1e),e(R1e,chr),e(h9,fhr),e(h9,qQ),e(qQ,mhr),e(h9,ghr),e(ie,hhr),e(ie,p9),e(p9,B1e),e(B1e,phr),e(p9,uhr),e(p9,NQ),e(NQ,_hr),e(p9,bhr),e(ie,vhr),e(ie,u9),e(u9,P1e),e(P1e,Fhr),e(u9,Thr),e(u9,jQ),e(jQ,Mhr),e(u9,Ehr),e(ie,Chr),e(ie,_9),e(_9,I1e),e(I1e,whr),e(_9,Ahr),e(_9,DQ),e(DQ,yhr),e(_9,Lhr),e(ie,xhr),e(ie,b9),e(b9,q1e),e(q1e,$hr),e(b9,khr),e(b9,GQ),e(GQ,Shr),e(b9,Rhr),e(xr,Bhr),M(v9,xr,null),b(f,dIe,_),b(f,Kd,_),e(Kd,F9),e(F9,N1e),M(zy,N1e,null),e(Kd,Phr),e(Kd,j1e),e(j1e,Ihr),b(f,cIe,_),b(f,rr,_),M(Qy,rr,null),e(rr,qhr),e(rr,Zd),e(Zd,Nhr),e(Zd,OQ),e(OQ,jhr),e(Zd,Dhr),e(Zd,VQ),e(VQ,Ghr),e(Zd,Ohr),e(rr,Vhr),e(rr,Wy),e(Wy,Xhr),e(Wy,D1e),e(D1e,zhr),e(Wy,Qhr),e(rr,Whr),e(rr,$t),M(Hy,$t,null),e($t,Hhr),e($t,G1e),e(G1e,Uhr),e($t,Jhr),e($t,ec),e(ec,Yhr),e(ec,O1e),e(O1e,Khr),e(ec,Zhr),e(ec,XQ),e(XQ,epr),e(ec,opr),e($t,rpr),M(T9,$t,null),e(rr,tpr),e(rr,$r),M(Uy,$r,null),e($r,apr),e($r,V1e),e(V1e,npr),e($r,spr),e($r,tn),e(tn,lpr),e(tn,X1e),e(X1e,ipr),e(tn,dpr),e(tn,z1e),e(z1e,cpr),e(tn,fpr),e(tn,Q1e),e(Q1e,mpr),e(tn,gpr),e($r,hpr),e($r,ye),e(ye,M9),e(M9,W1e),e(W1e,ppr),e(M9,upr),e(M9,zQ),e(zQ,_pr),e(M9,bpr),e(ye,vpr),e(ye,E9),e(E9,H1e),e(H1e,Fpr),e(E9,Tpr),e(E9,QQ),e(QQ,Mpr),e(E9,Epr),e(ye,Cpr),e(ye,C9),e(C9,U1e),e(U1e,wpr),e(C9,Apr),e(C9,WQ),e(WQ,ypr),e(C9,Lpr),e(ye,xpr),e(ye,w9),e(w9,J1e),e(J1e,$pr),e(w9,kpr),e(w9,HQ),e(HQ,Spr),e(w9,Rpr),e(ye,Bpr),e(ye,A9),e(A9,Y1e),e(Y1e,Ppr),e(A9,Ipr),e(A9,UQ),e(UQ,qpr),e(A9,Npr),e(ye,jpr),e(ye,y9),e(y9,K1e),e(K1e,Dpr),e(y9,Gpr),e(y9,JQ),e(JQ,Opr),e(y9,Vpr),e(ye,Xpr),e(ye,L9),e(L9,Z1e),e(Z1e,zpr),e(L9,Qpr),e(L9,YQ),e(YQ,Wpr),e(L9,Hpr),e(ye,Upr),e(ye,x9),e(x9,ebe),e(ebe,Jpr),e(x9,Ypr),e(x9,KQ),e(KQ,Kpr),e(x9,Zpr),e(ye,eur),e(ye,$9),e($9,obe),e(obe,our),e($9,rur),e($9,ZQ),e(ZQ,tur),e($9,aur),e(ye,nur),e(ye,k9),e(k9,rbe),e(rbe,sur),e(k9,lur),e(k9,eW),e(eW,iur),e(k9,dur),e($r,cur),M(S9,$r,null),b(f,fIe,_),b(f,oc,_),e(oc,R9),e(R9,tbe),M(Jy,tbe,null),e(oc,fur),e(oc,abe),e(abe,mur),b(f,mIe,_),b(f,tr,_),M(Yy,tr,null),e(tr,gur),e(tr,rc),e(rc,hur),e(rc,oW),e(oW,pur),e(rc,uur),e(rc,rW),e(rW,_ur),e(rc,bur),e(tr,vur),e(tr,Ky),e(Ky,Fur),e(Ky,nbe),e(nbe,Tur),e(Ky,Mur),e(tr,Eur),e(tr,kt),M(Zy,kt,null),e(kt,Cur),e(kt,sbe),e(sbe,wur),e(kt,Aur),e(kt,tc),e(tc,yur),e(tc,lbe),e(lbe,Lur),e(tc,xur),e(tc,tW),e(tW,$ur),e(tc,kur),e(kt,Sur),M(B9,kt,null),e(tr,Rur),e(tr,kr),M(eL,kr,null),e(kr,Bur),e(kr,ibe),e(ibe,Pur),e(kr,Iur),e(kr,an),e(an,qur),e(an,dbe),e(dbe,Nur),e(an,jur),e(an,cbe),e(cbe,Dur),e(an,Gur),e(an,fbe),e(fbe,Our),e(an,Vur),e(kr,Xur),e(kr,Z),e(Z,P9),e(P9,mbe),e(mbe,zur),e(P9,Qur),e(P9,aW),e(aW,Wur),e(P9,Hur),e(Z,Uur),e(Z,I9),e(I9,gbe),e(gbe,Jur),e(I9,Yur),e(I9,nW),e(nW,Kur),e(I9,Zur),e(Z,e_r),e(Z,q9),e(q9,hbe),e(hbe,o_r),e(q9,r_r),e(q9,sW),e(sW,t_r),e(q9,a_r),e(Z,n_r),e(Z,N9),e(N9,pbe),e(pbe,s_r),e(N9,l_r),e(N9,lW),e(lW,i_r),e(N9,d_r),e(Z,c_r),e(Z,j9),e(j9,ube),e(ube,f_r),e(j9,m_r),e(j9,iW),e(iW,g_r),e(j9,h_r),e(Z,p_r),e(Z,D9),e(D9,_be),e(_be,u_r),e(D9,__r),e(D9,dW),e(dW,b_r),e(D9,v_r),e(Z,F_r),e(Z,G9),e(G9,bbe),e(bbe,T_r),e(G9,M_r),e(G9,cW),e(cW,E_r),e(G9,C_r),e(Z,w_r),e(Z,O9),e(O9,vbe),e(vbe,A_r),e(O9,y_r),e(O9,fW),e(fW,L_r),e(O9,x_r),e(Z,$_r),e(Z,V9),e(V9,Fbe),e(Fbe,k_r),e(V9,S_r),e(V9,mW),e(mW,R_r),e(V9,B_r),e(Z,P_r),e(Z,X9),e(X9,Tbe),e(Tbe,I_r),e(X9,q_r),e(X9,gW),e(gW,N_r),e(X9,j_r),e(Z,D_r),e(Z,z9),e(z9,Mbe),e(Mbe,G_r),e(z9,O_r),e(z9,hW),e(hW,V_r),e(z9,X_r),e(Z,z_r),e(Z,Q9),e(Q9,Ebe),e(Ebe,Q_r),e(Q9,W_r),e(Q9,pW),e(pW,H_r),e(Q9,U_r),e(Z,J_r),e(Z,W9),e(W9,Cbe),e(Cbe,Y_r),e(W9,K_r),e(W9,uW),e(uW,Z_r),e(W9,e2r),e(Z,o2r),e(Z,H9),e(H9,wbe),e(wbe,r2r),e(H9,t2r),e(H9,_W),e(_W,a2r),e(H9,n2r),e(Z,s2r),e(Z,U9),e(U9,Abe),e(Abe,l2r),e(U9,i2r),e(U9,bW),e(bW,d2r),e(U9,c2r),e(Z,f2r),e(Z,J9),e(J9,ybe),e(ybe,m2r),e(J9,g2r),e(J9,vW),e(vW,h2r),e(J9,p2r),e(Z,u2r),e(Z,Y9),e(Y9,Lbe),e(Lbe,_2r),e(Y9,b2r),e(Y9,FW),e(FW,v2r),e(Y9,F2r),e(Z,T2r),e(Z,K9),e(K9,xbe),e(xbe,M2r),e(K9,E2r),e(K9,TW),e(TW,C2r),e(K9,w2r),e(Z,A2r),e(Z,Z9),e(Z9,$be),e($be,y2r),e(Z9,L2r),e(Z9,MW),e(MW,x2r),e(Z9,$2r),e(Z,k2r),e(Z,eM),e(eM,kbe),e(kbe,S2r),e(eM,R2r),e(eM,EW),e(EW,B2r),e(eM,P2r),e(Z,I2r),e(Z,oM),e(oM,Sbe),e(Sbe,q2r),e(oM,N2r),e(oM,CW),e(CW,j2r),e(oM,D2r),e(Z,G2r),e(Z,rM),e(rM,Rbe),e(Rbe,O2r),e(rM,V2r),e(rM,wW),e(wW,X2r),e(rM,z2r),e(Z,Q2r),e(Z,tM),e(tM,Bbe),e(Bbe,W2r),e(tM,H2r),e(tM,AW),e(AW,U2r),e(tM,J2r),e(Z,Y2r),e(Z,aM),e(aM,Pbe),e(Pbe,K2r),e(aM,Z2r),e(aM,yW),e(yW,e1r),e(aM,o1r),e(Z,r1r),e(Z,nM),e(nM,Ibe),e(Ibe,t1r),e(nM,a1r),e(nM,LW),e(LW,n1r),e(nM,s1r),e(Z,l1r),e(Z,sM),e(sM,qbe),e(qbe,i1r),e(sM,d1r),e(sM,xW),e(xW,c1r),e(sM,f1r),e(kr,m1r),M(lM,kr,null),b(f,gIe,_),b(f,ac,_),e(ac,iM),e(iM,Nbe),M(oL,Nbe,null),e(ac,g1r),e(ac,jbe),e(jbe,h1r),b(f,hIe,_),b(f,ar,_),M(rL,ar,null),e(ar,p1r),e(ar,nc),e(nc,u1r),e(nc,$W),e($W,_1r),e(nc,b1r),e(nc,kW),e(kW,v1r),e(nc,F1r),e(ar,T1r),e(ar,tL),e(tL,M1r),e(tL,Dbe),e(Dbe,E1r),e(tL,C1r),e(ar,w1r),e(ar,St),M(aL,St,null),e(St,A1r),e(St,Gbe),e(Gbe,y1r),e(St,L1r),e(St,sc),e(sc,x1r),e(sc,Obe),e(Obe,$1r),e(sc,k1r),e(sc,SW),e(SW,S1r),e(sc,R1r),e(St,B1r),M(dM,St,null),e(ar,P1r),e(ar,Sr),M(nL,Sr,null),e(Sr,I1r),e(Sr,Vbe),e(Vbe,q1r),e(Sr,N1r),e(Sr,nn),e(nn,j1r),e(nn,Xbe),e(Xbe,D1r),e(nn,G1r),e(nn,zbe),e(zbe,O1r),e(nn,V1r),e(nn,Qbe),e(Qbe,X1r),e(nn,z1r),e(Sr,Q1r),e(Sr,pe),e(pe,cM),e(cM,Wbe),e(Wbe,W1r),e(cM,H1r),e(cM,RW),e(RW,U1r),e(cM,J1r),e(pe,Y1r),e(pe,fM),e(fM,Hbe),e(Hbe,K1r),e(fM,Z1r),e(fM,BW),e(BW,ebr),e(fM,obr),e(pe,rbr),e(pe,mM),e(mM,Ube),e(Ube,tbr),e(mM,abr),e(mM,PW),e(PW,nbr),e(mM,sbr),e(pe,lbr),e(pe,gM),e(gM,Jbe),e(Jbe,ibr),e(gM,dbr),e(gM,IW),e(IW,cbr),e(gM,fbr),e(pe,mbr),e(pe,hM),e(hM,Ybe),e(Ybe,gbr),e(hM,hbr),e(hM,qW),e(qW,pbr),e(hM,ubr),e(pe,_br),e(pe,pM),e(pM,Kbe),e(Kbe,bbr),e(pM,vbr),e(pM,NW),e(NW,Fbr),e(pM,Tbr),e(pe,Mbr),e(pe,uM),e(uM,Zbe),e(Zbe,Ebr),e(uM,Cbr),e(uM,jW),e(jW,wbr),e(uM,Abr),e(pe,ybr),e(pe,_M),e(_M,eve),e(eve,Lbr),e(_M,xbr),e(_M,DW),e(DW,$br),e(_M,kbr),e(pe,Sbr),e(pe,bM),e(bM,ove),e(ove,Rbr),e(bM,Bbr),e(bM,GW),e(GW,Pbr),e(bM,Ibr),e(pe,qbr),e(pe,vM),e(vM,rve),e(rve,Nbr),e(vM,jbr),e(vM,OW),e(OW,Dbr),e(vM,Gbr),e(pe,Obr),e(pe,FM),e(FM,tve),e(tve,Vbr),e(FM,Xbr),e(FM,VW),e(VW,zbr),e(FM,Qbr),e(pe,Wbr),e(pe,TM),e(TM,ave),e(ave,Hbr),e(TM,Ubr),e(TM,XW),e(XW,Jbr),e(TM,Ybr),e(pe,Kbr),e(pe,MM),e(MM,nve),e(nve,Zbr),e(MM,evr),e(MM,zW),e(zW,ovr),e(MM,rvr),e(pe,tvr),e(pe,EM),e(EM,sve),e(sve,avr),e(EM,nvr),e(EM,QW),e(QW,svr),e(EM,lvr),e(pe,ivr),e(pe,CM),e(CM,lve),e(lve,dvr),e(CM,cvr),e(CM,WW),e(WW,fvr),e(CM,mvr),e(pe,gvr),e(pe,wM),e(wM,ive),e(ive,hvr),e(wM,pvr),e(wM,HW),e(HW,uvr),e(wM,_vr),e(pe,bvr),e(pe,AM),e(AM,dve),e(dve,vvr),e(AM,Fvr),e(AM,UW),e(UW,Tvr),e(AM,Mvr),e(Sr,Evr),M(yM,Sr,null),b(f,pIe,_),b(f,lc,_),e(lc,LM),e(LM,cve),M(sL,cve,null),e(lc,Cvr),e(lc,fve),e(fve,wvr),b(f,uIe,_),b(f,nr,_),M(lL,nr,null),e(nr,Avr),e(nr,ic),e(ic,yvr),e(ic,JW),e(JW,Lvr),e(ic,xvr),e(ic,YW),e(YW,$vr),e(ic,kvr),e(nr,Svr),e(nr,iL),e(iL,Rvr),e(iL,mve),e(mve,Bvr),e(iL,Pvr),e(nr,Ivr),e(nr,Rt),M(dL,Rt,null),e(Rt,qvr),e(Rt,gve),e(gve,Nvr),e(Rt,jvr),e(Rt,dc),e(dc,Dvr),e(dc,hve),e(hve,Gvr),e(dc,Ovr),e(dc,KW),e(KW,Vvr),e(dc,Xvr),e(Rt,zvr),M(xM,Rt,null),e(nr,Qvr),e(nr,Rr),M(cL,Rr,null),e(Rr,Wvr),e(Rr,pve),e(pve,Hvr),e(Rr,Uvr),e(Rr,sn),e(sn,Jvr),e(sn,uve),e(uve,Yvr),e(sn,Kvr),e(sn,_ve),e(_ve,Zvr),e(sn,eFr),e(sn,bve),e(bve,oFr),e(sn,rFr),e(Rr,tFr),e(Rr,fL),e(fL,$M),e($M,vve),e(vve,aFr),e($M,nFr),e($M,ZW),e(ZW,sFr),e($M,lFr),e(fL,iFr),e(fL,kM),e(kM,Fve),e(Fve,dFr),e(kM,cFr),e(kM,eH),e(eH,fFr),e(kM,mFr),e(Rr,gFr),M(SM,Rr,null),b(f,_Ie,_),b(f,cc,_),e(cc,RM),e(RM,Tve),M(mL,Tve,null),e(cc,hFr),e(cc,Mve),e(Mve,pFr),b(f,bIe,_),b(f,sr,_),M(gL,sr,null),e(sr,uFr),e(sr,fc),e(fc,_Fr),e(fc,oH),e(oH,bFr),e(fc,vFr),e(fc,rH),e(rH,FFr),e(fc,TFr),e(sr,MFr),e(sr,hL),e(hL,EFr),e(hL,Eve),e(Eve,CFr),e(hL,wFr),e(sr,AFr),e(sr,Bt),M(pL,Bt,null),e(Bt,yFr),e(Bt,Cve),e(Cve,LFr),e(Bt,xFr),e(Bt,mc),e(mc,$Fr),e(mc,wve),e(wve,kFr),e(mc,SFr),e(mc,tH),e(tH,RFr),e(mc,BFr),e(Bt,PFr),M(BM,Bt,null),e(sr,IFr),e(sr,Br),M(uL,Br,null),e(Br,qFr),e(Br,Ave),e(Ave,NFr),e(Br,jFr),e(Br,ln),e(ln,DFr),e(ln,yve),e(yve,GFr),e(ln,OFr),e(ln,Lve),e(Lve,VFr),e(ln,XFr),e(ln,xve),e(xve,zFr),e(ln,QFr),e(Br,WFr),e(Br,$ve),e($ve,PM),e(PM,kve),e(kve,HFr),e(PM,UFr),e(PM,aH),e(aH,JFr),e(PM,YFr),e(Br,KFr),M(IM,Br,null),b(f,vIe,_),b(f,gc,_),e(gc,qM),e(qM,Sve),M(_L,Sve,null),e(gc,ZFr),e(gc,Rve),e(Rve,e0r),b(f,FIe,_),b(f,lr,_),M(bL,lr,null),e(lr,o0r),e(lr,hc),e(hc,r0r),e(hc,nH),e(nH,t0r),e(hc,a0r),e(hc,sH),e(sH,n0r),e(hc,s0r),e(lr,l0r),e(lr,vL),e(vL,i0r),e(vL,Bve),e(Bve,d0r),e(vL,c0r),e(lr,f0r),e(lr,Pt),M(FL,Pt,null),e(Pt,m0r),e(Pt,Pve),e(Pve,g0r),e(Pt,h0r),e(Pt,pc),e(pc,p0r),e(pc,Ive),e(Ive,u0r),e(pc,_0r),e(pc,lH),e(lH,b0r),e(pc,v0r),e(Pt,F0r),M(NM,Pt,null),e(lr,T0r),e(lr,Pr),M(TL,Pr,null),e(Pr,M0r),e(Pr,qve),e(qve,E0r),e(Pr,C0r),e(Pr,dn),e(dn,w0r),e(dn,Nve),e(Nve,A0r),e(dn,y0r),e(dn,jve),e(jve,L0r),e(dn,x0r),e(dn,Dve),e(Dve,$0r),e(dn,k0r),e(Pr,S0r),e(Pr,de),e(de,jM),e(jM,Gve),e(Gve,R0r),e(jM,B0r),e(jM,iH),e(iH,P0r),e(jM,I0r),e(de,q0r),e(de,DM),e(DM,Ove),e(Ove,N0r),e(DM,j0r),e(DM,dH),e(dH,D0r),e(DM,G0r),e(de,O0r),e(de,GM),e(GM,Vve),e(Vve,V0r),e(GM,X0r),e(GM,cH),e(cH,z0r),e(GM,Q0r),e(de,W0r),e(de,OM),e(OM,Xve),e(Xve,H0r),e(OM,U0r),e(OM,fH),e(fH,J0r),e(OM,Y0r),e(de,K0r),e(de,VM),e(VM,zve),e(zve,Z0r),e(VM,eTr),e(VM,mH),e(mH,oTr),e(VM,rTr),e(de,tTr),e(de,XM),e(XM,Qve),e(Qve,aTr),e(XM,nTr),e(XM,gH),e(gH,sTr),e(XM,lTr),e(de,iTr),e(de,zM),e(zM,Wve),e(Wve,dTr),e(zM,cTr),e(zM,hH),e(hH,fTr),e(zM,mTr),e(de,gTr),e(de,QM),e(QM,Hve),e(Hve,hTr),e(QM,pTr),e(QM,pH),e(pH,uTr),e(QM,_Tr),e(de,bTr),e(de,WM),e(WM,Uve),e(Uve,vTr),e(WM,FTr),e(WM,uH),e(uH,TTr),e(WM,MTr),e(de,ETr),e(de,HM),e(HM,Jve),e(Jve,CTr),e(HM,wTr),e(HM,_H),e(_H,ATr),e(HM,yTr),e(de,LTr),e(de,UM),e(UM,Yve),e(Yve,xTr),e(UM,$Tr),e(UM,bH),e(bH,kTr),e(UM,STr),e(de,RTr),e(de,JM),e(JM,Kve),e(Kve,BTr),e(JM,PTr),e(JM,vH),e(vH,ITr),e(JM,qTr),e(de,NTr),e(de,YM),e(YM,Zve),e(Zve,jTr),e(YM,DTr),e(YM,FH),e(FH,GTr),e(YM,OTr),e(de,VTr),e(de,KM),e(KM,eFe),e(eFe,XTr),e(KM,zTr),e(KM,TH),e(TH,QTr),e(KM,WTr),e(de,HTr),e(de,ZM),e(ZM,oFe),e(oFe,UTr),e(ZM,JTr),e(ZM,MH),e(MH,YTr),e(ZM,KTr),e(de,ZTr),e(de,e4),e(e4,rFe),e(rFe,e7r),e(e4,o7r),e(e4,EH),e(EH,r7r),e(e4,t7r),e(de,a7r),e(de,o4),e(o4,tFe),e(tFe,n7r),e(o4,s7r),e(o4,CH),e(CH,l7r),e(o4,i7r),e(de,d7r),e(de,r4),e(r4,aFe),e(aFe,c7r),e(r4,f7r),e(r4,wH),e(wH,m7r),e(r4,g7r),e(de,h7r),e(de,t4),e(t4,nFe),e(nFe,p7r),e(t4,u7r),e(t4,AH),e(AH,_7r),e(t4,b7r),e(de,v7r),e(de,a4),e(a4,sFe),e(sFe,F7r),e(a4,T7r),e(a4,yH),e(yH,M7r),e(a4,E7r),e(Pr,C7r),M(n4,Pr,null),b(f,TIe,_),b(f,uc,_),e(uc,s4),e(s4,lFe),M(ML,lFe,null),e(uc,w7r),e(uc,iFe),e(iFe,A7r),b(f,MIe,_),b(f,ir,_),M(EL,ir,null),e(ir,y7r),e(ir,_c),e(_c,L7r),e(_c,LH),e(LH,x7r),e(_c,$7r),e(_c,xH),e(xH,k7r),e(_c,S7r),e(ir,R7r),e(ir,CL),e(CL,B7r),e(CL,dFe),e(dFe,P7r),e(CL,I7r),e(ir,q7r),e(ir,It),M(wL,It,null),e(It,N7r),e(It,cFe),e(cFe,j7r),e(It,D7r),e(It,bc),e(bc,G7r),e(bc,fFe),e(fFe,O7r),e(bc,V7r),e(bc,$H),e($H,X7r),e(bc,z7r),e(It,Q7r),M(l4,It,null),e(ir,W7r),e(ir,Ir),M(AL,Ir,null),e(Ir,H7r),e(Ir,mFe),e(mFe,U7r),e(Ir,J7r),e(Ir,cn),e(cn,Y7r),e(cn,gFe),e(gFe,K7r),e(cn,Z7r),e(cn,hFe),e(hFe,e9r),e(cn,o9r),e(cn,pFe),e(pFe,r9r),e(cn,t9r),e(Ir,a9r),e(Ir,ce),e(ce,i4),e(i4,uFe),e(uFe,n9r),e(i4,s9r),e(i4,kH),e(kH,l9r),e(i4,i9r),e(ce,d9r),e(ce,d4),e(d4,_Fe),e(_Fe,c9r),e(d4,f9r),e(d4,SH),e(SH,m9r),e(d4,g9r),e(ce,h9r),e(ce,c4),e(c4,bFe),e(bFe,p9r),e(c4,u9r),e(c4,RH),e(RH,_9r),e(c4,b9r),e(ce,v9r),e(ce,f4),e(f4,vFe),e(vFe,F9r),e(f4,T9r),e(f4,BH),e(BH,M9r),e(f4,E9r),e(ce,C9r),e(ce,m4),e(m4,FFe),e(FFe,w9r),e(m4,A9r),e(m4,PH),e(PH,y9r),e(m4,L9r),e(ce,x9r),e(ce,g4),e(g4,TFe),e(TFe,$9r),e(g4,k9r),e(g4,IH),e(IH,S9r),e(g4,R9r),e(ce,B9r),e(ce,h4),e(h4,MFe),e(MFe,P9r),e(h4,I9r),e(h4,qH),e(qH,q9r),e(h4,N9r),e(ce,j9r),e(ce,p4),e(p4,EFe),e(EFe,D9r),e(p4,G9r),e(p4,NH),e(NH,O9r),e(p4,V9r),e(ce,X9r),e(ce,u4),e(u4,CFe),e(CFe,z9r),e(u4,Q9r),e(u4,jH),e(jH,W9r),e(u4,H9r),e(ce,U9r),e(ce,_4),e(_4,wFe),e(wFe,J9r),e(_4,Y9r),e(_4,DH),e(DH,K9r),e(_4,Z9r),e(ce,eMr),e(ce,b4),e(b4,AFe),e(AFe,oMr),e(b4,rMr),e(b4,GH),e(GH,tMr),e(b4,aMr),e(ce,nMr),e(ce,v4),e(v4,yFe),e(yFe,sMr),e(v4,lMr),e(v4,OH),e(OH,iMr),e(v4,dMr),e(ce,cMr),e(ce,F4),e(F4,LFe),e(LFe,fMr),e(F4,mMr),e(F4,VH),e(VH,gMr),e(F4,hMr),e(ce,pMr),e(ce,T4),e(T4,xFe),e(xFe,uMr),e(T4,_Mr),e(T4,XH),e(XH,bMr),e(T4,vMr),e(ce,FMr),e(ce,M4),e(M4,$Fe),e($Fe,TMr),e(M4,MMr),e(M4,zH),e(zH,EMr),e(M4,CMr),e(ce,wMr),e(ce,E4),e(E4,kFe),e(kFe,AMr),e(E4,yMr),e(E4,QH),e(QH,LMr),e(E4,xMr),e(ce,$Mr),e(ce,C4),e(C4,SFe),e(SFe,kMr),e(C4,SMr),e(C4,WH),e(WH,RMr),e(C4,BMr),e(ce,PMr),e(ce,w4),e(w4,RFe),e(RFe,IMr),e(w4,qMr),e(w4,HH),e(HH,NMr),e(w4,jMr),e(ce,DMr),e(ce,A4),e(A4,BFe),e(BFe,GMr),e(A4,OMr),e(A4,UH),e(UH,VMr),e(A4,XMr),e(ce,zMr),e(ce,y4),e(y4,PFe),e(PFe,QMr),e(y4,WMr),e(y4,JH),e(JH,HMr),e(y4,UMr),e(Ir,JMr),M(L4,Ir,null),b(f,EIe,_),b(f,vc,_),e(vc,x4),e(x4,IFe),M(yL,IFe,null),e(vc,YMr),e(vc,qFe),e(qFe,KMr),b(f,CIe,_),b(f,dr,_),M(LL,dr,null),e(dr,ZMr),e(dr,Fc),e(Fc,e4r),e(Fc,YH),e(YH,o4r),e(Fc,r4r),e(Fc,KH),e(KH,t4r),e(Fc,a4r),e(dr,n4r),e(dr,xL),e(xL,s4r),e(xL,NFe),e(NFe,l4r),e(xL,i4r),e(dr,d4r),e(dr,qt),M($L,qt,null),e(qt,c4r),e(qt,jFe),e(jFe,f4r),e(qt,m4r),e(qt,Tc),e(Tc,g4r),e(Tc,DFe),e(DFe,h4r),e(Tc,p4r),e(Tc,ZH),e(ZH,u4r),e(Tc,_4r),e(qt,b4r),M($4,qt,null),e(dr,v4r),e(dr,qr),M(kL,qr,null),e(qr,F4r),e(qr,GFe),e(GFe,T4r),e(qr,M4r),e(qr,fn),e(fn,E4r),e(fn,OFe),e(OFe,C4r),e(fn,w4r),e(fn,VFe),e(VFe,A4r),e(fn,y4r),e(fn,XFe),e(XFe,L4r),e(fn,x4r),e(qr,$4r),e(qr,zFe),e(zFe,k4),e(k4,QFe),e(QFe,k4r),e(k4,S4r),e(k4,eU),e(eU,R4r),e(k4,B4r),e(qr,P4r),M(S4,qr,null),b(f,wIe,_),b(f,Mc,_),e(Mc,R4),e(R4,WFe),M(SL,WFe,null),e(Mc,I4r),e(Mc,HFe),e(HFe,q4r),b(f,AIe,_),b(f,cr,_),M(RL,cr,null),e(cr,N4r),e(cr,Ec),e(Ec,j4r),e(Ec,oU),e(oU,D4r),e(Ec,G4r),e(Ec,rU),e(rU,O4r),e(Ec,V4r),e(cr,X4r),e(cr,BL),e(BL,z4r),e(BL,UFe),e(UFe,Q4r),e(BL,W4r),e(cr,H4r),e(cr,Nt),M(PL,Nt,null),e(Nt,U4r),e(Nt,JFe),e(JFe,J4r),e(Nt,Y4r),e(Nt,Cc),e(Cc,K4r),e(Cc,YFe),e(YFe,Z4r),e(Cc,eEr),e(Cc,tU),e(tU,oEr),e(Cc,rEr),e(Nt,tEr),M(B4,Nt,null),e(cr,aEr),e(cr,Nr),M(IL,Nr,null),e(Nr,nEr),e(Nr,KFe),e(KFe,sEr),e(Nr,lEr),e(Nr,mn),e(mn,iEr),e(mn,ZFe),e(ZFe,dEr),e(mn,cEr),e(mn,e0e),e(e0e,fEr),e(mn,mEr),e(mn,o0e),e(o0e,gEr),e(mn,hEr),e(Nr,pEr),e(Nr,r0e),e(r0e,P4),e(P4,t0e),e(t0e,uEr),e(P4,_Er),e(P4,aU),e(aU,bEr),e(P4,vEr),e(Nr,FEr),M(I4,Nr,null),b(f,yIe,_),b(f,wc,_),e(wc,q4),e(q4,a0e),M(qL,a0e,null),e(wc,TEr),e(wc,n0e),e(n0e,MEr),b(f,LIe,_),b(f,fr,_),M(NL,fr,null),e(fr,EEr),e(fr,Ac),e(Ac,CEr),e(Ac,nU),e(nU,wEr),e(Ac,AEr),e(Ac,sU),e(sU,yEr),e(Ac,LEr),e(fr,xEr),e(fr,jL),e(jL,$Er),e(jL,s0e),e(s0e,kEr),e(jL,SEr),e(fr,REr),e(fr,jt),M(DL,jt,null),e(jt,BEr),e(jt,l0e),e(l0e,PEr),e(jt,IEr),e(jt,yc),e(yc,qEr),e(yc,i0e),e(i0e,NEr),e(yc,jEr),e(yc,lU),e(lU,DEr),e(yc,GEr),e(jt,OEr),M(N4,jt,null),e(fr,VEr),e(fr,jr),M(GL,jr,null),e(jr,XEr),e(jr,d0e),e(d0e,zEr),e(jr,QEr),e(jr,gn),e(gn,WEr),e(gn,c0e),e(c0e,HEr),e(gn,UEr),e(gn,f0e),e(f0e,JEr),e(gn,YEr),e(gn,m0e),e(m0e,KEr),e(gn,ZEr),e(jr,e5r),e(jr,oe),e(oe,j4),e(j4,g0e),e(g0e,o5r),e(j4,r5r),e(j4,iU),e(iU,t5r),e(j4,a5r),e(oe,n5r),e(oe,D4),e(D4,h0e),e(h0e,s5r),e(D4,l5r),e(D4,dU),e(dU,i5r),e(D4,d5r),e(oe,c5r),e(oe,G4),e(G4,p0e),e(p0e,f5r),e(G4,m5r),e(G4,cU),e(cU,g5r),e(G4,h5r),e(oe,p5r),e(oe,O4),e(O4,u0e),e(u0e,u5r),e(O4,_5r),e(O4,fU),e(fU,b5r),e(O4,v5r),e(oe,F5r),e(oe,V4),e(V4,_0e),e(_0e,T5r),e(V4,M5r),e(V4,mU),e(mU,E5r),e(V4,C5r),e(oe,w5r),e(oe,X4),e(X4,b0e),e(b0e,A5r),e(X4,y5r),e(X4,gU),e(gU,L5r),e(X4,x5r),e(oe,$5r),e(oe,z4),e(z4,v0e),e(v0e,k5r),e(z4,S5r),e(z4,hU),e(hU,R5r),e(z4,B5r),e(oe,P5r),e(oe,Q4),e(Q4,F0e),e(F0e,I5r),e(Q4,q5r),e(Q4,pU),e(pU,N5r),e(Q4,j5r),e(oe,D5r),e(oe,W4),e(W4,T0e),e(T0e,G5r),e(W4,O5r),e(W4,uU),e(uU,V5r),e(W4,X5r),e(oe,z5r),e(oe,H4),e(H4,M0e),e(M0e,Q5r),e(H4,W5r),e(H4,_U),e(_U,H5r),e(H4,U5r),e(oe,J5r),e(oe,U4),e(U4,E0e),e(E0e,Y5r),e(U4,K5r),e(U4,bU),e(bU,Z5r),e(U4,eCr),e(oe,oCr),e(oe,J4),e(J4,C0e),e(C0e,rCr),e(J4,tCr),e(J4,vU),e(vU,aCr),e(J4,nCr),e(oe,sCr),e(oe,Y4),e(Y4,w0e),e(w0e,lCr),e(Y4,iCr),e(Y4,FU),e(FU,dCr),e(Y4,cCr),e(oe,fCr),e(oe,K4),e(K4,A0e),e(A0e,mCr),e(K4,gCr),e(K4,TU),e(TU,hCr),e(K4,pCr),e(oe,uCr),e(oe,Z4),e(Z4,y0e),e(y0e,_Cr),e(Z4,bCr),e(Z4,MU),e(MU,vCr),e(Z4,FCr),e(oe,TCr),e(oe,eE),e(eE,L0e),e(L0e,MCr),e(eE,ECr),e(eE,EU),e(EU,CCr),e(eE,wCr),e(oe,ACr),e(oe,oE),e(oE,x0e),e(x0e,yCr),e(oE,LCr),e(oE,CU),e(CU,xCr),e(oE,$Cr),e(oe,kCr),e(oe,rE),e(rE,$0e),e($0e,SCr),e(rE,RCr),e(rE,wU),e(wU,BCr),e(rE,PCr),e(oe,ICr),e(oe,tE),e(tE,k0e),e(k0e,qCr),e(tE,NCr),e(tE,AU),e(AU,jCr),e(tE,DCr),e(oe,GCr),e(oe,aE),e(aE,S0e),e(S0e,OCr),e(aE,VCr),e(aE,yU),e(yU,XCr),e(aE,zCr),e(oe,QCr),e(oe,nE),e(nE,R0e),e(R0e,WCr),e(nE,HCr),e(nE,LU),e(LU,UCr),e(nE,JCr),e(oe,YCr),e(oe,sE),e(sE,B0e),e(B0e,KCr),e(sE,ZCr),e(sE,xU),e(xU,e3r),e(sE,o3r),e(oe,r3r),e(oe,lE),e(lE,P0e),e(P0e,t3r),e(lE,a3r),e(lE,$U),e($U,n3r),e(lE,s3r),e(oe,l3r),e(oe,iE),e(iE,I0e),e(I0e,i3r),e(iE,d3r),e(iE,kU),e(kU,c3r),e(iE,f3r),e(oe,m3r),e(oe,dE),e(dE,q0e),e(q0e,g3r),e(dE,h3r),e(dE,SU),e(SU,p3r),e(dE,u3r),e(jr,_3r),M(cE,jr,null),b(f,xIe,_),b(f,Lc,_),e(Lc,fE),e(fE,N0e),M(OL,N0e,null),e(Lc,b3r),e(Lc,j0e),e(j0e,v3r),b(f,$Ie,_),b(f,mr,_),M(VL,mr,null),e(mr,F3r),e(mr,xc),e(xc,T3r),e(xc,RU),e(RU,M3r),e(xc,E3r),e(xc,BU),e(BU,C3r),e(xc,w3r),e(mr,A3r),e(mr,XL),e(XL,y3r),e(XL,D0e),e(D0e,L3r),e(XL,x3r),e(mr,$3r),e(mr,Dt),M(zL,Dt,null),e(Dt,k3r),e(Dt,G0e),e(G0e,S3r),e(Dt,R3r),e(Dt,$c),e($c,B3r),e($c,O0e),e(O0e,P3r),e($c,I3r),e($c,PU),e(PU,q3r),e($c,N3r),e(Dt,j3r),M(mE,Dt,null),e(mr,D3r),e(mr,Dr),M(QL,Dr,null),e(Dr,G3r),e(Dr,V0e),e(V0e,O3r),e(Dr,V3r),e(Dr,hn),e(hn,X3r),e(hn,X0e),e(X0e,z3r),e(hn,Q3r),e(hn,z0e),e(z0e,W3r),e(hn,H3r),e(hn,Q0e),e(Q0e,U3r),e(hn,J3r),e(Dr,Y3r),e(Dr,ke),e(ke,gE),e(gE,W0e),e(W0e,K3r),e(gE,Z3r),e(gE,IU),e(IU,ewr),e(gE,owr),e(ke,rwr),e(ke,hE),e(hE,H0e),e(H0e,twr),e(hE,awr),e(hE,qU),e(qU,nwr),e(hE,swr),e(ke,lwr),e(ke,pE),e(pE,U0e),e(U0e,iwr),e(pE,dwr),e(pE,NU),e(NU,cwr),e(pE,fwr),e(ke,mwr),e(ke,uE),e(uE,J0e),e(J0e,gwr),e(uE,hwr),e(uE,jU),e(jU,pwr),e(uE,uwr),e(ke,_wr),e(ke,_E),e(_E,Y0e),e(Y0e,bwr),e(_E,vwr),e(_E,DU),e(DU,Fwr),e(_E,Twr),e(ke,Mwr),e(ke,bE),e(bE,K0e),e(K0e,Ewr),e(bE,Cwr),e(bE,GU),e(GU,wwr),e(bE,Awr),e(ke,ywr),e(ke,vE),e(vE,Z0e),e(Z0e,Lwr),e(vE,xwr),e(vE,OU),e(OU,$wr),e(vE,kwr),e(ke,Swr),e(ke,FE),e(FE,eTe),e(eTe,Rwr),e(FE,Bwr),e(FE,VU),e(VU,Pwr),e(FE,Iwr),e(ke,qwr),e(ke,TE),e(TE,oTe),e(oTe,Nwr),e(TE,jwr),e(TE,XU),e(XU,Dwr),e(TE,Gwr),e(Dr,Owr),M(ME,Dr,null),b(f,kIe,_),b(f,kc,_),e(kc,EE),e(EE,rTe),M(WL,rTe,null),e(kc,Vwr),e(kc,tTe),e(tTe,Xwr),b(f,SIe,_),b(f,gr,_),M(HL,gr,null),e(gr,zwr),e(gr,Sc),e(Sc,Qwr),e(Sc,zU),e(zU,Wwr),e(Sc,Hwr),e(Sc,QU),e(QU,Uwr),e(Sc,Jwr),e(gr,Ywr),e(gr,UL),e(UL,Kwr),e(UL,aTe),e(aTe,Zwr),e(UL,eAr),e(gr,oAr),e(gr,Gt),M(JL,Gt,null),e(Gt,rAr),e(Gt,nTe),e(nTe,tAr),e(Gt,aAr),e(Gt,Rc),e(Rc,nAr),e(Rc,sTe),e(sTe,sAr),e(Rc,lAr),e(Rc,WU),e(WU,iAr),e(Rc,dAr),e(Gt,cAr),M(CE,Gt,null),e(gr,fAr),e(gr,Gr),M(YL,Gr,null),e(Gr,mAr),e(Gr,lTe),e(lTe,gAr),e(Gr,hAr),e(Gr,pn),e(pn,pAr),e(pn,iTe),e(iTe,uAr),e(pn,_Ar),e(pn,dTe),e(dTe,bAr),e(pn,vAr),e(pn,cTe),e(cTe,FAr),e(pn,TAr),e(Gr,MAr),e(Gr,Me),e(Me,wE),e(wE,fTe),e(fTe,EAr),e(wE,CAr),e(wE,HU),e(HU,wAr),e(wE,AAr),e(Me,yAr),e(Me,AE),e(AE,mTe),e(mTe,LAr),e(AE,xAr),e(AE,UU),e(UU,$Ar),e(AE,kAr),e(Me,SAr),e(Me,yE),e(yE,gTe),e(gTe,RAr),e(yE,BAr),e(yE,JU),e(JU,PAr),e(yE,IAr),e(Me,qAr),e(Me,LE),e(LE,hTe),e(hTe,NAr),e(LE,jAr),e(LE,YU),e(YU,DAr),e(LE,GAr),e(Me,OAr),e(Me,xE),e(xE,pTe),e(pTe,VAr),e(xE,XAr),e(xE,KU),e(KU,zAr),e(xE,QAr),e(Me,WAr),e(Me,$E),e($E,uTe),e(uTe,HAr),e($E,UAr),e($E,ZU),e(ZU,JAr),e($E,YAr),e(Me,KAr),e(Me,kE),e(kE,_Te),e(_Te,ZAr),e(kE,e6r),e(kE,eJ),e(eJ,o6r),e(kE,r6r),e(Me,t6r),e(Me,SE),e(SE,bTe),e(bTe,a6r),e(SE,n6r),e(SE,oJ),e(oJ,s6r),e(SE,l6r),e(Me,i6r),e(Me,RE),e(RE,vTe),e(vTe,d6r),e(RE,c6r),e(RE,rJ),e(rJ,f6r),e(RE,m6r),e(Me,g6r),e(Me,BE),e(BE,FTe),e(FTe,h6r),e(BE,p6r),e(BE,tJ),e(tJ,u6r),e(BE,_6r),e(Me,b6r),e(Me,PE),e(PE,TTe),e(TTe,v6r),e(PE,F6r),e(PE,aJ),e(aJ,T6r),e(PE,M6r),e(Me,E6r),e(Me,IE),e(IE,MTe),e(MTe,C6r),e(IE,w6r),e(IE,nJ),e(nJ,A6r),e(IE,y6r),e(Gr,L6r),M(qE,Gr,null),b(f,RIe,_),b(f,Bc,_),e(Bc,NE),e(NE,ETe),M(KL,ETe,null),e(Bc,x6r),e(Bc,CTe),e(CTe,$6r),b(f,BIe,_),b(f,hr,_),M(ZL,hr,null),e(hr,k6r),e(hr,Pc),e(Pc,S6r),e(Pc,sJ),e(sJ,R6r),e(Pc,B6r),e(Pc,lJ),e(lJ,P6r),e(Pc,I6r),e(hr,q6r),e(hr,e8),e(e8,N6r),e(e8,wTe),e(wTe,j6r),e(e8,D6r),e(hr,G6r),e(hr,Ot),M(o8,Ot,null),e(Ot,O6r),e(Ot,ATe),e(ATe,V6r),e(Ot,X6r),e(Ot,Ic),e(Ic,z6r),e(Ic,yTe),e(yTe,Q6r),e(Ic,W6r),e(Ic,iJ),e(iJ,H6r),e(Ic,U6r),e(Ot,J6r),M(jE,Ot,null),e(hr,Y6r),e(hr,Or),M(r8,Or,null),e(Or,K6r),e(Or,LTe),e(LTe,Z6r),e(Or,eyr),e(Or,un),e(un,oyr),e(un,xTe),e(xTe,ryr),e(un,tyr),e(un,$Te),e($Te,ayr),e(un,nyr),e(un,kTe),e(kTe,syr),e(un,lyr),e(Or,iyr),e(Or,Le),e(Le,DE),e(DE,STe),e(STe,dyr),e(DE,cyr),e(DE,dJ),e(dJ,fyr),e(DE,myr),e(Le,gyr),e(Le,GE),e(GE,RTe),e(RTe,hyr),e(GE,pyr),e(GE,cJ),e(cJ,uyr),e(GE,_yr),e(Le,byr),e(Le,OE),e(OE,BTe),e(BTe,vyr),e(OE,Fyr),e(OE,fJ),e(fJ,Tyr),e(OE,Myr),e(Le,Eyr),e(Le,VE),e(VE,PTe),e(PTe,Cyr),e(VE,wyr),e(VE,mJ),e(mJ,Ayr),e(VE,yyr),e(Le,Lyr),e(Le,XE),e(XE,ITe),e(ITe,xyr),e(XE,$yr),e(XE,gJ),e(gJ,kyr),e(XE,Syr),e(Le,Ryr),e(Le,zE),e(zE,qTe),e(qTe,Byr),e(zE,Pyr),e(zE,hJ),e(hJ,Iyr),e(zE,qyr),e(Le,Nyr),e(Le,QE),e(QE,NTe),e(NTe,jyr),e(QE,Dyr),e(QE,pJ),e(pJ,Gyr),e(QE,Oyr),e(Le,Vyr),e(Le,WE),e(WE,jTe),e(jTe,Xyr),e(WE,zyr),e(WE,uJ),e(uJ,Qyr),e(WE,Wyr),e(Le,Hyr),e(Le,HE),e(HE,DTe),e(DTe,Uyr),e(HE,Jyr),e(HE,_J),e(_J,Yyr),e(HE,Kyr),e(Le,Zyr),e(Le,UE),e(UE,GTe),e(GTe,eLr),e(UE,oLr),e(UE,bJ),e(bJ,rLr),e(UE,tLr),e(Or,aLr),M(JE,Or,null),b(f,PIe,_),b(f,qc,_),e(qc,YE),e(YE,OTe),M(t8,OTe,null),e(qc,nLr),e(qc,VTe),e(VTe,sLr),b(f,IIe,_),b(f,pr,_),M(a8,pr,null),e(pr,lLr),e(pr,Nc),e(Nc,iLr),e(Nc,vJ),e(vJ,dLr),e(Nc,cLr),e(Nc,FJ),e(FJ,fLr),e(Nc,mLr),e(pr,gLr),e(pr,n8),e(n8,hLr),e(n8,XTe),e(XTe,pLr),e(n8,uLr),e(pr,_Lr),e(pr,Vt),M(s8,Vt,null),e(Vt,bLr),e(Vt,zTe),e(zTe,vLr),e(Vt,FLr),e(Vt,jc),e(jc,TLr),e(jc,QTe),e(QTe,MLr),e(jc,ELr),e(jc,TJ),e(TJ,CLr),e(jc,wLr),e(Vt,ALr),M(KE,Vt,null),e(pr,yLr),e(pr,Vr),M(l8,Vr,null),e(Vr,LLr),e(Vr,WTe),e(WTe,xLr),e(Vr,$Lr),e(Vr,_n),e(_n,kLr),e(_n,HTe),e(HTe,SLr),e(_n,RLr),e(_n,UTe),e(UTe,BLr),e(_n,PLr),e(_n,JTe),e(JTe,ILr),e(_n,qLr),e(Vr,NLr),e(Vr,Se),e(Se,ZE),e(ZE,YTe),e(YTe,jLr),e(ZE,DLr),e(ZE,MJ),e(MJ,GLr),e(ZE,OLr),e(Se,VLr),e(Se,e5),e(e5,KTe),e(KTe,XLr),e(e5,zLr),e(e5,EJ),e(EJ,QLr),e(e5,WLr),e(Se,HLr),e(Se,o5),e(o5,ZTe),e(ZTe,ULr),e(o5,JLr),e(o5,CJ),e(CJ,YLr),e(o5,KLr),e(Se,ZLr),e(Se,r5),e(r5,e7e),e(e7e,e8r),e(r5,o8r),e(r5,wJ),e(wJ,r8r),e(r5,t8r),e(Se,a8r),e(Se,t5),e(t5,o7e),e(o7e,n8r),e(t5,s8r),e(t5,AJ),e(AJ,l8r),e(t5,i8r),e(Se,d8r),e(Se,a5),e(a5,r7e),e(r7e,c8r),e(a5,f8r),e(a5,yJ),e(yJ,m8r),e(a5,g8r),e(Se,h8r),e(Se,n5),e(n5,t7e),e(t7e,p8r),e(n5,u8r),e(n5,LJ),e(LJ,_8r),e(n5,b8r),e(Se,v8r),e(Se,s5),e(s5,a7e),e(a7e,F8r),e(s5,T8r),e(s5,xJ),e(xJ,M8r),e(s5,E8r),e(Se,C8r),e(Se,l5),e(l5,n7e),e(n7e,w8r),e(l5,A8r),e(l5,$J),e($J,y8r),e(l5,L8r),e(Vr,x8r),M(i5,Vr,null),b(f,qIe,_),b(f,Dc,_),e(Dc,d5),e(d5,s7e),M(i8,s7e,null),e(Dc,$8r),e(Dc,l7e),e(l7e,k8r),b(f,NIe,_),b(f,ur,_),M(d8,ur,null),e(ur,S8r),e(ur,Gc),e(Gc,R8r),e(Gc,kJ),e(kJ,B8r),e(Gc,P8r),e(Gc,SJ),e(SJ,I8r),e(Gc,q8r),e(ur,N8r),e(ur,c8),e(c8,j8r),e(c8,i7e),e(i7e,D8r),e(c8,G8r),e(ur,O8r),e(ur,Xt),M(f8,Xt,null),e(Xt,V8r),e(Xt,d7e),e(d7e,X8r),e(Xt,z8r),e(Xt,Oc),e(Oc,Q8r),e(Oc,c7e),e(c7e,W8r),e(Oc,H8r),e(Oc,RJ),e(RJ,U8r),e(Oc,J8r),e(Xt,Y8r),M(c5,Xt,null),e(ur,K8r),e(ur,Xr),M(m8,Xr,null),e(Xr,Z8r),e(Xr,f7e),e(f7e,exr),e(Xr,oxr),e(Xr,bn),e(bn,rxr),e(bn,m7e),e(m7e,txr),e(bn,axr),e(bn,g7e),e(g7e,nxr),e(bn,sxr),e(bn,h7e),e(h7e,lxr),e(bn,ixr),e(Xr,dxr),e(Xr,xe),e(xe,f5),e(f5,p7e),e(p7e,cxr),e(f5,fxr),e(f5,BJ),e(BJ,mxr),e(f5,gxr),e(xe,hxr),e(xe,m5),e(m5,u7e),e(u7e,pxr),e(m5,uxr),e(m5,PJ),e(PJ,_xr),e(m5,bxr),e(xe,vxr),e(xe,g5),e(g5,_7e),e(_7e,Fxr),e(g5,Txr),e(g5,IJ),e(IJ,Mxr),e(g5,Exr),e(xe,Cxr),e(xe,h5),e(h5,b7e),e(b7e,wxr),e(h5,Axr),e(h5,qJ),e(qJ,yxr),e(h5,Lxr),e(xe,xxr),e(xe,p5),e(p5,v7e),e(v7e,$xr),e(p5,kxr),e(p5,NJ),e(NJ,Sxr),e(p5,Rxr),e(xe,Bxr),e(xe,u5),e(u5,F7e),e(F7e,Pxr),e(u5,Ixr),e(u5,jJ),e(jJ,qxr),e(u5,Nxr),e(xe,jxr),e(xe,_5),e(_5,T7e),e(T7e,Dxr),e(_5,Gxr),e(_5,DJ),e(DJ,Oxr),e(_5,Vxr),e(xe,Xxr),e(xe,b5),e(b5,M7e),e(M7e,zxr),e(b5,Qxr),e(b5,GJ),e(GJ,Wxr),e(b5,Hxr),e(xe,Uxr),e(xe,v5),e(v5,E7e),e(E7e,Jxr),e(v5,Yxr),e(v5,OJ),e(OJ,Kxr),e(v5,Zxr),e(xe,e$r),e(xe,F5),e(F5,C7e),e(C7e,o$r),e(F5,r$r),e(F5,VJ),e(VJ,t$r),e(F5,a$r),e(Xr,n$r),M(T5,Xr,null),b(f,jIe,_),b(f,Vc,_),e(Vc,M5),e(M5,w7e),M(g8,w7e,null),e(Vc,s$r),e(Vc,A7e),e(A7e,l$r),b(f,DIe,_),b(f,_r,_),M(h8,_r,null),e(_r,i$r),e(_r,Xc),e(Xc,d$r),e(Xc,XJ),e(XJ,c$r),e(Xc,f$r),e(Xc,zJ),e(zJ,m$r),e(Xc,g$r),e(_r,h$r),e(_r,p8),e(p8,p$r),e(p8,y7e),e(y7e,u$r),e(p8,_$r),e(_r,b$r),e(_r,zt),M(u8,zt,null),e(zt,v$r),e(zt,L7e),e(L7e,F$r),e(zt,T$r),e(zt,zc),e(zc,M$r),e(zc,x7e),e(x7e,E$r),e(zc,C$r),e(zc,QJ),e(QJ,w$r),e(zc,A$r),e(zt,y$r),M(E5,zt,null),e(_r,L$r),e(_r,zr),M(_8,zr,null),e(zr,x$r),e(zr,$7e),e($7e,$$r),e(zr,k$r),e(zr,vn),e(vn,S$r),e(vn,k7e),e(k7e,R$r),e(vn,B$r),e(vn,S7e),e(S7e,P$r),e(vn,I$r),e(vn,R7e),e(R7e,q$r),e(vn,N$r),e(zr,j$r),e(zr,$e),e($e,C5),e(C5,B7e),e(B7e,D$r),e(C5,G$r),e(C5,WJ),e(WJ,O$r),e(C5,V$r),e($e,X$r),e($e,w5),e(w5,P7e),e(P7e,z$r),e(w5,Q$r),e(w5,HJ),e(HJ,W$r),e(w5,H$r),e($e,U$r),e($e,A5),e(A5,I7e),e(I7e,J$r),e(A5,Y$r),e(A5,UJ),e(UJ,K$r),e(A5,Z$r),e($e,ekr),e($e,y5),e(y5,q7e),e(q7e,okr),e(y5,rkr),e(y5,JJ),e(JJ,tkr),e(y5,akr),e($e,nkr),e($e,L5),e(L5,N7e),e(N7e,skr),e(L5,lkr),e(L5,YJ),e(YJ,ikr),e(L5,dkr),e($e,ckr),e($e,x5),e(x5,j7e),e(j7e,fkr),e(x5,mkr),e(x5,KJ),e(KJ,gkr),e(x5,hkr),e($e,pkr),e($e,$5),e($5,D7e),e(D7e,ukr),e($5,_kr),e($5,ZJ),e(ZJ,bkr),e($5,vkr),e($e,Fkr),e($e,k5),e(k5,G7e),e(G7e,Tkr),e(k5,Mkr),e(k5,eY),e(eY,Ekr),e(k5,Ckr),e($e,wkr),e($e,S5),e(S5,O7e),e(O7e,Akr),e(S5,ykr),e(S5,oY),e(oY,Lkr),e(S5,xkr),e($e,$kr),e($e,R5),e(R5,V7e),e(V7e,kkr),e(R5,Skr),e(R5,rY),e(rY,Rkr),e(R5,Bkr),e(zr,Pkr),M(B5,zr,null),b(f,GIe,_),b(f,Qc,_),e(Qc,P5),e(P5,X7e),M(b8,X7e,null),e(Qc,Ikr),e(Qc,z7e),e(z7e,qkr),b(f,OIe,_),b(f,br,_),M(v8,br,null),e(br,Nkr),e(br,Wc),e(Wc,jkr),e(Wc,tY),e(tY,Dkr),e(Wc,Gkr),e(Wc,aY),e(aY,Okr),e(Wc,Vkr),e(br,Xkr),e(br,F8),e(F8,zkr),e(F8,Q7e),e(Q7e,Qkr),e(F8,Wkr),e(br,Hkr),e(br,Qt),M(T8,Qt,null),e(Qt,Ukr),e(Qt,W7e),e(W7e,Jkr),e(Qt,Ykr),e(Qt,Hc),e(Hc,Kkr),e(Hc,H7e),e(H7e,Zkr),e(Hc,eSr),e(Hc,nY),e(nY,oSr),e(Hc,rSr),e(Qt,tSr),M(I5,Qt,null),e(br,aSr),e(br,Qr),M(M8,Qr,null),e(Qr,nSr),e(Qr,U7e),e(U7e,sSr),e(Qr,lSr),e(Qr,Fn),e(Fn,iSr),e(Fn,J7e),e(J7e,dSr),e(Fn,cSr),e(Fn,Y7e),e(Y7e,fSr),e(Fn,mSr),e(Fn,K7e),e(K7e,gSr),e(Fn,hSr),e(Qr,pSr),e(Qr,De),e(De,q5),e(q5,Z7e),e(Z7e,uSr),e(q5,_Sr),e(q5,sY),e(sY,bSr),e(q5,vSr),e(De,FSr),e(De,N5),e(N5,e9e),e(e9e,TSr),e(N5,MSr),e(N5,lY),e(lY,ESr),e(N5,CSr),e(De,wSr),e(De,j5),e(j5,o9e),e(o9e,ASr),e(j5,ySr),e(j5,iY),e(iY,LSr),e(j5,xSr),e(De,$Sr),e(De,D5),e(D5,r9e),e(r9e,kSr),e(D5,SSr),e(D5,dY),e(dY,RSr),e(D5,BSr),e(De,PSr),e(De,G5),e(G5,t9e),e(t9e,ISr),e(G5,qSr),e(G5,cY),e(cY,NSr),e(G5,jSr),e(De,DSr),e(De,O5),e(O5,a9e),e(a9e,GSr),e(O5,OSr),e(O5,fY),e(fY,VSr),e(O5,XSr),e(De,zSr),e(De,V5),e(V5,n9e),e(n9e,QSr),e(V5,WSr),e(V5,mY),e(mY,HSr),e(V5,USr),e(De,JSr),e(De,X5),e(X5,s9e),e(s9e,YSr),e(X5,KSr),e(X5,gY),e(gY,ZSr),e(X5,eRr),e(Qr,oRr),M(z5,Qr,null),b(f,VIe,_),b(f,Uc,_),e(Uc,Q5),e(Q5,l9e),M(E8,l9e,null),e(Uc,rRr),e(Uc,i9e),e(i9e,tRr),b(f,XIe,_),b(f,vr,_),M(C8,vr,null),e(vr,aRr),e(vr,Jc),e(Jc,nRr),e(Jc,hY),e(hY,sRr),e(Jc,lRr),e(Jc,pY),e(pY,iRr),e(Jc,dRr),e(vr,cRr),e(vr,w8),e(w8,fRr),e(w8,d9e),e(d9e,mRr),e(w8,gRr),e(vr,hRr),e(vr,Wt),M(A8,Wt,null),e(Wt,pRr),e(Wt,c9e),e(c9e,uRr),e(Wt,_Rr),e(Wt,Yc),e(Yc,bRr),e(Yc,f9e),e(f9e,vRr),e(Yc,FRr),e(Yc,uY),e(uY,TRr),e(Yc,MRr),e(Wt,ERr),M(W5,Wt,null),e(vr,CRr),e(vr,Wr),M(y8,Wr,null),e(Wr,wRr),e(Wr,m9e),e(m9e,ARr),e(Wr,yRr),e(Wr,Tn),e(Tn,LRr),e(Tn,g9e),e(g9e,xRr),e(Tn,$Rr),e(Tn,h9e),e(h9e,kRr),e(Tn,SRr),e(Tn,p9e),e(p9e,RRr),e(Tn,BRr),e(Wr,PRr),e(Wr,Ge),e(Ge,H5),e(H5,u9e),e(u9e,IRr),e(H5,qRr),e(H5,_Y),e(_Y,NRr),e(H5,jRr),e(Ge,DRr),e(Ge,U5),e(U5,_9e),e(_9e,GRr),e(U5,ORr),e(U5,bY),e(bY,VRr),e(U5,XRr),e(Ge,zRr),e(Ge,J5),e(J5,b9e),e(b9e,QRr),e(J5,WRr),e(J5,vY),e(vY,HRr),e(J5,URr),e(Ge,JRr),e(Ge,Y5),e(Y5,v9e),e(v9e,YRr),e(Y5,KRr),e(Y5,FY),e(FY,ZRr),e(Y5,eBr),e(Ge,oBr),e(Ge,K5),e(K5,F9e),e(F9e,rBr),e(K5,tBr),e(K5,TY),e(TY,aBr),e(K5,nBr),e(Ge,sBr),e(Ge,Z5),e(Z5,T9e),e(T9e,lBr),e(Z5,iBr),e(Z5,MY),e(MY,dBr),e(Z5,cBr),e(Ge,fBr),e(Ge,eC),e(eC,M9e),e(M9e,mBr),e(eC,gBr),e(eC,EY),e(EY,hBr),e(eC,pBr),e(Ge,uBr),e(Ge,oC),e(oC,E9e),e(E9e,_Br),e(oC,bBr),e(oC,CY),e(CY,vBr),e(oC,FBr),e(Wr,TBr),M(rC,Wr,null),b(f,zIe,_),b(f,Kc,_),e(Kc,tC),e(tC,C9e),M(L8,C9e,null),e(Kc,MBr),e(Kc,w9e),e(w9e,EBr),b(f,QIe,_),b(f,Fr,_),M(x8,Fr,null),e(Fr,CBr),e(Fr,Zc),e(Zc,wBr),e(Zc,wY),e(wY,ABr),e(Zc,yBr),e(Zc,AY),e(AY,LBr),e(Zc,xBr),e(Fr,$Br),e(Fr,$8),e($8,kBr),e($8,A9e),e(A9e,SBr),e($8,RBr),e(Fr,BBr),e(Fr,Ht),M(k8,Ht,null),e(Ht,PBr),e(Ht,y9e),e(y9e,IBr),e(Ht,qBr),e(Ht,ef),e(ef,NBr),e(ef,L9e),e(L9e,jBr),e(ef,DBr),e(ef,yY),e(yY,GBr),e(ef,OBr),e(Ht,VBr),M(aC,Ht,null),e(Fr,XBr),e(Fr,Hr),M(S8,Hr,null),e(Hr,zBr),e(Hr,x9e),e(x9e,QBr),e(Hr,WBr),e(Hr,Mn),e(Mn,HBr),e(Mn,$9e),e($9e,UBr),e(Mn,JBr),e(Mn,k9e),e(k9e,YBr),e(Mn,KBr),e(Mn,S9e),e(S9e,ZBr),e(Mn,ePr),e(Hr,oPr),e(Hr,R9e),e(R9e,nC),e(nC,B9e),e(B9e,rPr),e(nC,tPr),e(nC,LY),e(LY,aPr),e(nC,nPr),e(Hr,sPr),M(sC,Hr,null),b(f,WIe,_),b(f,of,_),e(of,lC),e(lC,P9e),M(R8,P9e,null),e(of,lPr),e(of,I9e),e(I9e,iPr),b(f,HIe,_),b(f,Tr,_),M(B8,Tr,null),e(Tr,dPr),e(Tr,rf),e(rf,cPr),e(rf,xY),e(xY,fPr),e(rf,mPr),e(rf,$Y),e($Y,gPr),e(rf,hPr),e(Tr,pPr),e(Tr,P8),e(P8,uPr),e(P8,q9e),e(q9e,_Pr),e(P8,bPr),e(Tr,vPr),e(Tr,Ut),M(I8,Ut,null),e(Ut,FPr),e(Ut,N9e),e(N9e,TPr),e(Ut,MPr),e(Ut,tf),e(tf,EPr),e(tf,j9e),e(j9e,CPr),e(tf,wPr),e(tf,kY),e(kY,APr),e(tf,yPr),e(Ut,LPr),M(iC,Ut,null),e(Tr,xPr),e(Tr,Ur),M(q8,Ur,null),e(Ur,$Pr),e(Ur,D9e),e(D9e,kPr),e(Ur,SPr),e(Ur,En),e(En,RPr),e(En,G9e),e(G9e,BPr),e(En,PPr),e(En,O9e),e(O9e,IPr),e(En,qPr),e(En,V9e),e(V9e,NPr),e(En,jPr),e(Ur,DPr),e(Ur,N8),e(N8,dC),e(dC,X9e),e(X9e,GPr),e(dC,OPr),e(dC,SY),e(SY,VPr),e(dC,XPr),e(N8,zPr),e(N8,cC),e(cC,z9e),e(z9e,QPr),e(cC,WPr),e(cC,RY),e(RY,HPr),e(cC,UPr),e(Ur,JPr),M(fC,Ur,null),b(f,UIe,_),b(f,af,_),e(af,mC),e(mC,Q9e),M(j8,Q9e,null),e(af,YPr),e(af,W9e),e(W9e,KPr),b(f,JIe,_),b(f,Mr,_),M(D8,Mr,null),e(Mr,ZPr),e(Mr,nf),e(nf,eIr),e(nf,BY),e(BY,oIr),e(nf,rIr),e(nf,PY),e(PY,tIr),e(nf,aIr),e(Mr,nIr),e(Mr,G8),e(G8,sIr),e(G8,H9e),e(H9e,lIr),e(G8,iIr),e(Mr,dIr),e(Mr,Jt),M(O8,Jt,null),e(Jt,cIr),e(Jt,U9e),e(U9e,fIr),e(Jt,mIr),e(Jt,sf),e(sf,gIr),e(sf,J9e),e(J9e,hIr),e(sf,pIr),e(sf,IY),e(IY,uIr),e(sf,_Ir),e(Jt,bIr),M(gC,Jt,null),e(Mr,vIr),e(Mr,Jr),M(V8,Jr,null),e(Jr,FIr),e(Jr,Y9e),e(Y9e,TIr),e(Jr,MIr),e(Jr,Cn),e(Cn,EIr),e(Cn,K9e),e(K9e,CIr),e(Cn,wIr),e(Cn,Z9e),e(Z9e,AIr),e(Cn,yIr),e(Cn,eMe),e(eMe,LIr),e(Cn,xIr),e(Jr,$Ir),e(Jr,oMe),e(oMe,hC),e(hC,rMe),e(rMe,kIr),e(hC,SIr),e(hC,qY),e(qY,RIr),e(hC,BIr),e(Jr,PIr),M(pC,Jr,null),YIe=!0},p(f,[_]){const X8={};_&2&&(X8.$$scope={dirty:_,ctx:f}),uf.$set(X8);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),gg.$set(tMe);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),zg.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),bh.$set(nMe);const z8={};_&2&&(z8.$$scope={dirty:_,ctx:f}),vh.$set(z8);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),Ih.$set(sMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),qh.$set(wn);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),Dh.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),Lu.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),$u.$set(dMe);const Q8={};_&2&&(Q8.$$scope={dirty:_,ctx:f}),__.$set(Q8);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),v_.$set(cMe);const W8={};_&2&&(W8.$$scope={dirty:_,ctx:f}),r2.$set(W8);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),a2.$set(fMe);const H8={};_&2&&(H8.$$scope={dirty:_,ctx:f}),G2.$set(H8);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),V2.$set(mMe);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),i1.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),c1.$set(hMe);const lf={};_&2&&(lf.$$scope={dirty:_,ctx:f}),nb.$set(lf);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),lb.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),qb.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),jb.$set(_Me);const U8={};_&2&&(U8.$$scope={dirty:_,ctx:f}),Qb.$set(U8);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),Hb.$set(bMe);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),xv.$set(vMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),kv.$set(FMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),bF.$set(Kr);const J8={};_&2&&(J8.$$scope={dirty:_,ctx:f}),FF.$set(J8);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),EF.$set(TMe);const Y8={};_&2&&(Y8.$$scope={dirty:_,ctx:f}),wF.$set(Y8);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),NF.$set(MMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),DF.$set(Zr);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),VF.$set(EMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),zF.$set(df);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),o0.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),t0.$set(wMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),d0.$set(L);const uC={};_&2&&(uC.$$scope={dirty:_,ctx:f}),f0.$set(uC);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),T0.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),E0.$set(yMe);const _C={};_&2&&(_C.$$scope={dirty:_,ctx:f}),y0.$set(_C);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),x0.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),P0.$set(xMe);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),q0.$set(bC);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),O0.$set($Me);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),X0.$set(kMe);const vC={};_&2&&(vC.$$scope={dirty:_,ctx:f}),H0.$set(vC);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),J0.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),Z0.$set(RMe);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),oT.$set(FC);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),lT.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),dT.$set(PMe);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),mT.$set(TC);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),hT.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),a7.$set(qMe);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),s7.$set(MC);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),$7.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),S7.$set(jMe);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),z7.$set(EC);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),W7.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),J7.$set(GMe);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),K7.$set(CC);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),v9.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),T9.$set(VMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),S9.$set(wC);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),B9.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),lM.$set(zMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),dM.$set(AC);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),yM.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),xM.$set(WMe);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),SM.$set(yC);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),BM.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),IM.$set(UMe);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),NM.$set(LC);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),n4.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),l4.$set(YMe);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),L4.$set(xC);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),$4.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),S4.$set(ZMe);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),B4.$set($C);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),I4.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),N4.$set(o4e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),cE.$set(kC);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),mE.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),ME.$set(t4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),CE.$set(SC);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),qE.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),jE.$set(n4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),JE.$set(RC);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),KE.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),i5.$set(l4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),c5.$set(BC);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),T5.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),E5.$set(d4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),B5.$set(PC);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),I5.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),z5.$set(f4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),W5.$set(IC);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),rC.$set(m4e);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),aC.$set(g4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),sC.$set(qC);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),iC.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),fC.$set(p4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),gC.$set(NC);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),pC.$set(u4e)},i(f){YIe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Nw.$$.fragment,f),E(jw.$$.fragment,f),E(uf.$$.fragment,f),E(Dw.$$.fragment,f),E(Gw.$$.fragment,f),E(Xw.$$.fragment,f),E(gg.$$.fragment,f),E(zw.$$.fragment,f),E(Qw.$$.fragment,f),E(Ww.$$.fragment,f),E(Jw.$$.fragment,f),E(zg.$$.fragment,f),E(Yw.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(rA.$$.fragment,f),E(bh.$$.fragment,f),E(vh.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(iA.$$.fragment,f),E(Ih.$$.fragment,f),E(qh.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(fA.$$.fragment,f),E(gA.$$.fragment,f),E(Dh.$$.fragment,f),E(hA.$$.fragment,f),E(Lu.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(bA.$$.fragment,f),E($u.$$.fragment,f),E(vA.$$.fragment,f),E(__.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(EA.$$.fragment,f),E(v_.$$.fragment,f),E(CA.$$.fragment,f),E(r2.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(LA.$$.fragment,f),E(a2.$$.fragment,f),E(xA.$$.fragment,f),E(G2.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(RA.$$.fragment,f),E(V2.$$.fragment,f),E(BA.$$.fragment,f),E(i1.$$.fragment,f),E(PA.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(c1.$$.fragment,f),E(jA.$$.fragment,f),E(nb.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(VA.$$.fragment,f),E(lb.$$.fragment,f),E(XA.$$.fragment,f),E(qb.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(jb.$$.fragment,f),E(UA.$$.fragment,f),E(Qb.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(Hb.$$.fragment,f),E(e6.$$.fragment,f),E(xv.$$.fragment,f),E(o6.$$.fragment,f),E(r6.$$.fragment,f),E(a6.$$.fragment,f),E(kv.$$.fragment,f),E(n6.$$.fragment,f),E(bF.$$.fragment,f),E(s6.$$.fragment,f),E(l6.$$.fragment,f),E(d6.$$.fragment,f),E(FF.$$.fragment,f),E(c6.$$.fragment,f),E(EF.$$.fragment,f),E(f6.$$.fragment,f),E(m6.$$.fragment,f),E(h6.$$.fragment,f),E(wF.$$.fragment,f),E(p6.$$.fragment,f),E(NF.$$.fragment,f),E(u6.$$.fragment,f),E(_6.$$.fragment,f),E(v6.$$.fragment,f),E(DF.$$.fragment,f),E(F6.$$.fragment,f),E(VF.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(C6.$$.fragment,f),E(zF.$$.fragment,f),E(w6.$$.fragment,f),E(o0.$$.fragment,f),E(A6.$$.fragment,f),E(y6.$$.fragment,f),E(x6.$$.fragment,f),E(t0.$$.fragment,f),E($6.$$.fragment,f),E(d0.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(B6.$$.fragment,f),E(f0.$$.fragment,f),E(P6.$$.fragment,f),E(T0.$$.fragment,f),E(I6.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(E0.$$.fragment,f),E(D6.$$.fragment,f),E(y0.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(z6.$$.fragment,f),E(x0.$$.fragment,f),E(Q6.$$.fragment,f),E(P0.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(J6.$$.fragment,f),E(q0.$$.fragment,f),E(Y6.$$.fragment,f),E(O0.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(oy.$$.fragment,f),E(X0.$$.fragment,f),E(ry.$$.fragment,f),E(H0.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(J0.$$.fragment,f),E(iy.$$.fragment,f),E(Z0.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(oT.$$.fragment,f),E(gy.$$.fragment,f),E(lT.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(dT.$$.fragment,f),E(by.$$.fragment,f),E(mT.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(hT.$$.fragment,f),E(Ey.$$.fragment,f),E(a7.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(s7.$$.fragment,f),E(Ly.$$.fragment,f),E($7.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(S7.$$.fragment,f),E(Ry.$$.fragment,f),E(z7.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(W7.$$.fragment,f),E(Ny.$$.fragment,f),E(J7.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(K7.$$.fragment,f),E(Xy.$$.fragment,f),E(v9.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(T9.$$.fragment,f),E(Uy.$$.fragment,f),E(S9.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(B9.$$.fragment,f),E(eL.$$.fragment,f),E(lM.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(dM.$$.fragment,f),E(nL.$$.fragment,f),E(yM.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(xM.$$.fragment,f),E(cL.$$.fragment,f),E(SM.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(BM.$$.fragment,f),E(uL.$$.fragment,f),E(IM.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(NM.$$.fragment,f),E(TL.$$.fragment,f),E(n4.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(l4.$$.fragment,f),E(AL.$$.fragment,f),E(L4.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E($4.$$.fragment,f),E(kL.$$.fragment,f),E(S4.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(B4.$$.fragment,f),E(IL.$$.fragment,f),E(I4.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(N4.$$.fragment,f),E(GL.$$.fragment,f),E(cE.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(mE.$$.fragment,f),E(QL.$$.fragment,f),E(ME.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(CE.$$.fragment,f),E(YL.$$.fragment,f),E(qE.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(jE.$$.fragment,f),E(r8.$$.fragment,f),E(JE.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(KE.$$.fragment,f),E(l8.$$.fragment,f),E(i5.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(c5.$$.fragment,f),E(m8.$$.fragment,f),E(T5.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(E5.$$.fragment,f),E(_8.$$.fragment,f),E(B5.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(I5.$$.fragment,f),E(M8.$$.fragment,f),E(z5.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(W5.$$.fragment,f),E(y8.$$.fragment,f),E(rC.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(aC.$$.fragment,f),E(S8.$$.fragment,f),E(sC.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(iC.$$.fragment,f),E(q8.$$.fragment,f),E(fC.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(gC.$$.fragment,f),E(V8.$$.fragment,f),E(pC.$$.fragment,f),YIe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Nw.$$.fragment,f),C(jw.$$.fragment,f),C(uf.$$.fragment,f),C(Dw.$$.fragment,f),C(Gw.$$.fragment,f),C(Xw.$$.fragment,f),C(gg.$$.fragment,f),C(zw.$$.fragment,f),C(Qw.$$.fragment,f),C(Ww.$$.fragment,f),C(Jw.$$.fragment,f),C(zg.$$.fragment,f),C(Yw.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(rA.$$.fragment,f),C(bh.$$.fragment,f),C(vh.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(iA.$$.fragment,f),C(Ih.$$.fragment,f),C(qh.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(fA.$$.fragment,f),C(gA.$$.fragment,f),C(Dh.$$.fragment,f),C(hA.$$.fragment,f),C(Lu.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(bA.$$.fragment,f),C($u.$$.fragment,f),C(vA.$$.fragment,f),C(__.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(EA.$$.fragment,f),C(v_.$$.fragment,f),C(CA.$$.fragment,f),C(r2.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(LA.$$.fragment,f),C(a2.$$.fragment,f),C(xA.$$.fragment,f),C(G2.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(RA.$$.fragment,f),C(V2.$$.fragment,f),C(BA.$$.fragment,f),C(i1.$$.fragment,f),C(PA.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(c1.$$.fragment,f),C(jA.$$.fragment,f),C(nb.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(VA.$$.fragment,f),C(lb.$$.fragment,f),C(XA.$$.fragment,f),C(qb.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(jb.$$.fragment,f),C(UA.$$.fragment,f),C(Qb.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(Hb.$$.fragment,f),C(e6.$$.fragment,f),C(xv.$$.fragment,f),C(o6.$$.fragment,f),C(r6.$$.fragment,f),C(a6.$$.fragment,f),C(kv.$$.fragment,f),C(n6.$$.fragment,f),C(bF.$$.fragment,f),C(s6.$$.fragment,f),C(l6.$$.fragment,f),C(d6.$$.fragment,f),C(FF.$$.fragment,f),C(c6.$$.fragment,f),C(EF.$$.fragment,f),C(f6.$$.fragment,f),C(m6.$$.fragment,f),C(h6.$$.fragment,f),C(wF.$$.fragment,f),C(p6.$$.fragment,f),C(NF.$$.fragment,f),C(u6.$$.fragment,f),C(_6.$$.fragment,f),C(v6.$$.fragment,f),C(DF.$$.fragment,f),C(F6.$$.fragment,f),C(VF.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(C6.$$.fragment,f),C(zF.$$.fragment,f),C(w6.$$.fragment,f),C(o0.$$.fragment,f),C(A6.$$.fragment,f),C(y6.$$.fragment,f),C(x6.$$.fragment,f),C(t0.$$.fragment,f),C($6.$$.fragment,f),C(d0.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(B6.$$.fragment,f),C(f0.$$.fragment,f),C(P6.$$.fragment,f),C(T0.$$.fragment,f),C(I6.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(E0.$$.fragment,f),C(D6.$$.fragment,f),C(y0.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(z6.$$.fragment,f),C(x0.$$.fragment,f),C(Q6.$$.fragment,f),C(P0.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(J6.$$.fragment,f),C(q0.$$.fragment,f),C(Y6.$$.fragment,f),C(O0.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(oy.$$.fragment,f),C(X0.$$.fragment,f),C(ry.$$.fragment,f),C(H0.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(J0.$$.fragment,f),C(iy.$$.fragment,f),C(Z0.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(oT.$$.fragment,f),C(gy.$$.fragment,f),C(lT.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(dT.$$.fragment,f),C(by.$$.fragment,f),C(mT.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(hT.$$.fragment,f),C(Ey.$$.fragment,f),C(a7.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(s7.$$.fragment,f),C(Ly.$$.fragment,f),C($7.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(S7.$$.fragment,f),C(Ry.$$.fragment,f),C(z7.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(W7.$$.fragment,f),C(Ny.$$.fragment,f),C(J7.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(K7.$$.fragment,f),C(Xy.$$.fragment,f),C(v9.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(T9.$$.fragment,f),C(Uy.$$.fragment,f),C(S9.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(B9.$$.fragment,f),C(eL.$$.fragment,f),C(lM.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(dM.$$.fragment,f),C(nL.$$.fragment,f),C(yM.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(xM.$$.fragment,f),C(cL.$$.fragment,f),C(SM.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(BM.$$.fragment,f),C(uL.$$.fragment,f),C(IM.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(NM.$$.fragment,f),C(TL.$$.fragment,f),C(n4.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(l4.$$.fragment,f),C(AL.$$.fragment,f),C(L4.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C($4.$$.fragment,f),C(kL.$$.fragment,f),C(S4.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(B4.$$.fragment,f),C(IL.$$.fragment,f),C(I4.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(N4.$$.fragment,f),C(GL.$$.fragment,f),C(cE.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(mE.$$.fragment,f),C(QL.$$.fragment,f),C(ME.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(CE.$$.fragment,f),C(YL.$$.fragment,f),C(qE.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(jE.$$.fragment,f),C(r8.$$.fragment,f),C(JE.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(KE.$$.fragment,f),C(l8.$$.fragment,f),C(i5.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(c5.$$.fragment,f),C(m8.$$.fragment,f),C(T5.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(E5.$$.fragment,f),C(_8.$$.fragment,f),C(B5.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(I5.$$.fragment,f),C(M8.$$.fragment,f),C(z5.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(W5.$$.fragment,f),C(y8.$$.fragment,f),C(rC.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(aC.$$.fragment,f),C(S8.$$.fragment,f),C(sC.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(iC.$$.fragment,f),C(q8.$$.fragment,f),C(fC.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(gC.$$.fragment,f),C(V8.$$.fragment,f),C(pC.$$.fragment,f),YIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(ff),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(gf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(HBe),f&&t(hi),w(Nw),f&&t(UBe),f&&t($n),f&&t(JBe),w(jw,f),f&&t(YBe),f&&t(l$),f&&t(KBe),w(uf,f),f&&t(ZBe),f&&t(pi),w(Dw),f&&t(ePe),f&&t(Co),w(Gw),w(Xw),w(gg),w(zw),f&&t(oPe),f&&t(_i),w(Qw),f&&t(rPe),f&&t(wo),w(Ww),w(Jw),w(zg),w(Yw),f&&t(tPe),f&&t(bi),w(Kw),f&&t(aPe),f&&t(Ao),w(Zw),w(rA),w(bh),w(vh),w(tA),f&&t(nPe),f&&t(vi),w(aA),f&&t(sPe),f&&t(yo),w(nA),w(iA),w(Ih),w(qh),w(dA),f&&t(lPe),f&&t(Ti),w(cA),f&&t(iPe),f&&t(Lo),w(fA),w(gA),w(Dh),w(hA),w(Lu),f&&t(dPe),f&&t(Ci),w(pA),f&&t(cPe),f&&t(xo),w(uA),w(bA),w($u),w(vA),w(__),f&&t(fPe),f&&t(yi),w(FA),f&&t(mPe),f&&t($o),w(TA),w(EA),w(v_),w(CA),w(r2),f&&t(gPe),f&&t($i),w(wA),f&&t(hPe),f&&t(ko),w(AA),w(LA),w(a2),w(xA),w(G2),f&&t(pPe),f&&t(Ri),w($A),f&&t(uPe),f&&t(So),w(kA),w(RA),w(V2),w(BA),w(i1),f&&t(_Pe),f&&t(Ii),w(PA),f&&t(bPe),f&&t(Ro),w(IA),w(NA),w(c1),w(jA),w(nb),f&&t(vPe),f&&t(ji),w(DA),f&&t(FPe),f&&t(Bo),w(GA),w(VA),w(lb),w(XA),w(qb),f&&t(TPe),f&&t(Oi),w(zA),f&&t(MPe),f&&t(Po),w(QA),w(HA),w(jb),w(UA),w(Qb),f&&t(EPe),f&&t(zi),w(JA),f&&t(CPe),f&&t(Io),w(YA),w(ZA),w(Hb),w(e6),w(xv),f&&t(wPe),f&&t(Hi),w(o6),f&&t(APe),f&&t(qo),w(r6),w(a6),w(kv),w(n6),w(bF),f&&t(yPe),f&&t(Yi),w(s6),f&&t(LPe),f&&t(No),w(l6),w(d6),w(FF),w(c6),w(EF),f&&t(xPe),f&&t(ed),w(f6),f&&t($Pe),f&&t(jo),w(m6),w(h6),w(wF),w(p6),w(NF),f&&t(kPe),f&&t(td),w(u6),f&&t(SPe),f&&t(Do),w(_6),w(v6),w(DF),w(F6),w(VF),f&&t(RPe),f&&t(sd),w(T6),f&&t(BPe),f&&t(Go),w(M6),w(C6),w(zF),w(w6),w(o0),f&&t(PPe),f&&t(dd),w(A6),f&&t(IPe),f&&t(Oo),w(y6),w(x6),w(t0),w($6),w(d0),f&&t(qPe),f&&t(md),w(k6),f&&t(NPe),f&&t(Vo),w(S6),w(B6),w(f0),w(P6),w(T0),f&&t(jPe),f&&t(pd),w(I6),f&&t(DPe),f&&t(Xo),w(q6),w(j6),w(E0),w(D6),w(y0),f&&t(GPe),f&&t(bd),w(O6),f&&t(OPe),f&&t(zo),w(V6),w(z6),w(x0),w(Q6),w(P0),f&&t(VPe),f&&t(Td),w(W6),f&&t(XPe),f&&t(Qo),w(H6),w(J6),w(q0),w(Y6),w(O0),f&&t(zPe),f&&t(wd),w(K6),f&&t(QPe),f&&t(Wo),w(Z6),w(oy),w(X0),w(ry),w(H0),f&&t(WPe),f&&t(Ld),w(ay),f&&t(HPe),f&&t(Ho),w(ny),w(ly),w(J0),w(iy),w(Z0),f&&t(UPe),f&&t(kd),w(dy),f&&t(JPe),f&&t(Uo),w(cy),w(my),w(oT),w(gy),w(lT),f&&t(YPe),f&&t(Bd),w(hy),f&&t(KPe),f&&t(Jo),w(py),w(_y),w(dT),w(by),w(mT),f&&t(ZPe),f&&t(qd),w(vy),f&&t(eIe),f&&t(Yo),w(Fy),w(My),w(hT),w(Ey),w(a7),f&&t(oIe),f&&t(Dd),w(Cy),f&&t(rIe),f&&t(Ko),w(wy),w(yy),w(s7),w(Ly),w($7),f&&t(tIe),f&&t(Vd),w(xy),f&&t(aIe),f&&t(Zo),w($y),w(Sy),w(S7),w(Ry),w(z7),f&&t(nIe),f&&t(Qd),w(By),f&&t(sIe),f&&t(er),w(Py),w(qy),w(W7),w(Ny),w(J7),f&&t(lIe),f&&t(Ud),w(Dy),f&&t(iIe),f&&t(or),w(Gy),w(Vy),w(K7),w(Xy),w(v9),f&&t(dIe),f&&t(Kd),w(zy),f&&t(cIe),f&&t(rr),w(Qy),w(Hy),w(T9),w(Uy),w(S9),f&&t(fIe),f&&t(oc),w(Jy),f&&t(mIe),f&&t(tr),w(Yy),w(Zy),w(B9),w(eL),w(lM),f&&t(gIe),f&&t(ac),w(oL),f&&t(hIe),f&&t(ar),w(rL),w(aL),w(dM),w(nL),w(yM),f&&t(pIe),f&&t(lc),w(sL),f&&t(uIe),f&&t(nr),w(lL),w(dL),w(xM),w(cL),w(SM),f&&t(_Ie),f&&t(cc),w(mL),f&&t(bIe),f&&t(sr),w(gL),w(pL),w(BM),w(uL),w(IM),f&&t(vIe),f&&t(gc),w(_L),f&&t(FIe),f&&t(lr),w(bL),w(FL),w(NM),w(TL),w(n4),f&&t(TIe),f&&t(uc),w(ML),f&&t(MIe),f&&t(ir),w(EL),w(wL),w(l4),w(AL),w(L4),f&&t(EIe),f&&t(vc),w(yL),f&&t(CIe),f&&t(dr),w(LL),w($L),w($4),w(kL),w(S4),f&&t(wIe),f&&t(Mc),w(SL),f&&t(AIe),f&&t(cr),w(RL),w(PL),w(B4),w(IL),w(I4),f&&t(yIe),f&&t(wc),w(qL),f&&t(LIe),f&&t(fr),w(NL),w(DL),w(N4),w(GL),w(cE),f&&t(xIe),f&&t(Lc),w(OL),f&&t($Ie),f&&t(mr),w(VL),w(zL),w(mE),w(QL),w(ME),f&&t(kIe),f&&t(kc),w(WL),f&&t(SIe),f&&t(gr),w(HL),w(JL),w(CE),w(YL),w(qE),f&&t(RIe),f&&t(Bc),w(KL),f&&t(BIe),f&&t(hr),w(ZL),w(o8),w(jE),w(r8),w(JE),f&&t(PIe),f&&t(qc),w(t8),f&&t(IIe),f&&t(pr),w(a8),w(s8),w(KE),w(l8),w(i5),f&&t(qIe),f&&t(Dc),w(i8),f&&t(NIe),f&&t(ur),w(d8),w(f8),w(c5),w(m8),w(T5),f&&t(jIe),f&&t(Vc),w(g8),f&&t(DIe),f&&t(_r),w(h8),w(u8),w(E5),w(_8),w(B5),f&&t(GIe),f&&t(Qc),w(b8),f&&t(OIe),f&&t(br),w(v8),w(T8),w(I5),w(M8),w(z5),f&&t(VIe),f&&t(Uc),w(E8),f&&t(XIe),f&&t(vr),w(C8),w(A8),w(W5),w(y8),w(rC),f&&t(zIe),f&&t(Kc),w(L8),f&&t(QIe),f&&t(Fr),w(x8),w(k8),w(aC),w(S8),w(sC),f&&t(WIe),f&&t(of),w(R8),f&&t(HIe),f&&t(Tr),w(B8),w(I8),w(iC),w(q8),w(fC),f&&t(UIe),f&&t(af),w(j8),f&&t(JIe),f&&t(Mr),w(D8),w(O8),w(gC),w(V8),w(pC)}}}const Dwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Gwt(A){return GCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hwt extends qCt{constructor(g){super();NCt(this,g,Gwt,jwt,jCt,{})}}export{Hwt as default,Dwt as metadata};
